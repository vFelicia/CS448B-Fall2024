With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language we have
00:05 - discussed strings in C++ now from this
00:07 - video I'm going to start a new topic
00:08 - that is functions in C++ right all basic
00:12 - things about function we'll see in this
00:13 - video like what is a function what is
00:15 - need of function uh different types of
00:17 - function buil-in function user defined
00:18 - function how to define a function how to
00:20 - declare a function calling of a function
00:22 - and different types of functions with
00:24 - the help of proper program you'll see
00:25 - all these things in this video right and
00:28 - in detail more in more deep uh we'll see
00:32 - function in later videos right so it's
00:35 - like introduction to functions in C++
00:37 - now what is a function see let me just
00:40 - relate try to relate this with the real
00:42 - life example like suppose I know
00:44 - something I know something like I know
00:45 - how to cook how to make it but my
00:48 - friends don't know so one of my friend
00:50 - came to me and asked then I tell her the
00:53 - recipe then after some time second
00:56 - friend you know uh came to me and asked
00:59 - the recipe then I will tell her the
01:01 - recipe again one more friend came to me
01:03 - and I tell her the same recipe again so
01:05 - what I'm I'm here doing is I'm repeating
01:09 - those things I'm just telling all the
01:11 - steps again and again right so rather
01:14 - than this what I can do is I just uh
01:16 - write down those steps on a piece of
01:18 - paper and I just call it a like recipe
01:22 - to make idly and something like
01:28 - this and when whenever my friend came to
01:32 - me to ask recipe then I just uh I just
01:36 - tell her to read all the steps here
01:38 - right rather than repeating those
01:41 - steps so whenever my friend is going to
01:45 - come to ask me the recipe I don't need
01:48 - to tell to every friend again and again
01:51 - the same steps because I have written
01:53 - one time only all the steps here right
01:55 - and I just call this a recipe they'll
01:58 - just read it and yeah they're going to
02:00 - make it Le so it is going to save my
02:03 - time my energy I just utilize my time in
02:06 - this time in doing some other meaningful
02:08 - work right so same concept this kind of
02:12 - thing we can relate in programming right
02:15 - suppose you want to calculate addition
02:18 - of a two number simple example simplest
02:21 - example I'm taking so what you will
02:23 - write this is the simplest example like
02:26 - these four steps if you don't want to
02:28 - take input from user if you want to take
02:30 - from user we can use see out scene right
02:33 - so this is how we can calculate sum so
02:36 - suppose in my program I have a large
02:38 - program and I want to calculate some
02:40 - five times or 10
02:41 - times so you have to write like four
02:44 - different different numbers here five
02:46 - and six then seven and 8 or any other
02:49 - numbers right so I have to write down
02:54 - these
02:55 - steps five times or seven times as many
02:58 - times I want to calculate some in my
03:00 - program all these steps right like maybe
03:04 - in a these are Global variables and some
03:07 - is global variable but you have to
03:09 - calculate like Su is equal to a plus b c
03:10 - out is equal to Su and this thing yeah
03:12 - this is simplest one but yeah in this
03:15 - case we are repeating the same code
03:17 - again and again in my program right so
03:21 - just in my program let's do some
03:23 - different thing and here I want to
03:24 - calculate some again so same write down
03:27 - these steps here
03:30 - right so rather than repeating the same
03:32 - steps again and again what we we can do
03:34 - is we can just write down these steps
03:37 - the steps which are repeated again and
03:40 - again those steps in a different thing
03:45 - right and we just name it something
03:48 - right so I just name it
03:50 - sum and here just write down these four
03:53 - or five statements to calculate
03:57 - some so it's like a function or or you
04:01 - have to put these parenthesis here round
04:05 - brackets these are
04:07 - mandatory after seeing this we can say
04:09 - that yeah this is a function sum is a
04:11 - function otherwise we cannot say like
04:14 - sum is what we don't know but now if
04:17 - these round brackets are there then we
04:18 - can say that yeah sum is a function
04:20 - right so sum is a function here we just
04:23 - write down these steps in these bres
04:26 - curly bres and whenever you want to
04:28 - calculate sum in your program you just
04:30 - call this function and how to call you
04:33 - just have to write down the name of the
04:35 - function and these brackets but there
04:39 - are different different ways to call a
04:40 - function to define a function and all
04:43 - but yeah for now we are not using any
04:45 - parameter list or arguments or return
04:47 - return type or anything this is just to
04:50 - make you understand what is a function
04:51 - and why we need function right so you
04:54 - don't have to write down all the four or
04:55 - five steps whatever is there in the
04:57 - function again and again in your
05:00 - program you just call this function in a
05:03 - single line that's it and control will
05:05 - go there and some will be calculated
05:07 - again if you want to calculate some
05:09 - again you can call
05:11 - some again the control will go there and
05:13 - that's it or many arguments also we can
05:16 - pass right so it means we are going to
05:18 - reuse this code again and
05:20 - again right and the functions are using
05:24 - uh going to reduce the code
05:27 - redundancy the repetition of code
05:30 - right because if you write these these
05:32 - four or five lines in your program again
05:35 - again again again then obviously code
05:37 - would be lendy there are so many
05:38 - repeated lines code rency is increasing
05:42 - here right complexity of program is also
05:45 - increasing right but if you use function
05:48 - it is going to reduce the code
05:49 - redundency you don't have to write these
05:51 - statements again and again right so
05:55 - better memory utilization is also there
05:58 - uh code would be more readable more
06:00 - maintainable if you use functions it
06:02 - would be easy to debug the code because
06:04 - there are less number of lines right so
06:06 - it would be easy to debug the
06:09 - code right so we can say functions are
06:12 - important for reusing the code just
06:15 - Define it once and use it many times in
06:19 - your program to reduce the redundancy
06:22 - code redundency
06:23 - right that's why functions are important
06:27 - if we write a small program that is fine
06:29 - because still now we have written so
06:30 - many programs without using function but
06:32 - when you are working on a project when
06:33 - you write a large program then functions
06:36 - are
06:37 - must right because we cannot write
06:40 - everything in main function till now we
06:43 - are using we are writing everything like
06:45 - int Main and everything whatever you
06:46 - want to do in this main function
06:50 - only but if you have a large program
06:53 - then it's not a better practice to write
06:55 - everything in main function use uh in
06:57 - main program in main function better to
07:00 - use your functions different different
07:01 - functions right so and something like
07:04 - this if
07:07 - if and if we have a main program like if
07:10 - you write everything in main program
07:11 - like some we have for input there are
07:14 - three or four lines we are doing some
07:15 - processing these are some statements for
07:18 - output these are some statements right
07:21 - so see the code is lengthy and not so
07:25 - much readable although there are few
07:27 - number of lines but if a large program
07:29 - then it's not more readable or
07:31 - maintainable if you write some
07:32 - everything in main function rather than
07:34 - this what we can do is if we do
07:35 - something like this for input we make
07:37 - another a different function and in this
07:40 - function read input we have these four
07:42 - lines in this for this processing we
07:45 - have another function do processing and
07:47 - there we have these four or five lines
07:49 - for output we have a different function
07:51 - name like maybe print output and there
07:53 - we have these four lines so rather than
07:55 - writing all the things here in main
07:57 - function what we can do is now we can
07:58 - just call reading input do processing
08:00 - print output so now this is the case in
08:03 - main we just have to write three lines
08:05 - read input just call this thing do
08:08 - processing call this thing print output
08:10 - call this
08:11 - thing so this is like more readable more
08:16 - maintainable and concise code you know
08:20 - it's looking beautiful rather than this
08:23 - right and if in our program again if you
08:26 - want to take input or processing or
08:28 - output you just call again here after
08:31 - some processing you just call like read
08:33 - input do processing or print output or
08:35 - only read input and these kind of
08:38 - things so again and again we can call
08:40 - these three things right whenever you
08:43 - want in our main or in any other
08:45 - function
08:46 - also right but here if you don't have
08:49 - function this is for input and after
08:51 - this somewhere in later in your program
08:53 - if you want to take again input so same
08:55 - you have to write down these four
08:57 - steps right but if you you are using
09:00 - function don't need to write the these
09:02 - steps you just call the function and
09:04 - just by calling the name of the function
09:07 - and these parenthesis that's it so now
09:10 - we are getting my point like why
09:12 - functions are important right need what
09:15 - is beauty of using
09:16 - functions fine okay now proper synx let
09:21 - me just tell you the synx for functions
09:24 - or you guys just give me some example
09:25 - real life example of using functions
09:28 - right where you are using function or
09:30 - which kind of you know phenomena or
09:32 - which kind of situation in your life are
09:34 - related with the concept of functions
09:36 - right so syntax of function writing a
09:39 - function or defining a function is see
09:42 - we write return
09:44 - type then function name then here the
09:49 - parameter list means parameter 1
09:52 - parameter
09:58 - 2 and so on and here we have some
10:06 - statements and here we have return
10:12 - statement this is syntax of creating or
10:16 - defining a function return type means
10:19 - what kind of value this function is
10:21 - returning right suppose if you are using
10:23 - if you're defining a function to add two
10:26 - numbers two integer number so it will
10:29 - return
10:30 - sum and that would be int so int would
10:32 - be return type of that function right
10:34 - what kind of value that function is
10:35 - returning but it's not mandatory that
10:38 - every function is going to return
10:39 - something maybe some function are not
10:41 - not returning a value so the return type
10:44 - there would be void I'll tell you I'll
10:46 - show you practically all the examples
10:49 - function name function name should be
10:50 - meaningful like I'm going to you can use
10:53 - fun one function 2 function three this
10:55 - type of name also a BC XY Z but better
10:59 - to use a meaningful name if suppose for
11:00 - addition you are making a function then
11:02 - the name of the function should be add
11:05 - or sum or addition this thing so that by
11:08 - looking the name of that function we can
11:10 - uh you can uh we can assume that or we
11:13 - can get to know that what this function
11:15 - is going to do right
11:18 - parameters whatever data you pass in
11:21 - that
11:22 - function right it is not mandatory to
11:25 - provide these parameters some functions
11:27 - are without
11:30 - parameters also those functions also
11:32 - I'll show you
11:34 - right then in curly bracket this is body
11:37 - of the function here the statements
11:40 - which would be executed right when you
11:42 - call this function and at last you have
11:44 - a return statement whatever value this
11:46 - function is going to return there we
11:48 - write that return and like in addition
11:51 - some would be returning the function is
11:52 - returning some so return sum like this
11:56 - right so for function name same rules
11:58 - for we know you know the for naming a
12:01 - variable the rules same rules have to be
12:03 - applied to name a function right and I
12:06 - told you these are the variables that we
12:09 - pass in the functions
12:12 - right and this is like actual code what
12:15 - this function is going to do so function
12:17 - is like a piece of code if you uh you
12:20 - know want to know the proper definition
12:22 - the function is a piece of code or you
12:24 - can say group of statements or block of
12:26 - code which perform a specific task
12:29 - that's it that is
12:31 - function or it's a piece of code that
12:33 - will take some input perform some
12:35 - computation and give you some output
12:39 - right so it is going to perform a
12:41 - specific task right that is a function
12:45 - now there are two types of functions
12:47 - buil-in function and user defined
12:49 - function Now buil-in function means
12:51 - these are predefined functions you can
12:53 - directly use those function right like
12:55 - we have a you have to use proper header
12:57 - for that like if you you want to use
12:59 - that function square root if you want to
13:01 - calculate square root of a number so
13:03 - this function is already defined in math
13:05 - Library cmath so you have to include
13:07 - that in your heter hash include cth and
13:11 - you can use square root this
13:13 - function like power if you want to
13:15 - calculate power of any number then we
13:17 - can use power this function s cosine
13:19 - there are many functions in this these
13:22 - libraries many predefined functions so
13:24 - you just directly include those header
13:27 - specific to that you want to to use the
13:29 - functions and you can directly use those
13:31 - function you can directly call those
13:32 - function in your program these are
13:33 - predefined functions someone has already
13:35 - defined these functions for us we can
13:37 - directly use those
13:39 - functions right but next is user defined
13:42 - function so there are some user defined
13:45 - function also so in predefined function
13:47 - you don't need to know how this function
13:49 - is working how this function is
13:51 - calculating the square root we don't
13:52 - need to know we just use this right like
13:56 - when you were using in string uh that
13:59 - that member function
14:01 - find that is going to find if you want
14:05 - to find out any character or a substring
14:08 - so you just use this fine function or
14:10 - you just use the length function to
14:12 - calculate length of a string you don't
14:15 - need to know the actual working of these
14:17 - functions right these are built in and
14:20 - we're using these
14:21 - function okay but if you are writing
14:25 - that function then definitely you need
14:26 - to know the working of that function and
14:29 - that is in case of user defined function
14:32 - right so buil-in function and next user
14:35 - defined function so we are going to
14:36 - Define some function those are known as
14:38 - user defined function right but for user
14:41 - defined function basically there are
14:43 - three things in a function that are
14:45 - important that is function declaration
14:47 - function definition and function
14:49 - calling now what is function declaration
14:52 - what is function definition what is
14:54 - function calling that I'll show you
14:56 - practically with the help of a example
14:59 - so I hope uh Basics are clear like what
15:01 - is a function why we need function some
15:03 - advantages of using function right if
15:06 - you have any doubt you can just let me
15:08 - know in comment section so let's see
15:10 - some programs using functions so after
15:12 - creating a new file now we are first
15:15 - we'll see how to define a function right
15:19 - because if you're are going to define a
15:21 - function means user defined function for
15:22 - user Define a function three things are
15:24 - important function declaration
15:25 - definition and calling so how to define
15:27 - a function so simple example we'll take
15:30 - for sum of two number right
15:34 - so let's see the for main we are just
15:38 - defining a function sum simplest one
15:43 - void
15:47 - sum so return type is void function name
15:50 - is sum and parameter list see there is
15:52 - no parameter in this list so this
15:54 - function with the type of this function
15:57 - is with no argument
15:59 - means here no argument these parameter
16:03 - these are also known as argument yeah
16:06 - whenever we actually we are calling that
16:08 - function in that time we actually pass
16:10 - something those are known as arguments
16:12 - and in definition these are known as
16:13 - parameters so with no arguments and no
16:17 - return type this is that function
16:20 - right so here only I'm taking like int a
16:24 - I hope you can easily write down write
16:25 - down how to add two numbers the logic
16:29 - right so this is function definition
16:33 - right no return type no argument we're
16:36 - passing and this is body of the function
16:38 - here I'm just writing the logic to print
16:41 - sum right there is no return statement
16:44 - here because it is not returning
16:46 - anything but you can write down here
16:49 - simple return that's it but this thing
16:51 - is
16:55 - optional if you don't want to write
16:57 - return that's fine because this one
16:58 - function is not returning anything as
17:00 - soon as the control will go to here the
17:02 - return statement it means end of this
17:04 - function and it will return the control
17:06 - where you are calling the function right
17:10 - now calling how to call function just
17:12 - name of the function
17:14 - sum
17:16 - and you don't need to pass anything
17:18 - because this function is not accepting
17:20 - any parameter any argument so don't need
17:22 - to pass anything here semicolon here and
17:25 - this is not returning anything so just
17:29 - sum and that's
17:31 - it if summer is not giving you something
17:34 - then you don't need to put your hand
17:36 - something like this because you have
17:38 - nothing to hold in your hands right so
17:42 - that's sum we are calling this function
17:45 - and see
17:47 - here in main function also we are using
17:50 - return statement return zero return zero
17:53 - means it is returning zero means
17:56 - successful compilation of that
17:57 - successful exit from from this function
18:00 - from main function right so let me run
18:03 - this and show you the
18:07 - output A and B Valu is 1 2 and the C sum
18:11 - is
18:13 - three right but one thing you have
18:15 - noticed I have written this definition
18:19 - of the
18:20 - function before calling of the function
18:24 - this is important before calling if if
18:29 - you just I just cut this
18:32 - thing and after
18:35 - calling I'm defining the
18:37 - function right let me show you what
18:40 - output you will get see you'll get an
18:43 - error the sum was not declared in this
18:47 - scope in line number this this
18:52 - seven some is not declared so for one
18:55 - solution for this is we have function
18:58 - declaration function prototype this
19:00 - thing will only tell the compiler the
19:03 - name of the function number of arguments
19:05 - of the
19:06 - function return type of the
19:09 - function and the data type of the
19:12 - argument that function is accepting so
19:16 - suppose if you modify this Su function
19:19 - so in this case if you are you are going
19:21 - to solve the problem then before calling
19:24 - we just give a prototype of the function
19:25 - or we just declare the function how to
19:27 - declare return type typ of the function
19:29 - is void name of the function is sum and
19:32 - there is no argument no parameter list
19:34 - here right and just put semicolon in
19:37 - declaration yeah semicolon is must in
19:40 - Define while defining a function no
19:42 - semicolon viral calling yes semicolon is
19:47 - mandatory so now that's fine now it will
19:50 - run see enter values 3 4 and answer is
19:56 - seven right
19:59 - so if you writing a small program then
20:01 - no need to you know use these function
20:04 - declaration or function prototype just
20:05 - Define the function before calling the
20:07 - function that's it right but in large
20:10 - projects in large when you're working in
20:12 - large projects then it all it's always a
20:15 - good practice to declare all the
20:18 - functions at the beginning just after
20:21 - the header
20:22 - files just to know yeah these function
20:24 - we are going to Define we are going to
20:26 - use in this program this would be the
20:28 - return type of the function this would
20:29 - be the name of the function these number
20:30 - of parameters we are going to pass and
20:32 - this would be the data type of the
20:34 - parameters so if you if
20:37 - uh modify it a little bit suppose I want
20:41 - to here while calling I want to pass my
20:46 - numbers like I want to add three and
20:48 - four I want to pass so while defining
20:52 - the
20:53 - function declaration also you need to
20:55 - change but we'll change this later while
20:58 - defining the function if you are passing
21:00 - three and four if I'm giving you
21:01 - something you need something you need
21:04 - your hand or something to hold that
21:05 - thing right and here we are passing the
21:07 - values so in computer memory or here we
21:10 - have variable to hold the data so while
21:13 - defining here in parameter you have to
21:16 - pass two parameters because two values
21:19 - we are going to accept right and of
21:22 - integer type so
21:23 - int any name you can take any variable
21:26 - name like a or XY Z int
21:30 - B here you don't need to take these A
21:33 - and B just sum is equal to zero no need
21:36 - to ask value from the user because I
21:39 - passing the values three and four sum a
21:41 - plus b and if you want to return some I
21:44 - don't want to print some here I want to
21:47 - return sum so return
21:51 - sum that's it or a plus b no need to
21:55 - write down this sum and a plus b that is
21:58 - also
21:59 - fine right no need to take this in sum
22:03 - just a +
22:06 - b but see here you are returning a plus
22:10 - b but this is going to produce some uh
22:13 - error return value type does not match
22:16 - the function type because here the
22:18 - return type of the function is void
22:19 - means it is not going to return anything
22:21 - but you are returning sum you are
22:23 - returning integer value so you have to
22:25 - change the return type that should be
22:27 - int
22:29 - so this function is with arguments and
22:33 - with return type this is second type of
22:35 - function first we have seen function
22:37 - with no argument and no return type
22:39 - function with argument and with return
22:43 - type okay so if you run this this will
22:47 - produce some error the same sum was not
22:50 - declared in this scope because you are
22:52 - defining the function but before you are
22:54 - calling the
22:56 - function means before defining you are
22:58 - calling the function always we use the
23:00 - variables but before we Define those
23:02 - variables otherwise it will give ER so
23:04 - same this is kind of use of the function
23:07 - like we I'm calling the function like I
23:10 - want I am going to read I'm going you
23:13 - know I want to read the recipe to make
23:16 - ID my friend is going to read the recipe
23:20 - to make the ID but I haven't written the
23:22 - recipe yet so obviously it will give
23:24 - error right say I haven't defined the
23:27 - function but you are calling the
23:30 - function so the solution is you just
23:32 - give here prototype of the function so
23:36 - int name and two parameter this function
23:40 - will take so here you need to write down
23:42 - here int X in y and
23:49 - semicolon but the name of the parameter
23:52 - is not compulsory to write in
23:54 - declaration in declaration in definition
23:57 - yeah name name is compulsory so if you
24:01 - don't put here the name of these
24:03 - parameter that is also fine because
24:05 - declaration or prototype this
24:14 - is called function declaration or
24:17 - function prototype it is going to tell
24:20 - the compiler only the type of the return
24:24 - type of the function name of the
24:25 - function number of argument in that
24:27 - function and
24:28 - types types of argument here int and int
24:32 - types so this is also fine right but
24:36 - it's always a good practice to write
24:37 - down
24:39 - here name of the those also the
24:43 - name these name it's not compulsory to
24:46 - match in definition and declaration here
24:48 - I have taken XY here I have taken AB
24:50 - that is also fine right but order should
24:53 - match if here I I'm going to take
24:57 - another example example suppose I'll
24:59 - show you this thing with example one
25:01 - more example so I for function
25:02 - declaration prototype and function
25:05 - calling and function definition is clear
25:07 - to you guys right now if a function
25:10 - is something like this with no return
25:14 - type but with argument suppose a
25:17 - function is something like this so I
25:18 - have function display and that is
25:21 - accepting one argument that is of type
25:24 - string C++ string object right string
25:27 - name so this says C++ string object okay
25:31 - and it will print high and whatever the
25:33 - name so it is not returning anything
25:36 - it's just printing not returning
25:37 - anything so you can write down simply
25:40 - return but that is optional if you don't
25:41 - write that is also fine right now okay
25:44 - call the function in main function so we
25:46 - generally call the function into main
25:48 - function but we can call a function into
25:50 - another function also right but you know
25:53 - whenever you are going to run this code
25:55 - first of all control will go to main
25:57 - function so whatever function or
25:59 - whatever you will write in main function
26:02 - that are going to execute only if you
26:04 - have defined a function if you have uh
26:07 - given a protype of the function but you
26:08 - haven't called that function in main
26:10 - directly or indirectly right then that
26:12 - function is not going to
26:14 - execute right so if you want to execute
26:16 - a function you have to call that
26:17 - function into main uh function either
26:20 - directly or
26:21 - indirectly
26:23 - right so let's call this in main like
26:29 - display and here I'm passing Jenny what
26:32 - do you think it will run or it will give
26:35 - any
26:36 - error pause the video and think and just
26:39 - write down the answer let's
26:46 - this display was not declared in this
26:49 - scope in this in main scope you are
26:52 - calling this in here but you you have
26:54 - defined this after calling so if you
26:57 - have to solve this either define this
26:59 - before calling right otherwise give
27:02 - prototype of that function but it's
27:04 - always a good practice to give first
27:05 - prototype then you just call and you can
27:08 - Define anywhere that function in your
27:10 - program just give the Prototype first at
27:13 - first okay so let's give the Prototype
27:17 - here the function return type is void
27:23 - function name is display and string type
27:27 - of
27:30 - argument it will
27:33 - receive that's it if you want to write
27:35 - down the name that is also fine you can
27:37 - write down any string variable name
27:39 - String name or ABC or a or anything but
27:43 - this data type is mandatory name is not
27:45 - mandatory to give in Prototype let's run
27:49 - this and see what output you'll get here
27:53 - okay let's run this
27:56 - now hi Jen
27:59 - actually you are giving here A C literal
28:02 - so what it will it is accepting it is
28:04 - expecting a C+ plus string object so it
28:07 - will convert it implicitly to a string
28:10 - object and it will not give any error
28:13 - next thing you can also do if if uh just
28:16 - take like STD or don't write STD here or
28:20 - here you don't need to write STD also
28:22 - because we are using STD name space so
28:25 - just remove
28:26 - this that's it
28:29 - right and just write down here
28:31 - string name equal to I'm writing here
28:35 - rather than passing here I'm just
28:37 - passing name so I've taken a name C++
28:40 - string object you can see here gen and
28:44 - I'm passing this object name here right
28:47 - rather than name you can take s also
28:50 - it's not compulsory to take the same
28:54 - name like
28:55 - here the parameter name is name and here
28:58 - also we are taking name so it can be
29:00 - different let's run this and
29:03 - see it will print like high J this thing
29:06 - is also fine so in this case actually we
29:08 - are passing C++ object so no conversion
29:10 - would be there right so it is a type of
29:15 - function
29:16 - with argument without return type right
29:21 - these are I'm uh telling you the types
29:24 - four types function with no argument
29:28 - no return return type function with no
29:30 - argument but with return return type
29:32 - function with argument no return type
29:35 - function with argument with return type
29:37 - so three types we have discussed one is
29:39 - remaining that is function with return
29:42 - type but no
29:44 - arguments right okay let's see that
29:47 - thing also here with return type suppose
29:50 - return type of the function is
29:51 - string but no argument we are passing
29:54 - here so string display here no argument
29:56 - means just remove this
29:59 - here also we cannot pass any argument
30:01 - right but see it is returning something
30:04 - this function is returning going to
30:05 - return a string so here rather than
30:09 - printing we will
30:13 - return suppose here we
30:16 - have string name is equal to like
30:20 - Jenny and it will return
30:26 - name return
30:28 - a string type obviously name so
30:31 - obviously return type is string and if
30:33 - it is returning something then while
30:36 - calling this function it is returning
30:38 - you name so you should have something to
30:41 - hold that
30:42 - name right so whatever it will return
30:45 - that we can
30:48 - take in a variable like string S and S
30:52 - equal to display and then see out simply
30:56 - s
30:58 - that's
30:59 - it let's run this I don't know it will
31:03 - work yeah it is working it is printing
31:06 - you Jenny right so this function
31:10 - is without sorry without argument with
31:14 - return time right but see let me
31:17 - just uh here I'm not writing this thing
31:22 - in see out only I'm just calling
31:25 - this display so what do you think
31:28 - it will work yes definitely it will work
31:32 - directly we can print using C out also
31:36 - rather than storing this in a particular
31:37 - variable we can simply print this see
31:39 - out means yeah we are expecting
31:42 - something that this function is going to
31:44 - return something and see out means just
31:47 - print that thing right but if this
31:50 - function is not returning anything
31:52 - suppose this is end
31:59 - or sorry not returning anything means it
32:01 - should be void void display it is not
32:05 - returning anything just remove this
32:07 - thing
32:08 - [Music]
32:10 - and here we are just in display we are
32:14 - just printing C out
32:18 - hyen right so same Pro you have to
32:21 - modify the Prototype as well void name
32:24 - is same no argument not returning
32:27 - anything
32:28 - and here now I'm calling this display
32:32 - see out display so what do you think it
32:34 - will work think pause the video think
32:37 - and write down this thing in comment
32:39 - section it will not work it will not
32:42 - work see the red line here right because
32:45 - if you are calling this in see out means
32:47 - you are going to print
32:49 - something and we are expecting to return
32:52 - something from this display but it is
32:54 - not returning anything the type is void
32:57 - so you cannot write down here see out
32:59 - just call display simply that's it and
33:03 - now it will work fine no error see hen
33:06 - it is printing right so this also you
33:08 - need to take care if the function is not
33:09 - returning anything you cannot call this
33:11 - function directly in see out
33:13 - statement now how I think three things
33:15 - are clear to you guys declaration
33:18 - definition calling how to use how to do
33:20 - the these things why function
33:22 - declaration is important and why and
33:24 - when right but declaration is not
33:27 - mandatory in your program if you're
33:29 - writing a small program just Define that
33:31 - function before calling the function
33:33 - that's it no declaration is needed no
33:35 - prototype is needed right now how this
33:38 - function are working in that stag in
33:41 - memory let me show you this thing with
33:43 - one example we have the simple example
33:47 - here we have two function GRE and
33:48 - display in GRE we have only we just
33:51 - printing high in display we printing
33:52 - like first line is see out I'm in
33:54 - display function then second line in
33:56 - second line I'm calling greed function
33:57 - function so we can call a function from
34:00 - another function it's not compulsory to
34:02 - call a function within main only right
34:05 - now one second line is also there I'm
34:07 - exiting display function and in main
34:09 - function I'm just calling display see
34:11 - I'm not calling greed here I'm just
34:13 - calling display so it is not compulsory
34:15 - to call all the function in main
34:17 - function but I'm calling this GD
34:20 - indirectly in main function indirectly
34:22 - means using display function I'm calling
34:25 - display and within display I'm calling
34:26 - GRE so indirectly I'm calling breed from
34:30 - Main so if I run this then it will print
34:33 - like first I'm in display function then
34:35 - whatever is there in GRE function second
34:36 - line High then I'm exiting display
34:38 - function right now how the these
34:42 - functions and this are working for each
34:44 - function a step frame is located right
34:48 - so we have a main memory so let me show
34:52 - you suppose this is a ram main memory so
34:54 - whenever you execute a program that
34:57 - would be first of all loaded into main
34:58 - memory so that main function program
35:00 - would start execution from Main so that
35:03 - for main of frame would be allocated for
35:06 - that main function this is this stack
35:09 - frame is for main right so
35:14 - suppose we have a stack and first frame
35:17 - in that stack is main so if I do so this
35:21 - is kind of like stack we have so first
35:24 - we have frame for Main right for main
35:28 - function then in main function we are
35:31 - calling so some memory will be allocated
35:33 - to this main from this stack in this
35:35 - stat frame the whatever the local
35:37 - variable for this main for those
35:39 - variables and functions and all right so
35:42 - in main I'm calling display right so now
35:45 - control will go to here display so one
35:48 - more frame stack frame for this function
35:52 - display
35:58 - so here we have display so some one more
36:00 - frame would be allocated for this
36:01 - function display right so whatever the
36:04 - variable local variable of this display
36:06 - memory for those variable would be
36:07 - located here right now first we have so
36:12 - now active frame is display right now
36:15 - this is the active frame display so it
36:17 - will print first time in display
36:18 - function now second line is greed so GRE
36:20 - it will the control will go to
36:22 - here the definition of the function is
36:25 - here so one more stack frame would be
36:28 - in this stag that is for greet now
36:32 - active frame is this one for this
36:34 - function greet so now some memory would
36:37 - be allocated for this in from Main
36:38 - memory for this grid function whatever
36:42 - the local variables are there in this GD
36:44 - function memory for those and all
36:46 - whatever you will do here so GD we are
36:49 - just printing C out high so it will
36:51 - print first high
36:55 - and no return
36:58 - statement but as soon as it will see
37:00 - this closing bracket
37:02 - means it is going to return from this
37:05 - GRE and where where you are calling this
37:08 - function here in this line right so now
37:13 - this Frame is out from the
37:15 - stack this Frame is out from the stack
37:18 - now active frame is display because
37:20 - again control is in this function
37:23 - display right now this memory would also
37:26 - be
37:29 - removed erased from this main so
37:34 - whatever the local variables in this
37:35 - greet those memory has been freed right
37:39 - in GRE if we have suppose in a like in a
37:42 - is equal to 5 so some memory would be
37:44 - allocated for this
37:45 - N5 as soon as you'll go back from this
37:48 - grd this memory would be out means fre
37:53 - for these local variables right now
37:55 - active frame is displayed
37:58 - so now in display we are having one more
38:00 - line that is I'm exiting display
38:01 - function so it will print that line and
38:04 - now as soon see the closing bracket or
38:06 - the return statement means exit from
38:09 - this current function and where you are
38:11 - calling that function in main so control
38:13 - will go to here so now this St frame
38:17 - frame would be also popped out from here
38:20 - and now active frame is
38:22 - main right and that's it in main also we
38:26 - have nothing after
38:29 - display we have like return
38:32 - zero so return zero means now main would
38:35 - also be popped up from the step right
38:38 - and these memory would also be raised
38:39 - from this main memory right so that's it
38:43 - this is how if you have more than one
38:45 - function and we are calling then how
38:47 - this function are the internal working
38:48 - of these functions using stack frames
38:51 - and all right so in this case if you use
38:54 - function then the memory would be better
38:56 - there would be better memory utilization
38:58 - why because if this function is local to
39:01 - this grid then as soon as you will come
39:03 - back from this grid the memory would be
39:06 - freed right but if you write this int a
39:09 - or everything within main function then
39:12 - from the starting of the main program
39:15 - till the ending of the program the
39:17 - memory would be still there for all the
39:20 - local variables all the function all the
39:22 - things right that would not be erased
39:26 - but as soon as you go back from this
39:28 - grid this memory would be raised and
39:29 - this memory can be utilized for any
39:31 - other task also so if use function then
39:34 - there would be better memory utilization
39:35 - as well this is one more advantage of
39:37 - using function right I hope you got the
39:40 - working of this thing using this
39:43 - one and if the function is not turning
39:45 - anything you can write down here void as
39:47 - well but no need void is also means
39:50 - there are no parameters or no nothing
39:52 - that's it for this video so I hope
39:55 - basics of functions Circ to you guys in
39:57 - the next we'll see uh function how to
40:00 - pass the argument call by value and call
40:02 - by reference this thing right so now
40:04 - I'll see you in the next video byebye
40:06 - take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we have discussed strings in C++ now from this video I'm going to start a new topic that is functions in C++ right all basic things about function we'll see in this video like what is a function what is need of function uh different types of function builin function user defined function how to define a function how to declare a function calling of a function and different types of functions with the help of proper program you'll see all these things in this video right and in detail more in more deep uh we'll see function in later videos right so it's like introduction to functions in C++ now what is a function see let me just relate try to relate this with the real life example like suppose I know something I know something like I know how to cook how to make it but my friends don't know so one of my friend came to me and asked then I tell her the recipe then after some time second friend you know uh came to me and asked the recipe then I will tell her the recipe again one more friend came to me and I tell her the same recipe again so what I'm I'm here doing is I'm repeating those things I'm just telling all the steps again and again right so rather than this what I can do is I just uh write down those steps on a piece of paper and I just call it a like recipe to make idly and something like this and when whenever my friend came to me to ask recipe then I just uh I just tell her to read all the steps here right rather than repeating those steps so whenever my friend is going to come to ask me the recipe I don't need to tell to every friend again and again the same steps because I have written one time only all the steps here right and I just call this a recipe they'll just read it and yeah they're going to make it Le so it is going to save my time my energy I just utilize my time in this time in doing some other meaningful work right so same concept this kind of thing we can relate in programming right suppose you want to calculate addition of a two number simple example simplest example I'm taking so what you will write this is the simplest example like these four steps if you don't want to take input from user if you want to take from user we can use see out scene right so this is how we can calculate sum so suppose in my program I have a large program and I want to calculate some five times or 10 times so you have to write like four different different numbers here five and six then seven and 8 or any other numbers right so I have to write down these steps five times or seven times as many times I want to calculate some in my program all these steps right like maybe in a these are Global variables and some is global variable but you have to calculate like Su is equal to a plus b c out is equal to Su and this thing yeah this is simplest one but yeah in this case we are repeating the same code again and again in my program right so just in my program let's do some different thing and here I want to calculate some again so same write down these steps here right so rather than repeating the same steps again and again what we we can do is we can just write down these steps the steps which are repeated again and again those steps in a different thing right and we just name it something right so I just name it sum and here just write down these four or five statements to calculate some so it's like a function or or you have to put these parenthesis here round brackets these are mandatory after seeing this we can say that yeah this is a function sum is a function otherwise we cannot say like sum is what we don't know but now if these round brackets are there then we can say that yeah sum is a function right so sum is a function here we just write down these steps in these bres curly bres and whenever you want to calculate sum in your program you just call this function and how to call you just have to write down the name of the function and these brackets but there are different different ways to call a function to define a function and all but yeah for now we are not using any parameter list or arguments or return return type or anything this is just to make you understand what is a function and why we need function right so you don't have to write down all the four or five steps whatever is there in the function again and again in your program you just call this function in a single line that's it and control will go there and some will be calculated again if you want to calculate some again you can call some again the control will go there and that's it or many arguments also we can pass right so it means we are going to reuse this code again and again right and the functions are using uh going to reduce the code redundancy the repetition of code right because if you write these these four or five lines in your program again again again again then obviously code would be lendy there are so many repeated lines code rency is increasing here right complexity of program is also increasing right but if you use function it is going to reduce the code redundency you don't have to write these statements again and again right so better memory utilization is also there uh code would be more readable more maintainable if you use functions it would be easy to debug the code because there are less number of lines right so it would be easy to debug the code right so we can say functions are important for reusing the code just Define it once and use it many times in your program to reduce the redundancy code redundency right that's why functions are important if we write a small program that is fine because still now we have written so many programs without using function but when you are working on a project when you write a large program then functions are must right because we cannot write everything in main function till now we are using we are writing everything like int Main and everything whatever you want to do in this main function only but if you have a large program then it's not a better practice to write everything in main function use uh in main program in main function better to use your functions different different functions right so and something like this if if and if we have a main program like if you write everything in main program like some we have for input there are three or four lines we are doing some processing these are some statements for output these are some statements right so see the code is lengthy and not so much readable although there are few number of lines but if a large program then it's not more readable or maintainable if you write some everything in main function rather than this what we can do is if we do something like this for input we make another a different function and in this function read input we have these four lines in this for this processing we have another function do processing and there we have these four or five lines for output we have a different function name like maybe print output and there we have these four lines so rather than writing all the things here in main function what we can do is now we can just call reading input do processing print output so now this is the case in main we just have to write three lines read input just call this thing do processing call this thing print output call this thing so this is like more readable more maintainable and concise code you know it's looking beautiful rather than this right and if in our program again if you want to take input or processing or output you just call again here after some processing you just call like read input do processing or print output or only read input and these kind of things so again and again we can call these three things right whenever you want in our main or in any other function also right but here if you don't have function this is for input and after this somewhere in later in your program if you want to take again input so same you have to write down these four steps right but if you you are using function don't need to write the these steps you just call the function and just by calling the name of the function and these parenthesis that's it so now we are getting my point like why functions are important right need what is beauty of using functions fine okay now proper synx let me just tell you the synx for functions or you guys just give me some example real life example of using functions right where you are using function or which kind of you know phenomena or which kind of situation in your life are related with the concept of functions right so syntax of function writing a function or defining a function is see we write return type then function name then here the parameter list means parameter 1 parameter 2 and so on and here we have some statements and here we have return statement this is syntax of creating or defining a function return type means what kind of value this function is returning right suppose if you are using if you're defining a function to add two numbers two integer number so it will return sum and that would be int so int would be return type of that function right what kind of value that function is returning but it's not mandatory that every function is going to return something maybe some function are not not returning a value so the return type there would be void I'll tell you I'll show you practically all the examples function name function name should be meaningful like I'm going to you can use fun one function 2 function three this type of name also a BC XY Z but better to use a meaningful name if suppose for addition you are making a function then the name of the function should be add or sum or addition this thing so that by looking the name of that function we can uh you can uh we can assume that or we can get to know that what this function is going to do right parameters whatever data you pass in that function right it is not mandatory to provide these parameters some functions are without parameters also those functions also I'll show you right then in curly bracket this is body of the function here the statements which would be executed right when you call this function and at last you have a return statement whatever value this function is going to return there we write that return and like in addition some would be returning the function is returning some so return sum like this right so for function name same rules for we know you know the for naming a variable the rules same rules have to be applied to name a function right and I told you these are the variables that we pass in the functions right and this is like actual code what this function is going to do so function is like a piece of code if you uh you know want to know the proper definition the function is a piece of code or you can say group of statements or block of code which perform a specific task that's it that is function or it's a piece of code that will take some input perform some computation and give you some output right so it is going to perform a specific task right that is a function now there are two types of functions builin function and user defined function Now builin function means these are predefined functions you can directly use those function right like we have a you have to use proper header for that like if you you want to use that function square root if you want to calculate square root of a number so this function is already defined in math Library cmath so you have to include that in your heter hash include cth and you can use square root this function like power if you want to calculate power of any number then we can use power this function s cosine there are many functions in this these libraries many predefined functions so you just directly include those header specific to that you want to to use the functions and you can directly use those function you can directly call those function in your program these are predefined functions someone has already defined these functions for us we can directly use those functions right but next is user defined function so there are some user defined function also so in predefined function you don't need to know how this function is working how this function is calculating the square root we don't need to know we just use this right like when you were using in string uh that that member function find that is going to find if you want to find out any character or a substring so you just use this fine function or you just use the length function to calculate length of a string you don't need to know the actual working of these functions right these are built in and we're using these function okay but if you are writing that function then definitely you need to know the working of that function and that is in case of user defined function right so builin function and next user defined function so we are going to Define some function those are known as user defined function right but for user defined function basically there are three things in a function that are important that is function declaration function definition and function calling now what is function declaration what is function definition what is function calling that I'll show you practically with the help of a example so I hope uh Basics are clear like what is a function why we need function some advantages of using function right if you have any doubt you can just let me know in comment section so let's see some programs using functions so after creating a new file now we are first we'll see how to define a function right because if you're are going to define a function means user defined function for user Define a function three things are important function declaration definition and calling so how to define a function so simple example we'll take for sum of two number right so let's see the for main we are just defining a function sum simplest one void sum so return type is void function name is sum and parameter list see there is no parameter in this list so this function with the type of this function is with no argument means here no argument these parameter these are also known as argument yeah whenever we actually we are calling that function in that time we actually pass something those are known as arguments and in definition these are known as parameters so with no arguments and no return type this is that function right so here only I'm taking like int a I hope you can easily write down write down how to add two numbers the logic right so this is function definition right no return type no argument we're passing and this is body of the function here I'm just writing the logic to print sum right there is no return statement here because it is not returning anything but you can write down here simple return that's it but this thing is optional if you don't want to write return that's fine because this one function is not returning anything as soon as the control will go to here the return statement it means end of this function and it will return the control where you are calling the function right now calling how to call function just name of the function sum and you don't need to pass anything because this function is not accepting any parameter any argument so don't need to pass anything here semicolon here and this is not returning anything so just sum and that's it if summer is not giving you something then you don't need to put your hand something like this because you have nothing to hold in your hands right so that's sum we are calling this function and see here in main function also we are using return statement return zero return zero means it is returning zero means successful compilation of that successful exit from from this function from main function right so let me run this and show you the output A and B Valu is 1 2 and the C sum is three right but one thing you have noticed I have written this definition of the function before calling of the function this is important before calling if if you just I just cut this thing and after calling I'm defining the function right let me show you what output you will get see you'll get an error the sum was not declared in this scope in line number this this seven some is not declared so for one solution for this is we have function declaration function prototype this thing will only tell the compiler the name of the function number of arguments of the function return type of the function and the data type of the argument that function is accepting so suppose if you modify this Su function so in this case if you are you are going to solve the problem then before calling we just give a prototype of the function or we just declare the function how to declare return type typ of the function is void name of the function is sum and there is no argument no parameter list here right and just put semicolon in declaration yeah semicolon is must in Define while defining a function no semicolon viral calling yes semicolon is mandatory so now that's fine now it will run see enter values 3 4 and answer is seven right so if you writing a small program then no need to you know use these function declaration or function prototype just Define the function before calling the function that's it right but in large projects in large when you're working in large projects then it all it's always a good practice to declare all the functions at the beginning just after the header files just to know yeah these function we are going to Define we are going to use in this program this would be the return type of the function this would be the name of the function these number of parameters we are going to pass and this would be the data type of the parameters so if you if uh modify it a little bit suppose I want to here while calling I want to pass my numbers like I want to add three and four I want to pass so while defining the function declaration also you need to change but we'll change this later while defining the function if you are passing three and four if I'm giving you something you need something you need your hand or something to hold that thing right and here we are passing the values so in computer memory or here we have variable to hold the data so while defining here in parameter you have to pass two parameters because two values we are going to accept right and of integer type so int any name you can take any variable name like a or XY Z int B here you don't need to take these A and B just sum is equal to zero no need to ask value from the user because I passing the values three and four sum a plus b and if you want to return some I don't want to print some here I want to return sum so return sum that's it or a plus b no need to write down this sum and a plus b that is also fine right no need to take this in sum just a + b but see here you are returning a plus b but this is going to produce some uh error return value type does not match the function type because here the return type of the function is void means it is not going to return anything but you are returning sum you are returning integer value so you have to change the return type that should be int so this function is with arguments and with return type this is second type of function first we have seen function with no argument and no return type function with argument and with return type okay so if you run this this will produce some error the same sum was not declared in this scope because you are defining the function but before you are calling the function means before defining you are calling the function always we use the variables but before we Define those variables otherwise it will give ER so same this is kind of use of the function like we I'm calling the function like I want I am going to read I'm going you know I want to read the recipe to make ID my friend is going to read the recipe to make the ID but I haven't written the recipe yet so obviously it will give error right say I haven't defined the function but you are calling the function so the solution is you just give here prototype of the function so int name and two parameter this function will take so here you need to write down here int X in y and semicolon but the name of the parameter is not compulsory to write in declaration in declaration in definition yeah name name is compulsory so if you don't put here the name of these parameter that is also fine because declaration or prototype this is called function declaration or function prototype it is going to tell the compiler only the type of the return type of the function name of the function number of argument in that function and types types of argument here int and int types so this is also fine right but it's always a good practice to write down here name of the those also the name these name it's not compulsory to match in definition and declaration here I have taken XY here I have taken AB that is also fine right but order should match if here I I'm going to take another example example suppose I'll show you this thing with example one more example so I for function declaration prototype and function calling and function definition is clear to you guys right now if a function is something like this with no return type but with argument suppose a function is something like this so I have function display and that is accepting one argument that is of type string C++ string object right string name so this says C++ string object okay and it will print high and whatever the name so it is not returning anything it's just printing not returning anything so you can write down simply return but that is optional if you don't write that is also fine right now okay call the function in main function so we generally call the function into main function but we can call a function into another function also right but you know whenever you are going to run this code first of all control will go to main function so whatever function or whatever you will write in main function that are going to execute only if you have defined a function if you have uh given a protype of the function but you haven't called that function in main directly or indirectly right then that function is not going to execute right so if you want to execute a function you have to call that function into main uh function either directly or indirectly right so let's call this in main like display and here I'm passing Jenny what do you think it will run or it will give any error pause the video and think and just write down the answer let's this display was not declared in this scope in this in main scope you are calling this in here but you you have defined this after calling so if you have to solve this either define this before calling right otherwise give prototype of that function but it's always a good practice to give first prototype then you just call and you can Define anywhere that function in your program just give the Prototype first at first okay so let's give the Prototype here the function return type is void function name is display and string type of argument it will receive that's it if you want to write down the name that is also fine you can write down any string variable name String name or ABC or a or anything but this data type is mandatory name is not mandatory to give in Prototype let's run this and see what output you'll get here okay let's run this now hi Jen actually you are giving here A C literal so what it will it is accepting it is expecting a C+ plus string object so it will convert it implicitly to a string object and it will not give any error next thing you can also do if if uh just take like STD or don't write STD here or here you don't need to write STD also because we are using STD name space so just remove this that's it right and just write down here string name equal to I'm writing here rather than passing here I'm just passing name so I've taken a name C++ string object you can see here gen and I'm passing this object name here right rather than name you can take s also it's not compulsory to take the same name like here the parameter name is name and here also we are taking name so it can be different let's run this and see it will print like high J this thing is also fine so in this case actually we are passing C++ object so no conversion would be there right so it is a type of function with argument without return type right these are I'm uh telling you the types four types function with no argument no return return type function with no argument but with return return type function with argument no return type function with argument with return type so three types we have discussed one is remaining that is function with return type but no arguments right okay let's see that thing also here with return type suppose return type of the function is string but no argument we are passing here so string display here no argument means just remove this here also we cannot pass any argument right but see it is returning something this function is returning going to return a string so here rather than printing we will return suppose here we have string name is equal to like Jenny and it will return name return a string type obviously name so obviously return type is string and if it is returning something then while calling this function it is returning you name so you should have something to hold that name right so whatever it will return that we can take in a variable like string S and S equal to display and then see out simply s that's it let's run this I don't know it will work yeah it is working it is printing you Jenny right so this function is without sorry without argument with return time right but see let me just uh here I'm not writing this thing in see out only I'm just calling this display so what do you think it will work yes definitely it will work directly we can print using C out also rather than storing this in a particular variable we can simply print this see out means yeah we are expecting something that this function is going to return something and see out means just print that thing right but if this function is not returning anything suppose this is end or sorry not returning anything means it should be void void display it is not returning anything just remove this thing and here we are just in display we are just printing C out hyen right so same Pro you have to modify the Prototype as well void name is same no argument not returning anything and here now I'm calling this display see out display so what do you think it will work think pause the video think and write down this thing in comment section it will not work it will not work see the red line here right because if you are calling this in see out means you are going to print something and we are expecting to return something from this display but it is not returning anything the type is void so you cannot write down here see out just call display simply that's it and now it will work fine no error see hen it is printing right so this also you need to take care if the function is not returning anything you cannot call this function directly in see out statement now how I think three things are clear to you guys declaration definition calling how to use how to do the these things why function declaration is important and why and when right but declaration is not mandatory in your program if you're writing a small program just Define that function before calling the function that's it no declaration is needed no prototype is needed right now how this function are working in that stag in memory let me show you this thing with one example we have the simple example here we have two function GRE and display in GRE we have only we just printing high in display we printing like first line is see out I'm in display function then second line in second line I'm calling greed function function so we can call a function from another function it's not compulsory to call a function within main only right now one second line is also there I'm exiting display function and in main function I'm just calling display see I'm not calling greed here I'm just calling display so it is not compulsory to call all the function in main function but I'm calling this GD indirectly in main function indirectly means using display function I'm calling display and within display I'm calling GRE so indirectly I'm calling breed from Main so if I run this then it will print like first I'm in display function then whatever is there in GRE function second line High then I'm exiting display function right now how the these functions and this are working for each function a step frame is located right so we have a main memory so let me show you suppose this is a ram main memory so whenever you execute a program that would be first of all loaded into main memory so that main function program would start execution from Main so that for main of frame would be allocated for that main function this is this stack frame is for main right so suppose we have a stack and first frame in that stack is main so if I do so this is kind of like stack we have so first we have frame for Main right for main function then in main function we are calling so some memory will be allocated to this main from this stack in this stat frame the whatever the local variable for this main for those variables and functions and all right so in main I'm calling display right so now control will go to here display so one more frame stack frame for this function display so here we have display so some one more frame would be allocated for this function display right so whatever the variable local variable of this display memory for those variable would be located here right now first we have so now active frame is display right now this is the active frame display so it will print first time in display function now second line is greed so GRE it will the control will go to here the definition of the function is here so one more stack frame would be in this stag that is for greet now active frame is this one for this function greet so now some memory would be allocated for this in from Main memory for this grid function whatever the local variables are there in this GD function memory for those and all whatever you will do here so GD we are just printing C out high so it will print first high and no return statement but as soon as it will see this closing bracket means it is going to return from this GRE and where where you are calling this function here in this line right so now this Frame is out from the stack this Frame is out from the stack now active frame is display because again control is in this function display right now this memory would also be removed erased from this main so whatever the local variables in this greet those memory has been freed right in GRE if we have suppose in a like in a is equal to 5 so some memory would be allocated for this N5 as soon as you'll go back from this grd this memory would be out means fre for these local variables right now active frame is displayed so now in display we are having one more line that is I'm exiting display function so it will print that line and now as soon see the closing bracket or the return statement means exit from this current function and where you are calling that function in main so control will go to here so now this St frame frame would be also popped out from here and now active frame is main right and that's it in main also we have nothing after display we have like return zero so return zero means now main would also be popped up from the step right and these memory would also be raised from this main memory right so that's it this is how if you have more than one function and we are calling then how this function are the internal working of these functions using stack frames and all right so in this case if you use function then the memory would be better there would be better memory utilization why because if this function is local to this grid then as soon as you will come back from this grid the memory would be freed right but if you write this int a or everything within main function then from the starting of the main program till the ending of the program the memory would be still there for all the local variables all the function all the things right that would not be erased but as soon as you go back from this grid this memory would be raised and this memory can be utilized for any other task also so if use function then there would be better memory utilization as well this is one more advantage of using function right I hope you got the working of this thing using this one and if the function is not turning anything you can write down here void as well but no need void is also means there are no parameters or no nothing that's it for this video so I hope basics of functions Circ to you guys in the next we'll see uh function how to pass the argument call by value and call by reference this thing right so now I'll see you in the next video byebye take care
