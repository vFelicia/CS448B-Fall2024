With timestamps:

00:00 - so in the series of learning programming
00:01 - in c we are discussing some programs on
00:03 - strings in the previous video we have
00:05 - discussed how to find out
00:06 - a length of a string using predefined
00:08 - function that is strlen
00:09 - as well as without using predefined
00:11 - function we have written
00:13 - our own logic right so now in this video
00:16 - we will talk about how to concatenate
00:18 - two strings we will use for this
00:21 - concatenation uh the predefined function
00:24 - as well as we will write down our own
00:26 - logic without using
00:27 - that predefined function right first of
00:29 - all i'll tell you what
00:30 - does this concatenation means we'll
00:32 - properly take one example and we'll see
00:34 - everything first of all the logic i'll
00:36 - show you on the sideboard then i'll show
00:38 - you practically on my laptop the program
00:40 - both the programs using predefined
00:42 - function as well as without using
00:43 - predefined function
00:44 - right so now see first of all what does
00:47 - this concatenation
00:48 - means see i am taking two strings
00:51 - suppose i am taking
00:52 - s1
00:56 - see these are two string i am taking one
00:59 - is jenny
01:00 - second is khatri and i have suppose
01:02 - declared s1 and s2
01:04 - and size is what i am declaring this
01:07 - string something like this
01:08 - so size of s1 is 6 only and s2 is 7 only
01:10 - i am storing jenny and khatri
01:12 - so index would be from 0 to
01:16 - 5 from 0 to
01:20 - 6 size -1 this is s1 and suppose address
01:23 - is 1000
01:25 - one thousand and two and thousand five
01:28 - and suppose address of this one is
01:29 - uh 1046 47
01:33 - 48 21
01:36 - 52 something like this we have and in s1
01:38 - we have what
01:40 - address of this the first byte that is
01:43 - the base address of this one
01:45 - and in s2 we have base address of this
01:48 - one that is one
01:49 - zero four six right now what does this
01:52 - concatenation means
01:55 - i am going to store sorry i am going to
01:57 - append
01:58 - this s2 this string
02:03 - to this s1 like what output i want this
02:06 - kind of output jenny
02:08 - khatri this is what concatenation we are
02:12 - going to concatenate or combine two
02:14 - strings
02:15 - so we are going to append this one or
02:17 - you can say more precisely if i say
02:19 - we are going to append a copy of the
02:21 - string right
02:22 - obviously we are going to not going to
02:24 - remove k here and we are going to
02:26 - you know place k here obviously we are
02:28 - going to keep
02:30 - we are going to append a copy of this
02:32 - string at the end of this
02:34 - s1 right or you can also say
02:37 - you can also do something like this like
02:40 - khatri
02:40 - and jen that is also fine but
02:44 - ultimately it is what appending of
02:46 - either this string to this or
02:48 - this string to this at the end of the
02:49 - string right
02:52 - now first point you have to take care
02:53 - about concatenation is what
02:55 - if i want to concatenate this string
02:57 - here then obviously this
02:58 - string s1 string should be large enough
03:02 - but here we don't have the size size is
03:04 - only
03:05 - 7 so where you will store the string
03:09 - so the size of this s1 should be or you
03:12 - can say the destination string
03:14 - here i am taking s1 is what a
03:16 - destination string and this one is
03:18 - source
03:22 - right we are going to append this s2 to
03:25 - s1
03:25 - so first of all you need to take care
03:27 - the size of s1 should be large enough
03:30 - to accommodate the string s2 string or
03:33 - the source string
03:34 - so better to take size of s1 suppose i
03:37 - am taking 30 or 50 you can take
03:40 - right okay
03:43 - first point is this one next is what
03:47 - c now how to use a string concatenation
03:50 - function
03:50 - predefined function is strc80 to
03:53 - concatenate two string
03:55 - strc80 right and
03:58 - it accept two arguments
04:02 - fine string one string two or you can
04:05 - say
04:06 - destination string and source string if
04:10 - see please uh you know watch this or
04:12 - listen to this point very carefully
04:15 - if you want to append this s2 string
04:18 - at the end of this s1 then at first we
04:22 - will write
04:22 - s1 and then s2 means here the first
04:26 - argument is always destination string
04:32 - and the second would always be source
04:36 - string so the s1 would be appended to s
04:39 - sorry s2 would be appended to s1
04:42 - and it will return what a pointer to
04:47 - destination string because now finally
04:49 - our definition string is
04:51 - jenny cutry so it will return pointer to
04:54 - the destination string and we can
04:55 - directly print
04:56 - now s1 or you can set the destination
04:59 - string but
05:00 - if you want to append this one i want
05:03 - this output khatri
05:07 - so now i want to append s1 at the end of
05:10 - s2 so now how you will use
05:12 - string cad here s2 here s1
05:16 - always first argument would be
05:18 - destination string
05:20 - at the end of which string you want to
05:23 - add the another
05:24 - string and this one would be source
05:25 - string now output of this would be
05:28 - any output or this would be jainikha
05:29 - three i hope you got
05:31 - you know the difference right now
05:34 - next thing see now it is already
05:38 - defined the definition of you can say
05:40 - it's already you know declared in which
05:42 - header file
05:43 - string don't edge because whenever we
05:47 - use this
05:48 - inner program obviously compiler doesn't
05:50 - know the meaning of string cat
05:52 - you know compiler you know we have to
05:54 - tell compiler the meaning of string card
05:57 - and the meaning is already you can say
05:59 - the meaning is already there in which
06:00 - header file
06:01 - string dot h that is why we include
06:03 - string to attach in a program so that
06:05 - compiler
06:06 - can refer the string dot h and know what
06:09 - exactly the meaning of string
06:10 - at and do you know whatever you want
06:13 - like
06:14 - concatenation of these two strings right
06:18 - so if you use this predefined function
06:20 - you have to do nothing it's very simple
06:22 - right first of all we'll write this
06:24 - program here but
06:25 - here you know one problem with with this
06:28 - string cad function is what
06:30 - buffer or overflow it is not going to
06:34 - check
06:34 - the size of destination string i am
06:37 - going to take this example
06:39 - this one right destination string is s1
06:42 - suppose here buffer size is only 10
06:46 - or you can say is 6 only
06:49 - so obviously we cannot append khatri
06:51 - here because we don't have a located
06:52 - size in s1 we don't have
06:54 - more size but string cat will still
06:58 - append or still can still concatenate
07:01 - this here khatri
07:04 - right where see this k would be
07:07 - here at the place of null character so
07:11 - here k
07:12 - h a t r i and after that this
07:15 - null that is what concatenation right
07:18 - but we don't have any space but still
07:19 - concatenation will concatenate with this
07:21 - thing
07:22 - so obviously it's not safe right that is
07:26 - one problem this
07:27 - with the string cat and i hope you got
07:28 - the meaning of string concatenation
07:30 - function and
07:32 - now i hope let me write down the program
07:34 - now let me write down a program include
07:36 - this string dot h i'm taking s1
07:38 - suppose 30 that is jenny s 2 7 ka three
07:41 - and simply write string cat s1
07:44 - comma s2 and simply print printf
07:48 - percentage s what you will print
07:52 - we are concatenating s2 we are appending
07:56 - a copy of s2 to s1 so we will print s1
07:59 - simply because this is a destination
08:02 - string
08:03 - right s1 so here khatri would be
08:07 - something like this because it is of 30
08:09 - size is 30
08:10 - so we have till 29 so this
08:14 - null would be
08:17 - replaced with this k first character of
08:19 - the this source string
08:21 - k h a t r i and at last this null also
08:27 - obviously it's not 29 5 6 7
08:30 - 8 9 10 11 and
08:33 - further we have index still 29 because
08:36 - the size is 30
08:37 - right so this is very simple if you are
08:39 - using this trinket function
08:41 - fine but let me write down the logic
08:44 - without using string cat function how
08:46 - you will do
08:48 - see first of all think how you can do
08:50 - this
08:51 - obviously we have to append this first
08:55 - character of
08:56 - s2 string or the source string to here
08:59 - the null character where we have null
09:01 - character of
09:04 - destination string right so we should
09:07 - know what is this index
09:08 - that is 5 or you can say we should know
09:12 - length of the string
09:13 - s1 string right
09:16 - as well as we should know length of s2
09:19 - string
09:19 - why so because you are going to append
09:22 - you are going to append what k then h d
09:25 - r i
09:26 - and then this one so obviously till
09:29 - length we are going to till s2 length we
09:32 - are going to append the string to
09:33 - s1 string so you need to know length of
09:36 - this also and this also
09:38 - first of all find out the length of both
09:40 - the strings so
09:41 - here suppose i am taking
09:44 - length 1 and i am using the function
09:48 - strlen s1 and in length
09:51 - 2 strlen
09:55 - s2 and before using this you have to
09:58 - declare
09:59 - l e n 1 and l e n 2 or you can say
10:03 - unsigned in ln 1 ln2
10:05 - now the value of this
10:08 - this variable ln1 and length 2 is
10:13 - length of s1 is 1 2 3 4 5
10:16 - here we have null
10:20 - right so excluding null character is one
10:23 - two three four five
10:24 - so in l one we have five in s2 one two
10:27 - three four five six
10:29 - six we have right now
10:32 - see write down a loop i'm using for loop
10:35 - here
10:37 - because obviously we are going to append
10:39 - one by one first this then this then
10:41 - this
10:41 - like this right so i'm taking i
10:45 - is equal to 0 and i less than c
10:48 - now loop should run the upper bound
10:51 - condition should be what
10:52 - think we are going to append
10:56 - this to this so we are going to traverse
10:59 - this
11:00 - one till null
11:04 - right so upper bound should be and what
11:07 - is the length of this
11:08 - obviously we have found the length of
11:09 - this length is six
11:12 - so upper bound should be six till this
11:14 - null character we are going to
11:16 - append this i hope you got my point
11:20 - so upper bound should be here six so now
11:22 - l
11:23 - two is six so till
11:27 - l length 2
11:31 - or you must write less than equal to
11:33 - because obviously we want
11:34 - sixth index also we also want null null
11:38 - sixth index also so it should be less
11:41 - than equal to
11:42 - length 2 and i plus plus
11:45 - from 0 to 6 that is why from 0 to 6
11:49 - now whatever in s2
11:53 - we are going to append to s1
11:56 - but what should you what you will write
11:58 - here and here
12:02 - this index is going to be started from 0
12:05 - only
12:05 - 0 1 2 3 4 5 6 like this so here simply
12:08 - write i
12:09 - i would be 0 1 2 3 4 5 6 right but what
12:12 - you will write here
12:13 - s 1 where you will append this k
12:18 - here at the place of null character
12:22 - means the index is 5
12:27 - right and here length is also
12:31 - 5 so what we can say how you can take
12:34 - here index
12:36 - alien 1 maybe you will say
12:39 - just write lin 1 because index we will
12:42 - get
12:43 - 5 by using alien1 okay first is
12:46 - fine but next time we want index
12:50 - sixth index this i would be 1
12:54 - h i want to store here here i want
12:57 - i want to store k so i would be 1 next
13:00 - time
13:01 - and here alien 1 is again
13:04 - 5. so it will append
13:07 - h also to here to this index fifth index
13:11 - so k would be replaced with h
13:13 - and that's we don't want we also want to
13:15 - move this
13:17 - index 5 then 6 then seven then eight
13:19 - then nine ten like this
13:21 - one by one we want to add one one one so
13:24 - better to what you can write here
13:26 - we cannot write simply and one you have
13:28 - to add
13:30 - i
13:33 - right why i'm adding this i let me just
13:36 - try it
13:37 - and then you will get it and that's it
13:39 - that is simple logic
13:40 - and after this for loop you can print
13:42 - printf percentage is
13:44 - s1 that's it see now
13:49 - ln one five length two is six okay now
13:51 - five is what
13:54 - zero zero less than length two length
13:57 - two
13:58 - we have uh length two is 6
14:01 - yes condition true enter now s2i
14:05 - s2 0 0th index means
14:09 - s2 of 0 is k k would be appended to
14:12 - length 1 plus i length 1 is 5
14:17 - 5 plus 0 that is 5
14:20 - only so s105 s105 is this
14:24 - so k would be appended here
14:27 - now i plus plus i becomes condition is
14:29 - still true
14:30 - now s two of one that is h would be
14:33 - appended now see
14:34 - length is five but now plus one
14:38 - that is s one of six and that's exactly
14:41 - we want
14:42 - h should be here at sixth index of s one
14:44 - so h would be appended here
14:46 - i plus plus i becomes two conditions
14:49 - still two enter
14:50 - now s two of two that is a
14:53 - a would be appended five plus i is two
14:56 - seven
14:57 - s 1 of 7 so a would be appended here
15:01 - that's exactly you want right this is
15:04 - what concatenation
15:05 - and till what i would be 3 then 4 then 5
15:08 - and then
15:09 - 6. once i value becomes 6 yes condition
15:12 - still true
15:14 - length 2 is 6 again enter now
15:17 - s 2 of 6 s 2 of 6 is null character
15:21 - so till null it is going to append k t
15:24 - r i and null also it will append where
15:26 - length
15:28 - 5 plus now i value is 6
15:31 - 5 plus 6 11 at 11th index and that's
15:34 - what
15:35 - exactly we want right now i value
15:37 - becomes 7
15:39 - but condition not true exit and print
15:41 - what s one
15:43 - so s one is now jenny khadri
15:47 - till it find null character it is going
15:48 - to print
15:50 - right so i hope you got this concept
15:53 - right
15:54 - and if you want to concatenate
15:57 - like i want to concatenate only k h a
16:00 - t right one two three four
16:04 - four characters right
16:08 - so here we have another function str
16:10 - ncat
16:12 - and it takes three argument first would
16:15 - be destination
16:16 - string then would be source string as
16:19 - well as
16:20 - what the number of characters
16:23 - you want to concatenate here i want to
16:25 - continue
16:26 - one two three four characters so just
16:28 - pass four
16:30 - right and it will continue concatenate
16:32 - only jenny then kh 80
16:34 - that's it till 4 character it is going
16:37 - to
16:38 - concatenate right so this is also
16:41 - another variant of string concatenation
16:42 - function
16:43 - now let me show you this program on my
16:45 - laptop so now let me create one file for
16:48 - you and i am taking string
16:51 - cat name is shrink at dot c
17:01 - header file
17:04 - string dot h as well like
17:08 - right and then main function
17:12 - and here i'm taking one string
17:16 - i'm taking s1 and size is
17:19 - 30. i am going to initialize it here
17:23 - only
17:24 - jenny right and one more string
17:28 - second is s2 size i'm not going to take
17:32 - the size of the string
17:34 - and just initializing
17:38 - okay now just use string cat function
17:42 - and s1 comma s2 one is destination s2 is
17:47 - what source now just
17:51 - print string is
17:55 - or you can say string after
18:02 - concatenation is percentage s
18:05 - and simply print what s one
18:10 - right oh
18:13 - with potes i'm also you know i also want
18:16 - to print s2
18:20 - fine so better to use here what
18:24 - slash so that you will get output next
18:26 - line
18:27 - so now let me run this and see what
18:29 - output you are getting
18:31 - it should be first janika three and then
18:34 - see
18:36 - first is concatenation s1 is now
18:38 - containing concatenation that is janika
18:40 - three and this is
18:41 - is what s2 only right so yeah it is
18:44 - working correctly
18:45 - now see if i take size of
18:48 - this only 5 or you can say 6
18:53 - so see size is 6 only but it is going to
18:57 - append
18:57 - still see
19:01 - it is going to append jenny khatri it is
19:04 - not going to check the buffer of s1
19:06 - so that is what buffer overflow problem
19:08 - right that is risky to use
19:10 - now let's uh you know
19:13 - comment this out and now we will use our
19:17 - own function
19:18 - so now i'm first of all finding i'm
19:20 - taking
19:22 - l1 equal to
19:25 - strlen and s1 i am finding the length of
19:29 - this
19:29 - and in l2 finding length of
19:33 - s2 right so before using this we have to
19:39 - declare l 1 and
19:42 - l 2 as well as i because we will
19:45 - use for loop now write down for loop
19:49 - i should be 0 i should be less than l 2
19:52 - sorry less than equal to right because
19:56 - null also we want
19:59 - and i plus plus
20:03 - and within this just write down s 1
20:06 - what l1 plus i
20:10 - equal to s2 of i
20:13 - right and printf after concatenation s1
20:18 - i think it should run let me just run
20:20 - this
20:23 - yeah string after the concatenation is c
20:26 - j
20:26 - kha three and this is what khatri only
20:30 - s2 i'm going to print so this is what
20:32 - without using string head function
20:34 - right now let me just you know use that
20:37 - function
20:38 - str ncat
20:43 - see it is going to take what three
20:45 - arguments
20:46 - right so here
20:49 - till three character i want to
20:53 - concatenate
20:55 - right and see just comment this out
21:02 - see this is what
21:07 - now just print concatenation string
21:10 - and what it will print see jenny and
21:13 - only it is concatenating kha only three
21:16 - characters so this is what string
21:18 - str and c80 up to n character it will
21:21 - concatenate right so next video will see
21:24 - another program on string
21:26 - so now i'll see in the next video till
21:27 - then bye bye take care

Cleaned transcript:

so in the series of learning programming in c we are discussing some programs on strings in the previous video we have discussed how to find out a length of a string using predefined function that is strlen as well as without using predefined function we have written our own logic right so now in this video we will talk about how to concatenate two strings we will use for this concatenation uh the predefined function as well as we will write down our own logic without using that predefined function right first of all i'll tell you what does this concatenation means we'll properly take one example and we'll see everything first of all the logic i'll show you on the sideboard then i'll show you practically on my laptop the program both the programs using predefined function as well as without using predefined function right so now see first of all what does this concatenation means see i am taking two strings suppose i am taking s1 see these are two string i am taking one is jenny second is khatri and i have suppose declared s1 and s2 and size is what i am declaring this string something like this so size of s1 is 6 only and s2 is 7 only i am storing jenny and khatri so index would be from 0 to 5 from 0 to 6 size 1 this is s1 and suppose address is 1000 one thousand and two and thousand five and suppose address of this one is uh 1046 47 48 21 52 something like this we have and in s1 we have what address of this the first byte that is the base address of this one and in s2 we have base address of this one that is one zero four six right now what does this concatenation means i am going to store sorry i am going to append this s2 this string to this s1 like what output i want this kind of output jenny khatri this is what concatenation we are going to concatenate or combine two strings so we are going to append this one or you can say more precisely if i say we are going to append a copy of the string right obviously we are going to not going to remove k here and we are going to you know place k here obviously we are going to keep we are going to append a copy of this string at the end of this s1 right or you can also say you can also do something like this like khatri and jen that is also fine but ultimately it is what appending of either this string to this or this string to this at the end of the string right now first point you have to take care about concatenation is what if i want to concatenate this string here then obviously this string s1 string should be large enough but here we don't have the size size is only 7 so where you will store the string so the size of this s1 should be or you can say the destination string here i am taking s1 is what a destination string and this one is source right we are going to append this s2 to s1 so first of all you need to take care the size of s1 should be large enough to accommodate the string s2 string or the source string so better to take size of s1 suppose i am taking 30 or 50 you can take right okay first point is this one next is what c now how to use a string concatenation function predefined function is strc80 to concatenate two string strc80 right and it accept two arguments fine string one string two or you can say destination string and source string if see please uh you know watch this or listen to this point very carefully if you want to append this s2 string at the end of this s1 then at first we will write s1 and then s2 means here the first argument is always destination string and the second would always be source string so the s1 would be appended to s sorry s2 would be appended to s1 and it will return what a pointer to destination string because now finally our definition string is jenny cutry so it will return pointer to the destination string and we can directly print now s1 or you can set the destination string but if you want to append this one i want this output khatri so now i want to append s1 at the end of s2 so now how you will use string cad here s2 here s1 always first argument would be destination string at the end of which string you want to add the another string and this one would be source string now output of this would be any output or this would be jainikha three i hope you got you know the difference right now next thing see now it is already defined the definition of you can say it's already you know declared in which header file string don't edge because whenever we use this inner program obviously compiler doesn't know the meaning of string cat you know compiler you know we have to tell compiler the meaning of string card and the meaning is already you can say the meaning is already there in which header file string dot h that is why we include string to attach in a program so that compiler can refer the string dot h and know what exactly the meaning of string at and do you know whatever you want like concatenation of these two strings right so if you use this predefined function you have to do nothing it's very simple right first of all we'll write this program here but here you know one problem with with this string cad function is what buffer or overflow it is not going to check the size of destination string i am going to take this example this one right destination string is s1 suppose here buffer size is only 10 or you can say is 6 only so obviously we cannot append khatri here because we don't have a located size in s1 we don't have more size but string cat will still append or still can still concatenate this here khatri right where see this k would be here at the place of null character so here k h a t r i and after that this null that is what concatenation right but we don't have any space but still concatenation will concatenate with this thing so obviously it's not safe right that is one problem this with the string cat and i hope you got the meaning of string concatenation function and now i hope let me write down the program now let me write down a program include this string dot h i'm taking s1 suppose 30 that is jenny s 2 7 ka three and simply write string cat s1 comma s2 and simply print printf percentage s what you will print we are concatenating s2 we are appending a copy of s2 to s1 so we will print s1 simply because this is a destination string right s1 so here khatri would be something like this because it is of 30 size is 30 so we have till 29 so this null would be replaced with this k first character of the this source string k h a t r i and at last this null also obviously it's not 29 5 6 7 8 9 10 11 and further we have index still 29 because the size is 30 right so this is very simple if you are using this trinket function fine but let me write down the logic without using string cat function how you will do see first of all think how you can do this obviously we have to append this first character of s2 string or the source string to here the null character where we have null character of destination string right so we should know what is this index that is 5 or you can say we should know length of the string s1 string right as well as we should know length of s2 string why so because you are going to append you are going to append what k then h d r i and then this one so obviously till length we are going to till s2 length we are going to append the string to s1 string so you need to know length of this also and this also first of all find out the length of both the strings so here suppose i am taking length 1 and i am using the function strlen s1 and in length 2 strlen s2 and before using this you have to declare l e n 1 and l e n 2 or you can say unsigned in ln 1 ln2 now the value of this this variable ln1 and length 2 is length of s1 is 1 2 3 4 5 here we have null right so excluding null character is one two three four five so in l one we have five in s2 one two three four five six six we have right now see write down a loop i'm using for loop here because obviously we are going to append one by one first this then this then this like this right so i'm taking i is equal to 0 and i less than c now loop should run the upper bound condition should be what think we are going to append this to this so we are going to traverse this one till null right so upper bound should be and what is the length of this obviously we have found the length of this length is six so upper bound should be six till this null character we are going to append this i hope you got my point so upper bound should be here six so now l two is six so till l length 2 or you must write less than equal to because obviously we want sixth index also we also want null null sixth index also so it should be less than equal to length 2 and i plus plus from 0 to 6 that is why from 0 to 6 now whatever in s2 we are going to append to s1 but what should you what you will write here and here this index is going to be started from 0 only 0 1 2 3 4 5 6 like this so here simply write i i would be 0 1 2 3 4 5 6 right but what you will write here s 1 where you will append this k here at the place of null character means the index is 5 right and here length is also 5 so what we can say how you can take here index alien 1 maybe you will say just write lin 1 because index we will get 5 by using alien1 okay first is fine but next time we want index sixth index this i would be 1 h i want to store here here i want i want to store k so i would be 1 next time and here alien 1 is again 5. so it will append h also to here to this index fifth index so k would be replaced with h and that's we don't want we also want to move this index 5 then 6 then seven then eight then nine ten like this one by one we want to add one one one so better to what you can write here we cannot write simply and one you have to add i right why i'm adding this i let me just try it and then you will get it and that's it that is simple logic and after this for loop you can print printf percentage is s1 that's it see now ln one five length two is six okay now five is what zero zero less than length two length two we have uh length two is 6 yes condition true enter now s2i s2 0 0th index means s2 of 0 is k k would be appended to length 1 plus i length 1 is 5 5 plus 0 that is 5 only so s105 s105 is this so k would be appended here now i plus plus i becomes condition is still true now s two of one that is h would be appended now see length is five but now plus one that is s one of six and that's exactly we want h should be here at sixth index of s one so h would be appended here i plus plus i becomes two conditions still two enter now s two of two that is a a would be appended five plus i is two seven s 1 of 7 so a would be appended here that's exactly you want right this is what concatenation and till what i would be 3 then 4 then 5 and then 6. once i value becomes 6 yes condition still true length 2 is 6 again enter now s 2 of 6 s 2 of 6 is null character so till null it is going to append k t r i and null also it will append where length 5 plus now i value is 6 5 plus 6 11 at 11th index and that's what exactly we want right now i value becomes 7 but condition not true exit and print what s one so s one is now jenny khadri till it find null character it is going to print right so i hope you got this concept right and if you want to concatenate like i want to concatenate only k h a t right one two three four four characters right so here we have another function str ncat and it takes three argument first would be destination string then would be source string as well as what the number of characters you want to concatenate here i want to continue one two three four characters so just pass four right and it will continue concatenate only jenny then kh 80 that's it till 4 character it is going to concatenate right so this is also another variant of string concatenation function now let me show you this program on my laptop so now let me create one file for you and i am taking string cat name is shrink at dot c header file string dot h as well like right and then main function and here i'm taking one string i'm taking s1 and size is 30. i am going to initialize it here only jenny right and one more string second is s2 size i'm not going to take the size of the string and just initializing okay now just use string cat function and s1 comma s2 one is destination s2 is what source now just print string is or you can say string after concatenation is percentage s and simply print what s one right oh with potes i'm also you know i also want to print s2 fine so better to use here what slash so that you will get output next line so now let me run this and see what output you are getting it should be first janika three and then see first is concatenation s1 is now containing concatenation that is janika three and this is is what s2 only right so yeah it is working correctly now see if i take size of this only 5 or you can say 6 so see size is 6 only but it is going to append still see it is going to append jenny khatri it is not going to check the buffer of s1 so that is what buffer overflow problem right that is risky to use now let's uh you know comment this out and now we will use our own function so now i'm first of all finding i'm taking l1 equal to strlen and s1 i am finding the length of this and in l2 finding length of s2 right so before using this we have to declare l 1 and l 2 as well as i because we will use for loop now write down for loop i should be 0 i should be less than l 2 sorry less than equal to right because null also we want and i plus plus and within this just write down s 1 what l1 plus i equal to s2 of i right and printf after concatenation s1 i think it should run let me just run this yeah string after the concatenation is c j kha three and this is what khatri only s2 i'm going to print so this is what without using string head function right now let me just you know use that function str ncat see it is going to take what three arguments right so here till three character i want to concatenate right and see just comment this out see this is what now just print concatenation string and what it will print see jenny and only it is concatenating kha only three characters so this is what string str and c80 up to n character it will concatenate right so next video will see another program on string so now i'll see in the next video till then bye bye take care
