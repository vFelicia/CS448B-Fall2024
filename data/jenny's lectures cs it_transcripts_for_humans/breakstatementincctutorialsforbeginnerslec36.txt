With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - C++ programming language we have
00:05 - discussed Loops in C++ four Loop five
00:07 - Loop doy Loop and range based for Loop
00:10 - right now when we discussing these Loops
00:12 - kind of thing then we have like two
00:14 - statements break and continue or you can
00:17 - say two keywords right these are being
00:20 - used in Loops break and continue so in
00:23 - this video we'll see what is this brake
00:25 - statement why we use it how to use it
00:28 - and everything about brake statement
00:29 - with help of program also I'll show you
00:31 - practical right so first thing we will
00:34 - see what is break statement right and
00:36 - why we need this right so see as we have
00:40 - discussed switch case statements in
00:42 - previous videos in one of my previous
00:44 - video in this course C++ right there we
00:47 - have used brake to jump out of the
00:50 - switch case right same to jump out of a
00:55 - loop we will use we also use
00:58 - brake right
01:01 - now we can say it is a control statement
01:03 - so you can say it is a jump statement
01:05 - also right why this is called a control
01:08 - statement because it is used to control
01:11 - or it is used to break or it is used to
01:13 - manipulate the regular flow of your
01:16 - program or
01:18 - Loops whenever a specific condition is
01:21 - meant now what does this mean this line
01:24 - whatever I have said right now see let's
01:26 - take a real life example when you go to
01:29 - any amusement park there are so many
01:31 - like there is a you can say joint wheel
01:35 - right so they'll give you a ticket like
01:38 - maybe 50 rupees ticket and the time is 5
01:42 - minutes or maybe uh you will get a 10
01:45 - rounds of that joint whe right or maybe
01:49 - 5 minutes ride you will get in 50 rupees
01:52 - fine but suppose after five
01:56 - round because after completing 10 round
02:00 - that joint Feld is going to stop and
02:03 - like maybe uh the the the next who are
02:06 - in the queue are going to get on on that
02:08 - wheel and you have to get off from that
02:10 - wheel because they have complete because
02:12 - you have completed 10 round of that
02:13 - joint wheel so the termination condition
02:15 - of that joint wheel is after completing
02:17 - 10 round but because uh see sometimes
02:20 - after completing suppose five rounds you
02:23 - you got unwell you are puking and you
02:25 - are just screaming like hell something
02:27 - like this you got you know scared
02:31 - so in between after completing five
02:33 - round only in between they are going to
02:35 - stop and you can get off from that joint
02:37 - whe right now this is what kind of break
02:43 - the regular flow you have broken the
02:45 - regular flow of that joint wheel right
02:48 - because you you got unwell you are
02:51 - puking that is why they have to they had
02:53 - to stop that before meeting the
02:56 - termination condition termination
02:58 - condition is what after after completing
03:00 - the 10
03:01 - round they you know usually they're
03:04 - going to stop right but in
03:07 - between you have broken the regular flow
03:10 - of that thing right same kind of thing
03:14 - if in Loops generally we use
03:18 - Loops when you want to repeat something
03:20 - suppose I want to print high five times
03:22 - so rather than printing five print F
03:26 - statement or five time like we are
03:28 - discussing now C++ C out statement we
03:31 - simply put that thing in Loop I'm just
03:33 - simply using for Loop you can use y Loop
03:35 - do y loop as you wish so the synx is
03:37 - like first initialization then
03:39 - termination condition less than equal to
03:40 - 5 and then update I ++ right and within
03:45 - this simply we can print like C out
03:48 - high this is the thing right so the
03:52 - regular flow of this Loop is what the
03:54 - high would be printed five time right
03:57 - and then the loop is going to terminate
03:59 - the ter condition is I less than equal
04:01 - to 5 but what if in between you want to
04:03 - break the loop What if after printing
04:06 - only three times I want to stop the loop
04:08 - then we can use
04:11 - break
04:13 - to just exit from the loop to jump out
04:16 - from the loop before meeting the
04:18 - termination condition but when whenever
04:22 - when a specific condition is made so you
04:24 - have to put what some condition
04:26 - something like this if this uh I becomes
04:29 - three
04:30 - then break have to use this the proper
04:33 - synx I'll show you right so you have to
04:36 - put some proper condition after meeting
04:38 - that condition just break from the loop
04:41 - right I hope you got this so the uh you
04:44 - have to note this point break you can
04:46 - use only within
04:49 - loops and switch State switch case
04:53 - statement if simply there is a program
04:56 - there is no Loop there is no switch case
04:57 - statement and you are using breake it
04:58 - will give error simply within if else
05:00 - you are using brake it will give error
05:02 - yeah here see if this condition is we
05:06 - are using this brake after this if
05:08 - because yeah obviously you have to put
05:10 - some condition in if and this is within
05:12 - this Loop that is why it it will not
05:15 - give any so brake can Al can be used
05:17 - only within loops and switch case
05:18 - statement right and it is used to jump
05:21 - out of the loop right before meeting uh
05:24 - the termination condition fine now in
05:27 - three ways we can use this brake
05:28 - statement we can use this within simple
05:30 - Loop like this we can use this within
05:33 - nested loops and we can use this within
05:36 - infinite Loops so these thing will I'll
05:39 - show you with the help of three programs
05:41 - right I hope you got the basic idea of
05:43 - break statement why we use this right so
05:47 - I'm working in visual studio and let's
05:49 - create a new file here the extension is
05:53 - do CPP right so first thing obviously
05:57 - what we need to
05:58 - do
06:05 - see this thing we have discussed already
06:08 - what is this iio stream why we are using
06:11 - why I'm using writing this name space
06:13 - STD so please watch out previous videos
06:18 - from this list right
06:20 - C++ so first obviously the name space
06:23 - STD because C andc out are in this name
06:25 - name space it is just to you know avoid
06:28 - the name for
06:30 - and then main
06:32 - function and here we will write down our
06:35 - logic so simple thing I'm taking first
06:37 - we are going to implement this break
06:38 - within a simple Loop right so just I'm
06:42 - using a four Loop right and let's
06:45 - initialize a variable I is equal to0
06:49 - then some termination condition suppose
06:51 - I want to print
06:54 - uh from 0 to 10
06:58 - numbers right or from 1 to 10 1 to I
07:03 - less than equal to 10 and then I ++ this
07:07 - thing I want to print right so within
07:10 - for Loop simply we can print C out and
07:12 - this I don't forget
07:16 - semicolon because I was working in
07:19 - Python for so long
07:21 - so yeah I have to remember this it's you
07:24 - have to put semicolon right so let's run
07:27 - this run this and I'll show you what
07:29 - kind of thing you will get see 1 2 3 4 5
07:31 - 6 7 8 9 10 but it's within one line and
07:33 - I want to print this one then in a new
07:35 - line then new line so we can use here
07:37 - endl or we can use here slash and also
07:41 - that is also Fine Again run this and
07:43 - I'll show you what kind of out output
07:45 - you will get see 1 to 10 but what if
07:48 - when the I becomes
07:50 - S I want to jump up the loop
07:55 - right so I want to break from this Loop
07:59 - so what we can
08:01 - use simply we just uh put a condition if
08:08 - I equal to equal to
08:10 - 7
08:12 - then
08:13 - break right otherwise print I so it will
08:18 - print 1 to
08:20 - six 1 to six and if you want to print 7
08:23 - as well then this see out statement you
08:26 - can use before this if then it will
08:29 - print 1 to 7 and then break but I want
08:31 - to print 1 to six as soon as I become
08:33 - seven out of the loop I don't want to
08:35 - print seven so see this is the break
08:38 - statement we have used within a simple
08:39 - for Loop right to jump out of this
08:42 - Loop so now if you want to use this in
08:47 - an infinite
08:49 - Loop let's take one more thing one more
08:52 - example and uh the example
08:56 - is suppose I want from the user
09:00 - to enter numbers and then some of those
09:03 - numbers it's not like that I want to do
09:05 - sum of one to 10 number or 1 to 15
09:08 - number no the program will ask from the
09:10 - user enter a number and I enter a number
09:13 - then suppose I have entered one so again
09:16 - you ask enter number suppose I have
09:17 - entered again one so the sum becomes two
09:21 - again if you ask enter number suppose I
09:22 - have entered again three so the sum
09:24 - becomes five something like
09:26 - this so how many times it will ask from
09:29 - the user I don't know there's no fixed
09:32 - number of iteration as soon as the user
09:34 - enter a negative number it should stop
09:38 - and that negative number should not be
09:40 - added into the sum right so in this case
09:44 - we don't know the exact number of
09:45 - iteration so we cannot use full loop so
09:47 - better to use if you don't know number
09:49 - of iteration then we use while loop
09:51 - right so let's implement this thing and
09:53 - there we
09:54 - will uh implement this uh break
09:58 - statement right right so this is the
10:00 - implementation of break in simple Loop
10:02 - now we are implementing like uh this
10:05 - breake
10:07 - statement an infinite
10:13 - Loop so just put a while loop while one
10:21 - means this is true while one means true
10:25 - anything except except zero whatever you
10:27 - will write here that would be considered
10:29 - as true so while true right so it will
10:33 - ask from the user what enter a
10:45 - number so obviously you have to uh use
10:49 - you have to take a variable you have to
10:51 - initialize a variable suppose in
10:54 - Num so C in in Num variable I'm going to
10:58 - take this
10:59 - and obviously we will also take a
11:02 - total for some total is equal to it
11:04 - starting let's initialize it with zero
11:07 - otherwise it will give some garbage
11:09 - value so in starting it will zero right
11:13 - here we have a red line okay there's two
11:16 - these operators
11:18 - right
11:19 - [Music]
11:22 - now you have to do total so total
11:25 - becomes this total plus equal to
11:28 - whatever the number you will enter this
11:29 - kind of thing but whenever you have to
11:31 - break if this number whatever you the
11:35 - number you have entered is less than
11:37 - zero means negative number then
11:40 - simply break
11:43 - right out of this while loop and after
11:45 - this y Loop let's print the
11:49 - total then return zero for successful
11:52 - completion right and let's run this but
11:56 - there is it's there's no error but but
12:00 - there's a bug in this code let me show
12:03 - you what is the case see it is asking me
12:06 - enter a number
12:08 - right so I'm entering here one again
12:11 - enter number I'm entering again one I am
12:15 - entering now minus one or Min -
12:17 - 6 so the sum it should give two because
12:21 - two number I have entered one one as
12:22 - soon as you enter negative number it
12:24 - should out be out of the loop so the sum
12:26 - it should give two but it is giving
12:28 - total is
12:30 - -4 why so because the problem is
12:34 - whenever you will enter one
12:37 - okay in Num we have one so in to in
12:40 - total we have now one now again 1 so 1 +
12:43 - 1 total becomes now 2 now I'm entering
12:46 - Min - 6 so first it will do total so
12:50 - total is equal to Total plus num total
12:52 - is 2 number is- 6 so it will become Min
12:55 - -4 and then this condition would be
12:57 - checked so this condition satis now it
12:59 - will break but this thing I don't want
13:01 - so you have
13:03 - to put
13:04 - this the logic this total
13:08 - logic after this break statement
13:12 - right this time it will give it will uh
13:15 - you know give the correct result so let
13:17 - me show
13:20 - you enter number one then 1 then - 6 so
13:26 - see total is 2 now it's working fine so
13:30 - this is something like infinite Lo
13:32 - because this one is always true so the
13:34 - while this condition is always true so
13:36 - if this condition is always true if you
13:37 - don't put any break here then definitely
13:40 - it will be infinite Loop it would keep
13:42 - asking you enter number enter number
13:44 - enter number so to break to stop an
13:47 - infinite Loop we can use breake
13:50 - statement this is I think the most
13:52 - appropriate use of this breake
13:54 - statement to break or to stop an
13:57 - infinite R right
13:59 - so now we will use we can also use this
14:01 - within nested Loop let me show you that
14:03 - thing also okay I'll be using this in
14:05 - nested Loop nested Loop means if you
14:07 - have gone through my previous C++ sorry
14:10 - c playlist and there we have used uh we
14:12 - have discussed what is nested Loop and
14:14 - the need of nested Loop so that is Loop
14:17 - within a loop and these nested Loops are
14:19 - basically used to handle uh
14:21 - multi-dimensional arrays 2D array 3D
14:23 - array whenever you want to print that
14:24 - those pattern star pattern alphabet
14:26 - pattern so there we have 2D like rows
14:30 - and columns so to handle these things
14:32 - we'll discuss Ned Loop so Ned Loop means
14:35 - Loop within a loop right so let's take
14:39 - we have a four
14:43 - Loop see n we will be discussing uh in
14:46 - uh you know later videos in detail this
14:50 - is just brief Loop within a loop so in I
14:53 - is equal
14:54 - to 1 and this I should be less than
15:00 - three and I
15:03 - ++ right within this loop again I'm
15:06 - using one more
15:08 - Loop in suppose one variable is J any
15:12 - variable you can take I it's not like
15:13 - you have to take i j a b c x y z
15:15 - anything you can take again I'm
15:18 - initializing from Z J from one and J
15:22 - less than 5 and suppose semicolon
15:27 - j++ right
15:29 - and within this loop I want to print I
15:32 - and J values
15:34 - right and after printing both the
15:37 - values either you can use slash and or E
15:41 - and DL for new line
15:45 - because okay this is the case right so
15:49 - after
15:50 - this return
15:57 - zero so what it will print first I is
16:00 - one condition true so it will enter here
16:02 - now J is one condition true enter here
16:05 - so first I will print one and one it
16:07 - will print I and J value now we are
16:09 - within this
16:10 - Loop right so now j++ now J becomes two
16:14 - so again it will print 1 2 now again j++
16:18 - 1 3 1 4 1 5 sorry not 1 5 because I J is
16:23 - less than five so once J becomes five it
16:25 - will stop so till it will print 14 now
16:29 - as soon as J becomes five exit from this
16:32 - Loop now out of this inner loop now we
16:34 - are still in this outer loop if you're
16:37 - using nexted Loop then the out this Loop
16:39 - is known as outer loop and the within
16:40 - Loop is known as inner loop so now I ++
16:43 - now I becomes two condition true again
16:46 - enter here now again J is be you know J
16:49 - will
16:50 - be repeating from one to 4 so 2 1 2 2 2
16:55 - 3 2
16:56 - 4 like this these thing would be be
16:58 - printed you can just dry run this right
17:02 - just note down this thing and you can
17:03 - dry run this okay we'll get an error I
17:07 - doesn't uh name uh type
17:11 - i+
17:14 - okay it's okay let's run this I have
17:17 - selected that i+ so let's run this see
17:22 - i1 J should be let's decorate it a
17:26 - little bit J should be equal to and I
17:30 - equal
17:34 - to now let's run this see i1 J1 1 2 1 3
17:39 - 1 4 then 2 1 2 2 2 3 2 4 something like
17:42 - this but
17:45 - suppose here within this inner loop I
17:47 - want to break this if J equal equal to
17:54 - 3
17:56 - then break
18:04 - right so pause the video and let me just
18:08 - show you let me just uh tell what will
18:10 - be the output here in this case in
18:13 - comment section let's run this now what
18:15 - output you will get see 1 1 1 2 then 2 1
18:22 - 2
18:23 - 2 because as soon as this J becomes
18:27 - three break break means now it is going
18:30 - to jump out from the innermost Loop
18:33 - only it's not like that if you are using
18:36 - brake you will be out from both the
18:37 - loops no because we are using this brake
18:41 - statement and nearest Loop for this
18:42 - brake statement is this Force this whole
18:44 - Loop so we'll be out from the innermost
18:48 - Loop when you using this in nested Loop
18:50 - we are not out from this outer loop I
18:52 - hope you got this this point is to be
18:54 - noted right so this is how we can
18:57 - implement the break statement within
18:59 - nested Loop in infinite Loop and simple
19:02 - Loop
19:04 - right now and you can use this within
19:06 - for Loop within y Loop within doy loop
19:08 - as well as in range based for loop as
19:11 - well right in doy Loop also you can you
19:14 - can implement this thing or you can
19:16 - implement this thing the some kind of
19:19 - thing in doy Loop and there you can use
19:21 - breake statement so this is for your
19:22 - assignment you have to implement this
19:25 - this program this
19:27 - program with do wide Loop and there you
19:30 - have to use breake statement right and
19:31 - if you want to use within range based
19:33 - for Loop see this is the previous uh in
19:36 - previous video we have discussed this
19:38 - this thing range based for Loop this is
19:40 - the synx for here like we have a
19:45 - variable car c you can take or where you
19:48 - can take Auto right and here we have a
19:51 - string J so if you take Auto then the
19:53 - type of this C becomes automatically
19:55 - whatever the type of this string right
19:58 - so it will become automatically care and
20:00 - we are going to print C so if you run
20:02 - this then it will print
20:05 - jatri okay there is some error I have
20:09 - selected this thing let's run
20:12 - this see it will print J but what if I
20:16 - want to stop if you got a space then
20:18 - stop break out of this range B for Loop
20:21 - then we can use here also if this c
20:25 - equal to equal to a space just a space
20:31 - then
20:33 - use
20:34 - breake here I'm not using those curly
20:37 - bracket curly braces because if there's
20:39 - one statement only Within These Loop or
20:42 - within the IFL statement you can simply
20:45 - avoid that Curly braet right then break
20:49 - otherwise print C now pause the video
20:52 - and let me know in comment section what
20:54 - would be the
20:56 - output let's run this
20:58 - it will print only Jenny because as soon
21:01 - as after Jenny it will get a space break
21:04 - out of this range bed for Loop so no cut
21:06 - would be printed this is how we can use
21:08 - this break in within this range Bas for
21:10 - Loop also I hope you got this now if you
21:13 - want to draw the flow chart then you can
21:15 - try this out or let me just show you
21:17 - what is the flow chart of this break
21:20 - statement so I hope you have drawn the
21:22 - flow chart maybe it's not exactly as I
21:25 - have drawn but it's okay the logic you
21:28 - have to draw in a flowchart like how
21:31 - this is working the working of breake
21:33 - statement so first we have the condition
21:35 - in any Loop if you want to enter into
21:38 - that Loop if that condition is true then
21:40 - we will enter into the loop that means
21:41 - the body of the loop will be executed
21:43 - and that condition is false me directly
21:45 - out of the loop means the code after
21:47 - Loop body will be executed right now
21:50 - within this body of the loop you will
21:52 - get a condition to break from the loop
21:56 - if that condition is true then break
21:58 - statement will be executed and will be
22:00 - jump off of the loop means directly the
22:02 - code which is written after the loop
22:03 - body will be executed but if this
22:06 - condition is false then no break
22:08 - statement and again the body of the loop
22:11 - would be executed right I hope you got
22:14 - this fine now in the next video we'll
22:16 - see continue statement right so now I'll
22:18 - see in the next video then bye-bye take
22:20 - care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we have discussed Loops in C++ four Loop five Loop doy Loop and range based for Loop right now when we discussing these Loops kind of thing then we have like two statements break and continue or you can say two keywords right these are being used in Loops break and continue so in this video we'll see what is this brake statement why we use it how to use it and everything about brake statement with help of program also I'll show you practical right so first thing we will see what is break statement right and why we need this right so see as we have discussed switch case statements in previous videos in one of my previous video in this course C++ right there we have used brake to jump out of the switch case right same to jump out of a loop we will use we also use brake right now we can say it is a control statement so you can say it is a jump statement also right why this is called a control statement because it is used to control or it is used to break or it is used to manipulate the regular flow of your program or Loops whenever a specific condition is meant now what does this mean this line whatever I have said right now see let's take a real life example when you go to any amusement park there are so many like there is a you can say joint wheel right so they'll give you a ticket like maybe 50 rupees ticket and the time is 5 minutes or maybe uh you will get a 10 rounds of that joint whe right or maybe 5 minutes ride you will get in 50 rupees fine but suppose after five round because after completing 10 round that joint Feld is going to stop and like maybe uh the the the next who are in the queue are going to get on on that wheel and you have to get off from that wheel because they have complete because you have completed 10 round of that joint wheel so the termination condition of that joint wheel is after completing 10 round but because uh see sometimes after completing suppose five rounds you you got unwell you are puking and you are just screaming like hell something like this you got you know scared so in between after completing five round only in between they are going to stop and you can get off from that joint whe right now this is what kind of break the regular flow you have broken the regular flow of that joint wheel right because you you got unwell you are puking that is why they have to they had to stop that before meeting the termination condition termination condition is what after after completing the 10 round they you know usually they're going to stop right but in between you have broken the regular flow of that thing right same kind of thing if in Loops generally we use Loops when you want to repeat something suppose I want to print high five times so rather than printing five print F statement or five time like we are discussing now C++ C out statement we simply put that thing in Loop I'm just simply using for Loop you can use y Loop do y loop as you wish so the synx is like first initialization then termination condition less than equal to 5 and then update I ++ right and within this simply we can print like C out high this is the thing right so the regular flow of this Loop is what the high would be printed five time right and then the loop is going to terminate the ter condition is I less than equal to 5 but what if in between you want to break the loop What if after printing only three times I want to stop the loop then we can use break to just exit from the loop to jump out from the loop before meeting the termination condition but when whenever when a specific condition is made so you have to put what some condition something like this if this uh I becomes three then break have to use this the proper synx I'll show you right so you have to put some proper condition after meeting that condition just break from the loop right I hope you got this so the uh you have to note this point break you can use only within loops and switch State switch case statement if simply there is a program there is no Loop there is no switch case statement and you are using breake it will give error simply within if else you are using brake it will give error yeah here see if this condition is we are using this brake after this if because yeah obviously you have to put some condition in if and this is within this Loop that is why it it will not give any so brake can Al can be used only within loops and switch case statement right and it is used to jump out of the loop right before meeting uh the termination condition fine now in three ways we can use this brake statement we can use this within simple Loop like this we can use this within nested loops and we can use this within infinite Loops so these thing will I'll show you with the help of three programs right I hope you got the basic idea of break statement why we use this right so I'm working in visual studio and let's create a new file here the extension is do CPP right so first thing obviously what we need to do see this thing we have discussed already what is this iio stream why we are using why I'm using writing this name space STD so please watch out previous videos from this list right C++ so first obviously the name space STD because C andc out are in this name name space it is just to you know avoid the name for and then main function and here we will write down our logic so simple thing I'm taking first we are going to implement this break within a simple Loop right so just I'm using a four Loop right and let's initialize a variable I is equal to0 then some termination condition suppose I want to print uh from 0 to 10 numbers right or from 1 to 10 1 to I less than equal to 10 and then I ++ this thing I want to print right so within for Loop simply we can print C out and this I don't forget semicolon because I was working in Python for so long so yeah I have to remember this it's you have to put semicolon right so let's run this run this and I'll show you what kind of thing you will get see 1 2 3 4 5 6 7 8 9 10 but it's within one line and I want to print this one then in a new line then new line so we can use here endl or we can use here slash and also that is also Fine Again run this and I'll show you what kind of out output you will get see 1 to 10 but what if when the I becomes S I want to jump up the loop right so I want to break from this Loop so what we can use simply we just uh put a condition if I equal to equal to 7 then break right otherwise print I so it will print 1 to six 1 to six and if you want to print 7 as well then this see out statement you can use before this if then it will print 1 to 7 and then break but I want to print 1 to six as soon as I become seven out of the loop I don't want to print seven so see this is the break statement we have used within a simple for Loop right to jump out of this Loop so now if you want to use this in an infinite Loop let's take one more thing one more example and uh the example is suppose I want from the user to enter numbers and then some of those numbers it's not like that I want to do sum of one to 10 number or 1 to 15 number no the program will ask from the user enter a number and I enter a number then suppose I have entered one so again you ask enter number suppose I have entered again one so the sum becomes two again if you ask enter number suppose I have entered again three so the sum becomes five something like this so how many times it will ask from the user I don't know there's no fixed number of iteration as soon as the user enter a negative number it should stop and that negative number should not be added into the sum right so in this case we don't know the exact number of iteration so we cannot use full loop so better to use if you don't know number of iteration then we use while loop right so let's implement this thing and there we will uh implement this uh break statement right right so this is the implementation of break in simple Loop now we are implementing like uh this breake statement an infinite Loop so just put a while loop while one means this is true while one means true anything except except zero whatever you will write here that would be considered as true so while true right so it will ask from the user what enter a number so obviously you have to uh use you have to take a variable you have to initialize a variable suppose in Num so C in in Num variable I'm going to take this and obviously we will also take a total for some total is equal to it starting let's initialize it with zero otherwise it will give some garbage value so in starting it will zero right here we have a red line okay there's two these operators right now you have to do total so total becomes this total plus equal to whatever the number you will enter this kind of thing but whenever you have to break if this number whatever you the number you have entered is less than zero means negative number then simply break right out of this while loop and after this y Loop let's print the total then return zero for successful completion right and let's run this but there is it's there's no error but but there's a bug in this code let me show you what is the case see it is asking me enter a number right so I'm entering here one again enter number I'm entering again one I am entering now minus one or Min 6 so the sum it should give two because two number I have entered one one as soon as you enter negative number it should out be out of the loop so the sum it should give two but it is giving total is 4 why so because the problem is whenever you will enter one okay in Num we have one so in to in total we have now one now again 1 so 1 + 1 total becomes now 2 now I'm entering Min 6 so first it will do total so total is equal to Total plus num total is 2 number is 6 so it will become Min 4 and then this condition would be checked so this condition satis now it will break but this thing I don't want so you have to put this the logic this total logic after this break statement right this time it will give it will uh you know give the correct result so let me show you enter number one then 1 then 6 so see total is 2 now it's working fine so this is something like infinite Lo because this one is always true so the while this condition is always true so if this condition is always true if you don't put any break here then definitely it will be infinite Loop it would keep asking you enter number enter number enter number so to break to stop an infinite Loop we can use breake statement this is I think the most appropriate use of this breake statement to break or to stop an infinite R right so now we will use we can also use this within nested Loop let me show you that thing also okay I'll be using this in nested Loop nested Loop means if you have gone through my previous C++ sorry c playlist and there we have used uh we have discussed what is nested Loop and the need of nested Loop so that is Loop within a loop and these nested Loops are basically used to handle uh multidimensional arrays 2D array 3D array whenever you want to print that those pattern star pattern alphabet pattern so there we have 2D like rows and columns so to handle these things we'll discuss Ned Loop so Ned Loop means Loop within a loop right so let's take we have a four Loop see n we will be discussing uh in uh you know later videos in detail this is just brief Loop within a loop so in I is equal to 1 and this I should be less than three and I ++ right within this loop again I'm using one more Loop in suppose one variable is J any variable you can take I it's not like you have to take i j a b c x y z anything you can take again I'm initializing from Z J from one and J less than 5 and suppose semicolon j++ right and within this loop I want to print I and J values right and after printing both the values either you can use slash and or E and DL for new line because okay this is the case right so after this return zero so what it will print first I is one condition true so it will enter here now J is one condition true enter here so first I will print one and one it will print I and J value now we are within this Loop right so now j++ now J becomes two so again it will print 1 2 now again j++ 1 3 1 4 1 5 sorry not 1 5 because I J is less than five so once J becomes five it will stop so till it will print 14 now as soon as J becomes five exit from this Loop now out of this inner loop now we are still in this outer loop if you're using nexted Loop then the out this Loop is known as outer loop and the within Loop is known as inner loop so now I ++ now I becomes two condition true again enter here now again J is be you know J will be repeating from one to 4 so 2 1 2 2 2 3 2 4 like this these thing would be be printed you can just dry run this right just note down this thing and you can dry run this okay we'll get an error I doesn't uh name uh type i+ okay it's okay let's run this I have selected that i+ so let's run this see i1 J should be let's decorate it a little bit J should be equal to and I equal to now let's run this see i1 J1 1 2 1 3 1 4 then 2 1 2 2 2 3 2 4 something like this but suppose here within this inner loop I want to break this if J equal equal to 3 then break right so pause the video and let me just show you let me just uh tell what will be the output here in this case in comment section let's run this now what output you will get see 1 1 1 2 then 2 1 2 2 because as soon as this J becomes three break break means now it is going to jump out from the innermost Loop only it's not like that if you are using brake you will be out from both the loops no because we are using this brake statement and nearest Loop for this brake statement is this Force this whole Loop so we'll be out from the innermost Loop when you using this in nested Loop we are not out from this outer loop I hope you got this this point is to be noted right so this is how we can implement the break statement within nested Loop in infinite Loop and simple Loop right now and you can use this within for Loop within y Loop within doy loop as well as in range based for loop as well right in doy Loop also you can you can implement this thing or you can implement this thing the some kind of thing in doy Loop and there you can use breake statement so this is for your assignment you have to implement this this program this program with do wide Loop and there you have to use breake statement right and if you want to use within range based for Loop see this is the previous uh in previous video we have discussed this this thing range based for Loop this is the synx for here like we have a variable car c you can take or where you can take Auto right and here we have a string J so if you take Auto then the type of this C becomes automatically whatever the type of this string right so it will become automatically care and we are going to print C so if you run this then it will print jatri okay there is some error I have selected this thing let's run this see it will print J but what if I want to stop if you got a space then stop break out of this range B for Loop then we can use here also if this c equal to equal to a space just a space then use breake here I'm not using those curly bracket curly braces because if there's one statement only Within These Loop or within the IFL statement you can simply avoid that Curly braet right then break otherwise print C now pause the video and let me know in comment section what would be the output let's run this it will print only Jenny because as soon as after Jenny it will get a space break out of this range bed for Loop so no cut would be printed this is how we can use this break in within this range Bas for Loop also I hope you got this now if you want to draw the flow chart then you can try this out or let me just show you what is the flow chart of this break statement so I hope you have drawn the flow chart maybe it's not exactly as I have drawn but it's okay the logic you have to draw in a flowchart like how this is working the working of breake statement so first we have the condition in any Loop if you want to enter into that Loop if that condition is true then we will enter into the loop that means the body of the loop will be executed and that condition is false me directly out of the loop means the code after Loop body will be executed right now within this body of the loop you will get a condition to break from the loop if that condition is true then break statement will be executed and will be jump off of the loop means directly the code which is written after the loop body will be executed but if this condition is false then no break statement and again the body of the loop would be executed right I hope you got this fine now in the next video we'll see continue statement right so now I'll see in the next video then byebye take care
