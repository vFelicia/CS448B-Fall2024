With timestamps:

00:00 - so here the very important point is if
00:03 - only preorder and postorder is given
00:05 - then it is not possible to construct a
00:09 - unique binary tree I am saying unique
00:12 - binary tree fine
00:14 - second point is if only preorder and
00:18 - postorder is given then it is possible
00:20 - to construct a unique full binary tree
00:24 - okay see you cannot construct a unique
00:27 - binary tree you can construct a unique
00:29 - full binary tree I'll show you how I
00:32 - will take both the examples full binary
00:34 - tree also on for a binary tree also and
00:37 - I'll discuss with you the full method of
00:39 - constructing the binary tree from
00:41 - preorder and postorder plus I am going
00:44 - to tell you that prick simple like how
00:45 - to construct a by data from preorder and
00:48 - postorder fine so let us take this
00:50 - example be how preorder and postorder is
00:53 - given now you are supposed to construct
00:55 - a binary tree fine see according to the
00:59 - method I am going to tell you first of
01:00 - all see what is the preorder here we
01:04 - have root left and right preorder
01:09 - traversal and postorder traversal is
01:11 - left right and root fine now first step
01:17 - is you are supposed to find out the root
01:19 - how to find out the root first element
01:21 - in pre-order is root and last element is
01:23 - also root so F and F so you can say F is
01:26 - root of the tree now you can say here
01:29 - you can write F so now F is the root now
01:34 - next step is are supposed to find out
01:36 - the left subtree and right subtree of
01:39 - this F right so the next step is check
01:45 - out the successor of this F next next
01:48 - element in pre-order is successor of
01:50 - this root is be fine now find out where
01:54 - is B in this post order traversal base
01:57 - at this place right now all the elements
02:03 - from here from starting to B would be
02:08 - element of the left subtree fine so the
02:12 - element of left
02:13 - pria a c e b and b these are element of
02:19 - left subtree and the meaning element are
02:23 - from h igf-1 already taken as root
02:29 - element these are element of right
02:30 - subtree now problem has been divided
02:33 - into two parts
02:34 - this is the postorder now see this post
02:37 - would have this post order has been
02:38 - divided into two piles this one and this
02:40 - one so fine so two subproblems are there
02:43 - for this problem the pre-order is the
02:46 - pre-order is see if we have already
02:50 - taken from b2 this e so why Tilley have
02:55 - you come to know that that pre-order is
02:57 - from B to e you can see the element also
02:59 - next step is you can find out the
03:02 - predecessor of this root element in post
03:05 - order in post order predecessor
03:07 - predecessor is G now find out where is G
03:11 - in pre-order so here we have G so from B
03:15 - to e the previous element of G till that
03:19 - element from B to E those element would
03:23 - be the part of left subtree and from
03:25 - this G to last H element would be the
03:29 - part of right subtree now we have again
03:33 - I am writing pre-order s be a d CN e and
03:38 - postorder for this problem is a c e b
03:44 - and b now i am going to construct the
03:48 - left subtree first now this is the
03:50 - pre-order this is the post order now
03:52 - again recursively you have to apply the
03:54 - same step on this thing now see how to
03:57 - find out route first element this is
04:00 - route and here we have last element both
04:02 - elements are same so B is the route from
04:07 - these elements B is the route for left
04:09 - subtree right b and b now next step was
04:13 - find out the successor of this be in
04:16 - preorder successor of route in pre-order
04:19 - that is a find out where is a in post
04:23 - order right here we have a so all the
04:27 - from the starting to this a would be the
04:31 - part of left sub-tree but here we have
04:34 - only one element a only we have only a
04:36 - so so this a would be the part of left
04:39 - sub-tree and the c eb c e d these are
04:46 - part of right sub-tree fine so left is
04:50 - over now thus again problem has been
04:53 - divided into sub problems now favor here
04:55 - post order is only c e and d now for
04:59 - this post order preorder would be
05:01 - pre-ordered will also divided into two
05:03 - parts but see this is the sub problem
05:05 - that is over now for c e and d see here
05:08 - we have post order is c e and b for this
05:13 - problem pre-order s divide the spear
05:15 - into two parts this C if you have
05:19 - already taken now apply the same rule
05:21 - find out the predecessor of this root
05:23 - element that is d find out where is d in
05:25 - pre-order here we have d so we are not
05:29 - going to take d the previous element is
05:32 - a so for this subproblem the post order
05:35 - is a and always the pre-order is also a
05:37 - so this side we have only one element
05:38 - this preorder for this c e d is what d
05:44 - CN e b CN e right now apply same step
05:51 - again route is d here we have root so
05:55 - here out of these element D would be the
05:58 - root now D we have taken find out the
06:02 - successor of successor of this day in
06:03 - pre-order that is C now find out where
06:07 - is C in post order here we have C so all
06:10 - the elements from the starting to see
06:13 - would be the part of left subtree but we
06:15 - are only 1 element C so C is part of
06:17 - left subtree remaining remaining element
06:20 - is only e so e is the part of right
06:24 - subtree because d we have already taken
06:26 - so this is over now now let us consider
06:29 - this right side because we have only can
06:32 - we have constructed this left subtree
06:35 - now what about this one
06:37 - now for this sub-problem post order is a
06:40 - I and G and pre-order s pre-order s GI n
06:48 - H G and H right so now find out route
06:55 - route is first element in pre-order G or
06:57 - you can say last element in post orders
06:59 - so from these elements G would be the
07:02 - route so we have taken G now next step
07:05 - is find out successor of this root
07:07 - element in pre-order in pre-order that
07:10 - is I a next step is locate where is I in
07:16 - this post order now here we have I right
07:20 - so now from starting till I all the
07:25 - elements would be part of left subtree
07:28 - so left subtree partners h end i so here
07:31 - we have h end high right and there is no
07:36 - right element remaining because G we
07:38 - have already taken so right subtree
07:41 - would be none okay fine now again we
07:45 - have this post total problem has been
07:47 - divided into two parts so now post order
07:49 - is H and I and for this this preorder
07:55 - would be pre-order would be G we have
07:57 - already taken I n H right again apply
08:02 - same step route would be I right to
08:09 - design from these element only and s is
08:11 - remaining now find out next element is H
08:14 - or you can say successor of this root
08:16 - element in pre-order that is H now find
08:19 - out where is H in post order here we
08:21 - have H now all the elements from
08:24 - starting to this this element to tell H
08:27 - would be the part of left subtree but to
08:29 - be only one element H so at h is left
08:33 - subtree and no right an element is there
08:35 - so right element so so the writes
08:38 - appraised none so now this is our
08:41 - boundary from this preorder and
08:42 - postorder right now i am going to tell
08:47 - you the simple great now the simple
08:49 - trick is how to construct from preorder
08:52 - and postorder see
08:53 - root is always the first element in
08:56 - pre-order okay fine
08:58 - we have F is the room now find out next
09:00 - element in this pre-order that is B
09:03 - right now where is B in this post order
09:07 - B is at this place now if this this next
09:10 - element this this B this next element of
09:13 - this root which is in pre-order if this
09:16 - next element in post order is to the
09:19 - left of route to the left of route then
09:23 - that element would be part of the route
09:25 - now route is F and B is obviously to the
09:29 - left of this route so this B is part of
09:31 - F either the left child of F or the or
09:34 - the right child of F right now here we
09:37 - have no left child no right side the
09:40 - first of all you are going to fill left
09:42 - child right so here we will write be
09:46 - fine
09:47 - find out next element next element is a
09:50 - now find out where is a in post order is
09:52 - at the space so now here is to the left
09:55 - of B it is also the left of F but we are
09:59 - going to take what will be there we are
10:01 - working on this B now right so to the
10:05 - left of P we have a so a is part of b
10:09 - and b is not having any left and right
10:11 - child so we are going to fill first off
10:13 - or left side so here we will write a
10:15 - next element is we find out where is d
10:18 - here we have B D is to the left of this
10:21 - B right obviously it is left of F but we
10:25 - are going to take first of all B because
10:27 - that is the immediate left of me
10:29 - so it is part of be fine but B has
10:32 - already left side so the remaining place
10:35 - is only a right child so here we will
10:37 - write B next is C where is C here we
10:41 - have C now C is to the left off to the
10:44 - left of first first element first root
10:48 - is D although she is left of B also F
10:51 - also but when we are going to when we
10:54 - are going to traverse this from left to
10:55 - right then first you will find what D so
10:58 - it is part of D so we are going to write
11:00 - to the left of D that is C next
11:03 - where is he here we have e trevor's from
11:07 - left to right first we first element you
11:09 - find is B so it is part of the only part
11:13 - of this root D so we are going to right
11:16 - to the right of day because left has
11:18 - already filled here we are right e next
11:20 - is G find out where is G here we have G
11:22 - G is to the left of F right so it is
11:26 - part of F now left is over because it is
11:30 - it has left child is already filled so
11:33 - right is only remaining so here we will
11:35 - write G next is I now find out where is
11:40 - I here we have eye eyes to the left of C
11:44 - when you are going to reverse this left
11:45 - to right from I so first element is G so
11:48 - it is part of G so we will write I here
11:52 - on next is H where is H trevor's this
11:57 - first element is I so it is part of I so
12:00 - we are going to write s we are going to
12:02 - write here to the left of I so this is
12:06 - our binary using that trick so see you
12:08 - can see that this and this are same but
12:12 - I already told you we cannot uniquely
12:15 - construct a binary tree using pre and
12:17 - post order now look at this binary tree
12:20 - if you find out preorder and postorder
12:22 - for this binary tree then you can find
12:25 - out the same pre and post order you can
12:29 - find out and you can tell me in the
12:31 - comment box whether you are finding the
12:32 - same binary same preorder and postorder
12:34 - for this mandatory or not but see this
12:37 - binary tree is different from the binary
12:39 - tree we have constructed using our
12:41 - methods right that is why I am saying
12:45 - that if pre and post order is given only
12:48 - pre and post order is given then you
12:49 - cannot construct a unique binary tree
12:52 - because here we are getting two binary
12:53 - for two binary tree we are having same
12:55 - pre and post order right so now this is
12:58 - the proof so now second point was you
13:01 - can construct a unique full binary tree
13:03 - from given pre and post order now let us
13:06 - check I am going to update in this also
13:09 - see if if I if I make this binary tree
13:13 - as full binary tree then what should be
13:15 - the changes see for binary trees
13:16 - what every node is having either zero or
13:21 - two children that is the only condition
13:25 - for full binary tree every node is
13:27 - having either zero or two children right
13:30 - it's not like that all the level should
13:33 - be completely filled or except last
13:35 - level or something like this as we have
13:36 - discussed in complete binary tree no the
13:38 - only condition is every node is having
13:40 - only zero kuching two children now for
13:43 - making this a full binary tree this
13:46 - child this node is having only one child
13:48 - so I'm going to put one more child that
13:51 - is I and J and this node is only having
13:54 - one child and ok so I guess this is now
13:58 - a full binary tree right same yeah we
14:02 - are going to make this as a full binary
14:04 - tree and we are going to construct this
14:06 - so for this full bind you to the
14:07 - preorder and postorder is this one now I
14:10 - am going to rub this see I'm not going
14:13 - to take this one and now suppose we have
14:17 - only this preorder and postorder now we
14:20 - are supposed to construct a full bind
14:22 - sorry you are supposed to construct a
14:24 - binary tree fine I am going to construct
14:26 - using the simple trick because I have
14:28 - already discussed the math method you
14:30 - can apply that method and you can find
14:32 - out the binary tree you find out the
14:33 - same answer so now for root preorder we
14:38 - will check the preorder this one is f
14:40 - first element is ruled so this is root F
14:42 - is root right now fine check out what is
14:47 - the next element to this route in
14:49 - pre-order only that is B now find out
14:51 - where is B in post order here we have B
14:54 - right and this B is to the left of root
14:57 - root is F and B is to the left of root
15:00 - right
15:00 - so it means B is part of F and part of F
15:03 - means either left or right but here we
15:05 - don't have any child the first of all we
15:07 - are going to fill left child so here we
15:09 - will write B next as a in post over here
15:13 - we have a so traverse the post order
15:15 - from left to right first element find is
15:17 - from F to B the element which are in the
15:20 - tree first element is B so it is part of
15:24 - B so we are going to write here left off
15:27 - the next element is
15:29 - d find out where is Dean postorder here
15:33 - we have D so traverse this first element
15:35 - finders B so it is part of be here we
15:38 - will write D to the right of B because
15:41 - left is already filled see here we have
15:44 - C and when you are going to traverse
15:46 - then it is it as to the first element is
15:49 - d and so it is to the left of this D
15:53 - right so it is part of D so to the left
15:57 - of day we have see next is e here we
16:01 - have in post order it is to the left of
16:03 - D so here we will write e next is G
16:07 - where is G here we have it is to the
16:10 - left of F so left child is over it is
16:12 - part of F left is filled so the only
16:16 - places right here will write G next is I
16:19 - where it is at this place
16:21 - now the first element when you are going
16:25 - to traverse this from left to right
16:26 - first element is G out of these elements
16:29 - which are the part of now tree G so it
16:33 - is it means it is a part of G we are
16:36 - going to fill the left side of G here
16:39 - you write I next as H very how much here
16:42 - we have edge traverse this first element
16:45 - is I so it is part of I so here you
16:48 - write to the left of I we will write H
16:51 - next is K here we have K it is left of I
16:55 - so it is part of I only write child is
16:58 - remaining so we're right here what okay
17:01 - next is J here we have J it is part of G
17:07 - right so left is child is filled so only
17:11 - right is remaining here we will write
17:13 - what J so this is the binary tree using
17:16 - this pre and post order so this is I
17:19 - guess the same first of all this was the
17:22 - tree and we made it a full binary tree
17:25 - and by inserting G here and K here this
17:29 - is full binary tree that is why we are
17:30 - able to construct this uniquely so you
17:34 - have to take care of this thing you can
17:35 - only construct a unique full by until
17:37 - tree from given preorder and postorder
17:40 - you cannot construct a unique
17:42 - and really from given pre and post order
17:44 - right now I guess you can apply the
17:48 - method on this thing because we have
17:50 - already discussed how the method is to
17:51 - be applied if I apply the method on this
17:54 - thing then the video would be very
17:55 - lengthy so I left this thing to you you
17:58 - have to construct full binary tree or
18:01 - you can say binary tree from this using
18:03 - that method full method and you are
18:06 - going to tell me in the comment that you
18:07 - are going you are you are finding the
18:09 - same answer as we have found using the
18:11 - trick right and the third is C suppose
18:14 - if I I make this binary tree as full
18:16 - binary tree so full for full binary tree
18:19 - here you like here I will insert a J and
18:21 - here I will insert key C now for this
18:26 - this full binary tree the pre and post
18:28 - order is this one now question for you
18:31 - is you don't have this binary tree
18:34 - you just look at pre and post order you
18:36 - are given this pre and post order and
18:38 - you are supposed to find out you are
18:39 - supposed to construct a binary tree so
18:41 - try to construct a binary tree using the
18:43 - trick also and plus the method also so
18:45 - that you get familiar with both the
18:47 - approaches fine and just tell me whether
18:50 - you are you are finding this the same
18:52 - binary tree from this pre and post order
18:55 - or not in the comment box right so I
18:58 - will see you in the next video till then
18:59 - bye-bye take care

Cleaned transcript:

so here the very important point is if only preorder and postorder is given then it is not possible to construct a unique binary tree I am saying unique binary tree fine second point is if only preorder and postorder is given then it is possible to construct a unique full binary tree okay see you cannot construct a unique binary tree you can construct a unique full binary tree I'll show you how I will take both the examples full binary tree also on for a binary tree also and I'll discuss with you the full method of constructing the binary tree from preorder and postorder plus I am going to tell you that prick simple like how to construct a by data from preorder and postorder fine so let us take this example be how preorder and postorder is given now you are supposed to construct a binary tree fine see according to the method I am going to tell you first of all see what is the preorder here we have root left and right preorder traversal and postorder traversal is left right and root fine now first step is you are supposed to find out the root how to find out the root first element in preorder is root and last element is also root so F and F so you can say F is root of the tree now you can say here you can write F so now F is the root now next step is are supposed to find out the left subtree and right subtree of this F right so the next step is check out the successor of this F next next element in preorder is successor of this root is be fine now find out where is B in this post order traversal base at this place right now all the elements from here from starting to B would be element of the left subtree fine so the element of left pria a c e b and b these are element of left subtree and the meaning element are from h igf1 already taken as root element these are element of right subtree now problem has been divided into two parts this is the postorder now see this post would have this post order has been divided into two piles this one and this one so fine so two subproblems are there for this problem the preorder is the preorder is see if we have already taken from b2 this e so why Tilley have you come to know that that preorder is from B to e you can see the element also next step is you can find out the predecessor of this root element in post order in post order predecessor predecessor is G now find out where is G in preorder so here we have G so from B to e the previous element of G till that element from B to E those element would be the part of left subtree and from this G to last H element would be the part of right subtree now we have again I am writing preorder s be a d CN e and postorder for this problem is a c e b and b now i am going to construct the left subtree first now this is the preorder this is the post order now again recursively you have to apply the same step on this thing now see how to find out route first element this is route and here we have last element both elements are same so B is the route from these elements B is the route for left subtree right b and b now next step was find out the successor of this be in preorder successor of route in preorder that is a find out where is a in post order right here we have a so all the from the starting to this a would be the part of left subtree but here we have only one element a only we have only a so so this a would be the part of left subtree and the c eb c e d these are part of right subtree fine so left is over now thus again problem has been divided into sub problems now favor here post order is only c e and d now for this post order preorder would be preordered will also divided into two parts but see this is the sub problem that is over now for c e and d see here we have post order is c e and b for this problem preorder s divide the spear into two parts this C if you have already taken now apply the same rule find out the predecessor of this root element that is d find out where is d in preorder here we have d so we are not going to take d the previous element is a so for this subproblem the post order is a and always the preorder is also a so this side we have only one element this preorder for this c e d is what d CN e b CN e right now apply same step again route is d here we have root so here out of these element D would be the root now D we have taken find out the successor of successor of this day in preorder that is C now find out where is C in post order here we have C so all the elements from the starting to see would be the part of left subtree but we are only 1 element C so C is part of left subtree remaining remaining element is only e so e is the part of right subtree because d we have already taken so this is over now now let us consider this right side because we have only can we have constructed this left subtree now what about this one now for this subproblem post order is a I and G and preorder s preorder s GI n H G and H right so now find out route route is first element in preorder G or you can say last element in post orders so from these elements G would be the route so we have taken G now next step is find out successor of this root element in preorder in preorder that is I a next step is locate where is I in this post order now here we have I right so now from starting till I all the elements would be part of left subtree so left subtree partners h end i so here we have h end high right and there is no right element remaining because G we have already taken so right subtree would be none okay fine now again we have this post total problem has been divided into two parts so now post order is H and I and for this this preorder would be preorder would be G we have already taken I n H right again apply same step route would be I right to design from these element only and s is remaining now find out next element is H or you can say successor of this root element in preorder that is H now find out where is H in post order here we have H now all the elements from starting to this this element to tell H would be the part of left subtree but to be only one element H so at h is left subtree and no right an element is there so right element so so the writes appraised none so now this is our boundary from this preorder and postorder right now i am going to tell you the simple great now the simple trick is how to construct from preorder and postorder see root is always the first element in preorder okay fine we have F is the room now find out next element in this preorder that is B right now where is B in this post order B is at this place now if this this next element this this B this next element of this root which is in preorder if this next element in post order is to the left of route to the left of route then that element would be part of the route now route is F and B is obviously to the left of this route so this B is part of F either the left child of F or the or the right child of F right now here we have no left child no right side the first of all you are going to fill left child right so here we will write be fine find out next element next element is a now find out where is a in post order is at the space so now here is to the left of B it is also the left of F but we are going to take what will be there we are working on this B now right so to the left of P we have a so a is part of b and b is not having any left and right child so we are going to fill first off or left side so here we will write a next element is we find out where is d here we have B D is to the left of this B right obviously it is left of F but we are going to take first of all B because that is the immediate left of me so it is part of be fine but B has already left side so the remaining place is only a right child so here we will write B next is C where is C here we have C now C is to the left off to the left of first first element first root is D although she is left of B also F also but when we are going to when we are going to traverse this from left to right then first you will find what D so it is part of D so we are going to write to the left of D that is C next where is he here we have e trevor's from left to right first we first element you find is B so it is part of the only part of this root D so we are going to right to the right of day because left has already filled here we are right e next is G find out where is G here we have G G is to the left of F right so it is part of F now left is over because it is it has left child is already filled so right is only remaining so here we will write G next is I now find out where is I here we have eye eyes to the left of C when you are going to reverse this left to right from I so first element is G so it is part of G so we will write I here on next is H where is H trevor's this first element is I so it is part of I so we are going to write s we are going to write here to the left of I so this is our binary using that trick so see you can see that this and this are same but I already told you we cannot uniquely construct a binary tree using pre and post order now look at this binary tree if you find out preorder and postorder for this binary tree then you can find out the same pre and post order you can find out and you can tell me in the comment box whether you are finding the same binary same preorder and postorder for this mandatory or not but see this binary tree is different from the binary tree we have constructed using our methods right that is why I am saying that if pre and post order is given only pre and post order is given then you cannot construct a unique binary tree because here we are getting two binary for two binary tree we are having same pre and post order right so now this is the proof so now second point was you can construct a unique full binary tree from given pre and post order now let us check I am going to update in this also see if if I if I make this binary tree as full binary tree then what should be the changes see for binary trees what every node is having either zero or two children that is the only condition for full binary tree every node is having either zero or two children right it's not like that all the level should be completely filled or except last level or something like this as we have discussed in complete binary tree no the only condition is every node is having only zero kuching two children now for making this a full binary tree this child this node is having only one child so I'm going to put one more child that is I and J and this node is only having one child and ok so I guess this is now a full binary tree right same yeah we are going to make this as a full binary tree and we are going to construct this so for this full bind you to the preorder and postorder is this one now I am going to rub this see I'm not going to take this one and now suppose we have only this preorder and postorder now we are supposed to construct a full bind sorry you are supposed to construct a binary tree fine I am going to construct using the simple trick because I have already discussed the math method you can apply that method and you can find out the binary tree you find out the same answer so now for root preorder we will check the preorder this one is f first element is ruled so this is root F is root right now fine check out what is the next element to this route in preorder only that is B now find out where is B in post order here we have B right and this B is to the left of root root is F and B is to the left of root right so it means B is part of F and part of F means either left or right but here we don't have any child the first of all we are going to fill left child so here we will write B next as a in post over here we have a so traverse the post order from left to right first element find is from F to B the element which are in the tree first element is B so it is part of B so we are going to write here left off the next element is d find out where is Dean postorder here we have D so traverse this first element finders B so it is part of be here we will write D to the right of B because left is already filled see here we have C and when you are going to traverse then it is it as to the first element is d and so it is to the left of this D right so it is part of D so to the left of day we have see next is e here we have in post order it is to the left of D so here we will write e next is G where is G here we have it is to the left of F so left child is over it is part of F left is filled so the only places right here will write G next is I where it is at this place now the first element when you are going to traverse this from left to right first element is G out of these elements which are the part of now tree G so it is it means it is a part of G we are going to fill the left side of G here you write I next as H very how much here we have edge traverse this first element is I so it is part of I so here you write to the left of I we will write H next is K here we have K it is left of I so it is part of I only write child is remaining so we're right here what okay next is J here we have J it is part of G right so left is child is filled so only right is remaining here we will write what J so this is the binary tree using this pre and post order so this is I guess the same first of all this was the tree and we made it a full binary tree and by inserting G here and K here this is full binary tree that is why we are able to construct this uniquely so you have to take care of this thing you can only construct a unique full by until tree from given preorder and postorder you cannot construct a unique and really from given pre and post order right now I guess you can apply the method on this thing because we have already discussed how the method is to be applied if I apply the method on this thing then the video would be very lengthy so I left this thing to you you have to construct full binary tree or you can say binary tree from this using that method full method and you are going to tell me in the comment that you are going you are you are finding the same answer as we have found using the trick right and the third is C suppose if I I make this binary tree as full binary tree so full for full binary tree here you like here I will insert a J and here I will insert key C now for this this full binary tree the pre and post order is this one now question for you is you don't have this binary tree you just look at pre and post order you are given this pre and post order and you are supposed to find out you are supposed to construct a binary tree so try to construct a binary tree using the trick also and plus the method also so that you get familiar with both the approaches fine and just tell me whether you are you are finding this the same binary tree from this pre and post order or not in the comment box right so I will see you in the next video till then byebye take care
