With timestamps:

00:00 - suppose very narrow street is there like
00:03 - this only one person can pass this
00:06 - street at one time okay now see suppose
00:11 - one person is coming from this side
00:14 - person p1 and second person is suppose
00:18 - at the same time coming from this side
00:20 - person p2 now
00:23 - the street is so narrow that only one
00:27 - person can pass the street condition is
00:29 - only one person can pass this trace can
00:32 - pass this street so here is p1 haze
00:35 - person p2 now the both the person got
00:38 - blocked
00:39 - neither p1 can go or neither p2 can go
00:42 - this side
00:42 - why so because they cannot share the
00:45 - street this street is non shareable only
00:48 - one person can use this this path this
00:51 - street at a time fine so here you can
00:56 - take P 1 and P 2 are that processes 2
01:00 - processes and this street is what
01:02 - resource ok now P 1 is waiting P 1 is
01:07 - also waiting for this resource to be
01:09 - free and P 2 is also waiting for this
01:12 - tree to be free so both the processes
01:15 - are waiting and both the processes are
01:17 - waiting for which resource which is held
01:19 - by another waiting process so in this
01:23 - case there is no progress we cannot say
01:26 - for how much amount of time they will
01:28 - wait because the way they will wait for
01:30 - in finite amount of time because there
01:34 - is no progress for thus 9 neither 4
01:37 - percent P 1 neither 4 person P 2 because
01:39 - they are just waiting there is no
01:41 - progress
01:42 - so in deadlock also this kind of
01:45 - situation is there you can say waiting
01:46 - for something for in finite time in
01:49 - which there is no progress for waiting
01:53 - processes in starvation also also we
01:56 - have discussed that waiting for in
01:58 - finite amount of time or you can say in
02:00 - definite blocking but deadlock is
02:02 - different from starvation in starvation
02:05 - we cannot say that there is no progress
02:07 - but in deadlock we
02:10 - say that there is no progress if this
02:12 - what is there no progress is there then
02:14 - this definitely there would be deadlock
02:17 - this condition is must means no progress
02:20 - must in starvation see because of higher
02:23 - priority processes are coming coming and
02:25 - coming low priority processes will you
02:27 - know wait wait for the CPU it's not
02:30 - getting the CPU but here progress is
02:33 - there means CPU is running some
02:35 - processes processes are coming and
02:37 - they're executing and they are going to
02:39 - terminate state progress is there but
02:41 - because of that priority case low
02:43 - priority processes are not getting the
02:45 - CPU fine CP R is not blocked but here
02:49 - here no progress would be there then
02:52 - there would be dead look if CPU got
02:54 - blocked see if you will not run any
02:56 - process then we can say that the low
02:59 - priority process will never get the CPU
03:02 - but here in this case in case of
03:04 - starvation
03:05 - maybe after 15 minutes after 1 hour
03:08 - after 2 RR or after 3 hour that higher
03:12 - priority processes will not come and
03:14 - ultimately that low priority process
03:16 - will get the CPU because of the progress
03:18 - only but if no progress case is there
03:21 - then definitely there would be deadlock
03:23 - so this this word is very important in
03:26 - deadlock no progress no progress means
03:28 - deadlock but you can say processes wait
03:32 - for one another section indefinitely
03:34 - here also you can say person P 1 is
03:37 - waiting for this P 2 is action and P 2
03:40 - is waiting for P 1 section but these
03:43 - action can not occur that is why they
03:47 - have to wait the processors will have to
03:49 - wait indefinitely and that is the
03:52 - condition of deadlock let us take one
03:54 - more example suppose 2 children are
03:57 - there and they want to draw something
03:59 - and on one table one drawing book is
04:02 - there and 1 you can say a sketch pen or
04:04 - you can say pencil is there fine
04:07 - now they they both the children run to
04:10 - get the trying book and pencil now one
04:13 - child got this drawing book and one
04:16 - another child got the pencil fine one
04:20 - child suppose see one and here we have
04:23 - pens
04:23 - and see to what pencil now neither see
04:29 - one can draw something nor see two can
04:31 - draw something why so because see two
04:33 - only has pencil and see - is waiting for
04:36 - this drawing book and see one is waiting
04:38 - for this pencil and see one has only
04:42 - drawing book so both are waiting for
04:45 - resources which are held by some other
04:48 - waiting process we cannot say by some
04:51 - other process which are waiting for some
04:56 - which are waiting for resources which
04:58 - are held by some and other waiting
05:01 - processes see this one is also waiting
05:03 - this one is also waiting by and here no
05:06 - progress case is also there you can
05:09 - easily analyze that here also no
05:11 - progress cases there so if no progress
05:13 - is there in any situation then you can
05:16 - say ultimately there will be dead no
05:21 - so this no progress funda is very
05:23 - important now come to the point of
05:26 - operating system see basically deadlock
05:29 - comes in the operating system which are
05:32 - image multiple processes are running
05:34 - multiple processes are competing for
05:36 - some resources and multi plus multiple
05:39 - processes will be running maybe you know
05:40 - in multi programming operating system
05:42 - see we have discussed many types of
05:44 - operating system in that we do we have
05:45 - discussed what is multi programming
05:46 - operating system so we can say multi
05:50 - programming operating system many
05:52 - processes are there many processes are
05:54 - running and many resources are also
05:57 - there but resources are finite number of
05:59 - resources we cannot say if resources are
06:02 - in finite then obviously there would not
06:04 - be dead low and we don't have in finite
06:07 - number of resources we have some limited
06:09 - number of resources resources means your
06:11 - CPU memory i/o devices and all these are
06:14 - resources fine and these these processes
06:18 - are computing obviously these processes
06:25 - multiple processes are running then
06:27 - these processes will be competing for
06:28 - these number of resources fine now it's
06:32 - some time maybe one process p1 requester
06:37 - is
06:43 - any process p1 requestor the source if
06:46 - this resource is available then
06:49 - ultimately this resource will be
06:51 - allocated to this process but suppose
06:53 - this price this resource is not
06:55 - available it may be some other processes
06:57 - holding this resource or using this
06:59 - resource right now at this point of time
07:02 - this resource cannot be allocated to
07:04 - this process then this process will go
07:06 - into waiting state and this will be
07:12 - waiting for this resource fine maybe
07:15 - some other processes are also waiting
07:16 - for this resource and sometimes this
07:20 - process this process which is in waiting
07:24 - State or in waiting State there may be
07:26 - set of processes more than one process
07:29 - so sometimes these processes or you can
07:32 - say this process never again change its
07:36 - state it will always remain in waiting
07:40 - state and why so because this process is
07:43 - waiting for a resource which is already
07:48 - held by another waiting process another
07:53 - waiting process is there which is
07:54 - holding this resource and that process
07:58 - suppose p2 is also in waiting state
08:01 - which is holding this resource waiting
08:06 - means obviously this would be waiting
08:07 - some another resource something like
08:11 - this now this p2 is waiting for a
08:14 - resource again maybe this resource is
08:17 - again held by waiting process so if this
08:21 - kind of scenario is there then you can
08:24 - see this is deadlock now you can say
08:27 - when a waiting process never again have
08:31 - able to change its state because it is
08:36 - waiting for the resources which are held
08:38 - by some other waiting processes then
08:41 - this situation is known as deadlock one
08:45 - more point also you can it and you can
08:47 - this definition and there is no progress
08:49 - then ultimately there would be deadlock
08:52 - now I will discuss what are the four
08:54 - necessary conditions see I am saying
08:56 - only necessary conditions I'm not saying
08:58 - that necessary and sufficient condition
09:00 - condition you cannot say necessary and
09:02 - sufficient condition only these are
09:04 - necessary conditions or you can say for
09:06 - many conditions now four conditions are
09:08 - there we'll discuss those conditions
09:10 - also now these are the four necessary
09:12 - conditions for deadlock you can say
09:14 - Coffman conditions for deadlock one is
09:16 - mutual exclusion second one is Holden
09:19 - weight makes is no preemption and next
09:20 - one is circular weight so a deadlock
09:23 - situation will arise if all the four
09:25 - conditions held in the system
09:28 - simultaneously at the same time all the
09:30 - force conditions not only one only two
09:33 - are only three no one though all the
09:34 - four conditions are there then deadlock
09:36 - would be there in the system now what is
09:38 - this mutual exclusion in this case we
09:41 - can say at least one resource must be
09:44 - must be held in a non shareable mode
09:47 - means we cannot only only one process
09:51 - known share pure mode means only one
09:52 - process can use a resource at one time
09:55 - no two process can share the resource
09:58 - any other process wants that resource
10:00 - then that second process has to wait
10:03 - until the completion of the first
10:05 - process this is first condition mutual
10:08 - exclusion see we have taken the example
10:11 - of this that street narrow street so
10:14 - that is known shareable why you can say
10:16 - non shareable because only one person
10:19 - can pass through that street and what at
10:21 - one amount of a particular amount of
10:23 - time if both the person if two person
10:26 - can pass then that is you can say
10:28 - shareable and at that time there would
10:30 - not be deadlock so that is why this
10:33 - condition should must be hold in the
10:35 - system at least one resource would be
10:37 - there must be held in non shareable more
10:39 - now next next one is holding weight it
10:43 - means processes must be holding some
10:47 - resource and waiting to acquire some
10:50 - other resources that are currently held
10:53 - by some other processes it should not be
10:56 - a case that if you are holding some
10:58 - resource you cannot wait for or you
10:59 - cannot request for
11:00 - and the resources no they're holding
11:03 - maybe resources r1 r2 and you are
11:04 - waiting for the source r3 and r4 that
11:07 - should be a case hold plus wait you can
11:11 - hold some resources also process can
11:12 - hold some resource also and can wait or
11:15 - or request for another resources also
11:17 - third is no preemption I have discussed
11:21 - this preemption many times means
11:23 - forcefully you can remove something so
11:26 - no preemption means the resources cannot
11:28 - be preempted if one process is holding
11:31 - some resource we cannot forcefully take
11:33 - that resource from that process no
11:35 - preemption would be there see in case of
11:37 - that drawing book in pen may be
11:42 - forcefully from one child we we took the
11:46 - drawing book and give it to the second
11:48 - children then obviously there would not
11:49 - be deadlock but that should not be a
11:51 - case you cannot forcefully take any
11:53 - resource from a process no preemption
11:56 - case would be there and last one is
11:58 - circular wait circular way it means they
12:01 - are waiting in circuit only like suppose
12:03 - we have processes from five processes
12:06 - are there P 1 P 2 P 3 P 4 P 5 and P 1 is
12:10 - waiting P 1 is waiting for a resource
12:13 - and that resource is held by process P 2
12:17 - P 2 is waiting for a resource that
12:19 - processes held by resource P 3 by
12:23 - process P 3 P 3 is waiting for a
12:26 - resource that is held by process P 4 and
12:28 - P 4 is waiting for a resource that is
12:31 - held by P 5 and finally P 5 is waiting
12:34 - for a resource and that resource is held
12:37 - by process P 1 so this is a circular
12:41 - wait condition so this would also be
12:44 - there otherwise deadlock would not be
12:48 - there fine
12:50 - so all these four conditions must be
12:53 - held simultaneously in a system then a
12:55 - deadlock situation arise fine so next
13:01 - video will discuss how to prove to
13:03 - handle the deadlock how to prevent how
13:06 - to avoid how to detect the deadlock how
13:08 - to recover the deadlock bankers
13:09 - algorithm and all fine so till then bye
13:12 - bye
13:12 - take

Cleaned transcript:

suppose very narrow street is there like this only one person can pass this street at one time okay now see suppose one person is coming from this side person p1 and second person is suppose at the same time coming from this side person p2 now the street is so narrow that only one person can pass the street condition is only one person can pass this trace can pass this street so here is p1 haze person p2 now the both the person got blocked neither p1 can go or neither p2 can go this side why so because they cannot share the street this street is non shareable only one person can use this this path this street at a time fine so here you can take P 1 and P 2 are that processes 2 processes and this street is what resource ok now P 1 is waiting P 1 is also waiting for this resource to be free and P 2 is also waiting for this tree to be free so both the processes are waiting and both the processes are waiting for which resource which is held by another waiting process so in this case there is no progress we cannot say for how much amount of time they will wait because the way they will wait for in finite amount of time because there is no progress for thus 9 neither 4 percent P 1 neither 4 person P 2 because they are just waiting there is no progress so in deadlock also this kind of situation is there you can say waiting for something for in finite time in which there is no progress for waiting processes in starvation also also we have discussed that waiting for in finite amount of time or you can say in definite blocking but deadlock is different from starvation in starvation we cannot say that there is no progress but in deadlock we say that there is no progress if this what is there no progress is there then this definitely there would be deadlock this condition is must means no progress must in starvation see because of higher priority processes are coming coming and coming low priority processes will you know wait wait for the CPU it's not getting the CPU but here progress is there means CPU is running some processes processes are coming and they're executing and they are going to terminate state progress is there but because of that priority case low priority processes are not getting the CPU fine CP R is not blocked but here here no progress would be there then there would be dead look if CPU got blocked see if you will not run any process then we can say that the low priority process will never get the CPU but here in this case in case of starvation maybe after 15 minutes after 1 hour after 2 RR or after 3 hour that higher priority processes will not come and ultimately that low priority process will get the CPU because of the progress only but if no progress case is there then definitely there would be deadlock so this this word is very important in deadlock no progress no progress means deadlock but you can say processes wait for one another section indefinitely here also you can say person P 1 is waiting for this P 2 is action and P 2 is waiting for P 1 section but these action can not occur that is why they have to wait the processors will have to wait indefinitely and that is the condition of deadlock let us take one more example suppose 2 children are there and they want to draw something and on one table one drawing book is there and 1 you can say a sketch pen or you can say pencil is there fine now they they both the children run to get the trying book and pencil now one child got this drawing book and one another child got the pencil fine one child suppose see one and here we have pens and see to what pencil now neither see one can draw something nor see two can draw something why so because see two only has pencil and see is waiting for this drawing book and see one is waiting for this pencil and see one has only drawing book so both are waiting for resources which are held by some other waiting process we cannot say by some other process which are waiting for some which are waiting for resources which are held by some and other waiting processes see this one is also waiting this one is also waiting by and here no progress case is also there you can easily analyze that here also no progress cases there so if no progress is there in any situation then you can say ultimately there will be dead no so this no progress funda is very important now come to the point of operating system see basically deadlock comes in the operating system which are image multiple processes are running multiple processes are competing for some resources and multi plus multiple processes will be running maybe you know in multi programming operating system see we have discussed many types of operating system in that we do we have discussed what is multi programming operating system so we can say multi programming operating system many processes are there many processes are running and many resources are also there but resources are finite number of resources we cannot say if resources are in finite then obviously there would not be dead low and we don't have in finite number of resources we have some limited number of resources resources means your CPU memory i/o devices and all these are resources fine and these these processes are computing obviously these processes multiple processes are running then these processes will be competing for these number of resources fine now it's some time maybe one process p1 requester is any process p1 requestor the source if this resource is available then ultimately this resource will be allocated to this process but suppose this price this resource is not available it may be some other processes holding this resource or using this resource right now at this point of time this resource cannot be allocated to this process then this process will go into waiting state and this will be waiting for this resource fine maybe some other processes are also waiting for this resource and sometimes this process this process which is in waiting State or in waiting State there may be set of processes more than one process so sometimes these processes or you can say this process never again change its state it will always remain in waiting state and why so because this process is waiting for a resource which is already held by another waiting process another waiting process is there which is holding this resource and that process suppose p2 is also in waiting state which is holding this resource waiting means obviously this would be waiting some another resource something like this now this p2 is waiting for a resource again maybe this resource is again held by waiting process so if this kind of scenario is there then you can see this is deadlock now you can say when a waiting process never again have able to change its state because it is waiting for the resources which are held by some other waiting processes then this situation is known as deadlock one more point also you can it and you can this definition and there is no progress then ultimately there would be deadlock now I will discuss what are the four necessary conditions see I am saying only necessary conditions I'm not saying that necessary and sufficient condition condition you cannot say necessary and sufficient condition only these are necessary conditions or you can say for many conditions now four conditions are there we'll discuss those conditions also now these are the four necessary conditions for deadlock you can say Coffman conditions for deadlock one is mutual exclusion second one is Holden weight makes is no preemption and next one is circular weight so a deadlock situation will arise if all the four conditions held in the system simultaneously at the same time all the force conditions not only one only two are only three no one though all the four conditions are there then deadlock would be there in the system now what is this mutual exclusion in this case we can say at least one resource must be must be held in a non shareable mode means we cannot only only one process known share pure mode means only one process can use a resource at one time no two process can share the resource any other process wants that resource then that second process has to wait until the completion of the first process this is first condition mutual exclusion see we have taken the example of this that street narrow street so that is known shareable why you can say non shareable because only one person can pass through that street and what at one amount of a particular amount of time if both the person if two person can pass then that is you can say shareable and at that time there would not be deadlock so that is why this condition should must be hold in the system at least one resource would be there must be held in non shareable more now next next one is holding weight it means processes must be holding some resource and waiting to acquire some other resources that are currently held by some other processes it should not be a case that if you are holding some resource you cannot wait for or you cannot request for and the resources no they're holding maybe resources r1 r2 and you are waiting for the source r3 and r4 that should be a case hold plus wait you can hold some resources also process can hold some resource also and can wait or or request for another resources also third is no preemption I have discussed this preemption many times means forcefully you can remove something so no preemption means the resources cannot be preempted if one process is holding some resource we cannot forcefully take that resource from that process no preemption would be there see in case of that drawing book in pen may be forcefully from one child we we took the drawing book and give it to the second children then obviously there would not be deadlock but that should not be a case you cannot forcefully take any resource from a process no preemption case would be there and last one is circular wait circular way it means they are waiting in circuit only like suppose we have processes from five processes are there P 1 P 2 P 3 P 4 P 5 and P 1 is waiting P 1 is waiting for a resource and that resource is held by process P 2 P 2 is waiting for a resource that processes held by resource P 3 by process P 3 P 3 is waiting for a resource that is held by process P 4 and P 4 is waiting for a resource that is held by P 5 and finally P 5 is waiting for a resource and that resource is held by process P 1 so this is a circular wait condition so this would also be there otherwise deadlock would not be there fine so all these four conditions must be held simultaneously in a system then a deadlock situation arise fine so next video will discuss how to prove to handle the deadlock how to prevent how to avoid how to detect the deadlock how to recover the deadlock bankers algorithm and all fine so till then bye bye take
