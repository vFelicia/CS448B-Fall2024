With timestamps:

00:01 - in the series of learning C programming
00:02 - we are discussing arrays and C we have
00:04 - discussed Declaration of arrays and
00:07 - initialization of arrays in C in the
00:09 - previous videos in this video I'll talk
00:11 - about memory initialization of arrays
00:14 - means memory representation how arrays
00:16 - are represented into the memory plus
00:18 - accessing of array element how you can
00:20 - access the elements of array these two
00:22 - points with some examples right now see
00:25 - how the memory would be represented to
00:28 - arrays as know how array can be declared
00:32 - like I'm taking just a name of array is
00:35 - a size is five and I'm initializing the
00:37 - array over here only suppose 1 10 0 - 1
00:42 - 3 five five date items we have declared
00:45 - an initialized the array at the same uh
00:48 - point at the same time this is what
00:50 - compile time initialization of array
00:53 - right now how does this memory would be
00:55 - allocated to this memory I have told you
00:57 - it's like something like this it's a
00:59 - long table of bytes like
01:04 - this right these are byes one b one b
01:07 - one b like this right 1 B is equal to 8
01:10 - bit fine now see how integer is going to
01:14 - take somewhere it takes two bytes and in
01:17 - some machine it take four bytes it
01:19 - depends right here I'm taking what four
01:22 - bytes you can also take two bytes it's
01:24 - not like that I'm taking four bytes and
01:26 - I'm getting many comments also ma'am
01:27 - integer will integer takes two bytes no
01:30 - four it's not like that now see here how
01:33 - many bites would be allocated to here if
01:35 - I take four bytes for one integer value
01:37 - then here I have five data items means
01:39 - 20 bytes would be allocated right but
01:43 - how and where in the memory it's not
01:46 - like that 10 bytes here here would be
01:49 - allocated then some space and 10 bytes
01:51 - in another location no the important
01:54 - point about memory representation of a
01:56 - is what memory allocation of a is what
01:59 - memory would be represented in the
02:02 - contigous type like the data items uh
02:06 - would be stored in contigous memory
02:08 - allocation right contous means like this
02:12 - one after
02:13 - another here one this this one first of
02:17 - all suppose I'm taking the here address
02:19 - is
02:20 - 2,000 and from here the bytes the memory
02:23 - would be allocated to this array for
02:25 - five data items means 20 bytes so from
02:28 - here till 20 bytes from here to 20 bytes
02:32 - like from uh like this like this 20
02:35 - bytes in continuous memory allocation
02:36 - would be allocated to this array from
02:38 - 2,000 suppose The Base address is 2,000
02:40 - it it would be in you know in
02:42 - hexadecimal form but for Simplicity
02:44 - purpose I'm taking 2,000 till the
02:46 - address of last bite would be
02:48 - 2019 right so here just I'm writing
02:53 - something like this I'm writing
02:55 - something like this see in one block in
02:57 - first four bites here here first integer
03:01 - would be stored like one in next 1 2 3 4
03:06 - in next these four bytes 10 would be
03:09 - stored like this data would be stored so
03:11 - rather than writing something like this
03:13 - I'm just writing I'm just uh know
03:16 - drawing a simple block for the these
03:18 - four bites
03:21 - right so here one would be stored then
03:24 - 10 the next would be next memory
03:26 - allocation then minus one and then three
03:29 - so this is how in consecutive locations
03:32 - continuous memory locations data would
03:34 - be stored it's not like that one here 10
03:37 - in another location leave some space 10
03:39 - another location leave some space minus
03:40 - one in another location and in random
03:42 - memory location no this is very
03:44 - important point this is property of
03:46 - array contous memory location would be
03:48 - allocated to all the data items of the
03:49 - array right this is very important here
03:52 - now
03:54 - see here the address of this this is
03:57 - what 2,000 now the address of second
04:00 - element would be what four bytes for
04:02 - this so the address would be
04:05 - 2004 then 8 then 12 and then 16 and this
04:12 - is the address and the index of array
04:15 - would always be started from 0o 0 to
04:19 - size minus 1 0 1 2 3 and 4 size - 1 5 -
04:24 - 1 that is 4 you have to remember this
04:27 - point also the a index would always be
04:29 - started from zero name of this array is
04:31 - what a right now one more point is what
04:36 - this is how the memory would be located
04:38 - this is how the memory representation of
04:39 - this array now second we'll see how how
04:43 - to access the elements of these arrays
04:45 - before that just want to tell you one
04:47 - thing this array the name of the array
04:50 - this is going to store what address of
04:54 - the first element or you can say this
04:57 - this 2000 is known as Base address
05:01 - address Base address of this array means
05:05 - address of the first element so this
05:08 - this name of the array here 2,000 would
05:11 - be store right so now see any variable
05:16 - that store address of any other thing
05:19 - other variable is known as pointer
05:21 - variable so that is why array name is
05:24 - known as a pointer or you can say
05:27 - internal pointer variable it is known as
05:30 - a pointer variable or you can say
05:32 - internal
05:35 - pointer point Y pointer I have told you
05:39 - because it will store address Base
05:42 - address of the array and if if it store
05:44 - address then it is known as obviously
05:46 - pointers are used to store address of
05:49 - other
05:50 - variables right so that is why it is
05:52 - known as pointer variable array name is
05:55 - pointer variable it it Xs as a pointer
05:58 - variable right right now how to access
06:02 - these elements if you want to access the
06:05 - first element of the array we can access
06:08 - the element using the index and name of
06:12 - the array so name of the array is
06:16 - a index of the first element is what
06:22 - zero so this is how you can access the
06:24 - first element the answer you will get
06:26 - one if you want to access
06:30 - this element fourth element of array
06:32 - first second third fourth element is
06:34 - fourth right but the index is three so
06:39 - how to access the fourth element this is
06:41 - how you can access the
06:44 - first element of the
06:46 - AR and if you want to access
06:49 - the fourth element then how you can
06:52 - access name of the array is a and index
06:55 - of fourth element is
06:58 - three and and value will get minus one
07:00 - so this is how you can access the fourth
07:03 - element
07:05 - right now see it's not like that now see
07:10 - Base address is here name of the array
07:13 - is going will store Base address now
07:15 - what about the other address obviously
07:17 - integer will take either two bytes or
07:19 - four bytes so you can calculate directly
07:21 - the other address like if four bytes
07:23 - then next element would be stored at
07:25 - which location 2004 because it is for
07:29 - sure that next element would be stored
07:32 - in the next memory location only
07:34 - contigous memory location that is for
07:36 - sure in arrays right next would be at
07:39 - memory location what you can add 4 bytes
07:42 - that is 2008 that is for sure right now
07:46 - how the address this address is to be
07:48 - calculated if you write in your program
07:51 - a
07:53 - of3 then how a of3 means this address
07:57 - 2012 how this has to be be calculated
08:00 - because we only know the address of Base
08:03 - address of the array means the address
08:05 - of the first element of the array right
08:08 - it's not like that we will first of all
08:10 - go to the first element then second then
08:12 - third then this element and then we will
08:14 - fetch this element no you can directly
08:17 - access any element of the array this is
08:19 - plus point of the
08:21 - array because here Random Access is
08:23 - possible random means you can access any
08:26 - data item of the array in constant time
08:30 - it's not like that you have to go
08:31 - sequentially like for first of all first
08:35 - element then second and third fourth and
08:36 - fifth no directly you can access now how
08:39 - directly you can access how the address
08:40 - is to be calculated this address see the
08:44 - formula is
08:45 - what Base address b stands for Base
08:48 - address plus
08:52 - index which element you want to access
08:55 - into
08:57 - size size of the the data type you are
09:00 - using here I'm using what integer so
09:02 - size of
09:06 - int that's it this is the formula to
09:09 - access any element of the array now here
09:12 - suppose I want to access fourth element
09:15 - fourth element means everybody know
09:18 - index would be three because index is
09:21 - going to be started from zero so index
09:23 - you will use what three into size of
09:26 - integer I'm taking four bytes here plus
09:30 - Base address is stored in this a name of
09:33 - the array that is
09:36 - 2,000 so you can calculate here plus 12
09:40 - and this one and we know as you can see
09:44 - address of fourth element is this one so
09:49 - directly we can access this data if you
09:52 - want to access second element or uh
09:55 - first element I want to access then I
09:57 - have told you and index value would be 0
10:00 - so here 2,000 + 0 into 4 0 into 4 means
10:04 - 0 so only
10:06 - 2,000 first ele second element you want
10:08 - to access means index would be Base
10:12 - address is 2,000 plus for second element
10:14 - index is 1 into size is 4 so 2004 as you
10:19 - can see the address is
10:22 - 2004 so you can access any data item in
10:26 - constant time order of one
10:31 - order of one time constant time right
10:33 - random exis is possible here and see
10:36 - this is what uh memory representation
10:38 - and accessing of 1D array more
10:41 - specifically if I say then it's 1D array
10:43 - one dimensional array means only one row
10:45 - and multiple columns we will discuss 2D
10:47 - array as well as multi-dimensional array
10:49 - in C right so this is what about 1D
10:52 - array now that's for this video I hope
10:54 - you are clear with these two
10:56 - fundamentals now from the next video I'm
10:59 - going to discuss some programs on array
11:01 - I mean maybe two or three programs on
11:03 - array so that you can get the concept
11:05 - clear because in the last two or three
11:07 - videos I have discussed only theory part
11:08 - no practical part so from the next video
11:10 - in two to three videos we will discuss
11:12 - some programs right how to declare
11:14 - initialize and everything how to you
11:16 - know uh print array elements or some
11:19 - programs also like uh finding the
11:21 - largest element from the array smallest
11:23 - element from the array or sum of array
11:25 - these type of programs or if you want me
11:28 - to discuss particular program on array
11:30 - then you can tell me in comment box
11:32 - right so now I'll see you in the next
11:33 - video till then
11:35 - bye-bye take
11:39 - care

Cleaned transcript:

in the series of learning C programming we are discussing arrays and C we have discussed Declaration of arrays and initialization of arrays in C in the previous videos in this video I'll talk about memory initialization of arrays means memory representation how arrays are represented into the memory plus accessing of array element how you can access the elements of array these two points with some examples right now see how the memory would be represented to arrays as know how array can be declared like I'm taking just a name of array is a size is five and I'm initializing the array over here only suppose 1 10 0 1 3 five five date items we have declared an initialized the array at the same uh point at the same time this is what compile time initialization of array right now how does this memory would be allocated to this memory I have told you it's like something like this it's a long table of bytes like this right these are byes one b one b one b like this right 1 B is equal to 8 bit fine now see how integer is going to take somewhere it takes two bytes and in some machine it take four bytes it depends right here I'm taking what four bytes you can also take two bytes it's not like that I'm taking four bytes and I'm getting many comments also ma'am integer will integer takes two bytes no four it's not like that now see here how many bites would be allocated to here if I take four bytes for one integer value then here I have five data items means 20 bytes would be allocated right but how and where in the memory it's not like that 10 bytes here here would be allocated then some space and 10 bytes in another location no the important point about memory representation of a is what memory allocation of a is what memory would be represented in the contigous type like the data items uh would be stored in contigous memory allocation right contous means like this one after another here one this this one first of all suppose I'm taking the here address is 2,000 and from here the bytes the memory would be allocated to this array for five data items means 20 bytes so from here till 20 bytes from here to 20 bytes like from uh like this like this 20 bytes in continuous memory allocation would be allocated to this array from 2,000 suppose The Base address is 2,000 it it would be in you know in hexadecimal form but for Simplicity purpose I'm taking 2,000 till the address of last bite would be 2019 right so here just I'm writing something like this I'm writing something like this see in one block in first four bites here here first integer would be stored like one in next 1 2 3 4 in next these four bytes 10 would be stored like this data would be stored so rather than writing something like this I'm just writing I'm just uh know drawing a simple block for the these four bites right so here one would be stored then 10 the next would be next memory allocation then minus one and then three so this is how in consecutive locations continuous memory locations data would be stored it's not like that one here 10 in another location leave some space 10 another location leave some space minus one in another location and in random memory location no this is very important point this is property of array contous memory location would be allocated to all the data items of the array right this is very important here now see here the address of this this is what 2,000 now the address of second element would be what four bytes for this so the address would be 2004 then 8 then 12 and then 16 and this is the address and the index of array would always be started from 0o 0 to size minus 1 0 1 2 3 and 4 size 1 5 1 that is 4 you have to remember this point also the a index would always be started from zero name of this array is what a right now one more point is what this is how the memory would be located this is how the memory representation of this array now second we'll see how how to access the elements of these arrays before that just want to tell you one thing this array the name of the array this is going to store what address of the first element or you can say this this 2000 is known as Base address address Base address of this array means address of the first element so this this name of the array here 2,000 would be store right so now see any variable that store address of any other thing other variable is known as pointer variable so that is why array name is known as a pointer or you can say internal pointer variable it is known as a pointer variable or you can say internal pointer point Y pointer I have told you because it will store address Base address of the array and if if it store address then it is known as obviously pointers are used to store address of other variables right so that is why it is known as pointer variable array name is pointer variable it it Xs as a pointer variable right right now how to access these elements if you want to access the first element of the array we can access the element using the index and name of the array so name of the array is a index of the first element is what zero so this is how you can access the first element the answer you will get one if you want to access this element fourth element of array first second third fourth element is fourth right but the index is three so how to access the fourth element this is how you can access the first element of the AR and if you want to access the fourth element then how you can access name of the array is a and index of fourth element is three and and value will get minus one so this is how you can access the fourth element right now see it's not like that now see Base address is here name of the array is going will store Base address now what about the other address obviously integer will take either two bytes or four bytes so you can calculate directly the other address like if four bytes then next element would be stored at which location 2004 because it is for sure that next element would be stored in the next memory location only contigous memory location that is for sure in arrays right next would be at memory location what you can add 4 bytes that is 2008 that is for sure right now how the address this address is to be calculated if you write in your program a of3 then how a of3 means this address 2012 how this has to be be calculated because we only know the address of Base address of the array means the address of the first element of the array right it's not like that we will first of all go to the first element then second then third then this element and then we will fetch this element no you can directly access any element of the array this is plus point of the array because here Random Access is possible random means you can access any data item of the array in constant time it's not like that you have to go sequentially like for first of all first element then second and third fourth and fifth no directly you can access now how directly you can access how the address is to be calculated this address see the formula is what Base address b stands for Base address plus index which element you want to access into size size of the the data type you are using here I'm using what integer so size of int that's it this is the formula to access any element of the array now here suppose I want to access fourth element fourth element means everybody know index would be three because index is going to be started from zero so index you will use what three into size of integer I'm taking four bytes here plus Base address is stored in this a name of the array that is 2,000 so you can calculate here plus 12 and this one and we know as you can see address of fourth element is this one so directly we can access this data if you want to access second element or uh first element I want to access then I have told you and index value would be 0 so here 2,000 + 0 into 4 0 into 4 means 0 so only 2,000 first ele second element you want to access means index would be Base address is 2,000 plus for second element index is 1 into size is 4 so 2004 as you can see the address is 2004 so you can access any data item in constant time order of one order of one time constant time right random exis is possible here and see this is what uh memory representation and accessing of 1D array more specifically if I say then it's 1D array one dimensional array means only one row and multiple columns we will discuss 2D array as well as multidimensional array in C right so this is what about 1D array now that's for this video I hope you are clear with these two fundamentals now from the next video I'm going to discuss some programs on array I mean maybe two or three programs on array so that you can get the concept clear because in the last two or three videos I have discussed only theory part no practical part so from the next video in two to three videos we will discuss some programs right how to declare initialize and everything how to you know uh print array elements or some programs also like uh finding the largest element from the array smallest element from the array or sum of array these type of programs or if you want me to discuss particular program on array then you can tell me in comment box right so now I'll see you in the next video till then byebye take care
