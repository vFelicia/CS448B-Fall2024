With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language uh we have
00:06 - discussed functions in C++ right so from
00:08 - today only we are going to start oops
00:10 - Concept in C++ class as object
00:13 - encapsulation abstraction polymorphism
00:15 - inheritance and many more right now
00:17 - before you know uh discussing those
00:20 - Concepts in deep let me just help you to
00:22 - understand first what is object ored
00:24 - programming what is oop and how this is
00:27 - different from the other approaches like
00:29 - Po procedure oriented programming right
00:32 - so this thing we will see in this video
00:34 - what is poop what is op advantages and
00:37 - drawbacks of these two approaches
00:38 - although I have discussed these things
00:40 - in a previous lecture also that also
00:42 - I'll link in the side button you can
00:44 - check out that video also right in this
00:46 - video I'll just give you a brief about
00:48 - know what is O right so now till now we
00:54 - uh you know we have written so many
00:55 - programs without functions as well as
00:58 - with functions after you know introduced
01:01 - after you know uh knowing about those
01:03 - functions we have uh written some
01:05 - programs using functions as well right
01:09 - so till now I guess you know I can say
01:12 - that we were following that procedure
01:14 - oriented programming
01:15 - approach right there are different
01:17 - different paradigms to solve the
01:18 - problems
01:20 - structure programming or poop or oop
01:23 - many things so main are Po and op so
01:25 - these two things we'll discuss right so
01:28 - C is procedure oriented programming
01:30 - language
01:32 - po now first let's understand what is
01:35 - this PO procedure oriented programming
01:38 - procedure
01:40 - means in this basically you know we
01:43 - focus on how to do the things how to do
01:46 - the things mainly focus on how procedure
01:50 - means
01:51 - how right so in this approach that
01:54 - programs is basically we can say it's a
01:57 - collections of functions we write so
01:59 - many functions and functions we call one
02:02 - function from another function and like
02:04 - this these functions are interrelated
02:06 - and interdependent with each other and
02:07 - all right so this kind of approach of
02:10 - solving a problem or writing a program
02:12 - is known as poop approach procedure
02:14 - oriented programming in this we uh focus
02:16 - on how to do we focus on the actions or
02:19 - we focus on the procedures or we can say
02:20 - we focus on the functions basically a
02:22 - program is having many functions right
02:26 - and we have some like now the data data
02:29 - is declared separately we have some
02:33 - global data as well as we have some
02:34 - local data which is local to function
02:37 - right and how these functions are going
02:40 - to uh you know uh call or to be called
02:45 - by passing arguments or I mean the data
02:48 - is to be passed uh using
02:52 - arguments sorry so if like if you
02:55 - visualize this thing something like this
02:57 - we have global data G is global data and
03:02 - I having suppose three
03:03 - functions this is function one and this
03:06 - function is having its own LD means
03:09 - local data so like this we are having
03:11 - three
03:21 - functions and every function is having
03:24 - its local data and some global data is
03:25 - there in our program right so how data
03:27 - is to be passed here data is pass in
03:30 - arguments right so it's like this is
03:33 - global data and this is accessible by
03:35 - all the functions so here we can say
03:37 - that in this approach there is less data
03:40 - security why I'm saying this because if
03:44 - one function is accessing this data so
03:46 - this function can modify this data this
03:49 - function can also modify this data this
03:50 - function can also modify this data so
03:52 - how this data is secure data is moving
03:55 - freely in the program so there is less
03:58 - data security
04:00 - right that is why when we were solving
04:03 - you know when we working on in that in
04:06 - you know on an organization level right
04:09 - on a large project or when we are
04:11 - writing you know some designing some
04:12 - software then we follow op approach
04:15 - rather than this approach for simple
04:17 - program it's okay but it's not like that
04:19 - we are just writing these simple
04:20 - programs addition of two numbers
04:22 - factorial F series and all no obviously
04:25 - the these programs are just to you know
04:28 - uh just to make you understand the
04:30 - simple logic or the basics of
04:32 - programming obviously after that you
04:34 - have to work on large projects you have
04:36 - to solve real world problems you have to
04:38 - make softwares so there we will be using
04:42 - op approach right because in this less
04:45 - data security is there and there are so
04:48 - many functions and all the functions are
04:50 - like interrelated like
04:54 - this and all these functions are
04:57 - interrelated with each other this
04:58 - function is calling this fun function
05:00 - this function is calling calling this
05:01 - function something like this right so
05:04 - there is so many interdependency in
05:06 - these functions so if you want to change
05:09 - in one function then you have maybe you
05:12 - will have to change in some other
05:13 - functions also or it will definitely
05:15 - affect the other functions as well or if
05:17 - you want to add some more function that
05:19 - also will be difficult right so for
05:23 - solving a large problem obviously this
05:25 - is not a correct approach there are so
05:27 - many drawbacks in this PO approach right
05:30 - but one thing I can say like it's easy
05:32 - to learn definitely but here one more
05:35 - problem is what when to pass the data in
05:38 - these functions then these functions
05:41 - needs to know the structure of the data
05:43 - what kind of data is to be passed here
05:45 - right and if you change in that
05:47 - structure of the data then you need to
05:50 - change maybe in many functions
05:53 - also right so this is also one drawback
05:56 - of this PO approach and because of this
05:58 - interdependence see in these functions
06:01 - it's difficult to understand the program
06:03 - difficult to maintain difficult to debug
06:05 - sometime right and for more scalable you
06:08 - know projects we can't use this approach
06:11 - because of these limitations so the next
06:13 - thing is we now comes to op approach
06:17 - object oriented programming approach now
06:20 - what is this approach this approach
06:23 - basically focus on what to do not how to
06:26 - do what to do right now object oriented
06:32 - means the more you know focus is on
06:35 - objects this programming approach is
06:38 - revolved or oriented basically around
06:41 - object now what is this object in real
06:44 - world if I say like this uh pen it's an
06:46 - object my laptop my camera cycle or my
06:49 - you know table chair these are like real
06:52 - world objects or entities we can see so
06:54 - objects are nothing but real world
06:55 - entities right and these real entities
07:00 - we can represent in programming with the
07:02 - help of this oop approach same we can
07:07 - model this real world entities in
07:08 - programming as an object as well right
07:11 - so we have concept of object classes and
07:14 - many you know Ops concepts are there
07:17 - right so basically this approach op
07:20 - approach is to model real world
07:22 - scenarios in
07:24 - programming but how this line is very
07:27 - important if you go to this line oops
07:30 - concepts are sorted but after you know
07:34 - uh discussing all these oops concept the
07:37 - four pillars of oops writing so many
07:38 - programs then you will get the meaning
07:41 - of this line and what is that line op
07:44 - concept these are you know used to model
07:47 - real world scenarios in programming
07:50 - right so if you're not getting the
07:52 - meaning of this line right now it's okay
07:55 - after you know writing so many programs
07:57 - and discussing all the concepts of UOP
07:59 - you will get L right like what are real
08:02 - world problems like maybe you are
08:04 - um uh developing any software regarding
08:07 - like Library management system or
08:09 - regarding student management system or
08:12 - Hospital management system or these kind
08:13 - of
08:14 - softwares right like any uh e-commerce
08:18 - websites we have so these are these
08:21 - software has to be made to solve some
08:23 - real world
08:24 - problems right so behind the scene there
08:27 - are so many you know there is so much
08:29 - code so we can't in that case we can't
08:32 - you know follow that poop approach
08:34 - because there would be lots of functions
08:36 - every function is interrelated and
08:38 - interdependency and all so that would be
08:39 - very difficult to code right in that
08:42 - approach but in
08:45 - op we can model easily this thing in
08:47 - programming with the help of classes and
08:49 - objects and other RS Concepts right so
08:52 - the main thing here is those functions
08:55 - and the related data I mean the data and
08:58 - the functions which will be performing
09:01 - some operations on that data would be
09:03 - bound in a single unit and that is like
09:06 - basically object so here what I want to
09:08 - say is here we have a function and the
09:11 - data this would be wrapped within a
09:13 - single unit right some functions we have
09:17 - and the data the related data I mean
09:20 - these functions would be performed
09:22 - operations on this data so that would be
09:24 - wrapped in a single unit so this is
09:26 - basically this one this complete is
09:29 - known as object this is known as
09:32 - object and they can also interact with
09:34 - with each other using message passing
09:36 - right those also and that thing also
09:38 - we'll see fine now now the rafting of
09:41 - the functions and data within a single
09:43 - unit is basically known as in
09:45 - capsulation right and objects are
09:48 - nothing but real world entities right
09:51 - and classes now classes are simply
09:53 - blueprint for these objects right now
09:55 - let's suppose
09:57 - uh I have one object like this Spen I
10:00 - have this Spen right so this object is
10:03 - having some
10:04 - property right like or maybe some
10:07 - attributes also like it is black in
10:09 - color properties are it can write right
10:12 - so something like this and suppose like
10:14 - me I'm an
10:16 - object right so every like everyone in
10:20 - my class there are 60 students these are
10:22 - objects each are having their own
10:24 - attributes and
10:26 - properties attributes like you know
10:28 - they're like maybe number of eyes one
10:30 - nose hair hair color and all these are
10:32 - attributes and properties are what they
10:34 - can do I mean like I can code I can sing
10:37 - or I can do something like I can cook so
10:39 - these are the functions or these are the
10:42 - you know uh properties that I can do
10:44 - these are some tasks I can do so these
10:45 - are like functions right and class is
10:49 - like a blueprint so class is like we can
10:51 - say like human human is a
10:54 - class so from this blueprint we can
10:57 - drive many objects
11:00 - like Jenny or many other objects as well
11:03 - these are objects right like a blueprint
11:05 - means um in a construction the map when
11:09 - you go to go to that architect then you
11:12 - know there would be one map and that has
11:14 - to finalize after that construction
11:16 - would be started so one map you have
11:19 - that is blueprint and the actual
11:21 - building that would be object now you
11:24 - got classes and objects in detail you'll
11:27 - see in uh next video right so I hope now
11:30 - the basic idea you got now what are the
11:32 - advantages of this object programming
11:35 - now here this this the data and the
11:37 - functions are binded with each other
11:39 - closely right so data will not move
11:43 - freely here in the program so more data
11:45 - security is there and to secure the data
11:48 - here we have specifi public private
11:52 - protected right if you want to make your
11:55 - data public means available to everyone
11:57 - you can make that public if you want to
11:59 - make make your data private you can make
12:00 - that private using exess
12:02 - specifier right you can Implement
12:04 - obstruction here right obstruction means
12:07 - in real life uh we have like
12:10 - um there is a switch board so once once
12:12 - you uh you know once you switch on that
12:16 - press the button press the switch to own
12:18 - that fan that's it fan would be own and
12:22 - it's like you don't know what is
12:24 - happening behind the scene there are so
12:26 - many wires how the electricity is to be
12:28 - passed and all
12:29 - so that is kind of abstraction you have
12:32 - the remote of AC you just switch on the
12:34 - AC and that's it you don't know what is
12:37 - happening behind the
12:38 - scene right behind that you know under
12:41 - that remote what you have you just see
12:45 - the interface those buttons only you
12:47 - just press the button and the
12:48 - functionality would be done according to
12:50 - you right so this is kind of abstraction
12:52 - you don't know the implementation you
12:54 - only know what you need to know the
12:57 - simple things right not the
12:59 - implementation or the other details so
13:01 - that is kind of obstruction that we can
13:02 - achieve here with OP
13:08 - approach and reusability is more here
13:12 - reusability of the code because of we
13:14 - have inheritance one concept right so
13:18 - you can create a like new class uh from
13:21 - that existing class right and you can
13:23 - inherit the features I mean the
13:25 - functions and all from that already
13:27 - existed class right so Reus is more here
13:30 - one more thing is so it's like we can
13:33 - use those already built in classes and
13:35 - some other applications right but we
13:37 - cannot apply this oops concept we cannot
13:39 - apply this oops approach to solve every
13:41 - problem it's not Universal thing you
13:45 - can't apply this everywhere there are
13:47 - some problems to solve them you have to
13:49 - use po approach only right and it's a
13:52 - little bit tricky to learn these concept
13:55 - right and sometimes uh the program would
13:58 - be a little bit lengthy if you follow
14:00 - this approach so it would be you know
14:02 - the performance would be uh performance
14:04 - would be affected a little bit and it
14:06 - can consume more memory and more CPU
14:09 - resources than po sometimes because see
14:12 - these objects contains both functions
14:14 - and data together so sometimes it it
14:17 - requires more time or more space to
14:20 - create such objects right so there are
14:22 - some limitations as well of this op
14:24 - approach as well as some advantages over
14:26 - po approach but definitely when you are
14:28 - working working on that organizational
14:30 - level working on large project you are
14:32 - creating softwares then definitely you
14:34 - follow this approach like op approach
14:37 - because of the advantages you have right
14:40 - and one by one each concept now we will
14:41 - be discussing later the next video would
14:43 - be about classes and objects right
14:45 - proper program I'll show you fine so now
14:49 - I guess you got the basic idea what is
14:51 - op and what is Po and what is the
14:52 - difference and all if you have any
14:54 - question you can just let me know in
14:55 - comment section right now that's it for
14:58 - this video now I'll see on the the next
14:59 - video till then bye-bye take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language uh we have discussed functions in C++ right so from today only we are going to start oops Concept in C++ class as object encapsulation abstraction polymorphism inheritance and many more right now before you know uh discussing those Concepts in deep let me just help you to understand first what is object ored programming what is oop and how this is different from the other approaches like Po procedure oriented programming right so this thing we will see in this video what is poop what is op advantages and drawbacks of these two approaches although I have discussed these things in a previous lecture also that also I'll link in the side button you can check out that video also right in this video I'll just give you a brief about know what is O right so now till now we uh you know we have written so many programs without functions as well as with functions after you know introduced after you know uh knowing about those functions we have uh written some programs using functions as well right so till now I guess you know I can say that we were following that procedure oriented programming approach right there are different different paradigms to solve the problems structure programming or poop or oop many things so main are Po and op so these two things we'll discuss right so C is procedure oriented programming language po now first let's understand what is this PO procedure oriented programming procedure means in this basically you know we focus on how to do the things how to do the things mainly focus on how procedure means how right so in this approach that programs is basically we can say it's a collections of functions we write so many functions and functions we call one function from another function and like this these functions are interrelated and interdependent with each other and all right so this kind of approach of solving a problem or writing a program is known as poop approach procedure oriented programming in this we uh focus on how to do we focus on the actions or we focus on the procedures or we can say we focus on the functions basically a program is having many functions right and we have some like now the data data is declared separately we have some global data as well as we have some local data which is local to function right and how these functions are going to uh you know uh call or to be called by passing arguments or I mean the data is to be passed uh using arguments sorry so if like if you visualize this thing something like this we have global data G is global data and I having suppose three functions this is function one and this function is having its own LD means local data so like this we are having three functions and every function is having its local data and some global data is there in our program right so how data is to be passed here data is pass in arguments right so it's like this is global data and this is accessible by all the functions so here we can say that in this approach there is less data security why I'm saying this because if one function is accessing this data so this function can modify this data this function can also modify this data this function can also modify this data so how this data is secure data is moving freely in the program so there is less data security right that is why when we were solving you know when we working on in that in you know on an organization level right on a large project or when we are writing you know some designing some software then we follow op approach rather than this approach for simple program it's okay but it's not like that we are just writing these simple programs addition of two numbers factorial F series and all no obviously the these programs are just to you know uh just to make you understand the simple logic or the basics of programming obviously after that you have to work on large projects you have to solve real world problems you have to make softwares so there we will be using op approach right because in this less data security is there and there are so many functions and all the functions are like interrelated like this and all these functions are interrelated with each other this function is calling this fun function this function is calling calling this function something like this right so there is so many interdependency in these functions so if you want to change in one function then you have maybe you will have to change in some other functions also or it will definitely affect the other functions as well or if you want to add some more function that also will be difficult right so for solving a large problem obviously this is not a correct approach there are so many drawbacks in this PO approach right but one thing I can say like it's easy to learn definitely but here one more problem is what when to pass the data in these functions then these functions needs to know the structure of the data what kind of data is to be passed here right and if you change in that structure of the data then you need to change maybe in many functions also right so this is also one drawback of this PO approach and because of this interdependence see in these functions it's difficult to understand the program difficult to maintain difficult to debug sometime right and for more scalable you know projects we can't use this approach because of these limitations so the next thing is we now comes to op approach object oriented programming approach now what is this approach this approach basically focus on what to do not how to do what to do right now object oriented means the more you know focus is on objects this programming approach is revolved or oriented basically around object now what is this object in real world if I say like this uh pen it's an object my laptop my camera cycle or my you know table chair these are like real world objects or entities we can see so objects are nothing but real world entities right and these real entities we can represent in programming with the help of this oop approach same we can model this real world entities in programming as an object as well right so we have concept of object classes and many you know Ops concepts are there right so basically this approach op approach is to model real world scenarios in programming but how this line is very important if you go to this line oops concepts are sorted but after you know uh discussing all these oops concept the four pillars of oops writing so many programs then you will get the meaning of this line and what is that line op concept these are you know used to model real world scenarios in programming right so if you're not getting the meaning of this line right now it's okay after you know writing so many programs and discussing all the concepts of UOP you will get L right like what are real world problems like maybe you are um uh developing any software regarding like Library management system or regarding student management system or Hospital management system or these kind of softwares right like any uh ecommerce websites we have so these are these software has to be made to solve some real world problems right so behind the scene there are so many you know there is so much code so we can't in that case we can't you know follow that poop approach because there would be lots of functions every function is interrelated and interdependency and all so that would be very difficult to code right in that approach but in op we can model easily this thing in programming with the help of classes and objects and other RS Concepts right so the main thing here is those functions and the related data I mean the data and the functions which will be performing some operations on that data would be bound in a single unit and that is like basically object so here what I want to say is here we have a function and the data this would be wrapped within a single unit right some functions we have and the data the related data I mean these functions would be performed operations on this data so that would be wrapped in a single unit so this is basically this one this complete is known as object this is known as object and they can also interact with with each other using message passing right those also and that thing also we'll see fine now now the rafting of the functions and data within a single unit is basically known as in capsulation right and objects are nothing but real world entities right and classes now classes are simply blueprint for these objects right now let's suppose uh I have one object like this Spen I have this Spen right so this object is having some property right like or maybe some attributes also like it is black in color properties are it can write right so something like this and suppose like me I'm an object right so every like everyone in my class there are 60 students these are objects each are having their own attributes and properties attributes like you know they're like maybe number of eyes one nose hair hair color and all these are attributes and properties are what they can do I mean like I can code I can sing or I can do something like I can cook so these are the functions or these are the you know uh properties that I can do these are some tasks I can do so these are like functions right and class is like a blueprint so class is like we can say like human human is a class so from this blueprint we can drive many objects like Jenny or many other objects as well these are objects right like a blueprint means um in a construction the map when you go to go to that architect then you know there would be one map and that has to finalize after that construction would be started so one map you have that is blueprint and the actual building that would be object now you got classes and objects in detail you'll see in uh next video right so I hope now the basic idea you got now what are the advantages of this object programming now here this this the data and the functions are binded with each other closely right so data will not move freely here in the program so more data security is there and to secure the data here we have specifi public private protected right if you want to make your data public means available to everyone you can make that public if you want to make make your data private you can make that private using exess specifier right you can Implement obstruction here right obstruction means in real life uh we have like um there is a switch board so once once you uh you know once you switch on that press the button press the switch to own that fan that's it fan would be own and it's like you don't know what is happening behind the scene there are so many wires how the electricity is to be passed and all so that is kind of abstraction you have the remote of AC you just switch on the AC and that's it you don't know what is happening behind the scene right behind that you know under that remote what you have you just see the interface those buttons only you just press the button and the functionality would be done according to you right so this is kind of abstraction you don't know the implementation you only know what you need to know the simple things right not the implementation or the other details so that is kind of obstruction that we can achieve here with OP approach and reusability is more here reusability of the code because of we have inheritance one concept right so you can create a like new class uh from that existing class right and you can inherit the features I mean the functions and all from that already existed class right so Reus is more here one more thing is so it's like we can use those already built in classes and some other applications right but we cannot apply this oops concept we cannot apply this oops approach to solve every problem it's not Universal thing you can't apply this everywhere there are some problems to solve them you have to use po approach only right and it's a little bit tricky to learn these concept right and sometimes uh the program would be a little bit lengthy if you follow this approach so it would be you know the performance would be uh performance would be affected a little bit and it can consume more memory and more CPU resources than po sometimes because see these objects contains both functions and data together so sometimes it it requires more time or more space to create such objects right so there are some limitations as well of this op approach as well as some advantages over po approach but definitely when you are working working on that organizational level working on large project you are creating softwares then definitely you follow this approach like op approach because of the advantages you have right and one by one each concept now we will be discussing later the next video would be about classes and objects right proper program I'll show you fine so now I guess you got the basic idea what is op and what is Po and what is the difference and all if you have any question you can just let me know in comment section right now that's it for this video now I'll see on the the next video till then byebye take care
