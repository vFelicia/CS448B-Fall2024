With timestamps:

00:00 - hi guys welcome back today's topic is
00:02 - connected components I will discuss with
00:04 - you what are connected components and
00:05 - how to find out connected components
00:07 - from a given graph okay so what are
00:10 - connected components in a graph
00:13 - connected components either up or
00:14 - defined can either then you can say set
00:16 - of vertices which are reachable okay or
00:19 - you can say connected component is a sub
00:22 - graph in which any two vertices are
00:25 - connected by paths and know what SS is
00:29 - connected with any other vertices in the
00:31 - super graph okay let us take an example
00:34 - suppose this one is our graph you just
00:37 - by looking in this graph you how to
00:40 - check is everything connected or you can
00:42 - see it every you know disconnected media
00:44 - with each other yes every node is
00:46 - connected with each other so this graph
00:48 - is having only one connected component
00:49 - okay and let us suppose we have this
00:55 - graph and now this one is our graph
01:01 - how many connected components are there
01:04 - is every node is connected with each
01:06 - other yes every node is connected with
01:08 - each other okay then this graph is
01:10 - having only one connected component now
01:14 - let us suppose you modify this graph and
01:17 - we delete this edge now this one is your
01:24 - graph fine
01:26 - how many connected components are there
01:29 - by looking in this graph how many can
01:33 - you come is is everything connected no
01:35 - everything is not connected see this one
01:38 - this one this one this one these five
01:39 - nodes are connected so this is one
01:43 - connected component now we have these
01:46 - two sorry nodes also and these are
01:50 - connected with each other
01:51 - so this one is a second connected
01:54 - component in this graph as I have told
01:57 - you the definition of connected
01:58 - components is basically a sub graph say
02:00 - this one is a graph or you can say super
02:02 - graph the connected components here we
02:05 - have 1 & 2 the connected components is a
02:07 - sub graph in which every node yeah every
02:11 - what is
02:12 - connected by parts see in this component
02:15 - in this component every what X is
02:18 - connected by these paths this one this
02:21 - one this one this one or this one
02:22 - okay and second condition was what no
02:27 - what this says is connected with any
02:29 - other vertex in the super graph super
02:32 - graph is this one and it's graphically
02:35 - the vertex connected in here with any
02:40 - other vertex because in super graph we
02:42 - have two more vertices but these
02:44 - vertices are not connected with these
02:47 - vertices so this is what the connected
02:49 - component so in this graph we have two
02:51 - connected components now let us suppose
02:54 - I delete this edge now how many
02:59 - connected components are there in this
03:02 - graph we have three connected components
03:04 - okay this is also known as one connected
03:07 - component this is also known as one can
03:09 - I get component and this is one can I
03:11 - get components one two and three three
03:13 - connected components we have if suppose
03:16 - our graph is like this this one was our
03:26 - super graph so in this graph how many
03:29 - connected components are there one is
03:30 - this one one is this one and one is this
03:33 - one three connected components are there
03:35 - so see this is a pictorial view by
03:38 - looking at this graph you can easily
03:41 - tell how many connected components are
03:42 - there but in case of computer we have to
03:46 - use some algorithm to find out these
03:48 - connected components okay so what
03:51 - algorithms can be used either DFS or BFS
03:55 - depth-first search or breadth-first
03:58 - search I'll discuss with you how to find
04:01 - out connected components using that DFS
04:03 - algorithm with the help of one example
04:06 - okay let us see now I will discuss the
04:12 - algorithm to find out the connected
04:14 - components in a given graph and either
04:16 - you can use DFS traversal or DFS
04:18 - traversal in this elbow i am using DFS
04:21 - traversal to find out the connected
04:23 - components the main funda is
04:25 - many times the DFS traversal would be
04:28 - cold there would be the same number of
04:32 - components CP FS traversal is called
04:34 - three times then there would be three in
04:36 - the number of connected components if
04:38 - DFS traversal is called two times in the
04:40 - graph then there would be two connected
04:43 - components okay like this we will call
04:48 - this suppose DFS graph from this vertex
04:51 - zero then we can traverse this this one
04:54 - then two then three but you cannot go
04:57 - further from three because there is no
04:59 - connected as this three is not connected
05:01 - with any four five six or seven fine so
05:04 - here you have to store then again DFS
05:06 - traversal would be called from this four
05:08 - and we can go to five we can traverse
05:10 - this five only we cannot go anywhere
05:12 - else
05:13 - then again DFS traversal will be called
05:15 - from six then we can traverse six seven
05:17 - and eight and that's it so how many
05:20 - times DFS traversal has been called that
05:21 - is 4 3 times 2 we have 1 2 3 3 number of
05:25 - connected components in this graph ok by
05:29 - looking at this graph only you cannot
05:30 - know you can also rail this one is one
05:32 - connected component this one is second
05:33 - this one is third let us take this
05:35 - example suppose we have this graph this
05:38 - is complete graph from having vertex
05:41 - from 0 to 8 and graph is having vertex V
05:44 - and then edges set of edges e
05:46 - connected components from a graph G you
05:48 - have to find out the very first thing is
05:50 - assigned a flag value minus 1 to all the
05:55 - vertices in the graph in the elbow also
06:00 - I have written the same line for each
06:01 - vertex V belongs to n here n is total
06:05 - number of vertices in this graph so n is
06:08 - here 0 2 it means 9 we have n value is 9
06:12 - flag of V would be minus 1 we would be
06:17 - from 0 to 8 and flag of 0 to 8 could be
06:20 - minus 1 in starting count value is 0
06:23 - count would be then a total number of
06:25 - connected components okay now for in V
06:29 - is equal to 0 will strut
06:31 - let us suppose from the vertex 0 thortex
06:33 - ok starting my over V value 0 we left in
06:36 - and yes
06:38 - lose nine and zero is less than nine if
06:40 - condition is true then we will enter in
06:41 - this four loop
06:42 - okay now in the for loop what is written
06:45 - if flag of V is equal to is equal to
06:47 - minus one if this condition is true yes
06:50 - this one is true biggest flag of zero
06:52 - flag of zero is what minus one yes this
06:54 - condition is true then we will go to the
06:56 - if condition and an if condition what we
07:00 - have called a DFS V flag DFS has been
07:03 - called fine so here we value is zero and
07:07 - flag would be flag is minus 1 so this
07:10 - DFS would be cold and the control will
07:13 - go to here only this is function calling
07:16 - and then control will go to the function
07:18 - definition here we have defined this DFS
07:21 - in to be in flag here we value is 0 and
07:25 - flag is minus 1 okay then what is there
07:29 - flag of V is 1 if flag is minus 1 after
07:33 - entering this function that flag of that
07:37 - vertex should be converted to 1 so flag
07:39 - of 0 would be 1 minutes this vertex has
07:42 - been visited or traversed fine 1 or 1
07:46 - maybe we can say true or here minus 1 is
07:48 - false
07:49 - ok now see out we will print this week
07:54 - finally the output would be we would be
07:57 - printed the value of e is 0 ok 0 1 we
08:01 - printed now next is what for each
08:04 - adjacent node you if we now will check
08:08 - the adjacent node of this 0 how many
08:11 - additional and addition node are there 1
08:14 - and 3 we have to at the same node so for
08:18 - each at the st. node U of P find out if
08:22 - flag of U is minus 1 right we have this
08:29 - adjacent node 1 and 3 let us take we
08:31 - will take this one first of all now u
08:34 - value is what here we have U is equal to
08:37 - what flag of u flag of 1 is minus 1 yes
08:42 - that is minus 1 in that case what we
08:44 - have done this condition is true then
08:46 - DFS will be called recursive this is
08:49 - recursive code in this function
08:51 - then DFS here will go fine
08:57 - DFS would be cold and this one is un
09:01 - flap you value is one and flag is minus
09:07 - one so DFS will be hold now here we have
09:10 - one and flag is minus one now we are at
09:15 - this place again flag of V is equal to 0
09:19 - now VK Otsuka apni the vertex 1 now this
09:23 - flag of this would be 1 that is true and
09:26 - see out V then we will print this one
09:30 - okay
09:31 - next condition for each adjacent node U
09:35 - of V see now V is what this one okay and
09:39 - find out the each adjacent node of this
09:42 - one one guy descend note how many of us
09:44 - that 2 and 0 also okay 0 and 2
09:50 - for each at the st. node U of we if flag
09:54 - of U is minus 1 now let us take adjacent
09:58 - node to fine
10:00 - now are you becomes 2 flag of you
10:04 - suppose we are taking at the same node u
10:06 - u is suppose we are taking 2 now user to
10:09 - flag of 2 is minus 1
10:11 - yes this is minus 1 in that case again
10:13 - DFS would be cold here
10:17 - what now we have u value 2 and flag is
10:20 - minus 1 okay again DFS will be cold
10:23 - recursively ok into week V becomes what
10:27 - what value will be posed past 2 and
10:30 - minus 1 okay now flag of V is 1 now here
10:35 - V is what to this vertex to the flag of
10:38 - this would become 1 okay and see out we
10:42 - will print this to fine
10:46 - now suppose in this case we if we have
10:50 - this at this place at the vertex 1 so
10:54 - for each addition node U of we you can
10:56 - say why we go to this second node
10:59 - additional table cos 0 behind so if your
11:02 - go to 0 if you will take 0
11:03 - - vortex then flag of you flag of you is
11:07 - flag of zero is what - one no this one
11:09 - is not minus one okay then we will not
11:11 - call this function BFS again okay
11:15 - that is why we will check for each at
11:18 - this end node is zero K minus one and
11:20 - then again we have yeah one more
11:22 - additional that is to to to kill a check
11:24 - who got you take it now check to pass
11:28 - okay that is to has been printed now for
11:30 - eat at this end node you OFI now V is
11:33 - what this to node to now address a node
11:36 - of 2 is 1 and 3 ok suppose one is there
11:41 - I'm one goal it thing flag of you is we
11:44 - have taken us one ok flag up one is what
11:48 - is this - one no this is not - one take
11:52 - a leave it say we have to check this
11:54 - condition for each node for each
11:56 - adjacent node and now we will check for
11:58 - this 3 because the addition node of 2 is
12:00 - 1 and 3 now 4 check for 3 now view is
12:03 - what 3 okay
12:07 - now this one is 3 flag of 3 is minus 1
12:10 - yes this one is true then again DFS
12:12 - recursively will be cold now you value
12:14 - is what 3 and flag is minus 1 again this
12:17 - is cold now V value is what 3 and this
12:19 - one is minus 1 I will go to this loop
12:22 - flag of V now V key value K ok up key
12:25 - node 3 then this would become 1 and we
12:28 - would print this 3 okay now check for
12:33 - each adjacent node you OFI now B value
12:36 - is what this 3 by V values what this 3
12:41 - find out 3 K address and note we have 0
12:45 - & 2 if flag of U is equal to 0 minus 1
12:50 - yes there any adjacent node of 3 having
12:53 - flag minus 1 no with this condition is
12:58 - not true ok so no now what would happen
13:03 - we have checked out each see this
13:06 - condition would be check for each
13:08 - addition node so for 2 & 4 4 0 & 4 - we
13:13 - have checked for 0 also that condition
13:15 - is not true we have checked for - also
13:16 - this condition
13:17 - not true now the control will be out
13:21 - from this loop okay and the control will
13:25 - go where where the function has been
13:27 - cold from here to back to this point
13:31 - only okay now again you can say at this
13:35 - point only then now what would happen
13:37 - count plus plus count value is what zero
13:41 - now count boom become one okay okay
13:49 - count food become one will be out from
13:52 - this if statement but we are not out
13:54 - from this for statement because here
13:56 - what would happen we plus plus so you
14:00 - cannot say that B would be 1 why so
14:05 - because V is already three we has
14:10 - already been updated
14:11 - we has reached to the node 3 from this
14:15 - function only now we would become what
14:20 - for hi
14:24 - now again check that go check of the
14:26 - condition for is less than 9 yes this
14:28 - condition is true then can we enter in
14:30 - this for loop if flag of V is equal to
14:32 - Sigma is equal to minus 1 yes flag of 4
14:35 - is minus 1 this condition is true then
14:38 - you will enter there in this if
14:40 - condition if condition we again get how
14:42 - we will call this DFS now value of V is
14:44 - what for and flag is minus 1 this
14:48 - function will be cooled the control
14:50 - would go to here only
14:52 - ok now then what is the value of V what
14:56 - has been passed for and flag value is
14:59 - minus 1 fine now
15:03 - flag of V is equal to 1 we'll set this
15:07 - flag 1 okay now see out four would be
15:14 - printed here you can write see out
15:23 - / then four would be printed next line
15:27 - because the four would be printed in
15:29 - this line only then you cannot
15:30 - differentiate how many connected
15:33 - components are there and what are the
15:35 - vertices in that component so better if
15:37 - you will be right after the C out sorry
15:40 - count plus plus we write C out / and
15:43 - that is why this four would be printed
15:45 - in next line okay now we have printed
15:48 - this for for each at this end node U of
15:50 - V now here BV is what for at this end
15:54 - node of this 4 is 5 now you give value
15:57 - up Naposki are here 5 if flag of 5 is
16:02 - minus flag of u is minus 1 yes flag of 5
16:05 - is minus 1 this condition is true then
16:07 - again this recursively DFS would be cold
16:10 - and the value of U is what 5 at this
16:14 - place and flag is minus 1 flag of 5 is
16:16 - minus 1 now here 5 would be passed and
16:19 - here is minus 1 then flag off me
16:21 - we value is there what 5 the flag of 5
16:23 - would be set is 1 and see out this fight
16:29 - would be printed again check for each
16:31 - adjacent node U of V now V value is
16:34 - about 5 now check out the adjacent node
16:36 - of this 5 at this in order 5 is only we
16:39 - have one adjacent node that is 4 but
16:43 - this condition is not true for forward
16:45 - flag of 4 is minus 1 no this one is 1
16:48 - this condition is not true and we have
16:50 - only one at this end node so we cannot
16:51 - check out further then finally we would
16:55 - go back to this point and then count
16:58 - plus plus and count would become now
17:01 - what - ok and see out / and here we
17:06 - would go to the next line fine now see
17:11 - out plus plug our see out / and has been
17:13 - printed we are out from this F condition
17:16 - but we are not out from this for loop
17:18 - again V plus plus
17:20 - fine then we what is the recent value of
17:25 - V what has been passed back that is
17:27 - value has been updated to Phi phony then
17:30 - V plus plus would be 6 now you cannot
17:35 - say that pal happening past 40
17:36 - forty I'm gonna start yet at all five of
17:38 - you know it's functionally how Mary we
17:40 - keep a lookout you can fight then we
17:42 - give value would be six if flag of 6 is
17:46 - minus one
17:47 - yes this one is minus one this one is
17:49 - true again we would go to this DFS now
17:51 - we value would be passed as 6 and minus
17:55 - one now we would go to again here only V
17:58 - value is 6 and this one is minus one
18:02 - flag of we would be set as one six would
18:06 - be printed in next line now check out
18:09 - for each addition node u of V V value is
18:11 - 6 adjacent node is 7 and 8 first of all
18:15 - we will take this 7 now first you value
18:18 - is 7 flag of you value is now 7 flag of
18:22 - 7 is minus 1 here this condition is true
18:24 - then DFS would be gold and you is 7 and
18:27 - minus 1 would be passed here we have 7
18:30 - and minus 1 fine flag of VV is 7 that
18:35 - would be set to 1 only and 7 would be
18:38 - printed okay now for each addition node
18:45 - U of V now V is what 7 7 Gydesen node
18:48 - happening by 6 or 8 we will check for
18:50 - suppose 8 because 6 KH occur ok this
18:53 - condition would not be true then again
18:54 - I'm the skellige occurring 8 k liy
18:57 - object cut away okay yet clearly how
19:03 - many check here sorry
19:04 - and that case what would happen same
19:08 - would be it would be passed here minus 1
19:12 - again this would be 1 fine and it would
19:17 - be printed for each else in node of you
19:20 - of me 8 cards is in or 6 and 7 hem but
19:23 - this condition is not true for any node
19:25 - then we would go back to this point and
19:28 - count will be 3 see out plus 4 plus plus
19:32 - will go to the third line okay now out
19:35 - of this if statement now what is value
19:38 - of this V plus plus already this value
19:41 - has been updated to 8 now V plus plus
19:43 - they say over that would be 9 but 9 is
19:45 - not less than 9 this condition is not
19:48 - true then we
19:50 - Oh out of this four loop out of this
19:52 - four loop these are the bracket four for
19:55 - loop and out of this for loop what else
19:57 - has been printed see out count count
19:59 - value is worth three then three would be
20:01 - printed okay and we are out of this loop
20:07 - how many components are there three
20:09 - components are they account value is
20:11 - three so that is why we have three
20:13 - connected components in this graph so
20:16 - this is how you can check out this you
20:20 - know the kind of connected components in
20:22 - a given graph okay you would just take
20:26 - one example and place out this example
20:29 - with the help of one code okay so I'll
20:32 - see in the next video till then bye-bye
20:33 - take

Cleaned transcript:

hi guys welcome back today's topic is connected components I will discuss with you what are connected components and how to find out connected components from a given graph okay so what are connected components in a graph connected components either up or defined can either then you can say set of vertices which are reachable okay or you can say connected component is a sub graph in which any two vertices are connected by paths and know what SS is connected with any other vertices in the super graph okay let us take an example suppose this one is our graph you just by looking in this graph you how to check is everything connected or you can see it every you know disconnected media with each other yes every node is connected with each other so this graph is having only one connected component okay and let us suppose we have this graph and now this one is our graph how many connected components are there is every node is connected with each other yes every node is connected with each other okay then this graph is having only one connected component now let us suppose you modify this graph and we delete this edge now this one is your graph fine how many connected components are there by looking in this graph how many can you come is is everything connected no everything is not connected see this one this one this one this one these five nodes are connected so this is one connected component now we have these two sorry nodes also and these are connected with each other so this one is a second connected component in this graph as I have told you the definition of connected components is basically a sub graph say this one is a graph or you can say super graph the connected components here we have 1 & 2 the connected components is a sub graph in which every node yeah every what is connected by parts see in this component in this component every what X is connected by these paths this one this one this one this one or this one okay and second condition was what no what this says is connected with any other vertex in the super graph super graph is this one and it's graphically the vertex connected in here with any other vertex because in super graph we have two more vertices but these vertices are not connected with these vertices so this is what the connected component so in this graph we have two connected components now let us suppose I delete this edge now how many connected components are there in this graph we have three connected components okay this is also known as one connected component this is also known as one can I get component and this is one can I get components one two and three three connected components we have if suppose our graph is like this this one was our super graph so in this graph how many connected components are there one is this one one is this one and one is this one three connected components are there so see this is a pictorial view by looking at this graph you can easily tell how many connected components are there but in case of computer we have to use some algorithm to find out these connected components okay so what algorithms can be used either DFS or BFS depthfirst search or breadthfirst search I'll discuss with you how to find out connected components using that DFS algorithm with the help of one example okay let us see now I will discuss the algorithm to find out the connected components in a given graph and either you can use DFS traversal or DFS traversal in this elbow i am using DFS traversal to find out the connected components the main funda is many times the DFS traversal would be cold there would be the same number of components CP FS traversal is called three times then there would be three in the number of connected components if DFS traversal is called two times in the graph then there would be two connected components okay like this we will call this suppose DFS graph from this vertex zero then we can traverse this this one then two then three but you cannot go further from three because there is no connected as this three is not connected with any four five six or seven fine so here you have to store then again DFS traversal would be called from this four and we can go to five we can traverse this five only we cannot go anywhere else then again DFS traversal will be called from six then we can traverse six seven and eight and that's it so how many times DFS traversal has been called that is 4 3 times 2 we have 1 2 3 3 number of connected components in this graph ok by looking at this graph only you cannot know you can also rail this one is one connected component this one is second this one is third let us take this example suppose we have this graph this is complete graph from having vertex from 0 to 8 and graph is having vertex V and then edges set of edges e connected components from a graph G you have to find out the very first thing is assigned a flag value minus 1 to all the vertices in the graph in the elbow also I have written the same line for each vertex V belongs to n here n is total number of vertices in this graph so n is here 0 2 it means 9 we have n value is 9 flag of V would be minus 1 we would be from 0 to 8 and flag of 0 to 8 could be minus 1 in starting count value is 0 count would be then a total number of connected components okay now for in V is equal to 0 will strut let us suppose from the vertex 0 thortex ok starting my over V value 0 we left in and yes lose nine and zero is less than nine if condition is true then we will enter in this four loop okay now in the for loop what is written if flag of V is equal to is equal to minus one if this condition is true yes this one is true biggest flag of zero flag of zero is what minus one yes this condition is true then we will go to the if condition and an if condition what we have called a DFS V flag DFS has been called fine so here we value is zero and flag would be flag is minus 1 so this DFS would be cold and the control will go to here only this is function calling and then control will go to the function definition here we have defined this DFS in to be in flag here we value is 0 and flag is minus 1 okay then what is there flag of V is 1 if flag is minus 1 after entering this function that flag of that vertex should be converted to 1 so flag of 0 would be 1 minutes this vertex has been visited or traversed fine 1 or 1 maybe we can say true or here minus 1 is false ok now see out we will print this week finally the output would be we would be printed the value of e is 0 ok 0 1 we printed now next is what for each adjacent node you if we now will check the adjacent node of this 0 how many additional and addition node are there 1 and 3 we have to at the same node so for each at the st. node U of P find out if flag of U is minus 1 right we have this adjacent node 1 and 3 let us take we will take this one first of all now u value is what here we have U is equal to what flag of u flag of 1 is minus 1 yes that is minus 1 in that case what we have done this condition is true then DFS will be called recursive this is recursive code in this function then DFS here will go fine DFS would be cold and this one is un flap you value is one and flag is minus one so DFS will be hold now here we have one and flag is minus one now we are at this place again flag of V is equal to 0 now VK Otsuka apni the vertex 1 now this flag of this would be 1 that is true and see out V then we will print this one okay next condition for each adjacent node U of V see now V is what this one okay and find out the each adjacent node of this one one guy descend note how many of us that 2 and 0 also okay 0 and 2 for each at the st. node U of we if flag of U is minus 1 now let us take adjacent node to fine now are you becomes 2 flag of you suppose we are taking at the same node u u is suppose we are taking 2 now user to flag of 2 is minus 1 yes this is minus 1 in that case again DFS would be cold here what now we have u value 2 and flag is minus 1 okay again DFS will be cold recursively ok into week V becomes what what value will be posed past 2 and minus 1 okay now flag of V is 1 now here V is what to this vertex to the flag of this would become 1 okay and see out we will print this to fine now suppose in this case we if we have this at this place at the vertex 1 so for each addition node U of we you can say why we go to this second node additional table cos 0 behind so if your go to 0 if you will take 0 vortex then flag of you flag of you is flag of zero is what one no this one is not minus one okay then we will not call this function BFS again okay that is why we will check for each at this end node is zero K minus one and then again we have yeah one more additional that is to to to kill a check who got you take it now check to pass okay that is to has been printed now for eat at this end node you OFI now V is what this to node to now address a node of 2 is 1 and 3 ok suppose one is there I'm one goal it thing flag of you is we have taken us one ok flag up one is what is this one no this is not one take a leave it say we have to check this condition for each node for each adjacent node and now we will check for this 3 because the addition node of 2 is 1 and 3 now 4 check for 3 now view is what 3 okay now this one is 3 flag of 3 is minus 1 yes this one is true then again DFS recursively will be cold now you value is what 3 and flag is minus 1 again this is cold now V value is what 3 and this one is minus 1 I will go to this loop flag of V now V key value K ok up key node 3 then this would become 1 and we would print this 3 okay now check for each adjacent node you OFI now B value is what this 3 by V values what this 3 find out 3 K address and note we have 0 & 2 if flag of U is equal to 0 minus 1 yes there any adjacent node of 3 having flag minus 1 no with this condition is not true ok so no now what would happen we have checked out each see this condition would be check for each addition node so for 2 & 4 4 0 & 4 we have checked for 0 also that condition is not true we have checked for also this condition not true now the control will be out from this loop okay and the control will go where where the function has been cold from here to back to this point only okay now again you can say at this point only then now what would happen count plus plus count value is what zero now count boom become one okay okay count food become one will be out from this if statement but we are not out from this for statement because here what would happen we plus plus so you cannot say that B would be 1 why so because V is already three we has already been updated we has reached to the node 3 from this function only now we would become what for hi now again check that go check of the condition for is less than 9 yes this condition is true then can we enter in this for loop if flag of V is equal to Sigma is equal to minus 1 yes flag of 4 is minus 1 this condition is true then you will enter there in this if condition if condition we again get how we will call this DFS now value of V is what for and flag is minus 1 this function will be cooled the control would go to here only ok now then what is the value of V what has been passed for and flag value is minus 1 fine now flag of V is equal to 1 we'll set this flag 1 okay now see out four would be printed here you can write see out / then four would be printed next line because the four would be printed in this line only then you cannot differentiate how many connected components are there and what are the vertices in that component so better if you will be right after the C out sorry count plus plus we write C out / and that is why this four would be printed in next line okay now we have printed this for for each at this end node U of V now here BV is what for at this end node of this 4 is 5 now you give value up Naposki are here 5 if flag of 5 is minus flag of u is minus 1 yes flag of 5 is minus 1 this condition is true then again this recursively DFS would be cold and the value of U is what 5 at this place and flag is minus 1 flag of 5 is minus 1 now here 5 would be passed and here is minus 1 then flag off me we value is there what 5 the flag of 5 would be set is 1 and see out this fight would be printed again check for each adjacent node U of V now V value is about 5 now check out the adjacent node of this 5 at this in order 5 is only we have one adjacent node that is 4 but this condition is not true for forward flag of 4 is minus 1 no this one is 1 this condition is not true and we have only one at this end node so we cannot check out further then finally we would go back to this point and then count plus plus and count would become now what ok and see out / and here we would go to the next line fine now see out plus plug our see out / and has been printed we are out from this F condition but we are not out from this for loop again V plus plus fine then we what is the recent value of V what has been passed back that is value has been updated to Phi phony then V plus plus would be 6 now you cannot say that pal happening past 40 forty I'm gonna start yet at all five of you know it's functionally how Mary we keep a lookout you can fight then we give value would be six if flag of 6 is minus one yes this one is minus one this one is true again we would go to this DFS now we value would be passed as 6 and minus one now we would go to again here only V value is 6 and this one is minus one flag of we would be set as one six would be printed in next line now check out for each addition node u of V V value is 6 adjacent node is 7 and 8 first of all we will take this 7 now first you value is 7 flag of you value is now 7 flag of 7 is minus 1 here this condition is true then DFS would be gold and you is 7 and minus 1 would be passed here we have 7 and minus 1 fine flag of VV is 7 that would be set to 1 only and 7 would be printed okay now for each addition node U of V now V is what 7 7 Gydesen node happening by 6 or 8 we will check for suppose 8 because 6 KH occur ok this condition would not be true then again I'm the skellige occurring 8 k liy object cut away okay yet clearly how many check here sorry and that case what would happen same would be it would be passed here minus 1 again this would be 1 fine and it would be printed for each else in node of you of me 8 cards is in or 6 and 7 hem but this condition is not true for any node then we would go back to this point and count will be 3 see out plus 4 plus plus will go to the third line okay now out of this if statement now what is value of this V plus plus already this value has been updated to 8 now V plus plus they say over that would be 9 but 9 is not less than 9 this condition is not true then we Oh out of this four loop out of this four loop these are the bracket four for loop and out of this for loop what else has been printed see out count count value is worth three then three would be printed okay and we are out of this loop how many components are there three components are they account value is three so that is why we have three connected components in this graph so this is how you can check out this you know the kind of connected components in a given graph okay you would just take one example and place out this example with the help of one code okay so I'll see in the next video till then byebye take
