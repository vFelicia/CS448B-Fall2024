With timestamps:

00:00 - so in the series of learning python
00:01 - programming language in previous video
00:02 - we have discussed how you know some
00:04 - rules of naming a variable okay now in
00:06 - this video we will see the next topic is
00:08 - data types in python primitive data
00:09 - types in python or you can say built-in
00:11 - data type in python you'll see in this
00:13 - video this topic like what is data type
00:15 - what are different built-in data type in
00:16 - python how to use those those data type
00:18 - and all with the help of programs
00:21 - examples
00:22 - okay now see as an instance just data
00:25 - type means it tells the type of data
00:28 - we can store in a variable this kind of
00:30 - thing but in python it is different from
00:33 - c and c plus plus those languages
00:36 - in python python is an object oriented
00:38 - programming language so everything is
00:40 - like considered as an object so in this
00:42 - case these data types are
00:45 - considered as classes these are classes
00:48 - and the variable you create
00:52 - those are known as instance or objects
00:54 - of these classes
00:56 - didn't get it it's okay
00:59 - let me give an example
01:01 - if you write
01:02 - how to declare a variable we write
01:05 - variable name suppose i am taking
01:07 - variable underscore 1
01:10 - equal to
01:11 - 3
01:13 - now we know that this 3 is integer whole
01:16 - number whole number so this variable of
01:18 - type their type of this variable is
01:20 - integer
01:21 - okay
01:22 - so now in this case in this case yeah
01:25 - okay the data type of this integer is
01:27 - this variable is integer but if you
01:31 - check the data type in python we have a
01:33 - function to check the data type of any
01:35 - variable okay how to check we have a
01:37 - function type so if i print something
01:40 - like this print
01:43 - type
01:44 - and within this type i'll be using this
01:46 - variable name where underscore
01:49 - one
01:49 - so this function type it is used to
01:52 - check the type
01:54 - type of a variable whatever variable you
01:56 - want to check those you can write down
01:58 - here
01:59 - okay
02:00 - so the variable i'm writing where one so
02:02 - it will check the type and i want to
02:04 - print that type so that is why i'm
02:06 - writing this function into print so it
02:08 - will print what
02:09 - this kind of output you will get class
02:12 - and
02:13 - kind
02:15 - so yeah it is of integer type but this
02:17 - is what a class so these day type these
02:19 - data like in float string these are
02:21 - classes and now this where one is what
02:24 - object or you can say instance of this
02:26 - class int
02:27 - so this is the case in python actually
02:30 - okay this is actually the data type in
02:32 - python
02:33 - right
02:34 - now see
02:35 - in python actually we don't need to tell
02:37 - like the name of the variable like in c
02:39 - or c plus plus we use in
02:41 - if you have to write then we write in
02:43 - and where underscore one is equal to
02:45 - three you have to tell the data type
02:47 - but here we don't need to tell the the
02:49 - type of the data we simply write down
02:50 - the name of the variable assignment
02:53 - assign a value
02:54 - python itself will figure out
02:57 - the type of this data
02:59 - okay that is a plus point in python
03:02 - okay
03:03 - now see if i write something like this
03:05 - so there are multiple data types in
03:08 - python multiple built-in data types in
03:11 - python basically in this video we will
03:12 - discuss
03:13 - hint
03:14 - float
03:16 - string
03:17 - and boolean
03:19 - there are multiple data types also list
03:22 - range double dictionary set
03:25 - right complex
03:26 - so those are also will be discussing one
03:29 - by one in later videos but these are
03:30 - some basic type we will you know
03:32 - generally mostly will use these kind of
03:34 - data
03:35 - so those these things these four data we
03:37 - will discuss in this video okay now in
03:40 - so into will this is what contain
03:42 - integer like whole number it will
03:43 - contain from positive to
03:45 - negative any number and
03:48 - one more thing there is no range
03:51 - the number there is no limit on the
03:53 - number you can take the number as long
03:55 - as possible although the constraint is
03:58 - your memory of your system
04:01 - if i write something like this if i am
04:02 - taking a variable where is equal to 1 2
04:05 - 3 1 2 1 2 1 2
04:08 - it's a
04:09 - long number i am having
04:12 - yeah it is possible to take a long
04:13 - number and you will print the number
04:15 - then you will see this number would be
04:17 - printed okay
04:19 - but see this
04:20 - if you go in more deep let's discuss in
04:23 - more deep actually
04:25 - if the number is without prefix then
04:26 - that would be considered the sequence of
04:28 - decimal would be considered as a decimal
04:30 - number if you write hair prefix what
04:32 - prefix we can write something like this
04:35 - see
04:38 - as we know decimal number or integer can
04:40 - be a binary type octal type hexadecimal
04:43 - type okay so if i write a number
04:45 - something like this if i print something
04:47 - like this print
04:48 - 0 and b see this prefix 0b or 0 capital
04:53 - b
04:54 - this is for binary
04:59 - zero this is zero zero
05:01 - small o zero
05:03 - capital o
05:05 - this prefix is what for octal number
05:07 - octal numbers are actually prefixed with
05:09 - this thing 0x and 0 capital x small x
05:13 - capital x this is what
05:15 - this is a hexadecimal number so if a
05:16 - number is prefixed with these things
05:18 - like i am writing a number 0 b
05:20 - and i'm writing 1 0.
05:24 - 0 b means 0 b or capital b
05:27 - now compiler would interpret that this
05:29 - is binary number means binary 10 binary
05:32 - 10 means in decimal it will print
05:34 - 2.
05:37 - fine if i write something like this
05:39 - print
05:40 - 0
05:41 - and small or capital o and i'm writing
05:44 - something like this like
05:46 - here i'm writing suppose 10 so 0x prefix
05:50 - means it is octal number
05:53 - so the equivalent number decimal number
05:55 - of this is what
05:57 - i guess 8 decimal number is 8
06:01 - if you are not sure you can convert like
06:02 - if i have decimal
06:04 - number 8 and i want to convert it into
06:06 - an octal number or base eight so you
06:08 - just have to divide it by eight
06:11 - eight one zero eight zero one once you
06:14 - have zero
06:16 - stop and just write down these digits
06:18 - from here to here 1 0 1 0 yeah the octal
06:21 - of this 8 is what 0
06:23 - 0 1 0 that is 8.
06:26 - if i write something like this print 0 x
06:29 - 1 0 it will print i guess
06:32 - 16. if you write rather than 1 0 if i
06:35 - write something like this 1 2 3
06:38 - it will print what and if i write 0 x 1
06:41 - 2 3 so you have to try this out this is
06:44 - ocular number this is hexadecimal
06:46 - because it is prefixed with this so what
06:47 - decimal number you will get what decimal
06:49 - number you will get
06:50 - you have to figure it out you have to
06:52 - tell me in comment section so if the
06:54 - number is prefixed with something then
06:57 - that would have some different meaning
06:58 - not that is not a decimal number that is
07:00 - not base 10.
07:02 - fine but if you uh you know find out the
07:05 - type of these numbers also then you will
07:07 - get it is of type int
07:09 - okay it's not like binary or doctor or
07:12 - hexadecimal these are parts or you can
07:13 - say between under this decimal number
07:15 - under the integers
07:17 - but the type would be inked
07:20 - next is float number so float is this
07:22 - basically just decimal number of
07:24 - fraction we are having those are float
07:25 - numbers like i am having 4.2
07:28 - 4.0 0.11
07:31 - these are floating point number or
07:33 - scientifically you scientifically you
07:34 - can denote with this
07:36 - e notation e or capital e with this
07:39 - thing also we can denote but you don't
07:40 - have to go in this much d
07:42 - just you have an idea with this float
07:44 - number
07:45 - okay
07:46 - strings obviously sequence of characters
07:48 - are strings
07:50 - so this is what string like i'm writing
07:52 - jenny
07:53 - country
07:56 - or any like jenny's lectures csid grf
08:00 - you are the best this kind of thing you
08:02 - can write so this complete is what a
08:04 - string or in single quote also in python
08:07 - we can write down
08:08 - string
08:10 - we can now
08:12 - you know fetch individual character from
08:14 - the string using subscript so i guess
08:16 - this thing will be seen practically
08:19 - i hope now and next is boolean boolean
08:21 - is what true having only two value true
08:23 - and false
08:26 - how to use this so let's just you know
08:28 - do some practical and we'll see on our
08:30 - ide how to use these data types and
08:33 - variables and all
08:34 - okay so let's create a new file i'm
08:37 - taking new file and
08:40 - we are taking the name
08:42 - [Music]
08:43 - data type data under data underscore
08:45 - type dot py
08:48 - okay okay now first we'll take a
08:51 - variable suppose i'm taking variable 1
08:54 - not hyphen it's underscore 1
08:56 - variable 1 equal to i'm taking a value 3
09:01 - or any value you can take like 1 2 3 4 5
09:03 - 6 7 8 9
09:04 - [Music]
09:05 - any long value we can take okay
09:08 - and it will print suppose i am printing
09:10 - print
09:13 - where underscore one
09:17 - so let us run this and see what output
09:19 - you will get here right click on this
09:21 - right click on this space here and just
09:24 - run data underscore type root py this
09:26 - file
09:27 - see it is printing this number so the
09:29 - number you can take any long number you
09:31 - can take there is no limit there is no
09:33 - range in python but the limit is only
09:35 - the constraint is obviously the memory
09:37 - of your system so some operation also
09:39 - like if i do plus here one
09:42 - that also fine
09:43 - this plus will work it will just add
09:46 - it's like addition
09:47 - two integer values are that you will add
09:49 - one to this number okay
09:52 - so if i am taking a number something
09:53 - like this one two three
09:55 - and
09:56 - i'm taking second number where
09:59 - underscore two
10:01 - and that i'm taking like 10 point
10:05 - one
10:07 - okay
10:08 - so the second one is what
10:10 - float and if you want to check if you
10:12 - want to check the the type of these
10:15 - variables then how you can check suppose
10:18 - i am concatenating these two numbers
10:20 - where one underscore where two
10:22 - concatenating you know concatenating
10:24 - means concatenation of strings are
10:26 - possible but here this classes or
10:27 - addition i'm adding adding these two
10:29 - numbers
10:30 - so
10:31 - what would be the output let's run this
10:34 - it's 123 would be added to 10 plus 10.1
10:38 - so 133.1 if you want to check the type
10:41 - of these so you can simply check the
10:44 - type with this type function type
10:46 - and i am checking the type of where
10:49 - one
10:50 - okay and obviously you will print
10:53 - what is the type so for that we have to
10:55 - use print function
10:56 - again
10:58 - i am printing like print
11:01 - okay
11:04 - type
11:05 - and
11:07 - where to this variable
11:10 - so let's run this and see what output
11:12 - you will get
11:14 - okay this
11:15 - there is a name error c
11:17 - name error one more error we got p print
11:20 - p r i n g t
11:22 - is not defined did you mean print yeah
11:25 - if you have done something like this it
11:28 - is not syntax error it is a name error
11:31 - okay so there are types of error also
11:34 - so let's correct the name it is print
11:36 - and now let's run the c you can see this
11:40 - first the edition then for where one it
11:43 - is of int class class isn't and where
11:46 - two classes float
11:47 - okay so these data types are actually
11:49 - classes in
11:51 - python and these variables are
11:53 - you can say what
11:55 - objects of these classes
11:58 - so let's comment this out and
12:01 - and see
12:02 - if i route with prefix something like
12:05 - this if i want to
12:07 - add this prefix 0 and
12:11 - o
12:13 - and if i print the value
12:15 - where underscore
12:17 - 1
12:18 - 0 means it is octal
12:21 - and where in where 2 i am taking 0
12:24 - x 1 2 3
12:26 - and i am printing
12:29 - where 2
12:32 - so let's see what it will print first
12:34 - output is 83
12:36 - so 83 if you convert 83 into octal you
12:40 - will get one to three if you convert 291
12:42 - into hexadecimal you will get 123. so
12:44 - with prefix you got some different
12:46 - answer
12:47 - these are not considered as decimal
12:49 - number but with prefix they have you
12:53 - will get some different result and
12:54 - simply without prefix if you print like
12:58 - where three let's take away another
13:00 - variable one two three
13:02 - and just
13:04 - print
13:06 - where 3
13:09 - so without prefix obviously it is
13:10 - decimal number so it will print 1 2 3
13:12 - only and if you check now you check
13:15 - if you check these
13:18 - type of variable 1 and 2
13:20 - then what you will get
13:22 - into only int obviously with prefix
13:26 - interpretation is this is this is octa
13:27 - this is hexadecimal but these are of
13:30 - int class or int time
13:32 - okay
13:33 - now let's float number we have seen like
13:35 - what a float number let's have
13:38 - strings
13:44 - so i'm having like i'm having a variable
13:47 - name name and there i am having
13:50 - jenny khatri
13:52 - in double go to single quote you can use
13:55 - so if you simply print
14:00 - first let's print
14:02 - type of this thing
14:07 - if you print type then the class is str
14:11 - for string the classes str the real type
14:13 - is str the class is sdf
14:15 - and if you print this name obviously you
14:18 - will print here jenny khatri but you can
14:22 - fetch specific characters with subscript
14:24 - if i write
14:26 - name
14:27 - and in subscript i am writing 0 so what
14:30 - it will print
14:31 - j
14:32 - see it will print j now you will get j
14:35 - because it is sequence of characters so
14:37 - it would be stored as array like ah the
14:40 - index would be started from 0 0 1 2 3
14:42 - something like this and if i print
14:44 - something like this see if i print zero
14:46 - five
14:48 - so let's pause this and try this out
14:50 - what you will get at five
14:53 - now let's run this and see you will get
14:55 - nothing because at five index there is
14:58 - space
14:59 - if i print here seven
15:02 - then you will get h
15:03 - so you will get h here
15:05 - okay so
15:07 - uh in a subscript also possible like you
15:09 - can access every character of the string
15:13 - and if i am writing here something like
15:15 - this like name
15:17 - and
15:19 - name underscore 1
15:22 - name underscore 2 one more variable i am
15:25 - taking name underscore 2 and there i am
15:28 - writing
15:29 - jenny khatri and here i am writing
15:32 - cs faculty
15:35 - computer science faculty and
15:38 - i'm just adding ah sorry concatenating
15:41 - name one plus
15:43 - name underscore two
15:46 - so obviously it will look concatenation
15:47 - of these jenny khatri with no no species
15:49 - faculty okay but see if you take a
15:52 - variable variable or i am taking here a
15:55 - a is equal to 1
15:57 - and if i write something like this
16:00 - name 1 plus a
16:02 - in this case it will give error c it
16:05 - will give type error not syntax error
16:07 - it's type error
16:09 - can only concatenate string note into
16:12 - str because name one is str and a is
16:15 - what integer so we cannot concatenate
16:16 - these things so you have to be very
16:18 - careful why you using these data types
16:21 - because these are you know they have
16:23 - they have having their own properties
16:25 - for some functionality some functions
16:27 - and all
16:29 - so this is not possible but if you name
16:31 - one
16:32 - if in name one
16:35 - or you can say
16:37 - here i am writing
16:41 - name 1 is equal to 1 to 3
16:44 - still still if i run this you will get
16:46 - an error because 1 2 3 it's not integer
16:48 - you are
16:49 - putting double quote here so it is a
16:51 - string so it is not possible here but 1
16:54 - 2 3 name 1
16:56 - plus
16:58 - name underscore 2 and suppose in name 2
17:00 - i am writing c name 2 i am writing
17:05 - one
17:07 - and we are doing name one plus name two
17:09 - so what do you think what do you think
17:11 - what you will get
17:12 - see one two three one it will not do
17:15 - addition these are strings so it will
17:16 - concatenate but rather than this if i
17:19 - write something like this
17:22 - 1 1 2 3 plus
17:27 - 1
17:28 - now these are obviously integers so you
17:30 - will get one to four
17:32 - and here obviously if you put here also
17:35 - these uh
17:37 - these thing
17:41 - obviously these are string after putting
17:43 - these codes so one two three one you
17:44 - will get here so you have to be you know
17:46 - very careful about using
17:47 - you know
17:48 - when you use these data types what is
17:50 - string what are
17:52 - anything you will write in single quote
17:54 - double quote
17:55 - whether it's a number or characters or
17:57 - anything that could be considered as
17:58 - string okay now let's just
18:02 - comment these out and
18:06 - sorry
18:09 - and this we don't want and in print i am
18:11 - writing what
18:13 - i want to print jenny's lectures like
18:16 - in this way
18:18 - jenny's
18:24 - lectures
18:25 - okay that will print jenny's lectures ah
18:29 - no doubt because we are printing the
18:31 - single quote but out of outer side we
18:34 - are using double quotes so within you
18:36 - can use single quote that is fine okay
18:38 - jenny's lecture it is printing but
18:40 - suppose i want to print
18:42 - jenny's and lectures in double quotes so
18:45 - now both i want to print single quote as
18:48 - well as double quote on the screen so
18:50 - what to put outside we cannot put single
18:53 - quote we cannot put double quote now
18:54 - what is the solution
18:56 - so in this case
18:58 - see the single code these double quotes
19:00 - are having some obviously special
19:02 - meaning to this interpreter this python
19:05 - so if you skip this special meaning
19:09 - then
19:10 - we can do a task
19:12 - so yeah there is a way
19:14 - this special meaning of this single
19:16 - quote and double quote can be skipped in
19:18 - which way you have to use one forward
19:20 - slash sorry backward slash
19:23 - backslash you can say backslash
19:25 - so before this
19:27 - single quote use
19:29 - this
19:32 - backslash
19:33 - before this double quotes also because i
19:35 - want to skip the special meaning of this
19:38 - use this backslash
19:40 - before this use this backslash
19:43 - okay
19:44 - now this is what you can say skip
19:46 - sequence we will discuss these things
19:48 - later in later videos so we are going to
19:50 - escape we are going to skip the special
19:52 - meaning of the these quotes
19:55 - now it will work fine see
19:58 - now let me just run this and it will
19:59 - print jenny's
20:00 - apostrophe the single quotes and
20:02 - lectures in double quotes
20:04 - so we are not getting any error so if
20:06 - you want to skip the meaning of anything
20:08 - any special meaning of these you know
20:11 - symbols and all you just use
20:13 - a backslash that is it
20:16 - okay uh like suppose uh here i wanna
20:20 - i jenny's
20:22 - and after that i have put slash n
20:25 - okay
20:26 - let's just run this so it will show
20:29 - jenny's and lectures in
20:32 - next line so slash n means
20:34 - new line it will add new line yeah
20:36 - slasher is having a special meaning
20:38 - escape sequence escape character is
20:40 - there but i wanna
20:41 - print as it is jenny's slash and
20:43 - lectures i wanna skip this special
20:45 - meaning of slashing how to skip just use
20:48 - before the slash and just use a
20:51 - backslash
20:52 - so nuts let's run this and it will print
20:55 - jenny's slashing lectures
20:59 - i hope you put this uh way also okay
21:02 - skipping of the special meaning of
21:05 - anything
21:06 - and suppose if you want to print this
21:08 - thing
21:10 - ah ten times or five times we can do
21:13 - five
21:14 - into whatever string you want to print
21:16 - five into that and just run this and it
21:18 - would be printed five times that is also
21:20 - possible
21:22 - i guess you can do these things with
21:24 - strings so basic is i guess clear to you
21:27 - about end float string how to use them
21:30 - and bool is also one more thing so if i
21:33 - write like variable is equal to if i
21:35 - write c
21:37 - though you have to take care of this
21:39 - thing t r u e suppose i am writing
21:42 - sorry t r u e true
21:46 - so rather than this i want to print
21:49 - where
21:51 - so what it will print let's run this and
21:53 - see what it will print it is printing
21:55 - through
21:56 - and if i print this
22:01 - type of this
22:03 - type of this variable
22:05 - where
22:06 - let's run this and in the type would be
22:08 - bool
22:09 - so see class bool
22:11 - but if you write
22:13 - small t
22:15 - then
22:16 - it will give error let's run this and
22:19 - see
22:20 - it is a name error it is a name error
22:23 - not syntax error not type error it is a
22:25 - name error because true and false these
22:28 - are a boolean type but
22:30 - capital t capital f
22:32 - you have to take care of this thing but
22:33 - here i am writing small t so it is a
22:35 - name error name true is not defined did
22:38 - you mean true with capital t yeah you
22:40 - mean capital t
22:42 - so here you have to write
22:44 - capital
22:46 - t or you can write false also
22:49 - and i guess true and false
22:52 - will you know we'll be seeing this thing
22:54 - also in later videos many times we will
22:56 - use when we check any condition if you
22:58 - want to check any condition like suppose
23:00 - i am writing uh a is equal to 1 b is
23:02 - equal to 2 and in where
23:06 - i wanna check suppose here i'm writing
23:08 - this
23:09 - where is equal to
23:12 - a less than b
23:15 - that is that also you can do a less than
23:17 - b
23:18 - and now i am printing the square and
23:19 - type of this type of where
23:22 - we bool a less than b means
23:25 - it will be yeah true
23:27 - so c it is true and class the type is
23:29 - bool
23:30 - so in where we have true
23:33 - so this kind of checking of any
23:34 - condition when you want to check
23:36 - condition then we can use this boolean
23:38 - type of variable i hope now that these
23:40 - basics of these
23:42 - you know data types about these data
23:43 - types is clear to you guys so i hope you
23:46 - go to these four built in air types in
23:48 - float strings and flow so now it's in
23:51 - the next video till then bye bye take
23:52 - care

Cleaned transcript:

so in the series of learning python programming language in previous video we have discussed how you know some rules of naming a variable okay now in this video we will see the next topic is data types in python primitive data types in python or you can say builtin data type in python you'll see in this video this topic like what is data type what are different builtin data type in python how to use those those data type and all with the help of programs examples okay now see as an instance just data type means it tells the type of data we can store in a variable this kind of thing but in python it is different from c and c plus plus those languages in python python is an object oriented programming language so everything is like considered as an object so in this case these data types are considered as classes these are classes and the variable you create those are known as instance or objects of these classes didn't get it it's okay let me give an example if you write how to declare a variable we write variable name suppose i am taking variable underscore 1 equal to 3 now we know that this 3 is integer whole number whole number so this variable of type their type of this variable is integer okay so now in this case in this case yeah okay the data type of this integer is this variable is integer but if you check the data type in python we have a function to check the data type of any variable okay how to check we have a function type so if i print something like this print type and within this type i'll be using this variable name where underscore one so this function type it is used to check the type type of a variable whatever variable you want to check those you can write down here okay so the variable i'm writing where one so it will check the type and i want to print that type so that is why i'm writing this function into print so it will print what this kind of output you will get class and kind so yeah it is of integer type but this is what a class so these day type these data like in float string these are classes and now this where one is what object or you can say instance of this class int so this is the case in python actually okay this is actually the data type in python right now see in python actually we don't need to tell like the name of the variable like in c or c plus plus we use in if you have to write then we write in and where underscore one is equal to three you have to tell the data type but here we don't need to tell the the type of the data we simply write down the name of the variable assignment assign a value python itself will figure out the type of this data okay that is a plus point in python okay now see if i write something like this so there are multiple data types in python multiple builtin data types in python basically in this video we will discuss hint float string and boolean there are multiple data types also list range double dictionary set right complex so those are also will be discussing one by one in later videos but these are some basic type we will you know generally mostly will use these kind of data so those these things these four data we will discuss in this video okay now in so into will this is what contain integer like whole number it will contain from positive to negative any number and one more thing there is no range the number there is no limit on the number you can take the number as long as possible although the constraint is your memory of your system if i write something like this if i am taking a variable where is equal to 1 2 3 1 2 1 2 1 2 it's a long number i am having yeah it is possible to take a long number and you will print the number then you will see this number would be printed okay but see this if you go in more deep let's discuss in more deep actually if the number is without prefix then that would be considered the sequence of decimal would be considered as a decimal number if you write hair prefix what prefix we can write something like this see as we know decimal number or integer can be a binary type octal type hexadecimal type okay so if i write a number something like this if i print something like this print 0 and b see this prefix 0b or 0 capital b this is for binary zero this is zero zero small o zero capital o this prefix is what for octal number octal numbers are actually prefixed with this thing 0x and 0 capital x small x capital x this is what this is a hexadecimal number so if a number is prefixed with these things like i am writing a number 0 b and i'm writing 1 0. 0 b means 0 b or capital b now compiler would interpret that this is binary number means binary 10 binary 10 means in decimal it will print 2. fine if i write something like this print 0 and small or capital o and i'm writing something like this like here i'm writing suppose 10 so 0x prefix means it is octal number so the equivalent number decimal number of this is what i guess 8 decimal number is 8 if you are not sure you can convert like if i have decimal number 8 and i want to convert it into an octal number or base eight so you just have to divide it by eight eight one zero eight zero one once you have zero stop and just write down these digits from here to here 1 0 1 0 yeah the octal of this 8 is what 0 0 1 0 that is 8. if i write something like this print 0 x 1 0 it will print i guess 16. if you write rather than 1 0 if i write something like this 1 2 3 it will print what and if i write 0 x 1 2 3 so you have to try this out this is ocular number this is hexadecimal because it is prefixed with this so what decimal number you will get what decimal number you will get you have to figure it out you have to tell me in comment section so if the number is prefixed with something then that would have some different meaning not that is not a decimal number that is not base 10. fine but if you uh you know find out the type of these numbers also then you will get it is of type int okay it's not like binary or doctor or hexadecimal these are parts or you can say between under this decimal number under the integers but the type would be inked next is float number so float is this basically just decimal number of fraction we are having those are float numbers like i am having 4.2 4.0 0.11 these are floating point number or scientifically you scientifically you can denote with this e notation e or capital e with this thing also we can denote but you don't have to go in this much d just you have an idea with this float number okay strings obviously sequence of characters are strings so this is what string like i'm writing jenny country or any like jenny's lectures csid grf you are the best this kind of thing you can write so this complete is what a string or in single quote also in python we can write down string we can now you know fetch individual character from the string using subscript so i guess this thing will be seen practically i hope now and next is boolean boolean is what true having only two value true and false how to use this so let's just you know do some practical and we'll see on our ide how to use these data types and variables and all okay so let's create a new file i'm taking new file and we are taking the name data type data under data underscore type dot py okay okay now first we'll take a variable suppose i'm taking variable 1 not hyphen it's underscore 1 variable 1 equal to i'm taking a value 3 or any value you can take like 1 2 3 4 5 6 7 8 9 any long value we can take okay and it will print suppose i am printing print where underscore one so let us run this and see what output you will get here right click on this right click on this space here and just run data underscore type root py this file see it is printing this number so the number you can take any long number you can take there is no limit there is no range in python but the limit is only the constraint is obviously the memory of your system so some operation also like if i do plus here one that also fine this plus will work it will just add it's like addition two integer values are that you will add one to this number okay so if i am taking a number something like this one two three and i'm taking second number where underscore two and that i'm taking like 10 point one okay so the second one is what float and if you want to check if you want to check the the type of these variables then how you can check suppose i am concatenating these two numbers where one underscore where two concatenating you know concatenating means concatenation of strings are possible but here this classes or addition i'm adding adding these two numbers so what would be the output let's run this it's 123 would be added to 10 plus 10.1 so 133.1 if you want to check the type of these so you can simply check the type with this type function type and i am checking the type of where one okay and obviously you will print what is the type so for that we have to use print function again i am printing like print okay type and where to this variable so let's run this and see what output you will get okay this there is a name error c name error one more error we got p print p r i n g t is not defined did you mean print yeah if you have done something like this it is not syntax error it is a name error okay so there are types of error also so let's correct the name it is print and now let's run the c you can see this first the edition then for where one it is of int class class isn't and where two classes float okay so these data types are actually classes in python and these variables are you can say what objects of these classes so let's comment this out and and see if i route with prefix something like this if i want to add this prefix 0 and o and if i print the value where underscore 1 0 means it is octal and where in where 2 i am taking 0 x 1 2 3 and i am printing where 2 so let's see what it will print first output is 83 so 83 if you convert 83 into octal you will get one to three if you convert 291 into hexadecimal you will get 123. so with prefix you got some different answer these are not considered as decimal number but with prefix they have you will get some different result and simply without prefix if you print like where three let's take away another variable one two three and just print where 3 so without prefix obviously it is decimal number so it will print 1 2 3 only and if you check now you check if you check these type of variable 1 and 2 then what you will get into only int obviously with prefix interpretation is this is this is octa this is hexadecimal but these are of int class or int time okay now let's float number we have seen like what a float number let's have strings so i'm having like i'm having a variable name name and there i am having jenny khatri in double go to single quote you can use so if you simply print first let's print type of this thing if you print type then the class is str for string the classes str the real type is str the class is sdf and if you print this name obviously you will print here jenny khatri but you can fetch specific characters with subscript if i write name and in subscript i am writing 0 so what it will print j see it will print j now you will get j because it is sequence of characters so it would be stored as array like ah the index would be started from 0 0 1 2 3 something like this and if i print something like this see if i print zero five so let's pause this and try this out what you will get at five now let's run this and see you will get nothing because at five index there is space if i print here seven then you will get h so you will get h here okay so uh in a subscript also possible like you can access every character of the string and if i am writing here something like this like name and name underscore 1 name underscore 2 one more variable i am taking name underscore 2 and there i am writing jenny khatri and here i am writing cs faculty computer science faculty and i'm just adding ah sorry concatenating name one plus name underscore two so obviously it will look concatenation of these jenny khatri with no no species faculty okay but see if you take a variable variable or i am taking here a a is equal to 1 and if i write something like this name 1 plus a in this case it will give error c it will give type error not syntax error it's type error can only concatenate string note into str because name one is str and a is what integer so we cannot concatenate these things so you have to be very careful why you using these data types because these are you know they have they have having their own properties for some functionality some functions and all so this is not possible but if you name one if in name one or you can say here i am writing name 1 is equal to 1 to 3 still still if i run this you will get an error because 1 2 3 it's not integer you are putting double quote here so it is a string so it is not possible here but 1 2 3 name 1 plus name underscore 2 and suppose in name 2 i am writing c name 2 i am writing one and we are doing name one plus name two so what do you think what do you think what you will get see one two three one it will not do addition these are strings so it will concatenate but rather than this if i write something like this 1 1 2 3 plus 1 now these are obviously integers so you will get one to four and here obviously if you put here also these uh these thing obviously these are string after putting these codes so one two three one you will get here so you have to be you know very careful about using you know when you use these data types what is string what are anything you will write in single quote double quote whether it's a number or characters or anything that could be considered as string okay now let's just comment these out and sorry and this we don't want and in print i am writing what i want to print jenny's lectures like in this way jenny's lectures okay that will print jenny's lectures ah no doubt because we are printing the single quote but out of outer side we are using double quotes so within you can use single quote that is fine okay jenny's lecture it is printing but suppose i want to print jenny's and lectures in double quotes so now both i want to print single quote as well as double quote on the screen so what to put outside we cannot put single quote we cannot put double quote now what is the solution so in this case see the single code these double quotes are having some obviously special meaning to this interpreter this python so if you skip this special meaning then we can do a task so yeah there is a way this special meaning of this single quote and double quote can be skipped in which way you have to use one forward slash sorry backward slash backslash you can say backslash so before this single quote use this backslash before this double quotes also because i want to skip the special meaning of this use this backslash before this use this backslash okay now this is what you can say skip sequence we will discuss these things later in later videos so we are going to escape we are going to skip the special meaning of the these quotes now it will work fine see now let me just run this and it will print jenny's apostrophe the single quotes and lectures in double quotes so we are not getting any error so if you want to skip the meaning of anything any special meaning of these you know symbols and all you just use a backslash that is it okay uh like suppose uh here i wanna i jenny's and after that i have put slash n okay let's just run this so it will show jenny's and lectures in next line so slash n means new line it will add new line yeah slasher is having a special meaning escape sequence escape character is there but i wanna print as it is jenny's slash and lectures i wanna skip this special meaning of slashing how to skip just use before the slash and just use a backslash so nuts let's run this and it will print jenny's slashing lectures i hope you put this uh way also okay skipping of the special meaning of anything and suppose if you want to print this thing ah ten times or five times we can do five into whatever string you want to print five into that and just run this and it would be printed five times that is also possible i guess you can do these things with strings so basic is i guess clear to you about end float string how to use them and bool is also one more thing so if i write like variable is equal to if i write c though you have to take care of this thing t r u e suppose i am writing sorry t r u e true so rather than this i want to print where so what it will print let's run this and see what it will print it is printing through and if i print this type of this type of this variable where let's run this and in the type would be bool so see class bool but if you write small t then it will give error let's run this and see it is a name error it is a name error not syntax error not type error it is a name error because true and false these are a boolean type but capital t capital f you have to take care of this thing but here i am writing small t so it is a name error name true is not defined did you mean true with capital t yeah you mean capital t so here you have to write capital t or you can write false also and i guess true and false will you know we'll be seeing this thing also in later videos many times we will use when we check any condition if you want to check any condition like suppose i am writing uh a is equal to 1 b is equal to 2 and in where i wanna check suppose here i'm writing this where is equal to a less than b that is that also you can do a less than b and now i am printing the square and type of this type of where we bool a less than b means it will be yeah true so c it is true and class the type is bool so in where we have true so this kind of checking of any condition when you want to check condition then we can use this boolean type of variable i hope now that these basics of these you know data types about these data types is clear to you guys so i hope you go to these four built in air types in float strings and flow so now it's in the next video till then bye bye take care
