With timestamps:

00:00 - so in the series of learning programming
00:02 - in c we are discussing pointers in C in
00:04 - the previous video I have discussed void
00:06 - pointer in C but in this video I'll talk
00:08 - about uh simple problem like uh we can
00:11 - say the level of that problem is simple
00:13 - to complex high level right there I got
00:17 - a request from a student like to discuss
00:19 - some problem on pointers there we will
00:21 - use string pointer to a string you will
00:25 - take a character array or you can say a
00:26 - string and also we will take a pointer
00:29 - and using that that thing we will
00:30 - discuss one problem here right one more
00:33 - problem I'll discuss that is short
00:35 - problem but that will cover a important
00:37 - concept so basically two problem I'll
00:38 - discuss in this video right first of all
00:40 - discuss those problems on this
00:41 - whiteboard I'll show you how to run
00:44 - those problems how what what output you
00:46 - will get how you are getting that output
00:48 - and then I'll show you that output on my
00:49 - laptop we'll write down some code also
00:52 - right practically we will also see so
00:54 - now let us discuss uh some problem first
00:56 - of all I'll discuss that short problem
00:59 - right so
01:06 - see see suppose this is a problem it's
01:09 - not the actual problem I'll modify it
01:12 - I'm taking one variable a right and here
01:15 - I'm I'm having value 11 suppose address
01:18 - is 1,000 I'm taking a pointer
01:20 - p and this pointer is having address of
01:23 - a that is th000 and it is pointing to
01:26 - Here and Now EST P now here it is acting
01:29 - as
01:30 - IND Direction operator so value at I'm
01:33 - accessing this one p means in P we have
01:37 - th000 that is address of a means estri
01:42 - th000 value at th000 Value at th000 this
01:46 - one so we are accessing this one so I'm
01:47 - changing the value from uh this to 10 so
01:51 - now finally you will get 10 right but if
01:55 - I put here
01:58 - const means the variable dat type of
02:00 - this variable is
02:02 - constant constant means it is a constant
02:05 - we cannot change its value it will be
02:07 - minus one during that program right so
02:11 - when we declare a pointer pointer should
02:16 - have data type what what the data type
02:19 - of this this
02:20 - variable exactly same data type because
02:23 - it is containing address of this
02:25 - variable and dat of this variable is
02:27 - constant so exactly that should be data
02:30 - type of this
02:32 - pointer right so constant and now if you
02:37 - if you want to access this estri p and
02:39 - if you want to change it it will give
02:43 - error because now this location is read
02:46 - only we cannot modify it why because we
02:50 - have declared it constant you cannot
02:52 - modify it you can only read this value
02:54 - you can only access this value so now
02:57 - this line will give you error in this
02:59 - case
03:00 - right so here we cannot change the value
03:03 - it would be- 11 only because it is
03:05 - constant right I hope now you got the
03:08 - concept of this if you we write here the
03:10 - constant keyword right and if you you
03:13 - can modify it and try it at your own
03:14 - like I'm not writing con here try to run
03:17 - this program what output you will get or
03:19 - maybe what error you are getting or try
03:22 - to put con here con here and only int a
03:26 - here now what output you are getting
03:28 - right so you have to think right so you
03:32 - have to you know think different
03:33 - different variation what you can do with
03:35 - this program and what output what error
03:37 - what warning you are getting so you have
03:39 - to try these at your own right second
03:43 - problem I'm going to take that
03:45 - is so suppose this is the question here
03:49 - I'm taking character array or you can
03:51 - say a string welcome to Jenny's lectures
03:55 - this is how I'm storing this this is how
03:57 - this would be stored in memory this will
04:00 - take character is that will take one
04:02 - bite so suppose Base address is 100 I'm
04:04 - taking so next bite is 101 Next Bite is
04:09 - one2 like this right because the
04:13 - character is going to take one bite this
04:14 - data type now one I'm going to take a
04:17 - pointer obviously T type would be same
04:20 - character and in this pointer I'm
04:22 - storing address of this Base address of
04:24 - this string so is equal to Str Str
04:27 - because Str Str is what name of the
04:29 - string name of the string is containing
04:31 - obviously Base address of this character
04:34 - array that we know right it will contain
04:37 - Base address the name of the this
04:39 - character array is St Str and that will
04:41 - contain Base address or you can say the
04:42 - first address of the first character
04:44 - first B so simply assign this address so
04:48 - now in pointer is also having 100 so
04:50 - pointer is also pointing to here now now
04:54 - first print F what would be the out of
04:56 - this percentage C estri PTR
05:00 - estri PTR means estri PTR is having 100
05:05 - so this estri means here it is acting as
05:07 - indirection operator and what is this
05:09 - function of IND Direction operator it
05:10 - will give value at this address so value
05:13 - at 100 value at 100 is W so it will
05:16 - print first print will print
05:19 - W one character right now next next
05:24 - print C estri PTR ++ here we have + one
05:30 - right so now obviously this parenthesis
05:32 - would be executed first here also we
05:35 - have post increment and one is this
05:37 - binary plus this increment decrement
05:40 - these are having higher priority so this
05:41 - would be executed first but this is post
05:43 - increment so first the original value
05:46 - would be returned and then it would
05:49 - modify the value of pointer so now
05:53 - first PTR ++ will give original value of
05:56 - PTR original value is
05:58 - 100 and now now it will increment it so
06:01 - now it will become one 1 why only one
06:05 - bite because this is of character type
06:08 - so definitely it will point to the next
06:10 - location and character is having only
06:12 - one bite if it is of integer type then
06:16 - Base address is 100 it it would be
06:18 - increased by 4 by because the size of
06:21 - integer is 4 by that we have discussed
06:23 - in previous videos of pointers you can
06:25 - you know refer those videos so now it is
06:27 - one1 but here we are using the original
06:30 - value of pointer that is 100 +
06:33 - 1 100 + 1 means obviously it will
06:38 - increment move the pointer one location
06:40 - forward so this one
06:43 - one1 because of this plus one so s 101
06:47 - so whatever the value at 101 that would
06:49 - be return returned so here it will give
06:52 - e output would be e for next print F
06:56 - next print f c in this case
07:00 - it is also what obviously first of all
07:03 - we will solve what this parenthesis
07:06 - right here also we have plus and minus
07:08 - this uh post uh decrement so this is
07:12 - having higher priority but this is post
07:14 - so original value we will use first
07:16 - right so here
07:19 - see original value of PTR is
07:22 - 101 10 1 now decrement it so now it will
07:26 - become again 1 0 right but here in this
07:30 - expression we are we will use original
07:33 - value that is 101 only so 10 1 + 5 + 5
07:38 - here we have Min -1 and then we have +
07:42 - 3 right + 5 means five location forward
07:48 - means one 1 + 5 means 1 2 3 4 5 here e
07:55 - now here we have sorry 10 6 106 6 -1
08:01 - here we have estri here we have + three
08:03 - minus one means one location backward
08:06 - that is 1 Z 5 SRI
08:10 - plus one this one H right now whatever
08:15 - the value at this address what is the
08:18 - value at 101 sorry 105 because this is
08:22 - having now higher priority than binary
08:24 - plus operator so this would be executed
08:26 - first so value at 105 is m so it will
08:29 - give M now +
08:31 - three so now what output you will get
08:35 - here it's not like that if M we got then
08:41 - plus 3 means 1 2 3 three location
08:44 - forward and it will give t no here we
08:48 - have got the value actually M so in M we
08:50 - are going to do + three so m n o p in
08:56 - the SK value we are going to add three
08:58 - so what you will get 1 1 2 3 that is
09:01 - p next alphabet right because we are
09:04 - adding in the SK value of this m so for
09:07 - this for this printf you will get output
09:10 - P small P right I hope uh you got this
09:16 - now next
09:23 - is next is this one so this is what in
09:27 - parenthesis we have uh obviously this
09:30 - increment operator and binary plus so
09:32 - this is having higher priority this is
09:33 - what pre-increment now so first the
09:37 - value would be incremented and then the
09:39 - modified value we will use in this
09:41 - expression right so Plus+ pointer PTR is
09:45 - having 100 so Plus+ means it would
09:47 - become 101 so now 101 we will use here
09:50 - as trick at this place we have 101 + 10
09:55 - - 32 10 1 + 10 is what 10 location
10:00 - forward like uh 11 one so what value
10:03 - will get 111 estri minus 32 s is having
10:08 - higher prity than minus so first of all
10:10 - we'll what get the value here value at
10:14 - 111 what would be the value at 111 07 it
10:17 - would be 08 09 it would be 10 and it
10:22 - would be 11 right so at 111 what would
10:26 - be the value J small J -
10:31 - 32
10:33 - means now we have got the value so - 32
10:36 - would be from the SK value of this
10:40 - J and if you do minus 32 then you will
10:43 - get capital J right I hope you go to
10:48 - this SK SK value of capital J so answer
10:51 - of this would be capital
10:54 - G right now next is here in the one line
10:58 - only I'm
10:59 - printing three
11:01 - characters so associativity of these
11:05 - operators are what increment and
11:07 - decrement operator right to left so
11:10 - always try to evaluate these expression
11:13 - from right to left not from here
11:16 - remember this point first of all this
11:19 - should be evaluated now PTR is what
11:23 - having value
11:24 - one1 and this is what pre- decrement so
11:29 - first decrement the value it will become
11:32 - 100 right and now use that value here so
11:36 - value at 100 is what w so it will give
11:41 - W right now this one
11:45 - pre-increment now PTR becomes 101 again
11:49 - pre-increment means plus one next
11:52 - location right and whatever the value
11:55 - that would print so at 101 what is the
11:57 - value e so it will give e
12:00 - right now here we have 101 now estc
12:03 - pointer so whatever the value in PTR
12:05 - that is 101 whatever the value there
12:07 - that should be printed that is e so I
12:11 - hope you got this one so try to you know
12:14 - maybe you can try these problems at your
12:15 - own you can modify these problems
12:17 - something like maybe here you can write
12:19 - minus- PTR + 4 something like this and
12:22 - better to try more and more problems of
12:24 - these kind of problems to get better
12:26 - understanding of these Concepts right
12:28 - because these are very tricky questions
12:30 - and generally they these questions are
12:31 - being asked in interviews or maybe in
12:33 - vas right so obviously I cannot explain
12:37 - all the questions all different
12:39 - different type of questions here so only
12:41 - one or two question I can discuss here
12:42 - rest is up to you you have to practice
12:46 - different different type of questions
12:48 - right so let me show you practical of
12:50 - these questions so see here this was the
12:53 - first question right here I'm using con
12:56 - int a and pointer is is also of constant
13:00 - type and I'm trying to modify the value
13:02 - EST PTR is equal to 12 so it should
13:04 - print 12 but it will give error see let
13:07 - me run this program and it will give you
13:10 - error because we are we cannot read we
13:13 - cannot modify this value assignment of
13:16 - assignment of read only location it is
13:19 - what read only location because it is
13:21 - constant we can only read this we can
13:22 - only access this we cannot modify right
13:25 - so that is why it will give error right
13:27 - so and and if if if you remove this
13:29 - const and this
13:33 - also see now it will give you what
13:36 - output would be a is equal to 12 a equal
13:38 - to 12 right I hope you got this so you
13:41 - can try it like here you can write cones
13:43 - here you can write cones at one place
13:44 - and see what output you you will get
13:46 - right now let me show you the uh next
13:49 - one that is this one the next exercise I
13:53 - have already already you know um written
13:55 - it so let me run this and see what
13:57 - output you will get here whatever we
14:00 - have discussed that output you are
14:01 - getting or not see I'm printing here
14:04 - address also if you don't want to print
14:07 - you can just skip the these
14:12 - lines just to get a better understanding
14:14 - like where is the pointer pointing so
14:16 - I'm just printing the address also so
14:19 - you can comment these lines and you can
14:21 - print see here first is get first output
14:24 - are getting W then e then you are
14:27 - getting P same we are getting like P
14:31 - then we should get capital J you are
14:34 - getting capital J then you should get e
14:35 - e w and you are getting
14:38 - eew right so now I hope you got this
14:41 - that's it for this video now so in the
14:43 - next video we'll see dangling pointer so
14:45 - I'll see you in the next video till then
14:46 - bye- bye take care

Cleaned transcript:

so in the series of learning programming in c we are discussing pointers in C in the previous video I have discussed void pointer in C but in this video I'll talk about uh simple problem like uh we can say the level of that problem is simple to complex high level right there I got a request from a student like to discuss some problem on pointers there we will use string pointer to a string you will take a character array or you can say a string and also we will take a pointer and using that that thing we will discuss one problem here right one more problem I'll discuss that is short problem but that will cover a important concept so basically two problem I'll discuss in this video right first of all discuss those problems on this whiteboard I'll show you how to run those problems how what what output you will get how you are getting that output and then I'll show you that output on my laptop we'll write down some code also right practically we will also see so now let us discuss uh some problem first of all I'll discuss that short problem right so see see suppose this is a problem it's not the actual problem I'll modify it I'm taking one variable a right and here I'm I'm having value 11 suppose address is 1,000 I'm taking a pointer p and this pointer is having address of a that is th000 and it is pointing to Here and Now EST P now here it is acting as IND Direction operator so value at I'm accessing this one p means in P we have th000 that is address of a means estri th000 value at th000 Value at th000 this one so we are accessing this one so I'm changing the value from uh this to 10 so now finally you will get 10 right but if I put here const means the variable dat type of this variable is constant constant means it is a constant we cannot change its value it will be minus one during that program right so when we declare a pointer pointer should have data type what what the data type of this this variable exactly same data type because it is containing address of this variable and dat of this variable is constant so exactly that should be data type of this pointer right so constant and now if you if you want to access this estri p and if you want to change it it will give error because now this location is read only we cannot modify it why because we have declared it constant you cannot modify it you can only read this value you can only access this value so now this line will give you error in this case right so here we cannot change the value it would be 11 only because it is constant right I hope now you got the concept of this if you we write here the constant keyword right and if you you can modify it and try it at your own like I'm not writing con here try to run this program what output you will get or maybe what error you are getting or try to put con here con here and only int a here now what output you are getting right so you have to think right so you have to you know think different different variation what you can do with this program and what output what error what warning you are getting so you have to try these at your own right second problem I'm going to take that is so suppose this is the question here I'm taking character array or you can say a string welcome to Jenny's lectures this is how I'm storing this this is how this would be stored in memory this will take character is that will take one bite so suppose Base address is 100 I'm taking so next bite is 101 Next Bite is one2 like this right because the character is going to take one bite this data type now one I'm going to take a pointer obviously T type would be same character and in this pointer I'm storing address of this Base address of this string so is equal to Str Str because Str Str is what name of the string name of the string is containing obviously Base address of this character array that we know right it will contain Base address the name of the this character array is St Str and that will contain Base address or you can say the first address of the first character first B so simply assign this address so now in pointer is also having 100 so pointer is also pointing to here now now first print F what would be the out of this percentage C estri PTR estri PTR means estri PTR is having 100 so this estri means here it is acting as indirection operator and what is this function of IND Direction operator it will give value at this address so value at 100 value at 100 is W so it will print first print will print W one character right now next next print C estri PTR ++ here we have + one right so now obviously this parenthesis would be executed first here also we have post increment and one is this binary plus this increment decrement these are having higher priority so this would be executed first but this is post increment so first the original value would be returned and then it would modify the value of pointer so now first PTR ++ will give original value of PTR original value is 100 and now now it will increment it so now it will become one 1 why only one bite because this is of character type so definitely it will point to the next location and character is having only one bite if it is of integer type then Base address is 100 it it would be increased by 4 by because the size of integer is 4 by that we have discussed in previous videos of pointers you can you know refer those videos so now it is one1 but here we are using the original value of pointer that is 100 + 1 100 + 1 means obviously it will increment move the pointer one location forward so this one one1 because of this plus one so s 101 so whatever the value at 101 that would be return returned so here it will give e output would be e for next print F next print f c in this case it is also what obviously first of all we will solve what this parenthesis right here also we have plus and minus this uh post uh decrement so this is having higher priority but this is post so original value we will use first right so here see original value of PTR is 101 10 1 now decrement it so now it will become again 1 0 right but here in this expression we are we will use original value that is 101 only so 10 1 + 5 + 5 here we have Min 1 and then we have + 3 right + 5 means five location forward means one 1 + 5 means 1 2 3 4 5 here e now here we have sorry 10 6 106 6 1 here we have estri here we have + three minus one means one location backward that is 1 Z 5 SRI plus one this one H right now whatever the value at this address what is the value at 101 sorry 105 because this is having now higher priority than binary plus operator so this would be executed first so value at 105 is m so it will give M now + three so now what output you will get here it's not like that if M we got then plus 3 means 1 2 3 three location forward and it will give t no here we have got the value actually M so in M we are going to do + three so m n o p in the SK value we are going to add three so what you will get 1 1 2 3 that is p next alphabet right because we are adding in the SK value of this m so for this for this printf you will get output P small P right I hope uh you got this now next is next is this one so this is what in parenthesis we have uh obviously this increment operator and binary plus so this is having higher priority this is what preincrement now so first the value would be incremented and then the modified value we will use in this expression right so Plus+ pointer PTR is having 100 so Plus+ means it would become 101 so now 101 we will use here as trick at this place we have 101 + 10 32 10 1 + 10 is what 10 location forward like uh 11 one so what value will get 111 estri minus 32 s is having higher prity than minus so first of all we'll what get the value here value at 111 what would be the value at 111 07 it would be 08 09 it would be 10 and it would be 11 right so at 111 what would be the value J small J 32 means now we have got the value so 32 would be from the SK value of this J and if you do minus 32 then you will get capital J right I hope you go to this SK SK value of capital J so answer of this would be capital G right now next is here in the one line only I'm printing three characters so associativity of these operators are what increment and decrement operator right to left so always try to evaluate these expression from right to left not from here remember this point first of all this should be evaluated now PTR is what having value one1 and this is what pre decrement so first decrement the value it will become 100 right and now use that value here so value at 100 is what w so it will give W right now this one preincrement now PTR becomes 101 again preincrement means plus one next location right and whatever the value that would print so at 101 what is the value e so it will give e right now here we have 101 now estc pointer so whatever the value in PTR that is 101 whatever the value there that should be printed that is e so I hope you got this one so try to you know maybe you can try these problems at your own you can modify these problems something like maybe here you can write minus PTR + 4 something like this and better to try more and more problems of these kind of problems to get better understanding of these Concepts right because these are very tricky questions and generally they these questions are being asked in interviews or maybe in vas right so obviously I cannot explain all the questions all different different type of questions here so only one or two question I can discuss here rest is up to you you have to practice different different type of questions right so let me show you practical of these questions so see here this was the first question right here I'm using con int a and pointer is is also of constant type and I'm trying to modify the value EST PTR is equal to 12 so it should print 12 but it will give error see let me run this program and it will give you error because we are we cannot read we cannot modify this value assignment of assignment of read only location it is what read only location because it is constant we can only read this we can only access this we cannot modify right so that is why it will give error right so and and if if if you remove this const and this also see now it will give you what output would be a is equal to 12 a equal to 12 right I hope you got this so you can try it like here you can write cones here you can write cones at one place and see what output you you will get right now let me show you the uh next one that is this one the next exercise I have already already you know um written it so let me run this and see what output you will get here whatever we have discussed that output you are getting or not see I'm printing here address also if you don't want to print you can just skip the these lines just to get a better understanding like where is the pointer pointing so I'm just printing the address also so you can comment these lines and you can print see here first is get first output are getting W then e then you are getting P same we are getting like P then we should get capital J you are getting capital J then you should get e e w and you are getting eew right so now I hope you got this that's it for this video now so in the next video we'll see dangling pointer so I'll see you in the next video till then bye bye take care
