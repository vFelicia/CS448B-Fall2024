With timestamps:

00:00 - so in the series of learning c
00:01 - programming we have discussed structures
00:03 - in c now we are left with one small
00:05 - concept that is union is union in c it
00:08 - is almost same as structure but
00:11 - yeah we are having some difference
00:13 - between structure and union that we will
00:14 - discuss in this video so we'll see what
00:16 - is union how to define unity is also a
00:18 - user defined data type like structure so
00:21 - how to define the state type how to use
00:22 - this in our program
00:24 - advantages of union drawbacks of union
00:26 - why we use union
00:28 - right how this is different from
00:30 - structure we will see every point about
00:31 - union with proper example we'll see one
00:34 - program i'll show you practical also
00:36 - you'll run that program on my laptop
00:38 - right now before that just want to tell
00:39 - you one thing
00:41 - for those who are preparing for gate
00:42 - examination an academy is conducting a
00:45 - combat it's like india's largest weekly
00:48 - scholarship test for gate and esc and
00:51 - this test would be on 28th of november
00:53 - at 11 am
00:54 - you can take this test for free you
00:56 - don't need to pay anything right and
00:58 - this is live test you cannot take this
01:00 - test after the live test is over you can
01:02 - only take this line it is available on
01:05 - both web as well as android app so here
01:07 - you will compete with thousands of
01:09 - learners from all over india and you
01:11 - stand a chance to win up to 100
01:13 - scholarship on plus subscription
01:15 - as well as some exciting prices as well
01:17 - like apple ipad mini jbl speaker jbl
01:20 - headphone and amazon vouchers and much
01:22 - more and in this test 20 questions would
01:24 - be there and time limit would be 60
01:26 - minutes so under the questions would be
01:28 - very challenging and original gate
01:30 - questions created by their best gate and
01:31 - ese educators so this will help you to
01:34 - understand the type of questions asked
01:35 - from each topic and now you will know
01:38 - how far you stand from your target score
01:41 - where you are standing among other
01:43 - learners from all over india you can
01:44 - just assess your preparation in 60
01:47 - minutes with the help of real time
01:49 - leaderboard that would be updated after
01:51 - every question you can measure your
01:52 - progress with your personalized scoring
01:54 - and
01:55 - rating and after every contest detailed
01:57 - video solutions would be given to you by
01:58 - their experts and also you will see the
02:00 - questions that were attempted wrong as
02:02 - well so this way you will know your weak
02:04 - points and working on on them will be
02:07 - easy for you so you're supposed to
02:08 - enroll for this test the enrollment link
02:10 - i'll put in the description box of this
02:12 - video you can just click on that link
02:14 - scroll down pick up the right test for
02:15 - you and just click enroll and use my
02:18 - code jkl10 to unlock the test
02:21 - now see what is union see union is also
02:24 - a user defined data type
02:26 - i know i hope you know what is a
02:28 - structure you have you have the idea
02:29 - about structure if not you can watch out
02:31 - my previous videos like structure is
02:32 - what a user defined
02:34 - right which consists of what different
02:36 - different elements which are having
02:38 - different different data types like this
02:39 - this was this the syntax like struck was
02:43 - that keyword here we can say name of the
02:45 - structure like i am taking a student
02:48 - or any general name i am taking like uh
02:51 - abc so this is what i am taking
02:54 - like this is a structure this is struct
02:57 - tag these are abc are members of
02:59 - different different data types here we
03:00 - have semicolon in main i am declaring a
03:02 - variable into demo suppose i am
03:04 - declaring s
03:05 - and i'm initializing this
03:07 - like uh this is int so care i'm
03:10 - initializing something like this a
03:13 - and then 4.0
03:15 - so one would be in a this a
03:18 - character would be in b and the c would
03:20 - contain 4.0 right and if you want to
03:23 - print you can simply
03:24 - access how these variables are using
03:26 - this like s
03:28 - in printf simply you can print
03:31 - percentage d percentage c
03:33 - and percentage f
03:36 - i am printing so first i am printing s
03:38 - dot a s dot b and s dot c this is how
03:41 - you can print
03:42 - right i hope this is clear to you right
03:44 - now
03:45 - union is almost same it is also user
03:47 - defined data type it also
03:49 - have the information of different
03:51 - different type of variables means
03:53 - variables which are having different
03:54 - different data type
03:56 - everything is same right
03:58 - syntax is almost same only difference is
04:00 - what rather than this struct what we use
04:04 - union keyword and here i'm taking
04:07 - suppose union
04:09 - and the name is abc i'm taking
04:12 - same here i am taking in a
04:15 - care b
04:16 - and float
04:19 - c
04:20 - same you have to
04:22 - you know put semicolon here
04:24 - same
04:25 - variable declaration you have to write
04:26 - down what if you are declaring in main
04:29 - that is also fine here also you can
04:31 - declare like if i want to declare you
04:33 - here that is also fine
04:35 - if you want to declare within main
04:37 - function in any any function you can
04:39 - also declare if you want to declare this
04:42 - variable globally outside the main
04:43 - outside of any function that is also
04:45 - fine same with structure
04:47 - all the points are same
04:49 - now what is the difference that also
04:50 - will see now here i am taking what same
04:52 - union
04:54 - the name
04:55 - here
04:56 - this tag is abc i'm taking and i'm
04:59 - taking here u
05:02 - name of the variable u
05:04 - right
05:06 - now the only difference is what see how
05:08 - memory would be allocated to this
05:11 - to these abc
05:13 - this is how the memory block would be
05:14 - there
05:17 - this is for a b and c continuous memory
05:19 - allocation 4 bytes like suppose base
05:23 - address is thousand
05:25 - four bytes for end so one zero zero four
05:27 - for next and for character only one byte
05:29 - so one zero zero five
05:31 - for next
05:32 - here i am storing one a and four point
05:35 - zero zero zero zero zero six 0's
05:38 - this is how and this s is what
05:42 - variable name so it is containing base
05:43 - address it is acting as internal pointer
05:45 - so it is pointing i hope this is clear
05:47 - to you right
05:49 - but now the only difference is the
05:51 - memory allocation how memory would be
05:52 - allocated to these
05:55 - members
05:56 - how
05:57 - here separate memory allocation
06:00 - for this member separate separate
06:02 - separate for all the
06:04 - members separate memory allocation and
06:05 - total memory allocate how many bytes
06:07 - would be allocated
06:08 - four bytes one byte and four bytes
06:11 - means
06:12 - nine bytes
06:13 - you can also check here in printf just
06:15 - try down size of like size of this
06:18 - struct demo or size of this variable s
06:21 - you will get number of bytes
06:23 - in my machine i am getting nine bytes
06:25 - because np is taking four bytes
06:27 - in union how memory would be allocated
06:30 - only one memory block
06:34 - all the
06:35 - these members would share a single
06:37 - memory
06:39 - now how many bytes would be allocated
06:41 - see int is taking four
06:44 - carries also care is one float is four
06:47 - so maximum the data type which is having
06:50 - maximum memory location that is 4 it is
06:53 - also 4. so how many bytes should be
06:55 - allocated only 4 bytes
06:57 - only 4 bytes here 9 bytes
07:00 - so this a b
07:03 - c
07:04 - three variables will share the same
07:06 - memory location
07:09 - right
07:11 - so we will see drawbacks and
07:13 - that that
07:15 - advantage advantages also of this union
07:16 - so how you will access these members see
07:19 - if i am storing here
07:21 - u is equal to sorry you point how to
07:23 - access variables same method name of
07:26 - this
07:27 - so you have to exit
07:28 - that members of this union same as
07:30 - structure name of this variable dot
07:32 - operator and name of this member u dot a
07:35 - is equal to i am storing here 1
07:38 - u dot b is equal to i am storing here
07:41 - suppose 97
07:43 - u dot c i am storing here
07:46 - suppose nine point zero or nine point
07:49 - two
07:52 - right and in print f
07:55 - simply i am printing first of all a
07:57 - value a is equal to
07:59 - all the things all the three things i am
08:01 - going to print so i am just writing
08:03 - the syntax how to print
08:05 - so this is how i am going to print
08:08 - so here what value will get in case of
08:10 - structure this will print one
08:12 - this will print this
08:14 - a because percentage c this is would be
08:16 - character and this would print four
08:18 - point zero zero zero zero
08:19 - right but here what would be printed
08:22 - here
08:23 - at first i am storing in u dot is 1 so
08:27 - it would be stored here
08:29 - because a is
08:30 - sharing sharing this memory location
08:32 - right
08:33 - now u wrote b
08:35 - now b is also sharing this memory
08:37 - location so this one would be replaced
08:39 - with 97
08:41 - now you wrote c
08:42 - c is also sharing this memory location
08:45 - so now it will be replaced with
08:47 - 9.2 0 0 0
08:50 - 5 0's
08:52 - right so final value would be what in
08:54 - this memory location
08:56 - 9.2
08:57 - whatever you have entered at last that
08:59 - value will exist only the previous value
09:02 - would be overwritten so what output you
09:04 - will get u dot a u dot b u dot c
09:09 - what output you will get
09:11 - you wrote a like percentage d
09:13 - so maybe you will get any garbage value
09:16 - percentage c
09:17 - so what it will print any garbage value
09:20 - now this will print u dot c it will
09:22 - print nine point two
09:25 - right so the last value which is enter
09:27 - that would be stored only
09:30 - so this is drawback
09:31 - right
09:33 - so now you will say m how we can use and
09:36 - if this is the drawback why we use this
09:38 - union we don't use union nowadays
09:40 - union were used
09:42 - in previous days like maybe
09:45 - many years ago
09:47 - at that time memory was very expensive
09:51 - right and here we have
09:53 - say this memory would be located 9 bytes
09:55 - here only 4 bytes so this is less map it
09:58 - will take less memory
10:00 - so suppose a situation is
10:02 - we are having 5 or 10 members but
10:05 - at one time i want to process only one
10:08 - member
10:09 - right
10:11 - but
10:11 - suppose at one time i just want to
10:13 - process this a i want to store a value
10:15 - in a and i want to access the value of a
10:18 - not in b and c
10:19 - so this using of structure would be
10:21 - wastage of memory because here nine
10:23 - bytes would be allocated but i am not
10:25 - using this b and c ms i am using only a
10:28 - so this would be wastage of memory
10:30 - in this case union is better
10:32 - here we cannot process all the
10:35 - these members
10:36 - all the elements at the same time if you
10:38 - want to process only one
10:40 - element at one time
10:42 - that is good idea
10:44 - in that situation it's a good idea to
10:46 - use union rather than structure because
10:49 - it is wastage of memory but nowadays see
10:52 - buying of memory is very you know it's
10:53 - not so much expensive memory is
10:57 - available at cheap prices
10:59 - so we don't care about the basis of
11:01 - memory and we use structures only we
11:03 - don't use union
11:04 - so that is the only advantage like
11:07 - less wastage of memory but drawback is
11:09 - what
11:10 - we can't process all the elements at
11:13 - same time
11:14 - because this is the case here
11:17 - it will hold only the last entered value
11:21 - right because of sharing of the memory
11:23 - memory allocation by all the members of
11:25 - this union
11:27 - right
11:28 - so same syntax would be same using
11:30 - pointer also you can access
11:33 - in structure if i take like here i am
11:34 - taking a pointer like struct
11:37 - demo ptr is equal to address of
11:41 - s
11:42 - how you can access this
11:45 - ptr arrow a ptr rob ptroc same in union
11:50 - if here i want to take after this i want
11:52 - to declare
11:53 - a pointer union
11:55 - and what abc
11:58 - s trick
12:00 - ptr
12:01 - and in ptr after that i am assigning
12:03 - address of
12:04 - u
12:06 - see same
12:08 - u is a variable which is pointing this
12:10 - memory location suppose memory
12:11 - allocation is what uh i'm taking 2000
12:15 - address is 2000 base address
12:17 - right so it is containing 2000 and it is
12:20 - pointing to here so i'm
12:22 - address of u so ptr would point to this
12:26 - in ptr what would contain address of u
12:28 - obviously address of you may be is
12:30 - suppose three thousand there will be
12:31 - some address of this u variable also
12:33 - so here we have three thousand so this
12:35 - pointer is pointing to this right same
12:38 - you can access this like ptr arrow a ptr
12:42 - rob pdr roc same syntax everything is
12:44 - same only the difference is the memory
12:47 - allocation how the memory would be
12:48 - allocated to these members
12:50 - i hope this difference is clear
12:52 - advantage is also clear clear and
12:54 - drawbacks of union is also clear to you
12:57 - and why we are not using union and in
12:59 - which case we can use union like it
13:01 - would be better to use union than than
13:04 - us then this structure so if you update
13:07 - one member of this union all the members
13:08 - would be updated right because of the
13:11 - same memory allocation they are sharing
13:14 - right same you can take like area of
13:15 - union you if you want to try out you can
13:17 - try out this at your own but nowadays we
13:19 - are not using union so that much you
13:22 - know theory is enough about union now
13:24 - let me show you this
13:25 - practically on my laptop let me run this
13:28 - and see what output you will get right
13:30 - so let me create a file
13:35 - union.c
13:41 - and here simply we are taking
13:44 - it's like union i'm taking just a name
13:46 - demo like abc and
13:49 - within this i'm taking one integer
13:52 - next is care
13:54 - b
13:55 - and next i am taking like
13:59 - float
14:00 - c right and here
14:04 - just a semicolon
14:11 - or within main like i am writing here
14:15 - main and in this i am
14:18 - declaring a variable union the name is
14:20 - abc and i am just taking a name u
14:25 - right
14:26 - so i am initializing like a u dot a
14:31 - or rather than this i want to access
14:33 - this using pointer
14:35 - let's take
14:36 - the pointer concept in the same thing
14:38 - union
14:39 - abc and strict i am taking a pointer ptr
14:43 - is equal to address of you
14:47 - right
14:48 - so you can access variables using ptr or
14:50 - pointer it's up
14:52 - this pointer or the variable you you
14:55 - right
14:56 - so i'm assigning the value using
14:58 - variable u dot a same method is equal to
15:01 - i am assigning 1
15:02 - then
15:03 - u dot
15:05 - b
15:06 - would be suppose i am assigning 97
15:09 - and you don't see
15:11 - would be float so i am taking suppose
15:13 - 78.90
15:16 - right
15:17 - and i just want to print the values
15:20 - right
15:21 - so i will print a value
15:24 - as percentage d
15:28 - right
15:28 - and how we i want to access ptr arrow
15:32 - a
15:34 - right
15:35 - same
15:40 - i'll just copy this thing then i'm
15:43 - printing
15:44 - i'll print b value b would be care so
15:47 - here we will write percentage c
15:49 - and ptr
15:51 - b
15:52 - here we have next we have c
15:55 - so this would be
15:56 - float so percentage f and
15:59 - c value
16:01 - right
16:02 - so let's see what output you are getting
16:05 - see a value is
16:07 - any garbage value b value is this b
16:10 - value is
16:11 - nothing it is going to print
16:13 - and its c value is
16:15 - 78 point this so let me just format this
16:18 - thing
16:19 - with slashing
16:23 - right and now again we are going to run
16:25 - this and see what output we are getting
16:26 - see a is having any garbage value b is
16:29 - having nothing
16:30 - right
16:31 - and c is having the exact value
16:33 - the last added value is 78.90 so in that
16:37 - memory location only this memory would
16:38 - be stored the previous would be
16:41 - overwritten right so that is drawback of
16:43 - this union
16:45 - so one assignment for you is
16:47 - see i am not assigning any value in this
16:50 - c i'm just committing this out u dot a
16:51 - is 1 you wrote b is 97 i'm just printing
16:54 - the value a value is this
16:56 - and b value is
16:58 - this one right and i'm just
17:02 - committing out this this value
17:05 - commenting out this value
17:07 - so what output you will get
17:09 - so from the next video we are going to
17:10 - start file handling in c so i'll see in
17:12 - the next video till then bye
17:18 - you

Cleaned transcript:

so in the series of learning c programming we have discussed structures in c now we are left with one small concept that is union is union in c it is almost same as structure but yeah we are having some difference between structure and union that we will discuss in this video so we'll see what is union how to define unity is also a user defined data type like structure so how to define the state type how to use this in our program advantages of union drawbacks of union why we use union right how this is different from structure we will see every point about union with proper example we'll see one program i'll show you practical also you'll run that program on my laptop right now before that just want to tell you one thing for those who are preparing for gate examination an academy is conducting a combat it's like india's largest weekly scholarship test for gate and esc and this test would be on 28th of november at 11 am you can take this test for free you don't need to pay anything right and this is live test you cannot take this test after the live test is over you can only take this line it is available on both web as well as android app so here you will compete with thousands of learners from all over india and you stand a chance to win up to 100 scholarship on plus subscription as well as some exciting prices as well like apple ipad mini jbl speaker jbl headphone and amazon vouchers and much more and in this test 20 questions would be there and time limit would be 60 minutes so under the questions would be very challenging and original gate questions created by their best gate and ese educators so this will help you to understand the type of questions asked from each topic and now you will know how far you stand from your target score where you are standing among other learners from all over india you can just assess your preparation in 60 minutes with the help of real time leaderboard that would be updated after every question you can measure your progress with your personalized scoring and rating and after every contest detailed video solutions would be given to you by their experts and also you will see the questions that were attempted wrong as well so this way you will know your weak points and working on on them will be easy for you so you're supposed to enroll for this test the enrollment link i'll put in the description box of this video you can just click on that link scroll down pick up the right test for you and just click enroll and use my code jkl10 to unlock the test now see what is union see union is also a user defined data type i know i hope you know what is a structure you have you have the idea about structure if not you can watch out my previous videos like structure is what a user defined right which consists of what different different elements which are having different different data types like this this was this the syntax like struck was that keyword here we can say name of the structure like i am taking a student or any general name i am taking like uh abc so this is what i am taking like this is a structure this is struct tag these are abc are members of different different data types here we have semicolon in main i am declaring a variable into demo suppose i am declaring s and i'm initializing this like uh this is int so care i'm initializing something like this a and then 4.0 so one would be in a this a character would be in b and the c would contain 4.0 right and if you want to print you can simply access how these variables are using this like s in printf simply you can print percentage d percentage c and percentage f i am printing so first i am printing s dot a s dot b and s dot c this is how you can print right i hope this is clear to you right now union is almost same it is also user defined data type it also have the information of different different type of variables means variables which are having different different data type everything is same right syntax is almost same only difference is what rather than this struct what we use union keyword and here i'm taking suppose union and the name is abc i'm taking same here i am taking in a care b and float c same you have to you know put semicolon here same variable declaration you have to write down what if you are declaring in main that is also fine here also you can declare like if i want to declare you here that is also fine if you want to declare within main function in any any function you can also declare if you want to declare this variable globally outside the main outside of any function that is also fine same with structure all the points are same now what is the difference that also will see now here i am taking what same union the name here this tag is abc i'm taking and i'm taking here u name of the variable u right now the only difference is what see how memory would be allocated to this to these abc this is how the memory block would be there this is for a b and c continuous memory allocation 4 bytes like suppose base address is thousand four bytes for end so one zero zero four for next and for character only one byte so one zero zero five for next here i am storing one a and four point zero zero zero zero zero six 0's this is how and this s is what variable name so it is containing base address it is acting as internal pointer so it is pointing i hope this is clear to you right but now the only difference is the memory allocation how memory would be allocated to these members how here separate memory allocation for this member separate separate separate for all the members separate memory allocation and total memory allocate how many bytes would be allocated four bytes one byte and four bytes means nine bytes you can also check here in printf just try down size of like size of this struct demo or size of this variable s you will get number of bytes in my machine i am getting nine bytes because np is taking four bytes in union how memory would be allocated only one memory block all the these members would share a single memory now how many bytes would be allocated see int is taking four carries also care is one float is four so maximum the data type which is having maximum memory location that is 4 it is also 4. so how many bytes should be allocated only 4 bytes only 4 bytes here 9 bytes so this a b c three variables will share the same memory location right so we will see drawbacks and that that advantage advantages also of this union so how you will access these members see if i am storing here u is equal to sorry you point how to access variables same method name of this so you have to exit that members of this union same as structure name of this variable dot operator and name of this member u dot a is equal to i am storing here 1 u dot b is equal to i am storing here suppose 97 u dot c i am storing here suppose nine point zero or nine point two right and in print f simply i am printing first of all a value a is equal to all the things all the three things i am going to print so i am just writing the syntax how to print so this is how i am going to print so here what value will get in case of structure this will print one this will print this a because percentage c this is would be character and this would print four point zero zero zero zero right but here what would be printed here at first i am storing in u dot is 1 so it would be stored here because a is sharing sharing this memory location right now u wrote b now b is also sharing this memory location so this one would be replaced with 97 now you wrote c c is also sharing this memory location so now it will be replaced with 9.2 0 0 0 5 0's right so final value would be what in this memory location 9.2 whatever you have entered at last that value will exist only the previous value would be overwritten so what output you will get u dot a u dot b u dot c what output you will get you wrote a like percentage d so maybe you will get any garbage value percentage c so what it will print any garbage value now this will print u dot c it will print nine point two right so the last value which is enter that would be stored only so this is drawback right so now you will say m how we can use and if this is the drawback why we use this union we don't use union nowadays union were used in previous days like maybe many years ago at that time memory was very expensive right and here we have say this memory would be located 9 bytes here only 4 bytes so this is less map it will take less memory so suppose a situation is we are having 5 or 10 members but at one time i want to process only one member right but suppose at one time i just want to process this a i want to store a value in a and i want to access the value of a not in b and c so this using of structure would be wastage of memory because here nine bytes would be allocated but i am not using this b and c ms i am using only a so this would be wastage of memory in this case union is better here we cannot process all the these members all the elements at the same time if you want to process only one element at one time that is good idea in that situation it's a good idea to use union rather than structure because it is wastage of memory but nowadays see buying of memory is very you know it's not so much expensive memory is available at cheap prices so we don't care about the basis of memory and we use structures only we don't use union so that is the only advantage like less wastage of memory but drawback is what we can't process all the elements at same time because this is the case here it will hold only the last entered value right because of sharing of the memory memory allocation by all the members of this union right so same syntax would be same using pointer also you can access in structure if i take like here i am taking a pointer like struct demo ptr is equal to address of s how you can access this ptr arrow a ptr rob ptroc same in union if here i want to take after this i want to declare a pointer union and what abc s trick ptr and in ptr after that i am assigning address of u see same u is a variable which is pointing this memory location suppose memory allocation is what uh i'm taking 2000 address is 2000 base address right so it is containing 2000 and it is pointing to here so i'm address of u so ptr would point to this in ptr what would contain address of u obviously address of you may be is suppose three thousand there will be some address of this u variable also so here we have three thousand so this pointer is pointing to this right same you can access this like ptr arrow a ptr rob pdr roc same syntax everything is same only the difference is the memory allocation how the memory would be allocated to these members i hope this difference is clear advantage is also clear clear and drawbacks of union is also clear to you and why we are not using union and in which case we can use union like it would be better to use union than than us then this structure so if you update one member of this union all the members would be updated right because of the same memory allocation they are sharing right same you can take like area of union you if you want to try out you can try out this at your own but nowadays we are not using union so that much you know theory is enough about union now let me show you this practically on my laptop let me run this and see what output you will get right so let me create a file union.c and here simply we are taking it's like union i'm taking just a name demo like abc and within this i'm taking one integer next is care b and next i am taking like float c right and here just a semicolon or within main like i am writing here main and in this i am declaring a variable union the name is abc and i am just taking a name u right so i am initializing like a u dot a or rather than this i want to access this using pointer let's take the pointer concept in the same thing union abc and strict i am taking a pointer ptr is equal to address of you right so you can access variables using ptr or pointer it's up this pointer or the variable you you right so i'm assigning the value using variable u dot a same method is equal to i am assigning 1 then u dot b would be suppose i am assigning 97 and you don't see would be float so i am taking suppose 78.90 right and i just want to print the values right so i will print a value as percentage d right and how we i want to access ptr arrow a right same i'll just copy this thing then i'm printing i'll print b value b would be care so here we will write percentage c and ptr b here we have next we have c so this would be float so percentage f and c value right so let's see what output you are getting see a value is any garbage value b value is this b value is nothing it is going to print and its c value is 78 point this so let me just format this thing with slashing right and now again we are going to run this and see what output we are getting see a is having any garbage value b is having nothing right and c is having the exact value the last added value is 78.90 so in that memory location only this memory would be stored the previous would be overwritten right so that is drawback of this union so one assignment for you is see i am not assigning any value in this c i'm just committing this out u dot a is 1 you wrote b is 97 i'm just printing the value a value is this and b value is this one right and i'm just committing out this this value commenting out this value so what output you will get so from the next video we are going to start file handling in c so i'll see in the next video till then bye you
