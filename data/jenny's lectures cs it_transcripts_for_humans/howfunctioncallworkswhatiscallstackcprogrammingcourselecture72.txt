With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language we are
00:05 - discussing functions in C++ right till
00:07 - now we have discussed basics of
00:09 - functions right then call by value call
00:11 - by reference or we can say pass by value
00:13 - pass by reference these two things then
00:15 - function overloading then some coding
00:16 - exercise based on that then how to pass
00:19 - arrays to a function right and one
00:21 - coding exercise for that thing also
00:23 - right now we will discuss in this video
00:27 - how function call actually works
00:30 - right like we call a function in main
00:33 - function we are calling one function
00:34 - then I say the control will pass to
00:36 - another function then that function is
00:38 - doing some you know a computation or
00:40 - some processing and will return some
00:42 - result right so how actually this thing
00:46 - is working how function call is actually
00:49 - works what is happening behind the scene
00:52 - right so you don't need to go in that
00:54 - much deep like because obviously there
00:57 - are these things are working on lay of
01:00 - instructions so we don't need to uh go
01:02 - in deep right but yeah you need to you
01:06 - know to Su what you need to understand
01:08 - how behind the scene what is happening
01:10 - how this function call is working right
01:13 - so we'll see that thing in this video
01:16 - now first before uh discussing this
01:18 - thing the actual working let me show you
01:20 - if you have a program then how actually
01:23 - the memory is laid off for your
01:25 - programing that computer memory right so
01:28 - the memory is divided into into segments
01:34 - actually something like this so we have
01:38 - one segment this is our code area where
01:40 - her actual code the program is there
01:43 - then this one is for those static or if
01:46 - you have some Global variables then for
01:49 - those memory would be allocated and then
01:51 - one we have this area for stack like
01:57 - stack memory and this is
02:01 - Heap right so this is kind of free
02:03 - storage and Heap this we will not
02:05 - discuss in this video because this we
02:06 - will use when we discussing like Dynamic
02:08 - uh memory allocation and all so this
02:11 - thing when you are calling functions
02:14 - then this memory the stack memory is to
02:17 - be used so for about this area we'll be
02:20 - discussing in this
02:21 - video right
02:24 - now functions basically use that
02:26 - function called
02:28 - St it's like the normal stack which
02:31 - works on that Leo principle last and
02:35 - first out it's like you can see a stack
02:38 - of uh your in your wardrobe you put your
02:41 - clothes stack of clothes right so last
02:44 - in first out principle so the same
02:47 - function goal stack also works in this
02:49 - principle last and first down right now
02:54 - see whenever a new function is to be
02:57 - called then an activate ation record is
03:00 - to be pushed or created in that step now
03:05 - what is that activation
03:07 - record that activation record contains
03:09 - some information about that function
03:11 - like about the parameter of the function
03:13 - or you can say store the parameter of
03:15 - the functions or it has space for those
03:18 - local variables of the functions some
03:20 - temporary variables also there in that
03:22 - function and as well as the return
03:24 - address it also stores that activation
03:26 - record of that function stores the
03:27 - return address because obviously we need
03:28 - to know that fun need to know where to
03:30 - return after processing Where to return
03:33 - so that address would also be stored and
03:35 - some other information also some
03:37 - registers information and all so in that
03:39 - much deep we will not go here so this is
03:43 - basically the
03:45 - memory right for our program how the
03:48 - memory is laid off for a program okay
03:51 - but see one thing you need to remember
03:52 - this stack sizes it's not infinite it's
03:56 - finite right so if there are many more
03:59 - activation functions or many more
04:01 - activation records more activation
04:03 - records then there would be a error you
04:05 - can get that um stack Overflow error
04:08 - right and whenever a new activation
04:11 - record is created means whenever a new
04:13 - function is called so obviously
04:15 - activation record is created and pushed
04:17 - into the
04:19 - stack right so and whenever the function
04:24 - terminates then the activation
04:27 - activation record for that function
04:28 - would be popped out out from the stack
04:30 - and the control will return to the
04:33 - calling function now let's see this
04:35 - thing with
04:36 - example okay so let's see this example
04:38 - suppose we have this program and you
04:40 - have to find out you just dry on this
04:42 - we'll dry on this and we'll see what
04:43 - output you will get right okay now at
04:47 - first obviously we know the control will
04:49 - go to here main function main is a
04:53 - function right so an activation report
04:55 - would be one entry would be created for
04:57 - Main and pushed into
05:00 - that function called Step so we have
05:03 - something like this let's
05:06 - take
05:08 - this so this is for
05:11 - me right and what in this activation
05:15 - record this activation record is
05:17 - also so we'll store here what
05:20 - information local variable of the
05:22 - function parameters return address of
05:24 - the function and some other information
05:26 - also I'm value and all but here we will
05:28 - store only local variables and that's it
05:32 - right our parameters so here we have num
05:34 - one and num two so here we have memory
05:38 - would be allocated to num one and num
05:41 - two num one is three and this is seven
05:44 - and one is
05:46 - result one variable and that is
05:50 - zero
05:52 - right now on the next line in the next
05:55 - instruction we have result is equal to
05:57 - addition num one and num two so here we
05:59 - are
06:00 - calling this function
06:03 - see addition num one and num two so this
06:07 - is function call now whenever the
06:10 - control will go to here addition and
06:12 - after processing the control will go
06:15 - back return back to this only right so
06:18 - the return
06:19 - address that would also be stored like
06:21 - where that function would be returned so
06:24 - that returned address would also be
06:26 - stored right but that we are not going
06:28 - to store but yeah behind the scene it is
06:30 - happening the return address is also
06:33 - stored here in the stack right for this
06:36 - activation
06:37 - frame now if addition means next the
06:41 - control will call this function right
06:44 - means what is happening one more stack
06:47 - frame now this is the active stack
06:51 - frame this is for addition right so now
06:54 - this is the active stack frame we have
06:56 - int a int B the parameters so A and B
07:00 - right value to be passed num one is here
07:03 - three here we have seven so in a now we
07:06 - have three in B now we have seven right
07:10 - sum is equal to 0 one more local
07:12 - variable we have that is sum that is Zer
07:15 - here now sum is equal to a plus b means
07:18 - sum becomes
07:20 - 10 right okay fine in the next
07:24 - instruction we have subtra substraction
07:26 - sum a so again we are calling one more
07:30 - function that is substraction now where
07:33 - is that function this is that function
07:35 - substraction right so now one more stack
07:38 - frame would be post or the activation
07:40 - record for substraction function now the
07:43 - active frame is this
07:45 - one right okay now here we have see here
07:49 - we have reference variable m per X so
07:54 - this sum we are passing with pass by
07:56 - reference and this A and B we are
07:59 - passing call by
08:00 - value right so in pass by reference this
08:03 - x is just an alas or alternative name of
08:06 - the sum means actually you're passing
08:09 - the address that is it right so we not
08:12 - passing the actual value of sum that is
08:14 - 10 no so here we have X Y and
08:22 - Z so this x whatever the sum we are
08:27 - passing that would be going to to this x
08:30 - then a to this Y and this B to this
08:34 - Zed fine so in x x we don't have any
08:39 - value X is
08:40 - [Applause]
08:42 - simply the another name for the sum we
08:45 - passing like basically the address it's
08:46 - passed by reference so it is just
08:48 - pointing to this sum that's it right now
08:53 - in y we have three and in Zed we have
08:58 - 7 here here one instruction we have x =
09:01 - X - y -
09:04 - Z right so x = X - y now X is this 10 10
09:10 - - y 3 - 7 that is sum becomes zero now
09:14 - here sum becomes
09:18 - zero in this addition here sum becomes
09:22 - now zero because we are passing this
09:23 - value passed by reference so now it
09:27 - means we can alter the ual value we not
09:31 - passing the copy okay now there's no
09:34 - return but as soon as the control will
09:36 - see this curly Braes closing braces
09:39 - means return so where it will return
09:42 - yeah because the return address is also
09:44 - stored in this activation record so this
09:46 - function knows where to return so it
09:48 - will return back to this here
09:54 - here where we are calling this from
09:57 - addition function we are calling
09:58 - addition is calling function so it will
10:00 - return here right and this this Frame
10:04 - would be now removed and the memory
10:07 - would be
10:08 - freed so all these local variables are
10:10 - gone now activation record is now this
10:13 - one is gone now activation record is
10:15 - this addition for this function addition
10:18 - right now here we are here in this in
10:21 - this line so the next instruction is
10:25 - this see obviously the return address is
10:27 - stored so we know using the program
10:29 - counter which next next instruction is
10:32 - to be executed all these information is
10:34 - to be stored right everything sub
10:36 - register values values uh stack pointer
10:40 - return address program counter and all
10:43 - stack pointer and Base address all these
10:45 - values is to be stored right behind the
10:46 - scene right now next instruction is
10:50 - return sum basically we are returning
10:52 - some Where to return where we are
10:54 - calling this sum the addition function
10:57 - here so it will return here now sum
11:00 - would be returned sum would be returned
11:03 - here and in result that sum would be
11:05 - stored so result becomes now zero
11:07 - because sum is
11:09 - zero right and after
11:12 - returning this uh stack is also gone
11:16 - this stack frame is also gone right so
11:18 - now the activation frame is main main
11:21 - function now in main after this we have
11:24 - see out result so result will be printed
11:26 - that is zero and return zero return zero
11:28 - means
11:30 - successfully out of out from this uh
11:33 - program right so now this is also F now
11:37 - all the summary like free right me also
11:40 - poed out so one by one the activation
11:42 - record would be popped out whenever you
11:46 - on I hope you got the internal working I
11:49 - mean how the function f is actually
11:52 - working right that's it for this video
11:55 - in the next video we'll see uh scope of
11:57 - variable right this you need to
11:59 - understand what is the scope of
12:02 - variables right and then we'll see uh
12:04 - recursion in functions right so now I'll
12:06 - see in the next

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing functions in C++ right till now we have discussed basics of functions right then call by value call by reference or we can say pass by value pass by reference these two things then function overloading then some coding exercise based on that then how to pass arrays to a function right and one coding exercise for that thing also right now we will discuss in this video how function call actually works right like we call a function in main function we are calling one function then I say the control will pass to another function then that function is doing some you know a computation or some processing and will return some result right so how actually this thing is working how function call is actually works what is happening behind the scene right so you don't need to go in that much deep like because obviously there are these things are working on lay of instructions so we don't need to uh go in deep right but yeah you need to you know to Su what you need to understand how behind the scene what is happening how this function call is working right so we'll see that thing in this video now first before uh discussing this thing the actual working let me show you if you have a program then how actually the memory is laid off for your programing that computer memory right so the memory is divided into into segments actually something like this so we have one segment this is our code area where her actual code the program is there then this one is for those static or if you have some Global variables then for those memory would be allocated and then one we have this area for stack like stack memory and this is Heap right so this is kind of free storage and Heap this we will not discuss in this video because this we will use when we discussing like Dynamic uh memory allocation and all so this thing when you are calling functions then this memory the stack memory is to be used so for about this area we'll be discussing in this video right now functions basically use that function called St it's like the normal stack which works on that Leo principle last and first out it's like you can see a stack of uh your in your wardrobe you put your clothes stack of clothes right so last in first out principle so the same function goal stack also works in this principle last and first down right now see whenever a new function is to be called then an activate ation record is to be pushed or created in that step now what is that activation record that activation record contains some information about that function like about the parameter of the function or you can say store the parameter of the functions or it has space for those local variables of the functions some temporary variables also there in that function and as well as the return address it also stores that activation record of that function stores the return address because obviously we need to know that fun need to know where to return after processing Where to return so that address would also be stored and some other information also some registers information and all so in that much deep we will not go here so this is basically the memory right for our program how the memory is laid off for a program okay but see one thing you need to remember this stack sizes it's not infinite it's finite right so if there are many more activation functions or many more activation records more activation records then there would be a error you can get that um stack Overflow error right and whenever a new activation record is created means whenever a new function is called so obviously activation record is created and pushed into the stack right so and whenever the function terminates then the activation activation record for that function would be popped out out from the stack and the control will return to the calling function now let's see this thing with example okay so let's see this example suppose we have this program and you have to find out you just dry on this we'll dry on this and we'll see what output you will get right okay now at first obviously we know the control will go to here main function main is a function right so an activation report would be one entry would be created for Main and pushed into that function called Step so we have something like this let's take this so this is for me right and what in this activation record this activation record is also so we'll store here what information local variable of the function parameters return address of the function and some other information also I'm value and all but here we will store only local variables and that's it right our parameters so here we have num one and num two so here we have memory would be allocated to num one and num two num one is three and this is seven and one is result one variable and that is zero right now on the next line in the next instruction we have result is equal to addition num one and num two so here we are calling this function see addition num one and num two so this is function call now whenever the control will go to here addition and after processing the control will go back return back to this only right so the return address that would also be stored like where that function would be returned so that returned address would also be stored right but that we are not going to store but yeah behind the scene it is happening the return address is also stored here in the stack right for this activation frame now if addition means next the control will call this function right means what is happening one more stack frame now this is the active stack frame this is for addition right so now this is the active stack frame we have int a int B the parameters so A and B right value to be passed num one is here three here we have seven so in a now we have three in B now we have seven right sum is equal to 0 one more local variable we have that is sum that is Zer here now sum is equal to a plus b means sum becomes 10 right okay fine in the next instruction we have subtra substraction sum a so again we are calling one more function that is substraction now where is that function this is that function substraction right so now one more stack frame would be post or the activation record for substraction function now the active frame is this one right okay now here we have see here we have reference variable m per X so this sum we are passing with pass by reference and this A and B we are passing call by value right so in pass by reference this x is just an alas or alternative name of the sum means actually you're passing the address that is it right so we not passing the actual value of sum that is 10 no so here we have X Y and Z so this x whatever the sum we are passing that would be going to to this x then a to this Y and this B to this Zed fine so in x x we don't have any value X is simply the another name for the sum we passing like basically the address it's passed by reference so it is just pointing to this sum that's it right now in y we have three and in Zed we have 7 here here one instruction we have x = X y Z right so x = X y now X is this 10 10 y 3 7 that is sum becomes zero now here sum becomes zero in this addition here sum becomes now zero because we are passing this value passed by reference so now it means we can alter the ual value we not passing the copy okay now there's no return but as soon as the control will see this curly Braes closing braces means return so where it will return yeah because the return address is also stored in this activation record so this function knows where to return so it will return back to this here here where we are calling this from addition function we are calling addition is calling function so it will return here right and this this Frame would be now removed and the memory would be freed so all these local variables are gone now activation record is now this one is gone now activation record is this addition for this function addition right now here we are here in this in this line so the next instruction is this see obviously the return address is stored so we know using the program counter which next next instruction is to be executed all these information is to be stored right everything sub register values values uh stack pointer return address program counter and all stack pointer and Base address all these values is to be stored right behind the scene right now next instruction is return sum basically we are returning some Where to return where we are calling this sum the addition function here so it will return here now sum would be returned sum would be returned here and in result that sum would be stored so result becomes now zero because sum is zero right and after returning this uh stack is also gone this stack frame is also gone right so now the activation frame is main main function now in main after this we have see out result so result will be printed that is zero and return zero return zero means successfully out of out from this uh program right so now this is also F now all the summary like free right me also poed out so one by one the activation record would be popped out whenever you on I hope you got the internal working I mean how the function f is actually working right that's it for this video in the next video we'll see uh scope of variable right this you need to understand what is the scope of variables right and then we'll see uh recursion in functions right so now I'll see in the next
