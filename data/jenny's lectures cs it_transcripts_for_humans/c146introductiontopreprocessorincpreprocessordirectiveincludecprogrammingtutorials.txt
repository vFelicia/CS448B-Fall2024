With timestamps:

00:00 - so a small topic is left in C
00:01 - programming that is pre-processor see in
00:03 - every program we use this symbol hash so
00:05 - this is pre-processor directly now what
00:08 - is the meaning of this symbol what is
00:09 - this what is pre-processor the function
00:12 - of this thing everything we'll discuss
00:14 - in this video the meaning of this hash
00:16 - we use hash include use hash Define no
00:20 - hash Define like macro hash include a
00:21 - header file we include so what is the
00:23 - actual meaning of this thing right that
00:26 - thing every single deta detail about
00:28 - pre-processor we are going to discuss in
00:30 - this video what is this process when
00:32 - this pre-processing would be done at
00:35 - which Step of execution of C program
00:37 - when you execute a c program at which
00:38 - stage pre-processing is to be done so
00:41 - with the help of a program also I'll
00:42 - show you everything about this thing
00:44 - we'll discuss in this video now let's
00:45 - see what is a pre-processor see first
00:48 - thing it is a program pre-processor is a
00:51 - program and it is not a part of compiler
00:57 - right not a part of compiler
01:01 - but it is just a step in compilation
01:04 - process see first thing what we do we
01:06 - have a program suppose first do c then
01:10 - first thing what you do you compile that
01:13 - program maybe you think you you will
01:15 - compile that program but this
01:16 - pre-processing the function of this
01:18 - pre-processor program comes before this
01:22 - compiler before this before this
01:24 - compilation
01:25 - process but it is not a separate thing
01:28 - whenever you click on compile while the
01:30 - compilation process will going on but
01:31 - before that one more process will be
01:33 - going on that is pre-processing which
01:35 - would be done by the preprocessor this
01:38 - is a program so it is just a you can say
01:41 - a step in compilation process it is not
01:43 - a part of compiler no it is just a step
01:47 - in the compilation process right
01:50 - pre-processor is just a programmer you
01:52 - can say it's a text substitution tool
02:01 - now what does this mean what it will
02:03 - substitute what text what is the meaning
02:05 - of this thing what is the function of
02:06 - this pre-processor that I I'll discuss
02:09 - so suppose we have written a program
02:11 - like anything and we have saved it first
02:13 - dot C now in this program obviously we
02:16 - use some header file like hash include
02:20 - stdio.h maybe hash
02:23 - include uh you can say string do some
02:26 - special thing a special you know
02:29 - standard Library
02:30 - so this hash is what first of all this
02:32 - is known as pre-processor directive it
02:35 - will give direction to this
02:37 - pre-processor program so all the
02:40 - pre-processor commands begins with hash
02:44 - this is a pre-processor command this is
02:46 - a pre-processor command and the compiler
02:49 - is not able to understand these lines
02:51 - which are beginning with hash these line
02:54 - would be interpreted would be understood
02:56 - by this
02:58 - pre-processor right compiler is not
03:00 - going to understand these lines so
03:03 - compiler is not going to understand so
03:04 - before compilation process obviously the
03:07 - program which is pre-processor which
03:09 - would be done which would uh you can you
03:12 - can say comes in action now what this
03:15 - program will do whatever the lines which
03:18 - are beginning with this hash these are
03:20 - pre-processor you can say commands right
03:23 - this is pre-processor directive it will
03:25 - give direction to this pre-processor
03:27 - like what we it has to do hash include
03:30 - as one pre-processor directive hash
03:32 - Define is also there like hash Define
03:35 - this is you can say macro hash Define we
03:37 - generally use like we can say like we
03:39 - can use Pi
03:40 - 3.14 right so this is macro this is just
03:43 - a character sequence right the meaning
03:46 - of everything we'll discuss one by one
03:47 - don't worry so these are preprocessor
03:49 - commands so these line would be first of
03:52 - all understood by this pre-processor and
03:53 - what this pre-processor now will do see
03:56 - this is in some standard Library system
04:00 - Library what is defined in this stdi
04:03 - stdi do some standard functions like
04:07 - print F scanf and all right here also
04:10 - string functions are defined right
04:13 - that's why we are including hash include
04:16 - means we are including a separate file
04:18 - in our program right so what does this
04:21 - pre-processor will do this will expand
04:24 - the source
04:25 - code now expand means what it will EXP
04:29 - expend this line now what does this this
04:31 - line means now the pre-processor will do
04:34 - what it will get this stdi do content
04:39 - the file and it will include this file
04:43 - into our source file right so one
04:47 - separate file would be there like if
04:49 - this is our stdi stdi do here we have
04:53 - some content defin the Declaration or
04:56 - you can say definition of those standard
04:58 - functions so this file this content
05:01 - would be included
05:04 - here again one more line so this is
05:07 - again a file suppose string do H here
05:10 - also we
05:11 - have those definition of those uh string
05:15 - functions standard string function so
05:17 - that also would be included here
05:20 - everything of this file right hash
05:23 - Define now hash defined this means what
05:26 - in a source file suppose we have used Pi
05:29 - in
05:30 - program so it will replace the spy with
05:36 - 3.14 everywhere in the program suppose
05:39 - we have in a program we have used like
05:42 - uh the you are finding area of a circle
05:46 - so that is I think Pi R square right so
05:49 - this Pi we have written Pi into R into R
05:53 - right so this Pi would be replaced with
05:56 - 3.14 before compilation process this is
06:00 - what pre-processor is going to do this
06:02 - thing this is you can say macro
06:04 - substitution so the Spy would be replac
06:06 - with 3.14 and the compiler will see 3.14
06:09 - not Pi here right and whatever we have
06:12 - written extra lines those would be added
06:15 - in this program so this is what you can
06:17 - say expanded source
06:19 - code expanded means this single
06:23 - line have been
06:25 - expanded with a complete file this also
06:29 - expanded the complete file more lines we
06:31 - have right so this is expanded source
06:33 - code or you can say intermediate source
06:35 - code now this file would be stored with
06:37 - first do
06:39 - I and now compiler will see this file
06:42 - not this file compiler will compile
06:45 - process this file so in this file now we
06:48 - don't have any line started with
06:52 - hash this has been resolved by the
06:55 - pre-processor right so just a program
07:00 - it is you that's why I was saying it is
07:02 - a text substitution tool so at the place
07:05 - of this line it is going to substitute
07:07 - the complete file whatever there in this
07:10 - SDI it is going to
07:13 - substitute this file this line with the
07:15 - complete file so this is just a
07:17 - substitution tool not a part of compiler
07:20 - it's just a step in compilation process
07:23 - right now if you want to know more about
07:26 - the execution of a c program what now
07:28 - after that compilation obj file would be
07:30 - created then assembler will comes into
07:32 - action then Linker and then know we'll
07:35 - get the output so that we have discussed
07:37 - the complete process I have discussed in
07:39 - one video previous video the link of
07:42 - that video I'll put in the this ey
07:43 - button so you can go and check out the
07:45 - complete execution the main Moto of this
07:47 - video is just to tell you what is this
07:49 - pre-processor right and what is the
07:51 - function of this preprocessor I hope now
07:53 - you got this this thing right has
07:56 - different different pre-processor
07:58 - directive are there like one is Hash
08:00 - include one is Hash defined one is Hash
08:03 - if is also there hash else is also there
08:07 - hash and Def is also there it is to
08:10 - define a macro it is to undefine that
08:12 - macro then hash uh LF is also there hash
08:17 - pragma is also there it is used to give
08:21 - some special directives some special
08:23 - commands right so these things we will
08:26 - discuss in a separate video now hash
08:28 - include I hope now you got hash include
08:30 - is to include a file right in this we'll
08:34 - talk about this hash include so see hash
08:37 - include also we can use in two different
08:39 - ways one way is this right second way
08:44 - is we are including a
08:47 - standard directory here right second way
08:50 - is we can also include a separate file
08:53 - this example I
08:54 - think by looking at this you will
08:57 - remember here you can write other file
08:59 - name suppose file name I'm writing
09:01 - support do c right has include not
09:05 - angular bracket just double cot and
09:07 - support do c so this we have discussed
09:09 - when we discussing external storage
09:11 - class so we are including a separate
09:13 - file so in this file also we are having
09:15 - this is a file support. C so in this
09:18 - also we have some code right this is in
09:21 - local directory so just use if this file
09:24 - you want to access if you want the
09:26 - content of this file if you want to
09:27 - reuse in another file right
09:29 - then just write down in that program
09:32 - hash include and name of that file in
09:33 - double codes so it will get this file
09:37 - from the local directory right and it
09:40 - will include this content in the source
09:43 - file suppose in first do c only I'm also
09:47 - writing this line so content of this
09:49 - file also it will include here in this
09:52 - source file expanded file right or here
09:57 - you can just find out you can just write
10:00 - down the complete path also where this
10:02 - file is spe specifically like the folder
10:05 - name and everything the complete path if
10:07 - you give this thing it will just search
10:09 - at a special no particular place like in
10:11 - the local directory only where this this
10:14 - first do c program is being saved in
10:18 - that directly only it will search for
10:20 - this if this file is at other place you
10:22 - can just provide here the complete path
10:24 - that is also fine but you cannot write
10:26 - this thing
10:30 - if local file you want to include not
10:32 - the standard file then you will use
10:34 - double codes so hash include just to
10:37 - include a file two ways we can use this
10:40 - hash include thing right so I hope now
10:43 - you got what is a pre-processor and when
10:45 - the functioning of this pre-processor
10:46 - comes like before the compilation
10:49 - process uh it's just a part of
10:51 - compilation process we will compile only
10:53 - but before that this hash will you know
10:57 - Force the compiler to do for first of
10:59 - all pre-process pre-processing so that
11:01 - pre-processor program will do that thing
11:04 - after that the function of compiler will
11:06 - come right so I guess you you are clear
11:09 - about this hash include also in how many
11:11 - ways we can use this pre-processor
11:13 - directive hash include so uh another
11:16 - important thing is how to use macros
11:19 - hash Define how to undefine and Define
11:21 - macros so that thing we'll discuss in
11:23 - next video with the help of a particular
11:25 - program example right so the assignment
11:28 - for you is you have to write down a
11:30 - program in which you are using this kind
11:31 - of thing this type of hash include a
11:33 - separate file not these file this
11:36 - obviously we include this also but we
11:38 - are including this also so you have to
11:40 - write down that program right you can
11:42 - take help from the previous video that
11:44 - we have discussed like external stories
11:46 - class so you can take help from that
11:47 - video right now I'll see you in the next
11:50 - video till then bye-bye take care

Cleaned transcript:

so a small topic is left in C programming that is preprocessor see in every program we use this symbol hash so this is preprocessor directly now what is the meaning of this symbol what is this what is preprocessor the function of this thing everything we'll discuss in this video the meaning of this hash we use hash include use hash Define no hash Define like macro hash include a header file we include so what is the actual meaning of this thing right that thing every single deta detail about preprocessor we are going to discuss in this video what is this process when this preprocessing would be done at which Step of execution of C program when you execute a c program at which stage preprocessing is to be done so with the help of a program also I'll show you everything about this thing we'll discuss in this video now let's see what is a preprocessor see first thing it is a program preprocessor is a program and it is not a part of compiler right not a part of compiler but it is just a step in compilation process see first thing what we do we have a program suppose first do c then first thing what you do you compile that program maybe you think you you will compile that program but this preprocessing the function of this preprocessor program comes before this compiler before this before this compilation process but it is not a separate thing whenever you click on compile while the compilation process will going on but before that one more process will be going on that is preprocessing which would be done by the preprocessor this is a program so it is just a you can say a step in compilation process it is not a part of compiler no it is just a step in the compilation process right preprocessor is just a programmer you can say it's a text substitution tool now what does this mean what it will substitute what text what is the meaning of this thing what is the function of this preprocessor that I I'll discuss so suppose we have written a program like anything and we have saved it first dot C now in this program obviously we use some header file like hash include stdio.h maybe hash include uh you can say string do some special thing a special you know standard Library so this hash is what first of all this is known as preprocessor directive it will give direction to this preprocessor program so all the preprocessor commands begins with hash this is a preprocessor command this is a preprocessor command and the compiler is not able to understand these lines which are beginning with hash these line would be interpreted would be understood by this preprocessor right compiler is not going to understand these lines so compiler is not going to understand so before compilation process obviously the program which is preprocessor which would be done which would uh you can you can say comes in action now what this program will do whatever the lines which are beginning with this hash these are preprocessor you can say commands right this is preprocessor directive it will give direction to this preprocessor like what we it has to do hash include as one preprocessor directive hash Define is also there like hash Define this is you can say macro hash Define we generally use like we can say like we can use Pi 3.14 right so this is macro this is just a character sequence right the meaning of everything we'll discuss one by one don't worry so these are preprocessor commands so these line would be first of all understood by this preprocessor and what this preprocessor now will do see this is in some standard Library system Library what is defined in this stdi stdi do some standard functions like print F scanf and all right here also string functions are defined right that's why we are including hash include means we are including a separate file in our program right so what does this preprocessor will do this will expand the source code now expand means what it will EXP expend this line now what does this this line means now the preprocessor will do what it will get this stdi do content the file and it will include this file into our source file right so one separate file would be there like if this is our stdi stdi do here we have some content defin the Declaration or you can say definition of those standard functions so this file this content would be included here again one more line so this is again a file suppose string do H here also we have those definition of those uh string functions standard string function so that also would be included here everything of this file right hash Define now hash defined this means what in a source file suppose we have used Pi in program so it will replace the spy with 3.14 everywhere in the program suppose we have in a program we have used like uh the you are finding area of a circle so that is I think Pi R square right so this Pi we have written Pi into R into R right so this Pi would be replaced with 3.14 before compilation process this is what preprocessor is going to do this thing this is you can say macro substitution so the Spy would be replac with 3.14 and the compiler will see 3.14 not Pi here right and whatever we have written extra lines those would be added in this program so this is what you can say expanded source code expanded means this single line have been expanded with a complete file this also expanded the complete file more lines we have right so this is expanded source code or you can say intermediate source code now this file would be stored with first do I and now compiler will see this file not this file compiler will compile process this file so in this file now we don't have any line started with hash this has been resolved by the preprocessor right so just a program it is you that's why I was saying it is a text substitution tool so at the place of this line it is going to substitute the complete file whatever there in this SDI it is going to substitute this file this line with the complete file so this is just a substitution tool not a part of compiler it's just a step in compilation process right now if you want to know more about the execution of a c program what now after that compilation obj file would be created then assembler will comes into action then Linker and then know we'll get the output so that we have discussed the complete process I have discussed in one video previous video the link of that video I'll put in the this ey button so you can go and check out the complete execution the main Moto of this video is just to tell you what is this preprocessor right and what is the function of this preprocessor I hope now you got this this thing right has different different preprocessor directive are there like one is Hash include one is Hash defined one is Hash if is also there hash else is also there hash and Def is also there it is to define a macro it is to undefine that macro then hash uh LF is also there hash pragma is also there it is used to give some special directives some special commands right so these things we will discuss in a separate video now hash include I hope now you got hash include is to include a file right in this we'll talk about this hash include so see hash include also we can use in two different ways one way is this right second way is we are including a standard directory here right second way is we can also include a separate file this example I think by looking at this you will remember here you can write other file name suppose file name I'm writing support do c right has include not angular bracket just double cot and support do c so this we have discussed when we discussing external storage class so we are including a separate file so in this file also we are having this is a file support. C so in this also we have some code right this is in local directory so just use if this file you want to access if you want the content of this file if you want to reuse in another file right then just write down in that program hash include and name of that file in double codes so it will get this file from the local directory right and it will include this content in the source file suppose in first do c only I'm also writing this line so content of this file also it will include here in this source file expanded file right or here you can just find out you can just write down the complete path also where this file is spe specifically like the folder name and everything the complete path if you give this thing it will just search at a special no particular place like in the local directory only where this this first do c program is being saved in that directly only it will search for this if this file is at other place you can just provide here the complete path that is also fine but you cannot write this thing if local file you want to include not the standard file then you will use double codes so hash include just to include a file two ways we can use this hash include thing right so I hope now you got what is a preprocessor and when the functioning of this preprocessor comes like before the compilation process uh it's just a part of compilation process we will compile only but before that this hash will you know Force the compiler to do for first of all preprocess preprocessing so that preprocessor program will do that thing after that the function of compiler will come right so I guess you you are clear about this hash include also in how many ways we can use this preprocessor directive hash include so uh another important thing is how to use macros hash Define how to undefine and Define macros so that thing we'll discuss in next video with the help of a particular program example right so the assignment for you is you have to write down a program in which you are using this kind of thing this type of hash include a separate file not these file this obviously we include this also but we are including this also so you have to write down that program right you can take help from the previous video that we have discussed like external stories class so you can take help from that video right now I'll see you in the next video till then byebye take care
