With timestamps:

00:00 - so in the series of learning c plus
00:01 - programming language in the previous
00:02 - video we have discussed input and
00:04 - outputs in c plus plus basically seen
00:06 - and see out objects how to use scene and
00:07 - say out to take input to print output on
00:09 - the screen with the help of a program
00:11 - right now the next con concept is
00:13 - operators in c plus operators in c also
00:16 - there that also we have discussed right
00:17 - when we're discussing c programming
00:19 - language now we'll see all the type of
00:20 - operators in c plus plus right
00:23 - with the help of proper program for each
00:25 - operators plus operator precedence
00:27 - operator associativity everything we are
00:28 - going to discuss right one by one right
00:32 - now first of all what is an operator see
00:35 - it it is just a symbol
00:37 - which is used to tell the compiler
00:40 - know which
00:42 - type of operation you know specific
00:44 - operation it whether it's logical or
00:46 - mathematical operation is to be
00:47 - performed right it's just a symbol to
00:50 - tell the compiler right
00:52 - which specific mathematical or logical
00:54 - operation is to be performed on the
00:56 - operands right the things or the data on
00:59 - which the operation to be performed is
01:00 - known as operands right see
01:04 - if i write something like this 5 plus
01:06 - 3 means plus is what here
01:09 - addition means operator
01:11 - just a symbol
01:13 - which tells the compiler
01:15 - what
01:17 - edition to be performed on the data
01:20 - five and three five and three is what
01:23 - operands so these are operands this is
01:25 - operator
01:27 - right now basically three categories of
01:29 - operators are there first is what unary
01:32 - operator then binary operator and
01:34 - ternary operator
01:36 - unary operator means
01:38 - they need only one operand
01:42 - binary means they work upon two operands
01:45 - and ternary means
01:47 - three operands
01:49 - right
01:51 - like
01:52 - just for example you can say this
01:55 - increment and decrement operators
01:57 - although we'll discuss one by one
01:58 - everything so they
02:00 - need only one operand like plus plus
02:03 - a
02:04 - a is what
02:05 - a single operand so they work on single
02:07 - operand binary means like this plus this
02:09 - plus needs two operand one two so this
02:13 - is binary ternary means only one
02:14 - operator is there which comes under this
02:16 - category that is conditional operator
02:18 - which requires three operand
02:20 - this also will discuss right now
02:22 - let me see let me just show you the
02:25 - types of operators five basically five
02:28 - types of operators are there
02:30 - arithmetical relational logical bitwise
02:34 - assignment and
02:36 - then
02:37 - we have miscellaneous operators right
02:40 - so these basically five types of
02:42 - operators are there in c plus plus
02:43 - arithmetic relational logical bitwise
02:45 - assignment
02:46 - other some operators come into
02:48 - miscellaneous category those also will
02:49 - discuss first thing we'll discuss
02:51 - arithmetic operators so i guess these
02:54 - are very simple arithmetic operators are
02:56 - plus minus
02:58 - uh into multiplication divide
03:00 - modulo
03:02 - plus two more type of operators comes
03:04 - into arithmetic that is uh increment and
03:08 - decrement operator so plus plus minus
03:11 - minus plus plus is what increment
03:12 - operator minus minus is what decrement
03:14 - operator so these operators are binary
03:17 - and these two operators are
03:19 - unary so these are arithmetic operators
03:22 - i guess no need to tell you the meaning
03:24 - of plus minus into
03:26 - divide and all may be modulo in modular
03:28 - you will be confused
03:30 - so let me just take one example like if
03:33 - you write suppose i am taking two
03:35 - variable a is equal to 10
03:38 - b is equal to
03:39 - 3
03:41 - and i'm just printing c out
03:44 - a mode b equal to
03:47 - right and i'm printing a
03:49 - mode
03:50 - b
03:52 - that's it
03:53 - so
03:54 - 10
03:55 - modulo 3
03:57 - what output you will get here the output
04:00 - of this a mode 3 is what it will give
04:02 - you remainder
04:04 - so when you divide 10 by 3 the remainder
04:07 - would be 1
04:10 - so it will give 1
04:12 - and divide the vision operator will give
04:15 - three
04:16 - three threes are nine
04:18 - so i guess uh many students were
04:20 - confused in this modulo and this divide
04:23 - the white will give
04:24 - three in this case
04:26 - and this will give remainder just you
04:29 - have to you know uh
04:31 - remember this thing it will give
04:32 - remainder so 10
04:34 - when you divide 10 by 3 the remainder
04:36 - would be 1. if you divide 10 by 5
04:39 - suppose b is 5
04:40 - the remainder would be 0 so now it will
04:43 - give 0 right now these two operators are
04:46 - little bit tricky so let me just explain
04:48 - these two operators
04:50 - now increment decrement these are also
04:52 - of two types
04:54 - three increment and
04:59 - post increment
05:00 - now pre-decrement means what
05:03 - ah let me just one take one example like
05:06 - i am taking in
05:08 - a is equal to 10
05:11 - right so if you write
05:14 - now pre-increment means
05:16 - plus plus
05:18 - a
05:19 - pre-increment plus plus a pre behave
05:22 - right before post increment means a plus
05:26 - plus
05:28 - post means after
05:30 - so the symbol this operator would be
05:32 - after this operand pre decrement means
05:35 - minus minus a post decrement means a
05:38 - minus minus
05:40 - right
05:41 - so the meaning let me just tell you see
05:43 - suppose here we are taking one more
05:46 - variable b
05:48 - and b equal to
05:50 - plus plus a and we are just printing c
05:54 - out a and
05:57 - b
05:58 - with n
05:59 - i'm not writing the complete program
06:01 - i'll show you these thing with the help
06:02 - of program also on my laptop just
06:05 - just the logic main logic right so now
06:08 - what would be the value of a what would
06:09 - be the value of b what value would be
06:11 - printed c this is what first of all
06:13 - pre-increment
06:16 - so pre-increment means
06:18 - first it will take the value plus plus a
06:21 - means 10
06:23 - first the value would be incremented
06:25 - means 10 becomes 11.
06:27 - it means it will add one
06:30 - to the
06:32 - the syntax is what this one like plus
06:34 - plus
06:35 - expression here you can write so it will
06:38 - add 1 to the expression right
06:41 - and decrement means it will subtract 1
06:43 - from the expression like minus minus
06:47 - expression
06:48 - this this is for pre for post you can
06:51 - write
06:53 - expression
06:54 - ah
06:55 - plus plus and
06:56 - expression minus minus
06:59 - that's it
07:00 - now this expression this expression or
07:02 - the operand may be
07:04 - any
07:05 - arithmetic any of the arithmetic type or
07:08 - a pointer you can use pointer also
07:12 - right we can also use these kind of
07:14 - operator with a pointer with properly
07:16 - defined pointer some pointer is pointing
07:18 - to any object then you can increment
07:21 - that pointer you can decrement that
07:23 - pointer right that also we will
07:25 - discussing when we will discuss pointers
07:27 - right
07:29 - now see
07:30 - so it will add
07:32 - it will take the value 10 it will add
07:34 - first the value 1 to the value that is
07:36 - 11
07:37 - and then the modified value it will
07:39 - return so now
07:41 - it will return 11 so in b
07:43 - 11 would be stored and a also becomes 11
07:46 - so whenever the program would run see
07:49 - whenever in main function control will
07:50 - come like before the sphere main
07:52 - function so
07:53 - in memory we have a variable in memory
07:56 - we have b variable here we have any
07:58 - garbage value now b is equal to plus
08:00 - plus a now
08:02 - plus plus a means it becomes 11
08:05 - and after that this 11 value would be
08:09 - assigned to this b
08:10 - now a and b both will 11 11 so it will
08:13 - print 11 and 11
08:15 - right
08:15 - if same i write here a plus plus this is
08:19 - what post increment now
08:22 - listen to this carefully post means
08:25 - first the value is 10
08:28 - in b now we have nothing
08:31 - so
08:32 - post
08:33 - increment of decrement operators works
08:35 - how
08:36 - it will take this object like a 10
08:38 - create a copy of this object
08:40 - right in that also we have 10
08:43 - right
08:44 - now first it will return
08:47 - the value original value 10 it will
08:50 - return so the 10 would be
08:54 - assigned to this b first
08:56 - in b now we have
08:58 - 10
09:00 - and after that the value would be
09:01 - incremented now 10 becomes 11
09:07 - at this point of time it will print a is
09:09 - 11 and b is 10
09:11 - this is the main difference
09:13 - let me just discuss it with the help of
09:15 - these operators decrement a minus minus
09:19 - okay now what it will print see
09:21 - this is post decrement
09:23 - post decrement means the original value
09:26 - this expression
09:28 - right
09:29 - this will return the original value of a
09:32 - and after that the value would be
09:33 - decremented so original value of a is
09:35 - what 10 so it will return 10 so now 10
09:38 - would be assigned to this b and now the
09:40 - value would be decremented now
09:43 - this this was 10 10 becomes
09:46 - 9 so it will print 9 and 10.
09:50 - right
09:50 - if i take minus minus a
09:54 - it is pre-decrement pre-decrement means
09:57 - first
09:58 - the value would be updated updated means
10:01 - decremented by 1
10:03 - so at first we have
10:05 - 10 in b we have nothing so at first the
10:07 - value would be modified decremented by 1
10:10 - that has become 9 and that 9 value would
10:13 - be the modified valued the modified
10:15 - value would be returned would be used so
10:18 - now it will return the modified value
10:20 - modified value is 9
10:23 - 9 so 9 would be assigned to this v9 so
10:26 - now it will print 9 and 9.
10:28 - i hope now difference between increment
10:30 - decrement pre and post
10:33 - is clear to you guys right we will see
10:35 - complex example also
10:38 - in the same expression like we are using
10:40 - more increment operator more decrement
10:42 - operator in the same expression only
10:44 - right
10:44 - then what value would be printed but
10:47 - first of all we will you know discuss
10:48 - the precedence
10:50 - right then only you will get those
10:52 - complex type of questions so those also
10:54 - will discuss this video just to make you
10:56 - understand the basic the meaning of
10:58 - these operators right so arithmetic
11:00 - operators i think clear to you now next
11:03 - is relational operator see relational
11:05 - means it will show some relation between
11:08 - the
11:09 - operands you can see
11:11 - these are also binary operators so
11:13 - relational operators are something like
11:16 - this
11:17 - double equal to not equal to less than
11:20 - greater than less than equal to greater
11:22 - than equal to so this is what double
11:25 - equal to means to check the equality
11:26 - suppose let us take one example i am
11:28 - taking int a
11:30 - is equal to 10 and b is equal to 3
11:33 - right
11:34 - and if we check a equal to equal to b
11:38 - the result of these operators will give
11:40 - you true or false
11:42 - right is a equal to equal to b no so it
11:45 - will give force that is 0
11:49 - now a not equal to b
11:52 - a not equal to b ace and b is 3 yes it
11:54 - is true so it will give true a less than
11:57 - b
11:59 - is it true no
12:01 - false
12:02 - a greater than b
12:04 - yes that will give true the result would
12:07 - be true that is one zero this is one now
12:09 - a less than equal to b
12:12 - it is less than or equal to it is is it
12:15 - less than no or equal to no so it will
12:18 - give you false
12:19 - that is zero and a greater than equal to
12:21 - b yes greater than b it is it will give
12:24 - you true so these are basically to show
12:26 - the relation between the operands or
12:28 - here you can write down any expression
12:30 - also right rather than just a and b like
12:33 - i am writing a plus 3
12:36 - equal to equal to
12:38 - b
12:39 - plus 10
12:42 - what it will give you that you have to
12:44 - tell me in common comment section so
12:46 - this is what expression right
12:49 - so on the left side also expression on
12:50 - the right side also some expression you
12:52 - can write
12:53 - right
12:54 - but see
12:55 - this kind of thing you cannot
12:57 - ah use with the increment and decrement
13:00 - operators the operand
13:02 - right operand can be of any arithmetic
13:04 - type it can be you can say int
13:07 - it can be float right or it can be
13:09 - pointer but you cannot use any this kind
13:12 - of expression or any constant like i am
13:14 - writing plus plus 5
13:17 - this will give you error this value this
13:19 - value would be
13:21 - modifiable value this cannot be a
13:23 - constant value
13:25 - right this can be a variable
13:28 - or a pointer
13:30 - i hope you got it here also we cannot
13:32 - write like plus plus a plus 3
13:35 - this will also give
13:37 - error or let me just
13:39 - give you this assignment also you have
13:41 - to try this thing also what it will give
13:43 - and what it will give you have to tell
13:44 - me in comment section
13:46 - right
13:46 - maybe it will not give error
13:48 - let we will just try this also so i hope
13:51 - these operators are clear to you suppose
13:54 - i am writing a is also 3
13:56 - and b is also 3
13:58 - then
13:59 - this
14:00 - in this case
14:02 - what would be the output of these all
14:04 - these operators
14:06 - this also you have to tell me in comment
14:08 - section this is for your assignment a
14:10 - also three b also three in that case the
14:12 - output of these operators right
14:15 - then this also you have to tell and this
14:18 - also you have to try if you don't want
14:19 - to tell you just at least you try
14:22 - right with the help of program so now
14:23 - let me just show you programs on the
14:25 - both these operators arithmetic and
14:27 - relational operator we have this file
14:29 - operator stored cpp i have already
14:30 - created this file because
14:32 - we don't need to write any you know
14:34 - complex code just simple code is there
14:36 - so first we'll discuss arithmetic
14:38 - operators let me just comment out all
14:40 - the other operators here all right see
14:46 - i hope you can see this
14:48 - just we are
14:50 - the head of header iostream then using
14:52 - namespacest then main function and here
14:54 - we are discussing arithmetic operators
14:56 - first i think these are very simple i am
14:58 - just discussing addition subtraction
15:00 - multiplication division and modulo x is
15:02 - 10 y is equal to 3
15:04 - right
15:05 - so now
15:06 - this just you have to write an x plus y
15:08 - minus y into divide or modulo and that's
15:10 - it candle i hope you go this is a
15:12 - manipulator that we'll discuss in a
15:14 - separate video also but the meaning of
15:16 - this is
15:17 - just to add a separate line right the
15:19 - cursor would be after printing this
15:20 - edition whatever then double quote that
15:22 - would be as it is printed on the screen
15:24 - and after that we have endl x plus y
15:26 - would be printed end and means the
15:28 - cursor would be in next line so next
15:30 - output would be started from the next
15:32 - line only so let me just save it and run
15:35 - this see
15:38 - x 10 y 3 so addition would be 13
15:41 - subtraction would be 7 multiplication 30
15:43 - division would be 3 and modulo is 1
15:45 - because it is remainder right
15:47 - so i hope this is clear to you now
15:50 - let's just discuss increment and
15:51 - decrement operator and let me just
15:53 - comment this out
15:55 - right
15:56 - in single line also you can write down
15:58 - these all these operators
16:01 - but that you can try out at your own
16:03 - right now this is increment and
16:05 - decrement operator see i am taking x 10
16:08 - simply y
16:09 - now y is equal to plus plus x
16:12 - and i am printing x and y then i am
16:14 - printing y is equal to x plus plus then
16:16 - just printing x and y
16:18 - right see in between also i am writing n
16:21 - its not like that n l would be always be
16:23 - at the end of the c out statement no in
16:25 - between also you can
16:26 - just whenever you want to
16:29 - i know add a new line
16:31 - just use this manipulator and so after
16:33 - printing x value i want then y values
16:35 - should be printed in the next line so i
16:37 - am writing handle
16:39 - just these operators insertion operators
16:42 - and end right
16:43 - now
16:44 - let me just run this and show you what
16:46 - output you will get see first values are
16:48 - 11 11 right because first is
16:52 - plus plus x that is pre-increment so
16:54 - value would be incremented first and the
16:56 - modified value would be
16:58 - ah returned
16:59 - so that would be stored in y and next is
17:02 - what x plus plus that is post
17:05 - so
17:06 - x value would be incremented that is 12
17:08 - and y value would be
17:11 - the previous value the original value of
17:13 - x original value of x is
17:15 - 11
17:17 - right so that is 11 11 why 11
17:21 - because previously also we have used
17:23 - plus plus x so that value
17:26 - previously it was 10 it's starting then
17:27 - it becomes 11 and after that it becomes
17:30 - 12 right so i hope now this output you
17:32 - will get so original value is 11 for
17:34 - this 11 would be stored in y and then x
17:37 - plus plus means 11 plus plus means 12 12
17:39 - would be printed right
17:40 - so i guess for minus minus you can try
17:42 - out at your own or if you want me to try
17:45 - out just
17:47 - we do minus minus x and
17:51 - x minus minus
17:52 - right
17:53 - let me just run this and show you the
17:55 - output
17:58 - see
17:58 - 9 9 first statement would give would
18:01 - give 99 x is 10
18:03 - pre decrement
18:05 - so first the value would be decremented
18:07 - and then decremented value would be
18:09 - returned so decremented value would be
18:10 - assigned to y that is 99
18:13 - now the value becomes 9
18:15 - the modified value of x is 9 now again
18:17 - we are writing x minus minus so now the
18:20 - value of x is 9
18:21 - this is post so the original value of x
18:23 - is 9 so 9 would be first of all return
18:26 - that is stored in y and then becomes 9
18:28 - minus minus that is 8.
18:30 - so x is 8 and y is
18:32 - 9. i hope you got this concept plus plus
18:34 - incremental decrement operators right
18:37 - now if if you write here see if suppose
18:40 - i am writing here
18:44 - rather than this plus plus
18:46 - i am writing 10
18:48 - right
18:49 - see it is showing a red line expression
18:52 - must be a modifiable l value right
18:55 - 10 is not a constant so we cannot use a
18:57 - constraint here right see l value
19:00 - required as decrement operating
19:02 - decrement operand so operand should be
19:05 - modifiable l value so constant we cannot
19:07 - use if i want to use expression like i
19:10 - am writing here
19:12 - x plus
19:13 - 2
19:16 - and this thing so still it is showing
19:18 - red line
19:19 - expression we cannot use
19:21 - let me just run this and show you same l
19:24 - value required as decrement operand so
19:26 - this operand should be
19:28 - you can say modifiable that can be
19:31 - modified modifiable l value right
19:34 - so that's it expression you cannot use
19:36 - operator you can use here if i take
19:38 - something like this like after writing
19:41 - float
19:42 - 10.678
19:45 - and here i am writing minus minus x
19:50 - now let me just run this and show you
19:53 - it's same
19:55 - nine point six seven eight nine eight
19:56 - point six seven eight and
19:58 - nine right
19:59 - i hope you got this thing
20:02 - because see nine point six seven eight
20:05 - because of x and y we are taking int
20:08 - that is why it is just taking into value
20:10 - 9 only so
20:12 - you can take
20:14 - float here
20:16 - then run this and now it will give both
20:19 - x and y float values right
20:22 - so now any arithmetic type of value
20:25 - the operand can be of any arithmetic
20:27 - type of value or any pointer
20:30 - so
20:31 - this is for
20:33 - these operators let me just comment this
20:35 - out and let me just show you
20:37 - now relational operators so these are
20:39 - now relational operators right
20:42 - so
20:44 - see
20:47 - you have to put this x less than y into
20:49 - these brackets otherwise
20:51 - it will give error right these operators
20:54 - a relational operator you cannot likely
20:56 - use you have to put
20:57 - the
20:58 - these brackets
21:00 - so let me just run this less than y
21:01 - greater than y all these operators i
21:03 - have written here and the output is see
21:06 - x less than y one that is true
21:09 - three and six the value is three and six
21:10 - so you can see x greater than y no x
21:13 - less than equal to y yes one x greater
21:15 - than equal to y no x equal to equal to y
21:18 - equal to no not equal to true that is
21:21 - one so the output of these relation
21:23 - operator would be true or false these
21:25 - are going to show some uh you know show
21:27 - relations among the operands right now
21:30 - uh
21:31 - here also you can x plus 1 or y plus 1
21:34 - these kind of things you can write and
21:35 - you can try out at your own what kind of
21:38 - thing they'll give
21:39 - see if i'm writing here
21:43 - x plus 1
21:47 - and y
21:49 - so for the first
21:52 - expression it is giving poles
21:55 - 0
21:56 - x plus 1 becomes 4
21:59 - y minus 5 becomes 6 minus 5 that is 1 so
22:03 - 4 less than 1
22:05 - no 4 is greater than 1 so it is giving 0
22:08 - so
22:09 - with these operands can be
22:11 - any expression in this kind of thing but
22:13 - in those increment and decrement
22:15 - operator you cannot ah take those
22:17 - operand as expression
22:19 - right
22:19 - so i guess these two operators are clear
22:21 - to you guys if you have any doubt you
22:23 - can ask me in comment section right now
22:25 - in the next video we'll discuss logical
22:26 - and bitwise operators so now i'll see in
22:28 - the next video till then bye take care

Cleaned transcript:

so in the series of learning c plus programming language in the previous video we have discussed input and outputs in c plus plus basically seen and see out objects how to use scene and say out to take input to print output on the screen with the help of a program right now the next con concept is operators in c plus operators in c also there that also we have discussed right when we're discussing c programming language now we'll see all the type of operators in c plus plus right with the help of proper program for each operators plus operator precedence operator associativity everything we are going to discuss right one by one right now first of all what is an operator see it it is just a symbol which is used to tell the compiler know which type of operation you know specific operation it whether it's logical or mathematical operation is to be performed right it's just a symbol to tell the compiler right which specific mathematical or logical operation is to be performed on the operands right the things or the data on which the operation to be performed is known as operands right see if i write something like this 5 plus 3 means plus is what here addition means operator just a symbol which tells the compiler what edition to be performed on the data five and three five and three is what operands so these are operands this is operator right now basically three categories of operators are there first is what unary operator then binary operator and ternary operator unary operator means they need only one operand binary means they work upon two operands and ternary means three operands right like just for example you can say this increment and decrement operators although we'll discuss one by one everything so they need only one operand like plus plus a a is what a single operand so they work on single operand binary means like this plus this plus needs two operand one two so this is binary ternary means only one operator is there which comes under this category that is conditional operator which requires three operand this also will discuss right now let me see let me just show you the types of operators five basically five types of operators are there arithmetical relational logical bitwise assignment and then we have miscellaneous operators right so these basically five types of operators are there in c plus plus arithmetic relational logical bitwise assignment other some operators come into miscellaneous category those also will discuss first thing we'll discuss arithmetic operators so i guess these are very simple arithmetic operators are plus minus uh into multiplication divide modulo plus two more type of operators comes into arithmetic that is uh increment and decrement operator so plus plus minus minus plus plus is what increment operator minus minus is what decrement operator so these operators are binary and these two operators are unary so these are arithmetic operators i guess no need to tell you the meaning of plus minus into divide and all may be modulo in modular you will be confused so let me just take one example like if you write suppose i am taking two variable a is equal to 10 b is equal to 3 and i'm just printing c out a mode b equal to right and i'm printing a mode b that's it so 10 modulo 3 what output you will get here the output of this a mode 3 is what it will give you remainder so when you divide 10 by 3 the remainder would be 1 so it will give 1 and divide the vision operator will give three three threes are nine so i guess uh many students were confused in this modulo and this divide the white will give three in this case and this will give remainder just you have to you know uh remember this thing it will give remainder so 10 when you divide 10 by 3 the remainder would be 1. if you divide 10 by 5 suppose b is 5 the remainder would be 0 so now it will give 0 right now these two operators are little bit tricky so let me just explain these two operators now increment decrement these are also of two types three increment and post increment now predecrement means what ah let me just one take one example like i am taking in a is equal to 10 right so if you write now preincrement means plus plus a preincrement plus plus a pre behave right before post increment means a plus plus post means after so the symbol this operator would be after this operand pre decrement means minus minus a post decrement means a minus minus right so the meaning let me just tell you see suppose here we are taking one more variable b and b equal to plus plus a and we are just printing c out a and b with n i'm not writing the complete program i'll show you these thing with the help of program also on my laptop just just the logic main logic right so now what would be the value of a what would be the value of b what value would be printed c this is what first of all preincrement so preincrement means first it will take the value plus plus a means 10 first the value would be incremented means 10 becomes 11. it means it will add one to the the syntax is what this one like plus plus expression here you can write so it will add 1 to the expression right and decrement means it will subtract 1 from the expression like minus minus expression this this is for pre for post you can write expression ah plus plus and expression minus minus that's it now this expression this expression or the operand may be any arithmetic any of the arithmetic type or a pointer you can use pointer also right we can also use these kind of operator with a pointer with properly defined pointer some pointer is pointing to any object then you can increment that pointer you can decrement that pointer right that also we will discussing when we will discuss pointers right now see so it will add it will take the value 10 it will add first the value 1 to the value that is 11 and then the modified value it will return so now it will return 11 so in b 11 would be stored and a also becomes 11 so whenever the program would run see whenever in main function control will come like before the sphere main function so in memory we have a variable in memory we have b variable here we have any garbage value now b is equal to plus plus a now plus plus a means it becomes 11 and after that this 11 value would be assigned to this b now a and b both will 11 11 so it will print 11 and 11 right if same i write here a plus plus this is what post increment now listen to this carefully post means first the value is 10 in b now we have nothing so post increment of decrement operators works how it will take this object like a 10 create a copy of this object right in that also we have 10 right now first it will return the value original value 10 it will return so the 10 would be assigned to this b first in b now we have 10 and after that the value would be incremented now 10 becomes 11 at this point of time it will print a is 11 and b is 10 this is the main difference let me just discuss it with the help of these operators decrement a minus minus okay now what it will print see this is post decrement post decrement means the original value this expression right this will return the original value of a and after that the value would be decremented so original value of a is what 10 so it will return 10 so now 10 would be assigned to this b and now the value would be decremented now this this was 10 10 becomes 9 so it will print 9 and 10. right if i take minus minus a it is predecrement predecrement means first the value would be updated updated means decremented by 1 so at first we have 10 in b we have nothing so at first the value would be modified decremented by 1 that has become 9 and that 9 value would be the modified valued the modified value would be returned would be used so now it will return the modified value modified value is 9 9 so 9 would be assigned to this v9 so now it will print 9 and 9. i hope now difference between increment decrement pre and post is clear to you guys right we will see complex example also in the same expression like we are using more increment operator more decrement operator in the same expression only right then what value would be printed but first of all we will you know discuss the precedence right then only you will get those complex type of questions so those also will discuss this video just to make you understand the basic the meaning of these operators right so arithmetic operators i think clear to you now next is relational operator see relational means it will show some relation between the operands you can see these are also binary operators so relational operators are something like this double equal to not equal to less than greater than less than equal to greater than equal to so this is what double equal to means to check the equality suppose let us take one example i am taking int a is equal to 10 and b is equal to 3 right and if we check a equal to equal to b the result of these operators will give you true or false right is a equal to equal to b no so it will give force that is 0 now a not equal to b a not equal to b ace and b is 3 yes it is true so it will give true a less than b is it true no false a greater than b yes that will give true the result would be true that is one zero this is one now a less than equal to b it is less than or equal to it is is it less than no or equal to no so it will give you false that is zero and a greater than equal to b yes greater than b it is it will give you true so these are basically to show the relation between the operands or here you can write down any expression also right rather than just a and b like i am writing a plus 3 equal to equal to b plus 10 what it will give you that you have to tell me in common comment section so this is what expression right so on the left side also expression on the right side also some expression you can write right but see this kind of thing you cannot ah use with the increment and decrement operators the operand right operand can be of any arithmetic type it can be you can say int it can be float right or it can be pointer but you cannot use any this kind of expression or any constant like i am writing plus plus 5 this will give you error this value this value would be modifiable value this cannot be a constant value right this can be a variable or a pointer i hope you got it here also we cannot write like plus plus a plus 3 this will also give error or let me just give you this assignment also you have to try this thing also what it will give and what it will give you have to tell me in comment section right maybe it will not give error let we will just try this also so i hope these operators are clear to you suppose i am writing a is also 3 and b is also 3 then this in this case what would be the output of these all these operators this also you have to tell me in comment section this is for your assignment a also three b also three in that case the output of these operators right then this also you have to tell and this also you have to try if you don't want to tell you just at least you try right with the help of program so now let me just show you programs on the both these operators arithmetic and relational operator we have this file operator stored cpp i have already created this file because we don't need to write any you know complex code just simple code is there so first we'll discuss arithmetic operators let me just comment out all the other operators here all right see i hope you can see this just we are the head of header iostream then using namespacest then main function and here we are discussing arithmetic operators first i think these are very simple i am just discussing addition subtraction multiplication division and modulo x is 10 y is equal to 3 right so now this just you have to write an x plus y minus y into divide or modulo and that's it candle i hope you go this is a manipulator that we'll discuss in a separate video also but the meaning of this is just to add a separate line right the cursor would be after printing this edition whatever then double quote that would be as it is printed on the screen and after that we have endl x plus y would be printed end and means the cursor would be in next line so next output would be started from the next line only so let me just save it and run this see x 10 y 3 so addition would be 13 subtraction would be 7 multiplication 30 division would be 3 and modulo is 1 because it is remainder right so i hope this is clear to you now let's just discuss increment and decrement operator and let me just comment this out right in single line also you can write down these all these operators but that you can try out at your own right now this is increment and decrement operator see i am taking x 10 simply y now y is equal to plus plus x and i am printing x and y then i am printing y is equal to x plus plus then just printing x and y right see in between also i am writing n its not like that n l would be always be at the end of the c out statement no in between also you can just whenever you want to i know add a new line just use this manipulator and so after printing x value i want then y values should be printed in the next line so i am writing handle just these operators insertion operators and end right now let me just run this and show you what output you will get see first values are 11 11 right because first is plus plus x that is preincrement so value would be incremented first and the modified value would be ah returned so that would be stored in y and next is what x plus plus that is post so x value would be incremented that is 12 and y value would be the previous value the original value of x original value of x is 11 right so that is 11 11 why 11 because previously also we have used plus plus x so that value previously it was 10 it's starting then it becomes 11 and after that it becomes 12 right so i hope now this output you will get so original value is 11 for this 11 would be stored in y and then x plus plus means 11 plus plus means 12 12 would be printed right so i guess for minus minus you can try out at your own or if you want me to try out just we do minus minus x and x minus minus right let me just run this and show you the output see 9 9 first statement would give would give 99 x is 10 pre decrement so first the value would be decremented and then decremented value would be returned so decremented value would be assigned to y that is 99 now the value becomes 9 the modified value of x is 9 now again we are writing x minus minus so now the value of x is 9 this is post so the original value of x is 9 so 9 would be first of all return that is stored in y and then becomes 9 minus minus that is 8. so x is 8 and y is 9. i hope you got this concept plus plus incremental decrement operators right now if if you write here see if suppose i am writing here rather than this plus plus i am writing 10 right see it is showing a red line expression must be a modifiable l value right 10 is not a constant so we cannot use a constraint here right see l value required as decrement operating decrement operand so operand should be modifiable l value so constant we cannot use if i want to use expression like i am writing here x plus 2 and this thing so still it is showing red line expression we cannot use let me just run this and show you same l value required as decrement operand so this operand should be you can say modifiable that can be modified modifiable l value right so that's it expression you cannot use operator you can use here if i take something like this like after writing float 10.678 and here i am writing minus minus x now let me just run this and show you it's same nine point six seven eight nine eight point six seven eight and nine right i hope you got this thing because see nine point six seven eight because of x and y we are taking int that is why it is just taking into value 9 only so you can take float here then run this and now it will give both x and y float values right so now any arithmetic type of value the operand can be of any arithmetic type of value or any pointer so this is for these operators let me just comment this out and let me just show you now relational operators so these are now relational operators right so see you have to put this x less than y into these brackets otherwise it will give error right these operators a relational operator you cannot likely use you have to put the these brackets so let me just run this less than y greater than y all these operators i have written here and the output is see x less than y one that is true three and six the value is three and six so you can see x greater than y no x less than equal to y yes one x greater than equal to y no x equal to equal to y equal to no not equal to true that is one so the output of these relation operator would be true or false these are going to show some uh you know show relations among the operands right now uh here also you can x plus 1 or y plus 1 these kind of things you can write and you can try out at your own what kind of thing they'll give see if i'm writing here x plus 1 and y so for the first expression it is giving poles 0 x plus 1 becomes 4 y minus 5 becomes 6 minus 5 that is 1 so 4 less than 1 no 4 is greater than 1 so it is giving 0 so with these operands can be any expression in this kind of thing but in those increment and decrement operator you cannot ah take those operand as expression right so i guess these two operators are clear to you guys if you have any doubt you can ask me in comment section right now in the next video we'll discuss logical and bitwise operators so now i'll see in the next video till then bye take care
