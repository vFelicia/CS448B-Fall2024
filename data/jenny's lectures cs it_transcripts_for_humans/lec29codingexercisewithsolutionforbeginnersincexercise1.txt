With timestamps:

00:00 - so in the series of learning c plus plus
00:02 - programming language we are discussing
00:03 - loops in c plus plus we have discussed
00:05 - uh till now for loop
00:07 - okay everything about for loop we have
00:09 - discussed so let's see a program it's
00:12 - you can say it's a coding exercise for
00:13 - you guys
00:14 - using for loop now you have to write
00:16 - down a program to find out or to
00:19 - calculate sum of
00:21 - four integers
00:22 - from
00:23 - 1 to 15
00:25 - and 1 and 15 both are included means
00:27 - inclusive
00:30 - using for loop you have to write down
00:31 - this program okay now let's pause the
00:34 - video we'll see the solution also in
00:36 - this video explain i'll explain the
00:37 - solution step by step
00:39 - but
00:40 - uh first you try out pause the video and
00:43 - try this out so let's create a new file
00:47 - we can say
00:50 - exercise
00:54 - for loop
00:55 - okay
00:58 - dot cpp
01:01 - first thing is you have to include
01:03 - header io stream
01:06 - then
01:09 - using
01:10 - namespace std
01:14 - and then we'll write down
01:17 - main
01:19 - hint main
01:21 - here we will take two variable into i
01:23 - and sum sum i'm going to initialize it
01:25 - with 0
01:27 - okay why so because if you don't
01:28 - initialize this sum
01:30 - then it will take any garbage value and
01:32 - whenever we will do some of
01:34 - the when you will add in this
01:37 - sum variable then maybe it will give
01:38 - some unexpected results so better to
01:40 - initialize the variables
01:42 - proper initialization
01:44 - now in for loop
01:46 - we have to do we have to iterate the
01:48 - thing this thing from 1 to 15
01:52 - and from 1 to 15 also we will we have to
01:54 - find out code integers only so you have
01:56 - to put extra condition also so first
01:59 - iterator loop from 1
02:01 - condition is less than equal to 15 equal
02:04 - to 15 because it is inclusive
02:06 - and then one by one we are going to
02:08 - increment
02:09 - now check
02:11 - the number is odor even because we have
02:13 - to do some of odd
02:14 - numbers only how to find out
02:17 - if you divide a number by two and the
02:19 - remainder is zero then it would be even
02:20 - number if the remainder is not 0 it
02:23 - means it would be odd number so same you
02:25 - can put how to find out remainder using
02:27 - a operator modulo
02:29 - i hope you know the working of model
02:31 - operator if you don't know then i we
02:33 - have discussed about these operators in
02:35 - the previous lecture so you can check
02:36 - out the playlist
02:38 - so if
02:39 - this number i
02:42 - and
02:43 - mode
02:44 - 2
02:46 - not equal to 0 exclamation mark and
02:48 - equal to this is what not equal to zero
02:52 - if
02:53 - the condition is true this condition is
02:54 - true means the number is ode now do sum
02:57 - so what we will do
02:58 - in sum we will do sum plus
03:02 - i the number
03:06 - you will update the sum
03:07 - as soon as you find out number just add
03:10 - it to the previous sum
03:12 - once you find out whole number again you
03:13 - find out number again add some if the
03:15 - number is even just skip this part
03:19 - and just do i plus plus
03:21 - okay
03:21 - now after
03:23 - this for loop just print
03:26 - sum
03:28 - sum equal to we are going to
03:30 - print
03:31 - in a variable name sum we have
03:34 - so just
03:36 - use that variable to print
03:38 - and successfully
03:39 - the program will be successful then just
03:41 - return 0
03:43 - okay it means program return 0 means
03:45 - successfully terminated the program okay
03:49 - now i hope you got this now let's run
03:52 - this and see
03:55 - see sum is equal to 64. so you can do
03:57 - sum of 4 integer 1 3 5 7
04:01 - 9 11
04:02 - 13 15. these are all integers from 1 to
04:05 - 15 and i just calculate the sum manually
04:08 - you will find out that sum will be 64.
04:10 - i hope you got this logic it's very
04:13 - simple i guess
04:14 - okay
04:15 - so if you don't know
04:17 - this thing the behind the scene what the
04:19 - execution process the step by step
04:21 - then you can continue watching this
04:22 - video if you have got this thing
04:25 - you can just skip the video so in the
04:27 - next part of this video
04:29 - right now you just continue watching
04:30 - this video i'll explain this program
04:32 - step by step
04:34 - okay
04:35 - so let's see the detailed execution of
04:37 - this program step by step whenever you
04:40 - run that program control first of all
04:42 - we'll go to the main function
04:44 - okay now in main function we have two
04:46 - variables i and some so in memory some
04:50 - memory would be allocated to this i and
04:52 - memory would be allocated to sum it is
04:54 - of in types of four bytes four bytes for
04:56 - this four bytes for this now in i we
04:58 - don't have anything in sum we have zero
05:00 - why i have initialized sum that also
05:03 - i'll tell you
05:04 - in i we have nothing now next statement
05:07 - is four i is equal to one now this
05:08 - initialization of i is equal to one now
05:10 - in i we have one check the condition one
05:13 - less than equal to fifteen see it is
05:14 - inclusive
05:16 - so okay one has been included as well as
05:18 - fifteen because the condition is less
05:20 - than equal to fifteen it's not less than
05:22 - fifteen means equal to 15 would also be
05:25 - included
05:27 - condition true okay fine control will
05:30 - enter here now check the condition if
05:32 - this i 1
05:35 - mode 2 equal not equal to
05:38 - 0
05:39 - because see if if you divide a number by
05:42 - 2 and the remainder is 0 then that would
05:44 - be even number but we want some of
05:46 - odd integers okay
05:49 - so this this operator modulo will give
05:51 - remainder so if the remainder is not
05:54 - equal to zero this operator is not equal
05:55 - to this exclamation mark and equal to
05:58 - this is
05:59 - not equal to operator okay
06:01 - not equal to zero yeah the remainder
06:03 - would be
06:04 - one only okay it is not equal to zero it
06:07 - means it is odd
06:09 - so now the condition is true so control
06:12 - will enter again into this if statement
06:14 - so by default
06:15 - we have only one statement in if so i am
06:17 - not putting these curly braces if you
06:19 - want to put you can put here curly
06:22 - braces here and here okay
06:24 - now sum equal to sum plus i
06:27 - now sum plus i that would be initial
06:29 - that would be assigned to the sum now
06:30 - sum is equal to sum is 0 and at this
06:33 - point of time i value is 1 so 0 plus 1
06:35 - is 1 so now 1 would be assigned to this
06:37 - sum now sum becomes 1
06:40 - okay
06:41 - now i plus plus next task is i plus plus
06:44 - now i becomes 2
06:47 - condition true again condition would be
06:48 - checked condition true again enter here
06:51 - now 2
06:52 - mode 2
06:54 - it would be 0 the condition is not true
06:57 - so will not enter here
06:59 - skip this part and i plus plus now i
07:01 - becomes 3
07:02 - condition true again enter 3
07:05 - mode 2
07:08 - remainder would be
07:09 - 1
07:10 - so it is not equal to 0 yes condition
07:12 - true means as we know 3 is odd number so
07:16 - we'll enter here now sum plus i sum is
07:19 - equal to 1 and plus i at this point of
07:22 - time i is 3 3 plus 1 is 4 now 4 we would
07:25 - be assigned to the sum now sum becomes
07:27 - 4.
07:28 - now again i plus plus now i becomes 4
07:31 - condition true yes enter here 4 mode 2
07:35 - equal to 0 condition is not reduced so
07:37 - we will not enter here control will not
07:39 - enter here skip this part
07:41 - i plus plus now i becomes 5. condition
07:44 - true check the condition 5 less than
07:46 - equal to 15 condition true 5 mode 2
07:50 - remainder would be 1
07:52 - not equal to 0 yes condition 2 now some
07:55 - would be done like this i hope now you
07:58 - you can do this so you please try right
08:00 - right on this program at your own till i
08:03 - becomes 15 once i becomes 15
08:06 - condition is still true i less than
08:08 - equal to 15 yes still true enter here 15
08:11 - more 2 yes it it will give 1 remainder
08:14 - so condition is 2 it is not equal to 0
08:16 - again in turn now some would be done at
08:18 - finally some would be 64.
08:22 - now i become 16
08:23 - now condition is not true 16 less than
08:26 - equal to 15 no now exit from this for
08:29 - loop now out of this four loop what we
08:31 - are printing sum equal to whatever the
08:33 - value of sum now some would be printed
08:34 - that is 64.
08:39 - we have initialized some with zero
08:40 - because if we don't initialize a number
08:42 - that will take any garbage value and
08:45 - suppose it will take it it is taking any
08:47 - garbage value and in garbage value plus
08:50 - at first time i was one garbage value
08:53 - plus one definitely it would be some
08:54 - garbage value so maybe the result would
08:56 - be something different
08:58 - you know
08:59 - different from whatever i have we have
09:00 - expected so better to initialize a
09:02 - variable before using it with some value
09:05 - okay here we have initialized i with one
09:07 - sum with zero
09:10 - fine i hope now you got the working of
09:12 - uh this
09:13 - program
09:15 - this exercise so now in the next video
09:17 - we'll see uh
09:19 - range based for loop or better we will
09:21 - see why loop because for range based for
09:22 - loop we have to you have to you know
09:25 - have some idea about arrays and vectors
09:27 - but i haven't discussed those things so
09:29 - first we will discuss while loop and do
09:30 - while loop then a small distribution
09:33 - discussion would be on arrays and
09:35 - vectors and then we will see that range
09:38 - based for loop so now i'll see in the
09:40 - next video till then bye take care

Cleaned transcript:

so in the series of learning c plus plus programming language we are discussing loops in c plus plus we have discussed uh till now for loop okay everything about for loop we have discussed so let's see a program it's you can say it's a coding exercise for you guys using for loop now you have to write down a program to find out or to calculate sum of four integers from 1 to 15 and 1 and 15 both are included means inclusive using for loop you have to write down this program okay now let's pause the video we'll see the solution also in this video explain i'll explain the solution step by step but uh first you try out pause the video and try this out so let's create a new file we can say exercise for loop okay dot cpp first thing is you have to include header io stream then using namespace std and then we'll write down main hint main here we will take two variable into i and sum sum i'm going to initialize it with 0 okay why so because if you don't initialize this sum then it will take any garbage value and whenever we will do some of the when you will add in this sum variable then maybe it will give some unexpected results so better to initialize the variables proper initialization now in for loop we have to do we have to iterate the thing this thing from 1 to 15 and from 1 to 15 also we will we have to find out code integers only so you have to put extra condition also so first iterator loop from 1 condition is less than equal to 15 equal to 15 because it is inclusive and then one by one we are going to increment now check the number is odor even because we have to do some of odd numbers only how to find out if you divide a number by two and the remainder is zero then it would be even number if the remainder is not 0 it means it would be odd number so same you can put how to find out remainder using a operator modulo i hope you know the working of model operator if you don't know then i we have discussed about these operators in the previous lecture so you can check out the playlist so if this number i and mode 2 not equal to 0 exclamation mark and equal to this is what not equal to zero if the condition is true this condition is true means the number is ode now do sum so what we will do in sum we will do sum plus i the number you will update the sum as soon as you find out number just add it to the previous sum once you find out whole number again you find out number again add some if the number is even just skip this part and just do i plus plus okay now after this for loop just print sum sum equal to we are going to print in a variable name sum we have so just use that variable to print and successfully the program will be successful then just return 0 okay it means program return 0 means successfully terminated the program okay now i hope you got this now let's run this and see see sum is equal to 64. so you can do sum of 4 integer 1 3 5 7 9 11 13 15. these are all integers from 1 to 15 and i just calculate the sum manually you will find out that sum will be 64. i hope you got this logic it's very simple i guess okay so if you don't know this thing the behind the scene what the execution process the step by step then you can continue watching this video if you have got this thing you can just skip the video so in the next part of this video right now you just continue watching this video i'll explain this program step by step okay so let's see the detailed execution of this program step by step whenever you run that program control first of all we'll go to the main function okay now in main function we have two variables i and some so in memory some memory would be allocated to this i and memory would be allocated to sum it is of in types of four bytes four bytes for this four bytes for this now in i we don't have anything in sum we have zero why i have initialized sum that also i'll tell you in i we have nothing now next statement is four i is equal to one now this initialization of i is equal to one now in i we have one check the condition one less than equal to fifteen see it is inclusive so okay one has been included as well as fifteen because the condition is less than equal to fifteen it's not less than fifteen means equal to 15 would also be included condition true okay fine control will enter here now check the condition if this i 1 mode 2 equal not equal to 0 because see if if you divide a number by 2 and the remainder is 0 then that would be even number but we want some of odd integers okay so this this operator modulo will give remainder so if the remainder is not equal to zero this operator is not equal to this exclamation mark and equal to this is not equal to operator okay not equal to zero yeah the remainder would be one only okay it is not equal to zero it means it is odd so now the condition is true so control will enter again into this if statement so by default we have only one statement in if so i am not putting these curly braces if you want to put you can put here curly braces here and here okay now sum equal to sum plus i now sum plus i that would be initial that would be assigned to the sum now sum is equal to sum is 0 and at this point of time i value is 1 so 0 plus 1 is 1 so now 1 would be assigned to this sum now sum becomes 1 okay now i plus plus next task is i plus plus now i becomes 2 condition true again condition would be checked condition true again enter here now 2 mode 2 it would be 0 the condition is not true so will not enter here skip this part and i plus plus now i becomes 3 condition true again enter 3 mode 2 remainder would be 1 so it is not equal to 0 yes condition true means as we know 3 is odd number so we'll enter here now sum plus i sum is equal to 1 and plus i at this point of time i is 3 3 plus 1 is 4 now 4 we would be assigned to the sum now sum becomes 4. now again i plus plus now i becomes 4 condition true yes enter here 4 mode 2 equal to 0 condition is not reduced so we will not enter here control will not enter here skip this part i plus plus now i becomes 5. condition true check the condition 5 less than equal to 15 condition true 5 mode 2 remainder would be 1 not equal to 0 yes condition 2 now some would be done like this i hope now you you can do this so you please try right right on this program at your own till i becomes 15 once i becomes 15 condition is still true i less than equal to 15 yes still true enter here 15 more 2 yes it it will give 1 remainder so condition is 2 it is not equal to 0 again in turn now some would be done at finally some would be 64. now i become 16 now condition is not true 16 less than equal to 15 no now exit from this for loop now out of this four loop what we are printing sum equal to whatever the value of sum now some would be printed that is 64. we have initialized some with zero because if we don't initialize a number that will take any garbage value and suppose it will take it it is taking any garbage value and in garbage value plus at first time i was one garbage value plus one definitely it would be some garbage value so maybe the result would be something different you know different from whatever i have we have expected so better to initialize a variable before using it with some value okay here we have initialized i with one sum with zero fine i hope now you got the working of uh this program this exercise so now in the next video we'll see uh range based for loop or better we will see why loop because for range based for loop we have to you have to you know have some idea about arrays and vectors but i haven't discussed those things so first we will discuss while loop and do while loop then a small distribution discussion would be on arrays and vectors and then we will see that range based for loop so now i'll see in the next video till then bye take care
