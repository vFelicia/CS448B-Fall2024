With timestamps:

00:00 - hi guys today I am going to discuss with
00:02 - you how to detect a cycle in directed
00:04 - graph with the help of DFS traversal we
00:07 - have already discussed how to lessen
00:08 - detect a cycle in undirected graph with
00:11 - the help of DFS traversal breadth-first
00:13 - search if you want to check out that
00:15 - video I will provide you the link in the
00:17 - description box so here we have one
00:20 - directed graph I am going to take small
00:22 - graph having containing one cycle okay
00:26 - now after applying that particular logic
00:28 - this graph should return yes true I mean
00:31 - this graph should return true yes it
00:33 - contains a cycle otherwise Falls this
00:35 - graph does not contain a second okay now
00:38 - for DFS traversal which data structure
00:41 - is to be used we use what star data
00:45 - structure so we are going to maintain
00:47 - one stack and here you can say well
00:50 - write the variable which has been
00:54 - visited or traversed or you can take
00:56 - that color coloring method may be
00:59 - visited secondly color would be blue or
01:02 - unvisited kailia color would be read
01:04 - something like that okay I'm going to
01:06 - write the vertices which are visited
01:08 - here and one thing I am going to
01:10 - maintain is that is one parent map table
01:15 - okay fine here you'll write the vertex
01:20 - and here we'll write parent of that
01:23 - vertex and one more thing we are going
01:27 - to use we are going to use one very
01:29 - variable that is flag variable and flag
01:33 - variable is having value minus 1 0 & 1
01:37 - flag variable minus 1 values have been
01:40 - mine minus 1 in that case it means that
01:43 - particular vertex is unvisited
01:47 - if L is 0 then that particular vertex
01:51 - has been visited and that vertex is in
01:55 - this stack and if flag value is 1 then
01:59 - that vertex is visited and has been
02:03 - popped out from step means that vertex
02:08 - is not in the stack anymore so 3 values
02:12 - will use for this
02:13 - variable okay now it's starting every
02:18 - node is having flag minus one because
02:22 - nowhere takes us visited every vertex s
02:24 - unvisited now now we are going to start
02:26 - suppose from a where I'm going to take
02:29 - the word source vertex you can take any
02:31 - vertex as a source or a text and start
02:33 - your DFS traversal from any node I am
02:35 - going to take a as a source vertex first
02:38 - of all what will be there a would be put
02:41 - into the stack and the flag of a becomes
02:44 - 0 and a is now visited by now we will
02:50 - also write what X is a pair into phase
02:53 - what nothing because a is a source
02:56 - vertex next find out that scent of a one
03:00 - is B and one is C so we will take either
03:02 - B or C I hope you know the concept of
03:05 - DFS traversal if you don't know then
03:07 - I'll provide you the link and the
03:08 - description box you can check out how
03:10 - DFS traversal works so I'm going to take
03:12 - suppose B so we'll push be in the step
03:16 - and this flag value becomes 0 and B is
03:20 - visited as well as the parent over Texas
03:24 - be parent of B is what from where did
03:26 - this vertex come from a we are going to
03:30 - maintain this one also now we are at B
03:32 - check out that scent of b1 is d and 1 is
03:35 - C so you can go either to this direction
03:37 - or this direction suppose I am taking C
03:39 - I am going to the in this direction flag
03:42 - of C becomes 0 and C is now visited and
03:45 - for C what is the parent node that is be
03:50 - fine next check out the adjacent
03:54 - vertices of C can you go further from C
03:57 - no we don't go any there is no
03:59 - additional vertices of C no outgoing
04:01 - edge from C so that is a dead end we
04:04 - have to backtrack now how you will get
04:06 - to know that from C will you go to B or
04:10 - will you go to a see the simple fun dies
04:13 - you have to check out the stack and then
04:15 - you will come to know that from C where
04:17 - you have to now next step is what if you
04:20 - have reached to a dead end then check
04:22 - out the top of the stack and remove it
04:25 - remove the top of
04:27 - so you can say pop out that vertex from
04:30 - this step now she has been popped out if
04:33 - she has been popped out then the flag of
04:36 - C becomes what one now now check out the
04:40 - next top of the step that is B now we
04:43 - have to backtrack to be that's well tell
04:47 - you okay
04:48 - now check out that descent vertices of
04:51 - these still remaining yes we have one
04:53 - vertex B and we can push this vertex
04:55 - into this stack because flag is minus
04:58 - one minus one means that vertex is
05:00 - unvisited if any words I just went for
05:02 - Texel is having flag minus one then only
05:04 - you can push that vertex into this step
05:07 - if B is having a descent what X flag
05:10 - zero or one something like that then we
05:13 - will not able to push those vertices
05:15 - into this step now D is having value
05:19 - minus one then we'll push D into this
05:22 - stack and D is now visited and the flag
05:26 - becomes zero now find out for D adjacent
05:29 - what this is one that is e and flag is
05:33 - minus one so we can push that vertex
05:35 - into this stack no problem
05:37 - then value becomes zero he has been
05:40 - pushed into this and here he has been
05:43 - visited yeah I will also maintain the
05:45 - step when he was when we were at B then
05:49 - the parent was be satellaview be
05:52 - maintained karna and now we are at E so
05:55 - the parent of E is what D fine now from
06:01 - E is there any adjacent vertex yes we
06:04 - have one vertex that is B but we cannot
06:08 - push B into this stack why so because
06:11 - flag of B is what 0 a flag is 0 it means
06:16 - that vertex is visited and in this stack
06:20 - so we cannot push again B into this step
06:24 - so that the condition is when you write
06:27 - that program of BFS Travis Lu how to
06:29 - modify one thing you have to add one
06:31 - condition if anyone takes finds its at
06:34 - the same context with flag 0 it means
06:38 - that
06:38 - a graph contains a cycle high e to B B
06:45 - is zero it means this graph contains a
06:48 - cycle it should return true
06:50 - now how you get to know that which nodes
06:54 - are there in this cycle now e to be c e
07:01 - D when you go from A to B then then of
07:04 - course this edge should be in that cycle
07:06 - because when you reached out from E to B
07:09 - then we find out that the flag of these
07:11 - go to zero and thus B is already in this
07:13 - stack so that edge from E to be e to be
07:19 - isn't is in the cycle now e to be now
07:24 - each check out that parent of E from
07:29 - this table parent of E is what D means e
07:33 - came from B so de would be in that cycle
07:39 - now check out parent of the parent of
07:42 - days what B means D comes out from B so
07:46 - BD this edge will also in that cycle and
07:48 - we have reached to a point B we here we
07:51 - have where we have stopped so there's
07:54 - these edges will form a cycle BDT e and
07:58 - e b BD D and E B so this is a cycle
08:04 - right now if you remove suppose if you
08:08 - remove this edge now there is no cycle
08:12 - in this graph now let us check out our
08:15 - logic is working or not if you have
08:18 - removed this this one now we have
08:22 - reached to e not check out that descent
08:24 - vertices of E is there any adjacent
08:25 - vertex of a you know there is no one so
08:28 - what is the next step pop out this eve
08:32 - from this step and the flag becomes one
08:35 - now check out the next two vertex D now
08:38 - we have to backtrack to D check out
08:41 - these having any addition to what is
08:42 - vertices which is still and visited
08:44 - having flag value minus 1 no we don't
08:47 - have then D will also be popped out and
08:49 - this becomes what one
08:52 - next dope is what we we have to
08:54 - backtrack to be now now be is not having
08:58 - any vortex which is still any addition
09:00 - to vortex Twitter salon visited no now
09:03 - remove this be from this tech and the
09:06 - top of this tech is now a now we have to
09:08 - backtrack to hey is there any vertex of
09:12 - a addition to vertex so favors and still
09:14 - and visited no we don't have then this
09:16 - would be removed and if the stack is
09:17 - empty it means it is the signal that we
09:20 - have to stop the DFS algorithm so in
09:24 - that case we didn't find any cycle fine
09:28 - and if you add if you add this edge then
09:31 - it will form a cycle and this is how
09:34 - you'll you'll find out that this graph
09:37 - contains a cycle or not see you have to
09:39 - add simply one condition in DFS
09:41 - traversal if any vertex find its
09:44 - adjacent vertex with flag zero it means
09:48 - this graph that graph contains a cycle
09:51 - and to find out the edges and that cycle
09:55 - you have to respect your steps find
09:59 - using this parent table the time
10:00 - complexity to find out cycle in a
10:02 - directed graph using DFS traversal is V
10:06 - Plus hm
10:08 - in the worst case may be in the worst
10:12 - case means maybe there is a graph in
10:15 - which were you are applying DFS
10:17 - traversal in that graph and at last
10:19 - after traversing every vertex and every
10:21 - edge at last you come you come to know
10:23 - that there is a cycle see that is the
10:26 - worst case so V Plus e this is the time
10:29 - complexity order of P plus fine so I'll
10:33 - say in the next video till then bye bye
10:34 - take care

Cleaned transcript:

hi guys today I am going to discuss with you how to detect a cycle in directed graph with the help of DFS traversal we have already discussed how to lessen detect a cycle in undirected graph with the help of DFS traversal breadthfirst search if you want to check out that video I will provide you the link in the description box so here we have one directed graph I am going to take small graph having containing one cycle okay now after applying that particular logic this graph should return yes true I mean this graph should return true yes it contains a cycle otherwise Falls this graph does not contain a second okay now for DFS traversal which data structure is to be used we use what star data structure so we are going to maintain one stack and here you can say well write the variable which has been visited or traversed or you can take that color coloring method may be visited secondly color would be blue or unvisited kailia color would be read something like that okay I'm going to write the vertices which are visited here and one thing I am going to maintain is that is one parent map table okay fine here you'll write the vertex and here we'll write parent of that vertex and one more thing we are going to use we are going to use one very variable that is flag variable and flag variable is having value minus 1 0 & 1 flag variable minus 1 values have been mine minus 1 in that case it means that particular vertex is unvisited if L is 0 then that particular vertex has been visited and that vertex is in this stack and if flag value is 1 then that vertex is visited and has been popped out from step means that vertex is not in the stack anymore so 3 values will use for this variable okay now it's starting every node is having flag minus one because nowhere takes us visited every vertex s unvisited now now we are going to start suppose from a where I'm going to take the word source vertex you can take any vertex as a source or a text and start your DFS traversal from any node I am going to take a as a source vertex first of all what will be there a would be put into the stack and the flag of a becomes 0 and a is now visited by now we will also write what X is a pair into phase what nothing because a is a source vertex next find out that scent of a one is B and one is C so we will take either B or C I hope you know the concept of DFS traversal if you don't know then I'll provide you the link and the description box you can check out how DFS traversal works so I'm going to take suppose B so we'll push be in the step and this flag value becomes 0 and B is visited as well as the parent over Texas be parent of B is what from where did this vertex come from a we are going to maintain this one also now we are at B check out that scent of b1 is d and 1 is C so you can go either to this direction or this direction suppose I am taking C I am going to the in this direction flag of C becomes 0 and C is now visited and for C what is the parent node that is be fine next check out the adjacent vertices of C can you go further from C no we don't go any there is no additional vertices of C no outgoing edge from C so that is a dead end we have to backtrack now how you will get to know that from C will you go to B or will you go to a see the simple fun dies you have to check out the stack and then you will come to know that from C where you have to now next step is what if you have reached to a dead end then check out the top of the stack and remove it remove the top of so you can say pop out that vertex from this step now she has been popped out if she has been popped out then the flag of C becomes what one now now check out the next top of the step that is B now we have to backtrack to be that's well tell you okay now check out that descent vertices of these still remaining yes we have one vertex B and we can push this vertex into this stack because flag is minus one minus one means that vertex is unvisited if any words I just went for Texel is having flag minus one then only you can push that vertex into this step if B is having a descent what X flag zero or one something like that then we will not able to push those vertices into this step now D is having value minus one then we'll push D into this stack and D is now visited and the flag becomes zero now find out for D adjacent what this is one that is e and flag is minus one so we can push that vertex into this stack no problem then value becomes zero he has been pushed into this and here he has been visited yeah I will also maintain the step when he was when we were at B then the parent was be satellaview be maintained karna and now we are at E so the parent of E is what D fine now from E is there any adjacent vertex yes we have one vertex that is B but we cannot push B into this stack why so because flag of B is what 0 a flag is 0 it means that vertex is visited and in this stack so we cannot push again B into this step so that the condition is when you write that program of BFS Travis Lu how to modify one thing you have to add one condition if anyone takes finds its at the same context with flag 0 it means that a graph contains a cycle high e to B B is zero it means this graph contains a cycle it should return true now how you get to know that which nodes are there in this cycle now e to be c e D when you go from A to B then then of course this edge should be in that cycle because when you reached out from E to B then we find out that the flag of these go to zero and thus B is already in this stack so that edge from E to be e to be isn't is in the cycle now e to be now each check out that parent of E from this table parent of E is what D means e came from B so de would be in that cycle now check out parent of the parent of days what B means D comes out from B so BD this edge will also in that cycle and we have reached to a point B we here we have where we have stopped so there's these edges will form a cycle BDT e and e b BD D and E B so this is a cycle right now if you remove suppose if you remove this edge now there is no cycle in this graph now let us check out our logic is working or not if you have removed this this one now we have reached to e not check out that descent vertices of E is there any adjacent vertex of a you know there is no one so what is the next step pop out this eve from this step and the flag becomes one now check out the next two vertex D now we have to backtrack to D check out these having any addition to what is vertices which is still and visited having flag value minus 1 no we don't have then D will also be popped out and this becomes what one next dope is what we we have to backtrack to be now now be is not having any vortex which is still any addition to vortex Twitter salon visited no now remove this be from this tech and the top of this tech is now a now we have to backtrack to hey is there any vertex of a addition to vertex so favors and still and visited no we don't have then this would be removed and if the stack is empty it means it is the signal that we have to stop the DFS algorithm so in that case we didn't find any cycle fine and if you add if you add this edge then it will form a cycle and this is how you'll you'll find out that this graph contains a cycle or not see you have to add simply one condition in DFS traversal if any vertex find its adjacent vertex with flag zero it means this graph that graph contains a cycle and to find out the edges and that cycle you have to respect your steps find using this parent table the time complexity to find out cycle in a directed graph using DFS traversal is V Plus hm in the worst case may be in the worst case means maybe there is a graph in which were you are applying DFS traversal in that graph and at last after traversing every vertex and every edge at last you come you come to know that there is a cycle see that is the worst case so V Plus e this is the time complexity order of P plus fine so I'll say in the next video till then bye bye take care
