With timestamps:

00:00 - in the series of learning programming in
00:01 - c in this video i'll talk about
00:03 - formatted input and output functions in
00:05 - c i'm going to divide this video into
00:06 - two parts so uh more specifically if i
00:09 - say then in this video i'll talk about
00:10 - formatted input function in c and what
00:12 - is formatted input function in c
00:14 - scan a function right so we will be
00:16 - talking about you know about the scanner
00:18 - function means every single detail about
00:20 - this kind of function
00:21 - and the what is the syntax and
00:22 - everything how to use this kind of
00:24 - function in your program and where this
00:26 - can scan a function has been declared or
00:29 - you can say defined in which library
00:31 - that thing will also discuss and what
00:33 - does this formatted input mean that is
00:35 - that also we will discuss and one more
00:37 - interesting factor one more interesting
00:39 - point i'll tell about the scanner
00:41 - function which generally many students
00:43 - don't know so now let us discuss about
00:46 - scanner function scanf means we want to
00:48 - take input this is what formatted input
00:50 - function in c
00:52 - we can take input using scanner function
00:54 - as well as what we can do during when we
00:57 - write a program at compile time only we
00:58 - can initialize the variables we can
01:00 - assign the values let me take one simple
01:02 - example i am going to take an example of
01:04 - addition of two numbers right
01:09 - so now here i am declaring a variable in
01:11 - a and at this this time only i am
01:13 - initializing this variable i am
01:14 - assigning the value like suppose i am
01:16 - initializing the value
01:17 - 5
01:18 - right
01:19 - but in this program there is an error
01:21 - after main we cannot write semicolon
01:23 - i was just checking you are attentive or
01:25 - not you can tell me in comment box if
01:27 - you have got my error before i told you
01:30 - right so now i am initializing at this
01:31 - time only and i am taking one more
01:33 - suppose at this line i am taking that
01:36 - another variable b is equal to
01:38 - four
01:39 - this is what i am taking input but at
01:41 - compile time only i am assigning values
01:43 - right but second method is what and
01:45 - directly i can say what one more
01:47 - variable sum and sum is equal to a plus
01:49 - b and i can print a b and sum right but
01:52 - what one more thing i can do is what
01:53 - rather than
01:54 - ah doing this static assignment
01:57 - i want to take
01:59 - that values at runtime like when you run
02:01 - a program at that time
02:03 - it should ask like enter value of a and
02:05 - b or you can say enter value of a or
02:08 - enter two numbers and at that time i
02:10 - want to enter values maybe four or five
02:12 - or five or four or maybe one or two any
02:14 - values at that time only
02:17 - so at that time how can we take input
02:20 - from the user using scanner function how
02:23 - can we use this scanner function c
02:27 - here i am just
02:28 - declaring three
02:31 - variables right and
02:37 - i am taking value something like this
02:39 - what is that syntax of scanner function
02:42 - first of all what does this mean
02:43 - formatted input
02:45 - it means the input the input the
02:47 - inputted data has been assigned in a
02:49 - specific format see
02:52 - i am taking something like this see
02:53 - first of all let me discuss what is this
02:55 - formatted input formatted input means
02:57 - the inputted data has been arranged in a
03:00 - specific format
03:02 - so now the general syntax of the scanner
03:04 - function is what we generally like write
03:06 - this
03:08 - word scanf right
03:10 - and then
03:11 - here we write control string or that
03:14 - convergent string anything you can say
03:18 - and that would be written in this double
03:20 - quotes after a comma and here we will
03:24 - write what
03:25 - list of ah addresses of the variables or
03:28 - you can say some arguments i am saying
03:30 - like here argument 1
03:33 - argument 2 up to zone or you can say
03:36 - argument up to argument
03:38 - n
03:39 - and after that semicolon or here you can
03:41 - say list of
03:42 - arguments are what simply the address of
03:44 - variables let me discuss this thing
03:47 - that the control string or you can say
03:49 - this convergent string
03:51 - it is
03:52 - between these quotation mark right
03:55 - that is what the syntax of writing
03:57 - scanner function and what is there in
04:00 - this control string first character
04:02 - first is what character is what
04:04 - percentage the conversion character
04:06 - right
04:07 - after that what you will write
04:10 - the type of data you are going to take
04:13 - here the type of data is what integer so
04:16 - that is why for integer i'll write
04:18 - d
04:19 - if the data is float the data type is
04:22 - float then
04:23 - this percentage this conversion
04:26 - character would be same but for float
04:28 - i'll write
04:29 - f
04:30 - if you take character for that you will
04:32 - write percentage
04:34 - c
04:35 - got it i'm taking here a and b integer
04:38 - type so that is why i'm writing
04:40 - percentage d why i am writing 2 times d
04:44 - because i want to take 2 inputs from the
04:46 - user
04:47 - that is why i am writing 2 percentage d
04:49 - but
04:50 - remember this thing there is no comma
04:52 - between these
04:54 - format specifier otherwise it will give
04:56 - error right in this control string there
04:58 - should be no comma right after that just
05:02 - close these
05:04 - quotation marks and then
05:06 - you have to put a comma after that what
05:08 - you will put address of a this is what
05:11 - address of operator coma address of b
05:15 - now see
05:16 - whenever compiler will come to this line
05:18 - when when you compile compiler will
05:20 - execute this line then first is what
05:22 - percentage d
05:23 - according to this
05:25 - according to this format specifier what
05:27 - compiler know yeah it has to take
05:29 - integer value
05:31 - so
05:32 - just after the closing of this
05:35 - it will check out for
05:37 - that address
05:38 - right that argument
05:41 - why this address of operator we are
05:43 - using c
05:45 - when
05:46 - first of all control will go to the main
05:47 - function first line of the main function
05:50 - and in memory suppose this is a memory
05:54 - randomly i am assigning what
05:56 - a b and sum
05:58 - three variables
06:00 - we have declared means some memory space
06:02 - has been assigned to these variables
06:03 - suppose
06:05 - thousand here we have 2000 here we have
06:07 - suppose one zero two for address so for
06:09 - sum but we haven't initialized anything
06:12 - in a b a b and c
06:14 - now whenever we take input from the user
06:18 - obviously that input that data should be
06:20 - stored in memory somewhere
06:23 - where that data should be stored you
06:25 - have to give address the location
06:28 - that is why i'm using address of
06:31 - operator address of in which variable
06:34 - you want to store i want to store in a
06:38 - so first whatever data you will enter
06:41 - whenever you will run the program that
06:43 - would be stored in a suppose i i will
06:45 - enter 5 so 5 would be stored in here
06:48 - suppose here i write b and here you
06:51 - write a
06:53 - at that time
06:54 - the data the first data you will enter
06:57 - that would be stored in
06:58 - address of
07:01 - where location of b variable means uh
07:04 - address of b
07:05 - so here that data would be stored at b
07:08 - right whatever
07:10 - variable name you will write
07:12 - according to that the data would be
07:14 - stored here now second again we have
07:17 - percentage d means it has to take one
07:20 - more input so it will map this thing
07:23 - to the
07:24 - second argument after this coma
07:27 - right first argument for this for this
07:29 - one second argument
07:31 - this this percentage d for second
07:32 - argument so whatever you will enter that
07:34 - would be stored address of b
07:37 - right address of b is 2 000 so that
07:40 - would be stored here suppose i am
07:41 - entering 4
07:42 - right what is that actual process that
07:45 - is this thing whenever we call main
07:47 - function then in memory
07:49 - some
07:50 - uh that
07:52 - some memory would be assigned to main
07:53 - function right when we do this function
07:55 - call
07:56 - right
07:57 - in main memory
07:58 - fine
07:59 - in main form in main
08:01 - suppose we have a b and sum like this
08:04 - this is what main a b and sum
08:08 - and whenever we call scanner function
08:09 - then another sum
08:12 - memory would be assigned to the scanner
08:14 - function this is what our memory right
08:16 - main memory
08:19 - some memory memory would be assigned to
08:20 - the scanner function within this
08:22 - function call it would be executed
08:24 - right
08:25 - so now in this scanner function we have
08:27 - percentage d
08:29 - and in percentage d like what
08:33 - address of a
08:34 - it will return what address of address
08:36 - of a is what suppose thousand
08:39 - so here we have thousand so that is why
08:42 - it is what linking here
08:45 - reference would be passed address would
08:46 - be passed so whatever value you will get
08:49 - from the user that would be stored at
08:50 - this address
08:52 - this is what the meaning of this address
08:54 - of operator it will return the address
08:55 - of a address of a thousands here so
08:58 - ultimately the value would be stored
09:00 - here
09:01 - address of b
09:02 - means
09:03 - 2000 so the value would be stored here
09:05 - so this is what pointer
09:07 - it is what pointer pointing to this one
09:09 - this data this concept we will get when
09:11 - we will discuss pointers in detail right
09:13 - and see
09:15 - here just simply means to put a value
09:17 - obviously we need address where you want
09:19 - to put that data into memory and that
09:21 - address we will get through this address
09:22 - of operator address of variable a
09:25 - address or variable b b obviously we
09:27 - want address of a and b if you want to
09:29 - put data here right
09:31 - that is why we are using here address of
09:33 - operator that is most and between these
09:36 - arguments there should be a coma right
09:41 - so tell me in comment box here comma is
09:43 - acting as a separator or operator we
09:46 - have already discussed about coma
09:47 - operators right you can relate it with
09:49 - the real life example if you want um to
09:51 - send me a gift then obviously you need a
09:54 - address of mine so you can ask me and
09:56 - i'll tell you the address and then you
09:58 - can send me same funda you can apply
10:00 - here if you want to put a value then
10:02 - obviously you need address address of
10:04 - that variable and then you can put that
10:05 - value right
10:07 - so this is what
10:09 - ah general syntax of this scanner
10:10 - function right
10:12 - and
10:13 - the interesting factor the interesting
10:15 - fact about scanf function is what this
10:18 - is a function what value it will return
10:20 - what it will return
10:21 - scanner function will return the number
10:24 - of arguments the number of inputs it is
10:27 - taking from the user
10:28 - here how many inputs it is taking from
10:30 - the user 1 n2 2 inputs so it will return
10:34 - what 2
10:35 - how you can print that value or that
10:37 - also will discuss
10:39 - later now
10:41 - percentage d is for integer now here you
10:44 - can also assign
10:45 - a width like if suppose i am writing
10:47 - here
10:50 - percentage d
10:51 - 4
10:52 - it will specify it will tell the width
10:54 - of the number you will take from the
10:56 - user suppose while entering the value
10:59 - this i'm writing percentage 4d means the
11:02 - width is 4 so it will map to this one a
11:06 - and i'm i'm entering the data 1 2 3 4 5.
11:10 - this number i'm entering this is integer
11:12 - obviously but the width is four only so
11:14 - it will take one two three four
11:17 - these four and it will store these four
11:19 - this number one two three four in a
11:21 - right and after that this five
11:24 - it will take in
11:25 - d because here one more percentage the
11:27 - the is there so here
11:30 - 5
11:31 - automatically
11:32 - see if you enter this if you uh enter at
11:35 - that time this number
11:37 - and if you press enter then
11:38 - automatically it will not ask for value
11:40 - of b it will take 1 2 3 4 for a and 5
11:44 - for b
11:45 - that is why the reason that is why we
11:46 - are
11:47 - you know the specifying this width but
11:50 - better this is what abnormal behavior
11:52 - because i want number 1 2 3 4 5 for a
11:55 - and suppose 45 for b but it is taking
11:58 - one two three four four a and five for b
12:00 - automatically so i don't want this thing
12:02 - so that is why we generally we don't
12:03 - specify here with we specify only
12:06 - percentage d right now next is what this
12:09 - is for integer and suppose if you write
12:11 - here percentage f
12:13 - what will happen
12:15 - the data is what integer but i am it is
12:17 - expecting what the data is
12:20 - float so if you enter 5
12:23 - then it will not take anything it will
12:25 - store
12:26 - 0 in a
12:28 - right
12:28 - and in b if you
12:30 - enter 5 then it will store in 5 because
12:32 - it is what integer and when you print
12:34 - value of a and b then a value would be 0
12:37 - and b value would be 5
12:38 - right so that is why the format
12:40 - specifier you have to take care of this
12:41 - thing for f for float you can write
12:44 - percentage f for character you can write
12:45 - percentage c and rather than these there
12:48 - are many more format specifier also that
12:50 - also will discuss in a separate video
12:52 - right see suppose input i am taking like
12:54 - this 12
12:56 - here i am writing
12:57 - 12.53 and here i am writing a character
13:01 - c
13:02 - so now this is what this type of input
13:03 - we can take using scanf this is what
13:05 - formatted input first is what integer
13:08 - second is what float third is what
13:10 - character it's okay you can take mixed
13:12 - data type
13:14 - right in this case what you have to
13:15 - write in scanf function what you have to
13:17 - write
13:18 - i am declaring three type of variables
13:20 - integer float and character so in scan
13:22 - of what you can do
13:24 - first suppose i am taking integer right
13:26 - percentage d
13:28 - for float percentage f for character
13:30 - percentage c that's it this is the
13:32 - control string then coma and then
13:35 - address off
13:37 - for integer i am taking variable name is
13:39 - a address of for float it's b and for
13:43 - character it's ch that is fine we can
13:46 - take mixed error type right so this is
13:48 - what the
13:49 - formatted input right now and in case of
13:52 - float for float percentage f
13:54 - for double we write percentage
13:57 - lf
13:58 - small lf and for long double we write
14:01 - percentage capital l and f is small
14:04 - right and in float we can also take that
14:06 - exp value in exponential form right
14:08 - suppose if i am taking the value
14:11 - percentage f in b and when i am
14:13 - inputting the value then i am writing
14:15 - here 4 7
14:18 - 6 3
14:19 - and e
14:21 - minus 1
14:22 - you can also write this thing and when
14:24 - you will print value of b then what
14:26 - value will be printed
14:27 - 4 it is minus 1 so that is why here
14:30 - 0.76300
14:33 - because float is taking uh after decimal
14:36 - 6 visits right you can check out this
14:39 - thing
14:39 - and you can tell me if i am wrong right
14:42 - and you have to ah see i have done i
14:44 - have told you the basic about scanner
14:46 - function but you can use what you can do
14:49 - what
14:50 - informant that with you can provide in a
14:53 - percentage that means float value also
14:55 - suppose i am providing here
14:57 - percentage 4f
15:00 - in that case what will happen and what
15:01 - you can do when you will enter the data
15:03 - then what you can do you can specify
15:05 - here 1 2.3456
15:08 - what data it will take
15:10 - forward
15:11 - width is only four the way so one two
15:15 - decimal also one width three and four
15:19 - twelve point three zero zero zero zero
15:22 - zero it will take this data it will
15:24 - ignore this one right and suppose next
15:27 - is a percentage d
15:29 - next is integer or maybe float then it
15:31 - will assign this value to that one
15:33 - integer or float right that is why we
15:36 - avoid using this
15:37 - width right because of this abnormal
15:39 - behavior
15:40 - so you can check out you can just write
15:42 - down a simple program and you can check
15:43 - out the different different variations
15:45 - right maybe you can write down here
15:47 - percentage uh heroes also width and here
15:49 - also
15:50 - or maybe you can write down here i'm
15:52 - taking the address of a a is what
15:54 - integer but here i am writing percentage
15:56 - f or percentage c
15:58 - then what value it will take what it
15:59 - will print
16:00 - right so you have to
16:02 - practice yourself about the scanner
16:04 - function means other variations of
16:07 - scanner functions and we can also enter
16:09 - a string for string the format specifier
16:11 - is percentage
16:12 - s that will discuss in detail when will
16:14 - be this we will be discussing strings
16:16 - and c
16:17 - so now i am writing here something like
16:19 - this
16:20 - see i am taking one more integer
16:23 - variable suppose x and here i am writing
16:25 - x is equal to scanf and
16:28 - here i am taking both variable integers
16:30 - so percentage d and percentage d and
16:32 - address of nv right
16:34 - and when you want to print then what how
16:37 - you will print the data printf
16:39 - sum
16:40 - is equal to format specifier percentage
16:43 - d like this
16:54 - and just you will write down the name of
16:56 - the variable that is sum here also i am
16:58 - using that format specify percentage d
17:00 - because the value of samsung i am taking
17:02 - of integer type that is why i am taking
17:04 - uh the percentage d so whenever you will
17:06 - write percentage d here that will map
17:08 - with that argument some from here it
17:11 - will fetch the value of sum suppose here
17:13 - 5 and 5 so sum is 10 so it will print
17:17 - if this function same execution would be
17:20 - there
17:21 - when this would be called printf
17:22 - function then some memory would be
17:24 - assigned to printf function2 in this
17:27 - main memory in your ram right so now you
17:30 - have to tell me if i print this x then
17:32 - what value you will get here in this
17:34 - case
17:34 - right
17:35 - because i have told you scanf will
17:37 - return the number of input it is taking
17:39 - from the user
17:41 - so in this case what value would be
17:43 - returning means if you print x then what
17:45 - value you will get
17:47 - and here also what other variations you
17:49 - can
17:51 - try like percentage d one percentage d
17:54 - you can write
17:55 - and here you can write address of an
17:57 - address will be at that time what you
17:58 - will get right what output you will get
18:01 - what value in x you will get or maybe
18:04 - three percentage d i'm writing and here
18:05 - i'm taking only two variables two
18:08 - arguments at that time what you will get
18:10 - so these things you have to practice at
18:12 - your own it's not like that everything
18:14 - i'm going to discuss in this video video
18:16 - would be very lengthy and when you
18:17 - practice within or with your own hand
18:19 - different different various variations
18:21 - of this kind of function then you will
18:23 - get better and that would be in your
18:24 - memory for a longer time right
18:26 - and i have already told you scan a
18:28 - function the definition this has been
18:29 - defined in this library stdio dotage
18:32 - that is why i am including this library
18:34 - in your program to tell the compiler
18:36 - what is meaning of the scanner function
18:38 - because compiler don't know that meaning
18:39 - of scanner function is to take the input
18:40 - from the user we know
18:42 - how compiler will know compiler to
18:44 - compiler we have to tell the definition
18:46 - the meaning right we have to tell we
18:48 - have to give some instructions according
18:50 - to that compiler can process something
18:53 - so that definition that meaning is here
18:55 - in this stdio file that is why i'm
18:57 - including this one right so that is i
18:59 - guess about scanner function if you have
19:01 - any doubt about scanner function you can
19:03 - ask me in comment box
19:05 - right and um or you can message me on my
19:07 - instagram account so in this video i
19:09 - will be discussing about formatted
19:11 - output function that is printf function
19:12 - in c so now i'll see in the next video
19:14 - till then bye bye take

Cleaned transcript:

in the series of learning programming in c in this video i'll talk about formatted input and output functions in c i'm going to divide this video into two parts so uh more specifically if i say then in this video i'll talk about formatted input function in c and what is formatted input function in c scan a function right so we will be talking about you know about the scanner function means every single detail about this kind of function and the what is the syntax and everything how to use this kind of function in your program and where this can scan a function has been declared or you can say defined in which library that thing will also discuss and what does this formatted input mean that is that also we will discuss and one more interesting factor one more interesting point i'll tell about the scanner function which generally many students don't know so now let us discuss about scanner function scanf means we want to take input this is what formatted input function in c we can take input using scanner function as well as what we can do during when we write a program at compile time only we can initialize the variables we can assign the values let me take one simple example i am going to take an example of addition of two numbers right so now here i am declaring a variable in a and at this this time only i am initializing this variable i am assigning the value like suppose i am initializing the value 5 right but in this program there is an error after main we cannot write semicolon i was just checking you are attentive or not you can tell me in comment box if you have got my error before i told you right so now i am initializing at this time only and i am taking one more suppose at this line i am taking that another variable b is equal to four this is what i am taking input but at compile time only i am assigning values right but second method is what and directly i can say what one more variable sum and sum is equal to a plus b and i can print a b and sum right but what one more thing i can do is what rather than ah doing this static assignment i want to take that values at runtime like when you run a program at that time it should ask like enter value of a and b or you can say enter value of a or enter two numbers and at that time i want to enter values maybe four or five or five or four or maybe one or two any values at that time only so at that time how can we take input from the user using scanner function how can we use this scanner function c here i am just declaring three variables right and i am taking value something like this what is that syntax of scanner function first of all what does this mean formatted input it means the input the input the inputted data has been assigned in a specific format see i am taking something like this see first of all let me discuss what is this formatted input formatted input means the inputted data has been arranged in a specific format so now the general syntax of the scanner function is what we generally like write this word scanf right and then here we write control string or that convergent string anything you can say and that would be written in this double quotes after a comma and here we will write what list of ah addresses of the variables or you can say some arguments i am saying like here argument 1 argument 2 up to zone or you can say argument up to argument n and after that semicolon or here you can say list of arguments are what simply the address of variables let me discuss this thing that the control string or you can say this convergent string it is between these quotation mark right that is what the syntax of writing scanner function and what is there in this control string first character first is what character is what percentage the conversion character right after that what you will write the type of data you are going to take here the type of data is what integer so that is why for integer i'll write d if the data is float the data type is float then this percentage this conversion character would be same but for float i'll write f if you take character for that you will write percentage c got it i'm taking here a and b integer type so that is why i'm writing percentage d why i am writing 2 times d because i want to take 2 inputs from the user that is why i am writing 2 percentage d but remember this thing there is no comma between these format specifier otherwise it will give error right in this control string there should be no comma right after that just close these quotation marks and then you have to put a comma after that what you will put address of a this is what address of operator coma address of b now see whenever compiler will come to this line when when you compile compiler will execute this line then first is what percentage d according to this according to this format specifier what compiler know yeah it has to take integer value so just after the closing of this it will check out for that address right that argument why this address of operator we are using c when first of all control will go to the main function first line of the main function and in memory suppose this is a memory randomly i am assigning what a b and sum three variables we have declared means some memory space has been assigned to these variables suppose thousand here we have 2000 here we have suppose one zero two for address so for sum but we haven't initialized anything in a b a b and c now whenever we take input from the user obviously that input that data should be stored in memory somewhere where that data should be stored you have to give address the location that is why i'm using address of operator address of in which variable you want to store i want to store in a so first whatever data you will enter whenever you will run the program that would be stored in a suppose i i will enter 5 so 5 would be stored in here suppose here i write b and here you write a at that time the data the first data you will enter that would be stored in address of where location of b variable means uh address of b so here that data would be stored at b right whatever variable name you will write according to that the data would be stored here now second again we have percentage d means it has to take one more input so it will map this thing to the second argument after this coma right first argument for this for this one second argument this this percentage d for second argument so whatever you will enter that would be stored address of b right address of b is 2 000 so that would be stored here suppose i am entering 4 right what is that actual process that is this thing whenever we call main function then in memory some uh that some memory would be assigned to main function right when we do this function call right in main memory fine in main form in main suppose we have a b and sum like this this is what main a b and sum and whenever we call scanner function then another sum memory would be assigned to the scanner function this is what our memory right main memory some memory memory would be assigned to the scanner function within this function call it would be executed right so now in this scanner function we have percentage d and in percentage d like what address of a it will return what address of address of a is what suppose thousand so here we have thousand so that is why it is what linking here reference would be passed address would be passed so whatever value you will get from the user that would be stored at this address this is what the meaning of this address of operator it will return the address of a address of a thousands here so ultimately the value would be stored here address of b means 2000 so the value would be stored here so this is what pointer it is what pointer pointing to this one this data this concept we will get when we will discuss pointers in detail right and see here just simply means to put a value obviously we need address where you want to put that data into memory and that address we will get through this address of operator address of variable a address or variable b b obviously we want address of a and b if you want to put data here right that is why we are using here address of operator that is most and between these arguments there should be a coma right so tell me in comment box here comma is acting as a separator or operator we have already discussed about coma operators right you can relate it with the real life example if you want um to send me a gift then obviously you need a address of mine so you can ask me and i'll tell you the address and then you can send me same funda you can apply here if you want to put a value then obviously you need address address of that variable and then you can put that value right so this is what ah general syntax of this scanner function right and the interesting factor the interesting fact about scanf function is what this is a function what value it will return what it will return scanner function will return the number of arguments the number of inputs it is taking from the user here how many inputs it is taking from the user 1 n2 2 inputs so it will return what 2 how you can print that value or that also will discuss later now percentage d is for integer now here you can also assign a width like if suppose i am writing here percentage d 4 it will specify it will tell the width of the number you will take from the user suppose while entering the value this i'm writing percentage 4d means the width is 4 so it will map to this one a and i'm i'm entering the data 1 2 3 4 5. this number i'm entering this is integer obviously but the width is four only so it will take one two three four these four and it will store these four this number one two three four in a right and after that this five it will take in d because here one more percentage the the is there so here 5 automatically see if you enter this if you uh enter at that time this number and if you press enter then automatically it will not ask for value of b it will take 1 2 3 4 for a and 5 for b that is why the reason that is why we are you know the specifying this width but better this is what abnormal behavior because i want number 1 2 3 4 5 for a and suppose 45 for b but it is taking one two three four four a and five for b automatically so i don't want this thing so that is why we generally we don't specify here with we specify only percentage d right now next is what this is for integer and suppose if you write here percentage f what will happen the data is what integer but i am it is expecting what the data is float so if you enter 5 then it will not take anything it will store 0 in a right and in b if you enter 5 then it will store in 5 because it is what integer and when you print value of a and b then a value would be 0 and b value would be 5 right so that is why the format specifier you have to take care of this thing for f for float you can write percentage f for character you can write percentage c and rather than these there are many more format specifier also that also will discuss in a separate video right see suppose input i am taking like this 12 here i am writing 12.53 and here i am writing a character c so now this is what this type of input we can take using scanf this is what formatted input first is what integer second is what float third is what character it's okay you can take mixed data type right in this case what you have to write in scanf function what you have to write i am declaring three type of variables integer float and character so in scan of what you can do first suppose i am taking integer right percentage d for float percentage f for character percentage c that's it this is the control string then coma and then address off for integer i am taking variable name is a address of for float it's b and for character it's ch that is fine we can take mixed error type right so this is what the formatted input right now and in case of float for float percentage f for double we write percentage lf small lf and for long double we write percentage capital l and f is small right and in float we can also take that exp value in exponential form right suppose if i am taking the value percentage f in b and when i am inputting the value then i am writing here 4 7 6 3 and e minus 1 you can also write this thing and when you will print value of b then what value will be printed 4 it is minus 1 so that is why here 0.76300 because float is taking uh after decimal 6 visits right you can check out this thing and you can tell me if i am wrong right and you have to ah see i have done i have told you the basic about scanner function but you can use what you can do what informant that with you can provide in a percentage that means float value also suppose i am providing here percentage 4f in that case what will happen and what you can do when you will enter the data then what you can do you can specify here 1 2.3456 what data it will take forward width is only four the way so one two decimal also one width three and four twelve point three zero zero zero zero zero it will take this data it will ignore this one right and suppose next is a percentage d next is integer or maybe float then it will assign this value to that one integer or float right that is why we avoid using this width right because of this abnormal behavior so you can check out you can just write down a simple program and you can check out the different different variations right maybe you can write down here percentage uh heroes also width and here also or maybe you can write down here i'm taking the address of a a is what integer but here i am writing percentage f or percentage c then what value it will take what it will print right so you have to practice yourself about the scanner function means other variations of scanner functions and we can also enter a string for string the format specifier is percentage s that will discuss in detail when will be this we will be discussing strings and c so now i am writing here something like this see i am taking one more integer variable suppose x and here i am writing x is equal to scanf and here i am taking both variable integers so percentage d and percentage d and address of nv right and when you want to print then what how you will print the data printf sum is equal to format specifier percentage d like this and just you will write down the name of the variable that is sum here also i am using that format specify percentage d because the value of samsung i am taking of integer type that is why i am taking uh the percentage d so whenever you will write percentage d here that will map with that argument some from here it will fetch the value of sum suppose here 5 and 5 so sum is 10 so it will print if this function same execution would be there when this would be called printf function then some memory would be assigned to printf function2 in this main memory in your ram right so now you have to tell me if i print this x then what value you will get here in this case right because i have told you scanf will return the number of input it is taking from the user so in this case what value would be returning means if you print x then what value you will get and here also what other variations you can try like percentage d one percentage d you can write and here you can write address of an address will be at that time what you will get right what output you will get what value in x you will get or maybe three percentage d i'm writing and here i'm taking only two variables two arguments at that time what you will get so these things you have to practice at your own it's not like that everything i'm going to discuss in this video video would be very lengthy and when you practice within or with your own hand different different various variations of this kind of function then you will get better and that would be in your memory for a longer time right and i have already told you scan a function the definition this has been defined in this library stdio dotage that is why i am including this library in your program to tell the compiler what is meaning of the scanner function because compiler don't know that meaning of scanner function is to take the input from the user we know how compiler will know compiler to compiler we have to tell the definition the meaning right we have to tell we have to give some instructions according to that compiler can process something so that definition that meaning is here in this stdio file that is why i'm including this one right so that is i guess about scanner function if you have any doubt about scanner function you can ask me in comment box right and um or you can message me on my instagram account so in this video i will be discussing about formatted output function that is printf function in c so now i'll see in the next video till then bye bye take
