With timestamps:

00:00 - in this lecture we are going to talk
00:01 - about what is in fixed prefix and
00:04 - postfix expressions as well as how to
00:06 - evaluate these expressions see the
00:09 - evaluation of these expressions are you
00:12 - can say it's an important application of
00:14 - stack right so now first of all what is
00:16 - an expression see expression is
00:19 - basically you can say it it contains
00:22 - constraints may be variables or some
00:25 - symbols operators parentheses something
00:28 - like this
00:29 - right now see if I write something like
00:32 - this 5 plus 1 this is what an expression
00:37 - because it is containing constant plus
00:39 - this is what a symbol or you can say
00:40 - operator right if I write P plus Q this
00:44 - is also an expression and if I write a
00:47 - plus 5 this is also an expression right
00:52 - here generally we write down expression
00:55 - in this form see first of all we will be
00:58 - right what operand here we will write
01:04 - operator and here you will write again
01:08 - operand here in this video specifically
01:11 - I am talking about binary operators
01:13 - right binary operator means binary
01:16 - operator exactly needs two operands
01:19 - right there are some operators which
01:22 - needs only one operand also some
01:24 - operators needs three operands but here
01:27 - I am talking about binary operators it
01:29 - is going to take to open one is this one
01:31 - one is this one right this point is very
01:34 - important right now this operand here in
01:38 - this case Co operand is what a this is
01:40 - what operator and this is what another
01:42 - operand but it is not compulsory that
01:45 - this expression sorry this operand is a
01:48 - simple operand or you can say simple
01:51 - constant or variable it itself may be a
01:55 - expression right see now if I write
01:59 - something like this a minus one and here
02:03 - i am writing plus five so this is also
02:07 - an expression now here for this five one
02:11 - operand is sorry for this operator plus
02:13 - one is one operand is five another
02:16 - operand is this one this complete
02:18 - expression is in operand right and
02:21 - within this operator also this is
02:23 - operator and for this operator this is
02:25 - one open this is another operator right
02:27 - so this power plant itself may be a
02:31 - expression C generally we write our
02:34 - expression in the in this form only
02:36 - right you can say operand then operator
02:38 - then operand again right operator is
02:41 - between operands right so this form is
02:44 - known as in fixed expression this
02:48 - representation of expression is known as
02:50 - this is known as in fix expression right
02:53 - or in fix notation you can say now how
02:55 - do you when weight these expressions see
02:58 - expression I have told you it is what it
03:00 - is a combination of you can take
03:02 - constants variables and some symbols
03:04 - which are arranged according to some
03:07 - rules some grammar rules right and we
03:10 - parse these expressions according to the
03:13 - rules on right now
03:15 - these are simple expression see you can
03:17 - say how to evaluate this 1 5 plus 1 is
03:19 - what 6 suppose I am taking a complex
03:22 - expression in that case what you will do
03:25 - see suppose I am taking 5 plus 1 into 6
03:30 - this is the expression this is the in
03:32 - fixed expression right now how to
03:35 - evaluate this thing see the output can
03:37 - be may be you can evaluate something
03:39 - like this 5 plus 1 is 6 6 into 6 that is
03:43 - 36 another case may be first of all you
03:47 - evaluate this one means 5 plus 6 into 1
03:51 - is 6 and the answer is 11 now out of B
03:56 - is 2 output which one is correct right
03:58 - because obviously only one would be
04:00 - correct so you need to evaluate this
04:03 - expression we need to process this
04:05 - we need to parse it according to the
04:07 - rules now what are those rules
04:09 - evaluation of in fixed expression is
04:11 - following some precedence and
04:13 - associativity rules so you should know
04:15 - the precedence and associativity of the
04:17 - operators right that is very important
04:19 - see generally we use parenthesis or plus
04:23 - minus or divide or a multiplication so I
04:25 - am going to tell
04:26 - that residence of these operators the
04:28 - complete precedence of all the operators
04:31 - and associativity with associativity
04:33 - I'll discuss in a separate video so the
04:36 - precedence chart is what first is what
04:38 - having this parenthesis are having
04:41 - higher precedence or you can say highest
04:43 - precedence then we have exponential or
04:45 - you can say power next is multiplication
04:48 - and divide and next is plus n minus
04:51 - right now first second precedence third
04:54 - or you can say priority of these
04:56 - operators plus associate associativity
04:57 - is this is having right-to-left this is
05:00 - having left to right and this is having
05:02 - left to right where you are going to use
05:03 - these associativity I'm going to tell
05:05 - you that thing also now see to evaluate
05:08 - this expression check out the precedence
05:10 - of the operators two operators we have
05:13 - precedence of Straker you can see a
05:15 - multiplication is higher than this plus
05:17 - so first of all you need to evaluate
05:20 - this one right means 6 into 1 for this
05:24 - operator we are talking about binary
05:27 - operator so one operand is this one one
05:29 - oprand would be this one right
05:31 - so this is something like this you can
05:33 - say 6 into 1 so now that is 6 now 5 plus
05:39 - 6 is what 11 so this should be the
05:42 - correct answer this is how we are going
05:44 - to be going to evaluate this expression
05:45 - now if you want to evaluate this 5 plus
05:50 - 1 first rather than this multiplication
05:53 - right although this is having higher
05:55 - precedence but you want to evaluate 5
05:57 - plus 1 first right so you can write
06:00 - something like this now parenthesis is
06:03 - having higher precedence than this
06:05 - district so now the answer would be what
06:07 - 5 plus 1 is 6 6 into 6 is 36 in this
06:11 - case answer is this one correct answer
06:13 - is this one right so these rules are
06:16 - very important now here suppose I am
06:19 - taking one more complex expression
06:21 - something like this now for this
06:24 - expression how we are going to evaluate
06:26 - this in fix expression same we are going
06:29 - to follow the precedence and
06:30 - associativity rules right check out the
06:32 - precedence of these operators now here
06:33 - in this case see this multiplication and
06:37 - divide both are having same precedence
06:38 - so now
06:39 - the problem is in which one you are
06:41 - going to evaluate first so now in this
06:44 - case to resolve this conflict you need
06:47 - to check the sociate ility right
06:49 - associativity of these operators are
06:51 - left to right it means you are going to
06:54 - scan this from left right from left to
06:56 - right you are going to move and
06:57 - whichever operator you will find first
07:00 - you are going to evaluate that thing
07:02 - first that operator first right so while
07:05 - going from left to right this s trick
07:07 - this multiplication is first rather than
07:09 - this divided so you are going to
07:10 - evaluate this one first so now 1 plus n
07:14 - plus 30 divided by 5 now in this you are
07:18 - going to evaluate this one because this
07:20 - is having higher precedence so now 1
07:22 - plus 10 plus 6 now again I have two
07:25 - operators plus and plus both are having
07:27 - same precedence so which you are going
07:28 - to evaluate first
07:29 - although the answer will be same if you
07:32 - evaluate this one first or this one
07:33 - first but you should follow the rules
07:35 - right and rules are check out the
07:37 - society that is that is left to right so
07:40 - first of all left to right means this
07:41 - plus we are going to evaluate first
07:43 - means 11 plus 6 so now the answer will
07:47 - be 17 now take another example where the
07:51 - sauce activity would be right-to-left
07:52 - see I'm taking this example so now to
07:55 - evaluate this expression check out the
07:57 - precedence of the operators two
07:59 - operators have having that is same
08:00 - precedence so check out the
08:02 - associativity that is a right to left
08:03 - right so in this case you are going to
08:06 - scan this from right so first is this
08:09 - one so first we are going to evaluate
08:11 - this one this is what a power operator
08:13 - so 2 raised to power 3 is what it should
08:17 - be 8 and now 2 raised to power 8 I guess
08:20 - this should be 256 you check out this
08:23 - thing again if see this is the right
08:27 - answer but if you evaluate from this one
08:29 - then answer would be 2 raised to power 2
08:32 - that is 4 4 raised to power 3 that is 64
08:37 - so that is not the correct answer then
08:39 - that is why when you are evaluating an
08:41 - infix expression you need to take care
08:44 - of some extra rules that is precedence
08:47 - and associativity rules of the operators
08:49 - right
08:51 - and what you can say you can write this
08:54 - in fix expression with the help of
08:56 - parentheses if parentheses are there
08:58 - then you can say no need to check out
09:01 - the precedence and associativity rules
09:03 - right like suppose if you are writing
09:05 - then I guess you can easily evaluate
09:07 - this one right so now you can say that
09:10 - the passing of this in fixed expression
09:12 - or you can say processing off in fix
09:14 - expression is difficult right and it is
09:17 - also costly in terms of time as well as
09:20 - in terms of you can say that memory
09:23 - consumption right so now here we have
09:25 - two more expressions one is prefix and
09:29 - another is postfix expression there in
09:32 - that case you don't need any extra
09:34 - information to evaluate those
09:36 - expressions like precedence for
09:38 - associativity rules fine how to evaluate
09:41 - these expression that thing also we will
09:43 - discuss with example in next video first
09:46 - of all in this video we will see what
09:48 - are those expressions see prefix this is
09:54 - also known as you can say polish
09:55 - notation so how to represent this
09:58 - expression see in this case here you
10:02 - will write first of all operator would
10:04 - be there then our print and operand two
10:10 - operands would be there and before these
10:12 - operands we have operator that is prefix
10:14 - means specially right now see if this is
10:19 - what are in fixed expression that is
10:21 - five plus one then for this the prefix
10:24 - expression would be this operator would
10:27 - be before these operands that is five
10:29 - and one now this is what prefix
10:30 - expression corresponding to this infix
10:32 - expression now here also it is not
10:35 - compulsory that these operands would be
10:37 - a constant or some variable simple
10:40 - constant or variable these operands may
10:43 - be a complex expression itself right
10:46 - like in this case we have discussed fine
10:49 - C let us take one example suppose I am
10:51 - taking this example a into B plus C this
10:56 - is an fix expression of how you will
10:58 - write this into prefix expression C
11:00 - check out the precedence of this this
11:02 - thing I guess I
11:03 - disgust you can check out that video in
11:05 - the cyber and how to convert infix to
11:06 - graphics so first of all you will
11:08 - convert this one that is Asterix a B
11:10 - right plus C now this is one open this
11:13 - is another open now for this operator
11:16 - these are two operands here you write
11:18 - plus a B and C so this is what the
11:21 - prefix corresponding to the same fixed
11:23 - expression right and while you evaluate
11:26 - this expression you don't need any extra
11:28 - information you don't need any
11:30 - precedence or associativity rule how you
11:32 - will convert it sorry how you will
11:34 - evaluate this that thing we'll discuss
11:36 - in next video fine now what about
11:38 - postfix expression it is also known as
11:43 - reverse polish notation right now in
11:49 - postfix expression you will represent it
11:52 - something like this a print print and
11:57 - here you will have operator fine
12:01 - operator would be after these operands
12:04 - if you have five plus one then
12:06 - corresponding to this the postfix
12:08 - expression would be this operator would
12:09 - be after or prints that is five one and
12:12 - plus how we convert this infix to
12:15 - postfix that also I have discussed you
12:17 - can check out that video in this I
12:18 - button right now in this case also these
12:22 - operands may be a complex expression
12:25 - itself it is not compulsory that these
12:28 - are simple constant or variables same
12:30 - example you can take this one only into
12:33 - B plus C now to convert this into
12:35 - postfix right have to convert first of
12:39 - all will convert this one abs tricks
12:41 - right then we have plus and C so for
12:44 - this plus this is one operand this is
12:46 - another operand so now for this this
12:50 - postfix would be this operator would be
12:52 - after these operands that is C and plus
12:54 - now this is what the post fix expression
12:56 - for this in fix expression right and
13:00 - interesting point here also for
13:02 - evaluating this post fix or reverse
13:05 - polish notation you don't need any extra
13:08 - information or any you can say
13:10 - precedence or associativity rule
13:12 - something like this right so the parsing
13:15 - of this post fix and
13:16 - Fix expressions are simple as compared
13:20 - to in fix expression right you can say
13:23 - in terms of memory also memory
13:25 - consumption is also less and time taken
13:27 - is also less so you can say a computer
13:29 - can easily read these expression prefix
13:32 - and postfix and can parse these
13:35 - expression easily but a human being can
13:38 - easily read in fix expression something
13:41 - like this right and can understand these
13:43 - expression more easy rather than prefix
13:46 - and postfix for computer purpose these
13:49 - expression are good for us these type of
13:52 - expressions are good
13:53 - so see here you can say these three are
13:56 - different through different and you can
13:59 - say equivalent ways to write expressions
14:02 - fine so now in next video we will
14:06 - discuss how to evaluate prefix and
14:08 - postfix expression with example fine so
14:12 - I'll so in the next video is in BA BA
14:13 - retake

Cleaned transcript:

in this lecture we are going to talk about what is in fixed prefix and postfix expressions as well as how to evaluate these expressions see the evaluation of these expressions are you can say it's an important application of stack right so now first of all what is an expression see expression is basically you can say it it contains constraints may be variables or some symbols operators parentheses something like this right now see if I write something like this 5 plus 1 this is what an expression because it is containing constant plus this is what a symbol or you can say operator right if I write P plus Q this is also an expression and if I write a plus 5 this is also an expression right here generally we write down expression in this form see first of all we will be right what operand here we will write operator and here you will write again operand here in this video specifically I am talking about binary operators right binary operator means binary operator exactly needs two operands right there are some operators which needs only one operand also some operators needs three operands but here I am talking about binary operators it is going to take to open one is this one one is this one right this point is very important right now this operand here in this case Co operand is what a this is what operator and this is what another operand but it is not compulsory that this expression sorry this operand is a simple operand or you can say simple constant or variable it itself may be a expression right see now if I write something like this a minus one and here i am writing plus five so this is also an expression now here for this five one operand is sorry for this operator plus one is one operand is five another operand is this one this complete expression is in operand right and within this operator also this is operator and for this operator this is one open this is another operator right so this power plant itself may be a expression C generally we write our expression in the in this form only right you can say operand then operator then operand again right operator is between operands right so this form is known as in fixed expression this representation of expression is known as this is known as in fix expression right or in fix notation you can say now how do you when weight these expressions see expression I have told you it is what it is a combination of you can take constants variables and some symbols which are arranged according to some rules some grammar rules right and we parse these expressions according to the rules on right now these are simple expression see you can say how to evaluate this 1 5 plus 1 is what 6 suppose I am taking a complex expression in that case what you will do see suppose I am taking 5 plus 1 into 6 this is the expression this is the in fixed expression right now how to evaluate this thing see the output can be may be you can evaluate something like this 5 plus 1 is 6 6 into 6 that is 36 another case may be first of all you evaluate this one means 5 plus 6 into 1 is 6 and the answer is 11 now out of B is 2 output which one is correct right because obviously only one would be correct so you need to evaluate this expression we need to process this we need to parse it according to the rules now what are those rules evaluation of in fixed expression is following some precedence and associativity rules so you should know the precedence and associativity of the operators right that is very important see generally we use parenthesis or plus minus or divide or a multiplication so I am going to tell that residence of these operators the complete precedence of all the operators and associativity with associativity I'll discuss in a separate video so the precedence chart is what first is what having this parenthesis are having higher precedence or you can say highest precedence then we have exponential or you can say power next is multiplication and divide and next is plus n minus right now first second precedence third or you can say priority of these operators plus associate associativity is this is having righttoleft this is having left to right and this is having left to right where you are going to use these associativity I'm going to tell you that thing also now see to evaluate this expression check out the precedence of the operators two operators we have precedence of Straker you can see a multiplication is higher than this plus so first of all you need to evaluate this one right means 6 into 1 for this operator we are talking about binary operator so one operand is this one one oprand would be this one right so this is something like this you can say 6 into 1 so now that is 6 now 5 plus 6 is what 11 so this should be the correct answer this is how we are going to be going to evaluate this expression now if you want to evaluate this 5 plus 1 first rather than this multiplication right although this is having higher precedence but you want to evaluate 5 plus 1 first right so you can write something like this now parenthesis is having higher precedence than this district so now the answer would be what 5 plus 1 is 6 6 into 6 is 36 in this case answer is this one correct answer is this one right so these rules are very important now here suppose I am taking one more complex expression something like this now for this expression how we are going to evaluate this in fix expression same we are going to follow the precedence and associativity rules right check out the precedence of these operators now here in this case see this multiplication and divide both are having same precedence so now the problem is in which one you are going to evaluate first so now in this case to resolve this conflict you need to check the sociate ility right associativity of these operators are left to right it means you are going to scan this from left right from left to right you are going to move and whichever operator you will find first you are going to evaluate that thing first that operator first right so while going from left to right this s trick this multiplication is first rather than this divided so you are going to evaluate this one first so now 1 plus n plus 30 divided by 5 now in this you are going to evaluate this one because this is having higher precedence so now 1 plus 10 plus 6 now again I have two operators plus and plus both are having same precedence so which you are going to evaluate first although the answer will be same if you evaluate this one first or this one first but you should follow the rules right and rules are check out the society that is that is left to right so first of all left to right means this plus we are going to evaluate first means 11 plus 6 so now the answer will be 17 now take another example where the sauce activity would be righttoleft see I'm taking this example so now to evaluate this expression check out the precedence of the operators two operators have having that is same precedence so check out the associativity that is a right to left right so in this case you are going to scan this from right so first is this one so first we are going to evaluate this one this is what a power operator so 2 raised to power 3 is what it should be 8 and now 2 raised to power 8 I guess this should be 256 you check out this thing again if see this is the right answer but if you evaluate from this one then answer would be 2 raised to power 2 that is 4 4 raised to power 3 that is 64 so that is not the correct answer then that is why when you are evaluating an infix expression you need to take care of some extra rules that is precedence and associativity rules of the operators right and what you can say you can write this in fix expression with the help of parentheses if parentheses are there then you can say no need to check out the precedence and associativity rules right like suppose if you are writing then I guess you can easily evaluate this one right so now you can say that the passing of this in fixed expression or you can say processing off in fix expression is difficult right and it is also costly in terms of time as well as in terms of you can say that memory consumption right so now here we have two more expressions one is prefix and another is postfix expression there in that case you don't need any extra information to evaluate those expressions like precedence for associativity rules fine how to evaluate these expression that thing also we will discuss with example in next video first of all in this video we will see what are those expressions see prefix this is also known as you can say polish notation so how to represent this expression see in this case here you will write first of all operator would be there then our print and operand two operands would be there and before these operands we have operator that is prefix means specially right now see if this is what are in fixed expression that is five plus one then for this the prefix expression would be this operator would be before these operands that is five and one now this is what prefix expression corresponding to this infix expression now here also it is not compulsory that these operands would be a constant or some variable simple constant or variable these operands may be a complex expression itself right like in this case we have discussed fine C let us take one example suppose I am taking this example a into B plus C this is an fix expression of how you will write this into prefix expression C check out the precedence of this this thing I guess I disgust you can check out that video in the cyber and how to convert infix to graphics so first of all you will convert this one that is Asterix a B right plus C now this is one open this is another open now for this operator these are two operands here you write plus a B and C so this is what the prefix corresponding to the same fixed expression right and while you evaluate this expression you don't need any extra information you don't need any precedence or associativity rule how you will convert it sorry how you will evaluate this that thing we'll discuss in next video fine now what about postfix expression it is also known as reverse polish notation right now in postfix expression you will represent it something like this a print print and here you will have operator fine operator would be after these operands if you have five plus one then corresponding to this the postfix expression would be this operator would be after or prints that is five one and plus how we convert this infix to postfix that also I have discussed you can check out that video in this I button right now in this case also these operands may be a complex expression itself it is not compulsory that these are simple constant or variables same example you can take this one only into B plus C now to convert this into postfix right have to convert first of all will convert this one abs tricks right then we have plus and C so for this plus this is one operand this is another operand so now for this this postfix would be this operator would be after these operands that is C and plus now this is what the post fix expression for this in fix expression right and interesting point here also for evaluating this post fix or reverse polish notation you don't need any extra information or any you can say precedence or associativity rule something like this right so the parsing of this post fix and Fix expressions are simple as compared to in fix expression right you can say in terms of memory also memory consumption is also less and time taken is also less so you can say a computer can easily read these expression prefix and postfix and can parse these expression easily but a human being can easily read in fix expression something like this right and can understand these expression more easy rather than prefix and postfix for computer purpose these expression are good for us these type of expressions are good so see here you can say these three are different through different and you can say equivalent ways to write expressions fine so now in next video we will discuss how to evaluate prefix and postfix expression with example fine so I'll so in the next video is in BA BA retake
