With timestamps:

00:00 - so in this video I am going to talk
00:01 - about various operations performed on
00:04 - arrays in data structure on 1d arrays
00:06 - specifically see I have already
00:08 - discussed the fundamentals of arrays
00:10 - what is need of Faerie array declaration
00:11 - in acid ization of array memory
00:13 - representation of air in the previous
00:15 - video so if you check out that video
00:18 - then I'll provide you the link in the
00:20 - description box you can check out there
00:21 - fine in this video we'll talk about the
00:23 - operations on array
00:25 - although there are many operations can
00:27 - be performed on array but basically the
00:29 - most important operations we are going
00:31 - to discuss that is traversal of array
00:33 - insertion in array deletion of any data
00:36 - from the array searching of any key if
00:39 - element exists or not in the array
00:41 - sorting of array we have already
00:42 - discussed searching and sorting
00:44 - techniques fine you can check out in the
00:46 - playlist in this video I am going to
00:48 - talk about how to traverse an array and
00:51 - how to insert a data in the array with
00:55 - their good because insertion is also of
00:59 - three types may be you can insert
01:01 - element at starting of the array at the
01:04 - end position of the array or at any
01:07 - position at any specific position in the
01:09 - array
01:09 - fine so I am going to talk about these
01:11 - operations traversal and insertion with
01:13 - their code fine see besides these
01:16 - operations many operations can be there
01:18 - like find a minimum and maximum element
01:20 - from the array find duplicate elements
01:22 - from the array reverse of an array find
01:25 - second largest element from the array so
01:28 - now first of all we'll discuss
01:30 - traversing of an you can say travel cell
01:32 - of array now what does this travel cell
01:34 - means traversal means visiting every
01:38 - element of the array exactly once fine
01:44 - suppose you can take one example you
01:46 - have five apples and you are going to
01:50 - point your finger at first Apple first
01:53 - of all then second then third and fourth
01:55 - and then fifth something like this you
01:56 - are traversing all the apples so thus in
02:00 - this case we are going to traverse all
02:02 - the elements of the array and output
02:04 - should be what you should print the
02:06 - elements of the array what whatever the
02:08 - elements in the array we are going to
02:09 - print those elements so I am going to
02:11 - see
02:12 - this with the help of a code see let us
02:15 - take we have this Airy array name is a
02:18 - the size of arrays five index would be
02:21 - from zero to four and these are the
02:24 - elements in the array how the data is to
02:27 - be stored because each integer is going
02:29 - to take four bytes in today in typical
02:31 - compilers so address suppose base
02:33 - address memory manager has allocated to
02:36 - the array base address that is hundreds
02:38 - so next next for the next integer for
02:41 - the next element of the array that this
02:42 - would be worth 100 plus four because
02:45 - this this one integer will take four
02:47 - bytes so that is one zero four one zero
02:49 - is something like this I have already
02:50 - discussed in the previous video this
02:53 - concept and detail fine
02:55 - so say now how we are going to traverse
02:57 - theory we are going to take one variable
02:59 - I started from zero now see what is
03:03 - there at this place six we are going to
03:06 - print this six now this I would be
03:08 - implemented I is here now now here what
03:11 - is the value two then two would be
03:13 - printed then I would be implemented then
03:15 - here then here now and like this the
03:17 - values would be printed and I would go
03:20 - from zero to four that is from zero to
03:22 - size minus one size of air is five so
03:25 - size minus one this is how we are going
03:27 - to traverse the area and you are going
03:29 - to write down the code for this now how
03:31 - we are going to write down the code
03:32 - first of all see I am also going to
03:35 - discuss how to initialize there a how we
03:37 - are going to take these elements and
03:40 - initialization would be of two types at
03:43 - compile time at runtime so in this food
03:45 - at runtime I'm going to ask from the
03:47 - user what elements the user wants in the
03:49 - area how to populate the area at runtime
03:51 - now see let us check so initially we
03:55 - don't have anything in this area so
03:58 - first of all what we will do we will
04:00 - just write header files and all I think
04:01 - you can write that thing now let us take
04:04 - I am going to declare an array of size
04:06 - 50 see actually when you are using the
04:10 - array when you are used when you are
04:12 - storing the integers and you can store
04:13 - only ten in pieces
04:14 - it's up to you less than 50 but you
04:16 - cannot store more than 60 why we are
04:19 - taking this 50 because see it is fixed
04:22 - size
04:22 - once you once you declare the size of
04:24 - ferry at compile-time you cannot change
04:26 - it at runtime find that is drawback of
04:28 - there but one another drawback is that
04:30 - it arrays not having any bounds checking
04:34 - property at runtime so it is the job of
04:37 - the programmer only to check to write
04:38 - down the code for checking the boundary
04:40 - of the areas in program only fine now
04:44 - what is that bounds checking I will
04:45 - discuss later so see I have declared
04:48 - array of size 50 now how many bytes
04:50 - would be allocated by the memory manager
04:52 - 15 to 4 that is 200 bytes so something
04:55 - like this if this is our memory so now
04:58 - see in the memory in the memory how many
05:01 - bytes would be allocated and that is 550
05:04 - into 4 because one case it will take 4
05:06 - bytes that is 200 bytes so suppose the
05:08 - base address is 100 so 100 to $2.99
05:12 - these bytes should be allocated to this
05:14 - array this space but here we don't have
05:17 - any data now we are going to take the
05:20 - input from the user
05:22 - now next thing is you can ask from the
05:24 - user that how many data the user want to
05:28 - insert in this area what is the actual
05:30 - size of the array this is the maximum
05:32 - size fine this is the maximum limit so
05:35 - see you can ask from the user printf
05:39 - inter size of Faerie print F is a
05:45 - function standard function that is used
05:47 - to print something on output screen and
05:49 - scanf is used to take input from the
05:53 - user now user will enter what suppose
05:56 - size is 5 I want to insert 5 elements
06:00 - only so here you will write percentage D
06:03 - because for integer the format
06:05 - specifiers percentage is d for float it
06:07 - is percentage so here you will write
06:09 - address off now if user will give
06:12 - something some input that is some
06:15 - integer value then obviously that value
06:17 - should be stored in memory and how
06:19 - values to be stored in memory using
06:20 - variable so you have to declare one
06:23 - another variable fine so let us suppose
06:26 - we have declared array and I am going to
06:27 - declare here
06:29 - the one variable name that is sighs fine
06:33 - and I'm going to write here address of
06:35 - sighs so now the compiler will see this
06:40 - line then what compiler will do compiler
06:43 - will allocate for this variable it will
06:46 - allocate four bytes
06:47 - somewhere in the memory from three zero
06:50 - four two three zero seven four the
06:55 - variable name sighs fine now this is
07:00 - what address of operator address of
07:01 - operator operator means when user wants
07:03 - to insert when user will insert the data
07:05 - then compiler should know at which
07:07 - address you are going to store the value
07:09 - so this address means this would return
07:11 - at 3:04 you are going to store the value
07:14 - so suppose user enter the size five so
07:17 - here you will write here what what has
07:19 - to be inserted five would be converted
07:21 - into binary form and five would be
07:22 - inserted so here you will insert five in
07:26 - these four bytes fine now we want to
07:30 - populate the data in this area now the
07:32 - size is five so you I want to and insert
07:35 - five venues fine now how the value is to
07:38 - be inserted I would be started from 0
07:40 - till for L size minus one you have to
07:44 - take one for loop I have already
07:46 - discussed there so what you will write
07:48 - you will write what printf enter
07:54 - elements of array and you will write one
08:00 - for loop and this loop could be started
08:02 - I value would be started from zero I
08:04 - would be less than less than size less
08:10 - than five that is for a zero to four
08:12 - index would be zero to four and that is
08:14 - I plus plus and in for loop you will
08:17 - write because to take input from the
08:19 - user views kind of function here you
08:22 - will write same percentage D format
08:23 - specifier and address or where you are
08:26 - going to store the values first value
08:28 - would be stored at zeroth location means
08:30 - at this location in these four bytes
08:34 - one two three four these four bytes next
08:39 - will be stored in these four bytes
08:41 - so now here you write a oh I find a
08:49 - dress off area name is a and at which
08:52 - index are going to store index will be
08:54 - started from 0 to 1 2 3 4 this is how we
08:57 - are going I am going to represent it 0 1
08:59 - 2 3 4 each block is having these 4 bytes
09:02 - fine so this address is to be located
09:03 - now when I value is 0 I value is 0 then
09:07 - value would be stored at address of a of
09:09 - 0 address means add value hundred a of 0
09:15 - of 0 means at this index fine
09:18 - so now user will insert the values
09:21 - suppose user has inserted the values 6
09:24 - to 0 for n 5 because Luke would be
09:27 - started from I is 0 2 sizes 5 0 to 4 so
09:32 - that is why 0 to 4 there it would be
09:34 - populated now now what how that this air
09:37 - is to be traversed now we are going to
09:39 - again start a loop from here we are
09:43 - going to check we are going to access
09:45 - this element as we are going to print
09:47 - output should be you are going to print
09:49 - the array what are the elements in there
09:50 - you are going to print that fine
09:52 - so for printing you will write 1 1 for
09:55 - loop again for loop would be there I
09:56 - would be from 0 to 4 fine
09:59 - so you can write here printf
10:11 - elements in array are after printf you
10:13 - will write one for loop I would be
10:16 - started from zero I would be less than
10:19 - size but you can say less than equal to
10:23 - size minus 1 I plus plus and here within
10:27 - this for loop you will write good now we
10:28 - are going to print a diary so you will
10:30 - not write scanf scanf is for taking
10:32 - input you'll write here printf % is DS
10:37 - for integer because datatype isn't easy
10:39 - and here simply you will write array of
10:41 - i because in the previous video i have
10:44 - told you for accessing the element of
10:46 - dairy you simply write array name and
10:48 - breakers will write index so i would be
10:52 - 0 then a of 0 would be printed the 6
10:54 - then i plus plus i is 1 then a of 1
10:57 - would be printed that is 2 like this
10:59 - from 0 to 4 values will be printed so
11:02 - this is now the traversing of the n see
11:06 - here we are using one more variable that
11:07 - is i so you have to declare this
11:09 - variable here before that is i fine so i
11:14 - guess you can write the header files and
11:15 - you can execute this program so next we
11:18 - will discuss now how data is to be
11:20 - inserted in the air at specific position
11:23 - because if you get how data can be
11:26 - inserted at specific position then you
11:28 - can easily modify the code for inserting
11:32 - the data at the beginning and at the end
11:34 - of theory fine so now we will see how to
11:36 - insert an element at a specific position
11:39 - in any see I'm going to take the same
11:41 - example array size is 50 now first of
11:44 - all you how to take care of this this
11:46 - thing if air is full then that is
11:48 - overflow condition you cannot insert so
11:49 - in the program you have to write that
11:51 - condition also from 0 to 49
11:53 - we have index this address will be 296
11:57 - so if you have inserted all the 50
11:59 - values and then you cannot insert any
12:01 - other value if there is not full then
12:05 - you can insert fine in this case we have
12:08 - inserted only 5 elements because the
12:11 - size we have taken only 5 but we have
12:13 - space for storing 50 elements so still
12:17 - you can store how many elements 45
12:19 - element
12:19 - see one and another thing you have to
12:21 - pick it I have told you there is no
12:23 - upper bound checking concept of areas in
12:26 - C like this if you take hair in a is
12:30 - equal to 50 fine now memory man is it
12:33 - has has allocated to how many bytes two
12:36 - hundred bytes for storing 50 elements
12:38 - and if you write down here enters the
12:41 - sizeof array and you if you enter the
12:43 - size 51 or you can say 60 then user can
12:47 - insert 60 values also but that is not
12:51 - actually correct because initially how
12:54 - many bytes has been allocated the space
12:56 - for only storing 50 elements how you can
12:58 - store 60 elements so that is not a
13:02 - concept of bound checking in the array
13:04 - the programmer has to take care of this
13:06 - thing the programmer has to write down a
13:09 - code in the program only to check the
13:11 - upper bound limit of the array
13:13 - fine so here only after inserting the
13:17 - size you will write a line that if size
13:19 - is greater than this upper bound limit
13:22 - upper this 50 then you will print what
13:25 - overflow condition else you will write
13:29 - down that inter the elements of their
13:30 - and other code you will write down in
13:32 - the else blow fine
13:34 - now say I'm going to take the same
13:36 - example we are having only five elements
13:40 - fine now how to insert first of all
13:42 - we'll discuss with the help of an
13:44 - example this example then we'll write
13:46 - down the code fine now suppose at
13:48 - position here at position 3 say I'm
13:53 - going to take index and position
13:56 - different thing somewhere you find out
13:58 - that index is same as position somewhere
14:01 - it is written that at position 2 we are
14:03 - going to insert so index is also 2 but
14:06 - here I am going see here I am going to
14:08 - consider position is third but index is
14:10 - 2 because as you can see position is 1 2
14:12 - & 3 fine but index is 2 so I am going to
14:16 - insert here so here I am considering
14:19 - this as the position position is equal
14:20 - to 3 here I am going to store the value
14:22 - here I want to store the value so now
14:25 - what you can do
14:26 - can you directly store a value suppose I
14:28 - want to store a number 10
14:32 - so if I store directly here 10 then what
14:35 - will happen then you will lose zero and
14:39 - that should not be a case fine we all we
14:42 - want all the previous element as well as
14:43 - we want some extra element that you want
14:46 - to insert so you cannot do directly this
14:49 - so another approach is what you can
14:51 - shift these elements to the right side
14:53 - fine because still we have space left in
14:56 - the area so you can shift this this five
14:59 - here then this four here then this is
15:03 - zero here so here what you can write
15:07 - this five after shifting now this four
15:11 - would be shifted here so in the place of
15:13 - this wife you will write for now zero
15:16 - will be shifted in the place so four
15:18 - because four will be lost and zero is
15:20 - there now here also we have zero till
15:23 - this position where you want to insert
15:25 - till that position you are going to
15:26 - shift to the right and from variable to
15:29 - start the loop we are going to start the
15:31 - loop from here from the last element of
15:35 - there you can say from size minus 1 see
15:37 - sizes what five but index is 4 so you
15:41 - are going to start the loop from 4 I
15:43 - would be started from 4 and I would be
15:46 - decremented now I is equal to 3 now I is
15:49 - equal to 2 and F is equal to 2 then you
15:53 - are going to stop means you are we have
15:56 - found the position we have 0 4 5 here
15:58 - now 0 is duplicated so we can we can
16:02 - insert 10 here we can insert 10 here we
16:06 - can overwrite this 0 now so that is how
16:09 - we can inserted this number 10 at
16:11 - position 3 position 3 indexes to fine so
16:17 - how we are going to write down this loop
16:19 - see so here we are also taking more
16:22 - inputs from the user that is number you
16:25 - want to insert and at which position you
16:27 - want to insert the data so for storing
16:30 - these two values you have to declare two
16:32 - variables that is num and booze right so
16:38 - now say enter the size of their a size
16:40 - you have to enter then you are going to
16:43 - enter the elements of the array
16:44 - and if the size this size of that it
16:47 - should be less than or equal to this 50
16:50 - if size is greater than 50 then you
16:52 - cannot insert anything extra element in
16:56 - there
16:56 - fine so now after this 10 if you will
16:59 - right if sighs if this size is greater
17:02 - than 50 this size then you will write
17:05 - what print overflow condition you cannot
17:08 - insert fine and after that in a stroke
17:12 - an else fluke you will write from here
17:14 - printf and after that you write in else
17:16 - blow this is how we are going to check
17:18 - the boundaries upper bound of theory
17:20 - because I have told you there is no
17:22 - concept of bounds checking of arrays in
17:25 - c so programmer has to write down the
17:27 - code itself for the checking of the
17:29 - boundaries so these two more inputs you
17:32 - will take from the user enter data you
17:34 - want to insert that as scan a percentage
17:36 - the address of num fine for the num also
17:40 - for bytes is to be allocated in the
17:42 - memory and enter the position at which
17:45 - you want to insert and for position also
17:47 - for bytes is to be located in the memory
17:49 - now now what you will do you have number
17:52 - also you have positional so suppose
17:54 - number is 10 and position is 3 now the
18:02 - swapping would be done fine from where
18:05 - from where you will start the swapping
18:06 - from the last element only why so
18:08 - because see at this position at third
18:11 - position you want to insert and if you
18:13 - say I will swap from this position only
18:15 - first of all I will swap this element
18:17 - here so if you swap 0 here then this 4
18:22 - would be overwritten you will lose this
18:24 - value 4 and here you will insert this 0
18:26 - now from where you can recover this for
18:29 - we cannot recover this 4 so you cannot
18:32 - swap star the swapping from here you
18:34 - have to swap from this position only
18:37 - fine so now you write down a for loop
18:41 - for swapping and we will start this for
18:45 - loop from where we have started from
18:47 - here initially we are having only 5
18:50 - elements from 0 to 4 so we have started
18:52 - our loop from here and we have shifted
18:54 - this to this
18:57 - two ways are there you can also start
18:59 - our for loop here from sizes sizes five
19:03 - so you can start from the for loop here
19:06 - I is equal to size that is also fine and
19:08 - you can also start from here that is
19:10 - size minus one so here I am starting
19:13 - from size minus one and from where I
19:18 - should be greater than equal to position
19:26 - minus one see I will go till the value 2
19:29 - and position value is 3 so 3 minus 1
19:32 - that is 10 - so I should be greater than
19:35 - equal to 2 from here to here you are
19:39 - going to swap and here unite I - - now
19:44 - what here what we are doing we are
19:46 - inserting this this value previous value
19:49 - to I plus 1 right so have you in right
19:52 - here a off so here you will write a Oh 5
20:04 - plus 1 is equal to ca off I would be
20:06 - shifted to a oh 5 plus 1 that is at
20:08 - starting I is equal to size minus 1 so I
20:11 - is equal to size is 5 size is 5 so I is
20:15 - equal to 4 4 is greater than equal to
20:17 - position minus 1 4 is greater than equal
20:19 - to 2 fine
20:20 - so a control will go here so a of I plus
20:23 - 1 that is a or 4 plus 1 5 is equal to a
20:26 - or 4 and it means this a Oh for this
20:30 - value will be transferred to a of 5
20:32 - that's what we have done exactly fine
20:36 - now again I - - that as I would be 3 now
20:40 - a of 3 plus 1 that is 4 is equal to a of
20:44 - 3 now a of 3 value will be transferred
20:46 - to here now again you have to value will
20:48 - be transferred to here fine and when I
20:50 - becomes 2 then also fine when I becomes
20:53 - 1 then 1 is not greater than equal to 2
20:57 - that is why we are going to not we are
21:00 - going to stop you are not going to swap
21:02 - this value fine so now after this for
21:06 - look what you will do you are going to
21:07 - insert now
21:09 - the data where you are going to insert a
21:13 - of the position - 1 C position is 3 but
21:22 - where we are dealing with index na so a
21:25 - of 3 minus 1 that is a of 2 a of 2 here
21:29 - you are going to insert 10 but position
21:32 - is still say 1 2 & 3 but indexes
21:35 - position minus 1 so here you are going
21:37 - to insert number and after inserting
21:40 - this number now array size becomes what
21:42 - 6 so now size becomes size plus plus
21:47 - right
21:49 - now finally you will print this area how
21:52 - you can print this area we have
21:53 - discussed when you were traversing there
21:55 - you just write down a for loop in for
21:58 - loop you will start from 0 to the size
22:01 - fine and you simply write printf
22:04 - percentage D and a of I and these all
22:07 - values would be printed this is how we
22:09 - are going to insert the data at specific
22:12 - position fine and in this case you can
22:16 - also write down one more condition that
22:18 - is you can also write down a bound on
22:21 - position if position is less than 0 that
22:24 - is in minus 1 or minus 2 then you cannot
22:27 - insert that is invalid position and if
22:29 - position is greater than the size size
22:33 - is 5 size is 5 so we have from 0 to 4
22:36 - here so within this range you can insert
22:40 - position can be 1 2 3 4 & 5
22:42 - all the position can be 6 here also you
22:45 - can insert but position can be likes 10
22:48 - here you cannot insert why so because in
22:51 - arrays you are going to store the real
22:52 - time consecutive location where you can
22:55 - say continuous locations so it's not
22:57 - like you have data from 0 to 4 and you
22:59 - skip these positions and now you are
23:02 - going to insert here that is not
23:04 - possible in area so here you can also
23:07 - write down 1 if conditional position
23:09 - after this position here so here you can
23:12 - write if position is less than equal to
23:16 - 0 because if we take position is equal
23:18 - to 0 then here is you
23:19 - - 1 that is minus 1 that is invalid so
23:22 - position is less than equal to 0 or
23:24 - position is greater then size or size
23:30 - plus 1 you can say fine because size is
23:33 - 5 5 so here also you can insert at 6th
23:37 - position that is also fine but after
23:39 - size plus 1 you cannot insert then you
23:42 - will write word print if invalid
23:45 - position and after this F in L slope you
23:51 - will write this for loop and you will
23:53 - also going to print the array in this
23:55 - else also after that you are going to
23:58 - close the cells fine so this is how you
24:01 - can insert a data at any specific
24:02 - position you can insert it this also you
24:04 - can insert at the end also fine using
24:07 - this method but suppose you don't want
24:09 - to ask from the user about the position
24:11 - you know that you want to insert at the
24:14 - beginning only at the zeroth location or
24:16 - at the first position you don't want to
24:19 - ask this enter position and scanf like
24:21 - this and second cases you want to insert
24:23 - after after all the data at the end of
24:26 - there you don't want to ask from the
24:28 - user the position then how you will do
24:30 - you you are not supposed to write in
24:33 - that case these lines printf
24:34 - interposition and this and you have to
24:36 - modify this for loop a little bit fine
24:39 - so this this would be as it is fine
24:43 - this this would be as it is you are
24:45 - going to write this thing i am going to
24:46 - rub this thing and i am just going to
24:48 - write down this for loop this updated
24:50 - for new and the beginning how you will
24:54 - insert at the beginning of the area for
24:57 - inserting at the beginning you will have
24:58 - to you will have to shift all these data
25:02 - same you are going to start new from
25:04 - here size minus 1 and loop will go till
25:08 - 0 because obviously you are going to
25:11 - insert here so you are going to swap all
25:14 - this data to the right side so simply
25:17 - you will update this for loop like this
25:19 - i is equal to size minus 1 say men i
25:22 - should be greater than equal to 0 now
25:24 - you know the position so no need to do
25:27 - position minus 1 and I minus
25:29 - same you write a oh five plus one is
25:31 - equal to a oh I fine
25:33 - and here you will night work at a of
25:36 - zero you want to insert number and
25:39 - simply size plus plus no need to write
25:44 - position minus one because you know the
25:45 - that where you want to insert that a of
25:48 - zero three location fine and if you want
25:52 - to insert after the all the elements at
25:54 - the end of theory then what we will do
25:56 - then that is very simple no swapping
25:59 - would be done fine
26:01 - so now how you will insert simply you
26:04 - just enter the data you want to insert
26:07 - no need to ask the position no need to
26:10 - do this swapping and all fine simply
26:13 - will write a off here here means you can
26:15 - say that size a of size size is five so
26:19 - at index five at here at index file
26:23 - because if size is five then data will
26:24 - do from zero to four so at a of size you
26:27 - can insert the number and size plus plus
26:29 - you can do so now if we discuss the time
26:32 - complexity then see if you are given
26:34 - some position suppose position is given
26:36 - this one you are going to insert data
26:37 - here so you are going to shift all the
26:39 - elements to the right side so time
26:41 - complexity would be theta n so in best
26:48 - case it is one and in worst cases it is
26:51 - Theta N and basically time complexity
26:54 - the time taken depends on the position
26:56 - given find if position is this one one
26:59 - then you have to shift all the elements
27:01 - find that as n shift would be there if
27:04 - position is this one then n minus one
27:06 - shift then position is this one and n
27:08 - minus two shift like this if position is
27:10 - this one then no shift operations so
27:13 - rather than writing this you can also
27:14 - write theta n minus P where P is what
27:19 - position it depends on the position
27:22 - given fine now see this is now unsorted
27:26 - area so now the best L go to insert a
27:32 - day tine unsorted array because you are
27:34 - not concerned with the ordering of the
27:36 - array then the best elbow is worth what
27:40 - you can do see see you want to insert a
27:42 - ten here at position three initially
27:46 - there is this one rather than shifting
27:48 - like this what you can do because arrays
27:51 - unsorted so you can simply take this
27:56 - value insert at the end of the array and
27:58 - here you can insert directly this in so
28:01 - you can simply write these two lines at
28:03 - a size size means size is equal to five
28:07 - so a oh five you can simply store this
28:09 - as zero zero means from a of position
28:11 - minus one position is three 3 minus 1
28:13 - that is 2 and add to add position minus
28:15 - 1 you can insert number and this will
28:18 - take how much time constant time that is
28:20 - 1 so in exam if question is asked then
28:24 - what you will write you will not write
28:25 - that in West case this one was is this
28:27 - one or this one no may be options would
28:29 - be given but an exam you are going to
28:32 - write down the best algorithm time
28:33 - complexity so the best time complexity
28:36 - is Theta and in unsorted array fine in
28:40 - sorted array what you have to do in that
28:43 - case you cannot do this thing you cannot
28:45 - simply take this value and set at the
28:48 - end and do this thing no you have to
28:50 - take care of the relative ordering of
28:52 - the elements in sorted array in that
28:55 - case you are doing two you are going to
28:57 - do this shift operations so you can
29:00 - apply this shifting or method in this
29:03 - unsorted array also but the best method
29:05 - is what you simply do this thing so next
29:07 - video will discuss how to delete data
29:09 - from the array so I'll see you in the
29:11 - next video till then bye-bye take

Cleaned transcript:

so in this video I am going to talk about various operations performed on arrays in data structure on 1d arrays specifically see I have already discussed the fundamentals of arrays what is need of Faerie array declaration in acid ization of array memory representation of air in the previous video so if you check out that video then I'll provide you the link in the description box you can check out there fine in this video we'll talk about the operations on array although there are many operations can be performed on array but basically the most important operations we are going to discuss that is traversal of array insertion in array deletion of any data from the array searching of any key if element exists or not in the array sorting of array we have already discussed searching and sorting techniques fine you can check out in the playlist in this video I am going to talk about how to traverse an array and how to insert a data in the array with their good because insertion is also of three types may be you can insert element at starting of the array at the end position of the array or at any position at any specific position in the array fine so I am going to talk about these operations traversal and insertion with their code fine see besides these operations many operations can be there like find a minimum and maximum element from the array find duplicate elements from the array reverse of an array find second largest element from the array so now first of all we'll discuss traversing of an you can say travel cell of array now what does this travel cell means traversal means visiting every element of the array exactly once fine suppose you can take one example you have five apples and you are going to point your finger at first Apple first of all then second then third and fourth and then fifth something like this you are traversing all the apples so thus in this case we are going to traverse all the elements of the array and output should be what you should print the elements of the array what whatever the elements in the array we are going to print those elements so I am going to see this with the help of a code see let us take we have this Airy array name is a the size of arrays five index would be from zero to four and these are the elements in the array how the data is to be stored because each integer is going to take four bytes in today in typical compilers so address suppose base address memory manager has allocated to the array base address that is hundreds so next next for the next integer for the next element of the array that this would be worth 100 plus four because this this one integer will take four bytes so that is one zero four one zero is something like this I have already discussed in the previous video this concept and detail fine so say now how we are going to traverse theory we are going to take one variable I started from zero now see what is there at this place six we are going to print this six now this I would be implemented I is here now now here what is the value two then two would be printed then I would be implemented then here then here now and like this the values would be printed and I would go from zero to four that is from zero to size minus one size of air is five so size minus one this is how we are going to traverse the area and you are going to write down the code for this now how we are going to write down the code first of all see I am also going to discuss how to initialize there a how we are going to take these elements and initialization would be of two types at compile time at runtime so in this food at runtime I'm going to ask from the user what elements the user wants in the area how to populate the area at runtime now see let us check so initially we don't have anything in this area so first of all what we will do we will just write header files and all I think you can write that thing now let us take I am going to declare an array of size 50 see actually when you are using the array when you are used when you are storing the integers and you can store only ten in pieces it's up to you less than 50 but you cannot store more than 60 why we are taking this 50 because see it is fixed size once you once you declare the size of ferry at compiletime you cannot change it at runtime find that is drawback of there but one another drawback is that it arrays not having any bounds checking property at runtime so it is the job of the programmer only to check to write down the code for checking the boundary of the areas in program only fine now what is that bounds checking I will discuss later so see I have declared array of size 50 now how many bytes would be allocated by the memory manager 15 to 4 that is 200 bytes so something like this if this is our memory so now see in the memory in the memory how many bytes would be allocated and that is 550 into 4 because one case it will take 4 bytes that is 200 bytes so suppose the base address is 100 so 100 to $2.99 these bytes should be allocated to this array this space but here we don't have any data now we are going to take the input from the user now next thing is you can ask from the user that how many data the user want to insert in this area what is the actual size of the array this is the maximum size fine this is the maximum limit so see you can ask from the user printf inter size of Faerie print F is a function standard function that is used to print something on output screen and scanf is used to take input from the user now user will enter what suppose size is 5 I want to insert 5 elements only so here you will write percentage D because for integer the format specifiers percentage is d for float it is percentage so here you will write address off now if user will give something some input that is some integer value then obviously that value should be stored in memory and how values to be stored in memory using variable so you have to declare one another variable fine so let us suppose we have declared array and I am going to declare here the one variable name that is sighs fine and I'm going to write here address of sighs so now the compiler will see this line then what compiler will do compiler will allocate for this variable it will allocate four bytes somewhere in the memory from three zero four two three zero seven four the variable name sighs fine now this is what address of operator address of operator operator means when user wants to insert when user will insert the data then compiler should know at which address you are going to store the value so this address means this would return at 304 you are going to store the value so suppose user enter the size five so here you will write here what what has to be inserted five would be converted into binary form and five would be inserted so here you will insert five in these four bytes fine now we want to populate the data in this area now the size is five so you I want to and insert five venues fine now how the value is to be inserted I would be started from 0 till for L size minus one you have to take one for loop I have already discussed there so what you will write you will write what printf enter elements of array and you will write one for loop and this loop could be started I value would be started from zero I would be less than less than size less than five that is for a zero to four index would be zero to four and that is I plus plus and in for loop you will write because to take input from the user views kind of function here you will write same percentage D format specifier and address or where you are going to store the values first value would be stored at zeroth location means at this location in these four bytes one two three four these four bytes next will be stored in these four bytes so now here you write a oh I find a dress off area name is a and at which index are going to store index will be started from 0 to 1 2 3 4 this is how we are going I am going to represent it 0 1 2 3 4 each block is having these 4 bytes fine so this address is to be located now when I value is 0 I value is 0 then value would be stored at address of a of 0 address means add value hundred a of 0 of 0 means at this index fine so now user will insert the values suppose user has inserted the values 6 to 0 for n 5 because Luke would be started from I is 0 2 sizes 5 0 to 4 so that is why 0 to 4 there it would be populated now now what how that this air is to be traversed now we are going to again start a loop from here we are going to check we are going to access this element as we are going to print output should be you are going to print the array what are the elements in there you are going to print that fine so for printing you will write 1 1 for loop again for loop would be there I would be from 0 to 4 fine so you can write here printf elements in array are after printf you will write one for loop I would be started from zero I would be less than size but you can say less than equal to size minus 1 I plus plus and here within this for loop you will write good now we are going to print a diary so you will not write scanf scanf is for taking input you'll write here printf % is DS for integer because datatype isn't easy and here simply you will write array of i because in the previous video i have told you for accessing the element of dairy you simply write array name and breakers will write index so i would be 0 then a of 0 would be printed the 6 then i plus plus i is 1 then a of 1 would be printed that is 2 like this from 0 to 4 values will be printed so this is now the traversing of the n see here we are using one more variable that is i so you have to declare this variable here before that is i fine so i guess you can write the header files and you can execute this program so next we will discuss now how data is to be inserted in the air at specific position because if you get how data can be inserted at specific position then you can easily modify the code for inserting the data at the beginning and at the end of theory fine so now we will see how to insert an element at a specific position in any see I'm going to take the same example array size is 50 now first of all you how to take care of this this thing if air is full then that is overflow condition you cannot insert so in the program you have to write that condition also from 0 to 49 we have index this address will be 296 so if you have inserted all the 50 values and then you cannot insert any other value if there is not full then you can insert fine in this case we have inserted only 5 elements because the size we have taken only 5 but we have space for storing 50 elements so still you can store how many elements 45 element see one and another thing you have to pick it I have told you there is no upper bound checking concept of areas in C like this if you take hair in a is equal to 50 fine now memory man is it has has allocated to how many bytes two hundred bytes for storing 50 elements and if you write down here enters the sizeof array and you if you enter the size 51 or you can say 60 then user can insert 60 values also but that is not actually correct because initially how many bytes has been allocated the space for only storing 50 elements how you can store 60 elements so that is not a concept of bound checking in the array the programmer has to take care of this thing the programmer has to write down a code in the program only to check the upper bound limit of the array fine so here only after inserting the size you will write a line that if size is greater than this upper bound limit upper this 50 then you will print what overflow condition else you will write down that inter the elements of their and other code you will write down in the else blow fine now say I'm going to take the same example we are having only five elements fine now how to insert first of all we'll discuss with the help of an example this example then we'll write down the code fine now suppose at position here at position 3 say I'm going to take index and position different thing somewhere you find out that index is same as position somewhere it is written that at position 2 we are going to insert so index is also 2 but here I am going see here I am going to consider position is third but index is 2 because as you can see position is 1 2 & 3 fine but index is 2 so I am going to insert here so here I am considering this as the position position is equal to 3 here I am going to store the value here I want to store the value so now what you can do can you directly store a value suppose I want to store a number 10 so if I store directly here 10 then what will happen then you will lose zero and that should not be a case fine we all we want all the previous element as well as we want some extra element that you want to insert so you cannot do directly this so another approach is what you can shift these elements to the right side fine because still we have space left in the area so you can shift this this five here then this four here then this is zero here so here what you can write this five after shifting now this four would be shifted here so in the place of this wife you will write for now zero will be shifted in the place so four because four will be lost and zero is there now here also we have zero till this position where you want to insert till that position you are going to shift to the right and from variable to start the loop we are going to start the loop from here from the last element of there you can say from size minus 1 see sizes what five but index is 4 so you are going to start the loop from 4 I would be started from 4 and I would be decremented now I is equal to 3 now I is equal to 2 and F is equal to 2 then you are going to stop means you are we have found the position we have 0 4 5 here now 0 is duplicated so we can we can insert 10 here we can insert 10 here we can overwrite this 0 now so that is how we can inserted this number 10 at position 3 position 3 indexes to fine so how we are going to write down this loop see so here we are also taking more inputs from the user that is number you want to insert and at which position you want to insert the data so for storing these two values you have to declare two variables that is num and booze right so now say enter the size of their a size you have to enter then you are going to enter the elements of the array and if the size this size of that it should be less than or equal to this 50 if size is greater than 50 then you cannot insert anything extra element in there fine so now after this 10 if you will right if sighs if this size is greater than 50 this size then you will write what print overflow condition you cannot insert fine and after that in a stroke an else fluke you will write from here printf and after that you write in else blow this is how we are going to check the boundaries upper bound of theory because I have told you there is no concept of bounds checking of arrays in c so programmer has to write down the code itself for the checking of the boundaries so these two more inputs you will take from the user enter data you want to insert that as scan a percentage the address of num fine for the num also for bytes is to be allocated in the memory and enter the position at which you want to insert and for position also for bytes is to be located in the memory now now what you will do you have number also you have positional so suppose number is 10 and position is 3 now the swapping would be done fine from where from where you will start the swapping from the last element only why so because see at this position at third position you want to insert and if you say I will swap from this position only first of all I will swap this element here so if you swap 0 here then this 4 would be overwritten you will lose this value 4 and here you will insert this 0 now from where you can recover this for we cannot recover this 4 so you cannot swap star the swapping from here you have to swap from this position only fine so now you write down a for loop for swapping and we will start this for loop from where we have started from here initially we are having only 5 elements from 0 to 4 so we have started our loop from here and we have shifted this to this two ways are there you can also start our for loop here from sizes sizes five so you can start from the for loop here I is equal to size that is also fine and you can also start from here that is size minus one so here I am starting from size minus one and from where I should be greater than equal to position minus one see I will go till the value 2 and position value is 3 so 3 minus 1 that is 10 so I should be greater than equal to 2 from here to here you are going to swap and here unite I now what here what we are doing we are inserting this this value previous value to I plus 1 right so have you in right here a off so here you will write a Oh 5 plus 1 is equal to ca off I would be shifted to a oh 5 plus 1 that is at starting I is equal to size minus 1 so I is equal to size is 5 size is 5 so I is equal to 4 4 is greater than equal to position minus 1 4 is greater than equal to 2 fine so a control will go here so a of I plus 1 that is a or 4 plus 1 5 is equal to a or 4 and it means this a Oh for this value will be transferred to a of 5 that's what we have done exactly fine now again I that as I would be 3 now a of 3 plus 1 that is 4 is equal to a of 3 now a of 3 value will be transferred to here now again you have to value will be transferred to here fine and when I becomes 2 then also fine when I becomes 1 then 1 is not greater than equal to 2 that is why we are going to not we are going to stop you are not going to swap this value fine so now after this for look what you will do you are going to insert now the data where you are going to insert a of the position 1 C position is 3 but where we are dealing with index na so a of 3 minus 1 that is a of 2 a of 2 here you are going to insert 10 but position is still say 1 2 & 3 but indexes position minus 1 so here you are going to insert number and after inserting this number now array size becomes what 6 so now size becomes size plus plus right now finally you will print this area how you can print this area we have discussed when you were traversing there you just write down a for loop in for loop you will start from 0 to the size fine and you simply write printf percentage D and a of I and these all values would be printed this is how we are going to insert the data at specific position fine and in this case you can also write down one more condition that is you can also write down a bound on position if position is less than 0 that is in minus 1 or minus 2 then you cannot insert that is invalid position and if position is greater than the size size is 5 size is 5 so we have from 0 to 4 here so within this range you can insert position can be 1 2 3 4 & 5 all the position can be 6 here also you can insert but position can be likes 10 here you cannot insert why so because in arrays you are going to store the real time consecutive location where you can say continuous locations so it's not like you have data from 0 to 4 and you skip these positions and now you are going to insert here that is not possible in area so here you can also write down 1 if conditional position after this position here so here you can write if position is less than equal to 0 because if we take position is equal to 0 then here is you 1 that is minus 1 that is invalid so position is less than equal to 0 or position is greater then size or size plus 1 you can say fine because size is 5 5 so here also you can insert at 6th position that is also fine but after size plus 1 you cannot insert then you will write word print if invalid position and after this F in L slope you will write this for loop and you will also going to print the array in this else also after that you are going to close the cells fine so this is how you can insert a data at any specific position you can insert it this also you can insert at the end also fine using this method but suppose you don't want to ask from the user about the position you know that you want to insert at the beginning only at the zeroth location or at the first position you don't want to ask this enter position and scanf like this and second cases you want to insert after after all the data at the end of there you don't want to ask from the user the position then how you will do you you are not supposed to write in that case these lines printf interposition and this and you have to modify this for loop a little bit fine so this this would be as it is fine this this would be as it is you are going to write this thing i am going to rub this thing and i am just going to write down this for loop this updated for new and the beginning how you will insert at the beginning of the area for inserting at the beginning you will have to you will have to shift all these data same you are going to start new from here size minus 1 and loop will go till 0 because obviously you are going to insert here so you are going to swap all this data to the right side so simply you will update this for loop like this i is equal to size minus 1 say men i should be greater than equal to 0 now you know the position so no need to do position minus 1 and I minus same you write a oh five plus one is equal to a oh I fine and here you will night work at a of zero you want to insert number and simply size plus plus no need to write position minus one because you know the that where you want to insert that a of zero three location fine and if you want to insert after the all the elements at the end of theory then what we will do then that is very simple no swapping would be done fine so now how you will insert simply you just enter the data you want to insert no need to ask the position no need to do this swapping and all fine simply will write a off here here means you can say that size a of size size is five so at index five at here at index file because if size is five then data will do from zero to four so at a of size you can insert the number and size plus plus you can do so now if we discuss the time complexity then see if you are given some position suppose position is given this one you are going to insert data here so you are going to shift all the elements to the right side so time complexity would be theta n so in best case it is one and in worst cases it is Theta N and basically time complexity the time taken depends on the position given find if position is this one one then you have to shift all the elements find that as n shift would be there if position is this one then n minus one shift then position is this one and n minus two shift like this if position is this one then no shift operations so rather than writing this you can also write theta n minus P where P is what position it depends on the position given fine now see this is now unsorted area so now the best L go to insert a day tine unsorted array because you are not concerned with the ordering of the array then the best elbow is worth what you can do see see you want to insert a ten here at position three initially there is this one rather than shifting like this what you can do because arrays unsorted so you can simply take this value insert at the end of the array and here you can insert directly this in so you can simply write these two lines at a size size means size is equal to five so a oh five you can simply store this as zero zero means from a of position minus one position is three 3 minus 1 that is 2 and add to add position minus 1 you can insert number and this will take how much time constant time that is 1 so in exam if question is asked then what you will write you will not write that in West case this one was is this one or this one no may be options would be given but an exam you are going to write down the best algorithm time complexity so the best time complexity is Theta and in unsorted array fine in sorted array what you have to do in that case you cannot do this thing you cannot simply take this value and set at the end and do this thing no you have to take care of the relative ordering of the elements in sorted array in that case you are doing two you are going to do this shift operations so you can apply this shifting or method in this unsorted array also but the best method is what you simply do this thing so next video will discuss how to delete data from the array so I'll see you in the next video till then byebye take
