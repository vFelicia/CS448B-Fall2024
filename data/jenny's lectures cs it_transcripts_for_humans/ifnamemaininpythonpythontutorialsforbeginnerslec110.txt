With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - Python programming language in the
00:05 - previous video we have seen what are
00:06 - packages in Python like how to create
00:08 - your own package right so in this video
00:11 - we'll see this line in Python I hope you
00:15 - have seen this line if underscore uncore
00:17 - name uncore uncore equal toore uncore
00:20 - maincore uncore right maybe if you're R
00:24 - you know if you are reading you reading
00:26 - like other people's code then you must
00:28 - have seen this line I guess or if if you
00:30 - were reading the documentation or
00:32 - somewhere right best thing you have seen
00:35 - but what does this mean what is this
00:38 - name main line or this EDM right why we
00:43 - use this until now we haven't use this
00:46 - line in our like till now I we have
00:50 - completed almost right 109 lectures and
00:52 - we haven't used this line so we were
00:54 - writing obviously programs we were uh
00:58 - you know working on Project we have
01:00 - created our own project maybe I think
01:02 - eight or nine project but we haven't
01:03 - used this line till now right so when
01:07 - should we use this line and what is need
01:10 - of this line This
01:12 - EDM right this thing we will see in this
01:15 - video with the help of program I'll show
01:17 - you right now let's take one example so
01:22 - let's create a new file here and I'm
01:25 - just writing like maybe
01:28 - demoore name Main
01:30 - okay
01:32 - py so you can see it's it's just a file
01:35 - or we can say it's a module also right
01:37 - when you import this file into another
01:39 - file then it's like an it's it act as a
01:43 - as a module right so thisi file is you
01:46 - can say it's a module also so we have
01:49 - this file right and in this file I'm
01:51 - going to write something suppose I'm
01:53 - just printing like maybe High that's it
01:58 - and if you run this obviously it will
01:59 - print high so how the python interpreter
02:04 - works whenever you run a file whenever
02:07 - the python interpreter accept a file
02:10 - then first of all it sets some special
02:13 - variables for that
02:15 - file and underscore underscore name
02:18 - underscore underscore is that special
02:20 - variable one of that special variable
02:23 - it's kind you can it's a built-in
02:24 - variable right so that is being set by
02:28 - the python interpretor before running
02:30 - this file right so if I click on this
02:34 - see python console and see these special
02:37 - variables in this side you can see the
02:39 - special variables here so see the name
02:43 - this variable is set to underscore
02:45 - uncore maincore uncore with this Str Str
02:49 - with this string right or directly if
02:52 - you want to check out for this name
02:55 - space for this
02:58 - file
03:02 - what are the special variables or you
03:05 - can say properties of this thing with
03:08 - the help of di function we have that
03:10 - we'll show you so just print di see hi
03:15 - and here you will
03:17 - get this variable underscore uncore name
03:20 - underscore uncore right and D is
03:24 - basically a special function if you pass
03:25 - any object here any object like you can
03:28 - pass a class object lle set or anything
03:31 - then related to that object it will show
03:35 - all the properties all the attributes
03:36 - methods of that object right but we are
03:38 - not passing anything because that thing
03:40 - is optional if you don't pass anything
03:42 - then for this name space for this local
03:44 - name space what are those special
03:45 - variables or methods or attributes or
03:48 - the properties that it will show you
03:50 - right for this file so one is I have
03:55 - shown you that is name so if you print
03:58 - here this name
04:01 - variable then
04:04 - see main it is assigned a string main
04:08 - because we are directly running this
04:10 - module or this file right as a script
04:14 - directly we are running this right now
04:17 - second case is what now in this case
04:18 - this name variable is assigned a value
04:21 - main right now if you create another
04:25 - file let's create another file so this
04:28 - is our file we don't have anything in
04:29 - this file right and if we import our
04:33 - previous module in this
04:36 - file
04:38 - import this demo name main right and we
04:43 - are not printing anything here just here
04:45 - we are printing this name value of this
04:48 - name special variable so now let's run
04:51 - this demo one file right let's run this
04:57 - this time the name is it is import in
04:59 - demo name main so demo name main we are
05:01 - having high so it will print high but
05:04 - the name variable is assigned a value
05:06 - demoore name name name me the name of
05:09 - the module
05:11 - right so when you are importing a file
05:16 - then that this name is assigned the
05:21 - value name of that particular
05:24 - module when you are running this
05:26 - directly then it will assign main when
05:28 - you are import this module into another
05:31 - module then it will assign the
05:35 - value to this name variable the name of
05:38 - that particular module I hope you got
05:40 - this this thing right because now see
05:44 - now if directly I run this demo file
05:47 - then it will show
05:49 - main means we are running the main
05:53 - script or the original script directly
05:56 - directly but through another file if you
05:59 - are running this file through this demo
06:02 - one file I'm running demo file by
06:04 - importing then
06:07 - this the name variable will be assigned
06:09 - the name of that modu right I hope you
06:12 - got this thing what is this name
06:13 - variable and when it is assigned Main
06:15 - and when it is assigned these kind of
06:17 - thing right this is clear to you guys I
06:21 - guess and if in this demo one file also
06:24 - if I
06:26 - print this name variable then what you
06:30 - think what would be the output just
06:32 - pause the video and let me know in
06:33 - comment
06:34 - section so let's run this and I'll show
06:37 - you the output see hi first this file
06:42 - name then main why this this name is
06:46 - printing main is a sign value main
06:49 - because we we are directly running demo
06:51 - one but we are running indirectly demo
06:54 - file that is why this name will print
07:00 - the name of that module but directly we
07:02 - are running demo one so it is assigning
07:05 - this name to main right I hope you got
07:08 - this difference now let's come to that
07:11 - EDM we use that if statement okay
07:15 - suppose in this file let's define a
07:17 - function as well so like this we have
07:19 - like in print I have uh written a line
07:21 - This is demoore name m the name of that
07:24 - file we have a function display it will
07:26 - just take the name and it will return
07:28 - the name right then we have any function
07:31 - like do something this function is doing
07:33 - something the simple example I'm going
07:35 - to take and
07:38 - suppose we are running this thing we are
07:40 - taking input using input function and in
07:44 - this uh
07:46 - display simply we are passing name right
07:51 - and then I'm calling this do something
07:53 - function also right so if I run this
07:57 - demo then
07:59 - see this is demo name main pii enter
08:03 - your name I'm just entering like J this
08:06 - function is doing something or it is not
08:08 - returning Jenny because we are not
08:10 - printing
08:11 - anything so you have to print this
08:14 - display name because the function is
08:16 - function is returning my name so you
08:18 - have to accept and you have to print
08:19 - like the output whatever the output it
08:22 - will give you so Jenny see Jenny and
08:26 - this function is doing something so
08:28 - Jenny for this and do
08:30 - something like this in demo one let's
08:33 - import this and let's just print this
08:38 - line and let's run
08:40 - this see still it is printing this is
08:44 - demo name main but we are running this
08:48 - demo one file and we are printing this
08:50 - is demo 1. name main but it is printing
08:52 - demo do name me so maybe are thinking
08:54 - what the hell is going on here
08:58 - right and it is asking enter your name
09:01 - but I don't have anything like this in
09:03 - my file I'm just going to print the
09:05 - simple
09:06 - line so enter your name let's run like
09:11 - Jenny Jenny this function is doing
09:14 - something and this is Now demo 1. name
09:16 - main.py file so I hope you got this why
09:19 - this is happening because we are
09:20 - importing demo file whatever is this in
09:23 - demo file
09:24 - definitely the line which which are
09:26 - having zero indentation definitely these
09:30 - are imported by default it is going to
09:33 - run
09:34 - right and the function is running
09:37 - because we are calling this function in
09:39 - this sto file and we are importing this
09:41 - sto file so definitely these are going
09:43 - to
09:43 - run so in this case what we can do like
09:48 - we want
09:50 - something some functions or some lines
09:53 - or some statements to be executed when
09:55 - we run this file only as a script as a
09:58 - stand alone
10:00 - script when other module import this
10:04 - module demo module then those functions
10:06 - or those statement should not be
10:09 - executed right so I want to put these
10:11 - kind of
10:13 - restriction so is there any way yes we
10:17 - can do this with the help of that close
10:19 - or with the help of the that hium we can
10:22 - put this thing
10:24 - like like we can put
10:27 - here if because we know when you run
10:32 - this demo as a standalone script when
10:35 - you run this directly then the value of
10:38 - this name variable is main we know this
10:41 - so you can put you can use this
10:43 - condition here so if this value of this
10:47 - special variable is underscore
10:50 - underscore maincore
10:53 - underscore
10:55 - then first this line should be printed
11:00 - here like this is demo file when you run
11:03 - this directly right and then only it
11:07 - should ask for my name then only it
11:10 - would
11:11 - display it would run this and suppose
11:15 - then only it
11:17 - would call this function as well
11:21 - right now I have modified this thing now
11:25 - in demo one I have this line only so now
11:27 - let's run demo one direct
11:30 - ly see this time you will get only this
11:33 - is demo 1 name. py file now I'm fine
11:36 - because we have written only one file
11:38 - here
11:39 - right so now okay nowly what is the use
11:44 - of importing this demo do name main file
11:48 - now one thing is why we need this this
11:51 - EDM or this line this if name do Main
11:55 - Line maybe you are thinking if you are
11:58 - from that c c plus Plus+ Java background
11:59 - then there is a main function that is
12:02 - you can say entry point of your program
12:05 - when you run that then the control will
12:06 - go to the main function and from there
12:08 - the execution would be started so maybe
12:10 - you are thinking this is kind of main
12:12 - function no in Python we don't have any
12:15 - like main functions we simply write our
12:17 - code from the first line right and the
12:20 - interpretor will run that will execute
12:23 - the code line by line directly right so
12:27 - now this is simply it's like a that
12:31 - conditional statement if this condition
12:33 - is true then whatever you will write
12:34 - here that would be executed you can
12:36 - write on else block also that is also
12:38 - fine suppose if you want that this
12:41 - display function would be executed if
12:42 - you run this directly but this do
12:44 - something would be executed when you
12:46 - import that so out of this if else you
12:50 - can call this do
12:53 - something right but here one more
12:56 - problem is let's run this demo one file
12:58 - now let's run this and see this function
13:01 - is doing something this is demo
13:05 - one this line right and that was the
13:09 - previous function but now I have told
13:12 - like in demo file the file which I'm
13:15 - importing there is a function do
13:18 - something so you can call that function
13:20 - here definitely to execute that function
13:24 - what we think we have to call that
13:25 - function so have to call the name of
13:28 - that mod
13:29 - dot do something that function right so
13:33 - let's run this but this time this
13:36 - function is doing something then this
13:38 - line then again this function is doing
13:40 - something means two
13:42 - times it is printing it is printing
13:46 - whatever is there in do something but
13:47 - I'm just calling this function only just
13:49 - one time then why two times because in
13:53 - demo also we are calling this function
13:55 - so one way is what you going do we can
13:58 - just first think thing we can just
13:59 - comment this
14:01 - out and then we run this only one time
14:04 - it will show the output but obviously
14:06 - that is not a good idea but when we run
14:08 - the script that time that time also I
14:10 - want to call this function then you have
14:13 - to uncomment this thing but definitely
14:15 - it's not like that we are going to
14:17 - comment and uncomment this again and
14:18 - again right so one idea is you can just
14:21 - put this
14:23 - here right so if this is main then it
14:28 - would be called and if you want to call
14:30 - this function in another module also
14:32 - then you can call it like this the name
14:34 - of that module don't do something let's
14:36 - run this and now only one time it is
14:38 - going to call right because this
14:44 - calling this calling is when the name
14:47 - would be main means when we directly run
14:49 - this file then only this function would
14:51 - be called right so we use this kind of
14:55 - EDM when you have like you have a script
15:00 - or you are writing a module that you
15:03 - think would be you you will run that
15:06 - module as a standalone script as well as
15:09 - other modules are going to import your
15:12 - module
15:13 - then you can use this
15:16 - ADM
15:18 - right to make sure that these kind of
15:21 - functions or these statements or these
15:23 - things should be executed only when you
15:25 - run your script as a standalone script
15:28 - directly
15:30 - right then in the main close name main
15:33 - close you can write down those things
15:35 - you want that these things should not be
15:37 - executed when you are going to when
15:38 - someone is going to import your module
15:41 - right I hope you are getting my point
15:43 - like when you are working on a library
15:45 - you are creating a library so definitely
15:47 - you're going to publish and other users
15:49 - are going to use your library right but
15:52 - in that Library obviously you want to
15:55 - run that Library as a standalone script
15:57 - also if that Library suppose is
16:00 - containing some uh unit test then you
16:03 - will run that Library as a standalone
16:05 - script as well as others are going to
16:07 - use your library right but you want that
16:10 - those test should be executed only when
16:13 - you run your library your your program
16:15 - your module as a standalone script so
16:17 - you can put those things in this name
16:20 - main close right so these things should
16:23 - not be will not no will not be executed
16:26 - when you import this file
16:29 - so we can use
16:31 - this this if name main EDM blow to allow
16:37 - or to prevent parts of code from being
16:41 - executed when the modules are
16:44 - imported right or one more use of this
16:48 - thing is what if you want like to modify
16:52 - if like if I run this I want like if I
16:54 - run this script directly then it should
16:56 - ask me enter your name right but if I
17:01 - import this file and if I run this if I
17:07 - call or if I you know call this display
17:10 - then it shouldn't ask from the user
17:14 - means we are going to tell this demo one
17:16 - that there is a function display as a
17:18 - parameter you have to pass your name it
17:20 - is going to print your name right so
17:23 - here that is the thing so this is demo
17:26 - one file and we are calling not suppose
17:28 - this do something let's
17:31 - call dot display okay and just pass your
17:35 - name here only so like my name is maybe
17:39 - like
17:41 - Vian let's run this see okay it is not
17:45 - printing the name because obviously you
17:48 - have to write down
17:52 - print print let's run this see this is
17:56 - demo one file and we bian it is printing
17:59 - right so if you are running this de
18:02 - display function from this demo one then
18:05 - it will not ask for user input you have
18:09 - to pass your name directly as a argument
18:12 - right but if you run this function
18:14 - directly you want that it should ask
18:17 - from you your name then it will print
18:19 - your name so that thing that you can
18:22 - take input from the user in this name
18:25 - main close so if you run this directly
18:27 - demo then see it is asking you your name
18:31 - so I just want to print my name Jenny
18:33 - Jenny and like this right so like this
18:35 - if you modify this kind of thing if you
18:38 - want to take input from the user when
18:40 - you run your script as a stand alone but
18:43 - when someone is going to import your
18:44 - your module then it shouldn't ask from
18:46 - user input you have to pass as a
18:49 - argument that thing so this modification
18:51 - this kind of modification we can do with
18:52 - this name main EDM right so this is one
18:57 - more you can say application of this
18:59 - name main close or this EDM now one
19:02 - question may be how many this name main
19:04 - if this close we can put in program more
19:06 - than one we can can we put yes you can
19:09 - put more than one this type of thing
19:12 - this line but I guess that would be a
19:16 - little bit weird only one would be
19:18 - sufficient but if you want you can put
19:21 - this Python language is not going to
19:23 - restrict you
19:24 - fine this is like same kind of thing if
19:27 - you relate this with real example like
19:30 - maybe in your house you have some kind
19:32 - of alira right then you have your you
19:36 - know valuable items or your money and
19:38 - like this and you have loged that thing
19:40 - and you have the key the owner have the
19:42 - key and so now if you are the owner and
19:45 - you want to open you want to access that
19:47 - money or that thing obviously you have
19:48 - the key and you can access those things
19:51 - but sometimes it happens like maybe
19:53 - there is some party or something some
19:54 - guest are there are coming to your home
19:57 - so maybe they are staying for two to 3
19:59 - days or like this right so definitely
20:02 - they are not
20:02 - owner and they are not allowed to access
20:05 - that Al or those money or those valuable
20:08 - items right because they are not having
20:10 - key so that kind of
20:12 - thing so if you want to restrict
20:14 - something if you want that this kind of
20:17 - thing these kind of lines these kind of
20:19 - statements these thing would be executed
20:21 - only when you run this thing directly
20:23 - then you can put that thing in this name
20:25 - main close name main EDM right now
20:28 - suppose I put a line here it's not in
20:31 - any function or in this Clause it's just
20:34 - with a zero indentation this line would
20:36 - be run every time so if you directly run
20:38 - this demo then also you can see this
20:41 - line would be run every time so this
20:42 - line is here right and if you run this
20:45 - from demo one then also you can see this
20:48 - line this line would be run every time
20:51 - right so the line with zero indentation
20:55 - definitely that would be executed
20:57 - whenever you import that module so all
21:00 - those line would be executed directly
21:02 - right if you want to if you put that
21:06 - line in any function then only then that
21:08 - line will be executed only when you call
21:10 - that function right that is for sure or
21:13 - if you uh you know uh print this line
21:17 - within this close
21:19 - here now run demo one and
21:22 - see that line is in now because here
21:26 - within this name m close so this line
21:28 - would not be executed right I hope you
21:31 - got now the idea of what is this name
21:32 - and close when we should use this and
21:35 - what is use of this name m EDM in Python
21:39 - right so now that's it for this video
21:41 - now I'll see you in the next till then
21:42 - bye-bye take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning Python programming language in the previous video we have seen what are packages in Python like how to create your own package right so in this video we'll see this line in Python I hope you have seen this line if underscore uncore name uncore uncore equal toore uncore maincore uncore right maybe if you're R you know if you are reading you reading like other people's code then you must have seen this line I guess or if if you were reading the documentation or somewhere right best thing you have seen but what does this mean what is this name main line or this EDM right why we use this until now we haven't use this line in our like till now I we have completed almost right 109 lectures and we haven't used this line so we were writing obviously programs we were uh you know working on Project we have created our own project maybe I think eight or nine project but we haven't used this line till now right so when should we use this line and what is need of this line This EDM right this thing we will see in this video with the help of program I'll show you right now let's take one example so let's create a new file here and I'm just writing like maybe demoore name Main okay py so you can see it's it's just a file or we can say it's a module also right when you import this file into another file then it's like an it's it act as a as a module right so thisi file is you can say it's a module also so we have this file right and in this file I'm going to write something suppose I'm just printing like maybe High that's it and if you run this obviously it will print high so how the python interpreter works whenever you run a file whenever the python interpreter accept a file then first of all it sets some special variables for that file and underscore underscore name underscore underscore is that special variable one of that special variable it's kind you can it's a builtin variable right so that is being set by the python interpretor before running this file right so if I click on this see python console and see these special variables in this side you can see the special variables here so see the name this variable is set to underscore uncore maincore uncore with this Str Str with this string right or directly if you want to check out for this name space for this file what are the special variables or you can say properties of this thing with the help of di function we have that we'll show you so just print di see hi and here you will get this variable underscore uncore name underscore uncore right and D is basically a special function if you pass any object here any object like you can pass a class object lle set or anything then related to that object it will show all the properties all the attributes methods of that object right but we are not passing anything because that thing is optional if you don't pass anything then for this name space for this local name space what are those special variables or methods or attributes or the properties that it will show you right for this file so one is I have shown you that is name so if you print here this name variable then see main it is assigned a string main because we are directly running this module or this file right as a script directly we are running this right now second case is what now in this case this name variable is assigned a value main right now if you create another file let's create another file so this is our file we don't have anything in this file right and if we import our previous module in this file import this demo name main right and we are not printing anything here just here we are printing this name value of this name special variable so now let's run this demo one file right let's run this this time the name is it is import in demo name main so demo name main we are having high so it will print high but the name variable is assigned a value demoore name name name me the name of the module right so when you are importing a file then that this name is assigned the value name of that particular module when you are running this directly then it will assign main when you are import this module into another module then it will assign the value to this name variable the name of that particular module I hope you got this this thing right because now see now if directly I run this demo file then it will show main means we are running the main script or the original script directly directly but through another file if you are running this file through this demo one file I'm running demo file by importing then this the name variable will be assigned the name of that modu right I hope you got this thing what is this name variable and when it is assigned Main and when it is assigned these kind of thing right this is clear to you guys I guess and if in this demo one file also if I print this name variable then what you think what would be the output just pause the video and let me know in comment section so let's run this and I'll show you the output see hi first this file name then main why this this name is printing main is a sign value main because we we are directly running demo one but we are running indirectly demo file that is why this name will print the name of that module but directly we are running demo one so it is assigning this name to main right I hope you got this difference now let's come to that EDM we use that if statement okay suppose in this file let's define a function as well so like this we have like in print I have uh written a line This is demoore name m the name of that file we have a function display it will just take the name and it will return the name right then we have any function like do something this function is doing something the simple example I'm going to take and suppose we are running this thing we are taking input using input function and in this uh display simply we are passing name right and then I'm calling this do something function also right so if I run this demo then see this is demo name main pii enter your name I'm just entering like J this function is doing something or it is not returning Jenny because we are not printing anything so you have to print this display name because the function is function is returning my name so you have to accept and you have to print like the output whatever the output it will give you so Jenny see Jenny and this function is doing something so Jenny for this and do something like this in demo one let's import this and let's just print this line and let's run this see still it is printing this is demo name main but we are running this demo one file and we are printing this is demo 1. name main but it is printing demo do name me so maybe are thinking what the hell is going on here right and it is asking enter your name but I don't have anything like this in my file I'm just going to print the simple line so enter your name let's run like Jenny Jenny this function is doing something and this is Now demo 1. name main.py file so I hope you got this why this is happening because we are importing demo file whatever is this in demo file definitely the line which which are having zero indentation definitely these are imported by default it is going to run right and the function is running because we are calling this function in this sto file and we are importing this sto file so definitely these are going to run so in this case what we can do like we want something some functions or some lines or some statements to be executed when we run this file only as a script as a stand alone script when other module import this module demo module then those functions or those statement should not be executed right so I want to put these kind of restriction so is there any way yes we can do this with the help of that close or with the help of the that hium we can put this thing like like we can put here if because we know when you run this demo as a standalone script when you run this directly then the value of this name variable is main we know this so you can put you can use this condition here so if this value of this special variable is underscore underscore maincore underscore then first this line should be printed here like this is demo file when you run this directly right and then only it should ask for my name then only it would display it would run this and suppose then only it would call this function as well right now I have modified this thing now in demo one I have this line only so now let's run demo one direct ly see this time you will get only this is demo 1 name. py file now I'm fine because we have written only one file here right so now okay nowly what is the use of importing this demo do name main file now one thing is why we need this this EDM or this line this if name do Main Line maybe you are thinking if you are from that c c plus Plus+ Java background then there is a main function that is you can say entry point of your program when you run that then the control will go to the main function and from there the execution would be started so maybe you are thinking this is kind of main function no in Python we don't have any like main functions we simply write our code from the first line right and the interpretor will run that will execute the code line by line directly right so now this is simply it's like a that conditional statement if this condition is true then whatever you will write here that would be executed you can write on else block also that is also fine suppose if you want that this display function would be executed if you run this directly but this do something would be executed when you import that so out of this if else you can call this do something right but here one more problem is let's run this demo one file now let's run this and see this function is doing something this is demo one this line right and that was the previous function but now I have told like in demo file the file which I'm importing there is a function do something so you can call that function here definitely to execute that function what we think we have to call that function so have to call the name of that mod dot do something that function right so let's run this but this time this function is doing something then this line then again this function is doing something means two times it is printing it is printing whatever is there in do something but I'm just calling this function only just one time then why two times because in demo also we are calling this function so one way is what you going do we can just first think thing we can just comment this out and then we run this only one time it will show the output but obviously that is not a good idea but when we run the script that time that time also I want to call this function then you have to uncomment this thing but definitely it's not like that we are going to comment and uncomment this again and again right so one idea is you can just put this here right so if this is main then it would be called and if you want to call this function in another module also then you can call it like this the name of that module don't do something let's run this and now only one time it is going to call right because this calling this calling is when the name would be main means when we directly run this file then only this function would be called right so we use this kind of EDM when you have like you have a script or you are writing a module that you think would be you you will run that module as a standalone script as well as other modules are going to import your module then you can use this ADM right to make sure that these kind of functions or these statements or these things should be executed only when you run your script as a standalone script directly right then in the main close name main close you can write down those things you want that these things should not be executed when you are going to when someone is going to import your module right I hope you are getting my point like when you are working on a library you are creating a library so definitely you're going to publish and other users are going to use your library right but in that Library obviously you want to run that Library as a standalone script also if that Library suppose is containing some uh unit test then you will run that Library as a standalone script as well as others are going to use your library right but you want that those test should be executed only when you run your library your your program your module as a standalone script so you can put those things in this name main close right so these things should not be will not no will not be executed when you import this file so we can use this this if name main EDM blow to allow or to prevent parts of code from being executed when the modules are imported right or one more use of this thing is what if you want like to modify if like if I run this I want like if I run this script directly then it should ask me enter your name right but if I import this file and if I run this if I call or if I you know call this display then it shouldn't ask from the user means we are going to tell this demo one that there is a function display as a parameter you have to pass your name it is going to print your name right so here that is the thing so this is demo one file and we are calling not suppose this do something let's call dot display okay and just pass your name here only so like my name is maybe like Vian let's run this see okay it is not printing the name because obviously you have to write down print print let's run this see this is demo one file and we bian it is printing right so if you are running this de display function from this demo one then it will not ask for user input you have to pass your name directly as a argument right but if you run this function directly you want that it should ask from you your name then it will print your name so that thing that you can take input from the user in this name main close so if you run this directly demo then see it is asking you your name so I just want to print my name Jenny Jenny and like this right so like this if you modify this kind of thing if you want to take input from the user when you run your script as a stand alone but when someone is going to import your your module then it shouldn't ask from user input you have to pass as a argument that thing so this modification this kind of modification we can do with this name main EDM right so this is one more you can say application of this name main close or this EDM now one question may be how many this name main if this close we can put in program more than one we can can we put yes you can put more than one this type of thing this line but I guess that would be a little bit weird only one would be sufficient but if you want you can put this Python language is not going to restrict you fine this is like same kind of thing if you relate this with real example like maybe in your house you have some kind of alira right then you have your you know valuable items or your money and like this and you have loged that thing and you have the key the owner have the key and so now if you are the owner and you want to open you want to access that money or that thing obviously you have the key and you can access those things but sometimes it happens like maybe there is some party or something some guest are there are coming to your home so maybe they are staying for two to 3 days or like this right so definitely they are not owner and they are not allowed to access that Al or those money or those valuable items right because they are not having key so that kind of thing so if you want to restrict something if you want that this kind of thing these kind of lines these kind of statements these thing would be executed only when you run this thing directly then you can put that thing in this name main close name main EDM right now suppose I put a line here it's not in any function or in this Clause it's just with a zero indentation this line would be run every time so if you directly run this demo then also you can see this line would be run every time so this line is here right and if you run this from demo one then also you can see this line this line would be run every time right so the line with zero indentation definitely that would be executed whenever you import that module so all those line would be executed directly right if you want to if you put that line in any function then only then that line will be executed only when you call that function right that is for sure or if you uh you know uh print this line within this close here now run demo one and see that line is in now because here within this name m close so this line would not be executed right I hope you got now the idea of what is this name and close when we should use this and what is use of this name m EDM in Python right so now that's it for this video now I'll see you in the next till then byebye take care
