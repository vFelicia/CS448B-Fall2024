With timestamps:

00:00 - so in the series of learning c
00:01 - programming we are discussing recursion
00:03 - in c in the previous video we have
00:04 - discussed some basics of recursion like
00:06 - what is recursion and
00:07 - if a program is having recursive
00:10 - function if a program is having a
00:11 - recursion then what is the flow of
00:14 - execution of that program with the help
00:16 - of two program we have discussed two
00:18 - methods first one was lengthy method
00:19 - second one was a little bit simple one
00:23 - and short
00:24 - right so second method you will apply
00:26 - when
00:27 - that type of program comes in
00:28 - competitive type of exam like a gate or
00:30 - udc network these kind of exams right so
00:34 - now we will discuss in this video types
00:36 - of recursion basically four types of
00:38 - recursion direct indirect tail and
00:41 - non-pay
00:42 - and you can also say two more types of
00:44 - frequent like linear and three so all
00:47 - the types of requirements we'll discuss
00:48 - one by one in this video we'll discuss
00:49 - direct and indirect with proper example
00:52 - with proper program you can say and
00:54 - more time frequency will discuss one by
00:56 - one in later videos right but before
00:58 - there is one really one thing if you are
01:00 - preparing for gay 2022 exam or will be
01:02 - preparing for this examination then an
01:04 - academy is going to conduct an academy
01:07 - combat it's you can say
01:09 - type of scholarship test for gate and
01:10 - escs parents so here you will get a
01:13 - chance to compete with thousands of
01:14 - learners and you stand a chance to win
01:16 - up to 100 scholarship this test will be
01:19 - on 31st of october and in this test you
01:21 - will get 20 questions and the time limit
01:22 - would be 60 minutes so you can assess
01:24 - your preparation in just 60 minutes
01:27 - using
01:28 - live leaderboard because you can see how
01:30 - you rank against others from all over
01:33 - india with a live lead reward that shows
01:34 - real time ranking after every question
01:37 - so better to take it live to compete
01:39 - with the best
01:42 - and if you take it live you will also
01:43 - get a chance to win some exciting prizes
01:46 - you can see the detail on my screen and
01:49 - after every contest you will get
01:50 - detailed video solutions by their
01:52 - experts so you can identify your weak
01:54 - areas you can improve and you can get it
01:56 - right next time and you can take it for
01:58 - free you just have to enroll it the
01:59 - involvement link i'll put in the
02:01 - description box of this video just go to
02:02 - that link scroll down pick up the right
02:05 - right test for you and just click enroll
02:07 - and use my code jkl10 to unlock the test
02:10 - and an academy is also giving you a
02:11 - great offer for gate and esc aspirants
02:14 - if you subscribe to 12 months of an
02:16 - academy gate and esc
02:17 - then you will get extra four months on
02:19 - it just to help you in your gate and ac
02:22 - 2023 uh preparation so the price detail
02:25 - you can see on my screen if you use my
02:27 - code jkl10 you will get extra 10
02:29 - discount on this paid subscription so
02:31 - all the relevant links and the details
02:32 - i'll put in the description box of this
02:34 - video you can go and check out so now
02:36 - let's discuss
02:37 - types of recursion so i hope you know
02:39 - what is recursion
02:41 - when a function call itself directly or
02:43 - indirectly that is called recursion like
02:46 - we have discussed this you know
02:48 - few example also like this function one
02:51 - here we have some code and function one
02:53 - itself calling
02:55 - function one
02:56 - right
02:57 - so this is our function calling and
02:59 - where we are calling this function in
03:01 - the function one only same function is
03:02 - calling this function is calling itself
03:05 - so it is what recursion
03:07 - right
03:08 - so the same function will call itself
03:10 - directly or indirectly
03:12 - so if it call itself directly that is
03:14 - direct recursion and how it is called
03:17 - itself indirectly that also we'll see
03:19 - with one example so this is you can say
03:22 - more precisely more precisely if i say
03:24 - then this is example of direct recursion
03:28 - because this function is calling itself
03:30 - directly
03:32 - right
03:33 - within itself it's like i'm calling
03:35 - myself
03:36 - like jenny so i'm calling myself only
03:38 - directly jenny so that is not a direct
03:41 - recovery
03:42 - right so this you know this type of
03:45 - example we have discussed in the
03:46 - previous video this that is very simple
03:48 - and this function is known as
03:50 - direct recursive so you can say a
03:52 - function is known as direct recursive if
03:55 - it call itself
03:57 - directly
03:58 - right so this is what
04:00 - direct recursive function and this
04:02 - process is known as direct recursion so
04:05 - i have i hope no need to take the
04:06 - example of this directory cousin
04:08 - indirect recursion is very important and
04:10 - little bit tricky also
04:12 - see
04:14 - indirect
04:15 - as the name says suggest indirect
04:17 - recursion
04:19 - so if it it is recursion then obviously
04:21 - function recursion means function will
04:23 - call itself but indirectly it will call
04:27 - like suppose i am calling myself jenny
04:30 - so i am calling myself directly it means
04:33 - that is direct 2000 but suppose i am
04:36 - calling pile
04:38 - pile is calling jiya
04:41 - and gi is calling jenny
04:44 - so yeah i am calling myself but through
04:48 - pile
04:49 - and jia
04:51 - that is what indirect recursion
04:54 - right or if i take simple this pile and
04:57 - pile is calling jenning this is also
04:59 - known as indirect recursion
05:01 - so this is also this is you can say one
05:03 - type of function pile is one type of
05:05 - function
05:06 - right
05:07 - so
05:07 - this process is what how we are calling
05:11 - in a circular
05:13 - motion in a circular fashion
05:15 - so one take i am taking pile is calling
05:17 - jia suppose gi is calling
05:21 - vyanj
05:22 - vyansha vyansha's calling suppose akash
05:27 - so these are function let's suppose
05:29 - these names are function itself so this
05:31 - is not recursion
05:33 - because no one is calling itself
05:35 - if akash is calling back to jenny
05:38 - this is known as recursion and it is
05:40 - indirect recursion
05:43 - right so when function call
05:46 - in a circular when function call occurs
05:49 - in a circular motion in a circular
05:51 - fashion that is known as
05:53 - indirect recursion or you can say c
05:57 - if a function call suppose this is
05:59 - function 1 and this is calling function
06:02 - 2
06:03 - a function is calling another function
06:06 - and this function 2
06:10 - is calling function 1
06:14 - directly or indirectly then this is
06:16 - known as indirect recursion
06:19 - see in function 1 i am calling function
06:21 - 2 but in function 2 again i am calling
06:23 - function 1. so ultimately in function 1
06:26 - i am calling function word but
06:28 - through function 2 indirectly so this is
06:31 - an example of indirect recursion right
06:34 - when a function call another function
06:36 - function 2 and that function 2
06:39 - calls the first function directly or
06:41 - indirectly then that is known as
06:43 - indirect recursion and these functions
06:45 - are known as this this function function
06:47 - one is known as indirect recursive
06:50 - this is calling itself but
06:52 - through function two indirectly so
06:54 - function one is known as indirect
06:57 - recursive function
06:59 - i hope you are getting my point right
07:03 - and this function 2 is also known as
07:05 - indirect recursive because function 2 is
07:07 - calling function 1
07:09 - function 1 is calling again function 2.
07:11 - so these are indirect recursive function
07:13 - let's take one example of this indirect
07:15 - recursion i hope you got the you know
07:17 - definition of this direct and indirect
07:19 - reversal right
07:21 - so this is a simple code i am taking
07:23 - that is example of indirect recursion
07:25 - here i am taking only a two function
07:27 - function one and function two you can
07:30 - take three four five function but they
07:32 - call themselves mutually in a circular
07:35 - fashion so that is known as known as
07:37 - indirect recursion right here i am
07:38 - taking only two functions see in main
07:41 - from main i am calling function one i am
07:43 - passing 5 so this is function 1
07:45 - right
07:46 - and i am checking the condition if n
07:48 - less than equal to 1 return 1 else
07:50 - execute this condition so in function 1
07:52 - i am calling function 2
07:54 - so we are calling function 2 in function
07:56 - 2 also first we are checking the
07:57 - condition and
07:59 - again we are calling function one
08:01 - so this is a circular uh you know
08:03 - fashion we are calling function one
08:04 - function two
08:05 - let's take let's see what exactly what
08:07 - output you are getting
08:09 - you can pause the video and you can
08:11 - drive in this code and see what output
08:13 - you are getting and after that you just
08:14 - resume the video and see you are getting
08:16 - the proper output or note exact output
08:19 - see though first of all the control will
08:20 - go here
08:21 - now here
08:22 - in printf i am
08:24 - calling function 1 i am passing 5
08:28 - so control will go here in the
08:29 - definition part function 1 right
08:33 - if you are using
08:34 - the calling function 1 first better
08:36 - first of all you will declare function
08:39 - one and function to both the prototype
08:41 - for function one and function two right
08:43 - how we will
08:45 - write in
08:46 - function one
08:48 - int and end function two and argument
08:52 - also only one argument of type in before
08:55 - this mean you can write down these two
08:57 - uh conditions uh sorry these two
08:59 - statements these are not condition so
09:01 - now in n we have five so whatever we are
09:04 - going to execute
09:06 - that
09:07 - obviously that statement we will write
09:09 - here
09:10 - this method we have discussed in a
09:11 - previous video how to solve these kind
09:13 - of problems recursive problems so
09:16 - this condition is true no so we are
09:18 - going to be into else part in else part
09:20 - we are going to do what return n into
09:24 - function 2 n means here and we have 5
09:26 - into
09:28 - function 2 but we are passing n minus 1
09:30 - that is 4
09:33 - so from here we are calling this
09:35 - now n value is 4
09:37 - this condition true no else part return
09:40 - n into n is what
09:42 - from function 2 we will do what
09:44 - n
09:45 - into
09:46 - function 1
09:48 - and we are passing n minus 1 that is
09:50 - 3
09:51 - so from here we are again calling
09:53 - function 1
09:56 - condition true no so what statement is
09:58 - going to be executed this statement only
10:01 - return this here n is what we are
10:03 - passing
10:04 - 3 so n is all 3 into
10:07 - from here we are calling function 2 n
10:09 - minus 1 that is we will pass 2
10:13 - now
10:14 - from here again
10:16 - what we will call this function now this
10:18 - time n value is 2 condition true no this
10:22 - statement would be executed means 2 into
10:25 - we are calling function 1 and what we
10:27 - will pass n minus 1 that is
10:29 - 1
10:30 - so from here again we are going to call
10:32 - this one now n value is 1 so what
10:35 - statement would be executed now check
10:36 - the condition n less than equal to 1 yes
10:38 - condition true so now return 1 which
10:41 - statement would be executed return
10:43 - 1.
10:45 - so it is going to return 1 where
10:49 - from where you are calling this so this
10:51 - is what function 1 so function 1 is what
10:53 - return 1 means here we have 1
10:56 - 2 into
10:57 - 1 is what
10:59 - output of this is
11:01 - 2
11:02 - now where it is going to return this
11:03 - value from where you are calling this
11:06 - this
11:08 - right so this 2 would be returned here
11:11 - 2 so 3 into 2 is
11:13 - 6 this becomes 6
11:15 - so back to here from here we were
11:17 - calling this so function 1
11:20 - 3 this this becomes 6 6 into
11:24 - 4 is
11:25 - 24 now 24 will be returned here 24 into
11:29 - 5 is 120 now 120 would be returned here
11:33 - function 1 5 and from where we were
11:34 - calling function 1 5 from here
11:37 - so in the main function what would be
11:39 - returned 120. so it will print 120
11:43 - that's it
11:44 - so it's like you can say example of
11:46 - what to find factorial of a number but
11:49 - using indirect recursion
11:52 - so if you are asked to find out
11:53 - factorial of a number using indirect
11:55 - recursion you can write down a program
11:57 - something like this
11:58 - and using direct recursion that is very
12:00 - simple
12:01 - right that i guess we have discussed in
12:03 - a previous video also
12:04 - see
12:05 - this
12:07 - you know the forward flow how we are
12:09 - moving forward
12:11 - in the same flow in the same process you
12:14 - are going to be backward
12:16 - this thing is very very very important
12:18 - if you go to this thing recursion is
12:20 - nothing to you
12:22 - these kind of programs like
12:24 - how to find output of these kind of
12:25 - program these are nothing to you very
12:27 - simple you just have to understand the
12:29 - flow
12:31 - up forward how you are moving forward
12:33 - that is very simple but mainly students
12:35 - get confused while moving backward after
12:38 - reaching the base condition how to move
12:40 - backward in the same flow
12:43 - you know half you have moved forward in
12:45 - the same process in the same flow you
12:47 - have to go backward simple
12:49 - as simple as that right the same path
12:52 - you have to take while going backward
12:55 - right
12:56 - so now uh that's it for this video in
12:58 - the next video we will see what tailed
13:00 - and long tail recursion so nice in the
13:01 - next video till then bye take care

Cleaned transcript:

so in the series of learning c programming we are discussing recursion in c in the previous video we have discussed some basics of recursion like what is recursion and if a program is having recursive function if a program is having a recursion then what is the flow of execution of that program with the help of two program we have discussed two methods first one was lengthy method second one was a little bit simple one and short right so second method you will apply when that type of program comes in competitive type of exam like a gate or udc network these kind of exams right so now we will discuss in this video types of recursion basically four types of recursion direct indirect tail and nonpay and you can also say two more types of frequent like linear and three so all the types of requirements we'll discuss one by one in this video we'll discuss direct and indirect with proper example with proper program you can say and more time frequency will discuss one by one in later videos right but before there is one really one thing if you are preparing for gay 2022 exam or will be preparing for this examination then an academy is going to conduct an academy combat it's you can say type of scholarship test for gate and escs parents so here you will get a chance to compete with thousands of learners and you stand a chance to win up to 100 scholarship this test will be on 31st of october and in this test you will get 20 questions and the time limit would be 60 minutes so you can assess your preparation in just 60 minutes using live leaderboard because you can see how you rank against others from all over india with a live lead reward that shows real time ranking after every question so better to take it live to compete with the best and if you take it live you will also get a chance to win some exciting prizes you can see the detail on my screen and after every contest you will get detailed video solutions by their experts so you can identify your weak areas you can improve and you can get it right next time and you can take it for free you just have to enroll it the involvement link i'll put in the description box of this video just go to that link scroll down pick up the right right test for you and just click enroll and use my code jkl10 to unlock the test and an academy is also giving you a great offer for gate and esc aspirants if you subscribe to 12 months of an academy gate and esc then you will get extra four months on it just to help you in your gate and ac 2023 uh preparation so the price detail you can see on my screen if you use my code jkl10 you will get extra 10 discount on this paid subscription so all the relevant links and the details i'll put in the description box of this video you can go and check out so now let's discuss types of recursion so i hope you know what is recursion when a function call itself directly or indirectly that is called recursion like we have discussed this you know few example also like this function one here we have some code and function one itself calling function one right so this is our function calling and where we are calling this function in the function one only same function is calling this function is calling itself so it is what recursion right so the same function will call itself directly or indirectly so if it call itself directly that is direct recursion and how it is called itself indirectly that also we'll see with one example so this is you can say more precisely more precisely if i say then this is example of direct recursion because this function is calling itself directly right within itself it's like i'm calling myself like jenny so i'm calling myself only directly jenny so that is not a direct recovery right so this you know this type of example we have discussed in the previous video this that is very simple and this function is known as direct recursive so you can say a function is known as direct recursive if it call itself directly right so this is what direct recursive function and this process is known as direct recursion so i have i hope no need to take the example of this directory cousin indirect recursion is very important and little bit tricky also see indirect as the name says suggest indirect recursion so if it it is recursion then obviously function recursion means function will call itself but indirectly it will call like suppose i am calling myself jenny so i am calling myself directly it means that is direct 2000 but suppose i am calling pile pile is calling jiya and gi is calling jenny so yeah i am calling myself but through pile and jia that is what indirect recursion right or if i take simple this pile and pile is calling jenning this is also known as indirect recursion so this is also this is you can say one type of function pile is one type of function right so this process is what how we are calling in a circular motion in a circular fashion so one take i am taking pile is calling jia suppose gi is calling vyanj vyansha vyansha's calling suppose akash so these are function let's suppose these names are function itself so this is not recursion because no one is calling itself if akash is calling back to jenny this is known as recursion and it is indirect recursion right so when function call in a circular when function call occurs in a circular motion in a circular fashion that is known as indirect recursion or you can say c if a function call suppose this is function 1 and this is calling function 2 a function is calling another function and this function 2 is calling function 1 directly or indirectly then this is known as indirect recursion see in function 1 i am calling function 2 but in function 2 again i am calling function 1. so ultimately in function 1 i am calling function word but through function 2 indirectly so this is an example of indirect recursion right when a function call another function function 2 and that function 2 calls the first function directly or indirectly then that is known as indirect recursion and these functions are known as this this function function one is known as indirect recursive this is calling itself but through function two indirectly so function one is known as indirect recursive function i hope you are getting my point right and this function 2 is also known as indirect recursive because function 2 is calling function 1 function 1 is calling again function 2. so these are indirect recursive function let's take one example of this indirect recursion i hope you got the you know definition of this direct and indirect reversal right so this is a simple code i am taking that is example of indirect recursion here i am taking only a two function function one and function two you can take three four five function but they call themselves mutually in a circular fashion so that is known as known as indirect recursion right here i am taking only two functions see in main from main i am calling function one i am passing 5 so this is function 1 right and i am checking the condition if n less than equal to 1 return 1 else execute this condition so in function 1 i am calling function 2 so we are calling function 2 in function 2 also first we are checking the condition and again we are calling function one so this is a circular uh you know fashion we are calling function one function two let's take let's see what exactly what output you are getting you can pause the video and you can drive in this code and see what output you are getting and after that you just resume the video and see you are getting the proper output or note exact output see though first of all the control will go here now here in printf i am calling function 1 i am passing 5 so control will go here in the definition part function 1 right if you are using the calling function 1 first better first of all you will declare function one and function to both the prototype for function one and function two right how we will write in function one int and end function two and argument also only one argument of type in before this mean you can write down these two uh conditions uh sorry these two statements these are not condition so now in n we have five so whatever we are going to execute that obviously that statement we will write here this method we have discussed in a previous video how to solve these kind of problems recursive problems so this condition is true no so we are going to be into else part in else part we are going to do what return n into function 2 n means here and we have 5 into function 2 but we are passing n minus 1 that is 4 so from here we are calling this now n value is 4 this condition true no else part return n into n is what from function 2 we will do what n into function 1 and we are passing n minus 1 that is 3 so from here we are again calling function 1 condition true no so what statement is going to be executed this statement only return this here n is what we are passing 3 so n is all 3 into from here we are calling function 2 n minus 1 that is we will pass 2 now from here again what we will call this function now this time n value is 2 condition true no this statement would be executed means 2 into we are calling function 1 and what we will pass n minus 1 that is 1 so from here again we are going to call this one now n value is 1 so what statement would be executed now check the condition n less than equal to 1 yes condition true so now return 1 which statement would be executed return 1. so it is going to return 1 where from where you are calling this so this is what function 1 so function 1 is what return 1 means here we have 1 2 into 1 is what output of this is 2 now where it is going to return this value from where you are calling this this right so this 2 would be returned here 2 so 3 into 2 is 6 this becomes 6 so back to here from here we were calling this so function 1 3 this this becomes 6 6 into 4 is 24 now 24 will be returned here 24 into 5 is 120 now 120 would be returned here function 1 5 and from where we were calling function 1 5 from here so in the main function what would be returned 120. so it will print 120 that's it so it's like you can say example of what to find factorial of a number but using indirect recursion so if you are asked to find out factorial of a number using indirect recursion you can write down a program something like this and using direct recursion that is very simple right that i guess we have discussed in a previous video also see this you know the forward flow how we are moving forward in the same flow in the same process you are going to be backward this thing is very very very important if you go to this thing recursion is nothing to you these kind of programs like how to find output of these kind of program these are nothing to you very simple you just have to understand the flow up forward how you are moving forward that is very simple but mainly students get confused while moving backward after reaching the base condition how to move backward in the same flow you know half you have moved forward in the same process in the same flow you have to go backward simple as simple as that right the same path you have to take while going backward right so now uh that's it for this video in the next video we will see what tailed and long tail recursion so nice in the next video till then bye take care
