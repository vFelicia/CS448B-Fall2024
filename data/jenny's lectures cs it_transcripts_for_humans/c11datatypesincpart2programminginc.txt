With timestamps:

00:00 - so in the series of learning programming
00:02 - in c in the previous video we have
00:03 - discussed
00:04 - data types that was part one in that
00:06 - video we have discussed the primitive
00:08 - data types so you can see primary data
00:09 - types
00:10 - or i can say built-in data types
00:12 - fundamental data types
00:13 - right those were int float void
00:16 - double and character right but
00:19 - there we have discussed in that video
00:21 - all about these data types and
00:23 - i have also drawn a table at the last of
00:26 - that video that shows the type of the
00:28 - data
00:29 - memory the data type will take like the
00:31 - storage one byte or two byte or four
00:32 - byte
00:33 - the format specifier and uh that
00:36 - range of that data type we need that
00:39 - table in this
00:40 - video also because i have got some
00:43 - questions in
00:44 - comment box and on my instagram
00:45 - instagram account also
00:47 - like when you are printing that data
00:49 - like we are printing
00:50 - into data when we we initialize some
00:53 - value to that data and we go to answer
00:55 - some other value
00:56 - why it is so in character also we are
00:58 - getting some other value
01:00 - so that today that is why i'm making
01:02 - this video we'll discuss in this video
01:04 - that thing
01:05 - i'll give you some examples also proper
01:07 - example
01:08 - i'll take and then we'll discuss the
01:10 - output of that
01:12 - example that line right why you are
01:15 - taking different
01:16 - answer from that initialization from the
01:19 - value you have initialized in your
01:20 - program why you are
01:22 - getting different answer right that we
01:24 - will discuss in this video
01:26 - so and this video is brought to you by
01:27 - by an academy because
01:29 - an academy has launched new batches
01:32 - for the aspirants preparing for csir
01:36 - ugc net june 2021 you will get here the
01:39 - complete course for csir net exam for
01:42 - june 20 2021 exam
01:44 - right and these batches are like they'll
01:46 - teach here
01:47 - like all the subject like life science
01:49 - chemical science and mathematical
01:50 - science
01:51 - and these batches are both in hindi and
01:54 - english so if you are comfortable in
01:55 - hindi you can watch
01:56 - those videos if you are comfortable in
01:57 - english you can watch those those videos
02:00 - so you have the facility to choose your
02:02 - favorite teacher and you can watch
02:04 - you can attend their classes right and
02:07 - this is what it's a paid subscription
02:09 - because you will get complete structured
02:11 - course
02:12 - for your csi or net exam but if you will
02:15 - use
02:16 - code you will get 10 discount on your
02:19 - paid subscription
02:20 - right so if you are planning to appear
02:23 - for uh june 21 2021 exam then it's
02:26 - better to start your preparation early
02:28 - and the best faculties at any academy
02:30 - are going to teach you and the batch may
02:32 - be in hindi language
02:33 - like the classes would be conducted in
02:35 - hindi language and they'll also provide
02:36 - you notes but
02:37 - the notes they'll provide you that would
02:39 - be in english language only
02:41 - so if you are interested you can go for
02:43 - it you just have to download an academy
02:45 - app and
02:46 - you just have to get the subscription of
02:48 - the batch you want they'll show you the
02:49 - detail
02:50 - right so i'll provide you all the
02:53 - details
02:54 - and the link as well as the referral
02:56 - code in the description box of this
02:57 - video
02:58 - you can go and check out so now let us
03:00 - continue our discussion on data types in
03:02 - c in this
03:03 - video i am going to discuss about int
03:04 - with proper example
03:06 - and some diagrammatic represent
03:08 - representation also
03:10 - see i am see in the context of 16-bit
03:13 - compiler
03:14 - see my system on my system if i find if
03:17 - i
03:17 - find the size of the end that gives me
03:20 - two bytes
03:21 - right maybe in your system if you find
03:23 - the size of it it will
03:24 - give you four bytes so i am discussing
03:27 - this
03:28 - uh the lecture in the context of this
03:31 - two bytes like
03:32 - the int is taking two bytes memory right
03:34 - and long end
03:35 - along is taking four bytes of memory
03:37 - right and short and
03:39 - also taking somewhere it's it will take
03:41 - one byte and
03:42 - in on some machine it will take two
03:44 - bytes now
03:46 - why the range of integer is lies between
03:49 - this for signed int the range is this
03:51 - one for unsigned it
03:52 - it is between uh this one see for
03:55 - integer
03:56 - suppose i am taking two bytes for
03:58 - storage integer
03:59 - will take 2 byte so 1 byte means 8 bits
04:03 - these are 2 bytes means 8 bits and 8
04:06 - bits so the lowest
04:07 - number can be 0 like i am putting 0 in
04:11 - every bit right and the highest number
04:14 - can be because binary
04:16 - uh the the computer understand the
04:17 - language of zeros and ones so we store
04:19 - everything in form of zeros in one so
04:21 - highest number
04:22 - can be in every cell we can put one
04:25 - so this is the highest number so this is
04:27 - corresponding to zero and this number
04:30 - will be six five five three five you can
04:33 - find out this number the number system
04:34 - when we will discuss number system then
04:35 - we will discuss how to convert
04:37 - a decimal number or integer into uh that
04:40 - binary language
04:41 - zeros and one forms so that is why the
04:44 - range is from zero to this one
04:46 - because the size of integer is two bytes
04:48 - so
04:49 - within these those using those two bytes
04:51 - we cannot
04:52 - store a number in unsigned in less than
04:56 - 0 and greater than this one but if it
04:59 - comes to signed
05:00 - integers means we can store positive
05:02 - value as well as negative value
05:04 - right so if you divide this by 2
05:09 - then that would be this number the round
05:12 - of number
05:12 - it would be this one so from 0
05:16 - to negative we will take minus 1 minus 2
05:18 - and up to
05:19 - minus 3 2 7 6 8 but this side the range
05:23 - is
05:24 - 3 2 7 6 7 why because
05:27 - we are also including 0 in positive
05:30 - integers that is why
05:31 - this side we have till 6 7 and this side
05:33 - we have till
05:34 - 6 8 that is why the range is this one
05:37 - because of the size
05:38 - i hope you got my point right now
05:41 - let me discuss it with the program and
05:43 - if i represent this
05:44 - range this one and this one you know
05:46 - circular form will represent it in a
05:48 - circular form then you will get
05:50 - a better understanding why you are
05:52 - getting different answer
05:54 - from the value you have initialized in
05:55 - your program right suppose i am taking
05:58 - this one
05:59 - for unsigned int for unsigned int that
06:02 - format specifier is percentage u
06:05 - this is for unsigned in i am
06:07 - representing it unsigned in
06:09 - so from 0 to 0 1 2 until
06:12 - 6 5 5 3 5 right 6 5
06:15 - 5 3 4 this one right
06:19 - now next one is suppose i am
06:22 - representing it
06:23 - this circle for signed end
06:28 - so from 0 to one value would be the
06:31 - positive value
06:32 - would be till 3 2 7 6 7
06:35 - this side i am taking positive values
06:37 - and this anti-clockwise i am taking
06:39 - negative value so minus 1 minus 2
06:41 - minus 3 and so on and here you will get
06:44 - minus 3
06:45 - 2 7 6 8 here we will have minus 3 2
06:48 - 7 6 7 and so on here we will have 3 2 7
06:52 - 6 6. i hope you are getting the circle
06:56 - right now let us take one example and
06:58 - assign some values to integer
07:00 - suppose i am writing this a simple
07:02 - program why you are including stdi dot
07:04 - is because i am using printf here
07:06 - the definition you can say the
07:08 - declaration the meaning of this
07:10 - is where in this library right and why
07:13 - you are including konyo rotates console
07:15 - input output because
07:16 - of this function gate cs and clrsl this
07:19 - is for
07:20 - clear screen and always in c we use
07:22 - clear
07:23 - clear screen function after the
07:25 - declaration of the variables
07:27 - right here we are declaring a variable
07:30 - and initializing the variable in the
07:31 - same statement
07:32 - so after that we will write clr scr if
07:34 - you write before this you will get an
07:36 - error
07:36 - so now i am going to put a value see
07:39 - first of all the control will go when
07:40 - you execute this program the control
07:42 - will go first of all the first line
07:43 - within the main function
07:45 - always execution would be started from
07:47 - main function first line is in a is
07:49 - equal to this one
07:50 - it means i'm declaring a variable so in
07:52 - memory a space would be allocated to
07:55 - this one and the name of that location
07:57 - is a
07:58 - variable is named memory location
08:00 - suppose location is
08:01 - i don't know address is suppose thousand
08:04 - right
08:05 - now we have to put something here now we
08:07 - are initializing
08:09 - this one i want to put this value here
08:12 - right this is what integer so now
08:16 - see it is if i am not writing signed or
08:18 - unsigned int
08:20 - then by default it is signed integer we
08:22 - can store positive value as well as
08:24 - negative value within this box
08:26 - within in this memory right so now
08:29 - it is signed one so go for this one
08:31 - three two
08:32 - seven six seven within this circle
08:35 - do you have this number yes i have three
08:38 - two seven six seven the range so this
08:40 - number is
08:40 - within this range right
08:44 - so 3 2 7 6 7 it would be stored in
08:47 - memory
08:48 - and then when you will print this value
08:51 - printf percentage deposit is d format
08:53 - specifier this is going to play a very
08:55 - important role
08:56 - right you will get to know uh in this
08:59 - video only
09:00 - percentage d means you are going to
09:01 - print integer value
09:04 - integer and you can say that
09:07 - signed integer value because for
09:08 - unsigned we are taking format specifier
09:10 - percentage u
09:13 - for this one signed we are taking
09:14 - percentage d
09:16 - and for short integer also you can use
09:19 - this one percentage d or percentage hd
09:22 - both are correct right for unsigned its
09:24 - percentage u so
09:25 - it is for signed integer right now next
09:28 - value is
09:29 - what is a so from where
09:32 - the compiler the control will fetch that
09:35 - data
09:36 - from this memory location and at this
09:38 - memory location we have three two seven
09:39 - six seven
09:40 - so the output would be this one only
09:42 - three two seven six
09:43 - seven you are getting same output you
09:46 - are initializing this one and you are
09:47 - getting same output
09:49 - now let us take a different case if i am
09:51 - writing here 3 2
09:52 - 7 6 8 now what will happen see
09:55 - it is signed integer so
09:59 - this has been the the data has been you
10:01 - know memory has been
10:02 - initialized to a so according to signed
10:05 - integer
10:06 - see this three two seven six eight
10:09 - check out it is within range or not the
10:12 - range is up to three two seven six seven
10:14 - it is out of range but it will not give
10:16 - you error
10:17 - right because it will initialize here
10:20 - what value after this one we have what
10:24 - minus 32768 so
10:27 - if we increase one like three to seven
10:30 - six
10:31 - and this is what 3 2 7 6 8 according to
10:35 - our circle
10:36 - so this value would be assigned minus 3
10:39 - 2 7 6 8 would be assigned to this
10:43 - a so now when you will print this one
10:46 - what value would be printed see when you
10:48 - will print like percentage d
10:50 - means you are printing what signed int
10:53 - for unsigned we will use percent is u
10:56 - so here the value of a what would be the
10:59 - output
11:00 - this you will get output minus 32768
11:05 - because in memory this has been stored
11:08 - right
11:09 - the output will not be taken from this
11:11 - line
11:12 - because the function of this line is
11:15 - what just
11:16 - to allocate memory to this variable and
11:19 - store
11:20 - whatever you have given but the stored
11:21 - value is this one so
11:23 - from memory it will go it is going to
11:26 - fetch
11:27 - so from here it is going to fetch now
11:29 - output would be -32768
11:31 - but you have initialized this one so
11:34 - this is what you can say for you it's
11:35 - some garbage value it's not correct but
11:37 - it is not giving you error
11:38 - and suppose if you will print here
11:41 - percentage u
11:43 - and a so this is what u is for
11:46 - unsigned integer so check
11:50 - to this circle that is unsigned integer
11:52 - now here while printing percentage u the
11:54 - value would be assigned this one only
11:56 - because it is what
11:57 - signed here if we have signed integer so
11:59 - this value would be assigned
12:00 - it will check this circle now here
12:02 - percentage u
12:04 - so it is for unsigned int so now check
12:06 - while printing
12:07 - the format specifier is this one and
12:09 - this is very important so now we will
12:11 - check while printing
12:12 - this value right so now check
12:15 - here we have minus this value or not
12:19 - here we don't have any minus sign but
12:21 - you can say
12:22 - somewhere their value would be like 3 2
12:26 - 7 6 7 3 2 7 6
12:29 - 8 3 2 7 6 9 and up to we have this value
12:34 - so now check this one 3 2 7 6
12:37 - seven and here we have three two seven
12:39 - six eight minus three to seven six
12:41 - eight but corresponding to minus here we
12:44 - have what
12:44 - positive value only three to seven six
12:46 - eight so here it will give
12:48 - three two seven six eight answer not
12:50 - minus value because format specifier is
12:52 - percentage u
12:54 - if you will not get this one let me take
12:56 - one another example
12:57 - let us suppose you want to show three to
12:58 - seven seven zero this is what i'm not
13:01 - writing anything so this is signed
13:02 - integer
13:03 - so now in a memory space has been
13:05 - allocated to this a
13:07 - now check in sign integer do you have
13:09 - this value 3 2 7
13:10 - 7 0 no this is out of range but it will
13:13 - not give you where it will
13:15 - put something in this memory but what it
13:16 - will store here
13:18 - see up to this one we have seven six
13:20 - seven
13:21 - this is seven six eight seven six nine
13:24 - and minus three two seven six six this
13:27 - is corresponding to
13:29 - seven seven zero so this value would be
13:30 - store minus three two
13:32 - seven six six right 67 68 69 70 70
13:36 - so this minus but sign is minus in the
13:38 - circle because this value is not in this
13:40 - range so this would be stored
13:42 - when you will print with percentage d
13:44 - then percentage d means
13:46 - signed integer in sign integer do we
13:49 - have this value
13:50 - yes we have this value so it will fetch
13:52 - directly this value so output of this
13:53 - line would be this one
13:54 - but suppose if you are printing it with
13:56 - percentage u that is unsigned integer
13:59 - so now value would be stored this one
14:01 - but while
14:02 - accessing the value it is percentage u
14:04 - it means unsigned in it will follow the
14:06 - circle
14:07 - do we have this value in this circle
14:10 - what is the value corresponding to this
14:12 - one we don't have minus sign
14:14 - so corresponding to this in this circle
14:16 - we have only
14:17 - three two seven seven zero only so it
14:19 - would be printed for percentage u
14:21 - right because see this circle in this
14:24 - circle is almost
14:24 - same you can check out here up to 67
14:27 - here would be the
14:28 - same number and after 67 68 but sign
14:32 - would be positive only because it is
14:34 - unsigned
14:35 - then 60 9 then 70. so corresponding to
14:39 - this
14:40 - in this one here we will have 70 only so
14:42 - it will print 70
14:43 - right but suppose if you are taking here
14:46 - long end
14:48 - so the range of long end is what it's
14:51 - beyond that this range in the previous
14:54 - video you can check out the table
14:55 - so this would be within the range
14:57 - because we are taking long end
14:59 - so both in case of percentage d and
15:01 - percentage u it will print this only
15:03 - because number would be stored as it is
15:06 - three two seven seven zero
15:09 - because of that range we are having this
15:10 - number within the range
15:12 - so that would be same output suppose if
15:15 - here i am taking
15:17 - into a 655 not 655 i am taking suppose
15:22 - minus 10 and then i am printing with
15:25 - percentage d and percentage u
15:27 - then what should be the output what will
15:29 - we would be stored here in
15:31 - a a is minus 10 it is signed integer
15:34 - in signed integer do you have minus 10
15:36 - yes we have minus 10 because both minus
15:38 - plus value we have so minus 10 would
15:40 - be stored when we will print with format
15:42 - specifier percentage d
15:43 - it means it is for signed integer
15:45 - definitely
15:46 - it is going to print minus 10 when we
15:48 - will print with
15:49 - percentage u this format specifier is
15:52 - what it is going to print unsigned
15:54 - value but this is signed so
15:56 - corresponding to this
15:57 - what is value in this unsigned circle in
16:00 - my minus 10.
16:02 - if we go reverse then it is
16:03 - corresponding to minus 1 it is
16:05 - corresponding to minus 2
16:07 - like this the value corresponding to
16:09 - minus 10 that would be printed and that
16:11 - value is what
16:12 - 6 5 5 2 6
16:15 - so you are initializing minus 10 but you
16:17 - are getting answer this one
16:19 - that is why the reason you are getting
16:20 - different answer maybe but suppose in
16:22 - long in time printing
16:24 - this number 7777
16:28 - so what would be the output we are using
16:30 - long and this number is within the range
16:33 - right so the same output would be
16:35 - printed percentage d percentage u
16:38 - it will print this number only right and
16:40 - if you initialize
16:41 - suppose int is equal to 0 then both will
16:44 - print here and here both will print 0
16:46 - and 0.
16:47 - here also we have 0 here also we have 0
16:50 - right
16:50 - both in signed and unsigned so whether
16:52 - you will print with this format
16:53 - specifier or this
16:54 - it will give you 0 and if suppose you
16:57 - specify here unsigned in
17:00 - so now you are specifying particularly
17:02 - unsigned in and you are storing minus
17:04 - sign that is signed
17:06 - that and this is a signed number so now
17:08 - memory would be allocated to a and what
17:10 - number would be stored here
17:12 - in unsigned integer check out this one
17:14 - corresponding to this value what should
17:16 - be the value minus three two seven six
17:17 - seven
17:18 - here somewhere we have three two seven
17:21 - six seven
17:22 - then three two seven six eight
17:25 - right now according to that
17:29 - here we have minus three two seven six
17:30 - seven now corresponding to this value
17:32 - what should be the value in this
17:34 - uh unsigned circle it's three two seven
17:37 - six
17:38 - nine right because here seven six seven
17:42 - six eight six nine right and this is
17:45 - what exactly minus
17:47 - three two seven six seven this one is
17:48 - minus three two seven six seven so in
17:50 - this circle corresponding to this we
17:51 - will get three two seven
17:53 - six nine this value would be assigned
17:55 - right now when you will print with
17:56 - percentage d
17:57 - means percentage d signed integer
18:01 - now check this value is while printing
18:04 - it is for sign integer so while printing
18:06 - we are fetching from
18:07 - this from here from memory only
18:11 - so now refer it will refer signed
18:13 - integer circle so check this value is
18:15 - within this integer or not this is not
18:18 - so corresponding to this value what is
18:20 - the value here
18:22 - 6 7 6 8 6 9 this value so here
18:25 - it will print minus 3 2 7 6 7
18:29 - and if you will print with percentage u
18:31 - it will print this value 3 2 7
18:33 - 6 9 because while printing with
18:36 - percentage u it will refer to this
18:37 - circle
18:38 - and in this circle do we have this value
18:40 - yes we will have this value so it will
18:41 - print this one
18:42 - right so see here you are assigning
18:45 - unsigned int
18:46 - this value but when you are printing
18:48 - with unsigned number
18:49 - then you are getting different answer
18:50 - from the initialization value
18:53 - because the range because of the range
18:56 - right
18:56 - according to that you can check out the
18:58 - short integer range also and according
19:01 - to that you can check out the long
19:02 - integer range also
19:04 - you you just have to practice this thing
19:06 - it's not like that
19:08 - just watching youtube videos and just by
19:10 - seeing these lectures yeah you got it no
19:12 - you have to practice with your own hand
19:14 - try to initialize different different
19:15 - values and try to find out what should
19:17 - be the answer
19:19 - before you're getting answer on your
19:21 - system
19:22 - briar in that program with these two
19:24 - circles signed in
19:25 - and sign it and we find out output with
19:28 - your own hand
19:29 - then check with your system then compile
19:32 - and run and
19:33 - then check with your system and tell
19:34 - your answer is correct or not
19:36 - right so maybe next video we will
19:38 - discuss about care
19:39 - everything we have discussed about it
19:41 - that thing we will discuss about
19:42 - character with some examples
19:44 - right so now i'll see you in the next
19:45 - video till then bye take

Cleaned transcript:

so in the series of learning programming in c in the previous video we have discussed data types that was part one in that video we have discussed the primitive data types so you can see primary data types or i can say builtin data types fundamental data types right those were int float void double and character right but there we have discussed in that video all about these data types and i have also drawn a table at the last of that video that shows the type of the data memory the data type will take like the storage one byte or two byte or four byte the format specifier and uh that range of that data type we need that table in this video also because i have got some questions in comment box and on my instagram instagram account also like when you are printing that data like we are printing into data when we we initialize some value to that data and we go to answer some other value why it is so in character also we are getting some other value so that today that is why i'm making this video we'll discuss in this video that thing i'll give you some examples also proper example i'll take and then we'll discuss the output of that example that line right why you are taking different answer from that initialization from the value you have initialized in your program why you are getting different answer right that we will discuss in this video so and this video is brought to you by by an academy because an academy has launched new batches for the aspirants preparing for csir ugc net june 2021 you will get here the complete course for csir net exam for june 20 2021 exam right and these batches are like they'll teach here like all the subject like life science chemical science and mathematical science and these batches are both in hindi and english so if you are comfortable in hindi you can watch those videos if you are comfortable in english you can watch those those videos so you have the facility to choose your favorite teacher and you can watch you can attend their classes right and this is what it's a paid subscription because you will get complete structured course for your csi or net exam but if you will use code you will get 10 discount on your paid subscription right so if you are planning to appear for uh june 21 2021 exam then it's better to start your preparation early and the best faculties at any academy are going to teach you and the batch may be in hindi language like the classes would be conducted in hindi language and they'll also provide you notes but the notes they'll provide you that would be in english language only so if you are interested you can go for it you just have to download an academy app and you just have to get the subscription of the batch you want they'll show you the detail right so i'll provide you all the details and the link as well as the referral code in the description box of this video you can go and check out so now let us continue our discussion on data types in c in this video i am going to discuss about int with proper example and some diagrammatic represent representation also see i am see in the context of 16bit compiler see my system on my system if i find if i find the size of the end that gives me two bytes right maybe in your system if you find the size of it it will give you four bytes so i am discussing this uh the lecture in the context of this two bytes like the int is taking two bytes memory right and long end along is taking four bytes of memory right and short and also taking somewhere it's it will take one byte and in on some machine it will take two bytes now why the range of integer is lies between this for signed int the range is this one for unsigned it it is between uh this one see for integer suppose i am taking two bytes for storage integer will take 2 byte so 1 byte means 8 bits these are 2 bytes means 8 bits and 8 bits so the lowest number can be 0 like i am putting 0 in every bit right and the highest number can be because binary uh the the computer understand the language of zeros and ones so we store everything in form of zeros in one so highest number can be in every cell we can put one so this is the highest number so this is corresponding to zero and this number will be six five five three five you can find out this number the number system when we will discuss number system then we will discuss how to convert a decimal number or integer into uh that binary language zeros and one forms so that is why the range is from zero to this one because the size of integer is two bytes so within these those using those two bytes we cannot store a number in unsigned in less than 0 and greater than this one but if it comes to signed integers means we can store positive value as well as negative value right so if you divide this by 2 then that would be this number the round of number it would be this one so from 0 to negative we will take minus 1 minus 2 and up to minus 3 2 7 6 8 but this side the range is 3 2 7 6 7 why because we are also including 0 in positive integers that is why this side we have till 6 7 and this side we have till 6 8 that is why the range is this one because of the size i hope you got my point right now let me discuss it with the program and if i represent this range this one and this one you know circular form will represent it in a circular form then you will get a better understanding why you are getting different answer from the value you have initialized in your program right suppose i am taking this one for unsigned int for unsigned int that format specifier is percentage u this is for unsigned in i am representing it unsigned in so from 0 to 0 1 2 until 6 5 5 3 5 right 6 5 5 3 4 this one right now next one is suppose i am representing it this circle for signed end so from 0 to one value would be the positive value would be till 3 2 7 6 7 this side i am taking positive values and this anticlockwise i am taking negative value so minus 1 minus 2 minus 3 and so on and here you will get minus 3 2 7 6 8 here we will have minus 3 2 7 6 7 and so on here we will have 3 2 7 6 6. i hope you are getting the circle right now let us take one example and assign some values to integer suppose i am writing this a simple program why you are including stdi dot is because i am using printf here the definition you can say the declaration the meaning of this is where in this library right and why you are including konyo rotates console input output because of this function gate cs and clrsl this is for clear screen and always in c we use clear clear screen function after the declaration of the variables right here we are declaring a variable and initializing the variable in the same statement so after that we will write clr scr if you write before this you will get an error so now i am going to put a value see first of all the control will go when you execute this program the control will go first of all the first line within the main function always execution would be started from main function first line is in a is equal to this one it means i'm declaring a variable so in memory a space would be allocated to this one and the name of that location is a variable is named memory location suppose location is i don't know address is suppose thousand right now we have to put something here now we are initializing this one i want to put this value here right this is what integer so now see it is if i am not writing signed or unsigned int then by default it is signed integer we can store positive value as well as negative value within this box within in this memory right so now it is signed one so go for this one three two seven six seven within this circle do you have this number yes i have three two seven six seven the range so this number is within this range right so 3 2 7 6 7 it would be stored in memory and then when you will print this value printf percentage deposit is d format specifier this is going to play a very important role right you will get to know uh in this video only percentage d means you are going to print integer value integer and you can say that signed integer value because for unsigned we are taking format specifier percentage u for this one signed we are taking percentage d and for short integer also you can use this one percentage d or percentage hd both are correct right for unsigned its percentage u so it is for signed integer right now next value is what is a so from where the compiler the control will fetch that data from this memory location and at this memory location we have three two seven six seven so the output would be this one only three two seven six seven you are getting same output you are initializing this one and you are getting same output now let us take a different case if i am writing here 3 2 7 6 8 now what will happen see it is signed integer so this has been the the data has been you know memory has been initialized to a so according to signed integer see this three two seven six eight check out it is within range or not the range is up to three two seven six seven it is out of range but it will not give you error right because it will initialize here what value after this one we have what minus 32768 so if we increase one like three to seven six and this is what 3 2 7 6 8 according to our circle so this value would be assigned minus 3 2 7 6 8 would be assigned to this a so now when you will print this one what value would be printed see when you will print like percentage d means you are printing what signed int for unsigned we will use percent is u so here the value of a what would be the output this you will get output minus 32768 because in memory this has been stored right the output will not be taken from this line because the function of this line is what just to allocate memory to this variable and store whatever you have given but the stored value is this one so from memory it will go it is going to fetch so from here it is going to fetch now output would be 32768 but you have initialized this one so this is what you can say for you it's some garbage value it's not correct but it is not giving you error and suppose if you will print here percentage u and a so this is what u is for unsigned integer so check to this circle that is unsigned integer now here while printing percentage u the value would be assigned this one only because it is what signed here if we have signed integer so this value would be assigned it will check this circle now here percentage u so it is for unsigned int so now check while printing the format specifier is this one and this is very important so now we will check while printing this value right so now check here we have minus this value or not here we don't have any minus sign but you can say somewhere their value would be like 3 2 7 6 7 3 2 7 6 8 3 2 7 6 9 and up to we have this value so now check this one 3 2 7 6 seven and here we have three two seven six eight minus three to seven six eight but corresponding to minus here we have what positive value only three to seven six eight so here it will give three two seven six eight answer not minus value because format specifier is percentage u if you will not get this one let me take one another example let us suppose you want to show three to seven seven zero this is what i'm not writing anything so this is signed integer so now in a memory space has been allocated to this a now check in sign integer do you have this value 3 2 7 7 0 no this is out of range but it will not give you where it will put something in this memory but what it will store here see up to this one we have seven six seven this is seven six eight seven six nine and minus three two seven six six this is corresponding to seven seven zero so this value would be store minus three two seven six six right 67 68 69 70 70 so this minus but sign is minus in the circle because this value is not in this range so this would be stored when you will print with percentage d then percentage d means signed integer in sign integer do we have this value yes we have this value so it will fetch directly this value so output of this line would be this one but suppose if you are printing it with percentage u that is unsigned integer so now value would be stored this one but while accessing the value it is percentage u it means unsigned in it will follow the circle do we have this value in this circle what is the value corresponding to this one we don't have minus sign so corresponding to this in this circle we have only three two seven seven zero only so it would be printed for percentage u right because see this circle in this circle is almost same you can check out here up to 67 here would be the same number and after 67 68 but sign would be positive only because it is unsigned then 60 9 then 70. so corresponding to this in this one here we will have 70 only so it will print 70 right but suppose if you are taking here long end so the range of long end is what it's beyond that this range in the previous video you can check out the table so this would be within the range because we are taking long end so both in case of percentage d and percentage u it will print this only because number would be stored as it is three two seven seven zero because of that range we are having this number within the range so that would be same output suppose if here i am taking into a 655 not 655 i am taking suppose minus 10 and then i am printing with percentage d and percentage u then what should be the output what will we would be stored here in a a is minus 10 it is signed integer in signed integer do you have minus 10 yes we have minus 10 because both minus plus value we have so minus 10 would be stored when we will print with format specifier percentage d it means it is for signed integer definitely it is going to print minus 10 when we will print with percentage u this format specifier is what it is going to print unsigned value but this is signed so corresponding to this what is value in this unsigned circle in my minus 10. if we go reverse then it is corresponding to minus 1 it is corresponding to minus 2 like this the value corresponding to minus 10 that would be printed and that value is what 6 5 5 2 6 so you are initializing minus 10 but you are getting answer this one that is why the reason you are getting different answer maybe but suppose in long in time printing this number 7777 so what would be the output we are using long and this number is within the range right so the same output would be printed percentage d percentage u it will print this number only right and if you initialize suppose int is equal to 0 then both will print here and here both will print 0 and 0. here also we have 0 here also we have 0 right both in signed and unsigned so whether you will print with this format specifier or this it will give you 0 and if suppose you specify here unsigned in so now you are specifying particularly unsigned in and you are storing minus sign that is signed that and this is a signed number so now memory would be allocated to a and what number would be stored here in unsigned integer check out this one corresponding to this value what should be the value minus three two seven six seven here somewhere we have three two seven six seven then three two seven six eight right now according to that here we have minus three two seven six seven now corresponding to this value what should be the value in this uh unsigned circle it's three two seven six nine right because here seven six seven six eight six nine right and this is what exactly minus three two seven six seven this one is minus three two seven six seven so in this circle corresponding to this we will get three two seven six nine this value would be assigned right now when you will print with percentage d means percentage d signed integer now check this value is while printing it is for sign integer so while printing we are fetching from this from here from memory only so now refer it will refer signed integer circle so check this value is within this integer or not this is not so corresponding to this value what is the value here 6 7 6 8 6 9 this value so here it will print minus 3 2 7 6 7 and if you will print with percentage u it will print this value 3 2 7 6 9 because while printing with percentage u it will refer to this circle and in this circle do we have this value yes we will have this value so it will print this one right so see here you are assigning unsigned int this value but when you are printing with unsigned number then you are getting different answer from the initialization value because the range because of the range right according to that you can check out the short integer range also and according to that you can check out the long integer range also you you just have to practice this thing it's not like that just watching youtube videos and just by seeing these lectures yeah you got it no you have to practice with your own hand try to initialize different different values and try to find out what should be the answer before you're getting answer on your system briar in that program with these two circles signed in and sign it and we find out output with your own hand then check with your system then compile and run and then check with your system and tell your answer is correct or not right so maybe next video we will discuss about care everything we have discussed about it that thing we will discuss about character with some examples right so now i'll see you in the next video till then bye take
