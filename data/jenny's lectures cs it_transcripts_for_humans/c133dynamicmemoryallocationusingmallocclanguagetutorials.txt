With timestamps:

00:00 - so in the series of running c program we
00:02 - are discussing dynamic memory allocation
00:03 - in c in the last video we have discussed
00:06 - what is dynamic memory allocation or you
00:07 - can say basics of dma what is dynamic
00:10 - memory location how dma is different
00:12 - from static memory allocation that we
00:13 - have discussed in previous video and in
00:15 - that video i have told you
00:17 - there are three functions which we use
00:19 - to allocate memory dynamically yellow
00:22 - malloc and relo and one function to del
00:25 - locate memory that is free function
00:26 - right so all these functions in detail
00:29 - will discuss one by one in this video we
00:30 - will talk about malloc function how to
00:32 - dynamically allocate memory using
00:34 - malloc function every single detail
00:36 - about this function we will discuss in
00:38 - this video with the help of a proper
00:40 - program right practically also i'll show
00:42 - you on my laptop like how to use this
00:45 - function in your program how the memory
00:46 - would be located what is the syntax of
00:48 - using this malloc function and
00:50 - everything about this function right but
00:52 - before that just not tell you one thing
00:53 - if you are preparing for gay 23 and 2024
00:56 - example will be preparing for this exam
00:59 - then an academy is going to start new
01:01 - batches from 9th of march
01:03 - in these batches their top educator will
01:05 - be covering all the subjects of cs and
01:07 - it for your gate preparation
01:10 - and in this course you will get
01:11 - preparation strategy tips and tricks
01:13 - practice questions numericals along with
01:16 - detailed explanation of all the concepts
01:20 - and the course would be covered in both
01:21 - hindi and english and notes would be
01:23 - given to you in
01:24 - english only plus separate doubt
01:26 - clearing session would also be conducted
01:28 - so you can get all your doubt cleared in
01:31 - in those sessions
01:33 - but this is paid subscription you will
01:34 - get complete and structured course so
01:36 - you can use my code jkl 10 to get 10
01:39 - discount on your paid subscription
01:41 - one more great offer is there for you if
01:44 - you take 24 month gate and esc plus
01:47 - subscription you will get extra four
01:49 - months free on it just to help in your
01:52 - gate and esc preparation means you are
01:54 - supposed to pay for 24 months and you
01:55 - will get extra four months right the
01:58 - price detail you can see on my screen
02:00 - and if you take 12 month of gate and esc
02:02 - plus subscription you will get extra
02:05 - three months free on it just you know to
02:07 - help you in your preparation
02:10 - and the software is valid till 10th of
02:12 - march
02:13 - and if you use my code jkl10 you will
02:15 - get extra 10 off on these reduced prices
02:18 - so you can see the price detail on the
02:20 - screen so all the relevant links and
02:22 - details i'll put in the description box
02:24 - of this video if you are interested you
02:26 - can go and check out now let's see how
02:27 - to dynamically allocate memory using
02:29 - malloc function first thing mallow means
02:32 - the full form you can say it's memory
02:34 - allocation
02:36 - right and generally we use this function
02:39 - to allocate memory to structures
02:42 - structures we have discussed in the
02:43 - previous videos right so basically we
02:46 - used to locate memory for
02:49 - structures the this function generally
02:51 - we use
02:52 - and for arrays generally we used catalog
02:54 - function but it's okay you can use for
02:56 - arrays you can uh you know use malloc
02:58 - also it's not like that only structures
03:00 - you can use mellow right but generally
03:03 - we use
03:04 - for structure malloc function y so that
03:06 - also will discuss see now malloc means
03:09 - memory allocation so what will happen
03:11 - the general syntax of writing malloc
03:13 - function is old you are supposed to
03:15 - write
03:16 - mellow
03:17 - and
03:18 - one argument only the size
03:21 - suppose i am here i am writing
03:24 - 8
03:25 - it means 8 bytes
03:28 - it will allocate
03:30 - from where from heat
03:33 - that i have told you in previous video
03:35 - from heap section
03:37 - the memory would be allocated
03:38 - dynamically not from stacks and ship
03:40 - from heap section right so it will
03:42 - allocate or it will reserve
03:45 - one complete block from the heap section
03:49 - of how many bytes
03:50 - eight bytes
03:53 - right and
03:55 - plus one more thing it will do it will
03:57 - return
03:58 - a pointer or you can say it will return
04:01 - address
04:02 - base address of this block suppose base
04:04 - address is 2000
04:06 - or you can say address of the first byte
04:09 - 2000 the next byte address is 2 0 0 1
04:12 - then like this
04:14 - so it will return the address of the
04:16 - first byte or you can see the base
04:18 - address that is 2000 it will return this
04:20 - thing
04:21 - right so obviously you are supposed to
04:24 - store this address
04:25 - right and this is address so you are
04:27 - supposed to take a pointer also right
04:29 - that is why
04:31 - to allocate memory dynamically
04:33 - you always you are supposed to use
04:35 - pointers without pointers you cannot do
04:38 - this thing
04:39 - so this is one great application of
04:41 - pointer right to dynamically allocate
04:44 - memory we use pointer
04:45 - right so now obviously this also will
04:47 - discuss now
04:50 - what we'll write the general syntax of
04:52 - this malloc function is what
04:54 - mellow and here we write the size
04:58 - underscore t and size
05:01 - and the return is return it will return
05:03 - what address
05:04 - right so return type would also be a
05:06 - pointer but which type of pointer
05:09 - it is void pointer void s trick
05:12 - the return type of this is
05:14 - void string like this you will write
05:18 - void pointer we have discussed in
05:19 - previous videos its like generic pointer
05:22 - right
05:23 - so now
05:24 - size t means it's nothing but unsigned
05:27 - in
05:29 - either you can take 0 or positive value
05:31 - not negative value right here you cannot
05:33 - take negative value memory cannot be
05:35 - negative right so size you're supposed
05:37 - to take either zero or positive value
05:39 - only right
05:40 - now
05:41 - why it will return void pointer void
05:44 - generic pointer
05:46 - right so why it will return this void
05:48 - pointer see
05:50 - i am saying that i want
05:52 - eight byte of block
05:54 - right so my lock will reserve a memory
05:57 - section memory segment from heat of
05:59 - eight by
06:00 - but
06:01 - right now
06:03 - there is no idea that which type of
06:06 - value i will store here
06:08 - it may be integer value float value
06:11 - character or anything
06:13 - right
06:14 - so we cannot so malloc does not know
06:16 - which type of values you want to store
06:18 - here so that is why it return
06:22 - void pointer generic pointer now
06:24 - according to your requirement which type
06:26 - of value you want to store you can type
06:28 - cast this word pointer
06:30 - you can type cast it suppose i want to
06:33 - store integer value
06:36 - here
06:37 - so you can type cast this pointer into
06:40 - integer pointer if you want to store
06:41 - float value you can type cast it into
06:44 - float also
06:46 - that is why it
06:47 - malloc returns void pointer
06:50 - because it doesn't have any idea which
06:52 - type of value you will store
06:54 - the in this reserved memory segment
06:56 - right that's why dennis richie team did
06:59 - this like return only void pointer so
07:02 - all type of value you can store here you
07:04 - can type because we have one more fund
07:05 - of typecasting so you can type cast and
07:08 - you can store it suppose it is fixed
07:10 - that malloc will return in type of
07:12 - pointer
07:13 - so always you can store in this memory
07:15 - integer value not float value or any
07:18 - other kind of value right
07:20 - that's why i hope now you go to y the
07:22 - return type of this is void pointer
07:25 - fine if you have any no doubt you can
07:26 - ask me in comment box right next is it
07:28 - is what unsigned it okay
07:31 - now
07:32 - if we write here
07:33 - 20 so
07:35 - 20 byte block would be allocated but
07:37 - generally we don't write here
07:40 - this fixed well
07:41 - which
07:42 - operator will use sizeof operator so
07:46 - how we will write this thing
07:48 - we will write
07:49 - malloc
07:50 - and
07:52 - size of
07:54 - in bracket suppose i want to take
07:56 - int i have taken end pointer in star ptr
08:00 - means i want to store integer value here
08:03 - right so here i will take size of
08:06 - int
08:08 - sizeoffend means
08:10 - in some machine integer take 4 bytes in
08:12 - some machine it is take 2 bytes that's
08:15 - why it is one of the reason that we
08:17 - cannot directly write here 20 right or
08:20 - maybe for suppose i want to store here
08:24 - 3 integer
08:26 - right
08:27 - so
08:28 - you will write here 3 into
08:30 - sizeofint means 3 into 4 that is 12
08:34 - bytes would be allocated to you
08:36 - so maybe you will say can i write here
08:39 - malloc 12 it will allocate you 12 byte
08:42 - right
08:43 - no it's not a good practice why so
08:45 - because in some machine integer take it
08:47 - depends on compiler to compiler 4 bytes
08:50 - in some it takes 2 byte maybe in my
08:51 - machine it is taking 4 byte maybe you
08:53 - are using in your pc it is taking two
08:55 - byte
08:56 - so you cannot fix
08:58 - you know uh write this you cannot fix it
09:00 - that let me just you know i i'm going to
09:02 - show three integer so 12 byte no
09:05 - if in your machine indicator taking 2
09:07 - byte then you will need only 6 byte
09:10 - memory so why you will reserve a space
09:13 - of 12 byte
09:14 - right that is wastage of memory
09:16 - and to remove this drawback wastage of
09:18 - memory we use dynamic memory allocation
09:20 - so we cannot waste memory memory is very
09:22 - crucial resource that is why we use here
09:24 - sizeof and in
09:26 - let just the compiler decide what is the
09:29 - size of integer why we should take this
09:32 - headache of writing this this you know
09:34 - fixed size right so i hope this is clear
09:36 - to you why we write sizeof operator i
09:38 - hope this is clear to you that why
09:39 - mellow return type is void pointer right
09:42 - and i hope the syntax is also clear to
09:44 - you fine now one more point is how to
09:46 - type cast suppose here i want to store
09:48 - integer value and it will return void
09:51 - pointer right it is returning this
09:53 - address
09:55 - 3 into sizeofint means it will now
09:57 - reserve 12 byte space
09:59 - right
10:00 - and it is going to return
10:02 - the base address suppose base address is
10:05 - 2000 fine for the first
10:07 - integer then we will store the second
10:09 - integer then third integer
10:11 - but it is it is going to return this in
10:13 - the form of void pointer so we are
10:16 - supposed to type cast it into integer
10:19 - pointer right because we are storing
10:22 - integer value so how to type cast is
10:25 - before this just write
10:27 - int asterisk and break it
10:30 - so now whatever the address it will
10:32 - return just store it into a pointer
10:35 - ptr this is the syntax i hope the syntax
10:38 - is
10:39 - clear to you and semicolon right in star
10:42 - ptr means this point is going to store
10:44 - address of a variable whose data type is
10:46 - integer right
10:48 - i hope this is clear to you so now this
10:50 - we have typecasted it into int pointer
10:53 - and that address we are going to store
10:54 - in this
10:55 - in type of pointer right
10:58 - and one more point about malloc is what
11:00 - the memory if you will not initialize
11:02 - these
11:03 - integer
11:04 - this byte then
11:06 - by default
11:08 - it would be initialized with some
11:09 - garbage value
11:11 - here also we'll have some garbage value
11:12 - some garbage value some garbage value if
11:14 - without initializing these integer
11:17 - if you will print these values then it
11:20 - will give you some garbage value maybe
11:22 - some minus value or any value
11:24 - garbage value it will give right next
11:26 - point about mellow function is what
11:29 - if the smell of is not able to allocate
11:31 - memory from heap suppose
11:34 - memory
11:35 - is of n byte and you want to
11:37 - uh you know allocate a memory n plus one
11:39 - byte so obviously
11:41 - the memory would not be allocated to you
11:43 - so in case of failure it will return
11:46 - null pointer
11:50 - and on success it will return the base
11:53 - address or you can say the address of
11:55 - the first byte of that that preserved
11:58 - block it will reserve a complete block
12:01 - of
12:02 - these bytes how many bytes you want for
12:04 - those bytes it will reserve a complete
12:05 - block so the address of the first byte
12:08 - of that block it will return with the
12:09 - base address it will return and on
12:11 - failure it will return null
12:13 - right
12:14 - so in your program also after allocating
12:16 - this we will check if this ptr is equal
12:19 - to is equal to null
12:21 - so simply you will write printf memory
12:24 - you know or you can say malloc is not
12:26 - able to allocate a memory or memory
12:27 - allocation fail these type of errors you
12:29 - can print and that's it else you can do
12:31 - whatever you want to do right
12:33 - and after
12:35 - your you know task is done just use free
12:38 - function to free the allocated mandate
12:40 - right free and the name of that pointer
12:43 - that is ptr we are taking so btr and
12:45 - semicolon that's it right now let me
12:48 - just write down a simple program so this
12:51 - is the simple program i just want to ask
12:53 - from the user some values and i just
12:55 - want to print those values right so i've
12:56 - taken one
12:57 - pointer integer pointer and variable and
13:00 - i variable
13:02 - will ask from the user enter total
13:03 - number of total number of values so in n
13:06 - i'm going to store that thing so now
13:08 - we'll store suppose user enter like
13:11 - enter total number of values and value
13:13 - is at first time n value is 3
13:16 - and that is
13:18 - we obviously we want to store integer
13:20 - values because we are taking int pointer
13:23 - so how many bytes would be allocated and
13:25 - 3 into 4 that is 2l
13:28 - so in simply mallow will write n into
13:30 - size of in that's it
13:32 - if user is entering an n value is equal
13:34 - to five that i want to
13:37 - store five values simply here we will do
13:40 - this malloc will do five into four that
13:42 - is 20 byte it would be located according
13:44 - to your need dynamically memory would be
13:45 - allocated and we are converting it type
13:48 - casting it into end and then in point
13:50 - time into store so now for enter values
13:52 - just take a for loop from 0 to n
13:56 - using pointer how you can access see
13:58 - with this pointer only you can access
14:00 - that memory dynamic dynamically located
14:02 - memory right so using pointer only we
14:04 - will access that memory and we will
14:06 - store
14:07 - there the values
14:09 - i am not using here address of operator
14:11 - y address of means where
14:13 - we need to tell the scan a function the
14:15 - address where you want to store but
14:17 - pointer itself
14:20 - store address of that location so no
14:23 - need to write down here address of
14:24 - operator right suppose here one block of
14:27 - memory has been allocated from this is
14:29 - suppose heap
14:31 - this is my heap
14:33 - and
14:34 - n value user has entered n value is 3 so
14:36 - how many bytes would be allocated a
14:38 - block of
14:40 - 12 bytes
14:41 - 3 into 4 right and suppose base address
14:44 - is 2000 so it will return 2000 that
14:47 - would be store in pointer but this
14:49 - pointer is what this pointer is what
14:52 - it would be in stack memory
14:55 - this is dynamically allocated memory but
14:57 - this pointer this is what
14:59 - this n i this pointer these are what
15:01 - static memory location so these
15:03 - variables
15:04 - will take memory from the stack frame
15:07 - stack frame of main
15:09 - so here we have this is ptr and it is
15:12 - going to store address of 2000 so it is
15:15 - going to point here now so using this
15:16 - pointer we can access this thing right
15:19 - now ptr plus ii value is 0
15:22 - means
15:24 - 2000 plus
15:26 - plus 0 into 4 i hope you know how to do
15:29 - arithmetic with pointers if you don't
15:31 - know we have already uploaded a video on
15:33 - this thing you can check out the c
15:35 - programming playlist right
15:37 - now at 2000 only we are going to store
15:38 - the value suppose user has entered four
15:40 - so that would be stored here
15:42 - right now next i value becomes one so
15:45 - one into four so next address would be
15:47 - two zero zero four two zero zero four
15:50 - suppose next value entered is five
15:52 - i value becomes 2 now 2 into
15:55 - 4 that is 8 2 0 0 8 now next value would
15:58 - be stored at 2 0 0 8 that is suppose 10
16:02 - right now i value becomes
16:04 - first 0 then 1 then 2 now becomes 3
16:08 - is 3 less than 3 n values 3 no so out of
16:11 - the loop and here so 3 value we have
16:14 - stored and using pointer only we can
16:16 - access these values same for loop from 0
16:19 - to n 0 1 2 right once it becomes 3 it
16:23 - will exit till then it is going to print
16:25 - s trig we are using y so this is
16:26 - indirection operator
16:28 - it will give value at this address
16:31 - so first of all pointer is in pointer we
16:33 - have 2000 plus i value at first is 0
16:36 - so strict 2000 so it will print value at
16:39 - 2 000 that is 4 it will print
16:42 - then i becomes 1 then 2 000 plus 1 into
16:46 - 4 that is 2 0 0 4 strict asterisk 2004
16:49 - value at 2004 is 5 so it will print 5
16:52 - then 10
16:54 - right
16:55 - this is very simple program i am using
16:57 - mellow
16:58 - for just entering an area of 3 integer
17:01 - generally we use it with structures so
17:04 - it's your assignment
17:05 - you are supposed to take a structure
17:07 - maybe a structure of you know student or
17:09 - employ anything you can take right
17:11 - and then there you use mellow
17:14 - if you are not okay with this if you are
17:16 - finding any problem in that program you
17:18 - can tell me in comment box we can i know
17:20 - i can upload a separate video where we
17:21 - will take an example of structure
17:24 - how to use malloc in structure right
17:27 - so now i hope this is clear to you let
17:29 - me just show you practical of this thing
17:31 - so let me just create a new file here
17:35 - i am writing malloc dot c only right
17:41 - and one more point about this is what
17:43 - all these functions four functions for
17:45 - dynamic memory location and da location
17:48 - these are defined in stdlib dot h so you
17:51 - are supposed to include this library
17:53 - also
17:54 - if you want to use these function in
17:56 - your program otherwise they will it will
17:58 - give error right i am taking end n then
18:00 - one variable i and one is
18:03 - ptr
18:04 - right
18:12 - enter total number of values you want to
18:15 - print you can
18:17 - something you can write something like
18:18 - this and
18:20 - percentage d address of
18:23 - n
18:24 - right now
18:26 - let me just
18:27 - how to write down mallow
18:30 - this is what type casting
18:33 - we are going to store integer value
18:35 - just write down malloc
18:37 - then n
18:39 - into
18:41 - of operator and size of in because i
18:43 - want to store
18:44 - interval right now memory has been
18:47 - allocated to you
18:49 - now from the user we will ask
18:54 - enter the values right
18:57 - for better formatting let me just write
18:59 - down slash in here
19:01 - and just a for loop
19:05 - i is equal to 0 i less than
19:08 - n and i plus plus
19:11 - right
19:12 - and in this we'll use a scanf scanf
19:15 - percentage d
19:17 - and
19:18 - what
19:19 - using pointer we can access these values
19:21 - so ptr plus i
19:25 - right and if you want to print these
19:27 - values entered values
19:29 - then
19:30 - one more for loop and here you will
19:32 - write down
19:35 - the entered
19:40 - values are
19:43 - right one more for loop and rather than
19:45 - printf sorry scanf we will use
19:48 - printf
19:50 - percentage d and here we will use strict
19:53 - indirection operator because that's why
19:55 - we can use value at this address
19:57 - right and after this we will use free we
20:00 - are going to free this memory also this
20:02 - is your responsibility right
20:04 - you have to free this memory
20:07 - explicitly using this free
20:10 - function fine
20:13 - now let me just run this and show you
20:15 - the output see enter total number of
20:17 - values so i am going to enter three
20:18 - values so enter the values one two
20:21 - three
20:22 - so the entered values are one two three
20:24 - for better formatting you can just
20:28 - put here a
20:29 - slash t tab that is also fine
20:33 - but whatever we are we want that program
20:35 - whatever the expected output it is
20:37 - giving you that output right so
20:40 - why this see now next time if you will
20:43 - enter next time if you will enter i like
20:46 - enter
20:47 - the values and next time the user want
20:49 - five values so that is also fine for
20:51 - five values memory would be allocated
20:53 - right one two three four five one two
20:56 - three four five
20:57 - right
20:58 - so it's like
21:00 - how many values you want to enter at the
21:02 - runtime you will tell and that only
21:05 - memory allocated to you using
21:06 - dynamically
21:08 - statically if you will use then you can
21:10 - you will do what will take an array
21:13 - like i am taking in array and let's take
21:16 - maximum size of array let's take 30
21:20 - maybe you will take 5 for 10 or 15 or 17
21:23 - or 25 let's take maximum generally we
21:26 - take 50 or 30 right now suppose user
21:29 - enter only five value so remaining
21:32 - the block of memory which has been
21:33 - reserved for you
21:35 - allocated to you because it is static
21:37 - memory allocation 13 to 4 that is 120
21:40 - bytes has been allocated to you so
21:42 - remaining bytes you are using only
21:43 - memory of 4 5 integer 5 into 4 that is
21:46 - 20 bytes you are using the remaining
21:48 - bytes are
21:50 - unnecessary wastage of memory right
21:53 - that is why
21:54 - rather than using this static memory
21:56 - location better to use
21:58 - this pointer concept or a point to
22:00 - concept means dynamic memory allocation
22:02 - right
22:02 - it's same like if uh
22:04 - let's take a real life example if you
22:06 - are you know in a hostel so for having
22:09 - your meal i mean your lunch or dinner
22:11 - you go to mess right and if sometimes it
22:13 - happens like
22:14 - you don't go to mess and you ask your
22:16 - friend to you know bring you some
22:18 - chapatis
22:36 - but the better option is
22:55 - i hope you are able to relate this real
22:57 - life example with this uh you know
22:59 - memory of like dynamic memory and
23:02 - starting from your location right if you
23:04 - have any better real-life example of
23:07 - this thing you can write down that thing
23:09 - in comment box and the best
23:11 - example help pin
23:13 - right i'll pin that comment so that
23:15 - everyone and other student can also get
23:17 - help from your example right so i think
23:19 - that's it for this video now so now i
23:21 - guess everything about malloc is clear
23:23 - to you guys like you don't need to
23:25 - memorize the syntax of malloc will you
23:27 - you'll write here in star or malloc and
23:29 - this type of thing no now i guess you
23:31 - have you know the logic behind
23:33 - everything you have written here right
23:35 - so you can use malloc now in your
23:37 - program fine so in the next video you
23:39 - will see callout function with the help
23:40 - of a program so i'll see in the next
23:41 - video till then bye take care

Cleaned transcript:

so in the series of running c program we are discussing dynamic memory allocation in c in the last video we have discussed what is dynamic memory allocation or you can say basics of dma what is dynamic memory location how dma is different from static memory allocation that we have discussed in previous video and in that video i have told you there are three functions which we use to allocate memory dynamically yellow malloc and relo and one function to del locate memory that is free function right so all these functions in detail will discuss one by one in this video we will talk about malloc function how to dynamically allocate memory using malloc function every single detail about this function we will discuss in this video with the help of a proper program right practically also i'll show you on my laptop like how to use this function in your program how the memory would be located what is the syntax of using this malloc function and everything about this function right but before that just not tell you one thing if you are preparing for gay 23 and 2024 example will be preparing for this exam then an academy is going to start new batches from 9th of march in these batches their top educator will be covering all the subjects of cs and it for your gate preparation and in this course you will get preparation strategy tips and tricks practice questions numericals along with detailed explanation of all the concepts and the course would be covered in both hindi and english and notes would be given to you in english only plus separate doubt clearing session would also be conducted so you can get all your doubt cleared in in those sessions but this is paid subscription you will get complete and structured course so you can use my code jkl 10 to get 10 discount on your paid subscription one more great offer is there for you if you take 24 month gate and esc plus subscription you will get extra four months free on it just to help in your gate and esc preparation means you are supposed to pay for 24 months and you will get extra four months right the price detail you can see on my screen and if you take 12 month of gate and esc plus subscription you will get extra three months free on it just you know to help you in your preparation and the software is valid till 10th of march and if you use my code jkl10 you will get extra 10 off on these reduced prices so you can see the price detail on the screen so all the relevant links and details i'll put in the description box of this video if you are interested you can go and check out now let's see how to dynamically allocate memory using malloc function first thing mallow means the full form you can say it's memory allocation right and generally we use this function to allocate memory to structures structures we have discussed in the previous videos right so basically we used to locate memory for structures the this function generally we use and for arrays generally we used catalog function but it's okay you can use for arrays you can uh you know use malloc also it's not like that only structures you can use mellow right but generally we use for structure malloc function y so that also will discuss see now malloc means memory allocation so what will happen the general syntax of writing malloc function is old you are supposed to write mellow and one argument only the size suppose i am here i am writing 8 it means 8 bytes it will allocate from where from heat that i have told you in previous video from heap section the memory would be allocated dynamically not from stacks and ship from heap section right so it will allocate or it will reserve one complete block from the heap section of how many bytes eight bytes right and plus one more thing it will do it will return a pointer or you can say it will return address base address of this block suppose base address is 2000 or you can say address of the first byte 2000 the next byte address is 2 0 0 1 then like this so it will return the address of the first byte or you can see the base address that is 2000 it will return this thing right so obviously you are supposed to store this address right and this is address so you are supposed to take a pointer also right that is why to allocate memory dynamically you always you are supposed to use pointers without pointers you cannot do this thing so this is one great application of pointer right to dynamically allocate memory we use pointer right so now obviously this also will discuss now what we'll write the general syntax of this malloc function is what mellow and here we write the size underscore t and size and the return is return it will return what address right so return type would also be a pointer but which type of pointer it is void pointer void s trick the return type of this is void string like this you will write void pointer we have discussed in previous videos its like generic pointer right so now size t means it's nothing but unsigned in either you can take 0 or positive value not negative value right here you cannot take negative value memory cannot be negative right so size you're supposed to take either zero or positive value only right now why it will return void pointer void generic pointer right so why it will return this void pointer see i am saying that i want eight byte of block right so my lock will reserve a memory section memory segment from heat of eight by but right now there is no idea that which type of value i will store here it may be integer value float value character or anything right so we cannot so malloc does not know which type of values you want to store here so that is why it return void pointer generic pointer now according to your requirement which type of value you want to store you can type cast this word pointer you can type cast it suppose i want to store integer value here so you can type cast this pointer into integer pointer if you want to store float value you can type cast it into float also that is why it malloc returns void pointer because it doesn't have any idea which type of value you will store the in this reserved memory segment right that's why dennis richie team did this like return only void pointer so all type of value you can store here you can type because we have one more fund of typecasting so you can type cast and you can store it suppose it is fixed that malloc will return in type of pointer so always you can store in this memory integer value not float value or any other kind of value right that's why i hope now you go to y the return type of this is void pointer fine if you have any no doubt you can ask me in comment box right next is it is what unsigned it okay now if we write here 20 so 20 byte block would be allocated but generally we don't write here this fixed well which operator will use sizeof operator so how we will write this thing we will write malloc and size of in bracket suppose i want to take int i have taken end pointer in star ptr means i want to store integer value here right so here i will take size of int sizeoffend means in some machine integer take 4 bytes in some machine it is take 2 bytes that's why it is one of the reason that we cannot directly write here 20 right or maybe for suppose i want to store here 3 integer right so you will write here 3 into sizeofint means 3 into 4 that is 12 bytes would be allocated to you so maybe you will say can i write here malloc 12 it will allocate you 12 byte right no it's not a good practice why so because in some machine integer take it depends on compiler to compiler 4 bytes in some it takes 2 byte maybe in my machine it is taking 4 byte maybe you are using in your pc it is taking two byte so you cannot fix you know uh write this you cannot fix it that let me just you know i i'm going to show three integer so 12 byte no if in your machine indicator taking 2 byte then you will need only 6 byte memory so why you will reserve a space of 12 byte right that is wastage of memory and to remove this drawback wastage of memory we use dynamic memory allocation so we cannot waste memory memory is very crucial resource that is why we use here sizeof and in let just the compiler decide what is the size of integer why we should take this headache of writing this this you know fixed size right so i hope this is clear to you why we write sizeof operator i hope this is clear to you that why mellow return type is void pointer right and i hope the syntax is also clear to you fine now one more point is how to type cast suppose here i want to store integer value and it will return void pointer right it is returning this address 3 into sizeofint means it will now reserve 12 byte space right and it is going to return the base address suppose base address is 2000 fine for the first integer then we will store the second integer then third integer but it is it is going to return this in the form of void pointer so we are supposed to type cast it into integer pointer right because we are storing integer value so how to type cast is before this just write int asterisk and break it so now whatever the address it will return just store it into a pointer ptr this is the syntax i hope the syntax is clear to you and semicolon right in star ptr means this point is going to store address of a variable whose data type is integer right i hope this is clear to you so now this we have typecasted it into int pointer and that address we are going to store in this in type of pointer right and one more point about malloc is what the memory if you will not initialize these integer this byte then by default it would be initialized with some garbage value here also we'll have some garbage value some garbage value some garbage value if without initializing these integer if you will print these values then it will give you some garbage value maybe some minus value or any value garbage value it will give right next point about mellow function is what if the smell of is not able to allocate memory from heap suppose memory is of n byte and you want to uh you know allocate a memory n plus one byte so obviously the memory would not be allocated to you so in case of failure it will return null pointer and on success it will return the base address or you can say the address of the first byte of that that preserved block it will reserve a complete block of these bytes how many bytes you want for those bytes it will reserve a complete block so the address of the first byte of that block it will return with the base address it will return and on failure it will return null right so in your program also after allocating this we will check if this ptr is equal to is equal to null so simply you will write printf memory you know or you can say malloc is not able to allocate a memory or memory allocation fail these type of errors you can print and that's it else you can do whatever you want to do right and after your you know task is done just use free function to free the allocated mandate right free and the name of that pointer that is ptr we are taking so btr and semicolon that's it right now let me just write down a simple program so this is the simple program i just want to ask from the user some values and i just want to print those values right so i've taken one pointer integer pointer and variable and i variable will ask from the user enter total number of total number of values so in n i'm going to store that thing so now we'll store suppose user enter like enter total number of values and value is at first time n value is 3 and that is we obviously we want to store integer values because we are taking int pointer so how many bytes would be allocated and 3 into 4 that is 2l so in simply mallow will write n into size of in that's it if user is entering an n value is equal to five that i want to store five values simply here we will do this malloc will do five into four that is 20 byte it would be located according to your need dynamically memory would be allocated and we are converting it type casting it into end and then in point time into store so now for enter values just take a for loop from 0 to n using pointer how you can access see with this pointer only you can access that memory dynamic dynamically located memory right so using pointer only we will access that memory and we will store there the values i am not using here address of operator y address of means where we need to tell the scan a function the address where you want to store but pointer itself store address of that location so no need to write down here address of operator right suppose here one block of memory has been allocated from this is suppose heap this is my heap and n value user has entered n value is 3 so how many bytes would be allocated a block of 12 bytes 3 into 4 right and suppose base address is 2000 so it will return 2000 that would be store in pointer but this pointer is what this pointer is what it would be in stack memory this is dynamically allocated memory but this pointer this is what this n i this pointer these are what static memory location so these variables will take memory from the stack frame stack frame of main so here we have this is ptr and it is going to store address of 2000 so it is going to point here now so using this pointer we can access this thing right now ptr plus ii value is 0 means 2000 plus plus 0 into 4 i hope you know how to do arithmetic with pointers if you don't know we have already uploaded a video on this thing you can check out the c programming playlist right now at 2000 only we are going to store the value suppose user has entered four so that would be stored here right now next i value becomes one so one into four so next address would be two zero zero four two zero zero four suppose next value entered is five i value becomes 2 now 2 into 4 that is 8 2 0 0 8 now next value would be stored at 2 0 0 8 that is suppose 10 right now i value becomes first 0 then 1 then 2 now becomes 3 is 3 less than 3 n values 3 no so out of the loop and here so 3 value we have stored and using pointer only we can access these values same for loop from 0 to n 0 1 2 right once it becomes 3 it will exit till then it is going to print s trig we are using y so this is indirection operator it will give value at this address so first of all pointer is in pointer we have 2000 plus i value at first is 0 so strict 2000 so it will print value at 2 000 that is 4 it will print then i becomes 1 then 2 000 plus 1 into 4 that is 2 0 0 4 strict asterisk 2004 value at 2004 is 5 so it will print 5 then 10 right this is very simple program i am using mellow for just entering an area of 3 integer generally we use it with structures so it's your assignment you are supposed to take a structure maybe a structure of you know student or employ anything you can take right and then there you use mellow if you are not okay with this if you are finding any problem in that program you can tell me in comment box we can i know i can upload a separate video where we will take an example of structure how to use malloc in structure right so now i hope this is clear to you let me just show you practical of this thing so let me just create a new file here i am writing malloc dot c only right and one more point about this is what all these functions four functions for dynamic memory location and da location these are defined in stdlib dot h so you are supposed to include this library also if you want to use these function in your program otherwise they will it will give error right i am taking end n then one variable i and one is ptr right enter total number of values you want to print you can something you can write something like this and percentage d address of n right now let me just how to write down mallow this is what type casting we are going to store integer value just write down malloc then n into of operator and size of in because i want to store interval right now memory has been allocated to you now from the user we will ask enter the values right for better formatting let me just write down slash in here and just a for loop i is equal to 0 i less than n and i plus plus right and in this we'll use a scanf scanf percentage d and what using pointer we can access these values so ptr plus i right and if you want to print these values entered values then one more for loop and here you will write down the entered values are right one more for loop and rather than printf sorry scanf we will use printf percentage d and here we will use strict indirection operator because that's why we can use value at this address right and after this we will use free we are going to free this memory also this is your responsibility right you have to free this memory explicitly using this free function fine now let me just run this and show you the output see enter total number of values so i am going to enter three values so enter the values one two three so the entered values are one two three for better formatting you can just put here a slash t tab that is also fine but whatever we are we want that program whatever the expected output it is giving you that output right so why this see now next time if you will enter next time if you will enter i like enter the values and next time the user want five values so that is also fine for five values memory would be allocated right one two three four five one two three four five right so it's like how many values you want to enter at the runtime you will tell and that only memory allocated to you using dynamically statically if you will use then you can you will do what will take an array like i am taking in array and let's take maximum size of array let's take 30 maybe you will take 5 for 10 or 15 or 17 or 25 let's take maximum generally we take 50 or 30 right now suppose user enter only five value so remaining the block of memory which has been reserved for you allocated to you because it is static memory allocation 13 to 4 that is 120 bytes has been allocated to you so remaining bytes you are using only memory of 4 5 integer 5 into 4 that is 20 bytes you are using the remaining bytes are unnecessary wastage of memory right that is why rather than using this static memory location better to use this pointer concept or a point to concept means dynamic memory allocation right it's same like if uh let's take a real life example if you are you know in a hostel so for having your meal i mean your lunch or dinner you go to mess right and if sometimes it happens like you don't go to mess and you ask your friend to you know bring you some chapatis but the better option is i hope you are able to relate this real life example with this uh you know memory of like dynamic memory and starting from your location right if you have any better reallife example of this thing you can write down that thing in comment box and the best example help pin right i'll pin that comment so that everyone and other student can also get help from your example right so i think that's it for this video now so now i guess everything about malloc is clear to you guys like you don't need to memorize the syntax of malloc will you you'll write here in star or malloc and this type of thing no now i guess you have you know the logic behind everything you have written here right so you can use malloc now in your program fine so in the next video you will see callout function with the help of a program so i'll see in the next video till then bye take care
