With timestamps:

00:00 - topic is shortest job first or you can
00:02 - say shortest job next so as a name
00:05 - suggests what is the funda in the shin
00:08 - dealing algorithm of all the available
00:11 - processes or you can say out of all the
00:14 - processes who are in waiting state it
00:16 - selects a process having shortest burst
00:20 - time to execute next and towards enough
00:24 - so this type of scheduling algorithm is
00:27 - there one is preemptive pre-emptive and
00:29 - next one is non pre-emptive difference
00:31 - between these two is see in non
00:33 - pre-emptive once a one CPU has been
00:35 - allocated to a process then the that
00:38 - process cannot be forcefully removed
00:40 - from the CPU till the termination of
00:44 - that process fine and in pre M you we
00:46 - can remove that process from CPU based
00:49 - on some time quantum or priority basis
00:51 - okay that is pre-emptive you can
00:53 - forcefully remove that process from CPU
00:56 - so see when you are asked a question
01:01 - then they specify that you have to apply
01:04 - a stupid preemption okay and if simply
01:07 - they write solve this problem with
01:09 - shortest job first algorithm then by
01:12 - default you have to use what which mode
01:15 - that is non pre-emptive mode fine and
01:18 - the pre-emptive mode of this algorithm
01:21 - is also known as shortest remaining time
01:24 - first SRT F or you can say short test
01:28 - remaining time next fine if in a
01:32 - numerical or in question you are given
01:34 - that solve this problem with the
01:37 - shortest remaining time first solution
01:39 - willing algorithm then by default
01:42 - shortest remaining time first means you
01:44 - have to apply what technique pre-emptive
01:46 - this one is pre-emptive so you have to
01:48 - apply preemption method fine and if
01:52 - nothing is given pre-empting non
01:53 - pre-emptive and sjf is given then by
01:55 - default it is known as non pre-emptive
01:59 - okay now in this video we'll discuss the
02:02 - non pre-emptive version of this
02:04 - algorithm okay see and some drawbacks
02:09 - are also there of this algorithm but I
02:11 - will discuss the tropics in next to be
02:13 - after discussing this algorithm also SRT
02:16 - f also so in next video I'll discuss SRT
02:18 - F and both you know the advantages and
02:21 - drawbacks of both the versions
02:23 - pre-emptive and pre-emptive and non
02:24 - pre-emptive okay so let us take one
02:26 - example if two or more processes are
02:29 - given with same burst time then what
02:32 - will you do see the funda is you have to
02:35 - choose a process with minimum words time
02:37 - but if two processes are having same
02:39 - burst time 1 and 1 you can see then then
02:42 - you will apply first-come first-serve to
02:45 - break the time so first of all will draw
02:47 - what Gantt chart and here we'll start
02:56 - the cpu time from 0 see this one is this
03:01 - this is very important to solve this
03:03 - numerical if you draw you have drawn
03:06 - this Gantt chart properly and correctly
03:07 - then almost 90 percent of your work has
03:10 - been done fine see now time is 0 now at
03:16 - checkout at 0 at time 0 is there any
03:20 - process which has come in ready state
03:24 - out of these processes yes we have this
03:27 - process because arrival time of this
03:28 - process is 0 so at time 0 we have only
03:32 - one process that is p4 so you cannot say
03:37 - that directly you jump to this burst
03:40 - time and check out the burst time serum
03:42 - a shortest burst time is 1 and 1 so if
03:45 - both are same if two processes are
03:47 - having same first time then use FCFS
03:49 - FCFS means p 1 so you can write P 1 no
03:52 - see that is not right because you cannot
03:55 - allocate CPU to either P 1 or P 3 why so
03:58 - we can say p arrival time of piven is to
04:01 - arrival time of P 3 P 3 is 4 so these
04:05 - two processes has not come yet in ready
04:08 - state at time 0 out of all the available
04:13 - processes fine now at time 0 which
04:18 - process is available you have to check
04:20 - first of all check the arrival time only
04:22 - one process that is P 4 so you have no
04:26 - other
04:26 - choice you have to allocate the CPU to
04:29 - this process p4
04:30 - although the burst time of P for l6
04:32 - which is the largest burst time out of
04:36 - these processes but you have no other
04:38 - choice because at time 0 only p4 is
04:41 - there in ready state no other process
04:44 - has come so you have to allocate CPU to
04:47 - p4 and till burst time of this process
04:52 - is 6 so this process would require 6
04:55 - unit of time for completing its
04:56 - execution so here you will write 6 as it
05:01 - is non pre-emptive mode we are
05:03 - discussing the non pre-emptive mode so
05:06 - in between the execution you cannot
05:08 - remove this process from CPU because
05:11 - this is non pre-emptive here the
05:13 - assumption is no process would require
05:15 - any i/o device only CPU bound processes
05:20 - we have taken now at time 6 you have to
05:24 - check out which process has come now
05:26 - this has come to at time 2 1 4 n now
05:31 - this one is done and T Phi so all the
05:34 - processes has been arrived so you can
05:36 - say in our ready queue now we have p1
05:39 - also p2 also p3 also on p5 also all the
05:45 - three processes and ready queue now you
05:47 - have to apply the funda of estrella now
05:52 - you how to select a process having shot
05:54 - test burst time because we have all the
05:57 - processes out of all the available
05:59 - processes you have to pick fine now see
06:03 - two processes are having same both time
06:05 - because one is the minimum one so p1 is
06:08 - also having one and p3 is also having
06:10 - one now there is a tie now to break the
06:15 - tie you here you have to apply what FCFS
06:18 - fine first come first so now check out
06:22 - the arrival time of these two processes
06:24 - one and one having burst time now which
06:27 - comes first
06:28 - p1 has come at time 2 and P 3 came at
06:32 - time 4 so according to first-come
06:35 - first-serve CPU would be allocated to p1
06:38 - because 2 is less than
06:40 - this for so p1 has come before d3 so PCP
06:46 - would be located to p1 ok and now tell
06:52 - you what time check out the first time
06:53 - that is one so it required only one unit
06:56 - of time six to seven now p1 has been
06:58 - terminated now in ready queue how many
07:02 - processes are there three processes P 2
07:04 - P 3 and P 5 now again apply the same fun
07:09 - down pick the process having minimum
07:11 - birth time which one is having minimum
07:12 - birth time this one one out of P 2 P 3
07:16 - and P 5 out of these remaining three one
07:19 - is minimum so we'll pick P 3 and 7 to 8
07:25 - now Pichu is also done now out of
07:28 - remaining P 2 and P 5 5 is smaller than
07:32 - sorry 3 3 is smaller than 5 so we'll
07:36 - pick what P 5 and burst time is 3 now
07:41 - you'll write here what 11 now the
07:45 - remaining is only P 2 and this would be
07:50 - 16 okay now see you see the Gantt chart
07:58 - is there any time when the problem when
08:02 - the CPU was idle no from 0 to this 16
08:07 - every every time the CPU was busy doing
08:11 - some processing fine so in this case if
08:14 - CPU is not idle from starting to ending
08:17 - this total 16 should be equal to this
08:21 - total of this burst time 6 plus 3 9 10
08:25 - 15 and 16 so this total is also 16 and
08:28 - this is also 16 then you can say you can
08:31 - verify it by this also but in the last
08:35 - numerical we have discussed that at one
08:38 - particular time CPU is idle for one one
08:40 - unit of time so here this and this would
08:43 - not be same in that case you have to
08:45 - take care of this thing also so if CPU
08:50 - was not idle from the starting point to
08:52 - the end
08:53 - point then you can say this they
08:55 - whatever you will get at this point it
08:57 - lasts then that this would be equal to
08:59 - the total of the first time given first
09:01 - time okay
09:02 - now we are we will calculate all the
09:05 - average waiting time average the
09:06 - turnaround time response time and all
09:08 - okay now first of all completion time
09:13 - now completion completion time is what
09:15 - at the time where when the process has
09:18 - been completed now the completion time
09:21 - of p1 is what 637 because that 71 has
09:27 - been completed and terminated for p2 its
09:32 - 1643 it's 8 for P 4 6 4 P 5 11 C do not
09:43 - use do not write at this time for p5
09:46 - because at this time CPU has been
09:48 - allocated to p5 and at 11 in this p5 has
09:53 - been terminated so we are taking the
09:55 - completion time of that process 11 okay
09:59 - now turn on turnaround time now what is
10:03 - the turnaround time completion time -
10:05 - arrival time that is known as turnaround
10:07 - time or you can say waiting time plus
10:09 - burst time now we have both completion
10:12 - time in arrival time 7-5 7-5 16 - 115 8
10:19 - - 4 4 6 - 0 that is 6 a 1 - 2 that is 9
10:24 - this is the turnaround time now find out
10:27 - the waiting time waiting time would be
10:30 - what see turnaround time you can say
10:33 - waiting time plus burst then waiting
10:36 - time would be turnaround time - both
10:38 - time
10:39 - turnaround time this one this one is
10:41 - burst time 5 - 1 for 15 - 5 & 4 - 1 3 6
10:46 - - 6 0 9 - 3 6 ok now next is response
10:53 - time now response time is what see the
11:00 - time address CPU has been allocated to
11:02 - the process first time after that I will
11:04 - of that process okay
11:07 - now check out response time for p1 for
11:11 - p1 at what time CPU has been allocated
11:14 - to p1 first time first time at time 6
11:18 - and then what time the p1 has come in
11:22 - ready state check out the arrival time
11:24 - for P 1 that is 2 so response time would
11:28 - be 6 minus 2 that is 4 4 p2 check out at
11:34 - 11 CPU was allocated to this p2 first
11:37 - time 11 and the arrival time of p2 is 1
11:41 - so response time is so the process has
11:43 - been waiting because at 1 the process
11:46 - has come to ready state but CPU has been
11:48 - allocated to do this process at time 11
11:51 - so during this time the process was
11:53 - waiting that is 11 minus 1 that is 10
11:56 - for p3 7 minus 4 that is 3 for p4 0
12:03 - minus 0 that is 0 and 4 P 5 8 minus 2
12:08 - that is 6 in previous video I have also
12:11 - told you the rule is if the algorithm is
12:15 - non pre-emptive then the waiting time
12:20 - and response time would be same here you
12:23 - can check for 10 3 0 6 for 10 3 0 6 ok
12:28 - now I hope you can easily calculate the
12:31 - average waiting time and average
12:32 - turnaround time so average turnaround
12:35 - time would be 7 point 8 and average
12:37 - waiting time would be 4 point 6 ok so
12:42 - that was the non-preemptive origin of
12:44 - shortest job first next video we'll
12:47 - discuss the pre-emptive version of
12:49 - shortest job first as well as the
12:51 - drawbacks and advantages of this
12:54 - algorithm ok till then bye bye take

Cleaned transcript:

topic is shortest job first or you can say shortest job next so as a name suggests what is the funda in the shin dealing algorithm of all the available processes or you can say out of all the processes who are in waiting state it selects a process having shortest burst time to execute next and towards enough so this type of scheduling algorithm is there one is preemptive preemptive and next one is non preemptive difference between these two is see in non preemptive once a one CPU has been allocated to a process then the that process cannot be forcefully removed from the CPU till the termination of that process fine and in pre M you we can remove that process from CPU based on some time quantum or priority basis okay that is preemptive you can forcefully remove that process from CPU so see when you are asked a question then they specify that you have to apply a stupid preemption okay and if simply they write solve this problem with shortest job first algorithm then by default you have to use what which mode that is non preemptive mode fine and the preemptive mode of this algorithm is also known as shortest remaining time first SRT F or you can say short test remaining time next fine if in a numerical or in question you are given that solve this problem with the shortest remaining time first solution willing algorithm then by default shortest remaining time first means you have to apply what technique preemptive this one is preemptive so you have to apply preemption method fine and if nothing is given preempting non preemptive and sjf is given then by default it is known as non preemptive okay now in this video we'll discuss the non preemptive version of this algorithm okay see and some drawbacks are also there of this algorithm but I will discuss the tropics in next to be after discussing this algorithm also SRT f also so in next video I'll discuss SRT F and both you know the advantages and drawbacks of both the versions preemptive and preemptive and non preemptive okay so let us take one example if two or more processes are given with same burst time then what will you do see the funda is you have to choose a process with minimum words time but if two processes are having same burst time 1 and 1 you can see then then you will apply firstcome firstserve to break the time so first of all will draw what Gantt chart and here we'll start the cpu time from 0 see this one is this this is very important to solve this numerical if you draw you have drawn this Gantt chart properly and correctly then almost 90 percent of your work has been done fine see now time is 0 now at checkout at 0 at time 0 is there any process which has come in ready state out of these processes yes we have this process because arrival time of this process is 0 so at time 0 we have only one process that is p4 so you cannot say that directly you jump to this burst time and check out the burst time serum a shortest burst time is 1 and 1 so if both are same if two processes are having same first time then use FCFS FCFS means p 1 so you can write P 1 no see that is not right because you cannot allocate CPU to either P 1 or P 3 why so we can say p arrival time of piven is to arrival time of P 3 P 3 is 4 so these two processes has not come yet in ready state at time 0 out of all the available processes fine now at time 0 which process is available you have to check first of all check the arrival time only one process that is P 4 so you have no other choice you have to allocate the CPU to this process p4 although the burst time of P for l6 which is the largest burst time out of these processes but you have no other choice because at time 0 only p4 is there in ready state no other process has come so you have to allocate CPU to p4 and till burst time of this process is 6 so this process would require 6 unit of time for completing its execution so here you will write 6 as it is non preemptive mode we are discussing the non preemptive mode so in between the execution you cannot remove this process from CPU because this is non preemptive here the assumption is no process would require any i/o device only CPU bound processes we have taken now at time 6 you have to check out which process has come now this has come to at time 2 1 4 n now this one is done and T Phi so all the processes has been arrived so you can say in our ready queue now we have p1 also p2 also p3 also on p5 also all the three processes and ready queue now you have to apply the funda of estrella now you how to select a process having shot test burst time because we have all the processes out of all the available processes you have to pick fine now see two processes are having same both time because one is the minimum one so p1 is also having one and p3 is also having one now there is a tie now to break the tie you here you have to apply what FCFS fine first come first so now check out the arrival time of these two processes one and one having burst time now which comes first p1 has come at time 2 and P 3 came at time 4 so according to firstcome firstserve CPU would be allocated to p1 because 2 is less than this for so p1 has come before d3 so PCP would be located to p1 ok and now tell you what time check out the first time that is one so it required only one unit of time six to seven now p1 has been terminated now in ready queue how many processes are there three processes P 2 P 3 and P 5 now again apply the same fun down pick the process having minimum birth time which one is having minimum birth time this one one out of P 2 P 3 and P 5 out of these remaining three one is minimum so we'll pick P 3 and 7 to 8 now Pichu is also done now out of remaining P 2 and P 5 5 is smaller than sorry 3 3 is smaller than 5 so we'll pick what P 5 and burst time is 3 now you'll write here what 11 now the remaining is only P 2 and this would be 16 okay now see you see the Gantt chart is there any time when the problem when the CPU was idle no from 0 to this 16 every every time the CPU was busy doing some processing fine so in this case if CPU is not idle from starting to ending this total 16 should be equal to this total of this burst time 6 plus 3 9 10 15 and 16 so this total is also 16 and this is also 16 then you can say you can verify it by this also but in the last numerical we have discussed that at one particular time CPU is idle for one one unit of time so here this and this would not be same in that case you have to take care of this thing also so if CPU was not idle from the starting point to the end point then you can say this they whatever you will get at this point it lasts then that this would be equal to the total of the first time given first time okay now we are we will calculate all the average waiting time average the turnaround time response time and all okay now first of all completion time now completion completion time is what at the time where when the process has been completed now the completion time of p1 is what 637 because that 71 has been completed and terminated for p2 its 1643 it's 8 for P 4 6 4 P 5 11 C do not use do not write at this time for p5 because at this time CPU has been allocated to p5 and at 11 in this p5 has been terminated so we are taking the completion time of that process 11 okay now turn on turnaround time now what is the turnaround time completion time arrival time that is known as turnaround time or you can say waiting time plus burst time now we have both completion time in arrival time 75 75 16 115 8 4 4 6 0 that is 6 a 1 2 that is 9 this is the turnaround time now find out the waiting time waiting time would be what see turnaround time you can say waiting time plus burst then waiting time would be turnaround time both time turnaround time this one this one is burst time 5 1 for 15 5 & 4 1 3 6 6 0 9 3 6 ok now next is response time now response time is what see the time address CPU has been allocated to the process first time after that I will of that process okay now check out response time for p1 for p1 at what time CPU has been allocated to p1 first time first time at time 6 and then what time the p1 has come in ready state check out the arrival time for P 1 that is 2 so response time would be 6 minus 2 that is 4 4 p2 check out at 11 CPU was allocated to this p2 first time 11 and the arrival time of p2 is 1 so response time is so the process has been waiting because at 1 the process has come to ready state but CPU has been allocated to do this process at time 11 so during this time the process was waiting that is 11 minus 1 that is 10 for p3 7 minus 4 that is 3 for p4 0 minus 0 that is 0 and 4 P 5 8 minus 2 that is 6 in previous video I have also told you the rule is if the algorithm is non preemptive then the waiting time and response time would be same here you can check for 10 3 0 6 for 10 3 0 6 ok now I hope you can easily calculate the average waiting time and average turnaround time so average turnaround time would be 7 point 8 and average waiting time would be 4 point 6 ok so that was the nonpreemptive origin of shortest job first next video we'll discuss the preemptive version of shortest job first as well as the drawbacks and advantages of this algorithm ok till then bye bye take
