With timestamps:

00:00 - hey everyone I hope you are safe and
00:01 - doing good so in the series of learning
00:03 - C++ programming language we are
00:05 - discussing functions in C++ in previous
00:07 - video we have seen one coding exercise
00:09 - uh based on uh function overloading
00:12 - right so till now we have discussed
00:14 - basics of function right then call by
00:17 - value call by reference or we can say
00:18 - pass by value pass by reference and then
00:20 - function overloading right and based on
00:23 - that we have discussed two coding
00:24 - exercises as well I mean not two
00:26 - actually it was four coding exercises
00:29 - right now in this video we'll be
00:31 - discussing how to pass arrays to a
00:33 - function right it's not that we'll
00:36 - simply pass some variables or those
00:39 - integer variables or float variables
00:41 - that is it no when you will be actually
00:44 - working on projects you need to pass
00:46 - arrays vectors even functions to a
00:48 - function and many different kind of
00:49 - things right so same we'll see in this
00:52 - video how to pass arrays to a function
00:54 - but before that I just want to tell you
00:55 - one thing I have a great news for all
00:57 - the gate aspirant an academy is big
01:00 - offer is live out now what is so special
01:02 - about this offer now you can get flat
01:05 - 50% off yes flat 50% off on your gate
01:09 - plus and iconic subscriptions see an
01:12 - academy is going to start new batches
01:14 - for all the gate and PSU aspirant from
01:17 - 30th of June right as well as one more
01:21 - batch for placement preparation they're
01:23 - going to start from 30th of right and in
01:25 - these batches the the top faculties will
01:28 - be covering all the gate subjects all
01:31 - the cabus of uh gate right plus some
01:34 - special classes like preparation
01:35 - strategies some T tips and tricks
01:37 - practice questions doubt solving
01:39 - sessions these sessions would also be
01:41 - there so if you are planning to go for
01:43 - gate exam then it is right time to start
01:45 - your preparation and go for this Plus or
01:47 - iconic subscription so now you can start
01:49 - your gate 2025 preparation at rupes 9999
01:53 - only and use my code Jenny to get
01:56 - maximum discount but one thing this flat
01:59 - 50% offer is valid till 30th of June
02:02 - only right so hurry up all the relevant
02:04 - links and details you'll find in the
02:06 - description box of this video you can go
02:07 - and check out now let's see how to pass
02:09 - arrays to a function right to understand
02:12 - this thing first you need to understand
02:14 - like what is an array the basic point so
02:16 - if I write something like this so if I
02:18 - say I have an array of integer and size
02:21 - is four like this suppose this is the
02:23 - value I have in this array 1 - 1 0 and
02:27 - 10 so if I say a the array
02:31 - name it will store what the Base address
02:35 - of this array Base address means the
02:37 - address of the first element of the
02:40 - suppose memory has been allocated to
02:42 - this this array and the starting
02:44 - location is suppose th000 or 100 so each
02:48 - AR element will take like its integer
02:50 - type so it will take four bytes so like
02:52 - one4 then one8 and 1 one2 so element of
02:56 - first address is 100 or the Base address
02:58 - of this array is 100 so this ARR will
03:01 - will store 100 so it is going to point
03:03 - the first element this you need to
03:05 - remember right array name is it's like a
03:08 - internal pointer by default it will
03:10 - Store The Base address of the array
03:13 - right so if you simply print AR like it
03:17 - will store it will print the address of
03:19 - the first element that is 100 and if you
03:21 - want to access what is the value then
03:24 - obviously that is a different concept we
03:26 - have discussed this thing uh with the
03:28 - help of when we're discussing like
03:30 - arrays in C++ you can refer those things
03:34 - but this you need to remember for this
03:36 - second thing you need to remember is we
03:37 - have discussed two things call by value
03:39 - and call by reference or pass by value
03:41 - and pass by reference right in call by
03:44 - value one copy of the elements or the
03:47 - arguments would be passed to the
03:50 - function I mean the definition of the
03:51 - function right and in pass by reference
03:54 - pass by reference we can achieve with
03:55 - reference variable or or using pointers
03:59 - so they are actual elements would be
04:01 - passed right not the copy of the
04:03 - elements actual elements actual
04:05 - arguments would be passed right so you
04:08 - can watch out that video I'll uh link
04:10 - that video in the side button call by
04:11 - value and call by reference right now
04:13 - while you are passing arrays to a
04:15 - function then arrays will be passed by
04:18 - reference by default not passed by value
04:21 - or you can say call by reference not
04:23 - call by value right so let me just show
04:26 - you this thing practically with the help
04:27 - of program so let's create a new F and
04:31 - and let's take now we'll take a array
04:34 - first inte a type of array a and let's
04:38 - initialize it here only
04:40 - suppose I want only five element in my
04:44 - array
04:45 - right now we'll Define a function
04:48 - suppose we simp simply uh we Define a
04:51 - function print AR to print that array
04:55 - right now print aray is a function let's
04:58 - before calling let's uh uh declare that
05:01 - function first so return type is void
05:04 - and the name of the function is print
05:07 - array and we pass an array as an
05:11 - argument right so what it is going to
05:13 - expect an array so in a something like
05:17 - this this is an array or if you don't
05:19 - take this name of that that array in
05:22 - declaration this is also fine in and
05:24 - that that's symbol those subscript
05:26 - symbol it will tell that it is going to
05:29 - receive an array
05:30 - right okay fine now print array and how
05:34 - to pass an array to a function just
05:36 - write down the name of array that's it
05:39 - so a r r no need to you know put the
05:43 - these subscript here this operator no
05:47 - right just simple name of that array
05:49 - when you are passing array to a function
05:52 - that's it right okay now obviously we'll
05:57 - Define that function right
06:00 - so print array and it will take an array
06:04 - as an argument so here you need
06:07 - to write down the name of that array
06:10 - also in function definition in function
06:12 - declaration it is optional right okay
06:15 - now if you want to print an array so
06:18 - what do you think if I pass ARR then
06:21 - maybe you think that this whole array
06:23 - would be passed here 1 2 3 4 5 means now
06:27 - in a we have 1 2 3 4 5
06:30 - right and we can simp print this but
06:34 - that is not a case let me just show you
06:36 - this thing practically while we are
06:38 - passing this AR in AR I have told you
06:42 - this aray name stores address of the
06:44 - first element of the are Base address so
06:48 - the example we have seen in theory part
06:50 - before discussing this we have taken
06:52 - address of suppose first element is 100
06:54 - so in ARR we have 100 so 100 would be
06:58 - passed so here this a this a is
07:02 - functioning as a pointer it's not a
07:05 - complete array it's a pointer it is
07:07 - containing 100 only right if you're not
07:11 - getting my point let me just show you
07:13 - okay first let's
07:16 - print now it's your quiz question size
07:19 - of
07:21 - ARR so what it will print pause the
07:24 - video and let me know size of ARR what
07:27 - it should print let's run run this and
07:30 - it should print 20 so see it is printing
07:32 - 20 because here we have five elements
07:36 - each in is of 4 bytes so 20 bytes
07:40 - right
07:42 - now if you want to find out the size of
07:45 - this array then we generally do what we
07:49 - can do something like this size of AR
07:52 - divide by size of the one element of
07:56 - this array you can say the first element
07:58 - of the aray or you can say size of
08:00 - Simply
08:02 - int because all elements are of int type
08:04 - so size of int is four size of AR is 20
08:08 - so it will give you size of this array
08:11 - mean size of array means how many
08:13 - elements in this array are so it will
08:15 - give you five now it will give you five
08:18 - okay that's exactly we want five
08:20 - elements right now here if I want to
08:23 - print like C
08:26 - out size of a what do you think what it
08:30 - will print what it should
08:33 - print size of a maybe you think you are
08:35 - passing ARR means the complete are would
08:37 - be passed so size of a would also be 20
08:40 - right let's run this and
08:44 - see it's okay uh let me just run this
08:48 - again and show you so first it was four
08:53 - five the
08:56 - size see
09:01 - this size it is printing I mean c out
09:03 - this is it is printing first obviously
09:05 - it would be five and then it is calling
09:07 - the function and then size of a size of
09:09 - eight is printing four
09:11 - only and see the uh that warning it's
09:14 - not error it's a warning
09:16 - like size of an array function parameter
09:19 - a will return size of int estri it will
09:22 - return size of in estri int estri means
09:26 - it will return size of a pointer not the
09:28 - complete areay right
09:31 - here so now you got it here a is acting
09:35 - as a pointer not a complete array that
09:37 - is why size of pointer is it pointer is
09:39 - pointing to int type or we can say size
09:42 - of pointer is four right but it depends
09:47 - actually whether you using 32-bit
09:48 - machine or 64 bit machine in some
09:50 - machines it is taking 8 bytes also so
09:54 - the size of pointer is 4 bytes in my
09:56 - case right so it's not a complete ARR
09:59 - here a it's just a pointer right so one
10:03 - thing you need to pass here one more
10:05 - thing that is so how to print how to
10:07 - print all the these elements in this
10:09 - print array in this function we need
10:12 - size of the areay means how many
10:14 - elements in the are are right so you
10:17 - need to pass the size as well the length
10:20 - of that array so a r r and one more
10:22 - variable we pass suppose sides right and
10:27 - let's just calculate size here in size
10:31 - is equal to using this we can calculate
10:34 - the size right and then size we can pass
10:37 - or maybe directly you can write down
10:39 - here
10:40 - five right if you don't want to
10:42 - calculate the size because here we know
10:44 - only five elements are there in this
10:45 - array right but you can take here a
10:48 - global
10:49 - variable right size of array would be
10:52 - five and that variable we can use here
10:55 - rather than passing here size because if
10:58 - the variable is global like something
11:00 - like this we have
11:03 - int size is equal to 5 so this is global
11:07 - variable size we can use this variable
11:09 - throughout the program in any function
11:11 - So within this function also within this
11:13 - function also you don't need to pass
11:15 - here this separately size right but we
11:19 - are not taking here Global variable we
11:21 - pass here the variable size okay but now
11:25 - we are passing two arguments obviously
11:27 - you should change the prot type or the
11:30 - Declaration of the function one int one
11:33 - more int
11:35 - size
11:38 - right now let's print the array how to
11:41 - print let's use a obviously with for
11:44 - Loop we are going to print 0 to I less
11:47 - than whatever size we have passed sorry
11:50 - whatever size we have passed and then
11:55 - i++ and simply in see out we print a of
12:01 - I some space right let's run this and
12:06 - I'll show you now the
12:10 - output okay we have selected the
12:15 - crr okay we have you should put a
12:20 - semicolon here
12:22 - sorry here we have a
12:25 - comma but here we should have a
12:28 - semicolon
12:30 - right in for
12:32 - Loop see 1 2 3 4 5 right so we are just
12:36 - passing an array as an argument in
12:38 - function right so not the whole array is
12:41 - to be passed it is passed by reference
12:44 - so the address of the first element
12:45 - would be passed right now we are passing
12:48 - address of that array means we can
12:52 - anyone can modify the actual elements
12:55 - right because we are passing the
12:57 - location right
12:59 - so now what to do if suppose if suppose
13:02 - here I accidentally write here like a
13:07 - of
13:09 - 1 is equal to
13:11 - 56
13:13 - right so see ideally print array would
13:17 - only print should only print the
13:20 - elements of the array it shouldn't alter
13:22 - any element right in the actual array
13:25 - right we don't want like to give this
13:28 - access to anyone one that it can the I
13:31 - mean not anyone two print function
13:33 - especially that it can modify our actual
13:35 - elements right but it's can say it's
13:38 - kind of weakness
13:41 - or ARR when we are passing array in a
13:44 - function then actual I mean the address
13:47 - of the are would be passed so this
13:50 - function can access the actual data
13:52 - right but we don't want that this
13:54 - function
13:55 - should modify our array element right
13:59 - but accidentally now it is modifying so
14:01 - it should give error but it should it
14:03 - should not give any error it will not
14:04 - give any error to us let me just show
14:06 - you this thing if after print array
14:09 - again I call Print
14:12 - array ARR and whatever the size we are
14:20 - passing
14:23 - right so let's run this 1 2 3 4 5 156 3
14:28 - 45 oh or after this let's put a end or
14:33 - slashing now you'll get it better so
14:36 - first print are will print 1 2 3 4 5
14:39 - next is printing 156 345 because we have
14:42 - modified this thing here but this thing
14:44 - we don't want it should give an error if
14:46 - some someone is trying to modify this in
14:48 - print array so what we can do is we can
14:51 - just put
14:53 - here
14:54 - con right in print
14:57 - array this AR the parameter should be
15:00 - constant constant a now if some if
15:04 - someone will try to modify here then it
15:06 - will give
15:07 - error let me show
15:09 - you see assignment of read only location
15:13 - the location is read only this we cannot
15:15 - modify it right so one solution is this
15:19 - we should ideally use like constant a if
15:23 - suppose you are using a function and you
15:25 - don't want to uh you know give a
15:27 - permission to that function to modify
15:29 - the array element so you can use Con in
15:31 - parameter right now we can use another
15:33 - function that is set array if you want
15:35 - to
15:36 - modify the array elements right so let's
15:40 - define this function set array
15:47 - here so same it will accept like in a
15:51 - and the length or the size of that array
15:54 - and uh like for D is equal to 0 and
15:59 - I less than whatever the
16:01 - size of that areay I ++ and how to
16:05 - modify a of
16:11 - I is equal to a I suppose in each
16:15 - element I will add
16:17 - five
16:20 - right and after print array just call
16:23 - this set and pass a RR and then
16:29 - the
16:31 - size right after set AR we are again
16:35 - calling print array so let's see what it
16:38 - will print first it will print 1 2 3 4
16:41 - 5 okay
16:44 - Shi it should be
16:46 - semicolon same mistake again 1 2 3 4 5
16:50 - then add five to every element and 6 7 8
16:54 - 9
16:55 - 10 I hope you got this and obviously we
16:58 - want that the set array should modify
17:00 - the array element so no need to write
17:02 - down here const obviously we will not
17:04 - write down here const okay now you got
17:07 - it what drawback can be there if you are
17:10 - passing array in a function right you
17:14 - are passing actual data I mean the size
17:17 - or the the location or the address of
17:19 - the T So anyone can modify it or to
17:21 - restrict this thing you can use constant
17:24 - parameter const parameter
17:27 - right or one thing we can do like if we
17:29 - don't want to pass here in size so a
17:31 - fixed size array we can pass like here
17:33 - we can write down in five like here we
17:35 - know obviously the size of array is five
17:37 - so we can simply write here five no need
17:39 - to write down here in
17:41 - size okay and here we directly write
17:44 - down rather than size five but those
17:47 - static type of things doesn't look good
17:49 - right it is looking good actually so
17:52 - this is how we can pass AAS to a
17:55 - function right let me just try onun this
17:58 - thing or the let me just show you the
17:59 - working of this thing actually on the
18:01 - board if you got it it's okay you can
18:03 - just stop the video here but if you
18:05 - didn't get it you can continue watching
18:07 - so let's see I haven't written the
18:09 - complete code here don't comment like it
18:11 - will not run it is giving errors so yeah
18:13 - I know it will give error it will not
18:15 - run it is not complete C right okay now
18:19 - some uh some points we have I have
18:21 - written here that I want to you know uh
18:24 - discuss with you guys so here we have an
18:26 - array 1 2 3 4 5 so we have
18:29 - array and so in AR we have suppose The
18:32 - Base address first is 100
18:36 - then right so here we have 100 The Base
18:39 - address AR will store 100 right we
18:42 - calling print AR we are passing AR and
18:44 - Si so this 100 would be passed here and
18:46 - size is 1 2 3 4 5 so five would be
18:47 - passed right so here we have an array a
18:51 - it's not an array it's like a pointer so
18:54 - now in a we have 100 so 100 is to be
18:58 - passed so now a is pointing to here
19:01 - right so basically we are we are
19:03 - actually you know accessing the original
19:06 - content the actual ARR right now I is
19:10 - equal to z i less than size size is five
19:13 - condition true enter here a of I a is
19:16 - 100 means a of I means it means a a + I
19:21 - and here we have estri if we expand this
19:25 - so 100 + 0 and this estri means if this
19:28 - is in Direction operator means it will
19:30 - fetch the value this operator is uh help
19:33 - to fetch value at this address so at 100
19:36 - we have one so it will patch one so one
19:38 - would be printed right then again I is
19:42 - first zero then I ++ I becomes one
19:44 - condition true then a of I a of 1 so
19:48 - 100+ a of 1 1 means this is address so
19:52 - one means and type is in so four by
19:56 - would be added not one it's not one 1 it
19:59 - means next element so 1 0 4 here 1 means
20:04 - four would be added the size of that you
20:07 - can say uh element so at 104 we have two
20:10 - so two would be exess here like
20:12 - this right now set array again same here
20:17 - we are passing the address a we have 100
20:20 - like right and size is five so L first
20:24 - zero size is five condition true enter
20:26 - here a of five a of Zer a of 0 is this a
20:30 - of 0 + a 5 + 1 like a of 0 + 5 so here
20:35 - we will add directly here we will add
20:37 - five so it it will become six now it
20:40 - will become seven and 8 9 10 something
20:43 - like this so the original array would be
20:46 - modified here right and after that again
20:49 - you will print if you will call this
20:51 - print array then this would be the
20:54 - answer right so I hope you got this in
20:57 - the next video we'll see one coding
20:58 - exercise based on this arrays how to
21:01 - pass arrays in a function right so now
21:04 - I'll see you in the next video till then
21:05 - bye take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing functions in C++ in previous video we have seen one coding exercise uh based on uh function overloading right so till now we have discussed basics of function right then call by value call by reference or we can say pass by value pass by reference and then function overloading right and based on that we have discussed two coding exercises as well I mean not two actually it was four coding exercises right now in this video we'll be discussing how to pass arrays to a function right it's not that we'll simply pass some variables or those integer variables or float variables that is it no when you will be actually working on projects you need to pass arrays vectors even functions to a function and many different kind of things right so same we'll see in this video how to pass arrays to a function but before that I just want to tell you one thing I have a great news for all the gate aspirant an academy is big offer is live out now what is so special about this offer now you can get flat 50% off yes flat 50% off on your gate plus and iconic subscriptions see an academy is going to start new batches for all the gate and PSU aspirant from 30th of June right as well as one more batch for placement preparation they're going to start from 30th of right and in these batches the the top faculties will be covering all the gate subjects all the cabus of uh gate right plus some special classes like preparation strategies some T tips and tricks practice questions doubt solving sessions these sessions would also be there so if you are planning to go for gate exam then it is right time to start your preparation and go for this Plus or iconic subscription so now you can start your gate 2025 preparation at rupes 9999 only and use my code Jenny to get maximum discount but one thing this flat 50% offer is valid till 30th of June only right so hurry up all the relevant links and details you'll find in the description box of this video you can go and check out now let's see how to pass arrays to a function right to understand this thing first you need to understand like what is an array the basic point so if I write something like this so if I say I have an array of integer and size is four like this suppose this is the value I have in this array 1 1 0 and 10 so if I say a the array name it will store what the Base address of this array Base address means the address of the first element of the suppose memory has been allocated to this this array and the starting location is suppose th000 or 100 so each AR element will take like its integer type so it will take four bytes so like one4 then one8 and 1 one2 so element of first address is 100 or the Base address of this array is 100 so this ARR will will store 100 so it is going to point the first element this you need to remember right array name is it's like a internal pointer by default it will Store The Base address of the array right so if you simply print AR like it will store it will print the address of the first element that is 100 and if you want to access what is the value then obviously that is a different concept we have discussed this thing uh with the help of when we're discussing like arrays in C++ you can refer those things but this you need to remember for this second thing you need to remember is we have discussed two things call by value and call by reference or pass by value and pass by reference right in call by value one copy of the elements or the arguments would be passed to the function I mean the definition of the function right and in pass by reference pass by reference we can achieve with reference variable or or using pointers so they are actual elements would be passed right not the copy of the elements actual elements actual arguments would be passed right so you can watch out that video I'll uh link that video in the side button call by value and call by reference right now while you are passing arrays to a function then arrays will be passed by reference by default not passed by value or you can say call by reference not call by value right so let me just show you this thing practically with the help of program so let's create a new F and and let's take now we'll take a array first inte a type of array a and let's initialize it here only suppose I want only five element in my array right now we'll Define a function suppose we simp simply uh we Define a function print AR to print that array right now print aray is a function let's before calling let's uh uh declare that function first so return type is void and the name of the function is print array and we pass an array as an argument right so what it is going to expect an array so in a something like this this is an array or if you don't take this name of that that array in declaration this is also fine in and that that's symbol those subscript symbol it will tell that it is going to receive an array right okay fine now print array and how to pass an array to a function just write down the name of array that's it so a r r no need to you know put the these subscript here this operator no right just simple name of that array when you are passing array to a function that's it right okay now obviously we'll Define that function right so print array and it will take an array as an argument so here you need to write down the name of that array also in function definition in function declaration it is optional right okay now if you want to print an array so what do you think if I pass ARR then maybe you think that this whole array would be passed here 1 2 3 4 5 means now in a we have 1 2 3 4 5 right and we can simp print this but that is not a case let me just show you this thing practically while we are passing this AR in AR I have told you this aray name stores address of the first element of the are Base address so the example we have seen in theory part before discussing this we have taken address of suppose first element is 100 so in ARR we have 100 so 100 would be passed so here this a this a is functioning as a pointer it's not a complete array it's a pointer it is containing 100 only right if you're not getting my point let me just show you okay first let's print now it's your quiz question size of ARR so what it will print pause the video and let me know size of ARR what it should print let's run run this and it should print 20 so see it is printing 20 because here we have five elements each in is of 4 bytes so 20 bytes right now if you want to find out the size of this array then we generally do what we can do something like this size of AR divide by size of the one element of this array you can say the first element of the aray or you can say size of Simply int because all elements are of int type so size of int is four size of AR is 20 so it will give you size of this array mean size of array means how many elements in this array are so it will give you five now it will give you five okay that's exactly we want five elements right now here if I want to print like C out size of a what do you think what it will print what it should print size of a maybe you think you are passing ARR means the complete are would be passed so size of a would also be 20 right let's run this and see it's okay uh let me just run this again and show you so first it was four five the size see this size it is printing I mean c out this is it is printing first obviously it would be five and then it is calling the function and then size of a size of eight is printing four only and see the uh that warning it's not error it's a warning like size of an array function parameter a will return size of int estri it will return size of in estri int estri means it will return size of a pointer not the complete areay right here so now you got it here a is acting as a pointer not a complete array that is why size of pointer is it pointer is pointing to int type or we can say size of pointer is four right but it depends actually whether you using 32bit machine or 64 bit machine in some machines it is taking 8 bytes also so the size of pointer is 4 bytes in my case right so it's not a complete ARR here a it's just a pointer right so one thing you need to pass here one more thing that is so how to print how to print all the these elements in this print array in this function we need size of the areay means how many elements in the are are right so you need to pass the size as well the length of that array so a r r and one more variable we pass suppose sides right and let's just calculate size here in size is equal to using this we can calculate the size right and then size we can pass or maybe directly you can write down here five right if you don't want to calculate the size because here we know only five elements are there in this array right but you can take here a global variable right size of array would be five and that variable we can use here rather than passing here size because if the variable is global like something like this we have int size is equal to 5 so this is global variable size we can use this variable throughout the program in any function So within this function also within this function also you don't need to pass here this separately size right but we are not taking here Global variable we pass here the variable size okay but now we are passing two arguments obviously you should change the prot type or the Declaration of the function one int one more int size right now let's print the array how to print let's use a obviously with for Loop we are going to print 0 to I less than whatever size we have passed sorry whatever size we have passed and then i++ and simply in see out we print a of I some space right let's run this and I'll show you now the output okay we have selected the crr okay we have you should put a semicolon here sorry here we have a comma but here we should have a semicolon right in for Loop see 1 2 3 4 5 right so we are just passing an array as an argument in function right so not the whole array is to be passed it is passed by reference so the address of the first element would be passed right now we are passing address of that array means we can anyone can modify the actual elements right because we are passing the location right so now what to do if suppose if suppose here I accidentally write here like a of 1 is equal to 56 right so see ideally print array would only print should only print the elements of the array it shouldn't alter any element right in the actual array right we don't want like to give this access to anyone one that it can the I mean not anyone two print function especially that it can modify our actual elements right but it's can say it's kind of weakness or ARR when we are passing array in a function then actual I mean the address of the are would be passed so this function can access the actual data right but we don't want that this function should modify our array element right but accidentally now it is modifying so it should give error but it should it should not give any error it will not give any error to us let me just show you this thing if after print array again I call Print array ARR and whatever the size we are passing right so let's run this 1 2 3 4 5 156 3 45 oh or after this let's put a end or slashing now you'll get it better so first print are will print 1 2 3 4 5 next is printing 156 345 because we have modified this thing here but this thing we don't want it should give an error if some someone is trying to modify this in print array so what we can do is we can just put here con right in print array this AR the parameter should be constant constant a now if some if someone will try to modify here then it will give error let me show you see assignment of read only location the location is read only this we cannot modify it right so one solution is this we should ideally use like constant a if suppose you are using a function and you don't want to uh you know give a permission to that function to modify the array element so you can use Con in parameter right now we can use another function that is set array if you want to modify the array elements right so let's define this function set array here so same it will accept like in a and the length or the size of that array and uh like for D is equal to 0 and I less than whatever the size of that areay I ++ and how to modify a of I is equal to a I suppose in each element I will add five right and after print array just call this set and pass a RR and then the size right after set AR we are again calling print array so let's see what it will print first it will print 1 2 3 4 5 okay Shi it should be semicolon same mistake again 1 2 3 4 5 then add five to every element and 6 7 8 9 10 I hope you got this and obviously we want that the set array should modify the array element so no need to write down here const obviously we will not write down here const okay now you got it what drawback can be there if you are passing array in a function right you are passing actual data I mean the size or the the location or the address of the T So anyone can modify it or to restrict this thing you can use constant parameter const parameter right or one thing we can do like if we don't want to pass here in size so a fixed size array we can pass like here we can write down in five like here we know obviously the size of array is five so we can simply write here five no need to write down here in size okay and here we directly write down rather than size five but those static type of things doesn't look good right it is looking good actually so this is how we can pass AAS to a function right let me just try onun this thing or the let me just show you the working of this thing actually on the board if you got it it's okay you can just stop the video here but if you didn't get it you can continue watching so let's see I haven't written the complete code here don't comment like it will not run it is giving errors so yeah I know it will give error it will not run it is not complete C right okay now some uh some points we have I have written here that I want to you know uh discuss with you guys so here we have an array 1 2 3 4 5 so we have array and so in AR we have suppose The Base address first is 100 then right so here we have 100 The Base address AR will store 100 right we calling print AR we are passing AR and Si so this 100 would be passed here and size is 1 2 3 4 5 so five would be passed right so here we have an array a it's not an array it's like a pointer so now in a we have 100 so 100 is to be passed so now a is pointing to here right so basically we are we are actually you know accessing the original content the actual ARR right now I is equal to z i less than size size is five condition true enter here a of I a is 100 means a of I means it means a a + I and here we have estri if we expand this so 100 + 0 and this estri means if this is in Direction operator means it will fetch the value this operator is uh help to fetch value at this address so at 100 we have one so it will patch one so one would be printed right then again I is first zero then I ++ I becomes one condition true then a of I a of 1 so 100+ a of 1 1 means this is address so one means and type is in so four by would be added not one it's not one 1 it means next element so 1 0 4 here 1 means four would be added the size of that you can say uh element so at 104 we have two so two would be exess here like this right now set array again same here we are passing the address a we have 100 like right and size is five so L first zero size is five condition true enter here a of five a of Zer a of 0 is this a of 0 + a 5 + 1 like a of 0 + 5 so here we will add directly here we will add five so it it will become six now it will become seven and 8 9 10 something like this so the original array would be modified here right and after that again you will print if you will call this print array then this would be the answer right so I hope you got this in the next video we'll see one coding exercise based on this arrays how to pass arrays in a function right so now I'll see you in the next video till then bye take care
