With timestamps:

00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of Learning
00:04 - Partner programming language today we
00:06 - are going to work on a project and that
00:08 - is we are going to make a calculator
00:09 - right okay it's simple one we will be
00:13 - implementing only four operations like
00:14 - plus minus into and divide but it's a
00:18 - little bit tricky
00:19 - like okay now first thing let me just
00:22 - show you what we are going to make what
00:25 - kind of output it will show you okay
00:27 - let's run this first
00:29 - okay so whenever you run that it will
00:32 - show like it will ask first thing enter
00:34 - first number so I am entering like two
00:37 - then you have to pick an operation plus
00:39 - minus into and divide any operation like
00:42 - uh Plus
00:44 - then it will ask for second number
00:47 - second number is suppose four
00:49 - so it will give 2 plus 4 is equal to 6
00:52 - the addition then it will ask like enter
00:55 - y to continue calculation with 6.
00:58 - if you want to continue the calculation
01:00 - for the calculation with this output or
01:03 - you can start a new calculation so you
01:05 - can press n to start a new calculation
01:07 - or if you want to exit then you can
01:09 - press X right so I want to continue with
01:13 - though with six so I will enter y
01:17 - so pick an operation okay it will ask
01:20 - like
01:22 - minus
01:24 - so it will ask for the next number next
01:26 - number is suppose one
01:28 - so it should give 6 minus one five see
01:30 - it is giving you 6 minus 1 5.
01:33 - right
01:34 - same if you want to continue again with
01:37 - this 5
01:38 - then you can press y otherwise if you
01:40 - want to start a new calculation then you
01:42 - have to enter n
01:45 - so enter now it will ask
01:47 - freshly like first number second number
01:51 - and the operation and all right or one
01:53 - more thing you can Implement like if you
01:55 - enter y then it will clear this previous
01:58 - screen
01:59 - right and then freshly it will last
02:02 - enter first number like this
02:04 - so enter first number suppose four and
02:06 - then pick an operation like into and
02:10 - seventh
02:11 - four into seven twenty eight same now I
02:14 - want to exit so
02:15 - X enter X
02:18 - and that's it
02:20 - so that is a kind of thing you have to
02:24 - make
02:26 - so we will be using functions then as
02:29 - well as dictionaries like this thing you
02:31 - can do with the switch statement as well
02:34 - switch and if LF and these kind of like
02:37 - nested if else right that is also
02:40 - possible so I think that is very simple
02:42 - when you can do that thing yourself
02:44 - we will use here uh another thing that
02:48 - is recursion although I haven't
02:50 - discussed the recursion yet but let me
02:52 - just tell you briefly what is recursion
02:54 - if a function calling itself then it is
02:57 - a recursion let me just show you this
02:59 - thing with the help of an exam okay
03:01 - let's comment this code and here only
03:04 - see recursion is what suppose uh I am
03:08 - I'm having a function display only
03:12 - so it will take nothing as an argument
03:15 - and it will just print
03:17 - hi
03:21 - and within the function I am calling
03:23 - this one function again
03:26 - so C sorry
03:31 - I am calling this function display
03:33 - so control will go here now it will
03:36 - search for the definition of the
03:37 - functional display now it will print
03:39 - high and again within this function we
03:41 - are again calling this function display
03:42 - so now control will again go to the
03:45 - definition of the function then again
03:47 - print hi then again display again
03:48 - display like this so function the
03:51 - display is calling itself within the
03:53 - function only we are calling this
03:54 - display again so it is water recursion
03:56 - it would be in a loop that would be an
03:58 - infinite Loop so let me just show you
04:01 - what output you will get see
04:03 - it's infinite Loop like this hi hi it is
04:06 - printing like this okay
04:09 - so now it has been stopped because see
04:11 - the recursion error is there the maximum
04:13 - recursion depth exceeded while calling a
04:16 - python project so this is what a
04:19 - recursion so this kind of concept will
04:22 - be using this kind of not exactly this
04:25 - concept will be using in this project
04:27 - right
04:29 - so in detail we were discussing about
04:31 - recursion in later videos but I hope you
04:32 - got the basic what is recording that's
04:34 - all you need for this project right
04:37 - dictionary you will be using and
04:38 - functions
04:40 - right so now you know what kind of
04:44 - output it should show I have told you
04:47 - now pause the video and try this out
04:50 - okay I hope you have done this let's
04:52 - create a new file calculator project dot
04:55 - py I think it's sixth project in the
04:57 - series till now we have discussed five
04:59 - projects simple one
05:00 - so first we'll Define for function add
05:04 - subtract multiply and
05:06 - divide like add and it will accept only
05:11 - two numbers
05:12 - so two parameters you need to give
05:14 - either x y a b number one number two n
05:17 - one into any variable name you can take
05:19 - right and it will just return a plus b
05:24 - why we are returning
05:27 - I think you have watched the previous
05:29 - video the difference between print and
05:30 - return and why we should return why we
05:32 - should use this return rather than as a
05:34 - Sprint in which cases when we want to
05:36 - further use
05:37 - this value and yeah in this project for
05:40 - this project we want to use this value
05:42 - for that again right because we I have
05:45 - told you like enter y two continue
05:48 - calculation with the previous output so
05:50 - rather than printing you have to use a
05:52 - return
05:53 - right now I think it's clear to you now
05:56 - more clear to you like what is the
05:57 - difference between print and return
06:00 - so now pause the video and if you
06:02 - haven't tried this out it's okay you are
06:04 - doing with me so pause the video and now
06:05 - let's define the Four function like this
06:07 - same okay
06:09 - so now we have the definition of these
06:11 - four function adds effect multiply and
06:13 - divide
06:15 - now one way is you can you switch
06:17 - statement enter a choice enter one for
06:19 - add two for subtract 3 4 multiply four
06:22 - for divide and you can write down the
06:24 - cases like case one then edit the logic
06:26 - for addition subtraction like this and
06:28 - then while loop and all this thing you
06:30 - can also do or you can use if else if L
06:32 - if like this that also you can do there
06:35 - are multiple ways to you know create
06:37 - this calculator
06:39 - right in Python so one way we are using
06:41 - that one is little bit
06:44 - you can say is using some Advanced
06:47 - concept like recursion
06:49 - now
06:50 - we are going to make a dictionary in
06:52 - which the key should be
06:54 - uh the symbol like plus minus into and
06:58 - multiply and the value should be name of
07:01 - these functions exact name of these
07:03 - function
07:04 - okay so create a dictionary you can
07:06 - pause the video and try this out
07:09 - so I'm taking a name like operations and
07:13 - dictionary
07:16 - okay the way is now key is this sorry
07:20 - plus and value is name of the function
07:23 - add
07:25 - so this is a dictionary
07:28 - right
07:29 - now what is the like main use of this
07:34 - dictionary because
07:35 - if we will fetch according to this key
07:38 - then we will fetch this name of the
07:40 - function add
07:41 - right so that function
07:44 - will act as addition like
07:47 - simply no not not passing any specific
07:50 - name of that function I am passing this
07:51 - function and suppose two number N1 and
07:55 - N2
07:56 - so if we fetch according to this key
07:59 - then this function would be replaced
08:01 - with ADD if we fetch according to the
08:04 - key minus then this function would be
08:07 - replaced with subtract then multiply and
08:11 - divide according to the key okay let me
08:14 - just show you how we are going to do
08:16 - okay now first obviously let's ask for
08:20 - input for number one
08:23 - so
08:25 - so what was the output
08:28 - first of all it was asking enter first
08:30 - number then it was showing the list of
08:34 - operations plus minus into multiply and
08:36 - then it was asking pick an operation and
08:38 - after that for second number right so
08:41 - now we have asked for first number now
08:44 - you have to print out all the operations
08:47 - this plus minus into and divide so you
08:51 - can look through this dictionary using a
08:53 - for Loop
08:54 - so you want to show only the keys
08:57 - for that we have already discussed right
08:59 - how you can do that thing please pause
09:01 - the video and try this out if you don't
09:04 - remember this thing you can just revise
09:07 - that dictionary is concept right then
09:10 - come to this video
09:11 - okay
09:17 - like any variable name you can take I'm
09:19 - taking like four symbol in
09:23 - dictionary name operations indict right
09:26 - and then simply print
09:28 - the symbol
09:32 - it will print all the symbol it will
09:34 - Loop through this dictionary and it will
09:35 - print all the keys only not values right
09:40 - now we will ask we will ask for the
09:44 - operation okay
09:46 - now pick an operation so that thing will
09:48 - be storing in this Opa underscore symbol
09:50 - now we will ask for
09:52 - second input number two okay let's see
09:55 - it's working or not let's run this and
09:57 - see first of all it is our standard
09:59 - first number two
10:00 - then number of keys pick an operation
10:03 - like Plus
10:04 - then
10:06 - second number the spelling is wrong so
10:09 - second number is 4.
10:11 - that's it yeah it's working fine okay so
10:15 - now you have to do the main thing
10:18 - now according to this symbol now you
10:21 - have to call either add subtract
10:24 - multiply or divide whatever
10:26 - this operation the user has entered
10:28 - according to that you have to call the
10:31 - function suppose I have entered Plus
10:36 - so now in this op symbol I am having
10:38 - Plus
10:40 - right so according to Plus
10:42 - we can fetch the this value add
10:46 - right now how you will be fetching this
10:49 - value see
10:53 - name of the dictionary and in index will
10:57 - file we will pass the key so the key
11:00 - whatever you will enter that could be in
11:02 - this
11:04 - variable op symbol right so whatever it
11:07 - will
11:08 - fetch suppose this is plus so operation
11:11 - deck or P symbol it will fetch add
11:14 - so that thing we will store in a
11:17 - variable
11:22 - calculator
11:24 - function
11:27 - okay
11:28 - now the name of this function is at this
11:30 - point of time if you are entering plus
11:32 - is
11:34 - add now add is in this calculator
11:37 - function so simply now I can
11:40 - call this calculator function and I'll
11:44 - just pass
11:45 - number one comma
11:48 - number two these two number number one
11:51 - number two whatever you have
11:53 - entered right
11:55 - and now it will the calculator function
11:58 - name is ADD so add number one number two
12:01 - so it will call this function add now it
12:03 - will return a plus b so whatever it will
12:05 - return obviously you have to store that
12:07 - thing
12:08 - in our variable so suppose I mean
12:11 - storing this in output now print this
12:15 - output
12:17 - so with F string I am printing like
12:20 - number one
12:22 - and then
12:24 - whatever the symbol operation symbol you
12:27 - have entered user has entered then
12:29 - number two
12:30 - and then equal to the answer is in
12:33 - variable
12:34 - output
12:36 - right okay let's run this and see it's
12:38 - working or not first number is suppose
12:40 - one then symbol is plus then 4 and C
12:44 - it's working 1 plus 4 is equal to 5.
12:47 - yes
12:49 - now till now till this we are fine but
12:53 - now you have to do something because I
12:56 - don't I don't want to exit I want to ask
12:58 - some user if you want to continue
13:00 - calculation with this 5 then press y
13:02 - then n if you want to start a new
13:03 - calculation or X if you want to exit and
13:06 - if I'm pressing y then it will start
13:09 - calculation with this 5 so now number
13:11 - one becomes 5 and
13:13 - it will ask only operation again and the
13:17 - second number that's it
13:19 - you got it right
13:20 - so that logic you have to implement I
13:22 - hope not till now it's clear to you okay
13:26 - so let's ask from user
13:29 - like let's enter
13:31 - y to continue
13:37 - calculation with
13:39 - the previous output so previous output
13:41 - is in
13:42 - this variable
13:45 - output that will that is why I am using
13:47 - F string right
13:49 - or
13:53 - N2 start
13:55 - or simply n first of all to exit
14:00 - okay
14:02 - only two thing we will implement
14:04 - for now so whatever you will enter that
14:07 - obviously I will store in a variable and
14:09 - suppose variable name is
14:12 - should continue
14:16 - or any variable name you can take should
14:18 - continue I am taking this right
14:21 - so
14:22 - and let's convert this into lower case
14:25 - here only because if I press Y in
14:28 - capital letter then it will be confused
14:31 - because here I am
14:33 - I'll write down in if only small y so if
14:38 - this should continue equal to equal to
14:41 - small y
14:42 - or if you want to you know consider both
14:45 - the cases then you can write down like
14:47 - should continue equal to equal to small
14:48 - y or should continue equal to equal to
14:51 - Capital y that is also one
14:53 - but I am just converting in this into
14:54 - lowercase so I'm just considering user
14:57 - should enter only small y if it will
14:59 - enter capital Y then it will convert
15:01 - automatically it will convert into lower
15:03 - case
15:04 - should continue equal to equal to
15:06 - y means I want to continue with this
15:09 - previous calculation
15:11 - right so in that case I've told you it
15:13 - will ask only the second number the next
15:16 - number and operation the first number
15:18 - the first number is now
15:21 - equal to the previous output
15:24 - okay
15:26 - fine
15:27 - the number one becomes this and now it
15:30 - will ask only
15:33 - this one
15:34 - only pick an operation and this number
15:38 - two
15:40 - right so this would be in a loop
15:46 - not enter first number and calculation
15:48 - this would be in a loop so here
15:51 - just put this thing into a loop I don't
15:54 - know number of iterations exactly so the
15:57 - best Loop is while loop
15:59 - so why but what condition you will put
16:02 - to exit so let's
16:04 - let's take a variable and any flag like
16:10 - I am taking continue flag
16:13 - the name is continue flag not continue
16:15 - continue flag
16:17 - because continue is a keyword so
16:19 - continue flag I'm setting first
16:21 - true okay now while
16:25 - continue flag
16:28 - now while true
16:31 - while true means
16:32 - now this
16:38 - everything below this while loop this
16:41 - code should be
16:43 - and you can say indented
16:47 - right
16:48 - so number one becomes output then again
16:51 - while
16:52 - will be here and then it will ask an
16:55 - operation next number and it will
16:57 - continue repeating this process
16:59 - but
17:00 - what if
17:03 - I will not enter y I will enter n
17:06 - so now this is the exact condition now
17:09 - we can flip this continue flag
17:11 - continue fly equal to
17:13 - false
17:16 - right and simply maybe we can print
17:20 - bye
17:23 - so continue flag becomes false here it
17:25 - becomes false while false means exit
17:27 - from the loop and out from this blue
17:31 - right simply print y let's run this it's
17:35 - working or not first number one an
17:38 - operation then second number then one
17:40 - plus three is four why to continue
17:42 - calculation with this 4.
17:45 - okay let's enter y
17:48 - see it is asking pick an operation minus
17:52 - next number is one so it will give you 4
17:54 - minus 1 is 3.
17:56 - now at this point of time I want to exit
17:58 - so n and that's it bye
18:01 - till now it's fine but no no no if I
18:04 - want to start a fresh calculation rather
18:06 - than this the previous one then okay
18:09 - let's update this
18:15 - now
18:16 - here you have to modify like n two exit
18:19 - not n two
18:22 - start a new
18:24 - calculation
18:26 - right
18:28 - or
18:32 - X2 exit
18:36 - y to continue calculation with this
18:38 - output and to start a new calculation or
18:40 - X to exit okay fine
18:44 - now you have to put something here so if
18:47 - y then okay it's fine
18:50 - now if not y then it would be n or X so
18:54 - simply we cannot just write down else
18:56 - like this no
18:57 - so we can write down else if
19:01 - this
19:03 - should continue equal to equal to
19:06 - X
19:09 - then continue flag becomes false and buy
19:12 - but what about this this option n if you
19:16 - want to start a new calculation right so
19:21 - simply I am just printing one more thing
19:23 - just
19:25 - should continue equal to equal to
19:28 - n
19:30 - then start a new calculation
19:36 - okay now
19:38 - what you do you think where this control
19:40 - should go means start a new calculation
19:42 - means
19:44 - from starting it should ask what is
19:46 - first number then it will show the
19:48 - operations then again the second number
19:51 - and all so from here
19:55 - now what to do
19:58 - you will put again a while loop here
20:01 - no here we will using recursion
20:05 - so let's put this complete thing in a
20:09 - function that's complete
20:15 - okay
20:16 - so here just Define a function
20:23 - calculator
20:24 - and nothing we are passing here
20:27 - depth calculator and
20:30 - everything from entering number one to
20:34 - the last point
20:36 - they should be indented so this is what
20:39 - in this function
20:41 - and here we can call
20:43 - but first if no then first break this
20:47 - while loop and then call the function
20:49 - again because I want I don't want to
20:51 - repeat this while loop so first
20:53 - set this
20:55 - continue flag to
20:57 - false
20:59 - and if you don't want to exit then again
21:01 - call this calculator function so this is
21:03 - what recurs in
21:05 - right
21:07 - and else
21:09 - simply if you don't put this condition
21:11 - so simply you can write down l l
21:14 - continue flag is equal to false and bye
21:19 - so now
21:22 - out of these thing out of this
21:25 - definition obviously if you are putting
21:27 - all the logic in this calculator
21:28 - function then call this calculator
21:31 - function here
21:34 - okay and within this function also so
21:36 - this is what recursion but if you are
21:40 - using recursion this concept then you
21:43 - have to be very careful
21:44 - right to put the exact condition
21:47 - because otherwise it will be an infinite
21:49 - Loop okay now let's run this and see
21:52 - first number
21:54 - two operation is into next number four
21:58 - then eight want to continue with a set
22:01 - yes
22:02 - pick an operation suppose divide
22:05 - a number two eight by two is four point
22:08 - five
22:09 - now I want to start a new calculation
22:10 - then n
22:12 - so again it will ask enter first number
22:14 - three operation plus five triple five
22:19 - eight then I want to exit X
22:23 - bye
22:25 - so this is working only one thing is
22:26 - remaining
22:27 - you have to clear if you want to clear
22:29 - the previous
22:31 - output
22:32 - when you want to start a new calculation
22:34 - then you have to use what that concept
22:38 - we have done in one of my previous video
22:40 - so how to do that thing see okay so this
22:43 - thing we have also done in the previous
22:45 - project when we're discussing that
22:46 - silent option program so for that first
22:49 - you have to import
22:52 - what OS
22:55 - and
22:56 - sorry
23:01 - where you want to clear the screen if
23:04 - user enter n then you want to start a
23:07 - new calculation and you want to clear
23:08 - the previous screen so should continue
23:09 - fly becomes false and before pulling
23:12 - this calculator again you have to clear
23:14 - the skin so you just have to pass like
23:16 - OS Dot
23:19 - call this system
23:21 - this function and you have to give
23:23 - command so what command you need to give
23:26 - CLS if you're using Windows and using
23:29 - Windows and CLS if Linux then clear
23:32 - okay OS store system CLS one more
23:35 - setting you need to do
23:37 - for this project because here I want to
23:40 - clear the previous screen so right click
23:42 - here and modify run configuration there
23:45 - you will if you will scroll down then
23:48 - you have to take this emulate terminal
23:50 - in output console I have already take
23:52 - this right but in your screen it is not
23:56 - Tech so you have to take emulate
23:58 - terminal in output console and just
24:00 - apply and OK right okay now let's run
24:03 - this
24:04 - and see enter first number
24:10 - one take an operation Plus
24:13 - 5 1 plus pi
24:16 - six okay continue with previous one so
24:20 - yes why take an operation minus
24:23 - one
24:25 - six minus one is five so I want to start
24:28 - a new calculation n
24:30 - C previous
24:32 - all the previous things are cleared now
24:35 - now again it will ask under first number
24:37 - any operation like divide
24:40 - and second number suppose 6 0.5 and
24:45 - uh
24:46 - suppose I want to start a new
24:47 - calculation again so n again clear now
24:50 - the problem is if I enter here
24:53 - float number c it is giving you an error
24:56 - value error invalid lead Trail for INT
24:58 - with base 10.
25:01 - if you are entering 6.7
25:04 - in line number 40 36 and 18.
25:07 - so
25:10 - now what you need to do because
25:12 - while entering the number you are
25:14 - converting this into int
25:17 - right so better to convert this into
25:23 - float
25:25 - float and same with this
25:30 - because as We Know
25:33 - with float obviously the calculation
25:35 - would be more more accurate like if I am
25:38 - entering 5 then it would be 5.0 then
25:40 - obviously the calculation will be more
25:42 - accurate there would be no problem
25:44 - okay now convert this into float and
25:45 - Float now let's run this
25:48 - first number four second pick an
25:51 - operation Plus
25:52 - second number I'm entering 7.8
25:55 - C now 4.0 7.8 is equal to 11.8 okay
26:00 - X to exit now bye
26:03 - so this is how you can do
26:06 - if you want to you know play with this
26:09 - code and you want to modify this add
26:12 - some more features you can do right but
26:15 - this was the basic one I hope you got
26:18 - the working of this thing if you're not
26:20 - getting this it's okay you can just take
26:21 - a break you can just write down this
26:23 - thing on a piece of paper and
26:25 - just uh do a dry run manually okay this
26:29 - line then this line with this line like
26:31 - this definitely will get it it's not
26:33 - that much stuff and there are multiple
26:35 - ways to do this project switch you can
26:37 - use which case yesterday fails rather
26:40 - than using this functions and all right
26:44 - so I hope you got this project now in
26:46 - the next video we will see some
26:50 - more few simple concepts are remaining
26:52 - after that we will start oops concept
26:53 - like namespaces Global scope and local
26:56 - scope and all so those things we'll be
26:59 - discussing in the next video then we'll
27:00 - start with oops Concept in Python
27:02 - so now let's

Cleaned transcript:

hey everyone I hope you all are safe and doing good so in the series of Learning Partner programming language today we are going to work on a project and that is we are going to make a calculator right okay it's simple one we will be implementing only four operations like plus minus into and divide but it's a little bit tricky like okay now first thing let me just show you what we are going to make what kind of output it will show you okay let's run this first okay so whenever you run that it will show like it will ask first thing enter first number so I am entering like two then you have to pick an operation plus minus into and divide any operation like uh Plus then it will ask for second number second number is suppose four so it will give 2 plus 4 is equal to 6 the addition then it will ask like enter y to continue calculation with 6. if you want to continue the calculation for the calculation with this output or you can start a new calculation so you can press n to start a new calculation or if you want to exit then you can press X right so I want to continue with though with six so I will enter y so pick an operation okay it will ask like minus so it will ask for the next number next number is suppose one so it should give 6 minus one five see it is giving you 6 minus 1 5. right same if you want to continue again with this 5 then you can press y otherwise if you want to start a new calculation then you have to enter n so enter now it will ask freshly like first number second number and the operation and all right or one more thing you can Implement like if you enter y then it will clear this previous screen right and then freshly it will last enter first number like this so enter first number suppose four and then pick an operation like into and seventh four into seven twenty eight same now I want to exit so X enter X and that's it so that is a kind of thing you have to make so we will be using functions then as well as dictionaries like this thing you can do with the switch statement as well switch and if LF and these kind of like nested if else right that is also possible so I think that is very simple when you can do that thing yourself we will use here uh another thing that is recursion although I haven't discussed the recursion yet but let me just tell you briefly what is recursion if a function calling itself then it is a recursion let me just show you this thing with the help of an exam okay let's comment this code and here only see recursion is what suppose uh I am I'm having a function display only so it will take nothing as an argument and it will just print hi and within the function I am calling this one function again so C sorry I am calling this function display so control will go here now it will search for the definition of the functional display now it will print high and again within this function we are again calling this function display so now control will again go to the definition of the function then again print hi then again display again display like this so function the display is calling itself within the function only we are calling this display again so it is water recursion it would be in a loop that would be an infinite Loop so let me just show you what output you will get see it's infinite Loop like this hi hi it is printing like this okay so now it has been stopped because see the recursion error is there the maximum recursion depth exceeded while calling a python project so this is what a recursion so this kind of concept will be using this kind of not exactly this concept will be using in this project right so in detail we were discussing about recursion in later videos but I hope you got the basic what is recording that's all you need for this project right dictionary you will be using and functions right so now you know what kind of output it should show I have told you now pause the video and try this out okay I hope you have done this let's create a new file calculator project dot py I think it's sixth project in the series till now we have discussed five projects simple one so first we'll Define for function add subtract multiply and divide like add and it will accept only two numbers so two parameters you need to give either x y a b number one number two n one into any variable name you can take right and it will just return a plus b why we are returning I think you have watched the previous video the difference between print and return and why we should return why we should use this return rather than as a Sprint in which cases when we want to further use this value and yeah in this project for this project we want to use this value for that again right because we I have told you like enter y two continue calculation with the previous output so rather than printing you have to use a return right now I think it's clear to you now more clear to you like what is the difference between print and return so now pause the video and if you haven't tried this out it's okay you are doing with me so pause the video and now let's define the Four function like this same okay so now we have the definition of these four function adds effect multiply and divide now one way is you can you switch statement enter a choice enter one for add two for subtract 3 4 multiply four for divide and you can write down the cases like case one then edit the logic for addition subtraction like this and then while loop and all this thing you can also do or you can use if else if L if like this that also you can do there are multiple ways to you know create this calculator right in Python so one way we are using that one is little bit you can say is using some Advanced concept like recursion now we are going to make a dictionary in which the key should be uh the symbol like plus minus into and multiply and the value should be name of these functions exact name of these function okay so create a dictionary you can pause the video and try this out so I'm taking a name like operations and dictionary okay the way is now key is this sorry plus and value is name of the function add so this is a dictionary right now what is the like main use of this dictionary because if we will fetch according to this key then we will fetch this name of the function add right so that function will act as addition like simply no not not passing any specific name of that function I am passing this function and suppose two number N1 and N2 so if we fetch according to this key then this function would be replaced with ADD if we fetch according to the key minus then this function would be replaced with subtract then multiply and divide according to the key okay let me just show you how we are going to do okay now first obviously let's ask for input for number one so so what was the output first of all it was asking enter first number then it was showing the list of operations plus minus into multiply and then it was asking pick an operation and after that for second number right so now we have asked for first number now you have to print out all the operations this plus minus into and divide so you can look through this dictionary using a for Loop so you want to show only the keys for that we have already discussed right how you can do that thing please pause the video and try this out if you don't remember this thing you can just revise that dictionary is concept right then come to this video okay like any variable name you can take I'm taking like four symbol in dictionary name operations indict right and then simply print the symbol it will print all the symbol it will Loop through this dictionary and it will print all the keys only not values right now we will ask we will ask for the operation okay now pick an operation so that thing will be storing in this Opa underscore symbol now we will ask for second input number two okay let's see it's working or not let's run this and see first of all it is our standard first number two then number of keys pick an operation like Plus then second number the spelling is wrong so second number is 4. that's it yeah it's working fine okay so now you have to do the main thing now according to this symbol now you have to call either add subtract multiply or divide whatever this operation the user has entered according to that you have to call the function suppose I have entered Plus so now in this op symbol I am having Plus right so according to Plus we can fetch the this value add right now how you will be fetching this value see name of the dictionary and in index will file we will pass the key so the key whatever you will enter that could be in this variable op symbol right so whatever it will fetch suppose this is plus so operation deck or P symbol it will fetch add so that thing we will store in a variable calculator function okay now the name of this function is at this point of time if you are entering plus is add now add is in this calculator function so simply now I can call this calculator function and I'll just pass number one comma number two these two number number one number two whatever you have entered right and now it will the calculator function name is ADD so add number one number two so it will call this function add now it will return a plus b so whatever it will return obviously you have to store that thing in our variable so suppose I mean storing this in output now print this output so with F string I am printing like number one and then whatever the symbol operation symbol you have entered user has entered then number two and then equal to the answer is in variable output right okay let's run this and see it's working or not first number is suppose one then symbol is plus then 4 and C it's working 1 plus 4 is equal to 5. yes now till now till this we are fine but now you have to do something because I don't I don't want to exit I want to ask some user if you want to continue calculation with this 5 then press y then n if you want to start a new calculation or X if you want to exit and if I'm pressing y then it will start calculation with this 5 so now number one becomes 5 and it will ask only operation again and the second number that's it you got it right so that logic you have to implement I hope not till now it's clear to you okay so let's ask from user like let's enter y to continue calculation with the previous output so previous output is in this variable output that will that is why I am using F string right or N2 start or simply n first of all to exit okay only two thing we will implement for now so whatever you will enter that obviously I will store in a variable and suppose variable name is should continue or any variable name you can take should continue I am taking this right so and let's convert this into lower case here only because if I press Y in capital letter then it will be confused because here I am I'll write down in if only small y so if this should continue equal to equal to small y or if you want to you know consider both the cases then you can write down like should continue equal to equal to small y or should continue equal to equal to Capital y that is also one but I am just converting in this into lowercase so I'm just considering user should enter only small y if it will enter capital Y then it will convert automatically it will convert into lower case should continue equal to equal to y means I want to continue with this previous calculation right so in that case I've told you it will ask only the second number the next number and operation the first number the first number is now equal to the previous output okay fine the number one becomes this and now it will ask only this one only pick an operation and this number two right so this would be in a loop not enter first number and calculation this would be in a loop so here just put this thing into a loop I don't know number of iterations exactly so the best Loop is while loop so why but what condition you will put to exit so let's let's take a variable and any flag like I am taking continue flag the name is continue flag not continue continue flag because continue is a keyword so continue flag I'm setting first true okay now while continue flag now while true while true means now this everything below this while loop this code should be and you can say indented right so number one becomes output then again while will be here and then it will ask an operation next number and it will continue repeating this process but what if I will not enter y I will enter n so now this is the exact condition now we can flip this continue flag continue fly equal to false right and simply maybe we can print bye so continue flag becomes false here it becomes false while false means exit from the loop and out from this blue right simply print y let's run this it's working or not first number one an operation then second number then one plus three is four why to continue calculation with this 4. okay let's enter y see it is asking pick an operation minus next number is one so it will give you 4 minus 1 is 3. now at this point of time I want to exit so n and that's it bye till now it's fine but no no no if I want to start a fresh calculation rather than this the previous one then okay let's update this now here you have to modify like n two exit not n two start a new calculation right or X2 exit y to continue calculation with this output and to start a new calculation or X to exit okay fine now you have to put something here so if y then okay it's fine now if not y then it would be n or X so simply we cannot just write down else like this no so we can write down else if this should continue equal to equal to X then continue flag becomes false and buy but what about this this option n if you want to start a new calculation right so simply I am just printing one more thing just should continue equal to equal to n then start a new calculation okay now what you do you think where this control should go means start a new calculation means from starting it should ask what is first number then it will show the operations then again the second number and all so from here now what to do you will put again a while loop here no here we will using recursion so let's put this complete thing in a function that's complete okay so here just Define a function calculator and nothing we are passing here depth calculator and everything from entering number one to the last point they should be indented so this is what in this function and here we can call but first if no then first break this while loop and then call the function again because I want I don't want to repeat this while loop so first set this continue flag to false and if you don't want to exit then again call this calculator function so this is what recurs in right and else simply if you don't put this condition so simply you can write down l l continue flag is equal to false and bye so now out of these thing out of this definition obviously if you are putting all the logic in this calculator function then call this calculator function here okay and within this function also so this is what recursion but if you are using recursion this concept then you have to be very careful right to put the exact condition because otherwise it will be an infinite Loop okay now let's run this and see first number two operation is into next number four then eight want to continue with a set yes pick an operation suppose divide a number two eight by two is four point five now I want to start a new calculation then n so again it will ask enter first number three operation plus five triple five eight then I want to exit X bye so this is working only one thing is remaining you have to clear if you want to clear the previous output when you want to start a new calculation then you have to use what that concept we have done in one of my previous video so how to do that thing see okay so this thing we have also done in the previous project when we're discussing that silent option program so for that first you have to import what OS and sorry where you want to clear the screen if user enter n then you want to start a new calculation and you want to clear the previous screen so should continue fly becomes false and before pulling this calculator again you have to clear the skin so you just have to pass like OS Dot call this system this function and you have to give command so what command you need to give CLS if you're using Windows and using Windows and CLS if Linux then clear okay OS store system CLS one more setting you need to do for this project because here I want to clear the previous screen so right click here and modify run configuration there you will if you will scroll down then you have to take this emulate terminal in output console I have already take this right but in your screen it is not Tech so you have to take emulate terminal in output console and just apply and OK right okay now let's run this and see enter first number one take an operation Plus 5 1 plus pi six okay continue with previous one so yes why take an operation minus one six minus one is five so I want to start a new calculation n C previous all the previous things are cleared now now again it will ask under first number any operation like divide and second number suppose 6 0.5 and uh suppose I want to start a new calculation again so n again clear now the problem is if I enter here float number c it is giving you an error value error invalid lead Trail for INT with base 10. if you are entering 6.7 in line number 40 36 and 18. so now what you need to do because while entering the number you are converting this into int right so better to convert this into float float and same with this because as We Know with float obviously the calculation would be more more accurate like if I am entering 5 then it would be 5.0 then obviously the calculation will be more accurate there would be no problem okay now convert this into float and Float now let's run this first number four second pick an operation Plus second number I'm entering 7.8 C now 4.0 7.8 is equal to 11.8 okay X to exit now bye so this is how you can do if you want to you know play with this code and you want to modify this add some more features you can do right but this was the basic one I hope you got the working of this thing if you're not getting this it's okay you can just take a break you can just write down this thing on a piece of paper and just uh do a dry run manually okay this line then this line with this line like this definitely will get it it's not that much stuff and there are multiple ways to do this project switch you can use which case yesterday fails rather than using this functions and all right so I hope you got this project now in the next video we will see some more few simple concepts are remaining after that we will start oops concept like namespaces Global scope and local scope and all so those things we'll be discussing in the next video then we'll start with oops Concept in Python so now let's
