With timestamps:

00:00 - so in the series of learning Python
00:02 - programming language we are discussing
00:03 - sets in Python previous video we have
00:06 - discussed uh what is difference and
00:09 - symmetric difference and difference
00:11 - update a symmetric difference and
00:13 - symmetric difference update Union
00:15 - intersections different symmetric
00:17 - difference these operations we have
00:18 - discussed now few more are left with set
00:21 - like we can set we can check if two sets
00:23 - are disjoint sets or not subset superset
00:26 - right how to check these things what are
00:28 - the methods what are the operators to
00:30 - check these things right in Python and
00:33 - as well as we have see we have seen one
00:35 - method clear method right that is used
00:37 - to delete all the set items
00:40 - right but we have one more uh keyword
00:44 - that is not actually a method that is a
00:45 - keyword Del clear is a method but Del is
00:48 - a keyword so how Del is different from
00:50 - Clear method that thing also will be
00:53 - discussing with the help of example
00:54 - practically I'll show you so let me just
00:57 - give you a brief about disjoint set
01:00 - subset and superset then you will get it
01:02 - better with the help of program see if I
01:05 - am having two sets so I'm having these
01:07 - two set and
01:09 - disjoint sets are what
01:12 - two sets are said to be disjoint set if
01:15 - they have nothing in common or you can
01:17 - say if their intersection is an empty
01:21 - set right so if you want to check the
01:23 - set one and set two are disjoint sets or
01:26 - not
01:27 - no they are not why so because they have
01:29 - common
01:30 - here we have four here we have four
01:32 - so one item is common their intersection
01:35 - is four that is not an empty set so we
01:36 - cannot say that it is these two are
01:38 - design sets so here we have a method is
01:42 - designed to check set one dot is
01:47 - disjoint and here we can pass in
01:49 - argument set two so now this will give
01:51 - you the true or false in this case it
01:53 - will give false because these two sets
01:55 - are not disjoint sets right so this is
01:58 - the method to check if the two sets
02:01 - addition says or not now here all sorts
02:04 - in argument we can pass less totable
02:06 - that also I'll show you practically but
02:07 - I hope you go to what is this show and
02:09 - said and corresponding to this set we do
02:11 - not have any operator like for Union we
02:13 - have this operator
02:15 - for intersection we have and for finding
02:18 - difference we have minus for symmetric
02:20 - difference we have this right but for is
02:23 - this joint there is no operator so this
02:26 - you have to do this operation with
02:28 - method only right now subset
02:31 - if I want to check this set 1 is a
02:34 - subset of set 2 or not so for that also
02:37 - we have a method set one dot is subset
02:42 - and set 2. subset mean what means what
02:46 - we can say this set 1 is a subset of set
02:49 - 2 if if
02:53 - set 2 contains
02:55 - every element of set 1.
02:58 - that case you can say set 1 is subset of
03:01 - set two let me just write down this
03:02 - definition so this is what definition of
03:05 - subset if the set 1 is subset of set two
03:08 - if every element of set 1 is in set two
03:12 - mean set 2 contains every element of set
03:15 - one so here can we say set one is subset
03:18 - of set two check
03:20 - every element of set 1 is in set two in
03:24 - set when we have one is this in set two
03:26 - no so in this case also it will give
03:29 - false if I update this set something
03:32 - like this okay one two three and five
03:37 - now can we say set one is subset of set
03:41 - to yes because every element of set 1 is
03:44 - in set two so in this case it will give
03:47 - true so this is how you can check subset
03:49 - for this we have an operator set one
03:52 - like this less than equal to
03:54 - set two so this is to check
03:57 - this is correspond corresponding to this
04:00 - is subset
04:01 - so you can use this method also or this
04:03 - operator also to check if you want to
04:06 - check the set 2 is subset of set 1 then
04:08 - you can check set 2 here set 2 is subset
04:10 - of set one you can check it like this
04:13 - right so here it will give false
04:16 - reverse of subset is superset
04:19 - if I write here
04:21 - is super set of set two so it is reverse
04:25 - of subset means set 1 is known as
04:28 - superset of set two if
04:32 - set 1 contains every element of set two
04:38 - right
04:39 - or you can say if every element of set 2
04:42 - is in set one
04:44 - but here if every element of set 1 is in
04:46 - set two I hope you got
04:48 - what is subset in superset let me just
04:51 - write down the definition of superset as
04:52 - well so now I hope you can see the
04:54 - difference what is subset and superset
04:56 - set one is super set of set two if set
04:58 - one contains every element of set two
05:01 - right so in this case if I check set one
05:03 - in superset of set two so we can say no
05:06 - it's not true it's false
05:09 - because set two we have many elements
05:12 - and in set one we don't have ten seven
05:14 - eight minus 10 so that is why it is not
05:17 - super set off if I update this something
05:20 - like this I have here 10 7 8 minus 10.
05:24 - now now we can say yeah set one is super
05:27 - set of set two because now set one
05:29 - contains every element of set two
05:31 - every element of set 2 is in set one
05:34 - yeah set one can have extra element also
05:37 - right so now yes this this time it will
05:40 - give
05:42 - true right and also we have an operator
05:45 - for this like set one
05:47 - and okay reverse of subset so something
05:50 - like this
05:52 - set to greater than equal to set two
05:55 - right
05:56 - so let's create a new file here
05:59 - so now I have taken the same set that we
06:02 - have discussed in previous videos and
06:03 - I'll be checking the set one is disjoint
06:05 - or not these two set so set one dot we
06:09 - have a method C is this joint and set
06:13 - two call this method on one set and
06:15 - another set would be passed as an
06:17 - argument right
06:19 - and let's just print what it will give
06:21 - it will give you the true or false right
06:25 - so let's run this and we'll let's
06:29 - see what is the output see it will give
06:31 - false
06:33 - because these are not disjoints that
06:34 - because we have common Jenny is common
06:36 - here if I remove Jenny from here
06:40 - see
06:41 - and now I'll check
06:43 - so this time it will give you true
06:45 - because yeah there is nothing common in
06:47 - these sets so these two sets are
06:48 - designed rather than this here also I
06:51 - can pass like a less time passing here
06:55 - so let's run this and see say this time
06:57 - also it will give true because set 1 is
07:01 - designed with this yes there is nothing
07:03 - common here but if I update this thing
07:06 - if I add here chin
07:08 - let's run this now
07:10 - this time it will give false because we
07:12 - have common Jenny and genuine so this is
07:14 - how you can check the distance or not
07:17 - now next is you are checking for subset
07:20 - so let's check here only is
07:24 - subset
07:25 - okay set one is subset of this set or
07:30 - not yeah this is a list we are providing
07:32 - a list in argument but first of all this
07:34 - method will convert it into
07:36 - set
07:38 - and then we will
07:40 - check the subset or not so let's run
07:43 - this and see
07:44 - it's false subset means what set 1 is a
07:47 - subset of this if every element of set 1
07:51 - is in set 2.
07:55 - but in set one we have Ram sham Jenny
07:58 - and here we have movement Jenny only Ram
08:00 - sham is not there if I update this one
08:09 - like this and if I check like this then
08:12 - it will give to you yeah now every
08:15 - element of set one is in this set yes
08:18 - there can be extra element also
08:20 - right
08:21 - and
08:23 - rather than this you can pass here a set
08:26 - I'm passing like
08:27 - [Music]
08:33 - set two
08:35 - so this time it will obviously it will
08:37 - be false
08:38 - right
08:39 - and we can also check with this with the
08:42 - help of
08:43 - we have
08:47 - an operator less than equal to
08:49 - set to
08:52 - let's run this
08:54 - both will give false this will also
08:57 - check this subset or not so with the
08:59 - help of method with the help of operator
09:00 - we can check right and if I check
09:03 - something like this set 1 is subset of
09:05 - set one let's see now this is true
09:09 - the second one
09:10 - this
09:12 - okay this is now true every element is
09:15 - subset of itself
09:17 - because according to definition
09:19 - the set one contains every element of
09:22 - set one yeah that's true now we'll check
09:25 - for superset so is
09:29 - superset off set two this is a reverse
09:32 - of
09:33 - subset set one is superset of set two if
09:38 - every element of set 2 is in set one
09:45 - or you can say set one contains every
09:47 - element of set two
09:50 - so let me just update something
09:58 - so what output you will get here
10:01 - let's run this and see
10:04 - yeah true
10:06 - set one is a superset of set two see now
10:09 - every element of this set to set to
10:13 - where we have two element G and Akash is
10:15 - in set one G and Akash yeah in set one
10:18 - there can be extra element in Z1
10:21 - so that is why set 1 is super set of set
10:24 - two but set two
10:26 - is super set of set one that is not true
10:30 - that is for false right
10:33 - because in this case it should be every
10:35 - element of set one should be in set two
10:37 - but that is not a case here right
10:40 - and same if I check set one is super set
10:44 - of set one itself yeah that is also true
10:48 - okay for this also we have an operator
10:50 - that is reverse of subset so that is why
10:54 - it is reverse greater than equal to okay
10:58 - foreign
11:01 - set two
11:04 - same both would be true in this case
11:06 - also okay
11:10 - so superset subset disjoint this is how
11:12 - you can check now we have one more uh
11:16 - sorry keyword is not method Del
11:19 - see then
11:21 - let me check first clear
11:23 - if I want to clear all the element of
11:25 - set 2 so what I can do on set 2 I can
11:28 - call Dot
11:29 - clear method right and if now I print
11:34 - set 2 clear will remove maybe new set
11:38 - how 50 or 100 entries and you want to
11:39 - clear all the entries so you can use
11:41 - this method so now set 2 becomes an
11:44 - empty set C this is what an empty set
11:47 - okay we have cleared everything from set
11:50 - to but rather than clear
11:53 - see if I use here
11:55 - Del
11:57 - set two
12:01 - okay this will also delete every element
12:04 - of set to but it will delete set also
12:09 - let's run this
12:12 - see you will get a name error name set
12:14 - to is not defined in line number seven
12:19 - set 2 is not defined line number seven
12:22 - set two is not defined because in line
12:24 - number six only we have deleted this set
12:26 - so we have deleted the set items as well
12:29 - as set there is no set to now but clear
12:33 - will delete only set element set items
12:35 - set is still there that is an empty set
12:38 - so you can
12:39 - and I know uh another increase in that
12:42 - set but here we have deleted the set as
12:46 - well there is nothing
12:48 - so you have to create another set that
12:50 - is the difference between Dell keyword
12:52 - and clear method so I guess that's it
12:54 - about sets in Python
12:56 - I know you are thinking ma'am we are
12:58 - learning Python and so why you are going
13:00 - deep down in the set theory but this is
13:01 - just basics
13:03 - we will be using sets in Python further
13:05 - right
13:06 - set server basically it will contain
13:09 - unique elements so when you want unique
13:10 - element then we'll use set list of these
13:13 - unique elements right now you should
13:16 - know these are some Basics operations on
13:18 - set I think you must know like how to
13:21 - add element in set remove how to discard
13:24 - any element how to you know what is
13:26 - clear what is pop what is tell unionhead
13:29 - section these are just Basics so you
13:32 - should have some idea about these things
13:34 - right so now that's it about sets in
13:36 - python in the next video we will see
13:38 - Loops we'll be starting from looms right
13:41 - so now it's in the next video till
13:42 - number bye take care

Cleaned transcript:

so in the series of learning Python programming language we are discussing sets in Python previous video we have discussed uh what is difference and symmetric difference and difference update a symmetric difference and symmetric difference update Union intersections different symmetric difference these operations we have discussed now few more are left with set like we can set we can check if two sets are disjoint sets or not subset superset right how to check these things what are the methods what are the operators to check these things right in Python and as well as we have see we have seen one method clear method right that is used to delete all the set items right but we have one more uh keyword that is not actually a method that is a keyword Del clear is a method but Del is a keyword so how Del is different from Clear method that thing also will be discussing with the help of example practically I'll show you so let me just give you a brief about disjoint set subset and superset then you will get it better with the help of program see if I am having two sets so I'm having these two set and disjoint sets are what two sets are said to be disjoint set if they have nothing in common or you can say if their intersection is an empty set right so if you want to check the set one and set two are disjoint sets or not no they are not why so because they have common here we have four here we have four so one item is common their intersection is four that is not an empty set so we cannot say that it is these two are design sets so here we have a method is designed to check set one dot is disjoint and here we can pass in argument set two so now this will give you the true or false in this case it will give false because these two sets are not disjoint sets right so this is the method to check if the two sets addition says or not now here all sorts in argument we can pass less totable that also I'll show you practically but I hope you go to what is this show and said and corresponding to this set we do not have any operator like for Union we have this operator for intersection we have and for finding difference we have minus for symmetric difference we have this right but for is this joint there is no operator so this you have to do this operation with method only right now subset if I want to check this set 1 is a subset of set 2 or not so for that also we have a method set one dot is subset and set 2. subset mean what means what we can say this set 1 is a subset of set 2 if if set 2 contains every element of set 1. that case you can say set 1 is subset of set two let me just write down this definition so this is what definition of subset if the set 1 is subset of set two if every element of set 1 is in set two mean set 2 contains every element of set one so here can we say set one is subset of set two check every element of set 1 is in set two in set when we have one is this in set two no so in this case also it will give false if I update this set something like this okay one two three and five now can we say set one is subset of set to yes because every element of set 1 is in set two so in this case it will give true so this is how you can check subset for this we have an operator set one like this less than equal to set two so this is to check this is correspond corresponding to this is subset so you can use this method also or this operator also to check if you want to check the set 2 is subset of set 1 then you can check set 2 here set 2 is subset of set one you can check it like this right so here it will give false reverse of subset is superset if I write here is super set of set two so it is reverse of subset means set 1 is known as superset of set two if set 1 contains every element of set two right or you can say if every element of set 2 is in set one but here if every element of set 1 is in set two I hope you got what is subset in superset let me just write down the definition of superset as well so now I hope you can see the difference what is subset and superset set one is super set of set two if set one contains every element of set two right so in this case if I check set one in superset of set two so we can say no it's not true it's false because set two we have many elements and in set one we don't have ten seven eight minus 10 so that is why it is not super set off if I update this something like this I have here 10 7 8 minus 10. now now we can say yeah set one is super set of set two because now set one contains every element of set two every element of set 2 is in set one yeah set one can have extra element also right so now yes this this time it will give true right and also we have an operator for this like set one and okay reverse of subset so something like this set to greater than equal to set two right so let's create a new file here so now I have taken the same set that we have discussed in previous videos and I'll be checking the set one is disjoint or not these two set so set one dot we have a method C is this joint and set two call this method on one set and another set would be passed as an argument right and let's just print what it will give it will give you the true or false right so let's run this and we'll let's see what is the output see it will give false because these are not disjoints that because we have common Jenny is common here if I remove Jenny from here see and now I'll check so this time it will give you true because yeah there is nothing common in these sets so these two sets are designed rather than this here also I can pass like a less time passing here so let's run this and see say this time also it will give true because set 1 is designed with this yes there is nothing common here but if I update this thing if I add here chin let's run this now this time it will give false because we have common Jenny and genuine so this is how you can check the distance or not now next is you are checking for subset so let's check here only is subset okay set one is subset of this set or not yeah this is a list we are providing a list in argument but first of all this method will convert it into set and then we will check the subset or not so let's run this and see it's false subset means what set 1 is a subset of this if every element of set 1 is in set 2. but in set one we have Ram sham Jenny and here we have movement Jenny only Ram sham is not there if I update this one like this and if I check like this then it will give to you yeah now every element of set one is in this set yes there can be extra element also right and rather than this you can pass here a set I'm passing like set two so this time it will obviously it will be false right and we can also check with this with the help of we have an operator less than equal to set to let's run this both will give false this will also check this subset or not so with the help of method with the help of operator we can check right and if I check something like this set 1 is subset of set one let's see now this is true the second one this okay this is now true every element is subset of itself because according to definition the set one contains every element of set one yeah that's true now we'll check for superset so is superset off set two this is a reverse of subset set one is superset of set two if every element of set 2 is in set one or you can say set one contains every element of set two so let me just update something so what output you will get here let's run this and see yeah true set one is a superset of set two see now every element of this set to set to where we have two element G and Akash is in set one G and Akash yeah in set one there can be extra element in Z1 so that is why set 1 is super set of set two but set two is super set of set one that is not true that is for false right because in this case it should be every element of set one should be in set two but that is not a case here right and same if I check set one is super set of set one itself yeah that is also true okay for this also we have an operator that is reverse of subset so that is why it is reverse greater than equal to okay foreign set two same both would be true in this case also okay so superset subset disjoint this is how you can check now we have one more uh sorry keyword is not method Del see then let me check first clear if I want to clear all the element of set 2 so what I can do on set 2 I can call Dot clear method right and if now I print set 2 clear will remove maybe new set how 50 or 100 entries and you want to clear all the entries so you can use this method so now set 2 becomes an empty set C this is what an empty set okay we have cleared everything from set to but rather than clear see if I use here Del set two okay this will also delete every element of set to but it will delete set also let's run this see you will get a name error name set to is not defined in line number seven set 2 is not defined line number seven set two is not defined because in line number six only we have deleted this set so we have deleted the set items as well as set there is no set to now but clear will delete only set element set items set is still there that is an empty set so you can and I know uh another increase in that set but here we have deleted the set as well there is nothing so you have to create another set that is the difference between Dell keyword and clear method so I guess that's it about sets in Python I know you are thinking ma'am we are learning Python and so why you are going deep down in the set theory but this is just basics we will be using sets in Python further right set server basically it will contain unique elements so when you want unique element then we'll use set list of these unique elements right now you should know these are some Basics operations on set I think you must know like how to add element in set remove how to discard any element how to you know what is clear what is pop what is tell unionhead section these are just Basics so you should have some idea about these things right so now that's it about sets in python in the next video we will see Loops we'll be starting from looms right so now it's in the next video till number bye take care
