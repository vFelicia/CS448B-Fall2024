With timestamps:

00:00 - in this video we are going to construct
00:02 - a binary search tree from given
00:04 - postorder traversal see we have
00:06 - discussed how to construct a binary
00:08 - search tree from given preorder
00:10 - traversal okay and now I'm going to take
00:13 - the same example I'm going to take the
00:15 - post role reversal of that tree and we
00:17 - are going to construct a binary search
00:18 - tree okay see now what is this post
00:22 - order traversal as you know left here
00:25 - right and root root is at the last
00:29 - position so in the last video that we
00:32 - have discussed preorder traversal was
00:34 - given we are find we have found out the
00:36 - inorder traversal and then using both
00:38 - preorder and you know in order we
00:40 - constructed a binary search tree the
00:42 - same method will follow in this case
00:45 - also post order traversal is given now
00:47 - you have to find out the inorder
00:49 - traversal as you know the property of
00:51 - binary search trees when you find out
00:54 - the inorder traversal of a binary search
00:56 - tree then that inorder traversal would
01:00 - always be in ascending order
01:03 - okay that is for sure now how to find
01:07 - out inorder traversal see post order
01:11 - traversal is given then obviously
01:12 - elements in the BST would be B's fine
01:15 - now in order to ever sell is what
01:17 - arrange these elements in ascending
01:20 - order that is in order traversal of
01:22 - binary search tree that is the rule okay
01:25 - so in order to ever sell is 5 here we
01:30 - have 16 17 18 19 20 60 70 and 85 and in
01:41 - order traversal s what how to write left
01:44 - root and right fine and preorder
01:50 - traversal was root left and right we
01:53 - have already discussed how to find out
01:55 - all that tree reversals now see it is
01:58 - not like that you have to find out in
02:00 - order after that you can only construct
02:02 - the binary search tree no need to find
02:05 - out this inorder traversal just from
02:06 - this post order traversal you can
02:08 - construct a tree but we have followed
02:10 - this approach in the previous video that
02:11 - is why I am following this approach only
02:13 - okay because that is very easy to find
02:15 - out in order traversal just arrange all
02:17 - the elements in ascending order
02:19 - okay now have to find how to construct
02:21 - binary search tree see first of all we
02:24 - have to find out route okay have to find
02:27 - out route to find out route you have to
02:29 - check post order traversal okay see from
02:33 - in order traversal route is something
02:35 - somewhere in between left and right so
02:37 - we cannot say which one is the route but
02:39 - in post order traversal see route is the
02:42 - rightmost part so we Traverse this post
02:45 - order traversal from right to left in
02:48 - preorder traversal so we have traversed
02:50 - that from left to right I will provide
02:53 - you the link in the description box you
02:55 - can check it out there so the rightmost
02:58 - the rightmost element has what route so
03:00 - here 2020 is the rightmost element so 20
03:02 - would be the root of the tree now second
03:07 - second step is you have to find out the
03:09 - left subtree and the right subtree of
03:12 - this road now how to find out that thing
03:15 - to find out the left subtree and right
03:18 - subtree you have to check in order
03:21 - traversal see now route is 20 now find
03:25 - out where is 20 in this in order
03:27 - traversal in inorder traversal here we
03:30 - got 20 okay and this is route now see
03:37 - this traversal left route and right to
03:40 - the left of route all the elements are
03:43 - should be in the left subtree and to the
03:46 - right of the route all the elements
03:48 - should be in the right subtree now see
03:50 - this is the route so this is the route
03:52 - and this is what left and this is right
03:59 - so all the elements to the left of this
04:01 - route are in the left subtree so here
04:04 - we'll write 5 16 17 18 and 19 in the
04:09 - right we have 60 70 and 85 now repeat
04:15 - the same first set first step and second
04:18 - step in this also at this subtree also
04:21 - and at right subtree also okay now
04:25 - this early the problem has been divided
04:27 - into two parts one is this and one is
04:29 - this now out of these elements now first
04:33 - of all you can construct either the left
04:35 - subtree first or the right subtree first
04:37 - it's up to you I'm going to construct
04:39 - the left subtree first now out of these
04:42 - elements which should be the root you
04:44 - have first of all we have to find out
04:45 - the root then we find out the left
04:47 - subtree of that wooden right subtree of
04:49 - that room and to find out the root we
04:52 - check what postorder traversal okay now
04:56 - see out of these elements to find out
04:59 - the root we traverse the post order from
05:01 - right to left and we check out of these
05:05 - elements which which element is to the
05:08 - right most part in the post order
05:10 - traversal because root is always to the
05:12 - rightmost part in the post order
05:14 - traversal so traverse this from right to
05:16 - left here this this this and this c16
05:19 - out of these elements see I'm not taking
05:22 - these elements out of these five sixteen
05:25 - seventeen eighteen and nineteen which
05:27 - element is to the right most part when
05:29 - we traverse this from right to left we
05:31 - got what first of all 16 so 16 would be
05:34 - the root here so out of these elements
05:37 - 16 would be the root now you have to
05:41 - find out what is the left and right
05:43 - subtree of the 16 to find out this one
05:46 - you have to check in order traversal
05:48 - okay
05:49 - now locate where is 16 in this inorder
05:52 - traversal here we go to what 16 16 is
05:57 - the root so same to the left to check
06:01 - out the root is in between left and
06:03 - right to check out 16 the to the left of
06:06 - 16 we have only 5 so this 5 would be to
06:09 - the left of 16 to the right of 16 out of
06:13 - these elements say I'm not taking these
06:16 - elements out of these element to the
06:19 - right of 16 elements are only 17 18 and
06:23 - 19 so we write here 17 18 and 19 fine
06:30 - now this is one element so you have to
06:33 - now apply same rule on these elements
06:37 - now find out which should be the
06:39 - out of these elements to find out the
06:41 - root we have to put check post order
06:43 - traversal so now check out of these
06:46 - elements which should be the route
06:47 - traverse this from right to left 17 18
06:51 - and 19 which element you got first 17 18
06:54 - and 19 C 18 18 is to the rightmost part
06:58 - out of these elements C to the left here
07:00 - 19 here 17 so 18 would be the route so
07:04 - here 18 would be the route so out of 17
07:09 - 18 and 19 18 would be the route to the
07:14 - left of it into the right of heading to
07:16 - find out this case you have to follow
07:18 - you have to check that in order
07:19 - traversal now locate where is it a knee
07:21 - in this inorder traversal here we got 80
07:26 - find out out of these elements 17 18 and
07:29 - 19 root is 18 so find out which element
07:33 - is to the left of a team to the left of
07:36 - it in only 17 so we will write 17 this
07:39 - side and to the right of 18 we have only
07:42 - 19 so here we got 19 so this left
07:46 - subtree is finished now check out for
07:49 - the right one
07:50 - which should be the route check out the
07:52 - post order traversal traverse from right
07:54 - to left out of these element which
07:56 - element is to the rightmost part
07:59 - traverses from right to left 60 out of
08:02 - 60 70 and 85 60s right most part because
08:05 - to the left we have 85 then left we have
08:08 - 73 out of 60 70 and 85 60 would be the
08:14 - route now find out what is to do a left
08:18 - of 60 and what is to route to the right
08:21 - of 60 for this case check out in order
08:24 - traversal locate where is the 60 in
08:27 - inorder traversal here we got 60 okay
08:33 - now route is in between left and right
08:36 - child or you can say left or right
08:39 - subtree now out of these elements
08:41 - extends the route now out of these
08:43 - elements check out the in order to the
08:47 - left of 60 which element is there to the
08:50 - left of 60
08:52 - out of 60 70 and 85 60 70 and 85 no no
08:56 - element is to the left of 60 so to the
08:59 - left of 16 will write nothing 70 and 85
09:05 - both are to the right of 60 so both who
09:08 - in right to the right of 60 70 and 70
09:11 - and 85 okay both are to the right of 60
09:15 - so we'll write here now out of these two
09:18 - which is the root trace this postorder
09:22 - from right to left we got first of all
09:24 - 85 okay
09:25 - so 85 would be the root out of 70 and 85
09:30 - 85 is the root now find out 70s to the
09:34 - left or right obviously this is BST so
09:36 - without checking in order traversal you
09:38 - can say 70 is less than 80 so we will
09:41 - write 70 here only and right child is
09:46 - null on after taking from in order you
09:50 - can say locate where is 85 here we go to
09:53 - 85 to the right of 85
09:56 - we have nothing so this is null and 70
09:59 - is to the left of 85 so this should be
10:01 - the to the left side so this is the BST
10:05 - binary search tree from this given post
10:07 - order traversal you can find out the
10:09 - post order traversal of this tree and
10:11 - you will get the same result as it is
10:15 - given in the question only okay without
10:19 - in order also you can find out you can
10:21 - construct the binary search tree just
10:23 - trace out this from right to left 20 is
10:26 - here to the right side 20 is here to 20
10:29 - would be the root obviously it is a BST
10:31 - then you can say all the elements to the
10:34 - left of this 20 would be less than 20
10:36 - and all the elements to the right of
10:38 - this root is greater than 20 okay now
10:43 - find out a position I or you can say
10:45 - index I trace out this from this side to
10:50 - this side see first its 60 is greater
10:53 - than 20 85 is also greater than 20 70 is
10:56 - greater than 20 now 16 is less than 20
10:59 - to find out the very first element which
11:02 - is less than
11:02 - root element okay so all these all these
11:08 - element would be to the left of 20 and
11:11 - all these elements would be 70 85 and 60
11:16 - this would be to the right of 20 okay
11:21 - and repeat the same step without
11:23 - considering this in order again and
11:26 - again and you'll construct you can
11:27 - construct a binary search tree so this
11:30 - is how you can construct a BST either by
11:32 - finding the inorder traversal both using
11:36 - both poster and inorder traversal or
11:38 - simply considering only the postorder
11:41 - traversal you can also construct a
11:43 - binary search tree okay so I'll see you
11:45 - in the next video till then bye-bye take
11:46 - care

Cleaned transcript:

in this video we are going to construct a binary search tree from given postorder traversal see we have discussed how to construct a binary search tree from given preorder traversal okay and now I'm going to take the same example I'm going to take the post role reversal of that tree and we are going to construct a binary search tree okay see now what is this post order traversal as you know left here right and root root is at the last position so in the last video that we have discussed preorder traversal was given we are find we have found out the inorder traversal and then using both preorder and you know in order we constructed a binary search tree the same method will follow in this case also post order traversal is given now you have to find out the inorder traversal as you know the property of binary search trees when you find out the inorder traversal of a binary search tree then that inorder traversal would always be in ascending order okay that is for sure now how to find out inorder traversal see post order traversal is given then obviously elements in the BST would be B's fine now in order to ever sell is what arrange these elements in ascending order that is in order traversal of binary search tree that is the rule okay so in order to ever sell is 5 here we have 16 17 18 19 20 60 70 and 85 and in order traversal s what how to write left root and right fine and preorder traversal was root left and right we have already discussed how to find out all that tree reversals now see it is not like that you have to find out in order after that you can only construct the binary search tree no need to find out this inorder traversal just from this post order traversal you can construct a tree but we have followed this approach in the previous video that is why I am following this approach only okay because that is very easy to find out in order traversal just arrange all the elements in ascending order okay now have to find how to construct binary search tree see first of all we have to find out route okay have to find out route to find out route you have to check post order traversal okay see from in order traversal route is something somewhere in between left and right so we cannot say which one is the route but in post order traversal see route is the rightmost part so we Traverse this post order traversal from right to left in preorder traversal so we have traversed that from left to right I will provide you the link in the description box you can check it out there so the rightmost the rightmost element has what route so here 2020 is the rightmost element so 20 would be the root of the tree now second second step is you have to find out the left subtree and the right subtree of this road now how to find out that thing to find out the left subtree and right subtree you have to check in order traversal see now route is 20 now find out where is 20 in this in order traversal in inorder traversal here we got 20 okay and this is route now see this traversal left route and right to the left of route all the elements are should be in the left subtree and to the right of the route all the elements should be in the right subtree now see this is the route so this is the route and this is what left and this is right so all the elements to the left of this route are in the left subtree so here we'll write 5 16 17 18 and 19 in the right we have 60 70 and 85 now repeat the same first set first step and second step in this also at this subtree also and at right subtree also okay now this early the problem has been divided into two parts one is this and one is this now out of these elements now first of all you can construct either the left subtree first or the right subtree first it's up to you I'm going to construct the left subtree first now out of these elements which should be the root you have first of all we have to find out the root then we find out the left subtree of that wooden right subtree of that room and to find out the root we check what postorder traversal okay now see out of these elements to find out the root we traverse the post order from right to left and we check out of these elements which which element is to the right most part in the post order traversal because root is always to the rightmost part in the post order traversal so traverse this from right to left here this this this and this c16 out of these elements see I'm not taking these elements out of these five sixteen seventeen eighteen and nineteen which element is to the right most part when we traverse this from right to left we got what first of all 16 so 16 would be the root here so out of these elements 16 would be the root now you have to find out what is the left and right subtree of the 16 to find out this one you have to check in order traversal okay now locate where is 16 in this inorder traversal here we go to what 16 16 is the root so same to the left to check out the root is in between left and right to check out 16 the to the left of 16 we have only 5 so this 5 would be to the left of 16 to the right of 16 out of these elements say I'm not taking these elements out of these element to the right of 16 elements are only 17 18 and 19 so we write here 17 18 and 19 fine now this is one element so you have to now apply same rule on these elements now find out which should be the out of these elements to find out the root we have to put check post order traversal so now check out of these elements which should be the route traverse this from right to left 17 18 and 19 which element you got first 17 18 and 19 C 18 18 is to the rightmost part out of these elements C to the left here 19 here 17 so 18 would be the route so here 18 would be the route so out of 17 18 and 19 18 would be the route to the left of it into the right of heading to find out this case you have to follow you have to check that in order traversal now locate where is it a knee in this inorder traversal here we got 80 find out out of these elements 17 18 and 19 root is 18 so find out which element is to the left of a team to the left of it in only 17 so we will write 17 this side and to the right of 18 we have only 19 so here we got 19 so this left subtree is finished now check out for the right one which should be the route check out the post order traversal traverse from right to left out of these element which element is to the rightmost part traverses from right to left 60 out of 60 70 and 85 60s right most part because to the left we have 85 then left we have 73 out of 60 70 and 85 60 would be the route now find out what is to do a left of 60 and what is to route to the right of 60 for this case check out in order traversal locate where is the 60 in inorder traversal here we got 60 okay now route is in between left and right child or you can say left or right subtree now out of these elements extends the route now out of these elements check out the in order to the left of 60 which element is there to the left of 60 out of 60 70 and 85 60 70 and 85 no no element is to the left of 60 so to the left of 16 will write nothing 70 and 85 both are to the right of 60 so both who in right to the right of 60 70 and 70 and 85 okay both are to the right of 60 so we'll write here now out of these two which is the root trace this postorder from right to left we got first of all 85 okay so 85 would be the root out of 70 and 85 85 is the root now find out 70s to the left or right obviously this is BST so without checking in order traversal you can say 70 is less than 80 so we will write 70 here only and right child is null on after taking from in order you can say locate where is 85 here we go to 85 to the right of 85 we have nothing so this is null and 70 is to the left of 85 so this should be the to the left side so this is the BST binary search tree from this given post order traversal you can find out the post order traversal of this tree and you will get the same result as it is given in the question only okay without in order also you can find out you can construct the binary search tree just trace out this from right to left 20 is here to the right side 20 is here to 20 would be the root obviously it is a BST then you can say all the elements to the left of this 20 would be less than 20 and all the elements to the right of this root is greater than 20 okay now find out a position I or you can say index I trace out this from this side to this side see first its 60 is greater than 20 85 is also greater than 20 70 is greater than 20 now 16 is less than 20 to find out the very first element which is less than root element okay so all these all these element would be to the left of 20 and all these elements would be 70 85 and 60 this would be to the right of 20 okay and repeat the same step without considering this in order again and again and you'll construct you can construct a binary search tree so this is how you can construct a BST either by finding the inorder traversal both using both poster and inorder traversal or simply considering only the postorder traversal you can also construct a binary search tree okay so I'll see you in the next video till then byebye take care
