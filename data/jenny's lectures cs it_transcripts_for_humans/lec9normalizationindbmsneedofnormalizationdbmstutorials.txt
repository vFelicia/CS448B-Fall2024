With timestamps:

00:00 - so till now in the series of DBMS
00:02 - lectures we have already discussed what
00:04 - is functional dependency how to find out
00:07 - functional dependency from a given
00:08 - relation or table what are different
00:11 - types of keys and DBMS and how to find
00:14 - out all the candidate is present in a
00:16 - relation when a relation is given and
00:18 - functional dependencies are given on
00:19 - that relation right so that part is very
00:23 - important in normalization right so
00:25 - today I am going to start normalization
00:27 - we will discuss in this video we will
00:29 - discuss what is normalization what is
00:31 - need of normalization right and for
00:34 - which database normalization will be
00:37 - needed and for which database the
00:39 - normalization of the tables will be
00:42 - needed right and also we will discuss
00:45 - now what is the benefit or you can say
00:48 - what are the advantages of normalization
00:51 - what are the advantages of normalizing
00:53 - or table right so first of all I am NOT
00:56 - going to tell you the definition what
00:58 - ever written in the books or net the
01:00 - definition of normalization we will
01:02 - discuss some problems if we take some
01:05 - relational schema or some table or a
01:07 - relation then some problems in problems
01:10 - in that relation and how to resolve
01:12 - those problems then automatically you
01:14 - will get what is need of normalization
01:16 - and what is basically normalization
01:18 - right so let us take one example I'm
01:22 - taking a table or you can see a relation
01:24 - or you can say I'm taking a relational
01:26 - schema right suppose I am taking this
01:30 - relational schema you can say I'm taking
01:33 - this table order relation name student
01:35 - and this table I am having these
01:38 - attributes of a student I am going to
01:40 - store information of students right
01:43 - student ID name total credits of that
01:46 - student or you can say Marx and a
01:48 - department name building of that
01:51 - department in which building that
01:53 - department is and room number right all
01:57 - this information I am taking in one
01:58 - table now suppose I am inserting some
02:01 - data in the stable C student ieading is
02:04 - 1 and suppose name is Rahul right and
02:09 - total credit of the student L suppose
02:13 - fine out of pain I'm taking Department
02:16 - the name is CSC and building is suppose
02:20 - B 1 and room number is 1 0 1 right
02:24 - again I'm inserting a second student and
02:27 - the name is Jia credit 8 same department
02:32 - CSC building would be B 1 and room
02:35 - number would be 1 0 1 like this suppose
02:38 - I have inserted 6 a student information
02:40 - and I want to store another student
02:42 - information suppose to entitiy ID is 7
02:45 - and name is 1 Shikha and suppose credits
02:50 - are 8 and Department is civil right so
02:56 - now you have to repeat the same
02:57 - information again that is the building
03:00 - and room number that is 1 1 0 fine like
03:06 - this if you will insert the student
03:08 - information then you have to repeat this
03:10 - information again suppose student is
03:12 - again I am inserting a student and
03:14 - Department of that student is CSE now
03:20 - again I have to repeat the building and
03:23 - the room number for this one so this is
03:26 - what redundancy of the information right
03:29 - see we are repeating this information
03:32 - again and again you can see for this
03:35 - also for this record also you are
03:37 - repeating this information here you can
03:38 - say if 2 students are in fashion
03:40 - designing Department then you have to
03:42 - repeat the building and the room number
03:44 - for both the tuples like this suppose I
03:47 - am taking a you know only 8 entries
03:50 - suppose millions or thousands of entries
03:52 - are there right and in thousands of
03:55 - entries may be suppose 100 or 200
03:58 - students are from si si department so
04:01 - for each record for each row what
04:03 - obviously you need to specify that
04:05 - department that is ok but with the help
04:07 - with this this department name you need
04:10 - to specify building and room number in
04:12 - all the five hundred rows now what is
04:15 - the point of repeating this information
04:17 - again and again right so this is what
04:20 - redundancy why this problem occurs
04:23 - because I am
04:25 - taking a larger schema I am going to
04:30 - store more information in one table only
04:34 - yes I'm taking only one two three four
04:38 - five six six attributes suppose in this
04:41 - table also I am taking a chori name
04:45 - h OD room number and h OD you can say a
04:52 - phone number so for CSC one h OD would
04:55 - be there right and if students are
04:59 - hundred in CS a department so for those
05:02 - all hundred students you have to repeat
05:05 - their chori name or you can say there is
05:07 - OD information in all the hundred tuples
05:09 - now what is that that is redundancy so
05:13 - problem is what because of this larger
05:16 - schema now if we're divided if we
05:19 - decompose our table into smaller tables
05:23 - then maybe you can reduce the redundancy
05:28 - fine and see the tendency is the main or
05:32 - you can say redundancy is the root cause
05:35 - for all the problems fine inconsistency
05:40 - insertion problem deletion problem
05:42 - update problem all the further problems
05:44 - will be arised
05:46 - because there is redundancy in your
05:48 - table so if you reduce if you reduce or
05:51 - if you remove the redundancy see I am
05:53 - NOT saying that the normalization will
05:56 - remove the redundancy completely no but
05:59 - it will reduce the redundancy it will
06:02 - reduce the duplicate data right so if we
06:06 - are able to reduce the redundancy then
06:08 - obviously we are able to remove or we
06:10 - are able to reduce the problems that
06:12 - will occur because of redundant data
06:14 - right now what problems can occur if we
06:19 - have this data if we don't have smaller
06:22 - tables we have one larger schema where
06:25 - we want to store all the information in
06:27 - one table only right then what the
06:30 - problem can occur our first problem is
06:32 - what is the redundancy problem now
06:34 - because of this another problem can be
06:36 - there three main problems are there one
06:38 - insertion updation and deletion what we
06:43 - call is insertion anomaly deletion
06:45 - anomaly and updation anomaly anomaly is
06:48 - what basically anomaly is what when our
06:51 - data is having multiple copies right and
06:55 - at one place we update the data but we
06:57 - forget to update that same data in
07:01 - another place right so now we have what
07:04 - we can't say that which data is correct
07:07 - because at one place we have some other
07:10 - value at another place we have some
07:12 - other value for the same data
07:13 - right so that is what a data anomaly so
07:17 - now let us discuss the first enemy that
07:19 - is insertion anomaly what does that mean
07:22 - see if suppose I want to insert a
07:25 - department name or a department
07:29 - information in this table right suppose
07:32 - I want to insert I want to insert an an
07:34 - University we have one more department
07:37 - that is suppose mechanical right and
07:41 - room number of sorry the building is B 1
07:44 - and room number is 120 right only I want
07:48 - to insert the department information but
07:50 - in this table you cannot insert this
07:53 - information why so because in this
07:56 - record in this tuple obviously you need
07:59 - to insert credits student name and
08:02 - student ID right if you insert here null
08:08 - null null but SIDS primary key that
08:11 - cannot be null right so that would be
08:15 - problematic situation we cannot insert
08:17 - information of a department until we
08:21 - have at least one student enrolled in
08:25 - that department but that is a
08:29 - problematic situation maybe students are
08:31 - not there students are still you know
08:33 - students yet not enrolled in that
08:36 - department but we have Department
08:38 - information but we are not if not able
08:40 - to insert that information in the stable
08:42 - why so because we are taking all the
08:45 - information in one table only fine that
08:48 - is insertion anomaly I hope you got now
08:50 - what
08:50 - insertion anomaly right we want to
08:53 - insert some information but you cannot
08:55 - insert that information because for that
08:58 - for inserting that information you need
09:00 - to insert some extra information right
09:04 - and if you don't have that extra
09:05 - information then you cannot insert this
09:07 - information in the stable right that is
09:11 - wrong right so that is an insertion
09:13 - anomaly now second anomaly is what
09:16 - updation anomaly now suppose I want to
09:21 - update the room number right but you can
09:26 - say that building of CSC Department
09:29 - right suppose I want to make this
09:32 - building
09:33 - CSC Department has been shifted from b1
09:37 - 2 c1 right
09:41 - maybe suppose in c1 room number is 1 0 1
09:43 - that's fine or you suppose in a room
09:46 - number is also 3 0 1 now you have to
09:50 - update this information in all the
09:53 - tuples where the department is say State
09:55 - Department why so because while creating
09:58 - this table this relational this
10:00 - relational schema what we have to insert
10:04 - the information of this department right
10:08 - department name building and room number
10:10 - once for each student of that department
10:15 - and suppose in CSI department I have 150
10:18 - students so now in 150 rows you have
10:22 - this information this redundancy right
10:24 - this complete information so now in 150
10:27 - rows you how to update this information
10:30 - here also see 1 & 3 0 1 here also you
10:33 - can say in CSI I have c1 + 3 0 1 in this
10:36 - table I have only three tuples having
10:39 - serious information but maybe when you
10:42 - are actually storing the information the
10:44 - real world entities problem right Pena's
10:48 - actually are designing a database and
10:50 - maybe you can have millions of records
10:51 - in that case that would be difficult to
10:53 - update in each tuple and suppose by
10:57 - chance we have updated in two tuples and
10:59 - we forgot to update in this couple
11:03 - then that would be inconsistency here
11:05 - for CSC building his b1 and room number
11:08 - is 1 0 1 here for CSC building is c1 and
11:10 - 3 0 1 now which information is correct
11:13 - we can't say right so that is what that
11:15 - leads to inconsistency problems data is
11:18 - now an inconsistent state so this is not
11:21 - a good database design right so that is
11:24 - what update anomaly now third is what
11:27 - believed anomaly now what is this
11:30 - ability to normally see let us take an
11:32 - example
11:32 - I suppose I want to are delete this
11:35 - student information that is 6 student
11:38 - ideas the idea 6 name is a cash and
11:41 - credit 7 right now if you want to delete
11:44 - this information then obviously you have
11:46 - to believe this complete record complete
11:49 - couple from the stable and so when you
11:54 - are going to delete this information
11:56 - then automatically this department
11:57 - information will be deleted right and
12:00 - only one student is there in this
12:03 - department right but obviously when you
12:06 - are deleting a student maybe student has
12:08 - left the college it doesn't mean that we
12:10 - are going to delete the department from
12:12 - the college obviously that is not a case
12:15 - so but when you delete this one then we
12:19 - don't have any information of EC
12:21 - Department left now so that is what we
12:23 - delete and only that is what problematic
12:26 - situation right that should not be a
12:28 - case yes you can remove the student
12:31 - information but this department
12:33 - information still exists in the college
12:36 - or in the university fine so this is
12:39 - what would delete anomaly so now I hope
12:41 - you got all the three anomalies now how
12:43 - to remove how to what is the solution of
12:45 - this problem how can we solve these
12:47 - problems see suppose you decompose the
12:52 - stable into two tables like this now
12:56 - suppose I have decomposed or you can say
12:58 - have divided this table into two tables
13:00 - one is student one is department student
13:02 - table is having informations to end it
13:04 - ID name credit and department name and
13:06 - department table is having information
13:08 - of department that is a department name
13:10 - building and no number now you can see
13:13 - we have removed all the information of
13:16 - all the
13:16 - these problems why so because we have
13:18 - removed the redundancy see CSC the
13:22 - information for Cu State Department I'm
13:24 - storing only once building b1 and room
13:26 - number one zero one here we have to
13:29 - store for each student but here only
13:31 - once civil also ones fashion designing I
13:35 - am storing only once and EC also for
13:38 - once not for each student if in CSA
13:42 - Department we have hundred students then
13:44 - obviously we will store the information
13:46 - of hundred student in this table but
13:48 - this information building and room
13:51 - number no need to repeat this
13:52 - information for all the students just
13:55 - make a separate table and store that
13:58 - information only once fine
14:01 - see now here obviously these two tables
14:03 - will be related with each other because
14:05 - we are working with relational database
14:08 - management system there all the
14:09 - information is stored in the form of
14:11 - relation and each relation are related
14:15 - with each other having some relation
14:17 - with each other right how these tables
14:20 - are related with the help of foreign key
14:22 - I haven't a discussed foreign key I will
14:25 - make a proper video with help of an
14:27 - example
14:27 - I'll tell you what is foreign key but
14:28 - for now see just keep this thing in your
14:32 - mind that foreign key is used to
14:34 - establish the relation between tables
14:37 - right now see here here also I have
14:41 - Department name he rolls on your
14:42 - department name right so now if you are
14:45 - dividing this larger schema into smaller
14:49 - schema or you can say into two into
14:51 - smaller tables like this then obviously
14:53 - you have to write down some rules like
14:56 - if we are making a table Department name
14:58 - building and dome number then obviously
15:01 - you should write a rule that Department
15:03 - name will act as a primary key in this
15:06 - table right it's not like that
15:10 - department name we don't have any
15:11 - primary key in this relation fine now
15:15 - see Department name is primary key for
15:18 - this relation so now this department
15:21 - name would be foreign key
15:23 - right we are referring to this this
15:28 - department name will be referring to
15:30 - here to this primary key in this table
15:33 - right I'll discuss in detail what is
15:36 - foreign key right but here you can see
15:39 - directly or see that to establish the
15:41 - relation between this and this we are
15:43 - going to use department name so
15:44 - department name nickname is what foreign
15:46 - key now what about insertion anomaly now
15:49 - suppose I want to insert this
15:51 - information any Department information
15:53 - so no need to do anything directly you
15:57 - can insert this information mechanical
15:59 - b1 and 120 right obviously we can insert
16:04 - the information in this department table
16:05 - no need to insert any information
16:07 - regarding of this mechanical Department
16:09 - in this student table right but it's not
16:13 - like that we have divided in the stable
16:15 - so we can delete any record from the
16:17 - table we can insert any record from any
16:19 - in any table right here also we have
16:21 - some referential integrity constraints
16:24 - right that will be applied on foreign
16:26 - key right that constraints we will
16:28 - discussed later fine but here like this
16:32 - you can insert this fine but here we are
16:34 - not able to insert the data right now
16:37 - what about update anomaly see suppose I
16:40 - want to insert this si si Department
16:42 - building is a c1 same and this one is 3
16:46 - 0 1 so that's it you have to update only
16:50 - one couple not all the tuples like in
16:52 - this case so we have solved up the
16:55 - updation anomaly problem right now what
16:57 - about this delete anomaly problem same
16:59 - suppose I want to delete a record of the
17:01 - student right so simply you can delete
17:04 - this tuple it doesn't mean that we have
17:06 - deleted the information of the
17:07 - department we still have EC Department
17:11 - information of EC Department in this
17:13 - department table right we have only
17:14 - deleted this information from student
17:17 - table fine so we have removed all the
17:21 - three anomalies by be composing the
17:23 - stable into two tables right so this is
17:27 - what normalization so normalization how
17:31 - you can define normalization is a
17:33 - process of making the table
17:36 - free from insert update and delete
17:38 - anomalies and obviously save space by
17:43 - reducing the redundant data or duplicate
17:47 - data that is what normalization fine I
17:51 - hope now you got or you can easily write
17:53 - down the definition of normalization and
17:55 - as well as we have divided this into
17:58 - smaller tables then you can say that it
18:01 - will simplify the queries right you will
18:04 - have to write down simple queries fine
18:07 - now it's not like that
18:09 - we need normalization on the data every
18:12 - time sometimes it is better to use
18:14 - denormalized data fine
18:17 - when see I hope you have this you have
18:21 - heard about oil VPN o el ap if not then
18:24 - I will discuss later in a complete video
18:27 - it is what online transactional
18:29 - processing and analytical processing
18:31 - fine here in this case we need
18:35 - normalized data because this is what you
18:38 - can say transactional means day to day
18:40 - transaction insert update and modify or
18:43 - modification of or you can say deletion
18:45 - of the database some data from the
18:48 - database right these queries are very
18:49 - frequent so if these queries are very
18:51 - frequent so obviously we want that these
18:54 - anomalies would not occur so in OLTP
18:57 - system we need a normalized data mostly
19:00 - or you can say every time in ona P
19:03 - system or you can say data warehouse
19:04 - when we are going to store huge date or
19:07 - you can say data warehouse means where
19:09 - there we are storing use data or
19:10 - historical data fine analytical queries
19:14 - means here we perform complex queries in
19:18 - which we use to join multiple tables to
19:22 - get the result fine so rather than
19:25 - dividing the table because we have if
19:27 - smaller tables are there then obviously
19:29 - you have to join the tables so it's
19:31 - better that a data would be in one table
19:33 - only so no need of the joining of the
19:36 - tables fine so that is why in this case
19:39 - we need denormalized data basically data
19:42 - is stored in B normalized form to make
19:46 - the performance that
19:48 - right but here the data would be
19:51 - normalized form to get the performance
19:54 - better so now I hope you got what is
19:56 - need of normalization right or you can
19:59 - say what are benefits of normalization
20:01 - first point you can write here is what
20:03 - to reduce the redundancy from the table
20:05 - right if you reduce the redundancy then
20:07 - obviously what it will compact the data
20:10 - so obviously second point is to save the
20:12 - space benefits in benefits you can write
20:15 - benefits of normalization fine and to
20:18 - reduce or to remove these anomalies fine
20:21 - third or fourth point you can write as
20:23 - what many normalization minimize the
20:26 - null values fine obviously here if you
20:29 - will store some information and if you
20:31 - don't have another information then you
20:32 - will store there null in Arlen suppose I
20:35 - have student information but I don't
20:36 - have any Department information so here
20:38 - you need to store null null and null
20:40 - fine so it will minimize the null values
20:43 - another point you can write is what
20:45 - normalization will simplify the Curie's
20:48 - fine another point you can write down is
20:51 - what it is important for these type of
20:53 - system OLTP systems where insertion
20:56 - insert and delete and this update
20:59 - queries are you know exists very
21:03 - frequently right by the end users and
21:06 - another point you can write down is what
21:08 - it simplifies the database structure by
21:11 - looking at the structure orders table
21:14 - you can easily understand fine
21:17 - what this table is all about fine if you
21:20 - have suppose one large table having 15
21:23 - to 20 a trade routes like Student
21:25 - Information Department a chori name
21:27 - faculty information then by looking at
21:29 - that table at that schema it would be
21:31 - difficult to understand but if we divide
21:34 - that into four tables like for student
21:36 - another table for Department separate
21:38 - table for faculty separate table for
21:40 - Authority separate table sinned by
21:42 - looking then by looking at those tables
21:45 - you can easily understand the schema
21:48 - fine and obviously that it will simplify
21:52 - the queries because if you write down a
21:54 - simple query on the stable then that
21:55 - would be difficult fine we will discuss
21:58 - it when we will write down the queries
21:59 - when we'll discuss that
22:00 - algebra fine so searching or you can say
22:04 - sorting and creating indexes will be
22:06 - faster after applying the normalization
22:09 - so these are all some important points
22:12 - about normalization another point is
22:14 - what see the composition of the stable
22:17 - is also not so easy to find the right
22:20 - decomposition is a very tough process
22:23 - fine here this is simple table by
22:27 - looking in this you can easily find out
22:28 - that we will separate the student
22:30 - information in one table we will
22:32 - separate this information Department
22:33 - information in another table that is
22:35 - very easy but sometimes it's not so easy
22:38 - to find out the right decomposition is
22:40 - also very tough fine because there could
22:44 - be some lossless decomposition and lossy
22:47 - decomposition and that lossy
22:49 - decomposition we don't want so what is
22:51 - that low setting of decomposition and
22:53 - loss let's take the composition that
22:55 - also we'll discuss later fine so that is
22:59 - also a very important point here how to
23:01 - decompose the table fine so that data
23:05 - will not get lost you will get a loss
23:08 - less decomposition now normalization is
23:11 - also having multiple levels means
23:13 - multiple normal forms for second third
23:16 - bcnf fourth fifth sixth normal form many
23:19 - normal forms are there fine so that also
23:22 - will discuss one by one in later videos
23:24 - so next video will discuss first normal
23:27 - form with the Rabanne example so now
23:29 - I'll see in the next video till then
23:31 - what I take

Cleaned transcript:

so till now in the series of DBMS lectures we have already discussed what is functional dependency how to find out functional dependency from a given relation or table what are different types of keys and DBMS and how to find out all the candidate is present in a relation when a relation is given and functional dependencies are given on that relation right so that part is very important in normalization right so today I am going to start normalization we will discuss in this video we will discuss what is normalization what is need of normalization right and for which database normalization will be needed and for which database the normalization of the tables will be needed right and also we will discuss now what is the benefit or you can say what are the advantages of normalization what are the advantages of normalizing or table right so first of all I am NOT going to tell you the definition what ever written in the books or net the definition of normalization we will discuss some problems if we take some relational schema or some table or a relation then some problems in problems in that relation and how to resolve those problems then automatically you will get what is need of normalization and what is basically normalization right so let us take one example I'm taking a table or you can see a relation or you can say I'm taking a relational schema right suppose I am taking this relational schema you can say I'm taking this table order relation name student and this table I am having these attributes of a student I am going to store information of students right student ID name total credits of that student or you can say Marx and a department name building of that department in which building that department is and room number right all this information I am taking in one table now suppose I am inserting some data in the stable C student ieading is 1 and suppose name is Rahul right and total credit of the student L suppose fine out of pain I'm taking Department the name is CSC and building is suppose B 1 and room number is 1 0 1 right again I'm inserting a second student and the name is Jia credit 8 same department CSC building would be B 1 and room number would be 1 0 1 like this suppose I have inserted 6 a student information and I want to store another student information suppose to entitiy ID is 7 and name is 1 Shikha and suppose credits are 8 and Department is civil right so now you have to repeat the same information again that is the building and room number that is 1 1 0 fine like this if you will insert the student information then you have to repeat this information again suppose student is again I am inserting a student and Department of that student is CSE now again I have to repeat the building and the room number for this one so this is what redundancy of the information right see we are repeating this information again and again you can see for this also for this record also you are repeating this information here you can say if 2 students are in fashion designing Department then you have to repeat the building and the room number for both the tuples like this suppose I am taking a you know only 8 entries suppose millions or thousands of entries are there right and in thousands of entries may be suppose 100 or 200 students are from si si department so for each record for each row what obviously you need to specify that department that is ok but with the help with this this department name you need to specify building and room number in all the five hundred rows now what is the point of repeating this information again and again right so this is what redundancy why this problem occurs because I am taking a larger schema I am going to store more information in one table only yes I'm taking only one two three four five six six attributes suppose in this table also I am taking a chori name h OD room number and h OD you can say a phone number so for CSC one h OD would be there right and if students are hundred in CS a department so for those all hundred students you have to repeat their chori name or you can say there is OD information in all the hundred tuples now what is that that is redundancy so problem is what because of this larger schema now if we're divided if we decompose our table into smaller tables then maybe you can reduce the redundancy fine and see the tendency is the main or you can say redundancy is the root cause for all the problems fine inconsistency insertion problem deletion problem update problem all the further problems will be arised because there is redundancy in your table so if you reduce if you reduce or if you remove the redundancy see I am NOT saying that the normalization will remove the redundancy completely no but it will reduce the redundancy it will reduce the duplicate data right so if we are able to reduce the redundancy then obviously we are able to remove or we are able to reduce the problems that will occur because of redundant data right now what problems can occur if we have this data if we don't have smaller tables we have one larger schema where we want to store all the information in one table only right then what the problem can occur our first problem is what is the redundancy problem now because of this another problem can be there three main problems are there one insertion updation and deletion what we call is insertion anomaly deletion anomaly and updation anomaly anomaly is what basically anomaly is what when our data is having multiple copies right and at one place we update the data but we forget to update that same data in another place right so now we have what we can't say that which data is correct because at one place we have some other value at another place we have some other value for the same data right so that is what a data anomaly so now let us discuss the first enemy that is insertion anomaly what does that mean see if suppose I want to insert a department name or a department information in this table right suppose I want to insert I want to insert an an University we have one more department that is suppose mechanical right and room number of sorry the building is B 1 and room number is 120 right only I want to insert the department information but in this table you cannot insert this information why so because in this record in this tuple obviously you need to insert credits student name and student ID right if you insert here null null null but SIDS primary key that cannot be null right so that would be problematic situation we cannot insert information of a department until we have at least one student enrolled in that department but that is a problematic situation maybe students are not there students are still you know students yet not enrolled in that department but we have Department information but we are not if not able to insert that information in the stable why so because we are taking all the information in one table only fine that is insertion anomaly I hope you got now what insertion anomaly right we want to insert some information but you cannot insert that information because for that for inserting that information you need to insert some extra information right and if you don't have that extra information then you cannot insert this information in the stable right that is wrong right so that is an insertion anomaly now second anomaly is what updation anomaly now suppose I want to update the room number right but you can say that building of CSC Department right suppose I want to make this building CSC Department has been shifted from b1 2 c1 right maybe suppose in c1 room number is 1 0 1 that's fine or you suppose in a room number is also 3 0 1 now you have to update this information in all the tuples where the department is say State Department why so because while creating this table this relational this relational schema what we have to insert the information of this department right department name building and room number once for each student of that department and suppose in CSI department I have 150 students so now in 150 rows you have this information this redundancy right this complete information so now in 150 rows you how to update this information here also see 1 & 3 0 1 here also you can say in CSI I have c1 + 3 0 1 in this table I have only three tuples having serious information but maybe when you are actually storing the information the real world entities problem right Pena's actually are designing a database and maybe you can have millions of records in that case that would be difficult to update in each tuple and suppose by chance we have updated in two tuples and we forgot to update in this couple then that would be inconsistency here for CSC building his b1 and room number is 1 0 1 here for CSC building is c1 and 3 0 1 now which information is correct we can't say right so that is what that leads to inconsistency problems data is now an inconsistent state so this is not a good database design right so that is what update anomaly now third is what believed anomaly now what is this ability to normally see let us take an example I suppose I want to are delete this student information that is 6 student ideas the idea 6 name is a cash and credit 7 right now if you want to delete this information then obviously you have to believe this complete record complete couple from the stable and so when you are going to delete this information then automatically this department information will be deleted right and only one student is there in this department right but obviously when you are deleting a student maybe student has left the college it doesn't mean that we are going to delete the department from the college obviously that is not a case so but when you delete this one then we don't have any information of EC Department left now so that is what we delete and only that is what problematic situation right that should not be a case yes you can remove the student information but this department information still exists in the college or in the university fine so this is what would delete anomaly so now I hope you got all the three anomalies now how to remove how to what is the solution of this problem how can we solve these problems see suppose you decompose the stable into two tables like this now suppose I have decomposed or you can say have divided this table into two tables one is student one is department student table is having informations to end it ID name credit and department name and department table is having information of department that is a department name building and no number now you can see we have removed all the information of all the these problems why so because we have removed the redundancy see CSC the information for Cu State Department I'm storing only once building b1 and room number one zero one here we have to store for each student but here only once civil also ones fashion designing I am storing only once and EC also for once not for each student if in CSA Department we have hundred students then obviously we will store the information of hundred student in this table but this information building and room number no need to repeat this information for all the students just make a separate table and store that information only once fine see now here obviously these two tables will be related with each other because we are working with relational database management system there all the information is stored in the form of relation and each relation are related with each other having some relation with each other right how these tables are related with the help of foreign key I haven't a discussed foreign key I will make a proper video with help of an example I'll tell you what is foreign key but for now see just keep this thing in your mind that foreign key is used to establish the relation between tables right now see here here also I have Department name he rolls on your department name right so now if you are dividing this larger schema into smaller schema or you can say into two into smaller tables like this then obviously you have to write down some rules like if we are making a table Department name building and dome number then obviously you should write a rule that Department name will act as a primary key in this table right it's not like that department name we don't have any primary key in this relation fine now see Department name is primary key for this relation so now this department name would be foreign key right we are referring to this this department name will be referring to here to this primary key in this table right I'll discuss in detail what is foreign key right but here you can see directly or see that to establish the relation between this and this we are going to use department name so department name nickname is what foreign key now what about insertion anomaly now suppose I want to insert this information any Department information so no need to do anything directly you can insert this information mechanical b1 and 120 right obviously we can insert the information in this department table no need to insert any information regarding of this mechanical Department in this student table right but it's not like that we have divided in the stable so we can delete any record from the table we can insert any record from any in any table right here also we have some referential integrity constraints right that will be applied on foreign key right that constraints we will discussed later fine but here like this you can insert this fine but here we are not able to insert the data right now what about update anomaly see suppose I want to insert this si si Department building is a c1 same and this one is 3 0 1 so that's it you have to update only one couple not all the tuples like in this case so we have solved up the updation anomaly problem right now what about this delete anomaly problem same suppose I want to delete a record of the student right so simply you can delete this tuple it doesn't mean that we have deleted the information of the department we still have EC Department information of EC Department in this department table right we have only deleted this information from student table fine so we have removed all the three anomalies by be composing the stable into two tables right so this is what normalization so normalization how you can define normalization is a process of making the table free from insert update and delete anomalies and obviously save space by reducing the redundant data or duplicate data that is what normalization fine I hope now you got or you can easily write down the definition of normalization and as well as we have divided this into smaller tables then you can say that it will simplify the queries right you will have to write down simple queries fine now it's not like that we need normalization on the data every time sometimes it is better to use denormalized data fine when see I hope you have this you have heard about oil VPN o el ap if not then I will discuss later in a complete video it is what online transactional processing and analytical processing fine here in this case we need normalized data because this is what you can say transactional means day to day transaction insert update and modify or modification of or you can say deletion of the database some data from the database right these queries are very frequent so if these queries are very frequent so obviously we want that these anomalies would not occur so in OLTP system we need a normalized data mostly or you can say every time in ona P system or you can say data warehouse when we are going to store huge date or you can say data warehouse means where there we are storing use data or historical data fine analytical queries means here we perform complex queries in which we use to join multiple tables to get the result fine so rather than dividing the table because we have if smaller tables are there then obviously you have to join the tables so it's better that a data would be in one table only so no need of the joining of the tables fine so that is why in this case we need denormalized data basically data is stored in B normalized form to make the performance that right but here the data would be normalized form to get the performance better so now I hope you got what is need of normalization right or you can say what are benefits of normalization first point you can write here is what to reduce the redundancy from the table right if you reduce the redundancy then obviously what it will compact the data so obviously second point is to save the space benefits in benefits you can write benefits of normalization fine and to reduce or to remove these anomalies fine third or fourth point you can write as what many normalization minimize the null values fine obviously here if you will store some information and if you don't have another information then you will store there null in Arlen suppose I have student information but I don't have any Department information so here you need to store null null and null fine so it will minimize the null values another point you can write is what normalization will simplify the Curie's fine another point you can write down is what it is important for these type of system OLTP systems where insertion insert and delete and this update queries are you know exists very frequently right by the end users and another point you can write down is what it simplifies the database structure by looking at the structure orders table you can easily understand fine what this table is all about fine if you have suppose one large table having 15 to 20 a trade routes like Student Information Department a chori name faculty information then by looking at that table at that schema it would be difficult to understand but if we divide that into four tables like for student another table for Department separate table for faculty separate table for Authority separate table sinned by looking then by looking at those tables you can easily understand the schema fine and obviously that it will simplify the queries because if you write down a simple query on the stable then that would be difficult fine we will discuss it when we will write down the queries when we'll discuss that algebra fine so searching or you can say sorting and creating indexes will be faster after applying the normalization so these are all some important points about normalization another point is what see the composition of the stable is also not so easy to find the right decomposition is a very tough process fine here this is simple table by looking in this you can easily find out that we will separate the student information in one table we will separate this information Department information in another table that is very easy but sometimes it's not so easy to find out the right decomposition is also very tough fine because there could be some lossless decomposition and lossy decomposition and that lossy decomposition we don't want so what is that low setting of decomposition and loss let's take the composition that also we'll discuss later fine so that is also a very important point here how to decompose the table fine so that data will not get lost you will get a loss less decomposition now normalization is also having multiple levels means multiple normal forms for second third bcnf fourth fifth sixth normal form many normal forms are there fine so that also will discuss one by one in later videos so next video will discuss first normal form with the Rabanne example so now I'll see in the next video till then what I take
