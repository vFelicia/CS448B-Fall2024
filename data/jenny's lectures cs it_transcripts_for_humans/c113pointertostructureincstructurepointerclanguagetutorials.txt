With timestamps:

00:00 - so in the series of learning c
00:01 - programming we are discussing structures
00:03 - in c in the previous video we have
00:04 - discussed array of structure right
00:07 - and we have discussed about structure
00:08 - everything like what is structure why we
00:10 - need structure how to define a structure
00:12 - how to declare variable of that
00:13 - structure what are structure members
00:16 - how the memory would be assigned how
00:18 - memory would be allocated to those
00:20 - structure members how to access
00:22 - the structure members everything about
00:23 - structure the basic detail we have
00:25 - discussed so now in this video we will
00:26 - see what is pointer to structure or you
00:29 - can say structure pointer
00:32 - and how you can access the structure
00:34 - members using pointer
00:37 - we will see this with the help of a
00:39 - program simple program i'll show you
00:40 - first of all here then i'll show you on
00:42 - my laptop practical also we'll see right
00:44 - but before this want to tell you one
00:46 - thing if you guys are planning to
00:48 - prepare for gate 2023 examination then
00:50 - an academy is going to start a batch
00:53 - from 24th of november
00:55 - in this course the top educators will
00:57 - cover all the subjects of cs and ip and
01:00 - help you to prepare for gate 2023
01:03 - this course will include the detailed
01:05 - explanation of all the concepts plus
01:07 - some special classes like they'll
01:09 - include preparation strategies some tips
01:11 - and tricks practice questions numericals
01:14 - along with
01:15 - detailed explanation of the concepts and
01:17 - the scores will be covered in english
01:19 - and notes will be given to you in
01:21 - english
01:22 - and a separate doubt clearing sessions
01:24 - would also be there in this course so
01:26 - all your doubts related to any topic
01:28 - will be clarified in those
01:30 - sessions
01:31 - and this would be paid but if you will
01:33 - use my code jkl 10 you will get extra 10
01:35 - discount on this paid subscription plus
01:38 - one more thing an academy is providing
01:40 - you a great offer you subscribe to the
01:43 - 12 month of fun academy gate and esc
01:45 - plus
01:46 - and you will get extra three months on
01:48 - it just to help you in your gate and esc
01:51 - preparation
01:52 - so you will pay only for 12 months and
01:54 - you will get 12 plus 3 months
01:57 - so i think those who are preparing for
01:59 - gay 2023 the subscription would really
02:01 - be helpful for you so all the relevant
02:03 - links and the details i'll put in the
02:04 - description box of this video if you are
02:06 - interested you can go and check out so
02:09 - now let's see
02:10 - what is pointer to structure i'm going
02:12 - to take that example only that we have
02:14 - discussed in previous videos stuck
02:16 - student right
02:18 - so this is a structure we have this
02:21 - defined the structure
02:23 - you can put this curly basis here or
02:24 - here right so this is definition of the
02:26 - structure we have defined our data type
02:28 - because structure is our user defined
02:30 - data type so this complete struct
02:32 - student this is what our data type
02:35 - and there it is containing
02:37 - three these are structure members having
02:39 - different different data types right
02:40 - these are not variables these are
02:42 - structure members right
02:44 - now if you want to semicolon here if you
02:47 - want to declare a variable of this data
02:49 - type either you can write down here like
02:51 - i am taking s or you can write down in
02:53 - main function or outside main function
02:54 - anywhere if you if you take like this if
02:58 - you write stuff
02:59 - student and i am taking s
03:02 - here i am not taking here i am declaring
03:05 - s variable here
03:06 - so this would be what
03:08 - global variable
03:10 - this s you can use this variable global
03:12 - means in any function in your program in
03:15 - main function or if you have any other
03:16 - function suppose in your program you
03:18 - have 5 function or 10 function in every
03:20 - function you can use this variable but
03:22 - if you declare this
03:24 - this variable within this main
03:26 - it means this variable would be local to
03:29 - this main
03:30 - you can only use at that time this
03:32 - variable within this main function
03:35 - right i hope this
03:36 - is clear to you what is local variable
03:38 - and global variable right
03:40 - so this one is global or you can declare
03:42 - here
03:43 - now
03:44 - what is pointer to structure
03:46 - here i am taking a pointer pointer means
03:49 - what it's a special variable which is
03:50 - containing address of any other variable
03:53 - right
03:55 - let's take i am having
03:57 - end asterisk ptr
04:00 - so this pointer is a variable which will
04:02 - contain address of a variable whose data
04:05 - type is
04:07 - int
04:09 - right so if i am having a variable in a
04:12 - and you can write down here
04:14 - is equal to address of a that is fine
04:18 - pointer is containing address of a
04:20 - and the rear type of a is in
04:22 - so fine but if you are having
04:25 - float and if you contain this this would
04:27 - be illegal right
04:30 - so this data type and this data type the
04:32 - variable data should match
04:34 - i hope this is clear to you right so now
04:37 - i am having a variable of type struct
04:40 - student so in the main function i am
04:43 - taking
04:44 - a pointer
04:46 - ptr
04:48 - what should be the data type
04:50 - of this pointer here what we will write
04:53 - i hope you got this now
04:55 - by looking at this example
04:57 - because here i want to store address of
04:59 - this s
05:00 - right and s data type is struct student
05:04 - so definitely here we must write stuff
05:06 - student right
05:08 - so here you will write struct student
05:11 - same data type
05:12 - this is a data type right user defined
05:14 - type
05:16 - now see how you can visualize this like
05:19 - in memory
05:20 - we have a
05:22 - variable s
05:24 - what we are having in s
05:26 - c
05:27 - or for this object we are having
05:29 - we are having three information roll
05:32 - number name and marks right so separate
05:34 - memory allocation would be allocated to
05:36 - this
05:36 - like here we have roll number
05:39 - here we have name
05:40 - and
05:41 - marks
05:42 - suppose address of this base address is
05:45 - suppose
05:46 - thousand
05:47 - his address would be one zero zero four
05:50 - and one zero 2 4 right so now what
05:53 - would be there in this s
05:55 - the base address of this memory location
05:58 - where this data has been stored
06:00 - thousand so now this is pointing to here
06:04 - right this is how
06:06 - the memory would be located to this
06:09 - structure variable and structure members
06:11 - right now s is also having some address
06:14 - suppose address is 2000 we don't know
06:16 - the address which we would be in
06:18 - hexadecimal form but i am just taking
06:20 - 2000 right
06:22 - now see s is what containing address so
06:24 - you must say that s is a pointer
06:26 - variable s must have a pointer variable
06:29 - yeah s is a pointer variable but we are
06:31 - not putting any string here
06:33 - so here s is what
06:35 - it's you can say internal pointer
06:37 - variable like array name is also
06:40 - internal pointer array name contains
06:42 - what address base address of the array
06:45 - so same this is containing base address
06:46 - for this i hope you go to this point
06:49 - right now
06:51 - we are having
06:53 - a variable
06:54 - pointer variable ptr so in ptr i am
06:57 - storing address of s
06:59 - address of this object address of s is
07:03 - 2000
07:06 - so now this is pointing to here
07:08 - because see in pointer directly we
07:10 - cannot store address of row number
07:11 - address of name or address of marks
07:14 - right
07:15 - we can link we can access these
07:17 - structure members you are supposed to
07:19 - link the
07:20 - these members with this object right
07:23 - and we can access these using this
07:26 - object only right so we are going to
07:28 - store address of this into this pointer
07:30 - so now how you will access these members
07:33 - using this pointer
07:35 - suppose in roll number we have i have
07:37 - initialized here only i have initialized
07:40 - like compile time initialization you can
07:41 - say roll number is one
07:44 - name is
07:46 - jenny
07:47 - that's it
07:49 - i'm entering only two values one and
07:50 - change so by default marks would be
07:52 - 0.000
07:53 - right
07:54 - so now one
07:56 - name is jenny and marks are zero point
07:58 - one two three four five six six zeros
08:02 - so if you want to print roll number name
08:03 - and jenny how you will print
08:05 - simply in print f what you will write
08:09 - roll number is percentage d one method
08:12 - is what
08:13 - s dot roll number
08:15 - you cannot simply like write roll number
08:17 - because simply write roll number roll
08:19 - number is not having any meaning here
08:22 - yeah s dot roll number is means what
08:24 - it's a variable which is pointing roll
08:25 - number of
08:28 - student s
08:29 - polymer of you can say the object yes or
08:31 - the variable s right or if you want to
08:34 - access using pointer then what you will
08:36 - write the name of the pointer ptr
08:39 - arrow operator
08:42 - on your laptop how you can
08:44 - write down the set operator in your
08:45 - program just that minus symbol and
08:49 - this bracket
08:50 - that's it this is a operator right and
08:53 - just write down the name of the
08:55 - structure member
08:57 - you want to access that's
09:00 - it will print one
09:02 - now if you want to print name simply
09:04 - write ptr arrow name ptr arrow marks
09:08 - right
09:10 - if you want to access these members
09:11 - using
09:12 - the variable
09:14 - then dot operator s dot name sort marks
09:17 - like this if pointer then arrow
09:20 - see
09:20 - here this means pointer of this means
09:25 - this you can also write something like
09:27 - this strict
09:29 - ptr
09:32 - dot
09:33 - roll
09:34 - number this is equivalent to this
09:39 - see a strict ptr means ptr asterisk
09:42 - means address at this location sorry the
09:45 - value at this location so a strict ptr
09:48 - means asterisk ptr ptr is having 2000.
09:52 - so value at 2000 is what
09:55 - this one thousand right
09:58 - now thousand dot address thousand dot
10:00 - address thousand means what s
10:03 - so it means what indirectly s dot roll
10:06 - number
10:07 - same
10:09 - right and s2 troll number means one so i
10:12 - hope you go
10:13 - the syntax how you can access and the
10:16 - method
10:17 - like what is you know happening behind
10:19 - the scene how you are accessing using
10:21 - pointer right so now what you can say
10:23 - what is a structure pointer
10:25 - it is a pointer
10:26 - which points to
10:29 - the address
10:31 - of the memory block that stores
10:34 - the structure this is the memory block
10:37 - which is storing this structure right
10:39 - here we are storing the structure right
10:43 - so pointer is pointing to
10:47 - the address of this memory block address
10:49 - of this memory block is thousand the
10:51 - base address so it is pointing to
10:52 - thousand only
10:54 - and in thousand obviously this thousand
10:55 - we are storing in
10:57 - this s by default it you know the name
10:59 - of the variable is storing this s
11:01 - so structure pointer is what
11:03 - it's a pointer that which points to the
11:07 - address of the memory block
11:10 - that stores
11:11 - the structure
11:13 - that's it
11:15 - right or here you can just try out this
11:17 - program by yourself like this is compile
11:19 - time initialization you can also you
11:21 - know do runtime initialization we are
11:23 - not initializing this here
11:25 - in main function i am you know i'll ask
11:27 - printf like inter roll number of the
11:28 - student and in scanf you will write
11:31 - using printf and scanf you are supposed
11:32 - to enter right so now let me show you
11:35 - practically
11:37 - so let me create a new file
11:41 - structure pointer
11:44 - right
11:45 - and i'm just
11:50 - copying this previous one
11:53 - because it it's almost same right here
11:57 - we have taken one okay this is the
11:59 - definition of the structure we are
12:00 - taking
12:02 - three variables this is area of
12:04 - structure so here i am just taking one
12:06 - variable right this one
12:10 - s1 and i am declaring i am initializing
12:12 - it at compile time only and we are
12:14 - taking one
12:18 - pointer right
12:25 - struct student and
12:28 - ptr
12:30 - equal to i am assigning this with what
12:33 - address of s1
12:35 - address of
12:36 - s1
12:39 - right
12:40 - and now
12:41 - i am going to access
12:43 - the members using s1 i am just going to
12:46 - print the information for
12:48 - s1
12:50 - for s2 i am not writing anything so i
12:52 - just comment these lines information for
12:54 - s1
12:56 - see
12:59 - these are for
13:01 - s2 and s3
13:03 - so just comment these lines out so now
13:06 - how we are going to access now
13:08 - we will not use s1 here we will use
13:12 - pointer
13:13 - and arrow
13:14 - row number
13:16 - and here we will use
13:18 - ptr
13:20 - arrow name
13:23 - and then
13:26 - ptr
13:27 - arrow marks
13:29 - now let me just run this and see what
13:31 - output you will get
13:33 - it should print one journey and 90.
13:36 - see information for s1
13:38 - is one roll number is one name and 90.
13:41 - so we are accessing accessing this with
13:43 - with the help of pointer right
13:46 - so rather than this ptr this uh another
13:49 - what you can write
13:51 - astric
13:53 - ptr
13:54 - and
13:55 - dotrolomer so that was equivalent to
13:58 - the syntax
14:00 - so roll number we are accessing using
14:02 - this and name and marks you are
14:04 - accessing using arrow operator right so
14:06 - now let me run this and see what output
14:08 - you are getting
14:09 - see
14:10 - the information for s1 is 1 genny and
14:12 - 90. right so hi i hope you got the
14:14 - basics like what is structural pointer
14:15 - and how to access the members of the
14:17 - structure using pointer right
14:21 - now you can try out different different
14:22 - things like this is compile time
14:23 - initialization you can try out your own
14:25 - how to initialize at runtime
14:28 - and in scanf also you can use this ptr
14:31 - you know erroneous ptr arrow marks like
14:33 - this
14:34 - right it's not like that only in printf
14:36 - only you can write down this means while
14:38 - printing only we can use this pointer
14:41 - while entering the value in scanf also
14:44 - you can use this pointer so that is for
14:46 - your you know your assignment you have
14:48 - to try that your own
14:49 - fine so in the next video you'll see
14:51 - what are unions in c and how unions are
14:53 - different from structures and see so now
14:55 - i'll see in the next video till then bye
14:57 - take care

Cleaned transcript:

so in the series of learning c programming we are discussing structures in c in the previous video we have discussed array of structure right and we have discussed about structure everything like what is structure why we need structure how to define a structure how to declare variable of that structure what are structure members how the memory would be assigned how memory would be allocated to those structure members how to access the structure members everything about structure the basic detail we have discussed so now in this video we will see what is pointer to structure or you can say structure pointer and how you can access the structure members using pointer we will see this with the help of a program simple program i'll show you first of all here then i'll show you on my laptop practical also we'll see right but before this want to tell you one thing if you guys are planning to prepare for gate 2023 examination then an academy is going to start a batch from 24th of november in this course the top educators will cover all the subjects of cs and ip and help you to prepare for gate 2023 this course will include the detailed explanation of all the concepts plus some special classes like they'll include preparation strategies some tips and tricks practice questions numericals along with detailed explanation of the concepts and the scores will be covered in english and notes will be given to you in english and a separate doubt clearing sessions would also be there in this course so all your doubts related to any topic will be clarified in those sessions and this would be paid but if you will use my code jkl 10 you will get extra 10 discount on this paid subscription plus one more thing an academy is providing you a great offer you subscribe to the 12 month of fun academy gate and esc plus and you will get extra three months on it just to help you in your gate and esc preparation so you will pay only for 12 months and you will get 12 plus 3 months so i think those who are preparing for gay 2023 the subscription would really be helpful for you so all the relevant links and the details i'll put in the description box of this video if you are interested you can go and check out so now let's see what is pointer to structure i'm going to take that example only that we have discussed in previous videos stuck student right so this is a structure we have this defined the structure you can put this curly basis here or here right so this is definition of the structure we have defined our data type because structure is our user defined data type so this complete struct student this is what our data type and there it is containing three these are structure members having different different data types right these are not variables these are structure members right now if you want to semicolon here if you want to declare a variable of this data type either you can write down here like i am taking s or you can write down in main function or outside main function anywhere if you if you take like this if you write stuff student and i am taking s here i am not taking here i am declaring s variable here so this would be what global variable this s you can use this variable global means in any function in your program in main function or if you have any other function suppose in your program you have 5 function or 10 function in every function you can use this variable but if you declare this this variable within this main it means this variable would be local to this main you can only use at that time this variable within this main function right i hope this is clear to you what is local variable and global variable right so this one is global or you can declare here now what is pointer to structure here i am taking a pointer pointer means what it's a special variable which is containing address of any other variable right let's take i am having end asterisk ptr so this pointer is a variable which will contain address of a variable whose data type is int right so if i am having a variable in a and you can write down here is equal to address of a that is fine pointer is containing address of a and the rear type of a is in so fine but if you are having float and if you contain this this would be illegal right so this data type and this data type the variable data should match i hope this is clear to you right so now i am having a variable of type struct student so in the main function i am taking a pointer ptr what should be the data type of this pointer here what we will write i hope you got this now by looking at this example because here i want to store address of this s right and s data type is struct student so definitely here we must write stuff student right so here you will write struct student same data type this is a data type right user defined type now see how you can visualize this like in memory we have a variable s what we are having in s c or for this object we are having we are having three information roll number name and marks right so separate memory allocation would be allocated to this like here we have roll number here we have name and marks suppose address of this base address is suppose thousand his address would be one zero zero four and one zero 2 4 right so now what would be there in this s the base address of this memory location where this data has been stored thousand so now this is pointing to here right this is how the memory would be located to this structure variable and structure members right now s is also having some address suppose address is 2000 we don't know the address which we would be in hexadecimal form but i am just taking 2000 right now see s is what containing address so you must say that s is a pointer variable s must have a pointer variable yeah s is a pointer variable but we are not putting any string here so here s is what it's you can say internal pointer variable like array name is also internal pointer array name contains what address base address of the array so same this is containing base address for this i hope you go to this point right now we are having a variable pointer variable ptr so in ptr i am storing address of s address of this object address of s is 2000 so now this is pointing to here because see in pointer directly we cannot store address of row number address of name or address of marks right we can link we can access these structure members you are supposed to link the these members with this object right and we can access these using this object only right so we are going to store address of this into this pointer so now how you will access these members using this pointer suppose in roll number we have i have initialized here only i have initialized like compile time initialization you can say roll number is one name is jenny that's it i'm entering only two values one and change so by default marks would be 0.000 right so now one name is jenny and marks are zero point one two three four five six six zeros so if you want to print roll number name and jenny how you will print simply in print f what you will write roll number is percentage d one method is what s dot roll number you cannot simply like write roll number because simply write roll number roll number is not having any meaning here yeah s dot roll number is means what it's a variable which is pointing roll number of student s polymer of you can say the object yes or the variable s right or if you want to access using pointer then what you will write the name of the pointer ptr arrow operator on your laptop how you can write down the set operator in your program just that minus symbol and this bracket that's it this is a operator right and just write down the name of the structure member you want to access that's it will print one now if you want to print name simply write ptr arrow name ptr arrow marks right if you want to access these members using the variable then dot operator s dot name sort marks like this if pointer then arrow see here this means pointer of this means this you can also write something like this strict ptr dot roll number this is equivalent to this see a strict ptr means ptr asterisk means address at this location sorry the value at this location so a strict ptr means asterisk ptr ptr is having 2000. so value at 2000 is what this one thousand right now thousand dot address thousand dot address thousand means what s so it means what indirectly s dot roll number same right and s2 troll number means one so i hope you go the syntax how you can access and the method like what is you know happening behind the scene how you are accessing using pointer right so now what you can say what is a structure pointer it is a pointer which points to the address of the memory block that stores the structure this is the memory block which is storing this structure right here we are storing the structure right so pointer is pointing to the address of this memory block address of this memory block is thousand the base address so it is pointing to thousand only and in thousand obviously this thousand we are storing in this s by default it you know the name of the variable is storing this s so structure pointer is what it's a pointer that which points to the address of the memory block that stores the structure that's it right or here you can just try out this program by yourself like this is compile time initialization you can also you know do runtime initialization we are not initializing this here in main function i am you know i'll ask printf like inter roll number of the student and in scanf you will write using printf and scanf you are supposed to enter right so now let me show you practically so let me create a new file structure pointer right and i'm just copying this previous one because it it's almost same right here we have taken one okay this is the definition of the structure we are taking three variables this is area of structure so here i am just taking one variable right this one s1 and i am declaring i am initializing it at compile time only and we are taking one pointer right struct student and ptr equal to i am assigning this with what address of s1 address of s1 right and now i am going to access the members using s1 i am just going to print the information for s1 for s2 i am not writing anything so i just comment these lines information for s1 see these are for s2 and s3 so just comment these lines out so now how we are going to access now we will not use s1 here we will use pointer and arrow row number and here we will use ptr arrow name and then ptr arrow marks now let me just run this and see what output you will get it should print one journey and 90. see information for s1 is one roll number is one name and 90. so we are accessing accessing this with with the help of pointer right so rather than this ptr this uh another what you can write astric ptr and dotrolomer so that was equivalent to the syntax so roll number we are accessing using this and name and marks you are accessing using arrow operator right so now let me run this and see what output you are getting see the information for s1 is 1 genny and 90. right so hi i hope you got the basics like what is structural pointer and how to access the members of the structure using pointer right now you can try out different different things like this is compile time initialization you can try out your own how to initialize at runtime and in scanf also you can use this ptr you know erroneous ptr arrow marks like this right it's not like that only in printf only you can write down this means while printing only we can use this pointer while entering the value in scanf also you can use this pointer so that is for your you know your assignment you have to try that your own fine so in the next video you'll see what are unions in c and how unions are different from structures and see so now i'll see in the next video till then bye take care
