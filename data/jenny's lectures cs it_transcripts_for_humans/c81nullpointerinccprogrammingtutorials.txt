With timestamps:

00:00 - so in the series of learning programming
00:01 - in see we are discussing pointers in say
00:03 - in the previous video I have discussed
00:04 - void pointer in say in this video I'll
00:05 - talk about null pointer in because there
00:07 - are some special pointer in see also
00:09 - like void null wild pointer and dangling
00:12 - pointer these these concepts are also
00:14 - really very helpful and generally in
00:16 - interview also they ask these type of
00:18 - questions right so we'll see everything
00:20 - about null pointer in this video like
00:21 - what is null pointer why we use it that
00:23 - is very important the application of
00:25 - null pointer all the important points
00:27 - about null pointer we will see with the
00:28 - help of a proper program we'll discuss
00:30 - here first of all then I'll show you
00:31 - practically on my laptop and we'll also
00:33 - see how this pointer is different from
00:35 - void pointer as well as if you don't
00:37 - initialize any pointer right how this
00:40 - pointer is different from that pointer
00:42 - that that an uninitialized pointer right
00:45 - everything about null pointer we will
00:46 - discuss in this video so now let's see
00:48 - what is null pointer see I hope you know
00:51 - uh how to initialize how to declare a
00:54 - pointer suppose I'm wenting int star
00:58 - PTR this is this is what a pointer to
01:01 - integer you can say an integer pointer
01:04 - right here we are not initializing this
01:07 - pointer
01:08 - means here is some
01:11 - PTR in memory right it's a special
01:14 - variable it will contain address of any
01:16 - other variable but we are not assigning
01:18 - any address till now right so maybe it
01:21 - is pointing to some some address in
01:23 - memory which is which is
01:26 - garbage because here we are having some
01:29 - garbage
01:30 - value we are not initializing it so it
01:33 - is pointing to any memory location right
01:35 - we don't know the address of that memory
01:37 - location so that at that memory location
01:41 - maybe this memory location is using by
01:44 - operating system itself for some
01:46 - important task or maybe some other
01:48 - process is using this memory location
01:50 - right or maybe this memory location is
01:52 - not valid at
01:53 - all anything can be possible so this is
01:57 - what uninitialized pointer we are not
01:59 - initializing this pointer it is
02:01 - containing any garbage value we don't
02:02 - know to which memory location is it is
02:04 - pointing that memory location may be
02:06 - valid may not be valid so when you use
02:10 - this pointer when you D reference now
02:12 - this pointer like print F percentage D
02:15 - and I want to De reference it a
02:17 - PTR by mistake I haven't initialized it
02:21 - but by mistake in program I want to find
02:24 - out the value that is pointed by this
02:26 - pointer I want to Der reference means
02:28 - value at this address
02:30 - but address in this pointer is any
02:32 - garbage value because we haven't
02:33 - initialized this yet so what you will
02:36 - get here we we cannot say it will show
02:38 - some undefined
02:40 - Behavior maybe program will crash or
02:43 - maybe it will give some garbage value we
02:45 - don't know it
02:47 - depends right so it will show some
02:50 - undefined Behavior so to you know remove
02:54 - this thing generally if you you don't
02:56 - initialize the pointer that is known as
02:58 - wild pointer so these are risky to use
03:02 - right so better to initialize it with
03:08 - null this null all caps letters n u l
03:13 - this is itself a pointer in C and the
03:16 - value is zero the corresponding value of
03:18 - this null is zero this zero is so in C
03:22 - you can write down null or
03:25 - zero but this zero we are using in
03:29 - context of pointers because this is
03:31 - pointer it is different from that
03:33 - integer zero right so better to use here
03:37 - null rather than zero n u l ultimately
03:42 - it would be zero so if you print here
03:45 - now if you print here like PTR in PTR
03:49 - now we have what null that is zero right
03:53 - it is already defined right in those
03:57 - Hile stdi in STD f.h in STD li. multiple
04:02 - header files it it has been defined
04:05 - right and its value is corresponding
04:07 - value of N is a zero so in pointer now
04:08 - we have
04:09 - zero right so it is pointing
04:14 - to to what because memory location is
04:19 - zero so you can say it is a special
04:23 - value that is pointing to that does not
04:26 - point to any valid object or you can say
04:29 - it is pointing to zeroth memory location
04:32 - which is reserved which is reserved you
04:35 - cannot dereference that memory
04:38 - location this thing is very important
04:40 - you cannot dreference
04:43 - it right or you can say it is pointing
04:47 - to it it doesn't point to any valid
04:51 - object any valid
04:53 - address if you write here if you write
04:56 - this s p is equal to none right so if
05:00 - you print here PTR it will give zero and
05:03 - if you try to dreference
05:06 - it your program will
05:08 - crash this thing is very important you
05:11 - cannot dereference a null pointer so see
05:14 - this null n this is itself a pointer in
05:17 - C
05:19 - right the value of this is corresponding
05:21 - value of this this is what zero this is
05:23 - null pointer in see and we can also use
05:27 - this pointer to initialize another
05:28 - pointer variable because PTR is a
05:30 - pointer variable I'm declaring a pointer
05:33 - of type int right and I'm initializing
05:36 - this with this pointer null pointer so
05:38 - now PTR also becomes a null pointer
05:40 - right so in simple terms you can say
05:43 - null pointer null pointer does not refer
05:46 - to any valid address or it does not
05:49 - refer to any valid
05:51 - object so if this is the case then what
05:54 - is the purpose of using null
05:56 - pointer there are some special purpose
05:59 - because that is why we use null pointer
06:02 - in our programming language and what are
06:04 - those purpose
06:06 - see if by
06:08 - chance I'm not initializing the pointer
06:10 - right now right because I want this
06:14 - pointer should point to a memory
06:16 - location which I would allocate
06:17 - dynamically using Malo and Cog function
06:20 - right suppose I'm uh using this pointer
06:23 - is equal
06:24 - to I'm using Malo function and I'm using
06:28 - here five into size of
06:32 - int dynamically at run time I want to
06:35 - allocate memory these Malo and Cog these
06:37 - functions are built-in functions which
06:39 - are used to allocate memory dynamically
06:41 - this thing we have discussed in data
06:42 - structure videos that you can you can
06:44 - watch that video videos or we'll see
06:46 - this thing later right if you you you
06:49 - are not getting this syntax leave it the
06:52 - the the meaning of this is simple
06:53 - meaning of this is what here I'm
06:55 - allocating some memory right and that
06:59 - memory this pointer should
07:02 - contain memory address that memory
07:04 - address right so suppose at run time I'm
07:07 - allocating this memory and address of
07:09 - this is th000 so it means this th000
07:13 - should store here so now this PTR is
07:15 - pointing to this memory address now this
07:17 - is valid memory address right but in
07:21 - starting I'm not initializing this poter
07:24 - at run time I want to initialize but by
07:26 - chance because of some
07:28 - problems because of some problems it is
07:31 - not possible to allocate memory using
07:33 - myow it is not possible to allocate
07:35 - memory during this time so ultimately in
07:39 - pointer in PTR null would be assigned
07:43 - null means zero would be
07:45 - assigned right so now at this point we
07:49 - think that we have written this syntax
07:52 - and memory has been allocated to this
07:53 - PTR and now this pointer is pointing to
07:55 - any valid memory location and further in
07:58 - the program I'm using something like I'm
08:01 - I'm supposed de referencing this pointer
08:03 - estri
08:06 - PTR right whatever here I I want to
08:08 - access this right but because of some
08:11 - problems this Malo has not been executed
08:14 - successfully and the memory has not been
08:17 - allocated to this this PTR the memory
08:20 - has not been allocated so now in PTR by
08:23 - default we have
08:24 - null and if you now dreference this
08:28 - pointer it will show
08:29 - what your program will crash because we
08:32 - cannot dereference a null
08:35 - pointer right so better to before before
08:40 - de referencing this better to check
08:43 - if PTR equal to equal to
08:48 - null if PTR is null you have to be very
08:52 - careful you cannot de reference that
08:54 - pointer or you cannot do anything
08:55 - because pointer is this pointer is
08:57 - pointing to invalid memory object
08:59 - invalid object right so we cannot do
09:02 - anything just you can
09:04 - print what memory has not been allocated
09:08 - else whatever you want to do you can do
09:11 - if memory has been allocated
09:14 - successfully right so now at starting
09:18 - please don't leave the pointer
09:20 - uninitialized better to initialize it
09:22 - with null so ultimately at starting we
09:26 - have null in this pointer and now if
09:28 - memory has been allocated successfully
09:30 - it's okay maybe the memory address is
09:33 - th000 so here in PTR now we have th000
09:36 - and it is pointing to this memory
09:38 - address right so better to check now
09:42 - before doing something with this pointer
09:44 - better to check if pointer is still null
09:47 - memory has not been allocated if not n
09:49 - null then you can do something with this
09:51 - pointer right so it is what you can say
09:54 - it is used in error handling in
09:58 - C because by mistake if pointer is not
10:02 - null like you haven't initialized this
10:04 - pointer and maybe by mistake you want to
10:07 - deference that pointer in the program so
10:10 - your program will
10:12 - crash right so to get rid of the
10:15 - situation to handle this error we use
10:18 - null pointer we initialize it with null
10:21 - this is the main thing this is the main
10:24 - purpose of using null pointer many times
10:26 - in data structure we use null pointers
10:29 - you can watch out my data structure
10:30 - playlist there I have used this null
10:32 - this keyword null this null pointer many
10:34 - times generally we use uh when we use
10:38 - dynamic memory allocation in that case
10:40 - we use null pointers that is the main
10:42 - purpose of using null pointer right and
10:44 - also one more thing like in function if
10:47 - you don't want to pass any valid address
10:49 - suppose I'm using any function and here
10:52 - uh at sometimes we don't I don't want to
10:54 - pass any valid address so you can pass
10:56 - null pointer here right so that we'll
10:59 - discuss when we will discuss the this
11:01 - function concept at that time we'll
11:03 - discuss this thing right so in brief
11:06 - what we can say about null pointer is
11:07 - what null pointer does not refer to any
11:09 - valid object
11:11 - secondly better to initialize a pointer
11:15 - with null rather than leaving it
11:18 - uninitialized right to get rid of the
11:20 - situation of that undefined Behavior
11:23 - right so better to initialize it with
11:25 - null and before doing something with
11:27 - this pointer better to check if pointer
11:29 - is null don't do anything because the
11:32 - third point is very important third
11:33 - point is very important you cannot
11:35 - dreference a null pointer because it is
11:37 - not pointing to any valid object so if
11:40 - you will dreference it program will
11:43 - crash right I'll show you practical also
11:46 - of this null pointer and this is
11:48 - different from void pointer as well as
11:50 - uninitialized pointer this also you need
11:52 - to take care of because null is what a
11:54 - value
11:56 - zero right although in the pointer
11:59 - context and vo is what a type so both
12:01 - pointer are different and one more thing
12:04 - if you declare something like this int
12:06 - pointer this pointer 1 is is equal to
12:09 - null and ptr2 is equal to null
12:15 - definitely these pointers would be same
12:18 - right if you compare these pointer would
12:20 - be same if you compare like if ptr1
12:24 - equal to equal to PTR 2 and here you
12:27 - will print both pointer P1 and uh
12:30 - pointer ptr1 and ptr2 are same this
12:34 - would definitely be executed this
12:36 - because this would always be same
12:37 - because in both we are storing null null
12:39 - means zero so both pointer are pointing
12:42 - to that zero memory location or you can
12:43 - say any that is reserved right we cannot
12:46 - deference it fine so both would be same
12:49 - but if you write something like this in
12:51 - ptr1 and if you don't initialize this
12:54 - and
12:55 - this so maybe you think you are not
12:58 - initializing these pointer so these
12:59 - pointer are also same no ptr1 now will
13:04 - contain any garbage value PTR
13:07 - 2 will also contain some garbage value
13:11 - but it is not guaranteed that this
13:13 - garbage value and this garbage value are
13:16 - same but if you initialize with null
13:19 - that is for sure both will contain zero
13:22 - and zero null and
13:24 - null right so I hope you got this point
13:28 - uh this
13:29 - about the null pointer and uninitialized
13:31 - pointer and if you declare something
13:32 - like this in ptr1 is equal to null so in
13:35 - ptr1 we have null that is zero right so
13:40 - it is guaranteed that this is not this
13:43 - value is not equal to any other pointer
13:46 - which is pointing to any valid object
13:48 - right because this will this is
13:50 - containing zero that is
13:52 - null right if you take any other pointer
13:55 - this ptr2 this is uninitialized maybe
13:58 - this will contain sometimes zero I we
14:00 - cannot say we cannot say it depends or
14:04 - maybe it will contain some other garbage
14:06 - value but this is what obviously this is
14:08 - what invalid
14:10 - pointer uninitialized pointer this is
14:13 - what invalid pointer right and if here
14:16 - I'm storing address of like a I'm taking
14:18 - a variable int a is equal to 5 now this
14:21 - is what obviously a valid pointer
14:24 - because it is it is containing address
14:25 - of a is a variable somewhere in memory
14:28 - right so this null pointer it is
14:31 - guaranteed that it is not equal to any
14:33 - other pointer which is pointing to any
14:34 - valid
14:36 - object right so now let me show you this
14:39 - thing practically let me create a
14:51 - file we use header files then main
14:54 - function and here I'm declaring a
14:57 - pointer uh suppose I'm I'm
14:59 - taking
15:01 - ptr1 right and uh see uh if I take a
15:07 - variable in a is equal to suppose 3 and
15:12 - ptr1 is equal to address of
15:17 - a simply what you can
15:20 - do percentage D and you can print you
15:25 - can do what EST
15:27 - ptr1 so it should print value of a that
15:31 - is
15:32 - three see it is printing
15:35 - three right now if I write
15:39 - here only a strict PTR I'm not going to
15:42 - initialize
15:43 - it and now D reference it or suppose I'm
15:49 - I'm initializing this with
15:51 - null and
15:56 - L and one more poter I'm taking
16:00 - ptr2 and that is uninitialized pointer
16:03 - so whatever in ptr1 I'm going to print
16:05 - that thing and one
16:14 - more whatever value in ptr2 that also we
16:18 - are going to print so in PTR 1 obviously
16:20 - we will have see we are not using D
16:22 - referencing operator we are printing the
16:24 - value so in ptr1 we have zero and ptr2
16:27 - we have any garbage Valu because it is
16:29 - wild pointer uninitialized
16:31 - pointer maybe now I have told you see in
16:33 - first obviously we will have zero in
16:35 - ptr2 also it is printing zero it may be
16:39 - a case that it will have zero or it will
16:43 - have any garbage value we cannot say but
16:46 - null pointer will always have
16:49 - zero right so ptr1 will always have zero
16:53 - right now suppose uh here I'm uh storing
16:58 - what
17:03 - suppose I want to deference this null
17:06 - pointer
17:08 - see this is null pointer it is not
17:10 - pointing to any valid object and still I
17:12 - want to dereference it so obviously it
17:16 - program is going to crash so
17:20 - see okay so now
17:24 - see see n pointer exe has stopped
17:27 - working right because we cannot
17:30 - dreference a null pointer this you need
17:32 - to take care so you have to check before
17:35 - D referencing something like this
17:38 - if PTR equal to equal to what
17:43 - null then what you will print here you
17:46 - can simply
17:47 - [Music]
17:48 - write this
17:51 - is null pointer right means you cannot D
17:55 - reference it in lse part would you can
18:00 - say now you can D reference it right so
18:05 - now if you will run this what output you
18:07 - will
18:09 - get okay it's PTR it's not PTR it's PTR
18:13 - 1
18:16 - ptr1 right so now let me run this and
18:19 - see this is null pointer because
18:22 - obviously this is null
18:23 - pointer right so better to use this one
18:26 - this we use uh for error handling in C
18:30 - right and if you take another pointer
18:33 - ptr2 is equal
18:35 - to
18:38 - null say here I'm taking two pointer
18:40 - pointer two is also null and here I'm
18:42 - checking if prtr 1 equal to equal to
18:43 - ptr2
18:45 - so this you have to print
18:49 - like both are null
18:54 - pointer otherwise you can do anything
18:57 - what you want right so obviously both
18:59 - are null so I have told you it is
19:01 - guaranteed that both would always be
19:03 - null so both are null pointer but if you
19:06 - leave it uninitialized like PTR 1 also
19:10 - and this is ptr2 I'm not going to
19:12 - initialize it and now I'm going to check
19:16 - right both are
19:23 - uninitialized otherwise we can do
19:25 - something in else part we can do
19:26 - something right so now let me run this I
19:29 - don't know what output we will
19:32 - get see it has stopped
19:35 - working why so because ptr1 is having
19:38 - any garbage value ptr2 is also having
19:40 - any garbage value we are not
19:42 - initializing these point so it is it is
19:44 - not a guarantee that that garbage value
19:47 - would be same as the garbage value in
19:50 - ptr2 right so if both are same then only
19:54 - it will print both are uninitialized if
19:56 - both are not same just in this case
19:59 - means in lse part I'm going to print I'm
20:03 - going to deference ptr1 and ptr1 is what
20:07 - we haven't initialized it and I want to
20:10 - print the value whatever the value
20:12 - whatever the address in ptr1 at that
20:14 - address what is the value but the
20:16 - address is any garbage value so maybe it
20:19 - will print anything or see it will show
20:21 - some un undefined Behavior so here in
20:24 - this case it has stopped working program
20:26 - has been crashed
20:28 - right so this can also be a
20:32 - case so uninitialized pointer is
20:34 - different from null pointer I hope now
20:37 - you got the
20:41 - difference and here also you can write
20:43 - zero that is also fine ptr1 is equal to
20:47 - zero and ptr2 also if I'm saying zero
20:50 - and if both are same then it should
20:53 - print both are null or zero so 0 0 is
20:58 - also what is considered as null in U
21:05 - C so here what it will
21:14 - print see both are
21:17 - zero right you can also write zero but
21:21 - better to write down null not zero right
21:25 - so I hope you got what is null pointer
21:27 - if you have any doubt you can ask me in
21:29 - comment box so in the next video we'll
21:30 - see dangling pointer so now I'll see you
21:32 - in the next video till then bye-bye take
21:33 - care

Cleaned transcript:

so in the series of learning programming in see we are discussing pointers in say in the previous video I have discussed void pointer in say in this video I'll talk about null pointer in because there are some special pointer in see also like void null wild pointer and dangling pointer these these concepts are also really very helpful and generally in interview also they ask these type of questions right so we'll see everything about null pointer in this video like what is null pointer why we use it that is very important the application of null pointer all the important points about null pointer we will see with the help of a proper program we'll discuss here first of all then I'll show you practically on my laptop and we'll also see how this pointer is different from void pointer as well as if you don't initialize any pointer right how this pointer is different from that pointer that that an uninitialized pointer right everything about null pointer we will discuss in this video so now let's see what is null pointer see I hope you know uh how to initialize how to declare a pointer suppose I'm wenting int star PTR this is this is what a pointer to integer you can say an integer pointer right here we are not initializing this pointer means here is some PTR in memory right it's a special variable it will contain address of any other variable but we are not assigning any address till now right so maybe it is pointing to some some address in memory which is which is garbage because here we are having some garbage value we are not initializing it so it is pointing to any memory location right we don't know the address of that memory location so that at that memory location maybe this memory location is using by operating system itself for some important task or maybe some other process is using this memory location right or maybe this memory location is not valid at all anything can be possible so this is what uninitialized pointer we are not initializing this pointer it is containing any garbage value we don't know to which memory location is it is pointing that memory location may be valid may not be valid so when you use this pointer when you D reference now this pointer like print F percentage D and I want to De reference it a PTR by mistake I haven't initialized it but by mistake in program I want to find out the value that is pointed by this pointer I want to Der reference means value at this address but address in this pointer is any garbage value because we haven't initialized this yet so what you will get here we we cannot say it will show some undefined Behavior maybe program will crash or maybe it will give some garbage value we don't know it depends right so it will show some undefined Behavior so to you know remove this thing generally if you you don't initialize the pointer that is known as wild pointer so these are risky to use right so better to initialize it with null this null all caps letters n u l this is itself a pointer in C and the value is zero the corresponding value of this null is zero this zero is so in C you can write down null or zero but this zero we are using in context of pointers because this is pointer it is different from that integer zero right so better to use here null rather than zero n u l ultimately it would be zero so if you print here now if you print here like PTR in PTR now we have what null that is zero right it is already defined right in those Hile stdi in STD f.h in STD li. multiple header files it it has been defined right and its value is corresponding value of N is a zero so in pointer now we have zero right so it is pointing to to what because memory location is zero so you can say it is a special value that is pointing to that does not point to any valid object or you can say it is pointing to zeroth memory location which is reserved which is reserved you cannot dereference that memory location this thing is very important you cannot dreference it right or you can say it is pointing to it it doesn't point to any valid object any valid address if you write here if you write this s p is equal to none right so if you print here PTR it will give zero and if you try to dreference it your program will crash this thing is very important you cannot dereference a null pointer so see this null n this is itself a pointer in C right the value of this is corresponding value of this this is what zero this is null pointer in see and we can also use this pointer to initialize another pointer variable because PTR is a pointer variable I'm declaring a pointer of type int right and I'm initializing this with this pointer null pointer so now PTR also becomes a null pointer right so in simple terms you can say null pointer null pointer does not refer to any valid address or it does not refer to any valid object so if this is the case then what is the purpose of using null pointer there are some special purpose because that is why we use null pointer in our programming language and what are those purpose see if by chance I'm not initializing the pointer right now right because I want this pointer should point to a memory location which I would allocate dynamically using Malo and Cog function right suppose I'm uh using this pointer is equal to I'm using Malo function and I'm using here five into size of int dynamically at run time I want to allocate memory these Malo and Cog these functions are builtin functions which are used to allocate memory dynamically this thing we have discussed in data structure videos that you can you can watch that video videos or we'll see this thing later right if you you you are not getting this syntax leave it the the the meaning of this is simple meaning of this is what here I'm allocating some memory right and that memory this pointer should contain memory address that memory address right so suppose at run time I'm allocating this memory and address of this is th000 so it means this th000 should store here so now this PTR is pointing to this memory address now this is valid memory address right but in starting I'm not initializing this poter at run time I want to initialize but by chance because of some problems because of some problems it is not possible to allocate memory using myow it is not possible to allocate memory during this time so ultimately in pointer in PTR null would be assigned null means zero would be assigned right so now at this point we think that we have written this syntax and memory has been allocated to this PTR and now this pointer is pointing to any valid memory location and further in the program I'm using something like I'm I'm supposed de referencing this pointer estri PTR right whatever here I I want to access this right but because of some problems this Malo has not been executed successfully and the memory has not been allocated to this this PTR the memory has not been allocated so now in PTR by default we have null and if you now dreference this pointer it will show what your program will crash because we cannot dereference a null pointer right so better to before before de referencing this better to check if PTR equal to equal to null if PTR is null you have to be very careful you cannot de reference that pointer or you cannot do anything because pointer is this pointer is pointing to invalid memory object invalid object right so we cannot do anything just you can print what memory has not been allocated else whatever you want to do you can do if memory has been allocated successfully right so now at starting please don't leave the pointer uninitialized better to initialize it with null so ultimately at starting we have null in this pointer and now if memory has been allocated successfully it's okay maybe the memory address is th000 so here in PTR now we have th000 and it is pointing to this memory address right so better to check now before doing something with this pointer better to check if pointer is still null memory has not been allocated if not n null then you can do something with this pointer right so it is what you can say it is used in error handling in C because by mistake if pointer is not null like you haven't initialized this pointer and maybe by mistake you want to deference that pointer in the program so your program will crash right so to get rid of the situation to handle this error we use null pointer we initialize it with null this is the main thing this is the main purpose of using null pointer many times in data structure we use null pointers you can watch out my data structure playlist there I have used this null this keyword null this null pointer many times generally we use uh when we use dynamic memory allocation in that case we use null pointers that is the main purpose of using null pointer right and also one more thing like in function if you don't want to pass any valid address suppose I'm using any function and here uh at sometimes we don't I don't want to pass any valid address so you can pass null pointer here right so that we'll discuss when we will discuss the this function concept at that time we'll discuss this thing right so in brief what we can say about null pointer is what null pointer does not refer to any valid object secondly better to initialize a pointer with null rather than leaving it uninitialized right to get rid of the situation of that undefined Behavior right so better to initialize it with null and before doing something with this pointer better to check if pointer is null don't do anything because the third point is very important third point is very important you cannot dreference a null pointer because it is not pointing to any valid object so if you will dreference it program will crash right I'll show you practical also of this null pointer and this is different from void pointer as well as uninitialized pointer this also you need to take care of because null is what a value zero right although in the pointer context and vo is what a type so both pointer are different and one more thing if you declare something like this int pointer this pointer 1 is is equal to null and ptr2 is equal to null definitely these pointers would be same right if you compare these pointer would be same if you compare like if ptr1 equal to equal to PTR 2 and here you will print both pointer P1 and uh pointer ptr1 and ptr2 are same this would definitely be executed this because this would always be same because in both we are storing null null means zero so both pointer are pointing to that zero memory location or you can say any that is reserved right we cannot deference it fine so both would be same but if you write something like this in ptr1 and if you don't initialize this and this so maybe you think you are not initializing these pointer so these pointer are also same no ptr1 now will contain any garbage value PTR 2 will also contain some garbage value but it is not guaranteed that this garbage value and this garbage value are same but if you initialize with null that is for sure both will contain zero and zero null and null right so I hope you got this point uh this about the null pointer and uninitialized pointer and if you declare something like this in ptr1 is equal to null so in ptr1 we have null that is zero right so it is guaranteed that this is not this value is not equal to any other pointer which is pointing to any valid object right because this will this is containing zero that is null right if you take any other pointer this ptr2 this is uninitialized maybe this will contain sometimes zero I we cannot say we cannot say it depends or maybe it will contain some other garbage value but this is what obviously this is what invalid pointer uninitialized pointer this is what invalid pointer right and if here I'm storing address of like a I'm taking a variable int a is equal to 5 now this is what obviously a valid pointer because it is it is containing address of a is a variable somewhere in memory right so this null pointer it is guaranteed that it is not equal to any other pointer which is pointing to any valid object right so now let me show you this thing practically let me create a file we use header files then main function and here I'm declaring a pointer uh suppose I'm I'm taking ptr1 right and uh see uh if I take a variable in a is equal to suppose 3 and ptr1 is equal to address of a simply what you can do percentage D and you can print you can do what EST ptr1 so it should print value of a that is three see it is printing three right now if I write here only a strict PTR I'm not going to initialize it and now D reference it or suppose I'm I'm initializing this with null and L and one more poter I'm taking ptr2 and that is uninitialized pointer so whatever in ptr1 I'm going to print that thing and one more whatever value in ptr2 that also we are going to print so in PTR 1 obviously we will have see we are not using D referencing operator we are printing the value so in ptr1 we have zero and ptr2 we have any garbage Valu because it is wild pointer uninitialized pointer maybe now I have told you see in first obviously we will have zero in ptr2 also it is printing zero it may be a case that it will have zero or it will have any garbage value we cannot say but null pointer will always have zero right so ptr1 will always have zero right now suppose uh here I'm uh storing what suppose I want to deference this null pointer see this is null pointer it is not pointing to any valid object and still I want to dereference it so obviously it program is going to crash so see okay so now see see n pointer exe has stopped working right because we cannot dreference a null pointer this you need to take care so you have to check before D referencing something like this if PTR equal to equal to what null then what you will print here you can simply write this is null pointer right means you cannot D reference it in lse part would you can say now you can D reference it right so now if you will run this what output you will get okay it's PTR it's not PTR it's PTR 1 ptr1 right so now let me run this and see this is null pointer because obviously this is null pointer right so better to use this one this we use uh for error handling in C right and if you take another pointer ptr2 is equal to null say here I'm taking two pointer pointer two is also null and here I'm checking if prtr 1 equal to equal to ptr2 so this you have to print like both are null pointer otherwise you can do anything what you want right so obviously both are null so I have told you it is guaranteed that both would always be null so both are null pointer but if you leave it uninitialized like PTR 1 also and this is ptr2 I'm not going to initialize it and now I'm going to check right both are uninitialized otherwise we can do something in else part we can do something right so now let me run this I don't know what output we will get see it has stopped working why so because ptr1 is having any garbage value ptr2 is also having any garbage value we are not initializing these point so it is it is not a guarantee that that garbage value would be same as the garbage value in ptr2 right so if both are same then only it will print both are uninitialized if both are not same just in this case means in lse part I'm going to print I'm going to deference ptr1 and ptr1 is what we haven't initialized it and I want to print the value whatever the value whatever the address in ptr1 at that address what is the value but the address is any garbage value so maybe it will print anything or see it will show some un undefined Behavior so here in this case it has stopped working program has been crashed right so this can also be a case so uninitialized pointer is different from null pointer I hope now you got the difference and here also you can write zero that is also fine ptr1 is equal to zero and ptr2 also if I'm saying zero and if both are same then it should print both are null or zero so 0 0 is also what is considered as null in U C so here what it will print see both are zero right you can also write zero but better to write down null not zero right so I hope you got what is null pointer if you have any doubt you can ask me in comment box so in the next video we'll see dangling pointer so now I'll see you in the next video till then byebye take care
