With timestamps:

00:00 - so in the series of learning c
00:01 - programming from this video i'm going to
00:02 - start recursion in c this is very
00:05 - important topic in c
00:06 - and generally in gate exam you know you
00:09 - find questions on recursion
00:11 - right and during interview also they
00:13 - used to ask question from this topic and
00:15 - you can say it's a little bit tricky or
00:17 - you can say tough for the beginners for
00:19 - the students who are you know beginners
00:21 - in a programming language who are
00:22 - beginners in c language
00:24 - they'll find this topic very tough but
00:26 - it's not like that
00:28 - if you got what is recursion the basics
00:30 - and how we are going to solve the
00:33 - programs which are using recovers in the
00:35 - process
00:36 - you will definitely say that it's not
00:38 - that tough
00:40 - right so we'll discuss everything about
00:42 - recursion in this video we'll see what
00:44 - is recursion and we will see a simple
00:45 - program using recursion right but there
00:48 - are
00:49 - many things about recursion like types
00:51 - of recursion direct and indirect tailed
00:53 - and you know known tailed advantages of
00:56 - records and drawbacks of recursion why
00:57 - we use recursion and some problems also
00:59 - everything we will discuss recursion
01:01 - from the basics right one by one in
01:03 - later videos so this video is like
01:05 - introduction to recursion right but
01:08 - before that just want to tell you one
01:09 - thing if you are preparing for gate 2023
01:11 - exam or will be preparing for gate exam
01:14 - then an academy is going to start a
01:16 - batch rohan for gate and esc from 13th
01:19 - of october in this course the top
01:21 - educators will be covering all the
01:23 - subjects of c s and i t which will help
01:25 - you to prepare for your gate exam the
01:27 - scores include preparation strategies
01:29 - some tips and tricks practice questions
01:31 - numericals along with the detailed
01:33 - explanation of the concepts and
01:35 - you know this course will be covered in
01:37 - both hindi and english but notes will be
01:38 - given to you in english only and you can
01:41 - you all your doubts will be clarified in
01:42 - the doubt clearing sessions
01:44 - in the course right but this one is paid
01:47 - but if you will use my code jkl10 you
01:49 - will get extra 10 discount on your paid
01:51 - subscription one more thing they are
01:53 - also going to conduct a combat it's like
01:56 - the ultimate scholarship test for gate
01:58 - and esc aspirants which would be on 17th
02:00 - of october so in this contest you will
02:02 - get the original and challenging gate
02:05 - questions you will get 20 questions and
02:07 - time limit would be 60 minutes you can
02:09 - assess your preparation in just 60
02:11 - minutes and you can also see where you
02:13 - are standing among the others using the
02:15 - live leaderboard that would be updated
02:17 - after every question
02:19 - and if you take it live you'll also get
02:21 - a chance to win some exciting awards the
02:23 - detail you can see on my screen and you
02:25 - can take this test for free you just
02:27 - have to enroll the enrollment link i'll
02:29 - put in the description box of this video
02:30 - just have to go to that link scroll down
02:32 - pick up the right test for you and just
02:34 - click enroll and use my code jkl10 to
02:36 - unlock the test and there is one more
02:38 - great offer for you on an academy if you
02:40 - subscribe to 12 months of an academy
02:42 - gate or esc plan then you will get extra
02:45 - 4 months means you just have to pay for
02:47 - 12 months and you will get 12 plus 4
02:49 - months for your preparation you can see
02:51 - the detail of the price on my screen so
02:54 - all the relevant links and the code i'll
02:56 - put in the description box of this video
02:57 - if you are interested you can go and
02:59 - check out now let's discuss what is
03:00 - recursion in c first of all what is
03:03 - recursion
03:04 - it's simple
03:06 - when a function call itself then it is
03:08 - called recursion see
03:10 - we have discussed like this is main
03:12 - function and here we are calling a
03:14 - function suppose add we have one
03:16 - function add we are calling this
03:17 - function
03:18 - here right and here we have suppose uh
03:20 - you know add and
03:22 - the definition of this function
03:24 - and before we have
03:26 - prototype like void add
03:29 - something this kind of thing so this is
03:31 - what function calling this function we
03:33 - are calling in main function
03:35 - right so this is what calling function
03:37 - this is what cold function but
03:40 - but if i write something like this i am
03:43 - writing
03:44 - void and this is i'm writing suppose
03:46 - definition of the function here i am
03:47 - writing some code and in this function
03:50 - itself
03:52 - here also i am writing some code
03:55 - this is what
03:56 - function calling i hope you know the
03:57 - syntax of you remember the syntax of
04:00 - function calling so this is what
04:01 - function calling and where we are
04:03 - calling this function
04:05 - add the same the same function so the
04:07 - same function is calling
04:10 - itself means this function is calling
04:12 - itself this process is called recursion
04:18 - right and this the function can call
04:20 - itself directly or indirectly
04:23 - that is why types of recursion comes
04:25 - direct recursion indirect recursion tail
04:27 - records and no tail records and that
04:29 - will discuss in next video
04:31 - right this is like simple introduction
04:33 - to recursion so because there is what
04:35 - when a function call itself directly or
04:37 - indirectly that thing is called
04:39 - recursion that process is called a
04:40 - course and that's it and this this
04:42 - function is called recursive function
04:44 - the function which is calling itself
04:46 - this function is called recursive
04:47 - function
04:48 - that's it
04:50 - i hope you got the difference now here
04:51 - we are calling in main
04:54 - this function but here this function is
04:55 - calling itself so this is called
04:57 - recursion this is no recursion this is
04:58 - simple function calling this is
05:00 - recursion
05:01 - right like suppose uh let's take a
05:03 - simple example
05:04 - suppose
05:05 - in my class i have a student
05:07 - uh having named rahul
05:09 - so i'm calling rahul like rahul but
05:12 - rahul is not responding again i'll call
05:14 - rahul this time also rahul didn't listen
05:16 - and he's not responding again i call
05:19 - rahul and this time
05:21 - rahul responded yes ma'am so now
05:24 - like suppose i that i'm one function
05:26 - rahul is another function so i'm calling
05:28 - rahul and when rahul will
05:30 - respond just stop
05:32 - that's it right but
05:35 - suppose
05:36 - i am calling myself
05:37 - so
05:38 - in the previous case the termination
05:40 - condition was when rahul will come to me
05:43 - i'll stop calling rahul
05:45 - right and suppose i have cold travel
05:47 - three times and after that rahul came to
05:48 - me and i have stopped calling rahul but
05:51 - i myself calling like jenny
05:54 - i'm also jenny i'm jenny and i'm calling
05:56 - jenny itself
05:58 - so i am jenny only so how jenny will
06:00 - come like i am calling jenny
06:03 - but i am jenny only so no how jenny will
06:06 - come to me
06:07 - so when i'm going to stop calling jenny
06:09 - i'm calling jenny jenny jenny but jenny
06:11 - is not coming because i myself is you
06:13 - know jaime
06:15 - so i myself calling no i'm calling
06:18 - myself so this is what recursion but now
06:21 - jenny is not coming so i'm calling jenny
06:23 - jenny jenny so this would be an infinite
06:25 - loop
06:27 - when i have to stop so this thing is
06:29 - very important when the recursion have
06:31 - to stop
06:33 - the termination condition or the base
06:35 - condition in the recursion this thing is
06:37 - very very very important the base
06:39 - condition or the termination condition
06:41 - so here i can you know put a condition
06:43 - like after calling jenny five times i
06:46 - i'll stop so i'll call jenny five times
06:48 - jenny journey journey
06:50 - and now i'll stop
06:52 - so that is what the base condition when
06:55 - you have to stop the recursion that is
06:57 - the base condition that is the
06:58 - termination condition of recursion and
07:00 - if you will not put that base condition
07:03 - properly
07:04 - then your program would be an in fine in
07:06 - in finite loop
07:09 - maybe it will show some runtime you know
07:11 - exception or infinite loop or undefined
07:13 - behavior it will show
07:15 - so you have to put the base condition
07:17 - very very very carefully
07:20 - this thing is very important when you
07:21 - are writing a program
07:23 - using recursion the base condition see
07:25 - let us take this example if i am writing
07:28 - a program of you know finding factorial
07:30 - of a number
07:32 - so i hope you know
07:34 - if i write 5 factorial 5 factorial means
07:36 - how to find 5 into 4 into 3 into 2 into
07:39 - 1
07:40 - is equal to 120 right
07:42 - so 5 factorial what i can write
07:46 - 5 into 4 factorial
07:48 - that is also fine
07:50 - right
07:52 - 4 factorial what you can write 4 into
07:55 - 3 factorial that is also right again i
07:58 - can write 3 factorial i can write 3 into
08:00 - 2 factorial that is also right
08:03 - 2 factorial i can write 2 into 1
08:05 - factorial that is also right
08:07 - right now 1 factorial is 1
08:09 - or again i can write 1 1 equal to
08:13 - sorry 1 into 0 factorial 1 factorial you
08:15 - can write 1 into 0 factorial right so
08:18 - ultimately it means n into n minus 1
08:21 - factorial right
08:23 - n is 5
08:25 - so n into n minus 1 factorial
08:28 - this is what i am doing
08:29 - and again suppose
08:32 - here i am again 0 factorial means 0 into
08:34 - minus 1 factorial
08:37 - then
08:38 - minus 1 into minus 2 factorial and
08:41 - again it's going on
08:43 - if you will not put the termination
08:45 - condition you have to identify where you
08:47 - have to stop
08:49 - where you you are going to stop
08:51 - when
08:52 - when
08:53 - here or here also you can stop
08:56 - when n becomes
08:58 - 0
09:01 - right
09:02 - because 0 factorial we know it's 1
09:05 - 0 factorial means 1
09:07 - now you have to stop we will not move
09:10 - forward
09:11 - further we are not going to move here we
09:13 - are going to stop
09:16 - right
09:17 - or you can stop here like if and you can
09:19 - also put this condition if n is equal to
09:21 - is equal to 0 means stop
09:24 - now
09:25 - 0 factorial means 1
09:27 - so from here obviously what we will do
09:29 - we are going to return back
09:31 - so we are we are going to multiply this
09:32 - 1 then this 2 then this 3 then this 4
09:35 - then this 5
09:37 - and ultimately we will get answer 120
09:41 - so we are moving forward
09:43 - as well as after finding the base
09:45 - condition termination condition in the
09:47 - same process
09:49 - we have to move backward like this like
09:51 - this
09:53 - and from where you have started there
09:55 - you will have to stop now and after that
09:57 - you will get the result
09:59 - so what is the process behind recursion
10:02 - means we are finally you know you can
10:04 - say dividing a problem into smaller one
10:07 - we have divided this for 5 factorial
10:09 - into 5 into 4 factorial the smaller
10:10 - problem the 4 factorial is 3 into 4 into
10:14 - 3 factorial another smaller one because
10:16 - 4 factorial then three factorial this is
10:18 - smaller one then again we have divided
10:20 - this problem
10:21 - right and add some we have added some
10:24 - base condition
10:25 - right
10:27 - and that's it that is what recursion
10:30 - right so here this thing is very
10:33 - important where you have to stop
10:34 - otherwise you will go forward and that
10:37 - would be an infinite loop
10:39 - maybe the stack overflow overflow
10:41 - problem you will get generally you will
10:43 - get stack overflow problem when you are
10:45 - writing from you know programs using
10:47 - recursion because you do not put the
10:50 - right condition the base condition the
10:51 - termination condition here the
10:53 - termination condition is n is equal to
10:55 - is equal to 0 you have to stop or
10:58 - more precisely i can say if n become
11:00 - less than equal to 1
11:02 - then stop
11:05 - if n is 1 here also you can stop because
11:07 - 1 factorial is also 1 so no need to move
11:10 - further
11:11 - right here also you can stop and
11:14 - you can move backward like you can
11:16 - multiply 2 into 3 into 4 into 5 that's
11:19 - it
11:20 - right
11:21 - so that is you can say this is the base
11:23 - condition so here if if i put a
11:26 - condition
11:28 - n
11:29 - is equal to is equal to 10
11:31 - the termination condition by default i
11:33 - have put n is equal to is equal to 10
11:35 - then you have to stop and i am finding
11:37 - factorial of 5 so
11:40 - is there any chance of
11:42 - getting n is equal to 10 in this process
11:45 - no
11:46 - so ultimately you will move forward
11:48 - forward forward and this would be an
11:50 - infinite loop
11:52 - this condition you will never reach to
11:54 - this termination condition right and in
11:56 - this case you will find you you can find
11:58 - out the error like stack overflow
12:00 - problem
12:02 - because every time you are going to call
12:03 - this function
12:05 - the memory would be located right and
12:07 - sometimes the memory would be exhausted
12:09 - the stack memory would be exhausted
12:10 - obviously out of you you know run out of
12:13 - memory so at that time you will find
12:15 - that stack overflow problem
12:17 - right so you have to put this
12:19 - termination condition very carefully in
12:20 - because in your recursive programs
12:23 - so i hope i guess you got the idea about
12:26 - recursion right basic idea
12:28 - a function calling itself directly or
12:30 - indirectly that thing is known as
12:32 - recursive in c
12:34 - right so let us take a simple example
12:36 - and we will see what kind of output you
12:39 - will get when you will run that program
12:50 - so now this is the you know simple
12:52 - program of precursor
12:54 - why recursion see we are having a
12:56 - function display and in this function
12:58 - only i am calling display again so this
13:00 - is what function calling itself directly
13:03 - right so now how
13:05 - it will execute it will be executed and
13:07 - what it will print the process behind
13:09 - recursion see you have to follow the
13:11 - steps only you have to understand this
13:12 - process very carefully if you got the
13:15 - process
13:16 - of executing the program having
13:17 - recursion recursion would be like it's
13:20 - very simple for you
13:22 - so now first of all the control will go
13:23 - to the main function so now from the
13:25 - stack memory one stack frame or
13:27 - activation record of that function would
13:29 - be
13:30 - you know uh hold in that memory so one
13:32 - stack frame would be allocated to this
13:34 - main
13:35 - ah let's say here
13:36 - this is
13:37 - from the stack memory here we have main
13:42 - one frame for main
13:43 - so here what would be stored whatever
13:46 - the local variables here that would be
13:48 - allocated here
13:49 - right
13:50 - now
13:52 - here we have n is equal to 3 and many
13:54 - more things also
13:55 - right like
13:56 - you know
13:57 - from where this function has been called
13:59 - and what function it is calling many
14:01 - things it is going to store but here for
14:02 - the simplicity purpose i am just going
14:04 - to record here the local variable so
14:06 - here we have n so we have n and n is
14:08 - equal to
14:10 - 3 so now next statement is display we
14:13 - are calling sorry display n
14:15 - obviously we are passing n you can pass
14:17 - three also but here are passing
14:18 - variables so what value would be past
14:21 - three right so now here from here it is
14:24 - calling display so means
14:27 - for display also
14:30 - one frame would be a located the
14:31 - activation record for this display also
14:33 - would be stored here in the stack so
14:35 - memory would be located obviously when
14:36 - you are going to call this function so
14:39 - this is what
14:41 - for display but here for display n3 for
14:45 - display 3 because anyway here we have n3
14:49 - so in this display function we have a
14:51 - local variable the copy of these
14:52 - variables
14:54 - no these variables would also be
14:57 - allocate some memory n is equal to here
14:59 - we have 3
15:00 - because 3 would be passed check the
15:02 - condition and less than 1 no this
15:05 - condition is not true so
15:07 - else part in s part we have three
15:09 - statements so this thing you have to you
15:12 - know
15:13 - check very carefully here we have three
15:14 - statements so first is printf
15:17 - so first we have printf
15:19 - so this printf will print what n so n
15:23 - value here is three so it will print 3
15:26 - on the screen it will print 3
15:28 - now next statement is display here we
15:30 - have display
15:33 - n minus 1
15:35 - n minus 1 means 3 minus 1 that is 2 so
15:38 - here we are going to pass to and again
15:41 - it is going to call
15:42 - display itself
15:44 - so when it is going to call itself
15:46 - obviously
15:47 - above this one one more frame would be
15:49 - allocated to this function every time
15:52 - the function would call itself one frame
15:54 - would be allocated to that
15:55 - and these variables the local variables
15:58 - the the copy of the local variables
16:00 - would be here
16:02 - so here this display we are calling
16:06 - but here we have n 2 this is for display
16:09 - 2
16:09 - right because from here we are passing 2
16:11 - n minus 1 2. so here we have n but in
16:14 - this n we have 2
16:16 - right check the condition
16:18 - if and less than 1 not true we are going
16:21 - to into we are going to enter into else
16:22 - part in else part again we have three
16:24 - statements see
16:25 - here here also we have one more
16:27 - statement printf n but this statement is
16:30 - still pending we haven't executed this
16:33 - print
16:34 - we have executed this printf only
16:36 - because before this we are calling this
16:38 - function so still this is
16:40 - going to be executed when i'll tell you
16:43 - so now here we are calling display one
16:45 - printf is there which is printing n so
16:47 - it will print two so in the on the
16:49 - screen it will print two
16:51 - now again next statement is display
16:55 - what we are
16:56 - passing n minus one n is two so we are
16:58 - passing one
17:00 - so and this printf is still still
17:03 - pending
17:05 - whatever is pending i am putting that
17:07 - into rectangle so display one so we are
17:09 - going to call the display one so again
17:11 - one frame would be allocated to display
17:14 - one this is for display one here we have
17:16 - n n is one
17:18 - so less than one no in else part we have
17:21 - three statement one is printf it will
17:23 - print n that is one so it will print one
17:25 - on the screen again we will call display
17:29 - display one minus 1 that is 0
17:33 - and here also we have one more printf
17:34 - which is pending this printer
17:37 - so display 0
17:38 - means again
17:40 - for display
17:42 - 0
17:43 - we have this frame display 0 will be
17:46 - passed but this time check the condition
17:47 - n less than 1 yes condition true
17:50 - so
17:52 - here we have n 0 this condition true now
17:54 - return
17:56 - we are not going to enter 12 part return
17:58 - return is where simply this is return
18:00 - return means where the control will go
18:03 - the function which are calling this and
18:06 - from where we are calling this function
18:08 - display 0
18:09 - from display 1
18:11 - from here we are calling
18:13 - right this process you need to take care
18:16 - when you are moving backward so this is
18:18 - the base condition now you have to move
18:20 - backward in the same direction so now
18:22 - return back
18:24 - so from here we are going to return back
18:26 - to
18:27 - here
18:28 - i hope you can see this
18:31 - yeah
18:33 - from here we are going to return back to
18:34 - here display 0
18:37 - is there any statement after display 0
18:40 - yes we have the statement printf n so
18:43 - what it will print in this in this stack
18:46 - frame what is the value of n
18:48 - one n one so again it will print one
18:52 - right and after printing just closing of
18:56 - else and after this closing of this
18:58 - function
18:59 - right after closing of this function
19:02 - obviously the control will return but
19:04 - where it will return
19:05 - from where you are calling this function
19:07 - from where you are calling this display
19:09 - one this is display one so from where
19:11 - you are calling this display one from
19:13 - display to here
19:15 - so it will return the control here
19:19 - right now in display one also still we
19:22 - have one statement which is still
19:24 - no going to be executed so printf n what
19:28 - is the value of n here 2 in this frame 2
19:31 - so it will print again 2.
19:33 - after that the control will return where
19:36 - from where you are calling this display
19:38 - 2 from display 3 so here we are going to
19:41 - return
19:42 - because here we are calling display 2.
19:45 - again this printf will print n
19:47 - 3
19:48 - right and from where you are calling
19:49 - this display 3 from the main function so
19:52 - now after printing this we have returned
19:54 - to main
19:55 - and just exit from the main and that's
19:57 - it so this would be printed so this is
19:59 - the process of recording i hope you go
20:00 - to this is very simple you have to just
20:02 - maintain the stack frame that's it in
20:06 - the moving direction in the backward
20:07 - direction the same direction you will
20:09 - move if you are not going to maintain
20:11 - this one this is you know time you know
20:13 - lengthy process
20:14 - so while writing gate exam or any
20:16 - competitive exam in that case obviously
20:18 - we cannot
20:19 - maintain this kind of thing so simple
20:21 - method is also there that we will
20:22 - discuss in a next video with one more
20:25 - example properly right so whatever the
20:28 - you know extra things like the types of
20:30 - recursion and advanced advantages and
20:31 - dropouts of records and that we will see
20:33 - in the next video so i hope you got the
20:35 - basics about recursion so nice in the
20:37 - next video till then bye take care

Cleaned transcript:

so in the series of learning c programming from this video i'm going to start recursion in c this is very important topic in c and generally in gate exam you know you find questions on recursion right and during interview also they used to ask question from this topic and you can say it's a little bit tricky or you can say tough for the beginners for the students who are you know beginners in a programming language who are beginners in c language they'll find this topic very tough but it's not like that if you got what is recursion the basics and how we are going to solve the programs which are using recovers in the process you will definitely say that it's not that tough right so we'll discuss everything about recursion in this video we'll see what is recursion and we will see a simple program using recursion right but there are many things about recursion like types of recursion direct and indirect tailed and you know known tailed advantages of records and drawbacks of recursion why we use recursion and some problems also everything we will discuss recursion from the basics right one by one in later videos so this video is like introduction to recursion right but before that just want to tell you one thing if you are preparing for gate 2023 exam or will be preparing for gate exam then an academy is going to start a batch rohan for gate and esc from 13th of october in this course the top educators will be covering all the subjects of c s and i t which will help you to prepare for your gate exam the scores include preparation strategies some tips and tricks practice questions numericals along with the detailed explanation of the concepts and you know this course will be covered in both hindi and english but notes will be given to you in english only and you can you all your doubts will be clarified in the doubt clearing sessions in the course right but this one is paid but if you will use my code jkl10 you will get extra 10 discount on your paid subscription one more thing they are also going to conduct a combat it's like the ultimate scholarship test for gate and esc aspirants which would be on 17th of october so in this contest you will get the original and challenging gate questions you will get 20 questions and time limit would be 60 minutes you can assess your preparation in just 60 minutes and you can also see where you are standing among the others using the live leaderboard that would be updated after every question and if you take it live you'll also get a chance to win some exciting awards the detail you can see on my screen and you can take this test for free you just have to enroll the enrollment link i'll put in the description box of this video just have to go to that link scroll down pick up the right test for you and just click enroll and use my code jkl10 to unlock the test and there is one more great offer for you on an academy if you subscribe to 12 months of an academy gate or esc plan then you will get extra 4 months means you just have to pay for 12 months and you will get 12 plus 4 months for your preparation you can see the detail of the price on my screen so all the relevant links and the code i'll put in the description box of this video if you are interested you can go and check out now let's discuss what is recursion in c first of all what is recursion it's simple when a function call itself then it is called recursion see we have discussed like this is main function and here we are calling a function suppose add we have one function add we are calling this function here right and here we have suppose uh you know add and the definition of this function and before we have prototype like void add something this kind of thing so this is what function calling this function we are calling in main function right so this is what calling function this is what cold function but but if i write something like this i am writing void and this is i'm writing suppose definition of the function here i am writing some code and in this function itself here also i am writing some code this is what function calling i hope you know the syntax of you remember the syntax of function calling so this is what function calling and where we are calling this function add the same the same function so the same function is calling itself means this function is calling itself this process is called recursion right and this the function can call itself directly or indirectly that is why types of recursion comes direct recursion indirect recursion tail records and no tail records and that will discuss in next video right this is like simple introduction to recursion so because there is what when a function call itself directly or indirectly that thing is called recursion that process is called a course and that's it and this this function is called recursive function the function which is calling itself this function is called recursive function that's it i hope you got the difference now here we are calling in main this function but here this function is calling itself so this is called recursion this is no recursion this is simple function calling this is recursion right like suppose uh let's take a simple example suppose in my class i have a student uh having named rahul so i'm calling rahul like rahul but rahul is not responding again i'll call rahul this time also rahul didn't listen and he's not responding again i call rahul and this time rahul responded yes ma'am so now like suppose i that i'm one function rahul is another function so i'm calling rahul and when rahul will respond just stop that's it right but suppose i am calling myself so in the previous case the termination condition was when rahul will come to me i'll stop calling rahul right and suppose i have cold travel three times and after that rahul came to me and i have stopped calling rahul but i myself calling like jenny i'm also jenny i'm jenny and i'm calling jenny itself so i am jenny only so how jenny will come like i am calling jenny but i am jenny only so no how jenny will come to me so when i'm going to stop calling jenny i'm calling jenny jenny jenny but jenny is not coming because i myself is you know jaime so i myself calling no i'm calling myself so this is what recursion but now jenny is not coming so i'm calling jenny jenny jenny so this would be an infinite loop when i have to stop so this thing is very important when the recursion have to stop the termination condition or the base condition in the recursion this thing is very very very important the base condition or the termination condition so here i can you know put a condition like after calling jenny five times i i'll stop so i'll call jenny five times jenny journey journey and now i'll stop so that is what the base condition when you have to stop the recursion that is the base condition that is the termination condition of recursion and if you will not put that base condition properly then your program would be an in fine in in finite loop maybe it will show some runtime you know exception or infinite loop or undefined behavior it will show so you have to put the base condition very very very carefully this thing is very important when you are writing a program using recursion the base condition see let us take this example if i am writing a program of you know finding factorial of a number so i hope you know if i write 5 factorial 5 factorial means how to find 5 into 4 into 3 into 2 into 1 is equal to 120 right so 5 factorial what i can write 5 into 4 factorial that is also fine right 4 factorial what you can write 4 into 3 factorial that is also right again i can write 3 factorial i can write 3 into 2 factorial that is also right 2 factorial i can write 2 into 1 factorial that is also right right now 1 factorial is 1 or again i can write 1 1 equal to sorry 1 into 0 factorial 1 factorial you can write 1 into 0 factorial right so ultimately it means n into n minus 1 factorial right n is 5 so n into n minus 1 factorial this is what i am doing and again suppose here i am again 0 factorial means 0 into minus 1 factorial then minus 1 into minus 2 factorial and again it's going on if you will not put the termination condition you have to identify where you have to stop where you you are going to stop when when here or here also you can stop when n becomes 0 right because 0 factorial we know it's 1 0 factorial means 1 now you have to stop we will not move forward further we are not going to move here we are going to stop right or you can stop here like if and you can also put this condition if n is equal to is equal to 0 means stop now 0 factorial means 1 so from here obviously what we will do we are going to return back so we are we are going to multiply this 1 then this 2 then this 3 then this 4 then this 5 and ultimately we will get answer 120 so we are moving forward as well as after finding the base condition termination condition in the same process we have to move backward like this like this and from where you have started there you will have to stop now and after that you will get the result so what is the process behind recursion means we are finally you know you can say dividing a problem into smaller one we have divided this for 5 factorial into 5 into 4 factorial the smaller problem the 4 factorial is 3 into 4 into 3 factorial another smaller one because 4 factorial then three factorial this is smaller one then again we have divided this problem right and add some we have added some base condition right and that's it that is what recursion right so here this thing is very important where you have to stop otherwise you will go forward and that would be an infinite loop maybe the stack overflow overflow problem you will get generally you will get stack overflow problem when you are writing from you know programs using recursion because you do not put the right condition the base condition the termination condition here the termination condition is n is equal to is equal to 0 you have to stop or more precisely i can say if n become less than equal to 1 then stop if n is 1 here also you can stop because 1 factorial is also 1 so no need to move further right here also you can stop and you can move backward like you can multiply 2 into 3 into 4 into 5 that's it right so that is you can say this is the base condition so here if if i put a condition n is equal to is equal to 10 the termination condition by default i have put n is equal to is equal to 10 then you have to stop and i am finding factorial of 5 so is there any chance of getting n is equal to 10 in this process no so ultimately you will move forward forward forward and this would be an infinite loop this condition you will never reach to this termination condition right and in this case you will find you you can find out the error like stack overflow problem because every time you are going to call this function the memory would be located right and sometimes the memory would be exhausted the stack memory would be exhausted obviously out of you you know run out of memory so at that time you will find that stack overflow problem right so you have to put this termination condition very carefully in because in your recursive programs so i hope i guess you got the idea about recursion right basic idea a function calling itself directly or indirectly that thing is known as recursive in c right so let us take a simple example and we will see what kind of output you will get when you will run that program so now this is the you know simple program of precursor why recursion see we are having a function display and in this function only i am calling display again so this is what function calling itself directly right so now how it will execute it will be executed and what it will print the process behind recursion see you have to follow the steps only you have to understand this process very carefully if you got the process of executing the program having recursion recursion would be like it's very simple for you so now first of all the control will go to the main function so now from the stack memory one stack frame or activation record of that function would be you know uh hold in that memory so one stack frame would be allocated to this main ah let's say here this is from the stack memory here we have main one frame for main so here what would be stored whatever the local variables here that would be allocated here right now here we have n is equal to 3 and many more things also right like you know from where this function has been called and what function it is calling many things it is going to store but here for the simplicity purpose i am just going to record here the local variable so here we have n so we have n and n is equal to 3 so now next statement is display we are calling sorry display n obviously we are passing n you can pass three also but here are passing variables so what value would be past three right so now here from here it is calling display so means for display also one frame would be a located the activation record for this display also would be stored here in the stack so memory would be located obviously when you are going to call this function so this is what for display but here for display n3 for display 3 because anyway here we have n3 so in this display function we have a local variable the copy of these variables no these variables would also be allocate some memory n is equal to here we have 3 because 3 would be passed check the condition and less than 1 no this condition is not true so else part in s part we have three statements so this thing you have to you know check very carefully here we have three statements so first is printf so first we have printf so this printf will print what n so n value here is three so it will print 3 on the screen it will print 3 now next statement is display here we have display n minus 1 n minus 1 means 3 minus 1 that is 2 so here we are going to pass to and again it is going to call display itself so when it is going to call itself obviously above this one one more frame would be allocated to this function every time the function would call itself one frame would be allocated to that and these variables the local variables the the copy of the local variables would be here so here this display we are calling but here we have n 2 this is for display 2 right because from here we are passing 2 n minus 1 2. so here we have n but in this n we have 2 right check the condition if and less than 1 not true we are going to into we are going to enter into else part in else part again we have three statements see here here also we have one more statement printf n but this statement is still pending we haven't executed this print we have executed this printf only because before this we are calling this function so still this is going to be executed when i'll tell you so now here we are calling display one printf is there which is printing n so it will print two so in the on the screen it will print two now again next statement is display what we are passing n minus one n is two so we are passing one so and this printf is still still pending whatever is pending i am putting that into rectangle so display one so we are going to call the display one so again one frame would be allocated to display one this is for display one here we have n n is one so less than one no in else part we have three statement one is printf it will print n that is one so it will print one on the screen again we will call display display one minus 1 that is 0 and here also we have one more printf which is pending this printer so display 0 means again for display 0 we have this frame display 0 will be passed but this time check the condition n less than 1 yes condition true so here we have n 0 this condition true now return we are not going to enter 12 part return return is where simply this is return return means where the control will go the function which are calling this and from where we are calling this function display 0 from display 1 from here we are calling right this process you need to take care when you are moving backward so this is the base condition now you have to move backward in the same direction so now return back so from here we are going to return back to here i hope you can see this yeah from here we are going to return back to here display 0 is there any statement after display 0 yes we have the statement printf n so what it will print in this in this stack frame what is the value of n one n one so again it will print one right and after printing just closing of else and after this closing of this function right after closing of this function obviously the control will return but where it will return from where you are calling this function from where you are calling this display one this is display one so from where you are calling this display one from display to here so it will return the control here right now in display one also still we have one statement which is still no going to be executed so printf n what is the value of n here 2 in this frame 2 so it will print again 2. after that the control will return where from where you are calling this display 2 from display 3 so here we are going to return because here we are calling display 2. again this printf will print n 3 right and from where you are calling this display 3 from the main function so now after printing this we have returned to main and just exit from the main and that's it so this would be printed so this is the process of recording i hope you go to this is very simple you have to just maintain the stack frame that's it in the moving direction in the backward direction the same direction you will move if you are not going to maintain this one this is you know time you know lengthy process so while writing gate exam or any competitive exam in that case obviously we cannot maintain this kind of thing so simple method is also there that we will discuss in a next video with one more example properly right so whatever the you know extra things like the types of recursion and advanced advantages and dropouts of records and that we will see in the next video so i hope you got the basics about recursion so nice in the next video till then bye take care
