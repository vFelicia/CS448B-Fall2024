With timestamps:

00:00 - so in the series of learning c
00:01 - programming we have covered i guess all
00:03 - the concept in c language if you are
00:05 - left with any concept you can write down
00:06 - that thing in comment box i'll make a
00:08 - separate video on that thing but we are
00:09 - left with a small concept that is enum
00:11 - in c
00:12 - enum is a user defined data type so this
00:14 - video will talk about this thing as we
00:16 - have structure and union same way we
00:18 - have enum to define our own data type so
00:20 - how to use enum to define our own data
00:21 - type how to declare a variable of enum
00:23 - type
00:24 - how to use this inner program what are
00:27 - some important points about you know why
00:28 - we use enum what is neerofena right how
00:31 - this is different from you know macros
00:32 - and how this is different from
00:34 - structure and union all the things we
00:36 - will discuss about enum with the help of
00:38 - a program in this video right but before
00:40 - that just want to tell you one thing
00:42 - this summer geeks for geeks is going to
00:45 - bring back fun to your screens
00:48 - with the biggest virtual event in 2022
00:51 - presenting geeks summer carnival so here
00:54 - you will experience fun excitement
00:56 - entertainment and games
00:59 - and it is going to be started from 26th
01:01 - of march to 11th of april
01:04 - so all these days are filled with fun
01:06 - and some of the hottest discount to cool
01:08 - you down this summer flat 15 percent off
01:12 - and much more
01:14 - so what are you waiting for get ready
01:15 - for these days of excitement and mark
01:18 - your calendars
01:19 - the geek summer carnival is all about
01:22 - enhancing your skills and you should
01:24 - never miss out an opportunity like this
01:26 - you want to explore more if if you want
01:29 - more information on this the link i'll
01:31 - put in the description box of this video
01:32 - you can go to that link click that link
01:34 - and you can check out the further detail
01:36 - about this about this event
01:39 - so do check out that link and register
01:41 - now so now what is enum let's discuss so
01:45 - it is a user defined data type
01:50 - basically used for what to assign
01:54 - to assign names to
01:57 - integral constant
01:59 - we basically use this thing this data to
02:02 - assign some names to integral constant
02:03 - like see let's take one example i guess
02:06 - you have
02:07 - most of you have used this thing macros
02:09 - like hash define
02:10 - and
02:11 - max 50
02:13 - this thing
02:14 - like when we use in a program
02:17 - in a program we can use now max
02:20 - right and this mix means 50 this would
02:22 - be replaced with 50 means we are using
02:24 - actually the name rather than this this
02:26 - is integral constant but we are
02:28 - assigning a name to this integral
02:29 - constant and the name is max and this
02:31 - name we can use throughout our program i
02:34 - guess you are aware with this macros so
02:36 - this thing macro can also do this thing
02:39 - same thing enum will do but what is the
02:41 - difference why we use enum over macros
02:44 - sometimes we use macros sometimes it's
02:46 - better to use enum that also will
02:47 - discuss right but the meaning of this
02:50 - line is user def it is basically used to
02:52 - assign names to integral constant this
02:54 - is the thing this is integral constant
02:56 - we are
02:56 - assigning a name to it and we are using
02:58 - this name to a program
03:00 - and see when we use names in a program
03:03 - it is going to increase the readability
03:05 - of the program see
03:07 - let's see in my uh in a class if i say
03:10 - like roll number 45 stand up
03:13 - and roll number 45 name of sorry roll
03:16 - number 45 name is rahul
03:19 - if i say roll number 45 stand up
03:21 - another if i say
03:24 - rahul stand up which one is better rahul
03:27 - obviously because if i say roll number
03:29 - 45 then maybe some point of time you
03:31 - know for some time rahul
03:33 - whose role number is 45 even rahul will
03:36 - think who is 45 right and if i directly
03:39 - say name rahul then rahul will stand up
03:42 - so which is better
03:44 - to call
03:45 - a student by their name rather than roll
03:47 - number you are again with me yes
03:50 - same thing if we use
03:52 - name inner program rather than numbers
03:54 - then it will increase the readability of
03:56 - the program it is easy to maintain that
03:58 - program
03:59 - if you have written a program and some
04:01 - other is reading your program if you
04:03 - have used names in that program rather
04:05 - than numbers so for that person also it
04:07 - is easy to read it is easy to understand
04:10 - your program
04:11 - so it's not compulsory without enum also
04:14 - you can write down your program it's not
04:16 - compulsory to use enum in your program
04:18 - right but if you if you use enum
04:20 - sometimes then it will definitely
04:21 - increase the readability of the program
04:23 - the maintainability of the program
04:25 - right
04:26 - and if you want to modify something that
04:27 - also would be easy if you are using
04:30 - enums right
04:32 - so see
04:35 - how we can
04:36 - define see if you use a structure then
04:38 - how we use how we define
04:41 - we use struct
04:42 - then name like i am using student
04:45 - then here
04:47 - list of members like intro number float
04:49 - marks this this right and semicolon and
04:52 - then we can
04:55 - a declare variable of this type first
04:57 - use struct then student then like
05:00 - suppose s is roll number right so s is a
05:03 - variable of data type stock student
05:06 - same enum
05:08 - hub
05:08 - declare enum
05:11 - the keyword here the name of enum
05:13 - suppose i am i am here writing um
05:17 - days
05:19 - weekdays
05:20 - name
05:21 - right and here after curly braces the
05:25 - list of days suppose i am using sunday
05:29 - monday
05:31 - tuesday like this
05:33 - that's it suppose three names only i am
05:36 - taking and semicolon so this is how you
05:39 - define
05:40 - your own data type with enum
05:44 - right now let me write this thing in a
05:47 - proper way
05:48 - like this we can write enum the name is
05:51 - weekdays and i am here
05:54 - i am listing the values here you can see
05:57 - so the meaning of this thing is how you
06:00 - can declare the variable of this we have
06:02 - defined our own data type
06:04 - but the only possible values
06:07 - when we declare a variable of this data
06:09 - type the only possible values that
06:11 - variable can have
06:13 - is this one
06:14 - this list only these seven values
06:17 - like we suppose over int data type i am
06:21 - declaring a variable k so the possible
06:23 - values a can have is all the integers
06:26 - right
06:27 - 0 1 2 minus any all the integers
06:31 - character if i am taking care c
06:33 - all the characters c can take the
06:35 - possible values
06:36 - for this variable
06:38 - so if we declare a variable of this type
06:40 - how to declare same we use enum this
06:43 - keyword
06:44 - then the name of this data type weekdays
06:46 - and the name of the variable the name of
06:48 - variable i am taking is suppose today
06:51 - so this variable this variable can have
06:54 - the values from this list only
06:58 - these are the possibilities the possible
07:00 - values i can assign something like this
07:04 - today is equal to
07:06 - tuesday
07:08 - that's fine if i am taking a
07:12 - today one
07:14 - another variable so i can write today
07:17 - one is equal to
07:19 - sunday
07:20 - these variables can have values from
07:23 - these seven
07:25 - values either sunday monday tuesday
07:27 - wednesday thursday friday saturday
07:28 - that's it
07:30 - no other values is allowed suppose i
07:32 - have written down this thing only friday
07:34 - in this list i have the values till
07:37 - friday so if you write here tuesday is
07:40 - equal to saturday
07:42 - that would not be allowed this will give
07:44 - error you cannot write down on this
07:45 - thing because this is not in your
07:47 - program anywhere this type of variable
07:49 - cannot have value saturday it can have
07:52 - value sunday monday tuesday wednesday
07:54 - thursday friday that's it
07:56 - so if you want this kind of program like
07:59 - like your variable can have only a set
08:01 - of values
08:02 - at that point of time you can use enum
08:04 - like weekdays only seven day
08:06 - possibilities are there month only
08:08 - twelve possibilities are there
08:09 - directions only four possibilities east
08:12 - west north south
08:14 - either one value this variable can have
08:16 - the variable you declare of that type
08:19 - and at one time this variable can have
08:21 - only single value like sunday
08:24 - only single value at one time out of
08:26 - these possible values
08:28 - right so if this situation arise
08:30 - list of values specific set of values
08:33 - you want your variable can have
08:35 - right should have
08:37 - that time you can use enum data type
08:39 - user defined data type right i guess you
08:41 - know how to define this type how to
08:43 - declare a variable of this thing right
08:45 - like this
08:46 - and i have assigned a value also like
08:48 - today is equal to sunday and now second
08:50 - thing is what automatically compiler
08:53 - will
08:54 - will initialize this this thing with
08:57 - integers constant as starting from zero
09:00 - zero it would be assigned zero value
09:02 - then one two three four five
09:04 - automatically by compiler so if you
09:06 - print the value of today like if i am
09:08 - printing printf
09:10 - percentage d and i am printing today
09:13 - this value
09:15 - so it will print in today i have sunday
09:18 - so it will print 0.
09:22 - by default
09:23 - if
09:23 - rather than sunday i have tuesday so it
09:26 - will print 2.
09:28 - this is automatically initialization by
09:30 - compiler
09:31 - but if you assign your own value also if
09:34 - i want that sunday should be given
09:35 - sunday is equal to
09:37 - 1 sunday should start with 1 that is
09:40 - also fine you can do this thing sunday
09:42 - is equal to 1 comma
09:44 - so now next values the next values would
09:47 - be assigned
09:48 - by
09:49 - previous value plus 1 automatically by
09:51 - compiler so previous value is 1 then
09:53 - monday would be 2 3 4 5 6.
09:59 - right but if you assign the numbers in
10:02 - any order that is also fine if i'm
10:04 - writing here like sunday is equal to 1
10:07 - and monday suppose i i want to
10:09 - initialize monday with 5
10:11 - comma that is also fine
10:14 - now automatically tuesday would be
10:16 - assigned with what previous value plus
10:19 - one so tuesday would be six
10:21 - so now at this point of time tuesday if
10:23 - you print this thing then it will give
10:25 - you
10:25 - six
10:26 - i hope you are getting in any order you
10:29 - can assign the values
10:31 - in any order
10:33 - like
10:34 - here we have mondays we can assign zero
10:36 - also that is also fine
10:38 - so now in this case tuesday
10:40 - would be half value zero plus one that
10:43 - is
10:44 - one so now it will print one here
10:45 - sundays also on tuesdays also one that
10:47 - is also fine so in this case now one two
10:50 - three four
10:52 - right
10:53 - so the next value would be previous
10:55 - value plus one
10:57 - fine you can assign values you can
10:59 - assign these things the numbers
11:01 - according to yourself according to your
11:03 - requirement right so now why we use this
11:05 - thing over macros macro also can do same
11:08 - thing assign name to integral constant
11:10 - so one difference is what the
11:12 - scope macros are having global scope
11:15 - only
11:16 - only global scope because macros are
11:18 - like
11:19 - hash define this thing
11:21 - this is
11:22 - these are
11:24 - in
11:25 - pre-processing these are like
11:26 - preprocessor
11:27 - right
11:28 - so it comes under pre-processing phase
11:30 - so whatever these are you know the line
11:33 - which are you know
11:35 - prefixed with hash
11:37 - those would come in preprocessor phase
11:40 - so whenever you use inner program x 50
11:42 - wherever you you have you have used mix
11:44 - that would be
11:45 - replaced with 50.
11:47 - so this is having global scope not local
11:50 - scope no allowed no local scope is
11:52 - allowed in macros even you use this line
11:55 - within any function
11:56 - then also it would be considered as a
11:58 - look global scope not local to that
12:01 - function you can use this you can try it
12:02 - at your own right
12:04 - but here
12:05 - this the signal this data type can have
12:07 - local as well as global scope
12:11 - it's up to you
12:12 - within a function like i am using word
12:14 - fun one
12:16 - and in in this function i am listing my
12:18 - own values i am defining my own data
12:20 - type so that data type this type of
12:21 - variable
12:23 - in a type of variable you can use within
12:24 - the scope of this function only not
12:26 - outside of this function
12:28 - so this is having local scope as well as
12:30 - global scope also you can declare
12:32 - globally also you can declare right
12:35 - next thing
12:36 - automatically compiler can assign values
12:39 - to these if you don't assign anything
12:41 - automatically compiler will do from 0 1
12:43 - to 3 like this but when you use macros
12:45 - you have to explicitly give the value
12:48 - like hash define max 50
12:50 - if you don't use max and anything
12:53 - it would not be considered as right so
12:55 - you have to explicitly give the value
12:57 - right next thing at one point of time we
12:59 - can take list of values here
13:02 - but here we cannot take hash defined we
13:04 - can take only one value like
13:06 - max
13:08 - 50 another value if you want to take
13:10 - right so another macro you have to use
13:12 - and here we have
13:14 - list of values in within a single line
13:16 - only right so these are some you can say
13:18 - plus point of using enum over macros
13:23 - next uh point about enum is what within
13:26 - the same
13:27 - scope
13:28 - like within the same scope i'm using
13:30 - like here i haven't used saturday so i'm
13:33 - using here saturday
13:34 - coma again i am using sunday so this is
13:36 - not allowed sunday here also sunday here
13:39 - also sunday is equal to suppose here one
13:41 - sunday is equal to here five so this is
13:42 - not allowed within the same scope
13:45 - scope is same
13:47 - right either in main i am using these
13:50 - two enum enamel in any function within
13:52 - the same scope the duplicate
13:55 - values are not allowed of the these enum
13:58 - saturday is fine only saturday because
14:01 - here we we are not having saturday
14:02 - saturday is fine
14:04 - right but if this enum i'm using another
14:07 - function if this enum i'm using in
14:08 - function2 so in that case i'm using i
14:11 - can use here sunday
14:13 - in that case duplicate these values are
14:15 - allowed
14:16 - but in same scope not allowed i hope you
14:18 - are getting my point
14:19 - another point is
14:21 - only integral values are allowed here
14:24 - if suppose i am taking here another enum
14:28 - and point
14:30 - x is equal to 0 y is equal to 2.5
14:35 - this is not allowed only integral
14:38 - constant are allowed no floating or
14:39 - anything is allowed only it deserves
14:41 - right
14:42 - so i think this is clear to you now
14:46 - if i use here x 0 y 0 that is also fine
14:49 - these can have same values
14:51 - right that is also fine means same
14:54 - integral constant right so this is fine
14:56 - 0 this is also having zero value right
14:59 - next point is
15:01 - we know why do we need enum basically
15:04 - when we want that our variable should
15:06 - have only a set of possible values then
15:08 - we can use enum here set of possible
15:10 - values are only weekdays 7
15:13 - 7
15:15 - right
15:16 - next thing in switch case also
15:20 - we can use enum
15:22 - like how can you you can use this in
15:24 - switch case when we are using case
15:28 - in case we are using
15:30 - integers or either characters character
15:33 - can use or you can use character or
15:34 - integers but if you use
15:37 - enum then you can use here case like i
15:39 - can write here sunday
15:42 - case
15:44 - monday
15:45 - case
15:47 - tuesday and here you can simply print
15:50 - today is
15:51 - sunday today is monday today is tuesday
15:53 - so here in case
15:55 - here i can use
15:57 - these words
15:59 - when yeah we are using enums so this is
16:01 - i guess more readable rather than using
16:03 - case 0 case 1 is 2
16:06 - right maybe you have specified like 0 is
16:09 - for sunday 1 is for monday but
16:11 - we have to go through the program
16:12 - properly like 0 okay at somewhere we
16:14 - have written 0 is for sunday so like 0
16:16 - means okay sunday but if you directly
16:18 - write here sunday monday so it is more
16:21 - understandable like case this is for
16:23 - sunday so it will print sunday tuesday
16:26 - sorry monday tuesday like this
16:27 - right so in switch case also you can use
16:29 - enum
16:31 - so this is assignment for you you have
16:32 - to write down a program in which you are
16:34 - using
16:35 - switch case and you are using enum also
16:38 - so you have to write down that program
16:39 - yourself
16:41 - and be honest right
16:43 - see one example we can take like this
16:47 - suppose i have a condition like if
16:53 - if your employee is
16:55 - female
16:57 - then
16:59 - or
17:00 - whenever we are going to you know we are
17:02 - going for some shopping and there we
17:03 - have some condition like if customer is
17:06 - female then
17:08 - she will get 50 percent discount if male
17:11 - then only 25 percent discount and others
17:14 - will get suppose 60 percent discount
17:17 - right so if we are using enum then in if
17:20 - directly we can use if customer
17:25 - is equal to is equal to
17:26 - female
17:30 - then discount is fifty percent if
17:32 - customer is equal is equal to male this
17:34 - thing when we use enum only then on then
17:36 - only we can write down this thing and it
17:38 - is more understandable
17:40 - right rather than writing something zero
17:42 - one or this thing
17:44 - fine
17:44 - so at some point of time like here also
17:46 - our our variable can have only specific
17:49 - set of values like either female male or
17:51 - others three set of values we have only
17:53 - so we can use enum
17:54 - right
17:55 - in direction like like i have told you
17:57 - in directions four directions only
17:59 - four specific values four possible set
18:02 - of values are there so there you can use
18:04 - enum right
18:05 - like how you can declare
18:07 - enum
18:10 - gender
18:12 - and here i can write male
18:15 - female
18:18 - others
18:20 - right and i can then what you can
18:23 - declare a variable of this type enum
18:26 - gender but you have to write down enum
18:28 - keyword also then the name and then i
18:30 - can
18:31 - declare a variable of this variable you
18:33 - can take a b c x y z or anything
18:35 - right g so g i'm assigning a value like
18:38 - male
18:41 - so the what condition would be satisfied
18:43 - that thing if g is equal to is equal to
18:46 - male
18:47 - then the discount is
18:49 - 25 percent
18:51 - so it would be
18:53 - true now right
18:55 - so because of this e m it is possible to
18:58 - use here male otherwise it is not
19:00 - possible right and it is obviously
19:02 - increasing the understandability of the
19:04 - program fine
19:05 - and this g at a time this variable can
19:07 - have only one
19:09 - value out of these possible values at a
19:11 - time it can have only one value fine
19:15 - and by default zero is what sorry male
19:17 - is what zero then one and two it would
19:19 - be considered as zero automatically by
19:21 - compiler fine so i guess about e m all
19:24 - the points we have covered i guess you
19:26 - can write down your a program a simple
19:28 - program with enum at your own right so
19:31 - now see in the next video till then bye
19:32 - bye take care

Cleaned transcript:

so in the series of learning c programming we have covered i guess all the concept in c language if you are left with any concept you can write down that thing in comment box i'll make a separate video on that thing but we are left with a small concept that is enum in c enum is a user defined data type so this video will talk about this thing as we have structure and union same way we have enum to define our own data type so how to use enum to define our own data type how to declare a variable of enum type how to use this inner program what are some important points about you know why we use enum what is neerofena right how this is different from you know macros and how this is different from structure and union all the things we will discuss about enum with the help of a program in this video right but before that just want to tell you one thing this summer geeks for geeks is going to bring back fun to your screens with the biggest virtual event in 2022 presenting geeks summer carnival so here you will experience fun excitement entertainment and games and it is going to be started from 26th of march to 11th of april so all these days are filled with fun and some of the hottest discount to cool you down this summer flat 15 percent off and much more so what are you waiting for get ready for these days of excitement and mark your calendars the geek summer carnival is all about enhancing your skills and you should never miss out an opportunity like this you want to explore more if if you want more information on this the link i'll put in the description box of this video you can go to that link click that link and you can check out the further detail about this about this event so do check out that link and register now so now what is enum let's discuss so it is a user defined data type basically used for what to assign to assign names to integral constant we basically use this thing this data to assign some names to integral constant like see let's take one example i guess you have most of you have used this thing macros like hash define and max 50 this thing like when we use in a program in a program we can use now max right and this mix means 50 this would be replaced with 50 means we are using actually the name rather than this this is integral constant but we are assigning a name to this integral constant and the name is max and this name we can use throughout our program i guess you are aware with this macros so this thing macro can also do this thing same thing enum will do but what is the difference why we use enum over macros sometimes we use macros sometimes it's better to use enum that also will discuss right but the meaning of this line is user def it is basically used to assign names to integral constant this is the thing this is integral constant we are assigning a name to it and we are using this name to a program and see when we use names in a program it is going to increase the readability of the program see let's see in my uh in a class if i say like roll number 45 stand up and roll number 45 name of sorry roll number 45 name is rahul if i say roll number 45 stand up another if i say rahul stand up which one is better rahul obviously because if i say roll number 45 then maybe some point of time you know for some time rahul whose role number is 45 even rahul will think who is 45 right and if i directly say name rahul then rahul will stand up so which is better to call a student by their name rather than roll number you are again with me yes same thing if we use name inner program rather than numbers then it will increase the readability of the program it is easy to maintain that program if you have written a program and some other is reading your program if you have used names in that program rather than numbers so for that person also it is easy to read it is easy to understand your program so it's not compulsory without enum also you can write down your program it's not compulsory to use enum in your program right but if you if you use enum sometimes then it will definitely increase the readability of the program the maintainability of the program right and if you want to modify something that also would be easy if you are using enums right so see how we can define see if you use a structure then how we use how we define we use struct then name like i am using student then here list of members like intro number float marks this this right and semicolon and then we can a declare variable of this type first use struct then student then like suppose s is roll number right so s is a variable of data type stock student same enum hub declare enum the keyword here the name of enum suppose i am i am here writing um days weekdays name right and here after curly braces the list of days suppose i am using sunday monday tuesday like this that's it suppose three names only i am taking and semicolon so this is how you define your own data type with enum right now let me write this thing in a proper way like this we can write enum the name is weekdays and i am here i am listing the values here you can see so the meaning of this thing is how you can declare the variable of this we have defined our own data type but the only possible values when we declare a variable of this data type the only possible values that variable can have is this one this list only these seven values like we suppose over int data type i am declaring a variable k so the possible values a can have is all the integers right 0 1 2 minus any all the integers character if i am taking care c all the characters c can take the possible values for this variable so if we declare a variable of this type how to declare same we use enum this keyword then the name of this data type weekdays and the name of the variable the name of variable i am taking is suppose today so this variable this variable can have the values from this list only these are the possibilities the possible values i can assign something like this today is equal to tuesday that's fine if i am taking a today one another variable so i can write today one is equal to sunday these variables can have values from these seven values either sunday monday tuesday wednesday thursday friday saturday that's it no other values is allowed suppose i have written down this thing only friday in this list i have the values till friday so if you write here tuesday is equal to saturday that would not be allowed this will give error you cannot write down on this thing because this is not in your program anywhere this type of variable cannot have value saturday it can have value sunday monday tuesday wednesday thursday friday that's it so if you want this kind of program like like your variable can have only a set of values at that point of time you can use enum like weekdays only seven day possibilities are there month only twelve possibilities are there directions only four possibilities east west north south either one value this variable can have the variable you declare of that type and at one time this variable can have only single value like sunday only single value at one time out of these possible values right so if this situation arise list of values specific set of values you want your variable can have right should have that time you can use enum data type user defined data type right i guess you know how to define this type how to declare a variable of this thing right like this and i have assigned a value also like today is equal to sunday and now second thing is what automatically compiler will will initialize this this thing with integers constant as starting from zero zero it would be assigned zero value then one two three four five automatically by compiler so if you print the value of today like if i am printing printf percentage d and i am printing today this value so it will print in today i have sunday so it will print 0. by default if rather than sunday i have tuesday so it will print 2. this is automatically initialization by compiler but if you assign your own value also if i want that sunday should be given sunday is equal to 1 sunday should start with 1 that is also fine you can do this thing sunday is equal to 1 comma so now next values the next values would be assigned by previous value plus 1 automatically by compiler so previous value is 1 then monday would be 2 3 4 5 6. right but if you assign the numbers in any order that is also fine if i'm writing here like sunday is equal to 1 and monday suppose i i want to initialize monday with 5 comma that is also fine now automatically tuesday would be assigned with what previous value plus one so tuesday would be six so now at this point of time tuesday if you print this thing then it will give you six i hope you are getting in any order you can assign the values in any order like here we have mondays we can assign zero also that is also fine so now in this case tuesday would be half value zero plus one that is one so now it will print one here sundays also on tuesdays also one that is also fine so in this case now one two three four right so the next value would be previous value plus one fine you can assign values you can assign these things the numbers according to yourself according to your requirement right so now why we use this thing over macros macro also can do same thing assign name to integral constant so one difference is what the scope macros are having global scope only only global scope because macros are like hash define this thing this is these are in preprocessing these are like preprocessor right so it comes under preprocessing phase so whatever these are you know the line which are you know prefixed with hash those would come in preprocessor phase so whenever you use inner program x 50 wherever you you have you have used mix that would be replaced with 50. so this is having global scope not local scope no allowed no local scope is allowed in macros even you use this line within any function then also it would be considered as a look global scope not local to that function you can use this you can try it at your own right but here this the signal this data type can have local as well as global scope it's up to you within a function like i am using word fun one and in in this function i am listing my own values i am defining my own data type so that data type this type of variable in a type of variable you can use within the scope of this function only not outside of this function so this is having local scope as well as global scope also you can declare globally also you can declare right next thing automatically compiler can assign values to these if you don't assign anything automatically compiler will do from 0 1 to 3 like this but when you use macros you have to explicitly give the value like hash define max 50 if you don't use max and anything it would not be considered as right so you have to explicitly give the value right next thing at one point of time we can take list of values here but here we cannot take hash defined we can take only one value like max 50 another value if you want to take right so another macro you have to use and here we have list of values in within a single line only right so these are some you can say plus point of using enum over macros next uh point about enum is what within the same scope like within the same scope i'm using like here i haven't used saturday so i'm using here saturday coma again i am using sunday so this is not allowed sunday here also sunday here also sunday is equal to suppose here one sunday is equal to here five so this is not allowed within the same scope scope is same right either in main i am using these two enum enamel in any function within the same scope the duplicate values are not allowed of the these enum saturday is fine only saturday because here we we are not having saturday saturday is fine right but if this enum i'm using another function if this enum i'm using in function2 so in that case i'm using i can use here sunday in that case duplicate these values are allowed but in same scope not allowed i hope you are getting my point another point is only integral values are allowed here if suppose i am taking here another enum and point x is equal to 0 y is equal to 2.5 this is not allowed only integral constant are allowed no floating or anything is allowed only it deserves right so i think this is clear to you now if i use here x 0 y 0 that is also fine these can have same values right that is also fine means same integral constant right so this is fine 0 this is also having zero value right next point is we know why do we need enum basically when we want that our variable should have only a set of possible values then we can use enum here set of possible values are only weekdays 7 7 right next thing in switch case also we can use enum like how can you you can use this in switch case when we are using case in case we are using integers or either characters character can use or you can use character or integers but if you use enum then you can use here case like i can write here sunday case monday case tuesday and here you can simply print today is sunday today is monday today is tuesday so here in case here i can use these words when yeah we are using enums so this is i guess more readable rather than using case 0 case 1 is 2 right maybe you have specified like 0 is for sunday 1 is for monday but we have to go through the program properly like 0 okay at somewhere we have written 0 is for sunday so like 0 means okay sunday but if you directly write here sunday monday so it is more understandable like case this is for sunday so it will print sunday tuesday sorry monday tuesday like this right so in switch case also you can use enum so this is assignment for you you have to write down a program in which you are using switch case and you are using enum also so you have to write down that program yourself and be honest right see one example we can take like this suppose i have a condition like if if your employee is female then or whenever we are going to you know we are going for some shopping and there we have some condition like if customer is female then she will get 50 percent discount if male then only 25 percent discount and others will get suppose 60 percent discount right so if we are using enum then in if directly we can use if customer is equal to is equal to female then discount is fifty percent if customer is equal is equal to male this thing when we use enum only then on then only we can write down this thing and it is more understandable right rather than writing something zero one or this thing fine so at some point of time like here also our our variable can have only specific set of values like either female male or others three set of values we have only so we can use enum right in direction like like i have told you in directions four directions only four specific values four possible set of values are there so there you can use enum right like how you can declare enum gender and here i can write male female others right and i can then what you can declare a variable of this type enum gender but you have to write down enum keyword also then the name and then i can declare a variable of this variable you can take a b c x y z or anything right g so g i'm assigning a value like male so the what condition would be satisfied that thing if g is equal to is equal to male then the discount is 25 percent so it would be true now right so because of this e m it is possible to use here male otherwise it is not possible right and it is obviously increasing the understandability of the program fine and this g at a time this variable can have only one value out of these possible values at a time it can have only one value fine and by default zero is what sorry male is what zero then one and two it would be considered as zero automatically by compiler fine so i guess about e m all the points we have covered i guess you can write down your a program a simple program with enum at your own right so now see in the next video till then bye bye take care
