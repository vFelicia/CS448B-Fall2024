With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language we are
00:06 - discussing strings in C++ we know C++
00:09 - provides two type of uh string
00:11 - representation one is C style character
00:14 - strings and second is C++ strings right
00:17 - like uh we use in C uh in C language
00:21 - character arrays right string is not a
00:24 - data type in C so strings are like
00:28 - character array so C style string those
00:30 - strings are also supported in C++ plus
00:33 - now C++ introduced a new type of string
00:36 - that is STD Nam space Sorry STD uh scope
00:40 - resolution operator and
00:42 - string right so these are special
00:44 - strings special type of string
00:46 - introduced in C++ and these are having
00:50 - many advantages over C style
00:52 - string right few of them we we have
00:55 - discussed in previous video like Dynamic
00:58 - size C++ are Dynamic and size they
01:01 - support many binary operators like plus
01:04 - comparison operator less than equal to
01:06 - we can compare two C++ string or more
01:09 - specifically if I say two C++ string
01:12 - objects because in C++ strings are
01:15 - objects that
01:16 - represent sequence of
01:19 - characters right so string is like a
01:23 - class also in
01:26 - C++ right that is having many member
01:29 - function function right so we
01:33 - create object of that string class like
01:35 - vector is also a class so we create a
01:38 - vector right so we create a string
01:41 - object of that string class and with the
01:45 - help of that object we can use all those
01:46 - member
01:48 - functions right so all those member
01:50 - function we'll be discussing in this
01:51 - video practically with the help of
01:53 - program right now before that I just
01:56 - want to tell you one thing there's a
01:58 - good news for those who are are
02:00 - preparing for gate
02:02 - 2025 it's about an Academy's learning
02:05 - festival and what is this learning
02:07 - Festival now you can enjoy unlimited
02:09 - access to gate Plus subscription for
02:11 - next 7 days so don't miss out this 7
02:15 - days free trial and just get maximum
02:20 - benefit of this free trial and what you
02:22 - will get in this these 7 days in this
02:24 - free trial access to all the online live
02:28 - plus recorded batches study material
02:31 - curated by their top Educators plus
02:34 - practice questions many practice
02:36 - questions almost 2 lakh plus practice
02:38 - question you'll get access to all the
02:40 - test series and uh previous year
02:43 - question papers plus doubt resolution
02:46 - support 24 into 7 doubt resolution
02:49 - support as well as digital notes you
02:52 - will get I mean you will get access to
02:53 - all these things during these 7 days and
02:55 - it's completely free but one thing you
02:58 - need to remember enroll M for this 7day
03:01 - free trial ends on 8th of May you have
03:04 - to enroll before 8th May to get benefit
03:08 - of this 7-Day free trial so don't miss
03:10 - out because it's free so the relevant
03:12 - link and detail you will get in the
03:14 - description box of this video you can go
03:16 - and check out now let's see all those
03:18 - string functions with the help of
03:20 - program so if you search these strings
03:23 - in C++ in Google then you'll get this
03:25 - website C+ plus.com here from this
03:28 - website you read everything about this
03:31 - STD and this string string
03:35 - class right so here you will get
03:38 - everything about string the member
03:40 - functions see we have seen in vectors
03:43 - same thing the iterators we use in
03:45 - vectors those begin and R begin R and C
03:48 - begin right if you not if you know don't
03:51 - remember those thing please watch that
03:53 - video first vectors because we not going
03:55 - to discuss everything in detail in this
03:57 - video because we already discussed these
03:59 - things in vectors these will be working
04:03 - you know same way as they work in
04:06 - vectors same as it is same syntax
04:08 - everything is same right same like
04:11 - capacity size length these also we have
04:13 - discussed element excess using this
04:16 - operator subscript using at front and
04:19 - back we can use this thing we have
04:20 - discussed modifiers we have discussed
04:23 - there also same thing some string
04:25 - operations are there those two or three
04:27 - operation we will be discussing in this
04:28 - video right so first we'll see see this
04:33 - let me just show you first this begin
04:34 - iterator so it is going to return
04:36 - iterator to the beginning of the string
04:38 - same in vectors it it will do right
04:41 - returns and iterator pointing to the
04:43 - first character of the string right so
04:47 - if you want to print the complete string
04:48 - using iterator we can do that thing also
04:51 - let's do this thing with some programs
04:53 - let's create a new file string functions
04:55 - and same include those header files
04:58 - first so let's take us string we have a
05:00 - string Str Str and let's
05:02 - initialize this here only we have like
05:06 - Jenny's lectures right and I want to
05:10 - trace this travel this from first to
05:12 - last I want to print this using iterator
05:14 - so how to create iterator let's first
05:17 - we'll use only one iterator that is
05:19 - begin only begin and end okay to create
05:23 - an iterator first type is string right
05:26 - scope resolution operator then iterator
05:29 - the proper keyword and then name of the
05:31 - iterator any name x y z a b c i t i
05:34 - anything you can take i j k anything I'm
05:36 - taking it right so now in for Loop this
05:40 - it is equal to St Str do begin and it
05:45 - till termination condition is it not
05:48 - equal to S Str dot we have and this
05:52 - iterator is return return we'll point
05:55 - the equator to the ending of the string
05:57 - last character of the string right and
05:59 - and then it
06:01 - ++ right and we'll just
06:05 - access it R is
06:08 - basically it's pointing the
06:11 - location or it's like a pointer but it's
06:14 - not exactly pointer but it's like
06:16 - pointer it is
06:18 - pointing that like first Str Str begin
06:21 - so it is going to return the itated to
06:24 - the first character like to Jenny so the
06:27 - it is now pointing to J
06:29 - then it will increase it ++ then e then
06:33 - n n like
06:35 - this and it is going to repeat this Loop
06:38 - this is this Loop is going to be
06:39 - repeated till it not equal to Str Str
06:41 - end right what this Str Str end will do
06:45 - let me show you see s Str end it is
06:49 - going to return an iterator pointing to
06:51 - the to the past the end character of the
06:53 - string past the end means after the last
06:57 - character of the string and
06:58 - theoretically after the last character
07:00 - like after this s there is nothing in
07:02 - the string so theoretically we can't
07:04 - access
07:05 - this character this position so right
07:08 - till so that is why it not equal to S
07:10 - strn we are going to repeat this Loop so
07:13 - it is pointing like it's an address
07:16 - containing address of these characters
07:17 - so to D reference this we use S right
07:21 - these thing we have discussed in uh
07:24 - those vectors also right so let me run
07:28 - this and it will print Jenny's
07:30 - lectures see so using iterator we can
07:35 - print the string so like this now it's
07:37 - now it's your assignment you have to try
07:40 - out these iterator R begin R and C begin
07:43 - CN and these right same capacity like
07:48 - let's size it is going to return the
07:50 - length of the string length and size
07:52 - both are same either you can use length
07:54 - or size Max size it is going to return
07:56 - return the maximum size of the string
08:00 - how many character that string can
08:02 - contain maximum size maximum characters
08:05 - so I'll show you this thing also the
08:07 - size if you want to resize the string
08:08 - capacity this is uh
08:11 - important it will return size of
08:14 - allocated stories see how this capacity
08:17 - and size is different it Returns the
08:19 - size of storage space currently
08:20 - allocated for the string in terms of
08:22 - bytes but it is not necessarily equal to
08:25 - string length it can be equal to or
08:27 - greater than equal to the size of the
08:29 - string or the length of the string let
08:31 - me show you this thing with uh one
08:33 - example see let's take this string only
08:37 - Jenny's lectures and after printing
08:41 - this let's print size of the string
08:44 - so both size or you can say length and
08:49 - Max size and capacity three things we
08:51 - are going to print so we have called all
08:53 - all these four functions size length Max
08:55 - size and capacity right so size and
08:58 - length would be same Max size and
09:01 - capacity let's see what these things are
09:04 - going to
09:10 - print let's put here a new line so first
09:14 - it will print Jenny's lectures then size
09:16 - of the St Str is 16 so here we have 16
09:19 - characters including space right you can
09:22 - count length is also same because size
09:24 - and length both are same maximum size is
09:26 - this maximum character the string can
09:28 - contain this much it's not necessarily
09:31 - that it can contain these many
09:32 - characters it's you know it's
09:34 - implementation dependent as well as
09:36 - because of some other factors also it
09:39 - can fail to allocate storage up to this
09:42 - length at any point of time right so
09:45 - it's not necessarily we can uh store
09:47 - these many characters here in this
09:49 - string right but yeah maximum size of
09:51 - this string is this but capacity is 16
09:54 - here capacity and size both are same but
09:56 - somewhere sometime you can find
09:58 - capacities more than size actual size
10:03 - maybe uh let's see this thing but see
10:07 - let me show you this example here in Str
10:09 - Str we have a string there we have high
10:12 - Jenny and I'm just printing capacity
10:14 - length and Mex size right so let me run
10:18 - this and in this case see capacity is 15
10:21 - actual length is8 only and Mex size this
10:24 - only so capacity can be equal to or more
10:26 - than the size because ual size is only
10:30 - eight High J but capacity is currently
10:34 - allocated storage to this string Str Str
10:37 - this string s
10:39 - is 15 or
10:42 - 16 let's run this and see again it's 15
10:46 - right sometimes extra space would be
10:48 - allocated see let me let me just show
10:52 - you this thing what this capacity will
10:54 - do because of some if you want to
10:56 - perform some operation like
10:57 - concatenation or anything else because
10:59 - of that right see it can be equal or
11:02 - greater with extra space allowing
11:05 - allowing the object to optimize its
11:07 - operation when new characters are added
11:09 - to the string
11:11 - right so it's not necessarily equal to
11:14 - the size of the string but if in this
11:17 - case in our example it's equal to size
11:19 - that is also fine it's not necessarily
11:21 - always extra bites extra storage is to
11:24 - be
11:25 - allocated I mean more than size right so
11:28 - pleasey TR out these Reserve resize and
11:32 - these things clear empty and all how to
11:34 - access this thing we have seen this
11:36 - operator this operator front end back
11:37 - you please uh try out the thing exess
11:41 - last character exess first character
11:44 - then we have some modifier like if you
11:45 - want to append something this operator
11:47 - we can use to at the end of the string
11:50 - append function we can use push back we
11:51 - can use May insert if you want to insert
11:54 - at a specific position into that string
11:56 - we can use insert right so let's use
11:58 - this oper plus equal to after printing
12:02 - this string I want
12:04 - to add in the string plus equal to what
12:08 - hyenes lectures
12:11 - and how are
12:13 - you so this we can
12:16 - append using simply this operator right
12:20 - and after that if you again
12:27 - print after pending this how are you at
12:30 - the end of this string after Jenny's
12:32 - lectures if you again print then see
12:35 - what it will show you let's run this
12:38 - first was hi Jenny lectures then hi
12:41 - Jenny's lectures how are you with no
12:43 - space right here between lectures and
12:46 - how after that size length and see now
12:49 - capacity is 40 but size and length is 32
12:53 - now capacity is more than uh actual size
12:57 - right so this is also fine
13:01 - actual located Space Storage to this
13:04 - this is what 40 40
13:06 - bytes right so using this we can append
13:09 - or you can use those append function
13:11 - also rather than this if you use that
13:13 - append function then St Str dot append
13:17 - and here we can use how are
13:22 - you this thing is also
13:25 - fine I mean you can use the
13:27 - syntax also see same result you're
13:30 - getting right so please try out these
13:33 - different different functions plus more
13:35 - string operations these are string
13:37 - operation like if you want to generate a
13:39 - sub string from a string then we can use
13:41 - this sust
13:43 - Str right so let me just show you this
13:47 - how to find out substring from here so
13:50 - syntax is you just have to use whatever
13:53 - the that string name St Str dot this
13:57 - function substring and here you will
14:00 - provide the start index and the length
14:03 - of the string from where you
14:06 - extract start index is supp z and
14:11 - length and I want to print this so let's
14:15 - put this in see
14:19 - how right start index is zero sorry here
14:24 - we have S Str dot because on this string
14:27 - we are going to call this substring
14:29 - function
14:44 - from two is not position or index see
14:50 - high comment out this thing
14:54 - also so this is start index and this is
14:57 - length of the substring you want want to
14:59 - extract length means how many characters
15:02 - so from zero okay let's modify this I
15:05 - want to uh exess from index 3 and length
15:11 - is two so index 3 means 0 1 2 three so
15:16 - one is space and one is you will get
15:20 - G according to me I don't know let's run
15:23 - this and see I'm not sure so space and G
15:26 - right you got it these arguments one is
15:30 - first one is start index from where you
15:32 - want to start extracting the substring
15:35 - and next argument is length of that
15:37 - substring
15:39 - right next when we have find if you want
15:42 - to find a substring from this string so
15:45 - that will return the first occurrence of
15:48 - that substring first occurrence see here
15:51 - we have find so this will search the
15:53 - string for the first occurrence of the
15:56 - sequence specified by its argument
15:59 - right first
16:00 - occurrence okay let me show you hi
16:03 - Jenny's lectures and
16:05 - again let's take
16:08 - high high and high two times we have so
16:13 - now if you want to find out where is
16:16 - high so see
16:19 - out St Str do
16:24 - find and just write down that substra
16:28 - string you want to find out
16:31 - High let me show you what output it will
16:33 - give
16:34 - you
16:37 - okay see at zero index because as soon
16:41 - as it is going to start searching first
16:43 - it will find H then I both are matching
16:47 - and index is obviously zero so first
16:50 - Ence is this it will not search after
16:52 - that it will return only zero but if you
16:56 - want to search this second high after
16:58 - after this so let's you can just put
17:01 - here one more thing after position zero
17:04 - after index zero I want to search the
17:07 - size so let's put here one so after this
17:10 - one I want to search so now if you run
17:12 - this so output would be 21 now the index
17:17 - is 21 from 21 this H is on 21 right you
17:21 - can just count the thing see here we
17:23 - have specified the position the subring
17:26 - you want to search
17:29 - plus position so if you have specified
17:32 - the position then it will only search at
17:35 - this position and after this position
17:38 - not before this position right see when
17:41 - position is specified the search only
17:43 - include characters at or after the
17:45 - position
17:47 - specified right not before ignoring any
17:51 - possible occurrence that include
17:52 - characters before that position so
17:54 - before this position before one yeah
17:57 - there was high but it is going to ignore
17:59 - that thing but here the entire sequence
18:02 - should match if I write here hi
18:07 - II and no position I'm not going to
18:10 - specify any position so there is nothing
18:13 - like the sequence S II so it will give
18:16 - any garbage
18:18 - value right because there is no
18:21 - hii and if I print if I write here small
18:25 - H and I what do you think what it should
18:30 - print C any garbage value because it's
18:34 - hi I this is not here so whatever you
18:38 - will specify the complete sequence
18:40 - should be here it's not that only one
18:43 - character is fine and that's it no the
18:45 - complete both H and I should be here in
18:48 - this string right both should match
18:52 - everything should match whatever you
18:53 - specify here like if I write here h i
18:57 - and
19:01 - comma and after position one I want to
19:06 - find
19:07 - out right what do you think pause the
19:10 - video and let me know in comment section
19:12 - what it should
19:15 - give so there is nothing after one this
19:20 - kind of thing so any garbage value
19:21 - because h i comma after one after zero
19:25 - and after this
19:27 - index we have only h i but no comma so
19:31 - everything should match
19:33 - right all the character in given
19:36 - sequence so please you just try out
19:38 - these different different operation you
19:40 - don't need to remember everything right
19:42 - I have told you the frequently used
19:45 - operations but you just try out these
19:47 - things once you are habitual of using
19:49 - this thing in your
19:50 - program you know you don't need to
19:52 - remember these thing in after that right
19:55 - these are some non member function
19:57 - overloads rational operators we can use
19:59 - with these type of strings like this
20:02 - operator less than equal to greater than
20:04 - less than and equality check not equal
20:08 - to these operator we can use right
20:09 - overload means the actual meaning of
20:11 - these operators are plus means to add
20:13 - two numbers but here we are using to
20:15 - concatenate two string means we are
20:17 - giving that operator another meaning
20:19 - plus operator another meaning right less
20:22 - than we use to compare to integer right
20:25 - but here we are using to compare two
20:26 - strings so we are also overloading or
20:29 - changing the meaning of that operator so
20:31 - that is kind of overload right these are
20:34 - oops concept right we will be discussing
20:37 - the E concept op concept also later in
20:39 - the C++ course right function
20:41 - overloading operator overloading and
20:43 - overriding and all
20:45 - right like plus operator used to
20:47 - concatenate string this thing we have
20:49 - used get line we have used so you please
20:52 - practice you know these member functions
20:55 - with the help of a proper program and
20:57 - all right this is your assignment so I
21:00 - hope strings are clear to you guys now
21:02 - in the next video we'll see functions in
21:04 - C++ right so now I'll see you in the
21:06 - next video till bye-bye take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing strings in C++ we know C++ provides two type of uh string representation one is C style character strings and second is C++ strings right like uh we use in C uh in C language character arrays right string is not a data type in C so strings are like character array so C style string those strings are also supported in C++ plus now C++ introduced a new type of string that is STD Nam space Sorry STD uh scope resolution operator and string right so these are special strings special type of string introduced in C++ and these are having many advantages over C style string right few of them we we have discussed in previous video like Dynamic size C++ are Dynamic and size they support many binary operators like plus comparison operator less than equal to we can compare two C++ string or more specifically if I say two C++ string objects because in C++ strings are objects that represent sequence of characters right so string is like a class also in C++ right that is having many member function function right so we create object of that string class like vector is also a class so we create a vector right so we create a string object of that string class and with the help of that object we can use all those member functions right so all those member function we'll be discussing in this video practically with the help of program right now before that I just want to tell you one thing there's a good news for those who are are preparing for gate 2025 it's about an Academy's learning festival and what is this learning Festival now you can enjoy unlimited access to gate Plus subscription for next 7 days so don't miss out this 7 days free trial and just get maximum benefit of this free trial and what you will get in this these 7 days in this free trial access to all the online live plus recorded batches study material curated by their top Educators plus practice questions many practice questions almost 2 lakh plus practice question you'll get access to all the test series and uh previous year question papers plus doubt resolution support 24 into 7 doubt resolution support as well as digital notes you will get I mean you will get access to all these things during these 7 days and it's completely free but one thing you need to remember enroll M for this 7day free trial ends on 8th of May you have to enroll before 8th May to get benefit of this 7Day free trial so don't miss out because it's free so the relevant link and detail you will get in the description box of this video you can go and check out now let's see all those string functions with the help of program so if you search these strings in C++ in Google then you'll get this website C+ plus.com here from this website you read everything about this STD and this string string class right so here you will get everything about string the member functions see we have seen in vectors same thing the iterators we use in vectors those begin and R begin R and C begin right if you not if you know don't remember those thing please watch that video first vectors because we not going to discuss everything in detail in this video because we already discussed these things in vectors these will be working you know same way as they work in vectors same as it is same syntax everything is same right same like capacity size length these also we have discussed element excess using this operator subscript using at front and back we can use this thing we have discussed modifiers we have discussed there also same thing some string operations are there those two or three operation we will be discussing in this video right so first we'll see see this let me just show you first this begin iterator so it is going to return iterator to the beginning of the string same in vectors it it will do right returns and iterator pointing to the first character of the string right so if you want to print the complete string using iterator we can do that thing also let's do this thing with some programs let's create a new file string functions and same include those header files first so let's take us string we have a string Str Str and let's initialize this here only we have like Jenny's lectures right and I want to trace this travel this from first to last I want to print this using iterator so how to create iterator let's first we'll use only one iterator that is begin only begin and end okay to create an iterator first type is string right scope resolution operator then iterator the proper keyword and then name of the iterator any name x y z a b c i t i anything you can take i j k anything I'm taking it right so now in for Loop this it is equal to St Str do begin and it till termination condition is it not equal to S Str dot we have and this iterator is return return we'll point the equator to the ending of the string last character of the string right and and then it ++ right and we'll just access it R is basically it's pointing the location or it's like a pointer but it's not exactly pointer but it's like pointer it is pointing that like first Str Str begin so it is going to return the itated to the first character like to Jenny so the it is now pointing to J then it will increase it ++ then e then n n like this and it is going to repeat this Loop this is this Loop is going to be repeated till it not equal to Str Str end right what this Str Str end will do let me show you see s Str end it is going to return an iterator pointing to the to the past the end character of the string past the end means after the last character of the string and theoretically after the last character like after this s there is nothing in the string so theoretically we can't access this character this position so right till so that is why it not equal to S strn we are going to repeat this Loop so it is pointing like it's an address containing address of these characters so to D reference this we use S right these thing we have discussed in uh those vectors also right so let me run this and it will print Jenny's lectures see so using iterator we can print the string so like this now it's now it's your assignment you have to try out these iterator R begin R and C begin CN and these right same capacity like let's size it is going to return the length of the string length and size both are same either you can use length or size Max size it is going to return return the maximum size of the string how many character that string can contain maximum size maximum characters so I'll show you this thing also the size if you want to resize the string capacity this is uh important it will return size of allocated stories see how this capacity and size is different it Returns the size of storage space currently allocated for the string in terms of bytes but it is not necessarily equal to string length it can be equal to or greater than equal to the size of the string or the length of the string let me show you this thing with uh one example see let's take this string only Jenny's lectures and after printing this let's print size of the string so both size or you can say length and Max size and capacity three things we are going to print so we have called all all these four functions size length Max size and capacity right so size and length would be same Max size and capacity let's see what these things are going to print let's put here a new line so first it will print Jenny's lectures then size of the St Str is 16 so here we have 16 characters including space right you can count length is also same because size and length both are same maximum size is this maximum character the string can contain this much it's not necessarily that it can contain these many characters it's you know it's implementation dependent as well as because of some other factors also it can fail to allocate storage up to this length at any point of time right so it's not necessarily we can uh store these many characters here in this string right but yeah maximum size of this string is this but capacity is 16 here capacity and size both are same but somewhere sometime you can find capacities more than size actual size maybe uh let's see this thing but see let me show you this example here in Str Str we have a string there we have high Jenny and I'm just printing capacity length and Mex size right so let me run this and in this case see capacity is 15 actual length is8 only and Mex size this only so capacity can be equal to or more than the size because ual size is only eight High J but capacity is currently allocated storage to this string Str Str this string s is 15 or 16 let's run this and see again it's 15 right sometimes extra space would be allocated see let me let me just show you this thing what this capacity will do because of some if you want to perform some operation like concatenation or anything else because of that right see it can be equal or greater with extra space allowing allowing the object to optimize its operation when new characters are added to the string right so it's not necessarily equal to the size of the string but if in this case in our example it's equal to size that is also fine it's not necessarily always extra bites extra storage is to be allocated I mean more than size right so pleasey TR out these Reserve resize and these things clear empty and all how to access this thing we have seen this operator this operator front end back you please uh try out the thing exess last character exess first character then we have some modifier like if you want to append something this operator we can use to at the end of the string append function we can use push back we can use May insert if you want to insert at a specific position into that string we can use insert right so let's use this oper plus equal to after printing this string I want to add in the string plus equal to what hyenes lectures and how are you so this we can append using simply this operator right and after that if you again print after pending this how are you at the end of this string after Jenny's lectures if you again print then see what it will show you let's run this first was hi Jenny lectures then hi Jenny's lectures how are you with no space right here between lectures and how after that size length and see now capacity is 40 but size and length is 32 now capacity is more than uh actual size right so this is also fine actual located Space Storage to this this is what 40 40 bytes right so using this we can append or you can use those append function also rather than this if you use that append function then St Str dot append and here we can use how are you this thing is also fine I mean you can use the syntax also see same result you're getting right so please try out these different different functions plus more string operations these are string operation like if you want to generate a sub string from a string then we can use this sust Str right so let me just show you this how to find out substring from here so syntax is you just have to use whatever the that string name St Str dot this function substring and here you will provide the start index and the length of the string from where you extract start index is supp z and length and I want to print this so let's put this in see how right start index is zero sorry here we have S Str dot because on this string we are going to call this substring function from two is not position or index see high comment out this thing also so this is start index and this is length of the substring you want want to extract length means how many characters so from zero okay let's modify this I want to uh exess from index 3 and length is two so index 3 means 0 1 2 three so one is space and one is you will get G according to me I don't know let's run this and see I'm not sure so space and G right you got it these arguments one is first one is start index from where you want to start extracting the substring and next argument is length of that substring right next when we have find if you want to find a substring from this string so that will return the first occurrence of that substring first occurrence see here we have find so this will search the string for the first occurrence of the sequence specified by its argument right first occurrence okay let me show you hi Jenny's lectures and again let's take high high and high two times we have so now if you want to find out where is high so see out St Str do find and just write down that substra string you want to find out High let me show you what output it will give you okay see at zero index because as soon as it is going to start searching first it will find H then I both are matching and index is obviously zero so first Ence is this it will not search after that it will return only zero but if you want to search this second high after after this so let's you can just put here one more thing after position zero after index zero I want to search the size so let's put here one so after this one I want to search so now if you run this so output would be 21 now the index is 21 from 21 this H is on 21 right you can just count the thing see here we have specified the position the subring you want to search plus position so if you have specified the position then it will only search at this position and after this position not before this position right see when position is specified the search only include characters at or after the position specified right not before ignoring any possible occurrence that include characters before that position so before this position before one yeah there was high but it is going to ignore that thing but here the entire sequence should match if I write here hi II and no position I'm not going to specify any position so there is nothing like the sequence S II so it will give any garbage value right because there is no hii and if I print if I write here small H and I what do you think what it should print C any garbage value because it's hi I this is not here so whatever you will specify the complete sequence should be here it's not that only one character is fine and that's it no the complete both H and I should be here in this string right both should match everything should match whatever you specify here like if I write here h i and comma and after position one I want to find out right what do you think pause the video and let me know in comment section what it should give so there is nothing after one this kind of thing so any garbage value because h i comma after one after zero and after this index we have only h i but no comma so everything should match right all the character in given sequence so please you just try out these different different operation you don't need to remember everything right I have told you the frequently used operations but you just try out these things once you are habitual of using this thing in your program you know you don't need to remember these thing in after that right these are some non member function overloads rational operators we can use with these type of strings like this operator less than equal to greater than less than and equality check not equal to these operator we can use right overload means the actual meaning of these operators are plus means to add two numbers but here we are using to concatenate two string means we are giving that operator another meaning plus operator another meaning right less than we use to compare to integer right but here we are using to compare two strings so we are also overloading or changing the meaning of that operator so that is kind of overload right these are oops concept right we will be discussing the E concept op concept also later in the C++ course right function overloading operator overloading and overriding and all right like plus operator used to concatenate string this thing we have used get line we have used so you please practice you know these member functions with the help of a proper program and all right this is your assignment so I hope strings are clear to you guys now in the next video we'll see functions in C++ right so now I'll see you in the next video till byebye take care
