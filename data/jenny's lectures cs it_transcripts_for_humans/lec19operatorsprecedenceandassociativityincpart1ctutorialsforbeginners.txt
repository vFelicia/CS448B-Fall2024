With timestamps:

00:00 - so in the series of learning C plus plus
00:02 - programming language we have discussed
00:03 - all the type of operators in C plus plus
00:05 - arithmetic relational logical bitwise
00:07 - assignment and some miscellaneous
00:09 - operators so the next topic is operative
00:12 - precedence and associativity this is
00:14 - also one of the important topic in case
00:16 - of operators
00:17 - without this you cannot solve any
00:19 - expression which is harming multiple
00:21 - operators right an expression is having
00:23 - multiple operators plus minus divide
00:25 - left shift right shift logical and
00:27 - logical or so to solve that expression
00:30 - you need
00:31 - to know what is operated precedence and
00:33 - associativity of the operator right
00:36 - operated precedence is nothing you can
00:38 - say it's like a priority priority on the
00:40 - operator so don't worry we'll discuss
00:42 - this thing with the help of two or three
00:44 - examples
00:45 - first of all simple example then two or
00:47 - three complex examples right and uh
00:50 - we'll see step by step everything how to
00:52 - solve the expression keeping in mind the
00:55 - operator precedence and associativity
00:57 - right now before that I just want to
00:59 - tell you one thing Geeks four Geeks has
01:01 - come up with a fun filled event for you
01:03 - guys called geek Olympics and what you
01:06 - have to do is just go to the link in the
01:07 - description box of this video register
01:09 - for the event free of course and after
01:11 - registering you will get access to the
01:13 - calendar where you can see all the
01:15 - upcoming events and activities and see
01:17 - they have something different and new
01:19 - every day in the month of July from 1st
01:21 - to 31st of July so do check out this
01:24 - link every day and where you can get a
01:26 - chance to win some rewards and it would
01:28 - be a great learning experience for you
01:30 - guys now let me brief you on one of the
01:32 - interesting segment of geek Olympics
01:36 - which is DSA cheat code sheet yes they
01:39 - have come up with the ultimate DSA cheat
01:41 - code sheet which will help you to start
01:43 - your DSA preparation it is a
01:45 - step-by-step guide or you can say it's a
01:47 - complete guide where you will you know
01:49 - you will get to know from where you can
01:51 - start your coding journey and what kind
01:54 - of problems you should practice
01:56 - so you just need to fill the Google form
01:58 - which should be in the description box
01:59 - of this video submit that form and after
02:01 - that you will get a link to download
02:03 - this cheat code so register here to get
02:06 - this cheat code sheet instantly and see
02:08 - in this sheet you will get exclusive
02:11 - content of GST and also content from the
02:13 - paid courses but keep in mind one thing
02:16 - this cheat code sheet this content would
02:18 - be available on the website on one for
02:21 - few days only for some days in between
02:23 - first to 31st of July so do check out it
02:26 - every day and shoot your shot so all the
02:29 - relevant links and details I'll put in
02:30 - the description of this video you can go
02:32 - and check out now let's see what is
02:34 - operator precedence and associativity so
02:36 - first of all what is operator precedence
02:39 - C
02:40 - it's you can say it's priority residence
02:43 - means the order in which operators is to
02:46 - be executed like you have heard bodmas
02:48 - rule you must have heard I guess
02:50 - everybody Burma soon
02:53 - first we saw the brackets right then
02:57 - some priorities of operators are there
03:00 - according to the priority we solve all
03:02 - the operators like this if an expression
03:04 - is something like this I have like a 2
03:08 - plus 3 into 5. in this we have two
03:11 - operator or if I write something like in
03:14 - a program if I write int a and then a is
03:17 - equal to this and then C out a
03:22 - C out a so here this is simple program
03:25 - like this is what expression although
03:27 - you can write those header file and
03:29 - namespace STD and Main all this thing
03:31 - the main logic I have written so this is
03:33 - what an expression in this expression we
03:35 - have how many operand how many operators
03:37 - one two three equal to operator that is
03:40 - assignment operator and plus and into
03:42 - arithmetic operators plus and into our
03:44 - arithmetic operators so which operator
03:45 - is to be executed first if you have more
03:48 - than one operator in one expression so
03:51 - have you will decide that thing based on
03:53 - operator precedence right same thing
03:56 - like you if you are standing in a queue
03:58 - in any Bank suppose and any VIP come
04:01 - or suppose any member of same bank comes
04:05 - then
04:08 - his or her work is to be done first
04:10 - rather than your work they'll not stand
04:13 - in the queue because they are having
04:14 - higher priority than you if a VIP come
04:17 - right so they are having higher priority
04:19 - than than you guys right so their work
04:22 - is to be done first after that your work
04:24 - although you are standing in a queue
04:25 - they will not stand in that queue
04:27 - right so same for operators also we have
04:30 - some precedence or some you can say that
04:32 - uh priority right
04:35 - so this is the priority you can say the
04:38 - table for operator right as you can see
04:42 - at the first we have scope resolution
04:44 - operator then we have post fix increment
04:47 - and decrement operator right don't check
04:50 - out the associativity first that also
04:51 - discuss first of all check the
04:52 - Precedence right so you don't have to
04:55 - remember this precedence chart as it is
04:59 - but yeah you have to remember the
05:02 - operators which will frequently use the
05:04 - Precedence and associativity for those
05:05 - operators like relational those
05:07 - arithmetic operators logical bitwise
05:09 - operators uh those increment decrement
05:12 - operators right for this you have to
05:15 - remember the uh no precedence right see
05:19 - now first of all the Precedence of which
05:22 - operator is more assignment operators
05:24 - are having lowest precedence so that
05:26 - would be executed in the last
05:28 - Plus or into the Precedence of into or
05:31 - multiplication operator is higher than
05:33 - this plus so first of all this should be
05:35 - executed it means 5 into 3 15 15 plus 2
05:38 - is 17. now a becomes 17. if I modify
05:42 - something like this
05:43 - now this is my expression
05:46 - in this case we have 1 2 3 and 4
05:49 - operators one is this bracket this is
05:51 - also an operator and the highest
05:54 - precedence is of this bracket so first
05:58 - now you will solve this thing so 3 plus
06:01 - 2 is 5 then 5 into 5 25 right then 25
06:06 - would be assigned to a now a becomes 25
06:08 - so see in the both the cases you are
06:11 - getting different result
06:13 - just I have changed a little bit I have
06:15 - added this bracket that's this operator
06:20 - that is why we need operator precedent
06:23 - right
06:24 - so now let's take one more example now
06:28 - at this time we have this expression so
06:30 - in this expression we have many
06:31 - operators or before that let's take a
06:34 - simple example and suppose I have 2 plus
06:36 - 3 into 5 divided by
06:40 - 2 mode
06:42 - suppose three
06:44 - this is the expression now in this we
06:47 - have plus into divide mode
06:49 - so which operator is having higher
06:51 - precedence this into divide and modulo
06:55 - these are having higher precedence Than
06:56 - This plus but these three are having
06:58 - same precedence it's not like that into
07:00 - is having higher precedence or this is
07:02 - having higher precedence right these are
07:05 - having same precedence but higher than
07:07 - this Plus
07:08 - so now if in in an expression two or
07:11 - three operators comes of having same
07:13 - precedence now which operator to be
07:16 - executed first now how you will decide
07:18 - because they are having same precedence
07:20 - right suppose two VIP person come
07:23 - so you are standing in queue and two or
07:26 - three VIP person come so they are having
07:28 - higher precedence than than you
07:30 - so obviously they'll do their work their
07:33 - work is to be done first but they are
07:35 - three person
07:37 - and
07:38 - all of them is VIP so how they will
07:42 - decide right so same here these three
07:46 - operators are having higher precedence
07:47 - than plus but they are having same
07:49 - precedence they are VIP right now which
07:52 - operator is to be executed first now you
07:54 - have to check the associativity of the
07:56 - operator if this table this column is
07:59 - for associativity
08:00 - every operator is having associativity
08:03 - left to right except two groups
08:07 - first is what prefix increment decrement
08:09 - unity plus minus logical not bitwise
08:12 - this and then address of size of this
08:16 - group is having associativity right to
08:17 - left and
08:19 - second the conditional operator and
08:22 - assignment operator
08:24 - these are having associativity right to
08:26 - left otherwise all the operators are
08:28 - having associativity left to right now
08:30 - what does this mean c now a sensitivity
08:33 - for these operators are multiplicative
08:36 - operators are left to right means
08:39 - we will move from left to right and the
08:42 - first operator whatever operator you
08:44 - will get first that would be executed
08:45 - first so now we have 2 plus when will
08:49 - you move left to right first operator is
08:52 - into so that would be executed first
08:54 - means 5 into
08:56 - 3 15 then divide 2 mode 3 when you move
09:01 - left to right which operator is coming
09:03 - first divide so this would be executed
09:05 - first 2 plus 15 divided by 2. suppose
09:09 - you are taking only into value so what
09:10 - values will give
09:13 - seven right now we have mode three now
09:17 - out of this we have higher precedence
09:19 - mode operator so 2 plus 7 more 3 more
09:22 - will give remainder so now remainder is
09:24 - I guess one
09:25 - now the output would would be 3.
09:28 - so I hope you got what is Presidents and
09:31 - associativity event to check presidents
09:32 - when to check a sensitivity now let's
09:34 - try to solve this expression this is
09:37 - little bit complex
09:38 - in this expression we have many
09:40 - operators we have plus this is bitwise
09:43 - over divide minus left shift bitwise
09:46 - left shift
09:47 - logical and mode divide and into right
09:52 - now out of these operators
09:55 - which operator is having higher
09:57 - precedence
09:59 - out of these the multiplicative
10:03 - operators divide
10:05 - mode divide into these are having higher
10:08 - precedence but we have to divide one
10:11 - mode and
10:12 - one that multiplication so we'll check
10:16 - the sensitivity will associativity for
10:19 - these are left to right so when you will
10:20 - move left to right which operator you
10:22 - will get first divide so now it becomes
10:24 - 2 plus 3
10:26 - and bitwise or 12 divided by 6 that
10:30 - becomes
10:31 - 2 right then minus 1 then this then
10:35 - logical land and after that this mode
10:38 - six mode seven mode will give remainder
10:40 - but we cannot divide this remainder
10:42 - would be 6 only
10:43 - 6 divided by
10:45 - 3 into 5. after this this division would
10:50 - be executed so division 3 divided by
10:54 - 6 divided by 3 means
10:56 - 2 so rather than this we can write
10:58 - simply 2 now I will execute this into 5
11:02 - into 2 is 10.
11:05 - right now out of these operator which is
11:08 - having higher precedence
11:10 - this plus and minus are having higher
11:12 - precedence than this these remaining
11:13 - operators right you can see that
11:15 - precedence chart if you don't remember
11:17 - right now right but they are having
11:19 - associativity left to right so we'll
11:20 - move left to right and solve first
11:22 - operator is plus so 5
11:24 - bitwise or then this minus would be
11:27 - executed for this operand is this and
11:29 - this 2 minus 1 is 1 1 left shift one and
11:33 - ten now we have bitwise left shift bit
11:37 - wise
11:38 - poor and logical and out of these higher
11:41 - precedencies this left shift operator is
11:44 - having higher precedence so five
11:47 - this one left shift one
11:51 - this is bitwise operator so first you
11:53 - have to convert it into bits so one
11:55 - would be converted something like the
11:57 - zero zero zero one
11:59 - in four bits I am representing it now we
12:02 - will left shift this by one only by one
12:04 - bit
12:05 - so by one bit we left shift so this
12:07 - would be discarded if this zero would be
12:10 - here this zero would be here this one
12:12 - would be here and at this place we will
12:14 - simply
12:15 - fill this place with zero so now this
12:17 - becomes the decimal equivalent of this
12:19 - as 2. right
12:21 - so now rather than this you can simply
12:24 - write 2
12:26 - and 10. so from this we have this bit
12:31 - wise or is having higher precedence than
12:33 - logical and so first you have to solve
12:36 - this one five bit wise so bitwise
12:39 - operator is there so first convert this
12:41 - and this into bits 5 would be converted
12:44 - in binary how you can write 5 0 1 0 1 c
12:49 - 1 2 4 8 right in four bits 2 can be
12:52 - written 0 0 1 0.
12:55 - now execute bitwise over on this bit
12:59 - wise or means 1 0 obviously one one one
13:02 - zero if anyone is true it will give true
13:05 - otherwise false if both are false then
13:08 - only it will give false so decimal of
13:10 - this is what four plus two plus one that
13:11 - is seven seven and
13:14 - n logical
13:18 - and operator for logical and operator
13:20 - the operand should be
13:22 - Boolean Boolean value true or false so
13:24 - seven or 10 other than 0 if value is
13:28 - there then it would be considered as
13:29 - true true true true true it will give 1
13:31 - so now y becomes 1.
13:34 - right or the shortcut to solve this kind
13:36 - of expression is what if this kind of
13:38 - expression comes into your exam then
13:41 - what is the shortcut C
13:43 - this logical and operator out of these
13:46 - logical and operator is having lowest
13:48 - precedence
13:50 - right so now this would be executed in
13:52 - the last and bitwise logical and
13:55 - operator works on short circuit
13:57 - evaluation means if one Apprentice Falls
14:02 - it will be false
14:04 - logical and trustable I guess you
14:06 - remember right so either solve this
14:09 - thing or either solve this thing
14:12 - so this is short so first of all solve
14:15 - this thing
14:16 - this expression is this so the
14:20 - Precedence of these are same so check
14:22 - the sensitivity left to right 6 mode 7
14:24 - will give
14:26 - 6 divided by 3 into 5 right then becomes
14:31 - 2 into 5 that is 10 so one side of
14:35 - logical and is true 10 means obviously
14:38 - true other than 0 is true
14:40 - right
14:41 - now for logical and both the sides
14:44 - should be true so now you cannot say one
14:47 - is true it would be the result would be
14:49 - true no now you have to execute this
14:53 - also
14:54 - right if this becomes true then only it
14:57 - would be true if other than this we have
14:59 - logical or operator
15:02 - we have logical or logical or means if
15:04 - one side true it will give to you so
15:07 - rather than solving the complete
15:09 - expression just solve this one 10 10
15:12 - means true so you don't need to solve
15:14 - this one the result would be definitely
15:16 - true that is one
15:18 - so this is you can say the shortcut to
15:20 - solve this kind of expression right
15:22 - I hope you got the presidency and
15:25 - associativity with the help of this
15:27 - expression why we are getting True Value
15:30 - let me just give you now some assignment
15:32 - same expression we have just I have
15:34 - changed bitwise rather than bit wise or
15:37 - we have twice and so for this you have
15:39 - to tell what would be the output right
15:41 - second is what
15:43 - here we have and and I'm just changing
15:47 - this rather than this 3 I have 8.
15:51 - this is for second assignment right
15:55 - so this is second second question so
15:58 - what you will get here right in first
16:01 - here we have three
16:02 - so this is your first question in second
16:05 - question everything would be same and
16:08 - other than three we have eight so this
16:10 - is our second question so these are two
16:12 - questions you have to solve now let's uh
16:15 - take this example also like if I have a
16:17 - is equal to 2 comma 3 comma 4 and if I
16:20 - print C out a this comma operator is
16:23 - having lowest precedence
16:25 - right
16:26 - then this assignment is having higher
16:29 - precedence than this form operator
16:31 - right so now first out of this we have 2
16:36 - comma operator one assignment operator
16:38 - first which operator would be executed
16:41 - assignment operator is having higher
16:42 - Pistons assignment operators wants means
16:45 - what right hand side value would be
16:47 - assigned to left hand side so it will
16:49 - check this value only right hand side
16:50 - value is 2 2 would be assigned to a and
16:53 - it will give 2.
16:54 - now I'm changing a little bit I'm just
16:57 - writing I'm just putting a bracket now
17:01 - we have three operators uh this is equal
17:04 - to sorry this assignment operator then
17:07 - comma operator and this bracket so out
17:09 - of this which is having higher
17:10 - precedence
17:11 - bracket so this would be executed first
17:14 - now in this bracket we have 2 comma 3
17:16 - comma four two comma operators so check
17:18 - the associativity comma operator two
17:20 - comma operator having same precedence so
17:22 - now check the associativity which comma
17:24 - operator is to be executed first
17:25 - associate of comma operator is what left
17:29 - to right left to right
17:31 - so now first this comma operator would
17:34 - be executed now what is the operation of
17:36 - comma operator
17:38 - this expression would be executed
17:41 - evaluated and
17:42 - it will discard this value after that
17:45 - this comma operator this
17:48 - for this uh the the expression that this
17:51 - would be executed and this will discard
17:52 - the value so it will discard two then it
17:55 - will discard three and then it will
17:56 - return 4.
17:59 - right so now 4 would be assigned to this
18:02 - a in this case now in this case a would
18:03 - be 4.
18:07 - I hope you got the value sorry how you
18:10 - are getting this 4 right when you move
18:13 - left to right this would be discarded
18:15 - this would be discarded and finally the
18:16 - whatever the value at the right hand
18:18 - side at last
18:20 - it that value would be returned if I
18:22 - write here comma 6.
18:25 - then this value will also be discarded
18:28 - after this comma operator we have one
18:30 - more value so this would be returned the
18:32 - last value so now a would be 6.
18:35 - right
18:36 - so this is one more question for you
18:38 - guys we have four variable ABCD the
18:40 - values are something like this and in y
18:42 - this is the expression a divided by B
18:44 - this is bitwise xor
18:46 - C into a mode in bracket we have C plus
18:50 - d c plus d then left shift d and minus 2
18:55 - so what would be the value of this
18:58 - I hope you got precedence and
19:00 - associativity and you can evaluate any
19:03 - complex expression right now the tricky
19:05 - one is increment and decrement prefix
19:08 - increment and post fix these Expressions
19:10 - so for that we will be discussing two or
19:12 - three you know separate in separate
19:14 - video two or three questions complicated
19:16 - type of questions
19:17 - right so now I'll see the next video
19:19 - till then bye take care

Cleaned transcript:

so in the series of learning C plus plus programming language we have discussed all the type of operators in C plus plus arithmetic relational logical bitwise assignment and some miscellaneous operators so the next topic is operative precedence and associativity this is also one of the important topic in case of operators without this you cannot solve any expression which is harming multiple operators right an expression is having multiple operators plus minus divide left shift right shift logical and logical or so to solve that expression you need to know what is operated precedence and associativity of the operator right operated precedence is nothing you can say it's like a priority priority on the operator so don't worry we'll discuss this thing with the help of two or three examples first of all simple example then two or three complex examples right and uh we'll see step by step everything how to solve the expression keeping in mind the operator precedence and associativity right now before that I just want to tell you one thing Geeks four Geeks has come up with a fun filled event for you guys called geek Olympics and what you have to do is just go to the link in the description box of this video register for the event free of course and after registering you will get access to the calendar where you can see all the upcoming events and activities and see they have something different and new every day in the month of July from 1st to 31st of July so do check out this link every day and where you can get a chance to win some rewards and it would be a great learning experience for you guys now let me brief you on one of the interesting segment of geek Olympics which is DSA cheat code sheet yes they have come up with the ultimate DSA cheat code sheet which will help you to start your DSA preparation it is a stepbystep guide or you can say it's a complete guide where you will you know you will get to know from where you can start your coding journey and what kind of problems you should practice so you just need to fill the Google form which should be in the description box of this video submit that form and after that you will get a link to download this cheat code so register here to get this cheat code sheet instantly and see in this sheet you will get exclusive content of GST and also content from the paid courses but keep in mind one thing this cheat code sheet this content would be available on the website on one for few days only for some days in between first to 31st of July so do check out it every day and shoot your shot so all the relevant links and details I'll put in the description of this video you can go and check out now let's see what is operator precedence and associativity so first of all what is operator precedence C it's you can say it's priority residence means the order in which operators is to be executed like you have heard bodmas rule you must have heard I guess everybody Burma soon first we saw the brackets right then some priorities of operators are there according to the priority we solve all the operators like this if an expression is something like this I have like a 2 plus 3 into 5. in this we have two operator or if I write something like in a program if I write int a and then a is equal to this and then C out a C out a so here this is simple program like this is what expression although you can write those header file and namespace STD and Main all this thing the main logic I have written so this is what an expression in this expression we have how many operand how many operators one two three equal to operator that is assignment operator and plus and into arithmetic operators plus and into our arithmetic operators so which operator is to be executed first if you have more than one operator in one expression so have you will decide that thing based on operator precedence right same thing like you if you are standing in a queue in any Bank suppose and any VIP come or suppose any member of same bank comes then his or her work is to be done first rather than your work they'll not stand in the queue because they are having higher priority than you if a VIP come right so they are having higher priority than than you guys right so their work is to be done first after that your work although you are standing in a queue they will not stand in that queue right so same for operators also we have some precedence or some you can say that uh priority right so this is the priority you can say the table for operator right as you can see at the first we have scope resolution operator then we have post fix increment and decrement operator right don't check out the associativity first that also discuss first of all check the Precedence right so you don't have to remember this precedence chart as it is but yeah you have to remember the operators which will frequently use the Precedence and associativity for those operators like relational those arithmetic operators logical bitwise operators uh those increment decrement operators right for this you have to remember the uh no precedence right see now first of all the Precedence of which operator is more assignment operators are having lowest precedence so that would be executed in the last Plus or into the Precedence of into or multiplication operator is higher than this plus so first of all this should be executed it means 5 into 3 15 15 plus 2 is 17. now a becomes 17. if I modify something like this now this is my expression in this case we have 1 2 3 and 4 operators one is this bracket this is also an operator and the highest precedence is of this bracket so first now you will solve this thing so 3 plus 2 is 5 then 5 into 5 25 right then 25 would be assigned to a now a becomes 25 so see in the both the cases you are getting different result just I have changed a little bit I have added this bracket that's this operator that is why we need operator precedent right so now let's take one more example now at this time we have this expression so in this expression we have many operators or before that let's take a simple example and suppose I have 2 plus 3 into 5 divided by 2 mode suppose three this is the expression now in this we have plus into divide mode so which operator is having higher precedence this into divide and modulo these are having higher precedence Than This plus but these three are having same precedence it's not like that into is having higher precedence or this is having higher precedence right these are having same precedence but higher than this Plus so now if in in an expression two or three operators comes of having same precedence now which operator to be executed first now how you will decide because they are having same precedence right suppose two VIP person come so you are standing in queue and two or three VIP person come so they are having higher precedence than than you so obviously they'll do their work their work is to be done first but they are three person and all of them is VIP so how they will decide right so same here these three operators are having higher precedence than plus but they are having same precedence they are VIP right now which operator is to be executed first now you have to check the associativity of the operator if this table this column is for associativity every operator is having associativity left to right except two groups first is what prefix increment decrement unity plus minus logical not bitwise this and then address of size of this group is having associativity right to left and second the conditional operator and assignment operator these are having associativity right to left otherwise all the operators are having associativity left to right now what does this mean c now a sensitivity for these operators are multiplicative operators are left to right means we will move from left to right and the first operator whatever operator you will get first that would be executed first so now we have 2 plus when will you move left to right first operator is into so that would be executed first means 5 into 3 15 then divide 2 mode 3 when you move left to right which operator is coming first divide so this would be executed first 2 plus 15 divided by 2. suppose you are taking only into value so what values will give seven right now we have mode three now out of this we have higher precedence mode operator so 2 plus 7 more 3 more will give remainder so now remainder is I guess one now the output would would be 3. so I hope you got what is Presidents and associativity event to check presidents when to check a sensitivity now let's try to solve this expression this is little bit complex in this expression we have many operators we have plus this is bitwise over divide minus left shift bitwise left shift logical and mode divide and into right now out of these operators which operator is having higher precedence out of these the multiplicative operators divide mode divide into these are having higher precedence but we have to divide one mode and one that multiplication so we'll check the sensitivity will associativity for these are left to right so when you will move left to right which operator you will get first divide so now it becomes 2 plus 3 and bitwise or 12 divided by 6 that becomes 2 right then minus 1 then this then logical land and after that this mode six mode seven mode will give remainder but we cannot divide this remainder would be 6 only 6 divided by 3 into 5. after this this division would be executed so division 3 divided by 6 divided by 3 means 2 so rather than this we can write simply 2 now I will execute this into 5 into 2 is 10. right now out of these operator which is having higher precedence this plus and minus are having higher precedence than this these remaining operators right you can see that precedence chart if you don't remember right now right but they are having associativity left to right so we'll move left to right and solve first operator is plus so 5 bitwise or then this minus would be executed for this operand is this and this 2 minus 1 is 1 1 left shift one and ten now we have bitwise left shift bit wise poor and logical and out of these higher precedencies this left shift operator is having higher precedence so five this one left shift one this is bitwise operator so first you have to convert it into bits so one would be converted something like the zero zero zero one in four bits I am representing it now we will left shift this by one only by one bit so by one bit we left shift so this would be discarded if this zero would be here this zero would be here this one would be here and at this place we will simply fill this place with zero so now this becomes the decimal equivalent of this as 2. right so now rather than this you can simply write 2 and 10. so from this we have this bit wise or is having higher precedence than logical and so first you have to solve this one five bit wise so bitwise operator is there so first convert this and this into bits 5 would be converted in binary how you can write 5 0 1 0 1 c 1 2 4 8 right in four bits 2 can be written 0 0 1 0. now execute bitwise over on this bit wise or means 1 0 obviously one one one zero if anyone is true it will give true otherwise false if both are false then only it will give false so decimal of this is what four plus two plus one that is seven seven and n logical and operator for logical and operator the operand should be Boolean Boolean value true or false so seven or 10 other than 0 if value is there then it would be considered as true true true true true it will give 1 so now y becomes 1. right or the shortcut to solve this kind of expression is what if this kind of expression comes into your exam then what is the shortcut C this logical and operator out of these logical and operator is having lowest precedence right so now this would be executed in the last and bitwise logical and operator works on short circuit evaluation means if one Apprentice Falls it will be false logical and trustable I guess you remember right so either solve this thing or either solve this thing so this is short so first of all solve this thing this expression is this so the Precedence of these are same so check the sensitivity left to right 6 mode 7 will give 6 divided by 3 into 5 right then becomes 2 into 5 that is 10 so one side of logical and is true 10 means obviously true other than 0 is true right now for logical and both the sides should be true so now you cannot say one is true it would be the result would be true no now you have to execute this also right if this becomes true then only it would be true if other than this we have logical or operator we have logical or logical or means if one side true it will give to you so rather than solving the complete expression just solve this one 10 10 means true so you don't need to solve this one the result would be definitely true that is one so this is you can say the shortcut to solve this kind of expression right I hope you got the presidency and associativity with the help of this expression why we are getting True Value let me just give you now some assignment same expression we have just I have changed bitwise rather than bit wise or we have twice and so for this you have to tell what would be the output right second is what here we have and and I'm just changing this rather than this 3 I have 8. this is for second assignment right so this is second second question so what you will get here right in first here we have three so this is your first question in second question everything would be same and other than three we have eight so this is our second question so these are two questions you have to solve now let's uh take this example also like if I have a is equal to 2 comma 3 comma 4 and if I print C out a this comma operator is having lowest precedence right then this assignment is having higher precedence than this form operator right so now first out of this we have 2 comma operator one assignment operator first which operator would be executed assignment operator is having higher Pistons assignment operators wants means what right hand side value would be assigned to left hand side so it will check this value only right hand side value is 2 2 would be assigned to a and it will give 2. now I'm changing a little bit I'm just writing I'm just putting a bracket now we have three operators uh this is equal to sorry this assignment operator then comma operator and this bracket so out of this which is having higher precedence bracket so this would be executed first now in this bracket we have 2 comma 3 comma four two comma operators so check the associativity comma operator two comma operator having same precedence so now check the associativity which comma operator is to be executed first associate of comma operator is what left to right left to right so now first this comma operator would be executed now what is the operation of comma operator this expression would be executed evaluated and it will discard this value after that this comma operator this for this uh the the expression that this would be executed and this will discard the value so it will discard two then it will discard three and then it will return 4. right so now 4 would be assigned to this a in this case now in this case a would be 4. I hope you got the value sorry how you are getting this 4 right when you move left to right this would be discarded this would be discarded and finally the whatever the value at the right hand side at last it that value would be returned if I write here comma 6. then this value will also be discarded after this comma operator we have one more value so this would be returned the last value so now a would be 6. right so this is one more question for you guys we have four variable ABCD the values are something like this and in y this is the expression a divided by B this is bitwise xor C into a mode in bracket we have C plus d c plus d then left shift d and minus 2 so what would be the value of this I hope you got precedence and associativity and you can evaluate any complex expression right now the tricky one is increment and decrement prefix increment and post fix these Expressions so for that we will be discussing two or three you know separate in separate video two or three questions complicated type of questions right so now I'll see the next video till then bye take care
