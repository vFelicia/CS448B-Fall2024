With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - C++ programming language we have
00:05 - discussed arrays and C 1D array but
00:08 - there's a small topic left in 1D array
00:09 - so before discussing 2D array Let's uh
00:12 - finish this topic as well that is the
00:15 - addressing of array elements how to
00:16 - calculate address of the elements of 1D
00:19 - array right okay if you're not getting
00:22 - anything have patience you'll get
00:23 - everything right what is when 1 D if I
00:27 - take one example like I'm just taking an
00:29 - integer as AR of name a and just only
00:32 - five integer right and suppose here I
00:35 - have like some values five values in
00:38 - this array right this is I have
00:40 - initialized this array with some
00:42 - initializer list so how in memory this
00:45 - is to be stored in continuous memory
00:48 - location
00:49 - right so if the Base address suppose I
00:54 - don't know the address suppose because
00:56 - that is in hexadecimal form suppose the
00:58 - address is 100 simple address I'm taking
01:01 - right so integer is going to take
01:03 - obviously four bytes right actually
01:06 - depends on it depends on compiler also
01:09 - but in my case in my laptop it is taking
01:12 - four bytes right so you can check out in
01:14 - your laptop right size of int and you
01:17 - can just print that thing 100 now the
01:20 - next element would be at 104 because
01:22 - this is going to take four byes one
01:25 - element 104 108 112 and 11 6 right index
01:31 - always starts from zero 0 1 2 3 4 Arrow
01:37 - Index
01:39 - right this is what array name a and in
01:42 - Array
01:43 - here what is to be stored The Base
01:46 - address of the array Base address is 100
01:49 - or you can say the address of first
01:51 - element of array right so 100 is to be
01:54 - stored and so this is pointing to here
01:57 - AR name a so I have told you like
01:59 - internally implicitly it is AR name is
02:03 - acting as a pointer except few cases
02:07 - right see we have discussed this thing
02:10 - why this is start from zero and all
02:13 - these things the index start from zero
02:14 - when we're discussing the very first
02:16 - video of array I guess the introdu
02:19 - introductory part introduction to 1D
02:21 - aray right you can go and check out that
02:24 - video so see now this is what if you
02:28 - want to access the array elements then
02:30 - directly we can access AR any array
02:32 - element randomly right so if I want to
02:35 - access this this element so the index is
02:39 - a what you have to write a of 1 and it
02:41 - will give you zero if I write a of three
02:45 - it will give you
02:47 - one right it's not like that the third
02:50 - element 1 2 3 no this index is actually
02:53 - the offset mean the distance from the
02:55 - first element how many step you need to
02:57 - take to reach to this this this offset
03:01 - third offset so 1 2 3 so this is the
03:06 - output one right but how the address is
03:08 - to be
03:09 - calculated obviously when we are writing
03:12 - something then there is some inner
03:13 - working
03:14 - right the address is like 112 and at 112
03:19 - there is one so one is to be fast
03:22 - suppose if you have five friends and
03:24 - your five friends are you know their
03:26 - houses are in a line something like this
03:29 - so if I say and and this house is of
03:33 - your friend like maybe uh Rahul so if I
03:36 - say go and call Rahul so you will
03:38 - directly go to rahul's house because you
03:42 - know the address right so how to
03:45 - calculate this address what is the
03:48 - formula how this addressing addressing
03:51 - is to be done of every element so there
03:52 - is a simple formula what is that
03:57 - see now here this B is Base address so
04:02 - if I take example of a of
04:05 - three Base address of the Base address
04:07 - of this array is what 100 so let's take
04:10 - 100 plus this s is what size of a single
04:13 - element of that array in bites so in
04:16 - this array size of a single element
04:18 - because this is of integer type right
04:20 - and obviously all the element would be
04:22 - integer because array is collection of
04:24 - homogeneous stereotypes right so one
04:27 - element will take four bytes so sizes 4
04:30 - into this I is what the
04:33 - index right index is
04:36 - three because for this I want to
04:39 - calculate the address so index is three
04:41 - minus this lb is what lower
04:43 - bound lower bound is what you can say
04:46 - that array of the address of the first
04:48 - element or the index of the sorry index
04:51 - of the first element of the if no lower
04:53 - bound is given then you have to assume
04:55 - it zero so lower bound is in this case
05:01 - zero right because no lower bound is
05:04 - given now 100 + 4 into 3 so it is 1 1 2
05:12 - and we know array of this third this
05:14 - element is what at address
05:17 - 112 right so this is the simple
05:19 - [Music]
05:21 - formula you can take any suppose I'm
05:24 - taking a
05:25 - of0 right so Base address 100 plus size
05:30 - 4 bytes into I is what index 0 minus
05:35 - lower bound is also zero so this would
05:38 - be 100 only and we know a of0 is the
05:42 - address of a of0 this element is what
05:44 - 100 only
05:46 - right so this formula you need to you
05:49 - know remember right if you want to
05:53 - calculate the address of any array
05:55 - element 1D array right for 2D array it's
05:58 - little bit different so that thing we'll
06:00 - discuss in next video like from next
06:02 - video we'll see about multi-dimensional
06:05 - arrays especially 2D arrays right so now
06:08 - that's it for this video now I'll see
06:09 - you in the next Tut then bye take
06:16 - care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we have discussed arrays and C 1D array but there's a small topic left in 1D array so before discussing 2D array Let's uh finish this topic as well that is the addressing of array elements how to calculate address of the elements of 1D array right okay if you're not getting anything have patience you'll get everything right what is when 1 D if I take one example like I'm just taking an integer as AR of name a and just only five integer right and suppose here I have like some values five values in this array right this is I have initialized this array with some initializer list so how in memory this is to be stored in continuous memory location right so if the Base address suppose I don't know the address suppose because that is in hexadecimal form suppose the address is 100 simple address I'm taking right so integer is going to take obviously four bytes right actually depends on it depends on compiler also but in my case in my laptop it is taking four bytes right so you can check out in your laptop right size of int and you can just print that thing 100 now the next element would be at 104 because this is going to take four byes one element 104 108 112 and 11 6 right index always starts from zero 0 1 2 3 4 Arrow Index right this is what array name a and in Array here what is to be stored The Base address of the array Base address is 100 or you can say the address of first element of array right so 100 is to be stored and so this is pointing to here AR name a so I have told you like internally implicitly it is AR name is acting as a pointer except few cases right see we have discussed this thing why this is start from zero and all these things the index start from zero when we're discussing the very first video of array I guess the introdu introductory part introduction to 1D aray right you can go and check out that video so see now this is what if you want to access the array elements then directly we can access AR any array element randomly right so if I want to access this this element so the index is a what you have to write a of 1 and it will give you zero if I write a of three it will give you one right it's not like that the third element 1 2 3 no this index is actually the offset mean the distance from the first element how many step you need to take to reach to this this this offset third offset so 1 2 3 so this is the output one right but how the address is to be calculated obviously when we are writing something then there is some inner working right the address is like 112 and at 112 there is one so one is to be fast suppose if you have five friends and your five friends are you know their houses are in a line something like this so if I say and and this house is of your friend like maybe uh Rahul so if I say go and call Rahul so you will directly go to rahul's house because you know the address right so how to calculate this address what is the formula how this addressing addressing is to be done of every element so there is a simple formula what is that see now here this B is Base address so if I take example of a of three Base address of the Base address of this array is what 100 so let's take 100 plus this s is what size of a single element of that array in bites so in this array size of a single element because this is of integer type right and obviously all the element would be integer because array is collection of homogeneous stereotypes right so one element will take four bytes so sizes 4 into this I is what the index right index is three because for this I want to calculate the address so index is three minus this lb is what lower bound lower bound is what you can say that array of the address of the first element or the index of the sorry index of the first element of the if no lower bound is given then you have to assume it zero so lower bound is in this case zero right because no lower bound is given now 100 + 4 into 3 so it is 1 1 2 and we know array of this third this element is what at address 112 right so this is the simple formula you can take any suppose I'm taking a of0 right so Base address 100 plus size 4 bytes into I is what index 0 minus lower bound is also zero so this would be 100 only and we know a of0 is the address of a of0 this element is what 100 only right so this formula you need to you know remember right if you want to calculate the address of any array element 1D array right for 2D array it's little bit different so that thing we'll discuss in next video like from next video we'll see about multidimensional arrays especially 2D arrays right so now that's it for this video now I'll see you in the next Tut then bye take care
