With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of planning
00:03 - Python programming language in the
00:05 - previous video we have seen functions
00:07 - with arguments how to define a function
00:09 - with argument how to call that function
00:11 - what are arguments how to pass arguments
00:13 - to a function difference between
00:15 - parameter and arguments right
00:17 - but now we have different types of
00:19 - arguments in Python right so in this
00:21 - video we'll be talking about all the
00:23 - arguments the types of arguments in
00:25 - Python so basically we have four types
00:27 - of argument default positional keyword
00:30 - and arbitrary
00:34 - or this arbitrary is also known as
00:36 - variable length arguments further
00:39 - arbitrary are of two types like
00:42 - arbitrary positional argument and
00:45 - arbitrary keyword argument
00:48 - right and one is the we also discussed
00:50 - about required arguments right so
00:53 - basically these types of arguments we
00:55 - have now one by one we will discussing
00:56 - all the types of argument but with the
00:58 - help of program practically I will show
01:00 - you rather than on this whiteboard right
01:02 - so let's see okay so let's create a new
01:05 - file here and we'll be discussing here
01:11 - types of argument
01:15 - dot p y right
01:18 - we will see this thing with the help of
01:20 - example okay simple example let's take
01:23 - that grid function
01:24 - in the previous video also we have seen
01:26 - that function
01:27 - so this was our function grid we are
01:29 - passing only one argument here suppose I
01:31 - want to pass two argument like uh
01:33 - Department also so just
01:36 - one more variable name like one more
01:39 - parameter and Jenny and here I will pass
01:41 - like CS right and one more print
01:44 - statement here I want to print using F
01:47 - string are you from
01:51 - this department whatever value will pass
01:53 - here in this department from this
01:55 - department it will fetch the value right
01:57 - okay so let's run this and what it will
01:59 - show hi January from computer science
02:00 - department right
02:02 - okay now what is the problem if I pass
02:06 - here something like this
02:08 - first I'll pass this CS
02:13 - suppose and then I'll pass Jenny
02:17 - hi CS are you from Journey Department
02:20 - it doesn't make any sense
02:22 - right it's nonsense
02:24 - so what is the problem here because
02:27 - first we have passed CS because if
02:31 - somewhere if the user or anyone who is
02:33 - using this program the programmer is not
02:36 - aware about this definition right the
02:38 - definition of the function and yeah he
02:41 - knows that this there is a function grid
02:43 - function and it will accept two argument
02:45 - one is name and one is Department
02:47 - but he's not aware about the order
02:50 - the first name or first department or
02:53 - what right so maybe he'll call the
02:56 - function something like something like
02:58 - this first if you pass department and
02:59 - then Jenny then it will give it will not
03:01 - give any error but obviously it will
03:03 - give some nonsense output
03:05 - right we don't know that that thing
03:08 - so what we can do so here here
03:11 - see these are whatever we will pass here
03:14 - like first we have passed Jenny and then
03:18 - we have passed CS right now yeah this is
03:22 - making sense because Jenny would be go
03:24 - to name and CS would go to department so
03:26 - these are positional Department sorry
03:29 - positional arguments right
03:32 - means we are not specifying anything
03:35 - like which this you know which parameter
03:39 - would be associated with which value we
03:41 - are not specifying anything we are just
03:43 - passing two values and here it is
03:45 - it will accept two values so the first
03:48 - Jenny would Jenny is at first position
03:50 - so this would be assigned to whatever
03:52 - parameter at first position that
03:54 - parameter is name so Jenny would be
03:56 - assigned to name then second position is
03:58 - CS then second position parameter name
03:59 - is department so like that this would be
04:02 - assigned in order wise right so these
04:05 - are positional Department sorry
04:07 - positional arguments right not
04:09 - departments positional arguments I hope
04:12 - this is clear to you guys now the
04:13 - problem you got with positional
04:15 - positional arguments now to solve this
04:17 - problem we have another
04:20 - arguments you know department and other
04:23 - arguments that are keyword arguments
04:25 - right key word as the name suggests key
04:28 - is like value and word is
04:30 - specific what we will provide so how to
04:34 - provide those keyword arguments see
04:37 - first if I know like I don't know the
04:40 - definition of this function
04:42 - this is hidden from me but I know there
04:44 - is a function greet which will accept
04:46 - two arguments one is name one is
04:48 - department so I will prefer to provide
04:50 - keyword arguments like having two
04:54 - parameter name and DPT department so I
04:58 - will associate this thing like name
05:00 - equal to Jenny and the EPT this variable
05:05 - name equal to CS so I'll associate
05:08 - the value with the parameter name so
05:11 - this is what the name is your like a
05:12 - keyword and key the value is Jenny
05:15 - so these are keyword arguments now if I
05:19 - pass if I reorder this thing like if I
05:23 - pass first
05:25 - Department
05:27 - and then
05:29 - the value of J then also it will work
05:32 - fine see hi Jenny are you from computer
05:34 - science department CS Department it is
05:36 - working fine because
05:39 - if you change the order that also you
05:42 - know will not cause any nonsense kind of
05:44 - thing because we have associated
05:47 - the parameter and the value while
05:50 - calling the function so you don't need
05:52 - to aware about the order of the
05:54 - arguments while you are using keyword
05:57 - arguments that is a good point
05:59 - so why we use keyword argument that I
06:02 - think
06:03 - clear to you guys and there is mixture
06:05 - of positional and keyword argument also
06:07 - also possible like we can pass
06:10 - positional argument plus keyword
06:12 - argument in the same function call
06:14 - right okay
06:16 - let's see if I pass simply name and this
06:20 - name is what
06:23 - okay now tell me now name is what
06:27 - positional argument we are passing and
06:29 - department is what department is equal
06:31 - to CS this is what
06:33 - keyword argument so this is a mixture of
06:35 - these two that is also fine it will work
06:36 - fine
06:39 - name is not defined
06:42 - okay we cannot write down sorry like
06:45 - name here we have to pass the value
06:47 - obviously it's calling after this it's
06:49 - not definition it's calling okay let's
06:51 - send this that was my mistake see hi
06:53 - Jenny are you from CS department so this
06:55 - is what positional
06:57 - first position so at first position we
06:59 - have name so this would be assigned to
07:00 - name and then
07:02 - Department this is not keyword but here
07:04 - you have to Note One Thing
07:07 - this this keyword argument
07:10 - should follow positional argument if you
07:13 - say let's pass
07:16 - first keyword argument department is
07:18 - equal to Cs and then pass Jenny
07:22 - then positional argument
07:24 - this will give error see as you can see
07:26 - the red line here right whenever you
07:28 - click whenever the cursor will be here
07:30 - then positional argument after keyword
07:33 - argument but that is not possible here
07:36 - keyword argument should be after
07:39 - positional argument let's run this and
07:41 - see
07:42 - syntax error positional argument follows
07:45 - keyword argument positional argument
07:47 - follows keyword argument but that is not
07:50 - that is not possible here that will give
07:52 - error so always first positional
07:55 - argument if position argument one two
07:58 - three four how many argument you want to
07:59 - provide according to the definition of
08:01 - this thing then provide
08:04 - at last provide keyword arguments right
08:07 - it's not like that first keyword and
08:09 - then after that positional no that will
08:11 - give error right okay now I hope
08:13 - positional versus keyword is clear to
08:15 - you guys these two argument now we have
08:18 - default arguments as the name suggests
08:20 - by default you can provide some value
08:22 - right okay let's first
08:25 - correct this thing
08:27 - first you should provide Jenny
08:29 - and then departments is equal to CS this
08:33 - is given so now
08:35 - a default argument like let's take an
08:38 - example
08:39 - like your mom knows generally how many
08:42 - chapatis you eat so she is going to make
08:44 - like this so my mom knows she only make
08:47 - two pages for me daily I don't need to
08:49 - you know specify every day like Mom I'll
08:52 - eat I'll have two chapatis but by
08:55 - default in my mom you know mom's brain
08:57 - or you can say in my mom's function
08:59 - there is an argument number of chapatis
09:02 - for Jenny is equal to 2 by default value
09:04 - is 2. right
09:06 - but sometimes someday if I am not hungry
09:10 - much and I'll say like Mom I I'll have
09:12 - only one chapati right so now
09:16 - she's going to make one chapati for me
09:18 - not two one right
09:21 - so by default argument you can provide I
09:24 - hope now you got this idea by default
09:26 - what is by default value so now by
09:29 - default value where you will provide at
09:31 - the definition of the function
09:34 - right so if suppose by default I provide
09:37 - let's take one more variable
09:40 - like subject
09:42 - one more argument parameter name is this
09:44 - and Department by default by default I
09:47 - am taking
09:48 - CS
09:50 - right so if you will not provide at the
09:52 - time of calling any value or for this
09:55 - department variable it's okay it will
09:58 - take this by default value CS so at the
10:01 - time of definition you have to provide
10:02 - that default value of the argument right
10:05 - you can provide as many default
10:08 - arguments as you want like all the three
10:10 - arguments can be default arguments name
10:13 - is any subject is equal to python
10:15 - department is equal to CS it's fine
10:17 - right so I'm providing only one default
10:20 - argument here so I just want to print
10:22 - here one more uh statement like
10:26 - do you teach and whatever subject I'll
10:28 - provide this thing
10:30 - it should print right
10:34 - okay
10:37 - sorry
10:39 - now at the time of calling if I pass
10:41 - something like this like to only Jenny
10:43 - and I'm providing like python
10:49 - only two values so see at the time of
10:51 - definition
10:53 - we are having three parameters so at the
10:55 - time of calling we are I'm only
10:57 - providing two
10:58 - values two arguments so it will work
11:02 - there'd be no error hi Jenny do you
11:04 - teach python are you from CS Department
11:06 - because for this parameter if you are
11:09 - not providing anything any value while
11:11 - calling the function it will take the
11:13 - default value
11:15 - so like this you can you know avoid that
11:19 - error like missing required positional
11:21 - argument data right by default just
11:23 - provide a value and if suppose I here
11:27 - provide this value like
11:29 - Hemi
11:30 - now like I am providing
11:33 - mom please make one chapati for me like
11:36 - this Amazon one chapati so this this
11:38 - will override the default value
11:41 - so one chapati means my one chapati
11:44 - today it will override the two chapatis
11:46 - whatever is there in my mom's mind right
11:51 - so let's run this
11:53 - C are you from me department now this
11:55 - time it will not take the default value
11:57 - if you provide the value
11:59 - during calling so it will take that
12:01 - value so this value is going to override
12:03 - the default value
12:04 - right I hope you got this thing so
12:07 - sometime if you you know
12:09 - forget to provide this value the default
12:12 - argument value it's okay it will not
12:13 - give an error it will take the default
12:15 - value right
12:16 - okay like if you are any fun in any
12:20 - function we have like name of the
12:22 - student age this type of thing roll
12:24 - number and like uh college name so
12:28 - college name would always be same so
12:29 - just provide that for that argument call
12:31 - his name add equal to value
12:33 - anyway X Y College XYZ college right
12:36 - because for all the student like the
12:38 - college name would be same so rather
12:40 - than providing again and again while
12:41 - calling just provide one time the
12:43 - default value so it will take for all
12:44 - the students that default value so in
12:46 - this kind of kind of situations default
12:48 - argument would be very helpful for you
12:49 - right now here now see this is
12:54 - Department as default argument and name
12:57 - and subject these are you can say known
13:00 - default so these are known as required
13:04 - arguments right if I'll not provide this
13:07 - thing
13:09 - if I am passing only Jenny right let's
13:11 - run this
13:13 - this time you will get an error see type
13:15 - error this greed this function missing
13:18 - one required positional argument so this
13:21 - is what because
13:23 - one Jenny so at first position we have
13:26 - name so in name Journey would be
13:27 - assigned now subject
13:29 - this is also required argument because
13:32 - we are not providing any default value
13:33 - so this is missing only one argument is
13:37 - missing see although we have
13:39 - three arguments three parameters and we
13:41 - are passing only one so it should give
13:43 - missing two but this department is
13:45 - default so it will not give any error
13:48 - only one missing required positional
13:50 - argument right so required arguments are
13:52 - you can say opposite of default
13:54 - arguments those are mandatory or
13:57 - required to provide at the time of
13:58 - function calling if you will not do this
14:00 - thing you will not provide those
14:01 - argument it will give error right now
14:05 - one more important point about this you
14:08 - can just note down this thing about
14:09 - default arguments or what
14:11 - these default arguments
14:14 - should be provided after
14:17 - the known default arguments right see
14:21 - if I provide like uh if I say subject is
14:26 - equal to
14:27 - default value I am providing subject is
14:30 - python and this is I'm not providing any
14:34 - default value for Department one for
14:36 - subject it's python right and Jenny
14:40 - I know I have to pass one name subject
14:42 - is default I have and department so the
14:45 - department I am passing this time CS but
14:48 - still it will be better see the red line
14:49 - let's run this and I'll show you the
14:51 - error syntax error see
14:53 - in line number one only known default
14:56 - argument follows default argument
15:00 - so department is
15:01 - known default argument and it follows
15:04 - the default argument but that is not
15:07 - possible here
15:08 - always the default argument should
15:11 - follow known default argument right
15:14 - means
15:16 - first provide known default argument in
15:19 - the parameter right and then default
15:23 - argument this is not possible Right
15:26 - so if I do something like this name
15:29 - department and subject is equal to
15:31 - python that's fine just provide name
15:34 - because name and Department these are
15:35 - what
15:37 - we are providing Jenny and CS or these
15:39 - are positional argument this this time
15:41 - but if you want to provide keyword then
15:43 - name is equal to Jenny department is
15:45 - equal to DPT is equal to CS that is also
15:47 - fine let's run this and now it will work
15:49 - fine
15:50 - right
15:51 - so this is the point to note here about
15:55 - default arguments and required arguments
15:57 - I have told you now next point is we
15:59 - have arbitrary arguments now suppose
16:02 - some cases are there we have a function
16:05 - let's take another function here rather
16:07 - than this we are taking add function
16:09 - then you will get those arguments
16:10 - arbitrary arguments better
16:13 - we are defining a function
16:16 - like add
16:18 - now I don't know the programmer or like
16:22 - I am the program right now so I don't
16:23 - know how many argument I should pass
16:26 - maybe sometime I want to add only two
16:28 - number
16:29 - two and three and another time I want to
16:32 - add three number then four number then
16:34 - five numbers
16:35 - so every time I'm changing the numbers
16:37 - the number of those numbers right
16:41 - or maybe the number of the parameters or
16:44 - the number of arguments vary every time
16:47 - I call the function
16:49 - so I cannot directly fix like what if
16:52 - you provide two arguments and you just
16:54 - have to do like add
16:56 - maybe two values and just like a plus b
17:01 - and simply
17:04 - x five and seven two numbers okay
17:08 - next time if I want to add three numbers
17:10 - then four numbers and five numbers then
17:13 - if I want to add three numbers five
17:15 - seven nine so it will not work here
17:17 - because let's run this
17:20 - see add takes two position argument but
17:23 - three are given you are giving three
17:24 - argument but it will take only two
17:26 - arguments so it will give error so what
17:28 - you will do
17:29 - maybe I just want to provide next time
17:31 - four argument 10 argument 20 arguments
17:33 - so I don't know in advance like how many
17:37 - arguments I will provide to the set
17:39 - function so here we can provide variable
17:42 - length argument or you can say arbitrary
17:44 - arguments so how can you provide those
17:45 - arguments just a strict sign the star
17:49 - and
17:51 - one variable names so suppose variable
17:53 - name I'm taking a
17:55 - a b c numbers anything you can take
17:58 - right suppose a I am taking or you can
18:01 - say rather than this numbers
18:05 - it should be a meaningful name because
18:07 - many numbers I am providing not just
18:09 - only one so in numbers I am storing
18:11 - those variables right so I'm providing
18:14 - here five seven nine
18:16 - so once you call this ad with 579 means
18:19 - this numbers this
18:21 - will accept 579 and it will become a
18:24 - tuple
18:25 - right like this Tuple is what like this
18:28 - 5 comma 7 comma 9. Now I want to add
18:33 - these three numbers
18:35 - right so just to access each element of
18:38 - this Tuple what we have an equator we
18:41 - have a loop in this
18:47 - I in
18:49 - just the name numbers sorry
18:53 - numbers and then add like C is equal to
18:56 - C
18:57 - Plus
18:59 - hi
19:00 - and then print C
19:03 - okay
19:09 - okay this you have to comment this out
19:11 - five seven nine and at first suppose uh
19:15 - C just set C is equal to zero first so
19:18 - that it will not take any garbage value
19:20 - c means the sum the variable where I'm
19:22 - putting the sum
19:24 - now it will work see
19:26 - sum is 21.
19:29 - next time if I want to add like add
19:32 - and 1 comma 2 comma three comma four
19:34 - comma five like this six numbers so this
19:37 - also will work
19:39 - okay for both sum is 21 so let's provide
19:42 - here one more nine
19:45 - run
19:46 - sum is 21 and this time sum is 30.
19:49 - right so every time we are calling the
19:51 - function we are providing varying number
19:53 - of arguments right so for that we are
19:57 - providing like variable we can use
19:59 - arbitrary argument this is arbitrary
20:02 - argument or you can say variable length
20:03 - argument
20:04 - but here you have to note something
20:07 - this single string there are single
20:09 - asterisk right so single asterisk is
20:13 - used to accept only arbitrary positional
20:16 - arguments see two types we have
20:18 - arbitrary positional argument and
20:20 - arbitrary keyword argument so with
20:22 - single strike this numbers can only
20:25 - accept all the
20:27 - arbitrary you can say positional
20:30 - arguments only not keyword argument
20:32 - right these are C positional argument we
20:34 - are not providing any keyword here just
20:37 - the values
20:39 - we are not associating with this with a
20:41 - with any like name like name is equal to
20:44 - genu department is equal to CS in those
20:46 - cases right so there's a difference so
20:49 - this for the arbitrary positional
20:51 - argument the difference between
20:51 - arbitrary positional argument and
20:53 - arbitrary keyword argument we will be
20:54 - discussing in next video I hope now
20:56 - these Basics are clear to you guys
20:58 - default positional keyword and arbitrary
21:01 - or variable length arguments and when we
21:03 - are using those arguments right the
21:05 - situations
21:07 - so now I'll see in the next video till
21:09 - then bye take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of planning Python programming language in the previous video we have seen functions with arguments how to define a function with argument how to call that function what are arguments how to pass arguments to a function difference between parameter and arguments right but now we have different types of arguments in Python right so in this video we'll be talking about all the arguments the types of arguments in Python so basically we have four types of argument default positional keyword and arbitrary or this arbitrary is also known as variable length arguments further arbitrary are of two types like arbitrary positional argument and arbitrary keyword argument right and one is the we also discussed about required arguments right so basically these types of arguments we have now one by one we will discussing all the types of argument but with the help of program practically I will show you rather than on this whiteboard right so let's see okay so let's create a new file here and we'll be discussing here types of argument dot p y right we will see this thing with the help of example okay simple example let's take that grid function in the previous video also we have seen that function so this was our function grid we are passing only one argument here suppose I want to pass two argument like uh Department also so just one more variable name like one more parameter and Jenny and here I will pass like CS right and one more print statement here I want to print using F string are you from this department whatever value will pass here in this department from this department it will fetch the value right okay so let's run this and what it will show hi January from computer science department right okay now what is the problem if I pass here something like this first I'll pass this CS suppose and then I'll pass Jenny hi CS are you from Journey Department it doesn't make any sense right it's nonsense so what is the problem here because first we have passed CS because if somewhere if the user or anyone who is using this program the programmer is not aware about this definition right the definition of the function and yeah he knows that this there is a function grid function and it will accept two argument one is name and one is Department but he's not aware about the order the first name or first department or what right so maybe he'll call the function something like something like this first if you pass department and then Jenny then it will give it will not give any error but obviously it will give some nonsense output right we don't know that that thing so what we can do so here here see these are whatever we will pass here like first we have passed Jenny and then we have passed CS right now yeah this is making sense because Jenny would be go to name and CS would go to department so these are positional Department sorry positional arguments right means we are not specifying anything like which this you know which parameter would be associated with which value we are not specifying anything we are just passing two values and here it is it will accept two values so the first Jenny would Jenny is at first position so this would be assigned to whatever parameter at first position that parameter is name so Jenny would be assigned to name then second position is CS then second position parameter name is department so like that this would be assigned in order wise right so these are positional Department sorry positional arguments right not departments positional arguments I hope this is clear to you guys now the problem you got with positional positional arguments now to solve this problem we have another arguments you know department and other arguments that are keyword arguments right key word as the name suggests key is like value and word is specific what we will provide so how to provide those keyword arguments see first if I know like I don't know the definition of this function this is hidden from me but I know there is a function greet which will accept two arguments one is name one is department so I will prefer to provide keyword arguments like having two parameter name and DPT department so I will associate this thing like name equal to Jenny and the EPT this variable name equal to CS so I'll associate the value with the parameter name so this is what the name is your like a keyword and key the value is Jenny so these are keyword arguments now if I pass if I reorder this thing like if I pass first Department and then the value of J then also it will work fine see hi Jenny are you from computer science department CS Department it is working fine because if you change the order that also you know will not cause any nonsense kind of thing because we have associated the parameter and the value while calling the function so you don't need to aware about the order of the arguments while you are using keyword arguments that is a good point so why we use keyword argument that I think clear to you guys and there is mixture of positional and keyword argument also also possible like we can pass positional argument plus keyword argument in the same function call right okay let's see if I pass simply name and this name is what okay now tell me now name is what positional argument we are passing and department is what department is equal to CS this is what keyword argument so this is a mixture of these two that is also fine it will work fine name is not defined okay we cannot write down sorry like name here we have to pass the value obviously it's calling after this it's not definition it's calling okay let's send this that was my mistake see hi Jenny are you from CS department so this is what positional first position so at first position we have name so this would be assigned to name and then Department this is not keyword but here you have to Note One Thing this this keyword argument should follow positional argument if you say let's pass first keyword argument department is equal to Cs and then pass Jenny then positional argument this will give error see as you can see the red line here right whenever you click whenever the cursor will be here then positional argument after keyword argument but that is not possible here keyword argument should be after positional argument let's run this and see syntax error positional argument follows keyword argument positional argument follows keyword argument but that is not that is not possible here that will give error so always first positional argument if position argument one two three four how many argument you want to provide according to the definition of this thing then provide at last provide keyword arguments right it's not like that first keyword and then after that positional no that will give error right okay now I hope positional versus keyword is clear to you guys these two argument now we have default arguments as the name suggests by default you can provide some value right okay let's first correct this thing first you should provide Jenny and then departments is equal to CS this is given so now a default argument like let's take an example like your mom knows generally how many chapatis you eat so she is going to make like this so my mom knows she only make two pages for me daily I don't need to you know specify every day like Mom I'll eat I'll have two chapatis but by default in my mom you know mom's brain or you can say in my mom's function there is an argument number of chapatis for Jenny is equal to 2 by default value is 2. right but sometimes someday if I am not hungry much and I'll say like Mom I I'll have only one chapati right so now she's going to make one chapati for me not two one right so by default argument you can provide I hope now you got this idea by default what is by default value so now by default value where you will provide at the definition of the function right so if suppose by default I provide let's take one more variable like subject one more argument parameter name is this and Department by default by default I am taking CS right so if you will not provide at the time of calling any value or for this department variable it's okay it will take this by default value CS so at the time of definition you have to provide that default value of the argument right you can provide as many default arguments as you want like all the three arguments can be default arguments name is any subject is equal to python department is equal to CS it's fine right so I'm providing only one default argument here so I just want to print here one more uh statement like do you teach and whatever subject I'll provide this thing it should print right okay sorry now at the time of calling if I pass something like this like to only Jenny and I'm providing like python only two values so see at the time of definition we are having three parameters so at the time of calling we are I'm only providing two values two arguments so it will work there'd be no error hi Jenny do you teach python are you from CS Department because for this parameter if you are not providing anything any value while calling the function it will take the default value so like this you can you know avoid that error like missing required positional argument data right by default just provide a value and if suppose I here provide this value like Hemi now like I am providing mom please make one chapati for me like this Amazon one chapati so this this will override the default value so one chapati means my one chapati today it will override the two chapatis whatever is there in my mom's mind right so let's run this C are you from me department now this time it will not take the default value if you provide the value during calling so it will take that value so this value is going to override the default value right I hope you got this thing so sometime if you you know forget to provide this value the default argument value it's okay it will not give an error it will take the default value right okay like if you are any fun in any function we have like name of the student age this type of thing roll number and like uh college name so college name would always be same so just provide that for that argument call his name add equal to value anyway X Y College XYZ college right because for all the student like the college name would be same so rather than providing again and again while calling just provide one time the default value so it will take for all the students that default value so in this kind of kind of situations default argument would be very helpful for you right now here now see this is Department as default argument and name and subject these are you can say known default so these are known as required arguments right if I'll not provide this thing if I am passing only Jenny right let's run this this time you will get an error see type error this greed this function missing one required positional argument so this is what because one Jenny so at first position we have name so in name Journey would be assigned now subject this is also required argument because we are not providing any default value so this is missing only one argument is missing see although we have three arguments three parameters and we are passing only one so it should give missing two but this department is default so it will not give any error only one missing required positional argument right so required arguments are you can say opposite of default arguments those are mandatory or required to provide at the time of function calling if you will not do this thing you will not provide those argument it will give error right now one more important point about this you can just note down this thing about default arguments or what these default arguments should be provided after the known default arguments right see if I provide like uh if I say subject is equal to default value I am providing subject is python and this is I'm not providing any default value for Department one for subject it's python right and Jenny I know I have to pass one name subject is default I have and department so the department I am passing this time CS but still it will be better see the red line let's run this and I'll show you the error syntax error see in line number one only known default argument follows default argument so department is known default argument and it follows the default argument but that is not possible here always the default argument should follow known default argument right means first provide known default argument in the parameter right and then default argument this is not possible Right so if I do something like this name department and subject is equal to python that's fine just provide name because name and Department these are what we are providing Jenny and CS or these are positional argument this this time but if you want to provide keyword then name is equal to Jenny department is equal to DPT is equal to CS that is also fine let's run this and now it will work fine right so this is the point to note here about default arguments and required arguments I have told you now next point is we have arbitrary arguments now suppose some cases are there we have a function let's take another function here rather than this we are taking add function then you will get those arguments arbitrary arguments better we are defining a function like add now I don't know the programmer or like I am the program right now so I don't know how many argument I should pass maybe sometime I want to add only two number two and three and another time I want to add three number then four number then five numbers so every time I'm changing the numbers the number of those numbers right or maybe the number of the parameters or the number of arguments vary every time I call the function so I cannot directly fix like what if you provide two arguments and you just have to do like add maybe two values and just like a plus b and simply x five and seven two numbers okay next time if I want to add three numbers then four numbers and five numbers then if I want to add three numbers five seven nine so it will not work here because let's run this see add takes two position argument but three are given you are giving three argument but it will take only two arguments so it will give error so what you will do maybe I just want to provide next time four argument 10 argument 20 arguments so I don't know in advance like how many arguments I will provide to the set function so here we can provide variable length argument or you can say arbitrary arguments so how can you provide those arguments just a strict sign the star and one variable names so suppose variable name I'm taking a a b c numbers anything you can take right suppose a I am taking or you can say rather than this numbers it should be a meaningful name because many numbers I am providing not just only one so in numbers I am storing those variables right so I'm providing here five seven nine so once you call this ad with 579 means this numbers this will accept 579 and it will become a tuple right like this Tuple is what like this 5 comma 7 comma 9. Now I want to add these three numbers right so just to access each element of this Tuple what we have an equator we have a loop in this I in just the name numbers sorry numbers and then add like C is equal to C Plus hi and then print C okay okay this you have to comment this out five seven nine and at first suppose uh C just set C is equal to zero first so that it will not take any garbage value c means the sum the variable where I'm putting the sum now it will work see sum is 21. next time if I want to add like add and 1 comma 2 comma three comma four comma five like this six numbers so this also will work okay for both sum is 21 so let's provide here one more nine run sum is 21 and this time sum is 30. right so every time we are calling the function we are providing varying number of arguments right so for that we are providing like variable we can use arbitrary argument this is arbitrary argument or you can say variable length argument but here you have to note something this single string there are single asterisk right so single asterisk is used to accept only arbitrary positional arguments see two types we have arbitrary positional argument and arbitrary keyword argument so with single strike this numbers can only accept all the arbitrary you can say positional arguments only not keyword argument right these are C positional argument we are not providing any keyword here just the values we are not associating with this with a with any like name like name is equal to genu department is equal to CS in those cases right so there's a difference so this for the arbitrary positional argument the difference between arbitrary positional argument and arbitrary keyword argument we will be discussing in next video I hope now these Basics are clear to you guys default positional keyword and arbitrary or variable length arguments and when we are using those arguments right the situations so now I'll see in the next video till then bye take care
