With timestamps:

00:00 - so in the series of learning
00:02 - object-oriented programming in c plus
00:03 - plus in the previous video we have
00:05 - discussed what is object-oriented
00:07 - programming and how it is different from
00:09 - processor oriented programming the
00:11 - difference we have seen the basics about
00:13 - object-oriented programming like
00:15 - now in this video we'll see oops concept
00:17 - right before we deep down into the
00:19 - object-oriented programming in c plus
00:21 - plus you must
00:22 - have some idea about the concepts
00:25 - the no the things because of those
00:27 - things we call it as object-oriented
00:29 - programming what are those concepts like
00:31 - class objects
00:33 - abstraction encapsulation inheritance
00:36 - polymorphism six concepts are there so
00:38 - in this video i am going to talk about
00:39 - these concepts briefly
00:42 - i just want you to get familiar with
00:44 - these concepts in detail we will discuss
00:46 - about these concepts one by one in later
00:48 - videos once we will move you know deep
00:51 - down into c plus plus course right but
00:53 - at first you must be familiar about
00:55 - these concepts like what are these
00:57 - concept at least the basic idea you
00:59 - should have right so those things will
01:02 - discuss in this video every concept in
01:04 - brief
01:05 - i'll relate it with the real life
01:07 - example i hope you will get it right
01:10 - but before that i just want to tell you
01:11 - one thing with theory practice is also
01:13 - important the key to success in any
01:15 - interview specifically in programming
01:17 - interview coding interview is practice
01:19 - practice as much as possible it's not
01:21 - like that start practicing coding
01:22 - problems just you know few days before
01:24 - your interview no the best method of
01:27 - preparation is incorporating your
01:28 - interview preparation into your everyday
01:31 - coding practice
01:33 - it will
01:34 - help to improve your logic building
01:36 - skills your thinking capability your
01:38 - problem solving skills and that's
01:39 - exactly the industry wants a problem
01:42 - solver but the question is how to get
01:44 - started from where you can practice the
01:46 - problems coding problems so here is the
01:49 - solution
01:50 - this is the practice page of geeks for
01:52 - geeks here you will get many coding
01:55 - questions
01:57 - different different topics like from dsa
01:59 - array linked list stack in algorithm you
02:01 - will get different coding
02:04 - questions on the topic searching sorting
02:06 - and many algorithm based on many
02:07 - algorithm as well as company specific
02:10 - coding questions practice questions you
02:12 - also get suppose if you want
02:14 - to practice the problems which are being
02:16 - asked in amazon interview then just
02:18 - click on that and you can you will find
02:20 - out the list of problems and you can
02:22 - start solving these problems
02:24 - and it is not good for students only but
02:27 - as well as for working professional if
02:28 - you are working somewhere and you want
02:30 - to switch you are applying for new
02:31 - position then also it will help you
02:33 - practicing these problems will
02:35 - definitely help you so i think this is a
02:37 - great resource to practice these coding
02:39 - problems don't worry the link i'll put
02:42 - in the description box of this video you
02:43 - can go and check out now let's back to
02:45 - the topic
02:46 - so what are hoops concepts six concepts
02:49 - are there basically
02:51 - these are six concepts in object
02:52 - oriented program see as the name
02:54 - suggests object oriented so obviously
02:56 - object is the main thing everything
02:58 - revolve about the around the object so
03:00 - you'll see these concept and these four
03:02 - are known as you can say pillars
03:06 - pillars of object oriented programming
03:08 - but we will discuss these
03:10 - six things all these six concepts so let
03:13 - me just take one example see
03:16 - let's take one example like student
03:18 - maybe you will you know related better
03:20 - student
03:22 - so
03:24 - simply student in student in your class
03:27 - you have male as well as female student
03:30 - right
03:33 - now every student is having some common
03:35 - properties like
03:37 - two hands two legs two eyes nose height
03:42 - weight color
03:44 - these are some common properties they
03:45 - have
03:47 - right
03:47 - and some functions like
03:49 - sleep
03:50 - can eat
03:52 - can study
03:53 - or speak
03:55 - and sit here these are some common
03:58 - functions
03:59 - right
04:00 - every student
04:02 - is having either male or female so we
04:05 - can consider it like a student is a
04:08 - class
04:10 - which
04:12 - is
04:13 - what it is like you can say a user
04:16 - defined data type in technical terms if
04:18 - you say then it is a user definer type
04:20 - as in c we have structures user defined
04:23 - data types which is having
04:25 - some data members and member functions
04:28 - now what are those data members
04:31 - the attributes the properties they have
04:33 - like student is a class and
04:36 - having
04:37 - like
04:38 - you can say
04:39 - legs
04:41 - and hands some body parts you can say
04:43 - then you can say height
04:45 - weight
04:48 - and color
04:50 - right
04:51 - these are
04:52 - some properties
04:56 - or you can say attributes
04:58 - or you can say data
05:01 - or you can say data members so whatever
05:03 - the data
05:05 - that would be considered as
05:08 - in the form of that would be stored in
05:09 - the form of variables
05:11 - in the class
05:12 - next functions what we can have like eat
05:17 - sleep
05:19 - and sit
05:21 - speak
05:23 - and many more
05:25 - so these are some common functions
05:27 - right so class is basically what
05:30 - a blueprint of an entity
05:33 - which defines the core properties and
05:36 - functions of that entity now entity
05:39 - means one entity is
05:41 - male and female you know students actual
05:43 - students are entities like student name
05:46 - can be
05:47 - ram
05:48 - you can say jenny
05:50 - rahul nisha
05:53 - these are some students
05:55 - so male students female students
05:58 - right so these are and you can say real
06:01 - world entities and these are known as
06:04 - known as objects
06:07 - okay in my class i have a student like
06:09 - rahul rahul
06:10 - is an object
06:12 - right
06:13 - of class
06:15 - male class
06:17 - right
06:19 - two more classes are there you can say
06:21 - like male and female
06:23 - here we have male
06:25 - class
06:28 - and female
06:33 - so object is what
06:35 - a real world entity
06:37 - rahul
06:39 - physical
06:40 - existence rahul is having physical
06:42 - existence
06:43 - class is just a logical thing it's just
06:46 - a definition it's just a blueprint
06:50 - so no memory allocation would be done
06:52 - when you
06:54 - define a class no memory allocation
06:56 - because it is just a logical thing it's
06:59 - not physical object is physical thing
07:02 - now we can access these properties and
07:05 - functions of a class using objects of
07:07 - these class or you can say instance of
07:09 - the this class
07:13 - right
07:14 - rahul is
07:15 - what you can say an object of male class
07:18 - so whatever is there in male the
07:19 - attribute and the functions rahul can
07:22 - access using rahul we can access those
07:23 - properties and those functions so rahul
07:26 - is physical thing rahul is having some
07:28 - space
07:29 - right in this environment here in the
07:32 - class right so same when you create an
07:34 - object then only memory allocation would
07:37 - be done
07:38 - in the if i you know say in the form of
07:40 - programming so class is what it is just
07:43 - a blueprint or a prototype
07:45 - through which we can create objects or
07:47 - you can say it is you can say group of
07:50 - objects which share common properties
07:53 - right common properties in common you
07:55 - can say attributes
07:56 - these are attributes this is you can say
07:59 - behavior or methods behavior or methods
08:02 - or functions we can say don't worry i
08:04 - have notes also i'll provide you notes
08:06 - everything i have written in my notes
08:08 - handwritten notes right
08:10 - you just have to understand now
08:12 - right what is class and what is object
08:15 - now see
08:16 - object also i hope you got it right it's
08:19 - a physical thing or it's a real world
08:21 - entity
08:22 - right which is having some behavior or
08:26 - some properties of its own behavior and
08:28 - properties
08:29 - fine that is object
08:32 - so like suppose i have an object
08:35 - one object is
08:37 - ram
08:43 - you can say nisha
08:45 - and pile
08:47 - these are some objects right
08:49 - so objects were just an instance of a
08:51 - class rahul and these are instances of
08:53 - male class initial pile these are
08:55 - instances of female class
08:56 - so
08:58 - they they are having their own
09:00 - data
09:01 - and functions or you can say the code
09:04 - right each object is having its own
09:06 - data and the functions the functions
09:09 - which can manipulate that data each
09:11 - function has its own function and data
09:13 - like ram is having its own
09:16 - you can say height weight color
09:19 - right and on function is there ram is
09:21 - having its own functions rahul is also
09:23 - having different height color and weight
09:25 - every object is having its own
09:27 - you can say code and uh
09:29 - data
09:30 - using code or the functions we can
09:32 - manipulate that data fine and each
09:34 - object can interact with each other with
09:36 - the help of message passing
09:38 - and
09:39 - for interacting they don't need to have
09:43 - the internal knowledge of their data and
09:45 - code
09:47 - suppose if i want to rahul want to
09:50 - communicate with ram
09:52 - so it's not like that rahul has to know
09:54 - the internal everything about ram right
09:57 - what rahul need to know
10:00 - in which form the message would be
10:02 - accepted or you can say the language
10:03 - rahul understand hindi or english that's
10:05 - it and in which language rahul will
10:07 - respond that's it
10:10 - so same in programming one object can
10:12 - interact with other object without
10:14 - knowing the internal detail the code or
10:16 - the ah no the data of that object what
10:19 - just need to know the type of message
10:22 - would be accepted by other object and
10:24 - what type of output the what type of
10:26 - response
10:28 - that object will give right so that the
10:31 - objects can also communicate with each
10:32 - other using message passing
10:34 - so class is just a logical thing it
10:36 - suggests a blueprint a blueprint to
10:38 - create objects and objects are physical
10:40 - thing
10:41 - identify you know you can identify that
10:43 - entity real world entity which is having
10:46 - its own you can say properties and
10:48 - behavior right
10:50 - now
10:51 - first thing we'll discuss inheritance
10:55 - because through this diagram you can get
10:56 - it better see
10:58 - male and female
11:00 - these students are also having like
11:03 - these properties
11:05 - and these functions
11:07 - and female will also have female in a
11:09 - student will also have these properties
11:11 - and functions
11:12 - and these properties and function we
11:13 - have already defined in a class student
11:16 - so rather than defining these things
11:19 - rather than defining these functions and
11:20 - everything here also here also
11:23 - we will do what we just
11:26 - reuse this thing and how you can reuse
11:29 - this is one of the most important
11:31 - characteristics so you can say pillar of
11:33 - oop
11:35 - oop
11:36 - oops you can inherit these properties
11:38 - through inheritance so
11:43 - they will inherit these properties here
11:45 - also and here also
11:46 - so whatever is there these
11:49 - functions you can say these functions
11:51 - and the attributes
11:52 - attributes means the variables and the
11:54 - functions
11:55 - right here also and here also
12:00 - and
12:00 - male and female each class can have
12:03 - their extra their own attributes
12:06 - like some body parts in female are
12:08 - having which male are not having so they
12:11 - can have their own
12:12 - data their own function
12:15 - right male can also have their own
12:17 - function and data
12:19 - and thus common properties they can
12:21 - inherit from this class from this class
12:23 - rather than rewriting again and again so
12:25 - this is what beauty of inheritance
12:27 - these are known as child class and or
12:30 - you can say derived class and this is
12:32 - known as base class or parent class
12:35 - right so code reusability is there
12:39 - so that is why
12:41 - rather than writing same code again and
12:42 - again
12:43 - productivity would increase we can reuse
12:46 - some other code and we can just
12:49 - do whatever we want to do one more thing
12:51 - in object i want to tell in technical
12:53 - terms we say objects are having its own
12:56 - data and code through which we can
12:58 - manipulate the data like ram is having
13:01 - its own data and code means the
13:04 - functions this code right whatever we
13:06 - write here so if ram suppose i can say
13:10 - if ram
13:11 - will eat more then
13:14 - weight would increase
13:16 - so through these functions we can modify
13:19 - these data
13:21 - of that object
13:23 - it's not like that if rahul will eat
13:25 - more
13:26 - then
13:27 - weight of ram
13:29 - would increase no
13:32 - because
13:33 - these details are specific to these
13:35 - objects if jenny will eat more
13:39 - weight of jenny
13:41 - will increase not the weight of nisha or
13:43 - pile
13:44 - right
13:46 - so this data and code are binded
13:48 - together in the these objects
13:51 - using that code we can manipulate the
13:53 - data of that object only right i hope
13:55 - you got class objects and inheritance
13:57 - now we will see what is abstraction
14:00 - see
14:02 - let's take one example first
14:04 - suppose there is a coffee machine
14:06 - what is there one button is there make
14:08 - coffee you just press this button and
14:11 - your coffee is ready right
14:13 - if a machine second machine is something
14:15 - like that
14:16 - there we have a button like
14:19 - add
14:20 - some cold water to the pan
14:22 - boil the water second button is boil the
14:24 - water third button is add one cup of
14:27 - coffee there add sugar this something
14:30 - like this we have many buttons the
14:33 - complete process we have
14:35 - right
14:37 - so which one is better
14:38 - just the first machine having one button
14:41 - make coffee you just press this button
14:42 - and coffee is ready you don't need to go
14:45 - into the detail the implementation part
14:48 - means the making part of that coffee
14:51 - right
14:52 - so
14:53 - means
14:54 - in first machine we are just hiding the
14:58 - detail the process of making a coffee
15:00 - from the user
15:01 - that is what abstraction
15:04 - hiding implementation detail from
15:07 - the other world
15:08 - only showcase
15:10 - the relevant details
15:12 - which are relevant to the world which
15:14 - are relevant to the other users only
15:16 - showcase those details hiding the
15:18 - implementation detail that is just
15:20 - abstraction like when you
15:22 - switch on your fan you don't know what
15:24 - is happening behind
15:26 - there you just switch on you just press
15:29 - that button and your ac is on your fan
15:31 - is on your tv zone like your dvd player
15:34 - once you switch on your you know you can
15:37 - say the tv and the dvd player or that
15:40 - you can say what is that
15:42 - setup box
15:44 - then
15:45 - on the screen the whole world is in your
15:47 - room you can see everything
15:50 - right but behind the scene what is
15:52 - happening how you are getting that data
15:55 - on your tv on your you know set of works
15:57 - through satellite or what is happening
15:59 - you don't know
16:00 - right so that is what abstraction
16:03 - same
16:04 - hiding something
16:06 - into a function or
16:08 - in java we can uh you can we can achieve
16:10 - this abstraction with the help of
16:12 - interfaces and abstract classes 100
16:15 - in abstraction we can achieve in java
16:17 - right so hiding something
16:19 - into a function or you know an interface
16:22 - these kind of things that is called as
16:24 - abstraction
16:25 - because when you call a function
16:27 - sometimes you don't need to
16:29 - go into the detail of that function that
16:31 - how that process is doing you just need
16:34 - an output you call that function and you
16:36 - need the output that's it because see
16:38 - there are in large scale application
16:40 - there is a large code base
16:42 - if you go in the detail of each and
16:44 - every function
16:46 - then it would take you even months to
16:48 - read out all the functions and you would
16:50 - never code
16:53 - right
16:53 - so rather than
16:55 - going into the implementation detail
16:58 - just
16:59 - showcase the relevant details only that
17:01 - is simple abstraction
17:03 - like in this you can take some other
17:05 - classes their animal or you can say
17:07 - alien
17:11 - i hope spelling is correct
17:13 - maybe animals or aliens know that like
17:16 - student or male 1 female can
17:18 - walk can uh you know eat can do these
17:21 - kind of things but how
17:24 - they don't know the implementation
17:26 - detail so that is simply obstruction in
17:28 - programming also we can achieve
17:30 - obstruction but how we will discuss
17:31 - later
17:33 - just i you know i just want to get you
17:36 - familiar with these terms
17:38 - basic terms
17:40 - next is encapsulation
17:42 - as the name suggests
17:44 - in capsule capsule means means you have
17:48 - seen a capsule medicine the tablet
17:50 - there we have a wrapper in which we have
17:52 - some medicine
17:53 - right
17:54 - there is a wrapper around that
17:56 - that thing right
17:58 - so that is what we are hiding the inner
18:00 - thing we are hiding
18:02 - from the
18:03 - inner whatever is there in the capsule
18:05 - we are hiding that thing
18:06 - by putting the wrapper from outside the
18:08 - world
18:09 - right like around the chocolate we have
18:11 - a wrapper
18:12 - so that chocolate is hidden from the
18:14 - outside world
18:15 - with the help of that wrapper right so
18:17 - sometimes encapsulation is also known as
18:19 - referred as data hiding right so
18:22 - wrapping up of these things data and the
18:25 - functions into a single unit that is
18:26 - known as encapsulation or you can say
18:28 - like something like this you can take
18:30 - this example
18:31 - binding
18:32 - this
18:33 - this you know data and the code together
18:36 - in one unit is known as encapsulation so
18:40 - simply what encapsulation we can say
18:42 - like here in a class this is a class
18:45 - in class we have
18:47 - we have data
18:49 - or attributes you can say
18:51 - right and we have
18:54 - methods
18:55 - or functions or behavior
18:58 - so binding these data and these methods
19:01 - or the functions together this is known
19:03 - as encapsulation in c plus plus that's
19:05 - it this is encapsulation
19:07 - right
19:08 - now you can hide
19:10 - this data from the outside world
19:13 - because we have a uh in a concept we
19:16 - have something in c plus but that is x
19:17 - specified
19:22 - means you just keep the data private
19:26 - public private protected three
19:27 - specifiers so you just keep the data
19:29 - private
19:30 - right
19:31 - and
19:32 - this suppose this object is having ram
19:38 - this is the data forum
19:40 - and these are methods
19:43 - these are the methods right
19:45 - for rahul also this is the data and
19:47 - these are methods
19:50 - so you can keep that data private
19:53 - only these functions these are public
19:55 - methods so only these functions these
19:57 - methods can
19:58 - can what
20:00 - access this data
20:02 - this object another object
20:04 - cannot access this data or another class
20:06 - cannot access that data
20:09 - let's take uh one example like
20:12 - uh we have in college we have multiple
20:14 - departments csc mechanical civil ec
20:17 - right suppose i am faculty in computer
20:19 - science department and i need one
20:22 - information i need some data from
20:23 - mechanical department
20:25 - right so it's not like that i can
20:27 - directly access the data from mechanical
20:29 - department
20:30 - right
20:31 - i will first talk to i will reach out to
20:34 - a person in mechanical department right
20:37 - and i i would request to that person
20:40 - to get me that data
20:42 - and after that through that person i can
20:44 - access the data right directly i cannot
20:46 - access exist
20:47 - so the data of mechanical department the
20:50 - employees or the faculties of mechanical
20:52 - department completely they are a single
20:55 - unit known as mechanical department
20:59 - so they are wrapped up they are in camps
21:00 - encamps encapsuled
21:02 - so the data is private to mechanical
21:05 - department only the faculties or
21:06 - employees of that department can access
21:08 - that data
21:09 - so this will increase the privacy the
21:11 - security of the data that is why in the
21:13 - previous video i have told you the main
21:15 - reason we have switched from pop to oop
21:18 - is data security and through
21:20 - encapsulation we can achieve that thing
21:21 - data security privacy by
21:24 - keeping the data private because we have
21:26 - access specifier concept here just keep
21:28 - all your data private
21:31 - and only
21:32 - these methods
21:35 - only the methods of that class access
21:38 - that data only right
21:40 - no other class can access that data if
21:43 - another class want to access that data
21:45 - they will communicate through these
21:47 - functions
21:48 - right and through these functions they
21:50 - can access that private data right we
21:52 - have some concept of friend function
21:53 - friend class but that also will discuss
21:55 - later will not go in this much detail
21:58 - i hope you know the basic idea of
22:00 - encapsulation right
22:02 - so it is you can say just a shield uh
22:04 - which
22:05 - prevents your data from being accessed
22:08 - by the code outside of that shield
22:11 - right or you can say the data or the
22:13 - variable this is the data or you can say
22:15 - the variables
22:17 - of one class
22:18 - can be accessed by the methods of its
22:21 - own class not by the other class
22:24 - right like other classes alien so they
22:26 - cannot access this data
22:29 - this data of human being class or a
22:30 - student class
22:32 - and how to achieve this encapsulation
22:33 - just keep your data private
22:37 - use a specifier private
22:39 - and keep your methods public and using
22:42 - these methods you can manipulate this
22:44 - data only these methods these functions
22:47 - of that class only can access this data
22:49 - private data this is how you can achieve
22:51 - encapsulation that's it
22:53 - now next is polymorphism see this poly
22:56 - means many and move means
22:59 - forms
23:00 - many forms polymorphism
23:02 - now how this would be related
23:05 - let's take a real life example here see
23:09 - me jenny is one person right
23:13 - but i have multiple forms or you can say
23:15 - many behaviors or many characteristics i
23:17 - can i have like
23:19 - i am i'm a faculty right
23:22 - i am a suppose a class teacher a tutor
23:24 - of any class
23:26 - uh or a friend or a colleague
23:30 - so
23:31 - with
23:32 - according to the situation i will change
23:34 - my behavior
23:35 - jenny is one only one person only but
23:38 - having multiple forms
23:41 - as a faculty like if i'm interacting
23:42 - with hod my behavior would be another
23:45 - means different
23:46 - if i'm in class as a class teacher or a
23:49 - tutor
23:50 - then my behavior would be different with
23:52 - a friend my behavior would be different
23:54 - with my colleagues suppose not friend
23:56 - but just a colleague my behavior would
23:58 - be different right so i can have
24:00 - multiple forms but person is one
24:03 - so this is what polymorphism
24:05 - right
24:07 - now how you can relate this in
24:08 - programming in programming we can have
24:10 - two types of polymorphism or we can
24:12 - achieve polymorphism
24:14 - uh by two types overloading and
24:16 - overriding
24:17 - see what overloading means let us take
24:19 - this example we have a function let me
24:22 - just rub this first
24:28 - suppose we have a function sum
24:31 - suppose we have this function
24:33 - sum one function is this
24:35 - i haven't written properly right some
24:38 - data would be there semicolon and all we
24:40 - have but it just
24:41 - just to get you familiar with this thing
24:43 - this function is having two argument
24:45 - integer this function is one end one
24:47 - float
24:48 - two float this is having three arguments
24:50 - right so this is what overloading of the
24:53 - function the function name is same
24:55 - but it will do sum of two integer it
24:57 - will do some of one in one float it will
24:59 - do some of two float number it will do
25:00 - some of three integer numbers
25:03 - this is what overloading
25:06 - just function name would be same
25:08 - maybe you can change the number of
25:09 - parameter the type of parameter the
25:11 - return type of that function according
25:13 - to that that function will behave
25:14 - differently so this is what overloading
25:17 - of the function sum so this is
25:19 - overloading
25:20 - function is same but having multiple
25:22 - forms
25:23 - one is overriding overriding means what
25:26 - actually overriding allows
25:29 - a child class
25:32 - to override
25:33 - a function
25:35 - which is already defined in
25:37 - its parent class
25:40 - right like let us take this example this
25:42 - is overloading and
25:44 - in overriding
25:48 - function name function would be same
25:50 - function name number of argument type of
25:52 - argument the return type of the function
25:54 - everything would be same
25:55 - just
25:56 - we
25:57 - change this code the implementation
25:59 - thing the mechanism
26:02 - suppose in parent class
26:04 - sum is equal to f x plus y this we have
26:07 - done sum is a variable or you can say
26:09 - another variable is one s x plus y
26:12 - maybe a child class will inherit this
26:15 - thing from the parent class but totally
26:17 - change the implementation and it will do
26:19 - some is equal to x minus y
26:22 - also it it's not correct but i just want
26:24 - to
26:25 - you know
26:26 - differentiate the overloading and
26:28 - overriding with the same example right
26:30 - so i have just everything is same name
26:32 - number of argument type of argument the
26:34 - return type everything is same but we
26:36 - have changed the implementation detail
26:38 - the child class has implemented that
26:41 - function
26:42 - specifically according to
26:44 - its need
26:46 - so this is what overriding of that
26:48 - function
26:50 - right let us take that example real life
26:52 - example ah
26:54 - suppose here we are we were having a
26:56 - function uh what
26:58 - walk
27:00 - right
27:01 - and male and female will inherit this
27:04 - function work right
27:06 - so male and female according to their
27:08 - self they can modify this like
27:11 - walk
27:13 - with legs
27:15 - argument will pass legs
27:17 - but in student class in parent class
27:21 - it is what
27:24 - normal walking like this we can walk
27:27 - right
27:28 - fine it's normal walking
27:31 - and they override this function
27:34 - walk with legs the same thing but they
27:37 - change this part this implementation
27:39 - part
27:41 - suppose female
27:43 - class they they'll change this part
27:46 - walk reverse something like this
27:49 - so they have changed the mechanism
27:52 - of walking
27:54 - although the name is same argument is
27:56 - same they are working with legs but they
27:58 - have changed the mechanism so that is
27:59 - overriding
28:02 - right
28:02 - and overloading means what simple if you
28:05 - take this example walk with legs right
28:08 - but another thing we have changed the
28:10 - argument like walk with the hands
28:16 - we haven't changed this mechanism this
28:18 - is just walk normal walking something
28:20 - like this but we have changed like
28:22 - the argument if here we are passing legs
28:25 - we have changed hands
28:26 - two hands we are working something like
28:28 - this so i hope you can relate this
28:30 - example also or if you are not able to
28:32 - relate you can take the previous example
28:33 - that some function and all right so the
28:36 - through these concepts we can achieve
28:39 - uh polymorphism like operator
28:40 - overloading is there function
28:41 - overloading is their function overriding
28:43 - is there in detail we will see these
28:45 - things in the later videos and this is
28:47 - known as if you achieve polymorphism
28:49 - using overloading that is known as
28:51 - compile time polymorphism this is known
28:52 - as runtime polymorphism so in detail we
28:55 - will discuss about these concepts one by
28:57 - one i hope the basic idea about these
28:59 - concepts are clear to you the four
29:01 - pillars
29:02 - of uh this object-oriented programming
29:04 - as well as the you can say
29:06 - six concepts of oops
29:09 - right if you have any doubt you can tell
29:10 - me in comment box maybe in the next
29:12 - video we can revise that concept or we i
29:14 - can take another example i can discuss
29:16 - that thing right so that's it for this
29:18 - video and the next video will see
29:20 - introduction to c plus plus so now i'll
29:22 - see the next video till then bye take
29:24 - care

Cleaned transcript:

so in the series of learning objectoriented programming in c plus plus in the previous video we have discussed what is objectoriented programming and how it is different from processor oriented programming the difference we have seen the basics about objectoriented programming like now in this video we'll see oops concept right before we deep down into the objectoriented programming in c plus plus you must have some idea about the concepts the no the things because of those things we call it as objectoriented programming what are those concepts like class objects abstraction encapsulation inheritance polymorphism six concepts are there so in this video i am going to talk about these concepts briefly i just want you to get familiar with these concepts in detail we will discuss about these concepts one by one in later videos once we will move you know deep down into c plus plus course right but at first you must be familiar about these concepts like what are these concept at least the basic idea you should have right so those things will discuss in this video every concept in brief i'll relate it with the real life example i hope you will get it right but before that i just want to tell you one thing with theory practice is also important the key to success in any interview specifically in programming interview coding interview is practice practice as much as possible it's not like that start practicing coding problems just you know few days before your interview no the best method of preparation is incorporating your interview preparation into your everyday coding practice it will help to improve your logic building skills your thinking capability your problem solving skills and that's exactly the industry wants a problem solver but the question is how to get started from where you can practice the problems coding problems so here is the solution this is the practice page of geeks for geeks here you will get many coding questions different different topics like from dsa array linked list stack in algorithm you will get different coding questions on the topic searching sorting and many algorithm based on many algorithm as well as company specific coding questions practice questions you also get suppose if you want to practice the problems which are being asked in amazon interview then just click on that and you can you will find out the list of problems and you can start solving these problems and it is not good for students only but as well as for working professional if you are working somewhere and you want to switch you are applying for new position then also it will help you practicing these problems will definitely help you so i think this is a great resource to practice these coding problems don't worry the link i'll put in the description box of this video you can go and check out now let's back to the topic so what are hoops concepts six concepts are there basically these are six concepts in object oriented program see as the name suggests object oriented so obviously object is the main thing everything revolve about the around the object so you'll see these concept and these four are known as you can say pillars pillars of object oriented programming but we will discuss these six things all these six concepts so let me just take one example see let's take one example like student maybe you will you know related better student so simply student in student in your class you have male as well as female student right now every student is having some common properties like two hands two legs two eyes nose height weight color these are some common properties they have right and some functions like sleep can eat can study or speak and sit here these are some common functions right every student is having either male or female so we can consider it like a student is a class which is what it is like you can say a user defined data type in technical terms if you say then it is a user definer type as in c we have structures user defined data types which is having some data members and member functions now what are those data members the attributes the properties they have like student is a class and having like you can say legs and hands some body parts you can say then you can say height weight and color right these are some properties or you can say attributes or you can say data or you can say data members so whatever the data that would be considered as in the form of that would be stored in the form of variables in the class next functions what we can have like eat sleep and sit speak and many more so these are some common functions right so class is basically what a blueprint of an entity which defines the core properties and functions of that entity now entity means one entity is male and female you know students actual students are entities like student name can be ram you can say jenny rahul nisha these are some students so male students female students right so these are and you can say real world entities and these are known as known as objects okay in my class i have a student like rahul rahul is an object right of class male class right two more classes are there you can say like male and female here we have male class and female so object is what a real world entity rahul physical existence rahul is having physical existence class is just a logical thing it's just a definition it's just a blueprint so no memory allocation would be done when you define a class no memory allocation because it is just a logical thing it's not physical object is physical thing now we can access these properties and functions of a class using objects of these class or you can say instance of the this class right rahul is what you can say an object of male class so whatever is there in male the attribute and the functions rahul can access using rahul we can access those properties and those functions so rahul is physical thing rahul is having some space right in this environment here in the class right so same when you create an object then only memory allocation would be done in the if i you know say in the form of programming so class is what it is just a blueprint or a prototype through which we can create objects or you can say it is you can say group of objects which share common properties right common properties in common you can say attributes these are attributes this is you can say behavior or methods behavior or methods or functions we can say don't worry i have notes also i'll provide you notes everything i have written in my notes handwritten notes right you just have to understand now right what is class and what is object now see object also i hope you got it right it's a physical thing or it's a real world entity right which is having some behavior or some properties of its own behavior and properties fine that is object so like suppose i have an object one object is ram you can say nisha and pile these are some objects right so objects were just an instance of a class rahul and these are instances of male class initial pile these are instances of female class so they they are having their own data and functions or you can say the code right each object is having its own data and the functions the functions which can manipulate that data each function has its own function and data like ram is having its own you can say height weight color right and on function is there ram is having its own functions rahul is also having different height color and weight every object is having its own you can say code and uh data using code or the functions we can manipulate that data fine and each object can interact with each other with the help of message passing and for interacting they don't need to have the internal knowledge of their data and code suppose if i want to rahul want to communicate with ram so it's not like that rahul has to know the internal everything about ram right what rahul need to know in which form the message would be accepted or you can say the language rahul understand hindi or english that's it and in which language rahul will respond that's it so same in programming one object can interact with other object without knowing the internal detail the code or the ah no the data of that object what just need to know the type of message would be accepted by other object and what type of output the what type of response that object will give right so that the objects can also communicate with each other using message passing so class is just a logical thing it suggests a blueprint a blueprint to create objects and objects are physical thing identify you know you can identify that entity real world entity which is having its own you can say properties and behavior right now first thing we'll discuss inheritance because through this diagram you can get it better see male and female these students are also having like these properties and these functions and female will also have female in a student will also have these properties and functions and these properties and function we have already defined in a class student so rather than defining these things rather than defining these functions and everything here also here also we will do what we just reuse this thing and how you can reuse this is one of the most important characteristics so you can say pillar of oop oop oops you can inherit these properties through inheritance so they will inherit these properties here also and here also so whatever is there these functions you can say these functions and the attributes attributes means the variables and the functions right here also and here also and male and female each class can have their extra their own attributes like some body parts in female are having which male are not having so they can have their own data their own function right male can also have their own function and data and thus common properties they can inherit from this class from this class rather than rewriting again and again so this is what beauty of inheritance these are known as child class and or you can say derived class and this is known as base class or parent class right so code reusability is there so that is why rather than writing same code again and again productivity would increase we can reuse some other code and we can just do whatever we want to do one more thing in object i want to tell in technical terms we say objects are having its own data and code through which we can manipulate the data like ram is having its own data and code means the functions this code right whatever we write here so if ram suppose i can say if ram will eat more then weight would increase so through these functions we can modify these data of that object it's not like that if rahul will eat more then weight of ram would increase no because these details are specific to these objects if jenny will eat more weight of jenny will increase not the weight of nisha or pile right so this data and code are binded together in the these objects using that code we can manipulate the data of that object only right i hope you got class objects and inheritance now we will see what is abstraction see let's take one example first suppose there is a coffee machine what is there one button is there make coffee you just press this button and your coffee is ready right if a machine second machine is something like that there we have a button like add some cold water to the pan boil the water second button is boil the water third button is add one cup of coffee there add sugar this something like this we have many buttons the complete process we have right so which one is better just the first machine having one button make coffee you just press this button and coffee is ready you don't need to go into the detail the implementation part means the making part of that coffee right so means in first machine we are just hiding the detail the process of making a coffee from the user that is what abstraction hiding implementation detail from the other world only showcase the relevant details which are relevant to the world which are relevant to the other users only showcase those details hiding the implementation detail that is just abstraction like when you switch on your fan you don't know what is happening behind there you just switch on you just press that button and your ac is on your fan is on your tv zone like your dvd player once you switch on your you know you can say the tv and the dvd player or that you can say what is that setup box then on the screen the whole world is in your room you can see everything right but behind the scene what is happening how you are getting that data on your tv on your you know set of works through satellite or what is happening you don't know right so that is what abstraction same hiding something into a function or in java we can uh you can we can achieve this abstraction with the help of interfaces and abstract classes 100 in abstraction we can achieve in java right so hiding something into a function or you know an interface these kind of things that is called as abstraction because when you call a function sometimes you don't need to go into the detail of that function that how that process is doing you just need an output you call that function and you need the output that's it because see there are in large scale application there is a large code base if you go in the detail of each and every function then it would take you even months to read out all the functions and you would never code right so rather than going into the implementation detail just showcase the relevant details only that is simple abstraction like in this you can take some other classes their animal or you can say alien i hope spelling is correct maybe animals or aliens know that like student or male 1 female can walk can uh you know eat can do these kind of things but how they don't know the implementation detail so that is simply obstruction in programming also we can achieve obstruction but how we will discuss later just i you know i just want to get you familiar with these terms basic terms next is encapsulation as the name suggests in capsule capsule means means you have seen a capsule medicine the tablet there we have a wrapper in which we have some medicine right there is a wrapper around that that thing right so that is what we are hiding the inner thing we are hiding from the inner whatever is there in the capsule we are hiding that thing by putting the wrapper from outside the world right like around the chocolate we have a wrapper so that chocolate is hidden from the outside world with the help of that wrapper right so sometimes encapsulation is also known as referred as data hiding right so wrapping up of these things data and the functions into a single unit that is known as encapsulation or you can say like something like this you can take this example binding this this you know data and the code together in one unit is known as encapsulation so simply what encapsulation we can say like here in a class this is a class in class we have we have data or attributes you can say right and we have methods or functions or behavior so binding these data and these methods or the functions together this is known as encapsulation in c plus plus that's it this is encapsulation right now you can hide this data from the outside world because we have a uh in a concept we have something in c plus but that is x specified means you just keep the data private public private protected three specifiers so you just keep the data private right and this suppose this object is having ram this is the data forum and these are methods these are the methods right for rahul also this is the data and these are methods so you can keep that data private only these functions these are public methods so only these functions these methods can can what access this data this object another object cannot access this data or another class cannot access that data let's take uh one example like uh we have in college we have multiple departments csc mechanical civil ec right suppose i am faculty in computer science department and i need one information i need some data from mechanical department right so it's not like that i can directly access the data from mechanical department right i will first talk to i will reach out to a person in mechanical department right and i i would request to that person to get me that data and after that through that person i can access the data right directly i cannot access exist so the data of mechanical department the employees or the faculties of mechanical department completely they are a single unit known as mechanical department so they are wrapped up they are in camps encamps encapsuled so the data is private to mechanical department only the faculties or employees of that department can access that data so this will increase the privacy the security of the data that is why in the previous video i have told you the main reason we have switched from pop to oop is data security and through encapsulation we can achieve that thing data security privacy by keeping the data private because we have access specifier concept here just keep all your data private and only these methods only the methods of that class access that data only right no other class can access that data if another class want to access that data they will communicate through these functions right and through these functions they can access that private data right we have some concept of friend function friend class but that also will discuss later will not go in this much detail i hope you know the basic idea of encapsulation right so it is you can say just a shield uh which prevents your data from being accessed by the code outside of that shield right or you can say the data or the variable this is the data or you can say the variables of one class can be accessed by the methods of its own class not by the other class right like other classes alien so they cannot access this data this data of human being class or a student class and how to achieve this encapsulation just keep your data private use a specifier private and keep your methods public and using these methods you can manipulate this data only these methods these functions of that class only can access this data private data this is how you can achieve encapsulation that's it now next is polymorphism see this poly means many and move means forms many forms polymorphism now how this would be related let's take a real life example here see me jenny is one person right but i have multiple forms or you can say many behaviors or many characteristics i can i have like i am i'm a faculty right i am a suppose a class teacher a tutor of any class uh or a friend or a colleague so with according to the situation i will change my behavior jenny is one only one person only but having multiple forms as a faculty like if i'm interacting with hod my behavior would be another means different if i'm in class as a class teacher or a tutor then my behavior would be different with a friend my behavior would be different with my colleagues suppose not friend but just a colleague my behavior would be different right so i can have multiple forms but person is one so this is what polymorphism right now how you can relate this in programming in programming we can have two types of polymorphism or we can achieve polymorphism uh by two types overloading and overriding see what overloading means let us take this example we have a function let me just rub this first suppose we have a function sum suppose we have this function sum one function is this i haven't written properly right some data would be there semicolon and all we have but it just just to get you familiar with this thing this function is having two argument integer this function is one end one float two float this is having three arguments right so this is what overloading of the function the function name is same but it will do sum of two integer it will do some of one in one float it will do some of two float number it will do some of three integer numbers this is what overloading just function name would be same maybe you can change the number of parameter the type of parameter the return type of that function according to that that function will behave differently so this is what overloading of the function sum so this is overloading function is same but having multiple forms one is overriding overriding means what actually overriding allows a child class to override a function which is already defined in its parent class right like let us take this example this is overloading and in overriding function name function would be same function name number of argument type of argument the return type of the function everything would be same just we change this code the implementation thing the mechanism suppose in parent class sum is equal to f x plus y this we have done sum is a variable or you can say another variable is one s x plus y maybe a child class will inherit this thing from the parent class but totally change the implementation and it will do some is equal to x minus y also it it's not correct but i just want to you know differentiate the overloading and overriding with the same example right so i have just everything is same name number of argument type of argument the return type everything is same but we have changed the implementation detail the child class has implemented that function specifically according to its need so this is what overriding of that function right let us take that example real life example ah suppose here we are we were having a function uh what walk right and male and female will inherit this function work right so male and female according to their self they can modify this like walk with legs argument will pass legs but in student class in parent class it is what normal walking like this we can walk right fine it's normal walking and they override this function walk with legs the same thing but they change this part this implementation part suppose female class they they'll change this part walk reverse something like this so they have changed the mechanism of walking although the name is same argument is same they are working with legs but they have changed the mechanism so that is overriding right and overloading means what simple if you take this example walk with legs right but another thing we have changed the argument like walk with the hands we haven't changed this mechanism this is just walk normal walking something like this but we have changed like the argument if here we are passing legs we have changed hands two hands we are working something like this so i hope you can relate this example also or if you are not able to relate you can take the previous example that some function and all right so the through these concepts we can achieve uh polymorphism like operator overloading is there function overloading is their function overriding is there in detail we will see these things in the later videos and this is known as if you achieve polymorphism using overloading that is known as compile time polymorphism this is known as runtime polymorphism so in detail we will discuss about these concepts one by one i hope the basic idea about these concepts are clear to you the four pillars of uh this objectoriented programming as well as the you can say six concepts of oops right if you have any doubt you can tell me in comment box maybe in the next video we can revise that concept or we i can take another example i can discuss that thing right so that's it for this video and the next video will see introduction to c plus plus so now i'll see the next video till then bye take care
