With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language we are
00:05 - discussing 2D arrays in the previous
00:08 - video we have seen what is 2D array how
00:09 - to declare 2D array how to initialize
00:12 - this right now the next point is in this
00:15 - video we'll discuss like memory
00:17 - representation of 2D array and how to
00:19 - access elements from that array right
00:23 - because obviously when in the previous
00:24 - video we have seen like generally we
00:26 - visualize 2D something like this uh in
00:28 - metrix form in rows and
00:30 - columns right here we have like 1 2 3
00:34 - three rows and three columns three two
00:36 - three Matrix so here the data is to be
00:38 - stored whatever you say the elements but
00:40 - it's not like that in memory this is
00:42 - stored in this form only because memory
00:44 - is a like tape
00:47 - of this B right either you can represent
00:52 - it in horizontal form or vertical form
00:53 - so this is not the case like just pick
00:56 - this and place this in memory something
00:58 - like this no you have to store the these
01:01 - elements in this form only right so how
01:05 - to map this thing how those elements of
01:07 - 2D array the data is stored in memory
01:10 - that thing we'll see in this video right
01:13 - and how to access definitely those
01:15 - elements from AR right but before that I
01:18 - want to tell you something if you are
01:20 - interested if you are a gate aspirant or
01:22 - especially especially if you are
01:24 - interested in uh data science and
01:26 - artificial intelligence field right so
01:30 - like we know AI is future it is going to
01:32 - replace many jobs and even it has
01:33 - already replaced some jobs right so in
01:36 - this Academic Year for 2024 gate 2024
01:40 - this IC Bangalore has introduced a new
01:43 - paper for data science and artificial
01:45 - intelligence having code
01:47 - da and this is open for all the students
01:50 - who have uh you know bachelor degree in
01:53 - engineering uh technology or even in
01:55 - architecture science technology right so
01:58 - even known csit students can write this
02:01 - paper and get benefit benefit from it
02:03 - like if you want to want to go for
02:04 - higher education like for get admiss in
02:06 - mtech or PHD programs in data science
02:08 - and AI then definitely if you go for
02:10 - this gate paper gate 2024 da then it
02:12 - will be helpful for you guys right and
02:15 - for job perspective also you can stand
02:17 - out in the job market right so the thing
02:20 - is there like if you want to prepare for
02:22 - this gate this paper then there is a
02:24 - good news for you guys an academy is
02:26 - going to launch India's biggest and best
02:30 - team G team csit for csit and this DS
02:34 - and AI paper and why I saying like one
02:38 - of the best team because of their
02:40 - credentials their Educators credentials
02:43 - their teaching experience and even they
02:45 - have also correct many exam gate net
02:47 - ISRO they all ining in those exams they
02:50 - have published many research papers and
02:52 - even writing PhD students and already
02:55 - mentoring gate aspirant so if you want
02:57 - to prepare for gate csit or this DS a
03:00 - paper then this is I guess one of the
03:02 - best platform on Academy so all the
03:04 - links and detail I'll put in the
03:05 - description box of this video you can go
03:06 - and check out now let's get back to this
03:09 - video so see there are two technique to
03:12 - store the elements of 2D array in memory
03:14 - one is row measure and second is column
03:16 - Mees both things we'll discuss in this
03:17 - video now how to how to you know
03:20 - initialize at compile time a let's take
03:23 - a 2d array like this right number of
03:26 - rows number of columns right this thing
03:28 - we have seen in previous video right now
03:30 - how to initialize it at compile time
03:33 - directly there are three ways that those
03:35 - also we we have seen in the previous
03:37 - video one way is like I can write
03:39 - something like this if I write something
03:40 - like this like uh so this is one way
03:44 - like here we have two rows three columns
03:46 - so this value I have given one row
03:48 - second row and for three columns I have
03:51 - given value so if you visualize this
03:53 - thing then we will visualize this
03:57 - something like this we are having two
03:58 - rows and three columns so how we are
04:00 - going to store in first row we are
04:02 - having 1 10 so there is no third element
04:05 - we have given so by default it would be
04:07 - zero -1 12 and 1 row and columns so 0
04:12 - and one index would be started from zero
04:14 - we know 0 1 2 this is zeroth Row first
04:18 - row zeroth column First Column second
04:20 - column something like this right row and
04:23 - column so we'll see first the row
04:25 - measure representation memory
04:26 - representation right now in row measure
04:29 - presentation because we know memory is
04:31 - like it's like a long tape of
04:34 - bytes right so in row measure rowwise
04:38 - the data is to be stored means first row
04:43 - second row third row fourth row
04:45 - something like this means all the
04:47 - elements or All The Columns of first row
04:49 - will be stored then second row then
04:51 - third row right so first zero throw
04:55 - would be stored I mean the first row
04:56 - index is zero so suppose suppose the
04:59 - Base address memory manager has
05:01 - allocated some Base address uh 100 from
05:05 - this B 100
05:08 - right so first one would be stored then
05:12 - 10 would be stored then zero would be
05:14 - stored obviously here this is not if you
05:18 - consider it one by then this one would
05:22 - be uh stored in four bytes because
05:24 - integer is going to take four bytes
05:26 - right so 10 1 102 1 3 like 1 2 3 4 in
05:34 - these four byes one would be stored
05:37 - right obviously in a binary form zeros
05:40 - and ones right converted and then store
05:42 - then again in four bytes 10 would be
05:44 - stored then in four byes zero would be
05:46 - stored right so I'm not taking it
05:49 - something like this directly I'll take a
05:52 - block of 4 bytes right in memory so if
05:56 - the Base address is 100 one would be
05:58 - stored then 10 then zero rowwise first
06:01 - row then second row -1 20 and 1
06:05 - something like this right so if it is
06:07 - 100 it's 104 it's 108 so how much
06:11 - memories to be allocated for this how
06:13 - many elements we have 3 into two number
06:15 - of rows number of columns six for one
06:17 - element four bytes into 4 24 bytes so
06:20 - 100 to obviously this 124 these are 24
06:23 - bytes located for this so this is how
06:25 - this to be stored in R is a
06:27 - representation and in continuous memory
06:29 - location now how to access elements if
06:31 - these are stored something like this
06:34 - same we'll give index so here we have
06:37 - obviously two index one for Row one for
06:39 - column if I want to access this 20 so
06:43 - which row and which column you have to
06:45 - give two index in One D array we will
06:47 - give only one index so the name of the
06:49 - array and first is row index second is
06:53 - column index so if you want to exess
06:55 - this 20 then row index is one column
06:57 - index is one so something like this will
07:00 - write if you write a11 it will give you
07:02 - 20 now if I write like 0 and 1 what it
07:07 - will give 0 and 1
07:09 - 10 so you have to give two index row
07:12 - index and column Index right okay now
07:17 - next is column measure I think you have
07:19 - understood in column measure what would
07:20 - be done column wise the data is to be
07:22 - stored means First Column all the
07:25 - element of First Column then second
07:26 - column third column and so on in
07:28 - continuous memory locations right so
07:31 - pause the video and just draw how column
07:34 - wise this data is to be stored any
07:36 - address you can take like here I'm
07:37 - taking another address like 200 so I
07:40 - know it is not the exact address like
07:42 - and you should know also this thing
07:43 - because that would be in hexadecimal
07:45 - form but for Simplicity purpose just to
07:47 - you know make you understand I'm taking
07:49 - simple address 100 200 something like
07:51 - this so column wise means First Column
07:53 - like this then this then this so all the
07:57 - element of First Column 1 - one 1 then
07:59 - second column 10 20 then third 0 1 this
08:04 - is column meor representation this is
08:07 - row is a representation memory
08:09 - representation right but in this case if
08:13 - in this memory this has been stored
08:14 - column is a representation we have store
08:16 - data in this form then if I write
08:17 - something like this a11 then what it
08:19 - will give it will give same or
08:22 - different it will give different because
08:24 - see a11 here
08:28 - is
08:46 - it will give 20 because one row and one
08:49 - column 20 so what is the difference
08:53 - value is same the difference is here the
08:56 - address of this 20 is 116
09:00 - but here the address of 20 is if you
09:03 - take the same thing 100 suppose let's
09:06 - take not 200 let's take 100 because
09:09 - obviously at one time we can store
09:12 - either we can use row measure or column
09:14 - measure not both the things don't just
09:17 - get confused like 100 100 same address
09:20 - and I'm storing like two values one and
09:22 - one and something like this no no no no
09:24 - these are two different cases right just
09:27 - to make you understand like the address
09:28 - would be different here address of 20 is
09:31 - 116 here address of 20 is 112 in column
09:34 - measor right so how this addressing is
09:38 - to be done that is a different topic
09:40 - that is important one also right so the
09:43 - addressing of 2D element that thing
09:45 - we'll see in next video right there are
09:47 - two formulas one for row measure one for
09:49 - column measure and B on these things
09:52 - you'll get some question also maybe in
09:54 - some interview they can ask you this
09:55 - question or definitely in University
09:57 - exam or sometime in competitive exam
09:59 - also they ask this type of question
10:01 - tricky questions right so in the next
10:03 - video we'll see addressing right with
10:05 - some questions different type of
10:06 - questions as well two or three questions
10:09 - right I hope you got how to access
10:11 - elements and how the the elements are to
10:13 - be stored in memory the row measure
10:16 - column measure you have got and
10:17 - accessing is uh simple just provide
10:20 - index column index and row index two
10:22 - index you have to provide right so in
10:25 - the next video we'll see the important
10:26 - part the addressing right
10:29 - so now I'll see you in the next video
10:31 - till then bye-bye take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing 2D arrays in the previous video we have seen what is 2D array how to declare 2D array how to initialize this right now the next point is in this video we'll discuss like memory representation of 2D array and how to access elements from that array right because obviously when in the previous video we have seen like generally we visualize 2D something like this uh in metrix form in rows and columns right here we have like 1 2 3 three rows and three columns three two three Matrix so here the data is to be stored whatever you say the elements but it's not like that in memory this is stored in this form only because memory is a like tape of this B right either you can represent it in horizontal form or vertical form so this is not the case like just pick this and place this in memory something like this no you have to store the these elements in this form only right so how to map this thing how those elements of 2D array the data is stored in memory that thing we'll see in this video right and how to access definitely those elements from AR right but before that I want to tell you something if you are interested if you are a gate aspirant or especially especially if you are interested in uh data science and artificial intelligence field right so like we know AI is future it is going to replace many jobs and even it has already replaced some jobs right so in this Academic Year for 2024 gate 2024 this IC Bangalore has introduced a new paper for data science and artificial intelligence having code da and this is open for all the students who have uh you know bachelor degree in engineering uh technology or even in architecture science technology right so even known csit students can write this paper and get benefit benefit from it like if you want to want to go for higher education like for get admiss in mtech or PHD programs in data science and AI then definitely if you go for this gate paper gate 2024 da then it will be helpful for you guys right and for job perspective also you can stand out in the job market right so the thing is there like if you want to prepare for this gate this paper then there is a good news for you guys an academy is going to launch India's biggest and best team G team csit for csit and this DS and AI paper and why I saying like one of the best team because of their credentials their Educators credentials their teaching experience and even they have also correct many exam gate net ISRO they all ining in those exams they have published many research papers and even writing PhD students and already mentoring gate aspirant so if you want to prepare for gate csit or this DS a paper then this is I guess one of the best platform on Academy so all the links and detail I'll put in the description box of this video you can go and check out now let's get back to this video so see there are two technique to store the elements of 2D array in memory one is row measure and second is column Mees both things we'll discuss in this video now how to how to you know initialize at compile time a let's take a 2d array like this right number of rows number of columns right this thing we have seen in previous video right now how to initialize it at compile time directly there are three ways that those also we we have seen in the previous video one way is like I can write something like this if I write something like this like uh so this is one way like here we have two rows three columns so this value I have given one row second row and for three columns I have given value so if you visualize this thing then we will visualize this something like this we are having two rows and three columns so how we are going to store in first row we are having 1 10 so there is no third element we have given so by default it would be zero 1 12 and 1 row and columns so 0 and one index would be started from zero we know 0 1 2 this is zeroth Row first row zeroth column First Column second column something like this right row and column so we'll see first the row measure representation memory representation right now in row measure presentation because we know memory is like it's like a long tape of bytes right so in row measure rowwise the data is to be stored means first row second row third row fourth row something like this means all the elements or All The Columns of first row will be stored then second row then third row right so first zero throw would be stored I mean the first row index is zero so suppose suppose the Base address memory manager has allocated some Base address uh 100 from this B 100 right so first one would be stored then 10 would be stored then zero would be stored obviously here this is not if you consider it one by then this one would be uh stored in four bytes because integer is going to take four bytes right so 10 1 102 1 3 like 1 2 3 4 in these four byes one would be stored right obviously in a binary form zeros and ones right converted and then store then again in four bytes 10 would be stored then in four byes zero would be stored right so I'm not taking it something like this directly I'll take a block of 4 bytes right in memory so if the Base address is 100 one would be stored then 10 then zero rowwise first row then second row 1 20 and 1 something like this right so if it is 100 it's 104 it's 108 so how much memories to be allocated for this how many elements we have 3 into two number of rows number of columns six for one element four bytes into 4 24 bytes so 100 to obviously this 124 these are 24 bytes located for this so this is how this to be stored in R is a representation and in continuous memory location now how to access elements if these are stored something like this same we'll give index so here we have obviously two index one for Row one for column if I want to access this 20 so which row and which column you have to give two index in One D array we will give only one index so the name of the array and first is row index second is column index so if you want to exess this 20 then row index is one column index is one so something like this will write if you write a11 it will give you 20 now if I write like 0 and 1 what it will give 0 and 1 10 so you have to give two index row index and column Index right okay now next is column measure I think you have understood in column measure what would be done column wise the data is to be stored means First Column all the element of First Column then second column third column and so on in continuous memory locations right so pause the video and just draw how column wise this data is to be stored any address you can take like here I'm taking another address like 200 so I know it is not the exact address like and you should know also this thing because that would be in hexadecimal form but for Simplicity purpose just to you know make you understand I'm taking simple address 100 200 something like this so column wise means First Column like this then this then this so all the element of First Column 1 one 1 then second column 10 20 then third 0 1 this is column meor representation this is row is a representation memory representation right but in this case if in this memory this has been stored column is a representation we have store data in this form then if I write something like this a11 then what it will give it will give same or different it will give different because see a11 here is it will give 20 because one row and one column 20 so what is the difference value is same the difference is here the address of this 20 is 116 but here the address of 20 is if you take the same thing 100 suppose let's take not 200 let's take 100 because obviously at one time we can store either we can use row measure or column measure not both the things don't just get confused like 100 100 same address and I'm storing like two values one and one and something like this no no no no these are two different cases right just to make you understand like the address would be different here address of 20 is 116 here address of 20 is 112 in column measor right so how this addressing is to be done that is a different topic that is important one also right so the addressing of 2D element that thing we'll see in next video right there are two formulas one for row measure one for column measure and B on these things you'll get some question also maybe in some interview they can ask you this question or definitely in University exam or sometime in competitive exam also they ask this type of question tricky questions right so in the next video we'll see addressing right with some questions different type of questions as well two or three questions right I hope you got how to access elements and how the the elements are to be stored in memory the row measure column measure you have got and accessing is uh simple just provide index column index and row index two index you have to provide right so in the next video we'll see the important part the addressing right so now I'll see you in the next video till then byebye take care
