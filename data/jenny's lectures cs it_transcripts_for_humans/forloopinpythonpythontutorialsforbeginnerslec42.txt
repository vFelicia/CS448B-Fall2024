With timestamps:

00:00 - so when the series of learning Python
00:02 - programming language we are done with
00:03 - sets in Python so the next topic is
00:06 - Loops in Python so in this video we'll
00:07 - be discussing about for Loop in Python
00:09 - right
00:10 - okay now what is loop basically Loop is
00:14 - what when you are repeating the same
00:17 - thing or same action again and again
00:19 - that is what a loop nothing else right
00:23 - like if you want to print number from
00:26 - one to five so simply you are repeating
00:28 - the same action what you will do in
00:30 - Python if you I ask you to print number
00:33 - from one to five what you will do simply
00:36 - like print one then print two something
00:40 - like this until
00:42 - print five
00:43 - means same action here action is what
00:45 - print same action is repeating again and
00:49 - again here you're repeating the same
00:50 - action again and again that is not a
00:52 - loop that's it right like suppose if
00:55 - your mom is having a list to buy the
00:58 - things to buy from the supermarket and
01:00 - she asked
01:01 - she asked you like first thing is banana
01:04 - and he asks you like uh go and buy
01:06 - banana you go to supermarket buy a
01:07 - banana and come back to home then again
01:09 - the second item Buy Apple you go to
01:11 - supermarket again come back
01:13 - third item like maybe by dragon fruit so
01:16 - you go to supermarket buy dragon fruit
01:18 - come to home means you are in Loop you
01:19 - are doing same action again and again
01:21 - going to supermarket buy something and
01:23 - come to home kind of that thing right
01:26 - but the better idea is
01:28 - like you just take the list go to
01:30 - supermarket
01:32 - take a trolley
01:33 - pick the first item banana that item put
01:36 - in Trolley second item like mango like
01:38 - this all the items at the same time and
01:40 - come to home that is better option right
01:43 - so yeah basically I hope you got this
01:46 - what is a loop basically right repeating
01:48 - same action or same thing again again
01:49 - and again that is a Loop right so in
01:53 - programming also we have to do these
01:55 - kind of tasks sometime we have to repeat
01:57 - some statements or some instructions
01:59 - again and again some statements for
02:01 - again and again right
02:03 - so you can put so that is what a loop so
02:06 - you can put those statements under a
02:08 - single line like in a loop and you don't
02:10 - have to write the same statements again
02:12 - and again so this thing we can do with
02:14 - the help of loop how that also I'll tell
02:17 - you in that case you need to write down
02:18 - the Sprint only single time like one
02:20 - time not five time
02:23 - because yeah that is fine you can write
02:24 - down print five times but if I ask you
02:26 - to print 100 times 1 200 if I ask you to
02:29 - print one to two hundred one two
02:30 - thousand so it is not possible to write
02:33 - down thousand time print statement and
02:34 - that is obviously a you know waste of
02:37 - space
02:38 - right and waste of your time right so
02:41 - better to use Loops in Python for this
02:44 - thing we have loops in Python basically
02:46 - two types of loop for Loop and while
02:48 - loop third is also that is a nested Loop
02:50 - nested means what within Loop within a
02:52 - loop like you are you have written a for
02:54 - Loop within that Loop you have written
02:56 - again a for Loop or maybe a while loop
02:57 - right that is what a nested Loop but
03:00 - mainly two types of loop four and Y so
03:02 - in this video we'll be talking about
03:03 - four Loop
03:05 - so here four Loop is what in Python
03:08 - basically maybe if you have a red for
03:11 - Loop in other languages c c plus Java
03:14 - then it is not the same
03:18 - like like we have discussed in other
03:20 - languages right in Python this for Loop
03:24 - is more like an iterator
03:27 - Now what is iterator
03:29 - iterates you can say which is used to do
03:34 - some iteration iteration system is what
03:36 - traversing a sequence
03:39 - one by one reversing a sequence one by
03:41 - one that is called iteration
03:43 - sequence here is what now
03:46 - sequence in Python is what collection of
03:49 - item sequence data times or List double
03:52 - set dictionary that we haven't discussed
03:54 - we will be discussing later string is
03:56 - also a sequence
03:58 - so like this if we have a list
04:01 - something like this if we have like four
04:03 - names so this is a list or you can say
04:05 - this is a sequence collection of items
04:06 - right so traversing of this sequence
04:09 - traversing means
04:10 - go to first item then second item then
04:13 - third item then fourth item like this so
04:15 - this is what traversing this is what
04:17 - iteration
04:18 - and using iterator we do this iteration
04:20 - so that is basically in Python
04:23 - for Loop is more like an iterator
04:26 - right
04:27 - so we can say a for Loop in Python is
04:29 - used used to iterate over a sequence in
04:34 - Python right
04:36 - and do some specific action for each
04:39 - item
04:41 - or you can do some specific action on
04:42 - each item in that sequence right rough
04:46 - sequence may be a list or a set or a
04:48 - tuple or a string or a dictionary
04:50 - let's take one example how you will
04:53 - let's see syntax or for Loop you simply
04:56 - write this four
04:58 - you will be writing a variable name here
05:01 - any variable name
05:02 - in
05:04 - membership operator not in an in with
05:06 - discussed in here you will write that
05:09 - sequence name
05:11 - sequence then column sequence may be a
05:15 - list of this name or a tuple name or
05:18 - whatever you have taken that sequence
05:19 - name and here you can write down those
05:21 - statements
05:23 - one statement or multiple statements can
05:26 - be there this is simple syntax of
05:27 - writing a for Loop
05:30 - there is no specific condition like in
05:32 - other languages we have we have to
05:34 - initialize for Loop then we will be
05:35 - giving some condition then increment
05:38 - agreement and all so nothing you have to
05:40 - specify that's it you have to do in
05:43 - Python right you don't have to
05:45 - initialize any like variable name or
05:49 - anything fine now in this case suppose I
05:52 - have this list list one
05:54 - list one is this
05:56 - so what you will write like four
05:59 - you variable any variable name you can
06:01 - take like I'm i a b c d x y z anything
06:06 - so if these are names
06:08 - right or you can say here also you can
06:11 - take a
06:12 - uh that meaningful name names
06:15 - list name is names so I'm taking a
06:18 - meaningful variable name also four
06:21 - name not the same
06:24 - variable name that you have taken the
06:26 - sequence name that should be different
06:28 - here we have names here we have name for
06:31 - name in sequence name is what names
06:36 - for each name in names what you need to
06:39 - do here you can do whatever you want to
06:41 - do simply the very basic and simple
06:44 - thing and I just want to print
06:47 - print
06:48 - and I just want to print each name after
06:50 - traversing I want to print each name so
06:53 - print
06:54 - this variable name you have to write
06:55 - down here print name that's it okay I
06:58 - forgot the semicolon
07:00 - and please this statement would be
07:03 - indeed indented this indentation is very
07:06 - important
07:07 - otherwise it will be better you will if
07:09 - you will write them print here here
07:11 - without any indentation it will give
07:13 - error right
07:15 - so better take some indentation here now
07:18 - what it will give
07:20 - what is the working
07:22 - first names is what this so it would be
07:26 - here this complete list would be here or
07:29 - rather than this
07:31 - directly here rather than names directly
07:34 - you can put this list here that is also
07:36 - fine
07:37 - so now first of all this what is the
07:38 - internal working this this names would
07:40 - be replaced with this list now for name
07:43 - in names first name Jenny would be
07:46 - assigned to this name this is a variable
07:48 - name or a placeholder so in name first
07:49 - we have
07:51 - gen
07:54 - for Jenny in names so condition is true
07:57 - in operator
07:59 - membership operator that is that will
08:01 - give it a Jenny in Jenny is present in
08:03 - this list names
08:05 - so it will give true so enter into for
08:07 - Loop and print name so in name we have
08:09 - Jenny so it will print Jenny now
08:12 - again now next is Ram so next time Ram
08:16 - would be assigned to this name
08:20 - Ram in names yes true print name so next
08:23 - line Ram we appended like this next time
08:25 - Rahul would be assigned to this name
08:27 - next time pile will be assigned to this
08:28 - name all the conditions are to do and we
08:31 - will print till the end of the list it
08:33 - will print over the engineer Rahul and
08:35 - pile something like this so this is
08:37 - simple working of for Loop right it will
08:40 - do these actions whatever you will write
08:41 - here it will execute these statements
08:43 - for each item in the sequence
08:47 - foreign
08:50 - right if rather than this if you simply
08:54 - take string then also it will work
08:58 - if I simply take this string Jenny
09:02 - this is also a sequence
09:04 - so in names now we have Jenny string in
09:06 - name now what we have first time we will
09:09 - have J
09:10 - so J in names yes so it will print first
09:12 - J then e then n n y something like this
09:17 - right so if we draw flowchart or simply
09:21 - if we try to draw flowchart for this for
09:23 - Loop then that would be like
09:28 - for each item
09:31 - in sequence
09:33 - what it will do
09:36 - last item
09:39 - reached
09:43 - if this is true
09:45 - then
09:47 - exit from full loop right but if this is
09:50 - not true but this is not the last item
09:53 - in the sequence then what it will do
09:57 - whatever the statement is there that
09:59 - would be executed
10:01 - if this is false
10:03 - and then again will be here so this is
10:06 - kind of flowchart you can draw for this
10:09 - for Loop in Python right once last item
10:13 - reached exit from for loop I told you it
10:15 - is more like an iterator method that we
10:19 - find in other object oriented
10:21 - programming languages not more like for
10:23 - Loop right
10:26 - in other languages the for Loop is there
10:28 - so not same that for Loop but it's more
10:30 - like an iterator means we execute these
10:34 - set of statement once for each item in
10:37 - the sequence right yeah but also now how
10:40 - you will print like one two hundred and
10:42 - one to two hundred that also we can do
10:43 - for that we have another method in
10:46 - function here that is range function so
10:47 - you can use range function for Loop and
10:49 - you can print uh the numbers also right
10:53 - now let me just show you this thing with
10:55 - the help of practically we will see like
10:57 - a program with helper program I'll show
10:59 - you okay so let's create a new file here
11:06 - I'll be naming it for underscore Loop
11:08 - dot p y right okay simply first we will
11:12 - take any sequence let's take a list
11:18 - why Always list
11:20 - let's take a string only so I will be
11:23 - taking like name equal to
11:25 - and here I am taking Jenny that's it
11:30 - now for let's take a variable name let's
11:33 - take I in item you can take for I in
11:37 - this name then colon and you simply you
11:41 - want to print it that is the simplest
11:43 - action we can do print print but you
11:46 - have to put here variable name I right
11:48 - let's just run this and I'll show you c
11:51 - j e n n y
11:53 - you have traversed this sequence using
11:56 - for Loop that's what iterator do right
12:00 - iteration traversing or sequence and
12:02 - this statement can be executed once for
12:05 - every item in this
12:07 - this sequence so this time I'll be
12:11 - taking
12:12 - a list so now this time we have names
12:14 - this list and same you can do with this
12:17 - if you you can just
12:21 - variable name is I is fine let's run
12:24 - this and this time C Jenny Ramen right
12:27 - but within this you can also this is
12:29 - what the simplest thing we can do but we
12:31 - will use it during more complex actions
12:34 - and within this not exactly one
12:37 - statement you can write multiple
12:38 - statements also right and see the
12:40 - indentation part that is very important
12:42 - if you do not
12:44 - put here indentation that is by default
12:46 - actually because see whenever
12:50 - after this I enter Then cursor is here
12:54 - by default indented
12:56 - so simply like print
12:58 - right but if you do note
13:02 - if you remove this indentation that
13:03 - would be an error see indentation error
13:05 - expected an indented block after four
13:08 - statement in life so you have to
13:10 - be very careful about this indentation
13:13 - part because this will specify a block
13:15 - these whatever statements are indented
13:17 - that are under this for Loop
13:21 - right in C or C plus plus one another
13:24 - the language is for representing the
13:25 - block we use curly braces right but here
13:27 - we don't have such kind of thing simply
13:30 - indented means this this is under the
13:33 - for Loop and this is a block so rather
13:36 - than this we can also here print some
13:38 - other thing we can also do like if I
13:41 - print some condition if this I equal to
13:45 - equal to
13:47 - Jenny
13:49 - if this is the case Okay so Jenny is a
13:52 - string so we must put the same here
13:56 - if this is the case again I enter and
13:59 - again it is indented after if also
14:02 - we need some indentation right and
14:05 - simply suppose I print uh
14:09 - hey it's me
14:11 - nothing but simply
14:15 - I know that is not having much sense but
14:19 - taking just simple example so let's run
14:22 - this
14:23 - and see first name is Jenny after Jenny
14:26 - it will check if the name is this I is
14:28 - Jenny yes I in I we have now Jennifer's
14:31 - time Jenny would be assigned to the side
14:33 - right so it will print H me then Ram
14:37 - then Ram this is not true for Ram so
14:40 - sham and Sham and this is also not true
14:42 - for sure
14:43 - so after Jenny 2 print hates me right
14:46 - so we'll take one more complex example
14:48 - now so I am having suppose a list
14:51 - list one and I am having some numbers
14:54 - here like two three any number you can
14:57 - take like minus two and any number we
14:59 - can take
15:00 - then
15:02 - and I want to calculate square of each
15:05 - item square of each item in the list
15:07 - right so first we have to access each
15:09 - item then we calculate square right
15:11 - so how you can access each item we have
15:14 - a full loop here 4 like I
15:18 - in
15:20 - list one or if you take more meaningful
15:22 - name better to take meaningful names so
15:25 - let's take numbers
15:26 - right for I in numbers
15:33 - right you have to calculate squares so
15:37 - let's take a variable M Square only
15:39 - square is equal to this I and this is
15:43 - our operator
15:44 - 2.
15:46 - and simply I can print Square
15:51 - let's run this
15:53 - C 4 9 25 4 and 100 so minus two it's
15:58 - four only right plus 4 and 100. but I
16:01 - want rather than this I want list of
16:03 - these squares like this a list should be
16:06 - printed so that is your
16:08 - you can say quiz for this class so pause
16:12 - the video and try this out you have to
16:13 - calculate square but you have to print
16:15 - rather than this a list
16:18 - right now if you are blank right now so
16:22 - you can go through the list and list
16:24 - methods actually
16:26 - all the methods and you will find out
16:28 - appropriate method for this so pause the
16:31 - video and try this out
16:35 - so I hope you have done this what we can
16:38 - do we can take another empty list and we
16:41 - can add Square in that list and we can
16:43 - print that list so let's take an empty
16:45 - list
16:47 - is an empty list
16:51 - this is empty list we don't have
16:52 - anything right now after calculating
16:54 - this Square what we can do rather than
16:57 - directly printing what we can do in
17:00 - squares in that empty list so squares we
17:03 - can append that Square value
17:06 - so don't append this is the correct
17:10 - method and here we will
17:12 - put what you need to add here Square
17:15 - this Square
17:17 - do not get confused in these names this
17:20 - is squares list name is squares and
17:22 - square is a variable name in which we
17:24 - have square of each item so the square
17:27 - we will add here and rather than
17:28 - printing here
17:31 - after this for Loop we will print what
17:34 - Square this list
17:36 - that's it
17:38 - let's run this and see now here we got
17:41 - the list
17:44 - fine
17:48 - or if you want to print something like
17:50 - this
17:51 - uh the uh
17:54 - list of
17:57 - squares
17:59 - is
18:01 - and comma
18:03 - that is also fine
18:04 - here you can put that list name
18:08 - so see the list of squares says this
18:12 - so rather than just printing we can do
18:14 - many other things with this for Loop
18:17 - but that is what over a sequence you can
18:20 - use this for Loop here we have a range
18:21 - method so that also will be discussing
18:23 - so you have to take any sequence and for
18:25 - each item of that sequence you can do
18:27 - whatever you want to do the section
18:29 - these two lines are indented so this is
18:32 - what for these two lines are under in
18:35 - this four Loop this is what outside of
18:37 - the pole Loop because this is not
18:39 - indented
18:40 - right
18:43 - and if you if what if I put indent in
18:47 - the on this sign also this line would
18:48 - also be now a part of 4 new now let's
18:51 - see what happens
18:54 - see
18:55 - this line would also be printed five
18:58 - times because here we have five items
19:00 - for each item list of square is first
19:02 - four then four nine then this then this
19:04 - and then this
19:06 - right so I hope you got the difference
19:07 - so you can now try this out different
19:09 - different sequence like for tuples or
19:11 - sets different different things because
19:13 - we have taken only string and uh list so
19:17 - on tuples on set dictionary so I haven't
19:20 - discussed
19:22 - and you can try out anything while
19:26 - iterating over that sequence right so I
19:29 - hope you got what is for Loop in Python
19:30 - now next is we can also use else with
19:32 - for Loop yes four else you have must
19:35 - have heard if else but 4 else is also
19:37 - possible so that will be discussing in
19:39 - next video and I'll see in the next
19:40 - video bye take care

Cleaned transcript:

so when the series of learning Python programming language we are done with sets in Python so the next topic is Loops in Python so in this video we'll be discussing about for Loop in Python right okay now what is loop basically Loop is what when you are repeating the same thing or same action again and again that is what a loop nothing else right like if you want to print number from one to five so simply you are repeating the same action what you will do in Python if you I ask you to print number from one to five what you will do simply like print one then print two something like this until print five means same action here action is what print same action is repeating again and again here you're repeating the same action again and again that is not a loop that's it right like suppose if your mom is having a list to buy the things to buy from the supermarket and she asked she asked you like first thing is banana and he asks you like uh go and buy banana you go to supermarket buy a banana and come back to home then again the second item Buy Apple you go to supermarket again come back third item like maybe by dragon fruit so you go to supermarket buy dragon fruit come to home means you are in Loop you are doing same action again and again going to supermarket buy something and come to home kind of that thing right but the better idea is like you just take the list go to supermarket take a trolley pick the first item banana that item put in Trolley second item like mango like this all the items at the same time and come to home that is better option right so yeah basically I hope you got this what is a loop basically right repeating same action or same thing again again and again that is a Loop right so in programming also we have to do these kind of tasks sometime we have to repeat some statements or some instructions again and again some statements for again and again right so you can put so that is what a loop so you can put those statements under a single line like in a loop and you don't have to write the same statements again and again so this thing we can do with the help of loop how that also I'll tell you in that case you need to write down the Sprint only single time like one time not five time because yeah that is fine you can write down print five times but if I ask you to print 100 times 1 200 if I ask you to print one to two hundred one two thousand so it is not possible to write down thousand time print statement and that is obviously a you know waste of space right and waste of your time right so better to use Loops in Python for this thing we have loops in Python basically two types of loop for Loop and while loop third is also that is a nested Loop nested means what within Loop within a loop like you are you have written a for Loop within that Loop you have written again a for Loop or maybe a while loop right that is what a nested Loop but mainly two types of loop four and Y so in this video we'll be talking about four Loop so here four Loop is what in Python basically maybe if you have a red for Loop in other languages c c plus Java then it is not the same like like we have discussed in other languages right in Python this for Loop is more like an iterator Now what is iterator iterates you can say which is used to do some iteration iteration system is what traversing a sequence one by one reversing a sequence one by one that is called iteration sequence here is what now sequence in Python is what collection of item sequence data times or List double set dictionary that we haven't discussed we will be discussing later string is also a sequence so like this if we have a list something like this if we have like four names so this is a list or you can say this is a sequence collection of items right so traversing of this sequence traversing means go to first item then second item then third item then fourth item like this so this is what traversing this is what iteration and using iterator we do this iteration so that is basically in Python for Loop is more like an iterator right so we can say a for Loop in Python is used used to iterate over a sequence in Python right and do some specific action for each item or you can do some specific action on each item in that sequence right rough sequence may be a list or a set or a tuple or a string or a dictionary let's take one example how you will let's see syntax or for Loop you simply write this four you will be writing a variable name here any variable name in membership operator not in an in with discussed in here you will write that sequence name sequence then column sequence may be a list of this name or a tuple name or whatever you have taken that sequence name and here you can write down those statements one statement or multiple statements can be there this is simple syntax of writing a for Loop there is no specific condition like in other languages we have we have to initialize for Loop then we will be giving some condition then increment agreement and all so nothing you have to specify that's it you have to do in Python right you don't have to initialize any like variable name or anything fine now in this case suppose I have this list list one list one is this so what you will write like four you variable any variable name you can take like I'm i a b c d x y z anything so if these are names right or you can say here also you can take a uh that meaningful name names list name is names so I'm taking a meaningful variable name also four name not the same variable name that you have taken the sequence name that should be different here we have names here we have name for name in sequence name is what names for each name in names what you need to do here you can do whatever you want to do simply the very basic and simple thing and I just want to print print and I just want to print each name after traversing I want to print each name so print this variable name you have to write down here print name that's it okay I forgot the semicolon and please this statement would be indeed indented this indentation is very important otherwise it will be better you will if you will write them print here here without any indentation it will give error right so better take some indentation here now what it will give what is the working first names is what this so it would be here this complete list would be here or rather than this directly here rather than names directly you can put this list here that is also fine so now first of all this what is the internal working this this names would be replaced with this list now for name in names first name Jenny would be assigned to this name this is a variable name or a placeholder so in name first we have gen for Jenny in names so condition is true in operator membership operator that is that will give it a Jenny in Jenny is present in this list names so it will give true so enter into for Loop and print name so in name we have Jenny so it will print Jenny now again now next is Ram so next time Ram would be assigned to this name Ram in names yes true print name so next line Ram we appended like this next time Rahul would be assigned to this name next time pile will be assigned to this name all the conditions are to do and we will print till the end of the list it will print over the engineer Rahul and pile something like this so this is simple working of for Loop right it will do these actions whatever you will write here it will execute these statements for each item in the sequence foreign right if rather than this if you simply take string then also it will work if I simply take this string Jenny this is also a sequence so in names now we have Jenny string in name now what we have first time we will have J so J in names yes so it will print first J then e then n n y something like this right so if we draw flowchart or simply if we try to draw flowchart for this for Loop then that would be like for each item in sequence what it will do last item reached if this is true then exit from full loop right but if this is not true but this is not the last item in the sequence then what it will do whatever the statement is there that would be executed if this is false and then again will be here so this is kind of flowchart you can draw for this for Loop in Python right once last item reached exit from for loop I told you it is more like an iterator method that we find in other object oriented programming languages not more like for Loop right in other languages the for Loop is there so not same that for Loop but it's more like an iterator means we execute these set of statement once for each item in the sequence right yeah but also now how you will print like one two hundred and one to two hundred that also we can do for that we have another method in function here that is range function so you can use range function for Loop and you can print uh the numbers also right now let me just show you this thing with the help of practically we will see like a program with helper program I'll show you okay so let's create a new file here I'll be naming it for underscore Loop dot p y right okay simply first we will take any sequence let's take a list why Always list let's take a string only so I will be taking like name equal to and here I am taking Jenny that's it now for let's take a variable name let's take I in item you can take for I in this name then colon and you simply you want to print it that is the simplest action we can do print print but you have to put here variable name I right let's just run this and I'll show you c j e n n y you have traversed this sequence using for Loop that's what iterator do right iteration traversing or sequence and this statement can be executed once for every item in this this sequence so this time I'll be taking a list so now this time we have names this list and same you can do with this if you you can just variable name is I is fine let's run this and this time C Jenny Ramen right but within this you can also this is what the simplest thing we can do but we will use it during more complex actions and within this not exactly one statement you can write multiple statements also right and see the indentation part that is very important if you do not put here indentation that is by default actually because see whenever after this I enter Then cursor is here by default indented so simply like print right but if you do note if you remove this indentation that would be an error see indentation error expected an indented block after four statement in life so you have to be very careful about this indentation part because this will specify a block these whatever statements are indented that are under this for Loop right in C or C plus plus one another the language is for representing the block we use curly braces right but here we don't have such kind of thing simply indented means this this is under the for Loop and this is a block so rather than this we can also here print some other thing we can also do like if I print some condition if this I equal to equal to Jenny if this is the case Okay so Jenny is a string so we must put the same here if this is the case again I enter and again it is indented after if also we need some indentation right and simply suppose I print uh hey it's me nothing but simply I know that is not having much sense but taking just simple example so let's run this and see first name is Jenny after Jenny it will check if the name is this I is Jenny yes I in I we have now Jennifer's time Jenny would be assigned to the side right so it will print H me then Ram then Ram this is not true for Ram so sham and Sham and this is also not true for sure so after Jenny 2 print hates me right so we'll take one more complex example now so I am having suppose a list list one and I am having some numbers here like two three any number you can take like minus two and any number we can take then and I want to calculate square of each item square of each item in the list right so first we have to access each item then we calculate square right so how you can access each item we have a full loop here 4 like I in list one or if you take more meaningful name better to take meaningful names so let's take numbers right for I in numbers right you have to calculate squares so let's take a variable M Square only square is equal to this I and this is our operator 2. and simply I can print Square let's run this C 4 9 25 4 and 100 so minus two it's four only right plus 4 and 100. but I want rather than this I want list of these squares like this a list should be printed so that is your you can say quiz for this class so pause the video and try this out you have to calculate square but you have to print rather than this a list right now if you are blank right now so you can go through the list and list methods actually all the methods and you will find out appropriate method for this so pause the video and try this out so I hope you have done this what we can do we can take another empty list and we can add Square in that list and we can print that list so let's take an empty list is an empty list this is empty list we don't have anything right now after calculating this Square what we can do rather than directly printing what we can do in squares in that empty list so squares we can append that Square value so don't append this is the correct method and here we will put what you need to add here Square this Square do not get confused in these names this is squares list name is squares and square is a variable name in which we have square of each item so the square we will add here and rather than printing here after this for Loop we will print what Square this list that's it let's run this and see now here we got the list fine or if you want to print something like this uh the uh list of squares is and comma that is also fine here you can put that list name so see the list of squares says this so rather than just printing we can do many other things with this for Loop but that is what over a sequence you can use this for Loop here we have a range method so that also will be discussing so you have to take any sequence and for each item of that sequence you can do whatever you want to do the section these two lines are indented so this is what for these two lines are under in this four Loop this is what outside of the pole Loop because this is not indented right and if you if what if I put indent in the on this sign also this line would also be now a part of 4 new now let's see what happens see this line would also be printed five times because here we have five items for each item list of square is first four then four nine then this then this and then this right so I hope you got the difference so you can now try this out different different sequence like for tuples or sets different different things because we have taken only string and uh list so on tuples on set dictionary so I haven't discussed and you can try out anything while iterating over that sequence right so I hope you got what is for Loop in Python now next is we can also use else with for Loop yes four else you have must have heard if else but 4 else is also possible so that will be discussing in next video and I'll see in the next video bye take care
