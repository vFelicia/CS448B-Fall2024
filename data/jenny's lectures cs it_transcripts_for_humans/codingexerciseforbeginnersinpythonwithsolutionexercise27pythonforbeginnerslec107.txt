With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - Python programming language in the
00:05 - previous video we have seen what our
00:07 - magic method or what are under methods
00:08 - and python with practical with some
00:11 - programs right now we'll do one coding
00:14 - exercise in this video that is not very
00:16 - tough very simple one now what you have
00:18 - to do see this is the question you have
00:20 - to create a bank account bank account
00:23 - class you can say right and generally we
00:26 - all have our accounts right so what we
00:29 - do
00:31 - we have like the that account holder
00:35 - name as well as we have balance we can
00:37 - check our balance we can deposit we can
00:38 - withdraw right and obviously the
00:41 - withdraw am amount cannot exceed the
00:44 - available balance if you are in account
00:46 - in your account you have 1,000 rupees
00:48 - and you want to withdraw 1,500 rupees
00:51 - then
00:52 - definitely it's not possible it will
00:54 - show like not enough money they're going
00:57 - to give you, 15500 rupees right now this
01:01 - thing you have to implement so you have
01:02 - to create a class having two attribute
01:05 - the name and the balance and with two
01:08 - methods that is that are deposit and
01:12 - withdraw now you have to do some
01:15 - operation like some deposit some
01:17 - withdraw and you have to make sure like
01:20 - the withdraw amount cannot exceed the
01:22 - available
01:23 - balance right so some kind of message it
01:26 - will show if this is the case some kind
01:28 - of me message it should show like no not
01:30 - enough money not enough funds available
01:33 - in your account so withdrawal not
01:36 - possible this kind of thing right so I
01:38 - think that is not so much stuff you can
01:40 - handle this one so pause the video and
01:42 - try this out now okay so I hope you have
01:44 - done this let's try this out let's
01:47 - create a new file so what we need to do
01:51 - you have to create a class bank
01:55 - account right and there I have two
01:58 - attribute so let's have in this
02:01 - Constructor what are we I'm going to
02:04 - have just name
02:07 - and balance
02:12 - right so I'm just going to take passing
02:16 - two parameter like name and balance and
02:18 - the uh number of sorry the name of
02:20 - argument I'm having like
02:24 - account
02:27 - holder is equal to whatever the name we
02:31 - will pass
02:34 - and second name same I'm taking balance
02:40 - right so let's create first uh object
02:43 - and let's try object name I'm taking
02:45 - like b or simply we can take obj this is
02:49 - object of this bank account so what you
02:52 - need to pass name so name let's suppose
02:55 - I'm taking like maybe any name like
02:58 - rames and
03:02 - balance suppose 1,000
03:04 - rupees okay yeah one more thing when we
03:09 - I'm going to print this object then it
03:13 - should show something like this see it
03:17 - should show something like this account
03:19 - holder name Ramesh balance 1,000 rupees
03:22 - I hope you got this because this thing
03:24 - we have done in previous video
03:27 - only have to find out how to you know
03:31 - return the string format or the string
03:34 - representation of your object these two
03:37 - we have an spe special method D method
03:40 - St Str so that thing that thing I can do
03:43 - if see I directly if I print this obj
03:46 - then simply it will print this object at
03:50 - this address memory address right but
03:52 - this thing I don't want so obviously
03:55 - print will call St Str method but this
03:59 - class don't don't have any St Str method
04:01 - so we
04:03 - have this special method St Str we can
04:06 - Define it ourself what it should
04:09 - return it should return or it should
04:12 - print something like this using F string
04:15 - I'm
04:16 - printing account holder name first like
04:20 - self
04:21 - dot account holder name and then in next
04:25 - line for next line we can do like slash
04:28 - n and then it should
04:31 - print
04:34 - balance right so now let's run this see
04:38 - rames and this but let's just decorate
04:41 - something like this first it should show
04:45 - like
04:46 - account holder name this thing and after
04:52 - that it should show
04:53 - show balance something like this so I
04:58 - think it will look better now
05:00 - see account holder name this balance
05:03 - this this is string representation
05:07 - of this object right now the Sprint will
05:11 - ask the object do you have any string
05:12 - representation of yourself the object
05:14 - will say yes I have this is my string
05:17 - representation so this print will call
05:19 - this St Str and this will be printed
05:23 - right
05:25 - sorry next thing what we need to do
05:28 - deposit and withdraw make a method
05:32 - deposit and yeah obviously when you
05:35 - deposit there in the bank then you have
05:37 - some amount so let's pass a
05:43 - parameter
05:45 - amount now whenever you will deposit
05:47 - then if your balance is 1,000 rupees
05:49 - then it will be added to the available
05:51 - balance right so definitely you have to
05:53 - update your balance so what is the thing
05:56 - self do balance equal to
06:00 - in self. Balance what we are going to
06:02 - add plus whatever the amount you'll pass
06:06 - here so it is going to add this one and
06:10 - by chance if you don't pass any amount
06:13 - any balance if there's no balance then
06:15 - by default I want that the balance
06:16 - should be set to zero this thing also we
06:19 - can do so this is deposit and then
06:24 - let's or if you want to print something
06:27 - then a message after depositing then
06:28 - also we can print see if if I don't
06:30 - print any message if this kind of thing
06:32 - is
06:33 - there
06:35 - and if
06:38 - I okay let's do let's print this and
06:41 - after that let's call deposit on this
06:43 - object so object dot this deposit method
06:46 - let's find out and let's deposit 200
06:49 - rupes right so see it will not print
06:52 - anything account holder name balance
06:55 - this because we have printed this obj
06:58 - and then
07:00 - your deposit deposited 2,000 Rupees so
07:03 - if you want to check then
07:06 - again we can print the
07:09 - detail
07:11 - see now balance is 12200 so yeah
07:15 - successfully deposited so if you want to
07:17 - print a message after depositing so
07:20 - simply after this you can
07:28 - print
07:30 - deposited and using F string if you want
07:32 - to show the amount as well so whatever
07:35 - amount you have given deposited this
07:38 - much
07:40 - amount to your
07:44 - account or maybe added this much amount
07:46 - to your balance right now
07:54 - withdraw so just definitely we will pass
07:57 - some withdraw amount as well right
08:00 - so same parameter you can take amount
08:03 - amount or different parameter also it's
08:05 - up to you but here directly we cannot
08:07 - withdraw we have to check if the
08:09 - sufficient funds are available then only
08:11 - we are able to withdraw right so you
08:12 - have to put here if condition this is
08:15 - important one here so if your amount
08:18 - whatever you want to withdraw is greater
08:21 - than the available balance so self dot
08:24 - let's check with self do balance then
08:27 - definitely we cannot withdraw and it
08:30 - should print a message not enough
08:33 - balance
08:34 - else yeah you can withdraw so obviously
08:36 - if you withdraw then this balance should
08:38 - be updated so what it should do from
08:42 - self. balance definitely we are going
08:48 - to do what minus the amount you have
08:53 - passed right rather than this you can
08:56 - simply write the short hand form like
09:00 - this is equal to minus equal to amount
09:05 - this is also fine here also you can
09:06 - write down plus equal to amount right
09:10 - okay so this is the case so after
09:13 - depositing let's withdraw object dot
09:17 - withdraw and I want to withdraw like 500
09:21 - rupees and after that I want to print
09:23 - again the details so let run this see
09:25 - first 1,000 rupees deposited 200 then
09:29 - obviously we have withdraw how many how
09:32 - many Rupees 500 so 700 balance
09:37 - right or if you want to withdraw
09:40 - then then here in withdraw if this to be
09:44 - executed the else block then it should
09:47 - print here it should give you a message
09:50 - like maybe successfully withdrew or any
09:52 - other message just to show you see
09:56 - deposited this successfully withdrew and
09:58 - this much amount you have now I want to
10:00 - withdraw now after that I want to
10:02 - withdraw how many Rupees obj do I just
10:04 - want to call again withdraw and 1,000
10:07 - rupees but there is only 700 rupees left
10:10 - in my account the balance is 700 so
10:13 - definitely it should print some message
10:16 - see the balance was 700 and then after
10:19 - that if you again withdraw 1,000 rupees
10:21 - then it will show not enough balance so
10:23 - this thing we want right so that was a
10:27 - simple exercise I hope you about this
10:30 - it's not so much stuff now according to
10:32 - D you can modify this you can add
10:33 - different different methods or more
10:35 - attributes and you can play with this
10:37 - game so you play with this code right
10:40 - but I hope you got this exercise the
10:42 - solution of this exercise right so now
10:45 - I'll see you in the next Tut bye- bye
10:47 - take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning Python programming language in the previous video we have seen what our magic method or what are under methods and python with practical with some programs right now we'll do one coding exercise in this video that is not very tough very simple one now what you have to do see this is the question you have to create a bank account bank account class you can say right and generally we all have our accounts right so what we do we have like the that account holder name as well as we have balance we can check our balance we can deposit we can withdraw right and obviously the withdraw am amount cannot exceed the available balance if you are in account in your account you have 1,000 rupees and you want to withdraw 1,500 rupees then definitely it's not possible it will show like not enough money they're going to give you, 15500 rupees right now this thing you have to implement so you have to create a class having two attribute the name and the balance and with two methods that is that are deposit and withdraw now you have to do some operation like some deposit some withdraw and you have to make sure like the withdraw amount cannot exceed the available balance right so some kind of message it will show if this is the case some kind of me message it should show like no not enough money not enough funds available in your account so withdrawal not possible this kind of thing right so I think that is not so much stuff you can handle this one so pause the video and try this out now okay so I hope you have done this let's try this out let's create a new file so what we need to do you have to create a class bank account right and there I have two attribute so let's have in this Constructor what are we I'm going to have just name and balance right so I'm just going to take passing two parameter like name and balance and the uh number of sorry the name of argument I'm having like account holder is equal to whatever the name we will pass and second name same I'm taking balance right so let's create first uh object and let's try object name I'm taking like b or simply we can take obj this is object of this bank account so what you need to pass name so name let's suppose I'm taking like maybe any name like rames and balance suppose 1,000 rupees okay yeah one more thing when we I'm going to print this object then it should show something like this see it should show something like this account holder name Ramesh balance 1,000 rupees I hope you got this because this thing we have done in previous video only have to find out how to you know return the string format or the string representation of your object these two we have an spe special method D method St Str so that thing that thing I can do if see I directly if I print this obj then simply it will print this object at this address memory address right but this thing I don't want so obviously print will call St Str method but this class don't don't have any St Str method so we have this special method St Str we can Define it ourself what it should return it should return or it should print something like this using F string I'm printing account holder name first like self dot account holder name and then in next line for next line we can do like slash n and then it should print balance right so now let's run this see rames and this but let's just decorate something like this first it should show like account holder name this thing and after that it should show show balance something like this so I think it will look better now see account holder name this balance this this is string representation of this object right now the Sprint will ask the object do you have any string representation of yourself the object will say yes I have this is my string representation so this print will call this St Str and this will be printed right sorry next thing what we need to do deposit and withdraw make a method deposit and yeah obviously when you deposit there in the bank then you have some amount so let's pass a parameter amount now whenever you will deposit then if your balance is 1,000 rupees then it will be added to the available balance right so definitely you have to update your balance so what is the thing self do balance equal to in self. Balance what we are going to add plus whatever the amount you'll pass here so it is going to add this one and by chance if you don't pass any amount any balance if there's no balance then by default I want that the balance should be set to zero this thing also we can do so this is deposit and then let's or if you want to print something then a message after depositing then also we can print see if if I don't print any message if this kind of thing is there and if I okay let's do let's print this and after that let's call deposit on this object so object dot this deposit method let's find out and let's deposit 200 rupes right so see it will not print anything account holder name balance this because we have printed this obj and then your deposit deposited 2,000 Rupees so if you want to check then again we can print the detail see now balance is 12200 so yeah successfully deposited so if you want to print a message after depositing so simply after this you can print deposited and using F string if you want to show the amount as well so whatever amount you have given deposited this much amount to your account or maybe added this much amount to your balance right now withdraw so just definitely we will pass some withdraw amount as well right so same parameter you can take amount amount or different parameter also it's up to you but here directly we cannot withdraw we have to check if the sufficient funds are available then only we are able to withdraw right so you have to put here if condition this is important one here so if your amount whatever you want to withdraw is greater than the available balance so self dot let's check with self do balance then definitely we cannot withdraw and it should print a message not enough balance else yeah you can withdraw so obviously if you withdraw then this balance should be updated so what it should do from self. balance definitely we are going to do what minus the amount you have passed right rather than this you can simply write the short hand form like this is equal to minus equal to amount this is also fine here also you can write down plus equal to amount right okay so this is the case so after depositing let's withdraw object dot withdraw and I want to withdraw like 500 rupees and after that I want to print again the details so let run this see first 1,000 rupees deposited 200 then obviously we have withdraw how many how many Rupees 500 so 700 balance right or if you want to withdraw then then here in withdraw if this to be executed the else block then it should print here it should give you a message like maybe successfully withdrew or any other message just to show you see deposited this successfully withdrew and this much amount you have now I want to withdraw now after that I want to withdraw how many Rupees obj do I just want to call again withdraw and 1,000 rupees but there is only 700 rupees left in my account the balance is 700 so definitely it should print some message see the balance was 700 and then after that if you again withdraw 1,000 rupees then it will show not enough balance so this thing we want right so that was a simple exercise I hope you about this it's not so much stuff now according to D you can modify this you can add different different methods or more attributes and you can play with this game so you play with this code right but I hope you got this exercise the solution of this exercise right so now I'll see you in the next Tut bye bye take care
