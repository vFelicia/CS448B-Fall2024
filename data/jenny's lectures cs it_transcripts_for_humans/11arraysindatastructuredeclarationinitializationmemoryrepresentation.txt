With timestamps:

00:00 - you will see what is the need of ferry
00:01 - what does any types of ferry how areas
00:05 - can be declared how arrays can be
00:06 - initialized and how data is to be
00:09 - represented in memory or you can see the
00:11 - memory representation of an array fine
00:14 - see I guess you are aware with the
00:17 - fundamental data type status int float
00:19 - care double etc and if I write like this
00:24 - int a is equal to 5 it means you have
00:29 - declared one variable variable name is a
00:31 - type of the data type of this variable
00:35 - is int and the value stored in this
00:37 - variable is 5
00:39 - finally this is one variable variable
00:41 - declaration you can see now how this
00:43 - venue is to be stored in memory let us
00:46 - check so let us take this is our main
00:48 - memory you can draw it vertically you
00:50 - also fine
00:51 - so see these are bytes so you can say
00:55 - memory is a long tape of bytes you can
00:58 - say by it means 8 bits this is one byte
01:01 - this is one byte this is 1 byte like
01:03 - this so this can be extended to this
01:06 - side and this side also that is why I am
01:07 - taking open-ended so now how this
01:11 - variable can be stored here when the
01:13 - compiler compile this line then what
01:15 - happens the word memory manager will do
01:18 - memory manager will allocate some space
01:20 - for this variable to store this value 5
01:23 - here how much space would be allocated
01:26 - see the data type int how many bytes it
01:30 - will take 4 bytes in typical compilers
01:32 - to store an integer data type it will
01:34 - take 4 bytes in traditional compilers we
01:38 - consider it
01:39 - two bytes so you can say 2 or 4 its
01:42 - approve generally we take 4 bytes that
01:44 - is why I am taking for storing 1 integer
01:46 - it will take 4 bytes
01:48 - fine so we have only 1 integer that is
01:50 - why how much memory would be allocated 4
01:52 - bytes would be allocated 4 bytes fine it
01:56 - means how many bits get into 4 that is
02:00 - 32 bits because one bite one bite is
02:04 - equal to 8 bits fine now how the state
02:08 - has to be store first of all this
02:09 - decimal number 5 has to be converted
02:11 - into binary
02:12 - it's binary number sorry that is in 32
02:16 - bits how in 32 bits this number can be
02:19 - represented like this 29 zeros would be
02:24 - there and then we'll write 1 0 1
02:26 - now this binary this binary number is to
02:29 - be stored in memory
02:32 - now how this data is to be stored this 4
02:36 - bytes is to be allocated
02:38 - 1 2 3 4 let us suppose these 4 bytes are
02:41 - to be allocated to store this 5 like
02:44 - this these 4 bytes so these 4 bytes are
02:48 - this is a closer look here we are going
02:51 - to store these visits like this and 1 0
02:59 - 1 and the end 8 bits here eight bits 8
03:03 - bits 8 bits that is 32 bits this is how
03:05 - the number is going to be stored in
03:07 - memory fine and suppose at address you
03:11 - can say C address is always in
03:13 - hexadecimal form but here for simplicity
03:16 - purpose I am taking let us suppose the
03:18 - addresses address of this byte is
03:21 - hundred let us suppose so address of
03:25 - this byte would be 1 0 1 1 0 2 & 1 0 3
03:28 - so it's 100 1 0 1 1 0 2 1 0 3 these 4
03:33 - bytes to be used to store the center see
03:37 - this address would be in hexadecimal
03:38 - form always it's not like hundred or
03:41 - thousand or something like this
03:42 - hexadecimal means always hexadecimal
03:44 - would be represented by prefix with the
03:46 - 0x then you can say 677 see and 0
03:51 - something like this in this form the
03:53 - address would be there but here I am
03:54 - taking just hundred for simplicity
03:56 - purposes so now I'll discuss what is
03:58 - need of Faerie see in this variable we
04:00 - can store only one value at a time if I
04:03 - want to store 6 then what would happen I
04:05 - will write here 6 and 5 is overwritten 5
04:09 - is no more now fine if I want to store 7
04:12 - then I will write 7 and now 5 and 6 are
04:15 - no more and here you will insert 7 or
04:17 - you can say overwritten those 5 & 6 so
04:21 - at one time you can store only one value
04:23 - if I want to store more
04:25 - one will you suppose in my class I have
04:26 - sixty students and I want to store all
04:30 - umbers of all the 60 students now what
04:33 - would happen you have to take in this
04:35 - case if you follow this approach in that
04:36 - case we'll have to take sixty variables
04:39 - because one variable can only store on
04:41 - one value at a time see because we have
04:44 - to process large amount of return that
04:46 - is why the concept of array came
04:47 - now you will modify this declaration
04:51 - such that under one variable name we can
04:55 - store roll numbers of all 60 students
04:59 - that is what array now how you can do
05:03 - this see same data type would be there
05:07 - here we have name but rather than
05:10 - storing one value now I want to store 16
05:13 - values
05:14 - now obviously you how to tell the
05:16 - compiler that I want to store 60 values
05:18 - then you have to give the size of your
05:20 - array so here like this we are going to
05:24 - give the size fine so this is what you
05:29 - can say that declaration of a general
05:32 - syntax would be what data type then air
05:36 - a name any name is a then in brackets
05:40 - size of the air and here you will write
05:43 - what constant well okay see this is
05:47 - invalid declaration if you write int a
05:50 - this this is invalid declaration you
05:53 - cannot leave it blank this is also
05:56 - invalid declaration if you write into a
05:58 - and here you write sizes n sorry int N
06:03 - and here you here you write n this is
06:05 - also invalid declaration here you have
06:07 - to write what constant you can write
06:10 - here a variable but in that case for
06:12 - that case you have to declare macros
06:15 - before main function and below that
06:18 - header files you will declare one macro
06:21 - you can say hash define variable name n
06:23 - size is hundred in that case after that
06:26 - in main function you can write int a and
06:28 - in breakers you can write that variable
06:30 - name fine that is different logic but
06:33 - simply you cannot declare something like
06:34 - this you have to declare this datatype
06:37 - then
06:37 - arrayname then sighs sighs should be
06:39 - constant now see this declaration of
06:42 - arrays language-specific I am here
06:45 - considering the syntax in C language in
06:47 - Python maybe it's different in Pascal in
06:50 - you can say that foreign language the
06:53 - declaration syntax would be a little bit
06:55 - different so it is language specific
06:58 - fine now this is what the array
07:02 - declaration now see this is declaration
07:04 - of 1d array types of era types of array
07:08 - three types of arrays are there one day
07:10 - array one dimensional two dimensional
07:11 - and multi-dimensional array so in this
07:14 - video I am going to talk about 1b array
07:16 - so this is declaration of 1d array so in
07:19 - this we are having one row with 60
07:22 - columns 60 values in columns fine now
07:27 - see how the arrays can be initialized
07:30 - and after that we will discuss how the
07:32 - air is can be represented in memory so
07:36 - see how you can define an array
07:37 - what is definition of error you can say
07:39 - that array is a collection of more than
07:41 - one data item so more than one elements
07:44 - but condition is what the data type of
07:47 - those elements should be same or you can
07:49 - say collection of for the more than one
07:50 - data items of same data tank see here
07:55 - five we can store five elements in the
07:58 - array but all the five elements should
08:00 - be of integer type let us take this
08:01 - example see this is a valid array
08:05 - because here the size of air is 1 2 3 4
08:08 - 5 5 elements are there but all the five
08:10 - elements are of same data-type that is
08:11 - integer here all the data items are of
08:14 - same data-type that is character you can
08:17 - also declare a character array like this
08:19 - data type should be character suppose
08:22 - name of arrays a or b you can take and
08:24 - size is suppose and that is also fine
08:27 - you can take float area also like this
08:31 - float array name is suppose B and I am
08:34 - taking size is fine
08:37 - so that is also fine but see this is
08:39 - fine this is fine because all in this in
08:41 - this array all the elements are
08:43 - character type same like but this is not
08:46 - valid this is
08:47 - not valid because in this array
08:49 - one-two-three-four-five size is five but
08:52 - here we have integer value also and
08:54 - character value also so different
08:56 - datatypes items are there that is not
08:58 - possible in area all the data items
09:01 - should be of same data-type now how the
09:04 - data how the elements of the arrays are
09:07 - stored in this memory all the elements
09:10 - are stored in consecutive locations or
09:12 - you can say continuous locations one
09:15 - after another how the data is to be
09:17 - stored in the memory I'll discuss in
09:19 - this video only but that is a very
09:21 - important point fine
09:22 - all the elements have stored in
09:24 - consecutive locations and index will be
09:27 - started from zero although somewhere we
09:29 - can start the index from one that is
09:30 - also fine but generally we take the
09:33 - index of array should be started from
09:35 - zero now how to access those elements of
09:39 - the array we will also discuss that
09:40 - thing right see now how the arrays to be
09:43 - initialized and it can be initialized by
09:48 - two types one is at compile time and one
09:51 - is at runtime compile time means static
09:54 - initialization would be there at the
09:56 - time of declaration only at the time of
09:58 - declaration own only you will specify
10:01 - what what elements you want in the array
10:04 - and at runtime means while executing the
10:08 - program at the runtime you can ask from
10:10 - the user what are the elements of the
10:12 - array fine
10:14 - now one more important point about
10:16 - arrays that that it is a fixed size
10:18 - array now we have declared sizeof array
10:20 - that is 5 now at runtime you cannot
10:23 - change the size of theory it's not like
10:25 - you can store six elements fine you can
10:28 - store only five element maximum you can
10:30 - store two elements that is fine but you
10:32 - cannot exceed from this limit this is
10:35 - fixed now this is maybe you can say a
10:38 - drawback of a that you cannot change the
10:40 - size of the array during runtime
10:42 - although one concept is there that is of
10:44 - full dynamic array but we will discuss
10:47 - those things in later what is dynamic
10:50 - array what is the language something
10:51 - like this in this video I am discussing
10:52 - only the fundamental so very so now we
10:55 - will see how era can be initialized at
10:57 - compile time first of all see
11:00 - and the time of declaration only you
11:02 - will specify the elements of theory
11:04 - suppose five elements I want so I can
11:07 - specify here these five elements right
11:13 - so that is fixed these five elements
11:15 - will be stored in the array this is
11:18 - compile time initialization here the
11:22 - size is five so you cannot write here
11:24 - six elements if you write six seven or
11:27 - more than five elements then it will
11:28 - give a compile time ever
11:30 - you cannot exceed from this limit
11:32 - although you can specify less than five
11:35 - elements if I specify here only six and
11:37 - two that is also fine remaining four
11:41 - remaining four position it will store
11:43 - what 0 it will initialize doing 0 but
11:46 - more than 5 you cannot write here so
11:49 - this is a compile time initialization
11:51 - now how these did this these elements
11:55 - has to be stored in this memory latest
11:57 - check see now the size is to be located
11:59 - is 5 into 4 that is 20 bytes memory
12:01 - manager will allocate 20 bytes but in
12:04 - consecutive bytes consecutive bytes
12:06 - should be located let us suppose it here
12:09 - allocate from this address and let us
12:13 - suppose address I am taking hundred so
12:15 - till 100 - 1 0 9 here the data is the
12:19 - memory memory is to be located for these
12:21 - elements now how the data is to be
12:23 - stored first of all the 6 6 is to be
12:26 - converted into binary form and then the
12:31 - data is to be stored here 6 is to be
12:35 - stored here 6 in these 4 bytes
12:41 - next to be store so this is how the step
12:45 - is to be store see first of all this is
12:46 - to be converted into binary phone fine
12:49 - but I am NOT taking here binary form I
12:51 - am just simply writing 6 in these 4
12:53 - bytes in these 4 bytes - then 4 then 3 &
12:56 - 0
12:57 - see this 6 2 4 3 & 0 these are in
12:59 - consecutive locations continuous
13:01 - locations so for simplicity purpose I am
13:04 - going to represent this data like this
13:07 - fine this bloke is having these 4 bits
13:09 - this is also having sorry 4 bytes this
13:12 - is also having 4 bytes
13:13 - that is 32 bits but for simplicity
13:16 - purposes I am writing here like this so
13:18 - this is her array name is a and address
13:21 - of this's hundred hundred so now address
13:27 - of this two thus a dress of two would be
13:29 - what see this 2 would be 1 0 4 this
13:33 - would be 1 0 8 this would be 1 1 2 and
13:39 - this would be 1 1 6 and why so because
13:42 - this this element is going to take 4
13:45 - bytes
13:46 - ones 101 0 1 1 0 2 & 1 0 3 that is why
13:50 - it is 1 0 4 how this address is to be
13:53 - calculated what is the formula since the
13:55 - formula is before going to formula
13:59 - lentes check the this this index would
14:01 - be 0 1 2 3 4 we are going to start the
14:06 - index of this array with 0 for
14:09 - simplicity purpose
14:10 - somewhere it is also started with the
14:12 - one that is fine but here I am going to
14:14 - start with 0 so now how the data is to
14:16 - be accessed how you can calculate this
14:18 - address so this is how you can write at
14:20 - a of a or 0 at index 0 we have 6 a of 1
14:24 - we have 2 a of 2 we have for something
14:26 - like this fine how to access how to
14:29 - access the data how to calculate the
14:31 - address see we know the base address of
14:34 - there a base address means from where
14:36 - the arrays to be started that is to be
14:38 - started from 100 so base a addresses 100
14:42 - so how does this address is to be
14:44 - calculated suppose I am a Louise I would
14:47 - be starting from 0 till 4 means 0 to n
14:52 - minus 1 or you can say size of array n
14:55 - is equal to size of any right so if you
14:59 - want to access I is equal to 2 this data
15:02 - when I is equal to 2 means I is equal to
15:05 - 2 that is third when you how to access
15:08 - this value so the formula would be base
15:11 - address Plus this I value into size of
15:17 - data type you have taken the data type
15:19 - of array is here in so size would be 4
15:23 - bytes now how to calculate address for
15:26 - this
15:26 - location I is equal to 2c base addresses
15:29 - hundred so the DS address would be in
15:32 - hexadecimal form just to make you
15:34 - understand I am taking here in tisiphone
15:36 - hundred plus I values to you want to
15:39 - calculate address for this two into size
15:42 - of data type data type isn't size would
15:45 - be four bytes so now here you will take
15:48 - hundred plus eight that has one zero it
15:52 - the location would be one zero eight
15:54 - where this well lose there that it I
15:57 - used to be there so that is why a of 2a
16:00 - of 2a of two is what for that is this is
16:03 - how you can after finding the address
16:04 - you can access the data fine so say see
16:09 - the array follows the random X's you can
16:12 - access any data with a constant time if
16:16 - you know the base address because if you
16:19 - know the base address you just simply
16:21 - need to do only one plus and one into
16:24 - one you can say addition and one
16:27 - multiplication and you can X is the data
16:29 - so that I am taken for this accessing is
16:32 - order of 1 that is constraint time and
16:35 - array follows what random X's method and
16:40 - let us suppose if you take character
16:41 - Airy here me how cat canary name is B
16:44 - and I am taking here sizes 10 and Here I
16:48 - am initializing this character array
16:50 - also and I am taking some values fine so
16:54 - now how these value is to be stored see
16:57 - I have taken sizes 10 so in memory how
17:00 - many bytes is to be allocated so for
17:03 - this size of character is character will
17:05 - take one bite one in two sizes 10 here
17:09 - we have 10 characters so 10 bytes would
17:11 - be allocated fine somewhere
17:14 - 10 bytes should be consecutive let us
17:17 - suppose this air is also there and after
17:20 - maybe not 1 1 9 but from here from here
17:27 - from 120 to 120 to 10 bytes till 132 has
17:33 - been allocated to this character array B
17:36 - so how the data is to be stored here
17:39 - here this paste is to be allocated now
17:43 - this this data is to be stored here but
17:48 - here we have null because we are
17:51 - specified only one two three four five
17:53 - characters but the size has been
17:56 - allocated to four ten characters so this
17:59 - is now you can say that wastage of space
18:01 - so now see the drawback you can say the
18:06 - one another topic of the series what you
18:08 - have to specify the size at compile time
18:10 - but in advance we don't know how much
18:13 - space we need it may be sometimes you
18:16 - have declared that I want an area of
18:19 - size hundred so now that hundred the
18:22 - space of that hundred element so you can
18:25 - say four hundred bytes has been
18:27 - allocated to you for this any name a but
18:31 - actually you are using only you are
18:33 - storing only 10 integers so you are
18:36 - wasting that space now so that is a
18:39 - drawback often that array that static
18:41 - declaration of Eric and sometimes you
18:44 - want to store more data then you have
18:48 - declared here now suppose you have
18:50 - declared the size of arrays hundred four
18:54 - hundred integers but now actually when
18:55 - runtime you want to store 200 integers
18:58 - but that is impossible because you have
19:01 - already declared the size now if you ask
19:03 - to the memory manager that I want to
19:06 - store 200 integers so I want to extend
19:08 - my area so now what memory manager will
19:11 - do memory manager will allocate you our
19:13 - space or fresh new space of for for 200
19:18 - integer so you can say 800 bytes in
19:22 - consecutive locations and what my mail
19:24 - manager will do memory manager will copy
19:26 - the data because previously he has
19:28 - allocated space for hundred integers to
19:31 - you so those hundred integers would be
19:32 - copied from there to the new location
19:35 - fine so that would be very tedious work
19:37 - to do so this is how you can initialize
19:40 - there at compile time only now I run
19:42 - time how to initialize so at run time
19:44 - you can initialize the array using loops
19:48 - maybe for loop while you do
19:50 - Loup and some predefined function
19:52 - standard functions that is scanner I'm
19:56 - going to write down that code here see
19:59 - let us suppose I have I have declared an
20:01 - array of size five fine now at runtime I
20:05 - want to ask from the user which data he
20:08 - wants in this area
20:10 - so now what I'll do C printf function is
20:14 - for what for printing something on the
20:16 - spring show so I am writing here enter
20:18 - the elements of array so this line is to
20:23 - be printed on your screen now for taking
20:27 - the input from the user you will write
20:29 - what scanner
20:32 - but first the most important point about
20:36 - this is you have to use some loops
20:38 - because you are going to take
20:40 - continuously five integers from the user
20:44 - so we'll suppose I am taking for loop
20:47 - here and I I would be started index
20:50 - would be started from zero I less than
20:52 - size minus 1 that is 4 and I plus plus
20:55 - so within this for loop you can write
20:58 - percentage is DN and rename a so this is
21:02 - how during runtime you can take that
21:06 - value from that a I am going to discuss
21:08 - it how the data is to be taken from the
21:11 - user how the data is to be stored in the
21:13 - array in next video so these are some
21:16 - points that we have discussed in this
21:18 - video
21:18 - see arrays are fixed size fixed size
21:21 - means once you have declared the size at
21:23 - compile time you cannot change it at
21:24 - runtime fixed size sequenced collection
21:27 - of data items of same data-type data
21:30 - items should be of same data-type that
21:32 - is also a drawback of the air fine
21:34 - X is a particular element in the array
21:36 - what you will have to write just write
21:38 - array name and in the brackets you will
21:40 - write the index value suppose you want
21:43 - to access the first element then you
21:45 - will write what array and in bracket you
21:49 - will write a 0 because we are going to
21:50 - start the index from 0 data items are
21:54 - stored in continuous locations and
21:56 - random access is there you can access
21:59 - any element
22:01 - and that will take a constant time order
22:03 - of and how we are going to access that I
22:05 - have discussed with the help of formula
22:07 - I have so various three 1d 2d and
22:09 - multi-dimensional array we have
22:10 - discussed how 1d array say this topic we
22:12 - have discussed declaration insulation
22:15 - accessing of this 1d array in next video
22:18 - we are going to discuss how the data is
22:20 - to be inserted how the arrays to be
22:22 - traversed different types of operations
22:24 - on 1d array first of all with their time
22:27 - taken and after that we will discuss
22:29 - what is 2d array as well as how the data
22:32 - is to be accessed from 2d array fine so
22:35 - I'll see you in the next video till the
22:36 - map IIT

Cleaned transcript:

you will see what is the need of ferry what does any types of ferry how areas can be declared how arrays can be initialized and how data is to be represented in memory or you can see the memory representation of an array fine see I guess you are aware with the fundamental data type status int float care double etc and if I write like this int a is equal to 5 it means you have declared one variable variable name is a type of the data type of this variable is int and the value stored in this variable is 5 finally this is one variable variable declaration you can see now how this venue is to be stored in memory let us check so let us take this is our main memory you can draw it vertically you also fine so see these are bytes so you can say memory is a long tape of bytes you can say by it means 8 bits this is one byte this is one byte this is 1 byte like this so this can be extended to this side and this side also that is why I am taking openended so now how this variable can be stored here when the compiler compile this line then what happens the word memory manager will do memory manager will allocate some space for this variable to store this value 5 here how much space would be allocated see the data type int how many bytes it will take 4 bytes in typical compilers to store an integer data type it will take 4 bytes in traditional compilers we consider it two bytes so you can say 2 or 4 its approve generally we take 4 bytes that is why I am taking for storing 1 integer it will take 4 bytes fine so we have only 1 integer that is why how much memory would be allocated 4 bytes would be allocated 4 bytes fine it means how many bits get into 4 that is 32 bits because one bite one bite is equal to 8 bits fine now how the state has to be store first of all this decimal number 5 has to be converted into binary it's binary number sorry that is in 32 bits how in 32 bits this number can be represented like this 29 zeros would be there and then we'll write 1 0 1 now this binary this binary number is to be stored in memory now how this data is to be stored this 4 bytes is to be allocated 1 2 3 4 let us suppose these 4 bytes are to be allocated to store this 5 like this these 4 bytes so these 4 bytes are this is a closer look here we are going to store these visits like this and 1 0 1 and the end 8 bits here eight bits 8 bits 8 bits that is 32 bits this is how the number is going to be stored in memory fine and suppose at address you can say C address is always in hexadecimal form but here for simplicity purpose I am taking let us suppose the addresses address of this byte is hundred let us suppose so address of this byte would be 1 0 1 1 0 2 & 1 0 3 so it's 100 1 0 1 1 0 2 1 0 3 these 4 bytes to be used to store the center see this address would be in hexadecimal form always it's not like hundred or thousand or something like this hexadecimal means always hexadecimal would be represented by prefix with the 0x then you can say 677 see and 0 something like this in this form the address would be there but here I am taking just hundred for simplicity purposes so now I'll discuss what is need of Faerie see in this variable we can store only one value at a time if I want to store 6 then what would happen I will write here 6 and 5 is overwritten 5 is no more now fine if I want to store 7 then I will write 7 and now 5 and 6 are no more and here you will insert 7 or you can say overwritten those 5 & 6 so at one time you can store only one value if I want to store more one will you suppose in my class I have sixty students and I want to store all umbers of all the 60 students now what would happen you have to take in this case if you follow this approach in that case we'll have to take sixty variables because one variable can only store on one value at a time see because we have to process large amount of return that is why the concept of array came now you will modify this declaration such that under one variable name we can store roll numbers of all 60 students that is what array now how you can do this see same data type would be there here we have name but rather than storing one value now I want to store 16 values now obviously you how to tell the compiler that I want to store 60 values then you have to give the size of your array so here like this we are going to give the size fine so this is what you can say that declaration of a general syntax would be what data type then air a name any name is a then in brackets size of the air and here you will write what constant well okay see this is invalid declaration if you write int a this this is invalid declaration you cannot leave it blank this is also invalid declaration if you write into a and here you write sizes n sorry int N and here you here you write n this is also invalid declaration here you have to write what constant you can write here a variable but in that case for that case you have to declare macros before main function and below that header files you will declare one macro you can say hash define variable name n size is hundred in that case after that in main function you can write int a and in breakers you can write that variable name fine that is different logic but simply you cannot declare something like this you have to declare this datatype then arrayname then sighs sighs should be constant now see this declaration of arrays languagespecific I am here considering the syntax in C language in Python maybe it's different in Pascal in you can say that foreign language the declaration syntax would be a little bit different so it is language specific fine now this is what the array declaration now see this is declaration of 1d array types of era types of array three types of arrays are there one day array one dimensional two dimensional and multidimensional array so in this video I am going to talk about 1b array so this is declaration of 1d array so in this we are having one row with 60 columns 60 values in columns fine now see how the arrays can be initialized and after that we will discuss how the air is can be represented in memory so see how you can define an array what is definition of error you can say that array is a collection of more than one data item so more than one elements but condition is what the data type of those elements should be same or you can say collection of for the more than one data items of same data tank see here five we can store five elements in the array but all the five elements should be of integer type let us take this example see this is a valid array because here the size of air is 1 2 3 4 5 5 elements are there but all the five elements are of same datatype that is integer here all the data items are of same datatype that is character you can also declare a character array like this data type should be character suppose name of arrays a or b you can take and size is suppose and that is also fine you can take float area also like this float array name is suppose B and I am taking size is fine so that is also fine but see this is fine this is fine because all in this in this array all the elements are character type same like but this is not valid this is not valid because in this array onetwothreefourfive size is five but here we have integer value also and character value also so different datatypes items are there that is not possible in area all the data items should be of same datatype now how the data how the elements of the arrays are stored in this memory all the elements are stored in consecutive locations or you can say continuous locations one after another how the data is to be stored in the memory I'll discuss in this video only but that is a very important point fine all the elements have stored in consecutive locations and index will be started from zero although somewhere we can start the index from one that is also fine but generally we take the index of array should be started from zero now how to access those elements of the array we will also discuss that thing right see now how the arrays to be initialized and it can be initialized by two types one is at compile time and one is at runtime compile time means static initialization would be there at the time of declaration only at the time of declaration own only you will specify what what elements you want in the array and at runtime means while executing the program at the runtime you can ask from the user what are the elements of the array fine now one more important point about arrays that that it is a fixed size array now we have declared sizeof array that is 5 now at runtime you cannot change the size of theory it's not like you can store six elements fine you can store only five element maximum you can store two elements that is fine but you cannot exceed from this limit this is fixed now this is maybe you can say a drawback of a that you cannot change the size of the array during runtime although one concept is there that is of full dynamic array but we will discuss those things in later what is dynamic array what is the language something like this in this video I am discussing only the fundamental so very so now we will see how era can be initialized at compile time first of all see and the time of declaration only you will specify the elements of theory suppose five elements I want so I can specify here these five elements right so that is fixed these five elements will be stored in the array this is compile time initialization here the size is five so you cannot write here six elements if you write six seven or more than five elements then it will give a compile time ever you cannot exceed from this limit although you can specify less than five elements if I specify here only six and two that is also fine remaining four remaining four position it will store what 0 it will initialize doing 0 but more than 5 you cannot write here so this is a compile time initialization now how these did this these elements has to be stored in this memory latest check see now the size is to be located is 5 into 4 that is 20 bytes memory manager will allocate 20 bytes but in consecutive bytes consecutive bytes should be located let us suppose it here allocate from this address and let us suppose address I am taking hundred so till 100 1 0 9 here the data is the memory memory is to be located for these elements now how the data is to be stored first of all the 6 6 is to be converted into binary form and then the data is to be stored here 6 is to be stored here 6 in these 4 bytes next to be store so this is how the step is to be store see first of all this is to be converted into binary phone fine but I am NOT taking here binary form I am just simply writing 6 in these 4 bytes in these 4 bytes then 4 then 3 & 0 see this 6 2 4 3 & 0 these are in consecutive locations continuous locations so for simplicity purpose I am going to represent this data like this fine this bloke is having these 4 bits this is also having sorry 4 bytes this is also having 4 bytes that is 32 bits but for simplicity purposes I am writing here like this so this is her array name is a and address of this's hundred hundred so now address of this two thus a dress of two would be what see this 2 would be 1 0 4 this would be 1 0 8 this would be 1 1 2 and this would be 1 1 6 and why so because this this element is going to take 4 bytes ones 101 0 1 1 0 2 & 1 0 3 that is why it is 1 0 4 how this address is to be calculated what is the formula since the formula is before going to formula lentes check the this this index would be 0 1 2 3 4 we are going to start the index of this array with 0 for simplicity purpose somewhere it is also started with the one that is fine but here I am going to start with 0 so now how the data is to be accessed how you can calculate this address so this is how you can write at a of a or 0 at index 0 we have 6 a of 1 we have 2 a of 2 we have for something like this fine how to access how to access the data how to calculate the address see we know the base address of there a base address means from where the arrays to be started that is to be started from 100 so base a addresses 100 so how does this address is to be calculated suppose I am a Louise I would be starting from 0 till 4 means 0 to n minus 1 or you can say size of array n is equal to size of any right so if you want to access I is equal to 2 this data when I is equal to 2 means I is equal to 2 that is third when you how to access this value so the formula would be base address Plus this I value into size of data type you have taken the data type of array is here in so size would be 4 bytes now how to calculate address for this location I is equal to 2c base addresses hundred so the DS address would be in hexadecimal form just to make you understand I am taking here in tisiphone hundred plus I values to you want to calculate address for this two into size of data type data type isn't size would be four bytes so now here you will take hundred plus eight that has one zero it the location would be one zero eight where this well lose there that it I used to be there so that is why a of 2a of 2a of two is what for that is this is how you can after finding the address you can access the data fine so say see the array follows the random X's you can access any data with a constant time if you know the base address because if you know the base address you just simply need to do only one plus and one into one you can say addition and one multiplication and you can X is the data so that I am taken for this accessing is order of 1 that is constraint time and array follows what random X's method and let us suppose if you take character Airy here me how cat canary name is B and I am taking here sizes 10 and Here I am initializing this character array also and I am taking some values fine so now how these value is to be stored see I have taken sizes 10 so in memory how many bytes is to be allocated so for this size of character is character will take one bite one in two sizes 10 here we have 10 characters so 10 bytes would be allocated fine somewhere 10 bytes should be consecutive let us suppose this air is also there and after maybe not 1 1 9 but from here from here from 120 to 120 to 10 bytes till 132 has been allocated to this character array B so how the data is to be stored here here this paste is to be allocated now this this data is to be stored here but here we have null because we are specified only one two three four five characters but the size has been allocated to four ten characters so this is now you can say that wastage of space so now see the drawback you can say the one another topic of the series what you have to specify the size at compile time but in advance we don't know how much space we need it may be sometimes you have declared that I want an area of size hundred so now that hundred the space of that hundred element so you can say four hundred bytes has been allocated to you for this any name a but actually you are using only you are storing only 10 integers so you are wasting that space now so that is a drawback often that array that static declaration of Eric and sometimes you want to store more data then you have declared here now suppose you have declared the size of arrays hundred four hundred integers but now actually when runtime you want to store 200 integers but that is impossible because you have already declared the size now if you ask to the memory manager that I want to store 200 integers so I want to extend my area so now what memory manager will do memory manager will allocate you our space or fresh new space of for for 200 integer so you can say 800 bytes in consecutive locations and what my mail manager will do memory manager will copy the data because previously he has allocated space for hundred integers to you so those hundred integers would be copied from there to the new location fine so that would be very tedious work to do so this is how you can initialize there at compile time only now I run time how to initialize so at run time you can initialize the array using loops maybe for loop while you do Loup and some predefined function standard functions that is scanner I'm going to write down that code here see let us suppose I have I have declared an array of size five fine now at runtime I want to ask from the user which data he wants in this area so now what I'll do C printf function is for what for printing something on the spring show so I am writing here enter the elements of array so this line is to be printed on your screen now for taking the input from the user you will write what scanner but first the most important point about this is you have to use some loops because you are going to take continuously five integers from the user so we'll suppose I am taking for loop here and I I would be started index would be started from zero I less than size minus 1 that is 4 and I plus plus so within this for loop you can write percentage is DN and rename a so this is how during runtime you can take that value from that a I am going to discuss it how the data is to be taken from the user how the data is to be stored in the array in next video so these are some points that we have discussed in this video see arrays are fixed size fixed size means once you have declared the size at compile time you cannot change it at runtime fixed size sequenced collection of data items of same datatype data items should be of same datatype that is also a drawback of the air fine X is a particular element in the array what you will have to write just write array name and in the brackets you will write the index value suppose you want to access the first element then you will write what array and in bracket you will write a 0 because we are going to start the index from 0 data items are stored in continuous locations and random access is there you can access any element and that will take a constant time order of and how we are going to access that I have discussed with the help of formula I have so various three 1d 2d and multidimensional array we have discussed how 1d array say this topic we have discussed declaration insulation accessing of this 1d array in next video we are going to discuss how the data is to be inserted how the arrays to be traversed different types of operations on 1d array first of all with their time taken and after that we will discuss what is 2d array as well as how the data is to be accessed from 2d array fine so I'll see you in the next video till the map IIT
