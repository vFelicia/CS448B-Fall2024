With timestamps:

00:01 - so in the series of learning c plus plus
00:02 - programming language in the previous
00:03 - video we have discussed keywords and
00:05 - identifiers in c plus plus the next
00:07 - topic is data types so in this video
00:09 - we'll talk about
00:10 - why we need a data type what is a data
00:12 - type and what are different data types
00:14 - in c plus plus we use
00:16 - built-in data types primary user defined
00:19 - all these things we'll discuss in this
00:20 - video with the help of a program i'll
00:22 - show you practical also like how to use
00:24 - data types in your program how to
00:27 - calculate size of a data type what are
00:28 - different data types you can use
00:30 - when to use these type of data types
00:32 - right in which situation you should use
00:34 - this data type so these things will
00:36 - discuss in this video with the help of
00:37 - program i'll show you now before that
00:40 - just want to tell you about a job
00:41 - opening which vx4 weeks has brought for
00:43 - you guys i hope you are aware about
00:45 - geeksforgeeks
00:47 - it's a computer computer science portal
00:49 - for geeks they provide variety of
00:51 - services like free tutorials
00:53 - live courses online courses classroom
00:56 - courses webinars by the experts
00:59 - uh they
01:00 - you know provide frequent according
01:02 - competition also internship
01:04 - opportunities job opportunities
01:06 - so here yes they have they are hiring
01:09 - right now they have a job opening that
01:11 - is for android developer as you can see
01:14 - on my screen they have given all the
01:15 - details
01:17 - the experience you need is
01:18 - zero to three years means if you are a
01:20 - fresher you have zero experience you can
01:22 - apply up to three years experience you
01:23 - can apply right and the salary is
01:26 - 6lp to 12lp it would be based on your
01:29 - experience and the location would be
01:30 - obviously knowing other companies in
01:32 - noda
01:33 - so how you can apply for this thing the
01:35 - link i'll put in the description box of
01:37 - this video you can just click to that
01:39 - link and this page will be redirected
01:41 - now there you can apply now but before
01:43 - applying you just
01:44 - it's better you should read the jd the
01:46 - job description like what they need
01:49 - about this role what should be your
01:51 - responsibilities what should be your
01:53 - roles and everything what they want like
01:55 - the desired skills so first of all read
01:57 - this thing they have provided everything
02:00 - so you can just you know
02:02 - see the list of these skills and if you
02:04 - think that if you are a perfect fit for
02:07 - this role you can apply how you will
02:09 - apply for this thing the link i have
02:11 - told you i will put in the description
02:13 - box of this video you can just click to
02:14 - that link you will be redirected to this
02:17 - page and you can directly apply from
02:18 - this thing so all the relevant links and
02:20 - details you will find in the description
02:22 - box of this video you can go and check
02:24 - out
02:24 - now let's see what is a data type and
02:26 - first of all why we need a data type
02:29 - see let's take one example
02:31 - in your almera we have different
02:33 - different size of
02:34 - compartments like us big one there we
02:37 - put our clothes
02:38 - a small one maybe you can put your shoes
02:42 - or anything else
02:43 - right uh
02:45 - small one you know a very small
02:47 - compartment also within
02:50 - a large one there we can it's you can
02:53 - call it a locker there you put your
02:55 - jewelry or your cash it's not like that
02:57 - in that small one you put your clothes
02:59 - no
03:00 - so according to a requirement we reserve
03:02 - the space same you can take example in
03:04 - your kitchen different different
03:06 - containers are there everything like for
03:08 - masala small containers for
03:10 - you know putting you can say the atta a
03:12 - big one for
03:14 - putting some or for storing you can say
03:16 - rice big one
03:19 - so for storing different different kind
03:21 - of things we have different different
03:22 - kind of containers
03:24 - so with reserve space we take container
03:26 - according to our requirement what is our
03:27 - requirement
03:29 - same thing we want to store obviously
03:31 - when you write program or you when you
03:33 - develop any software there we have to
03:35 - maintain the software will maintain the
03:37 - information the information can be in
03:38 - the form of numbers or any information
03:40 - can be there in the form of image videos
03:43 - audios anything
03:44 - so if you want to store some numbers if
03:47 - you want to write a program like add two
03:49 - numbers i want to add these two numbers
03:51 - five and three so obviously you need to
03:53 - store these two numbers in the computer
03:54 - memory right and how you can store that
03:58 - variable we declare a variable
04:01 - right
04:02 - so we declare two variable in one
04:03 - variable we store five in second we
04:05 - store three variable is nothing just a
04:08 - uh named memory location the name of the
04:09 - memory location where the data is to be
04:11 - stored
04:12 - right so now
04:14 - how you will tell
04:17 - like your system
04:19 - that how much memory you need
04:21 - if you want to store like the these are
04:23 - small numbers if i want to store a
04:26 - mobile number that would be a big one
04:28 - large one if you want to store salary if
04:31 - you want to store a floating point
04:32 - number your marks if you want to store
04:34 - account number
04:36 - so according to that you need some space
04:38 - if you want to store a single character
04:40 - or any symbol like hash dollar
04:43 - right so according to your requirement
04:46 - we reserve some space it's not like that
04:48 - we want to store this number five only
04:51 - and we resolve or you can say i want to
04:54 - store this character a
04:57 - and i will resolve space of
05:02 - because this a one character can
05:04 - be stored in one byte only right a
05:06 - memory you can think like it's a cube
05:10 - which is having multiple blocks
05:13 - and each block is of one byte
05:16 - right
05:17 - so rather than cube i am just
05:19 - taking this as a suppose memory
05:22 - this is going on like this and this one
05:25 - box is
05:26 - one by equivalent to one byte this is
05:29 - one byte this is one by one byte like
05:30 - this this is going on this is our memory
05:33 - so if you want to store this number this
05:36 - one a it will take only one byte this is
05:38 - character
05:40 - right data type although we'll discuss
05:41 - these things later
05:43 - but let me just
05:45 - you just have to remember like a is a
05:47 - character it will take only one byte so
05:48 - this byte it will take it's not like
05:49 - that it will take only one byte and will
05:51 - reserve space of 10 bytes no
05:53 - that is wastage of space only so you
05:55 - have to tell
05:57 - that type of data according to that
05:58 - memory would be allocated to you by the
06:00 - memory manager
06:02 - right
06:03 - if i tell
06:04 - like i want to store this file
06:07 - this is what ink we know
06:10 - and generally in take four bytes
06:15 - so memory manager will allocate four
06:16 - bytes for us
06:18 - right so what data type will tell how we
06:21 - will tell
06:22 - like how much memory we need or which
06:24 - type of data we want to store
06:26 - we have to tell the computer now
06:30 - right through our program so in our
06:32 - program what we will write through which
06:33 - we can tell we write data types
06:36 - so data types will tell two things first
06:38 - of all which type of data you want to
06:40 - store in the memory second thing how
06:42 - much memory you need the size how much
06:44 - space you need how many bytes two things
06:46 - it will tell
06:48 - so how to write these thing in a
06:49 - variable obviously we will store
06:52 - uh you can say the information the data
06:55 - so first we will write data type
06:57 - then
06:58 - uh variable
07:00 - name and then whatever value you want to
07:03 - store you can store or that's it that
07:05 - this is just declaration data type and
07:07 - variable name that's it
07:08 - right so it will tell two things about
07:11 - this thing this variable name will
07:12 - contain which type of data and how much
07:14 - memory should be allocated to this how
07:15 - many bytes
07:17 - right so now what are different data
07:19 - types in c plus plus data types
07:20 - primarily you know categorized into
07:22 - three
07:23 - uh category first is primary data type
07:26 - or you can say built in or you can say
07:28 - fundamental data type these are already
07:31 - defined or built in in c plus plus
07:32 - programming language
07:34 - right second is derived
07:36 - which we will be derived from the
07:38 - fundamental data types
07:40 - third one is user defined that we define
07:43 - according to our requirement three
07:44 - categories are there right let me just
07:47 - list down these things
07:56 - so these are three mainly categories
07:58 - primary or you can say built in or
08:00 - fundamental here we have eight float
08:02 - double care these are in c also what are
08:04 - different in this
08:06 - w care underscore t this is for white
08:08 - character
08:10 - bool for true and false and void
08:13 - means nothing these are primary data
08:15 - types so built-in data types one by one
08:17 - we will discuss these data types with an
08:18 - example these are derived we generally
08:20 - derive these things from primary data
08:22 - types like array
08:24 - array of integer array of numbers hero
08:27 - floats area of characters like string
08:29 - you can say pointers function reference
08:31 - user defines our class structure union
08:34 - enum typed
08:35 - so these things derived and user defined
08:38 - these are complete you can say i know
08:40 - topic
08:41 - so these things will discuss later one
08:44 - by one in detail right now our focus is
08:46 - on primary data types because for
08:48 - writing programs obviously we need
08:49 - built-in data types
08:51 - right so first thing we will discuss int
08:54 - and see we have some
08:56 - data modifiers as well
08:58 - so
09:00 - we have modifiers signed unsigned
09:06 - short and long four data modifiers these
09:09 - are known as data modifiers modifier
09:11 - means they can modify something so you
09:14 - can use these modifiers with these
09:16 - data types so they will modify something
09:19 - into these data types now what they will
09:21 - modify what is that something i'll show
09:23 - you right so first let's take example of
09:26 - this one into data type
09:28 - it will take four bytes
09:30 - on 32-bit machine 64-bit mesh machine
09:34 - you know it takes four bytes and
09:36 - on 16-bit machine it takes two bytes but
09:38 - on my machine on my laptop it is taking
09:40 - four bytes generally it takes four bytes
09:43 - right in traditional compiler it takes
09:45 - two bytes but we consider it now take
09:47 - four bytes if you want to find out you
09:49 - can just write down a program you just
09:51 - calculate the size of the end how to
09:53 - calculate i will show you in my program
09:54 - right on your machine how much byte it
09:56 - is taking so it means simple numbers
09:58 - like 0
09:59 - minus 1 23 43 1 2 3 4 these are integers
10:04 - negative positive or 0 simply
10:06 - 4 bytes it will take 4 bytes means how
10:08 - many bits 32 bits
10:11 - right
10:12 - so let's take these are
10:14 - 32 bits
10:17 - one byte pins eight bits so it into four
10:20 - thirty two bits so see let's see the
10:22 - range
10:23 - the smallest number you can store in
10:25 - these bits is all the bits would be
10:27 - filled with zero zero zero so the
10:28 - smallest number would be
10:30 - zero
10:32 - right i am talking about unsigned int we
10:34 - are not taking negative numbers so
10:37 - unsigned in
10:40 - see unsigned is data modifier if you
10:43 - have used this unsigned with this end
10:45 - means it will modify
10:46 - the meaning of this end modify means now
10:48 - it can store only
10:50 - positive numbers and sign in positive
10:53 - numbers right now maximum number what
10:56 - you can store
10:57 - just put 1 1 1 1 in all the 32 bits
11:01 - and that number would be what
11:04 - see this number would be 2 raised to the
11:06 - power 32 minus 1
11:10 - so the range for unsigned it would be
11:11 - this now why this 2 raised to the power
11:13 - 32 minus 1 let's take we have suppose 2
11:16 - bits
11:16 - 0 and 1 only
11:18 - so
11:19 - how many combination you can made 0 0 0
11:22 - 1
11:23 - 1 0 1 1
11:26 - that's it so maximum number is this one
11:28 - this would be 3
11:30 - in binary we write 3 something like this
11:33 - how you can calculate
11:34 - just
11:35 - divide this by 2
11:37 - 2 1
11:39 - remainder would be 1 again we will you
11:41 - will divide zero and one so once you'll
11:43 - this to zero
11:44 - stop now just take from this side to
11:47 - this from bottom to up one one one one
11:49 - this would be three in binary so maximum
11:52 - number is three means two raised to
11:53 - power two minus one
11:55 - four minus one if we have we have
11:58 - three
11:59 - bits
12:00 - right then how many combination can be
12:02 - there zero zero zero
12:10 - i hope
12:12 - you can you know these combinations
12:14 - right
12:15 - so now the maximum number you can store
12:16 - is this is
12:18 - uh sorry not 8 7
12:20 - it means 2 raised to power 3 minus one
12:23 - three bits two is equal to three minus
12:24 - one that eight minus one seven so same
12:27 - you have 32 bits so maximum number you
12:28 - can store is two raised to about 32
12:30 - minus one
12:31 - right so this would be range for
12:33 - unsigned in if you want to store
12:35 - negative number also so for signed in
12:38 - just
12:39 - use the data modifier signed signed in
12:41 - the range would be
12:43 - negative also 0 also positive also so on
12:45 - negative side we can store
12:48 - see for signed
12:50 - one bit this bit would be
12:52 - used
12:53 - to represent the sign msb most
12:56 - significant bit
12:58 - it's whether it's positive number or
12:59 - negative number right so one would be
13:02 - bit would be reserved for the sign so
13:04 - remaining bits are 31 bits only
13:07 - so the range would be minus 2 raised to
13:09 - the power 31 to 2 raised to the power 31
13:12 - minus 1
13:12 - [Music]
13:14 - so for positive side 2 is about 31 minus
13:17 - 1 the largest number negative side the
13:19 - largest number is 2 raised to power 31
13:20 - not minus 1 why so we can see
13:23 - 0 we have minus 0 and plus 0
13:27 - but
13:28 - it doesn't make any sense we only write
13:30 - 0 no negative 0 right so we just remove
13:33 - this negative 0
13:35 - rather than this negative 0 we can store
13:37 - one more integer negative integer
13:39 - negative number that is why this is 2
13:40 - raised to the power 31 but for positive
13:42 - side from 0 we will count so 0 to 2
13:44 - raised to the power 31 minus 1
13:46 - i hope you got this the range the signed
13:48 - range right
13:51 - now this is unsigned it and signed in
13:53 - now another modifier is what it will
13:56 - take four bytes suppose i want to store
13:58 - a small number only
14:00 - right
14:01 - that suppose i want to store only like
14:03 - in
14:04 - a 5
14:07 - or 10
14:09 - this 10 in binary would be 1 0 1 0
14:13 - so it would require only you can say
14:15 - four bits so maximum
14:17 - uh the smallest is one byte the memory
14:20 - one memory block could be of one byte
14:22 - right so we have to allocate at least
14:25 - one byte
14:26 - fine
14:27 - but
14:28 - now rather than if we define it int
14:31 - memory would be a located four bytes but
14:33 - this can be stored in one byte also so
14:37 - three bits are wastage of memory right
14:40 - so yes one more modifier we can use with
14:42 - it that is short
14:44 - small number if you want to store small
14:46 - number use shortened it will take two
14:48 - bytes in memory
14:51 - the minimum it can take is two bytes not
14:53 - one one byte will take character right
14:57 - so but rather than writing in here we
14:59 - just declare it short it rather than
15:03 - four it will take two bytes
15:04 - it will save two bytes
15:06 - memory space right
15:08 - now short end will take two bytes means
15:09 - 16 bits
15:12 - with short also we can use
15:14 - two thing
15:16 - like
15:16 - signed
15:17 - short and sorry unsigned and
15:20 - signed shortened so range of unsigned
15:24 - would be same
15:25 - zero two
15:27 - six five five three five six five five
15:29 - three five is nothing but two raised to
15:31 - power sixteen minus one
15:34 - right
15:35 - sign would be minus three two seven six
15:38 - eight two 3 2 7 6
15:41 - 7
15:42 - it's nothing but 2 raised to power 15 to
15:46 - 2 raised to power 15 minus 1 and the
15:47 - logic is same as we have discussed in
15:49 - this i hope you got the logic why this
15:52 - range
15:53 - so this is for short and short signed
15:56 - and this is for unsigned shot and this
15:57 - for signed short the range right one
16:00 - more modifier we can use that as long
16:04 - long end
16:05 - long end will take four bytes same as
16:07 - int right
16:09 - now
16:10 - in long also we have unsigned long
16:13 - signed long so range would be same
16:15 - because the size is four four byte for
16:17 - indulge or four bytes so the range would
16:18 - be same only right if you want to store
16:21 - suppose
16:22 - a phone number
16:24 - right if we write this number
16:26 - the range of this would be so see i am
16:29 - writing the range for the signed end
16:31 - minus 2 raised to the power 31 would be
16:33 - would be equivalent to this number 2
16:34 - raised to about 31 minus 1 would be
16:36 - equivalent to this number so then you
16:37 - don't have to remember this range
16:39 - you can calculate 2 is power 32 and
16:41 - minus 1 and you can write down this
16:42 - thing but if you want to store like a
16:45 - phone number
16:46 - right
16:48 - then we cannot use this end
16:51 - right because phone number would be
16:54 - far greater number than this range so
16:57 - for that you can write down
16:59 - two time long long long now this
17:02 - would be of size would be 8 bytes
17:05 - now in this we can store so 8 bytes
17:08 - means definitely the range would be
17:10 - much more than this this range
17:13 - right
17:14 - so let me just show you right how to use
17:17 - this and i hope the range is clear to
17:19 - you guys how to use data modifier is
17:21 - clear to you guys and before writing the
17:24 - program you must remember you know you
17:27 - must have the idea about the the circle
17:29 - the unsigned circle let me just draw the
17:31 - circle here sign circle and unsign
17:33 - circle based on that circle we will
17:35 - write down a program and then you will
17:37 - get why you are getting these kind of
17:38 - values the output so let me just draw
17:41 - that circle first here see this is
17:43 - circle for unsigned short from 0 to 1 2
17:47 - 3 4 like this and the range is 6 5 5 3 5
17:50 - maximum number this is for signed
17:52 - short means 0 1 2 3 4 positive side up
17:56 - to 3 2 7 6 7 negative side minus 1 minus
17:59 - 2 minus 3 till minus 3 2 7 6 8. you just
18:04 - draw these circles i'll write down a
18:06 - program
18:08 - why you are getting that output from
18:10 - that program
18:11 - you will get if you have idea of the
18:13 - circ so first of all draw this thing
18:16 - then now just let me show you some
18:18 - practical part
18:20 - so this is a program right there is no
18:23 - rocket science we don't have you know we
18:25 - haven't written any complicated logic so
18:27 - that's why i have already written this
18:29 - program just to save the time
18:31 - same the header i o stream dot h we are
18:33 - using the name space std then main in
18:36 - main
18:36 - we are declaring some variables
18:38 - different different data types we are
18:39 - using that's it
18:41 - and how to write that thing i already
18:43 - told you like first is
18:45 - unsigned
18:46 - short
18:47 - the name of the variable i am taking you
18:49 - short underscore in that is name of the
18:50 - variable the value 56 then signed short
18:54 - you do not have to write
18:55 - unsigned short int if you want to write
18:57 - you can write that is also fine but
18:59 - unsigned short that is also fine right
19:02 - signed short if you don't write anything
19:03 - like int a i want to store this thing
19:06 - int a
19:07 - by default it would be considered as
19:09 - signed in
19:11 - right by default then long end time
19:13 - taking then long long in time taking
19:16 - and this thing i haven't discussed so
19:18 - let me just clear out this thing this
19:20 - thing will discuss later
19:22 - right so now first thing i am just
19:26 - printing the size of
19:27 - these
19:29 - data types
19:30 - right
19:33 - size of shortened size of wind size of
19:36 - long size of long long size of or let me
19:38 - just comment out this
19:40 - we will discuss this thing in next video
19:43 - maybe or after that
19:44 - right
19:46 - then we have size of
19:48 - long long we have printed two times so
19:50 - let me just clear out this thing also
19:53 - okay
19:54 - shortened int long and long end
19:57 - fine now we are printing the values
19:59 - unsigned short signed short long end
20:03 - then we have
20:06 - long long end then let me just clear out
20:08 - this line also
20:11 - right
20:12 - and then i am just printing value of
20:14 - a
20:16 - right
20:18 - okay now
20:21 - that's it
20:23 - with return 0 we are ending our program
20:27 - and let me just
20:29 - run this and show you the output
20:32 - see size of short end is two bytes it is
20:35 - telling the size and bytes two bytes
20:37 - size of int is four size of long is also
20:39 - four in my machine long long is eight
20:42 - the values it is printing
20:43 - unsigned short is fifty six you can see
20:47 - sign short
20:48 - minus x
20:50 - long end
20:51 - you can see the value long into value is
20:53 - this four five six seven eight nine
20:55 - long long end
20:56 - and the mobile number i am taking any
20:58 - mobile number
20:59 - and this int a this thing
21:03 - if in this int a you take mobile number
21:06 - see i'm taking the same mobile number
21:07 - that we have
21:09 - taken
21:10 - triple nine one six five
21:14 - four three two one it's not my mobile
21:16 - number right
21:18 - now it will print any garbage value
21:20 - because int a the range of int is
21:24 - it will be considered as signed in so
21:26 - signed into range is not that long
21:29 - so now it will print c overflow the
21:33 - warning is overflow and it will print a
21:35 - any garbage value so if you want to
21:37 - print the long number like a mobile
21:39 - number you just take long long
21:43 - in 8 bytes yeah you can print that
21:45 - number see this long long end is
21:48 - printing this number
21:50 - mobile number correctly right
21:52 - now see what i want to tell you
21:56 - unsigned short the range is
21:59 - zero to six five five three five but if
22:01 - i want to print six five five
22:04 - three six
22:07 - what it will print it will not give any
22:09 - error
22:10 - just a warning and it will print
22:12 - something now what it will print let me
22:13 - just show you
22:15 - see the warning is first of all you just
22:17 - have to see the warning
22:18 - okay two warning it is giving first of
22:20 - all let me just uh you know
22:23 - do this thing
22:25 - the number that's it now let me just run
22:28 - this and see it will give one warning
22:30 - now
22:32 - see
22:33 - large integer implicitly truncated to
22:35 - unsigned type this this
22:37 - unsigned short
22:39 - it is out of that range
22:41 - it is giving warning but what it will
22:43 - print the unsigned unsigned short
22:46 - value is zero
22:48 - now why zero it is printing here
22:53 - because see in the circle it will it
22:55 - will count you just refer to the circle
22:57 - 0 1 2 3 4 like this the last value is 6
22:59 - 5 5 3 5
23:01 - after
23:02 - 6 5 5 3 5
23:04 - would be 6 5 5 3 6 right but at the
23:07 - place of six five five three six in the
23:09 - circle we have zero again
23:11 - we reach to zero so it will print a zero
23:13 - that's why
23:15 - i have you know uh you know
23:18 - told you that please note down the
23:19 - circle if same for signed short if i
23:23 - print minus 3 2 7
23:27 - [Music]
23:28 - 7 3 2 7 6
23:30 - 9
23:32 - so it is out of the range the range is
23:34 - minus three to seven six eight but i am
23:37 - printing nine
23:38 - so what it should print according to you
23:40 - let's run the sent
23:42 - same it will give warning overflow thing
23:44 - type of thing and for signed short it is
23:47 - printing three two seven six seven but
23:50 - actual value is minus three two seven
23:51 - six nine
23:52 - right same just refer to the circle
23:55 - minus three two seven six eight
23:57 - after that it would be minus three two
23:59 - seven six nine but rather than this
24:02 - thing in the circle we have three two
24:04 - seven six seven the same value repeating
24:06 - you know in the circle we are moving
24:08 - that is why it is printing three two
24:09 - seven six seven so this type of thing
24:12 - you can try out if you have those
24:13 - circles you can try out these things if
24:15 - you find out like
24:17 - if you are not getting something the
24:18 - output why you are getting that output
24:20 - you can ask me in comment box or maybe
24:21 - you can just take the screenshot and you
24:23 - can send me on my instagram account
24:25 - right i hope now this range and
24:27 - everything is clear to you guys and the
24:29 - data types the data modifiers how can
24:31 - you use with int right if you have any
24:33 - doubt you can tell me you can you know
24:35 - ask me in comment box right
24:37 - so that's it for this video now so i
24:39 - think it is clear to you the basics of
24:41 - data type like what is the data type why
24:43 - we need a data type and inter data type
24:45 - is clear to you guys right now i am
24:47 - expecting a question from you guys right
24:50 - if you have
24:51 - you know uh listen this lecture
24:53 - carefully then definitely this doubt
24:55 - would be in you guys if you are curious
24:58 - so first of all i'll read out the
25:00 - comments after uploading this this video
25:02 - and then definitely i'll give a shout
25:04 - out to those to that student
25:07 - who will
25:08 - you know ask that question that i am
25:10 - thinking that you will ask
25:12 - i think that question should be in the
25:14 - mind of every student
25:16 - if you will not ask that's that question
25:18 - i'll answer that question also in maybe
25:20 - next or after that video
25:22 - right later videos
25:24 - so now in the next video we'll see
25:27 - float data type so now in the next video
25:29 - till then bye take care

Cleaned transcript:

so in the series of learning c plus plus programming language in the previous video we have discussed keywords and identifiers in c plus plus the next topic is data types so in this video we'll talk about why we need a data type what is a data type and what are different data types in c plus plus we use builtin data types primary user defined all these things we'll discuss in this video with the help of a program i'll show you practical also like how to use data types in your program how to calculate size of a data type what are different data types you can use when to use these type of data types right in which situation you should use this data type so these things will discuss in this video with the help of program i'll show you now before that just want to tell you about a job opening which vx4 weeks has brought for you guys i hope you are aware about geeksforgeeks it's a computer computer science portal for geeks they provide variety of services like free tutorials live courses online courses classroom courses webinars by the experts uh they you know provide frequent according competition also internship opportunities job opportunities so here yes they have they are hiring right now they have a job opening that is for android developer as you can see on my screen they have given all the details the experience you need is zero to three years means if you are a fresher you have zero experience you can apply up to three years experience you can apply right and the salary is 6lp to 12lp it would be based on your experience and the location would be obviously knowing other companies in noda so how you can apply for this thing the link i'll put in the description box of this video you can just click to that link and this page will be redirected now there you can apply now but before applying you just it's better you should read the jd the job description like what they need about this role what should be your responsibilities what should be your roles and everything what they want like the desired skills so first of all read this thing they have provided everything so you can just you know see the list of these skills and if you think that if you are a perfect fit for this role you can apply how you will apply for this thing the link i have told you i will put in the description box of this video you can just click to that link you will be redirected to this page and you can directly apply from this thing so all the relevant links and details you will find in the description box of this video you can go and check out now let's see what is a data type and first of all why we need a data type see let's take one example in your almera we have different different size of compartments like us big one there we put our clothes a small one maybe you can put your shoes or anything else right uh small one you know a very small compartment also within a large one there we can it's you can call it a locker there you put your jewelry or your cash it's not like that in that small one you put your clothes no so according to a requirement we reserve the space same you can take example in your kitchen different different containers are there everything like for masala small containers for you know putting you can say the atta a big one for putting some or for storing you can say rice big one so for storing different different kind of things we have different different kind of containers so with reserve space we take container according to our requirement what is our requirement same thing we want to store obviously when you write program or you when you develop any software there we have to maintain the software will maintain the information the information can be in the form of numbers or any information can be there in the form of image videos audios anything so if you want to store some numbers if you want to write a program like add two numbers i want to add these two numbers five and three so obviously you need to store these two numbers in the computer memory right and how you can store that variable we declare a variable right so we declare two variable in one variable we store five in second we store three variable is nothing just a uh named memory location the name of the memory location where the data is to be stored right so now how you will tell like your system that how much memory you need if you want to store like the these are small numbers if i want to store a mobile number that would be a big one large one if you want to store salary if you want to store a floating point number your marks if you want to store account number so according to that you need some space if you want to store a single character or any symbol like hash dollar right so according to your requirement we reserve some space it's not like that we want to store this number five only and we resolve or you can say i want to store this character a and i will resolve space of because this a one character can be stored in one byte only right a memory you can think like it's a cube which is having multiple blocks and each block is of one byte right so rather than cube i am just taking this as a suppose memory this is going on like this and this one box is one by equivalent to one byte this is one byte this is one by one byte like this this is going on this is our memory so if you want to store this number this one a it will take only one byte this is character right data type although we'll discuss these things later but let me just you just have to remember like a is a character it will take only one byte so this byte it will take it's not like that it will take only one byte and will reserve space of 10 bytes no that is wastage of space only so you have to tell that type of data according to that memory would be allocated to you by the memory manager right if i tell like i want to store this file this is what ink we know and generally in take four bytes so memory manager will allocate four bytes for us right so what data type will tell how we will tell like how much memory we need or which type of data we want to store we have to tell the computer now right through our program so in our program what we will write through which we can tell we write data types so data types will tell two things first of all which type of data you want to store in the memory second thing how much memory you need the size how much space you need how many bytes two things it will tell so how to write these thing in a variable obviously we will store uh you can say the information the data so first we will write data type then uh variable name and then whatever value you want to store you can store or that's it that this is just declaration data type and variable name that's it right so it will tell two things about this thing this variable name will contain which type of data and how much memory should be allocated to this how many bytes right so now what are different data types in c plus plus data types primarily you know categorized into three uh category first is primary data type or you can say built in or you can say fundamental data type these are already defined or built in in c plus plus programming language right second is derived which we will be derived from the fundamental data types third one is user defined that we define according to our requirement three categories are there right let me just list down these things so these are three mainly categories primary or you can say built in or fundamental here we have eight float double care these are in c also what are different in this w care underscore t this is for white character bool for true and false and void means nothing these are primary data types so builtin data types one by one we will discuss these data types with an example these are derived we generally derive these things from primary data types like array array of integer array of numbers hero floats area of characters like string you can say pointers function reference user defines our class structure union enum typed so these things derived and user defined these are complete you can say i know topic so these things will discuss later one by one in detail right now our focus is on primary data types because for writing programs obviously we need builtin data types right so first thing we will discuss int and see we have some data modifiers as well so we have modifiers signed unsigned short and long four data modifiers these are known as data modifiers modifier means they can modify something so you can use these modifiers with these data types so they will modify something into these data types now what they will modify what is that something i'll show you right so first let's take example of this one into data type it will take four bytes on 32bit machine 64bit mesh machine you know it takes four bytes and on 16bit machine it takes two bytes but on my machine on my laptop it is taking four bytes generally it takes four bytes right in traditional compiler it takes two bytes but we consider it now take four bytes if you want to find out you can just write down a program you just calculate the size of the end how to calculate i will show you in my program right on your machine how much byte it is taking so it means simple numbers like 0 minus 1 23 43 1 2 3 4 these are integers negative positive or 0 simply 4 bytes it will take 4 bytes means how many bits 32 bits right so let's take these are 32 bits one byte pins eight bits so it into four thirty two bits so see let's see the range the smallest number you can store in these bits is all the bits would be filled with zero zero zero so the smallest number would be zero right i am talking about unsigned int we are not taking negative numbers so unsigned in see unsigned is data modifier if you have used this unsigned with this end means it will modify the meaning of this end modify means now it can store only positive numbers and sign in positive numbers right now maximum number what you can store just put 1 1 1 1 in all the 32 bits and that number would be what see this number would be 2 raised to the power 32 minus 1 so the range for unsigned it would be this now why this 2 raised to the power 32 minus 1 let's take we have suppose 2 bits 0 and 1 only so how many combination you can made 0 0 0 1 1 0 1 1 that's it so maximum number is this one this would be 3 in binary we write 3 something like this how you can calculate just divide this by 2 2 1 remainder would be 1 again we will you will divide zero and one so once you'll this to zero stop now just take from this side to this from bottom to up one one one one this would be three in binary so maximum number is three means two raised to power two minus one four minus one if we have we have three bits right then how many combination can be there zero zero zero i hope you can you know these combinations right so now the maximum number you can store is this is uh sorry not 8 7 it means 2 raised to power 3 minus one three bits two is equal to three minus one that eight minus one seven so same you have 32 bits so maximum number you can store is two raised to about 32 minus one right so this would be range for unsigned in if you want to store negative number also so for signed in just use the data modifier signed signed in the range would be negative also 0 also positive also so on negative side we can store see for signed one bit this bit would be used to represent the sign msb most significant bit it's whether it's positive number or negative number right so one would be bit would be reserved for the sign so remaining bits are 31 bits only so the range would be minus 2 raised to the power 31 to 2 raised to the power 31 minus 1 so for positive side 2 is about 31 minus 1 the largest number negative side the largest number is 2 raised to power 31 not minus 1 why so we can see 0 we have minus 0 and plus 0 but it doesn't make any sense we only write 0 no negative 0 right so we just remove this negative 0 rather than this negative 0 we can store one more integer negative integer negative number that is why this is 2 raised to the power 31 but for positive side from 0 we will count so 0 to 2 raised to the power 31 minus 1 i hope you got this the range the signed range right now this is unsigned it and signed in now another modifier is what it will take four bytes suppose i want to store a small number only right that suppose i want to store only like in a 5 or 10 this 10 in binary would be 1 0 1 0 so it would require only you can say four bits so maximum uh the smallest is one byte the memory one memory block could be of one byte right so we have to allocate at least one byte fine but now rather than if we define it int memory would be a located four bytes but this can be stored in one byte also so three bits are wastage of memory right so yes one more modifier we can use with it that is short small number if you want to store small number use shortened it will take two bytes in memory the minimum it can take is two bytes not one one byte will take character right so but rather than writing in here we just declare it short it rather than four it will take two bytes it will save two bytes memory space right now short end will take two bytes means 16 bits with short also we can use two thing like signed short and sorry unsigned and signed shortened so range of unsigned would be same zero two six five five three five six five five three five is nothing but two raised to power sixteen minus one right sign would be minus three two seven six eight two 3 2 7 6 7 it's nothing but 2 raised to power 15 to 2 raised to power 15 minus 1 and the logic is same as we have discussed in this i hope you got the logic why this range so this is for short and short signed and this is for unsigned shot and this for signed short the range right one more modifier we can use that as long long end long end will take four bytes same as int right now in long also we have unsigned long signed long so range would be same because the size is four four byte for indulge or four bytes so the range would be same only right if you want to store suppose a phone number right if we write this number the range of this would be so see i am writing the range for the signed end minus 2 raised to the power 31 would be would be equivalent to this number 2 raised to about 31 minus 1 would be equivalent to this number so then you don't have to remember this range you can calculate 2 is power 32 and minus 1 and you can write down this thing but if you want to store like a phone number right then we cannot use this end right because phone number would be far greater number than this range so for that you can write down two time long long long now this would be of size would be 8 bytes now in this we can store so 8 bytes means definitely the range would be much more than this this range right so let me just show you right how to use this and i hope the range is clear to you guys how to use data modifier is clear to you guys and before writing the program you must remember you know you must have the idea about the the circle the unsigned circle let me just draw the circle here sign circle and unsign circle based on that circle we will write down a program and then you will get why you are getting these kind of values the output so let me just draw that circle first here see this is circle for unsigned short from 0 to 1 2 3 4 like this and the range is 6 5 5 3 5 maximum number this is for signed short means 0 1 2 3 4 positive side up to 3 2 7 6 7 negative side minus 1 minus 2 minus 3 till minus 3 2 7 6 8. you just draw these circles i'll write down a program why you are getting that output from that program you will get if you have idea of the circ so first of all draw this thing then now just let me show you some practical part so this is a program right there is no rocket science we don't have you know we haven't written any complicated logic so that's why i have already written this program just to save the time same the header i o stream dot h we are using the name space std then main in main we are declaring some variables different different data types we are using that's it and how to write that thing i already told you like first is unsigned short the name of the variable i am taking you short underscore in that is name of the variable the value 56 then signed short you do not have to write unsigned short int if you want to write you can write that is also fine but unsigned short that is also fine right signed short if you don't write anything like int a i want to store this thing int a by default it would be considered as signed in right by default then long end time taking then long long in time taking and this thing i haven't discussed so let me just clear out this thing this thing will discuss later right so now first thing i am just printing the size of these data types right size of shortened size of wind size of long size of long long size of or let me just comment out this we will discuss this thing in next video maybe or after that right then we have size of long long we have printed two times so let me just clear out this thing also okay shortened int long and long end fine now we are printing the values unsigned short signed short long end then we have long long end then let me just clear out this line also right and then i am just printing value of a right okay now that's it with return 0 we are ending our program and let me just run this and show you the output see size of short end is two bytes it is telling the size and bytes two bytes size of int is four size of long is also four in my machine long long is eight the values it is printing unsigned short is fifty six you can see sign short minus x long end you can see the value long into value is this four five six seven eight nine long long end and the mobile number i am taking any mobile number and this int a this thing if in this int a you take mobile number see i'm taking the same mobile number that we have taken triple nine one six five four three two one it's not my mobile number right now it will print any garbage value because int a the range of int is it will be considered as signed in so signed into range is not that long so now it will print c overflow the warning is overflow and it will print a any garbage value so if you want to print the long number like a mobile number you just take long long in 8 bytes yeah you can print that number see this long long end is printing this number mobile number correctly right now see what i want to tell you unsigned short the range is zero to six five five three five but if i want to print six five five three six what it will print it will not give any error just a warning and it will print something now what it will print let me just show you see the warning is first of all you just have to see the warning okay two warning it is giving first of all let me just uh you know do this thing the number that's it now let me just run this and see it will give one warning now see large integer implicitly truncated to unsigned type this this unsigned short it is out of that range it is giving warning but what it will print the unsigned unsigned short value is zero now why zero it is printing here because see in the circle it will it will count you just refer to the circle 0 1 2 3 4 like this the last value is 6 5 5 3 5 after 6 5 5 3 5 would be 6 5 5 3 6 right but at the place of six five five three six in the circle we have zero again we reach to zero so it will print a zero that's why i have you know uh you know told you that please note down the circle if same for signed short if i print minus 3 2 7 7 3 2 7 6 9 so it is out of the range the range is minus three to seven six eight but i am printing nine so what it should print according to you let's run the sent same it will give warning overflow thing type of thing and for signed short it is printing three two seven six seven but actual value is minus three two seven six nine right same just refer to the circle minus three two seven six eight after that it would be minus three two seven six nine but rather than this thing in the circle we have three two seven six seven the same value repeating you know in the circle we are moving that is why it is printing three two seven six seven so this type of thing you can try out if you have those circles you can try out these things if you find out like if you are not getting something the output why you are getting that output you can ask me in comment box or maybe you can just take the screenshot and you can send me on my instagram account right i hope now this range and everything is clear to you guys and the data types the data modifiers how can you use with int right if you have any doubt you can tell me you can you know ask me in comment box right so that's it for this video now so i think it is clear to you the basics of data type like what is the data type why we need a data type and inter data type is clear to you guys right now i am expecting a question from you guys right if you have you know uh listen this lecture carefully then definitely this doubt would be in you guys if you are curious so first of all i'll read out the comments after uploading this this video and then definitely i'll give a shout out to those to that student who will you know ask that question that i am thinking that you will ask i think that question should be in the mind of every student if you will not ask that's that question i'll answer that question also in maybe next or after that video right later videos so now in the next video we'll see float data type so now in the next video till then bye take care
