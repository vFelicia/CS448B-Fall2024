With timestamps:

00:00 - so in the series of learning programming
00:01 - in c we are discussing some special
00:02 - pointers in c we have discussed void
00:05 - null and dangling pointer now we are
00:07 - left with one more pointer that is
00:09 - wild pointer so that we will discuss in
00:11 - uh this video what is world pointer and
00:14 - what's the reason your you know program
00:17 - if pointer becomes wild pointer in your
00:19 - program we will see that thing with the
00:21 - help of a simple program and will also
00:23 - see uh when you run that program which
00:25 - is having a wild pointer then what kind
00:27 - of output you get or maybe you are
00:29 - getting which kind of error or warning
00:30 - what you get
00:31 - so that also will discuss practically
00:33 - right everything about wild quarter we
00:35 - will discuss in this video it's not you
00:36 - know
00:37 - that very large concept in c but it's
00:40 - just a simple and small concept you have
00:43 - to be aware about these kind of pointers
00:46 - right like void null dangling and while
00:48 - pointer so that we will discuss in this
00:50 - video but before that just want to tell
00:52 - you one thing
00:53 - if you are looking for a great career in
00:55 - software development then you must have
00:57 - to think about the aspects like what's
00:59 - trending in the industry and the type of
01:01 - questions being asked in the interviews
01:03 - how to improve your course ranking so
01:05 - here an academy brings you a platform
01:07 - where you can watch where you can get
01:09 - access to weekly shows which you can
01:10 - watch live
01:11 - and their host are
01:13 - seven star coders on code chef and are
01:16 - industry experts with years of
01:18 - experience and they are also working in
01:20 - some of the top companies like amazon
01:22 - google linkedin
01:24 - and in these episodes
01:26 - they'll be covering a lot of content
01:27 - that would be really helpful for your
01:28 - career like in live episodes you can get
01:31 - opportunity to ask tech hr about top 20
01:34 - questions and industry leaders directly
01:36 - about their recruitment process in
01:38 - startups and mncs and what's the
01:40 - eligibility criteria and how to apply
01:42 - for them and you can also get your
01:43 - resume reviewed by the experts not only
01:47 - this you can also participate in mock
01:49 - interviews
01:50 - and learn courses on programming
01:51 - languages cloud computing blockchain and
01:53 - crypto
01:54 - tech aspects of digital marketing and
01:56 - data analytics have you ever thought
01:58 - about how these front line apps like
02:00 - amazon flip card practo ola were made in
02:03 - first place and what was the thought
02:04 - process so here is a show to answer all
02:07 - these questions
02:08 - in this show their host anuj will
02:10 - discuss the architecture breakdown of
02:12 - the popular apps so learners will get to
02:15 - see how these apps were made and how
02:17 - these apps work so you can find out the
02:19 - detail of the show and the batch
02:21 - in the link that i'll put in the
02:22 - description box of this video and don't
02:24 - forget to use my code jkl10 to get 10
02:26 - extra discount on your subscription
02:29 - so now let's see what is
02:32 - wild pointer
02:35 - see i hope everybody know how to declare
02:37 - a pointer in star
02:39 - ptr right it's just a declaration of
02:41 - quantum
02:42 - and here
02:44 - it at this time
02:46 - what is the address in this ptr variable
02:48 - ptr is a variable memory has been
02:50 - assigned to this variable and some
02:51 - address would be there obviously suppose
02:53 - address of this pointer is 2046
02:56 - and it is going to contain some address
02:58 - obviously pointer is a variable that is
03:00 - going to contain address of another
03:01 - variable but here i am not assigning any
03:03 - address here so at this time at this
03:06 - time it is what an initialized pointer
03:11 - right
03:13 - and if it is uninitialized then there
03:15 - would be some garbage value
03:19 - we don't know it will contain some
03:20 - address like we have memory
03:22 - if your machine is of 32 bits then the
03:26 - memory would be off how many bytes you
03:28 - will have to raise to power 32
03:30 - right
03:31 - like numbering would be from
03:33 - 0 1 to each byte
03:36 - like this
03:38 - till 2 raised to power 32 these many
03:41 - bytes you would have so somewhere
03:43 - suppose somewhere in this memory
03:46 - four bytes has been allocated to this
03:47 - point the size is of four byte or
03:49 - obviously it depends on that um
03:51 - architecture of your machine
03:53 - right so in 32 bit four bytes so suppose
03:56 - four bytes means uh two zero four six is
03:59 - the first byte two zero four seven two
04:01 - zero four eight two zero four
04:03 - nine
04:04 - right obviously we will take base
04:06 - address so it is two zero four six
04:09 - of this pointer and this pointer is
04:10 - having
04:11 - what now
04:13 - any garbage value
04:15 - suppose address
04:16 - there is some blog whose address is
04:18 - suppose um
04:20 - 5146
04:22 - and it is containing address 5146
04:26 - right because we haven't assigned any
04:28 - address to this pointer and now
04:31 - if you will print this pointer like
04:33 - strict ptr
04:36 - if you want to print whatever the value
04:39 - at this address address is what in pti
04:41 - now address is 5146 now value at this
04:45 - address we don't know what is the value
04:46 - because it's not a valid address
04:48 - so maybe it will give some garbage value
04:51 - we don't know what is there at that
04:52 - address or maybe your program will crash
04:55 - so it will show some undefined behavior
04:57 - right we can't say
04:59 - what it will print because this block
05:02 - that this pointer is containing address
05:03 - of this block and this is not consumed
05:06 - memory
05:07 - we haven't reserved this memory
05:09 - right so it's like invalid for us we
05:11 - have just reserved these four bytes
05:14 - because we have just
05:15 - declare a pointer so now this memory is
05:17 - reserved for us
05:19 - uh having a base set is two zero four
05:21 - six
05:22 - right so it will give some garbage value
05:24 - right or maybe your program will crash
05:26 - so this pointer you can say this is
05:28 - acting as a wild pointer now
05:31 - you can say
05:32 - this is uninitialized pointer so if a
05:34 - pointer is uninitialized that will act
05:36 - as a wild pointer
05:39 - right
05:40 - so
05:41 - these are risky to use please don't
05:43 - leave
05:44 - any pointer uninitialized because it
05:47 - will give some nasty bugs in your
05:50 - system in your program
05:52 - right so now what is the solution what
05:55 - you can say
05:56 - if you don't know how to if you don't
05:58 - know like what address
05:59 - you you want to store in this pointer
06:02 - then simply you can say
06:04 - make it null pointer that we have
06:07 - already discussed null pointer
06:09 - right so now in pointer we have
06:13 - 0 no so it is not pointing to any valid
06:15 - address
06:16 - right and we cannot dereference this
06:18 - pointer further in program if you want
06:20 - to assign any address
06:22 - in this pointer you can assign like here
06:24 - i am taking in x is equal to 5 and here
06:27 - i want to assign ptr is equal to address
06:29 - of x
06:30 - so now
06:32 - we have one more we have
06:35 - some
06:36 - we have reserved some space for this x
06:39 - four bytes because it is of integer type
06:40 - and suppose starting address is what
06:43 - thousand
06:44 - and in x we have five
06:46 - so now this pointer is containing what
06:48 - thousand and it is now pointing to x now
06:51 - it is valid
06:52 - now it is no more a wild pointer it's
06:54 - like a normal pointer which is
06:57 - containing address of x and whenever you
06:59 - dereference this pointer now it will
07:01 - give you value at thousand that is five
07:03 - it will give you five
07:05 - right
07:06 - yeah this is also not wild pointer
07:08 - because starting we have we have
07:11 - made it what
07:12 - null pointer so it is no more a wild
07:14 - pointer if you leave it like this
07:17 - then it is wild pointer here
07:20 - but here it is normal pointer
07:22 - because you have a signed address
07:24 - right
07:25 - so
07:26 - one more thing what you can do
07:28 - if you don't want to take any variable
07:30 - or these kind of thing so dynamically
07:32 - you can allocate memory
07:34 - when you declare a pointer here only
07:36 - dynamically you can
07:38 - use what malloc function
07:41 - mellow and here you can simply write
07:43 - like size of end
07:46 - so 4 bytes would be allocated
07:48 - and the base address of that memory
07:50 - would be given to this pointer so
07:52 - suppose dynamically this memory has been
07:55 - allocated
07:57 - ah this memory four bytes suppose uh
07:59 - address is three one four six
08:02 - right now we don't have any x here
08:05 - and now it is containing three one four
08:08 - six so now this point is pointing to
08:09 - this memory
08:11 - right we haven't taken any variable here
08:14 - so directly
08:15 - using a strict ptr you can directly
08:17 - store any value here if you want to
08:18 - store like five
08:20 - so you can store here five and if you
08:22 - want to access your access it will print
08:24 - five so here it is no more a
08:27 - wild pointer or uninitialized pointer
08:29 - assuming that malloc will work fine
08:32 - it will not return null
08:34 - right so while pointer is what it is a
08:36 - pointer you can say uninitialized
08:38 - pointer or it is a pointer that is
08:39 - pointing to any random memory location
08:41 - any random memory location right
08:44 - and how to remove that situation either
08:46 - you can make pointer is equal to null
08:48 - pointer at starting or you can use this
08:51 - method dynamically when you declare
08:52 - pointer allocate memory
08:55 - right
08:56 - and use this use this method and third
08:59 - is what
09:00 - simply if you dynamically don't allocate
09:02 - memory what you can say
09:04 - if you take a variable like index is
09:05 - equal to 5 and when you declare a
09:07 - pointer in star ptr directly you can
09:09 - initialize it using address of
09:12 - address of operator like address of x so
09:14 - now here also it is not a wild pointer
09:16 - right there are three ways
09:18 - to get rid of this
09:20 - pointer so it's not very complicated
09:22 - thing it's just a simple uh you know
09:24 - concept you just have to know what is
09:26 - wild pointer like if someone say like
09:29 - wild pointer this is wild pointer this
09:30 - is dangling pointer so you must be aware
09:33 - about you know these pointers a little
09:35 - bit that's enough
09:36 - right so now let me show you practical
09:39 - on
09:40 - my laptop
09:41 - so now let me create one more file
09:47 - while pointer dots
09:49 - right
09:54 - we'll use that raphael also s t d l i b
09:59 - maybe we can use that one mellow
10:02 - function here right
10:05 - and
10:06 - now we will
10:08 - in main function i'm going to take one
10:10 - pointer like a strict btr
10:13 - right i'm not us i'm not going to assign
10:15 - it
10:16 - right ah sorry initialize it
10:19 - and here
10:20 - printf i am printing what
10:23 - percentage d
10:29 - and
10:29 - d reference it
10:32 - i'm going to de-reference it
10:34 - so what output it will give
10:36 - we don't know let's see
10:39 - see it's giving you zero
10:42 - so we don't know it is pointing to any
10:43 - you know random memory location and
10:45 - accessing that memory location so maybe
10:47 - sometime it will clean some garbage
10:49 - value it depends on machine to machine
10:50 - and architecture to architecture maybe
10:52 - your program will crash or maybe it will
10:53 - give zero
10:54 - we cannot expect the output so it will
10:57 - it's like it will misbehave with you
11:00 - right because its wild pointer
11:02 - right
11:04 - now better to
11:06 - do what
11:07 - here what you can do
11:10 - you can
11:11 - write here
11:12 - null so make it null pointer
11:15 - rather than leaving it an initialized
11:17 - pointer right
11:20 - so and we cannot de-reference in null
11:21 - point i have told you
11:23 - right so better to don't you know better
11:25 - not to dereference it because your
11:27 - program is going to crash now
11:37 - see if you dereferencing null pointer
11:40 - the exe file has stopped working
11:42 - right
11:44 - so now
11:46 - you can make it null or in starting only
11:50 - maybe you can take any like
11:52 - variable into a is equal to 9
11:54 - and you can initialize this pointer
11:56 - straight beta is equal to address of a
12:00 - right
12:01 - and now if you will de-reference it it
12:03 - should give you
12:04 - 9
12:05 - because value of a is 9.
12:13 - see it is printing nine right or using
12:16 - malloc function also you can do this
12:18 - thing
12:23 - like you can do
12:24 - what
12:26 - hint
12:27 - this is what type casting we are type
12:29 - casting
12:30 - the pointer because malloc is going to
12:32 - return
12:33 - void pointer
12:34 - and we want int size of
12:38 - end here
12:39 - so here directly
12:41 - a strict ptr is equal to i am storing 67
12:44 - suppose all right
12:46 - i am not taking any variable and i am
12:48 - now
12:50 - dereferencing this pointer so it should
12:51 - give you 67 say it is printing 67 so now
12:55 - these pointers are not uh wild pointer
12:58 - right
13:00 - so that's it for this video now so i
13:02 - hope you got what is wild pointer so in
13:04 - the next video we will see a different
13:05 - concept of c so answer in the next video
13:08 - till then bye take

Cleaned transcript:

so in the series of learning programming in c we are discussing some special pointers in c we have discussed void null and dangling pointer now we are left with one more pointer that is wild pointer so that we will discuss in uh this video what is world pointer and what's the reason your you know program if pointer becomes wild pointer in your program we will see that thing with the help of a simple program and will also see uh when you run that program which is having a wild pointer then what kind of output you get or maybe you are getting which kind of error or warning what you get so that also will discuss practically right everything about wild quarter we will discuss in this video it's not you know that very large concept in c but it's just a simple and small concept you have to be aware about these kind of pointers right like void null dangling and while pointer so that we will discuss in this video but before that just want to tell you one thing if you are looking for a great career in software development then you must have to think about the aspects like what's trending in the industry and the type of questions being asked in the interviews how to improve your course ranking so here an academy brings you a platform where you can watch where you can get access to weekly shows which you can watch live and their host are seven star coders on code chef and are industry experts with years of experience and they are also working in some of the top companies like amazon google linkedin and in these episodes they'll be covering a lot of content that would be really helpful for your career like in live episodes you can get opportunity to ask tech hr about top 20 questions and industry leaders directly about their recruitment process in startups and mncs and what's the eligibility criteria and how to apply for them and you can also get your resume reviewed by the experts not only this you can also participate in mock interviews and learn courses on programming languages cloud computing blockchain and crypto tech aspects of digital marketing and data analytics have you ever thought about how these front line apps like amazon flip card practo ola were made in first place and what was the thought process so here is a show to answer all these questions in this show their host anuj will discuss the architecture breakdown of the popular apps so learners will get to see how these apps were made and how these apps work so you can find out the detail of the show and the batch in the link that i'll put in the description box of this video and don't forget to use my code jkl10 to get 10 extra discount on your subscription so now let's see what is wild pointer see i hope everybody know how to declare a pointer in star ptr right it's just a declaration of quantum and here it at this time what is the address in this ptr variable ptr is a variable memory has been assigned to this variable and some address would be there obviously suppose address of this pointer is 2046 and it is going to contain some address obviously pointer is a variable that is going to contain address of another variable but here i am not assigning any address here so at this time at this time it is what an initialized pointer right and if it is uninitialized then there would be some garbage value we don't know it will contain some address like we have memory if your machine is of 32 bits then the memory would be off how many bytes you will have to raise to power 32 right like numbering would be from 0 1 to each byte like this till 2 raised to power 32 these many bytes you would have so somewhere suppose somewhere in this memory four bytes has been allocated to this point the size is of four byte or obviously it depends on that um architecture of your machine right so in 32 bit four bytes so suppose four bytes means uh two zero four six is the first byte two zero four seven two zero four eight two zero four nine right obviously we will take base address so it is two zero four six of this pointer and this pointer is having what now any garbage value suppose address there is some blog whose address is suppose um 5146 and it is containing address 5146 right because we haven't assigned any address to this pointer and now if you will print this pointer like strict ptr if you want to print whatever the value at this address address is what in pti now address is 5146 now value at this address we don't know what is the value because it's not a valid address so maybe it will give some garbage value we don't know what is there at that address or maybe your program will crash so it will show some undefined behavior right we can't say what it will print because this block that this pointer is containing address of this block and this is not consumed memory we haven't reserved this memory right so it's like invalid for us we have just reserved these four bytes because we have just declare a pointer so now this memory is reserved for us uh having a base set is two zero four six right so it will give some garbage value right or maybe your program will crash so this pointer you can say this is acting as a wild pointer now you can say this is uninitialized pointer so if a pointer is uninitialized that will act as a wild pointer right so these are risky to use please don't leave any pointer uninitialized because it will give some nasty bugs in your system in your program right so now what is the solution what you can say if you don't know how to if you don't know like what address you you want to store in this pointer then simply you can say make it null pointer that we have already discussed null pointer right so now in pointer we have 0 no so it is not pointing to any valid address right and we cannot dereference this pointer further in program if you want to assign any address in this pointer you can assign like here i am taking in x is equal to 5 and here i want to assign ptr is equal to address of x so now we have one more we have some we have reserved some space for this x four bytes because it is of integer type and suppose starting address is what thousand and in x we have five so now this pointer is containing what thousand and it is now pointing to x now it is valid now it is no more a wild pointer it's like a normal pointer which is containing address of x and whenever you dereference this pointer now it will give you value at thousand that is five it will give you five right yeah this is also not wild pointer because starting we have we have made it what null pointer so it is no more a wild pointer if you leave it like this then it is wild pointer here but here it is normal pointer because you have a signed address right so one more thing what you can do if you don't want to take any variable or these kind of thing so dynamically you can allocate memory when you declare a pointer here only dynamically you can use what malloc function mellow and here you can simply write like size of end so 4 bytes would be allocated and the base address of that memory would be given to this pointer so suppose dynamically this memory has been allocated ah this memory four bytes suppose uh address is three one four six right now we don't have any x here and now it is containing three one four six so now this point is pointing to this memory right we haven't taken any variable here so directly using a strict ptr you can directly store any value here if you want to store like five so you can store here five and if you want to access your access it will print five so here it is no more a wild pointer or uninitialized pointer assuming that malloc will work fine it will not return null right so while pointer is what it is a pointer you can say uninitialized pointer or it is a pointer that is pointing to any random memory location any random memory location right and how to remove that situation either you can make pointer is equal to null pointer at starting or you can use this method dynamically when you declare pointer allocate memory right and use this use this method and third is what simply if you dynamically don't allocate memory what you can say if you take a variable like index is equal to 5 and when you declare a pointer in star ptr directly you can initialize it using address of address of operator like address of x so now here also it is not a wild pointer right there are three ways to get rid of this pointer so it's not very complicated thing it's just a simple uh you know concept you just have to know what is wild pointer like if someone say like wild pointer this is wild pointer this is dangling pointer so you must be aware about you know these pointers a little bit that's enough right so now let me show you practical on my laptop so now let me create one more file while pointer dots right we'll use that raphael also s t d l i b maybe we can use that one mellow function here right and now we will in main function i'm going to take one pointer like a strict btr right i'm not us i'm not going to assign it right ah sorry initialize it and here printf i am printing what percentage d and d reference it i'm going to dereference it so what output it will give we don't know let's see see it's giving you zero so we don't know it is pointing to any you know random memory location and accessing that memory location so maybe sometime it will clean some garbage value it depends on machine to machine and architecture to architecture maybe your program will crash or maybe it will give zero we cannot expect the output so it will it's like it will misbehave with you right because its wild pointer right now better to do what here what you can do you can write here null so make it null pointer rather than leaving it an initialized pointer right so and we cannot dereference in null point i have told you right so better to don't you know better not to dereference it because your program is going to crash now see if you dereferencing null pointer the exe file has stopped working right so now you can make it null or in starting only maybe you can take any like variable into a is equal to 9 and you can initialize this pointer straight beta is equal to address of a right and now if you will dereference it it should give you 9 because value of a is 9. see it is printing nine right or using malloc function also you can do this thing like you can do what hint this is what type casting we are type casting the pointer because malloc is going to return void pointer and we want int size of end here so here directly a strict ptr is equal to i am storing 67 suppose all right i am not taking any variable and i am now dereferencing this pointer so it should give you 67 say it is printing 67 so now these pointers are not uh wild pointer right so that's it for this video now so i hope you got what is wild pointer so in the next video we will see a different concept of c so answer in the next video till then bye take
