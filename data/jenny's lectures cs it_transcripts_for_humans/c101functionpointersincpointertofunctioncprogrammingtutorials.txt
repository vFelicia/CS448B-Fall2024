With timestamps:

00:00 - so in the series of learning c
00:01 - programming we are discussing functions
00:03 - in c in this video we'll discuss what is
00:05 - a function pointer
00:06 - see we have other pointer like integer
00:08 - pointer float pointer character pointer
00:10 - same we have function pointer and what
00:13 - integer pointer will contain
00:16 - address of a
00:17 - variable whose data type is integer
00:20 - right float pointer contains you can say
00:23 - a float pointer or a pointer to float
00:26 - right same we have function pointer
00:28 - function pointer is also it's a variable
00:30 - which contains address of
00:33 - function
00:34 - now how it is going to contain address
00:36 - of function and and you can dereference
00:38 - it also as we can differentiate
00:40 - reference other pointer integer float or
00:42 - character and we can get value you can
00:44 - dereference this function pointer also
00:46 - now how you can use this function
00:48 - pointer how you will dereference it we
00:50 - will discuss that thing with complete
00:52 - program here with proper example and
00:54 - we'll show you i'll show you practical
00:55 - also we'll run that that code also right
00:58 - and the function pointers are very
01:00 - important you know they are having some
01:02 - great applications that also discuss the
01:04 - use of function pointer right in detail
01:07 - but before they just want to tell you
01:08 - one thing if you are looking for a great
01:10 - career in software development then you
01:12 - must think about the aspects like what's
01:13 - trending in the industry and the kind of
01:15 - questions being asked in the interviews
01:17 - how to improve your course your ranking
01:19 - what is the thought process behind the
01:20 - great application like amazon flipkart
01:22 - zomeito ola
01:24 - so here an academy brings you a platform
01:26 - where you can get access to weekly shows
01:28 - which you can watch live and the host of
01:30 - these shows are working in some of the
01:31 - top companies like linkedin amazon
01:34 - google and our seven star coders on code
01:36 - chef and industry experts with years of
01:38 - experience so they'll be covering the
01:41 - content which would be really helpful
01:42 - for your career like in the live
01:44 - episodes you get an opportunity to ask
01:46 - take a chance you know about the top 20
01:49 - questions being asked and the industry
01:51 - leaders directly about the recruitment
01:52 - process in the top startups and mncs
01:55 - what is the eligibility criteria and how
01:56 - to apply for them even you can get your
01:58 - resume reviewed by the exports stes not
02:01 - only this you can also participate into
02:03 - mock interviews and you can learn
02:05 - courses on programming languages cloud
02:07 - computing blockchain and crypto tech
02:08 - aspects of digital marketing and data
02:10 - analytics
02:11 - and if you want to know how to apply for
02:13 - the jobs in service based companies what
02:16 - is the entire hiring process
02:18 - where to apply how to apply how to study
02:20 - for the test and what to prepare for the
02:22 - interviews then there is a show for you
02:25 - in which you will get in-depth
02:27 - information about the hiring process
02:29 - what type of questions are generally
02:30 - asked and how to make sure your resume
02:32 - stands out from the crowd so the detail
02:35 - of the show and the batch you will find
02:36 - in the link that i put in the
02:38 - description box of this video and don't
02:39 - forget to use my code jkl10 to get 10
02:42 - extra discount on your subscription so
02:45 - now let's see what is a function pointer
02:47 - i hope you know what is an integer
02:49 - pointer how to declare that pointer int
02:51 - asterisk and pointer name ptr that's it
02:55 - it's an integer pointer you can say
02:56 - pointer which is pointing to in or a
02:58 - float pointer means just
03:00 - write down the data type
03:02 - float
03:03 - strict the sign and the pointer name
03:04 - that's it now how to declare a function
03:07 - pointer same you have to write the
03:09 - return type
03:10 - first
03:11 - then we will write s trick
03:13 - then we will write the pointer name
03:18 - here you will write pointer name
03:20 - right and
03:22 - as it is a no it's a function pointer so
03:24 - function means obviously we have some
03:27 - maybe we have some argument or maybe
03:29 - it's blank
03:30 - right so here also we have to write
03:32 - something
03:33 - and you have to put this thing also into
03:36 - bracket
03:39 - i'll describe this thing one by one
03:41 - clearly
03:42 - right so what you will write here here
03:44 - we will write what return type of
03:48 - function whatever the return type of
03:50 - function exactly that type you will
03:51 - write here
03:52 - when you declare a pointer then in
03:54 - brackets you will write a string pointer
03:56 - name and here what you will
03:58 - write you know data type
04:04 - of the arguments
04:09 - how many arguments you want to pass in
04:11 - that function the data type of those
04:13 - arguments or if you don't don't want to
04:15 - pass any argument just leave it blank
04:17 - now let's take a simple example how to
04:19 - declare see i'm taking a function i'm
04:22 - just
04:23 - taking a function in
04:26 - and
04:27 - sum
04:29 - i want to do sum of two numbers i want
04:31 - to pass two numbers as an argument so
04:35 - in
04:36 - a in
04:37 - b
04:38 - and here simply i want to do
04:41 - return a plus
04:42 - b
04:43 - that's it this is what you can say
04:45 - definition of this function
04:48 - so how to declare this function
04:50 - prototype would be what
04:52 - int
04:54 - name
04:55 - sum and here
04:57 - ain't comma
04:58 - into this is what declaration of this
05:00 - function
05:02 - i hope you are getting these
05:03 - you have discussed this thing many times
05:05 - this is definition this is declaration
05:07 - now i want a pointer which points to
05:10 - this function now how to declare that
05:13 - pointer see that is very important it
05:15 - depends on the prototype of the function
05:17 - so what is the return type of this
05:19 - function in
05:20 - so first you will write what
05:23 - hint
05:25 - fine
05:26 - now
05:27 - asterisk pointer name i am taking ptr
05:29 - only and you will put this into bracket
05:34 - and here what you will write data type
05:36 - of the arguments how many arguments i
05:38 - want to pass two arguments or here you
05:40 - can see
05:41 - and data type of both arguments are in
05:43 - so here you will simply write in comma
05:46 - hint
05:48 - this is what declaration of a pointer
05:51 - which is pointing to this function
05:54 - right
05:55 - if you write here void
05:59 - or rather than word i am just first of
06:01 - all we will initialize this pointer
06:04 - let us initialize this pointer
06:07 - it will contain pointer is what a
06:08 - special variable which contain address
06:10 - of
06:11 - other thing so this is function pointer
06:12 - so it will contain address of
06:15 - this function so how you will initialize
06:17 - it
06:18 - equal to
06:20 - address of
06:21 - name of the function name of the
06:23 - function is sum so simply you can write
06:27 - sum
06:29 - this is what
06:30 - initialization of this function pointer
06:32 - that's it
06:33 - and you can call this
06:35 - function now using this pointer you can
06:37 - dereference it
06:39 - right now see
06:41 - why i'm putting this in
06:43 - bracket if you don't put this in bracket
06:45 - i am writing into strict ptr
06:49 - in comma
06:52 - i am writing simply this thing
06:54 - so now here see we have
06:56 - a streak is also an operator and this is
06:58 - also an operator
06:59 - these brackets
07:01 - and which is having higher priority
07:05 - these brackets are having higher
07:06 - priority than this asterisk it means
07:08 - this pointer would first of all belong
07:10 - to this or you can say
07:12 - this operator and this operator both are
07:15 - fighting for this ptr
07:17 - this operator is saying this ptr belongs
07:19 - to me and this operator is saying this
07:22 - ptr belongs to me so to decide check out
07:24 - the precedence precedence of this
07:26 - bracket is higher it means
07:29 - this bracket will win and this ptr
07:32 - would belong to this bracket
07:35 - so this statement means
07:37 - this pointer is a function
07:40 - because it belongs to here this this one
07:44 - first note this so pointer is a function
07:46 - which takes two argument integer
07:48 - argument and return
07:50 - and this function return a pointer to
07:53 - integer
07:55 - this line means this thing
07:58 - right
07:59 - but if you put this into bracket
08:02 - now this is also bracket this is also
08:03 - bracket both are having same precedence
08:05 - now check out the associativity
08:07 - associativity of this operator is left
08:08 - to right left to right so when you move
08:10 - from left to right this operator first
08:13 - comes it means now the pointer belongs
08:15 - to this this will execute first so now
08:17 - it means
08:18 - ptr is a pointer
08:21 - see that you know the difference
08:24 - in the explanation ptr is a pointer
08:27 - or you can say ptr is a function pointer
08:30 - which accept two arguments
08:33 - of both integer type and return
08:36 - an integer value return only an integer
08:39 - value
08:40 - i hope you are getting the difference
08:42 - between this and the previous thing
08:44 - because sometimes they ask this type of
08:46 - question also in gate also an interview
08:48 - also they'll write down one line and
08:50 - they'll ask what is the meaning of this
08:51 - line
08:52 - so please check out that thing clearly
08:55 - it's very confusing when it comes to
08:57 - pointer i hope you got the difference
08:59 - between these two lines right so that is
09:01 - why we put
09:02 - this function pointer when you declare
09:04 - function pointer then we put this
09:05 - pointer name into
09:07 - bracket right otherwise
09:09 - it will mean you know a different thing
09:13 - so now let's write down a program
09:18 - in main function first we are
09:20 - declaring it then
09:22 - in main
09:24 - i am writing this main function
09:28 - and
09:29 - obviously will take one you can say
09:31 - variables s
09:33 - in which you are going to store the
09:35 - result because because it is going to
09:37 - return integer value so that when we
09:39 - will call this function that we will
09:41 - store in s
09:43 - so now we will not call this function
09:45 - using the function name we will call it
09:48 - using the pointer name because pointer
09:50 - is containing now the address of this
09:52 - function right so now how you will call
09:54 - this s trick just write down the pointer
09:57 - name in bracket and pass
10:00 - obviously you have to pass to argument
10:02 - so i am passing 2 comma 3
10:05 - that's it
10:06 - and just
10:08 - printf percentage d
10:11 - and
10:12 - whatever the value in
10:13 - s and after main i am writing this
10:16 - definition here
10:18 - that's it
10:19 - so now how
10:20 - it would be executed see
10:23 - so first of all this obviously this
10:24 - program would be this is source code in
10:26 - high level language you have written so
10:27 - this will be converted into binary code
10:29 - like 0 and 1 all the instructions these
10:31 - are what instructions all the
10:33 - instruction would be by the compiler
10:35 - would be converted into the object code
10:37 - then the executable code and then
10:38 - obviously it is going to run so whenever
10:40 - you run this that executable code
10:42 - that would be you know you know moved
10:44 - into the main memory ram
10:47 - right
10:49 - so here i am writing this definition of
10:51 - the function here
10:54 - now see what will happen obviously some
10:56 - memory would be located to this this
10:58 - would be stored in main memory the
11:00 - executable file when we are going to
11:01 - execute it so all the instructions are
11:04 - having
11:06 - all the instructions are having
11:09 - some memory address obviously
11:12 - these all the instructions are having
11:13 - some memory address right
11:15 - somewhere this function is also having
11:18 - memory address so suppose here this this
11:21 - function is
11:22 - here we are having this function
11:29 - the function the instruction one of this
11:31 - function you can say instruction two
11:33 - instruction three how many instruction
11:35 - they have all the instructions are
11:37 - here sequentially they are going to be
11:39 - placed in the memory and they are going
11:40 - to be executed sequentially by default
11:42 - right so now suppose the starting
11:44 - address of this this function is
11:46 - starting addresses thousand
11:49 - starting address or you can say base
11:50 - address of this function is thousand
11:53 - right
11:54 - obviously pointer will contain the base
11:55 - address only we will deal with base
11:57 - address only right
11:59 - now
12:00 - suppose base address of this function is
12:02 - memory is
12:03 - 1000 so now what we are doing when
12:06 - compiler will go here in the main
12:07 - function
12:09 - some memory would be allocated to this
12:10 - main instead obviously and there we have
12:14 - one variable s
12:17 - that is having 0
12:18 - and here we are having a pointer also
12:21 - we are having a
12:22 - pointer this is a function pointer
12:25 - which is containing address of
12:27 - sum address of this is what what is the
12:30 - base address thousand so it will contain
12:31 - thousands so now this pointer is
12:33 - pointing to
12:34 - this block
12:38 - so here function pointer contains
12:41 - address of
12:42 - code
12:43 - this is what code
12:45 - and
12:46 - other pointer like we were taking
12:47 - integer pointer that was containing
12:49 - address of
12:51 - a variable or you can say address of the
12:53 - data
12:55 - in that variable suppose we have value
12:57 - 10 so that pointer contain address of
12:59 - that data that value but function
13:01 - pointer contains what address of the
13:04 - code
13:05 - executable code this is the code
13:09 - not address of any data address of the
13:11 - code right so now using this pointer we
13:14 - can access this function we can
13:15 - dereference it so we can call this
13:17 - function also now here what we are doing
13:19 - a strict p first we are going to
13:22 - dereference this
13:23 - means ptr means value at this value and
13:25 - this is what it's not value its proper
13:27 - code
13:28 - so now first of all we are going to
13:30 - dereference this function and then we
13:31 - are going to pass the argument to three
13:33 - so 2 3 would be passed and now in sum
13:36 - in sum sum memory would be for the sum
13:39 - obviously so we have a and we have b so
13:42 - in a we have 2
13:44 - where we have 3 return a plus b that is
13:46 - 5 it will return five so here it will
13:48 - return five and some we have five so it
13:50 - will print five
13:54 - this is how using pointer you can access
13:56 - ah function right
13:59 - another way is rather than
14:01 - this ampersand is optional you can
14:03 - simply write the name of the function
14:04 - name of the function also you know means
14:08 - the address of the base address of that
14:10 - function
14:11 - so if you will not write this address so
14:13 - that is also fine if you will not write
14:15 - this strict opera operator here that is
14:17 - also fine simply write ptr23
14:20 - it will also work and it will give you
14:22 - five
14:24 - so this is very popular second one
14:25 - rather than using address of operator
14:27 - and this s2 operator right so i hope you
14:30 - go to what is a function pointer
14:33 - right the basics how to declare it how
14:35 - to initialize it how to use it
14:38 - in detail we'll discuss in the next
14:39 - videos then a use of function pointer
14:41 - why we use function pointer that is very
14:43 - important right and you have to take
14:45 - care of this thing this
14:47 - this declaration of this function
14:48 - pointer basically depends on the
14:50 - prototype of the function return type
14:52 - should be same here the data type of the
14:55 - arguments number of arguments should be
14:56 - same if you write down here one int
14:59 - it will give error because here we are
15:01 - passing two in
15:02 - here you will write one into one float
15:04 - that also will give error this pointer
15:06 - cannot contain address of
15:08 - this this function
15:11 - right because here we have end here we
15:13 - have float but here we have both the end
15:15 - so it will give error right so all the
15:17 - variations i will show you practical
15:19 - we'll run this and we'll see what kind
15:21 - of output you are getting right
15:23 - so now let's create a new file
15:27 - named function
15:30 - pointer
15:40 - and here we are taking one function that
15:42 - is
15:43 - int and name is sum
15:45 - i am just declaring that function here
15:49 - right
15:50 - and in main
15:53 - obviously we will call this function and
15:55 - write something but first we are going
15:56 - to write down the definition of this
15:58 - function
15:59 - so here i am writing what
16:01 - end sum
16:03 - intake comma
16:05 - and b you can take another example also
16:07 - it's not like that you have to take the
16:08 - same example of like sum of two numbers
16:12 - it's simple that is why i am taking this
16:13 - example
16:16 - return a plus b right and in main now
16:19 - what you have to do
16:22 - in s
16:24 - and just to declare a pointer now return
16:26 - type is end
16:27 - here just in the bracket write the
16:29 - pointer name i am taking ptr
16:31 - and in bracket what
16:34 - the data type of the arguments how many
16:36 - arguments two and three type are integer
16:38 - i'm initializing at the same time is
16:40 - equal to address of address of what
16:42 - function name is sum
16:45 - so now just call the function
16:47 - how you will
16:48 - call s trick
16:51 - ptr and just pass the argument suppose i
16:54 - am passing 1 comma 2
16:56 - and whatever it will return we are going
16:57 - to store that result into
17:00 - a variable named sum
17:02 - sorry s and just
17:06 - print
17:08 - sum equal to percentage d
17:11 - and whatever the value is that we are
17:13 - going to print
17:14 - right
17:15 - i hope it will work and let's run this
17:17 - now
17:18 - it should return 3 i mean it should
17:20 - print 3 right
17:23 - see it is printing sum is equal to 3 so
17:25 - it's working
17:26 - we can dereference we can you know
17:28 - access the function using pointer
17:31 - i am not writing address off and here i
17:33 - am not writing what
17:36 - this s trick
17:38 - lets see
17:39 - now it will work or not let us run this
17:42 - again
17:44 - see it will work fine sum is equal to
17:45 - three
17:46 - so you the same percent and this s trick
17:48 - are you know optional in this case
17:51 - so in the next one we will see some more
17:52 - points about function pointer what you
17:54 - can say what are the applications of
17:55 - function pointers and i'll see in the
17:57 - next video till then bye bye take care

Cleaned transcript:

so in the series of learning c programming we are discussing functions in c in this video we'll discuss what is a function pointer see we have other pointer like integer pointer float pointer character pointer same we have function pointer and what integer pointer will contain address of a variable whose data type is integer right float pointer contains you can say a float pointer or a pointer to float right same we have function pointer function pointer is also it's a variable which contains address of function now how it is going to contain address of function and and you can dereference it also as we can differentiate reference other pointer integer float or character and we can get value you can dereference this function pointer also now how you can use this function pointer how you will dereference it we will discuss that thing with complete program here with proper example and we'll show you i'll show you practical also we'll run that that code also right and the function pointers are very important you know they are having some great applications that also discuss the use of function pointer right in detail but before they just want to tell you one thing if you are looking for a great career in software development then you must think about the aspects like what's trending in the industry and the kind of questions being asked in the interviews how to improve your course your ranking what is the thought process behind the great application like amazon flipkart zomeito ola so here an academy brings you a platform where you can get access to weekly shows which you can watch live and the host of these shows are working in some of the top companies like linkedin amazon google and our seven star coders on code chef and industry experts with years of experience so they'll be covering the content which would be really helpful for your career like in the live episodes you get an opportunity to ask take a chance you know about the top 20 questions being asked and the industry leaders directly about the recruitment process in the top startups and mncs what is the eligibility criteria and how to apply for them even you can get your resume reviewed by the exports stes not only this you can also participate into mock interviews and you can learn courses on programming languages cloud computing blockchain and crypto tech aspects of digital marketing and data analytics and if you want to know how to apply for the jobs in service based companies what is the entire hiring process where to apply how to apply how to study for the test and what to prepare for the interviews then there is a show for you in which you will get indepth information about the hiring process what type of questions are generally asked and how to make sure your resume stands out from the crowd so the detail of the show and the batch you will find in the link that i put in the description box of this video and don't forget to use my code jkl10 to get 10 extra discount on your subscription so now let's see what is a function pointer i hope you know what is an integer pointer how to declare that pointer int asterisk and pointer name ptr that's it it's an integer pointer you can say pointer which is pointing to in or a float pointer means just write down the data type float strict the sign and the pointer name that's it now how to declare a function pointer same you have to write the return type first then we will write s trick then we will write the pointer name here you will write pointer name right and as it is a no it's a function pointer so function means obviously we have some maybe we have some argument or maybe it's blank right so here also we have to write something and you have to put this thing also into bracket i'll describe this thing one by one clearly right so what you will write here here we will write what return type of function whatever the return type of function exactly that type you will write here when you declare a pointer then in brackets you will write a string pointer name and here what you will write you know data type of the arguments how many arguments you want to pass in that function the data type of those arguments or if you don't don't want to pass any argument just leave it blank now let's take a simple example how to declare see i'm taking a function i'm just taking a function in and sum i want to do sum of two numbers i want to pass two numbers as an argument so in a in b and here simply i want to do return a plus b that's it this is what you can say definition of this function so how to declare this function prototype would be what int name sum and here ain't comma into this is what declaration of this function i hope you are getting these you have discussed this thing many times this is definition this is declaration now i want a pointer which points to this function now how to declare that pointer see that is very important it depends on the prototype of the function so what is the return type of this function in so first you will write what hint fine now asterisk pointer name i am taking ptr only and you will put this into bracket and here what you will write data type of the arguments how many arguments i want to pass two arguments or here you can see and data type of both arguments are in so here you will simply write in comma hint this is what declaration of a pointer which is pointing to this function right if you write here void or rather than word i am just first of all we will initialize this pointer let us initialize this pointer it will contain pointer is what a special variable which contain address of other thing so this is function pointer so it will contain address of this function so how you will initialize it equal to address of name of the function name of the function is sum so simply you can write sum this is what initialization of this function pointer that's it and you can call this function now using this pointer you can dereference it right now see why i'm putting this in bracket if you don't put this in bracket i am writing into strict ptr in comma i am writing simply this thing so now here see we have a streak is also an operator and this is also an operator these brackets and which is having higher priority these brackets are having higher priority than this asterisk it means this pointer would first of all belong to this or you can say this operator and this operator both are fighting for this ptr this operator is saying this ptr belongs to me and this operator is saying this ptr belongs to me so to decide check out the precedence precedence of this bracket is higher it means this bracket will win and this ptr would belong to this bracket so this statement means this pointer is a function because it belongs to here this this one first note this so pointer is a function which takes two argument integer argument and return and this function return a pointer to integer this line means this thing right but if you put this into bracket now this is also bracket this is also bracket both are having same precedence now check out the associativity associativity of this operator is left to right left to right so when you move from left to right this operator first comes it means now the pointer belongs to this this will execute first so now it means ptr is a pointer see that you know the difference in the explanation ptr is a pointer or you can say ptr is a function pointer which accept two arguments of both integer type and return an integer value return only an integer value i hope you are getting the difference between this and the previous thing because sometimes they ask this type of question also in gate also an interview also they'll write down one line and they'll ask what is the meaning of this line so please check out that thing clearly it's very confusing when it comes to pointer i hope you got the difference between these two lines right so that is why we put this function pointer when you declare function pointer then we put this pointer name into bracket right otherwise it will mean you know a different thing so now let's write down a program in main function first we are declaring it then in main i am writing this main function and obviously will take one you can say variables s in which you are going to store the result because because it is going to return integer value so that when we will call this function that we will store in s so now we will not call this function using the function name we will call it using the pointer name because pointer is containing now the address of this function right so now how you will call this s trick just write down the pointer name in bracket and pass obviously you have to pass to argument so i am passing 2 comma 3 that's it and just printf percentage d and whatever the value in s and after main i am writing this definition here that's it so now how it would be executed see so first of all this obviously this program would be this is source code in high level language you have written so this will be converted into binary code like 0 and 1 all the instructions these are what instructions all the instruction would be by the compiler would be converted into the object code then the executable code and then obviously it is going to run so whenever you run this that executable code that would be you know you know moved into the main memory ram right so here i am writing this definition of the function here now see what will happen obviously some memory would be located to this this would be stored in main memory the executable file when we are going to execute it so all the instructions are having all the instructions are having some memory address obviously these all the instructions are having some memory address right somewhere this function is also having memory address so suppose here this this function is here we are having this function the function the instruction one of this function you can say instruction two instruction three how many instruction they have all the instructions are here sequentially they are going to be placed in the memory and they are going to be executed sequentially by default right so now suppose the starting address of this this function is starting addresses thousand starting address or you can say base address of this function is thousand right obviously pointer will contain the base address only we will deal with base address only right now suppose base address of this function is memory is 1000 so now what we are doing when compiler will go here in the main function some memory would be allocated to this main instead obviously and there we have one variable s that is having 0 and here we are having a pointer also we are having a pointer this is a function pointer which is containing address of sum address of this is what what is the base address thousand so it will contain thousands so now this pointer is pointing to this block so here function pointer contains address of code this is what code and other pointer like we were taking integer pointer that was containing address of a variable or you can say address of the data in that variable suppose we have value 10 so that pointer contain address of that data that value but function pointer contains what address of the code executable code this is the code not address of any data address of the code right so now using this pointer we can access this function we can dereference it so we can call this function also now here what we are doing a strict p first we are going to dereference this means ptr means value at this value and this is what it's not value its proper code so now first of all we are going to dereference this function and then we are going to pass the argument to three so 2 3 would be passed and now in sum in sum sum memory would be for the sum obviously so we have a and we have b so in a we have 2 where we have 3 return a plus b that is 5 it will return five so here it will return five and some we have five so it will print five this is how using pointer you can access ah function right another way is rather than this ampersand is optional you can simply write the name of the function name of the function also you know means the address of the base address of that function so if you will not write this address so that is also fine if you will not write this strict opera operator here that is also fine simply write ptr23 it will also work and it will give you five so this is very popular second one rather than using address of operator and this s2 operator right so i hope you go to what is a function pointer right the basics how to declare it how to initialize it how to use it in detail we'll discuss in the next videos then a use of function pointer why we use function pointer that is very important right and you have to take care of this thing this this declaration of this function pointer basically depends on the prototype of the function return type should be same here the data type of the arguments number of arguments should be same if you write down here one int it will give error because here we are passing two in here you will write one into one float that also will give error this pointer cannot contain address of this this function right because here we have end here we have float but here we have both the end so it will give error right so all the variations i will show you practical we'll run this and we'll see what kind of output you are getting right so now let's create a new file named function pointer and here we are taking one function that is int and name is sum i am just declaring that function here right and in main obviously we will call this function and write something but first we are going to write down the definition of this function so here i am writing what end sum intake comma and b you can take another example also it's not like that you have to take the same example of like sum of two numbers it's simple that is why i am taking this example return a plus b right and in main now what you have to do in s and just to declare a pointer now return type is end here just in the bracket write the pointer name i am taking ptr and in bracket what the data type of the arguments how many arguments two and three type are integer i'm initializing at the same time is equal to address of address of what function name is sum so now just call the function how you will call s trick ptr and just pass the argument suppose i am passing 1 comma 2 and whatever it will return we are going to store that result into a variable named sum sorry s and just print sum equal to percentage d and whatever the value is that we are going to print right i hope it will work and let's run this now it should return 3 i mean it should print 3 right see it is printing sum is equal to 3 so it's working we can dereference we can you know access the function using pointer i am not writing address off and here i am not writing what this s trick lets see now it will work or not let us run this again see it will work fine sum is equal to three so you the same percent and this s trick are you know optional in this case so in the next one we will see some more points about function pointer what you can say what are the applications of function pointers and i'll see in the next video till then bye bye take care
