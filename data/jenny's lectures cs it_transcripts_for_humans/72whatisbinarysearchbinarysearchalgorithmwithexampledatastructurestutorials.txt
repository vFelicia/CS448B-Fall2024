With timestamps:

00:00 - using this binary search will take less
00:03 - time than the linear search right now
00:06 - what is the working principle of this
00:08 - binary search we are going to discuss
00:10 - with the help of an example right now
00:12 - see one prerequisite of this binary
00:14 - search is or you can say the requirement
00:16 - of this binary search algorithm is what
00:19 - the array should be sorted see here you
00:22 - can see I have taken this example but
00:24 - the data in this array is what sorted
00:27 - right if the data is not sorted then you
00:31 - cannot apply binary search on that Eric
00:34 - you have to first sort the array then
00:37 - you can apply binary search for
00:39 - searching
00:40 - so here the precondition for this binary
00:43 - search is the array should be sorted
00:45 - that is not a case in linear search that
00:49 - linear search works fine on the sorted
00:52 - array as well as on unsorted array now
00:55 - we will see how this binary search
00:56 - algorithm will work fine see so now we
01:00 - are going to search for the data or you
01:02 - can say key 59 is this fifty-nine
01:05 - present in this area or not and if
01:07 - present your code should return where
01:09 - this 59 is present the index at which
01:11 - this 59 is present see one more
01:14 - important point about this binary search
01:16 - algorithm is what it is divide and
01:17 - conquer technique it means it is going
01:19 - to divide the array into two half
01:21 - recursively divide the area now how
01:24 - recursively it will divide that into sub
01:27 - arrays we are going to see see in this
01:29 - case we are going to find out the middle
01:31 - element of the array fine so we are
01:35 - going to take two variables first is
01:37 - here left variable and we are going to
01:41 - point left here means L value is 0 next
01:45 - variable is right and the value of this
01:48 - right is 9 or you can say n minus 1 so
01:51 - in this algorithm we are going to find
01:53 - out the mid position of the array from
01:56 - where we are going to divide the area
01:58 - into two halves
01:59 - fine see first of all the left is 0 and
02:04 - the right is 9 in this case now find out
02:09 - the mid of this one how do
02:10 - now mid L plus I divided by 2l plus R
02:15 - divided by 2 and we are going to take
02:17 - the floor value of this one 0 plus 9
02:19 - divided by 2 is 1
02:21 - 4.5 floor value is 4 so mid is what for
02:24 - so at index 4 we are having mid now now
02:30 - here three cases can be their first
02:32 - cases the data you want to find out is
02:35 - equal to the data at the mid position
02:38 - fine second case is the data is less
02:42 - than the data which is at mid position
02:44 - or third cases the data you want to find
02:47 - out the key you want to find out find
02:49 - out is greater than the data which is at
02:52 - mid position so so these are three cases
02:56 - find data is equal to the Smith data is
02:59 - less than the say of MIT and data is
03:01 - greater than yo from it three cases can
03:03 - be there now see here the data is 59 and
03:08 - mid is 4 now what is that a or for a o
03:11 - for the data is 25 so here the case is
03:13 - this one the data is 59 and 59 is
03:17 - greater than a off mid mid is 25 right
03:21 - so now we can say that this data is
03:25 - present to the right of the Smith in
03:29 - this summary in this submarine now we
03:31 - have divided this array into two parts
03:33 - one is this one and one is this one now
03:36 - we can see this 59 is present to the
03:38 - right of this mid now how you can say
03:40 - this because we know that that array is
03:43 - sorted and if array is sorted then all
03:47 - the data which is greater than 25 must
03:49 - be present to the right of this 25 right
03:53 - now we are going to see we are now we
03:55 - are going to search only in this array
03:59 - we have divided our search space first
04:02 - at first our search spaces this one
04:05 - after first comparison we have divided
04:08 - it into half now this is our search
04:10 - space we are going to search from here
04:12 - to here now fine
04:15 - so if this is the case then this left
04:17 - then this left variable should be moved
04:20 - here on to the right here
04:24 - this side towards the right so now here
04:26 - we have our left or left now becomes mid
04:30 - plus one because we are going to work
04:33 - only in this area now and our is as it
04:37 - is that is nine again leap it the same
04:40 - step find out mid five plus nine
04:42 - fourteen divided by two is seven
04:44 - mid is what seven now now mid is what
04:50 - here seven now again three cases can be
04:56 - there now check data is fifty nine is
04:58 - sixty-three same as 59 no now the case
05:03 - is here 59 is the data is less than 63
05:06 - this second case data is less than a of
05:09 - mid now what you can say data is present
05:12 - to the left of 63 here only because
05:16 - theta is less than 63 and array sorted
05:18 - so now so now if data is present to the
05:22 - left of me to the left of MIT in that
05:24 - case what you will do left would be as
05:26 - at E is 5 and this right would be moved
05:30 - towards this side so now right becomes
05:33 - mid minus one now here we have right
05:37 - because now we are going to work only in
05:41 - this space here only
05:42 - we again divided the array into two
05:45 - parts that is why I was saying we
05:47 - recursively divide the hair into two
05:49 - parts fine until you find the element so
05:52 - now our is what six mid minus 1 7 minus
05:56 - 1 is 6 now again find out the mid 5 plus
05:58 - 6 is 11 by 2 that is 5 point 5 flow
06:01 - values 5 so mid is now here
06:04 - 5l is also 5 and mid is also 5 now right
06:11 - now check it's 59 same as you've mid no
06:16 - 59 is greater than a of mid it means
06:20 - 59 is present to the right of me to the
06:23 - right area of this mid right and if this
06:26 - this is present the data is present to
06:28 - the right of the mid in that case what
06:30 - what we will do we
06:31 - move left towards this side means left
06:35 - becomes mid plus one now right so left
06:39 - becomes mid plus 1 that is 5 plus 1 is 6
06:41 - right remains as as it is so now now
06:45 - here we have left and here we have right
06:48 - only so if left and right are at
06:52 - pointing at same index it means in this
06:56 - we have only one element and the array
06:59 - we have not only one element so now we
07:01 - have only 59 see I can find out middle 6
07:04 - plus 6s and divided by 2 is 6 now made
07:09 - is also here at 6 now check if data is
07:15 - equal to is equal to our mid 59 is equal
07:17 - to EOF mid yes now this is the stopping
07:20 - condition we found the data so now here
07:23 - you are going to stop and you are you
07:26 - are going to return mid return mid means
07:29 - you are going to return the index 6
07:31 - where the data is present fine
07:34 - so this is the one stopping condition
07:36 - now second case is if data is not
07:39 - present in the array in that case when
07:42 - you are going to stop your searching
07:44 - algorithm let us take that case on that
07:47 - case also is 25 you cut to 59 is this
07:51 - you want to search no so second cases
07:55 - this data this data is what this data is
07:59 - greater than the data which is at mid
08:01 - position
08:02 - so here the case is this one the data is
08:05 - 59 and 59 is greater than a of mid mid
08:09 - is 25 right so now we can say that this
08:14 - data is present to the right of the
08:17 - Smith in this summary in this submarine
08:20 - now we have divided this array into two
08:22 - parts one is this one and one is this
08:25 - one now we can say this 59 is present to
08:27 - the right of this mid now how you can
08:30 - say this because we know that that array
08:33 - is sorted and if array is sorted then
08:36 - all the data which is greater than 25
08:38 - must be present to the right of this 25
08:42 - right
08:43 - now we are going to see we are now we
08:45 - are going to search only in this area we
08:49 - have divided our search space first at
08:52 - first our search spaces this one after
08:55 - first comparison we have divided it into
08:58 - half now this is our search space we are
09:01 - going to search from here to here now
09:03 - fine
09:05 - so if this is the case then this left
09:07 - then this left variable should be moved
09:10 - here on to the right here this side
09:14 - towards the right so now here we have
09:16 - our left or left now becomes mid plus
09:20 - one because we are going to work only in
09:23 - this area now and our is as it is that
09:26 - is nine again if it the same step find
09:30 - out mid five plus nine fourteen divided
09:32 - by two is seven meters what seven now
09:37 - now mid is what here seven now again
09:44 - three cases can be there now check that
09:46 - I fifty nine is sixty-three same as
09:49 - fifty nine know now the case is here
09:52 - fifty nine is the data is less than 63
09:55 - this second case data is less than a of
09:58 - mid now what you can say a data is
10:01 - present to the left of 63 here only
10:04 - because data is less than 63 and array
10:07 - sorted so now so now if data is present
10:10 - to the left of mid to the left of mid in
10:13 - that case what you will do left would be
10:15 - as a T's 5 and this right would be moved
10:19 - towards this side so now right becomes
10:22 - mid minus 1 now here we have right
10:26 - because now we are going to work only in
10:30 - this space here only we again divided
10:33 - the array into two parts that is why I
10:35 - was saying we recursively divide the
10:37 - hair into two parts fine until you find
10:40 - the element so now our is what six mid
10:44 - minus 1 7 minus 1 is 6 now again find
10:46 - out the mid 5 plus 6 is 11 by 2 that is
10:49 - 5 point 5 floor values 5 so mid is now
10:52 - here 5 L is also 5 and
10:56 - mitt is also five now right now check
11:01 - it's 59 same as you've made no 59 is
11:06 - greater than a of mid it means 59 is
11:10 - present to the right of me to the right
11:13 - area of this mid right and if this this
11:16 - is present the data is present to the
11:17 - right of the mid in that case what what
11:19 - we will do will move left towards this
11:23 - side means left becomes mid plus one now
11:26 - right so left becomes mid plus 1 that is
11:29 - 5 plus 1 is 6 right remains has as it is
11:32 - so now now here we have left and here we
11:37 - have right only so if left and right are
11:41 - at pointing at same index it means in
11:45 - this we have only one element and the
11:47 - array we have now only one element so
11:50 - now we have only 59 see I can find out
11:53 - middle 6 plus 6s and divided by 2 is 6
11:56 - now made is also here at 6 now check if
12:04 - data is equal to is equal to M 859 is
12:06 - equal to EOF mid yes now this is the
12:09 - stopping condition we found the data so
12:12 - now here you are going to stop and your
12:15 - you are going to return mid return bid
12:18 - means you are going to return the index
12:19 - 6 where the data is present fine
12:23 - so this is the one stopping condition
12:25 - now second case is if data is not
12:28 - present in the array in that case when
12:31 - you are going to stop your searching
12:33 - algorithm let us take that case only
12:36 - that case also now let us take you from
12:38 - 1 to find out 60 see 16 is not present
12:41 - here now we will see same ellen's here
12:44 - only and right is here only now left is
12:47 - 0 and right is 9 middays what for
12:51 - at 4 you have what 25 here we have made
12:55 - this is not equal to 60 60 is greater
12:58 - than this 25 so data is present to the
13:00 - right of 25 data is present to the right
13:03 - of this one and we are going
13:04 - move this left and left becomes mid plus
13:06 - one here now left is four plus one is
13:11 - five and right I mean sighs at ease
13:13 - again find out the middle element that
13:15 - is seven now my desert here only now
13:19 - check that I 60 is 60 is equal to 63 a
13:23 - off mid no first case no that is not
13:25 - true data is less than a off mid second
13:29 - case is true if less than it means the
13:31 - data is present to the left of left of
13:34 - 63 then we are going to work in this
13:36 - area left becomes as it is in that case
13:39 - in that case right becomes mid minus one
13:41 - so here we are going to shift this right
13:44 - now right becomes mid minus 1 that is 6
13:47 - again the middle element that is 5 so
13:51 - now mid is at 5 right here all here we
13:54 - have made now check if data is equal to
13:57 - mid 60 is equal to 45 no 60 is greater
14:00 - than mid this condition is true if
14:02 - greater than if greater then then data
14:05 - would be to the right of this right of
14:07 - mid so in that case we are going to move
14:10 - this left to this side so left this L
14:14 - becomes now mid plus 1 that is 6 and
14:16 - bright remains as it is so now here we
14:20 - have what left and right both now middle
14:25 - element is 6 now middle 6 now here also
14:29 - we have made now check the status 60 is
14:33 - equal to this mid no the 60 is what
14:36 - greater than this data
14:38 - it means the data is present to the
14:40 - right of this 59 right and if data is
14:44 - present to the right array then we are
14:46 - going to move this L L becomes mid plus
14:48 - 1 now L becomes 6 plus 1 is 7 and our
14:52 - remains as it is now this is the
14:54 - stopping condition here if this L value
15:00 - if L value becomes greater than R value
15:05 - it means data is not present here we are
15:09 - going to repeat these steps find out the
15:12 - mid checking these conditions till L
15:16 - less than right because here we have
15:18 - taken left here we have taken right once
15:20 - this left becomes greater than right
15:23 - they have grossed each other it means
15:25 - the data is not present so this is the
15:27 - stopping condition in that case if data
15:30 - is not present right now I am going to
15:33 - write a piece of code for this binary
15:34 - search see I'm going to create a
15:37 - function binary search in this I am
15:43 - going to pass array a total number of
15:45 - elements in the array and the data you
15:47 - want to search so now first of all what
15:50 - we have done we have taken L is equal to
15:52 - 0 and R is equal to n minus 1 n is 10 so
15:57 - our was 9 5 and after that we have
16:02 - calculated what mid so now Mehta is
16:07 - equal to L plus R divided by 2 right
16:11 - after calculating mid we are checked
16:13 - three conditions right three guesses can
16:15 - be there so we have checked if data is
16:20 - equal to is equal to mid if this is true
16:24 - then you do it
16:26 - return mid here you are returning some
16:31 - integer value so the data type would be
16:33 - in right if this condition is not true
16:37 - else if data is less than a of mid if
16:48 - data is less than movement less than EF
16:52 - mid less than means the data is present
16:54 - to the left side of this middle it means
16:56 - our value would be moved l value remains
16:59 - as it is so now R becomes mid minus 1
17:04 - right and the third case says data is
17:07 - present to the right of the smiddy in
17:09 - that case we will move left left becomes
17:11 - L mid plus 1 else L becomes mid plus 1
17:18 - right and you are going to repeat these
17:21 - steps in left
17:26 - l is less than R once L becomes greater
17:29 - than R it means data not found right so
17:33 - you are going to repeat these steps so
17:35 - you are going to write down these steps
17:36 - in a loop that is while L is less than R
17:44 - till then these steps should be repeated
17:47 - if L is not less than R it means
17:50 - obviously L would be greater than R so
17:53 - here you can return what minus 1 minus 1
17:57 - means data is not present right and you
18:00 - can lose this function so this is how
18:05 - the binary search is going to work now
18:08 - what is the time complexity for this
18:09 - algorithm see we are we are reducing the
18:12 - search space by half at first search
18:15 - space was this one again by half again
18:18 - by half again by half like this so if
18:21 - such kind of behavior exists in that
18:24 - case time complexity would always be
18:26 - order of no in worst case it is order of
18:32 - log N and what is the time complexity in
18:35 - best SC suppose I am going to find the
18:37 - data 25 data is 25 at first
18:41 - I am calculating L plus 9 plus 0 divided
18:45 - by 2 that is 4 and at 4 is Medus at 4
18:49 - now here only I got 25 so this is 1 the
18:52 - best case in best is time complexity
18:54 - would be order of 1 right and in worst
18:57 - case it is order of log n see now why I
19:00 - am saying this order of log and I am
19:02 - going to tell you with the help of an
19:03 - example see let us take these two cases
19:05 - I am just going to take these two for
19:07 - loops simple for loop so I am going to
19:09 - calculate the time complexity for this
19:10 - and this also time complexity means we
19:13 - are going to find out within this for
19:14 - loop the statements is going to
19:15 - Institute how many times right
19:17 - that is the time complexity now in this
19:20 - case in this case how many times the
19:22 - statement within this for loop would be
19:24 - executed see I is equal to 1 I less than
19:27 - 100 here n is equal to 100 here also n
19:30 - is equal to 100 fine so this is going to
19:35 - be executed now I into 2
19:37 - here I'm going to double the value I so
19:40 - now next time becomes I value becomes to
19:42 - two is also less than hundred now again
19:44 - it would be executed now next time it
19:46 - becomes four four is also less than
19:49 - hundred now next time it becomes eight
19:51 - next 16 32 64 and after that it becomes
19:56 - what 128 128 and 128 is not less than
20:00 - hundred so this is not going to be
20:02 - executed so how many times this
20:04 - statement will be executed one two three
20:06 - four five six seven seven times and
20:09 - anybody was hundred for the value
20:13 - hundred how many times the statement
20:15 - would be executed only for seven times
20:18 - right same here in this case and value
20:22 - is 100 how many times this one peg is
20:24 - equal to dead first I is equal to 100
20:27 - now I am going to divide the I value by
20:29 - two I am going to divide it by half
20:32 - next time 50 50 is greater than equal to
20:34 - one
20:35 - okay next is 25 25 is also two it would
20:39 - be executed next time divided by two is
20:41 - two n next time six next time three next
20:46 - time one next time if you divide it
20:49 - becomes what 0 0 is not greater than
20:51 - equal to one so it is going to stop it
20:53 - is not going to execute now here also 7
20:55 - times 1 2 3 4 5 6 7 7 times here also n
20:58 - value is 100 right I hope you know the
21:02 - formula of this thing log of base B and
21:05 - n is equal to K it means it means this
21:13 - be B of B power K is equal to n right
21:19 - this is the formula if this is the case
21:21 - then you can say that B of K is equal to
21:24 - and if you if this is the case B of K is
21:26 - equal to 1 it means you can say log of P
21:29 - n is equal to K now here n is equal to
21:31 - 100 now if you put logos 2 and hundred
21:36 - so what you can write 2 raised to power
21:40 - 2 raise to power what 7 because 2 raised
21:43 - to power 6 is what at 64 and 64 is not
21:47 - so I can write 2 raised to power sin
21:49 - that is
21:49 - twenty-eight so I can write seven but I
21:51 - cannot write 6 because 64 is less than
21:54 - hundred but greater than value we can
21:56 - write so we can take hair to raise to
21:57 - power approximately 7 so it means it
22:01 - becomes what 7 all right because base is
22:06 - also 2 and here also 2 it means we just
22:08 - take only the power that is 7 fine so
22:13 - the time complexity how many times this
22:15 - loop has been executed log n times right
22:22 - here also you can say log n times so if
22:26 - such kind of behavior occurs if loop is
22:29 - going to doubles or loop is going to
22:31 - half in that case always the time
22:34 - complexity is order of log n so in
22:37 - binary search also we are going to
22:39 - divide the space by half then again half
22:42 - then again half so this is the case so
22:45 - the time complexity would be log n here
22:49 - and this log n is far better than the
22:53 - order of n that is the time complexity
22:56 - of linear search that is why I was I was
22:58 - saying saying saying that this is the
23:01 - most popular searching algorithm because
23:04 - of this time complexity only in the
23:05 - worst case the time complexity is order
23:07 - of Lohman in average case also the time
23:09 - complexity or time complexity is order
23:12 - of log n so this is all about binary
23:15 - search I hope you got this concept why
23:17 - we are writing the code like this maybe
23:19 - this this case can be little bit
23:21 - confusing why we are taking the time
23:23 - complexity log n but I hope you got this
23:25 - fine so I'll see in the next video till
23:28 - then bye bye take

Cleaned transcript:

using this binary search will take less time than the linear search right now what is the working principle of this binary search we are going to discuss with the help of an example right now see one prerequisite of this binary search is or you can say the requirement of this binary search algorithm is what the array should be sorted see here you can see I have taken this example but the data in this array is what sorted right if the data is not sorted then you cannot apply binary search on that Eric you have to first sort the array then you can apply binary search for searching so here the precondition for this binary search is the array should be sorted that is not a case in linear search that linear search works fine on the sorted array as well as on unsorted array now we will see how this binary search algorithm will work fine see so now we are going to search for the data or you can say key 59 is this fiftynine present in this area or not and if present your code should return where this 59 is present the index at which this 59 is present see one more important point about this binary search algorithm is what it is divide and conquer technique it means it is going to divide the array into two half recursively divide the area now how recursively it will divide that into sub arrays we are going to see see in this case we are going to find out the middle element of the array fine so we are going to take two variables first is here left variable and we are going to point left here means L value is 0 next variable is right and the value of this right is 9 or you can say n minus 1 so in this algorithm we are going to find out the mid position of the array from where we are going to divide the area into two halves fine see first of all the left is 0 and the right is 9 in this case now find out the mid of this one how do now mid L plus I divided by 2l plus R divided by 2 and we are going to take the floor value of this one 0 plus 9 divided by 2 is 1 4.5 floor value is 4 so mid is what for so at index 4 we are having mid now now here three cases can be their first cases the data you want to find out is equal to the data at the mid position fine second case is the data is less than the data which is at mid position or third cases the data you want to find out the key you want to find out find out is greater than the data which is at mid position so so these are three cases find data is equal to the Smith data is less than the say of MIT and data is greater than yo from it three cases can be there now see here the data is 59 and mid is 4 now what is that a or for a o for the data is 25 so here the case is this one the data is 59 and 59 is greater than a off mid mid is 25 right so now we can say that this data is present to the right of the Smith in this summary in this submarine now we have divided this array into two parts one is this one and one is this one now we can see this 59 is present to the right of this mid now how you can say this because we know that that array is sorted and if array is sorted then all the data which is greater than 25 must be present to the right of this 25 right now we are going to see we are now we are going to search only in this array we have divided our search space first at first our search spaces this one after first comparison we have divided it into half now this is our search space we are going to search from here to here now fine so if this is the case then this left then this left variable should be moved here on to the right here this side towards the right so now here we have our left or left now becomes mid plus one because we are going to work only in this area now and our is as it is that is nine again leap it the same step find out mid five plus nine fourteen divided by two is seven mid is what seven now now mid is what here seven now again three cases can be there now check data is fifty nine is sixtythree same as 59 no now the case is here 59 is the data is less than 63 this second case data is less than a of mid now what you can say data is present to the left of 63 here only because theta is less than 63 and array sorted so now so now if data is present to the left of me to the left of MIT in that case what you will do left would be as at E is 5 and this right would be moved towards this side so now right becomes mid minus one now here we have right because now we are going to work only in this space here only we again divided the array into two parts that is why I was saying we recursively divide the hair into two parts fine until you find the element so now our is what six mid minus 1 7 minus 1 is 6 now again find out the mid 5 plus 6 is 11 by 2 that is 5 point 5 flow values 5 so mid is now here 5l is also 5 and mid is also 5 now right now check it's 59 same as you've mid no 59 is greater than a of mid it means 59 is present to the right of me to the right area of this mid right and if this this is present the data is present to the right of the mid in that case what what we will do we move left towards this side means left becomes mid plus one now right so left becomes mid plus 1 that is 5 plus 1 is 6 right remains as as it is so now now here we have left and here we have right only so if left and right are at pointing at same index it means in this we have only one element and the array we have not only one element so now we have only 59 see I can find out middle 6 plus 6s and divided by 2 is 6 now made is also here at 6 now check if data is equal to is equal to our mid 59 is equal to EOF mid yes now this is the stopping condition we found the data so now here you are going to stop and you are you are going to return mid return mid means you are going to return the index 6 where the data is present fine so this is the one stopping condition now second case is if data is not present in the array in that case when you are going to stop your searching algorithm let us take that case on that case also is 25 you cut to 59 is this you want to search no so second cases this data this data is what this data is greater than the data which is at mid position so here the case is this one the data is 59 and 59 is greater than a of mid mid is 25 right so now we can say that this data is present to the right of the Smith in this summary in this submarine now we have divided this array into two parts one is this one and one is this one now we can say this 59 is present to the right of this mid now how you can say this because we know that that array is sorted and if array is sorted then all the data which is greater than 25 must be present to the right of this 25 right now we are going to see we are now we are going to search only in this area we have divided our search space first at first our search spaces this one after first comparison we have divided it into half now this is our search space we are going to search from here to here now fine so if this is the case then this left then this left variable should be moved here on to the right here this side towards the right so now here we have our left or left now becomes mid plus one because we are going to work only in this area now and our is as it is that is nine again if it the same step find out mid five plus nine fourteen divided by two is seven meters what seven now now mid is what here seven now again three cases can be there now check that I fifty nine is sixtythree same as fifty nine know now the case is here fifty nine is the data is less than 63 this second case data is less than a of mid now what you can say a data is present to the left of 63 here only because data is less than 63 and array sorted so now so now if data is present to the left of mid to the left of mid in that case what you will do left would be as a T's 5 and this right would be moved towards this side so now right becomes mid minus 1 now here we have right because now we are going to work only in this space here only we again divided the array into two parts that is why I was saying we recursively divide the hair into two parts fine until you find the element so now our is what six mid minus 1 7 minus 1 is 6 now again find out the mid 5 plus 6 is 11 by 2 that is 5 point 5 floor values 5 so mid is now here 5 L is also 5 and mitt is also five now right now check it's 59 same as you've made no 59 is greater than a of mid it means 59 is present to the right of me to the right area of this mid right and if this this is present the data is present to the right of the mid in that case what what we will do will move left towards this side means left becomes mid plus one now right so left becomes mid plus 1 that is 5 plus 1 is 6 right remains has as it is so now now here we have left and here we have right only so if left and right are at pointing at same index it means in this we have only one element and the array we have now only one element so now we have only 59 see I can find out middle 6 plus 6s and divided by 2 is 6 now made is also here at 6 now check if data is equal to is equal to M 859 is equal to EOF mid yes now this is the stopping condition we found the data so now here you are going to stop and your you are going to return mid return bid means you are going to return the index 6 where the data is present fine so this is the one stopping condition now second case is if data is not present in the array in that case when you are going to stop your searching algorithm let us take that case only that case also now let us take you from 1 to find out 60 see 16 is not present here now we will see same ellen's here only and right is here only now left is 0 and right is 9 middays what for at 4 you have what 25 here we have made this is not equal to 60 60 is greater than this 25 so data is present to the right of 25 data is present to the right of this one and we are going move this left and left becomes mid plus one here now left is four plus one is five and right I mean sighs at ease again find out the middle element that is seven now my desert here only now check that I 60 is 60 is equal to 63 a off mid no first case no that is not true data is less than a off mid second case is true if less than it means the data is present to the left of left of 63 then we are going to work in this area left becomes as it is in that case in that case right becomes mid minus one so here we are going to shift this right now right becomes mid minus 1 that is 6 again the middle element that is 5 so now mid is at 5 right here all here we have made now check if data is equal to mid 60 is equal to 45 no 60 is greater than mid this condition is true if greater than if greater then then data would be to the right of this right of mid so in that case we are going to move this left to this side so left this L becomes now mid plus 1 that is 6 and bright remains as it is so now here we have what left and right both now middle element is 6 now middle 6 now here also we have made now check the status 60 is equal to this mid no the 60 is what greater than this data it means the data is present to the right of this 59 right and if data is present to the right array then we are going to move this L L becomes mid plus 1 now L becomes 6 plus 1 is 7 and our remains as it is now this is the stopping condition here if this L value if L value becomes greater than R value it means data is not present here we are going to repeat these steps find out the mid checking these conditions till L less than right because here we have taken left here we have taken right once this left becomes greater than right they have grossed each other it means the data is not present so this is the stopping condition in that case if data is not present right now I am going to write a piece of code for this binary search see I'm going to create a function binary search in this I am going to pass array a total number of elements in the array and the data you want to search so now first of all what we have done we have taken L is equal to 0 and R is equal to n minus 1 n is 10 so our was 9 5 and after that we have calculated what mid so now Mehta is equal to L plus R divided by 2 right after calculating mid we are checked three conditions right three guesses can be there so we have checked if data is equal to is equal to mid if this is true then you do it return mid here you are returning some integer value so the data type would be in right if this condition is not true else if data is less than a of mid if data is less than movement less than EF mid less than means the data is present to the left side of this middle it means our value would be moved l value remains as it is so now R becomes mid minus 1 right and the third case says data is present to the right of the smiddy in that case we will move left left becomes L mid plus 1 else L becomes mid plus 1 right and you are going to repeat these steps in left l is less than R once L becomes greater than R it means data not found right so you are going to repeat these steps so you are going to write down these steps in a loop that is while L is less than R till then these steps should be repeated if L is not less than R it means obviously L would be greater than R so here you can return what minus 1 minus 1 means data is not present right and you can lose this function so this is how the binary search is going to work now what is the time complexity for this algorithm see we are we are reducing the search space by half at first search space was this one again by half again by half again by half like this so if such kind of behavior exists in that case time complexity would always be order of no in worst case it is order of log N and what is the time complexity in best SC suppose I am going to find the data 25 data is 25 at first I am calculating L plus 9 plus 0 divided by 2 that is 4 and at 4 is Medus at 4 now here only I got 25 so this is 1 the best case in best is time complexity would be order of 1 right and in worst case it is order of log n see now why I am saying this order of log and I am going to tell you with the help of an example see let us take these two cases I am just going to take these two for loops simple for loop so I am going to calculate the time complexity for this and this also time complexity means we are going to find out within this for loop the statements is going to Institute how many times right that is the time complexity now in this case in this case how many times the statement within this for loop would be executed see I is equal to 1 I less than 100 here n is equal to 100 here also n is equal to 100 fine so this is going to be executed now I into 2 here I'm going to double the value I so now next time becomes I value becomes to two is also less than hundred now again it would be executed now next time it becomes four four is also less than hundred now next time it becomes eight next 16 32 64 and after that it becomes what 128 128 and 128 is not less than hundred so this is not going to be executed so how many times this statement will be executed one two three four five six seven seven times and anybody was hundred for the value hundred how many times the statement would be executed only for seven times right same here in this case and value is 100 how many times this one peg is equal to dead first I is equal to 100 now I am going to divide the I value by two I am going to divide it by half next time 50 50 is greater than equal to one okay next is 25 25 is also two it would be executed next time divided by two is two n next time six next time three next time one next time if you divide it becomes what 0 0 is not greater than equal to one so it is going to stop it is not going to execute now here also 7 times 1 2 3 4 5 6 7 7 times here also n value is 100 right I hope you know the formula of this thing log of base B and n is equal to K it means it means this be B of B power K is equal to n right this is the formula if this is the case then you can say that B of K is equal to and if you if this is the case B of K is equal to 1 it means you can say log of P n is equal to K now here n is equal to 100 now if you put logos 2 and hundred so what you can write 2 raised to power 2 raise to power what 7 because 2 raised to power 6 is what at 64 and 64 is not so I can write 2 raised to power sin that is twentyeight so I can write seven but I cannot write 6 because 64 is less than hundred but greater than value we can write so we can take hair to raise to power approximately 7 so it means it becomes what 7 all right because base is also 2 and here also 2 it means we just take only the power that is 7 fine so the time complexity how many times this loop has been executed log n times right here also you can say log n times so if such kind of behavior occurs if loop is going to doubles or loop is going to half in that case always the time complexity is order of log n so in binary search also we are going to divide the space by half then again half then again half so this is the case so the time complexity would be log n here and this log n is far better than the order of n that is the time complexity of linear search that is why I was I was saying saying saying that this is the most popular searching algorithm because of this time complexity only in the worst case the time complexity is order of Lohman in average case also the time complexity or time complexity is order of log n so this is all about binary search I hope you got this concept why we are writing the code like this maybe this this case can be little bit confusing why we are taking the time complexity log n but I hope you got this fine so I'll see in the next video till then bye bye take
