With timestamps:

00:00 - so in the series of learning c
00:01 - programming we are discussing functions
00:02 - in c we have discussed some previously
00:05 - gate question paper in the previous
00:06 - videos on functions
00:08 - right and till now we have discussed
00:10 - functions see when we were passing
00:12 - argument in function what we have passed
00:14 - either
00:15 - into variable or float variable or a
00:17 - single character variable that's it
00:18 - right as an argument but what if if you
00:21 - want to pause pass a complete array as
00:23 - an argument
00:25 - string as an argument
00:26 - pointer as an argument
00:28 - to the function so these concepts are
00:31 - left so in this video we'll discuss one
00:32 - concept that is how to pass a complete
00:34 - array
00:35 - as an argument in function that will
00:38 - discuss in this video with a proper
00:39 - program right and why we pass a complete
00:42 - array what is the need of need to pass
00:44 - an area as an argument
00:46 - right
00:48 - with a proper program we will discuss
00:49 - here then i will show you practical
00:50 - loads we will run that program and see
00:52 - what output you will get right and all
00:53 - the important points about this thing
00:55 - like
00:56 - what is the process what is the
00:57 - mechanism behind behind the scene what
00:59 - is happening when you pass an airing
01:01 - that also will discuss one by one all
01:03 - the things about this concept we'll
01:05 - discuss in this video right but before i
01:07 - just want to tell you one thing
01:08 - if you want if you want to have a great
01:10 - career in software development then you
01:12 - must think about the aspects like what's
01:13 - trending in the industry the questions
01:15 - being asked in the interviews how to
01:16 - improve your courtship ranking what is
01:18 - the thought process behind the great
01:19 - application like zometo or laflip card
01:21 - so here an academy wedding is a platform
01:23 - where you can watch weekly shows which
01:25 - you can watch live
01:27 - and the host of these shows are working
01:28 - in some of the top companies like
01:30 - linkedin amazon google
01:32 - and our seven star coders own code chef
01:35 - and industry experts having years of
01:37 - experience so they'll be covering the
01:39 - content which would be really helpful
01:40 - for your career like in the live
01:42 - episodes you can get an opportunity to
01:44 - ask take a charge about the top 20
01:47 - questions being asked and the you know
01:49 - industry leaders about the recruitment
01:51 - process in top startups and mncs what is
01:53 - their eligibility criteria and how to
01:55 - apply for them and you can also get your
01:57 - resume reviewed by the experts not only
01:59 - this you can also participate into mock
02:01 - interviews and also learn courses on
02:03 - programming languages
02:05 - blockchain and crypto
02:07 - tech aspects of digital marketing data
02:08 - analytics and here is one more show in
02:10 - which rjm will be unlocking
02:12 - one's potential for web development
02:14 - right on from the introduction to
02:16 - building one's career in web development
02:18 - the show would also cover hr tips and
02:20 - tricks during web development interviews
02:22 - the pros and cons of a career in web
02:25 - development and what are some upskilling
02:27 - opportunities one should be taking up
02:29 - throughout their career so the detail of
02:32 - the show and the batch you will find in
02:33 - the link that i'll put in the
02:34 - description box of this video and don't
02:36 - forget to use my code jkl10 to get ten
02:38 - percent
02:39 - ten percent extra discount on your paid
02:40 - subscription so now let's discuss this
02:42 - how to pass an array as an argument i
02:44 - hope you are clear with how to pass a
02:46 - single
02:47 - uh variable either its float or
02:49 - integer or character
02:51 - how to suppose let's take one uh one you
02:54 - know
02:55 - example suppose function is fun and i
02:57 - want to pass only one variable of it is
03:00 - a type so you can simply in declaration
03:02 - you can simply write down the data type
03:04 - in calling you can write down name of
03:06 - the function and here you can pass
03:07 - suppose a variable x or you can pass us
03:10 - into value also both are fine right you
03:12 - can take here in index is equal to 5 or
03:15 - you can pass x in main
03:20 - definition just you have to write in fun
03:23 - and here to receive this you will write
03:25 - data type and
03:27 - name of the
03:28 - variable i hope this is clear to you
03:30 - right but now how to pass but why we
03:33 - pass array
03:34 - see suppose
03:36 - in my class i have 60 students and i
03:38 - want to you know create a function to
03:40 - calculate average of marks of 60
03:42 - students
03:44 - so i want to pass marks of 60 students
03:47 - in that function a function is like
03:49 - average
03:51 - and i want to pass what
03:53 - marks of 60 students
03:55 - so
03:56 - one method is what either you can pass
03:58 - what 60 variables
04:01 - individual variable is containing marks
04:03 - of one student that is also one way but
04:05 - obviously that is not a good place we
04:07 - are not going to going to pass a 60
04:09 - values or 60 variables here so rather
04:11 - than this
04:12 - what to store marks of 60 students now
04:16 - same type of data to store same type of
04:18 - data what we use array right so rather
04:21 - than passing 60 variables so 60 values
04:24 - we can simply pass an array like suppose
04:26 - i i am taking in marks
04:29 - and size is
04:31 - 60. here we have 60
04:35 - marks of 60 students so you can simply
04:37 - pass this array rather than just passing
04:39 - 60 variables or 60 values that is a good
04:41 - idea
04:43 - right so when you want to pass a list of
04:46 - values to a function then we use it
04:49 - right
04:50 - or this is also useful when you you know
04:53 - you want to pause pass a string in
04:56 - function
04:57 - right that is one great application of
04:59 - passing array as an argument that we
05:01 - will discuss in the next video how to
05:03 - pass a string as an argument like a
05:05 - complete name that is character and
05:06 - union the string is nothing but a
05:08 - character array your name is like j
05:09 - jenkins that is what character area or
05:11 - you can say string
05:14 - so how to pass that thing
05:15 - for that we need to pass area as an
05:18 - argument that is one great application
05:20 - of you know passing array so i hope this
05:22 - is clear why we pass carry as an
05:24 - argument now how you will pass array as
05:26 - an argument what you will write here
05:28 - right that we will discuss here with the
05:30 - complete program so let me just write
05:32 - down this program first of all we will
05:33 - declare
05:35 - this
05:35 - function
05:37 - i want to calculate what average of
05:39 - sixty six i'll not take 60
05:42 - student marks i'll take only five values
05:44 - i'll take a simple example right
05:47 - so here i am taking suppose
05:50 - i am declaring that function int and
05:52 - function name is average
05:54 - return type is in so i want that it
05:56 - should return something right and in
05:59 - declaration what we can do
06:01 - hint
06:03 - that's it
06:04 - why i am writing this
06:06 - let me just show you that the
06:08 - declaration of this average function and
06:10 - here as an argument
06:11 - what
06:13 - i'm accepting i'm not expecting it would
06:16 - pass array this is what for array so
06:18 - here no need to write down the
06:21 - name of that
06:22 - variable
06:23 - whatever you pass so no need to write
06:25 - down the name of the array only you have
06:27 - to tell that this is should be of
06:29 - integer type and this would be array so
06:31 - that is why we are writing these
06:34 - subscript right this is simple
06:36 - declaration and in main
06:38 - in main
06:40 - what you will do
06:41 - i am taking what an array in
06:45 - marks
06:47 - right and i'm taking marks of five
06:49 - students only i'm not taking 60 students
06:51 - so these are marks of 50 students i'm
06:53 - taking in you can take float also
06:55 - it's up to you right
06:58 - now i want to pass these this array so
07:01 - how we will call this function
07:03 - avg name of the function and here what
07:06 - you will pass
07:07 - only the name of this array marks
07:12 - that's it
07:14 - that's it right name of the array
07:17 - nothing else you have to do here
07:19 - right now suppose in the definition what
07:22 - you will do
07:24 - i want that this this should return the
07:26 - average
07:27 - right
07:28 - so
07:29 - it will return some average so here i
07:31 - want to start that i want to you know
07:33 - store that value average in some
07:35 - variable
07:37 - right so i'm taking that variable name
07:38 - is
07:41 - average so before using it you have to
07:43 - declare it a v e r a g
07:47 - you can take it float obviously average
07:48 - would be in float that's up to you
07:51 - i'm just taking in but
07:53 - it should be flow right so it will
07:56 - we are going to accept here
07:58 - the average and just print printf
08:01 - average
08:04 - is
08:05 - percentage d and simply print vote
08:09 - average
08:10 - right now what is the definition how you
08:12 - will define data type name of the
08:14 - function
08:15 - and here
08:17 - what
08:18 - this array it will
08:20 - pass so here what you will write data
08:23 - type
08:24 - int
08:25 - name of the array you can take same name
08:26 - also
08:28 - suppose i am taking marks
08:29 - same name
08:31 - or you can take a b c and a different
08:33 - name also right so here
08:38 - that's it no need to specify the size
08:40 - here
08:41 - this you have to write as an argument
08:43 - when you will pass array as an argument
08:45 - then in definition
08:46 - this would be the case in declaration
08:48 - only write the sorry in function calling
08:50 - only
08:51 - pass the name of the array and this is
08:53 - what the declaration
08:55 - right
08:56 - now
08:57 - here have to calculate first of all sum
09:00 - will do some and then sum divide by
09:02 - total number of students right so here
09:06 - see we don't know how many students are
09:07 - there means we don't know the size of
09:09 - the setting
09:10 - so that also if you want to pass then
09:13 - how you will pass the size of the array
09:15 - see here
09:16 - simply you can write down here suppose
09:19 - you know the size is 5 so simply you can
09:21 - pass five
09:22 - or if you don't know you can calculate
09:24 - the size of the array right how to
09:27 - calculate the size that
09:29 - we will discuss when we do practical of
09:31 - this program right here i am writing
09:34 - only five
09:35 - right when we write down the code on my
09:38 - laptop then we will calculate the size
09:40 - and we will pass that size i'll will
09:42 - take that size in you know a variable
09:44 - name size and then we will pass that
09:46 - variable name here right so now
09:49 - hey 2 argument we are going to pass so
09:51 - here also what in declaration also what
09:53 - you will do
09:55 - one more this is what was
09:57 - obviously a simple variable you need to
09:58 - accept this 5. so here comma
10:02 - end suppose i am taking into a
10:05 - so here also two arguments one is array
10:07 - one is simple end right and semicolon
10:10 - here
10:12 - now how to do
10:13 - sum
10:14 - a for loop for i is equal to zero
10:18 - i less than
10:20 - i less than size of the array size of
10:22 - the arrays in a we have size of the
10:24 - array so i less than a
10:26 - right
10:28 - and i plus plus
10:30 - and here what you will do
10:32 - sum is equal to sum
10:35 - plus
10:36 - name of the array is marks only here
10:40 - marks
10:41 - i i hope you know the formula how to
10:43 - calculate some of the array
10:46 - that's it and after some just calculate
10:49 - what
10:51 - average
10:52 - average same variable name i'm taking
10:54 - here also same also fine here only or
10:57 - you can take different name
10:58 - right so average is equal to what
11:02 - sum divided by
11:04 - total number of student total number of
11:05 - student or you can say the size of
11:07 - arrays
11:08 - in a we have so divided by 5 and now
11:12 - return this thing
11:13 - right so now what you will write after
11:15 - this average
11:16 - i am writing here
11:19 - return average
11:24 - and that's it so now here we are using i
11:27 - sum and average so in this function you
11:28 - have to declare first of all these
11:30 - variables otherwise it will give it so
11:32 - you can declare in i
11:33 - you can declare sum is equal to 0 and
11:36 - you can also declare what you are
11:39 - taking average average also you can take
11:41 - zero
11:43 - three variables
11:44 - right three variables because we are
11:46 - using i'm returning average so it will
11:48 - return here and you can print average
11:49 - here so this is how you will pass array
11:52 - as an argument c now how the salary
11:54 - would be passed first of all when you
11:56 - will call this this thing then
11:59 - control will go here to the main
12:00 - function
12:01 - right so now instead instead
12:05 - memory would be allocated
12:07 - right suppose this is stack i'm taking
12:10 - this a stack
12:12 - right
12:13 - see whenever you run this this program
12:16 - will go into main memory like
12:18 - some coding for that thing memory would
12:20 - be located then for static or global
12:22 - variables then a stack memory then a
12:24 - heap memory
12:26 - right
12:27 - so now in stack
12:29 - what
12:31 - for main memory would be allocated right
12:33 - it's like one frame
12:35 - or it's like one activation record for
12:38 - this function would be l
12:41 - right so now
12:42 - this is for main
12:46 - main function and here we have in main
12:48 - we have what one
12:52 - variable average right we have add a
12:56 - what
12:58 - marks five
13:00 - so here we have
13:02 - some memory how much memory for this
13:04 - array would be allocated
13:05 - five
13:06 - size is five integer is taking four
13:08 - bytes so it means 20 bytes
13:13 - so i'm just
13:18 - drawing this hair 10 15 20 30 and 45
13:23 - right
13:24 - and here we have what
13:26 - here i'm right
13:28 - taking this name of there is marks name
13:30 - of the array will act as a
13:32 - internal pointer it's a constant
13:34 - internal point and what it will have the
13:37 - base address of the series suppose base
13:39 - addresses
13:40 - hundred next element would be at one
13:42 - zero four one zero eight one one two and
13:44 - one one six
13:45 - integers of four by ten i'm i'm
13:47 - supposing integer is a four byte one
13:49 - thirty two bit and a sixty four bit
13:51 - machine right so now this base address
13:53 - is hundred so hundred would be here so
13:55 - it is acting as an internal pointer to
13:56 - this first element this is what a base
13:58 - address of this area right so marks will
14:01 - contain 100 this is the array this is
14:03 - how memory would be located now next
14:05 - line is this thing this is what calling
14:06 - of the function avg we are passing marks
14:09 - now see
14:11 - whenever you will write down the name of
14:13 - the array what you will think
14:15 - this function call so the control will
14:18 - go here so now this function also
14:21 - memory would be allocated to this
14:22 - function average
14:24 - right and here we have
14:26 - obviously this
14:29 - now you will think
14:30 - this is what another array which is here
14:34 - means these values would be copied 10 15
14:37 - 20 no 20 30 and 45
14:41 - in this marks
14:42 - right or you can take different name
14:44 - also
14:45 - right
14:46 - so this complete value would be copied
14:49 - here and we have one more
14:51 - variable a in a what would be copied
14:54 - this 5
14:56 - but this is not the
14:59 - mechanism behind this when you will pass
15:01 - array
15:03 - what it is going to pass the base
15:05 - address of the array
15:06 - so it will pass marks means name of the
15:09 - array in marks we have the base address
15:11 - of the array so it will pass only 100
15:13 - the base address
15:15 - right so here it will act as this
15:20 - this will act as a pointer
15:23 - considered as a pointer what how the
15:25 - compiler will interpret this line
15:28 - something like this int
15:29 - asterisk
15:32 - marks
15:33 - means it's a pointer
15:35 - name of the pointer is marks and integer
15:38 - type pointer means it is pointing to an
15:40 - integer value
15:42 - i hope you got this not the complete
15:44 - values would be copied so here
15:47 - what would be copied we have one pointer
15:50 - marks and here we have hundred
15:52 - so this marks also pointing to here
15:56 - so this is example of we are passing
15:59 - address so this is example of call by
16:01 - reference not call by value so by
16:03 - default array would be passed this is
16:05 - very important point by call by value
16:07 - method note call by sorry call by
16:09 - reference method not call by value
16:12 - and obviously it's right because suppose
16:15 - array is having marks of 100 students or
16:18 - a list of values are 200
16:20 - so when you will pass 200 values now now
16:23 - a
16:24 - separate copy would be created here and
16:26 - 200 value would be stored if you pass it
16:28 - call by value
16:29 - that is of no use wastage of memory here
16:32 - also 200 values here also 200 values and
16:35 - again if you call this function again it
16:37 - will be in memory and again 200 values
16:39 - copies would be stored so that is wasted
16:40 - of memory so that is why array would
16:42 - always be passed by call by reference
16:44 - note call by value
16:46 - this is very important point right so it
16:48 - will act as this thing it is not a
16:50 - complete array
16:51 - here it's not a duplicate array right
16:55 - but this is what this 5 we are passing
16:57 - this is what call by value this is what
16:59 - call by reference because this is l
17:01 - right so now here see i is equal to 0
17:05 - here we have one more variable i that is
17:08 - 0
17:09 - we have sum also we have average also so
17:11 - here we have sum
17:13 - and
17:15 - average here we have 0 0 in this one
17:18 - so now i hope you know that now the a
17:20 - value is 5
17:21 - i value 0 i plus plus and sum would be
17:24 - there it will do first of all 0 plus
17:26 - marks of marks of i is 0
17:31 - means marks of 0 means what
17:33 - it will
17:35 - access this value
17:36 - because obviously this is a pointer to
17:38 - this
17:39 - right so 0 plus
17:41 - 10 is what in sum we have first of all
17:43 - 10 then marks 1 means marks 1 means
17:46 - index is 0 1 2 3 4 means this value
17:48 - would be accessed then 10 plus 15 so
17:51 - this is how total would be done i hope
17:53 - you know the working of this four loop
17:55 - no need to i don't know define you no
17:57 - need to you know dry run this this for
17:58 - loop so i'm just
18:00 - writing down the sum of the array what
18:02 - would be the sum of this array here i
18:04 - think it it would be 120 right and after
18:06 - this for loop average is equal to sum by
18:08 - a sum is equal to 120 divided by a is 5
18:11 - so 120 divided by 5 is what i think it's
18:14 - 24
18:15 - so now it will return average average is
18:18 - 24 so now control will be here whatever
18:20 - it will return that will store in
18:22 - average that is 24 and we are going to
18:23 - print here 24.
18:27 - so i hope you got the working have you
18:28 - passed area as an argument and if you
18:30 - want to confirm that here it's not a
18:32 - complete array
18:33 - just a pointer so you can what you can
18:36 - do
18:36 - you can print here size here if you will
18:39 - print size of array using size sizeof
18:41 - operator what you can print
18:43 - a size of array name is just pass header
18:46 - name
18:47 - marks in printf if you will write then
18:50 - it will print here in main it will print
18:52 - 20 bytes
18:54 - because 5 is size 5 into 420 but here if
18:57 - you will write size of marks here in
19:00 - this function it will print
19:02 - 4 byte because it is a pointer it's not
19:04 - a complete array this this thing i'll
19:06 - show you practically so now let me show
19:08 - you practical of this let me just run
19:10 - this code and see what output you are
19:12 - getting
19:13 - so now let me create a file for this
19:16 - and what
19:18 - array as
19:20 - argument
19:21 - right
19:28 - so here what first of all we are
19:30 - declaring
19:31 - name i'm taking app avg right
19:34 - and here
19:36 - hint name is sorry it's just a
19:39 - declaration so
19:41 - no need to specify the name of the array
19:44 - that's it right
19:46 - and in main
19:50 - what we will do is simple take array
19:53 - marks and here i am taking uh sizes 5
19:57 - and just
19:59 - i'm assigning here values
20:03 - 10 20 30
20:05 - 50
20:07 - right simple values i am taking right
20:09 - and here
20:11 - i i will pass the size also so here we
20:13 - will calculate the size will not pass 5
20:15 - only will calculate the size and then
20:17 - will pass so how to calculate size of
20:19 - the series means how many elements in
20:20 - area how to calculate that thing means
20:22 - if you
20:23 - calculate the size of air in bytes like
20:25 - the size is 20 bytes divided by
20:28 - size of a single value like a of 0 that
20:32 - is 20 divided by 4 that is 5 so there
20:34 - are 5 elements right i hope you are
20:35 - getting this method
20:37 - so here simply you can take what i am
20:40 - also taking one
20:42 - variable that is size
20:44 - right and here i am writing size is
20:47 - equal to
20:50 - size of
20:52 - this is the
20:53 - method just pass the name of the array
20:56 - and divide by
20:59 - size of size of his operator
21:01 - size of
21:04 - single value marks and
21:07 - 0
21:09 - right
21:10 - semicolon so it will give 20 divided by
21:12 - 4 byte
21:13 - [Music]
21:14 - that is 5 and obviously in size we have
21:16 - 5 so there are 5 elements so you can
21:18 - pass this so now
21:22 - average
21:23 - is equal to i'm calling this function
21:25 - average how to call simply pass name of
21:28 - the array and second is size also i want
21:30 - to pass that is the variable name size
21:33 - right so now average obviously average
21:36 - also you have to declare
21:41 - before using it right and size we have
21:43 - declared
21:45 - right
21:46 - now
21:47 - and see yeah in calling we are passing
21:48 - two arguments so here also obviously in
21:50 - declaration also what you have to do
21:52 - one more way ah data type that is int
21:55 - right otherwise it will give error so
21:57 - now after returning
21:58 - just print printf
22:01 - average is equal to percentage d and
22:04 - slash n and simply print
22:07 - the name
22:09 - the variable name where you are storing
22:10 - this average right now what will be the
22:13 - definition
22:14 - name of the function is avg and here
22:17 - i'm taking name of the array is not
22:19 - marks you can take different name also
22:21 - you can take same name also suppose i am
22:23 - taking here name of that is
22:26 - marks one
22:29 - right
22:29 - and here one more
22:31 - hint size
22:33 - you can take same name also size and
22:34 - main size and hair also
22:37 - no need to
22:38 - worry so that that is it and here what
22:42 - now what you will do
22:44 - will take in i
22:45 - then sum
22:47 - and then
22:49 - average
22:51 - right and here you will do some
22:54 - just write down this i less than less
22:57 - than
22:58 - how many elements in array obviously
23:00 - less than size we are going to
23:02 - run and then i plus plus
23:06 - and here what you will do sum is equal
23:08 - to sum plus or you can say sum plus
23:10 - equal to
23:11 - error name is i'm taking here marks one
23:15 - marks one and here
23:17 - i
23:20 - right and after this
23:23 - average is equal to sum divided by
23:28 - size of array
23:29 - that how you calculate average and then
23:32 - return
23:35 - average
23:37 - so here in uh for loop we have semicolon
23:41 - right
23:42 - so now let's see and i know let's run
23:44 - this and see what output you will get
23:53 - okay now see it it was giving a garbage
23:55 - well in the previous case
23:57 - why sometimes it will take garbage value
23:59 - so better to initialize the sum is equal
24:01 - to zero average is equal to zero when
24:03 - you declare these otherwise it will it
24:05 - will take any garbage value and
24:07 - output also will give some garbage value
24:09 - so better to initialize with a zero so
24:11 - now this time it is giving average is 30
24:13 - so now see
24:15 - here here
24:16 - if you print here in main function
24:19 - here i am printing the size after
24:21 - average i am printing
24:22 - what
24:23 - printf
24:25 - inside main
24:28 - size of
24:30 - array is
24:32 - and i'm
24:34 - i want to calculate size in bytes how
24:37 - many bytes right
24:39 - so percentage
24:40 - d
24:41 - and comma i just write down size of
24:44 - operator size off and pass the name of
24:46 - the array marks
24:48 - right
24:50 - same line
24:51 - what same size
24:54 - i want to print here in average also so
24:58 - before returning
25:01 - i'm pretty inside now it's inside
25:05 - avg function
25:07 - right
25:10 - inside avg function size of arrays in
25:12 - bytes size of i'm taking name of the
25:15 - array here marks
25:18 - one
25:19 - so size of marks one this new to take
25:21 - care right
25:22 - now let me run this and see what output
25:25 - you are getting
25:27 - just for formatting purpose i'm i know
25:29 - writing here slash and i'm putting a
25:31 - slash and here
25:36 - see
25:37 - average is 30 before this it is printing
25:41 - inside average function size of array is
25:44 - 4 only
25:46 - size of array is not 20 it's 4 only why
25:48 - because it is it's not an array copy of
25:51 - the array it's just a pointer marks 1 is
25:53 - just a pointer and pointer is what
25:55 - either four bytes or it depends on the
25:58 - machine right
26:00 - so four bytes or two bytes in 32-bit
26:02 - machine it will take four byte but
26:04 - inside main function
26:06 - size of our is 20 bytes
26:09 - so now i hope you are getting we are not
26:11 - copying the complete array if you copy
26:13 - the complete array in both the function
26:15 - size of array will be 20 and 20 because
26:18 - in main also five elements we have in
26:20 - average function also five elements we
26:21 - have if you have a copy but here we in
26:24 - average we don't have copy it's called
26:25 - by reference it's only point that could
26:27 - be considered as pointer and pointer has
26:29 - having size four bytes right
26:32 - now it's just giving a warning like size
26:34 - of an average integer parameter marks
26:36 - one will return size of int star
26:38 - because it is acting in the compiler
26:41 - interpreted as a pointer and star as a
26:44 - pointer right
26:46 - so here if you will think like
26:48 - like that size rather than calculating
26:50 - size in the main function we simply
26:53 - calculate size in the average function
26:55 - and then we just
26:56 - do i less than equal to size no if you
26:59 - will calculate size here if you will
27:00 - write down the same line here
27:03 - in this average means
27:05 - it will take marks one size of max one
27:07 - would be four and size of marks you know
27:10 - this the single element also four four
27:12 - by four is one so size would be one only
27:15 - so this four would run only one time
27:17 - that is why we calculate size how many
27:19 - elements in array in main function and
27:21 - we pass that value
27:24 - right so that's it for this video now
27:26 - so i hope you got the concept if you
27:28 - have any doubt regarding this you can
27:29 - ask me in comment box right next video
27:31 - we'll see how to pass a string as an
27:33 - argument in adding so in the next video
27:35 - till then bye take care

Cleaned transcript:

so in the series of learning c programming we are discussing functions in c we have discussed some previously gate question paper in the previous videos on functions right and till now we have discussed functions see when we were passing argument in function what we have passed either into variable or float variable or a single character variable that's it right as an argument but what if if you want to pause pass a complete array as an argument string as an argument pointer as an argument to the function so these concepts are left so in this video we'll discuss one concept that is how to pass a complete array as an argument in function that will discuss in this video with a proper program right and why we pass a complete array what is the need of need to pass an area as an argument right with a proper program we will discuss here then i will show you practical loads we will run that program and see what output you will get right and all the important points about this thing like what is the process what is the mechanism behind behind the scene what is happening when you pass an airing that also will discuss one by one all the things about this concept we'll discuss in this video right but before i just want to tell you one thing if you want if you want to have a great career in software development then you must think about the aspects like what's trending in the industry the questions being asked in the interviews how to improve your courtship ranking what is the thought process behind the great application like zometo or laflip card so here an academy wedding is a platform where you can watch weekly shows which you can watch live and the host of these shows are working in some of the top companies like linkedin amazon google and our seven star coders own code chef and industry experts having years of experience so they'll be covering the content which would be really helpful for your career like in the live episodes you can get an opportunity to ask take a charge about the top 20 questions being asked and the you know industry leaders about the recruitment process in top startups and mncs what is their eligibility criteria and how to apply for them and you can also get your resume reviewed by the experts not only this you can also participate into mock interviews and also learn courses on programming languages blockchain and crypto tech aspects of digital marketing data analytics and here is one more show in which rjm will be unlocking one's potential for web development right on from the introduction to building one's career in web development the show would also cover hr tips and tricks during web development interviews the pros and cons of a career in web development and what are some upskilling opportunities one should be taking up throughout their career so the detail of the show and the batch you will find in the link that i'll put in the description box of this video and don't forget to use my code jkl10 to get ten percent ten percent extra discount on your paid subscription so now let's discuss this how to pass an array as an argument i hope you are clear with how to pass a single uh variable either its float or integer or character how to suppose let's take one uh one you know example suppose function is fun and i want to pass only one variable of it is a type so you can simply in declaration you can simply write down the data type in calling you can write down name of the function and here you can pass suppose a variable x or you can pass us into value also both are fine right you can take here in index is equal to 5 or you can pass x in main definition just you have to write in fun and here to receive this you will write data type and name of the variable i hope this is clear to you right but now how to pass but why we pass array see suppose in my class i have 60 students and i want to you know create a function to calculate average of marks of 60 students so i want to pass marks of 60 students in that function a function is like average and i want to pass what marks of 60 students so one method is what either you can pass what 60 variables individual variable is containing marks of one student that is also one way but obviously that is not a good place we are not going to going to pass a 60 values or 60 variables here so rather than this what to store marks of 60 students now same type of data to store same type of data what we use array right so rather than passing 60 variables so 60 values we can simply pass an array like suppose i i am taking in marks and size is 60. here we have 60 marks of 60 students so you can simply pass this array rather than just passing 60 variables or 60 values that is a good idea right so when you want to pass a list of values to a function then we use it right or this is also useful when you you know you want to pause pass a string in function right that is one great application of passing array as an argument that we will discuss in the next video how to pass a string as an argument like a complete name that is character and union the string is nothing but a character array your name is like j jenkins that is what character area or you can say string so how to pass that thing for that we need to pass area as an argument that is one great application of you know passing array so i hope this is clear why we pass carry as an argument now how you will pass array as an argument what you will write here right that we will discuss here with the complete program so let me just write down this program first of all we will declare this function i want to calculate what average of sixty six i'll not take 60 student marks i'll take only five values i'll take a simple example right so here i am taking suppose i am declaring that function int and function name is average return type is in so i want that it should return something right and in declaration what we can do hint that's it why i am writing this let me just show you that the declaration of this average function and here as an argument what i'm accepting i'm not expecting it would pass array this is what for array so here no need to write down the name of that variable whatever you pass so no need to write down the name of the array only you have to tell that this is should be of integer type and this would be array so that is why we are writing these subscript right this is simple declaration and in main in main what you will do i am taking what an array in marks right and i'm taking marks of five students only i'm not taking 60 students so these are marks of 50 students i'm taking in you can take float also it's up to you right now i want to pass these this array so how we will call this function avg name of the function and here what you will pass only the name of this array marks that's it that's it right name of the array nothing else you have to do here right now suppose in the definition what you will do i want that this this should return the average right so it will return some average so here i want to start that i want to you know store that value average in some variable right so i'm taking that variable name is average so before using it you have to declare it a v e r a g you can take it float obviously average would be in float that's up to you i'm just taking in but it should be flow right so it will we are going to accept here the average and just print printf average is percentage d and simply print vote average right now what is the definition how you will define data type name of the function and here what this array it will pass so here what you will write data type int name of the array you can take same name also suppose i am taking marks same name or you can take a b c and a different name also right so here that's it no need to specify the size here this you have to write as an argument when you will pass array as an argument then in definition this would be the case in declaration only write the sorry in function calling only pass the name of the array and this is what the declaration right now here have to calculate first of all sum will do some and then sum divide by total number of students right so here see we don't know how many students are there means we don't know the size of the setting so that also if you want to pass then how you will pass the size of the array see here simply you can write down here suppose you know the size is 5 so simply you can pass five or if you don't know you can calculate the size of the array right how to calculate the size that we will discuss when we do practical of this program right here i am writing only five right when we write down the code on my laptop then we will calculate the size and we will pass that size i'll will take that size in you know a variable name size and then we will pass that variable name here right so now hey 2 argument we are going to pass so here also what in declaration also what you will do one more this is what was obviously a simple variable you need to accept this 5. so here comma end suppose i am taking into a so here also two arguments one is array one is simple end right and semicolon here now how to do sum a for loop for i is equal to zero i less than i less than size of the array size of the arrays in a we have size of the array so i less than a right and i plus plus and here what you will do sum is equal to sum plus name of the array is marks only here marks i i hope you know the formula how to calculate some of the array that's it and after some just calculate what average average same variable name i'm taking here also same also fine here only or you can take different name right so average is equal to what sum divided by total number of student total number of student or you can say the size of arrays in a we have so divided by 5 and now return this thing right so now what you will write after this average i am writing here return average and that's it so now here we are using i sum and average so in this function you have to declare first of all these variables otherwise it will give it so you can declare in i you can declare sum is equal to 0 and you can also declare what you are taking average average also you can take zero three variables right three variables because we are using i'm returning average so it will return here and you can print average here so this is how you will pass array as an argument c now how the salary would be passed first of all when you will call this this thing then control will go here to the main function right so now instead instead memory would be allocated right suppose this is stack i'm taking this a stack right see whenever you run this this program will go into main memory like some coding for that thing memory would be located then for static or global variables then a stack memory then a heap memory right so now in stack what for main memory would be allocated right it's like one frame or it's like one activation record for this function would be l right so now this is for main main function and here we have in main we have what one variable average right we have add a what marks five so here we have some memory how much memory for this array would be allocated five size is five integer is taking four bytes so it means 20 bytes so i'm just drawing this hair 10 15 20 30 and 45 right and here we have what here i'm right taking this name of there is marks name of the array will act as a internal pointer it's a constant internal point and what it will have the base address of the series suppose base addresses hundred next element would be at one zero four one zero eight one one two and one one six integers of four by ten i'm i'm supposing integer is a four byte one thirty two bit and a sixty four bit machine right so now this base address is hundred so hundred would be here so it is acting as an internal pointer to this first element this is what a base address of this area right so marks will contain 100 this is the array this is how memory would be located now next line is this thing this is what calling of the function avg we are passing marks now see whenever you will write down the name of the array what you will think this function call so the control will go here so now this function also memory would be allocated to this function average right and here we have obviously this now you will think this is what another array which is here means these values would be copied 10 15 20 no 20 30 and 45 in this marks right or you can take different name also right so this complete value would be copied here and we have one more variable a in a what would be copied this 5 but this is not the mechanism behind this when you will pass array what it is going to pass the base address of the array so it will pass marks means name of the array in marks we have the base address of the array so it will pass only 100 the base address right so here it will act as this this will act as a pointer considered as a pointer what how the compiler will interpret this line something like this int asterisk marks means it's a pointer name of the pointer is marks and integer type pointer means it is pointing to an integer value i hope you got this not the complete values would be copied so here what would be copied we have one pointer marks and here we have hundred so this marks also pointing to here so this is example of we are passing address so this is example of call by reference not call by value so by default array would be passed this is very important point by call by value method note call by sorry call by reference method not call by value and obviously it's right because suppose array is having marks of 100 students or a list of values are 200 so when you will pass 200 values now now a separate copy would be created here and 200 value would be stored if you pass it call by value that is of no use wastage of memory here also 200 values here also 200 values and again if you call this function again it will be in memory and again 200 values copies would be stored so that is wasted of memory so that is why array would always be passed by call by reference note call by value this is very important point right so it will act as this thing it is not a complete array here it's not a duplicate array right but this is what this 5 we are passing this is what call by value this is what call by reference because this is l right so now here see i is equal to 0 here we have one more variable i that is 0 we have sum also we have average also so here we have sum and average here we have 0 0 in this one so now i hope you know that now the a value is 5 i value 0 i plus plus and sum would be there it will do first of all 0 plus marks of marks of i is 0 means marks of 0 means what it will access this value because obviously this is a pointer to this right so 0 plus 10 is what in sum we have first of all 10 then marks 1 means marks 1 means index is 0 1 2 3 4 means this value would be accessed then 10 plus 15 so this is how total would be done i hope you know the working of this four loop no need to i don't know define you no need to you know dry run this this for loop so i'm just writing down the sum of the array what would be the sum of this array here i think it it would be 120 right and after this for loop average is equal to sum by a sum is equal to 120 divided by a is 5 so 120 divided by 5 is what i think it's 24 so now it will return average average is 24 so now control will be here whatever it will return that will store in average that is 24 and we are going to print here 24. so i hope you got the working have you passed area as an argument and if you want to confirm that here it's not a complete array just a pointer so you can what you can do you can print here size here if you will print size of array using size sizeof operator what you can print a size of array name is just pass header name marks in printf if you will write then it will print here in main it will print 20 bytes because 5 is size 5 into 420 but here if you will write size of marks here in this function it will print 4 byte because it is a pointer it's not a complete array this this thing i'll show you practically so now let me show you practical of this let me just run this code and see what output you are getting so now let me create a file for this and what array as argument right so here what first of all we are declaring name i'm taking app avg right and here hint name is sorry it's just a declaration so no need to specify the name of the array that's it right and in main what we will do is simple take array marks and here i am taking uh sizes 5 and just i'm assigning here values 10 20 30 50 right simple values i am taking right and here i i will pass the size also so here we will calculate the size will not pass 5 only will calculate the size and then will pass so how to calculate size of the series means how many elements in area how to calculate that thing means if you calculate the size of air in bytes like the size is 20 bytes divided by size of a single value like a of 0 that is 20 divided by 4 that is 5 so there are 5 elements right i hope you are getting this method so here simply you can take what i am also taking one variable that is size right and here i am writing size is equal to size of this is the method just pass the name of the array and divide by size of size of his operator size of single value marks and 0 right semicolon so it will give 20 divided by 4 byte that is 5 and obviously in size we have 5 so there are 5 elements so you can pass this so now average is equal to i'm calling this function average how to call simply pass name of the array and second is size also i want to pass that is the variable name size right so now average obviously average also you have to declare before using it right and size we have declared right now and see yeah in calling we are passing two arguments so here also obviously in declaration also what you have to do one more way ah data type that is int right otherwise it will give error so now after returning just print printf average is equal to percentage d and slash n and simply print the name the variable name where you are storing this average right now what will be the definition name of the function is avg and here i'm taking name of the array is not marks you can take different name also you can take same name also suppose i am taking here name of that is marks one right and here one more hint size you can take same name also size and main size and hair also no need to worry so that that is it and here what now what you will do will take in i then sum and then average right and here you will do some just write down this i less than less than how many elements in array obviously less than size we are going to run and then i plus plus and here what you will do sum is equal to sum plus or you can say sum plus equal to error name is i'm taking here marks one marks one and here i right and after this average is equal to sum divided by size of array that how you calculate average and then return average so here in uh for loop we have semicolon right so now let's see and i know let's run this and see what output you will get okay now see it it was giving a garbage well in the previous case why sometimes it will take garbage value so better to initialize the sum is equal to zero average is equal to zero when you declare these otherwise it will it will take any garbage value and output also will give some garbage value so better to initialize with a zero so now this time it is giving average is 30 so now see here here if you print here in main function here i am printing the size after average i am printing what printf inside main size of array is and i'm i want to calculate size in bytes how many bytes right so percentage d and comma i just write down size of operator size off and pass the name of the array marks right same line what same size i want to print here in average also so before returning i'm pretty inside now it's inside avg function right inside avg function size of arrays in bytes size of i'm taking name of the array here marks one so size of marks one this new to take care right now let me run this and see what output you are getting just for formatting purpose i'm i know writing here slash and i'm putting a slash and here see average is 30 before this it is printing inside average function size of array is 4 only size of array is not 20 it's 4 only why because it is it's not an array copy of the array it's just a pointer marks 1 is just a pointer and pointer is what either four bytes or it depends on the machine right so four bytes or two bytes in 32bit machine it will take four byte but inside main function size of our is 20 bytes so now i hope you are getting we are not copying the complete array if you copy the complete array in both the function size of array will be 20 and 20 because in main also five elements we have in average function also five elements we have if you have a copy but here we in average we don't have copy it's called by reference it's only point that could be considered as pointer and pointer has having size four bytes right now it's just giving a warning like size of an average integer parameter marks one will return size of int star because it is acting in the compiler interpreted as a pointer and star as a pointer right so here if you will think like like that size rather than calculating size in the main function we simply calculate size in the average function and then we just do i less than equal to size no if you will calculate size here if you will write down the same line here in this average means it will take marks one size of max one would be four and size of marks you know this the single element also four four by four is one so size would be one only so this four would run only one time that is why we calculate size how many elements in array in main function and we pass that value right so that's it for this video now so i hope you got the concept if you have any doubt regarding this you can ask me in comment box right next video we'll see how to pass a string as an argument in adding so in the next video till then bye take care
