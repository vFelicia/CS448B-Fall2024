With timestamps:

00:00 - so in the series of learning programming
00:02 - in c we are discussing functions in c
00:03 - this video will discuss classification
00:05 - of functions basically four
00:06 - classification of function or you can
00:08 - say four categories of function
00:10 - let me write down those categories first
00:12 - so basically a function can be
00:14 - classified or you can say categorized
00:15 - into these four categories a function
00:17 - with no argument no return type a
00:20 - function with no argument
00:22 - with return type a function with
00:24 - argument but without return type or no
00:27 - return type and a function with argument
00:30 - and with return type any function you
00:32 - declare maybe in c programming language
00:35 - or in java or any programming language
00:37 - that
00:38 - that function must
00:39 - be must fall under one of these
00:42 - categories either this this this or this
00:44 - any function in any programming language
00:47 - right a function maybe if
00:49 - whenever you declare a function whenever
00:51 - you define a function maybe you define a
00:52 - function of this type or this type or
00:55 - this type of this type
00:57 - that must follow
00:59 - either one of these categories
01:01 - right so now first of all in this video
01:03 - we will discuss a function with no
01:05 - argument and
01:07 - no return time
01:08 - neither it will accept any argument nor
01:11 - it is going to return anything whenever
01:13 - you call that function right one by one
01:16 - we will discuss all the categories of
01:17 - function with proper program and i will
01:18 - show you practical also so first in this
01:20 - video we will discuss about
01:22 - this category of the function so here
01:25 - we are going to take the same example
01:26 - that we have discussed many times in the
01:28 - previous video like sum of two number
01:30 - that then you know you will get it
01:31 - better
01:33 - once you will get one program
01:35 - you can define once you will get you
01:36 - know one function how to declare a
01:38 - function after define and how to call a
01:39 - function
01:40 - no one one function of all the
01:42 - categories then you can you know write
01:44 - down your own functions right
01:47 - so
01:47 - suppose i am taking a same i know
01:50 - what is the general syntax of the
01:52 - function which is underlying which is
01:53 - you know lying in this category that is
01:55 - function name suppose i am taking fun
01:58 - no argument
02:00 - means we are not going to pass any
02:01 - argument so in the bracket nothing
02:04 - so don't leave it like this better to
02:07 - use the keyword void
02:09 - right why avoid that also we have
02:11 - discussed in the video when we were
02:12 - discussing introduction to function or
02:14 - in this video also i'll show you
02:15 - practically if you don't use this word
02:17 - keyword here in the bracket then what
02:19 - type of error or warning you will get
02:21 - right
02:22 - so
02:23 - if you are declaring a function so
02:25 - obviously at last you have semicolon and
02:26 - here we have return type but without
02:28 - return type the function is also having
02:30 - this function is not having any return
02:32 - type so means
02:34 - nothing means you can write down word
02:35 - word means nothing
02:37 - so this is simple declaration of the
02:38 - function
02:40 - and if you define this function same
02:42 - word
02:43 - fun
02:44 - here no need to write down void you can
02:46 - simply leave it like this right because
02:49 - first if you declare the function then
02:51 - we are defining the function in that
02:52 - case you can leave it like this and
02:53 - within this this is the function body
02:55 - you can write down the statement
02:56 - whatever you want to do in this function
02:59 - right and this function is not returning
03:02 - anything no return type so here we will
03:04 - not write any return statement because
03:06 - it is not going to return anything so
03:08 - you will not write down any return
03:09 - statement here
03:10 - right and simply if you want to call
03:12 - this function
03:14 - name of the function
03:16 - and here no argument we are going to
03:18 - pass because it is
03:20 - of no argument in this category right
03:23 - and in calling we don't write any return
03:26 - type so this is general syntax of
03:28 - calling the function which is under this
03:30 - category so now let me take that example
03:33 - of doing we will do sum of two numbers
03:35 - right or any example you can take
03:38 - it's up to you so how to declare that
03:40 - that function first void function name i
03:43 - am taking sum and here
03:44 - no argument means word i want to pass
03:47 - and then after that
03:49 - in main function what i'm calling the
03:51 - sum sum
03:55 - right
03:56 - that's it so now how you define this
03:58 - function word
03:59 - sum
04:01 - no parameter you will write here
04:04 - see whatever you pass here in the
04:05 - calling that are known as argument in
04:08 - the definition whatever you write here
04:09 - or in the declaration whatever you write
04:12 - here that are known as parameters right
04:15 - so now sum here simply write down the
04:16 - logic of doing sum so obviously for some
04:19 - suppose i want to do some two number so
04:21 - we have to declare two variable a b then
04:23 - one is
04:25 - sum
04:25 - [Music]
04:26 - and from user also you can ask like
04:28 - printf enter a and b or scanf percentage
04:31 - d percentage d at a software so b or
04:33 - here i am i'm
04:35 - initializing these variables here only b
04:37 - is equal to 7
04:38 - and sum is equal to 0
04:41 - so now sum is equal to a plus b
04:44 - and here only
04:46 - we are printing
04:48 - sum is equal to percentage d and
04:51 - sum
04:52 - that's it
04:54 - because it is not returning anything so
04:55 - here only we are going to print the sum
04:58 - so whenever you execute this thing
05:00 - control will go to the main function
05:01 - first and here see before main i am not
05:04 - writing any return time main is also a
05:06 - function user defined function because
05:09 - we write down here our own coding main
05:11 - main it's not predefined function right
05:13 - that could be a question of maybe your
05:15 - interview or why
05:16 - so by default the return type would be
05:19 - implicitly class is what it should it is
05:21 - it so if it is end so better to write
05:23 - down here return
05:26 - return statement or simply you can write
05:27 - down return right or if you
05:30 - write down the return type void means
05:33 - nothing it is going to return so no need
05:34 - to write down the return statement here
05:36 - so control will go first of all here now
05:39 - here this is your function call so
05:41 - whenever control will go to main some
05:43 - memory would be allocated to main but
05:44 - here we do we are not having any
05:46 - variable or anything right so first is
05:48 - function calling so control will go to
05:50 - the definition part where is the
05:51 - definition of this function here
05:53 - match the declaration with the
05:54 - definition return type same name is same
05:57 - and
05:58 - no argument we are passing no parameters
06:00 - are there here and here so that's it now
06:04 - for sum also some function also memory
06:07 - would be allocated right so in sum now
06:09 - we have
06:10 - a and b and three variables some so
06:13 - memory would be allocated to here then
06:15 - five b we have seven in some we have
06:17 - zero now sum is equal to a plus b in sum
06:19 - now we have 12
06:21 - and here i am printing printf sum is
06:22 - equal to so here what 12 would be
06:25 - printed
06:26 - so now control will will reach through
06:27 - the closing braces now this braces act
06:30 - as return
06:31 - avoid return so now control will go back
06:34 - to here where you are calling this
06:35 - function
06:37 - right and it is not returning anything
06:40 - so
06:40 - whenever it will return something here
06:42 - if you if it will return something so
06:44 - here also we have to declare some
06:46 - variable to accept
06:48 - that
06:49 - value
06:50 - that is what in next category we will
06:52 - discuss no argument but with return type
06:54 - in the next you know program we will
06:56 - discuss that thing so it is not
06:58 - returning anything so no need to write
06:59 - down here is equal to anything right
07:02 - that's it now next line is we are not
07:05 - writing anything in the main next so
07:07 - next control will go to the closing
07:08 - places this and that is what exit from
07:11 - the program
07:12 - right and once control will go out of
07:14 - the scope
07:15 - this memory would be vanished
07:18 - now control will go into the here main
07:20 - function and once control will reach
07:22 - here exit from the program and then this
07:24 - main is also vanished the memory
07:26 - allocated
07:27 - to the screen is also you know now freed
07:30 - so this is what simple you know example
07:32 - this is very simple this classification
07:34 - is very simple no argument and no return
07:37 - time
07:38 - so here main is what calling function
07:40 - and the sum is what cold function right
07:43 - because in main we are calling this
07:44 - function so main is calling function and
07:46 - sum is what cold function
07:48 - right so now one assignment for you is
07:50 - you have to write down a program where
07:53 - you will have four function sum
07:56 - subtraction multiply and divide
07:59 - and all the function what you will call
08:02 - in main function
08:04 - so you have to write down that program
08:05 - and you have to practice that program
08:07 - and this that function should write that
08:09 - should
08:10 - fall in this category no argument and no
08:12 - return type
08:14 - right so now let me
08:16 - show you practical of this thing so now
08:18 - let me create a file
08:20 - with
08:23 - no argument and no return type
08:28 - right
08:36 - here i am declaring that function no
08:38 - return type means void and i'm taking
08:40 - some function name and no argument means
08:43 - here also nothing means void
08:45 - so in main what
08:48 - i'm calling this function simply
08:51 - sum
08:52 - right
08:52 - and here what
08:55 - after when i am
08:57 - defining the function it's not necessary
08:59 - that you define the function always
09:01 - after you know after calling after main
09:03 - function
09:04 - before main also you can define your
09:05 - function that is also fine
09:07 - right
09:09 - so word mean but at least before calling
09:13 - before this calling of this function
09:14 - before using the function either you
09:16 - have make sure either you have declared
09:18 - that function or you have defined that
09:20 - function
09:21 - right to get rid of the you know some
09:23 - errors or some unusual behavior of your
09:25 - program right
09:27 - before using
09:28 - first either declare or define
09:30 - right if you define after this after
09:33 - using then you must declare first so
09:36 - here i am not passing any argument so
09:39 - here only i am taking in a
09:44 - i'm initializing these
09:45 - compile time nationalization also i am
09:47 - doing here you can also do run time
09:49 - initialization like using printf and
09:51 - scanf you can take values right and here
09:53 - i am doing sum is equal to a plus b
09:57 - and
09:59 - we are not returning anything so here
10:01 - only what
10:02 - if you have done some so obviously we
10:04 - want that that some should be printed on
10:06 - the output screen
10:07 - so it will not return anything right so
10:10 - here only what you will print the sum
10:13 - in this function
10:15 - right
10:16 - and that's it now let me run this code
10:21 - see sum is equal to 12 and
10:24 - if you don't write down here see if you
10:26 - we are not writing here void
10:28 - blank also means we don't want to pass
10:30 - anything but
10:31 - in this case if you pass the argument
10:33 - here in calling suppose i am passing
10:35 - five and
10:36 - four
10:38 - so now logically we want that it should
10:39 - give error because we don't want to pass
10:41 - any argument but here it
10:45 - give is
10:46 - it will give correct output
10:48 - see
10:50 - it will give sum is equal to 2xc it is
10:53 - giving some sum is equal to 12
10:55 - it is passing these arguments but here
10:57 - we are not having anything any parameter
10:59 - to receive those values so those values
11:02 - will be discarded automatically
11:04 - so it will not give any error but it
11:05 - will run so better
11:07 - don't leave the situation in dilemma if
11:09 - you are sure that you don't want to pass
11:11 - any argument while calling better to
11:13 - write down here this void keyword
11:15 - and now it will if you run this if you
11:17 - pass any argument it will give error
11:20 - like too many arguments in sum
11:24 - see
11:28 - see error is equal to too many arguments
11:30 - to function sum in line number seven in
11:32 - line number seven only we are calling so
11:34 - here on it is giving too many argument
11:36 - in function call
11:37 - right because we
11:40 - according to the declaration part
11:42 - we shouldn't pass any argument here
11:45 - right
11:46 - and if you don't declare the function
11:48 - here
11:50 - here if you are not declaring this
11:51 - function means
11:53 - we are calling this function
11:55 - and neither we are defining before
11:56 - calling neither we are declaring so what
11:58 - it will do it will do it will go to the
12:01 - function definition and there is no
12:02 - declaration because here it is going to
12:04 - match with the declaration so it will
12:06 - what it will do compiler will implicitly
12:08 - declare the function and it is
12:10 - implicitly means it it will assume that
12:12 - the return type of this function will be
12:14 - int by default
12:16 - right but here actually the the return
12:19 - type is wide
12:20 - so it will give some
12:21 - warning message c
12:25 - see it is giving correct output sum is
12:26 - equal to 12 but it is giving bonding
12:28 - message like implicit declaration of
12:30 - function sum
12:31 - and here in 11th line in 11th line here
12:35 - here we are calling this so here
12:37 - actually we are writing in definition
12:39 - return type is void but it is assuming
12:41 - that return return time of this function
12:42 - would be int so here also see it is
12:44 - giving warning message like conflicting
12:47 - types for some
12:49 - word and both are conflicting but it's
12:52 - not it is not returning anything so void
12:54 - means nothing so it will not give any
12:56 - error it will run but here if actually
12:59 - if you write down here rather than
13:04 - here i am using float sum
13:06 - and i'm not declaring here so now it
13:08 - will give error and it will not run
13:11 - like right see
13:13 - it is not running it is not giving any
13:15 - output and error is what conflicting
13:17 - types for sum
13:19 - assuming it is assuming that it should
13:21 - be the return type but actually return
13:22 - type is in definition it found out that
13:24 - return type is float so both are
13:27 - conflicting intent floats separate data
13:29 - types are there so that is why it is not
13:31 - going to run it it will give error in
13:33 - this case so better to declare function
13:35 - before using it first it's a good
13:37 - practice always
13:38 - you can skip this also
13:40 - you you just define the function before
13:42 - the scrolling
13:43 - and you skip this declaration part
13:46 - that is also fine but it's always a good
13:48 - practice to declare the function of the
13:50 - function declaration is also known as
13:51 - function prototype
13:53 - we are telling the compiler the
13:54 - prototype of the function like the
13:56 - return type the function name and the
13:57 - number of argument or the types of
13:59 - argument you can pass in that function
14:02 - right so i think that's it for this
14:04 - video now
14:05 - so this is one more assignment for you
14:07 - see this is the program declaration in a
14:10 - definition i'm writing
14:11 - hair void but in declaration i'm not
14:13 - writing word and i'm passing the
14:15 - argument five and four so you have to
14:17 - run this and you have to check what kind
14:19 - of error or warning or maybe correct
14:21 - output you are getting right so that's
14:24 - it for this video now so now in the next
14:25 - video we will see the next category of
14:27 - function no argument
14:29 - but with return types and i'll see in
14:31 - the next video till then bye take care

Cleaned transcript:

so in the series of learning programming in c we are discussing functions in c this video will discuss classification of functions basically four classification of function or you can say four categories of function let me write down those categories first so basically a function can be classified or you can say categorized into these four categories a function with no argument no return type a function with no argument with return type a function with argument but without return type or no return type and a function with argument and with return type any function you declare maybe in c programming language or in java or any programming language that that function must be must fall under one of these categories either this this this or this any function in any programming language right a function maybe if whenever you declare a function whenever you define a function maybe you define a function of this type or this type or this type of this type that must follow either one of these categories right so now first of all in this video we will discuss a function with no argument and no return time neither it will accept any argument nor it is going to return anything whenever you call that function right one by one we will discuss all the categories of function with proper program and i will show you practical also so first in this video we will discuss about this category of the function so here we are going to take the same example that we have discussed many times in the previous video like sum of two number that then you know you will get it better once you will get one program you can define once you will get you know one function how to declare a function after define and how to call a function no one one function of all the categories then you can you know write down your own functions right so suppose i am taking a same i know what is the general syntax of the function which is underlying which is you know lying in this category that is function name suppose i am taking fun no argument means we are not going to pass any argument so in the bracket nothing so don't leave it like this better to use the keyword void right why avoid that also we have discussed in the video when we were discussing introduction to function or in this video also i'll show you practically if you don't use this word keyword here in the bracket then what type of error or warning you will get right so if you are declaring a function so obviously at last you have semicolon and here we have return type but without return type the function is also having this function is not having any return type so means nothing means you can write down word word means nothing so this is simple declaration of the function and if you define this function same word fun here no need to write down void you can simply leave it like this right because first if you declare the function then we are defining the function in that case you can leave it like this and within this this is the function body you can write down the statement whatever you want to do in this function right and this function is not returning anything no return type so here we will not write any return statement because it is not going to return anything so you will not write down any return statement here right and simply if you want to call this function name of the function and here no argument we are going to pass because it is of no argument in this category right and in calling we don't write any return type so this is general syntax of calling the function which is under this category so now let me take that example of doing we will do sum of two numbers right or any example you can take it's up to you so how to declare that that function first void function name i am taking sum and here no argument means word i want to pass and then after that in main function what i'm calling the sum sum right that's it so now how you define this function word sum no parameter you will write here see whatever you pass here in the calling that are known as argument in the definition whatever you write here or in the declaration whatever you write here that are known as parameters right so now sum here simply write down the logic of doing sum so obviously for some suppose i want to do some two number so we have to declare two variable a b then one is sum and from user also you can ask like printf enter a and b or scanf percentage d percentage d at a software so b or here i am i'm initializing these variables here only b is equal to 7 and sum is equal to 0 so now sum is equal to a plus b and here only we are printing sum is equal to percentage d and sum that's it because it is not returning anything so here only we are going to print the sum so whenever you execute this thing control will go to the main function first and here see before main i am not writing any return time main is also a function user defined function because we write down here our own coding main main it's not predefined function right that could be a question of maybe your interview or why so by default the return type would be implicitly class is what it should it is it so if it is end so better to write down here return return statement or simply you can write down return right or if you write down the return type void means nothing it is going to return so no need to write down the return statement here so control will go first of all here now here this is your function call so whenever control will go to main some memory would be allocated to main but here we do we are not having any variable or anything right so first is function calling so control will go to the definition part where is the definition of this function here match the declaration with the definition return type same name is same and no argument we are passing no parameters are there here and here so that's it now for sum also some function also memory would be allocated right so in sum now we have a and b and three variables some so memory would be allocated to here then five b we have seven in some we have zero now sum is equal to a plus b in sum now we have 12 and here i am printing printf sum is equal to so here what 12 would be printed so now control will will reach through the closing braces now this braces act as return avoid return so now control will go back to here where you are calling this function right and it is not returning anything so whenever it will return something here if you if it will return something so here also we have to declare some variable to accept that value that is what in next category we will discuss no argument but with return type in the next you know program we will discuss that thing so it is not returning anything so no need to write down here is equal to anything right that's it now next line is we are not writing anything in the main next so next control will go to the closing places this and that is what exit from the program right and once control will go out of the scope this memory would be vanished now control will go into the here main function and once control will reach here exit from the program and then this main is also vanished the memory allocated to the screen is also you know now freed so this is what simple you know example this is very simple this classification is very simple no argument and no return time so here main is what calling function and the sum is what cold function right because in main we are calling this function so main is calling function and sum is what cold function right so now one assignment for you is you have to write down a program where you will have four function sum subtraction multiply and divide and all the function what you will call in main function so you have to write down that program and you have to practice that program and this that function should write that should fall in this category no argument and no return type right so now let me show you practical of this thing so now let me create a file with no argument and no return type right here i am declaring that function no return type means void and i'm taking some function name and no argument means here also nothing means void so in main what i'm calling this function simply sum right and here what after when i am defining the function it's not necessary that you define the function always after you know after calling after main function before main also you can define your function that is also fine right so word mean but at least before calling before this calling of this function before using the function either you have make sure either you have declared that function or you have defined that function right to get rid of the you know some errors or some unusual behavior of your program right before using first either declare or define right if you define after this after using then you must declare first so here i am not passing any argument so here only i am taking in a i'm initializing these compile time nationalization also i am doing here you can also do run time initialization like using printf and scanf you can take values right and here i am doing sum is equal to a plus b and we are not returning anything so here only what if you have done some so obviously we want that that some should be printed on the output screen so it will not return anything right so here only what you will print the sum in this function right and that's it now let me run this code see sum is equal to 12 and if you don't write down here see if you we are not writing here void blank also means we don't want to pass anything but in this case if you pass the argument here in calling suppose i am passing five and four so now logically we want that it should give error because we don't want to pass any argument but here it give is it will give correct output see it will give sum is equal to 2xc it is giving some sum is equal to 12 it is passing these arguments but here we are not having anything any parameter to receive those values so those values will be discarded automatically so it will not give any error but it will run so better don't leave the situation in dilemma if you are sure that you don't want to pass any argument while calling better to write down here this void keyword and now it will if you run this if you pass any argument it will give error like too many arguments in sum see see error is equal to too many arguments to function sum in line number seven in line number seven only we are calling so here on it is giving too many argument in function call right because we according to the declaration part we shouldn't pass any argument here right and if you don't declare the function here here if you are not declaring this function means we are calling this function and neither we are defining before calling neither we are declaring so what it will do it will do it will go to the function definition and there is no declaration because here it is going to match with the declaration so it will what it will do compiler will implicitly declare the function and it is implicitly means it it will assume that the return type of this function will be int by default right but here actually the the return type is wide so it will give some warning message c see it is giving correct output sum is equal to 12 but it is giving bonding message like implicit declaration of function sum and here in 11th line in 11th line here here we are calling this so here actually we are writing in definition return type is void but it is assuming that return return time of this function would be int so here also see it is giving warning message like conflicting types for some word and both are conflicting but it's not it is not returning anything so void means nothing so it will not give any error it will run but here if actually if you write down here rather than here i am using float sum and i'm not declaring here so now it will give error and it will not run like right see it is not running it is not giving any output and error is what conflicting types for sum assuming it is assuming that it should be the return type but actually return type is in definition it found out that return type is float so both are conflicting intent floats separate data types are there so that is why it is not going to run it it will give error in this case so better to declare function before using it first it's a good practice always you can skip this also you you just define the function before the scrolling and you skip this declaration part that is also fine but it's always a good practice to declare the function of the function declaration is also known as function prototype we are telling the compiler the prototype of the function like the return type the function name and the number of argument or the types of argument you can pass in that function right so i think that's it for this video now so this is one more assignment for you see this is the program declaration in a definition i'm writing hair void but in declaration i'm not writing word and i'm passing the argument five and four so you have to run this and you have to check what kind of error or warning or maybe correct output you are getting right so that's it for this video now so now in the next video we will see the next category of function no argument but with return types and i'll see in the next video till then bye take care
