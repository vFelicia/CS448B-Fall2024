With timestamps:

00:00 - so in the series of learning
00:02 - object-oriented programming in c plus in
00:05 - the previous video we have
00:06 - installed our vs code an id visual
00:09 - studio code the compiler we have
00:11 - configure visual studio code the
00:13 - compiler we have set path and all and we
00:15 - have also checked by running a simple
00:17 - program just to print hello world on the
00:19 - screen and yeah it was working so our
00:21 - laptop is all set now we can write down
00:24 - our programs and we can run c plus
00:26 - programs and we can run
00:27 - right now
00:30 - from the this from this video we are
00:31 - going to discuss like the theory thing
00:34 - as well as practical also right so the
00:37 - very first thing is what c plus
00:41 - is
00:41 - an object oriented programming language
00:44 - it's not purely object oriented but yeah
00:46 - it follows the object oriented
00:49 - programming those concept of oops so
00:52 - that is why it is object-oriented
00:54 - programming
00:55 - right
00:56 - but first of all before starting to see
00:58 - plus plus like basics of c plus plus let
01:01 - me just discuss what is object oriented
01:03 - programming what is this
01:06 - and
01:07 - see what we have discussed c language so
01:09 - now what c language programming language
01:11 - follows
01:12 - is it object-oriented programming or if
01:14 - not then what it is
01:17 - right
01:18 - processor oriented programming now what
01:20 - is this procedure oriented programming
01:22 - these are programming paradigms now what
01:24 - is this paradigm these things basic
01:27 - things we will discuss in this video
01:29 - will differentiate
01:30 - processor oriented programming and
01:33 - object oriented programming the main
01:34 - main difference we will see
01:36 - right
01:38 - so the basic detail will discuss about
01:40 - object-oriented programming right how
01:41 - this is different from pop the main
01:43 - reason
01:44 - right
01:45 - so
01:46 - this object oriented programming it is
01:49 - just a programming
01:51 - paradigm
01:52 - what is this programming paradigm
01:54 - paradigm means it's just
01:56 - a method to solve a particular problem
01:58 - right programming paradigm means
02:01 - it is just a way or you can say a style
02:04 - of programming of doing of writing
02:06 - programs which style you follow right
02:09 - it's just a method or a style of for
02:11 - programming that is simple paradigm
02:14 - there are different different paradigms
02:16 - right
02:17 - imperative functional parallel
02:20 - under imperative uh
02:23 - two types of paradigm comes like uh
02:26 - procedure oriented and object oriented
02:28 - right so different different paradigms
02:30 - are there basically main are
02:33 - processor oriented paradigm
02:36 - procedure oriented programming and
02:37 - object oriented programming these two
02:40 - right these two comes under imperative
02:44 - imperative programming paradigm these
02:46 - two comes under this category imperative
02:48 - programming paradigm pop and oop in
02:50 - which we more focus on how to do the
02:52 - tasks rather than what to do right
02:55 - now
02:56 - what is this procedure oriented
02:57 - programming
02:58 - as the name suggest processor oriented
03:02 - means procedure means how to do a
03:04 - particular task right the steps
03:07 - or in
03:08 - this this computer or programming
03:09 - language terms we can call that
03:11 - algorithm
03:12 - so this would be oriented this would
03:15 - revolve around the procedure
03:17 - right
03:18 - main focus is on the algorithm how to do
03:20 - the task rather than what to do
03:23 - fine and procedure we can say procedure
03:26 - or function
03:27 - right
03:28 - same thing
03:29 - so in this case c comes under this
03:32 - category
03:33 - right
03:35 - c fortran pascal these comes under
03:38 - ah this p op or indeed programming
03:41 - right now see
03:43 - in this case we first think
03:46 - the system or the large project
03:50 - then
03:51 - we divide right so you can say your
03:53 - program is divided your program
03:56 - is divided you can say in multiple
03:58 - functions
04:01 - function one function two function three
04:03 - multiple functions can be there
04:05 - right or something like this you can
04:07 - write
04:08 - we have this main
04:10 - and this would be divided in multiple
04:12 - functions like function one
04:17 - function two function three and these
04:19 - function can further be divided like
04:21 - function four function five something
04:23 - like this so program is divided into
04:26 - parts that are known as procedure or
04:29 - function right now
04:32 - these these functions are interdependent
04:35 - you can say
04:36 - these functions
04:38 - are having their local data also local
04:40 - data as well as they share global data
04:42 - something like this
04:44 - we have
04:45 - so here we have local data as well as
04:47 - global data these are three functions
04:49 - for example every function is having its
04:51 - own local data ld means local data and
04:53 - gde means global data and each and every
04:56 - function can share global data
04:59 - in this pop programming paradigm we have
05:02 - global data and more focus is on global
05:04 - data right every function share more and
05:06 - more global data
05:08 - now the problem here is what so
05:11 - data movement is more
05:14 - so data is less secure in this case
05:17 - this function can update this data
05:20 - right also this function can also update
05:22 - this data so data would be less secure
05:24 - something like this we have you have
05:26 - kept some money in the locker in your
05:28 - house and suppose each and every person
05:31 - in your house can access that locker
05:33 - like uh
05:34 - every person maybe it's your maid or the
05:38 - gardener or your driver every person in
05:40 - your house
05:41 - your house may be considered as a large
05:43 - program
05:44 - and each an individual is function
05:46 - something like this and each and every
05:47 - can access that locker so
05:50 - is money safe there no
05:53 - anyone can withdraw money anyone can
05:55 - take money from that thing
05:57 - suppose i have put ten thousand in there
05:59 - and another person took five thousand
06:01 - still i think that there are ten ten ten
06:04 - thousand rupees right but there are now
06:06 - five thousand rupees only
06:08 - and suppose i need eight thousand so i
06:10 - think that there are ten thousand rupees
06:12 - let me just take money
06:14 - but when i see that there are only five
06:16 - thousand rupees
06:17 - so the money is not secure same data is
06:20 - not secure in procedure oriented
06:23 - programming this is the
06:24 - main reason you can say
06:26 - why we switch to object oriented
06:29 - programming
06:30 - right
06:31 - because the data security the security
06:34 - the security of data is more in that
06:37 - case
06:37 - here we focus on the algorithm how to do
06:40 - the task rather than the data but in
06:43 - object
06:44 - oriented programming we focus on
06:46 - more on the data rather than
06:49 - how to do the task
06:52 - fine
06:54 - and in this case although suppose and
06:56 - see scalability it is not well suited
06:59 - for
07:00 - one thing in which we need more security
07:03 - second thing
07:04 - large and complex
07:06 - scalable applications
07:08 - the applications which require actively
07:11 - updated and maintenance
07:13 - this approach is not suitable for those
07:15 - things because there are
07:17 - interdependency more and more
07:19 - interdependency among these functions
07:21 - many functions are there
07:25 - right
07:27 - many functions are there
07:29 - calling each and every function
07:31 - something like this so
07:32 - see the interdependency of the code
07:35 - if you update in any one function
07:38 - this could lead to the updation in any
07:41 - other function
07:42 - also right if you want to add something
07:46 - some new
07:47 - feature some new function that is also
07:49 - very complex because of the
07:50 - interdependency code expectation we
07:54 - you know call it
07:56 - scalability is also not there right
07:58 - security is not there fine
08:01 - so now
08:02 - why in oops we have security see general
08:06 - structure of this object oriented
08:07 - programming is what
08:12 - this we do something like
08:15 - we have data
08:17 - and we have function
08:23 - these would
08:24 - be wrapped into a single unit
08:28 - there
08:29 - in pop we have function 1 suppose
08:32 - function 2 and we have a data a b c
08:35 - and this is a program
08:39 - something like this we divide this but
08:41 - here we do what
08:43 - we
08:44 - separate these things we separate these
08:46 - things
08:48 - right
08:49 - we wrap up these things
08:52 - the data to the function so this data
08:54 - would be you can say updated by this
08:56 - function only so less communication
08:58 - would be there
09:00 - what would be the general no you can say
09:02 - the structure data plus function here
09:05 - also we have data
09:07 - plus function
09:09 - something like this
09:12 - and
09:12 - we wrap up
09:14 - these things and this complete is known
09:16 - as
09:17 - object
09:18 - this is known as
09:20 - object suppose object one object two one
09:22 - more object is there object three
09:25 - right so see we have wrapped up these
09:28 - things so the data movement would be
09:32 - less
09:33 - in pop data moment was more freely data
09:36 - can move from one function to other
09:37 - another function
09:38 - here yeah object can communicate with
09:40 - each other with the help of
09:43 - message passing how it could be done
09:45 - that will also discuss in later video
09:47 - suppose we have another object also here
09:49 - object three so they can communicate
09:51 - with
09:52 - message passing so in object now what is
09:55 - this object see
09:57 - object is
09:58 - you can say a real world entity
10:01 - something like this this marker is an
10:02 - object
10:04 - this whiteboard duster camera my bottle
10:07 - table bed these are objects
10:11 - right
10:12 - we are also objects like suppose we want
10:14 - to
10:15 - why we do programming because
10:18 - we it's not like that we just want to
10:20 - write the simple simple program just to
10:21 - add two numbers print hello world uh
10:24 - check number is even reverse or string
10:26 - no
10:28 - these are basics we are you know we used
10:30 - to get us familiar with the programming
10:32 - concepts with these basic programs
10:34 - ultimately what we want to do obviously
10:36 - we want to solve some tasks some
10:39 - problems related to real world like we
10:42 - are creating software hospital
10:43 - management system library management
10:45 - system shopping cart
10:47 - some e-commerce websites are there
10:49 - amazon flipkart
10:52 - so they are being created
10:54 - behind that
10:55 - there is a complex code in any
10:58 - programming language
11:00 - and to create to solve these kind of
11:02 - problems
11:04 - processor oriented programming this
11:07 - is not suitable
11:08 - for the complex and large scale
11:11 - applications
11:12 - because the main reason what is the data
11:14 - security so that's why we move to object
11:17 - oriented programming now object is what
11:19 - real world entity a real world entity we
11:21 - can you know represent this real world
11:23 - entity in the form of programming and
11:25 - this is known as object
11:27 - right like for a shopping cart that
11:29 - website customer
11:31 - object shopping cart is a customer sorry
11:34 - an object
11:35 - and what objects can be there like a
11:38 - product so in short we can say
11:40 - objects you know corresponds to the
11:43 - things which
11:45 - found in real world
11:48 - right
11:50 - so it is close to the real world
11:52 - problems
11:54 - fine to solve real world problems to
11:57 - represent the data which is actually
11:59 - present in the real world
12:01 - we use this concept object oriented
12:04 - programming and each object is having
12:06 - its own data or you can say the state
12:09 - and behavior attribute behavior
12:13 - see
12:14 - suppose employer is a class
12:16 - so object can be
12:20 - ram sham jenny these are different
12:23 - different objects of that class
12:26 - so every object is having its own
12:28 - attribute like height color weight
12:31 - right and
12:33 - these are the you can see attributes or
12:35 - the data or the state of the object
12:37 - right which we represent in the form of
12:39 - variables
12:40 - and another thing is behavior of the
12:42 - object
12:44 - behavior can be like behavior like i can
12:46 - code
12:47 - i can sleep
12:49 - can sleep
12:51 - can e can code so these are
12:54 - we we represent the behavior in the form
12:57 - of functions method
12:59 - in a class
13:01 - right class is just a blueprint in
13:03 - detail we'll discuss what is class and
13:04 - object and everything the main part of
13:06 - this video is just to get you familiar
13:08 - with object oriented program and how it
13:09 - is different from pop so how data
13:11 - security comes here another feature is
13:13 - your data security here we have excess
13:15 - specifiers
13:20 - means private public protected
13:22 - if you want that the data any nobody can
13:25 - access that data you can keep that data
13:27 - private so your data is secure
13:30 - if you want that only few person can
13:32 - access that data you can keep it
13:34 - protected if you want that some data is
13:37 - it's no harm if anybody can access that
13:39 - data so you can keep that data public
13:42 - so we have access specifier concept in
13:44 - oop that is why data is secure one thing
13:47 - in this case you can see the program is
13:49 - divided into parts which are known as
13:51 - objects
13:52 - and each object is having its own
13:55 - attribute so you can say state and
13:57 - behavior right and object and
13:58 - communicate through
14:00 - message passing right
14:02 - and here the code you reusability is
14:04 - also there
14:05 - because of inheritance one concept oops
14:07 - concept is inheritance so because of
14:10 - that thing we can reuse the code
14:12 - so productivity would increase rather
14:14 - than writing that code again and again
14:16 - we can reuse
14:17 - the same code fine
14:20 - in detail we will see what is
14:21 - inheritance right so here more focus is
14:23 - on these objects
14:25 - or you can say the data
14:28 - because we focus in this more on data
14:30 - security so more focus is on data rather
14:33 - than the algorithm
14:35 - right rather than how to do so these are
14:38 - some you can say difference between you
14:40 - can write down pop and oop i hope you
14:43 - got the basic idea about
14:45 - this thing
14:47 - if you are if you are still confused
14:49 - don't worry if you don't know abcdo
14:52 - coding or the oops obviously at first
14:54 - time
14:55 - it would be very confusing for you guys
14:57 - right because we have just i have just
14:58 - told you the theory
15:00 - you have no you know practical in front
15:02 - of you
15:03 - but later one by one we will cover these
15:05 - thing in detail once you write down code
15:08 - then you will be familiar with these
15:09 - concepts right so now
15:13 - this is some basic about oop in detail
15:16 - we will see the
15:17 - four pillars of object-oriented
15:19 - programming that is abstraction
15:20 - encapsulation inheritance polymorphism
15:23 - and the main concept is classes and
15:25 - objects obviously without classes and
15:26 - objects we cannot write down a program
15:28 - so those things also we'll discuss later
15:30 - right so i'll see the next video till
15:32 - then bye take care

Cleaned transcript:

so in the series of learning objectoriented programming in c plus in the previous video we have installed our vs code an id visual studio code the compiler we have configure visual studio code the compiler we have set path and all and we have also checked by running a simple program just to print hello world on the screen and yeah it was working so our laptop is all set now we can write down our programs and we can run c plus programs and we can run right now from the this from this video we are going to discuss like the theory thing as well as practical also right so the very first thing is what c plus is an object oriented programming language it's not purely object oriented but yeah it follows the object oriented programming those concept of oops so that is why it is objectoriented programming right but first of all before starting to see plus plus like basics of c plus plus let me just discuss what is object oriented programming what is this and see what we have discussed c language so now what c language programming language follows is it objectoriented programming or if not then what it is right processor oriented programming now what is this procedure oriented programming these are programming paradigms now what is this paradigm these things basic things we will discuss in this video will differentiate processor oriented programming and object oriented programming the main main difference we will see right so the basic detail will discuss about objectoriented programming right how this is different from pop the main reason right so this object oriented programming it is just a programming paradigm what is this programming paradigm paradigm means it's just a method to solve a particular problem right programming paradigm means it is just a way or you can say a style of programming of doing of writing programs which style you follow right it's just a method or a style of for programming that is simple paradigm there are different different paradigms right imperative functional parallel under imperative uh two types of paradigm comes like uh procedure oriented and object oriented right so different different paradigms are there basically main are processor oriented paradigm procedure oriented programming and object oriented programming these two right these two comes under imperative imperative programming paradigm these two comes under this category imperative programming paradigm pop and oop in which we more focus on how to do the tasks rather than what to do right now what is this procedure oriented programming as the name suggest processor oriented means procedure means how to do a particular task right the steps or in this this computer or programming language terms we can call that algorithm so this would be oriented this would revolve around the procedure right main focus is on the algorithm how to do the task rather than what to do fine and procedure we can say procedure or function right same thing so in this case c comes under this category right c fortran pascal these comes under ah this p op or indeed programming right now see in this case we first think the system or the large project then we divide right so you can say your program is divided your program is divided you can say in multiple functions function one function two function three multiple functions can be there right or something like this you can write we have this main and this would be divided in multiple functions like function one function two function three and these function can further be divided like function four function five something like this so program is divided into parts that are known as procedure or function right now these these functions are interdependent you can say these functions are having their local data also local data as well as they share global data something like this we have so here we have local data as well as global data these are three functions for example every function is having its own local data ld means local data and gde means global data and each and every function can share global data in this pop programming paradigm we have global data and more focus is on global data right every function share more and more global data now the problem here is what so data movement is more so data is less secure in this case this function can update this data right also this function can also update this data so data would be less secure something like this we have you have kept some money in the locker in your house and suppose each and every person in your house can access that locker like uh every person maybe it's your maid or the gardener or your driver every person in your house your house may be considered as a large program and each an individual is function something like this and each and every can access that locker so is money safe there no anyone can withdraw money anyone can take money from that thing suppose i have put ten thousand in there and another person took five thousand still i think that there are ten ten ten thousand rupees right but there are now five thousand rupees only and suppose i need eight thousand so i think that there are ten thousand rupees let me just take money but when i see that there are only five thousand rupees so the money is not secure same data is not secure in procedure oriented programming this is the main reason you can say why we switch to object oriented programming right because the data security the security the security of data is more in that case here we focus on the algorithm how to do the task rather than the data but in object oriented programming we focus on more on the data rather than how to do the task fine and in this case although suppose and see scalability it is not well suited for one thing in which we need more security second thing large and complex scalable applications the applications which require actively updated and maintenance this approach is not suitable for those things because there are interdependency more and more interdependency among these functions many functions are there right many functions are there calling each and every function something like this so see the interdependency of the code if you update in any one function this could lead to the updation in any other function also right if you want to add something some new feature some new function that is also very complex because of the interdependency code expectation we you know call it scalability is also not there right security is not there fine so now why in oops we have security see general structure of this object oriented programming is what this we do something like we have data and we have function these would be wrapped into a single unit there in pop we have function 1 suppose function 2 and we have a data a b c and this is a program something like this we divide this but here we do what we separate these things we separate these things right we wrap up these things the data to the function so this data would be you can say updated by this function only so less communication would be there what would be the general no you can say the structure data plus function here also we have data plus function something like this and we wrap up these things and this complete is known as object this is known as object suppose object one object two one more object is there object three right so see we have wrapped up these things so the data movement would be less in pop data moment was more freely data can move from one function to other another function here yeah object can communicate with each other with the help of message passing how it could be done that will also discuss in later video suppose we have another object also here object three so they can communicate with message passing so in object now what is this object see object is you can say a real world entity something like this this marker is an object this whiteboard duster camera my bottle table bed these are objects right we are also objects like suppose we want to why we do programming because we it's not like that we just want to write the simple simple program just to add two numbers print hello world uh check number is even reverse or string no these are basics we are you know we used to get us familiar with the programming concepts with these basic programs ultimately what we want to do obviously we want to solve some tasks some problems related to real world like we are creating software hospital management system library management system shopping cart some ecommerce websites are there amazon flipkart so they are being created behind that there is a complex code in any programming language and to create to solve these kind of problems processor oriented programming this is not suitable for the complex and large scale applications because the main reason what is the data security so that's why we move to object oriented programming now object is what real world entity a real world entity we can you know represent this real world entity in the form of programming and this is known as object right like for a shopping cart that website customer object shopping cart is a customer sorry an object and what objects can be there like a product so in short we can say objects you know corresponds to the things which found in real world right so it is close to the real world problems fine to solve real world problems to represent the data which is actually present in the real world we use this concept object oriented programming and each object is having its own data or you can say the state and behavior attribute behavior see suppose employer is a class so object can be ram sham jenny these are different different objects of that class so every object is having its own attribute like height color weight right and these are the you can see attributes or the data or the state of the object right which we represent in the form of variables and another thing is behavior of the object behavior can be like behavior like i can code i can sleep can sleep can e can code so these are we we represent the behavior in the form of functions method in a class right class is just a blueprint in detail we'll discuss what is class and object and everything the main part of this video is just to get you familiar with object oriented program and how it is different from pop so how data security comes here another feature is your data security here we have excess specifiers means private public protected if you want that the data any nobody can access that data you can keep that data private so your data is secure if you want that only few person can access that data you can keep it protected if you want that some data is it's no harm if anybody can access that data so you can keep that data public so we have access specifier concept in oop that is why data is secure one thing in this case you can see the program is divided into parts which are known as objects and each object is having its own attribute so you can say state and behavior right and object and communicate through message passing right and here the code you reusability is also there because of inheritance one concept oops concept is inheritance so because of that thing we can reuse the code so productivity would increase rather than writing that code again and again we can reuse the same code fine in detail we will see what is inheritance right so here more focus is on these objects or you can say the data because we focus in this more on data security so more focus is on data rather than the algorithm right rather than how to do so these are some you can say difference between you can write down pop and oop i hope you got the basic idea about this thing if you are if you are still confused don't worry if you don't know abcdo coding or the oops obviously at first time it would be very confusing for you guys right because we have just i have just told you the theory you have no you know practical in front of you but later one by one we will cover these thing in detail once you write down code then you will be familiar with these concepts right so now this is some basic about oop in detail we will see the four pillars of objectoriented programming that is abstraction encapsulation inheritance polymorphism and the main concept is classes and objects obviously without classes and objects we cannot write down a program so those things also we'll discuss later right so i'll see the next video till then bye take care
