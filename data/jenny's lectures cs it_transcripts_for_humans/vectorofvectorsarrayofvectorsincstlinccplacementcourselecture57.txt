With timestamps:

00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language till now we
00:06 - have discussed what is Vector what is
00:09 - pair and what is Vector of pairs in STM
00:12 - in C++ right now the next topic is about
00:16 - nesting of vectors nesting means like uh
00:20 - Vector within Vector these kind of
00:22 - things right so here we have two things
00:25 - one is array of vectors and next is
00:28 - Vector of vectors so these two things
00:31 - are little bit confusing so we'll see
00:33 - both these things in uh this video only
00:36 - we'll differentiate these two things
00:38 - with the help of proper program I'll
00:39 - show you everything about what is array
00:42 - of vectors and what is Vector of vectors
00:45 - right and how to use these things right
00:48 - now before that I just want to tell you
00:50 - one thing if you are gate aspirant means
00:52 - you're preparing for gate 2025 or if you
00:55 - are planning to prepare for gate 2026
00:57 - then there is a great news for you guys
01:00 - from unacademy now you can get one year
01:03 - unacademy gate subscription at lowest
01:05 - price ever around uh rupes 12,000 and in
01:10 - just one subscription you will get
01:12 - access to all the batches uh test series
01:15 - as well as digital notes and the new
01:18 - batches for gate 2025 as well as for
01:21 - gate 2026 are going to start from 30th
01:25 - of April right and now gate es
01:28 - environmental science and gate
01:30 - instrument engineering is also available
01:32 - in an academy right but the sofware is
01:35 - valid till 27th of April right you have
01:38 - to take care this thing this lowest
01:41 - price offer right so if you are a gate
01:43 - aspirant then don't wait grab it now and
01:46 - just accelerate your gate preparation
01:48 - with unacademy and use my code Jenny to
01:50 - get this over so all the relevant links
01:52 - and details I'll put in the description
01:54 - box of this video you can go and check
01:55 - out okay so back to the topic now now
01:57 - first we'll see what is array of vectors
01:59 - I hope you know what is Vector what is
02:00 - array right array is what basically what
02:03 - is a collection of elements of same data
02:05 - type which are stored in continuous
02:07 - memory locations right and one thing is
02:09 - what main drawback of array is what
02:11 - arrays of fixed size like this if I
02:13 - declare int array name is a and five
02:18 - means here a is an array which can store
02:21 - only five elements of
02:23 - integer type right so AR R of having
02:27 - fixed size now Vector is what it's a
02:29 - dynamic array
02:30 - which can also store like same as array
02:33 - it can uh it store element of same data
02:35 - type right but it can increase
02:39 - automatically its size according to the
02:41 - requirement this is what Vector so we
02:43 - call Vector is a dynamic array vectors
02:47 - are not of fixed size right like this we
02:50 - can uh the synx of vector is we just
02:52 - write vector and here the data type int
02:55 - and Vector name that's it no need to
02:57 - give the size and all this is V Vector
03:01 - according to our requirement we can like
03:04 - uh put or push back or add as many
03:07 - number of elements as we want in Vector
03:10 - right you can check out the maximum size
03:12 - of a vector many elements like we can
03:14 - store here about vectors and arrays we
03:17 - have discussed in the previous videos
03:19 - and this playlist you can check out
03:20 - those videos first right now what is
03:22 - array of vectors just combine both the
03:25 - things array of vectors right see
03:30 - if I write something like this vector
03:33 - and suppose data type I'm taking int
03:35 - only this is what Vector but I want to
03:37 - take array of vectors if I want to take
03:39 - like uh array of integer means this is
03:43 - the thing array of five integer now I
03:46 - want to take array of five Vector in an
03:49 - array I want to store five Vector so the
03:52 - synx is almost same here this array name
03:56 - V and just you have to give size like
03:59 - five
04:00 - so this is what array of
04:06 - vectors if you write something like this
04:08 - means how you are going to uh find out
04:10 - what is this thing just start with this
04:14 - the variable name V and
04:16 - in spiral like in clockwise Direction
04:19 - you have to move something like this to
04:21 - find out what is this like here we have
04:23 - V if you move something like this since
04:25 - this is what in subscript you have five
04:27 - the size means array like so V is an
04:30 - array which can contain
04:33 - five vector vector of type integer so
04:37 - this is how you can find out what is
04:39 - this thing right I hope you got now why
04:42 - I'm calling this array of vector because
04:44 - syntax is almost same here array of five
04:47 - integer here array of five Vector right
04:50 - but what is this now array of vector how
04:51 - to if I you know uh visualize this thing
04:56 - then here like 0 1 2 3 4 five integer I
05:00 - can store like maybe 10 - 1 0 1 2 like
05:04 - this right index is 0 1 2 3 4 but now I
05:07 - want to store rather than single element
05:10 - I want to store in this array I want to
05:13 - store five
05:17 - vectors five vectors so this is name is
05:21 - V index the same 1 2 3 4 but here rather
05:25 - than individual elements now here we
05:26 - have a vector complete Vector within
05:29 - this this also complete Vector within
05:31 - this also a vector within this also a
05:33 - vector like this and we know Vector is a
05:35 - dynamic array I can store one element
05:37 - Two element three element or as many
05:39 - element I want right so how to visualize
05:42 - this thing how to visualize array of
05:44 - vectors see it is a 2d array something
05:49 - like this
05:52 - see see this is an array here first in
05:59 - zero both index 1 second third fourth
06:01 - and each index we have a vector complete
06:04 - Vector so at this index I have a vector
06:06 - of 0 1 2 3 size 4 at this I have a
06:12 - vector of size two Vector of size three
06:15 - size 4 size 1 2 3 4 5 6 6 so like this
06:20 - this is a 2d array this is how we are
06:22 - going to visualize I mean obviously in
06:25 - memory this is not going to store in
06:27 - this form only we are just visualizing
06:28 - this thing it is a 2D array right where
06:31 - number of rows are fixed and each row is
06:35 - a vector number of rows are fixed why
06:38 - because we have this is an array we have
06:41 - given the size that is five so number of
06:43 - rows are five only but each row is a
06:46 - vector so each row is
06:49 - having variable number of columns I mean
06:53 - as
06:54 - anything the number of columns can be
06:57 - anything but number of rows are fixed in
06:59 - array of factors I hope you are getting
07:01 - this point right so here we can say
07:05 - every index every index of this array
07:10 - stores a vector of variable length and
07:13 - we can access these elements of the
07:15 - vector using iterators yeah we can use
07:17 - iterators with vectors we have done this
07:19 - thing previous in previous videos right
07:23 - so number of rows are fixed but number
07:25 - of columns are you can say in 2D array
07:28 - uh can be any number of columns or can
07:30 - be variable right these are not fixed
07:32 - length having any number of length
07:34 - because these are this is Vector this is
07:36 - one vector second Vector third four five
07:38 - five Vector so this V is an array of
07:40 - size five which is having Vector of in
07:45 - inte iser Vector right so basic General
07:48 - syntax if you want to write then you can
07:50 - write down like something like this
07:51 - Vector here the data type here array
07:54 - name then in this subscript array size
07:58 - that is a simple syntax to cleared array
08:00 - of vectors right now let me show you
08:02 - this thing with the help of a program so
08:04 - let's create a new file here array of
08:08 - vectors and same include those header
08:11 - files we have a
08:15 - vector no not a vector we have an array
08:18 - of vectors so name I'm taking V only you
08:20 - can take AR r r x y z any name you can
08:22 - take right or array of vector name you
08:25 - can also take like something like this
08:27 - array of
08:31 - Vector like this but a simple name like
08:33 - V I'm taking so in subscript just uh
08:37 - give the size I'm taking
08:38 - three that's it right so here B is our
08:43 - array of vectors of size three I mean
08:47 - integer vectors right now how to put
08:50 - elements in this array of
08:53 - vectors this is an array within array
08:56 - every index of array is a vector right
08:59 - so I can simp can I simply write V Dot
09:01 - like push back and uh in bracket just
09:05 - put one no this would be wrong sorry
09:08 - it's
09:11 - dot
09:12 - see this expression must have class T
09:15 - but it has Type uh this vect and all
09:19 - because V is not a vector push back
09:22 - member function we can use with Vector
09:25 - right but I mean Vector object obviously
09:28 - but this V is not a vector now this is
09:29 - an array so with array we cannot use
09:32 - push back right within
09:35 - array like array is V so V of
09:39 - z v of Z is a vector right V of 1 is
09:44 - also a vector v of 2 is also a vector
09:47 - because at every index every element of
09:49 - the aray is a vector now V of Z is a
09:52 - vector so with v of Z I can use push
09:54 - back do push back one see here it is not
09:57 - giving any error right so write this one
10:00 - ways uh to insert element within this
10:04 - Vector is this thing right array
10:07 - of within VAR of vector so V of z v of 0
10:10 - Two element I just want to insert that's
10:12 - it now same because here we have now
10:14 - three vectors so V of 0 in V of 0 at
10:17 - first Vector I have inserted two values
10:20 - now second Vector is at V of 1 so there
10:22 - I can insert as many values I want using
10:24 - push back at a v of two I have third
10:27 - Vector there also you can insert as many
10:29 - value as you want right so let's insert
10:32 - so I have inserted one value in first
10:34 - Vector then you have one only sorry two
10:37 - value in Vector first Vector second
10:40 - Vector only one value and in third
10:42 - Vector I have inserted three values this
10:45 - is one way obviously this is not you
10:47 - know uh efficient way to insert values
10:50 - like this we can use four Loop but that
10:52 - also I'll show you now let's print these
10:55 - vectors so obviously it is a 2d array so
10:58 - for that to print one uh we need two
11:01 - Loops one is to trace the number of rows
11:03 - one is to handle the number of columns
11:05 - two Loops you are going to need so outer
11:07 - loop is for obviously number of rows so
11:10 - for simple I'm taking I equal to 0 and I
11:13 - less than outer loop I'm saying is for
11:17 - how many uh elements in there in that
11:19 - array size of array is three so outer
11:22 - loop will run till three so I should be
11:25 - less than three right and I ++
11:31 - now within
11:33 - this we
11:35 - have another loop also to print each
11:38 - Vector right
11:42 - so let's take another value another uh
11:45 - obviously variable to trace to print the
11:49 - each Vector J is equal to z and j should
11:52 - be less than they should be less
11:56 - than this is what I equal to at first
12:00 - zero means at first at zeroth index we
12:03 - have now at now we are at zeroth index
12:06 - in the array and within that array at
12:08 - zero index we have a complete
12:11 - Vector so for that to print that Vector
12:13 - I'm taking variable J so now at first J
12:16 - is zero so at first element of zero
12:21 - index of that Vector till we are going
12:24 - to move Vector size because we don't
12:27 - know what is the vector size because
12:28 - Vector are of Dynamic Vector Dynamic
12:30 - array right so how
12:33 - to how to put that termination condition
12:36 - less then till Vector size we have a
12:40 - function size we can use that thing but
12:41 - we cannot use V do size because V is not
12:44 - a vector v is actually a
12:45 - ARR V
12:48 - of I do
12:53 - size and then
12:56 - j++ I hope you got this obviously this
12:59 - is a function so you have to put these
13:02 - brackets
13:04 - right V of I means at first I zero so V
13:07 - of zero do
13:08 - size the vector at zero index then I is
13:11 - equal to 1 once I become one then V of I
13:14 - do size so right uh this is how we can
13:18 - print all the vectors within the
13:20 - array so now how to print in see out we
13:24 - use if you use subscript then first
13:28 - VY at which row we have V of zero Row V
13:33 - of zero means first element of the but
13:36 - that element is itself a vector so how
13:38 - to access the element of vector we have
13:40 - for that we have this variable G so V of
13:44 - I write down some space after every
13:48 - element
13:51 - right that's it and after printing every
13:54 - Vector I want a the next Vector should
13:57 - print in next line so
13:59 - after this with inner for Loop we just
14:03 - print C out e andl for a new line new
14:07 - line operator also you can put
14:10 - right I hope you got this synex or this
14:14 - logic let me run this and we'll show you
14:17 - what output you are
14:19 - getting so we have first Vector then we
14:22 - have 134 in next Vector we have only
14:25 - four and in third Vector we have three
14:27 - elements right
14:30 - so this is how we can print but rather
14:32 - than this push back push back one more
14:35 - method we
14:36 - have with for Loop also we can use so
14:39 - obviously it is a 2d array so you need
14:42 - obviously to in for taking input also
14:44 - you need two Loop right so
14:47 - first Loop should be I less than tell
14:51 - the size of the array three because for
14:53 - three rows I want to take input right I
14:57 - ++
14:59 - now within this now I want to take
15:01 - individual input as an uh individual
15:04 - Vector as an output but I don't know the
15:06 - size of
15:07 - vector right so how many element you
15:10 - want want in that particular Vector
15:11 - first obviously you will ask from the
15:13 - user so for that let's take uh a
15:16 - variable int and
15:19 - N
15:21 - right see
15:24 - out enter size of vector and which
15:27 - vector suppose enter size of vector 1
15:30 - enter size of Vector 2 Enter size of
15:32 - vector three three Vector are there
15:34 - because size is three right so how to
15:37 - print that I + 1 because I is zero at
15:40 - first so I + 1 is 1 so it will ask you
15:42 - enter size of vector
15:44 - 1 now C
15:47 - in and we have variable n like this we
15:50 - can take the size of this Vector so now
15:53 - inner for Loop will go till 0 to less
15:57 - than size of vector is n
15:59 - from user I'm taking that input and
16:02 - j++ now we take actual elements of that
16:05 - Vector from the user right so for that
16:08 - let's
16:09 - take let's take um variable in X and
16:14 - just I'm taking C in a variable a I'm
16:20 - taking C in a and v of I dot push back
16:29 - and here we take the variable we have
16:32 - taken a v v do push back we cannot write
16:36 - down because V is not a vector here V is
16:37 - an array of vectors and V of I at first
16:42 - I is zero so V of Z is a vector we know
16:44 - V of 1 is a vector v of2 is a vector
16:46 - because because this every element of a
16:48 - is a vector so V of I do push back is
16:50 - fine and whatever you will input that
16:52 - would be push back into that Vector now
16:56 - one way is this this is how we can take
16:57 - input let's run this
17:01 - Ander size of vector one suppose three
17:06 - so you now you have to enter three
17:07 - element 1 2 3 enter size of vector two
17:11 - suppose
17:12 - two 1 2 1 2 Enter size of vector 3 only
17:16 - one
17:17 - 45 see first Vector is 1 2 3 then 12 12
17:21 - then
17:22 - 45 right decorate a little bit after
17:26 - Vector one should print some space or uh
17:29 - this kind of thing and if in output also
17:31 - if you want to print like size of vector
17:33 - one size of Vector 2 size of vector 3
17:35 - then also we can
17:37 - print so before printing these actual
17:40 - values we can first print
17:43 - here the number of elements in that
17:46 - particular Vector so using C out number
17:49 - of elements in Vector in which vector
17:51 - vector one so I + 1 because I is zero R
17:55 - how many elements would be there
17:57 - whatever the size of that vector so V of
18:00 - I
18:02 - dot size
18:05 - semic after this obviously we
18:08 - want Vector should be printed in new
18:11 - line so e and DL let's run
18:22 - this see number of elements in Vector
18:24 - one are one only 23 in Vector 2 we have
18:27 - inserted three elements
18:29 - in Vector 3 we have inserted four
18:31 - elements so like this so this is how we
18:33 - can use array of vectors here number of
18:36 - rows are fixed right so now let's see
18:39 - what is Vector of vectors so now we are
18:41 - clear with array of vectors here we have
18:44 - fixed number of rows but number of
18:46 - columns can be anything but if you
18:50 - want if you don't want fixed number of
18:52 - rows you want that I can take as many
18:55 - number of rows as I want right so both
18:58 - number of rows and number of columns I
19:00 - want Dynamic variable not fixed in that
19:05 - case we use Vector of vectors now how to
19:09 - uh declare Vector of vectors see see
19:12 - this is an array of vectors but I don't
19:15 - want any array I just want a vector so
19:18 - no need to specify the
19:20 - size so this is a vector of type int
19:24 - right but I want Vector of vectors in
19:28 - this Vector I can store only integer
19:30 - value but I want in a vector I can store
19:32 - vectors so here data type you have to
19:35 - modify the data type should be
19:37 - Vector so vector and type in I'm taking
19:41 - int the data type is now Vector itself
19:45 - and the name p so this is what vector v
19:49 - of
19:51 - vectors right so here we have a vector
19:54 - of any length I don't know any number of
19:59 - uh elements we can store in this Vector
20:01 - because this is dynamic array but each
20:03 - element of this Vector is a
20:07 - vector right so it is a you can say 2D
20:12 - Vector number of rows are also not fixed
20:15 - number of columns are obviously not
20:17 - fixed right so like the 0 1 2 number of
20:20 - rows I can take as many number of rows
20:23 - as I want and within this number of rows
20:25 - also there are vectors of variable
20:28 - length
20:30 - right so it is also a 2d Vector right so
20:34 - each index of this Vector like V of V of
20:37 - 0 V of
20:39 - 1 each index of this Vector is a vector
20:42 - itself and we can access the element of
20:45 - vector we know simple for Loop also and
20:47 - we can use iterators as right same
20:50 - function we can apply here those push
20:52 - back pop back erase clear these
20:56 - functions right so let me show you this
20:59 - thing also with the help of uh program
21:01 - let's create a new file Vector of
21:03 - vectors and so now we will take a vector
21:07 - of vectors so the in this type name type
21:11 - name obviously we will take Vector only
21:14 - so Vector integer type and V so here V
21:19 - is a vector of vectors each element of
21:25 - this Vector is itself a vector right
21:29 - now directly how can you use we can use
21:30 - push back here V Dot push back can we
21:33 - use yes we can use because V is a vector
21:35 - here it's not an array we is a vector so
21:38 - we can use push back
21:40 - but now every element of this Vector is
21:43 - a vector so in push back we cannot
21:47 - simply write
21:48 - one this will give
21:50 - error right because it is expecting what
21:54 - a complete vector and one is simply a
21:57 - you know simple value I'm giving no a
22:00 - complete Vector so like this we can like
22:05 - uh 1 2 3 4 this is a complete Vector
22:08 - having only two values that is fine it
22:11 - will work
22:13 - right
22:15 - okay this is for this is qu quiz
22:18 - question for you guys if I insert
22:20 - something like
22:21 - this will it
22:23 - work yes obviously because we are taking
22:27 - this one now in the this Braes curly
22:31 - Braes so this is what a vector this is
22:34 - considered as a vector here because this
22:36 - is how we can give uh we can initialize
22:38 - or this initializer list for Vector
22:41 - right in curly bracket you can give one
22:43 - value that is fine but without curly
22:44 - bracket you can't give single value
22:46 - right this is also fine right so this is
22:49 - a complete Vector this is a complete
22:50 - vector and suppose we do push back one
22:53 - more Vector I going to insert
22:56 - here Min -1
23:01 - 67 so now we have three vectors within
23:06 - that Vector right so let me print these
23:10 - three vectors now so
23:15 - four now obviously we need two Loops one
23:19 - is two for the number of rows and one
23:21 - for number of columns but here number of
23:23 - rows are not fixed we don't know the
23:25 - size in previous case number of rows was
23:27 - three so we know the size so we have put
23:29 - here I less than three that is fine but
23:31 - here we don't know number of rows we
23:33 - don't know how many vectors are there
23:35 - within this Vector right so number of
23:38 - rows are also not fixed so we can simply
23:40 - use that which function dot
23:45 - size to calculate the size and I
23:50 - ++ now this is for number of rows now
23:53 - within rows we have each row is a vector
23:57 - itself so for that to X is the element
24:00 - of that Vector we need a for Loop so
24:03 - rather than simple variable this time
24:05 - I'm going to use um I'm using here
24:07 - iterator to access those Traverse to
24:09 - Traverse that Vector
24:12 - right so let's have a uh iterator it now
24:18 - V of I do
24:23 - begin
24:25 - right V of I do begin because now we are
24:30 - within that inside Vector inner Vector
24:33 - so V of I at first I Z so V of Z first
24:37 - element I'm accessing of that Vector
24:39 - outside vector v so V of 0 do begin it
24:43 - will point to the first element of that
24:47 - zeroth Vector right the the vector at
24:50 - zeroth element okay so we of Z do begin
24:55 - until I T should be less than
24:58 - V
25:00 - of or not less than it not equal to V of
25:04 - I do
25:08 - end and it ++ so these iterators concept
25:11 - we have uh already discussed in detail
25:14 - in previous videos you can check out
25:16 - those videos first so this is
25:20 - it equal
25:22 - to okay this end is also a function so
25:25 - obviously we use this bracket it should
25:29 - be uh not equal to
25:32 - sorry
25:34 - right now see
25:38 - out we
25:41 - just
25:45 - use estc it because it is now obviously
25:47 - it's iterated so it is you can say
25:49 - containing the location or the address
25:52 - of the element so how to dreference the
25:54 - pointer it's like a pointer so how to
25:56 - deference it using
25:59 - SRI right this SRI this will give
26:02 - whatever the value at that particular
26:04 - address
26:07 - right now after this same we use
26:15 - emdl so here we using this AO keyword I
26:19 - hope you're getting why I'm using this
26:20 - AO keyword because see we are using
26:23 - directly here do begin the iterator so
26:26 - it will automat automatically detect
26:27 - that yeah it is an iterator so it will
26:31 - automatically becomes an iterator that
26:32 - is why we are using this Auto keyword
26:35 - here right to detect automatically the
26:38 - type of whatever of the variable we are
26:41 - using here right now let's run this okay
26:46 - before this it should be I less than b
26:49 - do size right I was just checking you
26:52 - guys are attentive or not
26:54 - right uh so let's run this and see what
26:58 - output you are getting
27:00 - here see both the three vectors it is
27:02 - printing both the three vectors right
27:04 - now using iterator I have accessed
27:06 - elements now here also rather than
27:08 - simple variable we can use iterator here
27:10 - also right now same you can use push
27:13 - back uh sorry Pop back function so if
27:16 - you want to
27:17 - use do popb so it is going to remove the
27:21 - last
27:23 - element so we can say the last element
27:25 - means the last vector this was the last
27:29 - Vector to be inserted right and after
27:30 - pop back if you again
27:33 - print so just put like after pop
27:37 - back and before there were three vectors
27:40 - and after pop back we have only two
27:42 - vectors the last one was removed the
27:44 - latest one right same you can use your
27:46 - insert if you at specific position you
27:49 - want to insert a vector then you can use
27:51 - if from a specific position you want to
27:53 - delete something you can use erase
27:55 - function for insert what you need to do
27:58 - suppose uh after pop back at at this
28:02 - location after this first Vector I want
28:04 - to insert
28:05 - a uh Vector right so before pop back or
28:10 - to insert you need to give one the
28:13 - position where you want to insert as
28:14 - well as the value so position means
28:16 - obviously you give that position using
28:18 - iterator right so let's first
28:22 - create an
28:24 - iterator iterator of vector of vectors
28:29 - so this is the formula like I'm creating
28:34 - it and it is equal to V do begin at
28:38 - first I'm assigning
28:40 - this at at starting the it is pointing
28:43 - to V do begin beginning of the vector v
28:47 - and now V do insert I want to insert
28:50 - something so first at second position at
28:53 - like first index 0 1 so it + 1
28:59 - this will give the position as well as
29:01 - what value you want to insert only uh
29:05 - this Vector I want to insert at it + 1 I
29:07 - mean at first index I mean after this
29:11 - vector and before this Vector right
29:15 - so yeah that's
29:18 - done right and after that if you don't
29:22 - do any pop
29:23 - back and after insertion let's just
29:26 - print simply what whatever the vector is
29:29 - so let's run this and see what output
29:31 - will get here see first was these three
29:35 - vectors and after that these four
29:38 - vectors 5 6 7 8 this Vector has been
29:40 - inserted at the specified position right
29:43 - same you can use arrays here there also
29:45 - you need to give location I mean the
29:47 - address so there you will give obviously
29:49 - iterator right so just try out these
29:52 - different different functions whatever
29:54 - function member function you can use on
29:55 - Vector you can use on Vector of vector
29:57 - so this is your assignment you just try
29:58 - out all those member functions and if
30:01 - you're finding any uh you know if you're
30:03 - stuck somewhere you can just comment
30:05 - down here and we can make a separate
30:07 - video on this right so I hope difference
30:10 - between array of vectors and Vector of
30:12 - vectors is clear to you guys right in
30:14 - the next video we'll see some coding
30:15 - exercise based on uh these concept right
30:18 - so now I'll see you in the next video
30:20 - till then bye- bye take care

Cleaned transcript:

hey everyone I hope you all are safe and doing good so in the series of learning C++ programming language till now we have discussed what is Vector what is pair and what is Vector of pairs in STM in C++ right now the next topic is about nesting of vectors nesting means like uh Vector within Vector these kind of things right so here we have two things one is array of vectors and next is Vector of vectors so these two things are little bit confusing so we'll see both these things in uh this video only we'll differentiate these two things with the help of proper program I'll show you everything about what is array of vectors and what is Vector of vectors right and how to use these things right now before that I just want to tell you one thing if you are gate aspirant means you're preparing for gate 2025 or if you are planning to prepare for gate 2026 then there is a great news for you guys from unacademy now you can get one year unacademy gate subscription at lowest price ever around uh rupes 12,000 and in just one subscription you will get access to all the batches uh test series as well as digital notes and the new batches for gate 2025 as well as for gate 2026 are going to start from 30th of April right and now gate es environmental science and gate instrument engineering is also available in an academy right but the sofware is valid till 27th of April right you have to take care this thing this lowest price offer right so if you are a gate aspirant then don't wait grab it now and just accelerate your gate preparation with unacademy and use my code Jenny to get this over so all the relevant links and details I'll put in the description box of this video you can go and check out okay so back to the topic now now first we'll see what is array of vectors I hope you know what is Vector what is array right array is what basically what is a collection of elements of same data type which are stored in continuous memory locations right and one thing is what main drawback of array is what arrays of fixed size like this if I declare int array name is a and five means here a is an array which can store only five elements of integer type right so AR R of having fixed size now Vector is what it's a dynamic array which can also store like same as array it can uh it store element of same data type right but it can increase automatically its size according to the requirement this is what Vector so we call Vector is a dynamic array vectors are not of fixed size right like this we can uh the synx of vector is we just write vector and here the data type int and Vector name that's it no need to give the size and all this is V Vector according to our requirement we can like uh put or push back or add as many number of elements as we want in Vector right you can check out the maximum size of a vector many elements like we can store here about vectors and arrays we have discussed in the previous videos and this playlist you can check out those videos first right now what is array of vectors just combine both the things array of vectors right see if I write something like this vector and suppose data type I'm taking int only this is what Vector but I want to take array of vectors if I want to take like uh array of integer means this is the thing array of five integer now I want to take array of five Vector in an array I want to store five Vector so the synx is almost same here this array name V and just you have to give size like five so this is what array of vectors if you write something like this means how you are going to uh find out what is this thing just start with this the variable name V and in spiral like in clockwise Direction you have to move something like this to find out what is this like here we have V if you move something like this since this is what in subscript you have five the size means array like so V is an array which can contain five vector vector of type integer so this is how you can find out what is this thing right I hope you got now why I'm calling this array of vector because syntax is almost same here array of five integer here array of five Vector right but what is this now array of vector how to if I you know uh visualize this thing then here like 0 1 2 3 4 five integer I can store like maybe 10 1 0 1 2 like this right index is 0 1 2 3 4 but now I want to store rather than single element I want to store in this array I want to store five vectors five vectors so this is name is V index the same 1 2 3 4 but here rather than individual elements now here we have a vector complete Vector within this this also complete Vector within this also a vector within this also a vector like this and we know Vector is a dynamic array I can store one element Two element three element or as many element I want right so how to visualize this thing how to visualize array of vectors see it is a 2d array something like this see see this is an array here first in zero both index 1 second third fourth and each index we have a vector complete Vector so at this index I have a vector of 0 1 2 3 size 4 at this I have a vector of size two Vector of size three size 4 size 1 2 3 4 5 6 6 so like this this is a 2d array this is how we are going to visualize I mean obviously in memory this is not going to store in this form only we are just visualizing this thing it is a 2D array right where number of rows are fixed and each row is a vector number of rows are fixed why because we have this is an array we have given the size that is five so number of rows are five only but each row is a vector so each row is having variable number of columns I mean as anything the number of columns can be anything but number of rows are fixed in array of factors I hope you are getting this point right so here we can say every index every index of this array stores a vector of variable length and we can access these elements of the vector using iterators yeah we can use iterators with vectors we have done this thing previous in previous videos right so number of rows are fixed but number of columns are you can say in 2D array uh can be any number of columns or can be variable right these are not fixed length having any number of length because these are this is Vector this is one vector second Vector third four five five Vector so this V is an array of size five which is having Vector of in inte iser Vector right so basic General syntax if you want to write then you can write down like something like this Vector here the data type here array name then in this subscript array size that is a simple syntax to cleared array of vectors right now let me show you this thing with the help of a program so let's create a new file here array of vectors and same include those header files we have a vector no not a vector we have an array of vectors so name I'm taking V only you can take AR r r x y z any name you can take right or array of vector name you can also take like something like this array of Vector like this but a simple name like V I'm taking so in subscript just uh give the size I'm taking three that's it right so here B is our array of vectors of size three I mean integer vectors right now how to put elements in this array of vectors this is an array within array every index of array is a vector right so I can simp can I simply write V Dot like push back and uh in bracket just put one no this would be wrong sorry it's dot see this expression must have class T but it has Type uh this vect and all because V is not a vector push back member function we can use with Vector right but I mean Vector object obviously but this V is not a vector now this is an array so with array we cannot use push back right within array like array is V so V of z v of Z is a vector right V of 1 is also a vector v of 2 is also a vector because at every index every element of the aray is a vector now V of Z is a vector so with v of Z I can use push back do push back one see here it is not giving any error right so write this one ways uh to insert element within this Vector is this thing right array of within VAR of vector so V of z v of 0 Two element I just want to insert that's it now same because here we have now three vectors so V of 0 in V of 0 at first Vector I have inserted two values now second Vector is at V of 1 so there I can insert as many values I want using push back at a v of two I have third Vector there also you can insert as many value as you want right so let's insert so I have inserted one value in first Vector then you have one only sorry two value in Vector first Vector second Vector only one value and in third Vector I have inserted three values this is one way obviously this is not you know uh efficient way to insert values like this we can use four Loop but that also I'll show you now let's print these vectors so obviously it is a 2d array so for that to print one uh we need two Loops one is to trace the number of rows one is to handle the number of columns two Loops you are going to need so outer loop is for obviously number of rows so for simple I'm taking I equal to 0 and I less than outer loop I'm saying is for how many uh elements in there in that array size of array is three so outer loop will run till three so I should be less than three right and I ++ now within this we have another loop also to print each Vector right so let's take another value another uh obviously variable to trace to print the each Vector J is equal to z and j should be less than they should be less than this is what I equal to at first zero means at first at zeroth index we have now at now we are at zeroth index in the array and within that array at zero index we have a complete Vector so for that to print that Vector I'm taking variable J so now at first J is zero so at first element of zero index of that Vector till we are going to move Vector size because we don't know what is the vector size because Vector are of Dynamic Vector Dynamic array right so how to how to put that termination condition less then till Vector size we have a function size we can use that thing but we cannot use V do size because V is not a vector v is actually a ARR V of I do size and then j++ I hope you got this obviously this is a function so you have to put these brackets right V of I means at first I zero so V of zero do size the vector at zero index then I is equal to 1 once I become one then V of I do size so right uh this is how we can print all the vectors within the array so now how to print in see out we use if you use subscript then first VY at which row we have V of zero Row V of zero means first element of the but that element is itself a vector so how to access the element of vector we have for that we have this variable G so V of I write down some space after every element right that's it and after printing every Vector I want a the next Vector should print in next line so after this with inner for Loop we just print C out e andl for a new line new line operator also you can put right I hope you got this synex or this logic let me run this and we'll show you what output you are getting so we have first Vector then we have 134 in next Vector we have only four and in third Vector we have three elements right so this is how we can print but rather than this push back push back one more method we have with for Loop also we can use so obviously it is a 2d array so you need obviously to in for taking input also you need two Loop right so first Loop should be I less than tell the size of the array three because for three rows I want to take input right I ++ now within this now I want to take individual input as an uh individual Vector as an output but I don't know the size of vector right so how many element you want want in that particular Vector first obviously you will ask from the user so for that let's take uh a variable int and N right see out enter size of vector and which vector suppose enter size of vector 1 enter size of Vector 2 Enter size of vector three three Vector are there because size is three right so how to print that I + 1 because I is zero at first so I + 1 is 1 so it will ask you enter size of vector 1 now C in and we have variable n like this we can take the size of this Vector so now inner for Loop will go till 0 to less than size of vector is n from user I'm taking that input and j++ now we take actual elements of that Vector from the user right so for that let's take let's take um variable in X and just I'm taking C in a variable a I'm taking C in a and v of I dot push back and here we take the variable we have taken a v v do push back we cannot write down because V is not a vector here V is an array of vectors and V of I at first I is zero so V of Z is a vector we know V of 1 is a vector v of2 is a vector because because this every element of a is a vector so V of I do push back is fine and whatever you will input that would be push back into that Vector now one way is this this is how we can take input let's run this Ander size of vector one suppose three so you now you have to enter three element 1 2 3 enter size of vector two suppose two 1 2 1 2 Enter size of vector 3 only one 45 see first Vector is 1 2 3 then 12 12 then 45 right decorate a little bit after Vector one should print some space or uh this kind of thing and if in output also if you want to print like size of vector one size of Vector 2 size of vector 3 then also we can print so before printing these actual values we can first print here the number of elements in that particular Vector so using C out number of elements in Vector in which vector vector one so I + 1 because I is zero R how many elements would be there whatever the size of that vector so V of I dot size semic after this obviously we want Vector should be printed in new line so e and DL let's run this see number of elements in Vector one are one only 23 in Vector 2 we have inserted three elements in Vector 3 we have inserted four elements so like this so this is how we can use array of vectors here number of rows are fixed right so now let's see what is Vector of vectors so now we are clear with array of vectors here we have fixed number of rows but number of columns can be anything but if you want if you don't want fixed number of rows you want that I can take as many number of rows as I want right so both number of rows and number of columns I want Dynamic variable not fixed in that case we use Vector of vectors now how to uh declare Vector of vectors see see this is an array of vectors but I don't want any array I just want a vector so no need to specify the size so this is a vector of type int right but I want Vector of vectors in this Vector I can store only integer value but I want in a vector I can store vectors so here data type you have to modify the data type should be Vector so vector and type in I'm taking int the data type is now Vector itself and the name p so this is what vector v of vectors right so here we have a vector of any length I don't know any number of uh elements we can store in this Vector because this is dynamic array but each element of this Vector is a vector right so it is a you can say 2D Vector number of rows are also not fixed number of columns are obviously not fixed right so like the 0 1 2 number of rows I can take as many number of rows as I want and within this number of rows also there are vectors of variable length right so it is also a 2d Vector right so each index of this Vector like V of V of 0 V of 1 each index of this Vector is a vector itself and we can access the element of vector we know simple for Loop also and we can use iterators as right same function we can apply here those push back pop back erase clear these functions right so let me show you this thing also with the help of uh program let's create a new file Vector of vectors and so now we will take a vector of vectors so the in this type name type name obviously we will take Vector only so Vector integer type and V so here V is a vector of vectors each element of this Vector is itself a vector right now directly how can you use we can use push back here V Dot push back can we use yes we can use because V is a vector here it's not an array we is a vector so we can use push back but now every element of this Vector is a vector so in push back we cannot simply write one this will give error right because it is expecting what a complete vector and one is simply a you know simple value I'm giving no a complete Vector so like this we can like uh 1 2 3 4 this is a complete Vector having only two values that is fine it will work right okay this is for this is qu quiz question for you guys if I insert something like this will it work yes obviously because we are taking this one now in the this Braes curly Braes so this is what a vector this is considered as a vector here because this is how we can give uh we can initialize or this initializer list for Vector right in curly bracket you can give one value that is fine but without curly bracket you can't give single value right this is also fine right so this is a complete Vector this is a complete vector and suppose we do push back one more Vector I going to insert here Min 1 67 so now we have three vectors within that Vector right so let me print these three vectors now so four now obviously we need two Loops one is two for the number of rows and one for number of columns but here number of rows are not fixed we don't know the size in previous case number of rows was three so we know the size so we have put here I less than three that is fine but here we don't know number of rows we don't know how many vectors are there within this Vector right so number of rows are also not fixed so we can simply use that which function dot size to calculate the size and I ++ now this is for number of rows now within rows we have each row is a vector itself so for that to X is the element of that Vector we need a for Loop so rather than simple variable this time I'm going to use um I'm using here iterator to access those Traverse to Traverse that Vector right so let's have a uh iterator it now V of I do begin right V of I do begin because now we are within that inside Vector inner Vector so V of I at first I Z so V of Z first element I'm accessing of that Vector outside vector v so V of 0 do begin it will point to the first element of that zeroth Vector right the the vector at zeroth element okay so we of Z do begin until I T should be less than V of or not less than it not equal to V of I do end and it ++ so these iterators concept we have uh already discussed in detail in previous videos you can check out those videos first so this is it equal to okay this end is also a function so obviously we use this bracket it should be uh not equal to sorry right now see out we just use estc it because it is now obviously it's iterated so it is you can say containing the location or the address of the element so how to dreference the pointer it's like a pointer so how to deference it using SRI right this SRI this will give whatever the value at that particular address right now after this same we use emdl so here we using this AO keyword I hope you're getting why I'm using this AO keyword because see we are using directly here do begin the iterator so it will automat automatically detect that yeah it is an iterator so it will automatically becomes an iterator that is why we are using this Auto keyword here right to detect automatically the type of whatever of the variable we are using here right now let's run this okay before this it should be I less than b do size right I was just checking you guys are attentive or not right uh so let's run this and see what output you are getting here see both the three vectors it is printing both the three vectors right now using iterator I have accessed elements now here also rather than simple variable we can use iterator here also right now same you can use push back uh sorry Pop back function so if you want to use do popb so it is going to remove the last element so we can say the last element means the last vector this was the last Vector to be inserted right and after pop back if you again print so just put like after pop back and before there were three vectors and after pop back we have only two vectors the last one was removed the latest one right same you can use your insert if you at specific position you want to insert a vector then you can use if from a specific position you want to delete something you can use erase function for insert what you need to do suppose uh after pop back at at this location after this first Vector I want to insert a uh Vector right so before pop back or to insert you need to give one the position where you want to insert as well as the value so position means obviously you give that position using iterator right so let's first create an iterator iterator of vector of vectors so this is the formula like I'm creating it and it is equal to V do begin at first I'm assigning this at at starting the it is pointing to V do begin beginning of the vector v and now V do insert I want to insert something so first at second position at like first index 0 1 so it + 1 this will give the position as well as what value you want to insert only uh this Vector I want to insert at it + 1 I mean at first index I mean after this vector and before this Vector right so yeah that's done right and after that if you don't do any pop back and after insertion let's just print simply what whatever the vector is so let's run this and see what output will get here see first was these three vectors and after that these four vectors 5 6 7 8 this Vector has been inserted at the specified position right same you can use arrays here there also you need to give location I mean the address so there you will give obviously iterator right so just try out these different different functions whatever function member function you can use on Vector you can use on Vector of vector so this is your assignment you just try out all those member functions and if you're finding any uh you know if you're stuck somewhere you can just comment down here and we can make a separate video on this right so I hope difference between array of vectors and Vector of vectors is clear to you guys right in the next video we'll see some coding exercise based on uh these concept right so now I'll see you in the next video till then bye bye take care
