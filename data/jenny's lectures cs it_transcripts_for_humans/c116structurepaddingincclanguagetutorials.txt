With timestamps:

00:00 - so in the series of learning c
00:01 - programming we are discussing structures
00:03 - in c in the previous video we have
00:04 - discussed
00:05 - type defined structure like how to use
00:07 - that type def keyword in structures
00:09 - right in this video we will see what is
00:11 - structure padding because we are left
00:13 - with two small topics in structure that
00:14 - is structural padding and structure
00:16 - packing many students i guess didn't
00:18 - know what is structure padding or they
00:20 - didn't even hear about this word
00:22 - structure padding and structure packing
00:24 - but yeah it's there in structures right
00:26 - these are small topics and the sometimes
00:29 - interviewer asked these kind of
00:30 - questions so in gate and net also you
00:32 - get these kind of questions right based
00:35 - on structure padding so we'll discuss
00:36 - everything about structure padding what
00:38 - is uh what is this structure padding why
00:40 - we need this right with
00:43 - examples
00:44 - right but before they just want to tell
00:46 - you one thing if you guys are preparing
00:48 - for gate examination or will be
00:50 - preparing for gate 2023 examination
00:52 - then an academy is going to start a new
00:55 - batch from 8th of december
00:57 - rohan for gate 2023 in this course their
01:00 - top educators will be covering all the
01:02 - subjects of cs and it that will help you
01:05 - to prepare in your gate examination so
01:07 - in this course you will get a detailed
01:09 - explanation of all the concepts of all
01:11 - the subjects and apart from these some
01:13 - special classes
01:14 - like preparation strategy some tips and
01:16 - tricks shortcuts practice questions
01:20 - numericals so these kind of classes
01:22 - would really be helpful for you guys
01:24 - and they'll cover the sports in both
01:26 - hindi and english and notes should be
01:27 - given to you in english only
01:30 - apart from this doubt clearing sessions
01:32 - should also be conducted in this course
01:34 - so if you have any doubt you can get
01:36 - your all your doubt you know cleared in
01:38 - those doubt clearing sessions
01:41 - and this would be paid because you will
01:43 - get complete and structured course but
01:45 - if you will use my code jkl 10 you will
01:47 - get extra 10 percent discount on your
01:49 - paid subscription
01:51 - and one good point about these classes
01:52 - are what you can talk to your favorite
01:55 - educator in the live classes and you can
01:56 - clear your doubts
01:59 - so i guess this is a must-have
02:00 - subscription for those who want to clear
02:02 - gate 2023 examination with the with some
02:05 - good marks
02:07 - so the relevant link and all the details
02:09 - i'll put in the description box of this
02:11 - video if you are interested you can go
02:13 - and check out the link
02:15 - so now let's see
02:16 - what is structure padding and see first
02:18 - of all we'll see one example like simple
02:20 - example i'm going to take
02:23 - see this is what
02:25 - i'm taking i'm defining a structure abc
02:27 - i'm taking only two members care a and
02:30 - into b and i'm declaring a variable s so
02:32 - if
02:33 - i ask what is the size of this how much
02:35 - memory would be allocated to this member
02:38 - sorry to this variable
02:40 - not members
02:41 - once you declare the variable then only
02:43 - memory would be allocated to these
02:44 - members how much memory maybe simply
02:47 - will say for one byte
02:49 - one bite for care and four bytes for in
02:51 - let's suppose care is going to be one
02:53 - bite and it is going to take four bytes
02:55 - float also four bytes doubles eight
02:57 - double eight byte long eight byte like
02:59 - this so one plus four that is five byte
03:02 - you will say five byte but no that is
03:04 - wrong
03:05 - why
03:07 - how the memory would be allocated
03:08 - because of the alignment the data
03:10 - alignment
03:11 - see
03:12 - how these members would be
03:14 - allocated some memory
03:16 - see here we have
03:20 - suppose this is a one byte for this
03:22 - address is hundred and one zero one so
03:25 - this is one byte for the square maybe
03:27 - you will say
03:29 - next one two three four these four bytes
03:32 - would be for
03:35 - int and five bytes
03:37 - no
03:38 - why so
03:39 - we can see
03:41 - memory is
03:42 - not bite advisable nowadays it is word
03:45 - addressable now what does that mean
03:47 - word addressable
03:49 - means
03:50 - in one cpu cycle at one time the
03:53 - processor can fetch one complete word
03:56 - from the memory
03:57 - and what is this word
03:59 - how many bytes this word will have in 32
04:02 - bit
04:03 - machine on 32 bit machine word size is 4
04:06 - byte
04:07 - and if your machine your processor is 64
04:09 - bit then word size is 8 byte
04:13 - processor can access 4 byte at one time
04:17 - if it is 32 bit if 64 bit then processor
04:20 - can access eight byte from the memory at
04:22 - one time
04:24 - in one cpu cycle you can access eight
04:26 - byte here you can access four byte
04:28 - right this is the case and see
04:31 - historically processors these were byte
04:34 - addressable means processor at one time
04:36 - can access only one byte then one byte
04:37 - then one byte then one byte like this
04:40 - right but here problem is what
04:42 - see int is taking four byte suppose this
04:45 - end is taking four byte one two three
04:47 - four and if
04:49 - processor is byte addressable
04:51 - then how many cycles how many times
04:55 - the processor have to you know
04:57 - fetch the memory to read
05:00 - one integer value four times
05:02 - one by four this second third and fourth
05:05 - because integer it is taking four byte
05:08 - and processor can read only one bite at
05:10 - a time so four times you will you will
05:12 - require four cpu cycle
05:14 - it's like suppose you want to buy
05:17 - this
05:17 - shirt
05:18 - pant and you can say t-shirt and jeans
05:23 - but at one time you will go to the store
05:25 - and you will pick shirt only you will
05:27 - come to your home
05:28 - second time again you will go to the
05:30 - store pick only paint and you will come
05:32 - to your home then third time then fourth
05:34 - time obviously this would be hectic
05:37 - what if we will go only one time and
05:39 - we'll pick all the four things shirt pen
05:42 - t-shirt and jeans at one time and come
05:45 - back to
05:46 - your home
05:47 - that is a good idea right
05:50 - that is same thing here
05:52 - what if the processor
05:55 - what if in in one cpu cycle only
05:58 - that processor can access all the four
06:00 - bytes
06:02 - yeah that is possible that is why
06:04 - memory you know is nowadays word
06:08 - addressable to increase the performance
06:10 - to increase the speed
06:13 - memory is nowadays word addressable
06:16 - right so at one time you can access
06:19 - these four bytes at one time only
06:22 - right only one cpu cycle would be
06:24 - required and you can access four bytes
06:28 - in 32 bit if 64 bit there you can access
06:31 - eight bytes at one in one cpu cycle only
06:34 - right so it depends on the you can say
06:37 - that architecture
06:39 - so now
06:40 - see here
06:43 - here i'm assuming that
06:45 - word size is 4 byte i'm assuming word
06:49 - size is
06:50 - 4 byte
06:52 - i'm assuming word size is 4 byte means
06:54 - we can access 4 bytes at a time so now
06:57 - see
06:57 - suppose we have stored a here care a
06:59 - means value is somewhere value is here
07:01 - and we have stored that value here
07:04 - if we store this end
07:07 - one two three four these four bytes then
07:10 - see
07:11 - this is one word four bytes
07:14 - then
07:16 - one two three four this would be
07:19 - another word this is one word this is
07:21 - second word you can say four bytes four
07:23 - bytes so now this integer would be
07:26 - one two three four
07:28 - three bytes would be this and one byte
07:30 - would be this
07:33 - so now if you want to access this
07:35 - integer value
07:37 - how many cpu cycle would be required to
07:39 - cpu cycle
07:41 - once if you cycle in once if cpu cycle
07:43 - you can access only these three bytes
07:47 - right
07:48 - and in another cpu cycle
07:50 - you will access this one byte obviously
07:52 - the cpus
07:54 - the processor will read this complete
07:56 - word but your information is only in
07:58 - this byte so
08:00 - after that it will read only this byte
08:02 - so two cpu cycles would be required
08:05 - means
08:07 - you can you can do this thing in one cpu
08:09 - cycle but here because of this storage
08:12 - you need two cpu cycle that is wastage
08:14 - of cpu cycle right that is going to
08:17 - decrease your performance
08:19 - right
08:20 - so now what you can do second method is
08:24 - you leave this space blank we are not
08:26 - going to store this in here
08:29 - and we will store this in these four
08:31 - bytes
08:34 - here one character
08:36 - here
08:38 - leave the three bytes as it is
08:40 - and then in these four bytes we will
08:42 - store this
08:45 - in so now here how many cpu cycle would
08:47 - be required to fetch this hint value
08:51 - only one
08:52 - because all four are in this location
08:55 - right
08:56 - so see many processor
08:58 - expect that the memory of these
09:00 - variables so these things would be
09:02 - aligned
09:04 - would be allocated according to the size
09:05 - of the variable see character is going
09:07 - to take one byte so you can store
09:08 - anywhere
09:09 - but it is going to take 4 byte
09:11 - so the address
09:13 - should start
09:15 - from the multiple of 4 like you can say
09:17 - 1 0 0 4 1 0 0 8
09:20 - or like 100 is also fine one zero four
09:23 - is also fine something like this and
09:24 - here
09:26 - this address is one zero one so we
09:28 - cannot store in from one zero one it is
09:30 - not multiple of four so you can store
09:32 - from here one zero four that is multiple
09:34 - of four right so from here we can store
09:36 - end value
09:38 - fine
09:39 - so now this these extra bits these this
09:42 - is known as
09:43 - padding bits or you can say memory holes
09:46 - right or you can say
09:49 - alignment memory alignment data
09:51 - alignment this is what we are
09:53 - giving we are allowing the data
09:56 - right just to increase the speed just to
09:58 - increase the performance of your cpu
10:01 - but at a penalty of memory hair wastage
10:03 - of some memory but memory is nowadays
10:05 - getting cheaper and cheaper so we can
10:07 - yeah we can afford some wastage of
10:08 - memory to increase the speed of the cpu
10:10 - if you don't want to waste the memory
10:12 - memory is also very critical for you
10:14 - speed is not
10:16 - then you can avoid this padding
10:18 - but one thing
10:20 - padding would be automatically done by
10:22 - the compiler automatically done by the
10:23 - compiler
10:25 - you will not do padding compiler will
10:27 - automatically do this thing but if you
10:29 - want to avoid padding then
10:31 - you can do packing you will have to
10:32 - include some special line in your
10:34 - program that is known and known as
10:36 - structure packing that will discuss in
10:37 - next video right but this padding will
10:39 - be done automatically by the compiler so
10:41 - this is known as padding bits and this
10:43 - process of inserting some extra bits or
10:46 - extra extra bytes or extra space
10:50 - between these variables just to align
10:53 - the data that process is known as
10:56 - structure padding in c
10:58 - so whenever you are asked these type of
11:00 - questions like how much memory would be
11:01 - located in this case so first question
11:03 - your first question would be what
11:06 - with structure padding or without
11:07 - structure padding
11:09 - or you can say with the data alignment
11:11 - or without a data alignment with the
11:13 - data alignment means with the structure
11:14 - padding that is what obviously that is
11:17 - data alignment
11:18 - right
11:20 - and then
11:22 - its word size would be what your next
11:24 - question would be what is the word size
11:25 - 4 byte or 8 byte
11:28 - and how many buy this because sometimes
11:30 - on some compiler it is going to take
11:32 - into take two bytes and on some machine
11:34 - it takes four bytes so your next
11:35 - question would be this also or maybe
11:37 - they will give all the details in the
11:39 - question and you just have to find out
11:41 - the size
11:43 - complete size that's it
11:45 - if this is not given if some interviews
11:47 - interviewer is going to ask this
11:48 - question to you then you must ask this
11:50 - question first of all to that interest
11:52 - to know
11:53 - the interviewer
11:55 - have to clear everything and then you
11:57 - calculate the size and then then tell
12:00 - if they ask you this type of question
12:02 - their motive is just to know if you have
12:05 - any idea about structure padding or
12:07 - structure packing because many students
12:10 - i am sure many students didn't hear this
12:12 - word structure padding
12:14 - right
12:15 - so this is very small concept
12:18 - and now see
12:19 - so how many bytes would be allocated to
12:21 - this now complete this 4 and this 4 8
12:27 - so this 8 bytes would be allocated so
12:29 - next next example is suppose i am taking
12:31 - this example i am just adding one more
12:34 - c
12:36 - now how many bytes would be located
12:39 - with the data alignment or you can say
12:40 - with structure padding
12:42 - right
12:43 - so
12:44 - this would be the alignment here see
12:53 - one word one word one word so now okay
12:56 - first is this for this character a
12:59 - somali would be store
13:01 - next is integer so we are not going to
13:02 - store here this would be blank and this
13:05 - would be stored here this b value int
13:07 - right now next is character c so that
13:10 - would be stored in this one byte
13:13 - right but
13:15 - processor can access four byte this is
13:16 - word adjustable so this complete
13:19 - would be in
13:20 - your account it's not like that only one
13:22 - byte would be in your account this
13:24 - complete four byte could be added to
13:26 - your account
13:27 - right so how many bytes would be
13:28 - allocated memory four four four that is
13:31 - in this case twelve bytes
13:35 - right but
13:37 - if you
13:38 - do something like this
13:40 - i am
13:41 - writing care c here not here
13:46 - now how many bytes would be allocated
13:48 - see
13:49 - first is character
13:50 - so
13:52 - the same thing we are having
13:55 - this is the memory alignment right
13:58 - so this would be this first byte would
13:59 - be for c
14:01 - next is care a
14:03 - right
14:04 - character is going to only one bite so
14:06 - it can you can store it anywhere
14:09 - right so now
14:10 - here you can store
14:12 - this a this one bite for this
14:15 - a next is end so we are not going to
14:18 - store in here
14:20 - we will leave this two bytes as a tease
14:22 - and now it would be stored from
14:24 - here to here
14:26 - so how many bites
14:28 - how many bites how many padding bytes
14:30 - would be there here only two bytes and
14:32 - total memory would be four and four that
14:34 - is eight bytes
14:36 - so maybe you are thinking
14:38 - in the previous case also we were having
14:40 - two care member and one int here also we
14:42 - are having two care and one end but
14:45 - see you have noticed the difference i
14:47 - guess the memory allocation the previous
14:48 - case twelve bytes here eight bytes only
14:52 - see see nowadays processors are very
14:54 - smart they can
14:55 - even handle these type of alignment
14:58 - memory alignment
14:59 - this problem comes when you are using
15:01 - risk type of processor they throw the
15:03 - exception when data is not aligned in
15:05 - the memory but nowadays processor can
15:07 - handle the smaller alignment but
15:09 - sometimes you know in in a very worse
15:11 - situation
15:13 - you use or maybe cpu how to use two or
15:16 - three cpu cycle to access some data
15:19 - because of the bad alignment so
15:21 - it's the duty of programmer
15:24 - to take care of these things so it's
15:26 - duty of you
15:28 - if you're writing writing a program
15:30 - to write down these program in such a
15:32 - way that
15:34 - memory wastage would be less so if one
15:36 - programmer is writing these members
15:38 - something like this only by should be
15:40 - required
15:42 - if
15:42 - you are new to programming and use you
15:45 - use something like this scare c rather
15:46 - than here here 12 bytes should be
15:48 - required so now here wastage of 4
15:52 - bytes and suppose a large amount of data
15:55 - you are storing this structure we
15:58 - use generally would like to store uh
16:00 - information of student or employees or
16:01 - these kind of things right and only
16:04 - three
16:05 - members are there
16:07 - right
16:08 - and in every student like thousand
16:10 - students or more students are there for
16:12 - every student you are wasting four bites
16:17 - sorry 5000 students or you can say one
16:19 - crore students or like you are storing
16:22 - information of other card and there we
16:25 - are having this kind of thing so they
16:27 - are like you have to store information
16:29 - for 135 crore people so how many bytes
16:31 - should be wasted you can imagine
16:34 - so it's duty of programmer only just to
16:37 - write down
16:39 - these members in a proper way
16:41 - so what should be the proper way
16:43 - you should write down these members in
16:47 - increasing order of their memory size
16:50 - like hair care
16:54 - c care care one byte then integer four
16:57 - bytes so increasing order it would be
16:59 - better to write
17:00 - in increasing order of their memory size
17:02 - right in that case memory would be you
17:05 - know
17:06 - properly utilized and less wasted you
17:08 - can say less wastage of memory would be
17:10 - there so i hope you got what is
17:12 - structure padding right
17:14 - and why we need structure padding and
17:17 - who does structure padding automatically
17:19 - it is done by the compiler why we need
17:21 - just to increase the speed of the or you
17:22 - can see the performance to reduce the
17:24 - wastage of number of cpu cycles right
17:27 - and what is this these extra bytes
17:30 - for you know you used to put between tho
17:33 - these values just for the data alignment
17:35 - that are known as this process is known
17:37 - as structure padding so you can try out
17:39 - different different
17:40 - these combinations or int float double
17:43 - every type of you know variables every
17:46 - type of member you can take here and you
17:47 - can see how memory would be allocated
17:49 - and how many bytes it is going to take
17:51 - right
17:53 - and one more question may arise like
17:55 - how many bytes would be added or how
17:57 - many padding bites you you would add so
18:00 - that would be according to the
18:02 - this the largest
18:04 - element you have here in is the largest
18:07 - 4 byte so according to this
18:09 - extra bytes should be added so i guess
18:11 - that's it for this video if you have any
18:12 - doubt in the structure padding you can
18:14 - ask me in comment box
18:15 - so now next we will see what is
18:17 - structure packing so nice in the next
18:18 - video till then bye take care

Cleaned transcript:

so in the series of learning c programming we are discussing structures in c in the previous video we have discussed type defined structure like how to use that type def keyword in structures right in this video we will see what is structure padding because we are left with two small topics in structure that is structural padding and structure packing many students i guess didn't know what is structure padding or they didn't even hear about this word structure padding and structure packing but yeah it's there in structures right these are small topics and the sometimes interviewer asked these kind of questions so in gate and net also you get these kind of questions right based on structure padding so we'll discuss everything about structure padding what is uh what is this structure padding why we need this right with examples right but before they just want to tell you one thing if you guys are preparing for gate examination or will be preparing for gate 2023 examination then an academy is going to start a new batch from 8th of december rohan for gate 2023 in this course their top educators will be covering all the subjects of cs and it that will help you to prepare in your gate examination so in this course you will get a detailed explanation of all the concepts of all the subjects and apart from these some special classes like preparation strategy some tips and tricks shortcuts practice questions numericals so these kind of classes would really be helpful for you guys and they'll cover the sports in both hindi and english and notes should be given to you in english only apart from this doubt clearing sessions should also be conducted in this course so if you have any doubt you can get your all your doubt you know cleared in those doubt clearing sessions and this would be paid because you will get complete and structured course but if you will use my code jkl 10 you will get extra 10 percent discount on your paid subscription and one good point about these classes are what you can talk to your favorite educator in the live classes and you can clear your doubts so i guess this is a musthave subscription for those who want to clear gate 2023 examination with the with some good marks so the relevant link and all the details i'll put in the description box of this video if you are interested you can go and check out the link so now let's see what is structure padding and see first of all we'll see one example like simple example i'm going to take see this is what i'm taking i'm defining a structure abc i'm taking only two members care a and into b and i'm declaring a variable s so if i ask what is the size of this how much memory would be allocated to this member sorry to this variable not members once you declare the variable then only memory would be allocated to these members how much memory maybe simply will say for one byte one bite for care and four bytes for in let's suppose care is going to be one bite and it is going to take four bytes float also four bytes doubles eight double eight byte long eight byte like this so one plus four that is five byte you will say five byte but no that is wrong why how the memory would be allocated because of the alignment the data alignment see how these members would be allocated some memory see here we have suppose this is a one byte for this address is hundred and one zero one so this is one byte for the square maybe you will say next one two three four these four bytes would be for int and five bytes no why so we can see memory is not bite advisable nowadays it is word addressable now what does that mean word addressable means in one cpu cycle at one time the processor can fetch one complete word from the memory and what is this word how many bytes this word will have in 32 bit machine on 32 bit machine word size is 4 byte and if your machine your processor is 64 bit then word size is 8 byte processor can access 4 byte at one time if it is 32 bit if 64 bit then processor can access eight byte from the memory at one time in one cpu cycle you can access eight byte here you can access four byte right this is the case and see historically processors these were byte addressable means processor at one time can access only one byte then one byte then one byte then one byte like this right but here problem is what see int is taking four byte suppose this end is taking four byte one two three four and if processor is byte addressable then how many cycles how many times the processor have to you know fetch the memory to read one integer value four times one by four this second third and fourth because integer it is taking four byte and processor can read only one bite at a time so four times you will you will require four cpu cycle it's like suppose you want to buy this shirt pant and you can say tshirt and jeans but at one time you will go to the store and you will pick shirt only you will come to your home second time again you will go to the store pick only paint and you will come to your home then third time then fourth time obviously this would be hectic what if we will go only one time and we'll pick all the four things shirt pen tshirt and jeans at one time and come back to your home that is a good idea right that is same thing here what if the processor what if in in one cpu cycle only that processor can access all the four bytes yeah that is possible that is why memory you know is nowadays word addressable to increase the performance to increase the speed memory is nowadays word addressable right so at one time you can access these four bytes at one time only right only one cpu cycle would be required and you can access four bytes in 32 bit if 64 bit there you can access eight bytes at one in one cpu cycle only right so it depends on the you can say that architecture so now see here here i'm assuming that word size is 4 byte i'm assuming word size is 4 byte i'm assuming word size is 4 byte means we can access 4 bytes at a time so now see suppose we have stored a here care a means value is somewhere value is here and we have stored that value here if we store this end one two three four these four bytes then see this is one word four bytes then one two three four this would be another word this is one word this is second word you can say four bytes four bytes so now this integer would be one two three four three bytes would be this and one byte would be this so now if you want to access this integer value how many cpu cycle would be required to cpu cycle once if you cycle in once if cpu cycle you can access only these three bytes right and in another cpu cycle you will access this one byte obviously the cpus the processor will read this complete word but your information is only in this byte so after that it will read only this byte so two cpu cycles would be required means you can you can do this thing in one cpu cycle but here because of this storage you need two cpu cycle that is wastage of cpu cycle right that is going to decrease your performance right so now what you can do second method is you leave this space blank we are not going to store this in here and we will store this in these four bytes here one character here leave the three bytes as it is and then in these four bytes we will store this in so now here how many cpu cycle would be required to fetch this hint value only one because all four are in this location right so see many processor expect that the memory of these variables so these things would be aligned would be allocated according to the size of the variable see character is going to take one byte so you can store anywhere but it is going to take 4 byte so the address should start from the multiple of 4 like you can say 1 0 0 4 1 0 0 8 or like 100 is also fine one zero four is also fine something like this and here this address is one zero one so we cannot store in from one zero one it is not multiple of four so you can store from here one zero four that is multiple of four right so from here we can store end value fine so now this these extra bits these this is known as padding bits or you can say memory holes right or you can say alignment memory alignment data alignment this is what we are giving we are allowing the data right just to increase the speed just to increase the performance of your cpu but at a penalty of memory hair wastage of some memory but memory is nowadays getting cheaper and cheaper so we can yeah we can afford some wastage of memory to increase the speed of the cpu if you don't want to waste the memory memory is also very critical for you speed is not then you can avoid this padding but one thing padding would be automatically done by the compiler automatically done by the compiler you will not do padding compiler will automatically do this thing but if you want to avoid padding then you can do packing you will have to include some special line in your program that is known and known as structure packing that will discuss in next video right but this padding will be done automatically by the compiler so this is known as padding bits and this process of inserting some extra bits or extra extra bytes or extra space between these variables just to align the data that process is known as structure padding in c so whenever you are asked these type of questions like how much memory would be located in this case so first question your first question would be what with structure padding or without structure padding or you can say with the data alignment or without a data alignment with the data alignment means with the structure padding that is what obviously that is data alignment right and then its word size would be what your next question would be what is the word size 4 byte or 8 byte and how many buy this because sometimes on some compiler it is going to take into take two bytes and on some machine it takes four bytes so your next question would be this also or maybe they will give all the details in the question and you just have to find out the size complete size that's it if this is not given if some interviews interviewer is going to ask this question to you then you must ask this question first of all to that interest to know the interviewer have to clear everything and then you calculate the size and then then tell if they ask you this type of question their motive is just to know if you have any idea about structure padding or structure packing because many students i am sure many students didn't hear this word structure padding right so this is very small concept and now see so how many bytes would be allocated to this now complete this 4 and this 4 8 so this 8 bytes would be allocated so next next example is suppose i am taking this example i am just adding one more c now how many bytes would be located with the data alignment or you can say with structure padding right so this would be the alignment here see one word one word one word so now okay first is this for this character a somali would be store next is integer so we are not going to store here this would be blank and this would be stored here this b value int right now next is character c so that would be stored in this one byte right but processor can access four byte this is word adjustable so this complete would be in your account it's not like that only one byte would be in your account this complete four byte could be added to your account right so how many bytes would be allocated memory four four four that is in this case twelve bytes right but if you do something like this i am writing care c here not here now how many bytes would be allocated see first is character so the same thing we are having this is the memory alignment right so this would be this first byte would be for c next is care a right character is going to only one bite so it can you can store it anywhere right so now here you can store this a this one bite for this a next is end so we are not going to store in here we will leave this two bytes as a tease and now it would be stored from here to here so how many bites how many bites how many padding bytes would be there here only two bytes and total memory would be four and four that is eight bytes so maybe you are thinking in the previous case also we were having two care member and one int here also we are having two care and one end but see you have noticed the difference i guess the memory allocation the previous case twelve bytes here eight bytes only see see nowadays processors are very smart they can even handle these type of alignment memory alignment this problem comes when you are using risk type of processor they throw the exception when data is not aligned in the memory but nowadays processor can handle the smaller alignment but sometimes you know in in a very worse situation you use or maybe cpu how to use two or three cpu cycle to access some data because of the bad alignment so it's the duty of programmer to take care of these things so it's duty of you if you're writing writing a program to write down these program in such a way that memory wastage would be less so if one programmer is writing these members something like this only by should be required if you are new to programming and use you use something like this scare c rather than here here 12 bytes should be required so now here wastage of 4 bytes and suppose a large amount of data you are storing this structure we use generally would like to store uh information of student or employees or these kind of things right and only three members are there right and in every student like thousand students or more students are there for every student you are wasting four bites sorry 5000 students or you can say one crore students or like you are storing information of other card and there we are having this kind of thing so they are like you have to store information for 135 crore people so how many bytes should be wasted you can imagine so it's duty of programmer only just to write down these members in a proper way so what should be the proper way you should write down these members in increasing order of their memory size like hair care c care care one byte then integer four bytes so increasing order it would be better to write in increasing order of their memory size right in that case memory would be you know properly utilized and less wasted you can say less wastage of memory would be there so i hope you got what is structure padding right and why we need structure padding and who does structure padding automatically it is done by the compiler why we need just to increase the speed of the or you can see the performance to reduce the wastage of number of cpu cycles right and what is this these extra bytes for you know you used to put between tho these values just for the data alignment that are known as this process is known as structure padding so you can try out different different these combinations or int float double every type of you know variables every type of member you can take here and you can see how memory would be allocated and how many bytes it is going to take right and one more question may arise like how many bytes would be added or how many padding bites you you would add so that would be according to the this the largest element you have here in is the largest 4 byte so according to this extra bytes should be added so i guess that's it for this video if you have any doubt in the structure padding you can ask me in comment box so now next we will see what is structure packing so nice in the next video till then bye take care
