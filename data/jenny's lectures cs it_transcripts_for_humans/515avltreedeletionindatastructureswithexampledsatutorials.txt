With timestamps:

00:00 - hi guys welcome back in this video I'm
00:02 - going to discuss with you how to delete
00:04 - data from AVL tree right in the previous
00:07 - video we have already discussed how to
00:09 - create AVL tree recorder you can see how
00:11 - to insert data in AVL tree and all about
00:14 - the events if you want put you out that
00:16 - video i'll give you the link it in the
00:18 - description box you can check it out
00:20 - fine so today we will discuss how to
00:23 - delete data from AVL tree
00:24 - see this is the ability we have created
00:26 - in the last video now suppose you want
00:29 - to delete data first in this series
00:31 - eight seven then eleven and fourteen
00:34 - then seventeen fine see AVL tree is what
00:38 - first of all it is a BST second is a
00:40 - second is the balance factor of each and
00:43 - every node should be either minus one
00:44 - zero one and balance factor is to be
00:47 - created how a height of left subtree -
00:50 - height of right subtree or maybe
00:52 - somewhere it is also written height of
00:54 - right subtree - hydro left subtree fine
00:57 - okay so when you delete the data from
01:00 - AVL tree you need to keep in mind two
01:03 - things first of all deletion would be
01:05 - same as in BST and we have already
01:09 - discussed how to delete data from BST
01:11 - the link of that video also I will give
01:14 - you in the description box fine
01:16 - the first point is delete data same as
01:19 - you delete data in BST fine second point
01:23 - is after deletion of data from this tree
01:26 - you need to check out the balance factor
01:29 - of each node again all right and the
01:32 - balance factor is minus 1 0 or 1 in that
01:36 - case tree is balanced no need to balance
01:38 - it out if the balance factor is out of
01:40 - this range minus 1 0 and 1 then you need
01:44 - to balance it out using that AVL
01:46 - rotations for types of rotation we have
01:48 - discussed left left right right left
01:50 - right and right left fine
01:53 - so let us discuss now suppose first of
01:55 - all you want to believe this it okay
01:58 - find out where is it whatever it is
02:01 - see this AVL trees first of all be a
02:03 - steena so how to find out it compare
02:06 - with this root 8 is less than 14 go to
02:08 - the left part it is less than 11 go to
02:10 - the left part here is 7 8
02:12 - is greater than seven through here is
02:14 - eight yeah we have found her fear of
02:15 - finding from this hey now how to delete
02:18 - see deletion would be same as in BST
02:22 - right so this node is having no child it
02:27 - is leaf node so directly you can delete
02:29 - this node fine like this okay and after
02:35 - deletion of this 8 the tree would be
02:38 - something like this we have already we
02:40 - have billeted this it now it's not like
02:44 - that check out the next number and
02:46 - delete 7 second thing is you need to
02:50 - check out the balance factor of each
02:51 - node again fine now check out the
02:54 - balance factor after deletion balance
02:56 - effect of this one is zero this one is
02:58 - left minus right is one this one is zero
03:03 - this one is 0 minus 1 minus 1 this one
03:05 - is height of left subtree 1 too high to
03:07 - fry it is also 2 that is 0 this one
03:11 - balance factor is 0 this one is also a
03:13 - zero balance factor of this is also 0 0
03:16 - 1 minus 0 that is one balance factor of
03:19 - 19 is 1/2 hi Toph left subtree is too
03:22 - high to fry it is also 2 that is 2 minus
03:24 - 2 is 0 fine and height of left subtree
03:28 - of this 14 is 1 2 & 3 3 minus 1 2 3 0 so
03:34 - this tree is balanced no need to balance
03:37 - it out now check out the next number 2
03:39 - middle next number is 7 find out where
03:42 - is 7 compare with 14 less than 14 go to
03:45 - left less than 11 go to left we found
03:47 - seven fine now we have to delete this
03:50 - number now check out is this number is
03:53 - having any children yes this is having
03:55 - one child that is left child for now how
03:59 - to delete the 7 you will replace this 7
04:04 - with this with its child either its left
04:06 - or right child one child had in there
04:08 - there would be no problem I know which
04:10 - will child over left or right you would
04:12 - replace the deleted node from his child
04:15 - fine
04:16 - so when we will believe this 7 then the
04:19 - tree would be 14 see this right part
04:23 - would be as it is this would be
04:26 - unaffected part of this tree only the
04:29 - affected part is this the left subtree
04:32 - so 11 is add as it is when you delete
04:35 - this seven fine then directly in four
04:38 - will will be linked with this 11 or you
04:41 - can say the 7 would be replaced with
04:43 - this for now 11 here we have for right
04:47 - side of 11 is 2l and here we have 13
04:52 - fine
04:53 - now next is see next is 11 but don't you
04:57 - cannot directly delete this 11 after
04:59 - deletion next task is what you have to
05:02 - check out the balance factor of each
05:04 - node fine now see balance factor of this
05:09 - 4 is 0 13 is 0 to L EA 0 minus 1 minus 1
05:13 - for 11 it is 1 minus 2 that is minus 1
05:17 - and it's this part was unaffected the
05:21 - balance factor would be same like 0 0 0
05:23 - 0 here is 1 here we have 0 in here we
05:26 - have see this would be affected sorry
05:30 - you know the height of left's appraised
05:31 - and now 1 & 2 it's not like 1 & 2 you
05:34 - are supposed to check the height 2 you
05:36 - are supposed to go to the leaf node and
05:38 - height up to leaf node is 1 2 & 3 fine 3
05:44 - minus 1 2 3 that is 3 minus 3 0 still
05:48 - this tree is balanced okay no need to
05:50 - balance it out next to how to delete is
05:53 - 11 now find out where is 11 11 is this
05:59 - node this one you have to delete now now
06:02 - check it out this node deletion would be
06:04 - same as in BST
06:05 - this node is having two children one is
06:08 - left and one is right now the node this
06:12 - node being deleted will be replaced with
06:14 - which of its children left right you
06:18 - have to check it out and here we have
06:19 - two cases you can replace it with this
06:22 - node with its inorder predecessor or
06:23 - with its inorder successor in order
06:26 - predecessor case you find out cutting in
06:28 - order predecessor would be C predecessor
06:30 - means just parallel scheme by fine
06:33 - inorder predecessor would be the largest
06:35 - element from the left subtree of the
06:38 - node being deleted
06:40 - right and you know the successor would
06:42 - be the smallest element from the right
06:45 - subtree of this node fine so we will
06:49 - suppose replace the this node with its
06:52 - inorder predecessor we'll just take one
06:54 - case then after deletion of eleven the
07:00 - tree would be here we have 14 the right
07:03 - part would be unaffected and that is 53
07:06 - here we have 60 here we have 20 here we
07:10 - have 17 and here we have 16 now you have
07:14 - to delete this 11 find out its in order
07:16 - predecessor you know order predecessor
07:19 - is go to its left subtree in left
07:21 - subtree we have only one element that is
07:23 - 4 so obviously there is a largest
07:25 - element from this left subtree would be
07:28 - 4 so we can replace this 11 with 4 fine
07:35 - in the left of 4 there is nothing in the
07:38 - right of 4 we will have this 2 n and
07:42 - this 13 because this 11 is replaced by
07:45 - this for now the right subtree will be
07:49 - same second case would be you can
07:51 - replace this 11 with its successor
07:54 - successor is the smallest element from
07:56 - this right subtree and out of this 2l
07:58 - and 13 what is the smallest element that
08:00 - is 2 L so you can replace this 11 with
08:02 - 12 then here you can write to L here you
08:05 - have 4 and here would how 13 that would
08:07 - be the second is okay now check out the
08:10 - balance factor of every node before
08:13 - deleting 14 here the same balance factor
08:18 - would be there because this node was
08:19 - this right subtree was unaffected now
08:22 - check out zero balance factor of 12 is 0
08:27 - minus 1 that is minus 1 balance factor
08:29 - of this 4 is now height of left subtree
08:32 - 0 height of right subtree is one end to
08:34 - 0 minus 2 that is minus 2 right now see
08:40 - this minus 2 is not within this range
08:42 - minus 1 0 and 1 so this node is critical
08:44 - node now you have to balance it out fine
08:48 - this one
08:51 - now we are working with this part of me
08:54 - now we have already discussed the AVL
08:57 - rotations which case is this see this
09:01 - right hand right are our rotations fine
09:06 - and how this can be balanced are our
09:09 - rotations cooking our rotation make out
09:11 - there we just do one left rotation why
09:16 - by doing the one left rotation you can
09:18 - balance out this one and how this left
09:20 - rotation would be done this is left
09:22 - rotation see this trees and by this node
09:26 - is unbalanced now or you can say this
09:28 - node is critical now so you just pull
09:31 - down this for like this then twelve
09:35 - would go up and thirteen would be the
09:37 - right of twelve and four would be to the
09:39 - left of this twelve so you are supposed
09:42 - to do the left rotation fine
09:45 - it's couple left move corner then the
09:47 - four would be pulled down okay now the
09:51 - tree would be here am i I'm ending this
09:55 - tree 14 the right subtree would be same
10:01 - fine the left subtree would be four
10:07 - would go this displays here boom pow 12
10:11 - he would have 13 and here we will have
10:14 - four by this left rotation will pull
10:17 - down this for twelve would go up this is
10:20 - now the left subtree and the right is
10:23 - same 19 would have here we got 50 360
10:32 - 2017 and 60 right now see before
10:40 - deleting this 14 check out the balance
10:43 - factor of each and every node is this
10:45 - now balanced tree because we have this
10:49 - are our rotation we have done this are
10:51 - our rotation so 0 0 here we have 0 and
10:55 - this tree was unaffected so this one is
10:57 - also 0 0 same as this one right 14 can
11:01 - be 1 2 2 minus 1 2 3 that is
11:04 - - 1 so this ray is now balanced now what
11:08 - you have to delete is you how to delete
11:10 - this 14 now huh 14 would be deleted see
11:17 - again 14 is having two children one is
11:21 - left and one is right then how this 14
11:24 - this 14 would be replaced with which one
11:27 - either you can replace this 14 with
11:28 - inorder predecessor or inorder successor
11:32 - deletion would be same as in DST okay
11:35 - now you have to delete this 14 now find
11:38 - out this inorder predecessor okay in
11:43 - order we will disable replace this 14
11:47 - with its inorder predecessor in order
11:49 - predecessor is C this is the left
11:52 - subtree of 14 the node being deleted the
11:58 - left subtree of the node being deleted
12:00 - is this one so inorder predecessor is
12:03 - what the largest element from this left
12:07 - subtree of that node largest element out
12:09 - of 4 12 and 13 is what 13 so you can
12:12 - replace this 14 with 13 or second cases
12:16 - inorder successor
12:18 - you know the successor is the smallest
12:20 - element from this right subtree so out
12:22 - of these elements smallest element is 16
12:25 - so you will delete this 16 from here and
12:27 - you will replace this 14 with this here
12:30 - you can write 16 right so we'll discuss
12:32 - one case we will replace this 14 with
12:37 - it's in order predecessor so 13 would go
12:39 - up right part would be safe 53 here we
12:46 - have 60 here we have 20 here we have 17
12:50 - and here we have 16 and the love left
12:54 - part would be 12 common a 1400 hinari
12:58 - play square there with this 13 to 13
13:00 - years a couch I have not delete and here
13:03 - boot out well and for now before
13:07 - deleting the 17 second step Cayuga you
13:10 - need to check out the balance factor of
13:12 - each no balance factor of 4 is 12 14 is
13:16 - 1 - 0 this 1 is unaffected 0 0 0 0 1 - 0
13:22 - that is 1 2 - 2 that is 0 1 2 2 - 1 2 3
13:26 - that is minus 1 so the story is balanced
13:30 - now delete the 17 find out where is 17
13:34 - 17 is greater than 13 go to the next
13:36 - right part 17 is less than 19 go to the
13:39 - left part here we find 17 now 17 is
13:43 - having only one child so no problem is
13:46 - they're just simply delete this 17 and
13:49 - replace 17 with this 16 then the 3 would
13:53 - be 13 1953 60 20 and here is 16 happy
14:03 - him - well and here picky over for now
14:06 - check out the balance factor of each
14:07 - node balance factor is 0 1 0 0 0 1 minus
14:12 - 1 0 1 minus 2 that is minus 1 2 minus 3
14:17 - that is minus 1 so this tray is balanced
14:20 - like this you can delete data from a
14:23 - value you just have to remember deletion
14:26 - would be same as in BST first step
14:30 - delete data as you have belittled in BST
14:33 - second step is after deletion check out
14:36 - the balance factor of each node if tree
14:39 - is balanced then you can proceed you can
14:41 - delete the next number if tree is
14:43 - unbalanced you output Jack out which
14:45 - rotation is there by which rotation you
14:48 - can balance it out
14:49 - if tree is unbalanced after deletion
14:50 - then balanced output that tree first
14:52 - then you can proceed with your deletion
14:56 - okay so I'll see in the next video till
14:59 - then bye bye
15:00 - take care

Cleaned transcript:

hi guys welcome back in this video I'm going to discuss with you how to delete data from AVL tree right in the previous video we have already discussed how to create AVL tree recorder you can see how to insert data in AVL tree and all about the events if you want put you out that video i'll give you the link it in the description box you can check it out fine so today we will discuss how to delete data from AVL tree see this is the ability we have created in the last video now suppose you want to delete data first in this series eight seven then eleven and fourteen then seventeen fine see AVL tree is what first of all it is a BST second is a second is the balance factor of each and every node should be either minus one zero one and balance factor is to be created how a height of left subtree height of right subtree or maybe somewhere it is also written height of right subtree hydro left subtree fine okay so when you delete the data from AVL tree you need to keep in mind two things first of all deletion would be same as in BST and we have already discussed how to delete data from BST the link of that video also I will give you in the description box fine the first point is delete data same as you delete data in BST fine second point is after deletion of data from this tree you need to check out the balance factor of each node again all right and the balance factor is minus 1 0 or 1 in that case tree is balanced no need to balance it out if the balance factor is out of this range minus 1 0 and 1 then you need to balance it out using that AVL rotations for types of rotation we have discussed left left right right left right and right left fine so let us discuss now suppose first of all you want to believe this it okay find out where is it whatever it is see this AVL trees first of all be a steena so how to find out it compare with this root 8 is less than 14 go to the left part it is less than 11 go to the left part here is 7 8 is greater than seven through here is eight yeah we have found her fear of finding from this hey now how to delete see deletion would be same as in BST right so this node is having no child it is leaf node so directly you can delete this node fine like this okay and after deletion of this 8 the tree would be something like this we have already we have billeted this it now it's not like that check out the next number and delete 7 second thing is you need to check out the balance factor of each node again fine now check out the balance factor after deletion balance effect of this one is zero this one is left minus right is one this one is zero this one is 0 minus 1 minus 1 this one is height of left subtree 1 too high to fry it is also 2 that is 0 this one balance factor is 0 this one is also a zero balance factor of this is also 0 0 1 minus 0 that is one balance factor of 19 is 1/2 hi Toph left subtree is too high to fry it is also 2 that is 2 minus 2 is 0 fine and height of left subtree of this 14 is 1 2 & 3 3 minus 1 2 3 0 so this tree is balanced no need to balance it out now check out the next number 2 middle next number is 7 find out where is 7 compare with 14 less than 14 go to left less than 11 go to left we found seven fine now we have to delete this number now check out is this number is having any children yes this is having one child that is left child for now how to delete the 7 you will replace this 7 with this with its child either its left or right child one child had in there there would be no problem I know which will child over left or right you would replace the deleted node from his child fine so when we will believe this 7 then the tree would be 14 see this right part would be as it is this would be unaffected part of this tree only the affected part is this the left subtree so 11 is add as it is when you delete this seven fine then directly in four will will be linked with this 11 or you can say the 7 would be replaced with this for now 11 here we have for right side of 11 is 2l and here we have 13 fine now next is see next is 11 but don't you cannot directly delete this 11 after deletion next task is what you have to check out the balance factor of each node fine now see balance factor of this 4 is 0 13 is 0 to L EA 0 minus 1 minus 1 for 11 it is 1 minus 2 that is minus 1 and it's this part was unaffected the balance factor would be same like 0 0 0 0 here is 1 here we have 0 in here we have see this would be affected sorry you know the height of left's appraised and now 1 & 2 it's not like 1 & 2 you are supposed to check the height 2 you are supposed to go to the leaf node and height up to leaf node is 1 2 & 3 fine 3 minus 1 2 3 that is 3 minus 3 0 still this tree is balanced okay no need to balance it out next to how to delete is 11 now find out where is 11 11 is this node this one you have to delete now now check it out this node deletion would be same as in BST this node is having two children one is left and one is right now the node this node being deleted will be replaced with which of its children left right you have to check it out and here we have two cases you can replace it with this node with its inorder predecessor or with its inorder successor in order predecessor case you find out cutting in order predecessor would be C predecessor means just parallel scheme by fine inorder predecessor would be the largest element from the left subtree of the node being deleted right and you know the successor would be the smallest element from the right subtree of this node fine so we will suppose replace the this node with its inorder predecessor we'll just take one case then after deletion of eleven the tree would be here we have 14 the right part would be unaffected and that is 53 here we have 60 here we have 20 here we have 17 and here we have 16 now you have to delete this 11 find out its in order predecessor you know order predecessor is go to its left subtree in left subtree we have only one element that is 4 so obviously there is a largest element from this left subtree would be 4 so we can replace this 11 with 4 fine in the left of 4 there is nothing in the right of 4 we will have this 2 n and this 13 because this 11 is replaced by this for now the right subtree will be same second case would be you can replace this 11 with its successor successor is the smallest element from this right subtree and out of this 2l and 13 what is the smallest element that is 2 L so you can replace this 11 with 12 then here you can write to L here you have 4 and here would how 13 that would be the second is okay now check out the balance factor of every node before deleting 14 here the same balance factor would be there because this node was this right subtree was unaffected now check out zero balance factor of 12 is 0 minus 1 that is minus 1 balance factor of this 4 is now height of left subtree 0 height of right subtree is one end to 0 minus 2 that is minus 2 right now see this minus 2 is not within this range minus 1 0 and 1 so this node is critical node now you have to balance it out fine this one now we are working with this part of me now we have already discussed the AVL rotations which case is this see this right hand right are our rotations fine and how this can be balanced are our rotations cooking our rotation make out there we just do one left rotation why by doing the one left rotation you can balance out this one and how this left rotation would be done this is left rotation see this trees and by this node is unbalanced now or you can say this node is critical now so you just pull down this for like this then twelve would go up and thirteen would be the right of twelve and four would be to the left of this twelve so you are supposed to do the left rotation fine it's couple left move corner then the four would be pulled down okay now the tree would be here am i I'm ending this tree 14 the right subtree would be same fine the left subtree would be four would go this displays here boom pow 12 he would have 13 and here we will have four by this left rotation will pull down this for twelve would go up this is now the left subtree and the right is same 19 would have here we got 50 360 2017 and 60 right now see before deleting this 14 check out the balance factor of each and every node is this now balanced tree because we have this are our rotation we have done this are our rotation so 0 0 here we have 0 and this tree was unaffected so this one is also 0 0 same as this one right 14 can be 1 2 2 minus 1 2 3 that is 1 so this ray is now balanced now what you have to delete is you how to delete this 14 now huh 14 would be deleted see again 14 is having two children one is left and one is right then how this 14 this 14 would be replaced with which one either you can replace this 14 with inorder predecessor or inorder successor deletion would be same as in DST okay now you have to delete this 14 now find out this inorder predecessor okay in order we will disable replace this 14 with its inorder predecessor in order predecessor is C this is the left subtree of 14 the node being deleted the left subtree of the node being deleted is this one so inorder predecessor is what the largest element from this left subtree of that node largest element out of 4 12 and 13 is what 13 so you can replace this 14 with 13 or second cases inorder successor you know the successor is the smallest element from this right subtree so out of these elements smallest element is 16 so you will delete this 16 from here and you will replace this 14 with this here you can write 16 right so we'll discuss one case we will replace this 14 with it's in order predecessor so 13 would go up right part would be safe 53 here we have 60 here we have 20 here we have 17 and here we have 16 and the love left part would be 12 common a 1400 hinari play square there with this 13 to 13 years a couch I have not delete and here boot out well and for now before deleting the 17 second step Cayuga you need to check out the balance factor of each no balance factor of 4 is 12 14 is 1 0 this 1 is unaffected 0 0 0 0 1 0 that is 1 2 2 that is 0 1 2 2 1 2 3 that is minus 1 so the story is balanced now delete the 17 find out where is 17 17 is greater than 13 go to the next right part 17 is less than 19 go to the left part here we find 17 now 17 is having only one child so no problem is they're just simply delete this 17 and replace 17 with this 16 then the 3 would be 13 1953 60 20 and here is 16 happy him well and here picky over for now check out the balance factor of each node balance factor is 0 1 0 0 0 1 minus 1 0 1 minus 2 that is minus 1 2 minus 3 that is minus 1 so this tray is balanced like this you can delete data from a value you just have to remember deletion would be same as in BST first step delete data as you have belittled in BST second step is after deletion check out the balance factor of each node if tree is balanced then you can proceed you can delete the next number if tree is unbalanced you output Jack out which rotation is there by which rotation you can balance it out if tree is unbalanced after deletion then balanced output that tree first then you can proceed with your deletion okay so I'll see in the next video till then bye bye take care
