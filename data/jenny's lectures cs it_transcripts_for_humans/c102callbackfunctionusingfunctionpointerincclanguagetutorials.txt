With timestamps:

00:00 - so in the series of learning c
00:01 - programming we are discussing functions
00:03 - in c in the last video we have discussed
00:04 - what is function pointer the basics
00:07 - what is function pointer how to use a
00:09 - function pointer how to declare it how
00:11 - to initialize it and we have just seen a
00:13 - simple program
00:14 - right basics about function pointer we
00:16 - have discussed in that video now in this
00:18 - video we'll discuss one application of
00:19 - function pointer why we use function
00:21 - pointer and that is nothing but
00:24 - callback function function pointers are
00:26 - used what in callback function what is
00:29 - this
00:30 - right how to use it how to know call
00:33 - back a function that we will discuss
00:35 - here with a simple program right and i
00:37 - will show you practically so we will run
00:39 - that code and i will show you what
00:40 - output you are getting what is callback
00:41 - function right
00:43 - so everything about qualifier function
00:45 - we are going to discuss in this video
00:46 - but before they just want to tell you
00:47 - one thing if you have a prank for gate
00:49 - or will be preparing for gate 2023 exam
00:52 - then an academy is going to start a new
00:54 - batch from 29th of september for gate
00:57 - and escs parents it's you know rohan for
01:00 - gate and esc in this course the top
01:03 - educator will cover all the subjects of
01:05 - cs and iit and helps you to prepare in
01:07 - your gate exam here you will get the
01:09 - detailed explanation of all the concepts
01:11 - and apart from this some special classes
01:13 - would also be there like they'll discuss
01:15 - preparation strategies some tips and
01:16 - tricks shortcuts to solve some questions
01:19 - practice questions and numericals so
01:21 - that these classes will really be
01:22 - helpful for you guys
01:24 - and the course will be covered in both
01:25 - hindi and english and notes should be
01:27 - given to you in english only plus some
01:29 - doubt solving session would also be
01:31 - there so you can you know get your all
01:33 - your doubt cleared in those doubt
01:35 - solving sessions and this is paid
01:37 - subscription because you will get a
01:38 - complete and structured course but here
01:42 - the special price week is going on so if
01:44 - you go for a subscription 12 months or
01:46 - above then you will get it at a special
01:48 - price with 10
01:50 - discounted rate you can see the detail
01:52 - of the price on the screen the regular
01:54 - price after 10 percent off and if you
01:56 - will use my code jkl 10 then you will
01:59 - get extra 10 off on that reduced price
02:02 - so the final price you can see over here
02:04 - so if you are interested you can go for
02:06 - the subscription you can find out the
02:08 - detail of this course in the link that
02:10 - i'll put in the description box of this
02:12 - video you can go and check out so now
02:13 - let's see what is call back function
02:16 - this is you can say one type of
02:17 - application or function pointer i guess
02:19 - you know what is function pointer you
02:21 - must watch out my previous video first
02:22 - then come to this video then you will
02:24 - get it better function pointer is what
02:25 - it's like a normal pointer variable but
02:28 - it contains address of a function so
02:31 - function pointer contains address of the
02:33 - code and normal pointer contains address
02:35 - of
02:36 - the data right or the value
02:39 - right and now function pointers are used
02:43 - to call back a function now what does
02:45 - this mean see let's take a simple
02:47 - example here i am taking suppose two
02:49 - function one is sum
02:51 - here i am doing sum of two numbers one
02:53 - is subtraction here i am doing
02:55 - subtraction of two numbers
02:57 - right
02:58 - and
02:59 - from another function suppose a function
03:01 - is display
03:04 - from this function
03:06 - i want to call
03:07 - the sum and subtract
03:10 - right
03:11 - means callback function means nothing
03:13 - but
03:14 - we are passing
03:16 - function to a function
03:18 - if we pass here something like uh
03:21 - if you write here in a into b
03:23 - it means what we are passing arguments
03:25 - to this function
03:27 - right
03:28 - but
03:29 - here we can pass a function also as an
03:32 - argument in these arguments we can pass
03:34 - a function means function to a function
03:39 - that is callback function
03:41 - we are passing address of another
03:42 - function
03:44 - to
03:44 - a function that is what callback
03:46 - function now see here we are taking
03:49 - these two function and
03:52 - this display function is going to call
03:54 - this and this
03:56 - but at runtime
03:58 - whatever
03:59 - here you will pass here we are going to
04:00 - pass address off if you will pass
04:03 - address of this function
04:05 - then it will call sum function
04:08 - when you call when you pass address of
04:10 - this function here
04:11 - then it will call this function
04:14 - same if we have suppose 10 functions
04:18 - so from one function we can call all the
04:20 - ten functions one by one one time you
04:22 - can pass address of this function and
04:24 - under another time when we call this
04:26 - function just pass address of this
04:28 - function second function third time when
04:30 - you call this just pass address of the
04:32 - third function so one function only can
04:34 - call all these functions
04:37 - it depends what address you are passing
04:39 - at runtime only
04:41 - so this display display function doesn't
04:43 - know
04:44 - to which function
04:46 - he is going to call
04:47 - but whatever address you will pass here
04:49 - that function it is going to call it
04:51 - runtime this will discuss with proper
04:52 - program also
04:54 - right
04:55 - now see see what what is happening here
04:57 - suppose here i am taking this example
05:01 - uh
05:02 - i'm taking void sum and here i'm taking
05:05 - into a comma into b
05:08 - and here i'm just doing printf
05:12 - percentage d a plus b
05:14 - right
05:15 - and this function is
05:18 - i am taking two argument in a into b and
05:21 - simple here print f
05:23 - percentage d a minus b
05:26 - right two function we have right
05:29 - now one function we have what this
05:30 - display
05:35 - so in display
05:37 - as an argument
05:38 - we are going to pass address of either
05:40 - this or this
05:41 - and if you want to pass address of these
05:43 - function
05:44 - then you must have a pointer to accept
05:47 - that address right
05:49 - so if you are passing address of a
05:51 - function then
05:52 - here we must have a function pointer to
05:55 - accept address of that function
05:56 - obviously
05:57 - so here you have to declare a function
05:59 - point
06:00 - right now how to declare that see both
06:03 - the function are having same data type
06:05 - that is void
06:07 - just function pointer name i'm taking
06:09 - fptr and you have to put it in brackets
06:12 - and here both the function are taking
06:14 - two arguments so just
06:17 - write down intent
06:18 - i hope you know how to declare a
06:20 - function pointer that we have discussed
06:21 - in previous video
06:22 - so here
06:24 - we are taking a function pointer as an
06:26 - argument to this function now
06:29 - from this function we are going to call
06:31 - these functions right so how to call
06:34 - using this function pointer because this
06:36 - function pointer is having address of
06:37 - these functions
06:39 - right
06:39 - now how to call
06:42 - f
06:43 - ptr
06:45 - and just pass the argument like i am
06:47 - passing 5 comma 1
06:50 - that's it or simply you can write fptr
06:52 - rather than this s trig that is also
06:54 - fine that will work right 5 and 1. now
06:57 - in main function what we are doing in
06:59 - main function suppose i am
07:02 - calling what
07:08 - here i am calling this display function
07:12 - display
07:14 - and
07:15 - this time i am passing address of this
07:17 - function so how to pass address simply
07:19 - you can write address of
07:21 - sum
07:23 - or rather than ampersand you can simply
07:25 - pass
07:26 - the name of the function that also means
07:28 - you are passing address of this base
07:30 - address of this function right
07:32 - next time when i will call i
07:34 - say display
07:36 - and
07:37 - subtract
07:40 - that's it
07:41 - means we are passing a function to a
07:44 - function
07:45 - so for this display function sum and sub
07:48 - these are callback function
07:50 - right we are calling this function
07:52 - display
07:53 - and this function is calling back or
07:55 - calling again
07:57 - these functions
07:59 - means the the sum and sub these are
08:01 - callback function for this display
08:03 - function callback function
08:05 - right we are calling again these
08:07 - function from this function right so see
08:10 - control will go here now we are calling
08:12 - this so display sum we are passing
08:15 - address of the sum obviously
08:17 - this and the sum will having will have
08:19 - some address in the memory starting
08:21 - address we are passing or if you want to
08:23 - find out the address you can simply
08:24 - print the address also
08:26 - right like printf address of the
08:29 - function is percentage p
08:31 - and comma name of the function
08:34 - then you will come to know that this
08:37 - these functions are also having
08:39 - address so it will print the base
08:41 - address of this function if you want to
08:42 - print you can print
08:44 - right
08:45 - when we run this code i will show you
08:46 - that thing also right
08:48 - now address of this function is suppose
08:50 - in the memory this function is
08:53 - here
08:56 - these are having instructions of this
08:57 - function sum and suppose memory is
09:00 - the base address is hundred thousand and
09:02 - suppose in memory this function is
09:04 - sub
09:05 - having instruction one two three of sub
09:08 - and the starting address is suppose one
09:09 - zero four six so here we are passing
09:12 - thousand
09:14 - so to accept this now control will go
09:17 - here to accept this address there must
09:20 - have a function pointer so yeah we have
09:22 - a function pointer right
09:23 - void strict fptr and
09:26 - and right so
09:28 - see now
09:30 - these the return type and the number of
09:33 - arguments these should be same of these
09:35 - function
09:36 - right because we are taking only one
09:39 - pointer one function pointer
09:42 - to call these functions
09:44 - suppose here the data type is float
09:47 - and here we are taking float
09:50 - then
09:51 - obviously this function pointer will
09:53 - contain address of a
09:55 - function which return type is void and
09:57 - which will accept two argument in in and
10:00 - in
10:01 - so it can have address of this function
10:02 - only
10:03 - if you assign address of this maybe it
10:05 - will show some unusual behavior because
10:07 - return type of this is
10:09 - float so i hope you are getting my point
10:11 - all these
10:12 - functions should be of same type like
10:14 - void and here also we are having in
10:17 - because only one function pointer we
10:19 - have using that function pointer only we
10:21 - are going to access all the functions
10:23 - maybe you have two three or ten
10:24 - functions right
10:26 - so now
10:28 - here we are passing thousand so in fptr
10:30 - we have thousand so now this fptr is now
10:32 - pointing to suppose we have a in memory
10:35 - we have fptr this one and now this is
10:37 - pointing to here thousand
10:40 - so within this
10:42 - first of all we are going to dereference
10:44 - it strict ptr the value at this ptr is
10:47 - this code and now in this code we are
10:49 - passing five and one
10:50 - so here
10:51 - it will go to here
10:53 - now here we are passing five and one so
10:55 - five and one so it will print six
10:59 - right next time
11:01 - we are calling sum so this time it will
11:03 - pass
11:05 - 1046 so now at this time fptr is having
11:08 - one zero four six so now it is going to
11:10 - call this function
11:12 - now in we have five and one subtraction
11:14 - would be four so it will print six and
11:16 - four
11:17 - so see using one function only we can
11:20 - call these two functions right at
11:22 - runtime you can pass
11:24 - the name of the function or the address
11:26 - of the function and you can call that
11:27 - function simple as that
11:29 - using function pointer and this is
11:30 - possible only using function pointer
11:33 - so this mechanism is nothing but call by
11:36 - method
11:37 - right
11:38 - and
11:39 - here call by a function callback
11:41 - function is what
11:42 - sum and sub
11:45 - right so i hope you got this thing see i
11:47 - have taken a simple example
11:49 - because this is a little bit confusing
11:51 - callback function
11:53 - this kind of thing so that's why i have
11:55 - taken a simple example so now let's run
11:57 - this and see what output you are getting
11:59 - you can try out different different
12:00 - programs that are of complicated level
12:02 - at your own using function pointer
12:04 - right so now let's create a new file
12:09 - callback function
12:10 - dot c
12:12 - right
12:15 - and here you will take
12:18 - let's take
12:20 - two function void
12:22 - sum
12:27 - and here we are just printing
12:33 - sum equal to percentage d slash n
12:36 - and a plus b
12:38 - you can also write down like return a
12:40 - plus b that is also fine but rather than
12:43 - word there then you have to use
12:45 - int
12:47 - right
12:48 - that is also fine you can take this
12:49 - thing now here we are having next
12:52 - function is
12:53 - sub and just i am printing
12:56 - a minus b
12:59 - right
13:00 - and one more function is what i am
13:02 - taking
13:05 - display
13:06 - so here we'll take
13:09 - function pointer f
13:11 - ptr
13:14 - and
13:16 - it should accept two arguments
13:19 - and here from here we are calling so f b
13:22 - d r
13:23 - and i am passing the argument suppose 5
13:26 - comma 1
13:30 - now in main what we do
13:34 - we will call display
13:36 - and first time we'll pass the address of
13:39 - sum
13:40 - and next time we'll pass
13:42 - sub
13:44 - right
13:50 - so now let's run this and see what
13:52 - output you are getting
13:59 - see sum is equal to 6 and sub is equal
14:01 - to 4
14:02 - so i hope you go to this
14:06 - now you can try out different different
14:07 - variations and different different types
14:09 - of programs
14:10 - you know passing a function to a
14:12 - function as an argument that is nothing
14:14 - but a
14:15 - callback method
14:16 - so that's it for this video now
14:18 - so now in the next video we'll see even
14:19 - more application of function pointers
14:22 - and i'll see in the next video till then
14:23 - bye bye take care

Cleaned transcript:

so in the series of learning c programming we are discussing functions in c in the last video we have discussed what is function pointer the basics what is function pointer how to use a function pointer how to declare it how to initialize it and we have just seen a simple program right basics about function pointer we have discussed in that video now in this video we'll discuss one application of function pointer why we use function pointer and that is nothing but callback function function pointers are used what in callback function what is this right how to use it how to know call back a function that we will discuss here with a simple program right and i will show you practically so we will run that code and i will show you what output you are getting what is callback function right so everything about qualifier function we are going to discuss in this video but before they just want to tell you one thing if you have a prank for gate or will be preparing for gate 2023 exam then an academy is going to start a new batch from 29th of september for gate and escs parents it's you know rohan for gate and esc in this course the top educator will cover all the subjects of cs and iit and helps you to prepare in your gate exam here you will get the detailed explanation of all the concepts and apart from this some special classes would also be there like they'll discuss preparation strategies some tips and tricks shortcuts to solve some questions practice questions and numericals so that these classes will really be helpful for you guys and the course will be covered in both hindi and english and notes should be given to you in english only plus some doubt solving session would also be there so you can you know get your all your doubt cleared in those doubt solving sessions and this is paid subscription because you will get a complete and structured course but here the special price week is going on so if you go for a subscription 12 months or above then you will get it at a special price with 10 discounted rate you can see the detail of the price on the screen the regular price after 10 percent off and if you will use my code jkl 10 then you will get extra 10 off on that reduced price so the final price you can see over here so if you are interested you can go for the subscription you can find out the detail of this course in the link that i'll put in the description box of this video you can go and check out so now let's see what is call back function this is you can say one type of application or function pointer i guess you know what is function pointer you must watch out my previous video first then come to this video then you will get it better function pointer is what it's like a normal pointer variable but it contains address of a function so function pointer contains address of the code and normal pointer contains address of the data right or the value right and now function pointers are used to call back a function now what does this mean see let's take a simple example here i am taking suppose two function one is sum here i am doing sum of two numbers one is subtraction here i am doing subtraction of two numbers right and from another function suppose a function is display from this function i want to call the sum and subtract right means callback function means nothing but we are passing function to a function if we pass here something like uh if you write here in a into b it means what we are passing arguments to this function right but here we can pass a function also as an argument in these arguments we can pass a function means function to a function that is callback function we are passing address of another function to a function that is what callback function now see here we are taking these two function and this display function is going to call this and this but at runtime whatever here you will pass here we are going to pass address off if you will pass address of this function then it will call sum function when you call when you pass address of this function here then it will call this function same if we have suppose 10 functions so from one function we can call all the ten functions one by one one time you can pass address of this function and under another time when we call this function just pass address of this function second function third time when you call this just pass address of the third function so one function only can call all these functions it depends what address you are passing at runtime only so this display display function doesn't know to which function he is going to call but whatever address you will pass here that function it is going to call it runtime this will discuss with proper program also right now see see what what is happening here suppose here i am taking this example uh i'm taking void sum and here i'm taking into a comma into b and here i'm just doing printf percentage d a plus b right and this function is i am taking two argument in a into b and simple here print f percentage d a minus b right two function we have right now one function we have what this display so in display as an argument we are going to pass address of either this or this and if you want to pass address of these function then you must have a pointer to accept that address right so if you are passing address of a function then here we must have a function pointer to accept address of that function obviously so here you have to declare a function point right now how to declare that see both the function are having same data type that is void just function pointer name i'm taking fptr and you have to put it in brackets and here both the function are taking two arguments so just write down intent i hope you know how to declare a function pointer that we have discussed in previous video so here we are taking a function pointer as an argument to this function now from this function we are going to call these functions right so how to call using this function pointer because this function pointer is having address of these functions right now how to call f ptr and just pass the argument like i am passing 5 comma 1 that's it or simply you can write fptr rather than this s trig that is also fine that will work right 5 and 1. now in main function what we are doing in main function suppose i am calling what here i am calling this display function display and this time i am passing address of this function so how to pass address simply you can write address of sum or rather than ampersand you can simply pass the name of the function that also means you are passing address of this base address of this function right next time when i will call i say display and subtract that's it means we are passing a function to a function so for this display function sum and sub these are callback function right we are calling this function display and this function is calling back or calling again these functions means the the sum and sub these are callback function for this display function callback function right we are calling again these function from this function right so see control will go here now we are calling this so display sum we are passing address of the sum obviously this and the sum will having will have some address in the memory starting address we are passing or if you want to find out the address you can simply print the address also right like printf address of the function is percentage p and comma name of the function then you will come to know that this these functions are also having address so it will print the base address of this function if you want to print you can print right when we run this code i will show you that thing also right now address of this function is suppose in the memory this function is here these are having instructions of this function sum and suppose memory is the base address is hundred thousand and suppose in memory this function is sub having instruction one two three of sub and the starting address is suppose one zero four six so here we are passing thousand so to accept this now control will go here to accept this address there must have a function pointer so yeah we have a function pointer right void strict fptr and and right so see now these the return type and the number of arguments these should be same of these function right because we are taking only one pointer one function pointer to call these functions suppose here the data type is float and here we are taking float then obviously this function pointer will contain address of a function which return type is void and which will accept two argument in in and in so it can have address of this function only if you assign address of this maybe it will show some unusual behavior because return type of this is float so i hope you are getting my point all these functions should be of same type like void and here also we are having in because only one function pointer we have using that function pointer only we are going to access all the functions maybe you have two three or ten functions right so now here we are passing thousand so in fptr we have thousand so now this fptr is now pointing to suppose we have a in memory we have fptr this one and now this is pointing to here thousand so within this first of all we are going to dereference it strict ptr the value at this ptr is this code and now in this code we are passing five and one so here it will go to here now here we are passing five and one so five and one so it will print six right next time we are calling sum so this time it will pass 1046 so now at this time fptr is having one zero four six so now it is going to call this function now in we have five and one subtraction would be four so it will print six and four so see using one function only we can call these two functions right at runtime you can pass the name of the function or the address of the function and you can call that function simple as that using function pointer and this is possible only using function pointer so this mechanism is nothing but call by method right and here call by a function callback function is what sum and sub right so i hope you got this thing see i have taken a simple example because this is a little bit confusing callback function this kind of thing so that's why i have taken a simple example so now let's run this and see what output you are getting you can try out different different programs that are of complicated level at your own using function pointer right so now let's create a new file callback function dot c right and here you will take let's take two function void sum and here we are just printing sum equal to percentage d slash n and a plus b you can also write down like return a plus b that is also fine but rather than word there then you have to use int right that is also fine you can take this thing now here we are having next function is sub and just i am printing a minus b right and one more function is what i am taking display so here we'll take function pointer f ptr and it should accept two arguments and here from here we are calling so f b d r and i am passing the argument suppose 5 comma 1 now in main what we do we will call display and first time we'll pass the address of sum and next time we'll pass sub right so now let's run this and see what output you are getting see sum is equal to 6 and sub is equal to 4 so i hope you go to this now you can try out different different variations and different different types of programs you know passing a function to a function as an argument that is nothing but a callback method so that's it for this video now so now in the next video we'll see even more application of function pointers and i'll see in the next video till then bye bye take care
