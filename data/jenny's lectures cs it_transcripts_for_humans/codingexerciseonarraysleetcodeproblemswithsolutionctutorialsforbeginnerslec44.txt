With timestamps:

00:00 - hey everyone I hope you are safe and
00:01 - doing good so in the series of learning
00:03 - C++ programming language we have
00:05 - discussed arrays in C++ right so based
00:07 - on that arrays concept we'll see uh in
00:10 - this video three to four problems coding
00:13 - exercises right in which we'll discuss
00:16 - two or three lead code problems as well
00:18 - on arrings right so see these are the
00:22 - problems so first these two questions
00:24 - are very very very simple actually after
00:26 - that we'll discuss two or three lead
00:27 - code problems right so this is kind of
00:29 - warm up for you guys right so first
00:32 - question is you have to declare an array
00:34 - of 15 integers right and then you have
00:38 - to initialize the array so that all the
00:41 - array elements are
00:44 - zero right then you have to assign 10 to
00:49 - the first element of that array and 150
00:51 - to the last element of that array and
00:53 - this you have to print that are that's
00:55 - it this is very simple I guess right so
00:58 - you pause the video and try this out I
01:01 - will show you the program right there
01:04 - for this and for this also don't worry
01:06 - right second question is you have to
01:09 - write down a program to read two arrays
01:13 - each of size five right and you have to
01:18 - store the sum of these two arrays into a
01:21 - third
01:22 - array right this is also not so much Stu
01:25 - just read two arrays some values add two
01:29 - arrays and print the sum of that those
01:31 - two arrays into a third array right so
01:35 - you can just pause the video right now
01:36 - and try to solve these two questions
01:39 - after that we will move to lead code
01:40 - questions right okay I hope you have
01:43 - done this so the first is you have to
01:45 - declare an array of 15 integers so
01:48 - simply 15 integer any array name you can
01:50 - take I'm taking a r
01:52 - r and size is 15 right and initialize
01:58 - the array so that all the elements are
01:59 - are zero so how you can initialize at
02:02 - the here
02:03 - only 0o 1 Z right and obviously
02:07 - remaining elements would be all zero so
02:09 - you don't need to write down 15 Z here 0
02:11 - 0 0 0 no all the elements would be zero
02:15 - right but here one twist is if I want
02:18 - you to assign all the
02:20 - 15 elements to one I mean initialize
02:24 - this are so that all the 15 elements are
02:26 - one maybe if you will say here just
02:28 - write down one and all the 15 elements
02:30 - would be one no that is not the case in
02:32 - this case only first element would be
02:34 - one all the remaining 14 element would
02:36 - be would be 0 0 0 0 right so this is
02:41 - also for your assignment you have to
02:43 - write down this also in comment section
02:45 - how to assign all the with one or any
02:48 - particular value any one value either
02:50 - one or two or 10 or any one value right
02:53 - you don't need to write 1 one one 1 1 15
02:56 - time
02:57 - no right okay now this is what we have
03:01 - assigned zero right then assign 10 to
03:04 - the first element so how to access first
03:06 - element a r r first element would be at
03:09 - zero index why this thing we have I have
03:11 - told you in previous video why the index
03:13 - is zero so 10 and the last element would
03:16 - be at which index size minus one size of
03:19 - the is 15 so 14 at 14 14 is equal to
03:23 - 150 and with a for Loop you can print
03:26 - this are right I hope you got this we'll
03:28 - see program also next is the logic of
03:31 - this is you have to read two arrays so
03:33 - suppose I'm taking here two
03:35 - arrays right so one array is something
03:38 - like this here we have 0 1 10 - 1 15
03:43 - here we have any
03:47 - value right and you have to take a third
03:50 - array and
03:53 - there sum 1 + 0 1 15 + 1 16 0 + 10 10 7
04:00 - - 1 6 10 or 15 25 and you have to print
04:05 - this array three so this thing you need
04:07 - to do right I think you can do this
04:11 - right with a for Loop just read this
04:13 - array or if you don't want to read just
04:15 - initialize here only when you at compile
04:18 - time only right when you declare that
04:20 - array both the arrays and in third array
04:24 - just have to take for Loop and access
04:27 - the element of array one and array two
04:29 - and just add those right and store into
04:32 - a third array and print this array right
04:35 - so this is also not so much stuff right
04:38 - so first let me just show you if you
04:40 - haven't done let me just show you
04:42 - practical of these two problem statement
04:44 - right program for these right then we
04:47 - will see this two some problem this is a
04:50 - lead code problem right okay so let's
04:52 - create a new file I hope you have done
04:54 - those basic problems right okay so let's
04:58 - start writing program now now in this in
05:00 - main what you have to do you have to
05:02 - declare an array of size 15 and you have
05:05 - to initialize that array with all values
05:09 - zero so this we can do now we have to
05:11 - assign first
05:14 - element so first element is at zero
05:16 - index so aray of zero would be 10 this
05:19 - is how we can modify array elements this
05:22 - is what I want to tell you in this
05:24 - exercise and the last element last
05:26 - element would be at 14th index equal to
05:29 - it's I think 150
05:31 - right now simply print this array how
05:35 - you will print definitely with a for
05:37 - Loop if you want to access all the
05:39 - elements either you can write down 15 C
05:42 - out statement see out array of zero see
05:45 - out aray of one C out aray of two like
05:47 - this all the elements right but
05:49 - obviously that thing we don't want the
05:51 - duplicacy or that repetition that thing
05:53 - we can do with four Loop right so just
05:55 - repeat these line 15 times the one line
05:58 - C out line so just start with I i0 till
06:05 - 15 because index is from 0o AR index is
06:10 - from 0 so 0 to 15 less than 15 so it
06:13 - will be 0 to 14 right and simply print C
06:16 - out array of
06:20 - I right and
06:23 - and
06:25 - right and return
06:27 - zero let me just run this and I'll show
06:30 - you what output you will get here see
06:32 - the first is 10 0 0 0 0 and the last is
06:36 - 150 right so I hope you got this this
06:39 - was our first
06:40 - exercise this is our first coding
06:42 - problem right here we will solve the
06:45 - next one you have to take two arrays so
06:49 - we'll just take array one and
06:53 - initialize okay let's suppose we will
06:54 - not initialize this array here we will
06:57 - take input from the user so array one
07:01 - array two is also five size right sorry
07:04 - here would be semicolon now you have to
07:06 - let me in commment section sorry it's
07:08 - comma what is the size of third array
07:11 - because you have to store addition of
07:13 - these two arrays in third array so
07:15 - obviously that would be five same
07:18 - right so we have three arrays right now
07:23 - let's ask from the
07:24 - user input first array input second
07:27 - array first right so see
07:38 - out this line would be printed and we
07:41 - can
07:42 - just better to take
07:44 - here in I at starting to zero so you
07:49 - don't have to write down here data type
07:51 - so just use I directly I equal to0 and I
07:55 - should be less than 5 and I
07:57 - ++ right and here with the help of scene
08:01 - we can take the values rr1 is
08:06 - I now
08:08 - same one for Loop to enter
08:13 - secondary and it should be ARR
08:16 - two
08:20 - right let's run run this and see if it's
08:23 - working or not see enter first are
08:26 - element 1 2 3 4 or five element enter
08:30 - second
08:32 - element yeah it is taking all the
08:34 - elements right okay now you have to do
08:38 - sum and you have to do you have to store
08:41 - into a
08:43 - third array so we are going to access
08:47 - first of all first zero the first
08:50 - element of both the arrays and do some
08:52 - then second element of both the arrays
08:53 - and sum third element of both arays and
08:55 - sum like this right so obviously to
08:57 - exess also we have to use Loop so I
09:01 - equal to 0 I less than 5 and I
09:05 - ++ right so we are not just accessing we
09:08 - are doing a r R1 of
09:12 - I plus a r R2 of I same 0 0 then 1 1
09:18 - then 2 2 then 3 3 then 4 4 right we are
09:21 - getting red line Y so it is undefined
09:23 - okay we have taken only a r r so let's
09:26 - take it three right now in AR3 we just
09:32 - because index is same because whatever
09:34 - is there at zero index zero index that
09:35 - would be sum and at zero index of third
09:38 - array that some would be stored
09:41 - right so now okay this is what we have
09:45 - done now one for Loop we can take and
09:47 - you can just access the third array or
09:49 - here directly you can print see out sum
09:52 - at
09:54 - index
09:57 - I is
10:03 - and how to access the sum a r r
10:07 - of I sorry three of I
10:13 - right now let's run this and see what
10:16 - output you are getting
10:18 - here first a element 1 one one one 1
10:23 - secondary I'm taking only 2 2 2 so Su at
10:26 - zero index is 3 3 3 33 so let's just
10:31 - decorate it a little
10:33 - bit after printing one sum it should the
10:36 - next would be printed in next line so
10:39 - just put a andl right first element
10:44 - one second element 1 2 3 4 5 sorry 45
10:49 - and 5 so sum at zero indexes 2 then
10:52 - three then 4 then 46 and then six right
10:57 - so this is how we can print that third
10:59 - third array or rather than printing here
11:02 - one more for Loop and there you can
11:04 - print you can access this third array
11:06 - right that is up to you so this is our
11:09 - second problem now let me just show you
11:12 - one lead code problem that is two sum
11:14 - problem so let's search lead code
11:16 - question on arrays
11:19 - and here we have
11:22 - C many problems we have so let's take
11:26 - the very simple one to some problem when
11:29 - you click on this problem you will get
11:30 - the description of this problem and that
11:32 - is given an array of integer
11:37 - num
11:41 - C given an array of integers nums the
11:45 - array name is nums and an integer Target
11:48 - return indexes of the two number such
11:51 - that they add up to the Target right and
11:54 - you may assume that each input would
11:56 - have exactly one solution right and you
11:58 - may not use the the same element twice
12:01 - right you can return the answer in any
12:04 - order right now pause the video and let
12:08 - me know in comment section how many of
12:10 - you gotot this problem statement by just
12:12 - reading from this no explanation from a
12:15 - third person right because it is very
12:17 - important when you're going to solve the
12:19 - problem you have to first understand the
12:20 - problem right if you're not getting
12:23 - exactly then how obviously you are going
12:24 - to solve that problem right so read out
12:27 - this problem one time two times three
12:29 - times four time five times just take a
12:30 - break and read it again and try to
12:32 - understand what is the problem because
12:35 - that is also a
12:37 - skill right before you know improving
12:41 - your coding skill you have
12:43 - to develop that skill also you have to
12:47 - understand the
12:48 - problems right I hope you got this what
12:51 - you have to do if you got this you can
12:53 - just pause the video right now and start
12:56 - writing this thing right now here what
12:58 - it is saying if you're not getting you
12:59 - can just uh see the examples like input
13:03 - would
13:04 - be input is this array 2 7 11 15 the
13:08 - target is 9 so output should be
13:11 - 01 01 output should be indexes of two
13:16 - numbers so 0 one are index at 0 and 1 we
13:19 - have 2 and 7 so 2 + 7 is 9 right so one
13:22 - array is given one target is given you
13:25 - have to find out the two numbers exactly
13:28 - two numbers which add up to the this
13:31 - target but you don't have to return
13:33 - those number you have to return return
13:34 - index of those numbers right here like 0
13:38 - 1 next example is 3 2 4 Target is six so
13:42 - what is the output 1 2 1 2 because 2 + 4
13:46 - is 6 next is 3 three the target is 6 so
13:49 - it will give 0
13:51 - 1 right so how you will do this okay so
13:56 - let's see the logic how we are going to
13:57 - solve this two some problem problem this
13:59 - is like an example this is input Target
14:03 - is n so output should be 0 and one the
14:06 - index of those two elements whose sum
14:08 - is the target so nine sum of 2 and 7 is
14:13 - N9 so index of 2 and 7 if we represent
14:16 - this in Array then 2 7 11 15 the name of
14:21 - this array is num so index would be 0 1
14:24 - 2 3 so it should give 0 and one if I say
14:27 - the target is
14:29 - 18 so output should
14:32 - be this and this because 7 + 11 is
14:37 - 18 right so it should be 1 and 2
14:42 - something like this right now how you
14:44 - will do this if you have seen that
14:46 - coding exercise in which we have done
14:49 - right you have to find out the sum of
14:52 - product of all the pairs of AR elements
14:56 - right if you have done that exercise
14:58 - then easily you can do this thing from
15:00 - there you will get the idea how you are
15:02 - going to solve this problem right so if
15:04 - you want some hint then go and watch
15:07 - that video I'll put that link in this
15:09 - side button and then come to this video
15:10 - and pause this video and solve this
15:13 - problem right if still you are not
15:16 - getting let me just tell you a little
15:17 - bit see how we can do this if suppose
15:20 - Target is 18 so you have to find out and
15:23 - there's exactly one solution that we
15:26 - know for sure right so for take
15:29 - two we will check 2 plus next
15:33 - element is this
15:36 - 18 no then we will see 2
15:39 - + 11 is this 18 no then 2 + 15 is this
15:44 - 18
15:46 - no then we take next element right like
15:50 - seven 7 plus no need to do plus with 2 7
15:56 - + 2 is 9 this and this is same 2 + 7 7 +
15:59 - 2 both are same so no need to do this
16:02 - thing so just we do 7 plus the next
16:07 - Element no need to check the sum with
16:09 - previous element I hope you're getting
16:11 - my point 7 + 11 is this
16:16 - 18 yes this is
16:18 - 18 so index of this and this it will
16:21 - give right if sum is not 18 in case Su
16:25 - is suppose I'm taking 26
16:29 - so 7
16:30 - + 11 is this 26 no then 7 + 15 is this
16:36 - 26 no then we check 11 plus no need to
16:40 - check with 11 + 7 11 + 2 because 11 7 +
16:44 - 11 we have done and this thing so back
16:46 - is not you know not necessary to check
16:49 - because both are same so just do with
16:51 - next Element 11 + 15 is this 26 yes so
16:57 - this index it will return so now index
16:59 - would be 2 and 3 so this you need to
17:02 - check check so this is what you have to
17:04 - find out the pairs that we have done in
17:08 - previous video and the target is if the
17:11 - target is some of those two
17:15 - pairs I mean those that pair then return
17:19 - the index of those thing uh those
17:21 - elements right so for that we need two
17:25 - Loop because one is we will take this 2
17:29 - and for with this
17:32 - 2 2 2 we take 7 11 15 right then we take
17:38 - seven with this 7 we will take 11 and 15
17:42 - then we take this 11 with this 11
17:44 - obviously we have only one element 15
17:46 - right so one Loop is for this this thing
17:49 - and second Loop is
17:51 - for this value change right so one Loop
17:55 - suppose we are taking like I I is equal
17:57 - to 0 I less than 4 and because the size
18:00 - of R is 4 and I ++ right and then we can
18:03 - take next Loop that is J is equal to J
18:05 - should be started from the next element
18:08 - because we want to pair if we take two
18:11 - then pair with next element if we take
18:13 - seven then pair with next element so J
18:15 - would be I + 1 should start from I + 1 I
18:18 - is zero the J would start from 1 right
18:21 - so J less than same 4 and j++ and there
18:26 - directly we check if if the this a of I
18:30 - plus a of
18:32 - J is equal to is equal to the Target
18:36 - value right then simply you can print I
18:41 - and J because in I and J we have
18:44 - Index right that's it this is the simple
18:47 - logic I hope you got this you can dry
18:50 - this thing right let me just dry this
18:53 - for you uh 102 iteration at first this
18:56 - is I is zero and J is
18:59 - I + 1 is 1 so if a of I + a of J so I is
19:03 - z it is 1 right so access these two
19:08 - elements 2 + 7 is this equal to Target
19:11 - Target is 27 7 + 2 9 9 equal to equal to
19:14 - 26 no so we are not going to enter into
19:18 - this if block we not print this thing
19:21 - and we simply do now j++ so J is 2 I is
19:25 - still zero because we are still in inner
19:27 - loop so now J is 2 so a of 0 a of 2 a of
19:32 - 0 a of 2 11 + 2 this condition true no
19:37 - again j++ J is now three now a of 0 and
19:42 - a of three 0 and 3 2 + 15 17 is this
19:46 - equal to 26 no now J becomes four but
19:49 - now this condition is not true right so
19:51 - we'll exit from this Inner Loop and now
19:53 - in Outer Loop now i+ plus I becomes one
19:56 - right so these thing we we have done we
20:00 - have checked
20:01 - right now I becomes
20:04 - one right again now J becomes 1 + 1 J
20:09 - would be initialized with now
20:11 - two and I will take one and two then one
20:14 - and three like this I hope you got this
20:17 - you can just try on this complete
20:19 - completely
20:21 - right so now let me just uh you know
20:25 - write down the program for this let's
20:26 - see the code for this do some problem
20:29 - we'll take same example same you know
20:32 - name and all so num is there name nums
20:35 - 27 11 15 Target is 9
20:38 - right so simply what you can write down
20:41 - two for Loop one for Loop is for
20:44 - like okay rather than again and again
20:47 - writing int and int here what we can do
20:50 - just take in I is equal to 0 a loop
20:53 - variable right so here simply we can
20:57 - write down I is equal to 0 and then I
21:00 - less than size of the is 4 and I
21:06 - ++ right now within this one more for
21:09 - Loop you have to take because
21:11 - one two number you have to you know
21:16 - check out at one time 2 and 7 2 and 11
21:21 - so to store or to you know uh fetch
21:24 - these two numbers definitely you need to
21:28 - access these two numbers right so you
21:31 - will need two pointers actually or you
21:33 - can say you will need two index so that
21:35 - is why we are taking two pointer I and J
21:39 - or two variable I and J just to access
21:43 - those two values at the same time right
21:46 - with obviously two for Loop nexted for
21:48 - Loop so here we have in J is equal to i+
21:52 - one because that would be from next
21:54 - element it should be started from next
21:55 - element less than 4 and a
21:59 - ++ right and simply we can do if this
22:03 - target whatever the target is equal to
22:05 - is equal to a of
22:08 - I plus a of
22:13 - J
22:16 - sorry simple then simply
22:21 - print
22:22 - I and with one space j
22:31 - because obviously we want I and J okay
22:34 - it's not a the name of that is nums
22:37 - sorry this is the simple one so let's
22:40 - run this and see what out we are getting
22:43 - 0o and one index is 01 if you want to
22:46 - check out again suppose Target is not 9
22:49 - it's uh
22:52 - 18 so what it should give 1 and two see
22:56 - 1 and 2
22:59 - right but if the target is not
23:02 - here but that is different case because
23:05 - we have like exact one solution there's
23:07 - exactly one solution definitely so if
23:11 - not present then after this see out
23:13 - after these four Loop we can simply
23:15 - print if you want to add this case
23:18 - also or no such two number
23:22 - exist right so if the target is 19 and
23:26 - if we run this so it will show you no
23:29 - such two number
23:31 - exist right now next lead code problem
23:34 - is we have you have to find out unique
23:37 - element in the
23:38 - [Music]
23:40 - array this one we have single number or
23:43 - we can select given a non empty array of
23:46 - integer nums every element appears twice
23:49 - every element appears twice except for
23:51 - one right find that single one you must
23:55 - Implement a solution with a linear and
23:56 - time complexity or use only
23:59 - okay this thing if you you are not aware
24:00 - about time complexity and space you can
24:02 - ignore this thing but you just have to
24:04 - read out this problem statement and you
24:06 - have to understand what you have to do
24:07 - here right you can just think you can
24:10 - just uh you know watch out these example
24:12 - input is 2 to 1 so output is one here 41
24:16 - 2 1 2 output is 4 so every element in
24:19 - the array is twice two time only one
24:22 - element is one time here four is one
24:23 - time so you have to return that
24:25 - element if one element so obviously it
24:28 - will return one
24:30 - only right here one is one time so it is
24:33 - returning one
24:34 - only so pause the video think about this
24:37 - and try to solve this problem okay so
24:39 - let's understand the logic of this every
24:42 - element is two time only one element is
24:44 - once and so you have to find out that
24:47 - element which is once in that array
24:50 - right so one ways simply if you think
24:54 - then simple in simple you know simple
24:56 - logic is what
24:58 - we will say count occurrence of every
25:03 - element and if the occurrence is one
25:06 - just print that
25:09 - element right so occurrence of four is
25:12 - one occurrence of this one is two like
25:15 - two is two so we just print this four
25:18 - right you can use nested
25:21 - Loops right same one Loop one I will
25:26 - hold this value and second second Loop J
25:28 - will check the next value next value
25:30 - next value next value and if four is one
25:33 - more time just count just to count plus
25:35 - plus count becomes two count like this
25:38 - right then I becomes this and then check
25:41 - obviously for all the elements right so
25:45 - like this nested Loops so but the time
25:48 - complexity for this would be order of n
25:51 - square right you have to do more
25:54 - comparison in this case so that would be
25:56 - worst case that would be not efficient
25:59 - algorithm because if you are writing
26:01 - your program or algorithm that would be
26:02 - efficient that is also check the
26:04 - efficiency and that would be measured in
26:05 - terms of time and space complexity right
26:08 - so here time complexity would be more in
26:10 - this approach this is worst case
26:11 - approach it's like same if from uh
26:16 - another room you have to uh take three
26:18 - bottles so what you will do one approach
26:20 - is you just go and bring one bottle
26:23 - again you'll go to that room another
26:26 - bottle again go to that room another
26:27 - bottle so three bottles and you are
26:29 - going three times to that room to bring
26:31 - those three bottle another approach is
26:32 - what you just go one time to that room
26:35 - pick all the three bottles and at once
26:37 - you will you bring both the you know all
26:40 - the bottles at once right so that second
26:42 - approach is better right same here also
26:46 - which algorithm which program which
26:47 - approach is better that is also measured
26:50 - and uh based on complexi time complexity
26:53 - and space complexity right this topic
26:56 - also in DSA I think I I haven't
26:58 - discussed this topic but I'll discuss
27:00 - this thing also how to find out the
27:02 - complexities and all right so you need
27:05 - to find out a better solution so one
27:06 - thing another approach what you can do
27:08 - you just think and you can write down in
27:10 - comment section how many approaches we
27:12 - can I mean how many approaches are there
27:14 - to solve this problem second is we can
27:16 - just sort this array first right if you
27:19 - sort this array then array would be one
27:21 - 1 2 2 and 4 just compare the adjacent
27:25 - element right if one is two time then
27:28 - definitely the adjacent element would be
27:30 - one that is for sure right so just
27:32 - compare adjacent elements with one Loop
27:35 - only you'll require one Loop right if
27:37 - both are same you just do if this is I
27:41 - just compare with this I + one right and
27:44 - after that jump two steps not I ++ I + 2
27:49 - then compare this with this like this
27:52 - right and if the adjacent element are
27:55 - not same these are same same you move
27:58 - here now there is no element next so
28:00 - this would be only one time so like this
28:02 - you have to do you can do this thing by
28:05 - sorting this are right that would take
28:07 - order of n l n right another very simple
28:10 - approach is what I hope you have heard
28:11 - about exor operator bitwise exore this
28:14 - thing what is truth table for this
28:21 - exore if both bits are same it will give
28:24 - zero if both bits are different it will
28:26 - give one if both bits are same it will
28:28 - give 0 0 0 same 0 1 1 0 if bits are
28:32 - different then it will give one so this
28:34 - is what exor operator right so this
28:38 - thing we can
28:39 - do like if we apply exore in this case
28:43 - so like 4 exor 1 exor 2 exor 1 exor
28:46 - 2 so two and two are same so it would be
28:50 - zero 1 and one are same it would be also
28:53 - zero and if you do exort Zer with four
28:57 - then definitely it will give four
28:59 - because four and zero are not same so
29:02 - that would be like you can say the
29:04 - answer right so if you do exort of zero
29:08 - with any number then that number would
29:09 - be so definitely four is the answer here
29:12 - right then how how you will do here
29:14 - see at First We Take a number the answer
29:18 - suppose uh the output whatever is that
29:21 - thing is zero right so just take one
29:25 - Loop that would be from here to here
29:27 - right we'll do exort of a of I every
29:31 - number of this every element of this
29:33 - array with this number so at first let
29:35 - me just iterate you for for you iterate
29:38 - it for you at first number is 0 so 0 0 0
29:42 - 0 right so Z in binary suppose I
29:45 - represent with four bits so 0 0 0 now
29:48 - this this is what num is equal to num
29:50 - exor AI right so num is zero exor AI at
29:54 - first I is zero so four so we have Z 0
29:57 - exor 4 if you convert four in binary
30:00 - then that would be 1 2 4 8 so 1 0 0 like
30:06 - this so it is 0 1 0
30:09 - 0 so exor of these are 0 0 0 0 1 0 four
30:15 - only right so in Num at
30:19 - first we have 0er now we have four now I
30:23 - ++ right I was at first zero now I
30:27 - become comes one so number is four means
30:31 - 0 1 0 0 a of 1 a of 1 is because I is
30:35 - one now one how to represent one in
30:38 - binary something like this now do exor
30:40 - because exor this is bitwise exor and
30:42 - this would be done on bits actually
30:45 - right so number would be converted into
30:46 - bits first so both are different 1 0 1 0
30:51 - so this becomes what five right so in
30:55 - number now we have five now I + plus I
30:58 - becomes two so number is five and now a
31:01 - of two a of two is two now exort with
31:05 - two now two is this so here we have 1 1
31:09 - 1 0er so this is what seven I number we
31:13 - have 7 right I ++ now I becomes 3 0 1 2
31:19 - 3 a of 3 means 1 so exor of 7 with 1 0 0
31:23 - 0 1 so 0 1 1 0 so this becomes six this
31:28 - becomes six number is six now in Num we
31:32 - have six now I becomes 4 A4 is 2 so 6
31:37 - EXO 2 2 is what 0 0 1 0 now 0 0 and here
31:44 - we have 1 0 this is what number is this
31:49 - binary and convert into decimal that is
31:51 - four now so in Num we have now four now
31:54 - I becomes five is this condition true
31:58 - no exit from the loop and just print the
32:00 - number in Num we have four and the
32:03 - answer is
32:05 - four so this is how actually the inner
32:07 - working of this exor operation right
32:10 - it's not like we directly uh here it
32:13 - would be done one then two then one and
32:16 - then cancel out this cancel out this and
32:19 - the answer would be
32:20 - four yeah the funai is this only right
32:25 - but the idea is this only but the behind
32:27 - the scene what is the working of this
32:29 - code is something like this this exor
32:32 - would be done and at last we will get
32:33 - four right so now I hope you got this
32:36 - how to do exore
32:38 - with sorry how to find out unique
32:40 - element with this this method using EXO
32:44 - right and here the time complexity would
32:46 - be order of n only right because only
32:48 - one
32:49 - time we are just going from here to here
32:52 - that's it and we'll get the
32:55 - answer see so how many come comparisons
32:57 - are there basically you have to do you
32:59 - have to find out that thing so how many
33:01 - comparisons are there from 0 to 5 that
33:03 - is n comparison n comparison only fine
33:07 - and time the loop would be
33:09 - executed right so this is how that that
33:12 - is the way how you find out the time
33:13 - complexity right in detail also I'll I
33:16 - I'll you know discuss how to find out
33:18 - time complexities right so here it is
33:20 - order of in so let's now write down
33:22 - program for this now this is the array
33:25 - we are taking right so just have to
33:27 - Traverse this
33:29 - array from 0er to definitely end of the
33:33 - array till five and I
33:37 - ++ and yeah let's take a number suppose
33:41 - I'm taking num is equal to at first
33:43 - number zero or you can say answer is
33:45 - zero answer you can take answer is zero
33:49 - it's up to you
33:50 - right now you just have to do answer
33:54 - equal to answer
33:58 - exort a of sorry AR name is num of I so
34:03 - exort with every element right and at
34:07 - last just print the answer that's it so
34:13 - it should give
34:14 - four I have already you know try on this
34:18 - thing see the answer is four so I hope
34:20 - you are getting why this is giving this
34:23 - correct answer and how the working of
34:24 - this exor operator if suppose I write
34:28 - here four and four but I write here one
34:30 - is one time so our answer should be one
34:34 - see the answer is
34:36 - one right so now one assignment for you
34:40 - guys is if this is the case you have to
34:43 - find out every element in the array is
34:45 - once but one element is twice so you
34:48 - have to find out that
34:49 - element right so this is the case like
34:53 - every element is single once and one
34:56 - element is twice so here four is two
34:58 - time 2 1 3 it is one time only so you
35:01 - have to find out that thing so the
35:02 - answer would be here also four right I
35:05 - hope you got the problem statement here
35:07 - in this case you have found out the
35:09 - unique element but there you have to
35:10 - find out which element is twice right so
35:14 - I hope you got the basic idea like if
35:15 - the problem is given then how to
35:17 - approach that problem how to think right
35:21 - now first we will see there are many
35:22 - problems lead code problems we will
35:24 - discuss right but first we will see like
35:27 - what are vectors what are functions
35:29 - because in those problems we have to use
35:31 - those things also right to write down a
35:35 - better better program right so first
35:37 - we'll see those things and then we'll
35:39 - see more lead code problems in this
35:41 - course we'll discuss many lead code
35:44 - problems also right so now that's it for
35:46 - this video next video we'll see in the
35:48 - next we'll see multi-dimensional arrays
35:51 - particularly 2D arays so now I'll see
35:52 - you in the next video bye-bye take
35:55 - care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we have discussed arrays in C++ right so based on that arrays concept we'll see uh in this video three to four problems coding exercises right in which we'll discuss two or three lead code problems as well on arrings right so see these are the problems so first these two questions are very very very simple actually after that we'll discuss two or three lead code problems right so this is kind of warm up for you guys right so first question is you have to declare an array of 15 integers right and then you have to initialize the array so that all the array elements are zero right then you have to assign 10 to the first element of that array and 150 to the last element of that array and this you have to print that are that's it this is very simple I guess right so you pause the video and try this out I will show you the program right there for this and for this also don't worry right second question is you have to write down a program to read two arrays each of size five right and you have to store the sum of these two arrays into a third array right this is also not so much Stu just read two arrays some values add two arrays and print the sum of that those two arrays into a third array right so you can just pause the video right now and try to solve these two questions after that we will move to lead code questions right okay I hope you have done this so the first is you have to declare an array of 15 integers so simply 15 integer any array name you can take I'm taking a r r and size is 15 right and initialize the array so that all the elements are are zero so how you can initialize at the here only 0o 1 Z right and obviously remaining elements would be all zero so you don't need to write down 15 Z here 0 0 0 0 no all the elements would be zero right but here one twist is if I want you to assign all the 15 elements to one I mean initialize this are so that all the 15 elements are one maybe if you will say here just write down one and all the 15 elements would be one no that is not the case in this case only first element would be one all the remaining 14 element would be would be 0 0 0 0 right so this is also for your assignment you have to write down this also in comment section how to assign all the with one or any particular value any one value either one or two or 10 or any one value right you don't need to write 1 one one 1 1 15 time no right okay now this is what we have assigned zero right then assign 10 to the first element so how to access first element a r r first element would be at zero index why this thing we have I have told you in previous video why the index is zero so 10 and the last element would be at which index size minus one size of the is 15 so 14 at 14 14 is equal to 150 and with a for Loop you can print this are right I hope you got this we'll see program also next is the logic of this is you have to read two arrays so suppose I'm taking here two arrays right so one array is something like this here we have 0 1 10 1 15 here we have any value right and you have to take a third array and there sum 1 + 0 1 15 + 1 16 0 + 10 10 7 1 6 10 or 15 25 and you have to print this array three so this thing you need to do right I think you can do this right with a for Loop just read this array or if you don't want to read just initialize here only when you at compile time only right when you declare that array both the arrays and in third array just have to take for Loop and access the element of array one and array two and just add those right and store into a third array and print this array right so this is also not so much stuff right so first let me just show you if you haven't done let me just show you practical of these two problem statement right program for these right then we will see this two some problem this is a lead code problem right okay so let's create a new file I hope you have done those basic problems right okay so let's start writing program now now in this in main what you have to do you have to declare an array of size 15 and you have to initialize that array with all values zero so this we can do now we have to assign first element so first element is at zero index so aray of zero would be 10 this is how we can modify array elements this is what I want to tell you in this exercise and the last element last element would be at 14th index equal to it's I think 150 right now simply print this array how you will print definitely with a for Loop if you want to access all the elements either you can write down 15 C out statement see out array of zero see out aray of one C out aray of two like this all the elements right but obviously that thing we don't want the duplicacy or that repetition that thing we can do with four Loop right so just repeat these line 15 times the one line C out line so just start with I i0 till 15 because index is from 0o AR index is from 0 so 0 to 15 less than 15 so it will be 0 to 14 right and simply print C out array of I right and and right and return zero let me just run this and I'll show you what output you will get here see the first is 10 0 0 0 0 and the last is 150 right so I hope you got this this was our first exercise this is our first coding problem right here we will solve the next one you have to take two arrays so we'll just take array one and initialize okay let's suppose we will not initialize this array here we will take input from the user so array one array two is also five size right sorry here would be semicolon now you have to let me in commment section sorry it's comma what is the size of third array because you have to store addition of these two arrays in third array so obviously that would be five same right so we have three arrays right now let's ask from the user input first array input second array first right so see out this line would be printed and we can just better to take here in I at starting to zero so you don't have to write down here data type so just use I directly I equal to0 and I should be less than 5 and I ++ right and here with the help of scene we can take the values rr1 is I now same one for Loop to enter secondary and it should be ARR two right let's run run this and see if it's working or not see enter first are element 1 2 3 4 or five element enter second element yeah it is taking all the elements right okay now you have to do sum and you have to do you have to store into a third array so we are going to access first of all first zero the first element of both the arrays and do some then second element of both the arrays and sum third element of both arays and sum like this right so obviously to exess also we have to use Loop so I equal to 0 I less than 5 and I ++ right so we are not just accessing we are doing a r R1 of I plus a r R2 of I same 0 0 then 1 1 then 2 2 then 3 3 then 4 4 right we are getting red line Y so it is undefined okay we have taken only a r r so let's take it three right now in AR3 we just because index is same because whatever is there at zero index zero index that would be sum and at zero index of third array that some would be stored right so now okay this is what we have done now one for Loop we can take and you can just access the third array or here directly you can print see out sum at index I is and how to access the sum a r r of I sorry three of I right now let's run this and see what output you are getting here first a element 1 one one one 1 secondary I'm taking only 2 2 2 so Su at zero index is 3 3 3 33 so let's just decorate it a little bit after printing one sum it should the next would be printed in next line so just put a andl right first element one second element 1 2 3 4 5 sorry 45 and 5 so sum at zero indexes 2 then three then 4 then 46 and then six right so this is how we can print that third third array or rather than printing here one more for Loop and there you can print you can access this third array right that is up to you so this is our second problem now let me just show you one lead code problem that is two sum problem so let's search lead code question on arrays and here we have C many problems we have so let's take the very simple one to some problem when you click on this problem you will get the description of this problem and that is given an array of integer num C given an array of integers nums the array name is nums and an integer Target return indexes of the two number such that they add up to the Target right and you may assume that each input would have exactly one solution right and you may not use the the same element twice right you can return the answer in any order right now pause the video and let me know in comment section how many of you gotot this problem statement by just reading from this no explanation from a third person right because it is very important when you're going to solve the problem you have to first understand the problem right if you're not getting exactly then how obviously you are going to solve that problem right so read out this problem one time two times three times four time five times just take a break and read it again and try to understand what is the problem because that is also a skill right before you know improving your coding skill you have to develop that skill also you have to understand the problems right I hope you got this what you have to do if you got this you can just pause the video right now and start writing this thing right now here what it is saying if you're not getting you can just uh see the examples like input would be input is this array 2 7 11 15 the target is 9 so output should be 01 01 output should be indexes of two numbers so 0 one are index at 0 and 1 we have 2 and 7 so 2 + 7 is 9 right so one array is given one target is given you have to find out the two numbers exactly two numbers which add up to the this target but you don't have to return those number you have to return return index of those numbers right here like 0 1 next example is 3 2 4 Target is six so what is the output 1 2 1 2 because 2 + 4 is 6 next is 3 three the target is 6 so it will give 0 1 right so how you will do this okay so let's see the logic how we are going to solve this two some problem problem this is like an example this is input Target is n so output should be 0 and one the index of those two elements whose sum is the target so nine sum of 2 and 7 is N9 so index of 2 and 7 if we represent this in Array then 2 7 11 15 the name of this array is num so index would be 0 1 2 3 so it should give 0 and one if I say the target is 18 so output should be this and this because 7 + 11 is 18 right so it should be 1 and 2 something like this right now how you will do this if you have seen that coding exercise in which we have done right you have to find out the sum of product of all the pairs of AR elements right if you have done that exercise then easily you can do this thing from there you will get the idea how you are going to solve this problem right so if you want some hint then go and watch that video I'll put that link in this side button and then come to this video and pause this video and solve this problem right if still you are not getting let me just tell you a little bit see how we can do this if suppose Target is 18 so you have to find out and there's exactly one solution that we know for sure right so for take two we will check 2 plus next element is this 18 no then we will see 2 + 11 is this 18 no then 2 + 15 is this 18 no then we take next element right like seven 7 plus no need to do plus with 2 7 + 2 is 9 this and this is same 2 + 7 7 + 2 both are same so no need to do this thing so just we do 7 plus the next Element no need to check the sum with previous element I hope you're getting my point 7 + 11 is this 18 yes this is 18 so index of this and this it will give right if sum is not 18 in case Su is suppose I'm taking 26 so 7 + 11 is this 26 no then 7 + 15 is this 26 no then we check 11 plus no need to check with 11 + 7 11 + 2 because 11 7 + 11 we have done and this thing so back is not you know not necessary to check because both are same so just do with next Element 11 + 15 is this 26 yes so this index it will return so now index would be 2 and 3 so this you need to check check so this is what you have to find out the pairs that we have done in previous video and the target is if the target is some of those two pairs I mean those that pair then return the index of those thing uh those elements right so for that we need two Loop because one is we will take this 2 and for with this 2 2 2 we take 7 11 15 right then we take seven with this 7 we will take 11 and 15 then we take this 11 with this 11 obviously we have only one element 15 right so one Loop is for this this thing and second Loop is for this value change right so one Loop suppose we are taking like I I is equal to 0 I less than 4 and because the size of R is 4 and I ++ right and then we can take next Loop that is J is equal to J should be started from the next element because we want to pair if we take two then pair with next element if we take seven then pair with next element so J would be I + 1 should start from I + 1 I is zero the J would start from 1 right so J less than same 4 and j++ and there directly we check if if the this a of I plus a of J is equal to is equal to the Target value right then simply you can print I and J because in I and J we have Index right that's it this is the simple logic I hope you got this you can dry this thing right let me just dry this for you uh 102 iteration at first this is I is zero and J is I + 1 is 1 so if a of I + a of J so I is z it is 1 right so access these two elements 2 + 7 is this equal to Target Target is 27 7 + 2 9 9 equal to equal to 26 no so we are not going to enter into this if block we not print this thing and we simply do now j++ so J is 2 I is still zero because we are still in inner loop so now J is 2 so a of 0 a of 2 a of 0 a of 2 11 + 2 this condition true no again j++ J is now three now a of 0 and a of three 0 and 3 2 + 15 17 is this equal to 26 no now J becomes four but now this condition is not true right so we'll exit from this Inner Loop and now in Outer Loop now i+ plus I becomes one right so these thing we we have done we have checked right now I becomes one right again now J becomes 1 + 1 J would be initialized with now two and I will take one and two then one and three like this I hope you got this you can just try on this complete completely right so now let me just uh you know write down the program for this let's see the code for this do some problem we'll take same example same you know name and all so num is there name nums 27 11 15 Target is 9 right so simply what you can write down two for Loop one for Loop is for like okay rather than again and again writing int and int here what we can do just take in I is equal to 0 a loop variable right so here simply we can write down I is equal to 0 and then I less than size of the is 4 and I ++ right now within this one more for Loop you have to take because one two number you have to you know check out at one time 2 and 7 2 and 11 so to store or to you know uh fetch these two numbers definitely you need to access these two numbers right so you will need two pointers actually or you can say you will need two index so that is why we are taking two pointer I and J or two variable I and J just to access those two values at the same time right with obviously two for Loop nexted for Loop so here we have in J is equal to i+ one because that would be from next element it should be started from next element less than 4 and a ++ right and simply we can do if this target whatever the target is equal to is equal to a of I plus a of J sorry simple then simply print I and with one space j because obviously we want I and J okay it's not a the name of that is nums sorry this is the simple one so let's run this and see what out we are getting 0o and one index is 01 if you want to check out again suppose Target is not 9 it's uh 18 so what it should give 1 and two see 1 and 2 right but if the target is not here but that is different case because we have like exact one solution there's exactly one solution definitely so if not present then after this see out after these four Loop we can simply print if you want to add this case also or no such two number exist right so if the target is 19 and if we run this so it will show you no such two number exist right now next lead code problem is we have you have to find out unique element in the array this one we have single number or we can select given a non empty array of integer nums every element appears twice every element appears twice except for one right find that single one you must Implement a solution with a linear and time complexity or use only okay this thing if you you are not aware about time complexity and space you can ignore this thing but you just have to read out this problem statement and you have to understand what you have to do here right you can just think you can just uh you know watch out these example input is 2 to 1 so output is one here 41 2 1 2 output is 4 so every element in the array is twice two time only one element is one time here four is one time so you have to return that element if one element so obviously it will return one only right here one is one time so it is returning one only so pause the video think about this and try to solve this problem okay so let's understand the logic of this every element is two time only one element is once and so you have to find out that element which is once in that array right so one ways simply if you think then simple in simple you know simple logic is what we will say count occurrence of every element and if the occurrence is one just print that element right so occurrence of four is one occurrence of this one is two like two is two so we just print this four right you can use nested Loops right same one Loop one I will hold this value and second second Loop J will check the next value next value next value next value and if four is one more time just count just to count plus plus count becomes two count like this right then I becomes this and then check obviously for all the elements right so like this nested Loops so but the time complexity for this would be order of n square right you have to do more comparison in this case so that would be worst case that would be not efficient algorithm because if you are writing your program or algorithm that would be efficient that is also check the efficiency and that would be measured in terms of time and space complexity right so here time complexity would be more in this approach this is worst case approach it's like same if from uh another room you have to uh take three bottles so what you will do one approach is you just go and bring one bottle again you'll go to that room another bottle again go to that room another bottle so three bottles and you are going three times to that room to bring those three bottle another approach is what you just go one time to that room pick all the three bottles and at once you will you bring both the you know all the bottles at once right so that second approach is better right same here also which algorithm which program which approach is better that is also measured and uh based on complexi time complexity and space complexity right this topic also in DSA I think I I haven't discussed this topic but I'll discuss this thing also how to find out the complexities and all right so you need to find out a better solution so one thing another approach what you can do you just think and you can write down in comment section how many approaches we can I mean how many approaches are there to solve this problem second is we can just sort this array first right if you sort this array then array would be one 1 2 2 and 4 just compare the adjacent element right if one is two time then definitely the adjacent element would be one that is for sure right so just compare adjacent elements with one Loop only you'll require one Loop right if both are same you just do if this is I just compare with this I + one right and after that jump two steps not I ++ I + 2 then compare this with this like this right and if the adjacent element are not same these are same same you move here now there is no element next so this would be only one time so like this you have to do you can do this thing by sorting this are right that would take order of n l n right another very simple approach is what I hope you have heard about exor operator bitwise exore this thing what is truth table for this exore if both bits are same it will give zero if both bits are different it will give one if both bits are same it will give 0 0 0 same 0 1 1 0 if bits are different then it will give one so this is what exor operator right so this thing we can do like if we apply exore in this case so like 4 exor 1 exor 2 exor 1 exor 2 so two and two are same so it would be zero 1 and one are same it would be also zero and if you do exort Zer with four then definitely it will give four because four and zero are not same so that would be like you can say the answer right so if you do exort of zero with any number then that number would be so definitely four is the answer here right then how how you will do here see at First We Take a number the answer suppose uh the output whatever is that thing is zero right so just take one Loop that would be from here to here right we'll do exort of a of I every number of this every element of this array with this number so at first let me just iterate you for for you iterate it for you at first number is 0 so 0 0 0 0 right so Z in binary suppose I represent with four bits so 0 0 0 now this this is what num is equal to num exor AI right so num is zero exor AI at first I is zero so four so we have Z 0 exor 4 if you convert four in binary then that would be 1 2 4 8 so 1 0 0 like this so it is 0 1 0 0 so exor of these are 0 0 0 0 1 0 four only right so in Num at first we have 0er now we have four now I ++ right I was at first zero now I become comes one so number is four means 0 1 0 0 a of 1 a of 1 is because I is one now one how to represent one in binary something like this now do exor because exor this is bitwise exor and this would be done on bits actually right so number would be converted into bits first so both are different 1 0 1 0 so this becomes what five right so in number now we have five now I + plus I becomes two so number is five and now a of two a of two is two now exort with two now two is this so here we have 1 1 1 0er so this is what seven I number we have 7 right I ++ now I becomes 3 0 1 2 3 a of 3 means 1 so exor of 7 with 1 0 0 0 1 so 0 1 1 0 so this becomes six this becomes six number is six now in Num we have six now I becomes 4 A4 is 2 so 6 EXO 2 2 is what 0 0 1 0 now 0 0 and here we have 1 0 this is what number is this binary and convert into decimal that is four now so in Num we have now four now I becomes five is this condition true no exit from the loop and just print the number in Num we have four and the answer is four so this is how actually the inner working of this exor operation right it's not like we directly uh here it would be done one then two then one and then cancel out this cancel out this and the answer would be four yeah the funai is this only right but the idea is this only but the behind the scene what is the working of this code is something like this this exor would be done and at last we will get four right so now I hope you got this how to do exore with sorry how to find out unique element with this this method using EXO right and here the time complexity would be order of n only right because only one time we are just going from here to here that's it and we'll get the answer see so how many come comparisons are there basically you have to do you have to find out that thing so how many comparisons are there from 0 to 5 that is n comparison n comparison only fine and time the loop would be executed right so this is how that that is the way how you find out the time complexity right in detail also I'll I I'll you know discuss how to find out time complexities right so here it is order of in so let's now write down program for this now this is the array we are taking right so just have to Traverse this array from 0er to definitely end of the array till five and I ++ and yeah let's take a number suppose I'm taking num is equal to at first number zero or you can say answer is zero answer you can take answer is zero it's up to you right now you just have to do answer equal to answer exort a of sorry AR name is num of I so exort with every element right and at last just print the answer that's it so it should give four I have already you know try on this thing see the answer is four so I hope you are getting why this is giving this correct answer and how the working of this exor operator if suppose I write here four and four but I write here one is one time so our answer should be one see the answer is one right so now one assignment for you guys is if this is the case you have to find out every element in the array is once but one element is twice so you have to find out that element right so this is the case like every element is single once and one element is twice so here four is two time 2 1 3 it is one time only so you have to find out that thing so the answer would be here also four right I hope you got the problem statement here in this case you have found out the unique element but there you have to find out which element is twice right so I hope you got the basic idea like if the problem is given then how to approach that problem how to think right now first we will see there are many problems lead code problems we will discuss right but first we will see like what are vectors what are functions because in those problems we have to use those things also right to write down a better better program right so first we'll see those things and then we'll see more lead code problems in this course we'll discuss many lead code problems also right so now that's it for this video next video we'll see in the next we'll see multidimensional arrays particularly 2D arays so now I'll see you in the next video byebye take care
