With timestamps:

00:00 - hey everyone I hope you all are safe and
00:02 - doing good so almost every day I get
00:03 - this question ma'am how to build
00:05 - programming logic how to improve
00:06 - programming skills how to think how to
00:10 - approach a problem how to start solving
00:12 - a problem logic
00:15 - you're not able to think the logic we
00:17 - are not able to write down code we are
00:18 - not able to solve coding problems yeah
00:20 - we understand everything like some
00:22 - students fall in that category when
00:24 - whenever someone else is explaining the
00:26 - code they understand everything the
00:28 - program whole program the solution but
00:29 - whenever they sit and start writing code
00:32 - they sell they go blank not able to
00:35 - think the logic
00:36 - right how to write down the code how to
00:38 - approach a coding problem
00:41 - right
00:42 - so in this video I will try my best to
00:45 - you know figure out what would be the
00:47 - problems and what would be the solution
00:49 - of this thing generally what mistakes
00:50 - students do right while start solving
00:55 - coding problems and while practicing
00:57 - coding problems as we all know everyone
00:59 - says like practice practice
01:02 - practice is the key to success if you
01:05 - are going to learn coding or programming
01:07 - you have to practice that is the main
01:09 - thing but
01:10 - some other things are also important
01:12 - with the practice right means how you do
01:16 - practice what type of questions you
01:18 - practice how you solved the problems
01:20 - while practicing those questions this
01:22 - thing is also important
01:24 - theory part theoretical knowledge
01:26 - concept building
01:28 - you know that thing is also very
01:30 - important right these things should go
01:32 - parallely
01:34 - so how these things should go parallely
01:37 - when you should go for concept building
01:39 - when you should go for 30 part when you
01:41 - should go for practicing part
01:43 - how you should practice the questions
01:45 - how many questions easy medium or
01:47 - advanced level questions everything we
01:49 - are going to discuss in this video means
01:50 - you can say ultimately some tips to
01:53 - build your programming logic and to
01:56 - improve your programming skills I assume
01:58 - that you are a beginner
02:00 - right from that perspective I'll try to
02:03 - give you some tips right and not I will
02:06 - not give you any shortcut like just
02:08 - follow these five or ten tips whatever
02:10 - I'm going to tell you in this video and
02:11 - you'll be good
02:13 - whenever or wherever you will see any
02:16 - recording question
02:17 - you will you know find out the solution
02:19 - you will think you are able to think the
02:21 - logic and you will write down the code
02:22 - no there is no shortcut yeah definitely
02:24 - you should do some practice you should
02:26 - do some hard work right
02:29 - but
02:30 - in which path I'll I am going to show
02:33 - you the right path according to me and
02:37 - you have to work on that path yourself
02:40 - all right
02:41 - and if you you know definitely want to
02:44 - improve your programming logic then
02:45 - definitely
02:46 - if you want to go in the scoring part
02:49 - then ultimately you want a good
02:50 - developer job
02:52 - one right so in this video before that
02:55 - before you know proceeding to the topic
02:56 - I'm just going to tell you about a boot
02:58 - camp which simply learn is going to
03:00 - start
03:01 - that is full stack Java developer so
03:04 - this is going to be started from 30th of
03:06 - November the duration of this boot camp
03:07 - is 6 months 10 to 15 hours per week you
03:11 - have to devote and it would be online
03:12 - boot camp all the classes would be
03:14 - conducted online now why you should go
03:16 - for this full stack Java developer
03:18 - program or this bootcamp because if they
03:20 - are giving you a job guarantee within
03:22 - six months of your graduation if not
03:24 - this thing then they'll give you 100
03:25 - refund
03:27 - as well as they will make your interview
03:29 - ready means first thing you will get a
03:32 - top-notch curriculum designed by their
03:34 - industry experts assignments mock test
03:37 - projects Theory classes plus hands-on
03:39 - experience on real world projects as
03:42 - well as from the day one from the
03:43 - starting only so they're going to teach
03:45 - you front-end middleware and back-end
03:47 - Java web developer Technologies and as
03:50 - well as you will learn to build
03:51 - end-to-end applications test and deploy
03:54 - code store your data using database
03:57 - mongodb and much more you are going to
03:59 - learn in this and as well as you will
04:00 - get an access to exclusive job portal
04:03 - just to help you to find out your dream
04:05 - job what would be in the course what
04:07 - would be the learning path as you can
04:09 - see here all the phases
04:11 - phase one you will Implement oops using
04:14 - Java with the DSA then phase two you'll
04:16 - get familiar with the backend
04:18 - Technologies and Page phase three then
04:20 - phase four you will develop a web
04:22 - application using front-end stack
04:24 - then full stack Java developer you know
04:27 - project and uh then testing in a devops
04:30 - life cycle and what would be the skills
04:32 - covered as IL Java spring core devops
04:35 - the tools which we covered here is you
04:37 - can see here and the projects we are
04:40 - going to work industry project week four
04:42 - projects e-commerce food delivery
04:43 - entertainment project and one is ready
04:46 - to healthcare so these are some projects
04:48 - and after completion of this course
04:49 - you'll also get a certificate also and
04:52 - what would be the admission process for
04:53 - this
04:55 - just have to submit your application
04:56 - with the required information and then a
04:58 - test will be conducted after qualifying
05:00 - the test you will get shortlisted to
05:01 - talk to the admission team
05:03 - and after that you just have to accept
05:06 - the offer letter and you just have to
05:07 - complete the payment so all the relevant
05:09 - links and details you'll find in the
05:11 - description box of this video you can go
05:12 - and check out now let's get back to the
05:15 - topic see the main problem is if you are
05:19 - not able to think logic right then there
05:23 - could be two cases first thing is your
05:25 - concept is not clear right if you are
05:28 - solving a problem on like let's take
05:30 - simple example arrays
05:32 - so your concept on arrays is not clear
05:34 - array is 1D array 2D array
05:36 - multi-dimensional array and all okay
05:38 - arrays how to use array is the syntax
05:40 - applications and all
05:42 - next case may be second case may be you
05:45 - haven't practiced questions
05:48 - okay your concepts are clear but you
05:50 - haven't practiced questions on that
05:52 - topic
05:53 - much questions that is why you are going
05:55 - to stop okay so these two cases can be
05:58 - there now in which case in which
06:00 - category you are you have to identify
06:02 - you have to analyze yourself okay first
06:04 - mistake generally students do is what
06:06 - whenever they are trying to
06:08 - start coding or they are trying to they
06:11 - are you know starting their coding
06:13 - Journey then everyone is saying actually
06:16 - practice practice
06:17 - so all questions practice problems and
06:19 - all so they ignore theory part
06:22 - but to every part the concept building
06:25 - is very important
06:28 - yeah I know without implementation
06:31 - without practical without solving
06:33 - question this is just the theory
06:34 - knowledge is half complete okay but
06:39 - don't ignore the concept building first
06:41 - of all if you are first suppose
06:45 - and go level wise
06:48 - if you are choosing C programming
06:51 - first starting from starting you have to
06:53 - go right if else for Loop and all then
06:56 - arrays strings arrays 1D array two D
06:59 - array multi-dimensional arrays string
07:01 - linked list stack queue it's not like
07:03 - that
07:04 - on this day one day I am solving
07:06 - question on arrays next day or after two
07:09 - days strings then link list someone is
07:12 - saying link list is important then start
07:14 - solving question on link list no just
07:16 - pick one topic first okay because they
07:18 - are linking with each other these topics
07:20 - okay
07:22 - so now concept building is very
07:24 - important do not ignore this thing
07:27 - just pick one thing like arrays
07:29 - read this
07:31 - from a genuine resource actually so here
07:34 - also you have to apply
07:37 - Active Learning like an arrays okay you
07:40 - have read this concept arrays like 1D
07:42 - arrays applications of arrays properly
07:44 - you have read then start solving
07:46 - questions
07:47 - okay on this thing and also from easy to
07:51 - Advanced you have to move like this
07:55 - easy questions first okay then Advanced
07:58 - this second mistake generally students
08:00 - do they skip easy questions
08:03 - even if to print hello world if you are
08:06 - absolute beginner even if the program is
08:08 - to print hello world you have to write
08:09 - down that program at your own even if
08:13 - the program is sum of two numbers you
08:15 - have to write down that program you have
08:16 - to write down that program then run that
08:17 - program okay
08:19 - how to practice questions how to write
08:21 - down that also we'll discuss but maybe
08:23 - for someone else if you are a beginner
08:24 - maybe to find your factorial of a number
08:27 - is
08:28 - in tough category for you for someone
08:30 - else
08:31 - find out factorial factorial of a number
08:33 - is an easy category okay
08:35 - so it's normal if you are a beginner
08:38 - maybe you are not able to think the
08:40 - logic of finding maximum among three
08:41 - numbers at first it's okay it's normally
08:43 - it happens with everyone you don't have
08:45 - to you know demoralize or demotivate
08:48 - yourself or you don't have to think like
08:50 - this coding is not for me and all
08:53 - this kind of thing
08:54 - keep patience and practice questions
08:59 - more and more easy problems you have to
09:01 - practice then medium problems and then
09:03 - tough problems
09:04 - okay now you just pick any problem and
09:08 - if you are not
09:10 - again if you're not getting that problem
09:12 - the solution you can go to again to the
09:15 - concept you have to read the concept or
09:17 - you can watch some YouTube tutorials so
09:19 - this should be active learning okay it's
09:21 - not like that just read all the concept
09:23 - array string link list and all at last
09:25 - I'll solve questions on these things now
09:29 - 50 to 60 percent read the concept you're
09:32 - getting try to solve easy problems maybe
09:35 - in advanced or a medium type of problems
09:37 - you are facing difficulty again go to
09:40 - the concept building and then go to the
09:41 - concept read from any book reference
09:43 - book or go to any YouTube tutorial then
09:45 - try to solve the problem so this should
09:46 - be active learning parallely they should
09:48 - go okay topic wise array is like then
09:51 - the strings first cover one topic then
09:53 - second topic like this
09:55 - okay
09:57 - now from easy to advance you have to go
09:59 - do not skip easy problems okay one thing
10:03 - at least
10:04 - give two hours per day
10:07 - and you have to maintain the regularity
10:09 - to solve these problems okay now main
10:14 - thing is how to practice problem or you
10:17 - can say how to solve
10:20 - you are given one problem it's not like
10:22 - that just you have seen the problem and
10:23 - start writing code no
10:26 - analyze the problem first understand the
10:29 - question properly the information
10:31 - everything what which what information
10:33 - is given understand
10:35 - every word in that question that problem
10:38 - statement okay so you have to understand
10:40 - the question
10:42 - then
10:43 - try to solve that problem
10:46 - with the help of pen and paper this I
10:48 - have told you many times
10:50 - okay do not directly just jump to your
10:53 - laptop and start writing code no
10:57 - if you really want to build programming
10:59 - logic where you really want to improve
11:01 - your programming skill this is very
11:02 - important part with the help of pen and
11:04 - paper
11:05 - understand the question what is this
11:08 - scenario maybe try if you can try to
11:10 - relate that problem with the real life
11:12 - problem okay how you can solve that
11:15 - thing
11:16 - try to relate if you can
11:18 - okay that would be really beneficial
11:22 - then a flowchart or in just English
11:25 - language like an algorithm you can think
11:28 - how to solve that problem then with the
11:30 - help of pen and paper write down the
11:31 - code on your paper then dry run that
11:35 - thing
11:37 - this is very important this I do in my
11:40 - every video whenever I write down code
11:41 - right on that thing you will understand
11:43 - the working of the code this thing is
11:45 - very important understand the working
11:49 - really important
11:51 - you have to brighten that thing then if
11:53 - you are getting the answer then
11:57 - some test cases like some Corner cases
11:59 - you can say
12:01 - maybe that problem is maybe if array
12:04 - problem is there so that solution will
12:06 - work on duplicate elements if in Array
12:08 - we are having duplicate elements if you
12:09 - have we are having negative elements so
12:11 - these kind of test cases these kind of
12:13 - corner cases you have to think now okay
12:16 - if this problem is not working like just
12:18 - give input this kind of thing if Aries
12:22 - having duplicate element or negative
12:23 - number you can give input and rather
12:25 - than that if not getting proper output
12:27 - see where you can you have to change
12:29 - that
12:30 - problem that solution you have to modify
12:33 - your solution okay
12:34 - and one thing do not try to find out the
12:37 - best solution in one shot
12:40 - first thing
12:42 - whatever solution in your mind maybe
12:44 - it's Brute Force we are having you know
12:47 - much more time complexity or space
12:49 - complexity it's okay but just try to
12:51 - think the solution first after that
12:54 - different one problem can be solved with
12:57 - the help of different different you know
12:59 - methods and one problem is having many
13:01 - solutions okay so one approach then you
13:05 - can modify that thing yeah in that way
13:06 - also we can do this thing you just
13:09 - modify that thing
13:10 - okay finally maybe you will get
13:14 - a better solution or optimized solution
13:17 - that is of you know later part like to
13:21 - find out optimized solution yeah
13:22 - definitely
13:23 - that is good you have to find out
13:25 - optimized solution okay interviewer
13:28 - always you know want you to give
13:31 - optimized solution of the problem
13:33 - whatever they'll ask but if you are a
13:35 - beginner it's okay just apply brute
13:37 - force and
13:38 - don't think about time complexity space
13:40 - complexity you're optimizing the problem
13:42 - just think the solution one solution
13:45 - then how you can modify how you can
13:46 - optimize that problem that is a way okay
13:50 - so this should be your approach and then
13:54 - for the same problem use you can see
13:57 - other Solutions
14:00 - Maybe
14:01 - I have told you one problem can be
14:03 - solved with different different methods
14:05 - okay maybe someone has solved that
14:07 - problem with using a different approach
14:09 - different method so you will get oh with
14:12 - the help of this approach also I can
14:14 - solve this problem okay
14:16 - so you have to see other solution as
14:18 - well that is important here you can see
14:20 - editorial solution
14:22 - fine plus if you are not getting the
14:25 - solution means like a problem is easy
14:28 - problem
14:30 - so you can devote some time it's not
14:32 - like that whole day or two to three days
14:35 - you are devoting for that problem and
14:37 - you are taking that thing on ego like I
14:38 - have to solve that problem I'll not see
14:40 - the solution no don't waste your time
14:43 - that much
14:45 - one r two R three or you can devote to
14:48 - find out the solution but if you are not
14:49 - getting the solution
14:50 - then just you can see the solution the
14:53 - editorial or other Solutions try out to
14:57 - find out
14:58 - where you have done the mistakes where
15:01 - you were lacking
15:03 - okay okay this should be the approach
15:05 - you can understand the solution do not
15:07 - just copy and paste that solution okay
15:10 - write down that solution understand that
15:12 - thing and then
15:15 - sorry and then Implement that thing
15:19 - type with your own hand or maybe you can
15:21 - write on a pen and paper
15:23 - this thing is important do not just
15:25 - directly copy and paste and yeah I got
15:27 - the answer no
15:28 - then again
15:29 - Implement that thing after getting the
15:31 - solution from other others okay plus one
15:35 - thing is which is very important
15:38 - try to solve someone else problem
15:41 - or maybe you for concept building you
15:43 - can say this thing teach someone else
15:46 - your colleagues your friends or
15:49 - anyone
15:51 - whenever you are going to teach they
15:52 - will ask maybe some questions and yeah
15:55 - you may think yeah I haven't think this
15:58 - way
15:58 - what should be the solution of this
16:01 - thing what should be the answer of this
16:02 - question
16:04 - so that would really be helpful in your
16:06 - concept building if you teach someone
16:08 - else
16:09 - if you try to solve someone else problem
16:11 - that is also going to build your
16:13 - programming logic your thinking ability
16:15 - okay coding is nothing you just have to
16:18 - apply basic maths plus your thinking
16:22 - your critical thinking your thinking
16:24 - ability that's it do not hesitate to see
16:28 - the hint if you are not getting the
16:30 - problem if you are stuck if you are
16:32 - devoted sometime one hour or two hour
16:35 - just you can see the hint yeah then try
16:38 - to solve the problem if you're still
16:39 - stuck you can see the solution it's okay
16:42 - understand the solution main thing is
16:44 - understand the solution do not just copy
16:46 - and paste then with your own hand write
16:50 - down everything each and every line and
16:53 - then solve that problem plus one thing
16:55 - generally student underestimate is you
16:59 - have to make notes
17:01 - like maybe you are
17:03 - no thinking while solving coding
17:06 - problems why we should make notes but
17:08 - this is important what approach you have
17:10 - followed while solving that question a
17:12 - question is tough
17:13 - so after that reviews and whenever you
17:17 - will go to the revision part see this is
17:19 - also very important you will unders you
17:21 - generally underestimate this thing
17:23 - generally this happens whenever you I
17:25 - have solved this problem today after one
17:27 - month if same problem you are going to
17:29 - solve you'll go blank
17:32 - or maybe it will take you again one hour
17:34 - two or three or two think the solution
17:36 - no because you haven't revised that
17:39 - concept
17:40 - so you have to do revision make notes
17:42 - proper notes not I'm not just saying you
17:45 - have to do ratification and all make
17:48 - notes the approaches you know what
17:50 - approach you have uh you know used to
17:52 - solve that problem if a problem is tough
17:53 - if you are weak in a particular like if
17:57 - you are weak increase or graphs
17:59 - especially for those you have to make
18:00 - notes and revise those notes
18:03 - okay
18:04 - you can say in every week or maybe after
18:07 - two to three days you have to do
18:08 - revision frequently
18:10 - so I think that is it mainly just read
18:14 - the concept concept building practice
18:15 - questions obviously revise revision
18:18 - again next concept and practice
18:21 - questions from easy medium to advanced
18:23 - level then it will be then this should
18:25 - be in cycle and if you think there could
18:27 - be some other tip also just to increase
18:29 - or to build programming logic you can
18:31 - just write down in comment section so
18:33 - that other students can get help from
18:34 - that comment so that's it for this video
18:37 - now I'll see in the next video till then
18:39 - bye take care

Cleaned transcript:

hey everyone I hope you all are safe and doing good so almost every day I get this question ma'am how to build programming logic how to improve programming skills how to think how to approach a problem how to start solving a problem logic you're not able to think the logic we are not able to write down code we are not able to solve coding problems yeah we understand everything like some students fall in that category when whenever someone else is explaining the code they understand everything the program whole program the solution but whenever they sit and start writing code they sell they go blank not able to think the logic right how to write down the code how to approach a coding problem right so in this video I will try my best to you know figure out what would be the problems and what would be the solution of this thing generally what mistakes students do right while start solving coding problems and while practicing coding problems as we all know everyone says like practice practice practice is the key to success if you are going to learn coding or programming you have to practice that is the main thing but some other things are also important with the practice right means how you do practice what type of questions you practice how you solved the problems while practicing those questions this thing is also important theory part theoretical knowledge concept building you know that thing is also very important right these things should go parallely so how these things should go parallely when you should go for concept building when you should go for 30 part when you should go for practicing part how you should practice the questions how many questions easy medium or advanced level questions everything we are going to discuss in this video means you can say ultimately some tips to build your programming logic and to improve your programming skills I assume that you are a beginner right from that perspective I'll try to give you some tips right and not I will not give you any shortcut like just follow these five or ten tips whatever I'm going to tell you in this video and you'll be good whenever or wherever you will see any recording question you will you know find out the solution you will think you are able to think the logic and you will write down the code no there is no shortcut yeah definitely you should do some practice you should do some hard work right but in which path I'll I am going to show you the right path according to me and you have to work on that path yourself all right and if you you know definitely want to improve your programming logic then definitely if you want to go in the scoring part then ultimately you want a good developer job one right so in this video before that before you know proceeding to the topic I'm just going to tell you about a boot camp which simply learn is going to start that is full stack Java developer so this is going to be started from 30th of November the duration of this boot camp is 6 months 10 to 15 hours per week you have to devote and it would be online boot camp all the classes would be conducted online now why you should go for this full stack Java developer program or this bootcamp because if they are giving you a job guarantee within six months of your graduation if not this thing then they'll give you 100 refund as well as they will make your interview ready means first thing you will get a topnotch curriculum designed by their industry experts assignments mock test projects Theory classes plus handson experience on real world projects as well as from the day one from the starting only so they're going to teach you frontend middleware and backend Java web developer Technologies and as well as you will learn to build endtoend applications test and deploy code store your data using database mongodb and much more you are going to learn in this and as well as you will get an access to exclusive job portal just to help you to find out your dream job what would be in the course what would be the learning path as you can see here all the phases phase one you will Implement oops using Java with the DSA then phase two you'll get familiar with the backend Technologies and Page phase three then phase four you will develop a web application using frontend stack then full stack Java developer you know project and uh then testing in a devops life cycle and what would be the skills covered as IL Java spring core devops the tools which we covered here is you can see here and the projects we are going to work industry project week four projects ecommerce food delivery entertainment project and one is ready to healthcare so these are some projects and after completion of this course you'll also get a certificate also and what would be the admission process for this just have to submit your application with the required information and then a test will be conducted after qualifying the test you will get shortlisted to talk to the admission team and after that you just have to accept the offer letter and you just have to complete the payment so all the relevant links and details you'll find in the description box of this video you can go and check out now let's get back to the topic see the main problem is if you are not able to think logic right then there could be two cases first thing is your concept is not clear right if you are solving a problem on like let's take simple example arrays so your concept on arrays is not clear array is 1D array 2D array multidimensional array and all okay arrays how to use array is the syntax applications and all next case may be second case may be you haven't practiced questions okay your concepts are clear but you haven't practiced questions on that topic much questions that is why you are going to stop okay so these two cases can be there now in which case in which category you are you have to identify you have to analyze yourself okay first mistake generally students do is what whenever they are trying to start coding or they are trying to they are you know starting their coding Journey then everyone is saying actually practice practice so all questions practice problems and all so they ignore theory part but to every part the concept building is very important yeah I know without implementation without practical without solving question this is just the theory knowledge is half complete okay but don't ignore the concept building first of all if you are first suppose and go level wise if you are choosing C programming first starting from starting you have to go right if else for Loop and all then arrays strings arrays 1D array two D array multidimensional arrays string linked list stack queue it's not like that on this day one day I am solving question on arrays next day or after two days strings then link list someone is saying link list is important then start solving question on link list no just pick one topic first okay because they are linking with each other these topics okay so now concept building is very important do not ignore this thing just pick one thing like arrays read this from a genuine resource actually so here also you have to apply Active Learning like an arrays okay you have read this concept arrays like 1D arrays applications of arrays properly you have read then start solving questions okay on this thing and also from easy to Advanced you have to move like this easy questions first okay then Advanced this second mistake generally students do they skip easy questions even if to print hello world if you are absolute beginner even if the program is to print hello world you have to write down that program at your own even if the program is sum of two numbers you have to write down that program you have to write down that program then run that program okay how to practice questions how to write down that also we'll discuss but maybe for someone else if you are a beginner maybe to find your factorial of a number is in tough category for you for someone else find out factorial factorial of a number is an easy category okay so it's normal if you are a beginner maybe you are not able to think the logic of finding maximum among three numbers at first it's okay it's normally it happens with everyone you don't have to you know demoralize or demotivate yourself or you don't have to think like this coding is not for me and all this kind of thing keep patience and practice questions more and more easy problems you have to practice then medium problems and then tough problems okay now you just pick any problem and if you are not again if you're not getting that problem the solution you can go to again to the concept you have to read the concept or you can watch some YouTube tutorials so this should be active learning okay it's not like that just read all the concept array string link list and all at last I'll solve questions on these things now 50 to 60 percent read the concept you're getting try to solve easy problems maybe in advanced or a medium type of problems you are facing difficulty again go to the concept building and then go to the concept read from any book reference book or go to any YouTube tutorial then try to solve the problem so this should be active learning parallely they should go okay topic wise array is like then the strings first cover one topic then second topic like this okay now from easy to advance you have to go do not skip easy problems okay one thing at least give two hours per day and you have to maintain the regularity to solve these problems okay now main thing is how to practice problem or you can say how to solve you are given one problem it's not like that just you have seen the problem and start writing code no analyze the problem first understand the question properly the information everything what which what information is given understand every word in that question that problem statement okay so you have to understand the question then try to solve that problem with the help of pen and paper this I have told you many times okay do not directly just jump to your laptop and start writing code no if you really want to build programming logic where you really want to improve your programming skill this is very important part with the help of pen and paper understand the question what is this scenario maybe try if you can try to relate that problem with the real life problem okay how you can solve that thing try to relate if you can okay that would be really beneficial then a flowchart or in just English language like an algorithm you can think how to solve that problem then with the help of pen and paper write down the code on your paper then dry run that thing this is very important this I do in my every video whenever I write down code right on that thing you will understand the working of the code this thing is very important understand the working really important you have to brighten that thing then if you are getting the answer then some test cases like some Corner cases you can say maybe that problem is maybe if array problem is there so that solution will work on duplicate elements if in Array we are having duplicate elements if you have we are having negative elements so these kind of test cases these kind of corner cases you have to think now okay if this problem is not working like just give input this kind of thing if Aries having duplicate element or negative number you can give input and rather than that if not getting proper output see where you can you have to change that problem that solution you have to modify your solution okay and one thing do not try to find out the best solution in one shot first thing whatever solution in your mind maybe it's Brute Force we are having you know much more time complexity or space complexity it's okay but just try to think the solution first after that different one problem can be solved with the help of different different you know methods and one problem is having many solutions okay so one approach then you can modify that thing yeah in that way also we can do this thing you just modify that thing okay finally maybe you will get a better solution or optimized solution that is of you know later part like to find out optimized solution yeah definitely that is good you have to find out optimized solution okay interviewer always you know want you to give optimized solution of the problem whatever they'll ask but if you are a beginner it's okay just apply brute force and don't think about time complexity space complexity you're optimizing the problem just think the solution one solution then how you can modify how you can optimize that problem that is a way okay so this should be your approach and then for the same problem use you can see other Solutions Maybe I have told you one problem can be solved with different different methods okay maybe someone has solved that problem with using a different approach different method so you will get oh with the help of this approach also I can solve this problem okay so you have to see other solution as well that is important here you can see editorial solution fine plus if you are not getting the solution means like a problem is easy problem so you can devote some time it's not like that whole day or two to three days you are devoting for that problem and you are taking that thing on ego like I have to solve that problem I'll not see the solution no don't waste your time that much one r two R three or you can devote to find out the solution but if you are not getting the solution then just you can see the solution the editorial or other Solutions try out to find out where you have done the mistakes where you were lacking okay okay this should be the approach you can understand the solution do not just copy and paste that solution okay write down that solution understand that thing and then sorry and then Implement that thing type with your own hand or maybe you can write on a pen and paper this thing is important do not just directly copy and paste and yeah I got the answer no then again Implement that thing after getting the solution from other others okay plus one thing is which is very important try to solve someone else problem or maybe you for concept building you can say this thing teach someone else your colleagues your friends or anyone whenever you are going to teach they will ask maybe some questions and yeah you may think yeah I haven't think this way what should be the solution of this thing what should be the answer of this question so that would really be helpful in your concept building if you teach someone else if you try to solve someone else problem that is also going to build your programming logic your thinking ability okay coding is nothing you just have to apply basic maths plus your thinking your critical thinking your thinking ability that's it do not hesitate to see the hint if you are not getting the problem if you are stuck if you are devoted sometime one hour or two hour just you can see the hint yeah then try to solve the problem if you're still stuck you can see the solution it's okay understand the solution main thing is understand the solution do not just copy and paste then with your own hand write down everything each and every line and then solve that problem plus one thing generally student underestimate is you have to make notes like maybe you are no thinking while solving coding problems why we should make notes but this is important what approach you have followed while solving that question a question is tough so after that reviews and whenever you will go to the revision part see this is also very important you will unders you generally underestimate this thing generally this happens whenever you I have solved this problem today after one month if same problem you are going to solve you'll go blank or maybe it will take you again one hour two or three or two think the solution no because you haven't revised that concept so you have to do revision make notes proper notes not I'm not just saying you have to do ratification and all make notes the approaches you know what approach you have uh you know used to solve that problem if a problem is tough if you are weak in a particular like if you are weak increase or graphs especially for those you have to make notes and revise those notes okay you can say in every week or maybe after two to three days you have to do revision frequently so I think that is it mainly just read the concept concept building practice questions obviously revise revision again next concept and practice questions from easy medium to advanced level then it will be then this should be in cycle and if you think there could be some other tip also just to increase or to build programming logic you can just write down in comment section so that other students can get help from that comment so that's it for this video now I'll see in the next video till then bye take care
