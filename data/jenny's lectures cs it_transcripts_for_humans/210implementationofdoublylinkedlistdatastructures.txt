With timestamps:

00:00 - we are going to represent a
00:01 - doubly-linked list logically we have
00:02 - discussed in previous video introduction
00:05 - of doubly linked list fine so now we are
00:08 - going to create a doubly linked list
00:10 - having three nodes only and after that
00:12 - we are going to display that data like
00:15 - seven one and three this is how we are
00:18 - going to display the data so first of
00:20 - all you go through the video of
00:22 - introduction to doubly linked list I
00:23 - will provided the link of that video in
00:25 - this I button you can check out there
00:26 - now see how we can represent a node over
00:29 - doubly linked list that we have already
00:31 - discussed in the previous video so I am
00:33 - going to write here here that thing so
00:37 - this is how we are going to represent a
00:39 - node of a doubly linked list data type
00:42 - in a struct node three parts of this
00:44 - node are their data one is next pointer
00:46 - one is previous pointer this pointer is
00:48 - going to store address of next node and
00:50 - this previous pointer is going to store
00:52 - address of previous node right so now
00:55 - when head pointer is also there we are
00:57 - going to maintain this pointer we have
00:59 - this pointer when we are dealing with
01:02 - the program so this pointer is what
01:04 - containing address of the first node you
01:07 - can say it is a pointer to the first
01:09 - node so this is how we are going to
01:11 - declare a pointer
01:12 - this is name of the pointer this is a
01:15 - pointer that is why we are writing here
01:16 - estwick and this is a pointer to node
01:19 - which which address it is going to store
01:22 - address of this node fine so here you
01:25 - will write address of that variable
01:27 - whose address this pointer is going to
01:30 - store so now that type of this node is
01:33 - what struct node we have defined our own
01:35 - data type that is struct node see here
01:38 - directly you cannot write seven this
01:41 - will give an error why so because when
01:43 - you are writing this thing it means you
01:45 - have just declared you have just defined
01:47 - your own data type the memory has not
01:50 - been allotted yet fine so you cannot
01:54 - directly write here you cannot store any
01:57 - value here first of all we will declare
01:59 - a variable either a variable of this
02:03 - struct node type or a pointer using that
02:06 - variable or that pointer we can access
02:08 - the members of structure so I hope you
02:10 - know the concept of structures how we
02:13 - can use this
02:13 - structure in C language fine now
02:16 - globally we declared this thing because
02:19 - if you globally declared this day to
02:20 - type and this pointer then in any
02:22 - function you can use this head pointer
02:24 - and this datatype fine because in this
02:28 - case we are going to declare to put two
02:30 - functions one is create and one is
02:32 - display so globally out of out main from
02:35 - out of the main function and out of all
02:37 - those functions I am going to declare
02:38 - this now I'm going to define a function
02:42 - that tells create so now I'm going to
02:47 - write down the code to create this
02:49 - linked list see it is very much similar
02:51 - to the singly linked list code in that
02:54 - case we have seen how to create a singly
02:56 - linked list so first of all we have to
02:58 - create a node to store this data to
03:01 - insert the data in the linked list
03:03 - initially we assume that the slist list
03:06 - is empty right so if list is empty then
03:09 - in head pointer you are going to store
03:11 - would zero fine so you can initialize
03:15 - this head pointer with a zero I'm going
03:17 - to write down that thing also so now
03:20 - first of all we are going to create this
03:21 - node dynamically dynamically we are
03:24 - going to assign the memory to this node
03:25 - and how you can dynamically allocate the
03:27 - memory using melot function the Mellow
03:29 - functions index we have already
03:30 - discussed many times when we were
03:32 - discussing linked lists concept so how
03:35 - you would write down that thing see the
03:38 - the syntax says you will write that
03:40 - maillot keyword and here the size you
03:43 - want it for this node the size you want
03:46 - how much size for for this for for this
03:48 - and for for this so here what we will
03:50 - write here we will write size off in
03:53 - bracket you rewrite the data type the
03:55 - data type is what struct node so now
04:00 - automatically how many bytes would be
04:03 - allocated 12 bytes would be located and
04:06 - what melot function will return it will
04:08 - return a pointer to the first bite of
04:11 - that allocated blow now suppose this
04:14 - block has been allocated in the memory
04:16 - how many bytes 12 bytes and the 12 bytes
04:20 - are there in this one three parts are
04:22 - there of this node this this and this
04:23 - and the address of first byte is 250
04:26 - the address of the slope is 250 so that
04:28 - is why I'm a lope is going to return
04:29 - this address so you can say it's going
04:32 - to return what a pointer to the first
04:33 - byte or you can say that void pointer
04:35 - and now you have to store this address
04:39 - into some another pointer obviously we
04:42 - are going to store this address into a
04:44 - pointer now we use a pointer variable so
04:47 - we are going to declare one another
04:49 - pointer variable suppose here I am
04:51 - declaring a strict new node
04:57 - this is newly created node for this I am
04:59 - taking new node see if you don't declare
05:02 - globally then here within this create
05:04 - function you can also declare what you
05:06 - can write struct node astrick new node
05:08 - so if you are using this pointer only
05:11 - within this function so better you
05:13 - declare this new node pointer locally
05:15 - not globally so now this will return a
05:18 - void pointer and this new node is what
05:20 - it is a pointer to node because type is
05:22 - struct node so you have to typecast to
05:24 - this thing how to typecast to this you
05:26 - will write would struct node s trick
05:31 - right and whatever this malloc will
05:34 - return where you will we are going to
05:35 - store that thing in new node so here you
05:38 - will write would new nodes so this is
05:40 - how memory dynamically the memory has
05:43 - been allocated to this new node so here
05:45 - you can say this new node is a pointer
05:47 - pointer that has been created and this
05:50 - point that is going to store what
05:51 - whatever my loop will return that is 250
05:53 - it is going to store 250 so it will
05:55 - point here now right now this has been
06:00 - created now we we ask from the user
06:02 - which data he wants to insert suppose I
06:05 - have inserted 7 using printf and scanf
06:08 - you are going to take input from the
06:10 - user so how you will write in scanf or
06:12 - to unit percentage D and we cannot
06:15 - directly access the state have you can
06:17 - it says this members of structure either
06:19 - using that the variable of this this
06:23 - type or a pointer so we have declared
06:25 - here pointer so now how you can access
06:27 - the part of this newly created node
06:29 - using this pointer so here you go to
06:31 - your right address off first of all the
06:34 - point of name then this arrow symbol and
06:36 - which part you want to access data part
06:39 - so data
06:40 - Alexes see how we will draw this arrow
06:42 - symbol simply that - an angular bracket
06:45 - and if you don't write this thing
06:46 - another method is what you can also
06:48 - write something like this s trick name
06:52 - of the pointer and then dot and which
06:55 - field you want to access here I want to
06:57 - access data so you can write down this
06:59 - thing here so suppose here I have
07:01 - entered seven so here and here first of
07:04 - all we restore would null so how we will
07:07 - store null here simply you will write
07:09 - what new node you want which is this
07:16 - part so name of this point that is what
07:17 - we have taken previous previous is equal
07:21 - to zero and new node next is also zero
07:26 - so now this is done now we want to
07:30 - insert this newly created node in the
07:32 - linked list at starting head is equal to
07:34 - none so here you can write within this
07:36 - function you can also write head is
07:38 - equal to 0 say this is the case head is
07:41 - equal to null so how you can insert this
07:44 - thing here simply you have to update
07:46 - this fine in head pointer what you will
07:49 - store the address of this node address
07:52 - is 250 so here you will store 250 so now
07:56 - head is pointing here right and in the
08:01 - next node also 0 there is no next node
08:02 - there is no previous node that is also 0
08:04 - so simply what you will write here in
08:07 - head we are going to store head is equal
08:10 - to from where you can get 250 see this
08:12 - pointer is also containing 250 because
08:14 - this is pointer to this node so in head
08:16 - you can write new node right
08:22 - if head is equal to 0 in that case now
08:25 - we have one node in the linked list now
08:28 - I want to insert another node the second
08:31 - node in that case head is not a null now
08:33 - head is containing 250 so in that case
08:36 - how we will insert so in else part what
08:38 - you will write so now see in the linked
08:40 - list I have only 1 node I have only one
08:43 - node inserted now I want to insert
08:45 - another node so suppose I have created
08:47 - one another node by running this code
08:49 - again again the
08:51 - has been allocated dynamically and
08:52 - suppose the address is 200 this 200
08:54 - would be passed here the new node so
08:57 - here this new node pointer is containing
09:00 - the value 200 it means it is now
09:04 - pointing to this node and the data we
09:07 - have entered that is 1 and the previous
09:09 - pointer is containing null and next
09:11 - pointer is also containing none now see
09:14 - if head is equal to is equal to null but
09:16 - head is not null now control will go
09:18 - into else part now how we are going to
09:20 - insert this node here now which link you
09:22 - have to update see here in doubly linked
09:24 - list where were with you how to update 2
09:27 - links fine see now if you want to insert
09:30 - this after this one so this node is
09:33 - going to contain address of this node
09:34 - because this would be the next node so
09:36 - that is this 200 200 would be here so
09:40 - here rather than 0 we will store 200
09:43 - fine
09:44 - by doing this you can establish this
09:47 - link but this is not done now this whole
09:52 - so you have to update this thing also
09:53 - because every node is going to contain
09:55 - address office pre its previous node
09:57 - also so now here in this part which you
10:02 - are going to break this thing and what
10:03 - should be there that is 100 address of
10:07 - the previous node now we have
10:08 - established this link also so now if I
10:12 - ask how you can access this part so
10:14 - simply you will say my pointer to this
10:16 - node as this head so simply what we can
10:19 - write head of next next this point it is
10:24 - next head of next as equal to from where
10:27 - you will get this 200 from this new node
10:29 - because new node is containing address
10:31 - 200 is equal to new node so 1 link has
10:35 - been updated now I will ask how to
10:37 - update this link how you will excess
10:39 - this part of this node then you will say
10:41 - ma'am we have a pointer to this node
10:43 - that is new node so we can access this
10:45 - using new node so new node and the name
10:48 - of this part is previous name of
10:51 - previous is equal to from where you will
10:52 - get this hundred address of previous
10:57 - node and in head we have hundred so here
11:00 - we can store head
11:03 - and this is done now now you will say
11:06 - that this is done ma fine okay fine we
11:09 - have inserted this thing now the problem
11:11 - comes when I want to insert a third node
11:14 - now see now I have created another node
11:17 - running by running this code again this
11:20 - node we have inserted this to here the
11:23 - data here and both the previous and next
11:25 - pointer is containing null now if head
11:28 - is equal to null but head is 100 so head
11:30 - is not and now we are going to do this
11:33 - else but now we are going to run this
11:35 - code now see what happens here first
11:38 - line is head of next is equal to a new
11:40 - mode head head is containing hundred
11:42 - using this we can access this node head
11:45 - next means this one so here we will
11:47 - store new node so what does the value in
11:50 - new node say we have created this new
11:52 - this node so this addresses would be
11:56 - contained in this new node pointer so
11:58 - here this new node is now containing
12:00 - three hundred it means it is pointing to
12:04 - here so now according to this logic the
12:07 - new node this three hundred will be
12:08 - stored in head next head of next that is
12:11 - here so here three hundred it means what
12:15 - this pointer is now pointing to this
12:18 - node three hundred it means this link
12:20 - has been broken but that should not be a
12:23 - case the next line also new node
12:26 - previous new node previous is here and
12:29 - is equal to head head means hundred so
12:31 - it is pointing to here so now this is
12:33 - also pointing to here so that is not
12:36 - correct so this logic is not correct now
12:38 - what you will do here we will take
12:40 - another pointer pointer to node you can
12:43 - set em this logic we have already
12:45 - discussed in the singly linked list also
12:47 - so now within this function we can here
12:50 - within this function we can declare
12:52 - another pointer that is empty you can
12:56 - see now how we are using this temp see
13:01 - now now temp is another pointer and now
13:05 - what you will do we cannot move this
13:06 - head we will move this temp first of all
13:08 - point to this then this then this then
13:10 - this like this fine so now what you will
13:12 - do when you insert the first node if
13:14 - head
13:14 - then you will insert this node in that
13:17 - case head is also pointing here and you
13:19 - will set what M will also point here you
13:22 - will write something like this so here
13:24 - what you can write head is equal to temp
13:28 - is equal to new node so both head and
13:30 - this temp is pointing to this now this
13:34 - first pointer in the node so now what
13:37 - you write in else parts so now I am
13:38 - taking a case that we have inserted one
13:40 - node and I'm going to insert second node
13:42 - after that we will insert the third node
13:43 - right so I've created this node I have
13:45 - inserted the data one here we have 0 0
13:48 - and new node is a pointer that is
13:50 - pointing to this node and containing the
13:51 - address of this node fine so now what do
13:54 - you write in else part
13:55 - have you replayed this thing and this
13:56 - thing how do you can access this part
13:58 - either using head or using M so here I
14:01 - am accessing this using temp so I can
14:04 - write M of next as equal to address of
14:07 - this from where I can get this from new
14:09 - node is equal to new node so now this is
14:13 - containing 200 means we have established
14:17 - one link so now you have to establish
14:19 - this thing also how you can access this
14:22 - thing using new node previous is equal
14:29 - to you will store here what the address
14:31 - of previous one right so now I will
14:35 - write here address of previous one is in
14:37 - M so I will write here M we are not
14:42 - going to write here head because you
14:44 - have discussed if you write here head
14:45 - what problem will be there so I will
14:48 - write here temp so this has been said
14:51 - that is hundred so it is going to point
14:53 - now here one more thing what we will do
14:56 - now we are going to move this temp right
14:59 - so now temp is equal to temp is pointing
15:04 - to this node now temp would be pointing
15:07 - to this node that is we are going to
15:08 - store 200 so from where you can get 200
15:11 - from this new node so temp is equal to
15:13 - new node and this is the closing of else
15:17 - part so now temples containing 200 and
15:20 - temp is now pointing to this node now
15:23 - both new node and temp is pointing to
15:25 - this node we have
15:27 - successfully inserted the second node
15:29 - now see if you want to insert the third
15:31 - node we have created this node right we
15:34 - have inserted the data here we have null
15:36 - and null head is equal to zero head is
15:38 - not equal to zero so we are going to in
15:40 - turn two else part now see in else part
15:43 - what we have written temp next here what
15:46 - do you have to do you how to update this
15:48 - thing and this thing right this is going
15:51 - to contain address of my next node and
15:53 - this pointer is going to contain address
15:54 - of previous node we are going to update
15:56 - two links so now how we can access this
15:59 - thing see here in this case now new node
16:01 - is pointing to this node because we have
16:03 - created new node so here in this new
16:07 - node pointer this 300 would be store now
16:10 - this new node is not pointing here after
16:12 - creating third node it is pointing to
16:14 - here now see how we can access this part
16:18 - using a pointer obviously and we have we
16:22 - have a pointer ten point into this node
16:24 - so we don't have any problem that is why
16:26 - we are taking another pointer temp temp
16:29 - next temp is 200 temp next is 0 this way
16:32 - what you will store here new node new
16:34 - node is containing 300 so here you will
16:36 - store 300 it means it is going to point
16:38 - here 300 is address of next node 1 link
16:43 - has been established now second this how
16:46 - you can access this part using new node
16:48 - previous new node previous is equal to
16:51 - whatever you will store here address of
16:53 - previous node that is 200 from where we
16:55 - can get 200 temp is containing 200 so is
16:58 - equal to 10
16:59 - now here 200 so it means it is going to
17:02 - point here and again one more thing temp
17:06 - is equal to new node now temp is equal
17:07 - to new node that is 300 so now tempis
17:11 - pointing to here right that is why I am
17:17 - taking this temp again if you insert
17:19 - fourth node no problem in that case new
17:23 - node will be pointing there when you
17:24 - will create the fourth node and we have
17:27 - the address of this previous node so we
17:29 - can easily update the links right so
17:32 - that is why I am taking this temp now if
17:35 - you want to run I want to write a
17:37 - program something like
17:38 - after inserting first node it will ask
17:40 - do you want to continue if you will
17:42 - press one that you can insert the second
17:44 - node if you again press one then you can
17:46 - insert third node so you can insert as
17:49 - much as many nodes as you want so now
17:52 - for the four that thing you can write
17:54 - after the cell else part you can write
17:56 - same this thing we have discussed in
17:58 - singly linked list say you can write the
18:02 - choice of the user and here you can
18:03 - write type 0 1 if the user press 0 it
18:06 - means you don't want to continue if user
18:08 - press 1 it means he wants to continue
18:10 - right so now for taking the input from
18:13 - the user you are going to declare one
18:16 - another variable that is choice so we
18:18 - can declare this choice variable within
18:20 - this function somewhere here suppose I
18:22 - am taking here int choice right and
18:29 - starting I am taking choice as you for
18:31 - do one so when the user enter one the
18:34 - choice is 1 it means new node should be
18:38 - created again again and again so that is
18:41 - why you are going to write this code
18:43 - this code into a loop fine
18:46 - so here before this line before this
18:48 - line new node is equal to struct node
18:50 - here you will write what while choice it
18:55 - means when choice is equal to 0 when you
18:58 - will pass 0 here this code will not be
19:01 - executed so that is why here you can
19:05 - start while loop and here you can close
19:06 - this file loop and if you press 0 it
19:09 - means the new node would not be created
19:11 - if you press 1 it means here 1 would be
19:13 - passed so this code will be run again so
19:16 - this is how you can create as many nodes
19:18 - as you want in a linked list now suppose
19:20 - after inserting 7 1 and 3 again it will
19:23 - ask do you want to continue I am new
19:25 - have pressed zero it means this code
19:27 - would not run again so after this you
19:30 - can call what display display function
19:32 - and this list should be printed that is
19:35 - 7 1 & 2 so how the display function will
19:38 - work that function is same as singly
19:42 - linked list function the coding would be
19:44 - exactly same that we have discussed in
19:47 - singly linked list fine so I am just
19:49 - going to write down that
19:51 - code here just for a brush-up you can
19:53 - write down this code you can pause the
19:55 - video and you can note the score so I'm
19:57 - going to rub this now so now this is the
19:59 - code for the display function for
20:02 - displaying the content of this list this
20:03 - code is same exactly same as the code of
20:06 - singly linked list
20:08 - we have discussed this code in that case
20:11 - in details so I'm not going to discuss
20:14 - it in detail here right this is the same
20:16 - we have discussed when we have taken one
20:18 - temp another pointer we are going to
20:21 - start here first of all temp is going to
20:24 - point from here temp is equal to head so
20:27 - here and one by one we are going to
20:29 - print the data and then we will move
20:31 - temp C we are going to print the data
20:33 - then we will move temp is equal to temp
20:34 - next then print the data again we will
20:37 - move until temp not equal to zero it
20:41 - means when temp becomes zero then you
20:43 - are going to stop right and in main
20:46 - function you can call the create
20:48 - function also and this display function
20:50 - also and say this thing we have declared
20:52 - globally outside of main function and
20:54 - outside of both the create and display
20:56 - function so in next video I will discuss
20:59 - how to insert a node in singly linked
21:01 - list at beginning also at any position
21:03 - also and at end also and after that how
21:06 - to delete data how to delete node from a
21:09 - doubly linked list so I'll see you in
21:11 - the next video till then bye-bye take
21:12 - care

Cleaned transcript:

we are going to represent a doublylinked list logically we have discussed in previous video introduction of doubly linked list fine so now we are going to create a doubly linked list having three nodes only and after that we are going to display that data like seven one and three this is how we are going to display the data so first of all you go through the video of introduction to doubly linked list I will provided the link of that video in this I button you can check out there now see how we can represent a node over doubly linked list that we have already discussed in the previous video so I am going to write here here that thing so this is how we are going to represent a node of a doubly linked list data type in a struct node three parts of this node are their data one is next pointer one is previous pointer this pointer is going to store address of next node and this previous pointer is going to store address of previous node right so now when head pointer is also there we are going to maintain this pointer we have this pointer when we are dealing with the program so this pointer is what containing address of the first node you can say it is a pointer to the first node so this is how we are going to declare a pointer this is name of the pointer this is a pointer that is why we are writing here estwick and this is a pointer to node which which address it is going to store address of this node fine so here you will write address of that variable whose address this pointer is going to store so now that type of this node is what struct node we have defined our own data type that is struct node see here directly you cannot write seven this will give an error why so because when you are writing this thing it means you have just declared you have just defined your own data type the memory has not been allotted yet fine so you cannot directly write here you cannot store any value here first of all we will declare a variable either a variable of this struct node type or a pointer using that variable or that pointer we can access the members of structure so I hope you know the concept of structures how we can use this structure in C language fine now globally we declared this thing because if you globally declared this day to type and this pointer then in any function you can use this head pointer and this datatype fine because in this case we are going to declare to put two functions one is create and one is display so globally out of out main from out of the main function and out of all those functions I am going to declare this now I'm going to define a function that tells create so now I'm going to write down the code to create this linked list see it is very much similar to the singly linked list code in that case we have seen how to create a singly linked list so first of all we have to create a node to store this data to insert the data in the linked list initially we assume that the slist list is empty right so if list is empty then in head pointer you are going to store would zero fine so you can initialize this head pointer with a zero I'm going to write down that thing also so now first of all we are going to create this node dynamically dynamically we are going to assign the memory to this node and how you can dynamically allocate the memory using melot function the Mellow functions index we have already discussed many times when we were discussing linked lists concept so how you would write down that thing see the the syntax says you will write that maillot keyword and here the size you want it for this node the size you want how much size for for this for for this and for for this so here what we will write here we will write size off in bracket you rewrite the data type the data type is what struct node so now automatically how many bytes would be allocated 12 bytes would be located and what melot function will return it will return a pointer to the first bite of that allocated blow now suppose this block has been allocated in the memory how many bytes 12 bytes and the 12 bytes are there in this one three parts are there of this node this this and this and the address of first byte is 250 the address of the slope is 250 so that is why I'm a lope is going to return this address so you can say it's going to return what a pointer to the first byte or you can say that void pointer and now you have to store this address into some another pointer obviously we are going to store this address into a pointer now we use a pointer variable so we are going to declare one another pointer variable suppose here I am declaring a strict new node this is newly created node for this I am taking new node see if you don't declare globally then here within this create function you can also declare what you can write struct node astrick new node so if you are using this pointer only within this function so better you declare this new node pointer locally not globally so now this will return a void pointer and this new node is what it is a pointer to node because type is struct node so you have to typecast to this thing how to typecast to this you will write would struct node s trick right and whatever this malloc will return where you will we are going to store that thing in new node so here you will write would new nodes so this is how memory dynamically the memory has been allocated to this new node so here you can say this new node is a pointer pointer that has been created and this point that is going to store what whatever my loop will return that is 250 it is going to store 250 so it will point here now right now this has been created now we we ask from the user which data he wants to insert suppose I have inserted 7 using printf and scanf you are going to take input from the user so how you will write in scanf or to unit percentage D and we cannot directly access the state have you can it says this members of structure either using that the variable of this this type or a pointer so we have declared here pointer so now how you can access the part of this newly created node using this pointer so here you go to your right address off first of all the point of name then this arrow symbol and which part you want to access data part so data Alexes see how we will draw this arrow symbol simply that an angular bracket and if you don't write this thing another method is what you can also write something like this s trick name of the pointer and then dot and which field you want to access here I want to access data so you can write down this thing here so suppose here I have entered seven so here and here first of all we restore would null so how we will store null here simply you will write what new node you want which is this part so name of this point that is what we have taken previous previous is equal to zero and new node next is also zero so now this is done now we want to insert this newly created node in the linked list at starting head is equal to none so here you can write within this function you can also write head is equal to 0 say this is the case head is equal to null so how you can insert this thing here simply you have to update this fine in head pointer what you will store the address of this node address is 250 so here you will store 250 so now head is pointing here right and in the next node also 0 there is no next node there is no previous node that is also 0 so simply what you will write here in head we are going to store head is equal to from where you can get 250 see this pointer is also containing 250 because this is pointer to this node so in head you can write new node right if head is equal to 0 in that case now we have one node in the linked list now I want to insert another node the second node in that case head is not a null now head is containing 250 so in that case how we will insert so in else part what you will write so now see in the linked list I have only 1 node I have only one node inserted now I want to insert another node so suppose I have created one another node by running this code again again the has been allocated dynamically and suppose the address is 200 this 200 would be passed here the new node so here this new node pointer is containing the value 200 it means it is now pointing to this node and the data we have entered that is 1 and the previous pointer is containing null and next pointer is also containing none now see if head is equal to is equal to null but head is not null now control will go into else part now how we are going to insert this node here now which link you have to update see here in doubly linked list where were with you how to update 2 links fine see now if you want to insert this after this one so this node is going to contain address of this node because this would be the next node so that is this 200 200 would be here so here rather than 0 we will store 200 fine by doing this you can establish this link but this is not done now this whole so you have to update this thing also because every node is going to contain address office pre its previous node also so now here in this part which you are going to break this thing and what should be there that is 100 address of the previous node now we have established this link also so now if I ask how you can access this part so simply you will say my pointer to this node as this head so simply what we can write head of next next this point it is next head of next as equal to from where you will get this 200 from this new node because new node is containing address 200 is equal to new node so 1 link has been updated now I will ask how to update this link how you will excess this part of this node then you will say ma'am we have a pointer to this node that is new node so we can access this using new node so new node and the name of this part is previous name of previous is equal to from where you will get this hundred address of previous node and in head we have hundred so here we can store head and this is done now now you will say that this is done ma fine okay fine we have inserted this thing now the problem comes when I want to insert a third node now see now I have created another node running by running this code again this node we have inserted this to here the data here and both the previous and next pointer is containing null now if head is equal to null but head is 100 so head is not and now we are going to do this else but now we are going to run this code now see what happens here first line is head of next is equal to a new mode head head is containing hundred using this we can access this node head next means this one so here we will store new node so what does the value in new node say we have created this new this node so this addresses would be contained in this new node pointer so here this new node is now containing three hundred it means it is pointing to here so now according to this logic the new node this three hundred will be stored in head next head of next that is here so here three hundred it means what this pointer is now pointing to this node three hundred it means this link has been broken but that should not be a case the next line also new node previous new node previous is here and is equal to head head means hundred so it is pointing to here so now this is also pointing to here so that is not correct so this logic is not correct now what you will do here we will take another pointer pointer to node you can set em this logic we have already discussed in the singly linked list also so now within this function we can here within this function we can declare another pointer that is empty you can see now how we are using this temp see now now temp is another pointer and now what you will do we cannot move this head we will move this temp first of all point to this then this then this then this like this fine so now what you will do when you insert the first node if head then you will insert this node in that case head is also pointing here and you will set what M will also point here you will write something like this so here what you can write head is equal to temp is equal to new node so both head and this temp is pointing to this now this first pointer in the node so now what you write in else parts so now I am taking a case that we have inserted one node and I'm going to insert second node after that we will insert the third node right so I've created this node I have inserted the data one here we have 0 0 and new node is a pointer that is pointing to this node and containing the address of this node fine so now what do you write in else part have you replayed this thing and this thing how do you can access this part either using head or using M so here I am accessing this using temp so I can write M of next as equal to address of this from where I can get this from new node is equal to new node so now this is containing 200 means we have established one link so now you have to establish this thing also how you can access this thing using new node previous is equal to you will store here what the address of previous one right so now I will write here address of previous one is in M so I will write here M we are not going to write here head because you have discussed if you write here head what problem will be there so I will write here temp so this has been said that is hundred so it is going to point now here one more thing what we will do now we are going to move this temp right so now temp is equal to temp is pointing to this node now temp would be pointing to this node that is we are going to store 200 so from where you can get 200 from this new node so temp is equal to new node and this is the closing of else part so now temples containing 200 and temp is now pointing to this node now both new node and temp is pointing to this node we have successfully inserted the second node now see if you want to insert the third node we have created this node right we have inserted the data here we have null and null head is equal to zero head is not equal to zero so we are going to in turn two else part now see in else part what we have written temp next here what do you have to do you how to update this thing and this thing right this is going to contain address of my next node and this pointer is going to contain address of previous node we are going to update two links so now how we can access this thing see here in this case now new node is pointing to this node because we have created new node so here in this new node pointer this 300 would be store now this new node is not pointing here after creating third node it is pointing to here now see how we can access this part using a pointer obviously and we have we have a pointer ten point into this node so we don't have any problem that is why we are taking another pointer temp temp next temp is 200 temp next is 0 this way what you will store here new node new node is containing 300 so here you will store 300 it means it is going to point here 300 is address of next node 1 link has been established now second this how you can access this part using new node previous new node previous is equal to whatever you will store here address of previous node that is 200 from where we can get 200 temp is containing 200 so is equal to 10 now here 200 so it means it is going to point here and again one more thing temp is equal to new node now temp is equal to new node that is 300 so now tempis pointing to here right that is why I am taking this temp again if you insert fourth node no problem in that case new node will be pointing there when you will create the fourth node and we have the address of this previous node so we can easily update the links right so that is why I am taking this temp now if you want to run I want to write a program something like after inserting first node it will ask do you want to continue if you will press one that you can insert the second node if you again press one then you can insert third node so you can insert as much as many nodes as you want so now for the four that thing you can write after the cell else part you can write same this thing we have discussed in singly linked list say you can write the choice of the user and here you can write type 0 1 if the user press 0 it means you don't want to continue if user press 1 it means he wants to continue right so now for taking the input from the user you are going to declare one another variable that is choice so we can declare this choice variable within this function somewhere here suppose I am taking here int choice right and starting I am taking choice as you for do one so when the user enter one the choice is 1 it means new node should be created again again and again so that is why you are going to write this code this code into a loop fine so here before this line before this line new node is equal to struct node here you will write what while choice it means when choice is equal to 0 when you will pass 0 here this code will not be executed so that is why here you can start while loop and here you can close this file loop and if you press 0 it means the new node would not be created if you press 1 it means here 1 would be passed so this code will be run again so this is how you can create as many nodes as you want in a linked list now suppose after inserting 7 1 and 3 again it will ask do you want to continue I am new have pressed zero it means this code would not run again so after this you can call what display display function and this list should be printed that is 7 1 & 2 so how the display function will work that function is same as singly linked list function the coding would be exactly same that we have discussed in singly linked list fine so I am just going to write down that code here just for a brushup you can write down this code you can pause the video and you can note the score so I'm going to rub this now so now this is the code for the display function for displaying the content of this list this code is same exactly same as the code of singly linked list we have discussed this code in that case in details so I'm not going to discuss it in detail here right this is the same we have discussed when we have taken one temp another pointer we are going to start here first of all temp is going to point from here temp is equal to head so here and one by one we are going to print the data and then we will move temp C we are going to print the data then we will move temp is equal to temp next then print the data again we will move until temp not equal to zero it means when temp becomes zero then you are going to stop right and in main function you can call the create function also and this display function also and say this thing we have declared globally outside of main function and outside of both the create and display function so in next video I will discuss how to insert a node in singly linked list at beginning also at any position also and at end also and after that how to delete data how to delete node from a doubly linked list so I'll see you in the next video till then byebye take care
