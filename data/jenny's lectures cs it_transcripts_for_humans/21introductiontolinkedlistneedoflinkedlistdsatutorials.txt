With timestamps:

00:00 - see this is what this is a snapshot of
00:03 - memory memory is what I have told you
00:05 - already in many videos that it's a long
00:07 - tape of bytes and each byte see these
00:10 - are bytes and each by it is having its
00:13 - own address suppose I am taking this
00:15 - segment of memory memories or this side
00:18 - all extended in this side in this side
00:20 - also extended so I'm taking open-ended
00:22 - and I'm taking the address started from
00:24 - hundred so the next byte address is 1 0
00:28 - man 1/4 next byte it is 1 0 2 like this
00:30 - see this memory is very crucial data
00:33 - source in our system we don't have
00:35 - unlimited memory in a computer system
00:37 - fine so it is a responsibility of a
00:40 - memory manager to manage this resource
00:42 - to manage the memory to which process
00:45 - memory is to be located how much memory
00:46 - is to be allocated to which memory is
00:47 - free which memory is allocated now like
00:49 - this fine so memory manager is going to
00:52 - take care of this thing fine
00:54 - now suppose a programmer want some
00:57 - memory in this case a programmer is
01:00 - writing a program and he is going to
01:01 - declare a variable like this in suppose
01:05 - variable name is X fine now when after
01:11 - declaring this variable what happens the
01:13 - memory manager will look at how many
01:14 - bytes four bytes for this integer in
01:17 - typical compilers fine so let us suppose
01:20 - memory manager are located 4 bytes to
01:23 - this X and started from which location
01:26 - started from let us suppose this
01:29 - location from 1 1 to these 4 bytes
01:34 - these four bytes has been allocated to
01:37 - this X and memory manager will tell the
01:39 - programmer that I have allocated to the
01:43 - memory which has started from one one
01:45 - two one two three four bytes fine and
01:48 - suppose he has entered sum here is
01:50 - initialized at runtime this X and he can
01:53 - enter some integer value like 7 so now
01:58 - the programmer suppose we want to store
02:00 - three integers fine so we we have we
02:02 - have read the concept of airings so how
02:05 - he will declare int suppose array name
02:08 - is a and size is 3 so see array is what
02:11 - action of data items which are of same
02:14 - data-type fine so for three integers for
02:18 - three venues the memory manager will
02:19 - allocate how many bytes 3 into 4 that is
02:22 - 2 any bytes
02:24 - fine and then that 12 bytes would be in
02:28 - consecutive continuous location that
02:31 - integer the values of the areas are
02:33 - always stored in continuous locations so
02:36 - let us suppose one complete block of 12
02:39 - bytes has been allocated suppose from
02:42 - 102 from hundred to this one one one
02:47 - this is free and memory manager has
02:50 - allocated the hello has allocated this
02:52 - block to this a so now programmer has
02:56 - entered three values here now the
02:59 - programmer wants to store one extra
03:03 - integer value an extra value and he
03:05 - wants to extend this array size now he
03:09 - will last through the many memory
03:10 - manager that I want to store one extra
03:12 - value can I extend can you extend the
03:15 - size and I want to extend the same block
03:18 - I want to extend the size of there I am
03:21 - NOT going to declare another variable I
03:23 - am going to extend the size of that I
03:24 - want size of array for now now what the
03:27 - memory manager will do see because in
03:29 - advance the programmer told that I want
03:33 - size for only three integers so he has
03:37 - allocated 12 bytes now what a memory
03:39 - manager will say he'll say I cannot
03:42 - extend the size of your area because I
03:44 - have already allocated that that
03:46 - consecutive block to some other variable
03:48 - because at starting I didn't know that
03:51 - you are going to extend your array size
03:53 - so now programmers will ask what can I
03:55 - do now I won't add a size 4 so now
03:58 - memory manager will say I can allocate
04:00 - you a fresh block of 16 bytes because
04:07 - for for size of the array how many bytes
04:10 - would be required 4 into 4 that is 16
04:13 - but I cannot extend this block now what
04:16 - programmer will think programmer will
04:17 - think that maybe in future I need to
04:19 - store 10 values fine so it's starting
04:23 - only I asked the memory manager to
04:27 - allocate me the size 450 values for 50
04:31 - elements that I want my array size 50
04:34 - now hint en 50 maximum limit now what
04:40 - memory manager will do my many - little
04:42 - bit locate how many bytes 15 - for that
04:48 - is 200 bytes a fresh block of 200 bytes
04:51 - of consecutive locations so these 200
04:54 - bytes block is from maybe you can say
04:56 - from 122 this 3 109 addresses 3 1 9
04:59 - these blocks would be allocated to this
05:02 - one but now suppose the programmer only
05:05 - needs to store maximum 10 elements so
05:10 - this space is wasted now because he is
05:12 - going to use only how many bytes 10 into
05:14 - 4 that is 40 bytes he is going to use
05:17 - starting 40 bytes right and remaining
05:20 - memory is what that memory has already
05:23 - been allocated to this arena so memory
05:25 - is not free the memory manager cannot
05:27 - allocate this free memory to another
05:29 - variable but this programmer is not
05:32 - using that memory so this is what the
05:34 - wastage of memory so this is a main
05:36 - drawback of n because of the fixed size
05:39 - because the programmer has to give fixed
05:42 - size of the array in advance at compile
05:44 - time only because of this vestige of
05:47 - memory is there in case of arrays fine
05:50 - now what is the solution of this problem
05:52 - so now the solution of this problem is
05:55 - what length list and here here see if
05:58 - the memory manager has allocated these
06:00 - fresh block then these values would be
06:02 - copied here only so that would be a very
06:05 - tedious work to do and again suppose
06:07 - after some time thus thus the programmer
06:09 - wants the size programmer wants to store
06:12 - 52 elements then again programmer maybe
06:15 - is not able to extend the memory in some
06:18 - cases then fresh a block of 452 452
06:24 - elements how many bytes 52 into 4 so 2 0
06:28 - 8 bytes would be allocated a new block
06:30 - of to 0 8 byte would be allocated and
06:32 - all the that elements of this previous
06:35 - array would be copied there so
06:36 - very tedious work to ruin Harry's mind
06:38 - the solution is what linked lists so
06:41 - linked lists is also a collection of
06:43 - elements the arrays were also a
06:45 - collection of elements right it is a
06:47 - collection of more than one date items
06:49 - fine link list is also a collection of
06:52 - more than one date items but the only
06:54 - difference is what in linked lists
06:56 - thus this data items are not storing
06:58 - consecutive locations because this in
07:00 - area these are stored in consecutive
07:01 - location continuous location fine
07:04 - now how see if the programmer make a
07:07 - request for one element he wants to
07:11 - store one element fine now the memory
07:13 - manager suppose are located and for
07:16 - integer value for bytes so suppose
07:19 - memory manager has allocated these four
07:21 - bytes right for the request of integer
07:24 - variable and suppose he has stored some
07:27 - value that is for here after this
07:31 - suppose he has made another separate
07:33 - request for one variable that is for
07:35 - storing an integer value so again four
07:37 - bytes would be allocated but it is not
07:39 - compulsory that that four bytes would be
07:41 - allocated consecutive to to this because
07:43 - that is a separate request that is not a
07:45 - requesting form of Eric so suppose now
07:48 - for next request memory manager has
07:50 - allocated from here four bytes right one
07:54 - two three and four and he has stored
07:58 - here suppose three fine now again he has
08:00 - requested two more requests for until
08:04 - for storing integer values so now this
08:07 - is how for the four separate request of
08:09 - four integer values the memory manager
08:12 - has allocated these four blocks to the
08:14 - programmer so see here these four values
08:17 - are also a collection find that is a
08:21 - linked list because here I'm not
08:22 - discussing that he has he has declared
08:24 - like this in text and into I into Z or
08:27 - in Thai something like this not variable
08:29 - separate variables this is also a
08:31 - collection file this is also a list now
08:34 - suppose if this these four are in a
08:37 - collection in array that is fine because
08:39 - these are consecutive locations so if
08:41 - you know this thing the base address of
08:43 - this one you can easily the compiler can
08:45 - easy
08:45 - compute this address of the next one but
08:48 - here we cannot say if this we are at
08:50 - this value in this collection we are at
08:53 - this and visa then we cannot say at
08:54 - where where the next integer is fine in
08:58 - that collection so some extra
09:00 - information has to be stored that is
09:02 - what if with the this thing with this
09:05 - thing with this value if we store
09:07 - address of that next value then we can
09:12 - easily reach to here fine and from here
09:17 - in the list with this second value if we
09:20 - store the address of the next value the
09:23 - next integer value then back we can
09:25 - easily go from here to here and here we
09:28 - can store with this value the address of
09:29 - the next value fine so this is what this
09:34 - is also a collection of four integer
09:38 - values but here the these values are not
09:42 - storing contiguous location we have
09:45 - removed that drawback fine now see so
09:49 - some extra space is to be located with
09:51 - this one for storing address of the next
09:55 - value and address of the next value
09:57 - which variable can store address of any
09:59 - another value that is a pointer variable
10:01 - can store address of some another
10:03 - variable fine
10:05 - so here four bytes would be allocated
10:07 - again because in typical compilers it
10:09 - there for storing the value for showing
10:11 - the address it takes four bytes so see
10:14 - here again four bytes would be located
10:16 - with this one two three and four fine
10:20 - for storing the address of this one
10:22 - right here four bytes would be located
10:25 - for storing address of this one here
10:27 - with this four bytes would be allocated
10:29 - first story this one so total how many
10:31 - bytes would be allocated eight bytes for
10:34 - for this value and four bytes for
10:35 - storing the pointer to the next well
10:39 - right so this is the memory
10:41 - representation logically how we will
10:43 - represent this linked list see four
10:46 - three four nodes one is this one this
10:48 - then in this in this with this for
10:51 - address of next would be stored see
10:53 - suppose address of this is 1 0 2
10:56 - for three addresses we have started from
10:59 - one one three four eight we have started
11:01 - from one two three and address of this
11:04 - is 132 so here with this four one one
11:06 - three would be stored so this will point
11:09 - to the next node here 123 would be
11:12 - stored so this will point to this node
11:14 - and here 132 will be stored this will
11:16 - point to this node and suppose this is
11:18 - the last node in the list so here null
11:21 - would be stored so in the linked list
11:23 - this complete is known as a node so here
11:28 - you can say this is drawback of linked
11:30 - list with the with this well knew you
11:32 - how to store pointer also so some extra
11:35 - spaces to be located the pointer to the
11:38 - next node here pointer to next node this
11:40 - complete is known as a node here fine
11:44 - so this removes the drawback of array
11:47 - now suppose I want to extend the size of
11:49 - linked list I want to insert one extra
11:52 - element here I want to insert 10 in the
11:55 - in my linked list right now suppose I
11:58 - want to insert 10 here so here can we
12:01 - insert this 10 directly here or the
12:03 - memory manager will allocate space for
12:05 - all the five variables some fresh block
12:08 - would be allocated no why so because
12:11 - these values are not not in contiguous
12:14 - locations so if anywhere space is
12:17 - available for 8 bytes then memory
12:19 - manager can allocate space they are only
12:22 - fine and we can provide link to link
12:25 - into this node for that new node
12:28 - inserted but in array we cannot do this
12:30 - because in array drobik is what all the
12:32 - value should be in consecutive locations
12:33 - fine so maybe sometimes if it is not
12:36 - possible to extend this size in case of
12:39 - arrays now if you want to insert this
12:41 - thing
12:41 - so simply somewhere in memory somewhere
12:44 - in memory suppose address is 200 and
12:51 - Nord is to be allocated memory size of 8
12:54 - bytes has to be allocated that is known
12:55 - as node and here this 200 would be
13:00 - stored in the link in the pointer part
13:02 - of this previous node fine and here the
13:05 - value is 10 and
13:07 - this is the last one so here you can
13:08 - store none so this is how you can see
13:12 - that insertion in a linked list is very
13:15 - easy so here we can say we have removed
13:17 - that fixed size drawback that was in
13:20 - array no need to specify the size that
13:22 - in the linked list I want ten elements
13:25 - 20 elements are like this you can insert
13:28 - anytime an element from in the linked
13:31 - list so when you write a program in
13:33 - linked list then how we will declare the
13:35 - snowed-in
13:37 - array if I want to declare simply you
13:38 - will write data type array name and size
13:41 - that is very easy but in case of linked
13:44 - list cygnus here this particular node is
13:46 - containing two values and type of two
13:49 - values so is different one is integer
13:52 - value and this one is what address so
13:56 - this is what a pointer not a simple
13:58 - variable this is a simple variable this
14:01 - is what a pointer to types in one node
14:05 - fine so you have to define your own data
14:09 - type fine so that user-defined data
14:12 - types you are going to use that is
14:13 - structure so you are going to write
14:17 - strap so after this struct keyword you
14:20 - are going to give the name of your
14:23 - datatype you want to three it fine here
14:24 - I'm taking the name node struct node so
14:29 - within this you will write C one type
14:34 - want to value the type of one is empty
14:36 - cell so here you will write int suppose
14:39 - of a name of variable is a but this is
14:42 - what for this I will declare this as a
14:44 - pointer because only pointer can store
14:48 - address of another variable and this
14:50 - point there is going to store address of
14:53 - this node right not address of any other
14:57 - variable or any other integer variable
15:00 - this pointer is going to store address
15:02 - of another node fine so here you will
15:07 - write what
15:10 - strap node pointer and name of the point
15:15 - that you can say next so this is how we
15:18 - are going to define our new data type
15:20 - that is struct node the name of the data
15:22 - type is complete this one struct
15:24 - no not only not only known that is
15:27 - struct node and these are members of
15:29 - this structure here you write struct
15:32 - keyword then tag and within this you'll
15:34 - write members man two members are there
15:36 - one is this one one is this one now why
15:38 - I am writing here struct node as you
15:41 - know if you want to declare a pointer
15:43 - which is going to store address of some
15:45 - another integer variable then how you
15:47 - will declare int star P this P is going
15:52 - to store address of integer variable
15:55 - fine if I write float history P it means
16:00 - this P is going to store address of a
16:03 - float variable it means it is pointer to
16:05 - float pointer to in so here this is data
16:09 - type this data type is what this data
16:11 - type is for the variable whose address
16:14 - this pointer is going to store fine now
16:18 - here this is the pointer the pointer is
16:21 - going to store address off this one this
16:23 - one this is what node and data type of
16:27 - this node is what this complete struct
16:30 - node name of data type see this is data
16:33 - type struct node so that is why here I
16:35 - am writing data type that in struct node
16:38 - this is same s Turek and this is pointer
16:41 - name you can write next you can write
16:42 - your hair link it's up to you
16:44 - fine now next thing is this is the
16:49 - linked list now another pointer is there
16:52 - you can say head pointer start pointer
16:55 - it it's up to you this pointer is going
16:58 - to store address of the first node in
17:01 - the linked list address so first node is
17:03 - 1 0 2 so this head is going to point to
17:08 - the first node in the linked list right
17:10 - if you know this this address 1 0 2 if
17:14 - you know the value of this head this
17:15 - pointer they can then you can easily
17:17 - reverse this linked list fine but here
17:20 - random access is not possible in air
17:23 - what is there you can directly if you
17:24 - want to access this three you can
17:27 - directly access this tree compiler can
17:29 - directly compute the address of this
17:31 - three if the compiler know the base
17:33 - address but here if you know the base
17:36 - address that is the address of this
17:38 - firstly the first node that is one zero
17:40 - two and if you want to access this one
17:42 - this node this data you want to access
17:45 - but you cannot directly go here compiler
17:48 - cannot directly compute this address
17:50 - fine
17:51 - that is drawback of this thing because
17:54 - here that data is not in consecutive
17:56 - locations it is in scattered locations
17:59 - fine so if you know this value of this
18:03 - head was 0-2 so here you can go from
18:07 - this node you can go where check out the
18:09 - link part see this is what data part and
18:13 - this is link part of the node fine so
18:18 - check out the link part here the address
18:19 - address of which node one one three it
18:21 - means address of this node so you can go
18:24 - to this node now check out the link part
18:26 - 1 2 3 here address is this one you can
18:28 - go to here 1 2 3 so now you can reach
18:32 - here fine
18:33 - so in link list only sequential access
18:36 - is possible you cannot directly access
18:40 - you cannot randomly access any data fine
18:43 - if you want to access this last data
18:46 - then also you have to traverse the
18:49 - complete list first of all this then
18:51 - this then this after 1 3 2 and after
18:53 - that you can go here fine so this is you
18:57 - can say drawback off this thing so this
18:59 - traversal need or you can say this
19:02 - searching will need the time complexity
19:05 - the time is order of n accessing of any
19:11 - elements need order of N in worst case
19:14 - if you want to access the first element
19:16 - then obviously it is 1 only order of 1
19:18 - if last means in worst case it is and
19:22 - you have to traverse the unending sin
19:25 - the list so it is order of n but in
19:28 - array it was accessing of any elements
19:30 - will take order of 1 only constant time
19:32 - fine
19:34 - here insertion is easy and deletion is
19:38 - also easy why so because see if sorted
19:42 - air is there like this see let us take
19:44 - an area of size six only four elements
19:46 - we have in there air and I want to
19:48 - insert five here this is sorted area now
19:51 - where you can insert five here you can
19:53 - insert five only fine so you have to do
19:56 - what you have to shift this 40 here here
20:00 - you have to shift 30 here you have to
20:03 - shift 20 here you have to shift 10 and
20:06 - here now you can insert five right so it
20:10 - will take how many shifting of all the
20:12 - elements so order of n if you want to
20:17 - delete if suppose I want to believe this
20:19 - 10 I want to delete this 10 then also
20:22 - you have to shift 20 here 30 here and 40
20:24 - here then also it is approximately I am
20:27 - going to take order of n fine what it
20:30 - depends the position from where you want
20:32 - to delete and at which position you want
20:34 - to insert the data right if you want to
20:37 - insert suppose between these elements
20:39 - right here one node I want to insert
20:42 - then what you have to update just you
20:45 - have to update
20:46 - see it suppose address this this memory
20:49 - location has been allocated here suppose
20:51 - that the 300 at 300 fine so what you
20:55 - have to do this 300 should be here and
20:57 - this 1 1 3 should be here so this link
21:00 - would be something like this as simple
21:03 - as that
21:03 - right so insertion and deletion is easy
21:06 - in this case rather than array so
21:09 - briefly you can say a linked list is
21:12 - what is it it is a linear data structure
21:14 - it is a collection of data elements
21:16 - which are stored in known consecutive
21:18 - locations next point is some extra space
21:21 - would be required to store the pointers
21:24 - with each value next point you can say
21:26 - insertion and deletion is easier then
21:29 - array next point you can say accessing
21:32 - of any element is going to take order of
21:33 - n time complexity and in array it is
21:36 - order of 1 only next point you can say
21:38 - binary search is not possible in linked
21:40 - list in this fundamental this structure
21:44 - of linked list because binary search in
21:46 - that case we are
21:47 - to find out middle element so here we
21:50 - cannot go directly to middle element so
21:51 - you can say binary search is not
21:52 - possible next point you can say it is of
21:55 - dynamic size so in next video I am going
21:57 - to discuss the basic operations of this
22:00 - linked list traversal insertion deletion
22:02 - something like this with the help of
22:04 - their code as well as we are going to
22:05 - discuss types of linked lists fine so
22:08 - I'll see in the next video till then bye
22:09 - bye

Cleaned transcript:

see this is what this is a snapshot of memory memory is what I have told you already in many videos that it's a long tape of bytes and each byte see these are bytes and each by it is having its own address suppose I am taking this segment of memory memories or this side all extended in this side in this side also extended so I'm taking openended and I'm taking the address started from hundred so the next byte address is 1 0 man 1/4 next byte it is 1 0 2 like this see this memory is very crucial data source in our system we don't have unlimited memory in a computer system fine so it is a responsibility of a memory manager to manage this resource to manage the memory to which process memory is to be located how much memory is to be allocated to which memory is free which memory is allocated now like this fine so memory manager is going to take care of this thing fine now suppose a programmer want some memory in this case a programmer is writing a program and he is going to declare a variable like this in suppose variable name is X fine now when after declaring this variable what happens the memory manager will look at how many bytes four bytes for this integer in typical compilers fine so let us suppose memory manager are located 4 bytes to this X and started from which location started from let us suppose this location from 1 1 to these 4 bytes these four bytes has been allocated to this X and memory manager will tell the programmer that I have allocated to the memory which has started from one one two one two three four bytes fine and suppose he has entered sum here is initialized at runtime this X and he can enter some integer value like 7 so now the programmer suppose we want to store three integers fine so we we have we have read the concept of airings so how he will declare int suppose array name is a and size is 3 so see array is what action of data items which are of same datatype fine so for three integers for three venues the memory manager will allocate how many bytes 3 into 4 that is 2 any bytes fine and then that 12 bytes would be in consecutive continuous location that integer the values of the areas are always stored in continuous locations so let us suppose one complete block of 12 bytes has been allocated suppose from 102 from hundred to this one one one this is free and memory manager has allocated the hello has allocated this block to this a so now programmer has entered three values here now the programmer wants to store one extra integer value an extra value and he wants to extend this array size now he will last through the many memory manager that I want to store one extra value can I extend can you extend the size and I want to extend the same block I want to extend the size of there I am NOT going to declare another variable I am going to extend the size of that I want size of array for now now what the memory manager will do see because in advance the programmer told that I want size for only three integers so he has allocated 12 bytes now what a memory manager will say he'll say I cannot extend the size of your area because I have already allocated that that consecutive block to some other variable because at starting I didn't know that you are going to extend your array size so now programmers will ask what can I do now I won't add a size 4 so now memory manager will say I can allocate you a fresh block of 16 bytes because for for size of the array how many bytes would be required 4 into 4 that is 16 but I cannot extend this block now what programmer will think programmer will think that maybe in future I need to store 10 values fine so it's starting only I asked the memory manager to allocate me the size 450 values for 50 elements that I want my array size 50 now hint en 50 maximum limit now what memory manager will do my many little bit locate how many bytes 15 for that is 200 bytes a fresh block of 200 bytes of consecutive locations so these 200 bytes block is from maybe you can say from 122 this 3 109 addresses 3 1 9 these blocks would be allocated to this one but now suppose the programmer only needs to store maximum 10 elements so this space is wasted now because he is going to use only how many bytes 10 into 4 that is 40 bytes he is going to use starting 40 bytes right and remaining memory is what that memory has already been allocated to this arena so memory is not free the memory manager cannot allocate this free memory to another variable but this programmer is not using that memory so this is what the wastage of memory so this is a main drawback of n because of the fixed size because the programmer has to give fixed size of the array in advance at compile time only because of this vestige of memory is there in case of arrays fine now what is the solution of this problem so now the solution of this problem is what length list and here here see if the memory manager has allocated these fresh block then these values would be copied here only so that would be a very tedious work to do and again suppose after some time thus thus the programmer wants the size programmer wants to store 52 elements then again programmer maybe is not able to extend the memory in some cases then fresh a block of 452 452 elements how many bytes 52 into 4 so 2 0 8 bytes would be allocated a new block of to 0 8 byte would be allocated and all the that elements of this previous array would be copied there so very tedious work to ruin Harry's mind the solution is what linked lists so linked lists is also a collection of elements the arrays were also a collection of elements right it is a collection of more than one date items fine link list is also a collection of more than one date items but the only difference is what in linked lists thus this data items are not storing consecutive locations because this in area these are stored in consecutive location continuous location fine now how see if the programmer make a request for one element he wants to store one element fine now the memory manager suppose are located and for integer value for bytes so suppose memory manager has allocated these four bytes right for the request of integer variable and suppose he has stored some value that is for here after this suppose he has made another separate request for one variable that is for storing an integer value so again four bytes would be allocated but it is not compulsory that that four bytes would be allocated consecutive to to this because that is a separate request that is not a requesting form of Eric so suppose now for next request memory manager has allocated from here four bytes right one two three and four and he has stored here suppose three fine now again he has requested two more requests for until for storing integer values so now this is how for the four separate request of four integer values the memory manager has allocated these four blocks to the programmer so see here these four values are also a collection find that is a linked list because here I'm not discussing that he has he has declared like this in text and into I into Z or in Thai something like this not variable separate variables this is also a collection file this is also a list now suppose if this these four are in a collection in array that is fine because these are consecutive locations so if you know this thing the base address of this one you can easily the compiler can easy compute this address of the next one but here we cannot say if this we are at this value in this collection we are at this and visa then we cannot say at where where the next integer is fine in that collection so some extra information has to be stored that is what if with the this thing with this thing with this value if we store address of that next value then we can easily reach to here fine and from here in the list with this second value if we store the address of the next value the next integer value then back we can easily go from here to here and here we can store with this value the address of the next value fine so this is what this is also a collection of four integer values but here the these values are not storing contiguous location we have removed that drawback fine now see so some extra space is to be located with this one for storing address of the next value and address of the next value which variable can store address of any another value that is a pointer variable can store address of some another variable fine so here four bytes would be allocated again because in typical compilers it there for storing the value for showing the address it takes four bytes so see here again four bytes would be located with this one two three and four fine for storing the address of this one right here four bytes would be located for storing address of this one here with this four bytes would be allocated first story this one so total how many bytes would be allocated eight bytes for for this value and four bytes for storing the pointer to the next well right so this is the memory representation logically how we will represent this linked list see four three four nodes one is this one this then in this in this with this for address of next would be stored see suppose address of this is 1 0 2 for three addresses we have started from one one three four eight we have started from one two three and address of this is 132 so here with this four one one three would be stored so this will point to the next node here 123 would be stored so this will point to this node and here 132 will be stored this will point to this node and suppose this is the last node in the list so here null would be stored so in the linked list this complete is known as a node so here you can say this is drawback of linked list with the with this well knew you how to store pointer also so some extra spaces to be located the pointer to the next node here pointer to next node this complete is known as a node here fine so this removes the drawback of array now suppose I want to extend the size of linked list I want to insert one extra element here I want to insert 10 in the in my linked list right now suppose I want to insert 10 here so here can we insert this 10 directly here or the memory manager will allocate space for all the five variables some fresh block would be allocated no why so because these values are not not in contiguous locations so if anywhere space is available for 8 bytes then memory manager can allocate space they are only fine and we can provide link to link into this node for that new node inserted but in array we cannot do this because in array drobik is what all the value should be in consecutive locations fine so maybe sometimes if it is not possible to extend this size in case of arrays now if you want to insert this thing so simply somewhere in memory somewhere in memory suppose address is 200 and Nord is to be allocated memory size of 8 bytes has to be allocated that is known as node and here this 200 would be stored in the link in the pointer part of this previous node fine and here the value is 10 and this is the last one so here you can store none so this is how you can see that insertion in a linked list is very easy so here we can say we have removed that fixed size drawback that was in array no need to specify the size that in the linked list I want ten elements 20 elements are like this you can insert anytime an element from in the linked list so when you write a program in linked list then how we will declare the snowedin array if I want to declare simply you will write data type array name and size that is very easy but in case of linked list cygnus here this particular node is containing two values and type of two values so is different one is integer value and this one is what address so this is what a pointer not a simple variable this is a simple variable this is what a pointer to types in one node fine so you have to define your own data type fine so that userdefined data types you are going to use that is structure so you are going to write strap so after this struct keyword you are going to give the name of your datatype you want to three it fine here I'm taking the name node struct node so within this you will write C one type want to value the type of one is empty cell so here you will write int suppose of a name of variable is a but this is what for this I will declare this as a pointer because only pointer can store address of another variable and this point there is going to store address of this node right not address of any other variable or any other integer variable this pointer is going to store address of another node fine so here you will write what strap node pointer and name of the point that you can say next so this is how we are going to define our new data type that is struct node the name of the data type is complete this one struct no not only not only known that is struct node and these are members of this structure here you write struct keyword then tag and within this you'll write members man two members are there one is this one one is this one now why I am writing here struct node as you know if you want to declare a pointer which is going to store address of some another integer variable then how you will declare int star P this P is going to store address of integer variable fine if I write float history P it means this P is going to store address of a float variable it means it is pointer to float pointer to in so here this is data type this data type is what this data type is for the variable whose address this pointer is going to store fine now here this is the pointer the pointer is going to store address off this one this one this is what node and data type of this node is what this complete struct node name of data type see this is data type struct node so that is why here I am writing data type that in struct node this is same s Turek and this is pointer name you can write next you can write your hair link it's up to you fine now next thing is this is the linked list now another pointer is there you can say head pointer start pointer it it's up to you this pointer is going to store address of the first node in the linked list address so first node is 1 0 2 so this head is going to point to the first node in the linked list right if you know this this address 1 0 2 if you know the value of this head this pointer they can then you can easily reverse this linked list fine but here random access is not possible in air what is there you can directly if you want to access this three you can directly access this tree compiler can directly compute the address of this three if the compiler know the base address but here if you know the base address that is the address of this firstly the first node that is one zero two and if you want to access this one this node this data you want to access but you cannot directly go here compiler cannot directly compute this address fine that is drawback of this thing because here that data is not in consecutive locations it is in scattered locations fine so if you know this value of this head was 02 so here you can go from this node you can go where check out the link part see this is what data part and this is link part of the node fine so check out the link part here the address address of which node one one three it means address of this node so you can go to this node now check out the link part 1 2 3 here address is this one you can go to here 1 2 3 so now you can reach here fine so in link list only sequential access is possible you cannot directly access you cannot randomly access any data fine if you want to access this last data then also you have to traverse the complete list first of all this then this then this after 1 3 2 and after that you can go here fine so this is you can say drawback off this thing so this traversal need or you can say this searching will need the time complexity the time is order of n accessing of any elements need order of N in worst case if you want to access the first element then obviously it is 1 only order of 1 if last means in worst case it is and you have to traverse the unending sin the list so it is order of n but in array it was accessing of any elements will take order of 1 only constant time fine here insertion is easy and deletion is also easy why so because see if sorted air is there like this see let us take an area of size six only four elements we have in there air and I want to insert five here this is sorted area now where you can insert five here you can insert five only fine so you have to do what you have to shift this 40 here here you have to shift 30 here you have to shift 20 here you have to shift 10 and here now you can insert five right so it will take how many shifting of all the elements so order of n if you want to delete if suppose I want to believe this 10 I want to delete this 10 then also you have to shift 20 here 30 here and 40 here then also it is approximately I am going to take order of n fine what it depends the position from where you want to delete and at which position you want to insert the data right if you want to insert suppose between these elements right here one node I want to insert then what you have to update just you have to update see it suppose address this this memory location has been allocated here suppose that the 300 at 300 fine so what you have to do this 300 should be here and this 1 1 3 should be here so this link would be something like this as simple as that right so insertion and deletion is easy in this case rather than array so briefly you can say a linked list is what is it it is a linear data structure it is a collection of data elements which are stored in known consecutive locations next point is some extra space would be required to store the pointers with each value next point you can say insertion and deletion is easier then array next point you can say accessing of any element is going to take order of n time complexity and in array it is order of 1 only next point you can say binary search is not possible in linked list in this fundamental this structure of linked list because binary search in that case we are to find out middle element so here we cannot go directly to middle element so you can say binary search is not possible next point you can say it is of dynamic size so in next video I am going to discuss the basic operations of this linked list traversal insertion deletion something like this with the help of their code as well as we are going to discuss types of linked lists fine so I'll see in the next video till then bye bye
