With timestamps:

00:00 - so in the series of learning Python
00:02 - programming language in the previous
00:03 - year we have seen basics of sets like
00:05 - what I said how to define that how sets
00:07 - are different from tuples and list some
00:09 - properties offsets and some methods like
00:12 - add remotes card here pop on set right
00:15 - the next is we will discuss some
00:18 - operations on set like Union
00:19 - intersection different symmetric
00:21 - difference right I hope you are aware
00:23 - about these operations right if you have
00:26 - read this in mathematics these are same
00:29 - let me just tell you in brief what is
00:32 - Union and intersection and then with the
00:34 - help of one example program
00:36 - like then I'll show you practically on
00:40 - my laptop right so if we have two set we
00:43 - have set one
00:45 - and set two
00:46 - and here we have like one two three four
00:50 - five
00:51 - and in this set I am having values like
00:54 - 4 5 6 10 11 something like this any
00:58 - values can be there it's not like that
00:59 - these should be in ascending or in this
01:02 - kind of order no
01:04 - so Union is what if you have heard about
01:07 - wine diagram
01:09 - then this is what set one and this is
01:12 - what set to this circle this is for set
01:14 - one so we have one two three four five
01:18 - three
01:20 - and let's suppose write down four and
01:22 - five here because 4 and 5 these are
01:25 - common in set two also we have 4 5 6 10
01:29 - 11. right
01:31 - these four and five these are common
01:33 - that is why I have written this thing
01:34 - here using main diagram so if I found if
01:37 - I I find the set one Union
01:41 - set two this is what I guess we use the
01:44 - symbol in mathematics for Union for
01:46 - intersection we use this thing
01:48 - right but here we will use something
01:51 - different while we you know do in in
01:55 - brokerable we write program right so
01:57 - Union would be something like this it
01:59 - would be set of all the elements like
02:02 - one two three four five six ten
02:06 - eleven so this would be Union of set one
02:08 - and set two four and five these are two
02:11 - times in set one set two but we'll write
02:13 - here only one time duplicates are not
02:15 - allowed in the set so this is what union
02:16 - if you want to find out in this
02:19 - intersection set one intersection set
02:21 - two
02:22 - then
02:24 - intersection means what elements are
02:26 - common in both set one and set two so
02:28 - common is four and five so it will give
02:30 - four and five
02:32 - in the section will give those it will
02:34 - set of all the elements which are
02:36 - which are present in both set 1 and set
02:39 - two so this is our intersection
02:42 - like same difference is what like if I
02:45 - write
02:46 - set 1 minus set to so this is what a
02:48 - difference so it will give whatever
02:50 - element in set one that are not present
02:53 - in set two
02:55 - so one
02:57 - two and three four and five these are
02:59 - present in set two so it will not give
03:01 - this so there's no difference symmetric
03:03 - difference is what
03:05 - present set of all the elements which
03:08 - are present in either set one or set two
03:10 - but not in both or we can write down
03:12 - something like this symmetric difference
03:14 - is what
03:15 - set 1 Union set two
03:19 - minus
03:21 - set 1 intersection set two
03:25 - in another way we can write out this is
03:26 - symmetric difference of
03:29 - this set one and set two
03:32 - right so it will give if you you want to
03:35 - find out symmetric difference of set 1
03:37 - and set two then what set you will get
03:39 - here
03:42 - one two three four and five no four and
03:46 - five is intersection
03:48 - these elements are present in both so it
03:50 - will not include four and five
03:52 - six ten eleven this would be symmetric
03:56 - difference of set 1 and set two right so
03:59 - I guess mathematically you have some
04:00 - idea about Union in the section
04:02 - difference so let's see with the help of
04:04 - an example practically we'll see this
04:06 - thing okay so let's create a new file
04:09 - here
04:10 - and we'll be talking about
04:12 - operations
04:14 - underscore on underscore set
04:19 - dot p y
04:21 - right
04:23 - we will take first
04:24 - two sets set one and set two okay so
04:27 - this time I am taking ah string value in
04:30 - set
04:31 - so we have taken two set set one and set
04:34 - two Ram sham Jenny and set two we have
04:36 - Jenny Jia and Akash right so first thing
04:39 - will perform Union
04:41 - so we can do this perform this operation
04:44 - with the help of two methods we we can
04:46 - we have a method dot update in sorry dot
04:50 - Union in Python to perform Union Plus
04:52 - one operator also we have so two ways
04:54 - are there I'll show you both the ways
04:56 - first thing
04:58 - set one dot I am c as you can see the
05:03 - method Union
05:04 - so I'm using this here dot Union and in
05:09 - this bracket I'll pass set to so this
05:12 - method would be invoked on one of the
05:15 - set
05:16 - and second set will be passed as an
05:18 - argument rather than this we can also
05:20 - write something like this set to Dot
05:23 - Union and in bracket we can pass set one
05:26 - both are fine in any of the set we can
05:30 - invoke this method and second set we can
05:32 - pass an argument okay first is this
05:34 - thing so let's suppose I am invoking
05:37 - this on set one only set one dot Union
05:38 - set two
05:40 - fine
05:41 - now after Union what you will get let's
05:44 - print this here only print okay now let
05:46 - me show you what union will print see
05:51 - it's Akash Jenny Ram sham JIA
05:54 - C Jenny is two times so it will give
05:57 - Jenny only one time
05:59 - okay all the elements but
06:02 - only one time no no duplicates are
06:04 - allowed so this is what union
06:07 - what you can do set to wrote Union set
06:09 - one that is also fine
06:11 - now second is what with the help of an
06:13 - operator also we can perform like this
06:15 - set one and we have this
06:18 - this operator right
06:22 - and here we can write down set two
06:26 - this is also perform Union so let's just
06:28 - comment this out
06:30 - and let's print this thing
06:38 - let's run this and I'll show you see
06:41 - this also give you the union of these
06:43 - set but Jenny would be only one time
06:44 - only all the elements in both in set one
06:47 - set two but Jenny is only one time it
06:49 - will give so this also can perform Union
06:52 - right now for multiple set also we can
06:55 - perform these operation like I have one
06:57 - more set set three
06:59 - so we can also perform Union of all the
07:03 - set like we can write set three this is
07:05 - also fine set four set five set six
07:07 - something like this multiple set also we
07:10 - can do this thing on multiple sets right
07:13 - okay let's run this and I'll show you
07:15 - what output you will get here let's run
07:17 - this and see Union of all the three set
07:20 - you are getting
07:21 - right pradeep is also like pradeep and
07:24 - uncle is also there
07:26 - same
07:28 - if you want to do this I want to apply
07:31 - this Union on multiple set so you can
07:34 - invoke the union method on one set and
07:36 - all the other set we can pass
07:39 - in argument like two I'm passing set two
07:42 - set three
07:43 - so let's comment this out and run this
07:47 - and see what output you will get here
07:52 - see it will give you Union of these
07:55 - three set so multiple set also we can
07:57 - invoke these methods and operators but
08:00 - see behavior is same both the this
08:03 - method and this operator but there is a
08:05 - subtle difference in this
08:07 - for this operator both the operand
08:10 - should be set
08:13 - and for this dot Union method
08:17 - you can invoke this on set but in
08:20 - argument you can pass any I travel that
08:24 - like you can pass a tuple you can pass
08:25 - the list and this will convert into
08:28 - first set and then perform Union on that
08:32 - I travel
08:33 - you get it no let me just show you see
08:37 - if I do set one dot Union rather than
08:40 - these set I'll pass here suppose a tuple
08:44 - so I'm passing double here in there I'm
08:48 - passing name
08:51 - Mohan and I'm passing like
08:56 - Jenny two names only I am passing so it
08:59 - will convert this Tuple first into set
09:01 - and then apply Union method on this
09:04 - let's run this
09:06 - and see what output we are getting Jenny
09:08 - sham RAM and Mohan because in set one we
09:12 - have Ram sham Jenny and here we have
09:14 - Mohan and Jenny so Jenny in both the set
09:17 - so it will take only one time Jenny and
09:19 - Mohan it will take care so this is what
09:20 - union but in this case this is not
09:23 - allowed see
09:25 - set one and here I want to pass a tuple
09:29 - the same Tuple
09:33 - okay let's comment this out and
09:36 - remove this
09:39 - now let's run this
09:40 - and I'll show you what output you will
09:42 - get see the error unsupported operand
09:45 - type for this operator set and Tuple
09:47 - because this is set resistable so for
09:49 - this operator both the operand should be
09:51 - set but for this this is not a case you
09:54 - can invoke this on set but in argument
09:55 - you can pass any activate but like list
09:58 - or double or dictionary something like
10:00 - this right
10:02 - now we have update
10:05 - also like if you want to update these
10:07 - sets because set items we cannot change
10:11 - but we can change the com set we can
10:13 - update the set so we have a method Union
10:16 - update using that we can update any set
10:19 - so if I
10:21 - you know
10:25 - call that method so this that if you
10:28 - want to update like set one so set one
10:30 - dot
10:32 - update
10:35 - and here you can pass like if I want to
10:37 - pass set 2 suppose pass set two so it
10:39 - will update set one it will add the
10:43 - element of set 2 to set one but note
10:47 - those Elements which are already present
10:48 - in set one no duplicacy right okay let's
10:52 - print this set one now
10:59 - let's run this
11:01 - and see set one it has updated set one
11:04 - Whatever set in set two it has added
11:07 - Jenny Gia and Akash so G and Akash has
11:10 - been added because Jenny is already in
11:12 - set one
11:13 - so this is now set when it has updated
11:15 - set one if you want to update set two so
11:17 - here you can call this update on set two
11:19 - so here set two and in bracket you can
11:21 - pass whatever you want to update rather
11:24 - than set if I pass here like I'm passing
11:28 - a list of names and I want to update
11:32 - with like the I have Jenny I have like
11:36 - Mohan
11:38 - here and now we'll check what is set one
11:42 - so see
11:46 - okay see now you must be thinking Jenny
11:48 - is two times but no here we have J is
11:51 - capital and here we have J small so this
11:53 - Jenny and this 10 is different okay
11:55 - sensitive
11:56 - if I write here
11:58 - capital j
12:00 - then this time
12:02 - it will
12:06 - add genuin only one time
12:09 - engine so like this we can update any
12:13 - set set one or set or whatever set you
12:15 - want to update just pass values here or
12:17 - set also you can pass right so this is
12:19 - Union update of any set
12:21 - right okay now you got what is Union
12:24 - what is Union update how you can do this
12:26 - thing or with the help of operator also
12:29 - we can do update
12:31 - like set one
12:34 - if you want to update set one set one
12:36 - this operator equal to
12:40 - set 2.
12:43 - it also will update set one it will add
12:46 - value of set 2 to set one and after that
12:48 - we can print set one so this is also
12:50 - allowed or don't update method is also
12:52 - allowed you can try out this thing also
12:55 - right now we'll see what is intersection
12:58 - okay we are having three set now same
13:03 - that method will also be invoked on one
13:05 - of the set like set one we have dot
13:08 - intersection method intersection and in
13:11 - this I am passing set 2.
13:13 - so in bracket you can pass any
13:15 - other set right or you can write on set
13:18 - two load in the in the section set one
13:20 - okay and let's print this
13:24 - what intersection what output it will
13:26 - give
13:28 - just think and then run if you are
13:31 - getting the same answer or not see it
13:32 - will be only Jenny because intersection
13:34 - will give which is common in both so
13:36 - Jenny is common
13:37 - so it will give Jenny only right
13:40 - okay
13:43 - we can pass this on multiple set also
13:45 - comma set three
13:48 - so at this time what you will get C
13:51 - an empty set because
13:53 - set one
13:55 - in in three set what is common nothing
13:57 - is common in all the three set so that
14:01 - would be an empty set if we have Jenny
14:03 - in this set three also then it will give
14:04 - Jenny okay common in three sets so in
14:07 - multiple set also we can
14:09 - call this intersection
14:11 - method
14:13 - now we have
14:15 - an operator also which
14:18 - with help of operator also we can do
14:21 - intersection and that operator is set
14:23 - one
14:24 - and
14:26 - set two
14:28 - this is also intersection with the help
14:30 - of operator also you can perform
14:32 - intersection right but the same thing
14:35 - the operand of this operator would be
14:38 - both set and set but here you can pass
14:40 - any iterable also right let me just run
14:43 - this and it will give you gen same
14:46 - output
14:46 - right
14:48 - and if I pass here like intersection
14:51 - rather than set
14:54 - in intersection I am passing a list
14:59 - okay I am passing only Mohan and Shiva
15:03 - let's run this
15:05 - and see it is an empty set because set
15:07 - one ram sham Jenny and I want
15:11 - intersection with these values so this
15:13 - list would be converted first of all set
15:14 - so this is set having Mohan and Shiva
15:16 - nothing is common in these set so it
15:18 - will give an empty set right so here we
15:21 - can pass
15:22 - any High treble like list dictionary
15:25 - eatable but in this Opera if you are
15:28 - using this operator to perform
15:29 - intersection then this is not allowed
15:31 - both operands should be set and so
15:32 - multiple same you can do legs and
15:36 - set three this is also allowed here
15:39 - right
15:40 - okay you get what is an intersection now
15:43 - let's uh talk about intersection update
15:47 - that would update any set so if you want
15:49 - to update any set using intersection we
15:51 - have a method intersection update so
15:53 - let's do that thing also
15:57 - what will do if you want to update set
15:59 - one so set one dot we have a method
16:03 - intersection of data as you can see here
16:05 - so you can choose this method and You
16:06 - Break It We can pass another set say two
16:11 - okay fine so let's
16:13 - print now
16:16 - set
16:18 - one because set one has been updated so
16:20 - this will not return anything that is
16:22 - why we are not printing here only it
16:24 - will not print here so you have to print
16:26 - set one separately let's run this
16:29 - and since set when we have genuine so it
16:31 - will update set one
16:34 - having only those item which are common
16:36 - in set 1 and set two so in set one set
16:39 - two which we have common Jenny so it
16:41 - will update set one
16:43 - with Jenny so in set one we have now
16:45 - only gen right
16:48 - but in set to we have Jenny G and Akash
16:51 - right so this is what intersection
16:52 - update if you want to update set two so
16:54 - here
16:55 - on set two we can call intersection
16:57 - update right and here we can
17:01 - write set one so now set one would be as
17:05 - it is but if you print here set two
17:09 - that would have been updated so let's
17:11 - run this
17:12 - and see this is set one Ram Journey and
17:14 - Akash and set two is now genuine so it
17:17 - will update set to
17:19 - retaining those values only which are
17:21 - common in set one and set two right
17:23 - rather than this set here you can pass
17:26 - any other value if you want to
17:28 - intersection with a list or you know
17:31 - like this Mohan and Shiva so let's
17:34 - suppose pass this thing here
17:37 - and now let's run this
17:39 - now first set one is this but set two is
17:43 - empty set because set 2 is having Jenny
17:45 - gr cast but we are intersection we are
17:48 - doing intersection update with Mohan and
17:50 - Shiva
17:51 - so there is nothing common in these two
17:54 - so set two would be an empty set now
17:56 - right so this is intersection update so
17:59 - I hope you got these operations on set
18:01 - in the next we will see something more
18:02 - about sex so now I'll see you in the
18:04 - next video till then bye take care

Cleaned transcript:

so in the series of learning Python programming language in the previous year we have seen basics of sets like what I said how to define that how sets are different from tuples and list some properties offsets and some methods like add remotes card here pop on set right the next is we will discuss some operations on set like Union intersection different symmetric difference right I hope you are aware about these operations right if you have read this in mathematics these are same let me just tell you in brief what is Union and intersection and then with the help of one example program like then I'll show you practically on my laptop right so if we have two set we have set one and set two and here we have like one two three four five and in this set I am having values like 4 5 6 10 11 something like this any values can be there it's not like that these should be in ascending or in this kind of order no so Union is what if you have heard about wine diagram then this is what set one and this is what set to this circle this is for set one so we have one two three four five three and let's suppose write down four and five here because 4 and 5 these are common in set two also we have 4 5 6 10 11. right these four and five these are common that is why I have written this thing here using main diagram so if I found if I I find the set one Union set two this is what I guess we use the symbol in mathematics for Union for intersection we use this thing right but here we will use something different while we you know do in in brokerable we write program right so Union would be something like this it would be set of all the elements like one two three four five six ten eleven so this would be Union of set one and set two four and five these are two times in set one set two but we'll write here only one time duplicates are not allowed in the set so this is what union if you want to find out in this intersection set one intersection set two then intersection means what elements are common in both set one and set two so common is four and five so it will give four and five in the section will give those it will set of all the elements which are which are present in both set 1 and set two so this is our intersection like same difference is what like if I write set 1 minus set to so this is what a difference so it will give whatever element in set one that are not present in set two so one two and three four and five these are present in set two so it will not give this so there's no difference symmetric difference is what present set of all the elements which are present in either set one or set two but not in both or we can write down something like this symmetric difference is what set 1 Union set two minus set 1 intersection set two in another way we can write out this is symmetric difference of this set one and set two right so it will give if you you want to find out symmetric difference of set 1 and set two then what set you will get here one two three four and five no four and five is intersection these elements are present in both so it will not include four and five six ten eleven this would be symmetric difference of set 1 and set two right so I guess mathematically you have some idea about Union in the section difference so let's see with the help of an example practically we'll see this thing okay so let's create a new file here and we'll be talking about operations underscore on underscore set dot p y right we will take first two sets set one and set two okay so this time I am taking ah string value in set so we have taken two set set one and set two Ram sham Jenny and set two we have Jenny Jia and Akash right so first thing will perform Union so we can do this perform this operation with the help of two methods we we can we have a method dot update in sorry dot Union in Python to perform Union Plus one operator also we have so two ways are there I'll show you both the ways first thing set one dot I am c as you can see the method Union so I'm using this here dot Union and in this bracket I'll pass set to so this method would be invoked on one of the set and second set will be passed as an argument rather than this we can also write something like this set to Dot Union and in bracket we can pass set one both are fine in any of the set we can invoke this method and second set we can pass an argument okay first is this thing so let's suppose I am invoking this on set one only set one dot Union set two fine now after Union what you will get let's print this here only print okay now let me show you what union will print see it's Akash Jenny Ram sham JIA C Jenny is two times so it will give Jenny only one time okay all the elements but only one time no no duplicates are allowed so this is what union what you can do set to wrote Union set one that is also fine now second is what with the help of an operator also we can perform like this set one and we have this this operator right and here we can write down set two this is also perform Union so let's just comment this out and let's print this thing let's run this and I'll show you see this also give you the union of these set but Jenny would be only one time only all the elements in both in set one set two but Jenny is only one time it will give so this also can perform Union right now for multiple set also we can perform these operation like I have one more set set three so we can also perform Union of all the set like we can write set three this is also fine set four set five set six something like this multiple set also we can do this thing on multiple sets right okay let's run this and I'll show you what output you will get here let's run this and see Union of all the three set you are getting right pradeep is also like pradeep and uncle is also there same if you want to do this I want to apply this Union on multiple set so you can invoke the union method on one set and all the other set we can pass in argument like two I'm passing set two set three so let's comment this out and run this and see what output you will get here see it will give you Union of these three set so multiple set also we can invoke these methods and operators but see behavior is same both the this method and this operator but there is a subtle difference in this for this operator both the operand should be set and for this dot Union method you can invoke this on set but in argument you can pass any I travel that like you can pass a tuple you can pass the list and this will convert into first set and then perform Union on that I travel you get it no let me just show you see if I do set one dot Union rather than these set I'll pass here suppose a tuple so I'm passing double here in there I'm passing name Mohan and I'm passing like Jenny two names only I am passing so it will convert this Tuple first into set and then apply Union method on this let's run this and see what output we are getting Jenny sham RAM and Mohan because in set one we have Ram sham Jenny and here we have Mohan and Jenny so Jenny in both the set so it will take only one time Jenny and Mohan it will take care so this is what union but in this case this is not allowed see set one and here I want to pass a tuple the same Tuple okay let's comment this out and remove this now let's run this and I'll show you what output you will get see the error unsupported operand type for this operator set and Tuple because this is set resistable so for this operator both the operand should be set but for this this is not a case you can invoke this on set but in argument you can pass any activate but like list or double or dictionary something like this right now we have update also like if you want to update these sets because set items we cannot change but we can change the com set we can update the set so we have a method Union update using that we can update any set so if I you know call that method so this that if you want to update like set one so set one dot update and here you can pass like if I want to pass set 2 suppose pass set two so it will update set one it will add the element of set 2 to set one but note those Elements which are already present in set one no duplicacy right okay let's print this set one now let's run this and see set one it has updated set one Whatever set in set two it has added Jenny Gia and Akash so G and Akash has been added because Jenny is already in set one so this is now set when it has updated set one if you want to update set two so here you can call this update on set two so here set two and in bracket you can pass whatever you want to update rather than set if I pass here like I'm passing a list of names and I want to update with like the I have Jenny I have like Mohan here and now we'll check what is set one so see okay see now you must be thinking Jenny is two times but no here we have J is capital and here we have J small so this Jenny and this 10 is different okay sensitive if I write here capital j then this time it will add genuin only one time engine so like this we can update any set set one or set or whatever set you want to update just pass values here or set also you can pass right so this is Union update of any set right okay now you got what is Union what is Union update how you can do this thing or with the help of operator also we can do update like set one if you want to update set one set one this operator equal to set 2. it also will update set one it will add value of set 2 to set one and after that we can print set one so this is also allowed or don't update method is also allowed you can try out this thing also right now we'll see what is intersection okay we are having three set now same that method will also be invoked on one of the set like set one we have dot intersection method intersection and in this I am passing set 2. so in bracket you can pass any other set right or you can write on set two load in the in the section set one okay and let's print this what intersection what output it will give just think and then run if you are getting the same answer or not see it will be only Jenny because intersection will give which is common in both so Jenny is common so it will give Jenny only right okay we can pass this on multiple set also comma set three so at this time what you will get C an empty set because set one in in three set what is common nothing is common in all the three set so that would be an empty set if we have Jenny in this set three also then it will give Jenny okay common in three sets so in multiple set also we can call this intersection method now we have an operator also which with help of operator also we can do intersection and that operator is set one and set two this is also intersection with the help of operator also you can perform intersection right but the same thing the operand of this operator would be both set and set but here you can pass any iterable also right let me just run this and it will give you gen same output right and if I pass here like intersection rather than set in intersection I am passing a list okay I am passing only Mohan and Shiva let's run this and see it is an empty set because set one ram sham Jenny and I want intersection with these values so this list would be converted first of all set so this is set having Mohan and Shiva nothing is common in these set so it will give an empty set right so here we can pass any High treble like list dictionary eatable but in this Opera if you are using this operator to perform intersection then this is not allowed both operands should be set and so multiple same you can do legs and set three this is also allowed here right okay you get what is an intersection now let's uh talk about intersection update that would update any set so if you want to update any set using intersection we have a method intersection update so let's do that thing also what will do if you want to update set one so set one dot we have a method intersection of data as you can see here so you can choose this method and You Break It We can pass another set say two okay fine so let's print now set one because set one has been updated so this will not return anything that is why we are not printing here only it will not print here so you have to print set one separately let's run this and since set when we have genuine so it will update set one having only those item which are common in set 1 and set two so in set one set two which we have common Jenny so it will update set one with Jenny so in set one we have now only gen right but in set to we have Jenny G and Akash right so this is what intersection update if you want to update set two so here on set two we can call intersection update right and here we can write set one so now set one would be as it is but if you print here set two that would have been updated so let's run this and see this is set one Ram Journey and Akash and set two is now genuine so it will update set to retaining those values only which are common in set one and set two right rather than this set here you can pass any other value if you want to intersection with a list or you know like this Mohan and Shiva so let's suppose pass this thing here and now let's run this now first set one is this but set two is empty set because set 2 is having Jenny gr cast but we are intersection we are doing intersection update with Mohan and Shiva so there is nothing common in these two so set two would be an empty set now right so this is intersection update so I hope you got these operations on set in the next we will see something more about sex so now I'll see you in the next video till then bye take care
