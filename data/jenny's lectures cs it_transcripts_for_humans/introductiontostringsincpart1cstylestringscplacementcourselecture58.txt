With timestamps:

00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of learning
00:04 - C++ programming language in the previous
00:05 - video we have seen array of vector
00:08 - vectors and Vector of vectors right so I
00:10 - hope vectors are clear to you guys
00:12 - Vector pair Vector of pair array of
00:14 - vector vector of vector right now in
00:17 - this video we'll be discussing uh next
00:20 - topic which is strings in C++ everything
00:22 - about strings with the help of program
00:24 - we'll see in this video right now see
00:27 - C++ provides two way of string
00:30 - representation basically uh one is C
00:33 - style strings and one is C++ strings
00:36 - both are
00:37 - different right so both we will discuss
00:40 - or you can say C style character strings
00:43 - and one is C++ strings these both are
00:46 - different okay I hope now if you have uh
00:50 - gone through the previous videos of mine
00:51 - that C programming videos then you are
00:54 - aware about C style strings how to use
00:56 - these strings the member function what
00:58 - are the functions we can use in these
01:00 - strings not member function functions
01:03 - right C++ strings are different right so
01:06 - first we'll just revise and we'll see
01:08 - what are C style strings in this video
01:12 - with the help of proper program and in
01:13 - the next video we'll see uh we'll see
01:15 - some drawbacks of these strings and why
01:18 - these strings are
01:21 - useful right so this thing C++ strings
01:24 - we'll discuss in next video right so
01:26 - first we'll be discussing C style uh Str
01:30 - R okay if you want to store one
01:33 - character then how to store we simply
01:35 - take a variable of car type like car C
01:38 - and like sorry A Single Character I want
01:40 - to store so it would in single code like
01:43 - a if you want to store one integer then
01:45 - like in I equal to 1 this is how we are
01:49 - going to store if you want to store more
01:52 - than one integer so I mean aray of
01:54 - integer so we can write something like
01:56 - this array 10 and here we can store 1 2
01:59 - 3
02:00 - like this more than one integer right
02:03 - but what if we want to store the
02:06 - complete name like Janti katri Jenny's
02:08 - lectures or like hi welcome these things
02:13 - complete sentence these are we can say
02:16 - uh array of
02:18 - characters more than one character I
02:21 - want to store not only single character
02:23 - in that case we can use a character
02:26 - array so how we can use like care
02:30 - and CH H and here I can provide like
02:34 - five length is five and simply I can
02:38 - store more than one character
02:41 - here like j e n and y the size is five
02:45 - so I'm storing five characters here so
02:47 - this is character array actually it's
02:49 - not a string it is character
02:54 - array it is having sequence of or you
02:56 - can say more than one character right
03:00 - character array is not having null at
03:04 - the
03:05 - end right so yeah this is fine this is
03:09 - character array but if I write something
03:11 - like this like car and
03:15 - CH
03:16 - [Music]
03:17 - five
03:23 - or Jenny if I write Jenny like this in
03:27 - double quote a single this is what
03:29 - string
03:35 - these are sequence of characters in
03:37 - double quotes so these are known as
03:39 - string literals these are
03:42 - constant I mean we cannot change these
03:46 - string literals right and string
03:48 - literals are always ended with null
03:50 - character so that is why I have taken
03:53 - the size six because 5 1 2 3 4 5 for
03:56 - these characters and one for null so six
04:00 - we need compiler automatically add null
04:02 - at last while we are storing so in
04:04 - memory this would be store something
04:06 - like
04:08 - this Jenny and null character so total
04:13 - is six if you write here care five and
04:17 - like this if you want to store this will
04:19 - give
04:22 - error it can store it can store only
04:25 - four characters and one null character
04:28 - right but this is fine this is character
04:30 - array individual characters you are
04:32 - storing so this will not give any error
04:34 - but if you are storing this string
04:35 - literal then it will give error because
04:37 - these are always ended by default
04:39 - automatically with null character just
04:41 - to you know indicate the end of the
04:45 - string and why null character is useful
04:49 - that also uh I'll show you I'll tell you
04:51 - in this video right so C++ use this this
04:56 - null character just to indicate the end
04:59 - of the string so if I declare this
05:01 - something like this this character ARR
05:03 - like car CH and no size it will give
05:07 - error you have to give the size right at
05:11 - first if I write something like this SC
05:13 - CH no size is equal
05:18 - to Jenny's lectures this is fine because
05:22 - we have initialized this character array
05:24 - with this string literal here only so it
05:26 - will automatically you know uh calculate
05:29 - the size that is fine but if you don't
05:32 - initialize and something like this if
05:34 - you write this will give
05:37 - right so here it should be six otherwise
05:39 - it will give error six or more than six
05:41 - is fine right because one is for null
05:43 - character the last one and if I write
05:45 - something like this car array and
05:48 - 10 or care suppose name 10 right so in
05:54 - memory like I have 10 characters I can
05:58 - store right and after that if I write
06:00 - something like this name is equal to
06:03 - Jenny will it
06:05 - work no in C it will not work right
06:09 - because it is character array name right
06:12 - and string literal is also you know
06:15 - evaluates to location right
06:20 - so means we are here assigning one
06:23 - location to another location character
06:25 - this array name is also containing
06:27 - location or address right so we can
06:31 - can't assign these kind of things a
06:33 - string literal to a character ARR in C
06:35 - this will give error right because this
06:37 - is character array in C right but here
06:41 - what we can uh use here in C we have if
06:44 - you want to copy this joury to here this
06:46 - name we can use a function string copy
06:47 - St Str
06:49 - cpy there are many functions string copy
06:51 - string compare to find out string length
06:54 - we have St Str L Len and uh can for also
07:00 - we have some function so this thing
07:02 - we'll see these all all these function
07:03 - we'll see with the help of program right
07:07 - so here what you can say if I ask you
07:09 - what is the drawback if you use the C
07:12 - style string then what is the drawback
07:14 - the main
07:15 - drawback think and write down in comment
07:18 - section see one drawback is here you
07:22 - have to give the
07:24 - size right at compile time only so if
07:29 - user if I want to ask from the user
07:30 - enter your name so maybe my name is
07:32 - containing only five characters uh
07:35 - someone name is containing 10 characters
07:37 - someone name is containing 20 character
07:38 - so I don't know there is no fixed size
07:41 - of name right so one way is I can use
07:45 - here let's uh take maximum size 50
07:49 - because name cannot be more than cannot
07:52 - have more than 50 character so let's
07:54 - take maximum one right but suppose if I
07:58 - enter only Jenny so Jenny is going to
08:00 - take
08:01 - only six
08:04 - bites right five and one is for one for
08:08 - null remaining 44 are just a
08:13 - wastage right so this is main drawback
08:15 - of using these type of strings what if
08:18 - you don't you don't have to give size
08:21 - here and at runtime only when you enter
08:24 - the username it will automatically take
08:27 - any length username of any length that
08:30 - would be fine so that is we can do this
08:33 - thing in C++ strings see in C++ string
08:38 - is a data type but in C string is not a
08:40 - data type this thing this point you need
08:43 - to take care string is a character array
08:46 - so we can say string in C is a sequence
08:48 - of character terminated with null
08:50 - character null character is just to
08:52 - indicate the end of the
08:54 - string right because if you want to find
08:57 - out like this here
08:59 - if you want to initialize a string with
09:02 - this sequence of characters then you
09:05 - have to explicitly give here null
09:10 - character now it is a
09:13 - string okay with obviously here you have
09:16 - to give size
09:18 - six or without size also you can
09:21 - initialize this automatically the size
09:23 - would be calculated right or use direct
09:27 - a string literal you can give this
09:29 - constant this is also fine if a compiler
09:32 - say this kind of thing string or you can
09:35 - say more than one
09:37 - character with within double quotes then
09:40 - it will automatically append null null
09:43 - character at the end in the string
09:46 - automatically compiler right just to
09:48 - indicate end of the string so like this
09:51 - also we can initialize string in C or
09:53 - without giving size also we can
09:54 - initialize string so these are like you
09:56 - can say four ways to initialize and
09:58 - declare strings
09:59 - see right now if you want to print the
10:03 - string Jenny or if you want to calculate
10:06 - the
10:07 - length then suppose uh I want to print
10:11 - like C out and I just want to print this
10:14 - CH so
10:16 - first here in ch obviously the name
10:20 - character Arrow this name is will
10:23 - contain address of the first character
10:25 - so it will first print J then next
10:27 - character e then n n then n then y when
10:32 - to stop the condition is as soon as it
10:35 - will see a null character stop no need
10:38 - to print further right and if there is
10:40 - no null character then when this
10:44 - compiler is going to stop there is no
10:46 - termination condition that is why this
10:48 - null is compulsory that is why this null
10:50 - is useful in string right and if you
10:53 - want to find out length then also we
10:55 - just find out the length of the string
10:57 - and once you find out the function like
11:00 - we have St Str Len once this function
11:03 - find out the termination condition is
11:05 - once it it will find out null character
11:07 - stop so length of the string would be 1
11:09 - 2 3 4 5 and if there is no null
11:11 - character then when to
11:13 - stop no termination condition so I don't
11:17 - know it will give definitely any garbage
11:18 - value or you know any um undesired
11:23 - output right that is
11:25 - why ending of the string to indicate end
11:27 - of the string is important and that
11:29 - would be indicated with this null
11:31 - character what if I if any input if I
11:35 - write something like
11:37 - this null and then y so what would be
11:42 - printed only J NN because as soon as it
11:45 - will find out null means terminate it is
11:50 - end of the string further if there is
11:52 - anything nothing would be printed only
11:54 - this is
11:55 - printed okay now let's uh do some coding
11:59 - exercise with the help of one program we
12:01 - will see C style strings all the
12:04 - functions what we can use St strle and
12:07 - how to find out length of the string how
12:08 - to compare two strings string
12:10 - concatenation and all
12:13 - right so let's create a new file
12:16 - here and include those header
12:20 - files now we take first suppose we are
12:24 - taking name first name last name and
12:26 - full name three strings C style strings
12:31 - so first
12:33 - name and maximum size uh I will I'm just
12:38 - giving
12:39 - 20 we can't take more than 19 characters
12:43 - in first name care this is you can say
12:47 - main drawback of using C style string
12:49 - you have to specify the size at compile
12:52 - time only right so we have these three
12:57 - strings right right now we are having
13:00 - any garbage value in these strings so if
13:03 - you want to check out you can just print
13:04 - any string like first name if you want
13:06 - to
13:07 - print let's run this and I'll show you
13:09 - it will give any garbage value see there
13:12 - is no first name right now we haven't
13:14 - initialized this uh
13:16 - string so if you want to initialize now
13:18 - this F name
13:20 - then suppose from user we will ask using
13:25 - CN we can take first name and same we
13:28 - can can ask for second name sorry last
13:32 - name and then we can simply
13:35 - print uh first name last name and if you
13:37 - want to print how many the length of the
13:40 - first name length of second name means
13:42 - the number of characters in first name
13:43 - and uh second name then we have
13:47 - functions St Str Len but for that to use
13:51 - that function you have to include one
13:54 - header that is C string
14:00 - if you're using if you are using C style
14:02 - string then you have to include this at
14:04 - a C string here you have you know all
14:08 - those uh functions string length string
14:11 - compare string cation and all so let's
14:15 - use now string length
14:17 - function see out if you want to print
14:20 - like
14:21 - high your first name has how many
14:26 - characters that we can find out using
14:28 - this function St strlen see we have St
14:31 - strn but if you do not include this this
14:34 - header
14:36 - file then there is no ST Str l e n c it
14:41 - will give error
14:46 - right St Str Ln and we I want to find
14:50 - out length of first name this much of
14:54 - characters then endl
15:06 - and and your last name has
15:11 - same same function St Str Ln and this
15:15 - time I want to find out number of
15:16 - character in last name
15:31 - let's divide
15:37 - this H St Str
15:40 - Ln so let's run this and see this
15:43 - function is working or
15:47 - not first just comment out this
15:54 - thing enter your first name Jenny last
15:59 - name like a three hi Jenny your first
16:03 - name has five character and your last
16:04 - name has six character so yeah it's
16:06 - working fine and if you want
16:09 - to uh you know copy the first name and
16:12 - last name in full name then we have a
16:14 - function Str Str
16:21 - copy so full name in full name I want to
16:24 - copy first name it will copy from right
16:28 - to left so whatever is there in right
16:30 - hand side right side it will copy this
16:32 - thing to this side so first name to full
16:35 - name it will copy right then after Jenny
16:37 - I want a space then
16:40 - katri so now in full name I have
16:43 - Jenny so have to concatenate space how
16:46 - to put space in last so we can just
16:50 - before that we have a concatenation
16:56 - function I mean full name I have have
16:59 - only Jenny so after that I want space so
17:03 - it will going it is going to
17:05 - concatenate space after space I want
17:08 - katri so same s Str
17:12 - concatenation and full name comma
17:17 - whatever is there in last name it will
17:18 - concatenate last name to full name here
17:20 - we we are not using string copy
17:23 - again suppose if you use again string
17:26 - copy maybe you think while copy cing
17:29 - first name we have used St strcpy so
17:32 - here also we can use Str strcpy while
17:34 - copying last name and it will work fine
17:36 - okay let's
17:38 - see see out now I just want to print
17:41 - full
17:43 - name that's
17:47 - it let's run
17:55 - this see it is printing only katri your
17:58 - last last name is six correct and then
18:00 - it is printing only katri rather than
18:01 - full name Jenny katri why so
18:04 - because here in full name I have Jenny
18:14 - right after concatenation of uh this
18:19 - space I have Jenny and one space after
18:23 - copying this full name last name to full
18:25 - name now it will copy last name whatever
18:29 - is there in full name so it will erase
18:31 - whatever is there in full name in that
18:33 - string and it will copy only last name
18:36 - that is kri so now Jenny space is gone
18:39 - and only katri is there so solution is
18:42 - not string copy we use strink and
18:46 - Cat now it will concatenate this Jenny
18:50 - space and then kri it will print these
18:52 - things let's run this and I'll show you
19:00 - see J katri right so this is how we can
19:03 - use these
19:06 - functions and if you want to compare two
19:08 - strings we can use string compare like
19:11 - sorry not let's simply compare Str Str
19:18 - CMP I'm just comparing obviously
19:21 - first I'm just comparing first name and
19:25 - last name and we know these are not same
19:28 - first name string is different last name
19:29 - is different and we are just comparing
19:31 - so this string compare will return zero
19:33 - if both are same otherwise it will
19:36 - return any value like maybe positive
19:37 - value or negative value it depends on
19:39 - the SK value of the characters it is
19:41 - comparing right in detail we have
19:43 - discussed these all these functions when
19:45 - we are discussing those C programming so
19:47 - you can check out that playlist C
19:48 - programming playlist right so uh you
19:53 - just put here
19:54 - if this string compare if this thing
19:59 - equal to equal to
20:02 - zero here we will just comment out this
20:05 - thing and we use only string compare so
20:07 - let's run this
20:10 - and Jenny and last name is katri so see
20:14 - not equal because Jenny kri is not equal
20:16 - again if I run this and if you uh enter
20:19 - same string like Jenny and last name is
20:23 - also Jenny so the both strings are equal
20:26 - so this is how comparing two strings we
20:29 - can use string compare and also to uh
20:32 - you know change lower case to uppercase
20:34 - or uppercase to lower case there are
20:35 - also function like two upper two lower
20:37 - those functions also you can use but one
20:40 - thing I just want to tell
20:42 - you if you
20:44 - [Applause]
20:45 - directly take full name let's just
20:48 - comment out all these
20:50 - things right and from
20:57 - user I'm I'm asking enter full
21:02 - name and I have the name full name name
21:07 - of that character is full name right and
21:10 - after taking input I'm just printing
21:12 - whatever is there in this full
21:15 - name let's run this and
21:18 - see enter full name and I'm entering
21:20 - Jenny space
21:23 - kri so see it it is taking only
21:27 - Jenny because it is printing gen only no
21:29 - K because this extraction this operator
21:32 - will take j n and y but as soon as it
21:35 - see a white space it will stop right so
21:38 - only Jenny it will print but if you want
21:40 - to take this complete Jen K with space
21:42 - and all so we have one more solution of
21:47 - this we have this get line function get
21:52 - line and here we
21:54 - can write down this full name
21:59 - full name and how many characters till
22:02 - suppose 50 because the size is 50 you
22:05 - have to give here that name of that
22:07 - string character array and the length
22:10 - two
22:11 - things now it will stop after 50
22:18 - characters or if you enter uh if you uh
22:22 - enter or if you press any new line like
22:24 - while I'm entering I'm just one line in
22:27 - is finished I'm just entering into next
22:29 - line then it will stop taking input from
22:32 - user so let's run
22:35 - this J like maybe
22:39 - katri lamba and as soon as I hit enter
22:44 - it is going to stop taking input and it
22:46 - will print the complete
22:48 - name
22:51 - right or it will stop if you don't press
22:53 - enter it will stop once you have entered
22:55 - 50 character so you can use it is your
22:58 - assignment you can use that two upper
23:00 - two lower function to convert these your
23:02 - first name last name or full name into
23:04 - uppercase or lower case those two upper
23:07 - two lower these are uh this will work
23:10 - like this
23:19 - function to Upper this function will
23:23 - work on a single character or two lower
23:26 - it will accept a single character right
23:28 - but but here you want a string to
23:30 - convert to uppercase or lower case so
23:32 - you can use this thing in four Loop one
23:34 - by one each character would be converted
23:36 - so this is your assignment you have to
23:38 - convert first this full name to
23:41 - uppercase then take input in uppercase
23:45 - and then convert that into lower case
23:47 - and then after converting uppercase and
23:49 - lower case then you should compare using
23:53 - St Str CMP like both upper case and
23:56 - lower case are same or not then compare
23:58 - this is your assignment right so I hope
24:01 - now you are familiar with C style
24:03 - character strings character arrays okay
24:07 - this type of string also C++ supports we
24:09 - can use this thing also right otherwise
24:12 - we can use because of these drawbacks
24:14 - the fixed size we have to give the size
24:16 - at the time of compile time only we use
24:18 - C++ strings in those string is a data
24:22 - type itself a data type right so this
24:25 - thing we will see in next video so now
24:26 - I'll see you in the next video till then
24:28 - bye-bye take care

Cleaned transcript:

hey everyone I hope you all are safe and doing good so in the series of learning C++ programming language in the previous video we have seen array of vector vectors and Vector of vectors right so I hope vectors are clear to you guys Vector pair Vector of pair array of vector vector of vector right now in this video we'll be discussing uh next topic which is strings in C++ everything about strings with the help of program we'll see in this video right now see C++ provides two way of string representation basically uh one is C style strings and one is C++ strings both are different right so both we will discuss or you can say C style character strings and one is C++ strings these both are different okay I hope now if you have uh gone through the previous videos of mine that C programming videos then you are aware about C style strings how to use these strings the member function what are the functions we can use in these strings not member function functions right C++ strings are different right so first we'll just revise and we'll see what are C style strings in this video with the help of proper program and in the next video we'll see uh we'll see some drawbacks of these strings and why these strings are useful right so this thing C++ strings we'll discuss in next video right so first we'll be discussing C style uh Str R okay if you want to store one character then how to store we simply take a variable of car type like car C and like sorry A Single Character I want to store so it would in single code like a if you want to store one integer then like in I equal to 1 this is how we are going to store if you want to store more than one integer so I mean aray of integer so we can write something like this array 10 and here we can store 1 2 3 like this more than one integer right but what if we want to store the complete name like Janti katri Jenny's lectures or like hi welcome these things complete sentence these are we can say uh array of characters more than one character I want to store not only single character in that case we can use a character array so how we can use like care and CH H and here I can provide like five length is five and simply I can store more than one character here like j e n and y the size is five so I'm storing five characters here so this is character array actually it's not a string it is character array it is having sequence of or you can say more than one character right character array is not having null at the end right so yeah this is fine this is character array but if I write something like this like car and CH five or Jenny if I write Jenny like this in double quote a single this is what string these are sequence of characters in double quotes so these are known as string literals these are constant I mean we cannot change these string literals right and string literals are always ended with null character so that is why I have taken the size six because 5 1 2 3 4 5 for these characters and one for null so six we need compiler automatically add null at last while we are storing so in memory this would be store something like this Jenny and null character so total is six if you write here care five and like this if you want to store this will give error it can store it can store only four characters and one null character right but this is fine this is character array individual characters you are storing so this will not give any error but if you are storing this string literal then it will give error because these are always ended by default automatically with null character just to you know indicate the end of the string and why null character is useful that also uh I'll show you I'll tell you in this video right so C++ use this this null character just to indicate the end of the string so if I declare this something like this this character ARR like car CH and no size it will give error you have to give the size right at first if I write something like this SC CH no size is equal to Jenny's lectures this is fine because we have initialized this character array with this string literal here only so it will automatically you know uh calculate the size that is fine but if you don't initialize and something like this if you write this will give right so here it should be six otherwise it will give error six or more than six is fine right because one is for null character the last one and if I write something like this car array and 10 or care suppose name 10 right so in memory like I have 10 characters I can store right and after that if I write something like this name is equal to Jenny will it work no in C it will not work right because it is character array name right and string literal is also you know evaluates to location right so means we are here assigning one location to another location character this array name is also containing location or address right so we can can't assign these kind of things a string literal to a character ARR in C this will give error right because this is character array in C right but here what we can uh use here in C we have if you want to copy this joury to here this name we can use a function string copy St Str cpy there are many functions string copy string compare to find out string length we have St Str L Len and uh can for also we have some function so this thing we'll see these all all these function we'll see with the help of program right so here what you can say if I ask you what is the drawback if you use the C style string then what is the drawback the main drawback think and write down in comment section see one drawback is here you have to give the size right at compile time only so if user if I want to ask from the user enter your name so maybe my name is containing only five characters uh someone name is containing 10 characters someone name is containing 20 character so I don't know there is no fixed size of name right so one way is I can use here let's uh take maximum size 50 because name cannot be more than cannot have more than 50 character so let's take maximum one right but suppose if I enter only Jenny so Jenny is going to take only six bites right five and one is for one for null remaining 44 are just a wastage right so this is main drawback of using these type of strings what if you don't you don't have to give size here and at runtime only when you enter the username it will automatically take any length username of any length that would be fine so that is we can do this thing in C++ strings see in C++ string is a data type but in C string is not a data type this thing this point you need to take care string is a character array so we can say string in C is a sequence of character terminated with null character null character is just to indicate the end of the string right because if you want to find out like this here if you want to initialize a string with this sequence of characters then you have to explicitly give here null character now it is a string okay with obviously here you have to give size six or without size also you can initialize this automatically the size would be calculated right or use direct a string literal you can give this constant this is also fine if a compiler say this kind of thing string or you can say more than one character with within double quotes then it will automatically append null null character at the end in the string automatically compiler right just to indicate end of the string so like this also we can initialize string in C or without giving size also we can initialize string so these are like you can say four ways to initialize and declare strings see right now if you want to print the string Jenny or if you want to calculate the length then suppose uh I want to print like C out and I just want to print this CH so first here in ch obviously the name character Arrow this name is will contain address of the first character so it will first print J then next character e then n n then n then y when to stop the condition is as soon as it will see a null character stop no need to print further right and if there is no null character then when this compiler is going to stop there is no termination condition that is why this null is compulsory that is why this null is useful in string right and if you want to find out length then also we just find out the length of the string and once you find out the function like we have St Str Len once this function find out the termination condition is once it it will find out null character stop so length of the string would be 1 2 3 4 5 and if there is no null character then when to stop no termination condition so I don't know it will give definitely any garbage value or you know any um undesired output right that is why ending of the string to indicate end of the string is important and that would be indicated with this null character what if I if any input if I write something like this null and then y so what would be printed only J NN because as soon as it will find out null means terminate it is end of the string further if there is anything nothing would be printed only this is printed okay now let's uh do some coding exercise with the help of one program we will see C style strings all the functions what we can use St strle and how to find out length of the string how to compare two strings string concatenation and all right so let's create a new file here and include those header files now we take first suppose we are taking name first name last name and full name three strings C style strings so first name and maximum size uh I will I'm just giving 20 we can't take more than 19 characters in first name care this is you can say main drawback of using C style string you have to specify the size at compile time only right so we have these three strings right right now we are having any garbage value in these strings so if you want to check out you can just print any string like first name if you want to print let's run this and I'll show you it will give any garbage value see there is no first name right now we haven't initialized this uh string so if you want to initialize now this F name then suppose from user we will ask using CN we can take first name and same we can can ask for second name sorry last name and then we can simply print uh first name last name and if you want to print how many the length of the first name length of second name means the number of characters in first name and uh second name then we have functions St Str Len but for that to use that function you have to include one header that is C string if you're using if you are using C style string then you have to include this at a C string here you have you know all those uh functions string length string compare string cation and all so let's use now string length function see out if you want to print like high your first name has how many characters that we can find out using this function St strlen see we have St strn but if you do not include this this header file then there is no ST Str l e n c it will give error right St Str Ln and we I want to find out length of first name this much of characters then endl and and your last name has same same function St Str Ln and this time I want to find out number of character in last name let's divide this H St Str Ln so let's run this and see this function is working or not first just comment out this thing enter your first name Jenny last name like a three hi Jenny your first name has five character and your last name has six character so yeah it's working fine and if you want to uh you know copy the first name and last name in full name then we have a function Str Str copy so full name in full name I want to copy first name it will copy from right to left so whatever is there in right hand side right side it will copy this thing to this side so first name to full name it will copy right then after Jenny I want a space then katri so now in full name I have Jenny so have to concatenate space how to put space in last so we can just before that we have a concatenation function I mean full name I have have only Jenny so after that I want space so it will going it is going to concatenate space after space I want katri so same s Str concatenation and full name comma whatever is there in last name it will concatenate last name to full name here we we are not using string copy again suppose if you use again string copy maybe you think while copy cing first name we have used St strcpy so here also we can use Str strcpy while copying last name and it will work fine okay let's see see out now I just want to print full name that's it let's run this see it is printing only katri your last last name is six correct and then it is printing only katri rather than full name Jenny katri why so because here in full name I have Jenny right after concatenation of uh this space I have Jenny and one space after copying this full name last name to full name now it will copy last name whatever is there in full name so it will erase whatever is there in full name in that string and it will copy only last name that is kri so now Jenny space is gone and only katri is there so solution is not string copy we use strink and Cat now it will concatenate this Jenny space and then kri it will print these things let's run this and I'll show you see J katri right so this is how we can use these functions and if you want to compare two strings we can use string compare like sorry not let's simply compare Str Str CMP I'm just comparing obviously first I'm just comparing first name and last name and we know these are not same first name string is different last name is different and we are just comparing so this string compare will return zero if both are same otherwise it will return any value like maybe positive value or negative value it depends on the SK value of the characters it is comparing right in detail we have discussed these all these functions when we are discussing those C programming so you can check out that playlist C programming playlist right so uh you just put here if this string compare if this thing equal to equal to zero here we will just comment out this thing and we use only string compare so let's run this and Jenny and last name is katri so see not equal because Jenny kri is not equal again if I run this and if you uh enter same string like Jenny and last name is also Jenny so the both strings are equal so this is how comparing two strings we can use string compare and also to uh you know change lower case to uppercase or uppercase to lower case there are also function like two upper two lower those functions also you can use but one thing I just want to tell you if you directly take full name let's just comment out all these things right and from user I'm I'm asking enter full name and I have the name full name name of that character is full name right and after taking input I'm just printing whatever is there in this full name let's run this and see enter full name and I'm entering Jenny space kri so see it it is taking only Jenny because it is printing gen only no K because this extraction this operator will take j n and y but as soon as it see a white space it will stop right so only Jenny it will print but if you want to take this complete Jen K with space and all so we have one more solution of this we have this get line function get line and here we can write down this full name full name and how many characters till suppose 50 because the size is 50 you have to give here that name of that string character array and the length two things now it will stop after 50 characters or if you enter uh if you uh enter or if you press any new line like while I'm entering I'm just one line in is finished I'm just entering into next line then it will stop taking input from user so let's run this J like maybe katri lamba and as soon as I hit enter it is going to stop taking input and it will print the complete name right or it will stop if you don't press enter it will stop once you have entered 50 character so you can use it is your assignment you can use that two upper two lower function to convert these your first name last name or full name into uppercase or lower case those two upper two lower these are uh this will work like this function to Upper this function will work on a single character or two lower it will accept a single character right but but here you want a string to convert to uppercase or lower case so you can use this thing in four Loop one by one each character would be converted so this is your assignment you have to convert first this full name to uppercase then take input in uppercase and then convert that into lower case and then after converting uppercase and lower case then you should compare using St Str CMP like both upper case and lower case are same or not then compare this is your assignment right so I hope now you are familiar with C style character strings character arrays okay this type of string also C++ supports we can use this thing also right otherwise we can use because of these drawbacks the fixed size we have to give the size at the time of compile time only we use C++ strings in those string is a data type itself a data type right so this thing we will see in next video so now I'll see you in the next video till then byebye take care
