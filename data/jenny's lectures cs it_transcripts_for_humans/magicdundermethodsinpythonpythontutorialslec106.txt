With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - pth and programming language we have
00:05 - discussed oops concept inheritance
00:07 - polymorphism and capsulation abstraction
00:09 - all the four pillars of O we have
00:11 - discussed and the last video was about
00:13 - method overloading and Method overriding
00:15 - right so now there is one small topic
00:18 - but it's important one that is Magic
00:20 - methods in python or we can say special
00:22 - methods or we can say Dunder methods in
00:24 - Python there are some magic methods in
00:26 - Python so this thing we'll see in this
00:28 - video what are these magic methods why
00:30 - these are called Magic methods or Dunder
00:32 - methods and what is the need of these
00:34 - methods when we use these methods and
00:37 - how we are going to use these methods
00:40 - right so these things we'll see in this
00:42 - video right but in one life in one line
00:45 - if I say then these magic methods allows
00:48 - us to use some built-in operations in
00:51 - Python like Len St strr and many buil-in
00:53 - operations are there in Python so these
00:55 - methods allows us to use these built-in
00:58 - operations right right with our own user
01:03 - created
01:04 - objects like we create class and we
01:08 - create object of that class right that
01:11 - is our own user created object so we can
01:13 - use these buil-in operations with our
01:15 - own objects now what does this mean the
01:18 - line let me show you practically this
01:21 - thing okay so first let me create a new
01:24 - file in our python
01:26 - project Magic methods. py
01:30 - let's see first see if we take a simple
01:34 - example First We Take we have a list
01:36 - okay like one zero or any variable we
01:40 - can have the in this list okay sorry
01:42 - list one equal to like this okay now if
01:45 - you want to find out length of this list
01:47 - then we know we have an inbuilt function
01:50 - that is len so directly we can write
01:52 - down what print and there we can just
01:55 - call this Len and on which object you
02:00 - want to find out uh this length list one
02:04 - the object name is list one and yeah it
02:07 - will run see it is going us it is going
02:09 - to give us three right and if you print
02:13 - this list like if I'm going to print
02:15 - whatever is there in this list then
02:17 - simply it will print 1 0 - one these are
02:21 - some buil-in
02:22 - you can say operations okay in operator
02:28 - overloading also we have seen those
02:29 - those buil-in operations like add and
02:33 - addition subtraction multiplication
02:35 - these things we have discussed right and
02:37 - there a little bit we have discussed
02:39 - about Dunder methods okay
02:43 - now if I have a class see suppose I have
02:46 - a class and I don't have anything in
02:48 - class just I have a class variable that
02:51 - is name is equal to Jenny and I'm
02:53 - creating object of this class okay
02:57 - Jenny now I want to find out length of
03:00 - this name so directly if I use this Len
03:07 - function and the object is
03:10 - d right object name is D and this object
03:14 - of this class demo and within this I
03:16 - have a name so I want to find out length
03:17 - of this name so is it correct I don't
03:20 - know let me just check this out let's
03:23 - run this and see it will give an error
03:26 - type error object of type demo has no
03:28 - Len yeah this Len is predefined or
03:31 - buil-in operation buil-in function
03:33 - buil-in method but we cannot use this in
03:36 - this
03:38 - class right because see on this list
03:43 - type of object the list object is L one
03:47 - so L one if I say l one dot so these are
03:51 - the methods on this list buil-in
03:55 - operations we can perform built-in
03:56 - method so see we have Len l meth method
04:00 - but it is having double underscore
04:03 - before starting of L double underscore
04:05 - after ending L me prefix with double
04:08 - underscore and suffix with double
04:09 - underscore okay so these kind of methods
04:12 - are known as special methods see Le less
04:16 - less than equal to LT less than mul M
04:19 - for multiplication so these are the
04:22 - methods or you can say operations
04:24 - buil-in operations which are defined on
04:26 - this object okay this object list one is
04:31 - of which type if you want to find out
04:34 - the type of this object then yeah we
04:36 - have like this we can use this type and
04:40 - we simply print what is the type of this
04:44 - list one let's run this and see class is
04:49 - list type or you can say class because
04:51 - everything in Python is an object in is
04:54 - also a class St Str is also a class so
04:56 - this the class of this list one is list
04:59 - list and for this class the this Len
05:03 - function this Len method is predefined
05:06 - but on our class demo we have an object
05:09 - D of type demo on this class there is no
05:13 - buil-in or there is no lent method Len
05:18 - operation or Len function defined okay
05:22 - so now if you want to use these built-in
05:26 - operations on our user defined object
05:29 - then use Dunder methods here special
05:33 - methods Dunder methods comes into
05:35 - picture you can use this thing with the
05:38 - help of Dunder method okay now we know
05:40 - we have
05:42 - that Len function Len method okay so
05:47 - these Dunder method short form of the of
05:50 - this double underscore method is Dunder
05:52 - method so these are prefix and suffix
05:55 - suffixed with two underscore right okay
05:59 - now we'll see how to use that special
06:01 - length function here on our class object
06:04 - next thing if we print if we simply
06:06 - print our object d right let's just
06:11 - comment this out then what it will give
06:14 - you see it's just giving a the name of
06:18 - or the address of that object at this
06:21 - address nothing else but if you print
06:23 - list then it will give the value
06:25 - whatever is there in this object list
06:27 - one okay but it is not printing anything
06:29 - it is not printing the name like gen
06:32 - okay so we are not able to use Len and
06:36 - even print the these build-in operations
06:38 - on our user defined object fine now here
06:41 - these gender methods comes into picture
06:43 - now let's see one example we have a
06:48 - class we have a class author and here
06:51 - I'm directly using the class object so
06:54 - you can use this thing also but see I
06:57 - just want to show one more dender method
06:59 - that is in it suffix and prefix and
07:02 - suffix with double ERS this is also dund
07:04 - method okay it is a you can say
07:07 - Constructor fine and it is called
07:09 - whenever you create an object see we
07:13 - don't call this init function this in it
07:16 - method it is implicitly called or
07:19 - automatically called when we create an
07:21 - object when this line is to be
07:23 - interpreted this is automatically being
07:24 - called so one beauty of these Dunder
07:28 - method is what these are not being
07:31 - called explicitly by you based on your
07:36 - actions okay these are called implicitly
07:39 - so that is why these are known as magic
07:41 - method as well because you don't need to
07:43 - call these methods explicitly but these
07:45 - are called implicitly or automatically
07:48 - right so that's the beauty that's the
07:50 - magic that is why these are known as
07:52 - magic method like in
07:55 - villages you know wife directly don't
07:59 - call husband especially in front of
08:01 - in-laws maybe you have you know faced
08:03 - this kind of situations or you have
08:05 - witnessed this kind of situation and
08:08 - maybe sometime we just
08:10 - like and he's going to understand okay
08:14 - so wife is calling without directly
08:18 - calling right that's the sign language
08:20 - or you can say this kind of things so
08:22 - these kind of method like magic method
08:25 - we have I hope you are able to relate
08:27 - this thing I don't know okay so we
08:35 - have so three argument we have name book
08:38 - name and
08:40 - Pages now if I want to I want to print
08:44 - this D then I want this information
08:46 - should be printed something maybe like
08:49 - author name or book Name by this author
08:51 - this kind of thing but this time you
08:54 - directly print
08:55 - D okay name demo is not defined sorry
08:58 - you have to create object now the class
09:00 - name has been changed and it's now
09:03 - author so simply it
09:08 - give you have to call you have to pass
09:11 - these three argument first so name I'm
09:14 - just calling like I'm just passing uh
09:17 - Jenny and so let's run this and it will
09:20 - simply show that object at this
09:22 - reference I mean the address so we have
09:26 - an Str Str method
09:29 - and that is being called when you want
09:32 - to return a you know string version of
09:35 - any
09:36 - object and suppose I just want to print
09:40 - Str Str version of
09:42 - D so what it will give
09:44 - C same this and this okay
09:50 - so we have a d method Str Str right that
09:56 - you can Define here in this class
09:59 - underscore uncore we have C this St Str
10:02 - predefined so use this Dunder method
10:07 - and I want to return what something like
10:10 - this using F string I'm writing this
10:13 - return statement like
10:15 - selft book name and then bu and what
10:21 - whoever the author of this book self do
10:25 - name this thing I want to print so
10:28 - whenever now you will print this print
10:33 - D this method is going to be executed
10:35 - print so it will ask to this object do
10:40 - you have any Str Str version of
10:43 - yourself and yes the object will say yes
10:46 - I have Str Str version of myself so it
10:48 - will call this Str Str method and
10:50 - whatever is there in this Str Str method
10:52 - it will print this thing now let's now
10:54 - this time this print D will return what
10:57 - C python basic to Advanced by
11:00 - J so this is you can say beauty of
11:03 - Dunder method without
11:06 - this is there any Str Str version of
11:09 - this D there is no Str Str version so
11:11 - simply it will print that object at this
11:13 - memory address that's it at this
11:14 - reference okay so this Str Str will
11:18 - return string version of any object
11:20 - right so whatever method we'll call this
11:23 - Str
11:24 - Str this thing would be return now and
11:28 - now if you execute this
11:30 - [Music]
11:31 - Len on this D then see object of type
11:35 - author has no Len okay it's fine we can
11:40 - Define we can use Dunder method we know
11:42 - we have buil-in
11:45 - operation Len so we have a Dunder method
11:48 - Len that is
11:49 - predefined and it should return suppose
11:53 - it should return like self dot Pages
11:57 - number of pages in my book
12:03 - so whenever you'll call now this Len
12:05 - behind the scene this Dunder method L
12:09 - would be called and what is it is going
12:10 - to return self do pages so see 300 now L
12:15 - is 300s so there are many Dunder method
12:18 - so these I'm going to tell you because
12:21 - these are we going to use frequently Len
12:23 - Str Str and one more we have like call
12:27 - method
12:29 - if you will call this object
12:32 - D see d as a function I'm going to call
12:37 - this object so it is going to tell me
12:39 - the type error author object is not
12:41 - callable it's just instance or an object
12:44 - it's not a function that we'll call it
12:46 - but you want to make it callable then we
12:48 - have we can use a Dunder method or spe
12:51 - special method we have that is
12:53 - call this method we have and
12:57 - suppose nothing for suppose during
13:02 - calling I think rather than return just
13:04 - print this time so I'm just going to
13:07 - print
13:08 - high
13:10 - now this will print high
13:13 - see right so this call this this this
13:17 - ther method will be called when the
13:21 - instance is called as an function as a
13:24 - function so we are calling this instance
13:27 - or this object as a function
13:29 - so it will see The
13:31 - Interpreter will ask to the object do
13:33 - you have any call method or are you
13:37 - callable so yes I have a call method so
13:41 - I'm callable so whatever is there in
13:43 - this it will this thing same we have
13:47 - delete also we have a d keyword if you
13:49 - want to delete any variable just simply
13:51 - we will use like d
13:52 - d and the name of that variable so d
13:56 - d like this so let's run
14:00 - this see now obviously it is not going
14:04 - to print anything but after that if you
14:06 - print this D after deleting this D then
14:09 - it will give error see name d is not
14:12 - defined it's not defined now because you
14:14 - have deleted this right so if you want
14:18 - that when you going to delete some
14:20 - special message should be shown or some
14:22 - special thing should be happened then we
14:25 - can Define this also we have a under
14:29 - method D it's predefined so we can
14:32 - Define this and while deleting it should
14:35 - print like maybe author object has been
14:38 - deleted right so let's run
14:42 - this see 300 this this and when you're
14:46 - going to
14:48 - delete delete this D it is going to
14:51 - print author object has been deleted and
14:54 - after that again you are printing D so
14:57 - it will show error name d is not
15:00 - defined right like this we have many
15:03 - Dunder methods you can go to Google and
15:06 - you can just search like thunder method
15:09 - and python you can go for documentation
15:13 - so here we have this thing just write
15:15 - down Google Dunder method python
15:17 - documentation and the first link you
15:18 - will get and here you have see this tab
15:21 - special methods you can click in on the
15:23 - special methods and here you will get
15:25 - see
15:27 - new in it is under method right d we
15:31 - have it's called when the instance is
15:33 - about to be destroyed right so like this
15:37 - Str Str RP rpr it is called by St Str
15:43 - and the buil-in function format and
15:46 - print so this Str Str is being called by
15:49 - these buil-in function format and print
15:52 - right I have shown you this
15:54 - thing you can see here see this these
15:58 - are also l t l e equal to greater than
16:01 - NE this thing we have Al also discussed
16:03 - when we were discussing operator
16:04 - overloading so this ther method is
16:06 - specific specifically used in operator
16:08 - overloading you can go and watch that
16:10 - video see this thing we also discussed
16:13 - the schable object object dot this call
16:17 - this is also an method it is called when
16:20 - the instance is called as a function
16:23 - right L we have get item set item delete
16:29 - and these are numeric type also like add
16:32 - subtract M mode Division exor and these
16:36 - are all under method this ad we have
16:38 - discussed right when you just write down
16:41 - this thing like I'm just going to print
16:46 - 8 + 9 so this is an operator but behind
16:51 - the scene it is going to call which
16:54 - method this method this add this
16:57 - one okay because see on int I I'll show
17:00 - you int
17:03 - dot
17:09 - see on in int we have this add this
17:13 - stand method and many D methods are
17:16 - there if you want to check out you can
17:18 - just print what dir int on int class how
17:24 - many Runner methods we have it is going
17:27 - to print
17:29 - everything
17:33 - see these are rner method on many
17:37 - methods are
17:39 - there so I hope you got the basic idea
17:41 - of what are magic method and D Dunder
17:44 - method and why these are called magic
17:46 - method because these are not being
17:47 - called explicitly right and when we use
17:50 - these methods when we want to use those
17:53 - buil-in operations on our user defined
17:55 - objects okay then we use under method to
17:59 - give our own specific definition to
18:02 - these methods right so I hope you got
18:05 - this video now I'll next then by bye
18:07 - take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning pth and programming language we have discussed oops concept inheritance polymorphism and capsulation abstraction all the four pillars of O we have discussed and the last video was about method overloading and Method overriding right so now there is one small topic but it's important one that is Magic methods in python or we can say special methods or we can say Dunder methods in Python there are some magic methods in Python so this thing we'll see in this video what are these magic methods why these are called Magic methods or Dunder methods and what is the need of these methods when we use these methods and how we are going to use these methods right so these things we'll see in this video right but in one life in one line if I say then these magic methods allows us to use some builtin operations in Python like Len St strr and many builin operations are there in Python so these methods allows us to use these builtin operations right right with our own user created objects like we create class and we create object of that class right that is our own user created object so we can use these builin operations with our own objects now what does this mean the line let me show you practically this thing okay so first let me create a new file in our python project Magic methods. py let's see first see if we take a simple example First We Take we have a list okay like one zero or any variable we can have the in this list okay sorry list one equal to like this okay now if you want to find out length of this list then we know we have an inbuilt function that is len so directly we can write down what print and there we can just call this Len and on which object you want to find out uh this length list one the object name is list one and yeah it will run see it is going us it is going to give us three right and if you print this list like if I'm going to print whatever is there in this list then simply it will print 1 0 one these are some builin you can say operations okay in operator overloading also we have seen those those builin operations like add and addition subtraction multiplication these things we have discussed right and there a little bit we have discussed about Dunder methods okay now if I have a class see suppose I have a class and I don't have anything in class just I have a class variable that is name is equal to Jenny and I'm creating object of this class okay Jenny now I want to find out length of this name so directly if I use this Len function and the object is d right object name is D and this object of this class demo and within this I have a name so I want to find out length of this name so is it correct I don't know let me just check this out let's run this and see it will give an error type error object of type demo has no Len yeah this Len is predefined or builin operation builin function builin method but we cannot use this in this class right because see on this list type of object the list object is L one so L one if I say l one dot so these are the methods on this list builin operations we can perform builtin method so see we have Len l meth method but it is having double underscore before starting of L double underscore after ending L me prefix with double underscore and suffix with double underscore okay so these kind of methods are known as special methods see Le less less than equal to LT less than mul M for multiplication so these are the methods or you can say operations builin operations which are defined on this object okay this object list one is of which type if you want to find out the type of this object then yeah we have like this we can use this type and we simply print what is the type of this list one let's run this and see class is list type or you can say class because everything in Python is an object in is also a class St Str is also a class so this the class of this list one is list list and for this class the this Len function this Len method is predefined but on our class demo we have an object D of type demo on this class there is no builin or there is no lent method Len operation or Len function defined okay so now if you want to use these builtin operations on our user defined object then use Dunder methods here special methods Dunder methods comes into picture you can use this thing with the help of Dunder method okay now we know we have that Len function Len method okay so these Dunder method short form of the of this double underscore method is Dunder method so these are prefix and suffix suffixed with two underscore right okay now we'll see how to use that special length function here on our class object next thing if we print if we simply print our object d right let's just comment this out then what it will give you see it's just giving a the name of or the address of that object at this address nothing else but if you print list then it will give the value whatever is there in this object list one okay but it is not printing anything it is not printing the name like gen okay so we are not able to use Len and even print the these buildin operations on our user defined object fine now here these gender methods comes into picture now let's see one example we have a class we have a class author and here I'm directly using the class object so you can use this thing also but see I just want to show one more dender method that is in it suffix and prefix and suffix with double ERS this is also dund method okay it is a you can say Constructor fine and it is called whenever you create an object see we don't call this init function this in it method it is implicitly called or automatically called when we create an object when this line is to be interpreted this is automatically being called so one beauty of these Dunder method is what these are not being called explicitly by you based on your actions okay these are called implicitly so that is why these are known as magic method as well because you don't need to call these methods explicitly but these are called implicitly or automatically right so that's the beauty that's the magic that is why these are known as magic method like in villages you know wife directly don't call husband especially in front of inlaws maybe you have you know faced this kind of situations or you have witnessed this kind of situation and maybe sometime we just like and he's going to understand okay so wife is calling without directly calling right that's the sign language or you can say this kind of things so these kind of method like magic method we have I hope you are able to relate this thing I don't know okay so we have so three argument we have name book name and Pages now if I want to I want to print this D then I want this information should be printed something maybe like author name or book Name by this author this kind of thing but this time you directly print D okay name demo is not defined sorry you have to create object now the class name has been changed and it's now author so simply it give you have to call you have to pass these three argument first so name I'm just calling like I'm just passing uh Jenny and so let's run this and it will simply show that object at this reference I mean the address so we have an Str Str method and that is being called when you want to return a you know string version of any object and suppose I just want to print Str Str version of D so what it will give C same this and this okay so we have a d method Str Str right that you can Define here in this class underscore uncore we have C this St Str predefined so use this Dunder method and I want to return what something like this using F string I'm writing this return statement like selft book name and then bu and what whoever the author of this book self do name this thing I want to print so whenever now you will print this print D this method is going to be executed print so it will ask to this object do you have any Str Str version of yourself and yes the object will say yes I have Str Str version of myself so it will call this Str Str method and whatever is there in this Str Str method it will print this thing now let's now this time this print D will return what C python basic to Advanced by J so this is you can say beauty of Dunder method without this is there any Str Str version of this D there is no Str Str version so simply it will print that object at this memory address that's it at this reference okay so this Str Str will return string version of any object right so whatever method we'll call this Str Str this thing would be return now and now if you execute this Len on this D then see object of type author has no Len okay it's fine we can Define we can use Dunder method we know we have builin operation Len so we have a Dunder method Len that is predefined and it should return suppose it should return like self dot Pages number of pages in my book so whenever you'll call now this Len behind the scene this Dunder method L would be called and what is it is going to return self do pages so see 300 now L is 300s so there are many Dunder method so these I'm going to tell you because these are we going to use frequently Len Str Str and one more we have like call method if you will call this object D see d as a function I'm going to call this object so it is going to tell me the type error author object is not callable it's just instance or an object it's not a function that we'll call it but you want to make it callable then we have we can use a Dunder method or spe special method we have that is call this method we have and suppose nothing for suppose during calling I think rather than return just print this time so I'm just going to print high now this will print high see right so this call this this this ther method will be called when the instance is called as an function as a function so we are calling this instance or this object as a function so it will see The Interpreter will ask to the object do you have any call method or are you callable so yes I have a call method so I'm callable so whatever is there in this it will this thing same we have delete also we have a d keyword if you want to delete any variable just simply we will use like d d and the name of that variable so d d like this so let's run this see now obviously it is not going to print anything but after that if you print this D after deleting this D then it will give error see name d is not defined it's not defined now because you have deleted this right so if you want that when you going to delete some special message should be shown or some special thing should be happened then we can Define this also we have a under method D it's predefined so we can Define this and while deleting it should print like maybe author object has been deleted right so let's run this see 300 this this and when you're going to delete delete this D it is going to print author object has been deleted and after that again you are printing D so it will show error name d is not defined right like this we have many Dunder methods you can go to Google and you can just search like thunder method and python you can go for documentation so here we have this thing just write down Google Dunder method python documentation and the first link you will get and here you have see this tab special methods you can click in on the special methods and here you will get see new in it is under method right d we have it's called when the instance is about to be destroyed right so like this Str Str RP rpr it is called by St Str and the builin function format and print so this Str Str is being called by these builin function format and print right I have shown you this thing you can see here see this these are also l t l e equal to greater than NE this thing we have Al also discussed when we were discussing operator overloading so this ther method is specific specifically used in operator overloading you can go and watch that video see this thing we also discussed the schable object object dot this call this is also an method it is called when the instance is called as a function right L we have get item set item delete and these are numeric type also like add subtract M mode Division exor and these are all under method this ad we have discussed right when you just write down this thing like I'm just going to print 8 + 9 so this is an operator but behind the scene it is going to call which method this method this add this one okay because see on int I I'll show you int dot see on in int we have this add this stand method and many D methods are there if you want to check out you can just print what dir int on int class how many Runner methods we have it is going to print everything see these are rner method on many methods are there so I hope you got the basic idea of what are magic method and D Dunder method and why these are called magic method because these are not being called explicitly right and when we use these methods when we want to use those builin operations on our user defined objects okay then we use under method to give our own specific definition to these methods right so I hope you got this video now I'll next then by bye take care
