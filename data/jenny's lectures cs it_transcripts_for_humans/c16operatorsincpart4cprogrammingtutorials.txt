With timestamps:

00:00 - and the series of learning programming
00:02 - in c we are discussing about operators
00:04 - in c
00:05 - in my previous videos i have already
00:06 - covered three type of operators
00:08 - arithmetic assignment and increment and
00:09 - decrement operators in this video i will
00:11 - be talking about relational operators
00:13 - what are relational operators types of
00:14 - these operators why to use these
00:16 - operators in a program when to use how
00:18 - to use these operators and
00:21 - we will also write a program simple
00:22 - program and we'll be talking about the
00:24 - output when you use these operators
00:25 - relational operator in your program then
00:27 - what output you will get we'll be
00:29 - talking about all the things in detail
00:31 - in this video right so now let us
00:33 - discuss relational operators in c
00:35 - as the names suggest relational they are
00:38 - going to
00:39 - talk about relations between two things
00:41 - now which type of relations they will
00:43 - not give you that they will not tell you
00:45 - that blood relations like we human have
00:47 - they will compare you can see the values
00:51 - two values
00:52 - right and will give you the result and
00:55 - you can say
00:56 - these are used to check the conditions
00:59 - these are used when in decision making
01:02 - right especially in if else we use these
01:04 - operators
01:05 - so
01:05 - we used to compare two values these
01:08 - operators so you can also called as
01:10 - comparison operators and you can say
01:13 - when we compare the values then what
01:15 - should be the output when you use these
01:17 - operators then what is the output either
01:19 - you will get true or false
01:22 - true means one false means zero in
01:25 - computers memory these true and false
01:27 - these words are stored as numbers true
01:31 - is stored in the form of one force is
01:34 - stored in the form of zero right
01:36 - so now types of relational operators are
01:39 - these are types of relational operator
01:41 - less than greater than less than equal
01:43 - to greater than equal to e this one is
01:46 - equal to two check the equality and this
01:47 - one is not equal to
01:50 - these operators you can also say as
01:51 - equality operator and no inequality
01:53 - operator
01:54 - right and see this is double equal to it
01:56 - is different from a single equal to
01:58 - operator this is what assignment
01:59 - operator
02:01 - as we have discussed in previous video
02:03 - this operator is used to assign the
02:05 - value from the expression
02:07 - from the right hand side to left hand
02:09 - side and this double equal to is what
02:11 - this is what
02:13 - to check some condition to check the
02:14 - equality
02:16 - how you will use these operators let me
02:17 - discuss this thing also see if you write
02:20 - like this if i'm writing 3 less than 5
02:24 - now what you will get is it true yes 3
02:26 - is less than 5 means true
02:28 - so now when you use when you write
02:30 - program in computers what you will get
02:32 - you will get output as true would be
02:35 - stored in memory in the form of 1 so you
02:38 - will get 1
02:39 - right you will get a boolean value
02:41 - either 1 or 0 if i write 3 greater than
02:44 - 5
02:45 - it will give you result what
02:47 - 0 because it is false
02:49 - if i write this one is less than equal
02:52 - to right i'm writing 3 less than 3
02:55 - it will give
02:56 - false 0 because 3 no is not less than 3
02:59 - but if i write 3 less than equal to 3
03:03 - yes it is not less than but it is equal
03:05 - to 3 then it will give you 1.
03:08 - like this these operators are used to
03:11 - compare two values two operands or two
03:14 - expressions also its not like that we
03:15 - can only use hair constant we can only
03:17 - use here variables we can also use here
03:20 - expressions if i write it like 3 plus 5
03:24 - and here we write less than 5 plus 5
03:28 - we can also compare these values
03:31 - these
03:32 - this is what expression or if i write
03:34 - like a plus b
03:36 - less than b plus c
03:38 - this also we can compare
03:40 - right so this is what expression you can
03:43 - also compare expressions you can also
03:44 - compare constant or you can also compare
03:47 - variables like a less than b i can also
03:49 - write like this so using relational
03:51 - operators what you can compare integer
03:53 - value you can also compare floating type
03:56 - of value and you can also compare
03:59 - character if you write like this
04:02 - character how we write
04:03 - a single character enclosed in single
04:06 - quotes
04:07 - less than
04:08 - suppose i am writing here b
04:11 - so this is what character character it
04:13 - is different from this one here a is
04:15 - what simple variable if i am storing
04:17 - here int a is equal to 3
04:20 - and into b is equal to 5
04:23 - then here 3 here 5 but this is not 3 and
04:26 - 5. it is in single code it is character
04:29 - so now characters are stored using
04:31 - character system we have already
04:33 - discussed uh in one of my previous video
04:35 - when we were discussing about the data
04:36 - types cache data
04:38 - if you want to say you can check out the
04:39 - video here in the side button
04:41 - so a is what corresponding to a the
04:43 - value a sky value is what 97
04:46 - less than corresponding to b s i value
04:48 - is what 98 so these values would be
04:50 - compared here so 97 is less than 98 yes
04:54 - true so it will also give you true that
04:56 - is one
04:58 - but you cannot compare strings using
05:01 - these operators like i cannot write here
05:02 - like this one
05:04 - ah suppose i compare jenny and less than
05:07 - you can say here
05:08 - lectures
05:10 - this is what string
05:12 - sequence of characters enclosed within
05:14 - double quotes
05:16 - why so
05:17 - because when you compare like this
05:20 - then
05:21 - it will compare the address
05:24 - means the first address of this one
05:28 - obviously this has been this will be
05:29 - stored in memory every character will be
05:32 - taking one byte one byte one byte one
05:34 - byte every this
05:36 - location is having some memory address
05:38 - right so the starting address suppose
05:40 - this is thousand
05:42 - and this is i don't know the address is
05:44 - two thousand
05:45 - so it will compare those addresses and
05:48 - then it will give you output
05:50 - and we don't know where jenny is stored
05:53 - where lectures have been stored
05:55 - because these are stored in memory like
05:58 - this is a memory so i don't know where
06:00 - these are stored what is the address
06:02 - so this will give you can say some
06:04 - undefined behavior it will show you
06:07 - so we cannot compare in c we cannot
06:09 - compare strings using relational
06:12 - operators there are some other ways to
06:14 - compare strings that also will discuss
06:16 - when will be discussing about strings
06:18 - but using these we can what come we can
06:20 - compare what integer value we can
06:23 - compare float value we can compare
06:25 - character value
06:26 - but we avoid uh comparing float values
06:29 - using these operators
06:31 - i'll talk i'll talk this thing in a
06:33 - program with the help of a program then
06:35 - you will get it better so now let me
06:37 - discuss it with the help of a program
06:41 - so the general syntax to use to write
06:43 - relational operators is what
06:46 - this is relational operator either this
06:48 - one one of these operator
06:50 - this side we have a means arithmetic
06:53 - expression one an arithmetic expression
06:55 - two arithmetic expression means here you
06:58 - can also write some constant value
07:01 - any single variable also or any
07:03 - expression which is combination of
07:04 - constant and variables i have taken
07:07 - these examples also right and we will
07:09 - also talk in a program and you can also
07:11 - compare minus values also like if i
07:13 - write minus 14 greater than 3 then what
07:16 - would be the output but minus 14 is not
07:19 - greater than 3 then it will give 0 you
07:20 - can also compare like float values 4.5
07:23 - less than 4
07:25 - it will give what it will give 0 because
07:26 - 4.5 is greater than 4 right and
07:30 - the output is what you will get either 0
07:33 - or 1
07:34 - so it is what an integer value so the
07:36 - format specifier you use is what
07:38 - percentage d
07:40 - right always
07:42 - now let me discuss it with program we
07:45 - can also use this arithmetic expression
07:48 - means we'll be using in this expression
07:49 - that arithmetic operators plus minus or
07:52 - divide into our modulo operator right
07:54 - and we will also see the precedence and
07:57 - associativity if we use expression
08:01 - let me write down a program now here i
08:04 - am taking two variables control will go
08:06 - here the first statement of the main
08:08 - function when you compile it when you
08:10 - execute it and value would be assigned
08:12 - to
08:13 - two variables a and b in a i have 18 in
08:16 - b i have nine now next is clear screen
08:19 - next is what
08:20 - printf percentage d format specifier is
08:23 - percentage d means it has to print an
08:25 - integer value
08:26 - a less than b compare
08:28 - a value is what it it is going to fetch
08:30 - value from memory 18 less than 9
08:33 - no it will give you 0.
08:35 - now this one control will go here now it
08:37 - is what character
08:39 - constant if we have character here
08:41 - character data type
08:43 - so this is what a c value is what a sky
08:45 - value of c is what
08:47 - 99
08:48 - and b is what 98 is 99 less than 98 no
08:52 - so it will give you false
08:55 - right right i hope you know the meaning
08:57 - of these things no need to uh write down
08:59 - every character let me discuss it with
09:01 - the twisted manner and suppose if i
09:03 - write here like a equal to equal to b it
09:05 - will check if a equal to b is 18 equal
09:07 - to 9 no it will give you false
09:10 - right and if i write here not equal to
09:13 - b
09:14 - yes a is not equal to b then it will
09:16 - give you true it is true
09:19 - fine now let me discuss in a different
09:22 - manner
09:23 - so now see
09:24 - here we have taken five variables so in
09:27 - memory i am assigning the value
09:29 - that memory address
09:31 - to a
09:32 - b
09:34 - c d and e in a i have 18 here we have 9
09:38 - in cd we don't have anything and e i
09:40 - have
09:41 - 10 right
09:43 - now see next statement is clear screen
09:44 - next is c is equal to b plus plus i am
09:47 - combining arithmetic increment operator
09:49 - also and these these operators also so
09:52 - that you will get you can revise those
09:53 - operators as well
09:55 - now b plus plus this is what post
09:57 - increment post means first of all the
09:59 - original value would be used in this
10:01 - expression and after that value would be
10:03 - incremented so original value of b is
10:05 - what 9 so 9 would be assigned to c first
10:07 - of all
10:08 - and now value of b becomes it would be
10:11 - incremented by 1 9 becomes 10 so now at
10:15 - b
10:16 - what 10 value would be stored
10:18 - right
10:19 - now what is next statement d is equal to
10:22 - b
10:23 - now here
10:24 - whatever value in b that would be
10:26 - assigned to d
10:27 - just take care this thing now b is not 9
10:30 - b has already updated it is what 10
10:33 - in the previous statement right now 10
10:35 - would be assigned to d
10:37 - right
10:38 - now see printf percentage d
10:41 - now we have this
10:42 - one
10:43 - right
10:44 - in this expression
10:46 - this is what relational expression when
10:49 - we use relational operators in any
10:50 - expression that is called as relational
10:53 - expression expression is what
10:54 - combination of you can say operators and
10:56 - operands
10:57 - right here we have abc these are
10:59 - operands or this is what operator
11:02 - so now
11:03 - we have three relational operator in one
11:06 - expression now which one you will
11:07 - evaluate first
11:10 - at that time you have to check
11:11 - associativity of the operator
11:14 - associativity of these relation operator
11:16 - is what left to right means we will walk
11:18 - from this side left to right
11:20 - so while walking from left to right
11:22 - first operator is this one
11:24 - a less than b so this
11:27 - operator would be evaluated first now
11:29 - check a value is 18 b value is
11:32 - 10
11:33 - it's not 9
11:35 - please remember this thing right it's 10
11:38 - now
11:39 - is 18 less than 10
11:41 - no so that is why this will give you
11:45 - false that is 0
11:47 - right
11:48 - now this
11:50 - operator would be evaluated
11:52 - 0 less than c value is 9 is 0 less than
11:56 - 9 yes it is true it will give you
11:59 - this one will give you
12:01 - 1 true
12:03 - now check
12:04 - is 1 greater than d d is what 10
12:07 - no so the final output would be
12:10 - zero it will give you false
12:12 - i hope you got now you got it now the
12:14 - associativity how to uh evaluate if
12:18 - two or more exp two or more operators
12:20 - are there in one expression
12:22 - so let us discuss this thing now now
12:24 - control will go here
12:26 - is b equal to equal to e b value is 10
12:30 - e value is 10 please don't compare with
12:33 - this 9. if you compare this value 9 and
12:36 - 10 what you will say if these are not
12:38 - equal and it will give you false no it
12:41 - will give you true because b is 10 and e
12:43 - is also 10
12:45 - that is why try run a program and always
12:47 - assign values always write down this
12:50 - form of variables when you draw it in a
12:51 - program
12:52 - now what about next statement here we
12:54 - have c plus 1 greater than e
12:56 - now what is the value of c
12:58 - 9 9 plus 1 now see okay
13:02 - now here we have c 1 is arithmetic
13:05 - operator one is relational operator two
13:07 - types of operator now you will say which
13:09 - operator we will evaluate first
13:12 - which is the operator which is having
13:14 - higher priority that is why we check the
13:15 - precedence chart to check the priority
13:17 - of the operators an arithmetic operators
13:20 - are having higher priority than
13:21 - relational operators so arithmetic
13:23 - operators would be executed first
13:25 - right so now first of all c plus 1 c is
13:28 - what 9 9 plus 1 is 10 10 greater than e
13:32 - e value is 10 is 10 greater than 10
13:34 - no is it equal to 10 so
13:37 - false it will give you 0
13:40 - right
13:41 - let us take this one
13:43 - this is a little complex one here we
13:45 - have arithmetic operators and relational
13:47 - operators arithmetic operators will be
13:50 - evaluated first because they are having
13:51 - higher precedence but arithmetic
13:53 - operators are also two one is this and
13:55 - one is this now which one you will
13:57 - evaluate first
13:59 - check the associativity now
14:00 - associativity is from left to right
14:03 - arithmetic operators are having
14:04 - associative left associativity left to
14:06 - right means
14:07 - we will walk from this side left to
14:09 - right which operators which arithmetic
14:11 - operators comes first this or this this
14:14 - one
14:15 - when we woke from this side so now this
14:17 - would be evaluated first a plus c a
14:19 - value is 18 c value is
14:21 - 9 so total is what 27
14:26 - i hope you are able to see this
14:28 - what is value of b
14:30 - 10
14:31 - greater than value of e
14:33 - 10
14:34 - less than
14:35 - c plus d see now i am not evaluating
14:38 - these operators because higher
14:39 - precedence is this operator
14:42 - arithmetic we have done the with this
14:44 - part now we will be solving this one c
14:46 - plus d c is what 9 d is what 10 so here
14:49 - we will have
14:50 - 19
14:52 - now
14:52 - in this also we have three
14:55 - relational operator one one the one is
14:57 - this one one is this one one is this one
14:59 - now you will evaluate which one first so
15:01 - here also
15:03 - these operators are having high higher
15:05 - precedence
15:06 - like you can say one
15:08 - after that these operators
15:10 - first higher priority these operators
15:12 - would be evaluated less than or in these
15:14 - operators and after that equality
15:16 - operator so here we have equality
15:18 - operator and less than greater than
15:20 - operator so first which operator would
15:22 - be evaluated which is having higher
15:23 - priority less than and greater than
15:25 - these are having higher priority than
15:26 - equal to so that is why these would be
15:28 - evaluated first but this is also we are
15:30 - having two
15:32 - with of same precedence then we will
15:33 - check associativity associativity is
15:35 - left to right so now we will walk from
15:37 - left to
15:38 - right first relational operator is this
15:41 - one
15:42 - so now check
15:44 - one is this operand and one is this
15:46 - operand for this relational operator
15:49 - because they are going to compare two
15:50 - values only two values
15:52 - now 10 greater than 10
15:54 - no 10 is equal to 10 so this will give
15:57 - you
15:58 - what
15:59 - force that is 0
16:01 - right and this side we have 27 equal to
16:03 - equal to
16:04 - now this would be evaluated
16:06 - 0 less than 19
16:08 - yes so final this will give you
16:12 - 1
16:13 - now compare this one 27 equal to equal
16:15 - to 1
16:16 - no so it will give you
16:18 - false that is 0
16:20 - right i hope you got this now let us
16:23 - take one more example so here we have
16:25 - one more variable that is f we don't
16:27 - have anything in f but when control will
16:29 - go to uh sorry this statement then what
16:31 - value would be assigned to f
16:32 - check out in this expression we have
16:34 - three relational operator so check the
16:36 - associativity
16:37 - which is
16:38 - and these are having same precedence
16:40 - which is which is left to right so is a
16:42 - greater than b
16:43 - a is 18 b is 10 yes so it will give you
16:47 - one
16:48 - now this is 1 greater than d d is what
16:51 - 10
16:52 - it is not true so this will give you 0
16:55 - is 0 less than c c is what 9 yes so it
16:58 - will give you 1 so finally in f we will
17:00 - store
17:01 - 1 so now check f not equal to 1 f is
17:05 - what 1
17:06 - f 1 not equal to 1 but 1 is equal to 1
17:09 - so it will give you
17:11 - false so that is why the output would be
17:13 - 0 right now
17:16 - if i take floating values ah like i am
17:19 - taking here
17:20 - one floating value is f and g
17:23 - if you take suppose 2.2 and 2.22
17:28 - right
17:29 - and if you compare these values like
17:32 - suppose if i am comparing like this f
17:34 - less than
17:36 - g
17:37 - then what would be the output
17:39 - yes it is what 2.2 is less than 2.22 so
17:42 - it will give you true fine but if you
17:44 - compare like this f equal to equal to
17:48 - g
17:49 - then also it will give you
17:51 - false
17:52 - right because it is 2.2 it is 2.22 so it
17:55 - is give you it will give you 0 but
17:57 - almost these are equal so suppose
18:00 - if you write like 2.000
18:06 - 1
18:07 - f and g is what
18:10 - if you compare f and g if you write down
18:12 - f equal to equal to g then also it will
18:14 - give you force but these are almost
18:16 - equal
18:17 - right so see that is why we avoid using
18:20 - these equal to operators and not equal
18:22 - to operators
18:24 - when we use floating point number
18:26 - if you require high high precision
18:29 - then better to avoid these using these
18:31 - operators equal to and not equal to
18:33 - with these numbers the the floating
18:35 - numbers right so let me give you one
18:37 - assignment let me give you one problem
18:39 - and you tell me in the comment box what
18:41 - would be output of that problem either 0
18:44 - or 1.
18:45 - so the answer of this you have to tell
18:47 - me a plus c equal to equal to b
18:49 - greater than equal to e less than c plus
18:51 - d and not equal to 1
18:53 - what it will print 100 but please don't
18:55 - run it on your system first of all drier
18:58 - and this program using these values only
19:01 - then tell me what is the output and
19:02 - after that you can run on your computer
19:04 - and you can tell your answer
19:05 - and see here also you can also you can
19:07 - also compare like special characters if
19:10 - we write like plus
19:12 - equal to equal to
19:14 - plus
19:15 - in single quotes we have so it would be
19:17 - evaluated first of all the sky value of
19:19 - plus what is the sky value then it will
19:21 - check yeah these are equal so it will
19:23 - print true and you can also compare like
19:25 - this like this one if you write these
19:28 - less than and equal to symbols in single
19:30 - quotes then it becomes character these
19:33 - are not now operators this is what
19:35 - operator between these two characters so
19:37 - this and this would be evaluated first
19:40 - of all a map to their sky value sky
19:43 - value of this sky value of the and that
19:45 - value would be compare so you can also
19:47 - tell me in the comment box what would be
19:49 - the answer of this thing so i hope you
19:52 - got
19:53 - when we use relational operators like
19:54 - when we use these operators especially
19:56 - when you want to check any condition in
19:58 - if else and in any while loop or do
20:00 - while loop and that time when we will
20:02 - discuss these loops sorry that if else
20:05 - statement the control statement then you
20:07 - will be uh you know more clear about
20:09 - these operators but these operators are
20:11 - used to decide something in decision
20:13 - making we use these operators right
20:15 - these are used to check the conditions
20:17 - fine so that's it about relation
20:18 - operators and see in the next video i'll
20:20 - be talking about logical operators in c
20:23 - so now i'll see in the next video till
20:24 - then bye take

Cleaned transcript:

and the series of learning programming in c we are discussing about operators in c in my previous videos i have already covered three type of operators arithmetic assignment and increment and decrement operators in this video i will be talking about relational operators what are relational operators types of these operators why to use these operators in a program when to use how to use these operators and we will also write a program simple program and we'll be talking about the output when you use these operators relational operator in your program then what output you will get we'll be talking about all the things in detail in this video right so now let us discuss relational operators in c as the names suggest relational they are going to talk about relations between two things now which type of relations they will not give you that they will not tell you that blood relations like we human have they will compare you can see the values two values right and will give you the result and you can say these are used to check the conditions these are used when in decision making right especially in if else we use these operators so we used to compare two values these operators so you can also called as comparison operators and you can say when we compare the values then what should be the output when you use these operators then what is the output either you will get true or false true means one false means zero in computers memory these true and false these words are stored as numbers true is stored in the form of one force is stored in the form of zero right so now types of relational operators are these are types of relational operator less than greater than less than equal to greater than equal to e this one is equal to two check the equality and this one is not equal to these operators you can also say as equality operator and no inequality operator right and see this is double equal to it is different from a single equal to operator this is what assignment operator as we have discussed in previous video this operator is used to assign the value from the expression from the right hand side to left hand side and this double equal to is what this is what to check some condition to check the equality how you will use these operators let me discuss this thing also see if you write like this if i'm writing 3 less than 5 now what you will get is it true yes 3 is less than 5 means true so now when you use when you write program in computers what you will get you will get output as true would be stored in memory in the form of 1 so you will get 1 right you will get a boolean value either 1 or 0 if i write 3 greater than 5 it will give you result what 0 because it is false if i write this one is less than equal to right i'm writing 3 less than 3 it will give false 0 because 3 no is not less than 3 but if i write 3 less than equal to 3 yes it is not less than but it is equal to 3 then it will give you 1. like this these operators are used to compare two values two operands or two expressions also its not like that we can only use hair constant we can only use here variables we can also use here expressions if i write it like 3 plus 5 and here we write less than 5 plus 5 we can also compare these values these this is what expression or if i write like a plus b less than b plus c this also we can compare right so this is what expression you can also compare expressions you can also compare constant or you can also compare variables like a less than b i can also write like this so using relational operators what you can compare integer value you can also compare floating type of value and you can also compare character if you write like this character how we write a single character enclosed in single quotes less than suppose i am writing here b so this is what character character it is different from this one here a is what simple variable if i am storing here int a is equal to 3 and into b is equal to 5 then here 3 here 5 but this is not 3 and 5. it is in single code it is character so now characters are stored using character system we have already discussed uh in one of my previous video when we were discussing about the data types cache data if you want to say you can check out the video here in the side button so a is what corresponding to a the value a sky value is what 97 less than corresponding to b s i value is what 98 so these values would be compared here so 97 is less than 98 yes true so it will also give you true that is one but you cannot compare strings using these operators like i cannot write here like this one ah suppose i compare jenny and less than you can say here lectures this is what string sequence of characters enclosed within double quotes why so because when you compare like this then it will compare the address means the first address of this one obviously this has been this will be stored in memory every character will be taking one byte one byte one byte one byte every this location is having some memory address right so the starting address suppose this is thousand and this is i don't know the address is two thousand so it will compare those addresses and then it will give you output and we don't know where jenny is stored where lectures have been stored because these are stored in memory like this is a memory so i don't know where these are stored what is the address so this will give you can say some undefined behavior it will show you so we cannot compare in c we cannot compare strings using relational operators there are some other ways to compare strings that also will discuss when will be discussing about strings but using these we can what come we can compare what integer value we can compare float value we can compare character value but we avoid uh comparing float values using these operators i'll talk i'll talk this thing in a program with the help of a program then you will get it better so now let me discuss it with the help of a program so the general syntax to use to write relational operators is what this is relational operator either this one one of these operator this side we have a means arithmetic expression one an arithmetic expression two arithmetic expression means here you can also write some constant value any single variable also or any expression which is combination of constant and variables i have taken these examples also right and we will also talk in a program and you can also compare minus values also like if i write minus 14 greater than 3 then what would be the output but minus 14 is not greater than 3 then it will give 0 you can also compare like float values 4.5 less than 4 it will give what it will give 0 because 4.5 is greater than 4 right and the output is what you will get either 0 or 1 so it is what an integer value so the format specifier you use is what percentage d right always now let me discuss it with program we can also use this arithmetic expression means we'll be using in this expression that arithmetic operators plus minus or divide into our modulo operator right and we will also see the precedence and associativity if we use expression let me write down a program now here i am taking two variables control will go here the first statement of the main function when you compile it when you execute it and value would be assigned to two variables a and b in a i have 18 in b i have nine now next is clear screen next is what printf percentage d format specifier is percentage d means it has to print an integer value a less than b compare a value is what it it is going to fetch value from memory 18 less than 9 no it will give you 0. now this one control will go here now it is what character constant if we have character here character data type so this is what a c value is what a sky value of c is what 99 and b is what 98 is 99 less than 98 no so it will give you false right right i hope you know the meaning of these things no need to uh write down every character let me discuss it with the twisted manner and suppose if i write here like a equal to equal to b it will check if a equal to b is 18 equal to 9 no it will give you false right and if i write here not equal to b yes a is not equal to b then it will give you true it is true fine now let me discuss in a different manner so now see here we have taken five variables so in memory i am assigning the value that memory address to a b c d and e in a i have 18 here we have 9 in cd we don't have anything and e i have 10 right now see next statement is clear screen next is c is equal to b plus plus i am combining arithmetic increment operator also and these these operators also so that you will get you can revise those operators as well now b plus plus this is what post increment post means first of all the original value would be used in this expression and after that value would be incremented so original value of b is what 9 so 9 would be assigned to c first of all and now value of b becomes it would be incremented by 1 9 becomes 10 so now at b what 10 value would be stored right now what is next statement d is equal to b now here whatever value in b that would be assigned to d just take care this thing now b is not 9 b has already updated it is what 10 in the previous statement right now 10 would be assigned to d right now see printf percentage d now we have this one right in this expression this is what relational expression when we use relational operators in any expression that is called as relational expression expression is what combination of you can say operators and operands right here we have abc these are operands or this is what operator so now we have three relational operator in one expression now which one you will evaluate first at that time you have to check associativity of the operator associativity of these relation operator is what left to right means we will walk from this side left to right so while walking from left to right first operator is this one a less than b so this operator would be evaluated first now check a value is 18 b value is 10 it's not 9 please remember this thing right it's 10 now is 18 less than 10 no so that is why this will give you false that is 0 right now this operator would be evaluated 0 less than c value is 9 is 0 less than 9 yes it is true it will give you this one will give you 1 true now check is 1 greater than d d is what 10 no so the final output would be zero it will give you false i hope you got now you got it now the associativity how to uh evaluate if two or more exp two or more operators are there in one expression so let us discuss this thing now now control will go here is b equal to equal to e b value is 10 e value is 10 please don't compare with this 9. if you compare this value 9 and 10 what you will say if these are not equal and it will give you false no it will give you true because b is 10 and e is also 10 that is why try run a program and always assign values always write down this form of variables when you draw it in a program now what about next statement here we have c plus 1 greater than e now what is the value of c 9 9 plus 1 now see okay now here we have c 1 is arithmetic operator one is relational operator two types of operator now you will say which operator we will evaluate first which is the operator which is having higher priority that is why we check the precedence chart to check the priority of the operators an arithmetic operators are having higher priority than relational operators so arithmetic operators would be executed first right so now first of all c plus 1 c is what 9 9 plus 1 is 10 10 greater than e e value is 10 is 10 greater than 10 no is it equal to 10 so false it will give you 0 right let us take this one this is a little complex one here we have arithmetic operators and relational operators arithmetic operators will be evaluated first because they are having higher precedence but arithmetic operators are also two one is this and one is this now which one you will evaluate first check the associativity now associativity is from left to right arithmetic operators are having associative left associativity left to right means we will walk from this side left to right which operators which arithmetic operators comes first this or this this one when we woke from this side so now this would be evaluated first a plus c a value is 18 c value is 9 so total is what 27 i hope you are able to see this what is value of b 10 greater than value of e 10 less than c plus d see now i am not evaluating these operators because higher precedence is this operator arithmetic we have done the with this part now we will be solving this one c plus d c is what 9 d is what 10 so here we will have 19 now in this also we have three relational operator one one the one is this one one is this one one is this one now you will evaluate which one first so here also these operators are having high higher precedence like you can say one after that these operators first higher priority these operators would be evaluated less than or in these operators and after that equality operator so here we have equality operator and less than greater than operator so first which operator would be evaluated which is having higher priority less than and greater than these are having higher priority than equal to so that is why these would be evaluated first but this is also we are having two with of same precedence then we will check associativity associativity is left to right so now we will walk from left to right first relational operator is this one so now check one is this operand and one is this operand for this relational operator because they are going to compare two values only two values now 10 greater than 10 no 10 is equal to 10 so this will give you what force that is 0 right and this side we have 27 equal to equal to now this would be evaluated 0 less than 19 yes so final this will give you 1 now compare this one 27 equal to equal to 1 no so it will give you false that is 0 right i hope you got this now let us take one more example so here we have one more variable that is f we don't have anything in f but when control will go to uh sorry this statement then what value would be assigned to f check out in this expression we have three relational operator so check the associativity which is and these are having same precedence which is which is left to right so is a greater than b a is 18 b is 10 yes so it will give you one now this is 1 greater than d d is what 10 it is not true so this will give you 0 is 0 less than c c is what 9 yes so it will give you 1 so finally in f we will store 1 so now check f not equal to 1 f is what 1 f 1 not equal to 1 but 1 is equal to 1 so it will give you false so that is why the output would be 0 right now if i take floating values ah like i am taking here one floating value is f and g if you take suppose 2.2 and 2.22 right and if you compare these values like suppose if i am comparing like this f less than g then what would be the output yes it is what 2.2 is less than 2.22 so it will give you true fine but if you compare like this f equal to equal to g then also it will give you false right because it is 2.2 it is 2.22 so it is give you it will give you 0 but almost these are equal so suppose if you write like 2.000 1 f and g is what if you compare f and g if you write down f equal to equal to g then also it will give you force but these are almost equal right so see that is why we avoid using these equal to operators and not equal to operators when we use floating point number if you require high high precision then better to avoid these using these operators equal to and not equal to with these numbers the the floating numbers right so let me give you one assignment let me give you one problem and you tell me in the comment box what would be output of that problem either 0 or 1. so the answer of this you have to tell me a plus c equal to equal to b greater than equal to e less than c plus d and not equal to 1 what it will print 100 but please don't run it on your system first of all drier and this program using these values only then tell me what is the output and after that you can run on your computer and you can tell your answer and see here also you can also you can also compare like special characters if we write like plus equal to equal to plus in single quotes we have so it would be evaluated first of all the sky value of plus what is the sky value then it will check yeah these are equal so it will print true and you can also compare like this like this one if you write these less than and equal to symbols in single quotes then it becomes character these are not now operators this is what operator between these two characters so this and this would be evaluated first of all a map to their sky value sky value of this sky value of the and that value would be compare so you can also tell me in the comment box what would be the answer of this thing so i hope you got when we use relational operators like when we use these operators especially when you want to check any condition in if else and in any while loop or do while loop and that time when we will discuss these loops sorry that if else statement the control statement then you will be uh you know more clear about these operators but these operators are used to decide something in decision making we use these operators right these are used to check the conditions fine so that's it about relation operators and see in the next video i'll be talking about logical operators in c so now i'll see in the next video till then bye take
