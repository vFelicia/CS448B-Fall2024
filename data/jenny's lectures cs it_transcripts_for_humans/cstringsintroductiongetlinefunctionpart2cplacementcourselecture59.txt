With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - C++ programming language we are
00:05 - discussing strings in
00:06 - C++ uh I have told you in previous video
00:09 - like C++ provide two types of string
00:11 - representation one is C style character
00:13 - strings and second one is C++ strings so
00:16 - C style strings we have discussed in
00:18 - previous video right now in this video
00:20 - we'll see what are C++
00:23 - strings in C++ you know new type of
00:26 - strings are introduced as like this STD
00:30 - this name space I mean this scope
00:32 - resolution operator and string because
00:35 - in C++ string is a class as a class they
00:39 - have defined they have introduced
00:41 - string right so if this is a class we
00:44 - can create object of this type of class
00:46 - right so we have a proper you can say as
00:49 - a data type in C++ because in C string
00:53 - is not a data
00:54 - type we use string as a character array
00:58 - right it's not a data type you you
01:00 - cannot write like this like St Str and
01:03 - just create an string type of variable
01:05 - in C in C this is invalid in see what we
01:08 - can see we can write down character
01:11 - array like care and like s Str there you
01:14 - can use the length size of the string
01:17 - this is valid so this is character you
01:20 - can see this is C style string but this
01:23 - is not valid but this we can use in
01:27 - C++ because in C++ new type of strings
01:31 - are introduced like this string is a
01:34 - class here which is defined in this
01:37 - header file which is
01:40 - string with so many functionalities and
01:43 - member functions are there so we can use
01:44 - so many functionalities with string
01:47 - right so strings are basically we can
01:48 - say objects which are represented as
01:51 - sequence of characters in
01:53 - C++ right so strings basically can are
01:57 - objects in C++ that represents SE of
02:00 - characters right so in string we can
02:01 - store text we can store obviously
02:03 - numbers also any type of data
02:06 - information we can store using string
02:08 - and one advantage is what you don't have
02:09 - to specify the size at compile time
02:12 - these are not a fixed size right this is
02:14 - drawback in C style string but if you
02:16 - use C++ style string this is valid in
02:20 - C++ this is how we can define a string
02:24 - right so here this Str Str is you can
02:26 - say it's an object because string is a
02:28 - class in C++
02:31 - right and to use string and all the
02:34 - member function of string we use this
02:37 - header like hash include string you have
02:39 - to include this header although without
02:41 - including this also it will work fine if
02:43 - you include that iio stream header
02:45 - because automatically with this uh this
02:49 - would be included included but sometimes
02:51 - it will not give the proper you know
02:53 - result it depends it is implementation
02:55 - dependent so better to include whenever
02:58 - you are using Vector better to to
03:00 - include especially Vector header file
03:01 - when you're using string better to
03:03 - include separately string header file
03:05 - when you're using pair better to include
03:07 - separately utility uh header right and
03:11 - in C++ these strings C when in C we use
03:15 - to concatenate two string then we use S
03:17 - strc this
03:19 - function right but in C++ if you are
03:22 - going to con concatenate two string you
03:24 - can use this plus
03:26 - operator right so plus can also be used
03:29 - for addition as well as for
03:30 - concatenation of two strings in C++
03:33 - right so we can use these operators like
03:35 - Plus or for comparison we can use double
03:38 - equal to for equality not equal to less
03:41 - than greater than less than equal to
03:42 - greater than greater than equal to these
03:43 - operators we can use with strings so
03:46 - this is going to make your you know our
03:48 - life easy and simpler so we can say we
03:51 - can write down this code with so much
03:53 - Simplicity rather than using those
03:55 - function St Str CMP St Str C just use
03:58 - plus just use these symbols
04:01 - right so the code would be more you know
04:03 - readable and easy to write right so we
04:06 - can say these C+ plus uh strings provide
04:09 - many advantages over C style string like
04:12 - we I told you one thing that is dynamic
04:14 - size you don't have to provide fixed
04:17 - size right and this binary operator
04:20 - supports in C++ they provide but you
04:23 - cannot use these type of operator with
04:25 - the c style string right as well as many
04:29 - member function are there which we can
04:31 - use on strings so all these things I'll
04:33 - show you practically right let's see now
04:36 - with this thing with the help of program
04:37 - so just create a
04:39 - new file and include those headers now
04:45 - how to uh Define or declare a string
04:47 - just use this string this keyword and
04:50 - the name of the string St Str that's it
04:53 - no need to specify the size and all and
04:55 - this will work fine so string is
04:56 - basically more precisely you say then
04:58 - Str Str is an object of Class Type
05:00 - string right or we can initialize it
05:04 - something like this like St Str equal to
05:06 - I have
05:08 - gen in C style string we cannot
05:11 - initialize this thing right if you use
05:13 - like character array then array name is
05:15 - equal to this that is invalid that we
05:17 - have discussed in previous video
05:20 - right so this is
05:22 - fine now if you want to print then
05:26 - simply St Str and let me show you see
05:29 - you will
05:31 - get Jenny right or we can use this type
05:35 - of bracket also this round bracket and
05:37 - it will work fine see Jenny would be
05:39 - printed
05:42 - right so one more thing we can do like
05:45 - Str
05:46 - Str St str1 or let's take this Str str1
05:51 - this is Str
05:53 - str2 and here also we can specify like
05:56 - this
06:03 - St str2 kri without equal to also it
06:06 - will work fine or you can write down
06:07 - here equal to as well right now this
06:10 - will this is Str
06:12 - str1 so let's print both Str str1
06:16 - and andl St Str
06:21 - 2 let's run this and it will print Jenny
06:24 - and kri two string right so without
06:27 - equal to or this also it will work fine
06:32 - now with another string like I have Str
06:37 - str3 and I want to initialize with Str
06:42 - str2 so this is also fine rather than
06:46 - Str str2 now if you print Str
06:49 - str3 then Str
06:51 - str3 is also initialized with Str str2
06:53 - in Str str2 we have katri so katri would
06:56 - be there in Str str3 as well so we
06:58 - putting just one and three these strings
07:00 - not two so it will print Jen and
07:03 - kri okay let's run this and I'll show
07:06 - you see right so with another string we
07:10 - can initialize a string and if in a
07:13 - string you want to there is a string in
07:15 - which only one character or single thing
07:19 - is repeated so that is also uh that
07:22 - thing we can also achieve with this like
07:23 - 10
07:25 - times which character a is repeated in
07:28 - this string
07:30 - right and I want to print C out this Str
07:37 - str4 in a new line so let's put here
07:41 - ndl let's run this and
07:43 - see okay it is printing only a so okay
07:48 - in this case there would be these type
07:49 - of round bracket not curly bracket let's
07:51 - run this and see what output you'll get
07:53 - see a is printting printed 10 times
07:56 - right so make sure you I have to take
08:00 - care of this thing one more thing I want
08:02 - to show you like Str Str
08:04 - 5 so we have these two things these two
08:07 - type of definition of the string or you
08:09 - can say initialization of the string
08:11 - string five I'm going to initialize with
08:13 - Str str1 and I'm just providing three
08:15 - here and in Str Str 6 I want to provide
08:18 - a proper string I'm writing here as a
08:20 - string literal I'm
08:22 - using this is a C string literal right
08:25 - right and here also I'm providing three
08:27 - so what you think what output you will
08:29 - get Str str5 and Str Str 6 let's run
08:32 - this and
08:34 - see okay now need to select
08:37 - this see first is NY and next is p
08:42 - r so in St str1 in string we have Jenny
08:46 - right and three this three means from
08:51 - which
08:53 - position the string to be copied in Str
08:57 - str5
09:00 - right from position third 0 1 2 3 so
09:04 - this NY would
09:07 - be in this Str Str 5 in this case we are
09:11 - providing C string literal so here if
09:13 - you provide this number it means from
09:17 - starting from 0 to this is
09:22 - what uh the length of the string so 1 2
09:27 - 3 till a p a would be there right p a
09:33 - would be initialized in this St Str 6 so
09:36 - you need to take care these two types of
09:38 - initialization right now let's
09:42 - concatenate or let's take input from
09:44 - user like I want to ask uh from user the
09:48 - user name so in that case what you will
09:52 - do let's comment out all all these
09:54 - things and
09:57 - uh I have taken a R1 a string and from
10:00 - user I want to take
10:09 - input enter your name and see in in St
10:13 - Str
10:15 - one sorry Str Str 1 because this is our
10:19 - string the name is Str str1 and I just
10:22 - want to print again St str1 that's
10:26 - it let's run this with scene obviously
10:30 - we can take input from user enter your
10:31 - name so Jenny yeah Jenny and Jenny two
10:36 - times sorry one is taking input and one
10:39 - time it is printing right so if you
10:42 - remove the
10:43 - cndl that will work fine but the thing
10:46 - is again run this and I'm I'm entering
10:49 - my name Jenny katri in that case it is
10:53 - taking only Jenny this thing also we
10:55 - have discussed in previous video no kri
10:57 - because this extraction operator this
10:59 - extraction operator will stop taking
11:02 - input as soon as it will find any white
11:03 - space or new line so after JY I have
11:06 - given a space so if it sees any space
11:09 - then it will stop taking input so it
11:11 - will take input jny only and it will
11:13 - print jny only so what if I want to take
11:15 - a complete line as an input with space
11:18 - Also my complete full name jti katri
11:20 - lamba Jan's lectures hi welcome this
11:22 - kind of thing so for that we have a
11:24 - function that is g line function that we
11:25 - can use so uh that function how we can
11:28 - use with C in so rather than C in
11:34 - here what is the function get line the
11:38 - first argument of this is C in right and
11:43 - the next is this variable where you want
11:46 - to obviously the store the string the
11:48 - string variable string object s Str
11:52 - one and now let's print Str str1 so
11:55 - let's run this and we will take complete
11:56 - line as an input like
12:06 - this
12:07 - line L hi welcome
12:10 - right as soon as you will print any you
12:14 - know you will enter new line or whenever
12:16 - you will print enter it means we are
12:18 - pressing we're indicating that
12:20 - indicating for a new line right so as
12:22 - soon as it get line will find the new
12:25 - line then it will it is going to stop
12:27 - taking input right so this is how we can
12:30 - use this getline function and this
12:32 - getline function is uh defined in this
12:34 - string header file so let's comment out
12:38 - this
12:38 - line this also this time also it will
12:41 - work fine
12:45 - see right why so because automatically
12:48 - if you include this header iio stream
12:50 - then these string is automatically has
12:53 - been included in your program right but
12:56 - better to explicitly better to include
12:58 - the
13:00 - explicitly because maybe sometimes you
13:02 - will get any undesired result if you are
13:06 - using the member function or something
13:08 - with string so better to include this
13:10 - string header right okay now how to
13:14 - access element or you can say particular
13:18 - character from a string how to access a
13:20 - string using at as well as using
13:21 - subscript you can access let me show you
13:24 - this thing so if suppose in St str1 I
13:27 - have this and you want want to access
13:29 - any particular character so St str1
13:32 - using subscript you can access like zero
13:35 - if you want to access then it will give
13:37 - you
13:39 - J C right any index you can access like
13:44 - if you want to access at
13:46 - 7 at 7 I think we have k or a h so it
13:51 - will give you H or with ADD
13:54 - function also we can access
13:59 - at and there I want to same seven so
14:03 - both will give H and
14:07 - H let's put here
14:10 - endl but main difference between this is
14:13 - what H and H this will not give any
14:16 - bound checking if I access a
14:20 - 17 let's comment out this let's run this
14:23 - I ideally it should through an error or
14:26 - exception but it is not printing
14:27 - anything and no error and ER and and all
14:30 - so this kind of thing is not checking
14:32 - any bound bound checking is not there
14:35 - but if you're using add then here it
14:37 - will do bound checking if I comment out
14:41 - this thing and if I access 17 using this
14:44 - add function then see it will give
14:47 - terminate called after throwing an
14:49 - instance of out of range exception right
14:51 - so this is you can see advantage of
14:53 - using at bound checking is there with
14:55 - this using four uh range Bas for Loop
14:58 - also we can print like if you want to
15:00 - use that range based for Loop
15:03 - then obviously we have
15:06 - what car data type because it's nothing
15:09 - but a character array right car C and
15:14 - from Str
15:17 - str1 and then see out just
15:22 - C and it will print the entire string
15:25 - Jen kri and in new line if you want want
15:29 - to print any every single character then
15:32 - then you can just put endl and after
15:33 - every printing of every character there
15:35 - would be a next will be printed in new
15:38 - line right but what if if I take here
15:42 - int what you think what it will print
15:44 - just pause the video and write down
15:46 - comment section what it should print
15:48 - here dat type is int C and Str str1
15:51 - let's run this and I'll show you what it
15:52 - will
15:53 - print see it is
15:55 - printing SK Sky value of the characters
15:58 - because is we are taking the C as int so
16:02 - it will convert J in SK value and that
16:05 - would be printed right so now uh let's
16:08 - discuss those concatenation and this
16:10 - thing with the these strings so if you
16:14 - want to concatenate two string like
16:16 - Jenny katri this is first name this is
16:18 - last name and I want to con concatenate
16:20 - these two strings so simple we can do
16:22 - what see out Str str1 + Str str2
16:29 - as simple as
16:30 - that see it will give you
16:33 - jatri see now no we don't you don't have
16:36 - to use St strc those functions and all
16:39 - so easily I can write down this thing we
16:42 - can use these binary operator with
16:44 - string so this is beauty of C++ strings
16:46 - right we cannot do this thing with C
16:49 - style string if I write here rather than
16:51 - this suppose if you want to do
16:54 - Jenny and let's take here
17:00 - K it will give C plus this expression
17:03 - must have integral or unscoped in means
17:06 - this plus is now adding as though for
17:08 - addition so it is expecting here integer
17:11 - or enum we cannot concatenate we cannot
17:14 - add these two string with plus like we
17:17 - cannot concatenate this C style string
17:19 - with plus right so this will give you
17:24 - error but this is this is fine see out
17:29 - if I can C like Str
17:31 - str1 plus I want a space in between J
17:35 - katri so that is fine Str
17:39 - str2 so this is obviously a string
17:42 - leral and if I want to add here plus one
17:45 - more
17:47 - thing
17:53 - lambar see it is printing Jenny space k
17:58 - there's no no space between kri and Lama
18:00 - and Lama because you haven't given any
18:02 - space here right so you can concatenate
18:05 - a C++
18:07 - object right or C++ string with C style
18:11 - string literal this is fine but you
18:13 - cannot concatenate two c style string
18:16 - Lal with
18:17 - plus okay okay so this is your assign
18:20 - one assignment is for you in Str str1
18:23 - just take this thing
18:26 - 10 and in Str Str 2 just
18:30 - take any integer five and you have to do
18:33 - S str1 Plus Str str2 what it should give
18:36 - let me know in comment section and if
18:38 - you want to find out length of a string
18:40 - then we have here we have a length
18:42 - function that we can use so if you want
18:45 - to find out length C out length of
18:49 - suppose St str1 is just use this uh
18:54 - length
18:55 - function that's it
18:58 - and the length is five so it should
19:01 - print
19:08 - five see it is printing five length of
19:11 - Str str1 is five or rather than length
19:15 - uh sometimes we can use size as well
19:17 - this will also work fine now if you want
19:20 - to compare two string then you can use
19:22 - less than or greater than this thing
19:24 - like see out s str1 equal to equal to St
19:29 - R2 I just want to print this thing so
19:33 - obviously you have to put this in
19:35 - bracket and let's see what it will print
19:37 - s str1 Str str2 equal to equal to no so
19:40 - what it should
19:42 - print okay let's just comment out this
19:46 - and
19:50 - this see Zero Zero means like
19:53 - false these are not equal and if I write
19:57 - here
19:58 - gen s str1 S2 both are gen so let's run
20:02 - this and see what it will
20:03 - print one true right false or true it is
20:08 - going
20:08 - to give you and same less than equal to
20:12 - those also we can use like Str str1 less
20:15 - than Str
20:17 - str2 so what does this mean Str str1 Str
20:24 - str2 sorry less than or greater than
20:29 - zero one this is true and this is
20:34 - false because these are equal so if I
20:37 - take here
20:43 - K let's comment out this
20:46 - line so you have to use this comparison
20:48 - operator less than greater than less
20:50 - than equal to greater than equal to this
20:51 - thing one it's true yes Str str1 is less
20:54 - than Str str2 these are comparing based
20:56 - on these SK values of the character SK
20:58 - value of J SK value of K SK value of J
21:00 - is obviously less than SK value of
21:02 - K the first character is first is to be
21:05 - compared right and yeah it will give you
21:08 - true yes right so use these less than
21:10 - greater than and all these operators
21:13 - this is your assignment right but same
21:15 - we can compare only two these string
21:17 - object C++ style string you cannot
21:19 - compare those C style string L like here
21:22 - here you writing those double quotes
21:24 - Jenny and here you writing double quotes
21:26 - kri that will give you error but you can
21:28 - comp Str str1 one this C++ St string and
21:32 - one liter like s str1 is Jenny and this
21:35 - is capital J in St one we have small
21:39 - Jenny and here we have capital J and and
21:41 - and Y so what do you think what it will
21:43 - print let's run
21:46 - this
21:50 - okay it is printing zero false
21:54 - because small J SK value is more than
21:57 - capital J SK value
21:59 - that is why it is zero means false it is
22:01 - not less than so try out these different
22:03 - different things so there are many more
22:04 - member function also that we can use
22:06 - with string object those function we'll
22:08 - see some of those function we'll see
22:09 - next video right so I hope basics of C++
22:13 - strings are clear to you guys right now
22:15 - in the next video we'll see some more uh
22:17 - member functions we can use with strings
22:19 - or string objects right so now I'll see
22:21 - you in the next video byebye take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning C++ programming language we are discussing strings in C++ uh I have told you in previous video like C++ provide two types of string representation one is C style character strings and second one is C++ strings so C style strings we have discussed in previous video right now in this video we'll see what are C++ strings in C++ you know new type of strings are introduced as like this STD this name space I mean this scope resolution operator and string because in C++ string is a class as a class they have defined they have introduced string right so if this is a class we can create object of this type of class right so we have a proper you can say as a data type in C++ because in C string is not a data type we use string as a character array right it's not a data type you you cannot write like this like St Str and just create an string type of variable in C in C this is invalid in see what we can see we can write down character array like care and like s Str there you can use the length size of the string this is valid so this is character you can see this is C style string but this is not valid but this we can use in C++ because in C++ new type of strings are introduced like this string is a class here which is defined in this header file which is string with so many functionalities and member functions are there so we can use so many functionalities with string right so strings are basically we can say objects which are represented as sequence of characters in C++ right so strings basically can are objects in C++ that represents SE of characters right so in string we can store text we can store obviously numbers also any type of data information we can store using string and one advantage is what you don't have to specify the size at compile time these are not a fixed size right this is drawback in C style string but if you use C++ style string this is valid in C++ this is how we can define a string right so here this Str Str is you can say it's an object because string is a class in C++ right and to use string and all the member function of string we use this header like hash include string you have to include this header although without including this also it will work fine if you include that iio stream header because automatically with this uh this would be included included but sometimes it will not give the proper you know result it depends it is implementation dependent so better to include whenever you are using Vector better to to include especially Vector header file when you're using string better to include separately string header file when you're using pair better to include separately utility uh header right and in C++ these strings C when in C we use to concatenate two string then we use S strc this function right but in C++ if you are going to con concatenate two string you can use this plus operator right so plus can also be used for addition as well as for concatenation of two strings in C++ right so we can use these operators like Plus or for comparison we can use double equal to for equality not equal to less than greater than less than equal to greater than greater than equal to these operators we can use with strings so this is going to make your you know our life easy and simpler so we can say we can write down this code with so much Simplicity rather than using those function St Str CMP St Str C just use plus just use these symbols right so the code would be more you know readable and easy to write right so we can say these C+ plus uh strings provide many advantages over C style string like we I told you one thing that is dynamic size you don't have to provide fixed size right and this binary operator supports in C++ they provide but you cannot use these type of operator with the c style string right as well as many member function are there which we can use on strings so all these things I'll show you practically right let's see now with this thing with the help of program so just create a new file and include those headers now how to uh Define or declare a string just use this string this keyword and the name of the string St Str that's it no need to specify the size and all and this will work fine so string is basically more precisely you say then Str Str is an object of Class Type string right or we can initialize it something like this like St Str equal to I have gen in C style string we cannot initialize this thing right if you use like character array then array name is equal to this that is invalid that we have discussed in previous video right so this is fine now if you want to print then simply St Str and let me show you see you will get Jenny right or we can use this type of bracket also this round bracket and it will work fine see Jenny would be printed right so one more thing we can do like Str Str St str1 or let's take this Str str1 this is Str str2 and here also we can specify like this St str2 kri without equal to also it will work fine or you can write down here equal to as well right now this will this is Str str1 so let's print both Str str1 and andl St Str 2 let's run this and it will print Jenny and kri two string right so without equal to or this also it will work fine now with another string like I have Str str3 and I want to initialize with Str str2 so this is also fine rather than Str str2 now if you print Str str3 then Str str3 is also initialized with Str str2 in Str str2 we have katri so katri would be there in Str str3 as well so we putting just one and three these strings not two so it will print Jen and kri okay let's run this and I'll show you see right so with another string we can initialize a string and if in a string you want to there is a string in which only one character or single thing is repeated so that is also uh that thing we can also achieve with this like 10 times which character a is repeated in this string right and I want to print C out this Str str4 in a new line so let's put here ndl let's run this and see okay it is printing only a so okay in this case there would be these type of round bracket not curly bracket let's run this and see what output you'll get see a is printting printed 10 times right so make sure you I have to take care of this thing one more thing I want to show you like Str Str 5 so we have these two things these two type of definition of the string or you can say initialization of the string string five I'm going to initialize with Str str1 and I'm just providing three here and in Str Str 6 I want to provide a proper string I'm writing here as a string literal I'm using this is a C string literal right right and here also I'm providing three so what you think what output you will get Str str5 and Str Str 6 let's run this and see okay now need to select this see first is NY and next is p r so in St str1 in string we have Jenny right and three this three means from which position the string to be copied in Str str5 right from position third 0 1 2 3 so this NY would be in this Str Str 5 in this case we are providing C string literal so here if you provide this number it means from starting from 0 to this is what uh the length of the string so 1 2 3 till a p a would be there right p a would be initialized in this St Str 6 so you need to take care these two types of initialization right now let's concatenate or let's take input from user like I want to ask uh from user the user name so in that case what you will do let's comment out all all these things and uh I have taken a R1 a string and from user I want to take input enter your name and see in in St Str one sorry Str Str 1 because this is our string the name is Str str1 and I just want to print again St str1 that's it let's run this with scene obviously we can take input from user enter your name so Jenny yeah Jenny and Jenny two times sorry one is taking input and one time it is printing right so if you remove the cndl that will work fine but the thing is again run this and I'm I'm entering my name Jenny katri in that case it is taking only Jenny this thing also we have discussed in previous video no kri because this extraction operator this extraction operator will stop taking input as soon as it will find any white space or new line so after JY I have given a space so if it sees any space then it will stop taking input so it will take input jny only and it will print jny only so what if I want to take a complete line as an input with space Also my complete full name jti katri lamba Jan's lectures hi welcome this kind of thing so for that we have a function that is g line function that we can use so uh that function how we can use with C in so rather than C in here what is the function get line the first argument of this is C in right and the next is this variable where you want to obviously the store the string the string variable string object s Str one and now let's print Str str1 so let's run this and we will take complete line as an input like this line L hi welcome right as soon as you will print any you know you will enter new line or whenever you will print enter it means we are pressing we're indicating that indicating for a new line right so as soon as it get line will find the new line then it will it is going to stop taking input right so this is how we can use this getline function and this getline function is uh defined in this string header file so let's comment out this line this also this time also it will work fine see right why so because automatically if you include this header iio stream then these string is automatically has been included in your program right but better to explicitly better to include the explicitly because maybe sometimes you will get any undesired result if you are using the member function or something with string so better to include this string header right okay now how to access element or you can say particular character from a string how to access a string using at as well as using subscript you can access let me show you this thing so if suppose in St str1 I have this and you want want to access any particular character so St str1 using subscript you can access like zero if you want to access then it will give you J C right any index you can access like if you want to access at 7 at 7 I think we have k or a h so it will give you H or with ADD function also we can access at and there I want to same seven so both will give H and H let's put here endl but main difference between this is what H and H this will not give any bound checking if I access a 17 let's comment out this let's run this I ideally it should through an error or exception but it is not printing anything and no error and ER and and all so this kind of thing is not checking any bound bound checking is not there but if you're using add then here it will do bound checking if I comment out this thing and if I access 17 using this add function then see it will give terminate called after throwing an instance of out of range exception right so this is you can see advantage of using at bound checking is there with this using four uh range Bas for Loop also we can print like if you want to use that range based for Loop then obviously we have what car data type because it's nothing but a character array right car C and from Str str1 and then see out just C and it will print the entire string Jen kri and in new line if you want want to print any every single character then then you can just put endl and after every printing of every character there would be a next will be printed in new line right but what if if I take here int what you think what it will print just pause the video and write down comment section what it should print here dat type is int C and Str str1 let's run this and I'll show you what it will print see it is printing SK Sky value of the characters because is we are taking the C as int so it will convert J in SK value and that would be printed right so now uh let's discuss those concatenation and this thing with the these strings so if you want to concatenate two string like Jenny katri this is first name this is last name and I want to con concatenate these two strings so simple we can do what see out Str str1 + Str str2 as simple as that see it will give you jatri see now no we don't you don't have to use St strc those functions and all so easily I can write down this thing we can use these binary operator with string so this is beauty of C++ strings right we cannot do this thing with C style string if I write here rather than this suppose if you want to do Jenny and let's take here K it will give C plus this expression must have integral or unscoped in means this plus is now adding as though for addition so it is expecting here integer or enum we cannot concatenate we cannot add these two string with plus like we cannot concatenate this C style string with plus right so this will give you error but this is this is fine see out if I can C like Str str1 plus I want a space in between J katri so that is fine Str str2 so this is obviously a string leral and if I want to add here plus one more thing lambar see it is printing Jenny space k there's no no space between kri and Lama and Lama because you haven't given any space here right so you can concatenate a C++ object right or C++ string with C style string literal this is fine but you cannot concatenate two c style string Lal with plus okay okay so this is your assign one assignment is for you in Str str1 just take this thing 10 and in Str Str 2 just take any integer five and you have to do S str1 Plus Str str2 what it should give let me know in comment section and if you want to find out length of a string then we have here we have a length function that we can use so if you want to find out length C out length of suppose St str1 is just use this uh length function that's it and the length is five so it should print five see it is printing five length of Str str1 is five or rather than length uh sometimes we can use size as well this will also work fine now if you want to compare two string then you can use less than or greater than this thing like see out s str1 equal to equal to St R2 I just want to print this thing so obviously you have to put this in bracket and let's see what it will print s str1 Str str2 equal to equal to no so what it should print okay let's just comment out this and this see Zero Zero means like false these are not equal and if I write here gen s str1 S2 both are gen so let's run this and see what it will print one true right false or true it is going to give you and same less than equal to those also we can use like Str str1 less than Str str2 so what does this mean Str str1 Str str2 sorry less than or greater than zero one this is true and this is false because these are equal so if I take here K let's comment out this line so you have to use this comparison operator less than greater than less than equal to greater than equal to this thing one it's true yes Str str1 is less than Str str2 these are comparing based on these SK values of the character SK value of J SK value of K SK value of J is obviously less than SK value of K the first character is first is to be compared right and yeah it will give you true yes right so use these less than greater than and all these operators this is your assignment right but same we can compare only two these string object C++ style string you cannot compare those C style string L like here here you writing those double quotes Jenny and here you writing double quotes kri that will give you error but you can comp Str str1 one this C++ St string and one liter like s str1 is Jenny and this is capital J in St one we have small Jenny and here we have capital J and and and Y so what do you think what it will print let's run this okay it is printing zero false because small J SK value is more than capital J SK value that is why it is zero means false it is not less than so try out these different different things so there are many more member function also that we can use with string object those function we'll see some of those function we'll see next video right so I hope basics of C++ strings are clear to you guys right now in the next video we'll see some more uh member functions we can use with strings or string objects right so now I'll see you in the next video byebye take care
