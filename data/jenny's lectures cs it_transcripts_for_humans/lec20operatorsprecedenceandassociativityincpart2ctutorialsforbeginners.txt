With timestamps:

00:01 - so in the series of learning c plus plus
00:02 - programming language in the previous
00:03 - video we have discussed operator
00:05 - precedence and associativity this video
00:07 - you can consider as second part of
00:09 - cooperative precedence and associativity
00:11 - we will discuss
00:12 - three or four you know examples
00:14 - especially on the operators increment
00:15 - and decrement operators
00:17 - generally students were confused in
00:19 - these kind of questions when they get
00:20 - you know in one expression they get more
00:22 - than one increment and decrement
00:24 - operator pre and post right how to solve
00:25 - those kind of questions right and also
00:28 - i'll tell you some important points some
00:30 - you can say hidden facts about operator
00:33 - precedence and associativity and how
00:35 - actually if you have an expression then
00:37 - how actually that expression would be
00:39 - evaluated
00:40 - behind the scene process we will see
00:43 - right and you will rarely find these
00:45 - kind of effects anywhere so this video
00:48 - is going to be really you know
00:50 - beneficial for you guys if you want to
00:52 - be a good programmer you want to learn c
00:54 - plus plus deeply
00:55 - if you are just learning this course if
00:57 - you are just watching this video just
00:58 - you know
00:59 - to pass the semester then maybe you will
01:01 - not find this so much helpful but if you
01:04 - want some deep down information or deep
01:07 - down facts or knowledge on c plus
01:09 - language and definitely this video is
01:12 - for you guys
01:13 - right so you see with the help of one or
01:16 - two examples
01:17 - right we'll write on that
01:20 - code that program
01:21 - right
01:22 - we'll see the output here then we'll run
01:24 - that same code on my laptop and will see
01:26 - the output maybe you get different
01:28 - results also and why you get different
01:30 - results the reason behind that also
01:32 - we'll discuss in this video right now
01:34 - before that just want to tell you one
01:35 - thing say geeksforgeeks has come up with
01:37 - a fun filled event for you guys that you
01:40 - cannot miss out
01:41 - cold geek olympics all you have to do is
01:44 - you just go to the link in the
01:45 - description box of this video register
01:46 - for the event free of cost and after
01:48 - resisting you can get access to the
01:51 - calendar where you can see all the
01:52 - upcoming events and activities and see
01:54 - they have something new every day from
01:57 - you know 1st to 31st of july on their
01:59 - website so do check out their website
02:01 - every day
02:02 - where you can get you know a chance to
02:04 - win some rewards and it will be a great
02:06 - learning experience for you guys so let
02:08 - me just brief you on an event through
02:10 - geek olympics see there are so many
02:12 - contests that happens every now and then
02:15 - for the experienced quarters but what
02:17 - about those who have just started their
02:19 - coding journey well don't worry
02:21 - geeks4geeks has come up with such an
02:22 - opportunity for beginners just to
02:25 - sharpen their skills and get rewarded
02:27 - for the
02:28 - same
02:29 - there would be eight beginner level dsa
02:32 - questions
02:33 - for you guys and the time limit for this
02:35 - challenge would be 60 minutes the date
02:37 - is 16th of july from 6 pm to 7 p.m and
02:42 - the language supported for these dsa
02:43 - problems are c plus plus java and python
02:45 - plus one more thing there is five
02:47 - percent penalty for each wrong
02:48 - submission so better
02:50 - to go through that compile and test
02:52 - against their sample test cases before
02:55 - submission before submission of your
02:57 - code
02:58 - and all the submission will go through a
03:00 - plagiarism detector
03:02 - any case of code plagiarism will reduce
03:04 - the marks to zero of the concerned
03:07 - participant
03:08 - so all the relevant links and details
03:10 - you will find in the description box of
03:11 - this video you can go and check out now
03:13 - let's see see i have told you what is
03:15 - operator precedence and associativity in
03:17 - the precipitation in the previous video
03:19 - this is the chart where you can see the
03:21 - precedence of operators associativity of
03:23 - operators right
03:24 - now let me just write down one question
03:26 - for you guys
03:28 - okay this is your question we have x is
03:30 - equal to 3 and y is equal to x plus plus
03:33 - plus plus plus x
03:35 - so this is what post increment this is
03:37 - pre increment and we have this plus
03:39 - arithmetic plus like binary plus
03:40 - operator right so in this expression we
03:43 - have how many operators 1 2 3 and four
03:45 - now check the precedence see how you
03:47 - will solve this thing obviously you will
03:49 - keep in mind that precedence and
03:51 - associativity chart right according to
03:53 - the rule so now
03:54 - see uh post fix
03:57 - these postfix increment and decrement
03:59 - are having higher precedence than prefix
04:01 - right and then this and this so first of
04:03 - all this would be solved so what
04:06 - is the
04:07 - answer of this x plus plus original
04:09 - value of x would be used here
04:11 - and after that the value would be
04:13 - incremented
04:15 - right
04:16 - i hope you know the working of these
04:17 - operators that we have already discussed
04:19 - so now
04:20 - x would be 3 would be used in this
04:23 - expression 3 value and now x becomes 4 x
04:26 - plus plus after using the value it would
04:28 - be incremented
04:30 - now
04:31 - pre
04:32 - prefix
04:33 - increment this would be executed prefix
04:36 - means now x value is 4 so first value
04:39 - would be incremented and that
04:40 - incremented value would be used in that
04:42 - expression so it becomes what 4 becomes
04:45 - 5
04:47 - now plus operator would be executed
04:49 - because it is having higher percent
04:51 - present then then this equal to operator
04:54 - so 5 plus 3 is 8 and y becomes 8
04:57 - and x becomes what
04:59 - 5
05:00 - here x becomes 5. so this would be the
05:02 - answer x is 5 and y is
05:05 - 8
05:05 - but see
05:07 - actually
05:08 - there is no concept of precedence and
05:11 - associativity while
05:13 - running the program
05:15 - this precedence and associativity in c
05:17 - plus plus is a concept as you can see
05:19 - it's a compile time concept only compile
05:22 - time concept
05:24 - but it is independent of the order of
05:27 - evaluation of the expression order of
05:28 - evaluation which is what a runtime
05:30 - concept now what is this order of
05:32 - evaluation
05:34 - in which order
05:36 - if a large expression is there in which
05:38 - order
05:39 - that expression would be evaluated
05:42 - that is completely dependent on the
05:44 - compiler this fact is very important
05:46 - completely dependent on the compiler
05:48 - maybe one expression
05:51 - give some result on your machine that
05:54 - same expression give another result on
05:56 - different machine
05:57 - if i run a suppose i am taking a program
06:00 - here i will run that maybe in my machine
06:02 - it is showing some different result and
06:04 - the same code you will run on your
06:05 - machine maybe that will
06:08 - you know
06:09 - give you some different result
06:12 - so this concept precedence and
06:13 - associativity is completely a compile
06:15 - time concept not a runtime concept it is
06:18 - independent of that order of evaluation
06:21 - right in which order the expression the
06:22 - sub expression or the you can say the
06:25 - you know those also the arguments of a
06:27 - function is to be executed
06:29 - right
06:30 - that is order of evaluation
06:32 - let's take one example
06:34 - if i write something like this a then
06:36 - plus
06:37 - b then plus
06:39 - c
06:41 - what would be evaluated first
06:43 - this because plus is having
06:45 - associativity left to right
06:47 - this
06:48 - then
06:49 - plus c
06:50 - right
06:52 - but now let's see
06:54 - this
06:55 - function goal
06:56 - this may be evaluated maybe in the last
06:59 - or first or in between a and b
07:04 - it terrible depends on the compiler at
07:06 - compiler at run time may be in your
07:08 - machine it would it would be evaluated
07:10 - at the last of this maybe in my machine
07:12 - it would be evaluated at the first
07:14 - before this
07:16 - right
07:17 - so it is completely dependent on the
07:19 - compiler on the runtime evaluation
07:22 - right
07:23 - so they have
07:25 - defined some undefined behavior
07:27 - especially in case of these operators
07:30 - increment and decrement operators
07:32 - see if i write something like this then
07:35 - this is this comes under the category of
07:37 - undefined behavior actually
07:43 - it is a bad code bad program
07:46 - it is not recommended to use more than
07:48 - one increment and decrement operators
07:51 - in one expression it is not allowed it
07:53 - will show some undefined behavior maybe
07:55 - in my machine it it gives some another
07:57 - result may be in your machine it gives
07:58 - someone another result
08:01 - plus using of these arithmetic operators
08:04 - with these increment and decrement
08:06 - operators post fixing prefix
08:08 - this is also
08:10 - this will also give some undefined
08:11 - behavior so it is not allowed
08:14 - you should avoid these kind of codes
08:17 - yeah this is allowed like y is equal to
08:19 - x plus plus
08:21 - one
08:22 - you can use more than one
08:25 - will lead to undefined behavior
08:27 - right
08:29 - this is undefined behavior if i write
08:31 - something like this x plus plus plus 2
08:33 - this will also give some undefined
08:35 - behavior
08:36 - if i write this this is also this also
08:38 - comes in under the category of undefined
08:40 - behavior
08:42 - right so technically if someone asks who
08:45 - these kind of questions in one
08:46 - expression they have multiple plus plus
08:48 - minus minus operators technically the
08:49 - answer would be it will show undefined
08:51 - behavior no answer would be there
08:54 - but if you want to run like if at
08:57 - compile time you want to apply that
08:58 - precedence and associativity kind of
09:00 - thing
09:02 - into these expression then how you can
09:03 - evaluate this let's take a different
09:05 - example
09:07 - if i am taking this expression then this
09:09 - will also
09:10 - the answer would be it will show
09:11 - undefined behavior but if you want to
09:13 - execute this
09:14 - then
09:15 - if you want to apply that precedence and
09:17 - associative associativity kind of thing
09:18 - then how you can solve this
09:20 - if you want to print then c out x and y
09:23 - and what it will give
09:25 - here we have this is postfix and this is
09:28 - prefix expression so postfix are having
09:30 - higher precedence and associativity is
09:31 - left to right so first of all this would
09:33 - be executed x plus plus means original
09:35 - value 1 would be used then x becomes 2
09:38 - then y plus plus 2 would be used after
09:40 - that y becomes 3
09:42 - now
09:44 - this value sorry this expression prefix
09:46 - but prefix are having right to left
09:48 - associativity so means this kind of
09:51 - thing so this would be executed first
09:52 - plus plus y now y is 3
09:55 - so plus plus pre means first of all this
09:57 - would be incremented and incremented
09:58 - value used
10:00 - 4
10:01 - right
10:02 - then plus plus x it becomes 3 means 3
10:06 - incremented first and that would be used
10:08 - right
10:09 - now x and y now which value would be
10:11 - used for x and y
10:14 - if i
10:15 - excess like x is 3
10:17 - and y is 4 then what would be the output
10:19 - here i think 17
10:24 - right
10:25 - and if i used like x after
10:28 - if we move something like this
10:30 - right token wise
10:33 - then
10:34 - after x plus plus y plus plus x value
10:37 - becomes 2 so here we use 2 and y becomes
10:40 - 3 so we use 3
10:42 - then these will be executed now in this
10:44 - case value would be 50
10:48 - so it will give like x is equal to 3 y
10:50 - is equal to 4 and
10:52 - sorry x is equal to
10:54 - this would be z
10:56 - right
10:58 - x y is equal to 4 z is equal to 15
11:02 - or maybe 17
11:03 - so that's why we don't know where
11:06 - you know at which point of time this x
11:09 - value would be used in this expression
11:12 - right we can't say same we are using x
11:15 - plus plus and x we are modifying this
11:17 - value same we are accessing the value
11:18 - again here so maybe original value would
11:20 - be used or after modification value
11:22 - would be accessed here because we can't
11:24 - say
11:24 - it depends on the compiler
11:26 - the order of evaluation of this
11:28 - expression
11:29 - right
11:30 - that's why we show we say that it will
11:32 - show some undefined behavior
11:34 - right
11:35 - for the same
11:36 - value
11:38 - we are modifying that value we are
11:40 - accessing that value again so which
11:42 - value would be used here we can't say
11:44 - maybe the same expression one time will
11:46 - give 17
11:47 - if same expression if i run second time
11:50 - it will give 15 we can't say
11:52 - right so technically it is a bad code
11:56 - not allowed it will show undefined
11:58 - behavior
11:59 - right same thing let us take a second
12:02 - example
12:02 - [Music]
12:05 - or let me just show you that example on
12:08 - my laptop then you will get it better so
12:10 - the important point what i you know
12:14 - want to tell you in this video through
12:15 - this video is the precedence and
12:17 - associativity are just a compile time
12:19 - concept it is not related to the order
12:21 - of actual evaluation while run time
12:24 - so see
12:26 - this is the code we have discussed x 3 y
12:28 - then x plus plus plus plus plus x and x
12:31 - and y we were printing so let's run this
12:34 - and show you what output you will get
12:36 - here see
12:40 - x 5 and y is equal to 8 right now let me
12:43 - just show you one more example
12:47 - this kind of example c
12:55 - let me just comment this out and we will
12:57 - discuss one
13:04 - see y is equal to 3 z is equal to in
13:07 - bracket i am using y minus minus
13:10 - plus in bracket again i am using y is
13:13 - equal to 10
13:15 - what would be the output of this
13:16 - expression see
13:18 - in brackets are having highest
13:20 - precedence so those would be evaluated
13:22 - first but two brackets means
13:23 - associativity associativity is
13:26 - left to right
13:27 - right
13:28 - now
13:29 - first of all this expression would be
13:30 - evaluated like y minus minus
13:33 - y minus minus means
13:35 - it is post decrement so original value
13:37 - of y would be used and then it would be
13:39 - decremented original value is 3 so 3
13:41 - would be used here 3 plus now in bracket
13:43 - we have y equal to 10 assignment
13:45 - operator means what right hand side
13:47 - value would be assigned to y so y
13:48 - becomes 10
13:50 - so 3 plus 10 now
13:53 - the result would be 13. so let me just
13:56 - run this and show you the result see
14:00 - okay good we are getting 13.
14:03 - same if uh you write here
14:06 - y plus plus rather than minus minus
14:09 - there will be no difference
14:11 - because it is again post so original
14:12 - value would be used that is 3 and after
14:14 - that y becomes 4 and for the next y is
14:17 - 10 so 10 becomes 3 again it will give
14:20 - you
14:20 - 13. so it is giving you 13
14:23 - but
14:24 - see the twist is if i use minus minus y
14:30 - what value
14:31 - should be there
14:34 - in this
14:35 - expression the output
14:38 - you will say minus minus y means
14:41 - pre-decremented
14:42 - so it becomes 2
14:44 - so 2 value would be used 2 then again
14:47 - for next bracket y is equal to 10. so 10
14:49 - plus 2 it should be 12 right but the
14:51 - output is not 12
14:54 - see
14:55 - it is 20.
14:59 - why it is 20
15:01 - see
15:03 - one more rule about this
15:05 - pre
15:06 - increment and pre-decrement operator is
15:08 - what
15:09 - obviously the value would be modified
15:12 - first minus minus y means first the
15:14 - value would modified then it would be
15:15 - used in the expression but
15:18 - after the completion of that expression
15:24 - this point is important after the
15:26 - completion of that expression
15:29 - right
15:30 - means minus minus 5 becomes 2 but we
15:32 - cannot use 2 here it would not be used 2
15:35 - because
15:36 - still in the expression we have plus y
15:38 - is equal to 10 still there is no
15:39 - semicolon so we cannot use this two
15:41 - value
15:42 - right you have to hold this
15:45 - yeah y becomes two but you have to hold
15:47 - you cannot use this two now plus
15:50 - we have second
15:51 - bracket y is equal to ten
15:53 - so y becomes
15:55 - 10 here
15:56 - right
15:57 - after that semicolon means end of the
15:59 - expression
16:00 - now
16:01 - minus minus
16:02 - y you use the value here
16:06 - but at the last y becomes 10
16:09 - finally so that 10 value
16:12 - would be used here
16:15 - so now this output would be 20
16:18 - see
16:19 - same if i use here
16:22 - plus plus y
16:24 - then also you will get same output
16:26 - 20
16:28 - right if rather than this plus
16:31 - i am writing it into
16:36 - it is giving 100 10 and 10
16:39 - 100
16:41 - right
16:43 - but maybe you will say y becomes 10 then
16:46 - plus plus y it should be what
16:49 - again 11
16:51 - right plus plus y if after semicolon it
16:54 - is using the value then after semicolon
16:56 - at last y is 10 but then again plus plus
16:58 - y becomes 11. no again it would not be
17:02 - evaluated
17:04 - first time it would be evaluated
17:06 - then after semicolon whatever the value
17:07 - of y that would be used here right if
17:10 - minus minus y i
17:12 - write
17:14 - then also it will give same result like
17:15 - 100 10 and 10 right
17:19 - that's why we say like you know
17:21 - say on the same value on the y we are
17:24 - applying minus minus
17:26 - operator decrement operator plus we are
17:29 - using some arithmetic also in the same
17:32 - we are again why we are modifying the
17:34 - value y is equal to 10
17:35 - that's why we say it shows some
17:37 - undefined behavior right
17:39 - so better to avoid these kind of
17:41 - expression
17:43 - single increment on decrement you should
17:46 - use
17:47 - like z is equal to minus minus y that is
17:49 - fine no arithmetic no more than one
17:51 - increment and decrement in the same
17:52 - expression no other operator with that
17:56 - on the same variable
17:57 - right now this is assignment for you
17:59 - guys
18:00 - one two three four five these five
18:03 - expressions you have to validate first
18:05 - of all you have to run this try run this
18:07 - whatever you are getting without running
18:08 - on your machine then running on your
18:10 - machine what they are getting you have
18:11 - to comment
18:12 - these answer right
18:14 - maybe
18:15 - now
18:16 - if every student will comment like on
18:18 - your machine what out they are getting
18:20 - and when you dry run what output you are
18:21 - getting two things right then we can
18:24 - compare like on different different
18:26 - machine maybe we are getting different
18:27 - different outputs so then you will get
18:29 - the order of evaluation
18:31 - it totally depends on pilot
18:33 - right in which order
18:35 - the compiler will execute the expression
18:38 - right
18:40 - compiler will not follow the precedence
18:42 - and associativity type of things there
18:44 - is no concept of we can say there is no
18:46 - concept of precedence and associativity
18:48 - in c plus one
18:49 - right it is just a compile time concept
18:51 - not a runtime concept
18:53 - right
18:54 - so i hope this is clear to you guys yeah
18:56 - we have some sequencing rules so you can
18:58 - visit this website cpp reference this is
19:01 - i think one of the best website to refer
19:03 - for c plus reference website right
19:06 - here you can see
19:07 - see what is order of evaluation the
19:10 - rules about precedence and associativity
19:13 - those facts which generally you know you
19:16 - don't know
19:17 - and
19:18 - your teacher also you know generally
19:20 - don't tell you these kind of effects so
19:24 - you must visit this website
19:26 - through this section what is order of
19:28 - evaluation what are the sequencing rule
19:32 - what is this evaluation of the
19:33 - expression the parts and everything then
19:36 - you will get it better right all the
19:38 - points about this this particular you
19:41 - know topic operator precedence and
19:43 - associativity
19:44 - so nice in the next video till then bye
19:46 - bye take care

Cleaned transcript:

so in the series of learning c plus plus programming language in the previous video we have discussed operator precedence and associativity this video you can consider as second part of cooperative precedence and associativity we will discuss three or four you know examples especially on the operators increment and decrement operators generally students were confused in these kind of questions when they get you know in one expression they get more than one increment and decrement operator pre and post right how to solve those kind of questions right and also i'll tell you some important points some you can say hidden facts about operator precedence and associativity and how actually if you have an expression then how actually that expression would be evaluated behind the scene process we will see right and you will rarely find these kind of effects anywhere so this video is going to be really you know beneficial for you guys if you want to be a good programmer you want to learn c plus plus deeply if you are just learning this course if you are just watching this video just you know to pass the semester then maybe you will not find this so much helpful but if you want some deep down information or deep down facts or knowledge on c plus language and definitely this video is for you guys right so you see with the help of one or two examples right we'll write on that code that program right we'll see the output here then we'll run that same code on my laptop and will see the output maybe you get different results also and why you get different results the reason behind that also we'll discuss in this video right now before that just want to tell you one thing say geeksforgeeks has come up with a fun filled event for you guys that you cannot miss out cold geek olympics all you have to do is you just go to the link in the description box of this video register for the event free of cost and after resisting you can get access to the calendar where you can see all the upcoming events and activities and see they have something new every day from you know 1st to 31st of july on their website so do check out their website every day where you can get you know a chance to win some rewards and it will be a great learning experience for you guys so let me just brief you on an event through geek olympics see there are so many contests that happens every now and then for the experienced quarters but what about those who have just started their coding journey well don't worry geeks4geeks has come up with such an opportunity for beginners just to sharpen their skills and get rewarded for the same there would be eight beginner level dsa questions for you guys and the time limit for this challenge would be 60 minutes the date is 16th of july from 6 pm to 7 p.m and the language supported for these dsa problems are c plus plus java and python plus one more thing there is five percent penalty for each wrong submission so better to go through that compile and test against their sample test cases before submission before submission of your code and all the submission will go through a plagiarism detector any case of code plagiarism will reduce the marks to zero of the concerned participant so all the relevant links and details you will find in the description box of this video you can go and check out now let's see see i have told you what is operator precedence and associativity in the precipitation in the previous video this is the chart where you can see the precedence of operators associativity of operators right now let me just write down one question for you guys okay this is your question we have x is equal to 3 and y is equal to x plus plus plus plus plus x so this is what post increment this is pre increment and we have this plus arithmetic plus like binary plus operator right so in this expression we have how many operators 1 2 3 and four now check the precedence see how you will solve this thing obviously you will keep in mind that precedence and associativity chart right according to the rule so now see uh post fix these postfix increment and decrement are having higher precedence than prefix right and then this and this so first of all this would be solved so what is the answer of this x plus plus original value of x would be used here and after that the value would be incremented right i hope you know the working of these operators that we have already discussed so now x would be 3 would be used in this expression 3 value and now x becomes 4 x plus plus after using the value it would be incremented now pre prefix increment this would be executed prefix means now x value is 4 so first value would be incremented and that incremented value would be used in that expression so it becomes what 4 becomes 5 now plus operator would be executed because it is having higher percent present then then this equal to operator so 5 plus 3 is 8 and y becomes 8 and x becomes what 5 here x becomes 5. so this would be the answer x is 5 and y is 8 but see actually there is no concept of precedence and associativity while running the program this precedence and associativity in c plus plus is a concept as you can see it's a compile time concept only compile time concept but it is independent of the order of evaluation of the expression order of evaluation which is what a runtime concept now what is this order of evaluation in which order if a large expression is there in which order that expression would be evaluated that is completely dependent on the compiler this fact is very important completely dependent on the compiler maybe one expression give some result on your machine that same expression give another result on different machine if i run a suppose i am taking a program here i will run that maybe in my machine it is showing some different result and the same code you will run on your machine maybe that will you know give you some different result so this concept precedence and associativity is completely a compile time concept not a runtime concept it is independent of that order of evaluation right in which order the expression the sub expression or the you can say the you know those also the arguments of a function is to be executed right that is order of evaluation let's take one example if i write something like this a then plus b then plus c what would be evaluated first this because plus is having associativity left to right this then plus c right but now let's see this function goal this may be evaluated maybe in the last or first or in between a and b it terrible depends on the compiler at compiler at run time may be in your machine it would it would be evaluated at the last of this maybe in my machine it would be evaluated at the first before this right so it is completely dependent on the compiler on the runtime evaluation right so they have defined some undefined behavior especially in case of these operators increment and decrement operators see if i write something like this then this is this comes under the category of undefined behavior actually it is a bad code bad program it is not recommended to use more than one increment and decrement operators in one expression it is not allowed it will show some undefined behavior maybe in my machine it it gives some another result may be in your machine it gives someone another result plus using of these arithmetic operators with these increment and decrement operators post fixing prefix this is also this will also give some undefined behavior so it is not allowed you should avoid these kind of codes yeah this is allowed like y is equal to x plus plus one you can use more than one will lead to undefined behavior right this is undefined behavior if i write something like this x plus plus plus 2 this will also give some undefined behavior if i write this this is also this also comes in under the category of undefined behavior right so technically if someone asks who these kind of questions in one expression they have multiple plus plus minus minus operators technically the answer would be it will show undefined behavior no answer would be there but if you want to run like if at compile time you want to apply that precedence and associativity kind of thing into these expression then how you can evaluate this let's take a different example if i am taking this expression then this will also the answer would be it will show undefined behavior but if you want to execute this then if you want to apply that precedence and associative associativity kind of thing then how you can solve this if you want to print then c out x and y and what it will give here we have this is postfix and this is prefix expression so postfix are having higher precedence and associativity is left to right so first of all this would be executed x plus plus means original value 1 would be used then x becomes 2 then y plus plus 2 would be used after that y becomes 3 now this value sorry this expression prefix but prefix are having right to left associativity so means this kind of thing so this would be executed first plus plus y now y is 3 so plus plus pre means first of all this would be incremented and incremented value used 4 right then plus plus x it becomes 3 means 3 incremented first and that would be used right now x and y now which value would be used for x and y if i excess like x is 3 and y is 4 then what would be the output here i think 17 right and if i used like x after if we move something like this right token wise then after x plus plus y plus plus x value becomes 2 so here we use 2 and y becomes 3 so we use 3 then these will be executed now in this case value would be 50 so it will give like x is equal to 3 y is equal to 4 and sorry x is equal to this would be z right x y is equal to 4 z is equal to 15 or maybe 17 so that's why we don't know where you know at which point of time this x value would be used in this expression right we can't say same we are using x plus plus and x we are modifying this value same we are accessing the value again here so maybe original value would be used or after modification value would be accessed here because we can't say it depends on the compiler the order of evaluation of this expression right that's why we show we say that it will show some undefined behavior right for the same value we are modifying that value we are accessing that value again so which value would be used here we can't say maybe the same expression one time will give 17 if same expression if i run second time it will give 15 we can't say right so technically it is a bad code not allowed it will show undefined behavior right same thing let us take a second example or let me just show you that example on my laptop then you will get it better so the important point what i you know want to tell you in this video through this video is the precedence and associativity are just a compile time concept it is not related to the order of actual evaluation while run time so see this is the code we have discussed x 3 y then x plus plus plus plus plus x and x and y we were printing so let's run this and show you what output you will get here see x 5 and y is equal to 8 right now let me just show you one more example this kind of example c let me just comment this out and we will discuss one see y is equal to 3 z is equal to in bracket i am using y minus minus plus in bracket again i am using y is equal to 10 what would be the output of this expression see in brackets are having highest precedence so those would be evaluated first but two brackets means associativity associativity is left to right right now first of all this expression would be evaluated like y minus minus y minus minus means it is post decrement so original value of y would be used and then it would be decremented original value is 3 so 3 would be used here 3 plus now in bracket we have y equal to 10 assignment operator means what right hand side value would be assigned to y so y becomes 10 so 3 plus 10 now the result would be 13. so let me just run this and show you the result see okay good we are getting 13. same if uh you write here y plus plus rather than minus minus there will be no difference because it is again post so original value would be used that is 3 and after that y becomes 4 and for the next y is 10 so 10 becomes 3 again it will give you 13. so it is giving you 13 but see the twist is if i use minus minus y what value should be there in this expression the output you will say minus minus y means predecremented so it becomes 2 so 2 value would be used 2 then again for next bracket y is equal to 10. so 10 plus 2 it should be 12 right but the output is not 12 see it is 20. why it is 20 see one more rule about this pre increment and predecrement operator is what obviously the value would be modified first minus minus y means first the value would modified then it would be used in the expression but after the completion of that expression this point is important after the completion of that expression right means minus minus 5 becomes 2 but we cannot use 2 here it would not be used 2 because still in the expression we have plus y is equal to 10 still there is no semicolon so we cannot use this two value right you have to hold this yeah y becomes two but you have to hold you cannot use this two now plus we have second bracket y is equal to ten so y becomes 10 here right after that semicolon means end of the expression now minus minus y you use the value here but at the last y becomes 10 finally so that 10 value would be used here so now this output would be 20 see same if i use here plus plus y then also you will get same output 20 right if rather than this plus i am writing it into it is giving 100 10 and 10 100 right but maybe you will say y becomes 10 then plus plus y it should be what again 11 right plus plus y if after semicolon it is using the value then after semicolon at last y is 10 but then again plus plus y becomes 11. no again it would not be evaluated first time it would be evaluated then after semicolon whatever the value of y that would be used here right if minus minus y i write then also it will give same result like 100 10 and 10 right that's why we say like you know say on the same value on the y we are applying minus minus operator decrement operator plus we are using some arithmetic also in the same we are again why we are modifying the value y is equal to 10 that's why we say it shows some undefined behavior right so better to avoid these kind of expression single increment on decrement you should use like z is equal to minus minus y that is fine no arithmetic no more than one increment and decrement in the same expression no other operator with that on the same variable right now this is assignment for you guys one two three four five these five expressions you have to validate first of all you have to run this try run this whatever you are getting without running on your machine then running on your machine what they are getting you have to comment these answer right maybe now if every student will comment like on your machine what out they are getting and when you dry run what output you are getting two things right then we can compare like on different different machine maybe we are getting different different outputs so then you will get the order of evaluation it totally depends on pilot right in which order the compiler will execute the expression right compiler will not follow the precedence and associativity type of things there is no concept of we can say there is no concept of precedence and associativity in c plus one right it is just a compile time concept not a runtime concept right so i hope this is clear to you guys yeah we have some sequencing rules so you can visit this website cpp reference this is i think one of the best website to refer for c plus reference website right here you can see see what is order of evaluation the rules about precedence and associativity those facts which generally you know you don't know and your teacher also you know generally don't tell you these kind of effects so you must visit this website through this section what is order of evaluation what are the sequencing rule what is this evaluation of the expression the parts and everything then you will get it better right all the points about this this particular you know topic operator precedence and associativity so nice in the next video till then bye bye take care
