With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:03 - Python programming language till now we
00:05 - have discussed I think out of four oop
00:07 - features main features we have discussed
00:09 - three three features so three pillars we
00:12 - can say that is inheritance abstraction
00:13 - and encapsulation so the next one is
00:15 - polymorphism that thing we'll discuss in
00:17 - this video what is polymorphism
00:20 - right with the help of real life example
00:23 - I'll tell you and then different ways or
00:26 - you can say how you can Implement
00:27 - polymorphism in your program
00:30 - that we also will see one by one in
00:32 - later videos right
00:38 - right many
00:41 - more means phones you will get this type
00:45 - of definition everywhere like many forms
00:49 - now what does this mean many forms or
00:51 - multiple forms
00:53 - see let's take a real life example as a
00:55 - person if suppose uh consider me I'm a
00:58 - person
01:00 - so when I go to class in front of my
01:03 - students I behave as a teacher
01:07 - I teach them whatever subject I teach
01:10 - right in front of my family when I come
01:13 - back at home then
01:15 - I behave differently
01:17 - when I am with my friends I am going for
01:20 - a party I am with my friends then I
01:22 - behave differently
01:24 - right can you relate this
01:26 - so as a person I am only one Jenny but
01:30 - according to the situation I behave
01:33 - differently my behavior is Gonna Change
01:36 - in front of my students I am something
01:37 - I'm a different person with my family
01:40 - I'm different person with my friend
01:41 - maybe I have different person I behave
01:43 - differently
01:45 - hey
01:46 - so where I am what the situation is what
01:49 - the conditions are according to that I
01:52 - change is my behavior
01:54 - right so same like I am having multiple
01:58 - forms same you can relate this with you
02:00 - also maybe you with your friends are the
02:02 - friend you with your family are
02:03 - different you in office if you're
02:06 - working then you are different you in
02:07 - college as a student a different so
02:09 - you're also having multiple forms
02:11 - write many forms so this is nothing but
02:14 - polymorphism we are polymorphic or we
02:17 - can say simple some words in English
02:19 - like watch
02:23 - simply watch means that wristwatch also
02:26 - right watch means like uh in different
02:31 - way we can use like you are watching me
02:33 - right now through this video
02:36 - in this video right watching means bacon
02:39 - as well as so this word same word but
02:41 - having two different meaning
02:44 - these kind of we are having many words
02:46 - in English like
02:47 - so this is kind of polymorphic things
02:50 - for polymorphism
02:52 - okay
02:53 - now in programming
02:56 - obviously using oop object-oriented
02:58 - programming Paradigm we can model The
03:00 - Real World objects right easily so that
03:04 - is why in programming if you want to you
03:07 - know implement this polymorphic Behavior
03:09 - this polymorphism in your program
03:11 - through your program then how we are
03:12 - going to achieve this Behavior have we
03:15 - are going to implement this thing and
03:16 - what is polymorphism in that case
03:19 - okay
03:20 - so we can achieve we can implement
03:22 - polymorphism
03:24 - uh with IPS you can four ways first is
03:28 - the typing so these are four ways to
03:31 - implement polymorphism in programming
03:33 - like duct typing method overloading
03:36 - operator overloading and Method
03:39 - overriding so what are these techniques
03:42 - and how we are going to achieve this
03:43 - thing with these things that we will see
03:45 - one by one right now let me just show
03:49 - you some practical of this polymorphic
03:51 - Behavior or polymorphism Okay so let's
03:55 - create a new project here and I'm naming
03:57 - this project
03:59 - polymorphism underscore damn
04:03 - okay
04:05 - I'm just going to create and I'm going
04:08 - to attach this so this is we got the
04:09 - polymorphic demo polymorphism demo now
04:12 - let's create a new file in this project
04:14 - and
04:16 - polymorphism into node py okay
04:20 - let me just show you the simplest or the
04:22 - basic example of
04:24 - polymorphism or having multiple forms
04:28 - you have plus operator what it will do
04:30 - simply will do addition so if you think
04:33 - sorry if you print like print one plus
04:36 - two
04:37 - what do you think what output you will
04:39 - get that's very simple you will get
04:40 - three C you'll get three
04:43 - but if same operator plus and I'm using
04:47 - this operator with the one and two r
04:51 - integer with string suppose I am writing
04:55 - one something like this Plus
04:57 - do something like this now these are
05:00 - double quotes or you can use single
05:01 - quotes as well means these are strings
05:04 - now
05:06 - okay
05:07 - sorry it would be with Within These
05:10 - codes now what output you will get for
05:12 - this line let's run this C for first
05:15 - line it's three for second line it's one
05:18 - two means
05:20 - on Integer it will work as addition and
05:22 - on string it will work as concatenation
05:25 - operator concatenation
05:27 - so it's going to concatenate these two
05:29 - strings so see this even the operator is
05:32 - same symbol is same but having different
05:34 - output
05:36 - in these two lines having multiple forms
05:38 - or you can this is what inbuilt operator
05:41 - so it's kind of operator overloading you
05:43 - can say or you can Define your
05:46 - own also like what this plus will do you
05:49 - can Define that thing at your own but
05:51 - how you will do that thing I'll show in
05:52 - operator overloading
05:54 - okay maybe the operator or the symbol is
05:57 - Plus and
05:59 - you can Define your own thing here the
06:02 - process and it will do subtract actually
06:04 - it will do minus but it will do
06:06 - something else it will do addition of
06:08 - maybe two objects
06:10 - you have created two classes two objects
06:12 - and addition of those objects
06:14 - something different so that behavior you
06:16 - can Define yourself that is operator
06:18 - overloading right but that we'll see
06:20 - later
06:21 - so this is how you can say that this
06:23 - plus is having polymorphism polymorphic
06:26 - Behavior this is polymorphism right so
06:29 - what
06:30 - thing you are going to pass
06:33 - to this plus because plus is an operator
06:36 - then operand one operand two so what
06:37 - operand you are going to pass
06:40 - the behavior of this plus depends on
06:43 - those operands what you are passing
06:45 - whether it's a string whether it's floor
06:47 - whether it's
06:48 - integer okay same if you take example of
06:52 - a function you have many ah inbuilt
06:55 - functions suppose we have function you
06:57 - know we have a function length so if I
07:00 - use this length function something like
07:02 - this
07:03 - I'm using this on
07:06 - Jenny like Jen is a string length Jenny
07:09 - so what it will do it will print the
07:12 - length of this string so what should be
07:14 - the output that is 5 means it is going
07:16 - to count the number of characters
07:18 - right
07:19 - if I have a list suppose I have a list
07:23 - L1 and in this list I have
07:27 - one item is Jenny second is seven
07:30 - this is the list Jenny 7 or anything you
07:33 - can have because list View and every
07:35 - kind of multiple mix of mixture type
07:38 - string and maybe Boolean or something
07:40 - else right and if I print now if you
07:44 - apply this length function on this list
07:47 - L1
07:48 - see what is going to happen now the
07:51 - output of first line is 5 output of
07:53 - second line is 2.
07:56 - for this line it is going to print 2
07:58 - means it is going to print number of
08:00 - item in the list one two okay so I have
08:03 - this dictionary and I'm going to apply
08:05 - this Len function on this dictionary
08:08 - deck to one
08:10 - let's just comment out these lines so
08:13 - what it is going to print now the same
08:14 - function see the output is three it is
08:17 - going to count the number of key value
08:19 - pair 1 2 and 3. so this length function
08:23 - the name is same function name is same
08:25 - length but the output and the behavior
08:28 - of the working offline function is
08:30 - different
08:31 - in first it is going to if this is a
08:33 - string if you are passing a string here
08:36 - then it will count the number of
08:37 - character if you are passing list it
08:39 - will count number of item if you are
08:40 - passing a dictionary it will count
08:42 - number of K and value pair okay so the
08:45 - behavior depends on the type of argument
08:48 - you pass
08:49 - so this is what obviously this this is
08:51 - enabled function and this is
08:52 - polymorphism
08:54 - same function having multiple forms
08:57 - okay behaving differently under
08:59 - different conditions according to the
09:02 - argument number of type of argument you
09:04 - pass okay
09:06 - and polymorphism this thing especially
09:07 - we use in inheritance actually when
09:10 - parent class
09:12 - child class both are having same
09:15 - function
09:16 - okay and if you this thing we have done
09:19 - already in previous videos like in
09:20 - parent class we have a functional
09:22 - display and in child class we also have
09:24 - a function display but that display is
09:26 - having its own definition different
09:28 - definition so that is kind of concept of
09:30 - method overriding that also we'll see
09:33 - right method overloading means same same
09:36 - name function but number of arguments
09:38 - are different type of arguments are
09:40 - different according to that it will
09:42 - behave differently
09:44 - today
09:45 - so I'll show you one by one which kind
09:48 - of thing out of these four python
09:50 - supports which uh type of thing which
09:54 - type of way python doesn't support that
09:56 - also I'll show you okay so that's it
09:59 - about polymorphism for this video so I
10:02 - hope you heard the basic idea of
10:04 - polymorphism right now in the next video
10:06 - we'll see what is
10:17 - take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning Python programming language till now we have discussed I think out of four oop features main features we have discussed three three features so three pillars we can say that is inheritance abstraction and encapsulation so the next one is polymorphism that thing we'll discuss in this video what is polymorphism right with the help of real life example I'll tell you and then different ways or you can say how you can Implement polymorphism in your program that we also will see one by one in later videos right right many more means phones you will get this type of definition everywhere like many forms now what does this mean many forms or multiple forms see let's take a real life example as a person if suppose uh consider me I'm a person so when I go to class in front of my students I behave as a teacher I teach them whatever subject I teach right in front of my family when I come back at home then I behave differently when I am with my friends I am going for a party I am with my friends then I behave differently right can you relate this so as a person I am only one Jenny but according to the situation I behave differently my behavior is Gonna Change in front of my students I am something I'm a different person with my family I'm different person with my friend maybe I have different person I behave differently hey so where I am what the situation is what the conditions are according to that I change is my behavior right so same like I am having multiple forms same you can relate this with you also maybe you with your friends are the friend you with your family are different you in office if you're working then you are different you in college as a student a different so you're also having multiple forms write many forms so this is nothing but polymorphism we are polymorphic or we can say simple some words in English like watch simply watch means that wristwatch also right watch means like uh in different way we can use like you are watching me right now through this video in this video right watching means bacon as well as so this word same word but having two different meaning these kind of we are having many words in English like so this is kind of polymorphic things for polymorphism okay now in programming obviously using oop objectoriented programming Paradigm we can model The Real World objects right easily so that is why in programming if you want to you know implement this polymorphic Behavior this polymorphism in your program through your program then how we are going to achieve this Behavior have we are going to implement this thing and what is polymorphism in that case okay so we can achieve we can implement polymorphism uh with IPS you can four ways first is the typing so these are four ways to implement polymorphism in programming like duct typing method overloading operator overloading and Method overriding so what are these techniques and how we are going to achieve this thing with these things that we will see one by one right now let me just show you some practical of this polymorphic Behavior or polymorphism Okay so let's create a new project here and I'm naming this project polymorphism underscore damn okay I'm just going to create and I'm going to attach this so this is we got the polymorphic demo polymorphism demo now let's create a new file in this project and polymorphism into node py okay let me just show you the simplest or the basic example of polymorphism or having multiple forms you have plus operator what it will do simply will do addition so if you think sorry if you print like print one plus two what do you think what output you will get that's very simple you will get three C you'll get three but if same operator plus and I'm using this operator with the one and two r integer with string suppose I am writing one something like this Plus do something like this now these are double quotes or you can use single quotes as well means these are strings now okay sorry it would be with Within These codes now what output you will get for this line let's run this C for first line it's three for second line it's one two means on Integer it will work as addition and on string it will work as concatenation operator concatenation so it's going to concatenate these two strings so see this even the operator is same symbol is same but having different output in these two lines having multiple forms or you can this is what inbuilt operator so it's kind of operator overloading you can say or you can Define your own also like what this plus will do you can Define that thing at your own but how you will do that thing I'll show in operator overloading okay maybe the operator or the symbol is Plus and you can Define your own thing here the process and it will do subtract actually it will do minus but it will do something else it will do addition of maybe two objects you have created two classes two objects and addition of those objects something different so that behavior you can Define yourself that is operator overloading right but that we'll see later so this is how you can say that this plus is having polymorphism polymorphic Behavior this is polymorphism right so what thing you are going to pass to this plus because plus is an operator then operand one operand two so what operand you are going to pass the behavior of this plus depends on those operands what you are passing whether it's a string whether it's floor whether it's integer okay same if you take example of a function you have many ah inbuilt functions suppose we have function you know we have a function length so if I use this length function something like this I'm using this on Jenny like Jen is a string length Jenny so what it will do it will print the length of this string so what should be the output that is 5 means it is going to count the number of characters right if I have a list suppose I have a list L1 and in this list I have one item is Jenny second is seven this is the list Jenny 7 or anything you can have because list View and every kind of multiple mix of mixture type string and maybe Boolean or something else right and if I print now if you apply this length function on this list L1 see what is going to happen now the output of first line is 5 output of second line is 2. for this line it is going to print 2 means it is going to print number of item in the list one two okay so I have this dictionary and I'm going to apply this Len function on this dictionary deck to one let's just comment out these lines so what it is going to print now the same function see the output is three it is going to count the number of key value pair 1 2 and 3. so this length function the name is same function name is same length but the output and the behavior of the working offline function is different in first it is going to if this is a string if you are passing a string here then it will count the number of character if you are passing list it will count number of item if you are passing a dictionary it will count number of K and value pair okay so the behavior depends on the type of argument you pass so this is what obviously this this is enabled function and this is polymorphism same function having multiple forms okay behaving differently under different conditions according to the argument number of type of argument you pass okay and polymorphism this thing especially we use in inheritance actually when parent class child class both are having same function okay and if you this thing we have done already in previous videos like in parent class we have a functional display and in child class we also have a function display but that display is having its own definition different definition so that is kind of concept of method overriding that also we'll see right method overloading means same same name function but number of arguments are different type of arguments are different according to that it will behave differently today so I'll show you one by one which kind of thing out of these four python supports which uh type of thing which type of way python doesn't support that also I'll show you okay so that's it about polymorphism for this video so I hope you heard the basic idea of polymorphism right now in the next video we'll see what is take care
