With timestamps:

00:00 - so in this lecture we will discuss what
00:02 - is attributed closer and how to find out
00:04 - a tribute closer
00:05 - fine see this is one of the important
00:07 - topic in DBMS because the frequently
00:09 - asked question is what in net or gate or
00:11 - sometimes in your university a
00:13 - university exam is will that they'll
00:15 - give you a relation they'll give you
00:17 - some functional dependencies nothing
00:19 - else will be given no data will be given
00:20 - and you are asked to find out all the
00:23 - candidate key present in this relation
00:25 - right so to find out the candidate is
00:27 - all the candidate keys present in this
00:30 - relation you need attribute closer you
00:33 - need to find out attribute closer right
00:35 - although you can find out candidate Keys
00:37 - using those rules some strong exams as
00:40 - well but that would be lengthy process
00:41 - and difficult process but this is very
00:44 - easy if you know how to find out
00:46 - attribute closer then you can easily
00:48 - find out what the number of candidate
00:49 - keys in a relation or they may ask
00:51 - they'll give you a key and they'll ask
00:52 - if this is a candidate key or not so
00:55 - using attribute closer only you can tell
00:57 - this the given key is candidate key or
01:00 - not right so this is very important
01:02 - topic fine and if you know if you know
01:05 - how to find out candidate is from a
01:06 - given relation then you can easily solve
01:09 - the problem on on that the second normal
01:11 - form third normal form and bcnf right so
01:14 - for the point of view of normalization
01:16 - also this is very important topic right
01:19 - we will discuss it with two or three
01:21 - examples right now see if this is a
01:25 - relation given having five attributes
01:27 - and these are the functional dependency
01:29 - is given which are present on this
01:31 - relation right now see if can I say that
01:36 - a a determines B and B determines C so
01:41 - can I say a will determine C yes because
01:46 - of transitivity rule that I have already
01:48 - discussed a determine B B determine C so
01:51 - we can say a determine C definitely a
01:53 - will determine C can I write a will
01:56 - determine a yes because of reflects a
01:59 - reflexivity property right now see a
02:03 - determines C and C determines D C these
02:08 - are the functional dependencies which
02:10 - are directly given these
02:12 - also present on this relation which are
02:14 - in direct functional dependencies using
02:16 - the rules we are finding out the
02:18 - functional dependencies right that is
02:21 - why in that video I have told you when
02:23 - we were discussing Armstrong exams that
02:25 - why we are using these rules because of
02:27 - using those rules we can find out all
02:29 - the functional dependencies on a given
02:31 - relation right now see definitely this
02:34 - is true now can I write a determine CA
02:38 - determine C ceded remind C C retro mind
02:41 - B so definitely I can write a will
02:43 - determine D right using transitivity
02:45 - rule and a can determine G as well
02:49 - because a determined B D determine Y so
02:52 - definitely a will determine II because
02:55 - of same transitivity property right now
02:58 - here can I write a determines a b c d e
03:04 - of course i can write using that union
03:07 - property see here determinant is same a
03:10 - is determining all the attributes a b c
03:13 - d e so you can apply union property and
03:17 - you can combine these attributes right
03:19 - if determinant is same you can combine
03:23 - the dependant in the previous video I
03:24 - have already told you so now a can
03:26 - determine all the attributes if you have
03:28 - only a in this relation using a you can
03:31 - determine all the attributes of this
03:33 - relation right now see
03:36 - can you write here C B determine C and C
03:40 - determine D this is given so definitely
03:42 - I can say B will determine B B can
03:45 - determine D we determine D D determine e
03:49 - so definitely I can say B will determine
03:51 - using transitivity property right and B
03:55 - determines B this is always valid
03:57 - because this is a reflexive reflexivity
03:59 - rule right now C can I write B can
04:05 - determine B we can determine C so I can
04:09 - write C we can determine D D and E
04:13 - obviously you can write this thing
04:15 - because of using that Union property
04:17 - right now but we cannot determine a
04:22 - right we can determine all the
04:24 - attributes it
04:25 - cept a fine now see can I write see see
04:31 - will let remind didi determines is so
04:34 - can I write see will later mine II
04:35 - definitely see you later my in C
04:39 - definitely C can determine now can I
04:43 - combine all these C B and E using the
04:47 - Union property right now see evil
04:52 - determine what using this can I say
04:55 - something
04:56 - know so can I say only 1 e determine e
04:59 - you can determine itself only if you
05:02 - have e you cannot determine any of that
05:05 - reviewed other than e this is because of
05:08 - reflexivity property you can determine a
05:10 - now see what does attribute closer and
05:12 - how to find out so you can say what is
05:14 - closer said it is determined it is an
05:16 - operation which is determined by plus
05:19 - right if I write x and in power I am
05:24 - writing plus or superscript I am writing
05:26 - plus this is the symbol of this
05:28 - attribute closer if I am writing this
05:30 - thing it means this is attribute closer
05:32 - of X now here X is what set of
05:35 - attributes this is very important point
05:38 - X can be one attribute X can be two
05:40 - three four X is set of attributes right
05:47 - now X close this is what attribute
05:50 - closer of X now how to define attribute
05:53 - closer how to find out it will contain
05:56 - all the attributes of the relation which
06:01 - are determined by X that is attribute
06:05 - closer of X I am writing the definition
06:07 - here it will contain set of attributes
06:11 - determined by X and here X's set of
06:15 - attributes it is not necessary that X is
06:18 - only one attribute it may be two three
06:20 - four any number of attributes right now
06:23 - in this relation if I ask you what is
06:26 - attribute closure of a then can you tell
06:29 - me how to write down first of all
06:31 - attribute closure of a just write down a
06:33 - and in power you write plus now here
06:37 - what is that fable closer of a how many
06:40 - and which attribute of this relation you
06:42 - can determine by a I have already
06:46 - discussed a can determine all the
06:48 - attributes right so attribute closure of
06:51 - phase a b c d e right now if I ask you
06:59 - attribute closer of a B I told you that
07:02 - this is X and this is set of attributes
07:05 - now what does attribute closer of a D
07:08 - how many attributes and which attribute
07:10 - you can determine using a D check see if
07:14 - you apply that argumentation rules after
07:18 - that I will tell you the simple trick
07:19 - first of all let's check it with
07:21 - argumentation rule see here a determine
07:24 - B so using argumentation can I write ad
07:27 - determines B B yes this is argumentation
07:32 - property you must check out previous
07:34 - video first in the Seibert and then come
07:36 - to this video right because I am NOT
07:38 - going to explain all the properties here
07:39 - now here can I write a B determine B and
07:43 - a be determined D this is what splitting
07:48 - property or decomposition property fine
07:51 - so now C ad can determine itself that is
07:55 - a and B using reflexivity property using
07:59 - this ad proper ad can determine B so I
08:03 - can write B as well ad can determine D
08:05 - so I have already written D as well
08:07 - right so I I have found this thing still
08:10 - you need to take care still some
08:12 - attributes are remaining you need to
08:14 - find out those attributes can be
08:16 - determined by ad or not now using of
08:18 - these rule you need to check out which
08:20 - property you can apply with Armstrong
08:21 - exhume you can apply and this is this
08:23 - should be very tough for lengthy process
08:25 - now simple trick is what simply ad is
08:29 - there you need to find out ad closer
08:31 - this concentrate on the trick write down
08:34 - ad because obviously that is reflexivity
08:37 - property ad can determine itself that is
08:40 - for sure this is what reveal dependency
08:43 - and this always holds an honor relation
08:46 - right now simply write down ad
08:49 - fine now I have ad now see the
08:51 - dependency is given see here a
08:54 - determines B it means if you have a then
08:58 - you can determine D right so now check
09:02 - do you have a checkout we have aid yes
09:05 - we have a so using a can I determine B
09:09 - definitely I can determine B so here you
09:11 - can write B right we have used this
09:14 - functional dependency now next is what
09:16 - we can determine C now check do you have
09:19 - be with you in the attributes yes I have
09:23 - B so using B I can determine C so here I
09:26 - can write C fine now this also used now
09:30 - using C I can determine B and I have C
09:33 - so here I can determine D if I have say
09:35 - you can determine D so definitely in
09:38 - attribute closer I can say that ad can
09:41 - determine D right now no need to write
09:46 - down this D again because I have already
09:48 - taken D so no need to write down it but
09:50 - we have used this right now D can
09:54 - determine e do you have B yes I have D
09:56 - so I can write E as well right now we
10:02 - are done and see here we have all the
10:04 - attributes a B C D and E so now ad
10:08 - closer ad if you have ad then also you
10:12 - can determine all the attributes of this
10:14 - relation right now see if I ask you what
10:18 - is closer of be how many attributes
10:21 - which attributes you can determine with
10:23 - B we are not going to use the rules exam
10:27 - rules directly we will check using B you
10:30 - can determine B right that is a
10:32 - reflexive 'ti property right now check
10:34 - the dependencies given now here first as
10:38 - a can determine B do you have a because
10:41 - a can determine B so you must have a to
10:44 - determine B do you have a no we don't
10:45 - have a so you cannot use this one here
10:47 - now B can determine C do you how B yes I
10:51 - have so I can determine C now C can
10:54 - determine B I have C so I can determine
10:56 - B now D can determine
10:58 - I have a B so I can determine e right so
11:02 - these I have used now again check
11:05 - because we are maybe we using these
11:09 - functional dependencies maybe we have
11:11 - that attribute which is used in this
11:14 - functional dependency right so it's not
11:16 - like that only one time you need to
11:18 - check find again check again this and
11:21 - this this we have used we are left with
11:23 - this one a determined B now check now do
11:26 - you have a no I don't have a right so
11:30 - now also I cannot determine and now C B
11:34 - and C this I have used this I have used
11:36 - this I have used so in the separation
11:38 - there is no change in this set of
11:40 - attribute now you can stop right no need
11:42 - to check again now this is attribute
11:45 - closure of B I hope now you got how to
11:49 - find out attribute closer let us take
11:51 - one more example find out attribute
11:54 - closure of C D definitely I can
11:57 - determine C and D with the help of CD
11:59 - that is reflexivity property that you
12:02 - can easily write down without looking at
12:03 - the functional dependency is given
12:06 - functional dependencies now check the
12:08 - functional dependencies given a
12:09 - determine we do you have a no I don't
12:11 - have B determines C do you have be no C
12:15 - determined B yes I have C but I have
12:17 - already written D so no need to write
12:19 - down again D determine Y do you have B
12:21 - yes I have D so you can write down e now
12:25 - again check because I have added one
12:27 - attribute now check a determine B no we
12:30 - don't have a B determine C we don't have
12:32 - b c d i have used and de I have used now
12:36 - there is no change in the situation
12:38 - there was no change in this set of
12:39 - attributes so now stop so now C D close
12:42 - there is C D and E means if you have C D
12:45 - then you can only determine C D and E
12:49 - you cannot determine the value of a and
12:51 - B now here which can be a candidate key
12:54 - C candidate key is what it is a super
12:57 - here you can say minimal superkey or you
12:59 - can say it is a super key whose proper
13:01 - subset is not a super key I have already
13:03 - discussed all the keys and detail with
13:06 - example in the previous video you can
13:08 - check out that between the cybertor
13:09 - right now
13:11 - obviously now first off we'll find out
13:13 - what is super key here can you find out
13:16 - which is super key super key is what I
13:18 - have already discussed what is super key
13:20 - but here now I have only functional
13:22 - dependencies and relation and within the
13:25 - context of attribute closer I'm going to
13:28 - tell you the definition of super key how
13:30 - to find out super key you have this
13:32 - attribute closer right because that is
13:34 - very simple to find out we don't have
13:36 - any values on the table we have just
13:38 - given a relation or a table having some
13:40 - attributes and functional dependencies
13:41 - no values are given like SIDS roll
13:43 - numbers and name and something like this
13:45 - right so now super key is what it is set
13:49 - of attributes who's closer contains all
13:52 - attributes of a relation so if this is
13:56 - the definition of super heat super key
13:59 - is a set of attributes it may be one
14:01 - attribute or set of attributes main two
14:03 - or three attributes never there who's
14:05 - closer contains all attributes of a
14:08 - given relation or a table right now here
14:11 - see a closer a closer contains all the
14:15 - attributes of a given relation so can I
14:18 - say it is a super key yes he is a super
14:22 - a is a super key right according to the
14:25 - definition fine now see ad closer also
14:29 - contains all the attributes of this
14:30 - relation ABCDE and here I have a B C D
14:34 - and E so a D is also a super key fine is
14:39 - be a super key find out be closer that I
14:42 - have already find it found out that is
14:45 - BCDE but there is no a in the closer I
14:49 - have only four attribute not all the
14:51 - attributes so B is not a super key is C
14:54 - D a super key no CDs also not as super
14:57 - key right now if I ask you the total
15:02 - number of super keys in this relation
15:04 - how to find out that thing C a is a
15:08 - super key fine so if I write a B
15:14 - is this a superkey definitely it would
15:17 - be a superkey if only i can determine
15:21 - all the attributes so definitely if you
15:24 - will add a with any other attribute
15:26 - given then it also can determine all the
15:29 - attributes fine so for that find out a
15:33 - be closer
15:34 - if the closer contains all the
15:35 - attributes of a relation then you can
15:37 - say a B is also a super key although no
15:39 - need to check if a super key then you
15:42 - can combine a with any other attribute
15:43 - that would definitely be a super key
15:45 - fine that is common sense now find out a
15:49 - B simply write down a B because using
15:52 - reflexivity rule you can write down a
15:54 - bab can determine itself a can determine
15:56 - B do you have a yes but I have already
15:59 - written B be determined C so I have B so
16:02 - I can write down C C determined B do you
16:06 - have C yes I have C so using C I can
16:08 - determine D did it remind you do you
16:11 - have B yes I can determine a now see
16:13 - ABCDE I have all that reviewers I have
16:17 - used all the functional dependencies so
16:19 - you can say that a B is also a superteam
16:22 - AC also a super key ad also a super
16:28 - Krete ABC also would be a super key
16:32 - because a is a super key so you can
16:35 - combine a with any other maybe with one
16:37 - attribute to attributed three attribute
16:39 - for attributes like ABCDE
16:42 - that would also be a super key so how
16:45 - many super heat can be possible here C
16:48 - using these four attributes how many
16:52 - combinations can be possible to raise to
16:54 - power 4 that is 60 and all the 16
16:58 - combination obviously we have a right
17:01 - and using these we can have 16
17:03 - combinations so you can say they're 16
17:06 - super keys can be possible in this
17:08 - relation now if you will same and we are
17:10 - not taking a 10 B C or only CD or BCD be
17:14 - a super key right so you can check out
17:17 - the closure of each one now rather than
17:19 - checking the each one you can check out
17:21 - closer of BCC
17:22 - the complete all the attributes other
17:26 - than a find out closer of BCB BCB e
17:30 - obviously I can write down this thing
17:32 - right because all that reboots can
17:35 - determine itself right reflexivity
17:37 - property now check out you can you
17:42 - cannot determine a with the help of DS
17:44 - see a recommend B I don't have a we
17:48 - determine C but we have B and C both C
17:51 - determined be but I have B anyways D
17:53 - letter my knee but I have E also but I
17:56 - cannot write down here a because that
17:58 - reboots which you have using those
18:00 - attributes you cannot determine a right
18:03 - so the attribute closer is not
18:06 - containing all that I got of a relation
18:08 - so you cannot say that B C D is a super
18:10 - key now if the complete is not a super
18:14 - key then definitely only you if you take
18:18 - only portion of this complete then
18:20 - definitely that cannot be a super key
18:23 - right that is for sure so the super keys
18:27 - number of super key present are 16 in
18:29 - this relation right now candidate is
18:33 - what about candidate key C now super
18:36 - keys are 16 now candidate he is minimal
18:39 - superkey or you can say the super key
18:41 - whose subset or you can say whose proper
18:44 - subset not subset proper subset is not a
18:47 - super key right what is proper subset
18:50 - that I already discussed in that video
18:52 - that we have been we will discuss when
18:54 - we have discussed that the types of keys
18:56 - right now see E as a super key right so
19:02 - proper subset of a may be what proper
19:06 - subset contains less attribute than this
19:08 - said it has only one attribute less
19:11 - attribute means you cannot take a so
19:14 - that would be Phi and Phi cannot be a
19:16 - super key right so no proper subset of a
19:20 - is a super key so definitely a is what
19:22 - super he as well as candidate key right
19:26 - now see this is also super t10 ad be a
19:30 - candidate key definitely not why so
19:34 - because proper subset of ad is what one
19:37 - a-1 is D and out of two proper subset K
19:43 - is what already a super key but
19:46 - candidate key is what the super key
19:48 - whose proper subset is not a super key
19:50 - so this cannot be a super clean so I
19:53 - guess now you got out of all the
19:56 - available out of all the 16 super key is
19:58 - only one candidate he can be there that
20:00 - is a because all the 16 will have a
20:05 - right either a D or a B or ABCD or ABC
20:10 - or something like this and all the
20:12 - proper subset of all the other super
20:14 - case would be would contain a definitely
20:16 - and this proper subset is super key so
20:19 - no other super key can be a candidate
20:21 - key only one candidate key is possible
20:23 - here that is a fine I hope you got how
20:27 - to find out can you get key super keys
20:30 - and all right now we will discuss it
20:32 - with help of one more example so now let
20:34 - us take this example here I have
20:36 - relation this and having five attributes
20:39 - and functional dependencies are only two
20:41 - functional dependencies right I am
20:43 - taking a simple example in next video
20:45 - will discuss it with complex example as
20:47 - well right first of all you get this
20:50 - thing now see how to find out attribute
20:53 - closer I am saying that find out
20:55 - attribute closure of a means a plus how
20:58 - to find out it directly write down a
21:00 - because of reckless reflexivity rule a
21:02 - can determine itself right now check out
21:05 - the functional dependencies a can
21:07 - determine B so now do you have a if you
21:10 - have a in that case only you can
21:12 - determine B right so do you have a yes I
21:15 - have a so I can determine B you so you
21:18 - can write down here B next is B can
21:22 - determine II do you have B no I don't
21:24 - have be fine and that's it we have only
21:27 - two functional dependencies we have
21:29 - already used in this one so now a closer
21:32 - is what a B now next is if I say B C
21:36 - find out to be C closer so directly I
21:38 - can write down B and C because of
21:41 - reflexivity property now check out the
21:44 - dependencies a will determine B do you
21:46 - have a no they will determine a do you
21:48 - have D
21:49 - so using BC I can only determine BC
21:53 - nothing is right so I hope now you got
21:56 - how to find out attribute closer right
21:58 - now here see what is super key now find
22:02 - out candidate keys in this relation now
22:05 - see if I write down ABCD and E find out
22:10 - attribute closure of this all the
22:13 - attributes I am taking because obviously
22:14 - this can be set of attributes so now
22:17 - this would be ABCDE because each
22:21 - attribute can determine itself because
22:23 - of reflexivity rule right and here that
22:26 - a good closure of this is having all the
22:28 - attributes of the relation so this is
22:29 - what a super key definitely right and we
22:33 - already know if you take all that we
22:34 - build off a table or relation that would
22:36 - be a super key definitely because
22:37 - duplication of you know there would be
22:39 - no duplicate records in the table right
22:41 - now if you check a B D and E is this a
22:47 - super key or not find out closer of
22:49 - first of all obviously this thing to
22:51 - find out is it a super key or not what a
22:53 - candidate key or not find out closer of
22:55 - the given key right now closer of this
22:58 - is what simply write down a b b:e
23:01 - because of reflexivity property now
23:04 - check out the dependency is even a
23:06 - determine B do you have a yes but I have
23:09 - already be do you determine e you have D
23:11 - but you have already e so I cannot use
23:14 - this for this right so now we are left
23:17 - with C here we don't have C so this
23:19 - cannot be a super key right now if you
23:24 - write a C D E now check this is a super
23:28 - key or not to check this thing first of
23:31 - all find out the closer of given key now
23:33 - closer is what you can directly write
23:36 - down a CBE whichever is given because of
23:39 - reflexivity property now check the
23:40 - dependencies a determine B you have a
23:42 - yes I have a so using a I can determine
23:46 - B if you have a you can determine B so I
23:48 - can write down here B now next says D
23:51 - determine Y do you have D yes but I have
23:53 - already written a so no need to write
23:55 - down it again and now see the closure of
23:58 - this is containing all the attributes of
24:00 - a relation a
24:01 - b c d e c order does not matter here in
24:06 - a set right you can write down this or
24:08 - you can out ABCD so this is what our
24:10 - super e right now if you check a CD only
24:16 - is this a super key or not now find out
24:19 - closure of this thing you can simply
24:22 - write down a c d right
24:25 - a determine B do you have a yes so I can
24:29 - write down here B do you determine Y do
24:31 - you have B yes I can write down I have
24:34 - used all the dependencies and here also
24:37 - I have all the attributes in this closer
24:39 - set the closer set of this a CD so this
24:43 - is definitely a super game fine so now C
24:47 - can it be the super can be candidate key
24:50 - no because proper subset of this is what
24:53 - this also this also and both are super
24:55 - key so this cannot be candidate he this
24:57 - is not super key so obviously this
24:59 - cannot be candidate he is this can be a
25:01 - candidate key this proper subset is what
25:03 - one is a CD and a cz a CD is still a
25:05 - super key so this cannot be a candidate
25:07 - key what about a CD proper subset of a
25:11 - CD is what AC you can see the CD and ad
25:17 - right and a C and D so any of these if a
25:25 - super he then definitely it would not be
25:26 - a candidate key now find out AC closer
25:29 - see here I can write down a and C now
25:33 - functional dependencies check a
25:35 - determine B I have a so I can write down
25:37 - here B D determine E but I don't have B
25:41 - so I cannot use so this cannot determine
25:43 - all that review so this is not a super
25:45 - key what about C D here I can write down
25:48 - CD I cannot use this one because I don't
25:51 - have a I have D so I can write down here
25:53 - E right again check a do we have a now
25:57 - no I don't have so this is not a super
25:59 - key because the set of closure set is
26:02 - not containing all the attributes you
26:04 - can check out this closure this will not
26:05 - be a super key this and this this would
26:07 - not be a super key right so now none of
26:10 - the proper subset of a CD is a super key
26:13 - so this is a
26:15 - right now you will see that
26:19 - there can be many combinations for all
26:22 - the combinations you need to check
26:24 - proper subset and other than half you
26:26 - can find out that it would be very tough
26:27 - to find out that how many candidate keys
26:30 - are there in a relation right if suppose
26:33 - I have in a relation ten attributes then
26:35 - definitely to find out proper subsets of
26:38 - each super key and to check individually
26:41 - that would be a tough process right so
26:44 - now for this you need a shortcut and
26:46 - that short break we will I will discuss
26:48 - in the next video I'll take one example
26:51 - one or two example and with the help of
26:53 - that short trick I'll discuss how to
26:56 - find out all the candidate keys in a
26:58 - given relation right within second
27:01 - seconds you can find out all the
27:02 - candidate keys right in this table in
27:06 - this relation for this relation only one
27:09 - candidate he is there that is a CT I
27:11 - know the answer using that trick only
27:13 - but that trick I'll the solution of this
27:16 - why I am saying that only ACD is a
27:18 - candidate key no other candidate he is
27:20 - there right that I'll discuss in the
27:23 - next video
27:23 - fine the main promote of this video was
27:27 - to get to know what is attribute closer
27:30 - and how to find out attribute closer
27:32 - right and what is need of attribute
27:34 - closer you need attribute closer to find
27:37 - out super is an candidate keys now we
27:39 - will discuss it with a simple trick in
27:41 - the next video so now we'll see in the
27:43 - next video till then bye take care

Cleaned transcript:

so in this lecture we will discuss what is attributed closer and how to find out a tribute closer fine see this is one of the important topic in DBMS because the frequently asked question is what in net or gate or sometimes in your university a university exam is will that they'll give you a relation they'll give you some functional dependencies nothing else will be given no data will be given and you are asked to find out all the candidate key present in this relation right so to find out the candidate is all the candidate keys present in this relation you need attribute closer you need to find out attribute closer right although you can find out candidate Keys using those rules some strong exams as well but that would be lengthy process and difficult process but this is very easy if you know how to find out attribute closer then you can easily find out what the number of candidate keys in a relation or they may ask they'll give you a key and they'll ask if this is a candidate key or not so using attribute closer only you can tell this the given key is candidate key or not right so this is very important topic fine and if you know if you know how to find out candidate is from a given relation then you can easily solve the problem on on that the second normal form third normal form and bcnf right so for the point of view of normalization also this is very important topic right we will discuss it with two or three examples right now see if this is a relation given having five attributes and these are the functional dependency is given which are present on this relation right now see if can I say that a a determines B and B determines C so can I say a will determine C yes because of transitivity rule that I have already discussed a determine B B determine C so we can say a determine C definitely a will determine C can I write a will determine a yes because of reflects a reflexivity property right now see a determines C and C determines D C these are the functional dependencies which are directly given these also present on this relation which are in direct functional dependencies using the rules we are finding out the functional dependencies right that is why in that video I have told you when we were discussing Armstrong exams that why we are using these rules because of using those rules we can find out all the functional dependencies on a given relation right now see definitely this is true now can I write a determine CA determine C ceded remind C C retro mind B so definitely I can write a will determine D right using transitivity rule and a can determine G as well because a determined B D determine Y so definitely a will determine II because of same transitivity property right now here can I write a determines a b c d e of course i can write using that union property see here determinant is same a is determining all the attributes a b c d e so you can apply union property and you can combine these attributes right if determinant is same you can combine the dependant in the previous video I have already told you so now a can determine all the attributes if you have only a in this relation using a you can determine all the attributes of this relation right now see can you write here C B determine C and C determine D this is given so definitely I can say B will determine B B can determine D we determine D D determine e so definitely I can say B will determine using transitivity property right and B determines B this is always valid because this is a reflexive reflexivity rule right now C can I write B can determine B we can determine C so I can write C we can determine D D and E obviously you can write this thing because of using that Union property right now but we cannot determine a right we can determine all the attributes it cept a fine now see can I write see see will let remind didi determines is so can I write see will later mine II definitely see you later my in C definitely C can determine now can I combine all these C B and E using the Union property right now see evil determine what using this can I say something know so can I say only 1 e determine e you can determine itself only if you have e you cannot determine any of that reviewed other than e this is because of reflexivity property you can determine a now see what does attribute closer and how to find out so you can say what is closer said it is determined it is an operation which is determined by plus right if I write x and in power I am writing plus or superscript I am writing plus this is the symbol of this attribute closer if I am writing this thing it means this is attribute closer of X now here X is what set of attributes this is very important point X can be one attribute X can be two three four X is set of attributes right now X close this is what attribute closer of X now how to define attribute closer how to find out it will contain all the attributes of the relation which are determined by X that is attribute closer of X I am writing the definition here it will contain set of attributes determined by X and here X's set of attributes it is not necessary that X is only one attribute it may be two three four any number of attributes right now in this relation if I ask you what is attribute closure of a then can you tell me how to write down first of all attribute closure of a just write down a and in power you write plus now here what is that fable closer of a how many and which attribute of this relation you can determine by a I have already discussed a can determine all the attributes right so attribute closure of phase a b c d e right now if I ask you attribute closer of a B I told you that this is X and this is set of attributes now what does attribute closer of a D how many attributes and which attribute you can determine using a D check see if you apply that argumentation rules after that I will tell you the simple trick first of all let's check it with argumentation rule see here a determine B so using argumentation can I write ad determines B B yes this is argumentation property you must check out previous video first in the Seibert and then come to this video right because I am NOT going to explain all the properties here now here can I write a B determine B and a be determined D this is what splitting property or decomposition property fine so now C ad can determine itself that is a and B using reflexivity property using this ad proper ad can determine B so I can write B as well ad can determine D so I have already written D as well right so I I have found this thing still you need to take care still some attributes are remaining you need to find out those attributes can be determined by ad or not now using of these rule you need to check out which property you can apply with Armstrong exhume you can apply and this is this should be very tough for lengthy process now simple trick is what simply ad is there you need to find out ad closer this concentrate on the trick write down ad because obviously that is reflexivity property ad can determine itself that is for sure this is what reveal dependency and this always holds an honor relation right now simply write down ad fine now I have ad now see the dependency is given see here a determines B it means if you have a then you can determine D right so now check do you have a checkout we have aid yes we have a so using a can I determine B definitely I can determine B so here you can write B right we have used this functional dependency now next is what we can determine C now check do you have be with you in the attributes yes I have B so using B I can determine C so here I can write C fine now this also used now using C I can determine B and I have C so here I can determine D if I have say you can determine D so definitely in attribute closer I can say that ad can determine D right now no need to write down this D again because I have already taken D so no need to write down it but we have used this right now D can determine e do you have B yes I have D so I can write E as well right now we are done and see here we have all the attributes a B C D and E so now ad closer ad if you have ad then also you can determine all the attributes of this relation right now see if I ask you what is closer of be how many attributes which attributes you can determine with B we are not going to use the rules exam rules directly we will check using B you can determine B right that is a reflexive 'ti property right now check the dependencies given now here first as a can determine B do you have a because a can determine B so you must have a to determine B do you have a no we don't have a so you cannot use this one here now B can determine C do you how B yes I have so I can determine C now C can determine B I have C so I can determine B now D can determine I have a B so I can determine e right so these I have used now again check because we are maybe we using these functional dependencies maybe we have that attribute which is used in this functional dependency right so it's not like that only one time you need to check find again check again this and this this we have used we are left with this one a determined B now check now do you have a no I don't have a right so now also I cannot determine and now C B and C this I have used this I have used this I have used so in the separation there is no change in this set of attribute now you can stop right no need to check again now this is attribute closure of B I hope now you got how to find out attribute closer let us take one more example find out attribute closure of C D definitely I can determine C and D with the help of CD that is reflexivity property that you can easily write down without looking at the functional dependency is given functional dependencies now check the functional dependencies given a determine we do you have a no I don't have B determines C do you have be no C determined B yes I have C but I have already written D so no need to write down again D determine Y do you have B yes I have D so you can write down e now again check because I have added one attribute now check a determine B no we don't have a B determine C we don't have b c d i have used and de I have used now there is no change in the situation there was no change in this set of attributes so now stop so now C D close there is C D and E means if you have C D then you can only determine C D and E you cannot determine the value of a and B now here which can be a candidate key C candidate key is what it is a super here you can say minimal superkey or you can say it is a super key whose proper subset is not a super key I have already discussed all the keys and detail with example in the previous video you can check out that between the cybertor right now obviously now first off we'll find out what is super key here can you find out which is super key super key is what I have already discussed what is super key but here now I have only functional dependencies and relation and within the context of attribute closer I'm going to tell you the definition of super key how to find out super key you have this attribute closer right because that is very simple to find out we don't have any values on the table we have just given a relation or a table having some attributes and functional dependencies no values are given like SIDS roll numbers and name and something like this right so now super key is what it is set of attributes who's closer contains all attributes of a relation so if this is the definition of super heat super key is a set of attributes it may be one attribute or set of attributes main two or three attributes never there who's closer contains all attributes of a given relation or a table right now here see a closer a closer contains all the attributes of a given relation so can I say it is a super key yes he is a super a is a super key right according to the definition fine now see ad closer also contains all the attributes of this relation ABCDE and here I have a B C D and E so a D is also a super key fine is be a super key find out be closer that I have already find it found out that is BCDE but there is no a in the closer I have only four attribute not all the attributes so B is not a super key is C D a super key no CDs also not as super key right now if I ask you the total number of super keys in this relation how to find out that thing C a is a super key fine so if I write a B is this a superkey definitely it would be a superkey if only i can determine all the attributes so definitely if you will add a with any other attribute given then it also can determine all the attributes fine so for that find out a be closer if the closer contains all the attributes of a relation then you can say a B is also a super key although no need to check if a super key then you can combine a with any other attribute that would definitely be a super key fine that is common sense now find out a B simply write down a B because using reflexivity rule you can write down a bab can determine itself a can determine B do you have a yes but I have already written B be determined C so I have B so I can write down C C determined B do you have C yes I have C so using C I can determine D did it remind you do you have B yes I can determine a now see ABCDE I have all that reviewers I have used all the functional dependencies so you can say that a B is also a superteam AC also a super key ad also a super Krete ABC also would be a super key because a is a super key so you can combine a with any other maybe with one attribute to attributed three attribute for attributes like ABCDE that would also be a super key so how many super heat can be possible here C using these four attributes how many combinations can be possible to raise to power 4 that is 60 and all the 16 combination obviously we have a right and using these we can have 16 combinations so you can say they're 16 super keys can be possible in this relation now if you will same and we are not taking a 10 B C or only CD or BCD be a super key right so you can check out the closure of each one now rather than checking the each one you can check out closer of BCC the complete all the attributes other than a find out closer of BCB BCB e obviously I can write down this thing right because all that reboots can determine itself right reflexivity property now check out you can you cannot determine a with the help of DS see a recommend B I don't have a we determine C but we have B and C both C determined be but I have B anyways D letter my knee but I have E also but I cannot write down here a because that reboots which you have using those attributes you cannot determine a right so the attribute closer is not containing all that I got of a relation so you cannot say that B C D is a super key now if the complete is not a super key then definitely only you if you take only portion of this complete then definitely that cannot be a super key right that is for sure so the super keys number of super key present are 16 in this relation right now candidate is what about candidate key C now super keys are 16 now candidate he is minimal superkey or you can say the super key whose subset or you can say whose proper subset not subset proper subset is not a super key right what is proper subset that I already discussed in that video that we have been we will discuss when we have discussed that the types of keys right now see E as a super key right so proper subset of a may be what proper subset contains less attribute than this said it has only one attribute less attribute means you cannot take a so that would be Phi and Phi cannot be a super key right so no proper subset of a is a super key so definitely a is what super he as well as candidate key right now see this is also super t10 ad be a candidate key definitely not why so because proper subset of ad is what one a1 is D and out of two proper subset K is what already a super key but candidate key is what the super key whose proper subset is not a super key so this cannot be a super clean so I guess now you got out of all the available out of all the 16 super key is only one candidate he can be there that is a because all the 16 will have a right either a D or a B or ABCD or ABC or something like this and all the proper subset of all the other super case would be would contain a definitely and this proper subset is super key so no other super key can be a candidate key only one candidate key is possible here that is a fine I hope you got how to find out can you get key super keys and all right now we will discuss it with help of one more example so now let us take this example here I have relation this and having five attributes and functional dependencies are only two functional dependencies right I am taking a simple example in next video will discuss it with complex example as well right first of all you get this thing now see how to find out attribute closer I am saying that find out attribute closure of a means a plus how to find out it directly write down a because of reckless reflexivity rule a can determine itself right now check out the functional dependencies a can determine B so now do you have a if you have a in that case only you can determine B right so do you have a yes I have a so I can determine B you so you can write down here B next is B can determine II do you have B no I don't have be fine and that's it we have only two functional dependencies we have already used in this one so now a closer is what a B now next is if I say B C find out to be C closer so directly I can write down B and C because of reflexivity property now check out the dependencies a will determine B do you have a no they will determine a do you have D so using BC I can only determine BC nothing is right so I hope now you got how to find out attribute closer right now here see what is super key now find out candidate keys in this relation now see if I write down ABCD and E find out attribute closure of this all the attributes I am taking because obviously this can be set of attributes so now this would be ABCDE because each attribute can determine itself because of reflexivity rule right and here that a good closure of this is having all the attributes of the relation so this is what a super key definitely right and we already know if you take all that we build off a table or relation that would be a super key definitely because duplication of you know there would be no duplicate records in the table right now if you check a B D and E is this a super key or not find out closer of first of all obviously this thing to find out is it a super key or not what a candidate key or not find out closer of the given key right now closer of this is what simply write down a b be because of reflexivity property now check out the dependency is even a determine B do you have a yes but I have already be do you determine e you have D but you have already e so I cannot use this for this right so now we are left with C here we don't have C so this cannot be a super key right now if you write a C D E now check this is a super key or not to check this thing first of all find out the closer of given key now closer is what you can directly write down a CBE whichever is given because of reflexivity property now check the dependencies a determine B you have a yes I have a so using a I can determine B if you have a you can determine B so I can write down here B now next says D determine Y do you have D yes but I have already written a so no need to write down it again and now see the closure of this is containing all the attributes of a relation a b c d e c order does not matter here in a set right you can write down this or you can out ABCD so this is what our super e right now if you check a CD only is this a super key or not now find out closure of this thing you can simply write down a c d right a determine B do you have a yes so I can write down here B do you determine Y do you have B yes I can write down I have used all the dependencies and here also I have all the attributes in this closer set the closer set of this a CD so this is definitely a super game fine so now C can it be the super can be candidate key no because proper subset of this is what this also this also and both are super key so this cannot be candidate he this is not super key so obviously this cannot be candidate he is this can be a candidate key this proper subset is what one is a CD and a cz a CD is still a super key so this cannot be a candidate key what about a CD proper subset of a CD is what AC you can see the CD and ad right and a C and D so any of these if a super he then definitely it would not be a candidate key now find out AC closer see here I can write down a and C now functional dependencies check a determine B I have a so I can write down here B D determine E but I don't have B so I cannot use so this cannot determine all that review so this is not a super key what about C D here I can write down CD I cannot use this one because I don't have a I have D so I can write down here E right again check a do we have a now no I don't have so this is not a super key because the set of closure set is not containing all the attributes you can check out this closure this will not be a super key this and this this would not be a super key right so now none of the proper subset of a CD is a super key so this is a right now you will see that there can be many combinations for all the combinations you need to check proper subset and other than half you can find out that it would be very tough to find out that how many candidate keys are there in a relation right if suppose I have in a relation ten attributes then definitely to find out proper subsets of each super key and to check individually that would be a tough process right so now for this you need a shortcut and that short break we will I will discuss in the next video I'll take one example one or two example and with the help of that short trick I'll discuss how to find out all the candidate keys in a given relation right within second seconds you can find out all the candidate keys right in this table in this relation for this relation only one candidate he is there that is a CT I know the answer using that trick only but that trick I'll the solution of this why I am saying that only ACD is a candidate key no other candidate he is there right that I'll discuss in the next video fine the main promote of this video was to get to know what is attribute closer and how to find out attribute closer right and what is need of attribute closer you need attribute closer to find out super is an candidate keys now we will discuss it with a simple trick in the next video so now we'll see in the next video till then bye take care
