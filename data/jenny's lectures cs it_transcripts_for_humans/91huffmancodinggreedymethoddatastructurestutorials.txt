With timestamps:

00:00 - hi guys welcome back today's topic is
00:02 - Huffman coding Huffman coding what you
00:05 - can say Huffman algorithm is what it is
00:08 - a data compression technique or
00:09 - compression or you said it or you can
00:11 - say data compression algorithm or it can
00:14 - also be known as variable length coding
00:16 - algorithm in which data the size of data
00:19 - is to be reduced or the messages to be
00:21 - produced see sometimes when you store
00:24 - something in your computer the sizes
00:26 - size of that file is very big then what
00:28 - you do is you compress that file and
00:30 - then you store that file in your
00:31 - computer or computer so that it will
00:33 - take less time ok so that's what the
00:35 - compression means reducing the size of
00:37 - the message ok secondly when you want to
00:41 - transfer something on network when if
00:43 - then if the you know you want to
00:46 - transfer a file from sender to receiver
00:48 - then if that file or that message is
00:50 - compressed then obviously it will take
00:53 - less ghosts or you can say the bits
00:56 - which are used to represent for that
00:58 - message will be less that is what the
01:01 - compression means so in this video I am
01:04 - going to discuss and discuss with you
01:05 - fixed length coding and also the
01:07 - variable length coding technique see
01:10 - simple funda is what when something is
01:13 - to be transferred on a network then what
01:15 - is the what is the funda that suppose
01:19 - you want to transfer this message and
01:20 - each character will be coded in a sky
01:23 - form okay and then ask suppose a is to
01:27 - be transferred first of all then SK
01:29 - folding for a is what that is
01:33 - estee code is 65 and then this SK code
01:36 - will be converted into this binary form
01:39 - 65 Comcast looking is 0 1 1 ok this is
01:47 - the binary form for this a to transfer
01:51 - this a first a will be this sky coding
01:55 - will be used and that s Kai could make
01:57 - out the 8 bit will be used to represent
01:59 - a character ok so this data is to be
02:03 - transferred for a single character how
02:05 - many bits is to be used 8 bits
02:11 - fine in case of a normal message okay
02:14 - now see in this message suppose we want
02:19 - to transfer this message on a network
02:21 - then how many bits is to be used see I
02:25 - was saying the coast when data is to be
02:27 - compressed then for transferring that
02:29 - data or that message the coast will be
02:31 - reduced Coast means number of bits to be
02:34 - used ok here goes to means the number of
02:36 - bits to be used now you want to transfer
02:38 - this message without any without
02:41 - applying any compression technique then
02:42 - there's simple fun dies by default what
02:44 - is the technique every character would
02:47 - be transferred into eight bits binary
02:50 - form okay how many characters are there
02:53 - twenty characters are there these are
02:56 - twenty characters okay
02:59 - then how many bits will be required
03:02 - twenty characters are there and for each
03:05 - character how many bits will be used to
03:08 - represent that character because
03:10 - computer you know computer only
03:12 - understand the language of 0 and 1 ok 20
03:17 - into 8 that is 160 bits will be used to
03:23 - transfer this message normally without
03:25 - using any compression technique 160 bits
03:29 - is to be used ok now see this is also
03:34 - known as what fixed length coding why
03:39 - this is known as fixed length coding
03:41 - because each character see each
03:44 - character is simply a string of zeros
03:48 - and ones okay and each character is
03:52 - having eight bits fixed length we have
03:56 - see is is represented by this one B is
04:00 - what B is a sky code is what 66 and 66
04:04 - would be converted into this binary form
04:07 - and binary form and this would be Z 1 0
04:10 - 1 something like that this is the binary
04:16 - code for 66 same with CC is what 67 see
04:20 - in this message I am taking only a b c d
04:24 - the only five characters I am taking
04:26 - just for a simple example a B C D and E
04:31 - 68 and this would be 69 same 67 would be
04:37 - converted into binary but does it
04:40 - okay binary form and each character is
04:44 - represented with 8 bits so this is what
04:49 - fixed now each character is representing
04:52 - 8-bit representation that is why it is
04:54 - known as fixed length coding fine and in
04:59 - fixed length coding or to transfer a
05:01 - simple message without any compressing
05:04 - any compression technique the coast is
05:06 - what it will take 160 bits now after
05:09 - applying some compression technique we
05:13 - can reduce the length of this message so
05:16 - you can say the cost of this message to
05:18 - some visits may be 160 cm Hokie 120 IJ
05:22 - 100 as a it depends okay yeah we will we
05:24 - will see that technique also now see
05:28 - when we are using 8 bits I am just
05:33 - telling you a simple funda before
05:34 - discussing this one suppose you have two
05:37 - bits
05:38 - take a 1 m2
05:41 - now with the help of these two bits how
05:44 - many combinations are possible 0 0 0 1 1
05:50 - 0 and 1 1 for different combinations are
05:54 - possible yes or no now with this four
05:57 - different combination you can represent
05:59 - four different characters let us suppose
06:04 - with 0 0 I am representing a b c and 4 1
06:10 - 1 i am taking this d ok now if you have
06:15 - 3 bits 1 2 & 3 how many different
06:20 - combinations are possible with these 3
06:23 - bits 8 combinations I hope do you know
06:25 - this concept ok to raise to power 3 that
06:28 - is it something like this 0 0 0 okay so
06:36 - with the help of three mates if you are
06:37 - taking 3
06:38 - rather than 8bits then we can represent
06:41 - how many characters eight characters are
06:45 - different characters fine similarly if
06:49 - you are taking four bits then how many
06:51 - different characters you can represent
06:53 - to raise to power 4 that is 16 here we
06:58 - are having 8 bits then we can represent
06:59 - how many different characters to raise
07:01 - to power 8 I think that is 256
07:05 - characters fine but we are taking one
07:08 - simple example in this example how many
07:10 - different characters we have only five
07:12 - characters we have because is repeating
07:15 - these also repeating series repeating
07:17 - these repeating and is also repeating
07:18 - okay different characters are only five
07:21 - a B C D and E so with the help of two
07:25 - bits can you represent these five
07:27 - characters no we cannot represent
07:29 - because with the help of two bits only
07:31 - four different characters can be
07:33 - represented that is why we will take how
07:35 - many bits three bits with the help of
07:38 - three bits how many different
07:39 - combinations are possible eight
07:41 - combinations we have only five
07:42 - characters so this one is ideal case for
07:44 - us okay so rather than taking eight bits
07:49 - we will take what three bits to
07:52 - represent each characters suppose for
07:55 - this one I am writing a b c b and e
08:00 - these are five characters we have these
08:03 - are still unused or you can say left
08:07 - okay now suppose we are taking this
08:11 - technique this is our own technique okay
08:13 - now how many to transfer this message
08:17 - how the strong message will be
08:19 - transferred for a we will write what 0 0
08:22 - and 0 next is B for B what is return 0 0
08:27 - 1 for B again 0 0 1 and something like
08:29 - like this we can write the coding now
08:33 - how many total bit are required to
08:35 - transfer this message total bits we have
08:38 - what 20 into for each character how many
08:43 - bits are to be used 3 bits for each
08:46 - character 20 into 3 that is 60
08:51 - bits fine hair bits was 120 160 bit
08:58 - sorry now in this case one more thing is
09:01 - what the main funda is the problem will
09:05 - be there when decoding that message
09:07 - suppose we have transferred
09:08 - we have encoded this message and we have
09:11 - transferred now how the receiver will
09:14 - know that 0 0 0 means a how that
09:17 - receiver will decode that message
09:22 - message receiver ko kya mallika 0 0 0 0
09:25 - 0 1 and this something like this now how
09:28 - the receiver will know that 0 0 0 means
09:30 - is 0 0 1 means B that is the problem now
09:34 - in the case of decoding so whose problem
09:38 - for so alpha Nikoli what a Agha we will
09:41 - also send this table with this message
09:49 - fine now
09:51 - when the receiver gets this message as
09:54 - well as this table then easily that is
09:59 - your will see the message and then will
10:02 - verify with the that table and then he
10:06 - can easily say that 0 0 0 means what a 0
10:11 - 0 1 means what B because in this table
10:15 - we have already written 0 0 0 means a 0
10:18 - 0 1 means B si UD n e something like
10:21 - this so this table will also be sent now
10:27 - for sending this table obviously some
10:29 - bits will be required see the 60 bits
10:32 - are just for this message now you are we
10:35 - are sending this table also in case of
10:38 - normal message of the transfer correct a
10:40 - no need of transferring the table
10:42 - because by default 8 bits required who
10:45 - me your sub cop at the higher value of a
10:47 - is what 65 sky coding will be used
10:51 - simply 160-bit ho jayega no need to send
10:54 - any table but in this case we have to
10:56 - send this table okay now for sending
10:58 - this table how many bits is to be
11:00 - required see a
11:04 - VCU D&E these are characters obviously
11:07 - these five characters is to be sent
11:10 - then characters cases and only
11:12 - characters will be transfer will be
11:14 - converted into that a sky core then into
11:16 - the binary form and binary form a kowai
11:19 - each character would take what how many
11:21 - bits eight bits now we have got five
11:24 - characters into for each character how
11:28 - many bits would require eight take a
11:35 - four Tibbets plus C this these bits are
11:39 - also be to be transferred now because
11:41 - the a bit uptick is scaling only for
11:43 - this 5 characters now corresponding to
11:45 - this 5 characters we are also sending 0
11:47 - 0 0 corresponding to this B we will also
11:49 - send 0 0 1 so a B the OP kibbutz Amina
11:53 - fine
11:54 - now how many bits are there these are
11:56 - how many bits for five characters how
11:58 - many bits will be required three bits 5
12:01 - into a Kaleb Athene BK limits which will
12:04 - basically be 3d caleb is Yuri Kelly b3 5
12:07 - into 3 plus 15 make it now how they up
12:11 - got 55 I guess total number of bits will
12:17 - be transferred 60 plus 55 means 5 1 1 5
12:29 - bits okay when you use this technique
12:32 - this is also fixed length coding because
12:35 - we have used 3 bits for each characters
12:39 - 3 bits are fixed now but we haven't used
12:41 - 8 bits here we have using 3 bits this is
12:44 - customized code on code ok in this case
12:48 - 1 1 5 bits has to be used
12:51 - now what is there in Huffman coding we
12:55 - will discuss now Huffman coding this is
12:56 - what variable length coding variable
13:00 - length coding this is what we have
13:06 - discussed was fixed length coding now
13:08 - what is variable length coding Huffman
13:10 - coding make yoga may be a would a would
13:15 - be represented with 3 bits
13:17 - and B would be represented with two bits
13:19 - maybe C would be represented with two
13:21 - bits they would be represented with
13:23 - three bits e maybe with four bits so
13:26 - this is variable now because in this
13:28 - case every character is represented with
13:30 - three bits that is fixed but in Huffman
13:33 - coding maybe a would be represented with
13:34 - three to then be with to be with two
13:38 - bits and C with two bits like something
13:39 - like that so this is variable length
13:41 - coding that is not fixed okay now how we
13:45 - will compress this message using Huffman
13:49 - coding rather than a sky code will not
13:52 - use the sky coding value to visually
13:54 - we'll use what Huffman coding now we
13:57 - have drawn a table and understable we
13:59 - have written the frequency or you can
14:01 - say count of each characters see
14:03 - different how many different characters
14:05 - we have five characters ABCD and E and a
14:09 - is ribbiting four times B is repeating
14:11 - seven times C 3 times D 2 times and E 4
14:14 - times in this message so this is what
14:16 - frequency or you can say count okay now
14:20 - the first step is you are supposed to
14:23 - design a Huffman tree and how that tree
14:26 - is to be designed using Huffman
14:28 - algorithm first of all arrange all the
14:32 - characters according to their increasing
14:35 - order of their count ok very first the
14:41 - least frequency or the count is what -
14:44 - then we'll write D first then C then e a
14:51 - and B fine and the count of D is what 2
14:57 - 4 CH 3 4 E it's 4 4 8 4 & 4 beats 7 you
15:04 - can either write down URI
15:05 - it's up to you because we have 4 & 4
15:07 - both are same now first of all take 2
15:11 - characters which are having least
15:13 - frequency or least count which are two
15:17 - characters D and C because two out of
15:19 - two three four five and seven which are
15:22 - least two or three or while writing a
15:26 - program or something like that you can
15:28 - say
15:28 - we arrange these characters in priority
15:31 - queue and priority is what depends on
15:33 - the frequency count if frequency counter
15:36 - is 2 then it will have more priority
15:39 - then C then a then a and B so this one
15:41 - you can say priority queue or this can
15:44 - also be implemented using min-heap tree
15:47 - okay I am just going to tell you in the
15:50 - layman language okay what is the funda
15:53 - take B and C like this C we are taking B
15:58 - and C for D we have count is 2 for C
16:04 - it's 3 now merge these 2 and create a
16:10 - parent node and the count will be 2 plus
16:13 - 3 that is 5 now we are done with this B
16:17 - and with this C okay now in our priority
16:22 - queue what we have we have four four
16:24 - seven and this five C one knew that the
16:28 - parent of 20 that is 5 now arrange 5 4 4
16:32 - 7 in increasing order of their frequency
16:36 - fine so first of all what you will write
16:39 - e a after a and a what is there this one
16:44 - this is complete node now then it would
16:47 - be 5 and then 7 okay now out of 4 4 7 &
16:52 - 5
16:53 - take the two characters having least
16:55 - frequency we are having a and a 4 4 ok
16:58 - now see e a and these are having but
17:09 - count is four and four and after merging
17:13 - what is the count that is 8 now we are
17:17 - done with this e and this a now we are
17:20 - left with three frequency count 1 is the
17:22 - 7 1 is 5 and 1 is 8 now arrange this 7 5
17:27 - & 8 in increasing order of their
17:29 - frequency counter first of all what we
17:31 - will write this node 5 then 7 and then 8
17:34 - now out of these 3 take 2 characters
17:38 - having minimum a frequency we will take
17:40 - this wife and this 7
17:42 - minimum see up 100 now always the
17:46 - minimum count frequency count would be
17:49 - left side okay and you know that greater
17:53 - than that minimum would be on right side
17:55 - then we'll take five seven eight out of
17:57 - these what we'll take five and seven
18:00 - okay and when you are designing a tree
18:02 - this five would be left left side and
18:05 - this seven would be right side okay now
18:08 - you know we don't have so much space for
18:11 - may seem a scope date Kareem we have
18:13 - this node 5 and we are merging the 7
18:18 - with this 5 now then we will write this
18:20 - 7 at this level only this level only
18:23 - will not write 7 here okay
18:25 - you'll write 7 here 7 Kaylee what we
18:28 - have B and Moore's these tubes and the
18:32 - total would be what - well now we have
18:35 - done this with this B now only left
18:37 - frequencies are this node 1 is the
18:39 - snowed having frequency 8 frequency
18:41 - count and 1 is to n now these two are
18:45 - against these two in increasing order of
18:48 - their frequency the first node would be
18:49 - this one 8 per la I got 12 ki Kowski bad
18:53 - ayah or just we are left with only two
18:56 - nodes so I made oath on old lady had Oh
18:58 - correct terminal any Heather will take a
19:00 - 1012 but will not write like this well
19:03 - up car you're happy here
19:04 - Cusco at coomer's ki Orakei on 20 um
19:07 - yeah no this one is wrong always the
19:10 - rule is what the minimum frequency will
19:13 - be on the left side and the greater than
19:16 - that would be on the right side then 3
19:18 - would be will take a tenth 12 now tree
19:21 - would be something like this here we
19:26 - have e a 4 4 and this one was 8 and 8
19:35 - this side what we have this 12 we are
19:38 - merging these 2 or 12 impressive hemara
19:42 - wanna have with a 5 you happy top now 7
19:44 - 5 can you check your head to or
19:46 - reschedule any J that is 3 or you can
19:49 - say here what we have D here you out we
19:51 - have C or 7 k epic you have any past
19:54 - B and after
19:56 - merging of these two this one what we
20:00 - have 20 okay so this is a final drink
20:06 - this one the characters will always be
20:12 - in the at the leaf node EA d CN B now we
20:19 - have drawn this tree now second step is
20:22 - what you have to traverse this tree and
20:25 - you have to assign 0 & 1 now 0 would be
20:28 - assigned to the left side and 1 would be
20:31 - assigned to the right child so 2 n take
20:34 - a left child here this one 0 would be
20:36 - assigned here to the left side is 0
20:38 - would be a sign right side 1 right side
20:41 - 1 now see this one this is right of it
20:44 - then one would be assigned now 12 here
20:47 - it is what this is left then 0 left 0
20:51 - right side here then 1 now we have sine
20:54 - 0 & 1 to each this edge okay now you
21:00 - have to find out the coding Huffman
21:02 - coding for each characters now how to
21:04 - find out the Huffman coding okay now
21:09 - this is a Huffman tree okay find out the
21:12 - coding for each character for a how to
21:14 - find out C character would be at the
21:16 - leaf node a how to traverse the tree
21:19 - always we cannot reverse the tree from
21:21 - the leaf node we will traverse it from
21:23 - the root 1 traverse it from the root end
21:26 - traverse the tree till you reach the
21:28 - node a now 0 & 1
21:32 - here is what a the coding for a would be
21:35 - what 0 1 0 1 for D it's what 1 1 1 1 for
21:43 - C what is the this coding Huffman coding
21:45 - here we have 1 0 & 1 1 0 & 1 for D 1 0 0
21:54 - 1 0 0 for e 0 0
22:02 - okay now this is the Huffman coding see
22:05 - every character is having not having the
22:08 - fixed code having variable code is
22:10 - represented with two bits C and D are
22:13 - represented with three bits so that is
22:15 - why it is known as what variable length
22:17 - coding and one more point you have to
22:19 - take care of it
22:20 - see a poiiceman thickness a capital
22:23 - rather frequency of what you consider
22:25 - account of B is what highest so the
22:30 - letter or the character having the
22:32 - highest or the maximum pound the
22:34 - character which is generating you know
22:36 - many times which that character will
22:39 - have the Huffman code having less number
22:42 - of bits Huffman code of this B is worth
22:45 - having two bits and for to see D is
22:49 - occurring two times and Huffman code for
22:51 - this two is what having three bits maybe
22:55 - some character is there which is
22:57 - occurring one times and the Huffman code
22:59 - of that character would be of four bits
23:01 - so Jo character subset Java time I can't
23:03 - escape frequencies of Sujatha who use
23:05 - Kaufmann code code code my bits can we
23:07 - come homie okay that is the rule and
23:11 - that's half man coding will also satisfy
23:17 - the prefix rule I will discuss that role
23:20 - in later first of all let us find out
23:22 - the size of what you can say the you
23:25 - know number of total number of bits in
23:27 - transferring while you are transferring
23:29 - this message how many total number of in
23:30 - bits will be transferred for this
23:33 - message okay now you cannot say keep 20
23:38 - characters are there 20 into polemic I
23:41 - had a twenty into eight when we were
23:43 - taking eight bits for representing a
23:44 - character those two time honey katha
23:46 - twenty into three at that time you are
23:48 - taking three bits for representing of
23:49 - the character but we happier by solution
23:51 - except a because we are not having the
23:53 - fixed bits we are having variable number
23:54 - of bits now how to calculate the total
23:58 - number of bits or you can say the length
23:59 - of this message how we will calculate C
24:02 - frequency of a is what for four into
24:06 - number of bits today use to represent to
24:10 - represent this a is what one and two 4
24:12 - into 2 plus
24:15 - for b7 into 2 + 4 C 3 into 3 + 4 D 2
24:23 - into 3 plus 4 E 4 into number of
24:27 - frequency into the number of bits 1 2
24:32 - the total would be the number of bits
24:35 - would be 45 bits for only this message
24:40 - now how the message will be decoded at
24:45 - that place of a what you can write 0 1
24:49 - at the place of B what you will write 1
24:51 - 1 at the place of being able to write 1
24:53 - 1 at the place of C what you would write
24:55 - 1 0 1 in like this this message or the
24:59 - message in binary form will be sent from
25:01 - sender to receiver when the receiver
25:03 - gets this message then how the receiver
25:06 - will decode this message how the
25:08 - receiver will get to know that 0 1 means
25:11 - a 1 1 means B how skinny can operate
25:17 - either you have you will send this table
25:19 - or you will send this 3 okay 3 in
25:24 - serialized form because obviously you
25:26 - can't send this tree something like this
25:28 - is serialized for me I put recuperation
25:30 - operator okay
25:32 - now either this table would be sent or
25:34 - this tree would be sent so that by
25:36 - taking by traversing or by looking at
25:39 - this tree or the stable this receiver
25:41 - will get to know that the 4 0 1 is
25:43 - forward a the code 1 1 is 4 what be
25:47 - something like this so 45 bits of kaga
25:50 - for only this the length of this message
25:54 - this is the length of this message only
25:55 - okay plus we will send this table
26:01 - suppose okay now how many bits would be
26:05 - required to send the stream in this
26:08 - table will send the characters and
26:09 - corresponding code Huffman code for
26:11 - these characters now for sending these
26:14 - characters how these characters will be
26:16 - sent C characters will be saying what
26:19 - the characters would be converted into a
26:20 - sky code than a sky to go code second
26:22 - characteristic converting into 8-bit
26:24 - binary form okay now we have
26:28 - many characters five characters into
26:31 - each character would be represented with
26:33 - Gator bits in a sky code then 5 into 8
26:35 - that is 40 now along with these
26:40 - characters these Huffman code will also
26:43 - be sent four characters for Tibbets
26:47 - would be required for sending these
26:48 - codes how many bits would be required 40
26:51 - plus 1 2 3 4 5 6 7 8 9 10 11 12
26:56 - how many bits are there 12 bits won't be
26:59 - required the total would be what 52 now
27:05 - total bets to be transferred from sender
27:08 - to receiver would be 45 + 52 that is 97
27:16 - bits so in Huffman coding when you
27:21 - compress this message any message using
27:23 - Huffman coding or I'm taking example of
27:25 - this message then 97 bits would be
27:27 - required 97 bits would be used from Sen
27:29 - sent from sender to receiver value 1/16
27:32 - use givethem place created now 1 1 5 and
27:35 - using Huffman coding it becomes what 97
27:38 - bits okay now see how the that you know
27:45 - receiver will decode this message
27:46 - suppose receiver is having this tree in
27:49 - the serialized phone ok now how that
27:54 - decoder will decode this message when
27:59 - the you know when receiver will see the
28:03 - message 0 then traverse corollary you 0
28:07 - 0 safe copy I go to it
28:09 - did you get any character no so 0 cm
28:12 - kiss boba character - Alyssa things
28:14 - check out the next next bit that is 1 0
28:19 - 1 traverse this tree 0 1 of course we
28:23 - have reached to a character a then the
28:26 - receiver will decode this 0 1 and will
28:28 - write what hey now again this one is
28:31 - done character Malkowski bar next bit is
28:35 - what 1 traverse this tree 1 we have
28:39 - reached to this 12 but is there any
28:41 - do you reach - have you reached to the
28:44 - leaf node because characters are at the
28:46 - leaf node only no we're still in the
28:48 - middle of the tree so we cannot write
28:50 - any character here now next one one one
28:54 - who you find a character that is B then
28:58 - receiver will decode it like B again one
29:03 - you see one again one one then again
29:06 - big fine like this he'll the receiver
29:13 - will check out this tree and then decode
29:15 - this message for to see how this would
29:19 - be done next bit is what one one because
29:22 - because here a here is no character the
29:25 - next bit is 0 1 0 here also we have no
29:29 - character the next bit is 1 1 0 1 yes we
29:33 - have reached to a character C like this
29:35 - the message will be decoded with the
29:38 - help of this Huffman tree so along with
29:42 - the data along with the message either
29:44 - the tree or the table would be also be
29:45 - sent okay obviously it way would be
29:48 - sending serialized form only ok so these
29:51 - are the number of bits would be required
29:52 - when you compress this message or even
29:55 - send this message using Huffman coding
29:57 - now the time complexity of this would be
30:01 - theta n log n now see I have told you 1
30:09 - funda that is perfect school that
30:11 - Huffman coding works on the technique
30:13 - that is prefix code what is the prefix
30:16 - code algorithm or what is the proof what
30:18 - is the prefix code rule you can say it
30:20 - says no code is prefix of another code
30:23 - let us take a simple example then you
30:25 - will get it
30:26 - file or in example we have only 3
30:28 - characters and the code for these
30:30 - characters are for a it's 0 for B it's 1
30:33 - for seeds 0 1 I am taking the simple
30:36 - example 0 1 and code for C is 0 now
30:40 - suppose from sender to receiver when he
30:41 - message has been transmitted be there in
30:43 - the encoded form and that message is
30:46 - what 0 0 1 now the receiver will decode
30:49 - this message with the help of this table
30:51 - because this table will also be sent
30:53 - with this table
30:53 - sorry with this
30:55 - okay now there will be ambiguity in
30:58 - recording this message how that is
31:00 - healer will decode this message first
31:03 - bit is what zero receiver will check in
31:05 - this table zero is for what a now this
31:09 - zero first a zero is for what a now next
31:13 - bit receiver will check the next bit 0
31:15 - again this zero is forward a now one one
31:21 - is forward B and the second second
31:25 - option would be what four zero it's a
31:29 - and again 4 0 1 4 0 1 that is Hever will
31:33 - decode it
31:34 - see now this one message will be decoded
31:39 - may be decoded in two forms a B or a C
31:43 - so this is ambiguity because we have
31:45 - sent only one message and the receiver
31:47 - kun-hee Petacci legacy which one is
31:48 - right this one is right or this one is
31:50 - right and why the sign bigotry is there
31:52 - because this zero code of this a is
31:57 - prefix of this code this code 0 okay for
32:05 - C code is what 0 1 and a kala 0 case
32:07 - Kelly hey Kelly so it's a zero for moles
32:09 - at then this one is what prefix and this
32:14 - code of this is what prefix of another
32:16 - code so this should not be happened no
32:19 - code should be prefix of another code
32:22 - okay only if this condition is satisfied
32:27 - then only there would be no ambiguity no
32:30 - ambiguity in that the receiver side
32:33 - while decoding the message and the
32:36 - Huffman coding the Huffman coding will
32:39 - always ensure the prefix rule the prefix
32:43 - code or prefix rule you can easily check
32:47 - kuiba code TCB another code chi have a
32:50 - prefix in a ho okay so if my coding
32:54 - Kereopa about beach and rock near Half
32:57 - Men code will always Huffman coding will
32:59 - always follow this prefix rule and what
33:01 - is the prefix ole many a boys example
33:03 - get through Battaglia now in a sunrise
33:06 - to me you
33:08 - I tell you the huffman coding then these
33:09 - are the four points it was discovered or
33:11 - developed by David Huffman in 1951 next
33:15 - is it in the encoding follows the prefix
33:18 - rule I have already discussed what is
33:19 - the prefix rule no code can be a prefix
33:21 - of another code next is the most
33:23 - generated character we'll get the small
33:25 - code and the least generated character
33:27 - will get the larger code we have already
33:30 - you discussed in that example okay
33:32 - now the time complexity of this Huffman
33:34 - coding is or theta n log and in next
33:38 - video I will discuss you an example of
33:40 - Huffman coding with probabilities
33:42 - sometimes in exam they can give you the
33:47 - characters and they will give you not
33:49 - the frequency or count they'll give you
33:51 - the probabilities of those characters
33:52 - and then they will ask you what is the
33:54 - average length of the message so in next
33:57 - video I'll discuss with that question
34:02 - okay till then take and take care bye
34:03 - bye

Cleaned transcript:

hi guys welcome back today's topic is Huffman coding Huffman coding what you can say Huffman algorithm is what it is a data compression technique or compression or you said it or you can say data compression algorithm or it can also be known as variable length coding algorithm in which data the size of data is to be reduced or the messages to be produced see sometimes when you store something in your computer the sizes size of that file is very big then what you do is you compress that file and then you store that file in your computer or computer so that it will take less time ok so that's what the compression means reducing the size of the message ok secondly when you want to transfer something on network when if then if the you know you want to transfer a file from sender to receiver then if that file or that message is compressed then obviously it will take less ghosts or you can say the bits which are used to represent for that message will be less that is what the compression means so in this video I am going to discuss and discuss with you fixed length coding and also the variable length coding technique see simple funda is what when something is to be transferred on a network then what is the what is the funda that suppose you want to transfer this message and each character will be coded in a sky form okay and then ask suppose a is to be transferred first of all then SK folding for a is what that is estee code is 65 and then this SK code will be converted into this binary form 65 Comcast looking is 0 1 1 ok this is the binary form for this a to transfer this a first a will be this sky coding will be used and that s Kai could make out the 8 bit will be used to represent a character ok so this data is to be transferred for a single character how many bits is to be used 8 bits fine in case of a normal message okay now see in this message suppose we want to transfer this message on a network then how many bits is to be used see I was saying the coast when data is to be compressed then for transferring that data or that message the coast will be reduced Coast means number of bits to be used ok here goes to means the number of bits to be used now you want to transfer this message without any without applying any compression technique then there's simple fun dies by default what is the technique every character would be transferred into eight bits binary form okay how many characters are there twenty characters are there these are twenty characters okay then how many bits will be required twenty characters are there and for each character how many bits will be used to represent that character because computer you know computer only understand the language of 0 and 1 ok 20 into 8 that is 160 bits will be used to transfer this message normally without using any compression technique 160 bits is to be used ok now see this is also known as what fixed length coding why this is known as fixed length coding because each character see each character is simply a string of zeros and ones okay and each character is having eight bits fixed length we have see is is represented by this one B is what B is a sky code is what 66 and 66 would be converted into this binary form and binary form and this would be Z 1 0 1 something like that this is the binary code for 66 same with CC is what 67 see in this message I am taking only a b c d the only five characters I am taking just for a simple example a B C D and E 68 and this would be 69 same 67 would be converted into binary but does it okay binary form and each character is represented with 8 bits so this is what fixed now each character is representing 8bit representation that is why it is known as fixed length coding fine and in fixed length coding or to transfer a simple message without any compressing any compression technique the coast is what it will take 160 bits now after applying some compression technique we can reduce the length of this message so you can say the cost of this message to some visits may be 160 cm Hokie 120 IJ 100 as a it depends okay yeah we will we will see that technique also now see when we are using 8 bits I am just telling you a simple funda before discussing this one suppose you have two bits take a 1 m2 now with the help of these two bits how many combinations are possible 0 0 0 1 1 0 and 1 1 for different combinations are possible yes or no now with this four different combination you can represent four different characters let us suppose with 0 0 I am representing a b c and 4 1 1 i am taking this d ok now if you have 3 bits 1 2 & 3 how many different combinations are possible with these 3 bits 8 combinations I hope do you know this concept ok to raise to power 3 that is it something like this 0 0 0 okay so with the help of three mates if you are taking 3 rather than 8bits then we can represent how many characters eight characters are different characters fine similarly if you are taking four bits then how many different characters you can represent to raise to power 4 that is 16 here we are having 8 bits then we can represent how many different characters to raise to power 8 I think that is 256 characters fine but we are taking one simple example in this example how many different characters we have only five characters we have because is repeating these also repeating series repeating these repeating and is also repeating okay different characters are only five a B C D and E so with the help of two bits can you represent these five characters no we cannot represent because with the help of two bits only four different characters can be represented that is why we will take how many bits three bits with the help of three bits how many different combinations are possible eight combinations we have only five characters so this one is ideal case for us okay so rather than taking eight bits we will take what three bits to represent each characters suppose for this one I am writing a b c b and e these are five characters we have these are still unused or you can say left okay now suppose we are taking this technique this is our own technique okay now how many to transfer this message how the strong message will be transferred for a we will write what 0 0 and 0 next is B for B what is return 0 0 1 for B again 0 0 1 and something like like this we can write the coding now how many total bit are required to transfer this message total bits we have what 20 into for each character how many bits are to be used 3 bits for each character 20 into 3 that is 60 bits fine hair bits was 120 160 bit sorry now in this case one more thing is what the main funda is the problem will be there when decoding that message suppose we have transferred we have encoded this message and we have transferred now how the receiver will know that 0 0 0 means a how that receiver will decode that message message receiver ko kya mallika 0 0 0 0 0 1 and this something like this now how the receiver will know that 0 0 0 means is 0 0 1 means B that is the problem now in the case of decoding so whose problem for so alpha Nikoli what a Agha we will also send this table with this message fine now when the receiver gets this message as well as this table then easily that is your will see the message and then will verify with the that table and then he can easily say that 0 0 0 means what a 0 0 1 means what B because in this table we have already written 0 0 0 means a 0 0 1 means B si UD n e something like this so this table will also be sent now for sending this table obviously some bits will be required see the 60 bits are just for this message now you are we are sending this table also in case of normal message of the transfer correct a no need of transferring the table because by default 8 bits required who me your sub cop at the higher value of a is what 65 sky coding will be used simply 160bit ho jayega no need to send any table but in this case we have to send this table okay now for sending this table how many bits is to be required see a VCU D&E these are characters obviously these five characters is to be sent then characters cases and only characters will be transfer will be converted into that a sky core then into the binary form and binary form a kowai each character would take what how many bits eight bits now we have got five characters into for each character how many bits would require eight take a four Tibbets plus C this these bits are also be to be transferred now because the a bit uptick is scaling only for this 5 characters now corresponding to this 5 characters we are also sending 0 0 0 corresponding to this B we will also send 0 0 1 so a B the OP kibbutz Amina fine now how many bits are there these are how many bits for five characters how many bits will be required three bits 5 into a Kaleb Athene BK limits which will basically be 3d caleb is Yuri Kelly b3 5 into 3 plus 15 make it now how they up got 55 I guess total number of bits will be transferred 60 plus 55 means 5 1 1 5 bits okay when you use this technique this is also fixed length coding because we have used 3 bits for each characters 3 bits are fixed now but we haven't used 8 bits here we have using 3 bits this is customized code on code ok in this case 1 1 5 bits has to be used now what is there in Huffman coding we will discuss now Huffman coding this is what variable length coding variable length coding this is what we have discussed was fixed length coding now what is variable length coding Huffman coding make yoga may be a would a would be represented with 3 bits and B would be represented with two bits maybe C would be represented with two bits they would be represented with three bits e maybe with four bits so this is variable now because in this case every character is represented with three bits that is fixed but in Huffman coding maybe a would be represented with three to then be with to be with two bits and C with two bits like something like that so this is variable length coding that is not fixed okay now how we will compress this message using Huffman coding rather than a sky code will not use the sky coding value to visually we'll use what Huffman coding now we have drawn a table and understable we have written the frequency or you can say count of each characters see different how many different characters we have five characters ABCD and E and a is ribbiting four times B is repeating seven times C 3 times D 2 times and E 4 times in this message so this is what frequency or you can say count okay now the first step is you are supposed to design a Huffman tree and how that tree is to be designed using Huffman algorithm first of all arrange all the characters according to their increasing order of their count ok very first the least frequency or the count is what then we'll write D first then C then e a and B fine and the count of D is what 2 4 CH 3 4 E it's 4 4 8 4 & 4 beats 7 you can either write down URI it's up to you because we have 4 & 4 both are same now first of all take 2 characters which are having least frequency or least count which are two characters D and C because two out of two three four five and seven which are least two or three or while writing a program or something like that you can say we arrange these characters in priority queue and priority is what depends on the frequency count if frequency counter is 2 then it will have more priority then C then a then a and B so this one you can say priority queue or this can also be implemented using minheap tree okay I am just going to tell you in the layman language okay what is the funda take B and C like this C we are taking B and C for D we have count is 2 for C it's 3 now merge these 2 and create a parent node and the count will be 2 plus 3 that is 5 now we are done with this B and with this C okay now in our priority queue what we have we have four four seven and this five C one knew that the parent of 20 that is 5 now arrange 5 4 4 7 in increasing order of their frequency fine so first of all what you will write e a after a and a what is there this one this is complete node now then it would be 5 and then 7 okay now out of 4 4 7 & 5 take the two characters having least frequency we are having a and a 4 4 ok now see e a and these are having but count is four and four and after merging what is the count that is 8 now we are done with this e and this a now we are left with three frequency count 1 is the 7 1 is 5 and 1 is 8 now arrange this 7 5 & 8 in increasing order of their frequency counter first of all what we will write this node 5 then 7 and then 8 now out of these 3 take 2 characters having minimum a frequency we will take this wife and this 7 minimum see up 100 now always the minimum count frequency count would be left side okay and you know that greater than that minimum would be on right side then we'll take five seven eight out of these what we'll take five and seven okay and when you are designing a tree this five would be left left side and this seven would be right side okay now you know we don't have so much space for may seem a scope date Kareem we have this node 5 and we are merging the 7 with this 5 now then we will write this 7 at this level only this level only will not write 7 here okay you'll write 7 here 7 Kaylee what we have B and Moore's these tubes and the total would be what well now we have done this with this B now only left frequencies are this node 1 is the snowed having frequency 8 frequency count and 1 is to n now these two are against these two in increasing order of their frequency the first node would be this one 8 per la I got 12 ki Kowski bad ayah or just we are left with only two nodes so I made oath on old lady had Oh correct terminal any Heather will take a 1012 but will not write like this well up car you're happy here Cusco at coomer's ki Orakei on 20 um yeah no this one is wrong always the rule is what the minimum frequency will be on the left side and the greater than that would be on the right side then 3 would be will take a tenth 12 now tree would be something like this here we have e a 4 4 and this one was 8 and 8 this side what we have this 12 we are merging these 2 or 12 impressive hemara wanna have with a 5 you happy top now 7 5 can you check your head to or reschedule any J that is 3 or you can say here what we have D here you out we have C or 7 k epic you have any past B and after merging of these two this one what we have 20 okay so this is a final drink this one the characters will always be in the at the leaf node EA d CN B now we have drawn this tree now second step is what you have to traverse this tree and you have to assign 0 & 1 now 0 would be assigned to the left side and 1 would be assigned to the right child so 2 n take a left child here this one 0 would be assigned here to the left side is 0 would be a sign right side 1 right side 1 now see this one this is right of it then one would be assigned now 12 here it is what this is left then 0 left 0 right side here then 1 now we have sine 0 & 1 to each this edge okay now you have to find out the coding Huffman coding for each characters now how to find out the Huffman coding okay now this is a Huffman tree okay find out the coding for each character for a how to find out C character would be at the leaf node a how to traverse the tree always we cannot reverse the tree from the leaf node we will traverse it from the root 1 traverse it from the root end traverse the tree till you reach the node a now 0 & 1 here is what a the coding for a would be what 0 1 0 1 for D it's what 1 1 1 1 for C what is the this coding Huffman coding here we have 1 0 & 1 1 0 & 1 for D 1 0 0 1 0 0 for e 0 0 okay now this is the Huffman coding see every character is having not having the fixed code having variable code is represented with two bits C and D are represented with three bits so that is why it is known as what variable length coding and one more point you have to take care of it see a poiiceman thickness a capital rather frequency of what you consider account of B is what highest so the letter or the character having the highest or the maximum pound the character which is generating you know many times which that character will have the Huffman code having less number of bits Huffman code of this B is worth having two bits and for to see D is occurring two times and Huffman code for this two is what having three bits maybe some character is there which is occurring one times and the Huffman code of that character would be of four bits so Jo character subset Java time I can't escape frequencies of Sujatha who use Kaufmann code code code my bits can we come homie okay that is the rule and that's half man coding will also satisfy the prefix rule I will discuss that role in later first of all let us find out the size of what you can say the you know number of total number of bits in transferring while you are transferring this message how many total number of in bits will be transferred for this message okay now you cannot say keep 20 characters are there 20 into polemic I had a twenty into eight when we were taking eight bits for representing a character those two time honey katha twenty into three at that time you are taking three bits for representing of the character but we happier by solution except a because we are not having the fixed bits we are having variable number of bits now how to calculate the total number of bits or you can say the length of this message how we will calculate C frequency of a is what for four into number of bits today use to represent to represent this a is what one and two 4 into 2 plus for b7 into 2 + 4 C 3 into 3 + 4 D 2 into 3 plus 4 E 4 into number of frequency into the number of bits 1 2 the total would be the number of bits would be 45 bits for only this message now how the message will be decoded at that place of a what you can write 0 1 at the place of B what you will write 1 1 at the place of being able to write 1 1 at the place of C what you would write 1 0 1 in like this this message or the message in binary form will be sent from sender to receiver when the receiver gets this message then how the receiver will decode this message how the receiver will get to know that 0 1 means a 1 1 means B how skinny can operate either you have you will send this table or you will send this 3 okay 3 in serialized form because obviously you can't send this tree something like this is serialized for me I put recuperation operator okay now either this table would be sent or this tree would be sent so that by taking by traversing or by looking at this tree or the stable this receiver will get to know that the 4 0 1 is forward a the code 1 1 is 4 what be something like this so 45 bits of kaga for only this the length of this message this is the length of this message only okay plus we will send this table suppose okay now how many bits would be required to send the stream in this table will send the characters and corresponding code Huffman code for these characters now for sending these characters how these characters will be sent C characters will be saying what the characters would be converted into a sky code than a sky to go code second characteristic converting into 8bit binary form okay now we have many characters five characters into each character would be represented with Gator bits in a sky code then 5 into 8 that is 40 now along with these characters these Huffman code will also be sent four characters for Tibbets would be required for sending these codes how many bits would be required 40 plus 1 2 3 4 5 6 7 8 9 10 11 12 how many bits are there 12 bits won't be required the total would be what 52 now total bets to be transferred from sender to receiver would be 45 + 52 that is 97 bits so in Huffman coding when you compress this message any message using Huffman coding or I'm taking example of this message then 97 bits would be required 97 bits would be used from Sen sent from sender to receiver value 1/16 use givethem place created now 1 1 5 and using Huffman coding it becomes what 97 bits okay now see how the that you know receiver will decode this message suppose receiver is having this tree in the serialized phone ok now how that decoder will decode this message when the you know when receiver will see the message 0 then traverse corollary you 0 0 safe copy I go to it did you get any character no so 0 cm kiss boba character Alyssa things check out the next next bit that is 1 0 1 traverse this tree 0 1 of course we have reached to a character a then the receiver will decode this 0 1 and will write what hey now again this one is done character Malkowski bar next bit is what 1 traverse this tree 1 we have reached to this 12 but is there any do you reach have you reached to the leaf node because characters are at the leaf node only no we're still in the middle of the tree so we cannot write any character here now next one one one who you find a character that is B then receiver will decode it like B again one you see one again one one then again big fine like this he'll the receiver will check out this tree and then decode this message for to see how this would be done next bit is what one one because because here a here is no character the next bit is 0 1 0 here also we have no character the next bit is 1 1 0 1 yes we have reached to a character C like this the message will be decoded with the help of this Huffman tree so along with the data along with the message either the tree or the table would be also be sent okay obviously it way would be sending serialized form only ok so these are the number of bits would be required when you compress this message or even send this message using Huffman coding now the time complexity of this would be theta n log n now see I have told you 1 funda that is perfect school that Huffman coding works on the technique that is prefix code what is the prefix code algorithm or what is the proof what is the prefix code rule you can say it says no code is prefix of another code let us take a simple example then you will get it file or in example we have only 3 characters and the code for these characters are for a it's 0 for B it's 1 for seeds 0 1 I am taking the simple example 0 1 and code for C is 0 now suppose from sender to receiver when he message has been transmitted be there in the encoded form and that message is what 0 0 1 now the receiver will decode this message with the help of this table because this table will also be sent with this table sorry with this okay now there will be ambiguity in recording this message how that is healer will decode this message first bit is what zero receiver will check in this table zero is for what a now this zero first a zero is for what a now next bit receiver will check the next bit 0 again this zero is forward a now one one is forward B and the second second option would be what four zero it's a and again 4 0 1 4 0 1 that is Hever will decode it see now this one message will be decoded may be decoded in two forms a B or a C so this is ambiguity because we have sent only one message and the receiver kunhee Petacci legacy which one is right this one is right or this one is right and why the sign bigotry is there because this zero code of this a is prefix of this code this code 0 okay for C code is what 0 1 and a kala 0 case Kelly hey Kelly so it's a zero for moles at then this one is what prefix and this code of this is what prefix of another code so this should not be happened no code should be prefix of another code okay only if this condition is satisfied then only there would be no ambiguity no ambiguity in that the receiver side while decoding the message and the Huffman coding the Huffman coding will always ensure the prefix rule the prefix code or prefix rule you can easily check kuiba code TCB another code chi have a prefix in a ho okay so if my coding Kereopa about beach and rock near Half Men code will always Huffman coding will always follow this prefix rule and what is the prefix ole many a boys example get through Battaglia now in a sunrise to me you I tell you the huffman coding then these are the four points it was discovered or developed by David Huffman in 1951 next is it in the encoding follows the prefix rule I have already discussed what is the prefix rule no code can be a prefix of another code next is the most generated character we'll get the small code and the least generated character will get the larger code we have already you discussed in that example okay now the time complexity of this Huffman coding is or theta n log and in next video I will discuss you an example of Huffman coding with probabilities sometimes in exam they can give you the characters and they will give you not the frequency or count they'll give you the probabilities of those characters and then they will ask you what is the average length of the message so in next video I'll discuss with that question okay till then take and take care bye bye
