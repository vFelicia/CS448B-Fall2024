With timestamps:

00:00 - in the series of learning programming in
00:01 - c in the previous video I have discussed
00:03 - break statement we are left with two
00:06 - important statements break or you can
00:08 - say control statements in see break and
00:09 - continue these are very important
00:11 - because we have discussed Loops for
00:13 - while and do while now we are left with
00:15 - continue statement because in previous
00:16 - video I have discussed breake statement
00:18 - with the proper example with a program
00:20 - right like what is the meaning of breake
00:22 - statement how how when to use and why to
00:24 - use break statement in your program now
00:26 - in this video we are going to talk about
00:28 - continue statements in C why we use
00:30 - continu statement in C right and when to
00:33 - use this uh statement and how to use
00:36 - this statement the syntax as well as we
00:38 - will see the working of this continuous
00:40 - statement with the help of flowchart of
00:43 - this continuous statement as well as
00:45 - with the help of a program we will see
00:46 - everything about this continue statement
00:49 - right let's see what is Contin statement
00:50 - in see see I hope you remember what does
00:53 - the working of that break statement if
00:55 - you write that break statement within
00:57 - Loop we can use break in within Loops or
01:01 - with switch statement continue we can
01:03 - use with loops so we write a loop for
01:07 - while or do y Loop here some statements
01:09 - are there then I'm writing break some
01:12 - statements are there suppose statement
01:14 - one statement two statement three
01:15 - statement four that's it now as soon as
01:18 - this breake would be encountered control
01:19 - will directly go out of the loop these
01:22 - statements would not be executed right
01:25 - that's it means it will throw you out
01:27 - from the loop as well as as as soon as
01:30 - the brake statement is encountered and
01:31 - generally we use breake with you know
01:33 - some conditions we put some condition
01:35 - before uh this breake statement if this
01:38 - condition then break otherwise continue
01:41 - now continue will do what continue is
01:46 - used to skip some statements it will not
01:50 - throw you out from the loop but if you
01:53 - want to skip some statements in the loop
01:56 - then you can use continue right if you
01:59 - want to skip suppose suppose let us
02:01 - discuss it with uh you know example
02:05 - suppose here here I'm writing continue
02:07 - the synx is what simply you will write
02:09 - continue this is a keyword in C so this
02:11 - would be in small letter and semicolon
02:14 - now as soon as within a loop I'm writing
02:17 - continue this statement would be
02:19 - executed this statement would be
02:20 - executed as soon as continue would be
02:22 - encountered what will
02:25 - happen control will not will skip these
02:29 - statements whatever statements is
02:30 - written after this continue within this
02:32 - Loop these two statements are there
02:35 - these statements will not get executed
02:38 - now control will go where in break
02:41 - control will go out of the loop but if
02:43 - you use continue then control will go to
02:46 - the next iteration of the
02:48 - loop right so it will
02:50 - go here beginning of the loop or you can
02:54 - to the next iteration of the loop right
02:56 - because working of four Loop is what
02:58 - initialization
03:00 - condition and here we have increment
03:02 - decrement right first of first step is
03:05 - this one second step is condition would
03:06 - be checked if this is true control will
03:08 - enter into this loop after that after
03:11 - executing this control will go to
03:13 - increment and decrement right so suppose
03:16 - here you write continue then control
03:18 - will skip these statements S3 and S4 and
03:21 - control will go to the next iteration of
03:22 - the loop means control will go to the
03:25 - this Plus+ update or whatever expression
03:28 - you write here update or you can say
03:30 - that increment or
03:31 - decrement right so if you want to skip
03:34 - some statements then you can use
03:35 - continue right suppose let us take a
03:38 - real life
03:39 - example try to relate it with this
03:42 - continue statement if suppose this Loop
03:44 - I'm writing for uh DSA classes th000 DSA
03:49 - suppose 100 DSA classes are there right
03:52 - now what I can do if a person is coming
03:56 - means student name right then then in
04:00 - the loop he is going or she is going to
04:03 - attend all the 100 classes next person
04:05 - comes he and she also going to attend
04:08 - 100 classes right but suppose Jenny know
04:12 - DSA very well she uh know she'll not
04:16 - attend these classes no need to attend
04:18 - her DSA classes for Jenny right now if
04:22 - Jenny comes if the name is Jenny then
04:25 - skip these statements maybe here some
04:30 - statements are there S1 and S2 after
04:32 - that 100 classes of DSA so what we can
04:35 - put if you can say that name is equal to
04:40 - Jenny then
04:43 - continue before the these 100 lectures I
04:46 - can WR I can write these statement if
04:48 - name is equal to Jenny then continue
04:50 - continue means Jenny is not going to
04:53 - attend these 100 lectures because Jenny
04:56 - is very good in data structure right so
04:59 - control will go again to the for Loop
05:02 - increment or decrement means yeah next
05:04 - student come right and if name is not
05:08 - Jenny then all the statements would be
05:11 - executed like he or she has to attend
05:13 - all the 100 lectures now I hope you got
05:15 - what what is the meaning of this Contin
05:17 - statement why we use continue statement
05:19 - in a program suppose a code is very
05:22 - lengthy 100 lines of code right and
05:25 - suppose because of some condition if
05:27 - that condition is satisfied I don't want
05:29 - to execute those suppose 50 lines I want
05:32 - to execute and 50 lines I don't want to
05:34 - execute so before those 50 lines you can
05:37 - put if the condition and then if the
05:40 - condition is true then continue continue
05:42 - means control is going to skip all the
05:44 - 50 lines of code control will directly
05:47 - go to the beginning of the loop means
05:49 - the next iteration of the loop right so
05:52 - I hope you are able to relate this with
05:54 - this real life example fine now let us
05:57 - discuss it with the help of proper
05:58 - program now see if if you draw flow
06:01 - flowchart of this continue statement
06:04 - then what will happen we write continue
06:06 - within this Loop right so in flowchart
06:08 - what you can do this is what condition
06:12 - or you can say that Loop condition this
06:15 - condition I'm taking suppose for Loop if
06:18 - this condition is
06:19 - true control will enter here if this is
06:22 - false then directly
06:24 - what exit exit from the loop right or
06:27 - whatever statements will be written
06:29 - after this for Loop suppose I'm writing
06:31 - here after for Loop statement X so
06:34 - control will directly go to statement X
06:38 - right here I'm writing statement
06:40 - X but if the control is if if this
06:44 - condition is true then control will
06:45 - enter here it is going to execute some
06:48 - statements and now next statement uh
06:51 - next condition is there because I told
06:53 - you we write some condition before
06:55 - continue and break if this condition is
06:57 - true then only continue right so so
07:00 - again uh
07:04 - condition condition you can say within
07:07 - Loop or condition for
07:14 - continue now if this condition for
07:16 - continue if this if condition is
07:20 - true then continue continue means
07:24 - control will go if true then control
07:26 - will go here again to the increment of
07:29 - increment if this is true this state
07:31 - this is true then what continue continue
07:34 - means to the next iteration of the loop
07:36 - suppose here I'm writing uh update
07:38 - increment or decrement the value would
07:41 - be updated and then again Loop condition
07:44 - would be checked right but if this
07:47 - condition is false then the remaining
07:49 - statements the remaining statements of
07:51 - the loop would be executed if this is
07:53 - condition is false then here you can
07:55 - write
07:57 - remaining statements of the loop
08:02 - would be executed and after remaining
08:05 - statements again what update obviously
08:08 - control will go to update and then again
08:10 - to the loop beginning of the loop fine
08:13 - I'm drawing I'm I'm just drawing it
08:15 - roughly I just get you familiar with the
08:17 - working of the continu statement I hope
08:19 - you got using this flowchart the working
08:21 - of this continu statement right now and
08:24 - what was that break if you write if you
08:26 - draw the flowchart of that break then
08:28 - obviously Loop condition first of all if
08:30 - condition is true then you can say that
08:32 - condition for break here condition for
08:35 - break here here I'm writing break if
08:36 - this condition is true then exit from
08:40 - the loop means exit from the loop
08:42 - control will go to the statement X if
08:45 - this condition is false in case of break
08:49 - then then obviously all all the update
08:52 - after that update and then Loop
08:54 - condition right normal Loop uh return
08:57 - process would be there right so now let
09:00 - us discuss it with the help of a program
09:02 - so now let us discuss it with the same
09:03 - program that we have discussed in
09:04 - previous video uh in in that break
09:07 - statement right user suppose I want
09:10 - toate the loop five times exactly I know
09:12 - how many times five times so I will use
09:14 - four Loop we'll use four while and do
09:16 - while three Loops all the three Loops so
09:19 - now user will enter five integers
09:20 - suppose 1 2 1 1 1 five and then it will
09:25 - print some of these integers right and
09:29 - if any negative number comes if user
09:31 - enter any negative number at that time
09:35 - control will exit from the loop right it
09:39 - will not ask further enter a number
09:43 - suppose I'm entering one then two third
09:46 - time suppose it is asking I'm entering
09:48 - minus one if negative number comes the
09:51 - control will go out of the loop so now
09:54 - sum would be printed for these two
09:55 - numbers only that is
09:57 - three right the loop would be it is what
10:00 - early exit from the loop right it is not
10:03 - going to be trade for five times it is
10:04 - going to trade for only three times
10:06 - right but now here I
10:08 - want five iterations five times same
10:12 - program if user enter any negative
10:15 - number then it should show like you have
10:19 - entered a negative number please enter a
10:21 - positive number right and again it will
10:25 - ask enter a number enter a
10:27 - number five iterations should be there
10:31 - it is not going to exit whenever you
10:32 - enter negative number right but yeah
10:35 - whenever you enter negative number it is
10:37 - not going to count this it is not going
10:39 - to use this in that sum suppose I'm
10:43 - entering 1 2 then minus one then one and
10:46 - one the sum would be 3 4 5 it is not
10:50 - going to consider this minus one the
10:52 - negative number right so if you enter
10:55 - negative number sum should not be you
10:58 - know that that some uh whenever you
11:00 - write that Su is equal to Su plus a that
11:02 - statement should not be executed
11:04 - whatever I'm saying let us write it down
11:06 - in the form of a program then you will
11:08 - get it better this is the program I'm
11:10 - writing whenever control will first
11:13 - first control will go to First statement
11:15 - of this main so we have three variables
11:19 - I a and we have sum sum is initialized
11:22 - with the zero now I is equal to 1 okay I
11:26 - less than equal to 5 yes condition is
11:28 - true control here it will ask you enter
11:30 - an integer on the output screen it this
11:32 - message message should be will be
11:35 - printed right and you are entering
11:37 - suppose one right so and that would be
11:40 - stored in a because I I'm I'm giving
11:43 - address of a right now condition check
11:45 - if a less than zero no so control will
11:48 - not enter into this here I'm only
11:51 - writing continue so if you can if you
11:53 - want to skip you can skip these curly
11:54 - Braes so now what would happen sum is
11:56 - equal to sum plus a sum plus a that is
11:59 - one and it would be assigned to sum
12:02 - right again next iteration now control
12:05 - will go to I ++ now I becomes two
12:08 - condition true yes again it will ask
12:11 - enter an integer and here suppose I'm
12:14 - entering two is this condition true no
12:17 - so it will not enter here Su is equal to
12:18 - Su plus
12:20 - a now a value is 2 I'm entering two now
12:24 - some plus a is 1 + 2 3 that would be a
12:26 - sign to here right and again I ++ now
12:30 - suppose here I'm writing again it will
12:32 - ask enter an integer and now I'm
12:35 - entering negative number - 10 now check
12:39 - if a less than zero yes now a value is -
12:44 - 10 it is less than zero yes it is true
12:48 - so now it will enter here control will
12:50 - enter into this if statement now here
12:52 - what is there
12:53 - continue see this is what small letters
12:56 - it is a keyword if continue come comes
13:00 - then the remaining statements would be
13:02 - skipped remaining statements of this
13:04 - Loop is what only one statement within
13:07 - this Loop here I'm writing closing this
13:09 - Loop Su is equal to Su plus a so it is
13:12 - not going to execute this statement the
13:14 - statement will not be executed so now
13:16 - sum plus a would not be performed means
13:20 - we are not considering minus 10 in sum
13:22 - right so the statement remaining
13:24 - statement would be skipped and now
13:26 - control will go to the here
13:29 - next iteration of the loop I ++ now I
13:33 - become three sorry I was three at that
13:36 - time right now I becomes four because I
13:39 - have entered three numbers now I becomes
13:42 - four now it will ask you condition is
13:44 - true yes I is less than 5 enter an
13:48 - integer now suppose you are entering
13:51 - again Min -
13:54 - 2 condition is again true it will again
13:57 - enter here means continue
13:59 - continue means it is going to skip the
14:02 - remaining statement within the loop
14:04 - remaining is this one it is not going
14:06 - the statement would not be executed
14:08 - right and control will go to I ++ now I
14:11 - becomes 5 5 less than equal to 5 yes
14:14 - condition is true again it will ask
14:16 - enter an integer and here suppose I'm
14:18 - entering what zero now check the
14:21 - condition is is a less than Z no 0 is
14:25 - not less than Z because now here I have
14:28 - Z
14:29 - right this condition is not pro now
14:32 - control will go to the statement now the
14:34 - statement will be executed it is not
14:37 - going to be skipped sum plus a now in a
14:40 - I have zero some I have three 3 + 0 is
14:42 - three only so three would be in that
14:44 - some variable again I ++ now I become
14:47 - six is this condition true now no now
14:50 - control will exit from the
14:53 - loop whatever statement you write
14:55 - immediately after this Loop that would
14:56 - be executed now here I'm printing sum
14:58 - now sum is three so three would be
15:00 - printed as you can see sum is sum is for
15:04 - this one this one and this one these are
15:06 - not considered to be in sum right and if
15:09 - you write here break as soon as it find
15:12 - it will find first negative number it is
15:14 - going to exit then also it will print
15:17 - one and 2 three but it is not going to
15:19 - ask you this and this it will directly
15:21 - print uh three the sum now I hope you
15:24 - got the working of this continue right
15:26 - so now that's it for this video now I'll
15:28 - see you in the next video till then
15:29 - bye-bye take care

Cleaned transcript:

in the series of learning programming in c in the previous video I have discussed break statement we are left with two important statements break or you can say control statements in see break and continue these are very important because we have discussed Loops for while and do while now we are left with continue statement because in previous video I have discussed breake statement with the proper example with a program right like what is the meaning of breake statement how how when to use and why to use break statement in your program now in this video we are going to talk about continue statements in C why we use continu statement in C right and when to use this uh statement and how to use this statement the syntax as well as we will see the working of this continuous statement with the help of flowchart of this continuous statement as well as with the help of a program we will see everything about this continue statement right let's see what is Contin statement in see see I hope you remember what does the working of that break statement if you write that break statement within Loop we can use break in within Loops or with switch statement continue we can use with loops so we write a loop for while or do y Loop here some statements are there then I'm writing break some statements are there suppose statement one statement two statement three statement four that's it now as soon as this breake would be encountered control will directly go out of the loop these statements would not be executed right that's it means it will throw you out from the loop as well as as as soon as the brake statement is encountered and generally we use breake with you know some conditions we put some condition before uh this breake statement if this condition then break otherwise continue now continue will do what continue is used to skip some statements it will not throw you out from the loop but if you want to skip some statements in the loop then you can use continue right if you want to skip suppose suppose let us discuss it with uh you know example suppose here here I'm writing continue the synx is what simply you will write continue this is a keyword in C so this would be in small letter and semicolon now as soon as within a loop I'm writing continue this statement would be executed this statement would be executed as soon as continue would be encountered what will happen control will not will skip these statements whatever statements is written after this continue within this Loop these two statements are there these statements will not get executed now control will go where in break control will go out of the loop but if you use continue then control will go to the next iteration of the loop right so it will go here beginning of the loop or you can to the next iteration of the loop right because working of four Loop is what initialization condition and here we have increment decrement right first of first step is this one second step is condition would be checked if this is true control will enter into this loop after that after executing this control will go to increment and decrement right so suppose here you write continue then control will skip these statements S3 and S4 and control will go to the next iteration of the loop means control will go to the this Plus+ update or whatever expression you write here update or you can say that increment or decrement right so if you want to skip some statements then you can use continue right suppose let us take a real life example try to relate it with this continue statement if suppose this Loop I'm writing for uh DSA classes th000 DSA suppose 100 DSA classes are there right now what I can do if a person is coming means student name right then then in the loop he is going or she is going to attend all the 100 classes next person comes he and she also going to attend 100 classes right but suppose Jenny know DSA very well she uh know she'll not attend these classes no need to attend her DSA classes for Jenny right now if Jenny comes if the name is Jenny then skip these statements maybe here some statements are there S1 and S2 after that 100 classes of DSA so what we can put if you can say that name is equal to Jenny then continue before the these 100 lectures I can WR I can write these statement if name is equal to Jenny then continue continue means Jenny is not going to attend these 100 lectures because Jenny is very good in data structure right so control will go again to the for Loop increment or decrement means yeah next student come right and if name is not Jenny then all the statements would be executed like he or she has to attend all the 100 lectures now I hope you got what what is the meaning of this Contin statement why we use continue statement in a program suppose a code is very lengthy 100 lines of code right and suppose because of some condition if that condition is satisfied I don't want to execute those suppose 50 lines I want to execute and 50 lines I don't want to execute so before those 50 lines you can put if the condition and then if the condition is true then continue continue means control is going to skip all the 50 lines of code control will directly go to the beginning of the loop means the next iteration of the loop right so I hope you are able to relate this with this real life example fine now let us discuss it with the help of proper program now see if if you draw flow flowchart of this continue statement then what will happen we write continue within this Loop right so in flowchart what you can do this is what condition or you can say that Loop condition this condition I'm taking suppose for Loop if this condition is true control will enter here if this is false then directly what exit exit from the loop right or whatever statements will be written after this for Loop suppose I'm writing here after for Loop statement X so control will directly go to statement X right here I'm writing statement X but if the control is if if this condition is true then control will enter here it is going to execute some statements and now next statement uh next condition is there because I told you we write some condition before continue and break if this condition is true then only continue right so so again uh condition condition you can say within Loop or condition for continue now if this condition for continue if this if condition is true then continue continue means control will go if true then control will go here again to the increment of increment if this is true this state this is true then what continue continue means to the next iteration of the loop suppose here I'm writing uh update increment or decrement the value would be updated and then again Loop condition would be checked right but if this condition is false then the remaining statements the remaining statements of the loop would be executed if this is condition is false then here you can write remaining statements of the loop would be executed and after remaining statements again what update obviously control will go to update and then again to the loop beginning of the loop fine I'm drawing I'm I'm just drawing it roughly I just get you familiar with the working of the continu statement I hope you got using this flowchart the working of this continu statement right now and what was that break if you write if you draw the flowchart of that break then obviously Loop condition first of all if condition is true then you can say that condition for break here condition for break here here I'm writing break if this condition is true then exit from the loop means exit from the loop control will go to the statement X if this condition is false in case of break then then obviously all all the update after that update and then Loop condition right normal Loop uh return process would be there right so now let us discuss it with the help of a program so now let us discuss it with the same program that we have discussed in previous video uh in in that break statement right user suppose I want toate the loop five times exactly I know how many times five times so I will use four Loop we'll use four while and do while three Loops all the three Loops so now user will enter five integers suppose 1 2 1 1 1 five and then it will print some of these integers right and if any negative number comes if user enter any negative number at that time control will exit from the loop right it will not ask further enter a number suppose I'm entering one then two third time suppose it is asking I'm entering minus one if negative number comes the control will go out of the loop so now sum would be printed for these two numbers only that is three right the loop would be it is what early exit from the loop right it is not going to be trade for five times it is going to trade for only three times right but now here I want five iterations five times same program if user enter any negative number then it should show like you have entered a negative number please enter a positive number right and again it will ask enter a number enter a number five iterations should be there it is not going to exit whenever you enter negative number right but yeah whenever you enter negative number it is not going to count this it is not going to use this in that sum suppose I'm entering 1 2 then minus one then one and one the sum would be 3 4 5 it is not going to consider this minus one the negative number right so if you enter negative number sum should not be you know that that some uh whenever you write that Su is equal to Su plus a that statement should not be executed whatever I'm saying let us write it down in the form of a program then you will get it better this is the program I'm writing whenever control will first first control will go to First statement of this main so we have three variables I a and we have sum sum is initialized with the zero now I is equal to 1 okay I less than equal to 5 yes condition is true control here it will ask you enter an integer on the output screen it this message message should be will be printed right and you are entering suppose one right so and that would be stored in a because I I'm I'm giving address of a right now condition check if a less than zero no so control will not enter into this here I'm only writing continue so if you can if you want to skip you can skip these curly Braes so now what would happen sum is equal to sum plus a sum plus a that is one and it would be assigned to sum right again next iteration now control will go to I ++ now I becomes two condition true yes again it will ask enter an integer and here suppose I'm entering two is this condition true no so it will not enter here Su is equal to Su plus a now a value is 2 I'm entering two now some plus a is 1 + 2 3 that would be a sign to here right and again I ++ now suppose here I'm writing again it will ask enter an integer and now I'm entering negative number 10 now check if a less than zero yes now a value is 10 it is less than zero yes it is true so now it will enter here control will enter into this if statement now here what is there continue see this is what small letters it is a keyword if continue come comes then the remaining statements would be skipped remaining statements of this Loop is what only one statement within this Loop here I'm writing closing this Loop Su is equal to Su plus a so it is not going to execute this statement the statement will not be executed so now sum plus a would not be performed means we are not considering minus 10 in sum right so the statement remaining statement would be skipped and now control will go to the here next iteration of the loop I ++ now I become three sorry I was three at that time right now I becomes four because I have entered three numbers now I becomes four now it will ask you condition is true yes I is less than 5 enter an integer now suppose you are entering again Min 2 condition is again true it will again enter here means continue continue means it is going to skip the remaining statement within the loop remaining is this one it is not going the statement would not be executed right and control will go to I ++ now I becomes 5 5 less than equal to 5 yes condition is true again it will ask enter an integer and here suppose I'm entering what zero now check the condition is is a less than Z no 0 is not less than Z because now here I have Z right this condition is not pro now control will go to the statement now the statement will be executed it is not going to be skipped sum plus a now in a I have zero some I have three 3 + 0 is three only so three would be in that some variable again I ++ now I become six is this condition true now no now control will exit from the loop whatever statement you write immediately after this Loop that would be executed now here I'm printing sum now sum is three so three would be printed as you can see sum is sum is for this one this one and this one these are not considered to be in sum right and if you write here break as soon as it find it will find first negative number it is going to exit then also it will print one and 2 three but it is not going to ask you this and this it will directly print uh three the sum now I hope you got the working of this continue right so now that's it for this video now I'll see you in the next video till then byebye take care
