With timestamps:

00:00 - so in the series of learning c plus plus
00:02 - programming language in the previous
00:03 - video we have discussed history of c
00:04 - plus plus in this video we'll talk about
00:06 - basic structure of a c plus plus program
00:09 - right
00:09 - so uh before writing your actual writing
00:12 - the program you should have basic idea
00:13 - about the structure of a c plus program
00:16 - and it is almost same as the structure
00:18 - of a c program right that way you can
00:20 - check out in the side button right
00:23 - and these are the sections in which you
00:25 - know uh which
00:26 - basic structure of a c plus first
00:28 - program can have but these sections are
00:29 - not compulsory all these sections only
00:32 - two sections or three sections are
00:33 - compulsory to include in your program
00:36 - all other sections are optional so what
00:38 - are optional sections what are
00:39 - compulsory sections we'll discuss
00:41 - in detail in this video with the help of
00:42 - a program as well i'll show you the
00:44 - program on my laptop
00:46 - which will include all these sections
00:49 - right so i'll show you practical also
00:52 - so these are some sections our c plus
00:55 - plus program can have
00:57 - and i will not discuss in detail those
00:59 - sections which are same
01:01 - as in structure of a c program
01:03 - because i think uh better not to waste
01:06 - time on those sections those sections
01:07 - explaining again in that video i have
01:09 - explained these sections in detail
01:13 - so you can check out that video that i
01:15 - have put in the side button right or you
01:18 - can check out in the description box
01:20 - i'll put the
01:21 - complete playlist link see complete
01:23 - playlist you can go to that playlist and
01:25 - you can check out the video
01:27 - at starting i think third or fourth
01:29 - video is about structure of a c program
01:31 - so you
01:32 - go to that video first then come to this
01:34 - video so now the first section is
01:36 - documentation section in this section
01:38 - same as this see program also have this
01:41 - section here we generally include the
01:44 - information about that program like
01:45 - author who is the author of that program
01:47 - the date of written of that program and
01:49 - what this program is all about right
01:51 - only by seeing the documentation section
01:53 - one can identify this program is all
01:55 - about what
01:57 - if i have written a program
01:59 - right like author is journey date is
02:01 - this and this program is right you know
02:05 - program to add two numbers so if you
02:07 - will see that program
02:08 - by not you will not see the program
02:11 - actual program you just see the
02:12 - documentation in the documentation
02:13 - section and you will know who is author
02:15 - of this program the date of return of
02:16 - this program and what this program is
02:18 - all about
02:19 - so it will increase the readability and
02:21 - maintainability right
02:22 - so it is completely optional you don't
02:24 - need to include this section it is not
02:26 - compulsory and here we write the
02:28 - information in the comment box single
02:29 - line comment and this is multiple line
02:32 - comment this is single line command here
02:34 - we can multiple lines and the last of
02:36 - this line you can include this this is
02:37 - multiple line command all these
02:39 - the lines will write these comment after
02:42 - these comments that would not be
02:44 - considered by the compiler as line of
02:45 - code that would not be compiled that
02:47 - would not be converted into object code
02:49 - right that would completely be
02:51 - completely omitted by the compiler right
02:53 - so now the next section is
02:57 - link section so here we have
03:00 - two parts in c plus program header and
03:03 - namespace
03:07 - generally in c we have like we know
03:09 - header file hash include stdio.h right
03:12 - here also
03:14 - previous in previous version of c we
03:16 - include something like this i use stream
03:19 - we used to include i use stream dot edge
03:21 - this thing
03:22 - hash include
03:24 - we call it as a header file it contains
03:26 - the you know you can see the declaration
03:28 - or the
03:29 - prototype of all the built-in functions
03:32 - and the constant and some objects
03:34 - everything
03:35 - prototype of those built-in things right
03:37 - so header files
03:39 - or you can say now we
03:41 - now
03:42 - modern compiler support what i use
03:45 - string
03:48 - the known dot h version we don't write
03:50 - dot h now
03:51 - we generally
03:53 - wrote these things
03:55 - before c plus plus got standardized
03:57 - right
03:59 - modern compilers don't support these
04:01 - things these files dot h files after c
04:04 - plus plus good standardize
04:06 - right
04:07 - the concept of name spaces comes
04:10 - and everything
04:12 - they group into namespaces
04:16 - right namespace means it's you can say
04:18 - just a container
04:20 - container for identifiers identifier
04:22 - means just a name of any function or
04:25 - object or any constant these things are
04:28 - identifiers
04:30 - so namespace is just a container or you
04:31 - can say group of
04:34 - elements
04:35 - objects classes functions in name spaces
04:38 - we have
04:39 - definition of these things declaration
04:40 - of these things object class is function
04:43 - constant these things
04:45 - right
04:46 - so after c plus plus got standardized we
04:49 - use this thing only this is known as
04:51 - header
04:52 - not header file we call it as a simply
04:55 - header i o stream header
04:57 - and in this header we have
05:00 - eight stream object declaration of eight
05:02 - stream objects as well as
05:04 - i stream
05:06 - objects o stream objects
05:09 - that are also there in this io stream
05:11 - input output stream right so the object
05:14 - we use c in c out
05:16 - for error c e double r we use a and dl
05:18 - we use
05:19 - all these objects are declared
05:22 - in this header in this header
05:25 - but under a namespace
05:27 - named std
05:31 - right
05:33 - i'll show you i'll show you this header
05:35 - on my laptop what is there in this
05:37 - header in this header it just we there
05:40 - is a code there will be a code in this
05:42 - header and
05:45 - it's like a name space it's like you can
05:47 - see it's a group std name space and here
05:49 - we have these things whatever you use
05:52 - like the object c and c out and all
05:54 - these things
05:56 - so after c plus plus good standardized
05:58 - they group these things
06:00 - under name spaces
06:02 - and why name spaces
06:04 - to resolve or to you know resolve the
06:06 - name conflicts now what does this name
06:09 - conflict see
06:11 - so i guess this is clear why we include
06:13 - these header
06:14 - right
06:16 - generally in a program you know we use
06:18 - some built-in functions or classes or
06:20 - objects or constant right c and see how
06:22 - these are considered as object these are
06:24 - built in
06:25 - those functions or classes these are
06:26 - defined in library files so to include
06:29 - these things in your program we you have
06:31 - to give appropriate header
06:33 - right according to your requirement so
06:35 - if you want to use input output related
06:37 - things the objects or functions you use
06:40 - which header io string
06:43 - right so that is why you need to include
06:46 - these headers right and before
06:49 - this is not a standard header now right
06:52 - only turbo c plus plus compiler i think
06:54 - support this thing but vs code don't
06:55 - support this modern compiler don't
06:57 - support this dot h version they support
07:00 - without you know no dot h version
07:03 - see before these c out scene these were
07:05 - defined in io stream dot h but after c
07:08 - plus plus good standardized
07:10 - these things c in c out and many other
07:12 - things
07:13 - were moved
07:14 - into a namespace named std
07:18 - and
07:19 - this known dot h version these are
07:22 - considered as standard header standard
07:25 - version standard header
07:27 - right so that's why nowadays we include
07:29 - this thing not dot h
07:31 - so now under this obviously everything
07:34 - is grouped in name spaces so one
07:35 - namespace is standard namespace that is
07:37 - std
07:39 - there we have all these c in c out and
07:42 - dl these these objects declaration of
07:44 - these objects stream objects
07:46 - right that is why generally we write
07:48 - down your program using namespace std so
07:50 - that is part of link section here we use
07:52 - this headers and appropriate name space
07:56 - right so link section we have these
07:59 - headers i think this is clear to you and
08:01 - another thing we have name spaces name
08:03 - space i think this is clear to you
08:04 - and why we need this name space like
08:07 - don't worry in detail i'll put a video
08:09 - about name spaces right
08:12 - ah if we i'll discuss more in name space
08:14 - then this video will be about name
08:16 - spaces not a structure of a c program
08:18 - i'll i'll give you a general basic idea
08:21 - a brief idea of the headers and
08:22 - namespaces
08:24 - so i have told you name spaces are used
08:25 - to resolve the name conflict uh
08:28 - same as like
08:30 - two
08:31 - child half same name
08:33 - like maybe
08:35 - no no i will not take rahul
08:37 - one comment i wrote like one student or
08:39 - named aniket he said every time you take
08:42 - rahu next time take my name okay
08:43 - consider aniket is a student aniket
08:46 - is thick a student in one class in
08:49 - computer science also only student in ec
08:51 - also
08:52 - in
08:53 - and ec
08:55 - so aniket is there
08:58 - right
08:59 - now when i call aniket
09:02 - who will respond this or this both are
09:04 - standing
09:05 - you can say here only so who will
09:08 - respond
09:09 - i don't know
09:10 - because there is ambiguity
09:13 - right
09:14 - if i say aniket from cs
09:17 - then
09:18 - he'll respond to me aniket from ec then
09:20 - he'll respond to me so
09:23 - by calling aniket by aniket from cs
09:27 - the this will resolve the conflict there
09:29 - is no conflict now though no name
09:31 - conflict same happens in the case of
09:33 - programming
09:35 - right
09:36 - now this will be considered you can see
09:37 - as a name space
09:39 - so we are identifying two same things by
09:42 - name spaces
09:43 - if no namespace is there this will
09:46 - create con conflict ambiguity in your
09:48 - program right so same suppose we know
09:51 - that we don't we cannot have in the same
09:53 - program two functions or two objects of
09:55 - same name two classes of same name
09:58 - right
09:58 - but yeah you can have same name if you
10:02 - resolve the conflict by using name space
10:05 - concept right that i have told you in
10:07 - real life you can take one example like
10:08 - this right suppose
10:10 - in suppose in two library
10:13 - files we have same function named
10:16 - any function name you can say support
10:18 - sort or print
10:20 - any function
10:22 - and you are you are included you have
10:24 - included both
10:26 - the header files in your program
10:28 - right
10:29 - now whenever you call in your program
10:32 - suppose we have a function name sort
10:34 - this function solved
10:36 - so this is in this header file so this
10:37 - header file also then compiler is going
10:40 - to
10:41 - get confused like which function to call
10:43 - from this or from this
10:45 - so to
10:46 - you know
10:47 - what to resolve this
10:49 - ambiguity we use
10:51 - the concept of name spaces they
10:53 - introduced the concept of name spaces in
10:55 - programming language right
10:57 - so that same name of any function object
11:00 - or classes can be used
11:02 - right because namespace is different
11:05 - so if name is same then there would be
11:07 - no conflict like this
11:09 - if i have and you can create your own
11:11 - namespace also how to create
11:14 - just write down this keyword namespace
11:15 - and the name of your namespace suppose i
11:18 - am taking ns1 namespace 1
11:21 - just curly braces and here suppose
11:24 - word salt
11:26 - and
11:27 - just coding of this thing another
11:29 - namespace is there
11:32 - namespace n is 2
11:35 - here also we have void
11:37 - sort and definition of this and that's
11:40 - it no semicolon after name space right
11:42 - so now whenever you call this sort s o r
11:45 - t
11:47 - it will
11:49 - you know confuse the compiler which
11:51 - function to be called
11:52 - so to resolve this thing
11:54 - we write what yeah obviously this is
11:56 - this in this name space so you write
11:58 - before this thing you write the name of
12:00 - the name space ns1
12:02 - and scope resolution operator
12:04 - and if you write ns2 scope resolution
12:06 - operator and the function name sort
12:09 - now that's fine
12:11 - this line will call this function this
12:13 - line will call this function although
12:15 - name is same
12:17 - but no conflict is there you have
12:19 - properly
12:20 - identified these by the name of their
12:23 - namespaces ns1 and s2 scope resolution
12:25 - that is why
12:27 - programs generally be used
12:29 - in using namespace std or maybe you you
12:31 - have written like std this c out
12:35 - this kind of thing or std this scope
12:37 - resolution operator seen
12:39 - so if name space is just provide scope
12:41 - the scope of this is within this name
12:43 - space the scope of this function is
12:45 - within this name space right
12:47 - that is why it is known as
12:49 - scope resolution so this this function
12:52 - scope of this is within this name space
12:54 - the scope of this function is in this
12:56 - name space right i hope now basic idea
12:59 - about name space is clear to you right
13:01 - what is namespace and why we use this
13:02 - thing to resolve name conflict basically
13:05 - right
13:07 - so in detail we'll see the name spaces
13:09 - concept in a separate video so in link
13:12 - section we have headers and namespaces
13:14 - so that is all about this link section
13:17 - then definition section we have macro
13:18 - definition like hash define these kind
13:21 - of things you can take this is same as
13:24 - in c global declaration also globally if
13:27 - you want to declare any variable you can
13:29 - write down suppose in your program you
13:30 - have 5 or 10 functions and all these
13:32 - functions are using two variable a and b
13:35 - so rather than declaring these two
13:36 - variables again and again in ten
13:38 - functions
13:39 - right same variable a b you just declare
13:41 - those variable as globally so all the
13:43 - functions can use those variables
13:45 - globally right
13:48 - and after that
13:49 - see this section is optional
13:52 - link section this is compulsory
13:57 - you have to include this in your program
13:59 - definition this is also compulsory sorry
14:02 - optional definition
14:04 - global declaration this is also optional
14:06 - you don't want to use any global
14:07 - variable it's up to you so this is also
14:09 - optional
14:10 - class
14:11 - this is also optional without using
14:13 - class also you can write down a program
14:15 - simply that i have discussed simply
14:17 - print hello world
14:18 - nothing you have to include just header
14:20 - iostream using namespace std
14:23 - although it's a bad practice to include
14:25 - using namespace study why so that also
14:27 - discussed in a separate video
14:29 - after that just main function then see
14:31 - out hello world that's it no classes
14:34 - there so this is also optional main
14:36 - function this is compulsory
14:39 - so these two are compulsory to include
14:41 - in your program
14:42 - all others are optional according to
14:43 - your requirement you need to add now in
14:45 - class
14:47 - we if you want to create any class just
14:50 - class how to write
14:51 - class your class name suppose i'm
14:53 - writing my class
14:55 - so first
14:56 - we should be capital
14:58 - and then every word would be
15:00 - separated by
15:01 - capital letters like my after next word
15:04 - is class so c would be capital otherwise
15:06 - uh all the letters would be and then
15:08 - small
15:09 - right
15:10 - so my class and how to define this thing
15:14 - here you can write down data members and
15:15 - your member function data members means
15:17 - uh
15:17 - the variables suppose i want to take to
15:20 - int a one variable only right
15:23 - and
15:24 - member function is there i want to use
15:26 - void display
15:29 - so here only you will define this thing
15:32 - like c out
15:33 - and hello
15:36 - that's it right so you will or you
15:40 - need to specify here pub specifier
15:42 - private
15:43 - protected or public
15:45 - public means everybody can use
15:47 - these things uh the variable and the
15:48 - function so here we have the data
15:50 - members and the member function
15:51 - definition if you do not want to define
15:53 - the function within the class outside
15:55 - the class also you can define but
15:57 - there you have to tell the compiler that
15:59 - this function is from this class so the
16:01 - syntax would be different class name
16:02 - scope resolution operator and after that
16:04 - you have to
16:06 - do that thing that also we can discuss
16:08 - so this is what the next section this is
16:10 - optional class definition
16:12 - there we have data members and
16:14 - definition of member function that's it
16:16 - now comes to main function this is
16:17 - compulsory obviously
16:19 - from where the execution would be
16:20 - started from main function first of all
16:22 - control will go to main function right
16:24 - so main function is compulsory
16:27 - main
16:28 - also there are two parts like
16:31 - if you want to declare any local
16:32 - variable you can declare those thing and
16:34 - the statements executable statements you
16:36 - can say the declaration part and
16:38 - executable part right
16:40 - that would be in main function or any
16:42 - function you want to call that also you
16:44 - will call in main function right you can
16:45 - call in main function in any other
16:47 - function which also you can call
16:49 - but in main function also we call
16:51 - generally right
16:53 - now for the classes if there is any
16:55 - class so object of that class also you
16:57 - will create in that main
16:59 - right using that object we can access
17:01 - the members and functions of that class
17:03 - right have to write down this thing i'll
17:06 - show you practical also the main
17:07 - function is also important compulsory
17:09 - next is sub program user defined
17:11 - functions if there are any other user
17:13 - defined functions you have taken then
17:15 - after main u generally after main we
17:17 - define those functions
17:19 - right
17:20 - so after main you will define those your
17:22 - user defined functions there can be many
17:23 - number of user defined functions right
17:26 - so see documentation
17:28 - link is something different from c
17:31 - program the structure of a c program
17:33 - because here we have concept of
17:35 - note header files we call it is that
17:38 - header and name spaces
17:40 - but this is same as structure of c
17:42 - program definition is also same global
17:44 - declaration is also same
17:46 - main function is also same and sub
17:47 - program section is also same
17:49 - so for detail for detailing for detailed
17:52 - explanation of these functions you can
17:54 - refer to that video right
17:56 - if you you know got it
17:59 - from this video then it is fine no need
18:01 - to refer that video right now i think
18:03 - let me just show you one example then
18:06 - you will get a clear idea about these
18:08 - sections right so
18:10 - this is a program right i have already
18:13 - written this program let me just
18:16 - increase the phone size first dot cpp so
18:19 - see this
18:21 - i have written documentation section
18:22 - author jaintika three written on 13 may
18:25 - 20 20 22 programmed to demonstrate basic
18:28 - structure of a c plus program the first
18:30 - line is single line comment and these
18:32 - two lines are within multiple line
18:34 - commands so this is documentation
18:35 - section
18:36 - right it will increase the readability
18:38 - and maintainability maintain
18:39 - maintainability of the program like if
18:41 - any other one wants to maintain this
18:43 - program or to you know read this program
18:45 - want to understand this program what
18:47 - this program is all about then by
18:48 - looking at this only he or she can get
18:51 - the idea this program is all about what
18:53 - right
18:54 - now next is link section so here we have
18:57 - hash include io stream this header io
18:59 - stream rotates here i haven't included
19:02 - using name space std because i have told
19:04 - you this is a bad practice to include
19:05 - why so that also we can discuss rather
19:07 - than including here i am using std like
19:09 - this std namespace copy resolution co
19:12 - std endn what are the objects
19:15 - stream objects which are in std name
19:18 - space if you you want to use those
19:20 - objects those things those objects in
19:21 - your program then before using those
19:25 - objects you have to specify from which
19:27 - name space these objects are
19:29 - otherwise the c out if you don't write
19:31 - this std colon this std scope resolution
19:35 - and you simply write c out then it will
19:38 - give error right because now see
19:41 - identify c out is undefined this would
19:43 - be considered as a normal in our program
19:46 - we have those functions or objects or
19:48 - anything but in this program we do not
19:50 - have any c out the declaration of c out
19:53 - so from where we are using this from
19:55 - name space std so now it will not give
19:57 - error right so i'm using this thing
19:59 - rather than using namespace std i'm not
20:01 - writing that thing so see what is there
20:02 - in this i o stream i haven't included
20:04 - dot h because modern compiler don't
20:07 - support these files now these known
20:09 - dotage versions are considered as
20:11 - standard headers
20:12 - right
20:13 - so you just press ctrl and
20:16 - click on this i o stream standard io
20:18 - stream objects are there in this
20:21 - file see you can read out this thing and
20:24 - i i just want to tell you where is this
20:27 - std name space c
20:29 - name space std
20:31 - they have defined everything they have
20:33 - group everything
20:35 - whatever the functions or objects are
20:37 - there in this under this name space so
20:39 - in this name space std and they are also
20:42 - including o stream and i i stream files
20:44 - also
20:45 - right
20:46 - so in this std what we have
20:49 - the object c in c out c r r c log these
20:53 - objects we have basically eight
20:56 - stream objects the declaration of eight
20:58 - stream objects right
21:00 - so using namespace std before using
21:03 - these objects in your program you have
21:04 - to tell from which namespace these are
21:08 - before c plus plus word standardized
21:10 - these are defined in iostream dot h
21:13 - header file
21:14 - but after that
21:16 - after the standardization process they
21:18 - have put everything in a namespace std
21:22 - within that io stream
21:24 - file and namespace is their std under
21:26 - that namespace these objects are there
21:28 - so now you have to tell
21:30 - that the file is iostream the header is
21:32 - iostream and the namespace is std
21:35 - within
21:37 - that namespace these objects are c out
21:39 - scene so if you want to use those
21:41 - objects you have to include the name
21:42 - space also that is why we generally
21:44 - write using namespace std right
21:47 - so that's it
21:48 - i hope you
21:50 - got now the basic idea about this thing
21:51 - now has to find this this is what
21:54 - uh macro definition pi 3.1415 right
21:59 - i have discussed macros in detail in the
22:01 - c playlist video so you can check out
22:04 - those things
22:05 - now this is global declaration
22:08 - in our variable r is equal to 2 and void
22:10 - area a function area
22:13 - the prototype of that function i have
22:15 - given right so this and r is equal to
22:17 - this is global declaration of this
22:19 - variable r you can
22:21 - use this r in any function in your
22:22 - program now the class
22:25 - classes class my class is there here i
22:27 - have taken only one variable a that is
22:30 - public word display and simply before
22:33 - using c out i am using std before using
22:35 - e and dl i'm using std because the c dl
22:38 - is also in this name space this
22:40 - identifier is also in their names i'm
22:41 - just printing inside class that's it
22:44 - right now main function in main function
22:46 - i have created object of this class how
22:49 - to create object name of the class and
22:50 - name of the object m
22:52 - now how to access this a and this
22:54 - display function using the object so m
22:56 - name of the object dot a now i'm
22:59 - assigning the value a 90 and i'm just
23:02 - calling m dot display right now i'm
23:05 - calling a function area also another
23:07 - function is there which is not there in
23:08 - this class separate function i have
23:11 - so area i am just calling i i haven't
23:13 - defined this function
23:15 - area function right now
23:17 - what i am printing see out hello world
23:19 - from main function and what i am
23:21 - printing m dot a and that's it whatever
23:24 - the value of a i am going to print so
23:26 - how to access using the object and
23:28 - return 0 return 0 means successfully we
23:30 - have
23:32 - returned means 0 would be returned to
23:34 - the operating system int means it is
23:36 - expecting
23:37 - integer value so return zero means
23:39 - successful termination of the program we
23:42 - are telling the operating system that
23:43 - successfully we have terminated from the
23:44 - program now this is a program section
23:47 - right user defined function so this is
23:49 - definition of user defined function void
23:51 - area float area variable i have taken
23:53 - area is equal to pi r square area of
23:55 - circle i am going to calculate now just
23:58 - printing the area
23:59 - that's it right so here i am writing pi
24:02 - so this is what a macro so i have
24:05 - defined hash defined pi is equal to this
24:07 - thing so this pi would be replaced by
24:09 - this value
24:10 - before compilation start
24:12 - right
24:14 - so now that set these whole section we
24:16 - have let me just run this
24:18 - i don't know it will work or not
24:20 - let me just run this and show you the
24:22 - output
24:26 - okay what is the output error p doesn't
24:28 - name a type
24:30 - okay now see uh the output what you got
24:34 - let me just
24:36 - do this see this is output inside class
24:38 - first of all it will
24:39 - print inside class then
24:42 - 12.566 area then hello from the main
24:45 - function and then value 90
24:48 - right that's it
24:50 - so you can see here
24:54 - first
24:55 - control will go to the main function
24:56 - then m.display so it will call first of
24:58 - all display in display we have inside
25:01 - class so that it will print then area it
25:03 - will call then it will print area of the
25:05 - circle then it will print hello world
25:07 - from main sec main function then it will
25:09 - print this line m dot a value is 90. so
25:12 - this is the program which is having all
25:13 - the sections but all these sections are
25:15 - not compulsory
25:16 - you have to include only link and main
25:19 - section right
25:21 - if you don't want to use again and again
25:22 - this stdc out std these thing you can
25:25 - simply write down here
25:28 - using
25:30 - namespace
25:32 - std
25:33 - now whatever is there in std name space
25:35 - those thing you can use in your program
25:38 - right those would be included here but i
25:41 - don't want to use all the things
25:43 - whatever is there in std there are many
25:45 - things
25:46 - in std i want to use only two to three
25:48 - things see out cn and e and dl that's it
25:51 - so why to include this std right
25:54 - but you can include this thing otherwise
25:55 - you can write using
25:58 - like std
26:00 - this
26:01 - and
26:03 - c out
26:05 - that is also fine using std name space
26:09 - using std scope resolution e and dn
26:11 - using std scope resolution c in that's
26:13 - it
26:14 - right so i hope the basic idea
26:17 - basic structure of a c plus plus program
26:19 - is clear to you
26:20 - about namespace i'll include a separate
26:22 - video right so that's it for this video
26:26 - see don't worry about these namespaces
26:29 - and
26:30 - header on these headers also we can
26:32 - upload a separate video if you are
26:34 - confused about this thing you can tell
26:35 - me in comment box
26:36 - and on namespace definitely i'm going to
26:38 - upload a separate video so if you don't
26:40 - get these thing namespace and header
26:42 - whatever whatever i have told you next
26:43 - link in this link section don't worry in
26:46 - that video you will get it better
26:48 - i hope now you have basic idea about the
26:50 - structure and what are in these sections
26:53 - overview of these briefly you have have
26:55 - the idea
26:56 - right so now i will see you in the next
26:58 - video till then bye bye take care

Cleaned transcript:

so in the series of learning c plus plus programming language in the previous video we have discussed history of c plus plus in this video we'll talk about basic structure of a c plus plus program right so uh before writing your actual writing the program you should have basic idea about the structure of a c plus program and it is almost same as the structure of a c program right that way you can check out in the side button right and these are the sections in which you know uh which basic structure of a c plus first program can have but these sections are not compulsory all these sections only two sections or three sections are compulsory to include in your program all other sections are optional so what are optional sections what are compulsory sections we'll discuss in detail in this video with the help of a program as well i'll show you the program on my laptop which will include all these sections right so i'll show you practical also so these are some sections our c plus plus program can have and i will not discuss in detail those sections which are same as in structure of a c program because i think uh better not to waste time on those sections those sections explaining again in that video i have explained these sections in detail so you can check out that video that i have put in the side button right or you can check out in the description box i'll put the complete playlist link see complete playlist you can go to that playlist and you can check out the video at starting i think third or fourth video is about structure of a c program so you go to that video first then come to this video so now the first section is documentation section in this section same as this see program also have this section here we generally include the information about that program like author who is the author of that program the date of written of that program and what this program is all about right only by seeing the documentation section one can identify this program is all about what if i have written a program right like author is journey date is this and this program is right you know program to add two numbers so if you will see that program by not you will not see the program actual program you just see the documentation in the documentation section and you will know who is author of this program the date of return of this program and what this program is all about so it will increase the readability and maintainability right so it is completely optional you don't need to include this section it is not compulsory and here we write the information in the comment box single line comment and this is multiple line comment this is single line command here we can multiple lines and the last of this line you can include this this is multiple line command all these the lines will write these comment after these comments that would not be considered by the compiler as line of code that would not be compiled that would not be converted into object code right that would completely be completely omitted by the compiler right so now the next section is link section so here we have two parts in c plus program header and namespace generally in c we have like we know header file hash include stdio.h right here also previous in previous version of c we include something like this i use stream we used to include i use stream dot edge this thing hash include we call it as a header file it contains the you know you can see the declaration or the prototype of all the builtin functions and the constant and some objects everything prototype of those builtin things right so header files or you can say now we now modern compiler support what i use string the known dot h version we don't write dot h now we generally wrote these things before c plus plus got standardized right modern compilers don't support these things these files dot h files after c plus plus good standardize right the concept of name spaces comes and everything they group into namespaces right namespace means it's you can say just a container container for identifiers identifier means just a name of any function or object or any constant these things are identifiers so namespace is just a container or you can say group of elements objects classes functions in name spaces we have definition of these things declaration of these things object class is function constant these things right so after c plus plus got standardized we use this thing only this is known as header not header file we call it as a simply header i o stream header and in this header we have eight stream object declaration of eight stream objects as well as i stream objects o stream objects that are also there in this io stream input output stream right so the object we use c in c out for error c e double r we use a and dl we use all these objects are declared in this header in this header but under a namespace named std right i'll show you i'll show you this header on my laptop what is there in this header in this header it just we there is a code there will be a code in this header and it's like a name space it's like you can see it's a group std name space and here we have these things whatever you use like the object c and c out and all these things so after c plus plus good standardized they group these things under name spaces and why name spaces to resolve or to you know resolve the name conflicts now what does this name conflict see so i guess this is clear why we include these header right generally in a program you know we use some builtin functions or classes or objects or constant right c and see how these are considered as object these are built in those functions or classes these are defined in library files so to include these things in your program we you have to give appropriate header right according to your requirement so if you want to use input output related things the objects or functions you use which header io string right so that is why you need to include these headers right and before this is not a standard header now right only turbo c plus plus compiler i think support this thing but vs code don't support this modern compiler don't support this dot h version they support without you know no dot h version see before these c out scene these were defined in io stream dot h but after c plus plus good standardized these things c in c out and many other things were moved into a namespace named std and this known dot h version these are considered as standard header standard version standard header right so that's why nowadays we include this thing not dot h so now under this obviously everything is grouped in name spaces so one namespace is standard namespace that is std there we have all these c in c out and dl these these objects declaration of these objects stream objects right that is why generally we write down your program using namespace std so that is part of link section here we use this headers and appropriate name space right so link section we have these headers i think this is clear to you and another thing we have name spaces name space i think this is clear to you and why we need this name space like don't worry in detail i'll put a video about name spaces right ah if we i'll discuss more in name space then this video will be about name spaces not a structure of a c program i'll i'll give you a general basic idea a brief idea of the headers and namespaces so i have told you name spaces are used to resolve the name conflict uh same as like two child half same name like maybe no no i will not take rahul one comment i wrote like one student or named aniket he said every time you take rahu next time take my name okay consider aniket is a student aniket is thick a student in one class in computer science also only student in ec also in and ec so aniket is there right now when i call aniket who will respond this or this both are standing you can say here only so who will respond i don't know because there is ambiguity right if i say aniket from cs then he'll respond to me aniket from ec then he'll respond to me so by calling aniket by aniket from cs the this will resolve the conflict there is no conflict now though no name conflict same happens in the case of programming right now this will be considered you can see as a name space so we are identifying two same things by name spaces if no namespace is there this will create con conflict ambiguity in your program right so same suppose we know that we don't we cannot have in the same program two functions or two objects of same name two classes of same name right but yeah you can have same name if you resolve the conflict by using name space concept right that i have told you in real life you can take one example like this right suppose in suppose in two library files we have same function named any function name you can say support sort or print any function and you are you are included you have included both the header files in your program right now whenever you call in your program suppose we have a function name sort this function solved so this is in this header file so this header file also then compiler is going to get confused like which function to call from this or from this so to you know what to resolve this ambiguity we use the concept of name spaces they introduced the concept of name spaces in programming language right so that same name of any function object or classes can be used right because namespace is different so if name is same then there would be no conflict like this if i have and you can create your own namespace also how to create just write down this keyword namespace and the name of your namespace suppose i am taking ns1 namespace 1 just curly braces and here suppose word salt and just coding of this thing another namespace is there namespace n is 2 here also we have void sort and definition of this and that's it no semicolon after name space right so now whenever you call this sort s o r t it will you know confuse the compiler which function to be called so to resolve this thing we write what yeah obviously this is this in this name space so you write before this thing you write the name of the name space ns1 and scope resolution operator and if you write ns2 scope resolution operator and the function name sort now that's fine this line will call this function this line will call this function although name is same but no conflict is there you have properly identified these by the name of their namespaces ns1 and s2 scope resolution that is why programs generally be used in using namespace std or maybe you you have written like std this c out this kind of thing or std this scope resolution operator seen so if name space is just provide scope the scope of this is within this name space the scope of this function is within this name space right that is why it is known as scope resolution so this this function scope of this is within this name space the scope of this function is in this name space right i hope now basic idea about name space is clear to you right what is namespace and why we use this thing to resolve name conflict basically right so in detail we'll see the name spaces concept in a separate video so in link section we have headers and namespaces so that is all about this link section then definition section we have macro definition like hash define these kind of things you can take this is same as in c global declaration also globally if you want to declare any variable you can write down suppose in your program you have 5 or 10 functions and all these functions are using two variable a and b so rather than declaring these two variables again and again in ten functions right same variable a b you just declare those variable as globally so all the functions can use those variables globally right and after that see this section is optional link section this is compulsory you have to include this in your program definition this is also compulsory sorry optional definition global declaration this is also optional you don't want to use any global variable it's up to you so this is also optional class this is also optional without using class also you can write down a program simply that i have discussed simply print hello world nothing you have to include just header iostream using namespace std although it's a bad practice to include using namespace study why so that also discussed in a separate video after that just main function then see out hello world that's it no classes there so this is also optional main function this is compulsory so these two are compulsory to include in your program all others are optional according to your requirement you need to add now in class we if you want to create any class just class how to write class your class name suppose i'm writing my class so first we should be capital and then every word would be separated by capital letters like my after next word is class so c would be capital otherwise uh all the letters would be and then small right so my class and how to define this thing here you can write down data members and your member function data members means uh the variables suppose i want to take to int a one variable only right and member function is there i want to use void display so here only you will define this thing like c out and hello that's it right so you will or you need to specify here pub specifier private protected or public public means everybody can use these things uh the variable and the function so here we have the data members and the member function definition if you do not want to define the function within the class outside the class also you can define but there you have to tell the compiler that this function is from this class so the syntax would be different class name scope resolution operator and after that you have to do that thing that also we can discuss so this is what the next section this is optional class definition there we have data members and definition of member function that's it now comes to main function this is compulsory obviously from where the execution would be started from main function first of all control will go to main function right so main function is compulsory main also there are two parts like if you want to declare any local variable you can declare those thing and the statements executable statements you can say the declaration part and executable part right that would be in main function or any function you want to call that also you will call in main function right you can call in main function in any other function which also you can call but in main function also we call generally right now for the classes if there is any class so object of that class also you will create in that main right using that object we can access the members and functions of that class right have to write down this thing i'll show you practical also the main function is also important compulsory next is sub program user defined functions if there are any other user defined functions you have taken then after main u generally after main we define those functions right so after main you will define those your user defined functions there can be many number of user defined functions right so see documentation link is something different from c program the structure of a c program because here we have concept of note header files we call it is that header and name spaces but this is same as structure of c program definition is also same global declaration is also same main function is also same and sub program section is also same so for detail for detailing for detailed explanation of these functions you can refer to that video right if you you know got it from this video then it is fine no need to refer that video right now i think let me just show you one example then you will get a clear idea about these sections right so this is a program right i have already written this program let me just increase the phone size first dot cpp so see this i have written documentation section author jaintika three written on 13 may 20 20 22 programmed to demonstrate basic structure of a c plus program the first line is single line comment and these two lines are within multiple line commands so this is documentation section right it will increase the readability and maintainability maintain maintainability of the program like if any other one wants to maintain this program or to you know read this program want to understand this program what this program is all about then by looking at this only he or she can get the idea this program is all about what right now next is link section so here we have hash include io stream this header io stream rotates here i haven't included using name space std because i have told you this is a bad practice to include why so that also we can discuss rather than including here i am using std like this std namespace copy resolution co std endn what are the objects stream objects which are in std name space if you you want to use those objects those things those objects in your program then before using those objects you have to specify from which name space these objects are otherwise the c out if you don't write this std colon this std scope resolution and you simply write c out then it will give error right because now see identify c out is undefined this would be considered as a normal in our program we have those functions or objects or anything but in this program we do not have any c out the declaration of c out so from where we are using this from name space std so now it will not give error right so i'm using this thing rather than using namespace std i'm not writing that thing so see what is there in this i o stream i haven't included dot h because modern compiler don't support these files now these known dotage versions are considered as standard headers right so you just press ctrl and click on this i o stream standard io stream objects are there in this file see you can read out this thing and i i just want to tell you where is this std name space c name space std they have defined everything they have group everything whatever the functions or objects are there in this under this name space so in this name space std and they are also including o stream and i i stream files also right so in this std what we have the object c in c out c r r c log these objects we have basically eight stream objects the declaration of eight stream objects right so using namespace std before using these objects in your program you have to tell from which namespace these are before c plus plus word standardized these are defined in iostream dot h header file but after that after the standardization process they have put everything in a namespace std within that io stream file and namespace is their std under that namespace these objects are there so now you have to tell that the file is iostream the header is iostream and the namespace is std within that namespace these objects are c out scene so if you want to use those objects you have to include the name space also that is why we generally write using namespace std right so that's it i hope you got now the basic idea about this thing now has to find this this is what uh macro definition pi 3.1415 right i have discussed macros in detail in the c playlist video so you can check out those things now this is global declaration in our variable r is equal to 2 and void area a function area the prototype of that function i have given right so this and r is equal to this is global declaration of this variable r you can use this r in any function in your program now the class classes class my class is there here i have taken only one variable a that is public word display and simply before using c out i am using std before using e and dl i'm using std because the c dl is also in this name space this identifier is also in their names i'm just printing inside class that's it right now main function in main function i have created object of this class how to create object name of the class and name of the object m now how to access this a and this display function using the object so m name of the object dot a now i'm assigning the value a 90 and i'm just calling m dot display right now i'm calling a function area also another function is there which is not there in this class separate function i have so area i am just calling i i haven't defined this function area function right now what i am printing see out hello world from main function and what i am printing m dot a and that's it whatever the value of a i am going to print so how to access using the object and return 0 return 0 means successfully we have returned means 0 would be returned to the operating system int means it is expecting integer value so return zero means successful termination of the program we are telling the operating system that successfully we have terminated from the program now this is a program section right user defined function so this is definition of user defined function void area float area variable i have taken area is equal to pi r square area of circle i am going to calculate now just printing the area that's it right so here i am writing pi so this is what a macro so i have defined hash defined pi is equal to this thing so this pi would be replaced by this value before compilation start right so now that set these whole section we have let me just run this i don't know it will work or not let me just run this and show you the output okay what is the output error p doesn't name a type okay now see uh the output what you got let me just do this see this is output inside class first of all it will print inside class then 12.566 area then hello from the main function and then value 90 right that's it so you can see here first control will go to the main function then m.display so it will call first of all display in display we have inside class so that it will print then area it will call then it will print area of the circle then it will print hello world from main sec main function then it will print this line m dot a value is 90. so this is the program which is having all the sections but all these sections are not compulsory you have to include only link and main section right if you don't want to use again and again this stdc out std these thing you can simply write down here using namespace std now whatever is there in std name space those thing you can use in your program right those would be included here but i don't want to use all the things whatever is there in std there are many things in std i want to use only two to three things see out cn and e and dl that's it so why to include this std right but you can include this thing otherwise you can write using like std this and c out that is also fine using std name space using std scope resolution e and dn using std scope resolution c in that's it right so i hope the basic idea basic structure of a c plus plus program is clear to you about namespace i'll include a separate video right so that's it for this video see don't worry about these namespaces and header on these headers also we can upload a separate video if you are confused about this thing you can tell me in comment box and on namespace definitely i'm going to upload a separate video so if you don't get these thing namespace and header whatever whatever i have told you next link in this link section don't worry in that video you will get it better i hope now you have basic idea about the structure and what are in these sections overview of these briefly you have have the idea right so now i will see you in the next video till then bye bye take care
