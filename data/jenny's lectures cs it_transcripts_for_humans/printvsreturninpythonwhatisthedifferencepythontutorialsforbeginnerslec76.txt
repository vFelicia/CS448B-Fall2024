With timestamps:

00:04 - we are discussing functions in python in
00:06 - the previous year we have seen one code
00:08 - exercise how to calculate days in a
00:10 - month with the help of functions right
00:12 - now you have noticed one thing we are
00:15 - using somewhere return statement in a
00:17 - function and somewhere we are simply
00:19 - printing right now what is difference
00:21 - between the Sprint and return when we
00:23 - should use print when we should use
00:25 - return
00:26 - right so that's exactly in this video
00:28 - we'll be discussing
00:30 - what is difference between print and
00:31 - router with the help of example program
00:34 - practically I will show you so we'll
00:36 - figure out all the differences between
00:38 - print and return now print is basically
00:40 - a function
00:41 - that we call
00:43 - right and it will whenever you want to
00:47 - show something to the user you can call
00:49 - Print whatever you will write in this
00:51 - print that will exactly be seen to the
00:53 - user on the screen
00:55 - right some value or maybe any message or
00:58 - anything
00:59 - right
01:00 - but return is a keyword
01:06 - right
01:07 - so return is not going to show some
01:10 - value to the user it is not printing but
01:12 - printing will show some values or maybe
01:14 - any message or anything whatever you
01:16 - want to show to the user you can use
01:19 - whenever you want to show something to
01:21 - the user then you can use print you can
01:22 - call Print function right but it will
01:25 - not show some values or anything to the
01:28 - user it is going to return where to the
01:32 - caller
01:34 - simple example is
01:36 - let's take I'm I'm writing a function
01:39 - now see one function I am having
01:42 - any function one it is accepting two
01:46 - arguments right
01:47 - so we are calling this function we are
01:49 - passing 5 and 4 and it is doing just
01:51 - some of these arguments and here I am
01:52 - just writing print and here in this
01:54 - function I am writing return
01:56 - C return this C right so here it will
02:00 - simply print this value to the screen
02:04 - but when control will
02:07 - come to this line then what will happen
02:09 - it will not show whatever the value of C
02:11 - to the user it will return that value to
02:14 - the caller now where is the caller here
02:16 - so it will return this value here
02:18 - so now this complete would be replaced
02:20 - with 9 now 9 would be stored in this
02:23 - output end this we can print we can
02:25 - print or anything we want to do with
02:27 - this value right
02:29 - now
02:30 - yeah this function is obviously and
02:33 - every function is going to return
02:34 - something if you are not writing this
02:36 - return statement here it is going to
02:38 - return none
02:40 - so if you
02:42 - here also you write output and then you
02:45 - print this output then
02:48 - it will give first of all 9 then none
02:52 - because it is returning every function
02:55 - is going to return if you are not
02:56 - returning explicitly then it will
02:58 - implicitly it will return none so yeah
03:00 - it will return none right now
03:05 - this return is going to change the flow
03:08 - of execution of the program
03:10 - because as soon as this is going to
03:12 - encounter then control will go to the
03:15 - caller
03:16 - when wherever the caller in the program
03:19 - means at one point of time the flow of
03:22 - execution is this like this right and
03:26 - suddenly it will the control will switch
03:28 - to the caller so it will change the flow
03:31 - of exhibition but the Sprint is not
03:32 - going to change the flow of execution
03:34 - right
03:36 - and whenever this return would be
03:37 - encountered it will stop the execution
03:41 - of the current function right so we are
03:45 - in this function so execution of this
03:47 - current function would be
03:48 - stopped and control will go to the
03:51 - column so after return if you write
03:53 - something within this function if
03:55 - suppose I am writing print hi
03:59 - then this will not be printed right
04:02 - because exactly from here the execution
04:05 - of this function would be stopped and we
04:08 - will be exit from this function and to
04:10 - the caller will be here
04:12 - right
04:13 - okay so so return we will use when you
04:16 - want to move one value from one point to
04:18 - another point in your code right
04:21 - now the main difference is what when we
04:24 - should use this return when we should
04:26 - use this print because if you simply
04:28 - print here that is also fine we are
04:30 - printing here but simply we are just
04:31 - printing here it's not more than that we
04:34 - are doing here right but somewhere
04:37 - if you want to do something with this
04:39 - value whatever the value the function
04:40 - will return you can pass this one is
04:43 - important you can pass that value as an
04:46 - argument to some another function
04:48 - right you can do whatever you want to do
04:51 - with that value
04:53 - suppose we have a function another
04:55 - function
04:57 - function two
05:02 - so here we will have some definition and
05:05 - in function 2 calling we can pass this
05:07 - output as an argument
05:10 - so further we can use this value
05:14 - because we are returning that value and
05:17 - we are accepting that thing so we can
05:18 - use that value further either we can
05:20 - print or we can pass that value in as an
05:23 - argument to other function or we can do
05:25 - some other calculation and anything
05:27 - so that is a plus point if you want to
05:30 - do this kind of thing then we should use
05:32 - return rather than just print but if you
05:34 - are simply printing you are not
05:35 - returning the value so we can we cannot
05:37 - use this value further
05:39 - right
05:41 - this thing I'll show you with the help
05:43 - of program practically right so the
05:46 - value returned can be used again
05:49 - right but this is not the thing with
05:52 - print the value cannot be used again
05:54 - once you have printed the value that
05:55 - cannot be used again right and print we
05:58 - can use anywhere in the program but
06:00 - return we can only use within a function
06:03 - within a function that's it
06:06 - right so let me show you this thing with
06:08 - the help of practical okay so let's
06:10 - create a new file here
06:15 - print versus return Dot py
06:18 - simply let's define a function
06:22 - same example we will take and
06:24 - like just adding two numbers right
06:29 - so we will simply do like a plus b and
06:33 - in one case we will simply print C
06:36 - that's it
06:39 - and see we are calling this function we
06:41 - are passing 3 and 4. so it will print 7.
06:45 - right
06:46 - now rather than this let's just
06:50 - copy paste this thing
06:52 - and we will just
06:54 - comment this out right rather than print
06:57 - we will return this value
07:00 - return C
07:03 - so it is going to return this this value
07:05 - to the caller so we will be storing this
07:08 - value in a variable output and
07:13 - in this case first thing we are simply
07:16 - printing this output so that is also
07:18 - will give you seven so obviously you
07:20 - will you are not seeing any difference
07:23 - here
07:24 - I mean both are like same
07:27 - but if see if
07:29 - we are printing we are not returning
07:31 - here anything but
07:37 - I'm just modifying this a little bit
07:39 - output one output two Function One
07:41 - function
07:42 - two so here
07:45 - see now let's comment this out
07:48 - now let me run this
07:50 - C7 plus none why none because
07:55 - every function is going to return
07:57 - something we are not returning here
07:59 - explicitly anything then it will return
08:01 - none so if you accept this thing in any
08:04 - variable and you print that variable
08:05 - then it will print none right now see
08:09 - the main thing the main advantage of you
08:11 - can say using this return return
08:13 - statement is what this value we can use
08:16 - further this return C it is now in
08:20 - output two so we can use further this
08:22 - value we can use this again
08:24 - so if suppose we are passing this in
08:27 - function one that suppose I am passing a
08:30 - b
08:31 - not a b simply
08:34 - I am going to call this function
08:37 - function 1 and
08:39 - I'll pass output 2 this output 2.
08:43 - whatever it is returning
08:45 - that I am passing in function one so
08:49 - suppose I am one variable I'm taking
08:51 - like X
08:52 - and
08:57 - I'm returning X whatever the value is in
09:00 - that I'll just add 1. simple one you can
09:03 - do anything
09:04 - we are not printing here and
09:07 - let's delete this and whatever this
09:10 - function will return I am storing that
09:12 - in final output variable right and then
09:16 - I'll print this final output variable
09:19 - right so let's run this
09:21 - see it will print eight
09:23 - y eight because first of all
09:28 - this function would be called
09:33 - function 2 3 and 4 will be passed means
09:36 - 7 it will return seven now again we are
09:38 - calling this function one and we are
09:39 - passing the seven the output to whatever
09:41 - the output from that function then 7
09:43 - plus 1 is 8 and the final output is
09:45 - eight so we are passing whatever this
09:48 - this function will return we are passing
09:50 - that again as an argument to another
09:51 - function so we are using that value
09:53 - again
09:54 - right like if you are calculating
09:56 - something like 3 plus 4 in a calculator
09:58 - 7 then plus again then plus so previous
10:01 - result we are using and in the same we
10:04 - are doing add add add add like this
10:07 - same thing we will be doing in next
10:09 - video same project like we are making a
10:12 - we will be making a calculator
10:14 - right
10:15 - so then you will get it better why we
10:17 - should use this return rather than
10:19 - simply just print
10:21 - right so I hope you got basic difference
10:23 - between print and return and when we
10:25 - should use return so that was a simple
10:28 - one like difference between print and
10:30 - return but that is crucial also you
10:32 - should have idea you should be very
10:34 - clear about what a Sprint what is
10:36 - returned when to use print when to use
10:37 - return right
10:39 - what is advantage of using return in
10:41 - which situation we are using return
10:42 - function right now in the next video
10:45 - we'll see one project
10:48 - take care

Cleaned transcript:

we are discussing functions in python in the previous year we have seen one code exercise how to calculate days in a month with the help of functions right now you have noticed one thing we are using somewhere return statement in a function and somewhere we are simply printing right now what is difference between the Sprint and return when we should use print when we should use return right so that's exactly in this video we'll be discussing what is difference between print and router with the help of example program practically I will show you so we'll figure out all the differences between print and return now print is basically a function that we call right and it will whenever you want to show something to the user you can call Print whatever you will write in this print that will exactly be seen to the user on the screen right some value or maybe any message or anything right but return is a keyword right so return is not going to show some value to the user it is not printing but printing will show some values or maybe any message or anything whatever you want to show to the user you can use whenever you want to show something to the user then you can use print you can call Print function right but it will not show some values or anything to the user it is going to return where to the caller simple example is let's take I'm I'm writing a function now see one function I am having any function one it is accepting two arguments right so we are calling this function we are passing 5 and 4 and it is doing just some of these arguments and here I am just writing print and here in this function I am writing return C return this C right so here it will simply print this value to the screen but when control will come to this line then what will happen it will not show whatever the value of C to the user it will return that value to the caller now where is the caller here so it will return this value here so now this complete would be replaced with 9 now 9 would be stored in this output end this we can print we can print or anything we want to do with this value right now yeah this function is obviously and every function is going to return something if you are not writing this return statement here it is going to return none so if you here also you write output and then you print this output then it will give first of all 9 then none because it is returning every function is going to return if you are not returning explicitly then it will implicitly it will return none so yeah it will return none right now this return is going to change the flow of execution of the program because as soon as this is going to encounter then control will go to the caller when wherever the caller in the program means at one point of time the flow of execution is this like this right and suddenly it will the control will switch to the caller so it will change the flow of exhibition but the Sprint is not going to change the flow of execution right and whenever this return would be encountered it will stop the execution of the current function right so we are in this function so execution of this current function would be stopped and control will go to the column so after return if you write something within this function if suppose I am writing print hi then this will not be printed right because exactly from here the execution of this function would be stopped and we will be exit from this function and to the caller will be here right okay so so return we will use when you want to move one value from one point to another point in your code right now the main difference is what when we should use this return when we should use this print because if you simply print here that is also fine we are printing here but simply we are just printing here it's not more than that we are doing here right but somewhere if you want to do something with this value whatever the value the function will return you can pass this one is important you can pass that value as an argument to some another function right you can do whatever you want to do with that value suppose we have a function another function function two so here we will have some definition and in function 2 calling we can pass this output as an argument so further we can use this value because we are returning that value and we are accepting that thing so we can use that value further either we can print or we can pass that value in as an argument to other function or we can do some other calculation and anything so that is a plus point if you want to do this kind of thing then we should use return rather than just print but if you are simply printing you are not returning the value so we can we cannot use this value further right this thing I'll show you with the help of program practically right so the value returned can be used again right but this is not the thing with print the value cannot be used again once you have printed the value that cannot be used again right and print we can use anywhere in the program but return we can only use within a function within a function that's it right so let me show you this thing with the help of practical okay so let's create a new file here print versus return Dot py simply let's define a function same example we will take and like just adding two numbers right so we will simply do like a plus b and in one case we will simply print C that's it and see we are calling this function we are passing 3 and 4. so it will print 7. right now rather than this let's just copy paste this thing and we will just comment this out right rather than print we will return this value return C so it is going to return this this value to the caller so we will be storing this value in a variable output and in this case first thing we are simply printing this output so that is also will give you seven so obviously you will you are not seeing any difference here I mean both are like same but if see if we are printing we are not returning here anything but I'm just modifying this a little bit output one output two Function One function two so here see now let's comment this out now let me run this C7 plus none why none because every function is going to return something we are not returning here explicitly anything then it will return none so if you accept this thing in any variable and you print that variable then it will print none right now see the main thing the main advantage of you can say using this return return statement is what this value we can use further this return C it is now in output two so we can use further this value we can use this again so if suppose we are passing this in function one that suppose I am passing a b not a b simply I am going to call this function function 1 and I'll pass output 2 this output 2. whatever it is returning that I am passing in function one so suppose I am one variable I'm taking like X and I'm returning X whatever the value is in that I'll just add 1. simple one you can do anything we are not printing here and let's delete this and whatever this function will return I am storing that in final output variable right and then I'll print this final output variable right so let's run this see it will print eight y eight because first of all this function would be called function 2 3 and 4 will be passed means 7 it will return seven now again we are calling this function one and we are passing the seven the output to whatever the output from that function then 7 plus 1 is 8 and the final output is eight so we are passing whatever this this function will return we are passing that again as an argument to another function so we are using that value again right like if you are calculating something like 3 plus 4 in a calculator 7 then plus again then plus so previous result we are using and in the same we are doing add add add add like this same thing we will be doing in next video same project like we are making a we will be making a calculator right so then you will get it better why we should use this return rather than simply just print right so I hope you got basic difference between print and return and when we should use return so that was a simple one like difference between print and return but that is crucial also you should have idea you should be very clear about what a Sprint what is returned when to use print when to use return right what is advantage of using return in which situation we are using return function right now in the next video we'll see one project take care
