With timestamps:

00:00 - so in the series of learning programming
00:02 - in c we are discussing pointers in C so
00:04 - far we have discussed Basics about
00:05 - pointers double pointer as well as uh
00:08 - what kind of arithmetic operation you
00:10 - can perform on pointer we have done
00:12 - addition and subtraction right in this
00:14 - video we'll talk about how to perform
00:16 - increment and decrement on pointer this
00:19 - operation how you can perform increment
00:21 - means suppose p is pointer variable then
00:24 - p++ and decrement is p minus minus this
00:27 - is post increment post decrement plus
00:30 - plus p means
00:31 - pre-increment and this is pre- decrement
00:35 - this thing we will discuss with the help
00:36 - of proper program and I'll show you
00:38 - practical also so now let's see how you
00:41 - can perform increment and decrement on
00:43 - pointer first of all we'll discuss
00:45 - increment post increment and
00:47 - pre-increment I hope the functioning of
00:50 - this increment and decrement operators
00:51 - are clear to you if not then I have
00:53 - uploaded a video you can watch out my C
00:57 - programming playlist the the link also
00:59 - I'll put in the description destion box
01:00 - of this video you can check out and
01:01 - first of all check out this video if you
01:03 - know the functioning of this increment
01:05 - and decrement operator then this video
01:07 - would be really you know very easy for
01:09 - you but if you don't know then many
01:11 - students I mean almost students get
01:14 - confused in this operation when we apply
01:16 - these operation with pointer then it's a
01:19 - little bit tricky right so first of all
01:22 - clear your concept of increment and
01:24 - decrement operator and then come to this
01:26 - video right here same I'm taking an
01:30 - array and here I'm taking one pointer s
01:34 - p right and I am initializing this
01:37 - pointer p is equal to a this is
01:39 - valid you don't need to write like
01:41 - address of a of zero a means this a is
01:45 - also it's like a constant pointer or a
01:47 - is containing the name of the array
01:49 - which is containing address of the base
01:50 - or you can say the Base address so P
01:52 - equal to a is valid but if you write
01:54 - down a is equal to P you think that a is
01:57 - also pointer because name of the the
01:59 - array act as a pointer to this array and
02:01 - P is also pointer so you can assign this
02:04 - value no this is not possible a is what
02:06 - constant
02:07 - pointer name of array is constant
02:10 - pointer to this array here in a you
02:12 - cannot you cannot assign anything or you
02:15 - cannot increase it like a A+ Plus or a
02:17 - minus minus you can't do anything you
02:19 - know this kind of thing with this array
02:21 - name yeah with pointer you can do this
02:24 - so this assignment is valid but this is
02:26 - not valid you can try it at your own
02:29 - right
02:30 - so here in memory half the S is to be
02:33 - declared so this is how you can say
02:35 - visual representation of the S A is also
02:39 - acting as a constant pointer a is
02:41 - containing name of AR is containing Base
02:42 - address like thousand and in P we have
02:45 - stored address like a whatever value of
02:47 - a so a is we have th so in P also we
02:50 - have thand so both A and P are pointing
02:52 - to this first element of this array
02:54 - right so now we can move this pointer P
02:56 - but we cannot move this a right this
02:59 - this is constant pointer this will
03:01 - always contain Base address we cannot
03:03 - change it right so now how to increment
03:07 - if you want to increment this P so
03:10 - suppose if you write
03:14 - p++ it means it
03:17 - means in another term if you want to
03:19 - write this you can also write P isal to
03:21 - p + 1 both are same this and this are
03:23 - same but this is not equal to p + 1 only
03:27 - p + 1 no this will not give any output
03:30 - it is equal to P equal to p + 1 because
03:32 - after doing p+ 1 obviously we have to
03:34 - assign we have to update value of P here
03:36 - we are not updating that value right so
03:39 - either you can do or you can do this so
03:41 - here we are having like this thing p++
03:45 - it means now it means now p is pointing
03:49 - to
03:50 - what one p is we are moving P one
03:54 - location forward right ultimately we are
03:57 - adding one to P but one means what you
03:59 - have to add in P we have 1,000 in plus 1
04:04 - into what is size of the data type
04:07 - you're using end that is four so 1,4 so
04:10 - now p is pointing to 104 p++ means it
04:14 - will Point next
04:16 - element again p++ it will Point next
04:19 - element right and now after that if you
04:22 - want to print here now if you want to
04:25 - print percentage D SRI p s p means
04:29 - Direction operator it is acting as IND
04:31 - Direction operator value at this address
04:33 - now in P we are having after doing p++
04:36 - in P we are having 1 04 now p is
04:40 - pointing to this not to the first
04:41 - element so now value at p is two so it
04:44 - will give you
04:46 - two right now see better if I write
04:51 - something like this EST P
04:56 - ++ I have combined both the operation
04:59 - post increment and estri now what output
05:02 - you will get here
05:05 - see here at starting now we have th000
05:08 - in so now see this is what post
05:12 - increment what is functioning of post
05:15 - increment first of all it will return
05:18 - the value and then do Plus+ means it
05:21 - will return the original value if post
05:23 - increment is there then it will
05:25 - increment so original value of p is what
05:29 - original value of p is what 1,000 so it
05:31 - will return first of all 1,000 and now
05:34 - it will increment P by
05:37 - 1 we are incrementing pointer so it's
05:41 - not mean 1 1 it will mean 1
05:44 - 04 right now p is pointing to here now p
05:47 - is containing 1 04 and now p is pointing
05:50 - to this right but here it is going to
05:53 - return th000 only the previous value and
05:57 - now value at 1,000 is 3 so it will
06:00 - return three only output you will get
06:03 - three output you will get three but now
06:06 - p is pointing to here now after this
06:09 - statement if you print EST P it means
06:12 - now p is pointing to this now it will
06:13 - print
06:15 - two right I hope you got the difference
06:18 - and suppose if you write here some
06:20 - student think that if I write something
06:22 - like this then it will give it will
06:25 - first increment and it will give value
06:27 - two it first of all it will will
06:29 - evaluate p++ yeah obviously it will
06:31 - evaluate p++ first but what is function
06:34 - of
06:35 - p++ this is post first of all it will
06:38 - return the original value original value
06:40 - of p++ is what
06:44 - here p is what a that is th000 original
06:47 - value of p is th000 so it will return
06:49 - first of all th000 so here 1,000 would
06:52 - be there and now it will increment this
06:54 - so now it it is pointing
06:56 - to this but this operation this estri
07:00 - would be performed on thee previous
07:03 - value not the modified value now again
07:05 - EST th000 so it will give three only in
07:08 - the both the cases it will give three
07:11 - right I hope you got post increment
07:14 - functioning right now if I write here
07:17 - something like this estri Plus+
07:21 - P now plus plus p is what pre-increment
07:25 - pre-increment what is function of
07:27 - pre-increment first of all it will
07:30 - increase the value it will modify the
07:31 - value and then modified value would be
07:34 - returned so now plus plus P so it will
07:37 - increment it will increment the value of
07:39 - p in P at starting we have th000 it is
07:43 - pointing to this now increase this P
07:46 - increment means it will point to the
07:48 - next element so now in P we have 1 04 it
07:51 - is pointing to here it is not pointing
07:53 - to here right and now updated value is
07:57 - what 1 04 and now will return value at
08:00 - one4 that is two so this will give
08:02 - answer two same if you put it in bracket
08:06 - also that that would also give you same
08:08 - answer that is
08:09 - two right so I hope you got the
08:12 - difference between pre and post see here
08:14 - you can also uh know see here we have
08:17 - two operator like one is estri and one
08:19 - one is increment operator and both are
08:22 - having same precedence at same level
08:24 - both are right so associativity is right
08:26 - to left right to left
08:30 - right so from there we are going to move
08:32 - from right to left so first operator is
08:35 - what this increment operator so this
08:37 - would be evaluated first and after that
08:39 - estri would be evaluated right I hope
08:41 - you know how to evaluate the expression
08:44 - having operators you know operators
08:46 - precedence and associativity right now
08:50 - but see if I'm writing one line here now
08:53 - tell me what output you will get now
08:56 - what output you will get of this line
08:57 - two times I'm using a strict p ++ s
09:01 - p++ now here which would be evaluated
09:05 - first first of all this would be
09:08 - evaluated from right to left right so
09:12 - now first of all this p++ this is what
09:14 - post so original value of p is th000
09:16 - value at th000 is 3 original value is
09:20 - th000 that would be returned and now P
09:22 - becomes p++ that is p is now pointing to
09:24 - one4 P is not pointing to here now this
09:28 - one
09:29 - p++ original value of p is now 104 that
09:33 - would be returned first and now P would
09:35 - be incremented so original value is 1 04
09:39 - so whatever whatever the value at 1 04
09:41 - that is two two would be return and now
09:43 - P becomes 8 now p is pointing to this
09:47 - one so you'll get two and
09:50 - three right I hope you got this one
09:53 - right now pre uh decrement and post
09:57 - decrement see if I write here s p minus
10:01 - minus same post decrement means first of
10:04 - all original value would be returned
10:06 - right now here the case is what p is
10:09 - equal to a means p is pointing to here
10:11 - now first of all the original value of P
10:13 - would be returned original value of p is
10:15 - th000 right so EST
10:19 - th000 now whatever value at th000 that
10:21 - would be returned that is 3 three would
10:23 - be returned and after this P minus minus
10:26 - now p is pointing to P should move
10:29 - position backward means 99
10:32 - 96 what we have here we don't know so
10:35 - now after that if you will print a St P
10:37 - it will return any garbage value
10:40 - right because it is moving out of this
10:43 - areay out of range of the array right so
10:46 - here we should take care of this thing
10:49 - suppose I'm writing here address of a
10:52 - of
10:55 - 4 address of a
10:57 - four or you can set address of a of 3 so
11:01 - now p is pointing to a of 3 that is in P
11:04 - we have 1 1
11:06 - 2 right now if you will print s p minus
11:09 - minus original value of p is 1 one2 that
11:12 - value would be printed that is zero
11:13 - would be printed and now p is pointing
11:15 - to
11:16 - here right and if you print this thing
11:21 - then also you'll get zero but if you
11:24 - print this thing estri minus-
11:27 - P now
11:29 - this is pre decrement so now first of
11:32 - all pre decrement
11:36 - means value would be modified first that
11:39 - is p is here minus- p means move
11:42 - backward one position so now p is
11:43 - pointing to here now 1
11:47 - 8 p is pointing to this one and now
11:50 - value at this address is 1 8 is what 67
11:53 - so it would return 67 to you I hope you
11:57 - got the basic functioning of post and
11:59 - pre-increment and decrement operator
12:01 - when we perform with pointer right and
12:04 - so now one question for you
12:06 - is minus P three
12:11 - times I want to
12:15 - print with pre decrement operator s
12:18 - minus- p s minus- p s minus- p so before
12:22 - you know before compiling this on your
12:24 - laptop first of all dry run this and
12:26 - think what output you will get and after
12:28 - that you should run on your laptop and
12:30 - see you are getting same output or not
12:33 - right if you get same output it means
12:36 - you have got this concept if not then
12:39 - you have to do some practice on these
12:41 - type of questions so yeah this is little
12:43 - bit tricky and see maybe I can write
12:46 - something like this
12:48 - estri and estri P minus minus in that
12:52 - case what output you will get or you can
12:55 - say like EST P bracket
13:00 - Plus+ or you can say estri
13:05 - p++ or I must
13:08 - say EST p and here
13:12 - Plus+ this kind of thing you can also
13:15 - get right so what output you will get so
13:18 - this these questions are little bit
13:19 - tricky in this video just want to tell
13:22 - you like just want to get you familiar
13:23 - with the the the functioning of
13:25 - increment and decrement operator maybe
13:27 - we can take one more example one
13:29 - complicated problem on this kind of
13:31 - thing and I'll show you what output you
13:33 - are getting here and I can explain
13:35 - everything there so now first of all let
13:36 - me show you practically this thing
13:39 - whatever you have discussed in this
13:40 - video so now let me create a file first
13:44 - of all suppose pointer increment
13:47 - decrement do c right and
13:54 - U header
13:57 - file Main and here I'm taking one
14:01 - array uh I'm going to initialize it here
14:05 - like same I'm same input I'm taking
14:08 - three two so you'll get it better 67 and
14:12 - 0 and
14:14 - 56 right we're taking a
14:18 - pointer and P is equal to a I'm
14:21 - initializing right now
14:24 - printer suppose I want to print
14:27 - percentage d and uh first of all we we
14:31 - will be printing
14:34 - p++ right so see what output you should
14:38 - get you'll get three
14:42 - right because it is post
14:45 - increment so original value would be
14:47 - returned and original value is that is
14:50 - address of a base address of array
14:52 - address of the first element of this
14:53 - array so it is returning three right
14:56 - after that is it incrementing now if if
14:58 - you will print now if you will print
15:01 - print F percentage D and um must use
15:05 - slashing here here I'm printing a
15:11 - p so second value what you will get
15:16 - two see first is three next is two why
15:19 - because we have done p++
15:22 - also although it's post increment but we
15:25 - have done increment one B+ 1 you can say
15:28 - right
15:29 - and if you do here like this in bracket
15:32 - also if you'll put
15:34 - this then also you'll get same result
15:38 - three and two see three and
15:40 - two
15:42 - right and and if I write here something
15:45 - like
15:46 - this comma again I'm writing estri P
15:51 - ++ so now see what output you will
15:55 - get two time I'm printing here so two
15:58 - time perc percentage D we have to use
16:01 - right now see 2 3 this one would give
16:06 - you first p++ would give you two and
16:08 - this second one would give you three
16:11 - because associativity is right to left
16:14 - these operators are having associativity
16:16 - right to left right so from the right
16:18 - side we are going to start so first of
16:20 - all this would be
16:21 - executed the second one star p++ so that
16:24 - would give three then we would execute
16:27 - this star p+ plus right so now it would
16:30 - give you two because we have already
16:32 - done p++ I hope you got why you are
16:34 - getting this and after this if you are
16:36 - printing P then you will get obviously
16:38 - you will get 67 two times you have
16:39 - incremented P right and if you do what
16:44 - pre uh increment plus plus
16:48 - P right one time only I'm printing Plus+
16:53 - P
16:55 - see so now it is pre-increment so first
16:59 - of all it would P would be incremented
17:00 - then then value would be printed so
17:02 - first of all P would be incremented that
17:04 - is p is now pointing to Second element
17:07 - of this array that is why it is printing
17:10 - two right and this p is also printing
17:13 - two right so now this is pre and here if
17:18 - you write like estri
17:20 - again Plus+
17:23 - P now what you will get associativity is
17:26 - right to left so sorry we have to use
17:29 - here two time percentage D because I'm
17:31 - printing two values in this one right so
17:35 - see
17:38 - 267 right right to left so from right
17:41 - side we will move from this side so this
17:43 - would be executed first right so now it
17:46 - is pre-increment so first of all
17:48 - increment P so now p is pointing to this
17:50 - element second element that is two so
17:53 - two would be printed first and now again
17:58 - this would be executed so again here
17:59 - plus plus P pre-increment so first of
18:01 - all P would be incremented now p is
18:02 - pointing to the 67 this element and the
18:05 - value 67 would be printed and after that
18:07 - also this s p would also give 67 I hope
18:11 - you are getting this concept right now
18:14 - pre and post decrement
18:17 - C if we write here estri P minus
18:21 - minus then what output you will get it
18:27 - is post
18:29 - decrement so now what value it will
18:32 - print three see three has been printed
18:35 - first of all now P minus minus means you
18:37 - are going to move one position backward
18:39 - but already p is pointing to the first
18:42 - element of array if you move backward we
18:43 - don't know what is there at that
18:45 - location some garbage value would be
18:47 - printed so same some garbage value you
18:49 - are getting some garbage value the
18:50 - output of second print F starp right now
18:54 - here if I assign something like this
18:57 - this address
18:59 - of a of
19:02 - three now see what output you will get
19:06 - what is there at a of three now p is
19:09 - pointing to what third index at third
19:11 - index you are having 0 1 2 3 zero so
19:16 - first of all zero would be printed now P
19:18 - becomes minus minus minus means one
19:20 - element backward one element uh Beyond
19:24 - backward is what 67 so now next output
19:26 - you are getting 67
19:29 - right now if I do here minus- p then--
19:35 - p pre decrement so first of all it would
19:38 - be decremented so it should print 67 67
19:41 - both the cases and see it is printing 67
19:43 - and 67 right so first of all it will be
19:46 - decremented decremented means now it is
19:49 - pointing to 67 that is a of two and that
19:52 - could be printed right and here if you
19:54 - write comma estri minus - P
19:59 - again two time I'm printing here so
20:04 - now
20:06 - same associativity is right to left
20:08 - because these are having same precedence
20:10 - so associativity we need to check so
20:12 - first of all this would be executed
20:14 - whatever the right side right so now
20:17 - this is become 67 and now again this
20:20 - would be
20:21 - executed so again P would be decremented
20:23 - that is it is going to point out two and
20:25 - that value would be printed that is two
20:27 - and finally value is also two for this
20:29 - print it is also printing two I hope you
20:31 - getting this concept right if you are
20:33 - confused it's okay you know in starting
20:36 - it happens but you should practice more
20:38 - and more these type of questions then
20:40 - you'll be familiar with this thing right
20:43 - so now I guess that's it for this video
20:45 - so you can try out these combination and
20:47 - uh you can get what output you are
20:49 - getting and if you are not getting like
20:51 - how you are getting that output you can
20:52 - ask me in comment box I'll make a
20:54 - separate video on these type of
20:55 - questions right so I'll see you in the
20:57 - next video till then bye-bye take
21:01 - care

Cleaned transcript:

so in the series of learning programming in c we are discussing pointers in C so far we have discussed Basics about pointers double pointer as well as uh what kind of arithmetic operation you can perform on pointer we have done addition and subtraction right in this video we'll talk about how to perform increment and decrement on pointer this operation how you can perform increment means suppose p is pointer variable then p++ and decrement is p minus minus this is post increment post decrement plus plus p means preincrement and this is pre decrement this thing we will discuss with the help of proper program and I'll show you practical also so now let's see how you can perform increment and decrement on pointer first of all we'll discuss increment post increment and preincrement I hope the functioning of this increment and decrement operators are clear to you if not then I have uploaded a video you can watch out my C programming playlist the the link also I'll put in the description destion box of this video you can check out and first of all check out this video if you know the functioning of this increment and decrement operator then this video would be really you know very easy for you but if you don't know then many students I mean almost students get confused in this operation when we apply these operation with pointer then it's a little bit tricky right so first of all clear your concept of increment and decrement operator and then come to this video right here same I'm taking an array and here I'm taking one pointer s p right and I am initializing this pointer p is equal to a this is valid you don't need to write like address of a of zero a means this a is also it's like a constant pointer or a is containing the name of the array which is containing address of the base or you can say the Base address so P equal to a is valid but if you write down a is equal to P you think that a is also pointer because name of the the array act as a pointer to this array and P is also pointer so you can assign this value no this is not possible a is what constant pointer name of array is constant pointer to this array here in a you cannot you cannot assign anything or you cannot increase it like a A+ Plus or a minus minus you can't do anything you know this kind of thing with this array name yeah with pointer you can do this so this assignment is valid but this is not valid you can try it at your own right so here in memory half the S is to be declared so this is how you can say visual representation of the S A is also acting as a constant pointer a is containing name of AR is containing Base address like thousand and in P we have stored address like a whatever value of a so a is we have th so in P also we have thand so both A and P are pointing to this first element of this array right so now we can move this pointer P but we cannot move this a right this this is constant pointer this will always contain Base address we cannot change it right so now how to increment if you want to increment this P so suppose if you write p++ it means it means in another term if you want to write this you can also write P isal to p + 1 both are same this and this are same but this is not equal to p + 1 only p + 1 no this will not give any output it is equal to P equal to p + 1 because after doing p+ 1 obviously we have to assign we have to update value of P here we are not updating that value right so either you can do or you can do this so here we are having like this thing p++ it means now it means now p is pointing to what one p is we are moving P one location forward right ultimately we are adding one to P but one means what you have to add in P we have 1,000 in plus 1 into what is size of the data type you're using end that is four so 1,4 so now p is pointing to 104 p++ means it will Point next element again p++ it will Point next element right and now after that if you want to print here now if you want to print percentage D SRI p s p means Direction operator it is acting as IND Direction operator value at this address now in P we are having after doing p++ in P we are having 1 04 now p is pointing to this not to the first element so now value at p is two so it will give you two right now see better if I write something like this EST P ++ I have combined both the operation post increment and estri now what output you will get here see here at starting now we have th000 in so now see this is what post increment what is functioning of post increment first of all it will return the value and then do Plus+ means it will return the original value if post increment is there then it will increment so original value of p is what original value of p is what 1,000 so it will return first of all 1,000 and now it will increment P by 1 we are incrementing pointer so it's not mean 1 1 it will mean 1 04 right now p is pointing to here now p is containing 1 04 and now p is pointing to this right but here it is going to return th000 only the previous value and now value at 1,000 is 3 so it will return three only output you will get three output you will get three but now p is pointing to here now after this statement if you print EST P it means now p is pointing to this now it will print two right I hope you got the difference and suppose if you write here some student think that if I write something like this then it will give it will first increment and it will give value two it first of all it will will evaluate p++ yeah obviously it will evaluate p++ first but what is function of p++ this is post first of all it will return the original value original value of p++ is what here p is what a that is th000 original value of p is th000 so it will return first of all th000 so here 1,000 would be there and now it will increment this so now it it is pointing to this but this operation this estri would be performed on thee previous value not the modified value now again EST th000 so it will give three only in the both the cases it will give three right I hope you got post increment functioning right now if I write here something like this estri Plus+ P now plus plus p is what preincrement preincrement what is function of preincrement first of all it will increase the value it will modify the value and then modified value would be returned so now plus plus P so it will increment it will increment the value of p in P at starting we have th000 it is pointing to this now increase this P increment means it will point to the next element so now in P we have 1 04 it is pointing to here it is not pointing to here right and now updated value is what 1 04 and now will return value at one4 that is two so this will give answer two same if you put it in bracket also that that would also give you same answer that is two right so I hope you got the difference between pre and post see here you can also uh know see here we have two operator like one is estri and one one is increment operator and both are having same precedence at same level both are right so associativity is right to left right to left right so from there we are going to move from right to left so first operator is what this increment operator so this would be evaluated first and after that estri would be evaluated right I hope you know how to evaluate the expression having operators you know operators precedence and associativity right now but see if I'm writing one line here now tell me what output you will get now what output you will get of this line two times I'm using a strict p ++ s p++ now here which would be evaluated first first of all this would be evaluated from right to left right so now first of all this p++ this is what post so original value of p is th000 value at th000 is 3 original value is th000 that would be returned and now P becomes p++ that is p is now pointing to one4 P is not pointing to here now this one p++ original value of p is now 104 that would be returned first and now P would be incremented so original value is 1 04 so whatever whatever the value at 1 04 that is two two would be return and now P becomes 8 now p is pointing to this one so you'll get two and three right I hope you got this one right now pre uh decrement and post decrement see if I write here s p minus minus same post decrement means first of all original value would be returned right now here the case is what p is equal to a means p is pointing to here now first of all the original value of P would be returned original value of p is th000 right so EST th000 now whatever value at th000 that would be returned that is 3 three would be returned and after this P minus minus now p is pointing to P should move position backward means 99 96 what we have here we don't know so now after that if you will print a St P it will return any garbage value right because it is moving out of this areay out of range of the array right so here we should take care of this thing suppose I'm writing here address of a of 4 address of a four or you can set address of a of 3 so now p is pointing to a of 3 that is in P we have 1 1 2 right now if you will print s p minus minus original value of p is 1 one2 that value would be printed that is zero would be printed and now p is pointing to here right and if you print this thing then also you'll get zero but if you print this thing estri minus P now this is pre decrement so now first of all pre decrement means value would be modified first that is p is here minus p means move backward one position so now p is pointing to here now 1 8 p is pointing to this one and now value at this address is 1 8 is what 67 so it would return 67 to you I hope you got the basic functioning of post and preincrement and decrement operator when we perform with pointer right and so now one question for you is minus P three times I want to print with pre decrement operator s minus p s minus p s minus p so before you know before compiling this on your laptop first of all dry run this and think what output you will get and after that you should run on your laptop and see you are getting same output or not right if you get same output it means you have got this concept if not then you have to do some practice on these type of questions so yeah this is little bit tricky and see maybe I can write something like this estri and estri P minus minus in that case what output you will get or you can say like EST P bracket Plus+ or you can say estri p++ or I must say EST p and here Plus+ this kind of thing you can also get right so what output you will get so this these questions are little bit tricky in this video just want to tell you like just want to get you familiar with the the the functioning of increment and decrement operator maybe we can take one more example one complicated problem on this kind of thing and I'll show you what output you are getting here and I can explain everything there so now first of all let me show you practically this thing whatever you have discussed in this video so now let me create a file first of all suppose pointer increment decrement do c right and U header file Main and here I'm taking one array uh I'm going to initialize it here like same I'm same input I'm taking three two so you'll get it better 67 and 0 and 56 right we're taking a pointer and P is equal to a I'm initializing right now printer suppose I want to print percentage d and uh first of all we we will be printing p++ right so see what output you should get you'll get three right because it is post increment so original value would be returned and original value is that is address of a base address of array address of the first element of this array so it is returning three right after that is it incrementing now if if you will print now if you will print print F percentage D and um must use slashing here here I'm printing a p so second value what you will get two see first is three next is two why because we have done p++ also although it's post increment but we have done increment one B+ 1 you can say right and if you do here like this in bracket also if you'll put this then also you'll get same result three and two see three and two right and and if I write here something like this comma again I'm writing estri P ++ so now see what output you will get two time I'm printing here so two time perc percentage D we have to use right now see 2 3 this one would give you first p++ would give you two and this second one would give you three because associativity is right to left these operators are having associativity right to left right so from the right side we are going to start so first of all this would be executed the second one star p++ so that would give three then we would execute this star p+ plus right so now it would give you two because we have already done p++ I hope you got why you are getting this and after this if you are printing P then you will get obviously you will get 67 two times you have incremented P right and if you do what pre uh increment plus plus P right one time only I'm printing Plus+ P see so now it is preincrement so first of all it would P would be incremented then then value would be printed so first of all P would be incremented that is p is now pointing to Second element of this array that is why it is printing two right and this p is also printing two right so now this is pre and here if you write like estri again Plus+ P now what you will get associativity is right to left so sorry we have to use here two time percentage D because I'm printing two values in this one right so see 267 right right to left so from right side we will move from this side so this would be executed first right so now it is preincrement so first of all increment P so now p is pointing to this element second element that is two so two would be printed first and now again this would be executed so again here plus plus P preincrement so first of all P would be incremented now p is pointing to the 67 this element and the value 67 would be printed and after that also this s p would also give 67 I hope you are getting this concept right now pre and post decrement C if we write here estri P minus minus then what output you will get it is post decrement so now what value it will print three see three has been printed first of all now P minus minus means you are going to move one position backward but already p is pointing to the first element of array if you move backward we don't know what is there at that location some garbage value would be printed so same some garbage value you are getting some garbage value the output of second print F starp right now here if I assign something like this this address of a of three now see what output you will get what is there at a of three now p is pointing to what third index at third index you are having 0 1 2 3 zero so first of all zero would be printed now P becomes minus minus minus means one element backward one element uh Beyond backward is what 67 so now next output you are getting 67 right now if I do here minus p then p pre decrement so first of all it would be decremented so it should print 67 67 both the cases and see it is printing 67 and 67 right so first of all it will be decremented decremented means now it is pointing to 67 that is a of two and that could be printed right and here if you write comma estri minus P again two time I'm printing here so now same associativity is right to left because these are having same precedence so associativity we need to check so first of all this would be executed whatever the right side right so now this is become 67 and now again this would be executed so again P would be decremented that is it is going to point out two and that value would be printed that is two and finally value is also two for this print it is also printing two I hope you getting this concept right if you are confused it's okay you know in starting it happens but you should practice more and more these type of questions then you'll be familiar with this thing right so now I guess that's it for this video so you can try out these combination and uh you can get what output you are getting and if you are not getting like how you are getting that output you can ask me in comment box I'll make a separate video on these type of questions right so I'll see you in the next video till then byebye take care
