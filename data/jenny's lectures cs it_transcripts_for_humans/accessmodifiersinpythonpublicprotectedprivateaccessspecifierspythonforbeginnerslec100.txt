With timestamps:

00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of learning
00:03 - Python programming language we are
00:05 - discussing oops Concept in the previous
00:07 - video we have seen what are abstract
00:09 - methods and Abstract classes and we have
00:13 - also seen like what is abstraction
00:14 - basically hiding the implementation
00:16 - detail from the user or we can suggest
00:20 - showing the essential details to the
00:22 - user just showing the functionalities
00:25 - okay what to do not have to do
00:28 - just show the user what to do the
00:29 - functionality is not have to do those
00:32 - things
00:33 - right so that is basically abstraction
00:35 - but now the uh you know the thing is
00:38 - how we are going to hide actually the
00:41 - details from the user the implementation
00:43 - details from the user
00:46 - because in abstraction uh in general we
00:49 - can say more precisely if I say then in
00:51 - abstraction is a process where we just
00:53 - identify which
00:55 - things or which methods or which
00:57 - variables or which parts or which
00:58 - functionalities
01:00 - right
01:01 - is to be hidden from the user and which
01:03 - is to be shown to the user
01:05 - part users
01:10 - that is a theoretical process it's a
01:13 - thought process only you can say a
01:15 - thought process right but actually how
01:18 - we are going to hide those things in
01:20 - real life if suppose something is very
01:22 - precious to you right like some money or
01:25 - jewelry or anything
01:27 - so how we are going to hide that thing
01:29 - we generally put that thing in a locker
01:31 - we have a lock we have a key or we just
01:33 - have some xsco digital lock or something
01:35 - like this we put that that thing there
01:37 - in a log in a locker right but have this
01:40 - thing you are going to achieve in
01:41 - programming it's not like that we have
01:43 - actual lock we have actual key and we
01:45 - can put that thing on our program no
01:47 - right
01:48 - so how you are going to implement that
01:52 - security type of thing because
01:54 - abstraction encapsulation these things
01:56 - are data hiding information adding these
01:58 - things are related to a concept security
02:02 - right okay now for that we have excess
02:07 - specifiers
02:08 - I hope you have heard you have three
02:10 - type of access specifier public
02:13 - protected and private not in Python in
02:16 - every language like in Java also we have
02:18 - in C plus plus also we have
02:20 - these X specifiers right so first of all
02:24 - generally we will discuss what is public
02:26 - protected and private then specifically
02:28 - in Python how we are going to achieve
02:30 - that thing how we are going to apply
02:31 - these excess specifiers in your program
02:34 - right that you will see with the help of
02:36 - an example right okay now let's take one
02:40 - example
02:42 - um public transport
02:44 - buses and all
02:46 - so these are publicly available anyone
02:49 - can use that public transport anyone
02:52 - right so that thing is public
02:56 - so same like in program
02:58 - when you are creating a project when
03:00 - you're designing a software then you are
03:02 - working on a project then if you are
03:04 - following that oop approach
03:06 - object-oriented programming approach
03:08 - then obviously we will use those OP
03:11 - features definitely abstraction
03:13 - encapsulation some hiding features and
03:15 - classes objects and polymorphism these
03:18 - kind of things right
03:19 - so if you are following this op approach
03:22 - then we make some classes we create some
03:25 - object in classes we will have attribute
03:27 - of the classes we will have methods of
03:29 - that classes using object we can access
03:31 - those variables or you can say those
03:33 - member member functions and member
03:37 - variables so you can say attributes or
03:38 - methods of the class right we have a
03:42 - class and there we have attributes
03:45 - and methods
03:48 - attributes mean means what the class has
03:51 - and Method means what it does like if I
03:54 - am a class an entity Jenny I'm a class
03:57 - then attributes what I have
04:02 - those would be like class person
04:05 - what I have those are attributes right
04:07 - and what I does like I teach
04:10 - right I do cycling I do swimming so
04:13 - these are my activities these are my
04:14 - methods right or I have like laptop I
04:18 - have chair I have camera I have two eyes
04:20 - I have a nose these are attributes what
04:22 - I have right so now
04:26 - if these attributes and methods are
04:29 - public then anyone can use those methods
04:32 - and attributes means anyone means
04:33 - outside of this class also we can use
04:36 - these methods and attributes
04:39 - right publicly available
04:42 - five
04:44 - best thing you will get it you know when
04:46 - we will discuss practical just you know
04:50 - you have to be clear with this public
04:52 - keyword now protect
04:55 - Ive what see now public notice for
04:58 - everyone now suppose you have your own
05:00 - car
05:01 - right so you and your family member can
05:05 - use that car maybe your friends can use
05:07 - your relatives will ask you will borrow
05:10 - that car from you and can use right but
05:12 - it is not available for public
05:15 - it's not like that anyone can use that
05:17 - car
05:18 - so that is kind of protected
05:21 - right
05:22 - and private means what suppose like I
05:26 - have my own cycle so that cycle is
05:28 - private to me I you know don't allow
05:31 - anyone to write my cycle
05:34 - not even to my family member right so
05:37 - that is private to me my cycle
05:39 - right
05:41 - like if you have a gaadi we have a car
05:43 - that is kind of protected
05:46 - family members can use
05:48 - that car or friends and like this
05:51 - right
05:52 - so in programming also protected means
05:57 - if some variable or some some attribute
05:59 - or method if you have declared those
06:01 - method and attribute protected means we
06:05 - get this within this class we can use as
06:08 - well as the class the derived class of
06:11 - this class if I drive a class
06:14 - like maybe suppose my name Jenny and I
06:18 - or you can say female
06:21 - person so this class is derived from
06:23 - this class this is base class so any
06:26 - attribute or method which is protected
06:29 - Drive class can also use those protected
06:33 - method and attributes right
06:37 - only that class within that class and
06:40 - within the drive class but not outside
06:42 - of these classes we can use protected
06:45 - attribute and methods now private means
06:48 - within this class only within this class
06:51 - only means my cycle I can only use one
06:54 - cycle
06:55 - right that is like private not even the
06:58 - drive class can use
07:00 - those attributes and member methods
07:04 - if some attribute is private here then
07:07 - if we drive a class from here then that
07:10 - attribute will not be derived to this
07:13 - class using this class object we cannot
07:15 - use
07:16 - that attribute right so I hope you got
07:18 - the difference between protected and
07:20 - private public is I guess that is very
07:22 - common
07:24 - right
07:25 - okay now generalized that you have about
07:27 - public protected and private public
07:29 - means outside of the class anyone can
07:31 - use that outside of the class within the
07:33 - class as well protected means within the
07:36 - class and within the drive class private
07:39 - means within the class only
07:41 - right okay now we will see this thing
07:43 - with the help of program but actually
07:45 - let me just clear one thing in Python we
07:48 - don't have such you know uh strong
07:52 - concept of these public protected and
07:54 - private specifiers
07:56 - right obviously we have like public one
07:59 - but not
08:00 - strongly we cannot make a you know
08:03 - variable or method strongly you can say
08:05 - private
08:07 - right
08:08 - you can make it private but we have some
08:10 - method using that
08:12 - we can even use those private method
08:15 - attributes outside of the class right so
08:18 - maybe you will say what is the use of
08:20 - this this thing
08:22 - okay
08:25 - so let's create a new file here in the
08:29 - project abstraction demo only and
08:33 - let's name it access underscore
08:36 - specifiers Dot py
08:42 - simply you will first create a class
08:44 - suppose I am creating a class student
08:47 - right
08:48 - so let's have some attribute and methods
08:51 - of this class right
08:53 - let's
08:54 - have a Constructor and we are going to
08:56 - initialize
08:57 - some methods and attributes like
09:00 - suppose just passing name
09:03 - of the student
09:05 - right
09:06 - and how we are going to initialize the
09:08 - attribute name I'm taking self like dot
09:10 - name is equal to the parameter name is
09:13 - name
09:14 - only one attribute I am having
09:17 - and one function I'll have like maybe
09:19 - display so using a string we will just
09:22 - print the name like hi myself
09:25 - self dot whatever the name will fetch
09:28 - that name
09:29 - from student class this is the display
09:32 - right
09:34 - let's create a you can say variable
09:37 - sorry object of this student class right
09:40 - student and what you need to pass
09:43 - name so the name of the student is maybe
09:45 - like Rahul
09:48 - foreign
09:52 - if you want to print the name of the
09:54 - student then S1 simply dot name you can
09:58 - access this thing right as well as you
10:01 - can access the you can say this function
10:04 - also S1 Dot display the method also
10:07 - let's run this
10:09 - and see
10:10 - name Rahul and hi myself Rahul from
10:12 - student class right so
10:16 - not by default these attribute is name
10:19 - the function is display of this class
10:21 - by default these things are public
10:24 - all the attribute and methods
10:27 - right outside of the Class C we are
10:29 - using this thing is within the class
10:33 - this is the area
10:35 - within the class like these line tail
10:38 - Fifth Line and six seven eight these are
10:40 - outside of the class we are using
10:41 - outside of the class obviously we are
10:43 - creating object and we are accessing
10:44 - name and display
10:46 - so public like this is what publicly we
10:49 - are using
10:50 - fine so
10:52 - by default all the attributes and
10:54 - methods are public so this is public
10:57 - specifier or you can say Public Access
10:59 - specify next is protected now in Python
11:02 - there is no such keyword public private
11:04 - and protected
11:06 - unlike Java and C plus plus
11:09 - we have just underscore at Double
11:11 - underscore okay now let's take a
11:14 - protected
11:15 - attribute I am taking attribute like
11:19 - underscore
11:24 - roll number sorry here I will not
11:27 - uh specify sorry underscore Let Me Clear
11:30 - one thing to you just the parameter name
11:33 - no underscore
11:35 - underscore should be here because the
11:37 - attribute is this name so attribute we
11:40 - are using here so the attribute should
11:42 - be protected not this parameter name
11:45 - right so I am taking like self Dot and
11:49 - one underscore
11:51 - and uh I'm taking like
11:54 - row number is equal to
11:56 - roll number so now name is public and
11:59 - this row number is
12:01 - protected attribute
12:03 - or we can say this is public instance
12:05 - variable and this is protected instance
12:06 - variable instance means nothing but like
12:08 - object
12:10 - so
12:12 - like
12:13 - I have told you protected means within
12:15 - the class we can use and in the derived
12:18 - class as well
12:19 - so let's first create one more class
12:22 - that is derived class also so let's
12:24 - create one more class then you will get
12:26 - it better
12:27 - we have another class branch and this is
12:29 - derived from student class
12:31 - okay and let's not write down anything
12:34 - here just pass
12:37 - now see these are name roll number this
12:41 - roll number we can access within this
12:44 - Drive class as well right so let's
12:47 - create an object of derived class now
12:49 - now it's not like directly you can
12:51 - create the object of this because
12:54 - let's run this and I'll show you
12:55 - whatever you will get
12:57 - C
12:59 - student init missing two required
13:01 - positional argument name and dollar in
13:03 - line number nine when you are creating
13:05 - this object of Branch because this is
13:08 - derived from student class and in
13:12 - student class obviously whenever you
13:13 - create an object Constructor would be
13:15 - called init Constructor it will check in
13:19 - Branch class do we have init Constructor
13:20 - no so it will call instructor of super
13:23 - class super classes student class and in
13:26 - student class we have Constructor that
13:27 - is
13:29 - expecting two arguments name and roll
13:31 - numbers so that is why you need to pass
13:32 - your name and row number so name suppose
13:35 - I am passing like maybe Nisha and uh
13:38 - roll number like 22.
13:40 - now it will not give any error
13:43 - now with help of B1
13:45 - if I want to print name
13:48 - okay fine
13:49 - because name is you will say it's public
13:52 - so it will not it should not give any
13:54 - error fine
13:56 - let's try to access
14:00 - protected variable also B1 dot what is
14:03 - underscore
14:04 - roll number
14:07 - now what do you think let's run this C
14:10 - Nisha and 22 we are able to access this
14:15 - row number as well outside of these
14:18 - classes outside of Drive class outside
14:20 - of Base Class now maybe you will say now
14:23 - what's the use of using this protected
14:26 - that is why I am saying to you in Python
14:28 - there is no such complete restriction
14:32 - of using protected and even private
14:34 - variables so it is responsibility of the
14:37 - program
14:38 - a good programmer not to touch not to
14:42 - you know modify not to access protected
14:46 - and private variables and methods
14:48 - outside of the class environment
14:51 - right
14:52 - like
14:53 - protected means we have a car that is I
14:56 - have given you the example protected but
14:58 - if someone
15:00 - got my key my car key
15:02 - any any random people any random person
15:05 - what my car like I lost my car key right
15:09 - so it is responsibility of that person
15:12 - to return my key and to not to use my
15:15 - car
15:16 - right
15:17 - so it's not like
15:19 - I have a complete control I have
15:22 - complete restriction that no one can use
15:23 - no public
15:25 - person can use my car if someday I lost
15:28 - my key then anyone can use my car
15:31 - so same in Python it is the
15:32 - responsibility of a programmer good
15:34 - programmer if you have seen like in a
15:36 - class we have
15:38 - variable protected method
15:40 - private variable private method so not
15:43 - to use those methods and uh you know
15:47 - attributes outside of the class
15:49 - environment
15:51 - okay so now like if suppose we have a
15:54 - function here here also
15:57 - outside of the class
16:00 - we have any public function
16:02 - and within this any public function it's
16:05 - not within these classes right
16:08 - here I am creating an object of Branch
16:11 - this class and within this function only
16:14 - I'm going to
16:15 - print B1 name and B1 wrote row number
16:18 - so maybe you will say like this is a
16:21 - public person show data is public person
16:23 - right and you can think like okay name
16:26 - is public transport but roll number is
16:29 - my car and this depth this show data is
16:33 - any public person
16:34 - right so let's run this and let me just
16:37 - show you the output it will not give any
16:39 - error and obviously it will not print
16:41 - anything because we haven't called this
16:43 - function we have just defined this
16:45 - function so
16:47 - to run this you have to call the
16:49 - function show data let's run this now
16:51 - see Nishan 22 so any public person is
16:54 - also using my name and roll number like
16:56 - my public transport as well as my car
16:59 - the same okay like I have lost my key so
17:02 - anyone is using so it is a responsible
17:04 - to that public person or the
17:05 - responsibility to the programmer not to
17:08 - use these roll number this protected
17:09 - kind of thing in this function right
17:12 - python does not provide any strict
17:16 - restriction
17:17 - right it's flexible it just these are
17:21 - just underscore double lens for these
17:22 - are just just a name convention
17:24 - okay now this is protected
17:27 - so better to use this protected variable
17:30 - within uh this class environment like in
17:33 - display uh myself this
17:38 - with roll number
17:44 - and how you can access the roll number
17:45 - self dot underscore
17:48 - roll number
17:50 - with roll number this from student class
17:53 - right not to access this thing outside
17:57 - better to avoid using this thing outside
18:01 - okay
18:02 - now
18:04 - if I create S1 Rahul and just pass the
18:07 - roll number like 23.
18:09 - okay and with the help of this
18:13 - one dot I am calling
18:15 - display
18:17 - so let's run this
18:20 - Nisha from the this public function and
18:24 - I myself traveled with roll number 23
18:26 - from student class
18:28 - so directly we are not accessing roll
18:29 - number outside of the class we are just
18:33 - using we are just accessing that polymer
18:35 - with the help of the method which is
18:36 - inside the class so that is a good idea
18:39 - right and outside of the class
18:41 - environment we can modify these methods
18:44 - and variables suppose I want to modify
18:46 - let's just uh
18:48 - comment out this public function
18:53 - and before fetching this I want to
18:56 - modify S1 Dot name equal to it's not
19:00 - Rahul
19:01 - ICS so I want to modify the name that is
19:06 - also possible let's run this and now
19:08 - this time it will show you see ronak
19:10 - with roll number 23 right
19:13 - and
19:14 - now I can modify
19:17 - that roll number also
19:19 - S1 underscore number is equal to
19:22 - like 45 so let's run this and see what
19:26 - we are getting C columnar is 45. but
19:29 - better
19:30 - not to modify not to access protected
19:33 - thing outside of the class better to use
19:35 - within this class only right although we
19:38 - can access I have shown you I can modify
19:39 - you also right
19:42 - but a responsible programmer programmer
19:45 - would not do this thing right okay now
19:47 - this is protected in private now let's
19:49 - sorry let public and protect it now
19:51 - let's take a private attribute
19:55 - let's take a private attribute and uh
19:57 - suppose I'm taking
20:00 - self dot age age should be private so to
20:05 - make a attribute or method private you
20:07 - have to prefix that thing with double
20:09 - underscore sorry double underscore
20:12 - and I'm taking a
20:14 - uh attribute name age and here I am
20:17 - passing H so is equal to
20:21 - H so this is this is private
20:24 - okay
20:26 - now even the derived class cannot use
20:28 - this
20:29 - private
20:32 - you can say variable or private method
20:35 - let's
20:37 - do this let's make this method also
20:40 - private display so let's try to create
20:42 - S1 student Rahul 23 and
20:46 - next is age so let's pass age is like
20:49 - maybe 20.
20:50 - okay let's make first this public only
20:53 - let's print
20:59 - if you want to access
21:01 - this S1 note is outside of the class it
21:05 - will give a c student attribute error
21:07 - student object has no attribute
21:08 - underscore underscore H because you
21:10 - cannot access
21:12 - private
21:13 - attribute to private method outside of
21:15 - the class
21:17 - right
21:19 - but yeah there is a Technique we can
21:20 - access and that is known as name mangle
21:23 - that is why I have told you
21:27 - in Python there is no such mechanism or
21:29 - there is no such access specifier that
21:31 - completely restrict you from accessing
21:33 - private methods and attributes there are
21:36 - still some other ways you can use
21:38 - so using name mangling we can use
21:42 - private even private variables and
21:44 - Method now if you want to use name
21:47 - angling we can do with the help of three
21:49 - method like with the dir method and you
21:52 - can access
21:53 - let me just show you first how with the
21:56 - dir method you can use you can do that
21:59 - thing so we are not going to modify this
22:01 - thing that I have told you
22:04 - okay
22:05 - now see now and this private thing we
22:10 - can use within the class
22:13 - not even outside not even in the drive
22:15 - class so if with the help of like maybe
22:18 - B1 is equal to
22:21 - branch
22:22 - even if this is the drive class
22:24 - obviously from student class right so
22:27 - with the help of
22:28 - this derived class object also we cannot
22:31 - access this age right that will also
22:35 - give same error
22:36 - Branch object has no attribute age and
22:39 - even within this we cannot access age
22:42 - like if I am defining a function here
22:45 - diff
22:46 - maybe you think because we have derived
22:48 - Branch from students so all the
22:50 - attribute and method of student class
22:52 - are obviously
22:53 - of child class now so let's show
22:57 - print
22:58 - my age is and with the help of F string
23:01 - we are going to print hashed underscore
23:03 - underscore age and simply just here call
23:07 - B1 Dot
23:09 - show
23:10 - so maybe you think we are accessing
23:13 - within the class environment not outside
23:15 - of the drive class so maybe it will run
23:17 - let's run this still it will give error
23:19 - Branch object has no attribute name
23:21 - branch
23:22 - age
23:23 - right now see it has done mangling
23:26 - underscore Branch underscore and storage
23:27 - now what is my name angling I'll tell
23:29 - you but still you are getting an error
23:30 - right attribute error so in derived
23:33 - class also you cannot use now in Drive
23:35 - class we can use uh that um
23:38 - protected
23:39 - if you want to use like my age is this
23:42 - it will give error so my
23:47 - because roll number is protected
23:49 - underscore
23:51 - number
23:53 - it will not give any error
23:56 - okay we are we are
23:59 - accessing this thing so let us comment
24:01 - out this and let's run this now
24:04 - see my name my roll number is 45
24:07 - and this roll number only I just want to
24:10 - show you because this is from the show
24:12 - function my roll number is
24:15 - test right
24:16 - and this is the display function we are
24:18 - calling from student class display right
24:21 - so protected we can use in in Drive
24:24 - class but private you cannot even use in
24:27 - Drive class that is the main difference
24:28 - between protected and private
24:31 - variables and sorry attributes and
24:33 - methods
24:35 - now even you can make this
24:37 - method private display
24:39 - and suppose let's comment out everything
24:42 - here and just
24:44 - we are just calling
24:46 - display
24:48 - underscore underscore display now this
24:49 - time it will give error because it is
24:51 - private see student object has no
24:53 - attribute and this one is for display
24:55 - so you cannot pull display function
24:59 - because that is private to this student
25:02 - if we have one more function like
25:04 - display private data that is public and
25:06 - within this function we are calling
25:08 - that private function that is display so
25:11 - my name my roll number and this one to
25:16 - access that
25:17 - private attribute also age
25:21 - this much
25:24 - years old
25:26 - with roll number and like this it will
25:28 - print and this display we are calling
25:31 - this
25:31 - and outside of this we are just calling
25:35 - that function S1 Dot
25:38 - display private data
25:42 - let's run this now you will not get any
25:44 - error see myself travel 20 years old
25:46 - with roll number 23 from student class
25:48 - now it is printing because we are not
25:50 - accessing private data outside of this
25:53 - class see we are using
25:55 - private data age as well as the function
25:58 - sorry the method within this class only
26:02 - not outside of this class
26:04 - now if you want to use this thing
26:06 - outside of the class obviously that is
26:07 - also we have one you can say
26:13 - mechanism for that that is name mangling
26:16 - so
26:19 - first let's
26:22 - do name angling with the dir method so
26:25 - how you will do that thing print just
26:27 - call dir method and pass
26:30 - the object of that class on which you
26:33 - want to do manually so on student I want
26:36 - to do manually because there also I
26:37 - there only I have private protected in
26:39 - public so there is no need of exiting
26:41 - that public thing with the help of
26:44 - mangling but
26:45 - specifically manganese for private
26:47 - things
26:49 - so dir and just pass the object S1
26:52 - okay let me just show you let me just
26:54 - print
26:56 - see carefully now
26:59 - we have
27:01 - see
27:03 - it will show you all the valid
27:05 - attributes of that class
27:08 - basically of that class object so all
27:11 - the valid attributes are
27:14 - see you can say age but that is mangled
27:17 - and what is the mangling process all the
27:20 - uh you can say that attribute and
27:23 - methods which are prefixed with double
27:25 - underscore that are mangled and what is
27:29 - the process that would be prefixed with
27:32 - underscore class name underscore class
27:35 - name is student underscore underscore
27:36 - see underscore class name underscore
27:39 - underscore display so these are the this
27:42 - is Method this is attribute
27:45 - right
27:46 - but there are many method and attribute
27:49 - class dir Doc and many things as you can
27:53 - see here
28:02 - and see you can see also here underscore
28:04 - roll number that is also valid attribute
28:07 - and name is also validated but obviously
28:09 - that is public and
28:10 - so all the valid attributes so this we
28:12 - can access
28:13 - now how you can access that private
28:16 - method and attribute
28:18 - using this technique now let me just
28:20 - show you how you can access
28:22 - if outside of the class you want to
28:24 - access age then how you will print
28:27 - let's just remove this thing and I just
28:29 - want to print S1 DOT first underscore
28:33 - class name
28:35 - student underscore underscore age
28:40 - 20. now you are getting age
28:43 - we are accessing age that is private
28:45 - attribute outside of the class
28:47 - environment with the help of object
28:49 - still you are accessing but there is a
28:52 - mangling process so
28:53 - this is the process if you want to call
28:56 - that function also S1 Dot
28:59 - just prefix with
29:01 - class name underscore underscore
29:04 - display
29:07 - let's run this
29:09 - see age is 20 and I myself Route 20 year
29:13 - old with roll number 23 from student
29:14 - class
29:15 - so that is you can say body of this
29:18 - function
29:20 - age and roll number
29:22 - so maybe you will see now what is the
29:24 - use of this private and all what is the
29:26 - use of the double underscore directly
29:28 - obviously you cannot access those
29:30 - private things you can access but there
29:33 - is some method
29:34 - right like
29:38 - same I have told you it is
29:39 - responsibility of a programmer to not
29:41 - touch these private and protected
29:44 - variable and methods outside of the
29:46 - class environment not modified not
29:49 - modify these things right
29:52 - if I have my cycle that is private to me
29:54 - and I don't want to share that with
29:57 - anyone with like no one
29:59 - even no one from my family member
30:02 - because that is private to me I love my
30:04 - cycle
30:05 - but if anyone knows the code or the you
30:08 - know lock then obviously my family
30:10 - member can use that thing but it is a
30:12 - responsibility of the person who is
30:15 - using my cycle right to not use that
30:19 - thing because that is private to me
30:21 - same thing it is a responsibility of a
30:23 - good programmer to not use private and
30:25 - protected variables and methods outside
30:28 - of the class environment public you can
30:31 - use so I hope the Funda of access
30:34 - specifiers are clear to you guys
30:36 - it's just a name convention in Python
30:39 - not any strict mechanism or rule why so
30:43 - I hope you got the concept of access
30:45 - specifiers in Python so now in the next
30:47 - video we'll see encapsulation
30:50 - bye take

Cleaned transcript:

hey everyone I hope you all are safe and doing good so in the series of learning Python programming language we are discussing oops Concept in the previous video we have seen what are abstract methods and Abstract classes and we have also seen like what is abstraction basically hiding the implementation detail from the user or we can suggest showing the essential details to the user just showing the functionalities okay what to do not have to do just show the user what to do the functionality is not have to do those things right so that is basically abstraction but now the uh you know the thing is how we are going to hide actually the details from the user the implementation details from the user because in abstraction uh in general we can say more precisely if I say then in abstraction is a process where we just identify which things or which methods or which variables or which parts or which functionalities right is to be hidden from the user and which is to be shown to the user part users that is a theoretical process it's a thought process only you can say a thought process right but actually how we are going to hide those things in real life if suppose something is very precious to you right like some money or jewelry or anything so how we are going to hide that thing we generally put that thing in a locker we have a lock we have a key or we just have some xsco digital lock or something like this we put that that thing there in a log in a locker right but have this thing you are going to achieve in programming it's not like that we have actual lock we have actual key and we can put that thing on our program no right so how you are going to implement that security type of thing because abstraction encapsulation these things are data hiding information adding these things are related to a concept security right okay now for that we have excess specifiers I hope you have heard you have three type of access specifier public protected and private not in Python in every language like in Java also we have in C plus plus also we have these X specifiers right so first of all generally we will discuss what is public protected and private then specifically in Python how we are going to achieve that thing how we are going to apply these excess specifiers in your program right that you will see with the help of an example right okay now let's take one example um public transport buses and all so these are publicly available anyone can use that public transport anyone right so that thing is public so same like in program when you are creating a project when you're designing a software then you are working on a project then if you are following that oop approach objectoriented programming approach then obviously we will use those OP features definitely abstraction encapsulation some hiding features and classes objects and polymorphism these kind of things right so if you are following this op approach then we make some classes we create some object in classes we will have attribute of the classes we will have methods of that classes using object we can access those variables or you can say those member member functions and member variables so you can say attributes or methods of the class right we have a class and there we have attributes and methods attributes mean means what the class has and Method means what it does like if I am a class an entity Jenny I'm a class then attributes what I have those would be like class person what I have those are attributes right and what I does like I teach right I do cycling I do swimming so these are my activities these are my methods right or I have like laptop I have chair I have camera I have two eyes I have a nose these are attributes what I have right so now if these attributes and methods are public then anyone can use those methods and attributes means anyone means outside of this class also we can use these methods and attributes right publicly available five best thing you will get it you know when we will discuss practical just you know you have to be clear with this public keyword now protect Ive what see now public notice for everyone now suppose you have your own car right so you and your family member can use that car maybe your friends can use your relatives will ask you will borrow that car from you and can use right but it is not available for public it's not like that anyone can use that car so that is kind of protected right and private means what suppose like I have my own cycle so that cycle is private to me I you know don't allow anyone to write my cycle not even to my family member right so that is private to me my cycle right like if you have a gaadi we have a car that is kind of protected family members can use that car or friends and like this right so in programming also protected means if some variable or some some attribute or method if you have declared those method and attribute protected means we get this within this class we can use as well as the class the derived class of this class if I drive a class like maybe suppose my name Jenny and I or you can say female person so this class is derived from this class this is base class so any attribute or method which is protected Drive class can also use those protected method and attributes right only that class within that class and within the drive class but not outside of these classes we can use protected attribute and methods now private means within this class only within this class only means my cycle I can only use one cycle right that is like private not even the drive class can use those attributes and member methods if some attribute is private here then if we drive a class from here then that attribute will not be derived to this class using this class object we cannot use that attribute right so I hope you got the difference between protected and private public is I guess that is very common right okay now generalized that you have about public protected and private public means outside of the class anyone can use that outside of the class within the class as well protected means within the class and within the drive class private means within the class only right okay now we will see this thing with the help of program but actually let me just clear one thing in Python we don't have such you know uh strong concept of these public protected and private specifiers right obviously we have like public one but not strongly we cannot make a you know variable or method strongly you can say private right you can make it private but we have some method using that we can even use those private method attributes outside of the class right so maybe you will say what is the use of this this thing okay so let's create a new file here in the project abstraction demo only and let's name it access underscore specifiers Dot py simply you will first create a class suppose I am creating a class student right so let's have some attribute and methods of this class right let's have a Constructor and we are going to initialize some methods and attributes like suppose just passing name of the student right and how we are going to initialize the attribute name I'm taking self like dot name is equal to the parameter name is name only one attribute I am having and one function I'll have like maybe display so using a string we will just print the name like hi myself self dot whatever the name will fetch that name from student class this is the display right let's create a you can say variable sorry object of this student class right student and what you need to pass name so the name of the student is maybe like Rahul foreign if you want to print the name of the student then S1 simply dot name you can access this thing right as well as you can access the you can say this function also S1 Dot display the method also let's run this and see name Rahul and hi myself Rahul from student class right so not by default these attribute is name the function is display of this class by default these things are public all the attribute and methods right outside of the Class C we are using this thing is within the class this is the area within the class like these line tail Fifth Line and six seven eight these are outside of the class we are using outside of the class obviously we are creating object and we are accessing name and display so public like this is what publicly we are using fine so by default all the attributes and methods are public so this is public specifier or you can say Public Access specify next is protected now in Python there is no such keyword public private and protected unlike Java and C plus plus we have just underscore at Double underscore okay now let's take a protected attribute I am taking attribute like underscore roll number sorry here I will not uh specify sorry underscore Let Me Clear one thing to you just the parameter name no underscore underscore should be here because the attribute is this name so attribute we are using here so the attribute should be protected not this parameter name right so I am taking like self Dot and one underscore and uh I'm taking like row number is equal to roll number so now name is public and this row number is protected attribute or we can say this is public instance variable and this is protected instance variable instance means nothing but like object so like I have told you protected means within the class we can use and in the derived class as well so let's first create one more class that is derived class also so let's create one more class then you will get it better we have another class branch and this is derived from student class okay and let's not write down anything here just pass now see these are name roll number this roll number we can access within this Drive class as well right so let's create an object of derived class now now it's not like directly you can create the object of this because let's run this and I'll show you whatever you will get C student init missing two required positional argument name and dollar in line number nine when you are creating this object of Branch because this is derived from student class and in student class obviously whenever you create an object Constructor would be called init Constructor it will check in Branch class do we have init Constructor no so it will call instructor of super class super classes student class and in student class we have Constructor that is expecting two arguments name and roll numbers so that is why you need to pass your name and row number so name suppose I am passing like maybe Nisha and uh roll number like 22. now it will not give any error now with help of B1 if I want to print name okay fine because name is you will say it's public so it will not it should not give any error fine let's try to access protected variable also B1 dot what is underscore roll number now what do you think let's run this C Nisha and 22 we are able to access this row number as well outside of these classes outside of Drive class outside of Base Class now maybe you will say now what's the use of using this protected that is why I am saying to you in Python there is no such complete restriction of using protected and even private variables so it is responsibility of the program a good programmer not to touch not to you know modify not to access protected and private variables and methods outside of the class environment right like protected means we have a car that is I have given you the example protected but if someone got my key my car key any any random people any random person what my car like I lost my car key right so it is responsibility of that person to return my key and to not to use my car right so it's not like I have a complete control I have complete restriction that no one can use no public person can use my car if someday I lost my key then anyone can use my car so same in Python it is the responsibility of a programmer good programmer if you have seen like in a class we have variable protected method private variable private method so not to use those methods and uh you know attributes outside of the class environment okay so now like if suppose we have a function here here also outside of the class we have any public function and within this any public function it's not within these classes right here I am creating an object of Branch this class and within this function only I'm going to print B1 name and B1 wrote row number so maybe you will say like this is a public person show data is public person right and you can think like okay name is public transport but roll number is my car and this depth this show data is any public person right so let's run this and let me just show you the output it will not give any error and obviously it will not print anything because we haven't called this function we have just defined this function so to run this you have to call the function show data let's run this now see Nishan 22 so any public person is also using my name and roll number like my public transport as well as my car the same okay like I have lost my key so anyone is using so it is a responsible to that public person or the responsibility to the programmer not to use these roll number this protected kind of thing in this function right python does not provide any strict restriction right it's flexible it just these are just underscore double lens for these are just just a name convention okay now this is protected so better to use this protected variable within uh this class environment like in display uh myself this with roll number and how you can access the roll number self dot underscore roll number with roll number this from student class right not to access this thing outside better to avoid using this thing outside okay now if I create S1 Rahul and just pass the roll number like 23. okay and with the help of this one dot I am calling display so let's run this Nisha from the this public function and I myself traveled with roll number 23 from student class so directly we are not accessing roll number outside of the class we are just using we are just accessing that polymer with the help of the method which is inside the class so that is a good idea right and outside of the class environment we can modify these methods and variables suppose I want to modify let's just uh comment out this public function and before fetching this I want to modify S1 Dot name equal to it's not Rahul ICS so I want to modify the name that is also possible let's run this and now this time it will show you see ronak with roll number 23 right and now I can modify that roll number also S1 underscore number is equal to like 45 so let's run this and see what we are getting C columnar is 45. but better not to modify not to access protected thing outside of the class better to use within this class only right although we can access I have shown you I can modify you also right but a responsible programmer programmer would not do this thing right okay now this is protected in private now let's sorry let public and protect it now let's take a private attribute let's take a private attribute and uh suppose I'm taking self dot age age should be private so to make a attribute or method private you have to prefix that thing with double underscore sorry double underscore and I'm taking a uh attribute name age and here I am passing H so is equal to H so this is this is private okay now even the derived class cannot use this private you can say variable or private method let's do this let's make this method also private display so let's try to create S1 student Rahul 23 and next is age so let's pass age is like maybe 20. okay let's make first this public only let's print if you want to access this S1 note is outside of the class it will give a c student attribute error student object has no attribute underscore underscore H because you cannot access private attribute to private method outside of the class right but yeah there is a Technique we can access and that is known as name mangle that is why I have told you in Python there is no such mechanism or there is no such access specifier that completely restrict you from accessing private methods and attributes there are still some other ways you can use so using name mangling we can use private even private variables and Method now if you want to use name angling we can do with the help of three method like with the dir method and you can access let me just show you first how with the dir method you can use you can do that thing so we are not going to modify this thing that I have told you okay now see now and this private thing we can use within the class not even outside not even in the drive class so if with the help of like maybe B1 is equal to branch even if this is the drive class obviously from student class right so with the help of this derived class object also we cannot access this age right that will also give same error Branch object has no attribute age and even within this we cannot access age like if I am defining a function here diff maybe you think because we have derived Branch from students so all the attribute and method of student class are obviously of child class now so let's show print my age is and with the help of F string we are going to print hashed underscore underscore age and simply just here call B1 Dot show so maybe you think we are accessing within the class environment not outside of the drive class so maybe it will run let's run this still it will give error Branch object has no attribute name branch age right now see it has done mangling underscore Branch underscore and storage now what is my name angling I'll tell you but still you are getting an error right attribute error so in derived class also you cannot use now in Drive class we can use uh that um protected if you want to use like my age is this it will give error so my because roll number is protected underscore number it will not give any error okay we are we are accessing this thing so let us comment out this and let's run this now see my name my roll number is 45 and this roll number only I just want to show you because this is from the show function my roll number is test right and this is the display function we are calling from student class display right so protected we can use in in Drive class but private you cannot even use in Drive class that is the main difference between protected and private variables and sorry attributes and methods now even you can make this method private display and suppose let's comment out everything here and just we are just calling display underscore underscore display now this time it will give error because it is private see student object has no attribute and this one is for display so you cannot pull display function because that is private to this student if we have one more function like display private data that is public and within this function we are calling that private function that is display so my name my roll number and this one to access that private attribute also age this much years old with roll number and like this it will print and this display we are calling this and outside of this we are just calling that function S1 Dot display private data let's run this now you will not get any error see myself travel 20 years old with roll number 23 from student class now it is printing because we are not accessing private data outside of this class see we are using private data age as well as the function sorry the method within this class only not outside of this class now if you want to use this thing outside of the class obviously that is also we have one you can say mechanism for that that is name mangling so first let's do name angling with the dir method so how you will do that thing print just call dir method and pass the object of that class on which you want to do manually so on student I want to do manually because there also I there only I have private protected in public so there is no need of exiting that public thing with the help of mangling but specifically manganese for private things so dir and just pass the object S1 okay let me just show you let me just print see carefully now we have see it will show you all the valid attributes of that class basically of that class object so all the valid attributes are see you can say age but that is mangled and what is the mangling process all the uh you can say that attribute and methods which are prefixed with double underscore that are mangled and what is the process that would be prefixed with underscore class name underscore class name is student underscore underscore see underscore class name underscore underscore display so these are the this is Method this is attribute right but there are many method and attribute class dir Doc and many things as you can see here and see you can see also here underscore roll number that is also valid attribute and name is also validated but obviously that is public and so all the valid attributes so this we can access now how you can access that private method and attribute using this technique now let me just show you how you can access if outside of the class you want to access age then how you will print let's just remove this thing and I just want to print S1 DOT first underscore class name student underscore underscore age 20. now you are getting age we are accessing age that is private attribute outside of the class environment with the help of object still you are accessing but there is a mangling process so this is the process if you want to call that function also S1 Dot just prefix with class name underscore underscore display let's run this see age is 20 and I myself Route 20 year old with roll number 23 from student class so that is you can say body of this function age and roll number so maybe you will see now what is the use of this private and all what is the use of the double underscore directly obviously you cannot access those private things you can access but there is some method right like same I have told you it is responsibility of a programmer to not touch these private and protected variable and methods outside of the class environment not modified not modify these things right if I have my cycle that is private to me and I don't want to share that with anyone with like no one even no one from my family member because that is private to me I love my cycle but if anyone knows the code or the you know lock then obviously my family member can use that thing but it is a responsibility of the person who is using my cycle right to not use that thing because that is private to me same thing it is a responsibility of a good programmer to not use private and protected variables and methods outside of the class environment public you can use so I hope the Funda of access specifiers are clear to you guys it's just a name convention in Python not any strict mechanism or rule why so I hope you got the concept of access specifiers in Python so now in the next video we'll see encapsulation bye take
