With timestamps:

00:00 - hey everyone I hope you are safe and
00:02 - doing good so in the series of learning
00:04 - Python programming language in the
00:05 - previous video we have seen one project
00:06 - that was Caesar Cipher right until now
00:09 - in the series we have discussed
00:10 - something about functions as well right
00:13 - like what is a function basic and
00:15 - function without argument and functions
00:17 - with argument right and then types of
00:20 - arguments like keyword positional
00:22 - arbitrary arguments these things we have
00:24 - discussed but till now we haven't
00:26 - discussed functions with return value
00:30 - right means a function is returning
00:33 - something to the caller that thing we
00:35 - haven't discussed till now right so this
00:38 - thing we'll be discussing in this video
00:39 - functions with return value
00:42 - right everything like how a function is
00:45 - going to return a value and how this
00:48 - function will be returning multiple
00:49 - values as well
00:51 - right types of return statement like
00:54 - implicit return explicit return so
00:56 - everything about functions with return
00:57 - where we will be discussing with the
00:59 - help of example and program practical
01:01 - also I will show you right but before
01:03 - that I just want to tell you something
01:05 - to those who are interested to make
01:07 - their career in data science fit first
01:09 - let me just show you something there is
01:11 - a salary calculator the link I'll put in
01:13 - the description box of this video Once
01:14 - you click on that link this type of page
01:15 - will be open and you just have to fill
01:17 - out your basic details like name
01:19 - education and professional details your
01:21 - work experience your knowledge and
01:23 - statistics and programming preferred
01:24 - work work location mail ID phone number
01:26 - and you just have to submit then it will
01:29 - show our estimated salary you can earn
01:32 - based on the whatever you have entered
01:34 - based on your information right now if
01:37 - you are interested to make your current
01:38 - data science field then Odin school is
01:41 - conducting a data science bootcamp and
01:44 - it is a sixth month bootcamp it is
01:47 - perfect for anyone who wants to access
01:49 - industry aligned education at a
01:51 - reasonable price the next would be
01:53 - started from 24th of June and you can
01:55 - see the here the detail the price detail
01:57 - plus you can you can have you can get a
02:00 - scholarship up to rupees 30 000 for that
02:02 - you have to make a scholarship test and
02:03 - they also have a offer for early board
02:06 - in which you will get 10 000 off and
02:08 - they're also providing you a no course
02:10 - TMI option and that's not it it comes
02:13 - with prone placement reports and 360
02:14 - degree placement assistant the placement
02:16 - support start from sixth month and will
02:18 - be available to you till 12th month
02:20 - don't just go with my words you can
02:22 - check out their success stories be it a
02:23 - career launch career change career
02:25 - growth career transition career Gap
02:27 - there are multiple success stories you
02:29 - can check out the link I'll put in the
02:30 - description box of this video you can
02:31 - check out these success stories as well
02:33 - and you can contact these students on
02:36 - their LinkedIn profile you can message
02:37 - them you can contact them
02:39 - and Odin school is having 500 plus
02:41 - hiring pattern many top tech companies
02:43 - as well like Google TCS kept Gemini
02:45 - Deloitte and many more
02:47 - so if you want to kick start your career
02:49 - in data science join or in school today
02:50 - now how to apply for this bootcamp you
02:53 - just have to click on the link that I'll
02:54 - put in the description box of this video
02:56 - the registration link this type of page
02:57 - would be open and you will start to fill
02:59 - out your details right first name last
03:01 - name your year of graduation work
03:03 - experience and all and you just click on
03:05 - request a callback the northern school
03:06 - team that is going to call you back
03:07 - within two or three days now if you have
03:10 - any doubt you can clear your doubts and
03:11 - then after that you can pay the PN
03:12 - enroll in the course right so all the
03:14 - relevant links and details you will find
03:16 - in the description box of this video you
03:17 - can go and check out now let's
03:19 - okay as we know function if you have
03:22 - watched the previous videos in the
03:24 - series functions basically it's a block
03:26 - of code right which is going to perform
03:28 - a specific task
03:30 - when it is executed right how to define
03:32 - a function simply this keyword here we
03:35 - are writing a function name
03:37 - and if you want to parse some parameter
03:39 - then also you can pass
03:41 - one two three four edges any parameters
03:43 - you want then here we are having
03:44 - function boarding the statements this is
03:47 - what definition of functions but this is
03:50 - not going to do anything
03:52 - to do something whatever you write here
03:55 - to execute that task to perform that
03:57 - task you have to call the function so
03:58 - two main things are there defining a
04:00 - function and calling our functions how
04:02 - to call a function simply function name
04:04 - whatever you write here and
04:07 - arguments
04:10 - right and this is function calling
04:12 - right simple definition and calling of
04:15 - the function right
04:16 - now as many arguments as you want you
04:18 - can pass here multiple type of argument
04:20 - like positional keyword arbitrary this
04:22 - thing we have discussed till now right
04:24 - but see let's take one example if you
04:26 - are going to add two numbers so how you
04:28 - will Define a function div and suppose
04:30 - function name is ADD
04:32 - and suppose I am calling this function
04:34 - add and I'm passing two argument 5 and
04:37 - 4.
04:38 - so two parameters whatever you will
04:41 - write in these parentheses in these
04:43 - brackets while defining a function those
04:46 - are known as parameters while calling
04:48 - whatever you will pass those are known
04:49 - as arguments right so these are
04:52 - parameters A and B right and
04:54 - a plus b and just print
04:58 - C this is definition of function this is
05:00 - function calling right
05:02 - here if this function is not returning
05:04 - anything
05:06 - if you want to return if you want that
05:08 - the function should return rather than
05:10 - just print then another thing what we
05:12 - can do rather than print
05:14 - we can write down
05:16 - return and what you want to return this
05:19 - C
05:20 - return C
05:22 - so now this function is going to return
05:24 - whatever is there in this variable in C
05:27 - C we are having a plus b means 5 plus 4
05:29 - is 9 so it will return 9 right so this 9
05:35 - while calling where it will return to
05:38 - the caller so here we are calling this
05:40 - function so at this this line would be
05:43 - replaced with 9 right
05:46 - now there is a value so to you have to
05:50 - accept this value in a variable maybe in
05:52 - a variable so here we can
05:55 - maybe something like we can take a
05:57 - variable output and there we can just
05:59 - print
06:01 - output
06:02 - or simply here also print add 5 and for
06:05 - that also you can do right
06:08 - so in general a function is going to
06:11 - accept some arguments if any argument is
06:14 - not necessary that every function is
06:15 - going to accept some argument without
06:17 - argument function also possible right if
06:19 - any then the function is going to return
06:21 - sorry accept arguments process something
06:25 - based on those
06:27 - arguments or those parameters and return
06:30 - something or return a value where to the
06:33 - caller
06:35 - right so the value of the function is
06:37 - going to return to the colon that is
06:39 - known as return value functions return
06:42 - value
06:43 - and all the functions are having return
06:46 - value
06:47 - right maybe it's explicit or implicit
06:50 - so two types of return values or return
06:53 - statements are there explicit and
06:54 - implicit that will be discussing in next
06:56 - video in detail right this video is all
06:58 - about just to get you familiar with the
07:01 - basic return statement
07:02 - so generally I return a statement is a
07:07 - special statement that we use inside a
07:10 - function C make this point inside a
07:12 - function only
07:13 - if outside a function anywhere you write
07:15 - a return statement that will give syntax
07:17 - error so it is a special statement that
07:19 - we use inside a function yes right and
07:22 - what is the syntax return keyword and
07:24 - here we use return value whatever value
07:27 - you want to return but this thing is
07:28 - optional
07:29 - okay two things are there you can simply
07:32 - use return that's it with no return
07:35 - value or you can commit this complete
07:38 - statement
07:39 - do not write anything no return no
07:42 - return value in what the case is the
07:45 - function will return none
07:48 - this thing I will show you in practical
07:50 - right
07:52 - but you have two you know
07:55 - be aware about these things you can
07:57 - write down any return value and this
08:00 - return value is any any objects in
08:02 - Python we know everything is object so
08:04 - it can be a numeric value in flowed or
08:06 - complex value or any sequences or
08:08 - collection like list double set
08:10 - dictionary or any user defined functions
08:12 - module packages anything
08:14 - right or simple return also you can
08:16 - write or you can omit this complete
08:19 - statement as well right
08:21 - these many cases can be there with
08:23 - return statement okay now let's see this
08:25 - thing with the help of example or
08:27 - program okay so let's create a new file
08:31 - function with roton value right let's
08:35 - take the very basic and simple example
08:37 - what addition
08:40 - so we are going to call a function
08:42 - addition and suppose I am passing like 5
08:44 - and 4 okay so this is calling of
08:46 - function now before calling you have to
08:48 - Define that function otherwise it will
08:50 - give error So Def same function name add
08:52 - and we are passing two arguments so just
08:55 - take two parameters A and B and suppose
08:58 - I am writing C is equal to a plus
09:00 - B
09:01 - and here only I am not returning I am
09:03 - just printing
09:05 - C
09:07 - right
09:08 - so this is the very simple example let's
09:11 - run this
09:12 - see you get
09:13 - the output is
09:15 - 9. now if you don't want to print
09:20 - and I want to return this value so just
09:22 - return statement you have to use return
09:24 - this keyword and return value what you
09:26 - want to return C
09:28 - right now whatever you will return this
09:31 - return c means it will return 9 so this
09:34 - 9
09:36 - it will return this value to the caller
09:38 - caller is this one so here it will
09:40 - replace this with 9 but we are not
09:43 - printing nine here or we are not
09:45 - accepting that value in any variable so
09:48 - what output you will get C it will print
09:50 - nothing because we are not printing
09:52 - anything so one way is you can simply
09:55 - print here
09:58 - right so this this would be replaced
10:02 - with
10:04 - nine
10:05 - right and it will print 9.
10:08 - so let's run this see now it will print
10:10 - line or other thing is what if you are
10:13 - not printing here you can simply
10:16 - like
10:18 - take a variable and just store that
10:21 - value in this result and
10:23 - you can print here
10:26 - result that will also give you same
10:28 - result
10:29 - that is 9. so here we are returning
10:32 - something
10:33 - or rather than these two lines we can
10:36 - simply do so what
10:40 - return a plus b
10:42 - that is also fine
10:45 - we are having now less number of lines
10:47 - let's run this and this will also give
10:49 - you same result 9. right
10:53 - if rather than a plus b if I simply
10:56 - write here like
10:57 - I am writing C is equal to a plus b
11:00 - and
11:04 - just return
11:06 - nothing else
11:11 - right
11:13 - return but no return value we are
11:15 - providing so let's run this
11:18 - C
11:19 - in this case it is going to return none
11:23 - fine
11:24 - because
11:26 - we are we are using return statement and
11:28 - a return value is nothing so it will
11:30 - pass here none in result we have none
11:33 - and we are going to print none if you
11:35 - completely omit this line we are not
11:38 - Printing and we are not writing this
11:40 - statement even the return keyword in
11:44 - that case also it will return none
11:46 - because this is what implicit return two
11:48 - types of return I have told you explicit
11:50 - plus implicit explicit means we are
11:51 - specifying the return statement implicit
11:53 - means by default if you are not
11:55 - specifying any return statement by
11:56 - default thus python in Python this
11:59 - function will return none
12:01 - implicitly so here also it will
12:03 - returning none
12:05 - right
12:06 - on C
12:09 - now it will work fine okay invalid
12:12 - syntax
12:16 - it's RN
12:17 - let's run this and see nine okay if
12:20 - other than we can use this return
12:23 - statement if the special statement we
12:25 - can use this within the definition of
12:27 - the function right if other than outside
12:30 - of the definition I am using
12:33 - return
12:35 - or C or may be simply return so it will
12:38 - give syntax error see
12:41 - return outside function so we cannot use
12:44 - return statement outside a function
12:46 - this thing you need to take care
12:49 - so this is simple return a function with
12:52 - simple return value now one exercise for
12:55 - user you can say one quiz for you is
12:57 - suppose I am passing any line or suppose
13:00 - my name right
13:05 - and you have to convert that into title
13:08 - case title case means
13:10 - every word first letter would be capital
13:13 - and all other letters are smooth
13:17 - so let's write down
13:20 - this thing
13:25 - now
13:27 - we are suppose we are going to format
13:29 - our name so
13:32 - I'm calling a function format
13:35 - name and there I am passing my name so
13:39 - first thing like Jenny in capital and
13:43 - last name I am passing like
13:46 - Katrina all capital and general smooth
13:48 - so you need to format you need to
13:50 - convert this thing into title case
13:52 - right now title case means
13:55 - you can Google this out
13:58 - like this Jenny
14:01 - the first letter of every word would be
14:03 - capital and all the other letters are
14:05 - small this is title case
14:07 - okay
14:08 - Now define a function depth
14:13 - and the function name is
14:16 - format name
14:19 - right and here we are I'm passing two
14:21 - arguments so two
14:24 - variable to parameter first name last
14:27 - name right and there how to convert this
14:31 - thing
14:32 - we have a functional inbuilt function
14:35 - title so we just use that thing so first
14:38 - name I want to convert into title case
14:40 - so how to convert the name of the
14:43 - variable first name Dot
14:46 - title
14:47 - that's it
14:49 - same last name Dot
14:52 - title so it will convert both these into
14:55 - title case
14:57 - okay now
15:01 - simply return or simply print rather
15:03 - than return first print
15:07 - and suppose in formatted string I am
15:09 - printing
15:10 - first name comma
15:13 - last name
15:14 - right let's run this
15:17 - C okay it hasn't converted into in this
15:20 - because we are simply
15:22 - okay the names are same because we are
15:25 - simply what we are doing we are just
15:27 - printing F name and last name as it is
15:31 - after formatting after formatting this
15:34 - let's
15:37 - formatted F name
15:40 - save this in
15:43 - another variable formatted
15:48 - last name now what you need to print
15:55 - formatted F name
15:57 - comma
16:00 - formatted
16:03 - L name let's run this
16:06 - Cena Jenny J capital khatri K Capital
16:09 - otherwise all the letters are small
16:12 - right let's remove this comma as well
16:15 - let's run this see Jennifer 3 this is
16:18 - title case okay now rather than printing
16:21 - just return so rather than print
16:25 - simply replace this with return and as
16:29 - it is we can write down that is fine f
16:31 - formatted name f formatted L name now
16:34 - here we are going to print
16:37 - so before this simply write down print
16:41 - this is one way
16:43 - let's run this
16:45 - and see right
16:49 - now if you are not going to print here
16:52 - just because we know whatever this
16:54 - function is going to return that as a
16:56 - string so you can take a variable name
16:59 - here
17:00 - like
17:03 - formatted
17:05 - name equal to
17:09 - that's it and
17:22 - in print we can simply print formatted
17:24 - name see Jenny
17:27 - right
17:28 - so I hope now you have some idea how the
17:31 - function with return value Works how we
17:34 - can use this return statement just
17:36 - return keyword and return value whatever
17:38 - you want to return this return value can
17:41 - be anything numeric collection string or
17:43 - anything
17:44 - right
17:46 - different different variations on this
17:48 - return will be discussing in later
17:49 - videos right
17:51 - so I hope you would have a function with
17:53 - the return value works right now a
17:55 - function can can return multiple values
17:57 - as well and a return statement can be
18:00 - written can be of two types implicit
18:02 - explicit and what is difference between
18:03 - return and print this thing will be
18:05 - discussing in next videos
18:07 - take care

Cleaned transcript:

hey everyone I hope you are safe and doing good so in the series of learning Python programming language in the previous video we have seen one project that was Caesar Cipher right until now in the series we have discussed something about functions as well right like what is a function basic and function without argument and functions with argument right and then types of arguments like keyword positional arbitrary arguments these things we have discussed but till now we haven't discussed functions with return value right means a function is returning something to the caller that thing we haven't discussed till now right so this thing we'll be discussing in this video functions with return value right everything like how a function is going to return a value and how this function will be returning multiple values as well right types of return statement like implicit return explicit return so everything about functions with return where we will be discussing with the help of example and program practical also I will show you right but before that I just want to tell you something to those who are interested to make their career in data science fit first let me just show you something there is a salary calculator the link I'll put in the description box of this video Once you click on that link this type of page will be open and you just have to fill out your basic details like name education and professional details your work experience your knowledge and statistics and programming preferred work work location mail ID phone number and you just have to submit then it will show our estimated salary you can earn based on the whatever you have entered based on your information right now if you are interested to make your current data science field then Odin school is conducting a data science bootcamp and it is a sixth month bootcamp it is perfect for anyone who wants to access industry aligned education at a reasonable price the next would be started from 24th of June and you can see the here the detail the price detail plus you can you can have you can get a scholarship up to rupees 30 000 for that you have to make a scholarship test and they also have a offer for early board in which you will get 10 000 off and they're also providing you a no course TMI option and that's not it it comes with prone placement reports and 360 degree placement assistant the placement support start from sixth month and will be available to you till 12th month don't just go with my words you can check out their success stories be it a career launch career change career growth career transition career Gap there are multiple success stories you can check out the link I'll put in the description box of this video you can check out these success stories as well and you can contact these students on their LinkedIn profile you can message them you can contact them and Odin school is having 500 plus hiring pattern many top tech companies as well like Google TCS kept Gemini Deloitte and many more so if you want to kick start your career in data science join or in school today now how to apply for this bootcamp you just have to click on the link that I'll put in the description box of this video the registration link this type of page would be open and you will start to fill out your details right first name last name your year of graduation work experience and all and you just click on request a callback the northern school team that is going to call you back within two or three days now if you have any doubt you can clear your doubts and then after that you can pay the PN enroll in the course right so all the relevant links and details you will find in the description box of this video you can go and check out now let's okay as we know function if you have watched the previous videos in the series functions basically it's a block of code right which is going to perform a specific task when it is executed right how to define a function simply this keyword here we are writing a function name and if you want to parse some parameter then also you can pass one two three four edges any parameters you want then here we are having function boarding the statements this is what definition of functions but this is not going to do anything to do something whatever you write here to execute that task to perform that task you have to call the function so two main things are there defining a function and calling our functions how to call a function simply function name whatever you write here and arguments right and this is function calling right simple definition and calling of the function right now as many arguments as you want you can pass here multiple type of argument like positional keyword arbitrary this thing we have discussed till now right but see let's take one example if you are going to add two numbers so how you will Define a function div and suppose function name is ADD and suppose I am calling this function add and I'm passing two argument 5 and 4. so two parameters whatever you will write in these parentheses in these brackets while defining a function those are known as parameters while calling whatever you will pass those are known as arguments right so these are parameters A and B right and a plus b and just print C this is definition of function this is function calling right here if this function is not returning anything if you want to return if you want that the function should return rather than just print then another thing what we can do rather than print we can write down return and what you want to return this C return C so now this function is going to return whatever is there in this variable in C C we are having a plus b means 5 plus 4 is 9 so it will return 9 right so this 9 while calling where it will return to the caller so here we are calling this function so at this this line would be replaced with 9 right now there is a value so to you have to accept this value in a variable maybe in a variable so here we can maybe something like we can take a variable output and there we can just print output or simply here also print add 5 and for that also you can do right so in general a function is going to accept some arguments if any argument is not necessary that every function is going to accept some argument without argument function also possible right if any then the function is going to return sorry accept arguments process something based on those arguments or those parameters and return something or return a value where to the caller right so the value of the function is going to return to the colon that is known as return value functions return value and all the functions are having return value right maybe it's explicit or implicit so two types of return values or return statements are there explicit and implicit that will be discussing in next video in detail right this video is all about just to get you familiar with the basic return statement so generally I return a statement is a special statement that we use inside a function C make this point inside a function only if outside a function anywhere you write a return statement that will give syntax error so it is a special statement that we use inside a function yes right and what is the syntax return keyword and here we use return value whatever value you want to return but this thing is optional okay two things are there you can simply use return that's it with no return value or you can commit this complete statement do not write anything no return no return value in what the case is the function will return none this thing I will show you in practical right but you have two you know be aware about these things you can write down any return value and this return value is any any objects in Python we know everything is object so it can be a numeric value in flowed or complex value or any sequences or collection like list double set dictionary or any user defined functions module packages anything right or simple return also you can write or you can omit this complete statement as well right these many cases can be there with return statement okay now let's see this thing with the help of example or program okay so let's create a new file function with roton value right let's take the very basic and simple example what addition so we are going to call a function addition and suppose I am passing like 5 and 4 okay so this is calling of function now before calling you have to Define that function otherwise it will give error So Def same function name add and we are passing two arguments so just take two parameters A and B and suppose I am writing C is equal to a plus B and here only I am not returning I am just printing C right so this is the very simple example let's run this see you get the output is 9. now if you don't want to print and I want to return this value so just return statement you have to use return this keyword and return value what you want to return C right now whatever you will return this return c means it will return 9 so this 9 it will return this value to the caller caller is this one so here it will replace this with 9 but we are not printing nine here or we are not accepting that value in any variable so what output you will get C it will print nothing because we are not printing anything so one way is you can simply print here right so this this would be replaced with nine right and it will print 9. so let's run this see now it will print line or other thing is what if you are not printing here you can simply like take a variable and just store that value in this result and you can print here result that will also give you same result that is 9. so here we are returning something or rather than these two lines we can simply do so what return a plus b that is also fine we are having now less number of lines let's run this and this will also give you same result 9. right if rather than a plus b if I simply write here like I am writing C is equal to a plus b and just return nothing else right return but no return value we are providing so let's run this C in this case it is going to return none fine because we are we are using return statement and a return value is nothing so it will pass here none in result we have none and we are going to print none if you completely omit this line we are not Printing and we are not writing this statement even the return keyword in that case also it will return none because this is what implicit return two types of return I have told you explicit plus implicit explicit means we are specifying the return statement implicit means by default if you are not specifying any return statement by default thus python in Python this function will return none implicitly so here also it will returning none right on C now it will work fine okay invalid syntax it's RN let's run this and see nine okay if other than we can use this return statement if the special statement we can use this within the definition of the function right if other than outside of the definition I am using return or C or may be simply return so it will give syntax error see return outside function so we cannot use return statement outside a function this thing you need to take care so this is simple return a function with simple return value now one exercise for user you can say one quiz for you is suppose I am passing any line or suppose my name right and you have to convert that into title case title case means every word first letter would be capital and all other letters are smooth so let's write down this thing now we are suppose we are going to format our name so I'm calling a function format name and there I am passing my name so first thing like Jenny in capital and last name I am passing like Katrina all capital and general smooth so you need to format you need to convert this thing into title case right now title case means you can Google this out like this Jenny the first letter of every word would be capital and all the other letters are small this is title case okay Now define a function depth and the function name is format name right and here we are I'm passing two arguments so two variable to parameter first name last name right and there how to convert this thing we have a functional inbuilt function title so we just use that thing so first name I want to convert into title case so how to convert the name of the variable first name Dot title that's it same last name Dot title so it will convert both these into title case okay now simply return or simply print rather than return first print and suppose in formatted string I am printing first name comma last name right let's run this C okay it hasn't converted into in this because we are simply okay the names are same because we are simply what we are doing we are just printing F name and last name as it is after formatting after formatting this let's formatted F name save this in another variable formatted last name now what you need to print formatted F name comma formatted L name let's run this Cena Jenny J capital khatri K Capital otherwise all the letters are small right let's remove this comma as well let's run this see Jennifer 3 this is title case okay now rather than printing just return so rather than print simply replace this with return and as it is we can write down that is fine f formatted name f formatted L name now here we are going to print so before this simply write down print this is one way let's run this and see right now if you are not going to print here just because we know whatever this function is going to return that as a string so you can take a variable name here like formatted name equal to that's it and in print we can simply print formatted name see Jenny right so I hope now you have some idea how the function with return value Works how we can use this return statement just return keyword and return value whatever you want to return this return value can be anything numeric collection string or anything right different different variations on this return will be discussing in later videos right so I hope you would have a function with the return value works right now a function can can return multiple values as well and a return statement can be written can be of two types implicit explicit and what is difference between return and print this thing will be discussing in next videos take care
