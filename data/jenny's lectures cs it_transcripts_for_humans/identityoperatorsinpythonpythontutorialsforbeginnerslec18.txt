With timestamps:

00:00 - so in a series of learning Python
00:01 - programming language we are discussing
00:03 - operators in Python till now we have
00:04 - discussed
00:05 - uh arithmetic operator assignment
00:08 - operator logical operator and bitwise
00:09 - operator so now we are left with two
00:11 - moral entity and membership operator so
00:13 - now in this video we'll talk about what
00:14 - is the identity operator in Python right
00:16 - now many students get confused between
00:19 - identity operator and equality operator
00:21 - that these are same
00:23 - see whenever I show you practical like
00:25 - we will write a program to use this
00:28 - identity operator and whenever when you
00:30 - see the output then you definitely will
00:32 - think that the the same thing we can do
00:34 - with
00:35 - equality operator as well but no the
00:37 - working of these operators are different
00:39 - maybe sometimes output would be same of
00:42 - these two operators but working behind
00:45 - the scene what is happening that is
00:46 - different so that we will see how these
00:49 - operator identity operator is different
00:50 - from equality operator with the help of
00:53 - one real life example as well as with
00:55 - the help of program that is very
00:56 - important point right so all about
00:59 - identity operators in Python we'll be
01:02 - discussing in this video right practical
01:05 - also I will show you on my laptop but
01:07 - before they just want to tell you one
01:09 - thing if you guys are interested in
01:10 - coding and you want to take your coding
01:12 - skills to the next level
01:14 - then participate in the biggest
01:16 - scholarship test of the Year by coding
01:18 - ninjas and earn up to 100 scholarship on
01:22 - the best coding courses so don't miss
01:25 - this chance to set yourself apart from
01:26 - this competition and take one step
01:28 - towards a bright future encoding so
01:31 - register for this scholarship test today
01:33 - and get up to 100 scholarship on all the
01:36 - video lectures curated by ex Facebook
01:39 - IIT Stanford aluminize an excellent
01:42 - rated courses on Google
01:44 - plus here you will get one to one doubt
01:47 - assistant support
01:48 - as well as they have their dedicated
01:50 - placement sale to help you to get placed
01:53 - right now actively many companies are
01:56 - effectively hiring from their placement
01:57 - cell and what is the test pattern only
02:00 - 30 aptitude questions you will get mcqs
02:03 - and you have 11 days Windows to attend
02:04 - this test because this is going to be
02:06 - started from 19th of December till 29th
02:09 - of December you have time to attempt
02:11 - this test and no negative marketing
02:12 - would be there that is a plus one for
02:14 - you guys
02:15 - so the registration link you will find
02:17 - in the description box of this video and
02:18 - one more thing uh freely you can
02:20 - register for this test there is no
02:22 - registration fee so now you can check
02:24 - out the link in the description box of
02:25 - this video and the relevant links and
02:27 - details all the details you will find in
02:29 - the description box of this video now
02:30 - let's see what are identity operators in
02:32 - Python
02:33 - so basically two identity operators are
02:36 - there is and is not right
02:39 - so they are used to compare the objects
02:42 - means if both the objects are actually
02:44 - same object or not and they share same
02:47 - memory location
02:49 - right
02:50 - so whatever I am saying that we'll
02:53 - discuss with them open example see if I
02:56 - am taking a is equal to 5 and B is equal
02:59 - to 5. right and if I print if I print I
03:04 - am using this is
03:07 - Unity operator a is B right so is means
03:12 - it will return true
03:14 - okay now let's see what it will print
03:17 - what it will return a is B
03:20 - it will return actually true
03:25 - now maybe you are thinking it is
03:27 - comparing the values because a is also 5
03:29 - b is also 5 that is why it is true no I
03:32 - have told you they compare the objects
03:35 - because in Python is purely object or in
03:38 - your programming language so everything
03:39 - is considered as
03:41 - what you can say objects right and each
03:43 - object is having its memory address
03:46 - memory address or you can say they are
03:48 - having their unique object ID object ID
03:51 - object ID means nothing but that memory
03:54 - address of that object
03:56 - right now before proceeding to these
03:59 - things let me just
04:01 - tell you something about the memory
04:03 - location of these variables right so in
04:06 - Python whenever we write this thing so
04:08 - we have some memory would be allocated
04:11 - some memory address like we can say 1000
04:14 - memory address of this is let's suppose
04:15 - thousand and here we have value 5 so
04:19 - this 5 is what considered as object
04:21 - and this is object ID or you can say
04:25 - memory address right and this a is just
04:28 - you can say name for this object or you
04:30 - can say tag or name
04:32 - right this is tag or you can say name
04:36 - now again I'm writing B is equal to 5.
04:39 - so in Python what will happen the memory
04:41 - manager basically reuse the object
04:45 - instead of creating
04:47 - new objects or instead of allocating new
04:50 - memory
04:51 - right for the
04:53 - same data and same you can say data type
04:57 - so here 5 5 is value is same right into
05:02 - data type so it will not allocate
05:04 - something like this like B 5 and memory
05:07 - address let us suppose two thousand no
05:09 - it will not create another object it
05:11 - will reuse these objects already created
05:13 - objects right
05:14 - because A and B these are just name of
05:17 - these objects so this B would also be
05:21 - linked to this object 5 and memory
05:25 - address would be same thousand so now
05:27 - this can be accessed with both the name
05:29 - A and B
05:31 - this is the case in Python I hope you
05:34 - got my point right so here what point
05:37 - you have to note the memory manager is
05:39 - in Python
05:40 - reuse the objects instead of creating
05:43 - new objects for the same data with same
05:46 - data type
05:47 - right for same data type so we are
05:50 - reusing same object so now here 1000
05:53 - memory location for A and B both are
05:55 - same so what identity operator is
05:58 - comparing actually the memory address so
06:00 - memory address of a is thousand
06:03 - or memory address of b or you can say ID
06:05 - of this object is also thousand that is
06:08 - why it is returning true
06:10 - and if I write something like this print
06:13 - a equal to equal to B so this equality
06:16 - operator basically compares the equality
06:18 - basically it compares the values so a
06:20 - value is 5 b value is 5 that is why it
06:23 - will return to you
06:25 - so maybe you get confused like a is B is
06:28 - also to a equal to equal to B is also
06:30 - true so identity operator and assignment
06:32 - operator sorry this equality operator
06:34 - both are same
06:35 - but no
06:37 - the working is different if I write
06:40 - something like this
06:41 - print and see
06:43 - how you can check the ID of the objects
06:46 - we have a functioning python that is ID
06:50 - so just you will write ID and in bracket
06:54 - just pass the object for which you want
06:56 - to check the memory address or the
06:58 - object ID
06:59 - right so here I am passing a
07:02 - or you can pass 5 also 5 is what object
07:05 - this five object this is having uh
07:08 - memory address thousand so it will
07:09 - return object ID or you can say memory
07:12 - address both are same
07:13 - so this will return thousand let us
07:16 - suppose we are supposing that this is
07:18 - thousand but actually it is not thousand
07:20 - whenever we run this then I'll show you
07:22 - and if I print print ID B that will also
07:27 - return same
07:28 - so the idea of these objects are same
07:31 - means memory location of both the
07:33 - objects are same means actually these
07:35 - are same object that is why it is
07:37 - returning true
07:39 - so Edge will return true if both the
07:42 - objects are same or the memory address
07:44 - or the object ID of both the objects are
07:46 - same and it will return false if the
07:50 - memory address is not same or the
07:52 - objects are not same action that at that
07:56 - time it will return false
07:58 - is identity operator
08:00 - I hope you got this point right
08:04 - now if I write something like this a is
08:07 - 5 and B is 5.
08:11 - now it is a string
08:13 - you can say pick a string or a character
08:15 - you can say we write string in double
08:17 - quote or single quote
08:18 - so at this point of time it will create
08:21 - a is 5
08:23 - the value
08:25 - the data is not same this time because
08:27 - it is string it is integer data type
08:29 - data type is different so at this point
08:32 - of time it will create another object
08:34 - here it will store 5 and maybe address
08:37 - is suppose two thousand
08:40 - right
08:42 - so this is the case at this point of
08:45 - time if you print a is B what it will
08:47 - print false
08:50 - at this point of time because the memory
08:53 - address of these objects are not same so
08:55 - it will return false
08:57 - I hope you got what is is
09:01 - operator and is not is what it is just
09:04 - what working of is not is what
09:07 - reverse of is
09:09 - here if I write is not
09:14 - is not b
09:17 - obviously we know a is not B because a
09:19 - is this 5 because memory address of a is
09:22 - this memory address of B is this both
09:24 - are different object
09:26 - right so is not b means yeah that is
09:28 - true so in this case it will return true
09:32 - it will return true is not will return
09:34 - true if both the objects are not same if
09:36 - memory location of both objects are not
09:38 - same
09:39 - and it will return false if both the
09:42 - objects are same so here if I write 5
09:45 - and 5 and if I write yeah is not
09:49 - is not b
09:51 - but in this case it will not create
09:53 - another object because this is same data
09:57 - with same data type
09:58 - so obviously these are same and we are
10:00 - writing a is not b
10:03 - but that is not true because a is B both
10:06 - are same
10:07 - a is not B now it will return at this
10:11 - point of time it will return false
10:15 - I hope you got what is is and what is is
10:18 - not notes I'll put in the description
10:21 - box of this video you can check out
10:22 - these things right but
10:25 - you have to understand first
10:28 - the working of is an is node they
10:30 - actually compare the object ID is the
10:32 - memory location not the values let's see
10:34 - a real life example now let's see the
10:36 - difference between the stubble equal to
10:38 - n
10:39 - is identity operator right
10:43 - okay so let's suppose
10:46 - you and your friend or let's suppose me
10:48 - and my friend are having
10:50 - two glasses and in my glass I have
10:53 - banana shake
10:55 - and my friend is having mango Shield
10:58 - so if I compare like this banana shake
11:02 - and
11:05 - mango shake we are having two glasses
11:08 - these are glasses different different
11:11 - glasses right so if I compare equal to
11:13 - equal to
11:15 - banana shake mango shake
11:17 - these are equal because the values in
11:19 - these glasses are one is banana shake
11:21 - one is mango shake
11:23 - same as a is having five and B is having
11:26 - six these are values are not equal
11:28 - obviously so this will return false
11:33 - right if both me and my friend are
11:36 - having two glasses separate glasses but
11:39 - both are having banana shake
11:44 - then equality operator values are banana
11:46 - shake banana shake so it will return
11:51 - right
11:52 - just generally we are
11:54 - you know checking if it's not like that
11:57 - if in banana shake I am adding some
11:59 - cherry and
12:00 - his banana shake no Cherry so that is
12:04 - also right values are different but
12:06 - generally banana shake banana shake
12:08 - nothing else is in that banana shake
12:10 - right so it will return true but but
12:13 - if I write something like this banana
12:16 - shake is bana banana shake
12:19 - now what if you got the concept of is
12:23 - and is not
12:24 - you can answer this question so what it
12:27 - will return it will return
12:30 - false
12:31 - because values we are not checking the
12:35 - values we are in is it will check the
12:38 - object ID the memory address so we are
12:41 - having two different different glasses
12:44 - memory location of these banana shake
12:46 - are not same these are not within same
12:48 - glass
12:49 - different different glass so it will
12:51 - return Folds
12:52 - I hope now you got the difference
12:54 - between equality and is operator right
12:57 - but if me and my friend are sharing same
13:01 - glass we have one glass and we are
13:04 - sharing in that glass UI we are having
13:07 - banana shake and we are sharing the same
13:09 - glass right there are not two glasses
13:12 - only one glass is there
13:14 - at this point of time if I compare
13:16 - banana shake is banana shake then it
13:18 - will return to you
13:20 - because glass is same
13:24 - object is same the memory address is
13:26 - same
13:27 - right we are sharing the same glass
13:29 - there are no two glasses so at this
13:31 - point of time it will turn true and
13:33 - obviously at this point of time if I
13:34 - write equal to equal to definite it will
13:36 - turn true because we are having banana
13:39 - shake and banana shape right
13:41 - so if we are having one glass if I add
13:44 - cherry so obviously in my friends banana
13:47 - shake also there would be Cherry because
13:48 - we are having we are sharing same glass
13:50 - right
13:52 - so I hope now you got the difference
13:54 - between equality and identity operator
13:57 - so now if I write something like this
14:00 - like I am having a is equal to 5 b is
14:02 - equal to 5 and I am writing print ID a
14:09 - equal to equal to ID
14:11 - B yeah at this point of time you can say
14:14 - equality is
14:16 - some somewhat like is you know behaving
14:19 - in the same manner as is because in SVA
14:23 - basically compare the memory address on
14:24 - here here also we are comparing the same
14:27 - thing ID means it will give the memory
14:28 - address ID means it will give the memory
14:30 - address so we are comparing the
14:31 - liquidity for these I these addresses so
14:34 - this you can write or you can write like
14:36 - print a is B both lines are same I hope
14:41 - you got the difference between these two
14:42 - now and I hope you could what is
14:44 - is and what is is not operated so now
14:47 - let's see this with practically
14:49 - so let's create a new file for this and
14:53 - we are checking
14:55 - identity
14:58 - operators right
15:02 - dot p y the extension is dot p y right
15:05 - so here I'm just taking
15:10 - a is equal to suppose 5
15:13 - and B is equal to also Phi
15:18 - and we are printing print K is B simple
15:22 - right let's run this so obviously it
15:25 - will return true why so because it's our
15:28 - same object right
15:30 - if you want to check then you can print
15:32 - the ID of these things print ID a
15:37 - and
15:38 - then print ID
15:42 - sorry B
15:44 - right so let's run this C ID of a object
15:49 - ID or memory addresses same as ID of B
15:53 - so these are same object obviously
15:55 - memory address is same so means these
15:57 - are actually same objects so a is be
15:59 - written true and is not will return
16:04 - is not well return in this case
16:08 - false right let's run this
16:11 - C is not well written Force
16:14 - okay because a is B so and we are
16:17 - checking a is we are saying a is not B
16:19 - but we know that a is B so that is why
16:22 - it will return false so it will run
16:23 - Force if both the objects are actually
16:25 - same if memory location of both the
16:27 - objects are same is not will return in
16:30 - that case false
16:32 - so now if if I write something like this
16:36 - is 5 we are writing the this is int this
16:41 - is string right now let's run this
16:45 - see you can check the ID of this ID of a
16:48 - this is idea of B both are different
16:50 - right both are different and a is B note
16:54 - a is not B now at this point of time
16:56 - these are different object so now it
16:59 - will return Force if I write here a is
17:02 - not b
17:03 - yeah it's true a is not B because these
17:06 - are different so now it will return true
17:10 - right I hope you got the working of
17:12 - these is and is not
17:15 - and see if I write something like this
17:17 - now a is B
17:20 - sorry a is equal to 5 and I am printing
17:23 - ID of a and again I am assigning a is
17:25 - equal to I'm
17:27 - uh changing the value to 6 and again I
17:30 - am printing
17:31 - ID of a
17:32 - right at this point of time let's just
17:36 - comment this out so maybe you are
17:38 - thinking first a is 5 and then we are
17:40 - assigning we are changing the value so
17:42 - ID would be same but no in Python it is
17:45 - not the case because this int is what
17:49 - immutable immutable object means mutable
17:52 - and immutable objects we are immutable
17:53 - means we cannot change the value of
17:56 - these
17:57 - if 1 is 5 we cannot change the value of
18:00 - same object at the same location to 6.
18:02 - for this it will create another memory
18:05 - address
18:06 - so these a and a are having different
18:08 - different memory address see now you can
18:11 - check this memory address is different
18:13 - from this right because hint is what
18:16 - like in float Bool these are immutable
18:19 - objects and list like list is what
18:22 - mutable object
18:24 - so I hope you know maybe if you don't
18:27 - know the difference between mutable and
18:28 - immutable object we will create a
18:30 - separate video for that but for now
18:33 - main purpose is you have to understand
18:35 - working of identity operators what is
18:37 - the entity operator is and is node when
18:39 - it will turn true when it will turn
18:41 - false and some difference between
18:43 - equality and identity operators
18:46 - right basically we use these operator
18:48 - like when we check some conditioning if
18:51 - blocks and if statements but that we
18:53 - haven't discussed
18:55 - right so that also will discuss and at
18:57 - that point of time we will use these
18:59 - operators identity operators right
19:02 - and if I write something like this a is
19:05 - equal to
19:06 - 5.0
19:08 - right
19:09 - B is equal to this and ID of a ID of B
19:12 - and we are just checking at this point
19:15 - of time
19:16 - a is
19:17 - B
19:19 - right let's run this
19:22 - this point of time it will return false
19:24 - because these are not same object it is
19:26 - int it is float and ID is also different
19:31 - so one assignment for you is if I write
19:34 - something like this a is 5 then printing
19:36 - ID of a then again I'm writing a is
19:39 - equal to 8 and I'm printing ID of a
19:44 - or maybe you don't want to print it's up
19:46 - to you and a is a
19:49 - what do you think what output you will
19:51 - get true or false
19:52 - five and eight so this is for your
19:55 - assignment you have to let me know in
19:56 - comment section
19:58 - if a is a is true why you are getting
20:00 - true if a is a is false why you are
20:02 - getting false that also you have to tell
20:04 - me in comment section right
20:06 - so I hope you got what is identity
20:07 - operator and how this is different from
20:09 - equality operator the working of
20:11 - identity operator basically right so in
20:13 - the next video we'll see what are
20:15 - membership operators in Python so now
20:17 - we'll see in the next video till then
20:18 - bye take care

Cleaned transcript:

so in a series of learning Python programming language we are discussing operators in Python till now we have discussed uh arithmetic operator assignment operator logical operator and bitwise operator so now we are left with two moral entity and membership operator so now in this video we'll talk about what is the identity operator in Python right now many students get confused between identity operator and equality operator that these are same see whenever I show you practical like we will write a program to use this identity operator and whenever when you see the output then you definitely will think that the the same thing we can do with equality operator as well but no the working of these operators are different maybe sometimes output would be same of these two operators but working behind the scene what is happening that is different so that we will see how these operator identity operator is different from equality operator with the help of one real life example as well as with the help of program that is very important point right so all about identity operators in Python we'll be discussing in this video right practical also I will show you on my laptop but before they just want to tell you one thing if you guys are interested in coding and you want to take your coding skills to the next level then participate in the biggest scholarship test of the Year by coding ninjas and earn up to 100 scholarship on the best coding courses so don't miss this chance to set yourself apart from this competition and take one step towards a bright future encoding so register for this scholarship test today and get up to 100 scholarship on all the video lectures curated by ex Facebook IIT Stanford aluminize an excellent rated courses on Google plus here you will get one to one doubt assistant support as well as they have their dedicated placement sale to help you to get placed right now actively many companies are effectively hiring from their placement cell and what is the test pattern only 30 aptitude questions you will get mcqs and you have 11 days Windows to attend this test because this is going to be started from 19th of December till 29th of December you have time to attempt this test and no negative marketing would be there that is a plus one for you guys so the registration link you will find in the description box of this video and one more thing uh freely you can register for this test there is no registration fee so now you can check out the link in the description box of this video and the relevant links and details all the details you will find in the description box of this video now let's see what are identity operators in Python so basically two identity operators are there is and is not right so they are used to compare the objects means if both the objects are actually same object or not and they share same memory location right so whatever I am saying that we'll discuss with them open example see if I am taking a is equal to 5 and B is equal to 5. right and if I print if I print I am using this is Unity operator a is B right so is means it will return true okay now let's see what it will print what it will return a is B it will return actually true now maybe you are thinking it is comparing the values because a is also 5 b is also 5 that is why it is true no I have told you they compare the objects because in Python is purely object or in your programming language so everything is considered as what you can say objects right and each object is having its memory address memory address or you can say they are having their unique object ID object ID object ID means nothing but that memory address of that object right now before proceeding to these things let me just tell you something about the memory location of these variables right so in Python whenever we write this thing so we have some memory would be allocated some memory address like we can say 1000 memory address of this is let's suppose thousand and here we have value 5 so this 5 is what considered as object and this is object ID or you can say memory address right and this a is just you can say name for this object or you can say tag or name right this is tag or you can say name now again I'm writing B is equal to 5. so in Python what will happen the memory manager basically reuse the object instead of creating new objects or instead of allocating new memory right for the same data and same you can say data type so here 5 5 is value is same right into data type so it will not allocate something like this like B 5 and memory address let us suppose two thousand no it will not create another object it will reuse these objects already created objects right because A and B these are just name of these objects so this B would also be linked to this object 5 and memory address would be same thousand so now this can be accessed with both the name A and B this is the case in Python I hope you got my point right so here what point you have to note the memory manager is in Python reuse the objects instead of creating new objects for the same data with same data type right for same data type so we are reusing same object so now here 1000 memory location for A and B both are same so what identity operator is comparing actually the memory address so memory address of a is thousand or memory address of b or you can say ID of this object is also thousand that is why it is returning true and if I write something like this print a equal to equal to B so this equality operator basically compares the equality basically it compares the values so a value is 5 b value is 5 that is why it will return to you so maybe you get confused like a is B is also to a equal to equal to B is also true so identity operator and assignment operator sorry this equality operator both are same but no the working is different if I write something like this print and see how you can check the ID of the objects we have a functioning python that is ID so just you will write ID and in bracket just pass the object for which you want to check the memory address or the object ID right so here I am passing a or you can pass 5 also 5 is what object this five object this is having uh memory address thousand so it will return object ID or you can say memory address both are same so this will return thousand let us suppose we are supposing that this is thousand but actually it is not thousand whenever we run this then I'll show you and if I print print ID B that will also return same so the idea of these objects are same means memory location of both the objects are same means actually these are same object that is why it is returning true so Edge will return true if both the objects are same or the memory address or the object ID of both the objects are same and it will return false if the memory address is not same or the objects are not same action that at that time it will return false is identity operator I hope you got this point right now if I write something like this a is 5 and B is 5. now it is a string you can say pick a string or a character you can say we write string in double quote or single quote so at this point of time it will create a is 5 the value the data is not same this time because it is string it is integer data type data type is different so at this point of time it will create another object here it will store 5 and maybe address is suppose two thousand right so this is the case at this point of time if you print a is B what it will print false at this point of time because the memory address of these objects are not same so it will return false I hope you got what is is operator and is not is what it is just what working of is not is what reverse of is here if I write is not is not b obviously we know a is not B because a is this 5 because memory address of a is this memory address of B is this both are different object right so is not b means yeah that is true so in this case it will return true it will return true is not will return true if both the objects are not same if memory location of both objects are not same and it will return false if both the objects are same so here if I write 5 and 5 and if I write yeah is not is not b but in this case it will not create another object because this is same data with same data type so obviously these are same and we are writing a is not b but that is not true because a is B both are same a is not B now it will return at this point of time it will return false I hope you got what is is and what is is not notes I'll put in the description box of this video you can check out these things right but you have to understand first the working of is an is node they actually compare the object ID is the memory location not the values let's see a real life example now let's see the difference between the stubble equal to n is identity operator right okay so let's suppose you and your friend or let's suppose me and my friend are having two glasses and in my glass I have banana shake and my friend is having mango Shield so if I compare like this banana shake and mango shake we are having two glasses these are glasses different different glasses right so if I compare equal to equal to banana shake mango shake these are equal because the values in these glasses are one is banana shake one is mango shake same as a is having five and B is having six these are values are not equal obviously so this will return false right if both me and my friend are having two glasses separate glasses but both are having banana shake then equality operator values are banana shake banana shake so it will return right just generally we are you know checking if it's not like that if in banana shake I am adding some cherry and his banana shake no Cherry so that is also right values are different but generally banana shake banana shake nothing else is in that banana shake right so it will return true but but if I write something like this banana shake is bana banana shake now what if you got the concept of is and is not you can answer this question so what it will return it will return false because values we are not checking the values we are in is it will check the object ID the memory address so we are having two different different glasses memory location of these banana shake are not same these are not within same glass different different glass so it will return Folds I hope now you got the difference between equality and is operator right but if me and my friend are sharing same glass we have one glass and we are sharing in that glass UI we are having banana shake and we are sharing the same glass right there are not two glasses only one glass is there at this point of time if I compare banana shake is banana shake then it will return to you because glass is same object is same the memory address is same right we are sharing the same glass there are no two glasses so at this point of time it will turn true and obviously at this point of time if I write equal to equal to definite it will turn true because we are having banana shake and banana shape right so if we are having one glass if I add cherry so obviously in my friends banana shake also there would be Cherry because we are having we are sharing same glass right so I hope now you got the difference between equality and identity operator so now if I write something like this like I am having a is equal to 5 b is equal to 5 and I am writing print ID a equal to equal to ID B yeah at this point of time you can say equality is some somewhat like is you know behaving in the same manner as is because in SVA basically compare the memory address on here here also we are comparing the same thing ID means it will give the memory address ID means it will give the memory address so we are comparing the liquidity for these I these addresses so this you can write or you can write like print a is B both lines are same I hope you got the difference between these two now and I hope you could what is is and what is is not operated so now let's see this with practically so let's create a new file for this and we are checking identity operators right dot p y the extension is dot p y right so here I'm just taking a is equal to suppose 5 and B is equal to also Phi and we are printing print K is B simple right let's run this so obviously it will return true why so because it's our same object right if you want to check then you can print the ID of these things print ID a and then print ID sorry B right so let's run this C ID of a object ID or memory addresses same as ID of B so these are same object obviously memory address is same so means these are actually same objects so a is be written true and is not will return is not well return in this case false right let's run this C is not well written Force okay because a is B so and we are checking a is we are saying a is not B but we know that a is B so that is why it will return false so it will run Force if both the objects are actually same if memory location of both the objects are same is not will return in that case false so now if if I write something like this is 5 we are writing the this is int this is string right now let's run this see you can check the ID of this ID of a this is idea of B both are different right both are different and a is B note a is not B now at this point of time these are different object so now it will return Force if I write here a is not b yeah it's true a is not B because these are different so now it will return true right I hope you got the working of these is and is not and see if I write something like this now a is B sorry a is equal to 5 and I am printing ID of a and again I am assigning a is equal to I'm uh changing the value to 6 and again I am printing ID of a right at this point of time let's just comment this out so maybe you are thinking first a is 5 and then we are assigning we are changing the value so ID would be same but no in Python it is not the case because this int is what immutable immutable object means mutable and immutable objects we are immutable means we cannot change the value of these if 1 is 5 we cannot change the value of same object at the same location to 6. for this it will create another memory address so these a and a are having different different memory address see now you can check this memory address is different from this right because hint is what like in float Bool these are immutable objects and list like list is what mutable object so I hope you know maybe if you don't know the difference between mutable and immutable object we will create a separate video for that but for now main purpose is you have to understand working of identity operators what is the entity operator is and is node when it will turn true when it will turn false and some difference between equality and identity operators right basically we use these operator like when we check some conditioning if blocks and if statements but that we haven't discussed right so that also will discuss and at that point of time we will use these operators identity operators right and if I write something like this a is equal to 5.0 right B is equal to this and ID of a ID of B and we are just checking at this point of time a is B right let's run this this point of time it will return false because these are not same object it is int it is float and ID is also different so one assignment for you is if I write something like this a is 5 then printing ID of a then again I'm writing a is equal to 8 and I'm printing ID of a or maybe you don't want to print it's up to you and a is a what do you think what output you will get true or false five and eight so this is for your assignment you have to let me know in comment section if a is a is true why you are getting true if a is a is false why you are getting false that also you have to tell me in comment section right so I hope you got what is identity operator and how this is different from equality operator the working of identity operator basically right so in the next video we'll see what are membership operators in Python so now we'll see in the next video till then bye take care
