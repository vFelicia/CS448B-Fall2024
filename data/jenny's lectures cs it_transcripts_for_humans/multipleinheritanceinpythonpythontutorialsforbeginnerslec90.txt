With timestamps:

00:00 - hey everyone I hope you all are safe and
00:02 - doing good so in the series of learning
00:03 - Python programming language we are
00:05 - discussing inheritance in Python in the
00:08 - previous video we have seen what does
00:10 - inheritance basically and why we need
00:12 - this concept why NATO inheritance what
00:15 - are you can say some benefits of using
00:18 - this concept right inheritance Concept
00:20 - in object oriented programming right
00:23 - that thing we have seen in the previous
00:25 - video with the proper example with the
00:27 - help of a program now we will discuss
00:30 - types of inheritance so there are single
00:33 - inheritance multiple inheritance
00:35 - multi-level inheritance hierarchical
00:38 - inheritance and Hybrid inheritance five
00:40 - types of inheritance right
00:42 - okay now whatever we have seen in the
00:45 - previous video that was single
00:46 - inheritance means one parent class
00:50 - and
00:52 - from there we derive one class which is
00:56 - child class so this is parent
00:59 - or you can say base class or you can say
01:01 - super class
01:03 - this is
01:04 - child class or you can say derived class
01:07 - or you can say subclass
01:08 - right
01:10 - so only one child class will inherit
01:12 - properties from one parent class so this
01:14 - is what single inheritance right this
01:17 - thing with proper example we have seen
01:19 - in the last video right now next is
01:22 - multiple inheritance now what if you
01:25 - want to inherit properties from two or
01:27 - more classes like we inherit properties
01:31 - from our mother and father as well
01:33 - so
01:35 - we are having two parent classes right
01:37 - so parent one and parent two
01:44 - from both the parent one child class
01:48 - means one child class should write class
01:51 - inherited properties from more than one
01:55 - parent classes that type of inheritance
01:57 - is known as multiple inheritance parent
02:00 - classes may be two three four five means
02:02 - more than one if one parent class one
02:05 - child class that is single inheritance
02:06 - if one child class but more than one
02:09 - parent class or base classes
02:11 - that is known as multiple inheritance
02:15 - I hope you got this
02:17 - property from our father and mother as
02:19 - well so we have two parent classes right
02:21 - so this is what multiple inheritance
02:23 - right
02:25 - or you can even like this is mother this
02:27 - is father and this is you
02:29 - fine
02:31 - now how this is different from the
02:33 - single inheritation why why multiple
02:35 - inheritance what is use of multiple
02:37 - inheritance right
02:39 - and now see if this this child class can
02:42 - access all the attributes and methods of
02:46 - all the parent classes
02:48 - for this from this parent class from
02:50 - this parent class as well right
02:52 - I hope now basic idea you got what is
02:54 - multiple linearities now let's see this
02:56 - with the help of one program okay so
02:58 - let's create a new file here and we are
03:01 - discussing multiple inheritance so
03:04 - multiple inheritance showed py right
03:07 - same class name we will take like in the
03:09 - previous video we have seen this class
03:12 - human and with class mail so let me just
03:16 - copy paste this thing
03:19 - and
03:21 - so in the previous case we were having
03:22 - like one human class and this made
03:25 - classes deriving from Human class so
03:27 - this is Base Class women and male is
03:29 - derived class or child class one Base
03:31 - Class and one side class then this is
03:34 - what single inheritance right this is
03:35 - the example of single inheritance right
03:37 - now we're assessing multiple inheritance
03:40 - so we will take example of where like we
03:42 - are having two base classes and one
03:44 - child class
03:45 - so Base Class will consider like human
03:47 - and male
03:49 - so let's remove this this male is not
03:52 - deriving from Human this is separate
03:54 - human class this is separate male class
03:57 - now let's define one more class
03:59 - okay let's delete these things and
04:03 - we are having one more class
04:07 - let's suppose we are having a class boy
04:08 - and boy will inherit both human and
04:11 - males so what is what is the syntax
04:14 - name of the classes separated with comma
04:19 - okay and make
04:21 - now this is deriving both the human
04:23 - class and Main class so now let's let's
04:25 - have a function
04:27 - in human class I am having simple
04:30 - function like that we have taken
04:32 - previous video and this is simple one I
04:34 - can
04:34 - eat
04:36 - in male class I am having one more
04:39 - function and that is
04:41 - flood
04:42 - right
04:49 - so one function sorry one method and one
04:53 - method right
04:55 - now this boy can inherit both this
04:58 - method and this method right let's see
05:01 - I'm not writing anything in this boy
05:03 - class let's write down just pass so now
05:07 - just create an object from this boy
05:10 - class like boy underscore one
05:12 - is equal to
05:14 - name of the class is boy
05:16 - and no need to pass anything now let's
05:19 - see with the help of this boy object
05:23 - you can access C eat method and load
05:27 - method eat method is from Human class
05:29 - and flirt is from male class
05:32 - right and in it obviously we are not
05:35 - having any in it so this is what that
05:37 - specifically for that object this object
05:40 - only
05:41 - so let's call this floor and let's run
05:44 - this so it will print I can plot
05:47 - like this if you are having more than
05:49 - one method in this more than one in this
05:52 - then all the methods it can inherit
05:54 - right
05:56 - okay
05:57 - let's see this example I am having like
06:01 - same method def
06:04 - work the same method I am having here
06:10 - but rather than work I'll
06:12 - I'll write here I can code so method
06:16 - name is same work and work but for women
06:18 - class the definition of this method is
06:20 - different I can work and mail class is
06:22 - having its own definition like I can
06:24 - code
06:25 - now the problem is
06:27 - I have told you it will access both the
06:29 - two method of human both these two
06:31 - methods of male means all the methods of
06:33 - both the classes right
06:35 - now work and work we are having same
06:37 - methods so in this case what will happen
06:38 - see
06:40 - let's see boy one don't
06:44 - now see flirt eat and only one work
06:47 - method and that is from Human class
06:50 - it is deriving it is not driving the
06:53 - work method from male class let's if you
06:56 - print work then it will print only I can
06:58 - work see I can work
07:01 - means
07:03 - this order in which order you are
07:05 - writing these base classes while
07:08 - creating your drive class that matters
07:11 - if I in the first order the first
07:13 - written class is women means if the
07:17 - method name is same in both the class is
07:19 - then it will access
07:21 - whatever class you have written at first
07:23 - from that parent class it will access
07:25 - that method
07:27 - right so it will not access it will not
07:29 - derive the work method of mail class
07:32 - if you want to
07:33 - now the problem is the question is
07:36 - if this question is biting you like if I
07:40 - want to print I want to call this work
07:43 - method
07:44 - then the solution is what
07:47 - means you you are having a creative mind
07:49 - good for you now the one one solution is
07:52 - first I can write mail and after that I
07:55 - can write human
07:57 - this class
08:00 - and now let's print this work method and
08:03 - see now it is printing I can code
08:05 - right from this
08:07 - but this is not a proper solution
08:10 - if you are having multiple I mean
08:12 - classes many methods so it's not like
08:15 - that every time we will change the order
08:17 - right so let's keep this order like this
08:20 - human and
08:21 - male now the solution is what
08:25 - I'll tell you
08:27 - first from which class you want to
08:29 - access that method so from mail class so
08:32 - just write down the name of the class
08:33 - then dot then name of the method work
08:38 - here I am having work and floor two
08:41 - methods so I want to access work but in
08:44 - bracket you need to pass on which object
08:47 - you want to call this method I want to
08:49 - call
08:50 - because I haven't created any object of
08:52 - mail class I want to call this method
08:54 - through object of this boy class the
08:57 - derived class so just in bracket pass
09:00 - the name of the object boy one let's run
09:03 - this
09:05 - okay let's uh comment out this thing now
09:08 - it will print icon code
09:10 - see
09:12 - although in the order mail is at second
09:14 - number but still we are accessing this
09:17 - work method from me
09:18 - from the second class
09:20 - so I hope you got the solution right
09:22 - answer this question
09:24 - now these are all about methods and see
09:28 - this boy can also have its own methods
09:30 - like I I am just defining a method one
09:34 - method I can sleep and same method
09:36 - same method work I am also defined here
09:41 - I can like test
09:44 - like testing Department coding
09:46 - department and testing department so
09:48 - testing is also important so I can test
09:50 - so now if you simply call with this boy
09:54 - this work method just comment out this
09:56 - line then what it will print see I can
09:59 - test
10:01 - so what is the order of polling the
10:03 - methods
10:05 - see which
10:07 - boy Dot and see walk from boy
10:12 - flirt from male sleep from boy eat from
10:16 - Human so this work from boy we can
10:18 - access
10:19 - using this this particular you can say
10:22 - notation using object name dot method
10:26 - name
10:26 - so
10:28 - okay although it is it is it can access
10:31 - this method in this work method also
10:34 - because obviously we are inheriting this
10:36 - these classes this is child class of
10:38 - these two parent classes
10:40 - so it can access all the methods of both
10:43 - the parent class but if you print
10:45 - something like this and Method name are
10:47 - same in all the three classes then what
10:48 - is the order
10:50 - first it will search for that method in
10:52 - its own class then the class which is at
10:56 - first order then the class which is at
10:58 - second order
10:59 - right so this kind of thing this
11:01 - ordering this is you know something
11:04 - known as mro here
11:06 - like method resolution order so mro is
11:10 - Method resolution order
11:13 - so if you want to check out this method
11:15 - resolution order for this boy class then
11:18 - we just simply write the class name boy
11:20 - Dot and you can see mro as you can see
11:23 - here mro it's a function as well as a
11:27 - field so either you can use this or you
11:29 - can use this I'm using the function
11:31 - right now let's run this
11:33 - and see
11:35 - okay it is a function you are calling so
11:37 - obviously you have to
11:39 - print
11:41 - you have to write down print statement
11:43 - here because whatever this function
11:46 - will return that obviously you need to
11:49 - print
11:50 - see I can test and the mro for this
11:53 - class is first class is main class that
11:56 - is boy so first it will search in boy
11:58 - class then it will search in human class
12:01 - then it will search in mail class so
12:03 - this is the Mr method resolution order
12:05 - for this boy class right and then if any
12:08 - object is created right so see this mro
12:12 - thing is very important in multiple
12:14 - inheritance so it's just a baby step so
12:17 - the basic just basic pair clearing so
12:19 - you need to know yeah there is some kind
12:21 - of thing mro and what is the same Arrow
12:23 - right I hope now you got the order right
12:26 - if you change your year mail and here
12:28 - human so the mro would be first boy
12:31 - class then male class and human class
12:33 - and then any object created
12:35 - so this is your quiz question you are
12:38 - having the work method only here in male
12:42 - class only I can code no work method in
12:44 - human no work method in boy and now if
12:47 - you access boy one don't work then what
12:49 - it will print just write down canceling
12:51 - this in comment section right now this
12:54 - is all about methods now we have
12:56 - attribute also okay
12:58 - okay let's define attributes so let's
13:00 - take any function and same we will take
13:05 - so in this I am having only two
13:06 - attributes and num nose and for male
13:10 - also I am having my own init function
13:12 - that Constructor sorry and here I am
13:15 - having self Dot
13:20 - suppose I am passing
13:22 - language or not language the same thing
13:25 - example the pre in producer we have
13:27 - taken this example suppose we are
13:28 - passing only name so as a parameter I am
13:30 - passing name right
13:34 - these attributes and these attributes
13:37 - obviously it will access all the
13:39 - attributes and methods of both the
13:40 - parent classes right let's see
13:43 - if you create something like this
13:46 - then
13:48 - and we are not printing this one we are
13:51 - just printing boy using this object dot
13:55 - see now you can access name numbers
13:59 - name from male Namaz from human and num
14:03 - nose from him right so if I want to
14:06 - print in a nose
14:08 - let's send this
14:11 - okay you need to print this
14:20 - see num noses one
14:23 - what if you want to print a name
14:30 - let's run this and see
14:33 - boy object has no attribute name here
14:37 - this boy object has no attribute name
14:40 - this is attribute tab but maybe now
14:43 - obviously you will say we have name
14:45 - attribute here in mail class and it is
14:47 - driving and it is you know driving all
14:50 - the attribute from both the parent class
14:52 - so why the seller you are getting
14:55 - the problem is
14:57 - now when this object would be created
15:00 - you know if you have the skin it
15:03 - function so this init function would be
15:04 - cold every time you create an object
15:06 - right
15:07 - now which init function would be called
15:10 - human init function or male indeed
15:13 - function
15:14 - I don't know if you want to check out
15:16 - then let's just print here
15:22 - calling in it from Human calling in it
15:24 - from male in the Senate and in this
15:27 - Senate let's run this
15:28 - and first let's just print here
15:32 - just number of nodes
15:36 - see calling in it from human and one
15:41 - only one init function it will call and
15:44 - that is from Human class obviously the
15:46 - same rule that in methods calling has
15:49 - been applied at first number we are
15:51 - having human so it will call it will
15:53 - search where is the init function
15:55 - in boy do you have any function no then
15:57 - it will search in human do you have any
15:59 - Constructor yes you have so it will call
16:02 - this Constructor it will not call from
16:03 - mail
16:05 - so only this it is calling that is why
16:08 - the name attribute it is giving that
16:10 - this error
16:11 - now if you want to go like both the
16:14 - Constructor or if you want to call the
16:15 - Constructor from mail
16:17 - then
16:18 - the solution is
16:21 - here you need to specify
16:24 - so
16:25 - first
16:27 - let's define the init function for cell
16:30 - and here you need to specify which init
16:34 - function you need to call I want to call
16:36 - from mail
16:37 - so see there are no
16:39 - many number of ways to do this kind of
16:41 - thing but this is the simplest one I'm
16:43 - telling you
16:45 - the name of the class mail Dot
16:48 - init function
16:50 - and here what you are passing
16:54 - name attribute right
16:56 - so you need to pass here self comma name
17:03 - right
17:04 - because here we are having only one
17:06 - attribute name so one parameter name
17:09 - name you need to pass and if you are
17:10 - passing here one obviously then same
17:14 - name you need to pass here one parameter
17:17 - this and this name should be same right
17:20 - this can be different
17:22 - but it it show that you it only show
17:25 - that you need to pass one parameter so
17:27 - this here in this unit function and
17:29 - within this unit I am calling from male
17:31 - unit function name right now it will
17:33 - call from Main but it will give error
17:36 - this point of time y so C
17:39 - line number 28 boy one you are creating
17:42 - this object type error boy dot in it
17:45 - missing one required positional argument
17:46 - that is name
17:47 - so in line number 28 here
17:50 - we are calling here so you need to pass
17:52 - name here so let's pass this name and
17:57 - let's pass Rahul
17:59 - run this
18:02 - now boy object has no attribute
18:04 - num nose see you're printing num nose
18:07 - but boy has no attribute num nose why so
18:10 - pick is
18:12 - this num nose in is in this
18:15 - Constructor from Human but we are
18:17 - calling Constructor from male only
18:19 - that is why these attribute
18:22 - are not this these attributes
18:25 - this will be better like if you using
18:27 - this you will call the attribute for
18:29 - human class and this will give time this
18:31 - error attribute error right
18:34 - so
18:35 - now the problem is
18:38 - I want these attribute as well as
18:40 - name attribute so it's okay you can call
18:45 - from
18:47 - both the classes
18:49 - I mean the Constructor from both the
18:51 - class is human Dot
18:53 - in it
18:54 - and self comma if you have any parameter
18:57 - here
18:58 - no parameter we are passing here so
19:00 - nothing you need to pass
19:03 - now let's run this scene calling in it
19:06 - from Human then calling it from male and
19:08 - number of nodes one now this time we are
19:11 - calling both the Constructor
19:13 - they send this
19:14 - so this is the simplest way you can call
19:16 - both the Constructor if you don't write
19:17 - anything then by default at first what
19:20 - you will write from that if you don't
19:22 - Define your own Constructor here
19:25 - you know init functioning Drive class
19:27 - then it will call from the first class
19:29 - first parent class right
19:31 - now one question for you is if in self I
19:35 - am passing same thing
19:39 - one parameter
19:40 - numb heart right and here we are just
19:47 - taking one more attribute numb heart
19:50 - right
19:51 - and
19:53 - here in this init
19:56 - I want it should have it you know in in
19:59 - this it should have its own parameter
20:01 - language
20:03 - means
20:06 - language means C C plus plus any
20:08 - language you can pass
20:10 - now let's
20:12 - update this thing
20:15 - let's first of all run this thing and
20:17 - see what error you will get and let's
20:18 - correct that error right why you are
20:22 - getting that error and what you need to
20:24 - write down where you need to update
20:27 - so just pause the video and try this
20:29 - code
20:30 - okay let's run this first and see the
20:32 - error
20:33 - in line number 27 where you are calling
20:35 - this creating creating the object then
20:37 - boy wrote in it missing one required
20:38 - positional argument that is language
20:40 - first tense type error is this in line
20:44 - number 27. in line number 27
20:48 - so obviously rakul we are passing only
20:50 - one parameter but here name as well as
20:52 - language so let's pass language two
20:55 - language I'm passing suppose python
20:58 - okay let's run this
21:01 - still there is error see
21:04 - in line number 27 we are creating this
21:07 - object line number 21 when you are
21:09 - calling this init function the init
21:11 - Constructor from Human then this human
21:13 - unit missing one required positional
21:15 - argument that is numb heart yeah that is
21:17 - also fine because we have updated this
21:20 - in it now this point of time it will
21:22 - accept one more parameter so while
21:24 - calling here human init you have to
21:27 - pass one more parameter any name you can
21:29 - take I am taking only heart
21:32 - right
21:33 - maybe you think it's right but still you
21:35 - will get an error see
21:37 - now name heart is not defined name error
21:40 - in line number 21
21:42 - here third
21:44 - okay maybe you think
21:46 - its name should be numb heart
21:49 - okay
21:51 - num heart find
21:53 - let's run
21:55 - still name num heart is not defined
21:58 - in the same line
22:00 - and why you are getting this error in
22:02 - line number
22:03 - 21 num heart is not defined because
22:06 - we are calling this Constructor here in
22:08 - boy class so in boy class also we have
22:10 - init functions so here also you have
22:13 - name as well as
22:17 - suppose I am taking
22:19 - heart
22:21 - heart
22:23 - its own language because see
22:25 - from this in it
22:27 - name it will derive from this and it
22:30 - hard it will dry so in its own in it
22:34 - obviously two parameter name should be
22:36 - there
22:37 - right to fetch the value of name and
22:39 - heart number of heart
22:41 - that is why it is giving an error and
22:44 - language
22:45 - it is having its own parameter language
22:47 - many parameters can have its own life
22:50 - right but whatever parameter in the
22:53 - parent classes you are having in the
22:54 - Senate Constructor you have to write
22:56 - down those parameter name also
22:58 - note
22:59 - not you know couple say that the name
23:01 - should be same exactly same but number
23:04 - of parameters should be same
23:07 - so I'm just calling here hard and here
23:09 - same name you need to pass
23:12 - heart
23:13 - right this time you will not get any
23:16 - error
23:17 - okay while calling you are getting a
23:19 - better while calling at line number 27
23:21 - missing one required position argument
23:24 - which is language
23:25 - in line number 27 27 okay now it is
23:30 - it is accepting expecting name heart and
23:33 - language three parameter and you are
23:35 - passing only Rahul and python so Rahul
23:37 - for name python for heart and for
23:39 - language
23:41 - you don't know so Rahul then heart
23:44 - number of heart you should pass one if
23:46 - you are passing on the positional
23:48 - argument not keyword argument
23:50 - python now if you print
24:04 - from Human
24:07 - right
24:08 - so dot and suppose I want to print
24:13 - number five
24:14 - let's run this
24:16 - calling from Human class calling from
24:19 - mail class one one
24:21 - number of knows number of heart one one
24:23 - both are one one okay
24:26 - language if you want to print in that
24:28 - case obviously first you need to
24:31 - create its own attribute
24:34 - [Applause]
24:36 - language is equal to language
24:39 - self dot language is equal to this
24:41 - language obviously you have to Define
24:43 - this attribute here in this init
24:45 - function
24:46 - right because language is
24:49 - attribute is
24:51 - its own of boy class name and heart are
24:54 - from parent classes right now you can
24:57 - access
24:58 - this language this attribute as well
25:02 - boy one dot language
25:05 - and see it will print
25:07 - 1 1 and python
25:09 - right
25:11 - so I hope you go to this thing and if in
25:13 - boy like if you want to Define your own
25:14 - method
25:16 - this is for your assignment let's
25:18 - Define a method display and here it
25:20 - should print hi I am the name
25:24 - and I work on the language you pass
25:27 - right and you have to call this display
25:29 - function right this is for your
25:31 - assignment now pause the video and try
25:33 - this out
25:35 - so I hope you have done this see how you
25:37 - can print hi I am from where you can
25:40 - fetch the name from name attribute right
25:43 - self-load name
25:45 - and
25:46 - I
25:48 - work
25:50 - I work on
25:52 - self Dot language
25:55 - whatever language you you will call so
25:57 - let's just
25:59 - call this function using this
26:01 - boy one boy one load display
26:05 - okay let's comment out these three line
26:07 - first
26:09 - let's run this and see
26:11 - calling from Human calling from both the
26:13 - constructive we are calling hi I'm Rahul
26:15 - and I work on python
26:16 - none
26:18 - okay you are printing this that is why
26:20 - it is printing none because displays
26:22 - display function is not returning
26:23 - anything it's just printing right and if
26:25 - you print then it will obviously every
26:28 - function is going to return something so
26:30 - if you don't write any return statement
26:31 - then it will return none that is why it
26:33 - was printing none so let's run this and
26:35 - say hi I'm Rahul and I work on python
26:37 - right so this is like the concept of
26:40 - multiple inheritance
26:42 - have you can access
26:44 - attributes and methods from the parent
26:46 - classes and if both two parent classes
26:50 - are having same attribute or same method
26:52 - name then how you can access that
26:54 - particular method right just give that I
26:57 - have told you the class name if you want
27:00 - to access the work method from mail then
27:02 - class name dot the method name and
27:04 - bracket just pass the Drive class object
27:07 - right that's it and I hope you also have
27:09 - some idea of mro method resolution order
27:11 - function that is very important because
27:13 - you will get this type of error many
27:15 - time when you deal in multiple
27:16 - inheritance or Hybrid inheritance or
27:18 - multi-level inheritance this kind of
27:20 - inheritance right so then you will get
27:22 - error regarding to that mro so you need
27:25 - to understand what is mro and how this
27:27 - works right you need to understand
27:29 - the order in which the derived class is
27:32 - calling
27:33 - the methods and attributes from base
27:35 - classes if there are more than one base
27:37 - classes right okay so now in the next
27:39 - video we'll see multi-level inheritance
27:42 - so now we'll see in the next video till
27:43 - then bye take care

Cleaned transcript:

hey everyone I hope you all are safe and doing good so in the series of learning Python programming language we are discussing inheritance in Python in the previous video we have seen what does inheritance basically and why we need this concept why NATO inheritance what are you can say some benefits of using this concept right inheritance Concept in object oriented programming right that thing we have seen in the previous video with the proper example with the help of a program now we will discuss types of inheritance so there are single inheritance multiple inheritance multilevel inheritance hierarchical inheritance and Hybrid inheritance five types of inheritance right okay now whatever we have seen in the previous video that was single inheritance means one parent class and from there we derive one class which is child class so this is parent or you can say base class or you can say super class this is child class or you can say derived class or you can say subclass right so only one child class will inherit properties from one parent class so this is what single inheritance right this thing with proper example we have seen in the last video right now next is multiple inheritance now what if you want to inherit properties from two or more classes like we inherit properties from our mother and father as well so we are having two parent classes right so parent one and parent two from both the parent one child class means one child class should write class inherited properties from more than one parent classes that type of inheritance is known as multiple inheritance parent classes may be two three four five means more than one if one parent class one child class that is single inheritance if one child class but more than one parent class or base classes that is known as multiple inheritance I hope you got this property from our father and mother as well so we have two parent classes right so this is what multiple inheritance right or you can even like this is mother this is father and this is you fine now how this is different from the single inheritation why why multiple inheritance what is use of multiple inheritance right and now see if this this child class can access all the attributes and methods of all the parent classes for this from this parent class from this parent class as well right I hope now basic idea you got what is multiple linearities now let's see this with the help of one program okay so let's create a new file here and we are discussing multiple inheritance so multiple inheritance showed py right same class name we will take like in the previous video we have seen this class human and with class mail so let me just copy paste this thing and so in the previous case we were having like one human class and this made classes deriving from Human class so this is Base Class women and male is derived class or child class one Base Class and one side class then this is what single inheritance right this is the example of single inheritance right now we're assessing multiple inheritance so we will take example of where like we are having two base classes and one child class so Base Class will consider like human and male so let's remove this this male is not deriving from Human this is separate human class this is separate male class now let's define one more class okay let's delete these things and we are having one more class let's suppose we are having a class boy and boy will inherit both human and males so what is what is the syntax name of the classes separated with comma okay and make now this is deriving both the human class and Main class so now let's let's have a function in human class I am having simple function like that we have taken previous video and this is simple one I can eat in male class I am having one more function and that is flood right so one function sorry one method and one method right now this boy can inherit both this method and this method right let's see I'm not writing anything in this boy class let's write down just pass so now just create an object from this boy class like boy underscore one is equal to name of the class is boy and no need to pass anything now let's see with the help of this boy object you can access C eat method and load method eat method is from Human class and flirt is from male class right and in it obviously we are not having any in it so this is what that specifically for that object this object only so let's call this floor and let's run this so it will print I can plot like this if you are having more than one method in this more than one in this then all the methods it can inherit right okay let's see this example I am having like same method def work the same method I am having here but rather than work I'll I'll write here I can code so method name is same work and work but for women class the definition of this method is different I can work and mail class is having its own definition like I can code now the problem is I have told you it will access both the two method of human both these two methods of male means all the methods of both the classes right now work and work we are having same methods so in this case what will happen see let's see boy one don't now see flirt eat and only one work method and that is from Human class it is deriving it is not driving the work method from male class let's if you print work then it will print only I can work see I can work means this order in which order you are writing these base classes while creating your drive class that matters if I in the first order the first written class is women means if the method name is same in both the class is then it will access whatever class you have written at first from that parent class it will access that method right so it will not access it will not derive the work method of mail class if you want to now the problem is the question is if this question is biting you like if I want to print I want to call this work method then the solution is what means you you are having a creative mind good for you now the one one solution is first I can write mail and after that I can write human this class and now let's print this work method and see now it is printing I can code right from this but this is not a proper solution if you are having multiple I mean classes many methods so it's not like that every time we will change the order right so let's keep this order like this human and male now the solution is what I'll tell you first from which class you want to access that method so from mail class so just write down the name of the class then dot then name of the method work here I am having work and floor two methods so I want to access work but in bracket you need to pass on which object you want to call this method I want to call because I haven't created any object of mail class I want to call this method through object of this boy class the derived class so just in bracket pass the name of the object boy one let's run this okay let's uh comment out this thing now it will print icon code see although in the order mail is at second number but still we are accessing this work method from me from the second class so I hope you got the solution right answer this question now these are all about methods and see this boy can also have its own methods like I I am just defining a method one method I can sleep and same method same method work I am also defined here I can like test like testing Department coding department and testing department so testing is also important so I can test so now if you simply call with this boy this work method just comment out this line then what it will print see I can test so what is the order of polling the methods see which boy Dot and see walk from boy flirt from male sleep from boy eat from Human so this work from boy we can access using this this particular you can say notation using object name dot method name so okay although it is it is it can access this method in this work method also because obviously we are inheriting this these classes this is child class of these two parent classes so it can access all the methods of both the parent class but if you print something like this and Method name are same in all the three classes then what is the order first it will search for that method in its own class then the class which is at first order then the class which is at second order right so this kind of thing this ordering this is you know something known as mro here like method resolution order so mro is Method resolution order so if you want to check out this method resolution order for this boy class then we just simply write the class name boy Dot and you can see mro as you can see here mro it's a function as well as a field so either you can use this or you can use this I'm using the function right now let's run this and see okay it is a function you are calling so obviously you have to print you have to write down print statement here because whatever this function will return that obviously you need to print see I can test and the mro for this class is first class is main class that is boy so first it will search in boy class then it will search in human class then it will search in mail class so this is the Mr method resolution order for this boy class right and then if any object is created right so see this mro thing is very important in multiple inheritance so it's just a baby step so the basic just basic pair clearing so you need to know yeah there is some kind of thing mro and what is the same Arrow right I hope now you got the order right if you change your year mail and here human so the mro would be first boy class then male class and human class and then any object created so this is your quiz question you are having the work method only here in male class only I can code no work method in human no work method in boy and now if you access boy one don't work then what it will print just write down canceling this in comment section right now this is all about methods now we have attribute also okay okay let's define attributes so let's take any function and same we will take so in this I am having only two attributes and num nose and for male also I am having my own init function that Constructor sorry and here I am having self Dot suppose I am passing language or not language the same thing example the pre in producer we have taken this example suppose we are passing only name so as a parameter I am passing name right these attributes and these attributes obviously it will access all the attributes and methods of both the parent classes right let's see if you create something like this then and we are not printing this one we are just printing boy using this object dot see now you can access name numbers name from male Namaz from human and num nose from him right so if I want to print in a nose let's send this okay you need to print this see num noses one what if you want to print a name let's run this and see boy object has no attribute name here this boy object has no attribute name this is attribute tab but maybe now obviously you will say we have name attribute here in mail class and it is driving and it is you know driving all the attribute from both the parent class so why the seller you are getting the problem is now when this object would be created you know if you have the skin it function so this init function would be cold every time you create an object right now which init function would be called human init function or male indeed function I don't know if you want to check out then let's just print here calling in it from Human calling in it from male in the Senate and in this Senate let's run this and first let's just print here just number of nodes see calling in it from human and one only one init function it will call and that is from Human class obviously the same rule that in methods calling has been applied at first number we are having human so it will call it will search where is the init function in boy do you have any function no then it will search in human do you have any Constructor yes you have so it will call this Constructor it will not call from mail so only this it is calling that is why the name attribute it is giving that this error now if you want to go like both the Constructor or if you want to call the Constructor from mail then the solution is here you need to specify so first let's define the init function for cell and here you need to specify which init function you need to call I want to call from mail so see there are no many number of ways to do this kind of thing but this is the simplest one I'm telling you the name of the class mail Dot init function and here what you are passing name attribute right so you need to pass here self comma name right because here we are having only one attribute name so one parameter name name you need to pass and if you are passing here one obviously then same name you need to pass here one parameter this and this name should be same right this can be different but it it show that you it only show that you need to pass one parameter so this here in this unit function and within this unit I am calling from male unit function name right now it will call from Main but it will give error this point of time y so C line number 28 boy one you are creating this object type error boy dot in it missing one required positional argument that is name so in line number 28 here we are calling here so you need to pass name here so let's pass this name and let's pass Rahul run this now boy object has no attribute num nose see you're printing num nose but boy has no attribute num nose why so pick is this num nose in is in this Constructor from Human but we are calling Constructor from male only that is why these attribute are not this these attributes this will be better like if you using this you will call the attribute for human class and this will give time this error attribute error right so now the problem is I want these attribute as well as name attribute so it's okay you can call from both the classes I mean the Constructor from both the class is human Dot in it and self comma if you have any parameter here no parameter we are passing here so nothing you need to pass now let's run this scene calling in it from Human then calling it from male and number of nodes one now this time we are calling both the Constructor they send this so this is the simplest way you can call both the Constructor if you don't write anything then by default at first what you will write from that if you don't Define your own Constructor here you know init functioning Drive class then it will call from the first class first parent class right now one question for you is if in self I am passing same thing one parameter numb heart right and here we are just taking one more attribute numb heart right and here in this init I want it should have it you know in in this it should have its own parameter language means language means C C plus plus any language you can pass now let's update this thing let's first of all run this thing and see what error you will get and let's correct that error right why you are getting that error and what you need to write down where you need to update so just pause the video and try this code okay let's run this first and see the error in line number 27 where you are calling this creating creating the object then boy wrote in it missing one required positional argument that is language first tense type error is this in line number 27. in line number 27 so obviously rakul we are passing only one parameter but here name as well as language so let's pass language two language I'm passing suppose python okay let's run this still there is error see in line number 27 we are creating this object line number 21 when you are calling this init function the init Constructor from Human then this human unit missing one required positional argument that is numb heart yeah that is also fine because we have updated this in it now this point of time it will accept one more parameter so while calling here human init you have to pass one more parameter any name you can take I am taking only heart right maybe you think it's right but still you will get an error see now name heart is not defined name error in line number 21 here third okay maybe you think its name should be numb heart okay num heart find let's run still name num heart is not defined in the same line and why you are getting this error in line number 21 num heart is not defined because we are calling this Constructor here in boy class so in boy class also we have init functions so here also you have name as well as suppose I am taking heart heart its own language because see from this in it name it will derive from this and it hard it will dry so in its own in it obviously two parameter name should be there right to fetch the value of name and heart number of heart that is why it is giving an error and language it is having its own parameter language many parameters can have its own life right but whatever parameter in the parent classes you are having in the Senate Constructor you have to write down those parameter name also note not you know couple say that the name should be same exactly same but number of parameters should be same so I'm just calling here hard and here same name you need to pass heart right this time you will not get any error okay while calling you are getting a better while calling at line number 27 missing one required position argument which is language in line number 27 27 okay now it is it is accepting expecting name heart and language three parameter and you are passing only Rahul and python so Rahul for name python for heart and for language you don't know so Rahul then heart number of heart you should pass one if you are passing on the positional argument not keyword argument python now if you print from Human right so dot and suppose I want to print number five let's run this calling from Human class calling from mail class one one number of knows number of heart one one both are one one okay language if you want to print in that case obviously first you need to create its own attribute language is equal to language self dot language is equal to this language obviously you have to Define this attribute here in this init function right because language is attribute is its own of boy class name and heart are from parent classes right now you can access this language this attribute as well boy one dot language and see it will print 1 1 and python right so I hope you go to this thing and if in boy like if you want to Define your own method this is for your assignment let's Define a method display and here it should print hi I am the name and I work on the language you pass right and you have to call this display function right this is for your assignment now pause the video and try this out so I hope you have done this see how you can print hi I am from where you can fetch the name from name attribute right selfload name and I work I work on self Dot language whatever language you you will call so let's just call this function using this boy one boy one load display okay let's comment out these three line first let's run this and see calling from Human calling from both the constructive we are calling hi I'm Rahul and I work on python none okay you are printing this that is why it is printing none because displays display function is not returning anything it's just printing right and if you print then it will obviously every function is going to return something so if you don't write any return statement then it will return none that is why it was printing none so let's run this and say hi I'm Rahul and I work on python right so this is like the concept of multiple inheritance have you can access attributes and methods from the parent classes and if both two parent classes are having same attribute or same method name then how you can access that particular method right just give that I have told you the class name if you want to access the work method from mail then class name dot the method name and bracket just pass the Drive class object right that's it and I hope you also have some idea of mro method resolution order function that is very important because you will get this type of error many time when you deal in multiple inheritance or Hybrid inheritance or multilevel inheritance this kind of inheritance right so then you will get error regarding to that mro so you need to understand what is mro and how this works right you need to understand the order in which the derived class is calling the methods and attributes from base classes if there are more than one base classes right okay so now in the next video we'll see multilevel inheritance so now we'll see in the next video till then bye take care
