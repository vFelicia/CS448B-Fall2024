With timestamps:

00:01 - hi guys welcome back today I am going to
00:03 - discuss with here with you how to
00:05 - represent a graph in computer I'm going
00:07 - to discuss with you the most popular two
00:09 - methods for representing a graph in
00:12 - computer ok the two methods are first
00:15 - one is at the sensing matrix and second
00:18 - one is at the sensei
00:19 - list first one yields this matrix and
00:28 - second one is at this NC list these are
00:36 - the most popular two methods okay
00:39 - although we have more method that is I
00:42 - guess multi list is also there but I am
00:44 - going to discuss with you these two
00:45 - methods adjacency matrix and Addison C
00:47 - list now how to represent a graph in
00:51 - computer see this is the pictorial view
00:53 - you can easily draw a graph on this
00:56 - whiteboard like this but when you are
00:58 - going to represent a graph in computer
01:00 - then you have to use something okay you
01:03 - have to use some methods to represent
01:04 - this graph in computer so these are two
01:07 - methods then one is matrix and one is
01:09 - list first one is I am going to discuss
01:11 - with you this this method
01:14 - Edison C matrix so matrix is simply in
01:19 - mathematics you know matrix is what M
01:21 - cross n where m is the number of rows
01:24 - and n is number of column something like
01:27 - this number of rows and number of
01:28 - columns so in this case let us take this
01:35 - example this one is our graph and you
01:37 - are supposed to represent this graph
01:39 - using this adjacency matrix then how you
01:42 - will represent it this adjacency matrix
01:44 - would be n cross n matrix and where n is
01:47 - what number of vertices in the graph
01:50 - okay now how you will represent it this
01:54 - one is our matrix there should be n
01:58 - cross n matrix where n is what number of
02:02 - vertices how many number of vertices 1 2
02:05 - 3 4 5 then 1 2 3 4 5 number of rows
02:10 - would be there and
02:13 - five number of columns would be there
02:15 - this one should be 5 cross 5 matrix now
02:20 - we are supposed to fill out these
02:21 - entries now see 1 2 1 is there any loop
02:26 - is there any loop in this graph loop
02:29 - means the edge would start from the same
02:32 - node and would add end on the same node
02:35 - like this this would be a loop if you
02:39 - have say check out you have any loop in
02:43 - this graph no you don't have any loop
02:45 - that's why the diagonal elements would
02:47 - be 0 3 2 2 3 4 2 4 there is no edge and
02:52 - 5 2 5 no edge okay now check out 1 2 2 1
02:57 - 2 2
02:58 - obviously it is undirected graph ok so
03:02 - this edge would be considered as 1 to 2
03:04 - also and 2 to 1 also okay one two - yes
03:09 - we have edge between 1 to 2 then you can
03:12 - write down 1 1 2 3 no we don't have any
03:15 - edge direct edges between 1 2 3 that way
03:18 - that's why it is 0 1 2 4 yes we have 1 2
03:22 - 4 we have an edge 1 2 5
03:24 - no we don't have now 2 2 1 2 2 and yes
03:29 - we have because this edge is what
03:30 - undirected edge so this is also
03:32 - considered from 1 to 2 and 2 to 1 by 2 2
03:38 - 3 2 2 3 yes we have 2 to 4 yes we have 2
03:43 - to 5 no we don't have any direct or any
03:46 - edge between 2 to 5 3 2 1 you have 3 2 1
03:50 - no we don't ow 3 to 2 yes we have 3 2 to
03:54 - see this one three to three no three to
03:57 - four yes we have three to five yes now
04:02 - four to one
04:03 - yes for two - yes this one for two three
04:08 - yes four to five yes five to one no five
04:14 - to two no five to three
04:17 - yes we have and five to four yes we have
04:20 - fine
04:22 - so you can simply write down like this
04:25 - okay now you
04:27 - simply write down the definition of this
04:28 - addition C matrix is what it is a matrix
04:31 - you can say a n cross n we are
04:33 - representing the matrix with a and n
04:36 - where n is the number of vertices n
04:38 - would be the number of rows and n will
04:40 - be the number of columns and how you
04:42 - will fill these entries a of I J this
04:46 - one is J is equal to 1 if I and J are at
04:51 - this end ok see suppose this one is I
04:56 - and this one is J let us take this one
04:59 - is I we are taking and this one is J so
05:05 - you write down a of IJ 1 if I and J are
05:08 - at the st. 1 and 2 are adjacent to each
05:11 - other that is why we are taking 1 2 2 is
05:14 - 1 a of IJ that is a of I 1 and J is
05:18 - suppose to this one is 1 and I 2 and J
05:23 - is equal to 1 this one is also 1 okay
05:26 - otherwise you we would write here 0 all
05:30 - right now next we'll discuss what is
05:33 - adjacent see list see
05:48 - now this would be as the name suggests
05:52 - we will have we are going to have linked
05:54 - lists fine
05:56 - and how many linked list would be there
05:58 - for each what takes one linked list
06:02 - would be maintained like this in this
06:06 - case we are having how many vertices
06:09 - five I guess 1 2 3 4 5 1 2 3 4 5 number
06:16 - of vertices are there fine for each what
06:19 - takes one linked list would be there in
06:21 - that linked list will have will contain
06:24 - the adjacent node to this node fine like
06:32 - this see
06:39 - now suppose will be a first one is what
06:43 - is number of node is one how many at the
06:45 - center node are there two one one is two
06:48 - and one is four then one linked list
06:51 - would be maintained containing two and
06:56 - four now come to the second note this
07:01 - one second how many addition node are
07:04 - there one three and four this would be
07:08 - one three and four now for three also
07:16 - one linked list would be there and it
07:18 - would contain how many number of
07:19 - adjacent to node are there two three one
07:22 - is to one is four and one is five one is
07:26 - to one is four and one is five four four
07:33 - also we have one now we have what two we
07:39 - have what three and five see one two
07:45 - three and five and four five we have
07:48 - what three and four only three and this
07:53 - one is for how many linked lists would
07:56 - we maintain one two three and four and
07:58 - five how many number of vertices 1 2 3
08:01 - and
08:02 - or four and five the number of vertices
08:04 - total number of vertices in the graph
08:06 - with Linea po maintain Kenyan number of
08:08 - linked list for each node fine now this
08:13 - is the adjacency list using this list
08:16 - you can a present this graph and this is
08:18 - how you can represent this graph using
08:20 - addition C matrix now when you're
08:24 - supposed to calculate the time
08:25 - complexity
08:26 - now when you represent a graph using
08:29 - this method adjacency matrix then what
08:31 - would be the time complexity order
08:33 - you're sorry you can say the space
08:34 - complexity space complexity would be
08:40 - theta n square in this case right
08:45 - because mat this is matrix n number of
08:47 - rows and n number of columns the space
08:50 - complexity is what n square here it is
08:53 - there C five into five matrix v square
08:56 - five is what number of vertices that is
08:58 - and where n is what number of vertices
09:00 - and for representing a graph using this
09:04 - a distance a list the space complexity
09:07 - would be theta n plus 2 e C and 1 2 3 4
09:16 - 5 these are number of what what s is why
09:20 - we have written this plus 2 e because
09:24 - the one you happy there Co see this one
09:26 - is one edge from one to two fine but you
09:30 - have written this edge two times in this
09:33 - list two times went from 1 2 to one edge
09:40 - you have written and from two to one
09:43 - also from two to one also so two times
09:46 - we have written this edge in this list
09:50 - same you can say with you can say take
09:53 - one to four this one is one edge but you
09:55 - have written this two times one to four
09:58 - fine because 4 is adjacent to one so we
10:02 - have written in this linked list also
10:04 - plus 4 to 1 also four to one like this
10:08 - so every Edge has been written two times
10:11 - that's why we have written here n plus 2
10:14 - we the space complex
10:15 - that is this one for Addison see a nest
10:17 - and this one is theta n square for
10:19 - Addison when you represent this graph
10:22 - any graph using a distance e matrix so
10:26 - see it would be better to use this
10:32 - adjacency matrix to represent a graph
10:35 - when the graph is dense graph sometimes
10:39 - they can ask you this type of question
10:44 - in case of dense graph it's better to
10:47 - use adjacency matrix to represent that
10:50 - graph and when the graph is sparse
10:55 - sparse graph then it would be better to
10:58 - use this what adjacency list because see
11:04 - when a dense graph means almost or you
11:08 - can say each node is connected with each
11:11 - other node you can say you can take
11:13 - example of a complete graph like this
11:16 - suppose we have four nodes and every
11:20 - node is connected with every node and
11:22 - five nodes every node is connected with
11:25 - every other node like this then in that
11:29 - case it is better to use this matrix
11:31 - okay and when something like this one a
11:35 - very few number of edges are there
11:38 - between these vertices then better to
11:41 - use this adjacency list and this is the
11:44 - space complexity for representing these
11:47 - graph ok so that's all about you know
11:52 - some you can say the basics of how to
11:54 - represent a graph in computer these are
11:56 - the most popular methods I am NOT saying
11:59 - that these are the only two methods to
12:01 - represent a graph but I am just I have
12:03 - just discussed the most popular methods
12:05 - to represent this graph okay so I'll see
12:09 - you in the next video till then bye-bye
12:10 - take care

Cleaned transcript:

hi guys welcome back today I am going to discuss with here with you how to represent a graph in computer I'm going to discuss with you the most popular two methods for representing a graph in computer ok the two methods are first one is at the sensing matrix and second one is at the sensei list first one yields this matrix and second one is at this NC list these are the most popular two methods okay although we have more method that is I guess multi list is also there but I am going to discuss with you these two methods adjacency matrix and Addison C list now how to represent a graph in computer see this is the pictorial view you can easily draw a graph on this whiteboard like this but when you are going to represent a graph in computer then you have to use something okay you have to use some methods to represent this graph in computer so these are two methods then one is matrix and one is list first one is I am going to discuss with you this this method Edison C matrix so matrix is simply in mathematics you know matrix is what M cross n where m is the number of rows and n is number of column something like this number of rows and number of columns so in this case let us take this example this one is our graph and you are supposed to represent this graph using this adjacency matrix then how you will represent it this adjacency matrix would be n cross n matrix and where n is what number of vertices in the graph okay now how you will represent it this one is our matrix there should be n cross n matrix where n is what number of vertices how many number of vertices 1 2 3 4 5 then 1 2 3 4 5 number of rows would be there and five number of columns would be there this one should be 5 cross 5 matrix now we are supposed to fill out these entries now see 1 2 1 is there any loop is there any loop in this graph loop means the edge would start from the same node and would add end on the same node like this this would be a loop if you have say check out you have any loop in this graph no you don't have any loop that's why the diagonal elements would be 0 3 2 2 3 4 2 4 there is no edge and 5 2 5 no edge okay now check out 1 2 2 1 2 2 obviously it is undirected graph ok so this edge would be considered as 1 to 2 also and 2 to 1 also okay one two yes we have edge between 1 to 2 then you can write down 1 1 2 3 no we don't have any edge direct edges between 1 2 3 that way that's why it is 0 1 2 4 yes we have 1 2 4 we have an edge 1 2 5 no we don't have now 2 2 1 2 2 and yes we have because this edge is what undirected edge so this is also considered from 1 to 2 and 2 to 1 by 2 2 3 2 2 3 yes we have 2 to 4 yes we have 2 to 5 no we don't have any direct or any edge between 2 to 5 3 2 1 you have 3 2 1 no we don't ow 3 to 2 yes we have 3 2 to see this one three to three no three to four yes we have three to five yes now four to one yes for two yes this one for two three yes four to five yes five to one no five to two no five to three yes we have and five to four yes we have fine so you can simply write down like this okay now you simply write down the definition of this addition C matrix is what it is a matrix you can say a n cross n we are representing the matrix with a and n where n is the number of vertices n would be the number of rows and n will be the number of columns and how you will fill these entries a of I J this one is J is equal to 1 if I and J are at this end ok see suppose this one is I and this one is J let us take this one is I we are taking and this one is J so you write down a of IJ 1 if I and J are at the st. 1 and 2 are adjacent to each other that is why we are taking 1 2 2 is 1 a of IJ that is a of I 1 and J is suppose to this one is 1 and I 2 and J is equal to 1 this one is also 1 okay otherwise you we would write here 0 all right now next we'll discuss what is adjacent see list see now this would be as the name suggests we will have we are going to have linked lists fine and how many linked list would be there for each what takes one linked list would be maintained like this in this case we are having how many vertices five I guess 1 2 3 4 5 1 2 3 4 5 number of vertices are there fine for each what takes one linked list would be there in that linked list will have will contain the adjacent node to this node fine like this see now suppose will be a first one is what is number of node is one how many at the center node are there two one one is two and one is four then one linked list would be maintained containing two and four now come to the second note this one second how many addition node are there one three and four this would be one three and four now for three also one linked list would be there and it would contain how many number of adjacent to node are there two three one is to one is four and one is five one is to one is four and one is five four four also we have one now we have what two we have what three and five see one two three and five and four five we have what three and four only three and this one is for how many linked lists would we maintain one two three and four and five how many number of vertices 1 2 3 and or four and five the number of vertices total number of vertices in the graph with Linea po maintain Kenyan number of linked list for each node fine now this is the adjacency list using this list you can a present this graph and this is how you can represent this graph using addition C matrix now when you're supposed to calculate the time complexity now when you represent a graph using this method adjacency matrix then what would be the time complexity order you're sorry you can say the space complexity space complexity would be theta n square in this case right because mat this is matrix n number of rows and n number of columns the space complexity is what n square here it is there C five into five matrix v square five is what number of vertices that is and where n is what number of vertices and for representing a graph using this a distance a list the space complexity would be theta n plus 2 e C and 1 2 3 4 5 these are number of what what s is why we have written this plus 2 e because the one you happy there Co see this one is one edge from one to two fine but you have written this edge two times in this list two times went from 1 2 to one edge you have written and from two to one also from two to one also so two times we have written this edge in this list same you can say with you can say take one to four this one is one edge but you have written this two times one to four fine because 4 is adjacent to one so we have written in this linked list also plus 4 to 1 also four to one like this so every Edge has been written two times that's why we have written here n plus 2 we the space complex that is this one for Addison see a nest and this one is theta n square for Addison when you represent this graph any graph using a distance e matrix so see it would be better to use this adjacency matrix to represent a graph when the graph is dense graph sometimes they can ask you this type of question in case of dense graph it's better to use adjacency matrix to represent that graph and when the graph is sparse sparse graph then it would be better to use this what adjacency list because see when a dense graph means almost or you can say each node is connected with each other node you can say you can take example of a complete graph like this suppose we have four nodes and every node is connected with every node and five nodes every node is connected with every other node like this then in that case it is better to use this matrix okay and when something like this one a very few number of edges are there between these vertices then better to use this adjacency list and this is the space complexity for representing these graph ok so that's all about you know some you can say the basics of how to represent a graph in computer these are the most popular methods I am NOT saying that these are the only two methods to represent a graph but I am just I have just discussed the most popular methods to represent this graph okay so I'll see you in the next video till then byebye take care
