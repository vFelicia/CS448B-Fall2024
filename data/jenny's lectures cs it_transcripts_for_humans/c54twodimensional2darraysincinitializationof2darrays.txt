With timestamps:

00:00 - so in the series of learning programming
00:01 - in c we are discussing 2D arrays in C in
00:04 - the previous video I have discussed need
00:06 - of 2D array means why 2D array and
00:09 - Declaration of 2D array now in this
00:10 - video I'll talk about initialization of
00:12 - 2D array two types of initialization at
00:14 - run time and at compile time both we
00:16 - will see with the help of some
00:18 - examples right so now back to the topic
00:21 - initialization at runtime and at compile
00:24 - time first we'll discuss at compile time
00:26 - how to
00:28 - initialize a 2d array at compile time
00:33 - right syntax is almost similar to
00:37 - initialization of 1D array right a
00:39 - little bit different so now see at
00:42 - compile time means at the time of
00:43 - Declaration only you will give the
00:46 - values so how to declare a 2d array data
00:49 - type the name of the array size first of
00:52 - all row size uh suppose I'm taking two
00:55 - and then column size three columns in
00:57 - two rows I want now here only in these
01:01 - Braes give the
01:03 - values right uh suppose I'm uh giving
01:06 - here values what 0 0 0 1 1
01:12 - 1 right so see General syntax if you
01:15 - write then what what would be the synx
01:17 - data type name of array in first bracket
01:22 - row size second bracket column size
01:25 - equal to in these braces you can you
01:27 - will write list of values values or you
01:30 - can say values you want to give that is
01:32 - the general sentex I hope no need to
01:34 - write that that sentex here so now see
01:37 - how many elements total elements would
01:38 - be there the studio array how to
01:40 - calculate row size into column size that
01:43 - is 3 into 2 six six elements total
01:46 - element would be six here right how many
01:48 - bytes would be allocated 6 into for one
01:52 - four bytes integer will take four bytes
01:54 - so 24 bytes would be allocated here now
01:59 - I have given values something like this
02:01 - now how to visualize this 2D array how
02:04 - we see that data would be stored in
02:05 - memory see here like this so this is
02:10 - it two rows it's Row one and
02:16 - row sorry row 0 and one index would be
02:18 - started from zero column would be 0 1 2
02:22 - from 0 to two three columns are there in
02:24 - every row so you can say it's a 2d array
02:26 - which is array of 1D arrays this is what
02:30 - one 1D aray this is 1 1D ARR right
02:34 - that's it so now how this data would be
02:36 - initialized here first of all in first
02:39 - row data would be initialized data would
02:43 - be written like first of all this one
02:46 - zero in this first row then again zero
02:49 - again zero once we have filled all the
02:52 - columns then one then one then
02:57 - one this is how data is to be
02:59 - initialized
03:00 - right so like this you can give second
03:02 - alternative is is what better to give
03:06 - something like
03:07 - this because we know first one is this
03:10 - is first row so what you can
03:13 - do these
03:15 - three you can put again in this bra
03:19 - right this is you can say first row and
03:22 - for second row again you can put one
03:25 - more braces and one comma 1 comma 1 and
03:29 - and that's
03:32 - it within these braces this is one row
03:36 - and this is second row this is I guess
03:38 - more understandable so you can say this
03:40 - is row 0 and Row one index would be 0
03:42 - and one right so directly now we know
03:46 - that by by looking at this point we know
03:49 - this is one row 0 0 would be initialized
03:52 - here and this is second row so this is
03:55 - also correct you can write something
03:56 - like this or you can write something
03:59 - like this int
04:01 - a and 23 in a matrix form in the this 0
04:08 - 0 0 comma 1 1
04:12 - 1 and semicolon this is also correct in
04:17 - the next line you can write this for the
04:19 - row one in next line you can write for
04:21 - row two and here you can close this this
04:24 - this braces so this is also correct you
04:26 - can initialize it in Matrix form this
04:29 - also would be initialized this also
04:30 - would be in memory would be like how we
04:33 - see that would be written something like
04:34 - this in 2D aray this is first row this
04:36 - is second row right now another method
04:40 - is how you can initialize here what you
04:42 - can do here you can you know skip this
04:46 - one if you don't give the size the row
04:50 - size then also if you give value
04:54 - something like this in Braes like this
04:57 - is for first row this is for second row
05:00 - right you want two rows but you don't
05:03 - initialize here you don't give the size
05:05 - here that is fine it will not give any
05:07 - error because you are initializing here
05:09 - so 0 0 that would be stored here 1 one
05:12 - one that would be stored in row two
05:14 - ultimately by default what two rows
05:17 - would be there and obviously column size
05:19 - you have declared here so I guess you
05:23 - got that the initialization is done row
05:26 - by row right row by Row from here
05:30 - first row then second row only right so
05:34 - now when you can when it is not
05:38 - compulsory to give the size of this this
05:40 - row size when you have given you have
05:44 - initialized all the values
05:48 - explicitly in 2D array then it's not
05:51 - compulsory to give row
05:54 - size means here see what you want you
05:58 - know the size of of row would be two so
06:01 - two rows and three columns and you have
06:04 - initialized you have given all the six
06:06 - values here all the six values here in
06:08 - that case no need to give this row size
06:11 - if you write something like this and
06:12 - here also if you don't write this that
06:14 - is also fine it will work because you
06:16 - have initialized all the six values
06:19 - right but if you write something like
06:21 - this see I'm writing here int a I'm not
06:25 - giving any size
06:27 - three and uh
06:30 - I'm just writing here
06:35 - zero okay first of all let me uh you
06:38 - know give you another example if you
06:39 - write two and three and one zero only in
06:43 - that case what will happen all the
06:45 - values would be initialized with zero
06:49 - right or before that one more thing if I
06:52 - write something like this 0
06:54 - 0 and uh 0 and 1 or you can say 0 0 1
07:02 - 1 only four values I have given and
07:05 - sizes 2 and three so now how that would
07:08 - be initialized initialization would be
07:11 - done row by row so first value 0o second
07:15 - zero next one also here now first row is
07:19 - complete now one is there and remaining
07:23 - would be initialized with by default
07:25 - zero this is how the initialization to
07:27 - be initialization is to be done but if
07:29 - you want that 0 0 would be in first Row
07:31 - 1 one would be in second row then you
07:34 - have to specify explicitly that this is
07:37 - Row one uh row zero I mean first row
07:40 - this is second row so what you can do
07:42 - you can put just curly braces here and
07:46 - here and then in curly braces one and
07:51 - one now whatever you have written Within
07:54 - These curly braces either one value or
07:57 - two value that would be considered as as
07:59 - Row one means
08:02 - here this row zero row zero throw and
08:06 - this would be considered as one throw so
08:08 - now initialization would be done
08:10 - something like this 0 0 would be here
08:12 - and by default there is no nothing so
08:16 - one more Zero by default and this is row
08:19 - second so one one here and by default
08:22 - here would be
08:25 - zero right so this is how we can do
08:28 - different different types of
08:30 - initialization now what what uh I want
08:33 - to tell you one more thing uh
08:36 - see and I have told you if zero is there
08:39 - then all would be zero first is zero
08:42 - remaining would be zero right but if you
08:45 - will not initialize size
08:47 - here then what will
08:50 - happen now it will not give any error
08:53 - see it will not give any error
08:55 - but you know hair initialization is what
09:00 - because you have given only one zero how
09:03 - the size is to be
09:05 - calculated so when it will initialize
09:09 - like we know three columns would be
09:11 - there so 0 0 0 1 0 Z by default two 0
09:15 - now we don't know second row is there or
09:17 - not right so that would be only one row
09:21 - there would be no second row so it's
09:24 - like 1D array only this this
09:27 - this and if you print if you write down
09:31 - the logic to print a 2d array like from
09:34 - that that we will discuss here and if
09:36 - you will you want to print this second
09:37 - row so then it will give any garbage
09:39 - value because you haven't initialized
09:41 - this thing right so better to if you not
09:46 - don't give the size here and if you
09:48 - initialize something like this this is
09:50 - assignment for you see if I write here
09:52 - like this one one
09:56 - one and that's
09:58 - it
09:59 - now how data is to be initialized
10:02 - here right in this form 2D array it
10:06 - would be 2D aray or 1D array right and
10:09 - if you write second is what if you write
10:11 - here 1 one one and
10:15 - two
10:17 - then these are the two uh example I mean
10:20 - two assignments for for you you have to
10:22 - tell me in comment box right how data is
10:24 - to be initialized in these two cases
10:26 - right now uh next point about
10:30 - initialization at compile time is what
10:32 - if you write here something like this
10:34 - size is two and if I write
10:40 - here like 0 0 0 you have put this this
10:45 - one in three values into into these
10:47 - curly braces so that would be considered
10:49 - as this Row first row so 0 0 would be
10:53 - assigned here now next three rows would
10:56 - be assigned with what I mean a next row
10:59 - the next row that one one of row would
11:00 - be assigned with 0 0 0 remaining would
11:03 - be 0 0 0 right so you can try this this
11:06 - type of Declaration all the Declaration
11:07 - that I have told you on your laptop and
11:09 - you can you know see if you are getting
11:11 - any error or not now second is what at
11:14 - runtime how you will initialize how you
11:16 - can initialize a 1D at run time using
11:19 - for Loop and scanf same here we will use
11:23 - for Loop and scanner function but here
11:25 - two for Loop but here because we are
11:28 - having here
11:30 - what like suppose I'm taking same int a
11:33 - 2 and three right so this is row 0 index
11:39 - is 0 1 0 1 2 right now how to initialize
11:44 - this thing so first one you have to take
11:48 - here two Loops nested Loop would be
11:50 - required and this thing I have discussed
11:52 - why nested Loop when we discussing
11:54 - printing pattern programs in C so there
11:56 - we have discussed I have uploaded one
11:58 - video like what is need of nested loops
12:00 - and what are nested Loops you can first
12:02 - of all watch that video then come to
12:03 - this video I'll put the link of that
12:05 - video in this side button you can check
12:06 - it out so now first Loop would be to
12:10 - print what
12:13 - rows right so rows are one and two two
12:16 - rows only so I would be from 0 to 1
12:20 - because index is starting from 0 to one
12:22 - and I
12:23 - ++ now within this Loop the second Loop
12:27 - would be J and that is responsible to
12:30 - print these values So within every row
12:34 - we have we are having three values so
12:35 - that this Loop would be would run for
12:38 - three three times 0 Less Than 3 and j++
12:44 - so this is for to print row like two
12:47 - rows are there so 0 to one 0 to uh no 0
12:51 - to two sorry right and here this is for
12:54 - printing these columns so 0 to three
12:56 - size is three and within this we are
12:59 - going to take input so print F
13:03 - percentage D address of name of array is
13:06 - a and here you will give two subscript
13:10 - because this is
13:11 - what 0
13:14 - 0 right this block is what row is zero
13:18 - column is 1 0 2 1 0 1 1 1 2 so I and J
13:26 - you will have to give two values value
13:29 - also and column value also then only
13:32 - then only it is no possible to access
13:34 - these blocks or these
13:38 - cells and that's it this is what you can
13:40 - initialize at
13:41 - runtime right so at first I value is
13:45 - zero condition true enter here then J
13:48 - value is zero condition true enter here
13:51 - scan of percentage the address of a of I
13:54 - value 0 J value 0 address of a of 0 0 0
13:58 - 0 mean means this one so whatever you
14:00 - will give that would be assigned to this
14:02 - block like I'm giving
14:03 - one now first of all j++ because we are
14:07 - in this inner loop now j++ J becomes
14:10 - one condition to enter here again now a
14:13 - of I I is zero still but J is one so now
14:17 - I 0 1 this cell you can access so now
14:21 - whatever you will print uh you will
14:24 - enter that value would be stored here
14:26 - because we are getting address of this
14:28 - cell so suppose I'm entering one again
14:30 - so one would be stored here again we are
14:33 - still into in this inner loop so j++
14:35 - that is two again condition true enter
14:38 - address of a of I is still zero but J is
14:41 - two 02 02 this cell so whatever you will
14:44 - enter that would be stored here that is
14:46 - suppose I'm entering two right now j++ J
14:49 - becomes three now condition true 3 less
14:52 - than three no exit from the inner loop
14:55 - but still we are in outer loop that is I
14:57 - ++ now I becomes
14:59 - 1 condition true again enter here again
15:02 - J would be initialized with
15:04 - zero and same J would be repeated three
15:07 - times for this
15:08 - row right and once I value becomes then
15:11 - two condition not exit from the loop and
15:14 - this is how we will initialize at run
15:16 - time this is how this this working of
15:18 - nested Loops right so now I hope you are
15:22 - clear with the run time and compile time
15:23 - initialization of 2D array so in the
15:25 - next video we'll discuss what uh memory
15:28 - representation of 2D array as well as
15:30 - how to access elements of 2D array and
15:33 - that that in that video only I'll show
15:36 - you all the things like on my laptop
15:38 - practically we'll take one example and
15:40 - practically I'll see I'll show you the
15:41 - Declaration part and initialization part
15:43 - as well as how to print an array and how
15:46 - to take this this uh how to take values
15:49 - or how to initialize array at frun time
15:51 - right so now I'll see you in the next
15:53 - video till then bye-bye take
15:57 - care

Cleaned transcript:

so in the series of learning programming in c we are discussing 2D arrays in C in the previous video I have discussed need of 2D array means why 2D array and Declaration of 2D array now in this video I'll talk about initialization of 2D array two types of initialization at run time and at compile time both we will see with the help of some examples right so now back to the topic initialization at runtime and at compile time first we'll discuss at compile time how to initialize a 2d array at compile time right syntax is almost similar to initialization of 1D array right a little bit different so now see at compile time means at the time of Declaration only you will give the values so how to declare a 2d array data type the name of the array size first of all row size uh suppose I'm taking two and then column size three columns in two rows I want now here only in these Braes give the values right uh suppose I'm uh giving here values what 0 0 0 1 1 1 right so see General syntax if you write then what what would be the synx data type name of array in first bracket row size second bracket column size equal to in these braces you can you will write list of values values or you can say values you want to give that is the general sentex I hope no need to write that that sentex here so now see how many elements total elements would be there the studio array how to calculate row size into column size that is 3 into 2 six six elements total element would be six here right how many bytes would be allocated 6 into for one four bytes integer will take four bytes so 24 bytes would be allocated here now I have given values something like this now how to visualize this 2D array how we see that data would be stored in memory see here like this so this is it two rows it's Row one and row sorry row 0 and one index would be started from zero column would be 0 1 2 from 0 to two three columns are there in every row so you can say it's a 2d array which is array of 1D arrays this is what one 1D aray this is 1 1D ARR right that's it so now how this data would be initialized here first of all in first row data would be initialized data would be written like first of all this one zero in this first row then again zero again zero once we have filled all the columns then one then one then one this is how data is to be initialized right so like this you can give second alternative is is what better to give something like this because we know first one is this is first row so what you can do these three you can put again in this bra right this is you can say first row and for second row again you can put one more braces and one comma 1 comma 1 and and that's it within these braces this is one row and this is second row this is I guess more understandable so you can say this is row 0 and Row one index would be 0 and one right so directly now we know that by by looking at this point we know this is one row 0 0 would be initialized here and this is second row so this is also correct you can write something like this or you can write something like this int a and 23 in a matrix form in the this 0 0 0 comma 1 1 1 and semicolon this is also correct in the next line you can write this for the row one in next line you can write for row two and here you can close this this this braces so this is also correct you can initialize it in Matrix form this also would be initialized this also would be in memory would be like how we see that would be written something like this in 2D aray this is first row this is second row right now another method is how you can initialize here what you can do here you can you know skip this one if you don't give the size the row size then also if you give value something like this in Braes like this is for first row this is for second row right you want two rows but you don't initialize here you don't give the size here that is fine it will not give any error because you are initializing here so 0 0 that would be stored here 1 one one that would be stored in row two ultimately by default what two rows would be there and obviously column size you have declared here so I guess you got that the initialization is done row by row right row by Row from here first row then second row only right so now when you can when it is not compulsory to give the size of this this row size when you have given you have initialized all the values explicitly in 2D array then it's not compulsory to give row size means here see what you want you know the size of of row would be two so two rows and three columns and you have initialized you have given all the six values here all the six values here in that case no need to give this row size if you write something like this and here also if you don't write this that is also fine it will work because you have initialized all the six values right but if you write something like this see I'm writing here int a I'm not giving any size three and uh I'm just writing here zero okay first of all let me uh you know give you another example if you write two and three and one zero only in that case what will happen all the values would be initialized with zero right or before that one more thing if I write something like this 0 0 and uh 0 and 1 or you can say 0 0 1 1 only four values I have given and sizes 2 and three so now how that would be initialized initialization would be done row by row so first value 0o second zero next one also here now first row is complete now one is there and remaining would be initialized with by default zero this is how the initialization to be initialization is to be done but if you want that 0 0 would be in first Row 1 one would be in second row then you have to specify explicitly that this is Row one uh row zero I mean first row this is second row so what you can do you can put just curly braces here and here and then in curly braces one and one now whatever you have written Within These curly braces either one value or two value that would be considered as as Row one means here this row zero row zero throw and this would be considered as one throw so now initialization would be done something like this 0 0 would be here and by default there is no nothing so one more Zero by default and this is row second so one one here and by default here would be zero right so this is how we can do different different types of initialization now what what uh I want to tell you one more thing uh see and I have told you if zero is there then all would be zero first is zero remaining would be zero right but if you will not initialize size here then what will happen now it will not give any error see it will not give any error but you know hair initialization is what because you have given only one zero how the size is to be calculated so when it will initialize like we know three columns would be there so 0 0 0 1 0 Z by default two 0 now we don't know second row is there or not right so that would be only one row there would be no second row so it's like 1D array only this this this and if you print if you write down the logic to print a 2d array like from that that we will discuss here and if you will you want to print this second row so then it will give any garbage value because you haven't initialized this thing right so better to if you not don't give the size here and if you initialize something like this this is assignment for you see if I write here like this one one one and that's it now how data is to be initialized here right in this form 2D array it would be 2D aray or 1D array right and if you write second is what if you write here 1 one one and two then these are the two uh example I mean two assignments for for you you have to tell me in comment box right how data is to be initialized in these two cases right now uh next point about initialization at compile time is what if you write here something like this size is two and if I write here like 0 0 0 you have put this this one in three values into into these curly braces so that would be considered as this Row first row so 0 0 would be assigned here now next three rows would be assigned with what I mean a next row the next row that one one of row would be assigned with 0 0 0 remaining would be 0 0 0 right so you can try this this type of Declaration all the Declaration that I have told you on your laptop and you can you know see if you are getting any error or not now second is what at runtime how you will initialize how you can initialize a 1D at run time using for Loop and scanf same here we will use for Loop and scanner function but here two for Loop but here because we are having here what like suppose I'm taking same int a 2 and three right so this is row 0 index is 0 1 0 1 2 right now how to initialize this thing so first one you have to take here two Loops nested Loop would be required and this thing I have discussed why nested Loop when we discussing printing pattern programs in C so there we have discussed I have uploaded one video like what is need of nested loops and what are nested Loops you can first of all watch that video then come to this video I'll put the link of that video in this side button you can check it out so now first Loop would be to print what rows right so rows are one and two two rows only so I would be from 0 to 1 because index is starting from 0 to one and I ++ now within this Loop the second Loop would be J and that is responsible to print these values So within every row we have we are having three values so that this Loop would be would run for three three times 0 Less Than 3 and j++ so this is for to print row like two rows are there so 0 to one 0 to uh no 0 to two sorry right and here this is for printing these columns so 0 to three size is three and within this we are going to take input so print F percentage D address of name of array is a and here you will give two subscript because this is what 0 0 right this block is what row is zero column is 1 0 2 1 0 1 1 1 2 so I and J you will have to give two values value also and column value also then only then only it is no possible to access these blocks or these cells and that's it this is what you can initialize at runtime right so at first I value is zero condition true enter here then J value is zero condition true enter here scan of percentage the address of a of I value 0 J value 0 address of a of 0 0 0 0 mean means this one so whatever you will give that would be assigned to this block like I'm giving one now first of all j++ because we are in this inner loop now j++ J becomes one condition to enter here again now a of I I is zero still but J is one so now I 0 1 this cell you can access so now whatever you will print uh you will enter that value would be stored here because we are getting address of this cell so suppose I'm entering one again so one would be stored here again we are still into in this inner loop so j++ that is two again condition true enter address of a of I is still zero but J is two 02 02 this cell so whatever you will enter that would be stored here that is suppose I'm entering two right now j++ J becomes three now condition true 3 less than three no exit from the inner loop but still we are in outer loop that is I ++ now I becomes 1 condition true again enter here again J would be initialized with zero and same J would be repeated three times for this row right and once I value becomes then two condition not exit from the loop and this is how we will initialize at run time this is how this this working of nested Loops right so now I hope you are clear with the run time and compile time initialization of 2D array so in the next video we'll discuss what uh memory representation of 2D array as well as how to access elements of 2D array and that that in that video only I'll show you all the things like on my laptop practically we'll take one example and practically I'll see I'll show you the Declaration part and initialization part as well as how to print an array and how to take this this uh how to take values or how to initialize array at frun time right so now I'll see you in the next video till then byebye take care
