With timestamps:

00:00 - so in the series of learning Python
00:02 - programming language we are discussing
00:03 - operators in Python now in the previous
00:06 - video we have seen arithmetic assignment
00:09 - and till now we have seen arithmetic
00:11 - assignment and comparison operators now
00:12 - in this video we will see logical
00:14 - operators
00:15 - okay
00:16 - three logical operators are there
00:19 - logical and
00:21 - and or and not three logical operators
00:25 - are there
00:26 - now these are used
00:29 - these are used to combine
00:31 - two or more conditions actually or you
00:33 - can say used to combine conditional
00:35 - statements
00:36 - now what does that mean whatever I am
00:38 - saying see if I take two variables like
00:41 - a is equal to 5
00:43 - and a comma B is equal to 5 comma 4.
00:47 - okay
00:49 - now I want to check a condition
00:53 - two condition I want to check a should
00:55 - be
00:57 - greater than 4
00:59 - and B should be less than
01:02 - 10. these two condition I want to check
01:06 - so what I will say like in English I am
01:08 - saying generally I'm saying a should be
01:12 - greater than 4 and B should be less than
01:14 - 10. so how you can write down this thing
01:17 - these two conditions in the same line
01:19 - when you are using that thing you are in
01:22 - programming how you can write down this
01:24 - thing
01:25 - same
01:26 - you can use you know and operators only
01:29 - because we have an operator in Python
01:31 - logical and which will do the same thing
01:33 - that whatever we want
01:36 - so in between these you can check you
01:38 - can write down add
01:40 - so it will check a greater than 4 and B
01:43 - less than
01:44 - 10 then only it will give if you print
01:47 - then only it will print
01:49 - true
01:51 - okay
01:52 - otherwise false
01:55 - fine I hope you got this
01:59 - here we are not using these like in C
02:01 - and C plus plus b this is what logical
02:03 - and no we simply write and
02:06 - right now see here a greater than 4 a is
02:12 - 5 yes true and B less than 10 B is 4 yes
02:15 - it is true both are true so it will give
02:17 - you
02:20 - if I write down something like this
02:22 - print
02:23 - a greater than 4 and
02:27 - B
02:29 - Less Than 3 in this case a greater than
02:32 - 4 yes because
02:35 - is 5 and in B we have 4. be less than 3
02:39 - no this condition is not true so this is
02:42 - true this is false
02:44 - if one is true one is false then and
02:46 - operator will give false
02:49 - do you remember truth table of this and
02:52 - if you have read that Boolean algebra
02:56 - if not let me just tell you the truth
02:57 - table of this and
02:59 - if see this is truth table of and
03:02 - one is true if both are true it will
03:05 - give you true
03:08 - one is true one is false it will give
03:10 - false
03:11 - this is false this is true then only it
03:13 - give false if both are false then also
03:17 - it will give false
03:19 - so and operator will give true
03:22 - if what the conditions are true
03:25 - okay
03:27 - so this and this both are true then only
03:29 - it will give true if any one of this is
03:31 - false it will give false
03:33 - this is directable of hand now logical
03:36 - or operator
03:37 - okay if I write here
03:41 - or
03:45 - means we want
03:47 - either this or this condition should be
03:49 - true not both
03:51 - this or this
03:53 - a greater than 4
03:55 - a is 5 is true
03:57 - so if one is true ultimately it will
03:59 - give you true here also I am writing or
04:03 - a greater than 4 suppose here I am
04:05 - writing a
04:07 - less than 4.
04:11 - a less than 4
04:13 - no a is 5 this is false this condition
04:16 - is false or B Less Than 3 this is also
04:20 - false so it will give false if I write B
04:23 - less than 13.
04:25 - now this is false but this is true
04:28 - B is less than 13 yes so 1 is true one
04:31 - is false then it will give 3.
04:36 - for the output to be true only one
04:39 - condition must be true in case of or so
04:43 - what is truth table of this or basically
04:45 - this is for and this truth table is for
04:48 - and
04:50 - and for logical or
04:52 - if both are true it will give to you
04:54 - if this is true this is false then also
04:56 - it will give true if this is false this
04:58 - is true true if this is false this is
05:00 - false false so C
05:04 - if any one is true then it will give to
05:07 - you it will give False only if both the
05:10 - conditions are false
05:12 - so this is truth table for logical or
05:16 - okay I hope you got from this thing now
05:20 - one is logical not it will reverse
05:24 - the result means
05:26 - suppose
05:28 - we are writing suppose something like
05:30 - this
05:33 - if I print print
05:36 - not a
05:38 - see here a is 5 5 means other than 0
05:42 - anything would be considered as true
05:44 - okay so a is true not a it will give
05:48 - false so it will reverse the result if I
05:50 - write a is equal to force
05:53 - and if I print print note
05:56 - a so a is false not a means it will
06:00 - reverse it reverse of false is true so
06:03 - it will give true
06:05 - simply logical not means it will reverse
06:07 - it is going to reverse the result
06:10 - okay very simple
06:12 - now let me just show you this thing on
06:15 - my laptop practically we will see how to
06:17 - use this logical and over and not
06:19 - operators
06:21 - so let's see logical operators these
06:24 - were assignment operators and same we
06:26 - are taking suppose a b 4 and 3. okay if
06:31 - simply I write print
06:33 - so this is the condition you want to
06:35 - check like a
06:36 - less than equal to 3 less than three and
06:39 - b equal to 3. and we are writing logical
06:44 - and operator right so is a Less Than 3 a
06:47 - is 4 no condition is not true it is
06:49 - false
06:51 - so if anyone is false rather than
06:53 - checking the another condition what if
06:56 - anyone is false the ND will give false
06:58 - so ultimately it will result it will not
07:01 - check the second condition it will
07:02 - result False only
07:04 - okay
07:05 - because we know in and case the first is
07:09 - false so if second one is true then also
07:13 - it will give false if second one is
07:15 - false then also it will go false so no
07:17 - need to check the second one okay now
07:20 - rather than n if we write or
07:24 - now a Less Than 3 this is false but in
07:27 - this case still it will take the second
07:29 - condition
07:31 - because
07:32 - in or if anyone is true it will give
07:35 - true so we have to check both the
07:37 - condition and b equal to equal to 3 yes
07:39 - it is true so now it will give you true
07:42 - see it will give you true okay
07:44 - and if I write not
07:48 - a
07:53 - note a means it will give you what
07:56 - false because a is 4 that is true it
07:59 - will give fourths okay
08:02 - so rather than either something like
08:04 - this you can write C is equal to like
08:07 - true but see T should be capital and in
08:10 - false F should be Capital otherwise it
08:12 - will give error
08:13 - now if I write node C
08:17 - so it will give you what false
08:20 - okay
08:27 - and if we write something like this
08:30 - a less than
08:33 - equal to 4
08:36 - and C
08:39 - so a less than equal to 4
08:42 - less than equal to Fourier says 4 so
08:44 - that is true c c is true so both are
08:47 - true in that case it will give you true
08:49 - okay now if I write
08:52 - a less than 4 no that is false so it
08:55 - will give you false
08:57 - rather than and if I write or
09:01 - now it will give you true because C is
09:03 - true
09:04 - so always it will give true
09:06 - I hope you got the working of logical
09:08 - and logical or logical not operator
09:10 - because I have discussed the truth table
09:12 - of and or and not okay so you can try
09:15 - out different different conditions and
09:16 - think you can check out
09:18 - fine so these are logical operators so I
09:20 - hope you go to what are logical
09:21 - operators and how to use these operators
09:23 - right and truth table of these and
09:26 - logical and or naught operators for not
09:29 - it's not like for not logical uh for not
09:32 - logical not operators with stable is
09:35 - if it is true it will give false if here
09:38 - we have false it will give to you
09:41 - it is going to negate the result okay
09:43 - reverse the result that's it so now in
09:46 - the next video we'll see bitwise
09:48 - operators so now we'll see in the next
09:49 - video till then bye bye take care

Cleaned transcript:

so in the series of learning Python programming language we are discussing operators in Python now in the previous video we have seen arithmetic assignment and till now we have seen arithmetic assignment and comparison operators now in this video we will see logical operators okay three logical operators are there logical and and or and not three logical operators are there now these are used these are used to combine two or more conditions actually or you can say used to combine conditional statements now what does that mean whatever I am saying see if I take two variables like a is equal to 5 and a comma B is equal to 5 comma 4. okay now I want to check a condition two condition I want to check a should be greater than 4 and B should be less than 10. these two condition I want to check so what I will say like in English I am saying generally I'm saying a should be greater than 4 and B should be less than 10. so how you can write down this thing these two conditions in the same line when you are using that thing you are in programming how you can write down this thing same you can use you know and operators only because we have an operator in Python logical and which will do the same thing that whatever we want so in between these you can check you can write down add so it will check a greater than 4 and B less than 10 then only it will give if you print then only it will print true okay otherwise false fine I hope you got this here we are not using these like in C and C plus plus b this is what logical and no we simply write and right now see here a greater than 4 a is 5 yes true and B less than 10 B is 4 yes it is true both are true so it will give you if I write down something like this print a greater than 4 and B Less Than 3 in this case a greater than 4 yes because is 5 and in B we have 4. be less than 3 no this condition is not true so this is true this is false if one is true one is false then and operator will give false do you remember truth table of this and if you have read that Boolean algebra if not let me just tell you the truth table of this and if see this is truth table of and one is true if both are true it will give you true one is true one is false it will give false this is false this is true then only it give false if both are false then also it will give false so and operator will give true if what the conditions are true okay so this and this both are true then only it will give true if any one of this is false it will give false this is directable of hand now logical or operator okay if I write here or means we want either this or this condition should be true not both this or this a greater than 4 a is 5 is true so if one is true ultimately it will give you true here also I am writing or a greater than 4 suppose here I am writing a less than 4. a less than 4 no a is 5 this is false this condition is false or B Less Than 3 this is also false so it will give false if I write B less than 13. now this is false but this is true B is less than 13 yes so 1 is true one is false then it will give 3. for the output to be true only one condition must be true in case of or so what is truth table of this or basically this is for and this truth table is for and and for logical or if both are true it will give to you if this is true this is false then also it will give true if this is false this is true true if this is false this is false false so C if any one is true then it will give to you it will give False only if both the conditions are false so this is truth table for logical or okay I hope you got from this thing now one is logical not it will reverse the result means suppose we are writing suppose something like this if I print print not a see here a is 5 5 means other than 0 anything would be considered as true okay so a is true not a it will give false so it will reverse the result if I write a is equal to force and if I print print note a so a is false not a means it will reverse it reverse of false is true so it will give true simply logical not means it will reverse it is going to reverse the result okay very simple now let me just show you this thing on my laptop practically we will see how to use this logical and over and not operators so let's see logical operators these were assignment operators and same we are taking suppose a b 4 and 3. okay if simply I write print so this is the condition you want to check like a less than equal to 3 less than three and b equal to 3. and we are writing logical and operator right so is a Less Than 3 a is 4 no condition is not true it is false so if anyone is false rather than checking the another condition what if anyone is false the ND will give false so ultimately it will result it will not check the second condition it will result False only okay because we know in and case the first is false so if second one is true then also it will give false if second one is false then also it will go false so no need to check the second one okay now rather than n if we write or now a Less Than 3 this is false but in this case still it will take the second condition because in or if anyone is true it will give true so we have to check both the condition and b equal to equal to 3 yes it is true so now it will give you true see it will give you true okay and if I write not a note a means it will give you what false because a is 4 that is true it will give fourths okay so rather than either something like this you can write C is equal to like true but see T should be capital and in false F should be Capital otherwise it will give error now if I write node C so it will give you what false okay and if we write something like this a less than equal to 4 and C so a less than equal to 4 less than equal to Fourier says 4 so that is true c c is true so both are true in that case it will give you true okay now if I write a less than 4 no that is false so it will give you false rather than and if I write or now it will give you true because C is true so always it will give true I hope you got the working of logical and logical or logical not operator because I have discussed the truth table of and or and not okay so you can try out different different conditions and think you can check out fine so these are logical operators so I hope you go to what are logical operators and how to use these operators right and truth table of these and logical and or naught operators for not it's not like for not logical uh for not logical not operators with stable is if it is true it will give false if here we have false it will give to you it is going to negate the result okay reverse the result that's it so now in the next video we'll see bitwise operators so now we'll see in the next video till then bye bye take care
