With timestamps:

00:00 - so in the series of learning Python
00:02 - programming languages in the previous
00:03 - video we have seen one coding exercise
00:04 - like you have to calculate uh BMI body
00:07 - mass index right now in that case we
00:11 - have seen something like this the weight
00:13 - should be in kilogram and it should be
00:14 - considered as in height should be in
00:17 - meters and it should be considered as
00:19 - float something like this and the final
00:20 - output should be a whole integer not in
00:23 - fractional part like if I enter weight
00:25 - 48 and height 1.5 then
00:28 - directly it will give like
00:30 - 21.33333 something like this but I don't
00:33 - want this number I want whole number
00:34 - like 21 only integer I want for that
00:37 - what you have done convert this into int
00:40 - type conversion we have done right
00:43 - in this previous exercise
00:45 - but one more thing we can do is we can
00:48 - round off this number rather than just
00:51 - forcefully converting that into integer
00:53 - just round off the number
00:54 - right like if it is 21.3 it will give
00:58 - after rounding off it will give you 21.
01:00 - in mathematics I have I hope you have
01:03 - done these kind of calculation if the
01:05 - number is 21.67 so the after round off
01:08 - it should give 22 because after decimal
01:10 - it is greater than 5.
01:12 - and here it is greater than it is less
01:14 - than 5 that is why 21 and the nearest
01:17 - integer of this is 21 and the nearest
01:19 - whole integer to this is 22 not 21. this
01:23 - is type of rounding of the number right
01:25 - so for this thing also we have a inbuilt
01:28 - function in Python that is round
01:30 - function so in this video we'll discuss
01:32 - about round function what is round
01:34 - function and there are many thing we can
01:36 - do with with this round function and
01:37 - there are some tricky things also and
01:40 - some special cases also like how to
01:43 - break a tie if after a decimal it is
01:45 - 21.5 then it will give 22 or it will
01:49 - give to anyone these kind of cases also
01:51 - we will be discussing in this video
01:53 - right so let's see I hope now you you
01:57 - are aware about the this working of this
01:59 - round function right
02:01 - it is used to round off the numbers now
02:04 - let's see General syntax of this
02:06 - function how you will write just you
02:07 - will write round
02:09 - and in bracket
02:10 - two parameters are there two arguments
02:13 - one is the number if you want to round
02:16 - off and next is number of digits
02:21 - number of digits right
02:23 - now see these two arguments are there in
02:27 - this case this number this is compulsory
02:29 - because this is the number you want to
02:31 - round off suppose I want to round off
02:33 - this number round
02:35 - uh I I want to round over this number
02:37 - 21.33
02:40 - so I'll give number 21.33 obviously that
02:43 - this is the number so this is compulsory
02:45 - but this number of digits the second
02:48 - argument is optional
02:50 - right number of digits up to which you
02:53 - want to round off this number
02:56 - if if it is three three something like
02:59 - this
03:00 - I want to round
03:01 - off generally you
03:03 - up to 2
03:05 - right or
03:08 - right so I want to round off this number
03:11 - up to two decimal points up to two one
03:14 - two so what it will give you
03:16 - 21.33 because after 2 it is 3 means it
03:20 - is less than 5. so no updation would be
03:24 - there as it is it would be 21.33
03:26 - right so this is what the number this is
03:29 - compulsory to mention and this is
03:32 - optional the number of digits you want
03:34 - to up to which you want to round off the
03:35 - number this is completely optional and
03:37 - thus value of number of digits can be
03:39 - positive 0 or negative
03:42 - right by default if you don't give
03:44 - anything it would be considered as
03:46 - 0 0 means it will round off this number
03:50 - to 21 only
03:52 - it will give integer
03:54 - nearest to this number
03:56 - right so this is General syntax of round
03:59 - number let's round function sorry now
04:01 - let's take some examples
04:05 - and what the sound function will return
04:07 - see
04:09 - so these are some example first one we
04:11 - have to we want to round the seven but
04:14 - this is what a complete it's an integer
04:16 - right so it is not been affected by this
04:19 - round function so directly it will give
04:21 - you nearest integer to 7 is 7 and the
04:24 - output this this this what it will
04:27 - return 7 it will return an integer the
04:30 - class or the type if you you know find
04:33 - out using type function that would be in
04:36 - in the in that case the class in this
04:38 - case
04:39 - we have specified number of digits yes
04:43 - but it is integer not decimal so it will
04:47 - not affect this thing and directly it
04:49 - will return 7 only and the output and
04:52 - the type of this would be int
04:54 - so if n digits are not given so it will
04:58 - return an integer
04:59 - right if n digits are given
05:02 - in that case what it will return if it
05:05 - is an integer value then it will return
05:07 - an integer if it is a float something
05:09 - like this this is the case 2.66 this is
05:12 - float and we have given
05:15 - n digits right so it will return 2.67 so
05:19 - the output of this return value this
05:21 - type would be float in this case it
05:23 - would be float in this case it would be
05:25 - returned so it will return either into
05:26 - or float it will depend how you are
05:28 - using that thing right in this case
05:31 - we are giving 0 but we are providing n
05:34 - digits although it's 0 we are providing
05:37 - so it will return 3.0
05:41 - still it is a float not int
05:45 - if you don't provide in that case it
05:47 - would be end in this case it is 7.61 but
05:50 - we are not providing number of results
05:52 - second argument is nothing
05:55 - right so in this case it will return
05:57 - eight now the output this class of this
06:00 - or the gray type of this would be
06:02 - integer
06:03 - so I hope you got when it will turn into
06:05 - value when it will turn a float value
06:07 - the type of that return value would be
06:10 - intent float right
06:12 - now one case has some special cases are
06:15 - also there
06:16 - like
06:18 - tiebreaking cases if I have something
06:21 - like this print
06:24 - around 7.5
06:28 - we have seen if this value is greater
06:32 - than 5 means
06:34 - plus 1 would be added to the final
06:36 - result means it's seven so one would be
06:38 - added because nearest integer two this
06:41 - is eight not seven
06:43 - if this is 7.41 it will give seven
06:47 - nearest integer to this is 7. right if
06:51 - the value is less than 5 but the value
06:52 - is if 5 in that case what it will return
06:55 - it can return 8 also seven also so two
06:58 - cases are there
07:00 - so for type breaking in Python they have
07:01 - used
07:02 - it will return
07:04 - the nearest even integer E1
07:08 - so 7.5 either it will give two cases
07:11 - seven or eight but even is eight so in
07:14 - this case it will return 8.
07:17 - but
07:18 - if I have written something like this
07:21 - round
07:23 - 6.5
07:26 - in this case what it will return two
07:28 - cases can be there either 6 or 7. so
07:32 - nearest even integer is 6.
07:35 - nearest even integer to this number is 6
07:37 - Note 7 so in this case it will return
07:40 - six not seven one would not be added to
07:43 - the final value so this is the in Python
07:47 - they have used for tie breaking in
07:50 - everywhere this rule will be used for
07:52 - time breaking right nearest even integer
07:55 - it will return
07:57 - right so for you one question is
08:01 - what would be the output of these two
08:02 - cases round 11.5 and 12.5 this is for
08:06 - your assignment right next is
08:09 - okay we are we will round off integers
08:13 - right so let's take some examples
08:17 - now see
08:19 - here I am using integers not floating
08:21 - Point number so
08:24 - and this this is the number this is
08:25 - number of digits you want to round off
08:27 - so this number the day type of this
08:29 - should be like it support int and Float
08:32 - but if you provide string something like
08:34 - this
08:35 - it will give error right so we cannot
08:38 - provide string here that should be
08:39 - interflow
08:41 - but it will not affect this integer
08:43 - value if number of digits are positive
08:46 - it is 2 it is positive so it will not
08:49 - affect this number it will directly
08:50 - return as it is the number if it is 0
08:53 - then also it will not affect the number
08:54 - it will return six seven four but if you
08:57 - provide this number of widgets that
08:58 - value in minus negative value
09:01 - that will affect this number now in in
09:03 - which case how it will return how it
09:05 - will affect this thing what it will
09:07 - return now so it is minus 1
09:10 - right so generally it round function
09:13 - Returns what
09:15 - multiple of the number closest to the
09:19 - multiple of 10 to the power
09:23 - minus
09:25 - number of digits
09:27 - this thing
09:29 - so if I write 10 to the power here
09:31 - number of digits are minus 1 so minus
09:34 - minus 1. so 10 to the power 1 10 to the
09:38 - power 1 means 10 so closest
09:41 - multiple of 10 so this number is what
09:46 - multiple oh it should be multiple of 10
09:48 - so multiple of 10 is either
09:51 - 6 70 or 6.
09:54 - 80 these are multiple of 10 but closest
09:57 - to this number is 670 so it will return
10:00 - 6 7 0.
10:04 - or one shortcut you can apply what if it
10:06 - is -1
10:08 - it should be negative in this case
10:10 - so the last last digit would be first of
10:14 - all be 0 this would be zero now it will
10:18 - round off the remaining digits
10:20 - so this digit is 4 it is less than 5 so
10:24 - it would be as it is 6 7. that's it
10:29 - I hope you got it if not let's take one
10:31 - more example if it is -2
10:33 - in this case number of ways it's minus
10:36 - two so two digits would be zero
10:40 - right now round off the remaining digits
10:43 - only one digit is remaining six and this
10:47 - is it next to six is seven seven is
10:49 - greater than 5. so the six would be
10:53 - rounded off to 7 plus 1 would be added
10:55 - to the final result because it is
10:57 - greater than 5 so it would be 7.
11:02 - you can also check with this 10 to the
11:04 - power minus number of digits minus
11:07 - number of digits is minus 2 it is minus
11:09 - 2 so now it is 2 10 to the power 2 means
11:12 - hundred
11:13 - so the closest closest multiple of 100
11:16 - so this number is obviously 700 multiple
11:20 - of 100 is either 700 600 800 something
11:23 - like this closest to this is 700.
11:27 - yes that is why it will give 700. so if
11:31 - it is negative value then it will affect
11:32 - the integer also
11:34 - right
11:36 - I hope you wrote this now next example
11:38 - is
11:39 - but if I write something like this minus
11:42 - 3
11:45 - number of digits are three so three
11:47 - would be zero zero zero
11:50 - now what
11:52 - the meaning is what
11:54 - so generally we consider it with 0.
11:58 - right so it would be one now
12:01 - or if I write something like this 10 to
12:03 - the power minus 3 means 10 to the power
12:05 - 3 means it will return
12:09 - closest multiple of thousand closest
12:10 - multiple of thousand with this is what
12:14 - thousand only
12:16 - right
12:17 - and if this number of digits did this
12:21 - value
12:22 - exceed
12:24 - here
12:26 - individual number of digits are one two
12:28 - three
12:29 - so till three it is fine if it is
12:32 - greater than 3 like minus 4
12:34 - in this case it will Return to Zero
12:37 - because closest multiple of now this
12:40 - time 10 000 is obviously it would be 0
12:42 - now
12:44 - nothing
12:45 - right okay so this is your assignment
12:47 - now pause the video and find out what
12:49 - would be the out of these two pieces
12:53 - right
12:54 - so let's see here minus 1 in that case
12:57 - this one digit would be zero now the
13:00 - remaining is two digit six six six sixty
13:02 - six
13:03 - so one would be added or not because
13:06 - this is 5 not greater than 5 not less
13:08 - than five if it is it is equal to five
13:10 - so time breaking rule is what nearest
13:12 - even integer
13:14 - so even is what six only
13:18 - because if you will add one that will be
13:20 - 7 7 67 is not even 66 is even
13:24 - so it would be as it is 66 in this case
13:28 - this would be 0 now 67 it is 5
13:35 - either it would be 67 or 68 but even is
13:38 - 68 so in this case it would be 680. now
13:42 - I hope you already means you you know uh
13:46 - completely are aware about this tie
13:47 - breaking rule so let's take one more
13:50 - example if I write something like this
13:52 - we can round off negative number also
13:54 - like if I write minus 8 divided by 3
13:57 - that is also fine 8 divided by 3 and
14:01 - minus it would be given minus 3. after
14:04 - rounding off right now if I round off
14:07 - like round minus 1.5
14:10 - it will give you
14:12 - What minus 2
14:14 - even is 2 so 1 would be added like minus
14:17 - two if I write round like if I
14:21 - round it to 2 decimal minus 8.3
14:24 - sorry 8 divided by 3 but up to two
14:26 - decimal I want to round off this number
14:28 - so it will give you minus 2.67
14:31 - right because 8 divided by 3 would be
14:33 - 2.6666 something like this
14:36 - okay so we have
14:37 - few more examples this is for your
14:40 - assignment these output you have to tell
14:42 - 6.7 6.75 up to one decimal I want to
14:46 - round off and six point eight five up to
14:48 - one decimal I want to round off but we
14:50 - have decimal number and
14:52 - negative
14:54 - this value negative number of digits in
14:56 - that case
14:57 - if it is positive it means you have to
15:00 - write a round of this number up to one
15:01 - decimal point means it will give 674.1
15:04 - only but we have negative value
15:07 - in this case what will happen
15:09 - same 10 closest multiple of 10 to the
15:14 - power minus number of visits this thing
15:16 - it will give so in this case it will be
15:18 - after decimal
15:19 - all would be zero zero zero this one
15:22 - would be 0 because if this is this is
15:23 - minus one so this is 0 and it will give
15:25 - 6 7.
15:27 - now next okay what it will return
15:31 - this is also your assignment you have to
15:33 - let me know in the comment section right
15:34 - now let's see practical of these things
15:36 - let's try out this term function on our
15:38 - laptop
15:40 - so let's create a new file
15:45 - I am giving the name round underscore
15:48 - function don't give just round dot py
15:51 - because round is inbuilt function so it
15:53 - will conflict with that thing right now
15:56 - simply we are just rounding off
16:00 - like round
16:02 - Simply Seven so it is integer only so it
16:05 - will not affect it would print seven
16:07 - only and also if you print if you check
16:11 - the type so we have a type function like
16:13 - type
16:15 - round and seven
16:19 - so the type would be int only because it
16:21 - is integer and if it is 7 up to 2
16:25 - decimal
16:27 - 7 up to two decimal
16:29 - but it will still it would be 7 only and
16:33 - the type would be in Tony because it is
16:35 - integer number is integer none not
16:37 - decimal and if I give seven point
16:41 - six six something like this up to
16:43 - decimal
16:44 - and seven point
16:47 - six six up to two decimal in that case
16:50 - it will give 7.67 and in that case class
16:54 - would be
16:56 - float right the return type would be
16:59 - float round we will return float value
17:01 - right
17:02 - but if you do not provide any number of
17:05 - digits here
17:07 - in that case it will give 8
17:10 - and the class would be internal so if
17:13 - you not if you're not provide here
17:14 - number of digits
17:16 - it will return
17:17 - it is a value
17:19 - if you provide here
17:20 - number of digits then
17:23 - either it will return into value or
17:25 - float value depending on the number you
17:27 - are providing right
17:29 - now next case is what if I write
17:33 - something like this
17:34 - 7.5
17:37 - so I hope what it will return the type
17:39 - you got 7.5 in that case it will return
17:41 - 8.
17:43 - right
17:44 - it is a tie breaking case so even
17:47 - nearest even to this number is 8 only
17:49 - but if I write like 6.5
17:53 - then it will not return 7 it will return
17:55 - 6 only because nearest even number even
17:59 - integer two this is six not seven two
18:01 - bases six or seven it can return either
18:04 - six or seven but even is six so it will
18:06 - return six so now next we can take this
18:09 - example like if I write six seven four
18:13 - two zero
18:15 - because it can be zero also so in that
18:18 - case six seven four only it will not
18:19 - affect this number if I write here 2
18:22 - then also it will not affect this number
18:24 - it would be 674 only
18:27 - but if this is negative number minus 2
18:29 - in that case it will return
18:32 - 700. multiple of 110 raised to power
18:35 - minus number of visits right so these
18:38 - two would be 0 0 and now 6 remaining
18:41 - digits would be rounded off remaining is
18:43 - 6 only
18:45 - and here we have 7 so 1 would be added
18:47 - that is 7. right if I write here minus 3
18:52 - in that case
18:54 - thousand multiple of thousand nearest
18:55 - multiple of thousand to this number is
18:57 - thousand only but now if it is greater
19:00 - than
19:02 - 3 that is 4.
19:04 - here number of digits are
19:06 - one two three so up to three it is fine
19:08 - but if you give 4 greater than 3
19:11 - then
19:12 - it would return 0.
19:15 - right
19:16 - negative number also we can round off
19:18 - negative numbers so like minus eight
19:20 - divided by three it will give you sorry
19:24 - it will give you minus 3. and if I
19:28 - divide up to two decimal point
19:31 - it will give you minus 2.67
19:34 - right
19:35 - and something like if I write minus 1.5
19:39 - it will give you minus 2.
19:43 - and if you give minus 2.5
19:47 - then
19:48 - in this case it will give you minus 2
19:50 - not minus 3 because nearest even integer
19:53 - is 2 not 3 so minus 2.5 so I hope you
19:57 - heard this is something about round
19:58 - function you can try out this function
19:59 - with different different examples and
20:00 - Rule and if you find something difficult
20:02 - and if you're not getting something then
20:03 - you can ask me so I hope you are now
20:05 - aware about the strong function how to
20:07 - use this round function in in how many
20:09 - ways you can use this if it is a tie
20:12 - breaking case special cases then how to
20:14 - how you can break that tie what is the
20:16 - rule and how you can use this with
20:18 - negative number how you can use here
20:19 - positive and 0 and negative value
20:22 - however you can round off a decimal
20:24 - number how you can round over integer
20:26 - value right
20:27 - so now in the next video we'll see F
20:30 - strings so now it's in the next video
20:31 - till then bye bye take care

Cleaned transcript:

so in the series of learning Python programming languages in the previous video we have seen one coding exercise like you have to calculate uh BMI body mass index right now in that case we have seen something like this the weight should be in kilogram and it should be considered as in height should be in meters and it should be considered as float something like this and the final output should be a whole integer not in fractional part like if I enter weight 48 and height 1.5 then directly it will give like 21.33333 something like this but I don't want this number I want whole number like 21 only integer I want for that what you have done convert this into int type conversion we have done right in this previous exercise but one more thing we can do is we can round off this number rather than just forcefully converting that into integer just round off the number right like if it is 21.3 it will give after rounding off it will give you 21. in mathematics I have I hope you have done these kind of calculation if the number is 21.67 so the after round off it should give 22 because after decimal it is greater than 5. and here it is greater than it is less than 5 that is why 21 and the nearest integer of this is 21 and the nearest whole integer to this is 22 not 21. this is type of rounding of the number right so for this thing also we have a inbuilt function in Python that is round function so in this video we'll discuss about round function what is round function and there are many thing we can do with with this round function and there are some tricky things also and some special cases also like how to break a tie if after a decimal it is 21.5 then it will give 22 or it will give to anyone these kind of cases also we will be discussing in this video right so let's see I hope now you you are aware about the this working of this round function right it is used to round off the numbers now let's see General syntax of this function how you will write just you will write round and in bracket two parameters are there two arguments one is the number if you want to round off and next is number of digits number of digits right now see these two arguments are there in this case this number this is compulsory because this is the number you want to round off suppose I want to round off this number round uh I I want to round over this number 21.33 so I'll give number 21.33 obviously that this is the number so this is compulsory but this number of digits the second argument is optional right number of digits up to which you want to round off this number if if it is three three something like this I want to round off generally you up to 2 right or right so I want to round off this number up to two decimal points up to two one two so what it will give you 21.33 because after 2 it is 3 means it is less than 5. so no updation would be there as it is it would be 21.33 right so this is what the number this is compulsory to mention and this is optional the number of digits you want to up to which you want to round off the number this is completely optional and thus value of number of digits can be positive 0 or negative right by default if you don't give anything it would be considered as 0 0 means it will round off this number to 21 only it will give integer nearest to this number right so this is General syntax of round number let's round function sorry now let's take some examples and what the sound function will return see so these are some example first one we have to we want to round the seven but this is what a complete it's an integer right so it is not been affected by this round function so directly it will give you nearest integer to 7 is 7 and the output this this this what it will return 7 it will return an integer the class or the type if you you know find out using type function that would be in in the in that case the class in this case we have specified number of digits yes but it is integer not decimal so it will not affect this thing and directly it will return 7 only and the output and the type of this would be int so if n digits are not given so it will return an integer right if n digits are given in that case what it will return if it is an integer value then it will return an integer if it is a float something like this this is the case 2.66 this is float and we have given n digits right so it will return 2.67 so the output of this return value this type would be float in this case it would be float in this case it would be returned so it will return either into or float it will depend how you are using that thing right in this case we are giving 0 but we are providing n digits although it's 0 we are providing so it will return 3.0 still it is a float not int if you don't provide in that case it would be end in this case it is 7.61 but we are not providing number of results second argument is nothing right so in this case it will return eight now the output this class of this or the gray type of this would be integer so I hope you got when it will turn into value when it will turn a float value the type of that return value would be intent float right now one case has some special cases are also there like tiebreaking cases if I have something like this print around 7.5 we have seen if this value is greater than 5 means plus 1 would be added to the final result means it's seven so one would be added because nearest integer two this is eight not seven if this is 7.41 it will give seven nearest integer to this is 7. right if the value is less than 5 but the value is if 5 in that case what it will return it can return 8 also seven also so two cases are there so for type breaking in Python they have used it will return the nearest even integer E1 so 7.5 either it will give two cases seven or eight but even is eight so in this case it will return 8. but if I have written something like this round 6.5 in this case what it will return two cases can be there either 6 or 7. so nearest even integer is 6. nearest even integer to this number is 6 Note 7 so in this case it will return six not seven one would not be added to the final value so this is the in Python they have used for tie breaking in everywhere this rule will be used for time breaking right nearest even integer it will return right so for you one question is what would be the output of these two cases round 11.5 and 12.5 this is for your assignment right next is okay we are we will round off integers right so let's take some examples now see here I am using integers not floating Point number so and this this is the number this is number of digits you want to round off so this number the day type of this should be like it support int and Float but if you provide string something like this it will give error right so we cannot provide string here that should be interflow but it will not affect this integer value if number of digits are positive it is 2 it is positive so it will not affect this number it will directly return as it is the number if it is 0 then also it will not affect the number it will return six seven four but if you provide this number of widgets that value in minus negative value that will affect this number now in in which case how it will return how it will affect this thing what it will return now so it is minus 1 right so generally it round function Returns what multiple of the number closest to the multiple of 10 to the power minus number of digits this thing so if I write 10 to the power here number of digits are minus 1 so minus minus 1. so 10 to the power 1 10 to the power 1 means 10 so closest multiple of 10 so this number is what multiple oh it should be multiple of 10 so multiple of 10 is either 6 70 or 6. 80 these are multiple of 10 but closest to this number is 670 so it will return 6 7 0. or one shortcut you can apply what if it is 1 it should be negative in this case so the last last digit would be first of all be 0 this would be zero now it will round off the remaining digits so this digit is 4 it is less than 5 so it would be as it is 6 7. that's it I hope you got it if not let's take one more example if it is 2 in this case number of ways it's minus two so two digits would be zero right now round off the remaining digits only one digit is remaining six and this is it next to six is seven seven is greater than 5. so the six would be rounded off to 7 plus 1 would be added to the final result because it is greater than 5 so it would be 7. you can also check with this 10 to the power minus number of digits minus number of digits is minus 2 it is minus 2 so now it is 2 10 to the power 2 means hundred so the closest closest multiple of 100 so this number is obviously 700 multiple of 100 is either 700 600 800 something like this closest to this is 700. yes that is why it will give 700. so if it is negative value then it will affect the integer also right I hope you wrote this now next example is but if I write something like this minus 3 number of digits are three so three would be zero zero zero now what the meaning is what so generally we consider it with 0. right so it would be one now or if I write something like this 10 to the power minus 3 means 10 to the power 3 means it will return closest multiple of thousand closest multiple of thousand with this is what thousand only right and if this number of digits did this value exceed here individual number of digits are one two three so till three it is fine if it is greater than 3 like minus 4 in this case it will Return to Zero because closest multiple of now this time 10 000 is obviously it would be 0 now nothing right okay so this is your assignment now pause the video and find out what would be the out of these two pieces right so let's see here minus 1 in that case this one digit would be zero now the remaining is two digit six six six sixty six so one would be added or not because this is 5 not greater than 5 not less than five if it is it is equal to five so time breaking rule is what nearest even integer so even is what six only because if you will add one that will be 7 7 67 is not even 66 is even so it would be as it is 66 in this case this would be 0 now 67 it is 5 either it would be 67 or 68 but even is 68 so in this case it would be 680. now I hope you already means you you know uh completely are aware about this tie breaking rule so let's take one more example if I write something like this we can round off negative number also like if I write minus 8 divided by 3 that is also fine 8 divided by 3 and minus it would be given minus 3. after rounding off right now if I round off like round minus 1.5 it will give you What minus 2 even is 2 so 1 would be added like minus two if I write round like if I round it to 2 decimal minus 8.3 sorry 8 divided by 3 but up to two decimal I want to round off this number so it will give you minus 2.67 right because 8 divided by 3 would be 2.6666 something like this okay so we have few more examples this is for your assignment these output you have to tell 6.7 6.75 up to one decimal I want to round off and six point eight five up to one decimal I want to round off but we have decimal number and negative this value negative number of digits in that case if it is positive it means you have to write a round of this number up to one decimal point means it will give 674.1 only but we have negative value in this case what will happen same 10 closest multiple of 10 to the power minus number of visits this thing it will give so in this case it will be after decimal all would be zero zero zero this one would be 0 because if this is this is minus one so this is 0 and it will give 6 7. now next okay what it will return this is also your assignment you have to let me know in the comment section right now let's see practical of these things let's try out this term function on our laptop so let's create a new file I am giving the name round underscore function don't give just round dot py because round is inbuilt function so it will conflict with that thing right now simply we are just rounding off like round Simply Seven so it is integer only so it will not affect it would print seven only and also if you print if you check the type so we have a type function like type round and seven so the type would be int only because it is integer and if it is 7 up to 2 decimal 7 up to two decimal but it will still it would be 7 only and the type would be in Tony because it is integer number is integer none not decimal and if I give seven point six six something like this up to decimal and seven point six six up to two decimal in that case it will give 7.67 and in that case class would be float right the return type would be float round we will return float value right but if you do not provide any number of digits here in that case it will give 8 and the class would be internal so if you not if you're not provide here number of digits it will return it is a value if you provide here number of digits then either it will return into value or float value depending on the number you are providing right now next case is what if I write something like this 7.5 so I hope what it will return the type you got 7.5 in that case it will return 8. right it is a tie breaking case so even nearest even to this number is 8 only but if I write like 6.5 then it will not return 7 it will return 6 only because nearest even number even integer two this is six not seven two bases six or seven it can return either six or seven but even is six so it will return six so now next we can take this example like if I write six seven four two zero because it can be zero also so in that case six seven four only it will not affect this number if I write here 2 then also it will not affect this number it would be 674 only but if this is negative number minus 2 in that case it will return 700. multiple of 110 raised to power minus number of visits right so these two would be 0 0 and now 6 remaining digits would be rounded off remaining is 6 only and here we have 7 so 1 would be added that is 7. right if I write here minus 3 in that case thousand multiple of thousand nearest multiple of thousand to this number is thousand only but now if it is greater than 3 that is 4. here number of digits are one two three so up to three it is fine but if you give 4 greater than 3 then it would return 0. right negative number also we can round off negative numbers so like minus eight divided by three it will give you sorry it will give you minus 3. and if I divide up to two decimal point it will give you minus 2.67 right and something like if I write minus 1.5 it will give you minus 2. and if you give minus 2.5 then in this case it will give you minus 2 not minus 3 because nearest even integer is 2 not 3 so minus 2.5 so I hope you heard this is something about round function you can try out this function with different different examples and Rule and if you find something difficult and if you're not getting something then you can ask me so I hope you are now aware about the strong function how to use this round function in in how many ways you can use this if it is a tie breaking case special cases then how to how you can break that tie what is the rule and how you can use this with negative number how you can use here positive and 0 and negative value however you can round off a decimal number how you can round over integer value right so now in the next video we'll see F strings so now it's in the next video till then bye bye take care
