With timestamps:

00:00 - so in the series of learning c
00:01 - programming we are discussing functions
00:02 - in c we have discussed function
00:04 - declaration and function definition in
00:06 - detail with proper program and you know
00:08 - some practical also now we are left with
00:10 - function calling so here we will discuss
00:13 - two types you can call function uh you
00:15 - know by two types call by value and call
00:18 - by reference these two are very
00:20 - important when it comes to function
00:21 - calling so this in this video i'll talk
00:23 - about call by value and call by
00:24 - reference method to call a function with
00:27 - proper program i'll show you first of
00:29 - all you'll see the program here then
00:30 - i'll show you practically on my laptop
00:32 - right before that just want to tell you
00:34 - one thing if you are looking for a great
00:36 - career in software development then you
00:37 - must think about the aspects like what's
00:39 - trending in the industry the questions
00:41 - being asked in the interviews how to
00:43 - improve your courses frankly so an
00:44 - academy brings you a platform where you
00:46 - can get access to weekly shows which you
00:48 - can watch live
00:49 - and the host of these shows are seven
00:51 - star coders on codeshare and are working
00:54 - in the top companies like google amazon
00:56 - linkedin
00:57 - flipkart and having years of experience
01:00 - so they'll be covering the content which
01:02 - would be really helpful for your career
01:04 - like in live episodes you can ask take a
01:06 - charge top questions being asked in the
01:08 - interviews and the industry leaders
01:09 - about the recruitment process top
01:11 - startups and mncs what is the
01:12 - eligibility criteria and how to apply
01:14 - for them you can also get your resume
01:16 - reviewed by the experts not only this
01:19 - you can also participate in mock
01:20 - interviews and learn courses on
01:22 - programming languages cloud computing
01:24 - blockchain and crypto data analytics
01:26 - and have you ever thought about the
01:28 - hiring process of the top startups and
01:30 - mncs then there is a show in which anuj
01:32 - will host prominent hr leaders of the
01:35 - tech industry and you will get to
01:37 - understand the a2z recruitment process
01:39 - internal structures and work culture of
01:42 - top companies
01:43 - key product offering and interesting
01:45 - projects being worked on by the hr's so
01:48 - the benefit of the show is what you will
01:49 - hear directly from the companies their
01:51 - hr's and tech teams on what they are
01:53 - looking for in individuals while
01:54 - acquiring people so the detail of this
01:56 - show and the batch you will find in the
01:58 - link that i'll put in the description
01:59 - box of this video and don't forget to
02:01 - use my code jkl10 to get 10 extra
02:03 - discount on your subscription
02:05 - so now back to the topic call by when
02:07 - you call my reference before going to
02:09 - this topic just want to tell you one
02:10 - thing what is function call i think uh
02:12 - if you have watched my previous videos
02:14 - then you are aware about the function
02:15 - calling there we have give we have taken
02:18 - one example of
02:20 - sum sum of two numbers so function
02:21 - calling is what simply you can pass here
02:24 - suppose i am passing argument five and
02:26 - seven right
02:28 - no return type only function name and
02:30 - the arguments or the value of the
02:31 - arguments or if you don't want to pass
02:33 - directly the value simply you can also
02:35 - pass the name of the argument like x and
02:37 - y here i can take in x is equal to 5 y
02:40 - is equal to 7
02:42 - function calling we are you know calling
02:44 - this in suppose main function so here
02:46 - you can write down this thing
02:48 - right and then definition you can item
02:50 - definition and before before using this
02:53 - if you are writing the definition
02:56 - after this calling here
02:58 - after the scrolling then you must have
03:01 - to specify here the function declaration
03:03 - otherwise whatever you will get that we
03:04 - have discussed in the video that in that
03:06 - video when we were discussing function
03:08 - declaration right and
03:10 - if you define the function first and
03:12 - then you are using main function and you
03:14 - are calling that function in that case
03:16 - no need to declare the function right
03:18 - you will not get any warning or any you
03:20 - know warning like implicit declaration
03:22 - of that function
03:24 - right
03:25 - so
03:26 - now here
03:27 - you can call the function by value and
03:29 - by reference now what is difference
03:31 - between these two see simply i am taking
03:33 - this function i am not taking this
03:35 - function
03:36 - suppose i am taking simply i am taking x
03:38 - is equal to 5 y is equal to 7 and here i
03:40 - am taking our own function name is fun
03:43 - right
03:44 - and
03:45 - here what i want to do i want to pass x
03:48 - and y
03:49 - this is function calling
03:51 - right
03:52 - now this is called by value or call by
03:54 - reference that i'll
03:55 - discuss now here i am defining this
03:58 - function so i am writing void
04:00 - fun
04:02 - and
04:02 - int
04:04 - x
04:04 - in
04:05 - y
04:06 - you can take same variable name or you
04:08 - can take different suppose i am taking a
04:10 - and b
04:11 - its up to you or better to take same
04:13 - variable name x and y
04:15 - to get a better understanding of call by
04:18 - value and call by a reference method
04:20 - right
04:21 - so now in here i am writing x is equal
04:24 - to 7 and y is equal to
04:26 - 5. right and here i am printing
04:30 - value of x
04:31 - and
04:32 - y
04:35 - that's it and after this function
04:37 - calling here also i want to print
04:40 - value of x and y
04:46 - so now here i am calling this function
04:49 - so and i am defining this function after
04:51 - calling so in this case better to
04:53 - declare function first to you know avoid
04:57 - to skip that situation implicit
04:58 - declaration of the function that we have
05:00 - already discussed when we were
05:01 - discussing function declaration in c you
05:03 - must watch out that video first right
05:05 - what kind of error you will get if you
05:07 - not declare the function here but if you
05:09 - define the function here and after that
05:11 - you are calling that function there no
05:13 - need there is no need to declare the
05:14 - function at that time right
05:17 - because here i am calling the function
05:19 - here i am using the function and before
05:22 - the use i am not defining and neither am
05:24 - defining nor i am declaring
05:27 - we always declare like we when we first
05:29 - use the variables we always declare
05:31 - those variables first
05:34 - right
05:35 - so before using either define that is
05:38 - fine if you don't define then
05:40 - declare that function
05:42 - so here i am declaring that function
05:44 - void
05:45 - fun
05:46 - and here just
05:48 - write down what the data type of the
05:51 - arguments in no need to specify the name
05:53 - of the argument like a into b or if you
05:56 - specify here in a into b that is also
05:58 - fine
05:59 - you will not get any error right so now
06:02 - whenever you run this program control
06:03 - will go here first of all main function
06:05 - and in
06:08 - ram some memory would be allocated to
06:10 - this main function so in main we have x
06:12 - and y two variable x
06:14 - and y in x we have five and y we have
06:17 - seven suppose address is thousand
06:19 - and is this is one zero four six we
06:20 - don't know the address i'm just taking
06:22 - it for simplicity purpose now next line
06:24 - is i'm calling the function fun x y and
06:26 - i'm passing x and y
06:28 - see
06:29 - these are known as arguments or you can
06:32 - say actual parameters right and
06:35 - here and here these x and y this x and y
06:38 - this is known as
06:40 - parameters this x and y is known as
06:42 - arguments
06:44 - in function calling whatever you pass
06:46 - that is known as argument in function
06:48 - definition and function declaration
06:50 - these are known as parameters or
06:52 - parameters are also known as formal
06:54 - parameters and arguments are also known
06:56 - as actual parameters i hope uh you now
06:59 - this difference is clear to you right
07:02 - because many students get you know
07:03 - confused in this term parameter argument
07:06 - formal parameter actual parameter right
07:09 - so now here this is function calling so
07:11 - now control will go to the definition of
07:13 - the function and now it is going to
07:15 - match the definition with declaration
07:17 - return type matching function name
07:19 - matching
07:20 - data type of the argument int matching
07:23 - two arguments we have two or here we
07:25 - have both are matching so now
07:28 - whenever control will go to here this
07:30 - function
07:31 - now the some memory would be allocated
07:33 - to this function also
07:34 - right during execution
07:36 - now here we have
07:38 - here also we have x and y
07:40 - so now here in this x and y what we have
07:44 - in function calling i am passing value x
07:47 - and y so value of x is 5 and value of y
07:50 - is 7 so in x we have 5 and y we have 7
07:54 - but now whenever control will enter here
07:56 - now x becomes 7 because i am assigning x
07:59 - is equal to 7 y is equal to 5 and y
08:01 - becomes 5
08:03 - and i am printing now x and y so what
08:05 - output you will get x is equal to 7 y is
08:07 - equal to 5. see it's not swapping of the
08:10 - you know
08:11 - variables
08:12 - i'm just assigning the value swapping
08:14 - that function is different the method is
08:17 - different process is different so now
08:19 - whenever controller will reach to here
08:20 - i'm not writing any return statement so
08:22 - this closing braces will act as return
08:24 - word return so now whenever control will
08:26 - reach to this closing braces the control
08:28 - will go back to where you are calling
08:30 - this function so here i am calling this
08:31 - function so now the working of this
08:33 - calling function is over now you have
08:35 - any other line after this yes i have
08:37 - printf this one so here also i am
08:39 - printing x and y value so here what
08:41 - value would be printed maybe you are
08:42 - thinking
08:44 - we have changed the value of x and y so
08:46 - it would print 7 and 5 but no
08:50 - here in this x and y what value would be
08:52 - printed whatever the value in this main
08:55 - x is equal to 5
08:57 - and y is equal to 7
08:59 - so this is what call by value
09:01 - see
09:03 - whenever i call a student by their name
09:04 - like i am calling rahul rahul so i am
09:07 - the the student by his name
09:10 - if i'm calling i don't know the name of
09:12 - the student and i'm saying i'm you know
09:14 - calling the name by that you know red
09:16 - t-shirt
09:17 - so i'm calling the student by the color
09:19 - of the t-shirt or maybe i am calling you
09:22 - know like this the last venture
09:25 - right
09:26 - so i am calling the student by the
09:27 - address
09:28 - right so here call by well means we are
09:32 - calling the function by
09:34 - passing the value only
09:36 - so here i am passing the value of 5 x
09:38 - and y 5 and 7 so now what the mechanism
09:41 - is what behind the
09:43 - behind the process behind the scene is
09:45 - what what is happening
09:47 - the value would be
09:48 - copied where
09:51 - here in these parameters so here i am
09:53 - taking x and y you can also take a and b
09:55 - that is also fine
09:57 - so these x and y are
09:59 - local to this function only so the value
10:02 - would be copied 5
10:04 - first of all 5 would be copied
10:07 - 5 and then here 7 would be copied
10:11 - right
10:12 - but now i am processing
10:14 - i am doing some processing within this
10:15 - function processing is what in x i am
10:18 - changing in x i am storing
10:20 - 7 in y i am storing 5
10:24 - right
10:24 - but
10:25 - whatever process you will do on these
10:28 - variables that would be reflected
10:31 - within this scope only
10:34 - because these are local variables
10:37 - once control will go out of this
10:40 - function
10:40 - out of this scope means
10:44 - that
10:45 - reflection would not that that you know
10:47 - that change would not be reflected
10:50 - where
10:51 - here where you are calling this function
10:55 - because this is what here you get copy
10:58 - of these variables so
11:00 - within this copy only you are changing
11:04 - right that would not be reflected here
11:06 - the actual arguments are here
11:09 - so that result that change would not be
11:12 - reflected here it's just a copy of these
11:15 - variables right
11:17 - and these are stored in different
11:18 - different memory location memory
11:20 - location is 2000 suppose 2046 and this
11:22 - memory location is different
11:25 - so if you if you print x and y value
11:27 - here within this function then only you
11:29 - will get
11:30 - this changed value
11:32 - once control will reach to here
11:34 - means
11:36 - that change would not be reflected here
11:38 - so now here x and y values are within
11:42 - this main do you have any x and y value
11:44 - yes i have five and seven so here you
11:46 - will get five and seven so this is you
11:49 - can say drawback of call by value
11:52 - you have done some processing
11:54 - but
11:55 - once control will go back to the calling
11:57 - function
11:58 - all that processing all that change
12:02 - is gone vanished
12:04 - so that is why
12:06 - we use call by reference i want
12:09 - whenever i do some processing whenever i
12:11 - do some change in the definition of the
12:13 - function that should be reflected
12:15 - wherever i call that function in that
12:17 - program or in that application that
12:19 - should be reflected
12:21 - here also in calling like in main
12:23 - functioning if i'm calling or in if any
12:25 - other function i am calling that should
12:26 - be reflected everywhere
12:28 - in that program or in that application
12:31 - if you use call by value that would not
12:33 - be reflected so to get rid of this
12:35 - situation to solve this problem
12:37 - we use the invented call by reference
12:40 - method
12:42 - so call by reference reference means
12:44 - address so you are calling the function
12:45 - by passing the address
12:47 - here you are passing the value call by
12:50 - reference means here you will pass
12:51 - address
12:52 - so in this program if you
12:55 - modify this program call by reference so
12:57 - here we will pass address of x and y
13:00 - means rather than passing 5 and 7 we are
13:03 - passing this address address passing if
13:05 - you will do then you will use obviously
13:07 - address of operator address of x
13:09 - address of y
13:12 - right
13:13 - so if you are passing this
13:16 - means we will whenever function will
13:18 - call this control will come to here this
13:21 - will go to here so this passing address
13:23 - you are passing means thousand
13:26 - and one zero four six
13:28 - so to store this address
13:31 - this these are normal variables they are
13:33 - not able to store the address which
13:34 - variable can store address pointer
13:36 - variable that we have discussed pointer
13:38 - is a special type of variable that will
13:40 - store address of some other variable so
13:42 - here rather than defining it simply in
13:44 - text and you have to take pointers
13:46 - pointer means just do what s trick
13:49 - x
13:51 - s trick
13:52 - y
13:53 - so maybe you are thinking here x and y
13:56 - are normal variables here these are
13:57 - pointers so this will give error no
14:00 - because scope of these x and y are
14:03 - local to this main means within these
14:05 - curly braces
14:07 - scope of this x and y these pointer
14:09 - variables are within this curly braces
14:12 - so they are not going to mismatch it's
14:14 - fine they will not give any error it's
14:16 - like
14:17 - baby this is one house and this is your
14:20 - neighbor house this is your house
14:22 - and in your house
14:24 - suppose you can say rahul
14:27 - is name of
14:29 - any small kid
14:30 - right and here
14:32 - in your neighbor house rahula's name of
14:35 - uh maybe
14:36 - an older person
14:38 - may be father of the small kids so that
14:40 - is fine obviously they are not going to
14:42 - reflect because both are in different
14:44 - houses
14:46 - so it's possible i hope you are able to
14:48 - relate this real life
14:49 - example with this
14:51 - problem or maybe not
14:54 - but see
14:55 - now here this x and y
14:58 - now what value would be stored in x and
15:00 - y whenever the control will go here you
15:02 - are passing thousand so thousand would
15:04 - be stored in x
15:05 - here you are passing one zero four six
15:07 - one zero four six would be stored in y
15:09 - these are pointer variable now so now
15:11 - here situation is
15:12 - this x is pointing to
15:15 - here
15:16 - this y is pointing to
15:18 - here
15:20 - right
15:21 - so these are now interlinked
15:25 - means whatever change you will do
15:28 - using these addresses that would be
15:29 - reflected here
15:30 - see the five and seven
15:33 - the values are only one there is no
15:35 - other copy
15:36 - like in previous case here we have
15:38 - addresses of these variables so now
15:41 - you cannot directly say x is equal to
15:43 - seven it will give error because x is in
15:44 - a pointer variable you cannot assign any
15:46 - integer value like this so what you can
15:48 - do here
15:49 - here i want to assign seven and here
15:52 - five i want to access this location
15:55 - so using this address how you can access
15:58 - a strict
15:59 - x
16:00 - a strict means here it is acting as
16:02 - indirection operator
16:04 - a strict y is equal to five and if you
16:06 - want to print here the value then simply
16:10 - obviously x and y you cannot write if
16:11 - you write x and y in x you have
16:13 - thousands so it will print address but i
16:15 - want to print the value so a strict x
16:18 - and
16:19 - asterisk y
16:21 - right
16:23 - here if you want to print no need to
16:24 - write down a strict x a s trick y
16:26 - because in this one in this main in this
16:29 - scope x and y are simple variables so
16:31 - here simply write x and y no need to
16:33 - write down s trig x s trick y if you
16:36 - write down here s trick x is trick y
16:39 - it will give error
16:40 - because within this main function
16:43 - x and y are normal variables and strict
16:46 - x you are
16:47 - writing means oversight will give l
16:50 - strick x means indirection operator is a
16:52 - value at this address
16:54 - but in x we have 5 only there is no
16:56 - address like x is normal variable it's
16:58 - not pointer
16:59 - you cannot access like a strict x so
17:02 - here you will use x and y only but here
17:04 - you will use a strict x s require i hope
17:07 - you would why
17:09 - this case the difference right
17:11 - so now
17:13 - what is the process now whenever this
17:14 - will call now this value has been
17:17 - addressed has been stored here now
17:19 - strict x
17:20 - means value at this address
17:23 - asterisk x is 1 000
17:27 - so value at thousand
17:29 - now thousand is what this one value at
17:31 - thousand is five so here i am storing
17:33 - seven so now here i am storing seven s
17:36 - require value add one zero four six here
17:39 - so here i am storing five
17:41 - using the pointer i am directly
17:43 - accessing the original values
17:47 - i am directly changing the original
17:48 - values i am not changing the copy
17:51 - right so now here you will print
17:53 - directly stick x means value at 1000 is
17:56 - now 7 so 7 would be printed 5 could be
17:58 - printed now control will go back to here
18:01 - once here in the closing this is what
18:03 - closing of this function
18:05 - now
18:06 - the working of this is finished now next
18:09 - line print f x and y
18:11 - now here
18:13 - x value is what 7 7 would be printed y
18:15 - value is 5 5 would be printed
18:19 - so whatever change you have done within
18:21 - this function now that change has been
18:23 - reflected
18:24 - out of this scope
18:27 - right beyond this scope
18:29 - here you are calling this so here also
18:31 - it is changing the change has been
18:33 - reflected here also
18:35 - so here x is 7 y is 5. so this is what
18:38 - the difference between call by value and
18:40 - call my reference
18:42 - right i hope you got the advantage also
18:45 - uh the advantages of call by reference
18:48 - right if you want to know if you want
18:51 - that the the whatever processing you
18:53 - whatever change you will do in the
18:54 - definition of that function that could
18:56 - be reflected
18:58 - in anywhere in the program in the
18:59 - application so you should call the
19:02 - function by reference not call by value
19:04 - or here you can also take like if you
19:07 - don't want to take x and y you can take
19:09 - ptr1
19:10 - ptr2
19:11 - that is also fine here you can access
19:13 - asterisk ptr1 asterisk ptr2
19:18 - so here you will write down what
19:20 - asterisk ptr1
19:21 - asterisk ptr2 means indirectly you are
19:23 - accessing these values and here simply
19:25 - obviously you will write x and y
19:27 - right that is also fine
19:30 - and here one more thing see
19:32 - here also i think you must have noticed
19:35 - the mistake
19:36 - if you have noticed the mistake then
19:38 - please write down in the comment box or
19:40 - i'm going to tell the mistake here see
19:42 - here i am
19:43 - calling it call by reference i'm using
19:45 - so here in the definition part what
19:47 - these are pointer variable but in
19:49 - declaration i am simply writing intent
19:51 - in simple and simple normal variables so
19:54 - it will give error
19:55 - right so here also the data type must be
19:59 - in
20:00 - asterisk
20:01 - and
20:02 - s3
20:03 - obviously the pointer
20:05 - in the declaration also
20:07 - because here i am taking pointer so it
20:09 - should be pointer here also it is in
20:11 - star
20:12 - otherwise it will give error so now let
20:14 - me show you practical of this thing
20:16 - so now let me create a file
20:20 - function call
20:22 - dot c
20:23 - right
20:29 - and here first of all what
20:32 - i am declaring a function for it fun
20:35 - here i am going to pass
20:38 - just two data type the argument like uh
20:40 - sorry its parameter it is known as
20:43 - parameter here and it should be
20:46 - separated by
20:47 - comma
20:48 - right
20:50 - and now here i'm writing
20:52 - main function
20:54 - and in main would mean what i'm doing
20:59 - i'm taking in x
21:01 - is equal to 5
21:04 - and y is equal to 7
21:07 - right
21:08 - here i'm calling 1 and i'm passing
21:11 - x and y
21:13 - here these x and y are known as
21:14 - arguments and after passing i am
21:17 - printing the value x is equal to
21:19 - percentage d
21:21 - and y is equal to percentage d two
21:23 - values
21:25 - right
21:25 - x comma y
21:28 - right
21:29 - and before this i am writing one more
21:31 - line just to get a better understanding
21:32 - like i am writing inside
21:36 - main
21:36 - or main is also known as here
21:39 - calling function
21:41 - right calling and cold function also i
21:43 - have told you in previous video
21:45 - right and after this i am defining the
21:48 - function so void
21:50 - fun
21:51 - here i am taking
21:53 - parameters in x
21:56 - hint y
21:57 - name you can take x y a b a b m and any
22:01 - name you can take
22:02 - right
22:04 - because these are local to this function
22:05 - only so it doesn't matter so now here
22:09 - what i am writing x is equal to 7
22:13 - and
22:14 - y is equal to 5
22:17 - and here also i am printing i am first
22:19 - of all i am writing inside
22:22 - cold function
22:26 - inside of
22:27 - fun
22:29 - and here this one is what cold function
22:31 - right and main is what calling function
22:35 - and now i am printing the value
22:37 - of
22:39 - x and y
22:51 - right
22:52 - now let me run this
22:54 - and see what output you get better to
22:57 - write down here like uh no
22:59 - for
23:00 - formatting purpose here i'm writing
23:02 - slash in
23:04 - and here also i'm adding
23:06 - slashing
23:08 - right
23:09 - and after this also slashing
23:11 - because i just want that all these
23:13 - output should be printed in
23:16 - new new lines
23:18 - not in the same line right
23:21 - so c
23:22 - first x and y would be executed this
23:24 - this line would be executed first like
23:26 - this one inside this cold function so
23:28 - that would print x is equal to 7 y is
23:30 - equal to
23:31 - 5 so see x is equal to 7 y is equal to 5
23:34 - inside fun function hold function inside
23:37 - main function
23:39 - x is still 5 and y is
23:41 - 7
23:42 - because this is called by value we are
23:44 - just doing some processing the changing
23:46 - in the
23:48 - copy of the original value not in the
23:50 - original value original value is in main
23:51 - function so in main function if you
23:53 - print the original value would be
23:54 - printed that is x and y and that is 5
23:56 - and 7
23:57 - right
23:58 - now call by reference so now here i am
24:01 - passing address
24:04 - address of x and address of y
24:07 - right
24:08 - so
24:09 - if you are passing address then here it
24:11 - should be
24:12 - strict
24:14 - there should be pointer variable to
24:16 - store that address normal variables
24:17 - cannot store
24:19 - and here
24:21 - i am changing i am accessing the
24:22 - location using pointer so that is why we
24:24 - are using indirection operator
24:27 - and here if you are
24:28 - printing this send then you have to
24:30 - write strict s trick
24:33 - but if you will run it then it will give
24:35 - error because
24:37 - see what error you will get because we
24:39 - are not changing the declaration of the
24:41 - function see conflicting type for fun
24:44 - see here notice what expected end
24:47 - in the third line expected
24:50 - argument should be in but
24:52 - argument is of type in star but see here
24:54 - argument you are actually passing is of
24:56 - type in star because you are passing
24:58 - address so argument is of type in star
25:01 - so here
25:02 - you have to
25:04 - change this also and start type should
25:06 - be in star because this type should be
25:08 - matching in declaration and definition
25:11 - right
25:13 - so now run this
25:17 - see inside fun
25:19 - in cold function now x and y are 7 and 5
25:23 - and inside main also x and y are 7 and
25:26 - 5.
25:27 - now we are calling by reference by the
25:29 - address so
25:31 - now you are changing the value
25:33 - in the original value in the main
25:35 - function we are accessing the original
25:37 - value by the address
25:39 - right so this is the difference between
25:40 - call by value and call by reference i
25:42 - hope you got this difference so now in
25:43 - the next video we will see some problems
25:45 - on functions and i'll see the next video
25:46 - till then bye take care

Cleaned transcript:

so in the series of learning c programming we are discussing functions in c we have discussed function declaration and function definition in detail with proper program and you know some practical also now we are left with function calling so here we will discuss two types you can call function uh you know by two types call by value and call by reference these two are very important when it comes to function calling so this in this video i'll talk about call by value and call by reference method to call a function with proper program i'll show you first of all you'll see the program here then i'll show you practically on my laptop right before that just want to tell you one thing if you are looking for a great career in software development then you must think about the aspects like what's trending in the industry the questions being asked in the interviews how to improve your courses frankly so an academy brings you a platform where you can get access to weekly shows which you can watch live and the host of these shows are seven star coders on codeshare and are working in the top companies like google amazon linkedin flipkart and having years of experience so they'll be covering the content which would be really helpful for your career like in live episodes you can ask take a charge top questions being asked in the interviews and the industry leaders about the recruitment process top startups and mncs what is the eligibility criteria and how to apply for them you can also get your resume reviewed by the experts not only this you can also participate in mock interviews and learn courses on programming languages cloud computing blockchain and crypto data analytics and have you ever thought about the hiring process of the top startups and mncs then there is a show in which anuj will host prominent hr leaders of the tech industry and you will get to understand the a2z recruitment process internal structures and work culture of top companies key product offering and interesting projects being worked on by the hr's so the benefit of the show is what you will hear directly from the companies their hr's and tech teams on what they are looking for in individuals while acquiring people so the detail of this show and the batch you will find in the link that i'll put in the description box of this video and don't forget to use my code jkl10 to get 10 extra discount on your subscription so now back to the topic call by when you call my reference before going to this topic just want to tell you one thing what is function call i think uh if you have watched my previous videos then you are aware about the function calling there we have give we have taken one example of sum sum of two numbers so function calling is what simply you can pass here suppose i am passing argument five and seven right no return type only function name and the arguments or the value of the arguments or if you don't want to pass directly the value simply you can also pass the name of the argument like x and y here i can take in x is equal to 5 y is equal to 7 function calling we are you know calling this in suppose main function so here you can write down this thing right and then definition you can item definition and before before using this if you are writing the definition after this calling here after the scrolling then you must have to specify here the function declaration otherwise whatever you will get that we have discussed in the video that in that video when we were discussing function declaration right and if you define the function first and then you are using main function and you are calling that function in that case no need to declare the function right you will not get any warning or any you know warning like implicit declaration of that function right so now here you can call the function by value and by reference now what is difference between these two see simply i am taking this function i am not taking this function suppose i am taking simply i am taking x is equal to 5 y is equal to 7 and here i am taking our own function name is fun right and here what i want to do i want to pass x and y this is function calling right now this is called by value or call by reference that i'll discuss now here i am defining this function so i am writing void fun and int x in y you can take same variable name or you can take different suppose i am taking a and b its up to you or better to take same variable name x and y to get a better understanding of call by value and call by a reference method right so now in here i am writing x is equal to 7 and y is equal to 5. right and here i am printing value of x and y that's it and after this function calling here also i want to print value of x and y so now here i am calling this function so and i am defining this function after calling so in this case better to declare function first to you know avoid to skip that situation implicit declaration of the function that we have already discussed when we were discussing function declaration in c you must watch out that video first right what kind of error you will get if you not declare the function here but if you define the function here and after that you are calling that function there no need there is no need to declare the function at that time right because here i am calling the function here i am using the function and before the use i am not defining and neither am defining nor i am declaring we always declare like we when we first use the variables we always declare those variables first right so before using either define that is fine if you don't define then declare that function so here i am declaring that function void fun and here just write down what the data type of the arguments in no need to specify the name of the argument like a into b or if you specify here in a into b that is also fine you will not get any error right so now whenever you run this program control will go here first of all main function and in ram some memory would be allocated to this main function so in main we have x and y two variable x and y in x we have five and y we have seven suppose address is thousand and is this is one zero four six we don't know the address i'm just taking it for simplicity purpose now next line is i'm calling the function fun x y and i'm passing x and y see these are known as arguments or you can say actual parameters right and here and here these x and y this x and y this is known as parameters this x and y is known as arguments in function calling whatever you pass that is known as argument in function definition and function declaration these are known as parameters or parameters are also known as formal parameters and arguments are also known as actual parameters i hope uh you now this difference is clear to you right because many students get you know confused in this term parameter argument formal parameter actual parameter right so now here this is function calling so now control will go to the definition of the function and now it is going to match the definition with declaration return type matching function name matching data type of the argument int matching two arguments we have two or here we have both are matching so now whenever control will go to here this function now the some memory would be allocated to this function also right during execution now here we have here also we have x and y so now here in this x and y what we have in function calling i am passing value x and y so value of x is 5 and value of y is 7 so in x we have 5 and y we have 7 but now whenever control will enter here now x becomes 7 because i am assigning x is equal to 7 y is equal to 5 and y becomes 5 and i am printing now x and y so what output you will get x is equal to 7 y is equal to 5. see it's not swapping of the you know variables i'm just assigning the value swapping that function is different the method is different process is different so now whenever controller will reach to here i'm not writing any return statement so this closing braces will act as return word return so now whenever control will reach to this closing braces the control will go back to where you are calling this function so here i am calling this function so now the working of this calling function is over now you have any other line after this yes i have printf this one so here also i am printing x and y value so here what value would be printed maybe you are thinking we have changed the value of x and y so it would print 7 and 5 but no here in this x and y what value would be printed whatever the value in this main x is equal to 5 and y is equal to 7 so this is what call by value see whenever i call a student by their name like i am calling rahul rahul so i am the the student by his name if i'm calling i don't know the name of the student and i'm saying i'm you know calling the name by that you know red tshirt so i'm calling the student by the color of the tshirt or maybe i am calling you know like this the last venture right so i am calling the student by the address right so here call by well means we are calling the function by passing the value only so here i am passing the value of 5 x and y 5 and 7 so now what the mechanism is what behind the behind the process behind the scene is what what is happening the value would be copied where here in these parameters so here i am taking x and y you can also take a and b that is also fine so these x and y are local to this function only so the value would be copied 5 first of all 5 would be copied 5 and then here 7 would be copied right but now i am processing i am doing some processing within this function processing is what in x i am changing in x i am storing 7 in y i am storing 5 right but whatever process you will do on these variables that would be reflected within this scope only because these are local variables once control will go out of this function out of this scope means that reflection would not that that you know that change would not be reflected where here where you are calling this function because this is what here you get copy of these variables so within this copy only you are changing right that would not be reflected here the actual arguments are here so that result that change would not be reflected here it's just a copy of these variables right and these are stored in different different memory location memory location is 2000 suppose 2046 and this memory location is different so if you if you print x and y value here within this function then only you will get this changed value once control will reach to here means that change would not be reflected here so now here x and y values are within this main do you have any x and y value yes i have five and seven so here you will get five and seven so this is you can say drawback of call by value you have done some processing but once control will go back to the calling function all that processing all that change is gone vanished so that is why we use call by reference i want whenever i do some processing whenever i do some change in the definition of the function that should be reflected wherever i call that function in that program or in that application that should be reflected here also in calling like in main functioning if i'm calling or in if any other function i am calling that should be reflected everywhere in that program or in that application if you use call by value that would not be reflected so to get rid of this situation to solve this problem we use the invented call by reference method so call by reference reference means address so you are calling the function by passing the address here you are passing the value call by reference means here you will pass address so in this program if you modify this program call by reference so here we will pass address of x and y means rather than passing 5 and 7 we are passing this address address passing if you will do then you will use obviously address of operator address of x address of y right so if you are passing this means we will whenever function will call this control will come to here this will go to here so this passing address you are passing means thousand and one zero four six so to store this address this these are normal variables they are not able to store the address which variable can store address pointer variable that we have discussed pointer is a special type of variable that will store address of some other variable so here rather than defining it simply in text and you have to take pointers pointer means just do what s trick x s trick y so maybe you are thinking here x and y are normal variables here these are pointers so this will give error no because scope of these x and y are local to this main means within these curly braces scope of this x and y these pointer variables are within this curly braces so they are not going to mismatch it's fine they will not give any error it's like baby this is one house and this is your neighbor house this is your house and in your house suppose you can say rahul is name of any small kid right and here in your neighbor house rahula's name of uh maybe an older person may be father of the small kids so that is fine obviously they are not going to reflect because both are in different houses so it's possible i hope you are able to relate this real life example with this problem or maybe not but see now here this x and y now what value would be stored in x and y whenever the control will go here you are passing thousand so thousand would be stored in x here you are passing one zero four six one zero four six would be stored in y these are pointer variable now so now here situation is this x is pointing to here this y is pointing to here right so these are now interlinked means whatever change you will do using these addresses that would be reflected here see the five and seven the values are only one there is no other copy like in previous case here we have addresses of these variables so now you cannot directly say x is equal to seven it will give error because x is in a pointer variable you cannot assign any integer value like this so what you can do here here i want to assign seven and here five i want to access this location so using this address how you can access a strict x a strict means here it is acting as indirection operator a strict y is equal to five and if you want to print here the value then simply obviously x and y you cannot write if you write x and y in x you have thousands so it will print address but i want to print the value so a strict x and asterisk y right here if you want to print no need to write down a strict x a s trick y because in this one in this main in this scope x and y are simple variables so here simply write x and y no need to write down s trig x s trick y if you write down here s trick x is trick y it will give error because within this main function x and y are normal variables and strict x you are writing means oversight will give l strick x means indirection operator is a value at this address but in x we have 5 only there is no address like x is normal variable it's not pointer you cannot access like a strict x so here you will use x and y only but here you will use a strict x s require i hope you would why this case the difference right so now what is the process now whenever this will call now this value has been addressed has been stored here now strict x means value at this address asterisk x is 1 000 so value at thousand now thousand is what this one value at thousand is five so here i am storing seven so now here i am storing seven s require value add one zero four six here so here i am storing five using the pointer i am directly accessing the original values i am directly changing the original values i am not changing the copy right so now here you will print directly stick x means value at 1000 is now 7 so 7 would be printed 5 could be printed now control will go back to here once here in the closing this is what closing of this function now the working of this is finished now next line print f x and y now here x value is what 7 7 would be printed y value is 5 5 would be printed so whatever change you have done within this function now that change has been reflected out of this scope right beyond this scope here you are calling this so here also it is changing the change has been reflected here also so here x is 7 y is 5. so this is what the difference between call by value and call my reference right i hope you got the advantage also uh the advantages of call by reference right if you want to know if you want that the the whatever processing you whatever change you will do in the definition of that function that could be reflected in anywhere in the program in the application so you should call the function by reference not call by value or here you can also take like if you don't want to take x and y you can take ptr1 ptr2 that is also fine here you can access asterisk ptr1 asterisk ptr2 so here you will write down what asterisk ptr1 asterisk ptr2 means indirectly you are accessing these values and here simply obviously you will write x and y right that is also fine and here one more thing see here also i think you must have noticed the mistake if you have noticed the mistake then please write down in the comment box or i'm going to tell the mistake here see here i am calling it call by reference i'm using so here in the definition part what these are pointer variable but in declaration i am simply writing intent in simple and simple normal variables so it will give error right so here also the data type must be in asterisk and s3 obviously the pointer in the declaration also because here i am taking pointer so it should be pointer here also it is in star otherwise it will give error so now let me show you practical of this thing so now let me create a file function call dot c right and here first of all what i am declaring a function for it fun here i am going to pass just two data type the argument like uh sorry its parameter it is known as parameter here and it should be separated by comma right and now here i'm writing main function and in main would mean what i'm doing i'm taking in x is equal to 5 and y is equal to 7 right here i'm calling 1 and i'm passing x and y here these x and y are known as arguments and after passing i am printing the value x is equal to percentage d and y is equal to percentage d two values right x comma y right and before this i am writing one more line just to get a better understanding like i am writing inside main or main is also known as here calling function right calling and cold function also i have told you in previous video right and after this i am defining the function so void fun here i am taking parameters in x hint y name you can take x y a b a b m and any name you can take right because these are local to this function only so it doesn't matter so now here what i am writing x is equal to 7 and y is equal to 5 and here also i am printing i am first of all i am writing inside cold function inside of fun and here this one is what cold function right and main is what calling function and now i am printing the value of x and y right now let me run this and see what output you get better to write down here like uh no for formatting purpose here i'm writing slash in and here also i'm adding slashing right and after this also slashing because i just want that all these output should be printed in new new lines not in the same line right so c first x and y would be executed this this line would be executed first like this one inside this cold function so that would print x is equal to 7 y is equal to 5 so see x is equal to 7 y is equal to 5 inside fun function hold function inside main function x is still 5 and y is 7 because this is called by value we are just doing some processing the changing in the copy of the original value not in the original value original value is in main function so in main function if you print the original value would be printed that is x and y and that is 5 and 7 right now call by reference so now here i am passing address address of x and address of y right so if you are passing address then here it should be strict there should be pointer variable to store that address normal variables cannot store and here i am changing i am accessing the location using pointer so that is why we are using indirection operator and here if you are printing this send then you have to write strict s trick but if you will run it then it will give error because see what error you will get because we are not changing the declaration of the function see conflicting type for fun see here notice what expected end in the third line expected argument should be in but argument is of type in star but see here argument you are actually passing is of type in star because you are passing address so argument is of type in star so here you have to change this also and start type should be in star because this type should be matching in declaration and definition right so now run this see inside fun in cold function now x and y are 7 and 5 and inside main also x and y are 7 and 5. now we are calling by reference by the address so now you are changing the value in the original value in the main function we are accessing the original value by the address right so this is the difference between call by value and call by reference i hope you got this difference so now in the next video we will see some problems on functions and i'll see the next video till then bye take care
