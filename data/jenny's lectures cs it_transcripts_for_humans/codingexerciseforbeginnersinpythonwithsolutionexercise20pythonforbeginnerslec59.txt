With timestamps:

00:00 - hey everyone I hope you all are safe and
00:02 - good so in the series of learning
00:03 - practical programming language we are
00:04 - discussing some exercises hurdle race
00:07 - exercise right in that website Rebox
00:09 - world now till now we have done two
00:12 - exercises right now this video we'll be
00:14 - seeing one more exercise on the same
00:16 - thing that hurdle race but this would be
00:18 - a little bit tough
00:20 - right now let me just show you what kind
00:23 - of exercise is this okay same you have
00:25 - to search like hurdle race and rebooks
00:27 - world and you can click on the first
00:29 - link and then which hurdle Rays you need
00:32 - to select we have done hurdle one and
00:34 - hurdle three
00:36 - right this is some hint you can use
00:38 - these functions moved on left the
00:40 - conditions these are some conditions and
00:43 - you have to use while loop and if
00:45 - statement
00:46 - so huddle three node hurdle three now
00:49 - we'll be moving to hurdle 4.
00:52 - now what is this thing see as you can
00:54 - see here we have the bowl of variable
00:56 - length so this hole is short this wall
00:59 - is like longer but this wall is what
01:02 - longer than this one so we have Wall of
01:05 - variable lengths
01:07 - right so this is the tricky part in this
01:10 - hurdle Breeze now see the previous one
01:13 - we have done like we know the wall is of
01:15 - one block only right so just turn turn
01:19 - left then move then turn right and then
01:23 - again move then turn right and then move
01:26 - right only one clock you have to pass
01:28 - like only one block till one block you
01:30 - have to jump
01:31 - but here it will not work
01:34 - for this wall for the first one see
01:37 - if the jump function is this then turn
01:40 - left first then move okay we'll the
01:42 - robot will be here move then turn right
01:45 - and then move but still there we have a
01:47 - ball
01:49 - the wall is longer right so we cannot
01:52 - use this jump function you have to
01:54 - modify this jump function for this
01:56 - right
01:57 - okay now same obviously we'll use while
02:00 - loop because we don't know how many
02:01 - times you have to jump the ball how many
02:03 - volts would be there because every time
02:04 - you reload this game every time this
02:06 - game would be something different right
02:09 - so if the same code the previous code if
02:12 - we run on this hurdle then see what will
02:14 - happen let's run this
02:16 - and first
02:18 - see I hit a ball because we cannot
02:21 - directly turn right and move because
02:24 - still there is a wall so you have to
02:26 - modify this thing now some hint for you
02:27 - is
02:28 - let's reload this and this would be
02:30 - different game this time
02:31 - so in reevokes World some commands move
02:35 - turn left we have used some conditions
02:37 - are there so we have used eight ball uh
02:41 - wall in front this thing now some more
02:43 - conditions are there like wall is wall
02:45 - on right front is clear right is clear
02:48 - so this this condition you need to use
02:52 - especially the first line right while
02:55 - loop if statement just modify your jump
02:59 - function
03:00 - and that's it
03:03 - you'll be good to go
03:04 - so now pause the video and try this out
03:07 - don't look at the solution now right be
03:09 - honest
03:12 - okay now I hope you have done this now
03:14 - see
03:16 - this jump function is not going to work
03:18 - but this while loop is fine why not at
03:20 - goal if ball is in front jump else move
03:23 - that is fine but you have to modify the
03:25 - jump function right
03:28 - now okay fine
03:30 - turn left is fine like you have to turn
03:34 - left then
03:36 - you have to move
03:39 - until what
03:41 - it's not only one move and turn right no
03:43 - move here in this case one more move one
03:46 - more move three move but in this case
03:48 - this wall is longer than this so four
03:52 - move so how would we come to know that
03:55 - three more four more two more only one
03:57 - one move you have to move right to jump
03:59 - the wall
04:00 - right now you have to put some condition
04:03 - so turn left and after turn left just
04:06 - delete this part
04:08 - and after turn left just put one more
04:11 - while condition while
04:13 - because we don't know how many move you
04:15 - have to put so if you don't know then
04:17 - simple which Loop you have to use if you
04:20 - don't know the number of iteration by
04:21 - Loop why now the condition we can change
04:25 - take from it while we have our condition
04:27 - wall on right
04:29 - this thing you have to do you have to
04:31 - use while turn left while wall on right
04:37 - while wall on right
04:39 - till then you have to move so just
04:44 - move
04:46 - okay you want this
04:48 - first
04:50 - turn here here turn like if the robot is
04:54 - here turn left then we check wall on
04:58 - right yes wall is on right move we will
05:01 - again check wall on right yes again roll
05:03 - on right again move like this right
05:07 - okay if I run this code let's run this
05:09 - line by line
05:10 - first you just see at this code the
05:13 - control where the control will go
05:14 - whenever I'll click this step through
05:16 - option
05:17 - then check if the wall in front no then
05:19 - else part move
05:21 - again else part move
05:24 - now wall is in front s two then jump
05:26 - now turn left while wall on right yes
05:29 - move
05:31 - while hold on right yes move
05:34 - yes move
05:36 - now while not at goal
05:41 - okay but at this point of time see yeah
05:43 - a robot is
05:45 - here it means here we have to move we
05:49 - have to turn and give a command turn
05:52 - right and then move but we haven't
05:53 - completed this function till now
05:56 - so yeah this command is working this
05:59 - while on wall on right and move this is
06:01 - working okay now just stop this
06:04 - and
06:06 - okay this is working but after a while
06:10 - after this while after move
06:12 - while wall is not on right if this
06:15 - condition is not true
06:17 - because once robot will reach here now
06:19 - wall on right is not true then what then
06:22 - turn right simple
06:23 - so then
06:26 - turn
06:27 - right
06:30 - after turning right
06:32 - simple one move
06:36 - right
06:37 - because the width is only one
06:40 - one block right it's not variable only
06:43 - the length the height of the wall is
06:45 - variable right now one move then again
06:47 - turn right
06:50 - turn right
06:54 - after turning right now again you have
06:56 - to move but not only one move till here
06:59 - till you reach
07:02 - here at the bottom now again you put
07:05 - some while condition while
07:08 - while now we have like white front is
07:11 - clear
07:14 - because we are moving like this downward
07:17 - so while front is clear
07:20 - until then you have to move
07:23 - if front is not clear stop
07:25 - right so while front is clear
07:29 - then
07:32 - move
07:33 - okay
07:36 - while front is not clear you don't have
07:37 - to move then which which statement need
07:40 - to be executed after this while loop
07:44 - turn
07:47 - left
07:49 - that's it turn left so this would be the
07:53 - jump function for this exercise
07:56 - okay
07:58 - now let me just run this for you and see
08:00 - what output you will get same
08:03 - see first you will check obviously not
08:04 - at goal then wall in front then jump it
08:06 - will go then jump function we have
08:08 - modified according to that it will move
08:11 - otherwise if wall is not in the front
08:14 - then just move
08:16 - right
08:17 - so here we have used like three while
08:20 - loops in Jump function also we have used
08:23 - two while Loops I hope this was not so
08:26 - much tough for you guys or there is some
08:28 - another way also it's not like that it
08:30 - is the only way to solve this problem
08:32 - here you can modify this jump function
08:35 - in this while front is clear
08:37 - here we can also I don't know one more
08:40 - condition like
08:41 - while not wall
08:44 - in front
08:45 - see
08:47 - it has been successfully executed and
08:49 - this green pop-up would be there at last
08:51 - this would be at correct X and Y
08:53 - position so here like front is clear
08:57 - rather than this we can also write on
08:59 - one more condition like while ah this
09:02 - this this thing
09:04 - while
09:06 - not wall in front
09:10 - maybe if you guys
09:15 - have done this thing also while
09:19 - not wall in front then also move because
09:22 - when you are moving downward
09:24 - this can also be considered as about the
09:26 - bottom one so while not wall in front
09:28 - just move right maybe someone of you has
09:32 - done this thing also so that is also
09:34 - correct so if I run this this will also
09:36 - work fine right as you can see here
09:45 - not in front move downward right so this
09:48 - is also this will also work fine
09:50 - right now maybe you have done another
09:54 - thing like another way you in another
09:56 - way you have sold this thing so that you
09:58 - can write down in comment section your
10:00 - code
10:01 - maybe there may be multiple ways to
10:03 - solve this problem also so that's it for
10:05 - this video now in the next video we'll
10:07 - see one project you can see
10:09 - right
10:10 - I guess uh that's enough on Hurdle race
10:13 - we will be seeing one project here only
10:16 - right that would be little bit tricky
10:19 - one so first please go through
10:21 - these three videos throttle one hurdle
10:25 - three and handle four these three videos
10:27 - we have learned right go through that
10:29 - while loop if statement then you'll it
10:32 - will be easy for you guys to solve that
10:34 - project right so
10:39 - see for this the number of lines of code
10:42 - are 20 only and if you remove these
10:44 - spaces this one space then it's only 19
10:47 - right
10:49 - so now so using functions we can reduce
10:52 - the number of lines right now I'll see
10:55 - you in the next video till then bye bye
10:56 - take care

Cleaned transcript:

hey everyone I hope you all are safe and good so in the series of learning practical programming language we are discussing some exercises hurdle race exercise right in that website Rebox world now till now we have done two exercises right now this video we'll be seeing one more exercise on the same thing that hurdle race but this would be a little bit tough right now let me just show you what kind of exercise is this okay same you have to search like hurdle race and rebooks world and you can click on the first link and then which hurdle Rays you need to select we have done hurdle one and hurdle three right this is some hint you can use these functions moved on left the conditions these are some conditions and you have to use while loop and if statement so huddle three node hurdle three now we'll be moving to hurdle 4. now what is this thing see as you can see here we have the bowl of variable length so this hole is short this wall is like longer but this wall is what longer than this one so we have Wall of variable lengths right so this is the tricky part in this hurdle Breeze now see the previous one we have done like we know the wall is of one block only right so just turn turn left then move then turn right and then again move then turn right and then move right only one clock you have to pass like only one block till one block you have to jump but here it will not work for this wall for the first one see if the jump function is this then turn left first then move okay we'll the robot will be here move then turn right and then move but still there we have a ball the wall is longer right so we cannot use this jump function you have to modify this jump function for this right okay now same obviously we'll use while loop because we don't know how many times you have to jump the ball how many volts would be there because every time you reload this game every time this game would be something different right so if the same code the previous code if we run on this hurdle then see what will happen let's run this and first see I hit a ball because we cannot directly turn right and move because still there is a wall so you have to modify this thing now some hint for you is let's reload this and this would be different game this time so in reevokes World some commands move turn left we have used some conditions are there so we have used eight ball uh wall in front this thing now some more conditions are there like wall is wall on right front is clear right is clear so this this condition you need to use especially the first line right while loop if statement just modify your jump function and that's it you'll be good to go so now pause the video and try this out don't look at the solution now right be honest okay now I hope you have done this now see this jump function is not going to work but this while loop is fine why not at goal if ball is in front jump else move that is fine but you have to modify the jump function right now okay fine turn left is fine like you have to turn left then you have to move until what it's not only one move and turn right no move here in this case one more move one more move three move but in this case this wall is longer than this so four move so how would we come to know that three more four more two more only one one move you have to move right to jump the wall right now you have to put some condition so turn left and after turn left just delete this part and after turn left just put one more while condition while because we don't know how many move you have to put so if you don't know then simple which Loop you have to use if you don't know the number of iteration by Loop why now the condition we can change take from it while we have our condition wall on right this thing you have to do you have to use while turn left while wall on right while wall on right till then you have to move so just move okay you want this first turn here here turn like if the robot is here turn left then we check wall on right yes wall is on right move we will again check wall on right yes again roll on right again move like this right okay if I run this code let's run this line by line first you just see at this code the control where the control will go whenever I'll click this step through option then check if the wall in front no then else part move again else part move now wall is in front s two then jump now turn left while wall on right yes move while hold on right yes move yes move now while not at goal okay but at this point of time see yeah a robot is here it means here we have to move we have to turn and give a command turn right and then move but we haven't completed this function till now so yeah this command is working this while on wall on right and move this is working okay now just stop this and okay this is working but after a while after this while after move while wall is not on right if this condition is not true because once robot will reach here now wall on right is not true then what then turn right simple so then turn right after turning right simple one move right because the width is only one one block right it's not variable only the length the height of the wall is variable right now one move then again turn right turn right after turning right now again you have to move but not only one move till here till you reach here at the bottom now again you put some while condition while while now we have like white front is clear because we are moving like this downward so while front is clear until then you have to move if front is not clear stop right so while front is clear then move okay while front is not clear you don't have to move then which which statement need to be executed after this while loop turn left that's it turn left so this would be the jump function for this exercise okay now let me just run this for you and see what output you will get same see first you will check obviously not at goal then wall in front then jump it will go then jump function we have modified according to that it will move otherwise if wall is not in the front then just move right so here we have used like three while loops in Jump function also we have used two while Loops I hope this was not so much tough for you guys or there is some another way also it's not like that it is the only way to solve this problem here you can modify this jump function in this while front is clear here we can also I don't know one more condition like while not wall in front see it has been successfully executed and this green popup would be there at last this would be at correct X and Y position so here like front is clear rather than this we can also write on one more condition like while ah this this this thing while not wall in front maybe if you guys have done this thing also while not wall in front then also move because when you are moving downward this can also be considered as about the bottom one so while not wall in front just move right maybe someone of you has done this thing also so that is also correct so if I run this this will also work fine right as you can see here not in front move downward right so this is also this will also work fine right now maybe you have done another thing like another way you in another way you have sold this thing so that you can write down in comment section your code maybe there may be multiple ways to solve this problem also so that's it for this video now in the next video we'll see one project you can see right I guess uh that's enough on Hurdle race we will be seeing one project here only right that would be little bit tricky one so first please go through these three videos throttle one hurdle three and handle four these three videos we have learned right go through that while loop if statement then you'll it will be easy for you guys to solve that project right so see for this the number of lines of code are 20 only and if you remove these spaces this one space then it's only 19 right so now so using functions we can reduce the number of lines right now I'll see you in the next video till then bye bye take care
