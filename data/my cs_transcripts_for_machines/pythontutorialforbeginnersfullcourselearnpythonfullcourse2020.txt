the programs you write in this course have three major phases the first phase is the input phase where you ask the user for input from the keyboard or you read data from a file the next phase is processing where you manipulate the data you do some sort of calculations and then once you have the results you have the output phase which is where you display results on a screen or you write the results to a file of some sort when I write programs I usually like to keep these phases separate so I do my input first then my processing then my output I tend not to inter leave them do some input a little bit of processing then some output then more input processing and output because that tends to be a bit confusing in the processing phase there are three major types of things you can do the first one is sequence doing things one after another that's what you did with the robot example you did one step then another then another then another one from the beginning to end until you were finished another type of thing that you do during processing is repetition for example with the robot you could say keep taking a step forward until you get to the door so it would do the same step over and over and over again until some condition were satisfied and that leads to the Third Kind of structure that you will find during processing which is called conditional so you could say the robot if you have an object that is if you have picked up an object then put it down otherwise turn counterclockwise so your processing phase consists of sequence repetition and conditional structures and that is the stuff that does the heart of the program and that's surrounded by the input to get your data and the output to display the results there are three types of errors that you can make in Python the first type is called a syntax error by the way this number sign that I'm typing in the Shell is a comment that means python should ignore it it's just there for us humans to read a syntax error happens when you say something that's grammatically incorrect in Python so for example if I try to say 34 + time 8 that doesn't make any sense mathematically it's just wrong on every possible level so when I press the enter key the shell will respond showing me that the star is where it got confused and says that's invalid syntax you can have another kind of error called a runtime error this happens when you do something that is syntactically valid it's grammatically valid for example if I try to evaluate 42 / 0 well syntactically in terms of grammar I have two numbers and a division sign between them but when it try comes time to actually run that calculation I get an error that says zero division error because you can't divide by zero these two types of errors are usually pretty easy to find syntax errors the easiest because the compiler points them right out to you and runtime errors because once you run the program you see the error front and center the third type of error is called the semantic error which means you said something that's syntactically correct grammatically and it's not going to cause any errors when you run run the program but it doesn't do what you wanted it to so for example if I wanted to find out how many days there are approximately in 25 years and I accidentally typed 255+ 365 there's nothing wrong with that in terms of mathematics I have two numbers with the plus sign there's no runtime error because I can certainly add 25 and 365 but the number I get is nowhere near the correct answer because I've said something that is a semantic error I didn't do the computation I intended to do semantic errors in general are the hardest ones to find because the compiler can't help you the runtime system can't help you it's only when you as a human look at their at the result and say wow this is not what I intended in this video we're going to talk a little about arithmetic operations in Python simplest are addition and subtraction so for example 4 + 9 + 12 gives me 25 if I have something like 25 3 7 the question is is that going to go from left to right or right to left in other words is it going to do 25 minus 3 first and then subtract 7 or is it going to take the 3 7 first and then subtract that from 25 let's try it and find out and the answer is 15 so operations that are of the same priority addition and subtraction go strictly from left to right we also have multiplication and division so for example 7 * 6 gives us 42 now what happens if I say 7 + 3 * 2 which is going to happen first the multiplication or the addition according to the rules of arithmetic multiplication should take PRI priority over addition and the same thing happens in Python so the multiplication occurs before the addition does something interesting happens when we do division let's say I take 4 / 2 notice the result is 2.0 so when I divide integers by integers I always get a float as the result in fact if I did a type of 4 / two it would tell us that that is indeed a float floats divided by floats let's say 7.2 ided by 0.4 come back as floats as a result sometimes you'll want to do division that gives you whole number division for example let's say I have 57 items and I want to find out how many whole dozens that is if I just said 57 / 12 I'd get 4.75 but that's really 4 dozen plus 3/4 of a dozen when I want integer Division I do 57 and put two slashes in a row 57 ided 12 as integer division gives me the four well what about the ones that are left over that's 75 of a dozen how do I get that integer back the remainder to get the remainder use the percent sign operator which is called remainder modulo or mod and usually you'll hear me pronouncing it as mod so 57 mod 12 is 9 so 57 items is four dozen with nine items left over the last operation I want to talk about is exponentiation if I want to take 12 the 3 power I type 12 star star meaning to the power 3 and 12 cubed is 1728 I can have fractional exponents so if I want the square root of two I say 2 to the 0.5 power which gives me 1.4 whatever a word of warning here exponentiation is evaluated from right to left instead of left to right if I take 2 to the3 squared the question is is that going to be evaluated as 2 cubed squared which come out to 64 or is it going to be Val valued as 2 to the 3^ 2ar which is 2 the 9th or 512 let's try it and find out and the answer is 512 the moral of the story is if you want things to be evaluated in a specific order use parenthesis to group it the way you'd like in order of priority parentheses take priority over everything else next in priority is exponentiation the next level down from that is multiplication and division operators such as multiply divide integer Division and modulo and the level below that is addition and subtraction operators which are plus and minus so if I say 3 + 4 * 2 to the 3 the exponentiation will come first so I'll have 8 * 4 because multiplication is next most important so I have 8 * 4 is 32 + 3 at the end and I'll get 35 is the result if I want it to be in some other order I can always use parentheses to get the order I want so if I wanted 7^ squar * 2 and that whole thing to the 3 power which would be 20 to the 3 power I would put the parentheses this way when in doubt use parentheses don't be afraid to put in a couple of extra parentheses rather than trying to figure out well which one's the most important it's not that much more time for the computer to evaluate and your time is much more valuable than the computer's up till now we've talked about three data types integers floats and strings sometimes you'll need to convert among these data types for example you might have the number 37.9 and you just want the integer part of it the int function does that for you if I say a int of 37.9 I get just 37 this does not round up or down it just gets rid of the entire decimal part so if I say int of 23.5 I'll end up with 23 int will also convert strings to integers if I say int of 20 245 the string I get back the number 245 I can show that by saying what's the type of int 245 it's no longer a string it's class int what happens if I try to convert something that isn't an integer like the word 20 to integer the answer it's a runtime error what if I try to take the integer of something that begins with an integer but then has other stuff again also a runtime error float will convert integers to float if I say float 25 I get 25.0 this is not normally necessary I don't have to say float of 25 + 4.3 to do an addition such as this I can say 25 + 4.3 and the integer 25 will be promoted to float and it'll work exactly as I need most of the time you'll be using float to convert strings to float if you say float 37.4 you get the numeric value you can do this with exponential notation as well float of 7 E2 gives you 700.0 and as with int if you take something that's not valid you get a runtime error you'll often have to go the other way you'll need to convert a float or an INT into a string that's what the Str Str function does if if I take string of 23.4 I get the string 23.4 that's a string it's no longer a float string of 45 gives me 45 and string of 7.3 E4 gives me 73.0 again that's a string it is not a number you can't treat it as a number if I try to say string of 23.4 plus 5.2 it'll say runtime error you can't do that you can't add strings to floats let's discuss some of the data types that you can work with in Python for this video I'm going to be using the print function to show you what the results are much as the book does the simplest data type is integers whole numbers so for example if I want to use the number four I just put the number four there if I want to find out what data typee of value has I can use the type function what type of data is for it's an integer class data type I can also have negative numbers and those are also of class int The Next Step Up from integers are numbers with decimal points in them called floating Point numbers so I can have a floating Point number like 3.5 and if I want to find out what type of number 3.5 is it turns out that's class float negative numbers are valid also and you can also use exponential notation for example if I wanted 7,000 I could print 7,000 or I could say print 7 E3 and that's a shorthand for saying s time 10 to the 3 power so the E stands for time 10 to the and that gives me 7,000 also what about numbers that are less than one I can print them in the normal normal way print 0.07 now is that leading zero necessary or could I leave that off and just do 07 my mantra for this class is try it and find out so let's print 07 either it'll work or it'll give us an error message and it turns out that it does work I can use the exponential notation as well I can say print 7 e minus 2 7 * 10 the 2nd which is 0.07 what if I say something like print 7 E46 am I going to get a 7 followed by 46 zeros try it and find out and the answer is for really large numbers or really small numbers python gives it back to me an exponential notation the third data type that you'll be working with is strings a string is enclosed in quote marks so if I want to print the string it works I enclose it in single quotes and it's displayed without the quotes the quotes are simply there to tell where the string begins and ends if I want to find out what kind of string excuse me what kind of data type it is I'll use the type function and it says that it belongs to the class Str Str abbreviation for string I can use double quotes as well I can say print this works too and so the question is should you use single quotes or double quotes and the book you tends to use double quotes and a lot of code I've read tends to use single quotes So my suggestion is choose whichever one you like better and be consistent with it sometimes your choice will be forced for example how will I print the string that says it's working great I can't put it in single quotes because then I'll have three single quotes Al together this one will end that one and this one's hanging out in the middle of nowhere that's why you'll sometimes want to that's excuse me that's why you will sometimes need to use a different set of quotes by using double quotes I can have a single quote internally and everything's working great what happens if I have a situation where I have both a double quote and a single quote together so if I want to print out the string Mrs obrien said hello to us can't use single quotes because O'Brien used those up can't use double quotes because hello used up those python has a solution I can use three single quotes in a row and then close that string with another three single quotes in a row and then inside that string I can have either single quotes or double quotes in any combination that I like and Mrs O'Brien is happy and so are we another advantage of the triple quotes is that you can have internal new lines so if I wanted to write a poem I could use single excuse me Triple and this time I'll use triple double quotes the boy stood on the burning deck once all but he had fled and I'll close that with three double quotes and the output is displayed on two separate Lines Just as I typed it let's say you want a program to calculate the Pythagorean theorem here's such a program in Python the first two lines get the two sides and the third line should calculate the hypotenuse but when you run the program and you enter side as3 and side B is four you get a name error the name square root is not defined the square root function isn't built into python it's in the math library in order to use it we must import the library by saying import math and then say that we're using the square root function from the math Library by saying math. square root if you read from right to left you can think of the DOT as meaning belonging to so math. square root means the square root belonging to the math Library let's clear the shell move it up a little bit and run the program again side a is three side B is four and this time it works great the hypotenuse is 5.0 let's look at another program that implements the following formula it's not particularly meaningful except as an example here's the program there's a lot of math dotting going on in line four python provides another form of importing that takes away the need for all the dots instead of saying import math I can say from math import square root namely you import a specific specific function or a list of functions from the math module once you do that you don't have to say math dot everywhere square root works as though it was just another plain old python function and if I run this program I can enter X as 100 and Y as 50 and it gives me my result which one should you use import math or from math import square root ask me if I care do you care no I don't there are some subtle differences in how they work but at this point in the course it doesn't matter use whichever one you prefer now let's talk about trigonometric functions like s cosine and tangent for this part of the video I'll go into the shell I'll clear it out first I'll import math and then I'm going to take the sign of 30° which ought to come out to 1/2 but that's nowhere near 1/2 what's wrong here what's wrong is that the trigonometric functions require the arguments in radians not degrees in the video description you'll find a couple of links that explain radians and gr a glorious detail the question now becomes how do we convert degrees to radians the answer is with the radians function let's try that let's try math. sign of math. radians of 30 which will convert the 30° to radians and now we come out with something that's much better we don't get exactly 0.5 because the Precision of the calculation is limited note that you can use the from import notation as well I could say from math import s comma radians and then simply say sine of radians of 30 and get the same answer as a side note if you ever need to convert from radians back to degrees there's a function called degrees that does that conversion and that's what you need to know to use the higher math functions in Python one of the most important things you can do when writing programs is to name your variables well what does that mean let's say you want to take a person's age in years and convert it to an approximate age in days you could write code like this y refers to 37 which might be their age and then D refers to 365 * y and then print whatever is in D and there's your answer that works but it's really not satisfying because what does d stand for in a large program does it stand for days deposit debit discount who knows just a single letter variable name is really not what we'd like your variable name should be descriptive try this on for size years refers to 37 Days refers to 365 times years print days that's a lot more readable and the intention is much more clear quick word of warning python is case sensitive when it comes to variable names upper and lower case are not the same if I try this years refers to 37 days refers to 365 * capital Y Years it'll say capital Y years is not defined so those are two very different variable names by convention python variables start with lowercase letters and consist mostly of lowercase what happens if you have a multi word variable name what if I wanted to say age in years equals 37 to be even more descriptive because there could be many uses of years in a large program it won't let me do that because you can't have blanks and variable names how is that problem solved programming languages have evolved two different ways of solving this one of them is to make a single variable name with all the subwords being capitalized I would write age capital in capital years refers to 37 and then age capital in capital days refers to 365 times age in years and print age in days this is called camel case because the mixture of upper and lower case the up and down resembles the humps of a camel supposedly go figure you'll find this as the convention for programs written in Java and JavaScript for programs written in Python the convention is to separate the subwords in a variable name with underscores so in Python age underscore in underscore years would refer to 37 and age underscore incore days is 365 times age in years and print age in days for this course I do not really care which way you decide to do this if you decide to do it with camel case the first example great as long as you're consistent if you decide to do it the way most python programmers do which I believe by the way is called snake case because it looks like the segments of a snake lined up one after another I'm fine with that as long as again you're consistent throughout your programs moral of the story variable name should be descriptive y refers to 37 not descriptive itive enough years refers to 37 that's good age in years 37 also descriptive but please don't go overboard age in years as of current date of program please don't do something like that when you use names that are descriptive other people who read your program later on will thank you and other people refers to perhaps you 6 months from now when you haven't looked at the code future you will thank past you for using good variable names in this video we're going to talk about the input function let's look at this program that we wrote In The Print video one thing I'll note is that I modified the program and I forgot to modify the description not only is it given an age and years it is given a person's name and their age in years it calculates the approximate agent days and gives personalized output this more accurately reflects what the program does and this program works there's absolutely nothing wrong with it if I run the program it gives me the correct output however it's inflexible not everybody's named David and not everybody is 64 years old and in fact next year I won't be either what we'd like is a way for the user to be able to take the program and run it and give us the information rather than having to modify the program every time they want to see new results the way you do that is with the input function I'm going to take this line and move it up here because when I run the program I want to ask the person for their name first and then ask them for how old they are and then do the calculation so instead of saying your name equals David I'm going to use the input function inside the input function I'm going to put something called a prompt it's the question that I'm going to ask the user what is your name this is always going to be a string let's run this and see what happens remember what happens online six whenever I see this symbol I have to work out the right hand side first so the input function is called do its thing the input function puts the prompt up on the screen and then waits for you to type something I'll type David because that is my name L say David your age and days is approximately 23 360 let's run that program again this time I'm going to say my name is Joe I'll say Joe your age in days is approximately 23 360 now I've personalized the Name by asking the user for input I want to run the program one more time and point something out notice that the cursor for input is right up next to that question mark and that looks a little bit ugly to me just put in somebody's name Nancy normally I like to put a blank before the closing quote Mark so the blank will show up on the screen when the blank shows up on the screen it gives the cursor some Breathing Room between the prompt and where the user will type their input running it again what's your name feder so far so good let's do the same thing for years let's make that an input and we'll ask how old are you again I'll put the blank at the end of The Prompt just to give my cursor some Breathing Room save this and run it again and it's going to ask what is your name and this time I'll put in the name Martin how old are you and I'll say 20 Martin your AG whoa what the heck happened there what happened there is strings whenever you do input the result of the input function is always always always a string when we asked what is your name that was a string and no problem when we asked how old are you instead of getting the number 20 we got the string two Z and that's what years referred to on this line when we evaluate the right hand side we're multiplying a string by a number and as you may recall from a few videos back when you multiply a string by a number it repeats it that many times so we got 365 represent replications of the string two Z that's why we have the agent dayses approximately two 0 two 0 2 Z to Z to Z and no I'm not going to read them all how do we get around that problem the answer is conversion to integer the years is an integer so what we will say is int of input of how old are you what we have is a function calling a function and let's go through this in detail to see what this computer's doing when it sees line seven it sees this symbol and says oh I have to figure out what the right hand side works out to the right hand side parentheses come first and function calls so it first does the input call the input call puts up the words how old are you on the screen and I typed in 20 that brings back the string 20 that part is evaluated and now that string 20 is passed on to the int function and I get a number 20 as the final result of the right hand side and years will refer to the number 20 let's clear the shell and run this again and let's have Martin B20 and now we get a rational result because we've converted the string from input into a number which is what we really want to use for multiplication this is something that's very easy to forget and if it happens to you you will not be the first person who has ever done it and you will not be the last person who will ever do it don't freak out about it I've known some beginning programmers who look at this and say whoa functions inside of functions that's a little bit weird I'd like to do it in two steps that's perfectly fine with me I could say years as string oh I'm sorry I'm using the convention from a previous programming language years as string equals input of how old are you and that will give me a string and then I can say the years is the integer form of years as string it's one extra step but if it helps you to understand better what your program is doing then by all means feel free to do it that way you'll see that it has the same results if I have someone named Henrietta who's 45 years old it'll still work great let's give the discount program the same treatment where we're going to ask for input so that it's not as inflexible the description is going to be exactly the same but in this case instead of saying the amount is 1995 we're going to ask for input let's do it in two steps for this first one instead of 1995 we're going to input what is the price in this case I won't put the extra blank because having the cursor right up next to the dollar sign looks really good and then the amount will be float of amount strength remember I need to have a floating point value with decimal points to represent money I'll do the per percentage is one step it's the float of whatever input what is the discount percentage and here again I have a nested function call let's run the program when I test it I like to use numbers where I know exactly what the answer is going to be in advance to make sure everything is working properly if something costs $50 and a 10% discount I should get5 doar this gives me confidence that my program is working correctly I can run it again and now I can use any price I want with any discount I want if something costs $45.99 and I have a 3.25% discount I'm saving $149 moral of the story the input function puts up a prompt on the screen waits for the user to type their answer and press enter and whatever string they entered is returned to you if you want a string leave it as a string if you need an integer or a float remember to convert it otherwise your arithmetic is going to not work the way you thought it would in this video we're going to talk about the print function I'm going to write a program in the upper half of the th window and whenever I write a program I always start off with a short description of the program my name and the date that I wrote it and then a longer description of what the program does and the purpose of the program namely given an age in years calculate the approximate age in days I'll want a variable to hold the number of years and so I'll call that years that's a fairly descriptive name and I'll set that to my current age which is 64 and then I'm going to calculate the total number of days and that's going to be 365 * the number of years and then I'm going to print days this is the simplest form of the print function you just give it a variable let's save that F program and I'm using Linux by the way so if you're using Windows or Mac OS your save dialogue will not look anything like this and let's go to the comma C 020 file and in there we'll call this age 1. py and now let's run the program and when I run it I get the number 23,36 this works but it's not ideal if I gave this program to someone else and they R ran it all they would see is a number with no explanation so whenever you print something you really want to label it so that people who are using your program will know what it is youve tried to print print can print as many things as you want so I can say your age in days is approximately and then the word days excuse me the variable days that's an important Point here by the way days is not in quote marks so that means I'm actually accessing the variable I am not ACC I'm not printing the word d a Ys I'm printing whatever is in the variable days big difference this print function call is going to print the words your AG and days is approximately and then it'll print whatever is in the variable days let's save that and run it and this time it says your age and days is approximately 23 360 so far so good remember I told you I could print anything I wanted as many things as I wanted so let's put put a period at the end of the sentence save and run well let me clear the shell first because I don't want to interfere with the subtitles at the Clos captioning at the bottom of the screen here and let's run this again and now it says your age and days is approximately 23 360 and there's a space before the period That's because print always prints with spaces in between the item that you've separated by commas gee wouldn't it be nice if there were a way to turn that off well there is one way to do it is at the very last things to say sep equals and then an empty string sep stands for the separator now it's going to print the items that I've listed inside of the print without any separation between them let's save it and run and this time it says your age and days is approximately 23 360 period because there are no separators this means that if I want spaces in between words and numbers I have to put them in myself put a space inside the first set of quote marks so that I will get the spacing between the word approximately and days save it and run it and that's exactly the result I desired okay there must be a better way because this is a little bit clunky to have to remember when to put in spaces and when not to and how to put in the sep equals and when not to turns out there is a better way as a little bit weird looking but here we go I'm going to say your age and days is approximately and then an empty pair of curly braces this is a placeholder and then a period that string I'm going to say I want you to format that and fill in the blank those curly braces here you can think of them as fill in the blank with days if I run that I get exactly what I wanted there are two ways you can do it you can say print a bunch of separate items and then use SE equals to make sure the spacing comes out right or you can make a single string and put in curly braces as placeholders and then pass that to the format function and tell the format function what things ought to fill in those curly braces you can have as many sets of curly braces as you want by the way for example I could say your name equals and this play case I'll put David and then I could put here Cur curly braces comma your age and days is approximately curly braces now I have two sets of Fillin the blanks which means that format has to have two things to fill them in and so I'm going to format this string filling in the first set of curly braces with your name and the second pair of curly braces with days save that and run it well clear the sh first excuse me got to remember those closed captions and say David your age and days is approximately 23 360 format is really powerful you can do a lot of wonderful things with it here's another program in this program I want to find out what a percentage is or is what's 75% of something that costs let's say $19.95 my new program here is going to be calculate percentage of a mon monetary amount and again I'm going to put my name and the date the purpose of this program is given a price and a discount percentage what is the amount of money to to be saved that's what I'm trying to calculate let's say my amount is going to be $19.95 and my percentage is going to be 7.5 so I'm going to have 7.5% of $19.95 well the amount that I saved is going to be the percentage divided by 100 times the amount I can print that out as some percent of some monetary amount is another monetary amount and I'll put a period at the end of my sentence and I'll pass that on to the format function there's three sets of curly braces that means I have to fill in them with three variable names so the percentage is the first one the second set of curly braces is going to be my original amount and the third will be the amount of money saved when I pressed enter you'll notice that it's indented for me that's a signal that something is not right Why didn't it go to the new line the reason it didn't go to the new line is because I forgot to close my parentheses on that on line nine I need that second set of parentheses and now that gray highlighting goes away I'm good to go let's save that and let's call this discount. py and clear the shell run it 75% of 1995 is 1.4 9624 99999 oh my goodness that will not do we need to make format give us exactly two decimal places after the decimal point the way you do that is inside the curly braces you put what's called a format string a colon and in this case I'm going to say I want decimal point to two decimal places and this is a floating number I want that for the amount saved as well and for the percentage let's do the percentage of three decimal places so I'm going to say colon. 3F save and run and now I get the percentages and the monetary amounts with exactly the number of decimal places that I desire there's a web page I've written that describes some of the other things that you can do with these format strings I strongly suggest suggest you read it and that's a whirlwind tour of the print function up to this point we've been using python as a glorified desk calculator in arithmetic you did calculations then you moved up to algebra where you used variables in a similar way we're now going to move from calculations in Python to using variables in Python similar but not identical because variables in Python do not work exactly the same as variables do in algebra let's look at this statement in Python you may be tempted to read it as xal 42 because of that symbol in the middle but what it really is saying is X refers to the value 42 as the book says you should read that symbol in the middle as refers to gets or is assigned the way python evaluates this and the way you should evaluate it is to look at the value on the right hand side first always always always start on the right hand side so that value 42 goes into memory somewhere and then the variable on the left hand side x refers to the value 42 let's follow that with another statement X refers to 7.3 again we start on the right hand side the value of the right hand side is 7.3 and that gets put into memory then we look at the left hand side and say x now refers to 7.3 the 42 is left around in memory and it it'll eventually get cleaned up what about using variables in further calculations in this code after the first statement is done X refers to the value 7.3 in the second statement y refers to x + 1.2 we always always always start out with the right hand side and figure out what it works out to well what is X referring to right now 7.3 that means we can substitute as 7.3 Plus 1.2 and the right hand side works out to 8.5 and that value goes into memory now and only now can we look at the left hand side and find that the variable y refers to 8.5 so that's the status of memory at this point in our program to drive home the point that the variables in Python don't work like the ones in algebra let's look at this set of two statements at the end of the first statement X refers to five that's what the first statement says but let's look at that second statement in algebra that doesn't make any sense at all five doesn't equal six but again this isn't algebra instead you're going to follow the rule whenever you see that symbol in the middle you will always go to the right hand side first and work get out completely what's in X right this moment X right now refers to five so that substitutes to 5 + one so the right hand side works out to six now and only now can I look at the left hand side and say who's referring to that six answer X so X now refers to six instead of the five what we've done by the way is called incrementing X you'll see a this pattern x x refers to x + one almost said equals there X refers to x + one or X is assigned X+ one a lot in python and a lot in programming because it's very common to have computers do counting the moral of the story whenever you see something like that thing at the top you read it variable refers to value or variable is assigned value or variable gets value you go to the right hand side first and figure out what that value works out to once you've completely worked it out then the variable on the left will refer to that value in the book you've read about floating Point data values what are they and where does that name come from in general a floating Point number is one that has a decimal in contrast with integers that is whole number numbers as to the origin of the term a bit of history back in the old days when computers were primarily used in the business World common businessoriented programming languages let you specify that a value had a fixed number of decimal places to the right of the decimal point so a fixed decimal 2 value would always be represented with exactly two decimal places no more no fewer the business world was happy with this scientists not so much to do scientific calculations accurately requires varying numbers of decimal places in other words the decimal point can't be fixed in place it has to float according to the demands of the calculation and that's where the term comes from in many programming languages the float data type specifically means a representation that takes up 32 bits can represent numbers from 10us 38 to 10 38th power and is accurate from 6 to 9 digits however that's not a large enough range or Precision for some scientific calculations so there's another data type called double which uses twice the space and gives you a phenomenally greater range and almost twice the Precision in fact double is often called double Precision for that very reason in most python implementations the float class which floating Point values belong to uses a double Precision format internally to give you the best range and accuracy for your calculations there are three types of errors that you can make in Python the first type is called a syntax error by the way this number sign that I'm typing in the Shell is a comment that means python should ignore it it's just there for us humans to read a syntax error happens when you say something that's grammatically incorrect in Python so for example if I try to say 34 + times 8 that doesn't make any sense mathematically it's just wrong on every possible level so when I press the enter key the shell will respond showing me that the star is where it got confused and says that's inv valid syntax you can have another kind of error called a runtime error this happens when you do something that is syntactically valid it's grammatically valid for example if I try to evaluate 42 / 0 well syntactically in terms of grammar I have two numbers in a a division sign between them but when it try comes time to actually run that calculation I get an error that says zero division error because you can't divide by zero these two types of errors are usually pretty easy to find syntax errors the easiest because the compiler points them right out to you and runtime errors because once you run the program you see the error front and center the third type of error is called the semantic error which means you said something that's syntactically correct grammatically and it's not going to cause any errors when you run the program but it doesn't do what you wanted it to so for example if I wanted to find out how many days there are approximately in 25 years and I accidentally type 255+ 365 there's nothing wrong with that in terms of mathematics I have two numbers with a plus sign there's no runtime error because I can certainly add 25 and 365 but the number I get is nowhere near the correct answer because I've said something that is a semantic error I didn't do the computation I intended to do semantic errors in general are the hardest ones to find because the compiler can't help you the runtime system can't help you it's only when you as a human look at the eror at the result and say wow this is not what I intended let's discuss the kinds of errors that you can get in Python the first type of error you can get is a parse error also called a syntax error this happens when you say something that's grammatically incorrect in Python for example if I were to type 3 + * 5 the show would tell me that's invalid and you'll notice that it points out where the error is let's open up a program that has an error in it and you'll notice that there's a gray background on some of these lines F colorizes things and when you see something in gray that means that something is incomplete but let's ignore that for the moment and try running the program and see what happens and we have a syntax error a parse error in line number three well let's look at line number three it looks perfectly good parentheses are balanced the division is proper why does it say line three when the error is really here on line two where we've forgotten the closing parenthesis and the answer is it's because of the way python parses your programs have you ever buttoned your shirt and found out when you get to the bottom that you're out of buttons now where did that error start did it start at the bottom or was it somewhere up further on the answer is usually it was up somewhere near the top and you forgot a button or a button hole and that's why you're out of buttons when you get to the bottom python Works in somewhat the same way it's toodling along here at line number two this looks good equal sign is cool input I know what that is here's my opening parenthesis here's a syn double quote and here's the closing double quote Oh there's no closing parenthesis here maybe it's on the next line and so goes to the next line finds the word AVG here and says I can't go any further throws up his hands gives up and says that's where the error is I'm out of buttons moral of the story when you get a syntax error python will give you the line number where it gave up where it could not go any further and make a valid program that means that your error may be on that line and it may be somewhere above where the error truly started to happen just like buttoning the shirt those are parse errors the next kind of error we want to consider is a type error which happens when you try to do an operation that was not intended on a for a data type let's take a look at this program where we fixed the closing parenthesis so we no longer have a parse error and let's run it our first number will be three and the second number will be four and in line three it says unsupported operand types for division string and Float the reason this happened is because we got num one and num two as input and remember input always gives us back a string the num one 1 plus num two worked out okay because by coincidence we can add strings together but when you have that string num one plus num two and try to divide it by a floating Point number 2.0 python says timeout you can't do that you cannot divide strings and floats by one another a third type of error that you can get when you're programming is called a name error in this version of the program we fixed the type error by putting in the call to float on lines one and two but we've introduced a new error on line four by using the word average when in line three the variable name was really AVG so let's see what happens when we run the program the first number is three our second number is four and the program bombs out in line four because it says the name average is not defined the fix would be to either change line three to be average or line four to be AVG and let me take my caps lock off while I do that and now if I run the program when I have three and four the average is 3.5 the fourth type of area that you encounter when you program in Python is the value error and that happens when you give a function input that it wasn't designed to handle I fixed the name error in this program by converting my inputs to floats in line one and two but if I give the float function bad input for example by typing the word three instead of the number three I'll get a Val value error it says no I can't convert th hre to a valid floating Point number later on in the course we're going to learn how to catch these errors and respond to them in a good way those are the four main kinds of errors that you'll encounter when programming in Python the first few times that you get an error you're sort of going to freak out and you're going to just have no idea what's going on don't panic take a deep breath look carefully at the error message read it completely figure out which kind of error it is and then look carefully at the line where the error occurred and again because of our shirt buttoning problem look a little bit above where the error was pointed out if it's a syntax error and after a while you'll get used to seeing some of these errors come up and when you see an error you won't need to freak out you'll say oh yeah I remember that one and I remember how I F fixed it and your programming will go ever so much faster in this video we're going to examine something called a nested Loop a loop inside of a loop here's a program that we're already familiar with it draws a pentagon I have a loop variable pent that Loops five times 0 1 2 3 and 4 goes forward 100 pixels and turns right 72° and when I run it I get a pentagon What If instead of going forward 100 I were to draw a square instead so I would have five squares rotated 72 degrees apart each python lets me do that I can say for square in range four go forward 100 and go left 90° so now I have a loop inside of a loop my outer loop in line 12 has an inner loop in line 13 lines 14 and 15 belong to the inner loop line 16 belongs to the outer loop let's run that and see what it looks like and there's my Pentagon of square is it possible to Nest a loop inside a loop inside a loop you bet it is I can put another loop here for try in range three and notice that it is indented this for me automatically but now I'm going to have to indent all these other ones so what I'll do is I'll highlight them all and th makes this easy instead of having to do one line at a time I just press tab andth intense everything for me and then here I have to go left 120° so I'm going to have a triangular pattern that is made up of a pentagonal pattern of squares let's run this and see what it does how cool is that now it's your turn try drawing a hexagon of squares try drawing a square of hexagons see what you can do by nesting Loops inside of Loops everything we've done up to this point has been in text there's nothing wrong with text but it would be nice to be able to draw graphics we're going to use Python's Turtle Graphics to do our drawings imagine a robotic turtle with a pen in its belly that you can drive around on a piece of paper and it draws lines as it moves instead of needing a physical device Turtle Graphics let us draw the lines on the screen by the way these Turtle Graphics are based on the logo language developed at MIT by Wally foig Seymour papert and Cynthia Solomon I'm going to do most of my experimenting with Turtle Graphics in the Shell the first thing we have to do is import the turtle module or Library the next step is to create a window for the turtle to inhabit so I'll have the variable window refer to the screen method inside the turtle library and that will create a window for us I'll move that to the side so we can see both of them at the same time and the next step is to create a new turtle object the book uses personal names like Alex and Tess to refer to the turtles if you'd like to name your turtle after yourself or your best friend feel free to do so however that's really not my style so I'm just going to use the letter T to refer to a turtle object that's a capital T turtle on the function name from the small T Turtle library and as you can see on the right hand side of the screen there's the turtle that little marker it's facing to the east right now you can now give commands to the turtle object to say make it move forward 150 pixels t. forward 150 and as it moves it draws a line you can also read this from right to left it says call the forward method that belongs to Turtle T you can make the turtle turn left or right let's go left 90° unlike s and cosine which require radians the turtle is more ordinary person friendly and uses degrees so I can say t. left 90 and you'll see that the turtle is now facing upwards to the north let's go forward 100 pixels and then write 45° and then forward another 50 pixels and this time I'm going to appri forward as f D to save myself a little bit of typing you can use LT or left to turn left and right or RT as an abbreviation to turn right to go backwards you can use any of three different abbreviations I can use the full word backward or I can use back or I can just use BK and let's complete a simple design here by turning left 135° and going forward another 50 pixels there are plenty of other things you can tell the turtle to do to erase everything the turtle has drawn so far and return it to its original position use the reset method t. reset in order to preserve room for my subtitles I'm going to clear the shell now as well you can change the color of the pen using the color method so let's use the word green and the green has to be in quote marks and you'll see that the turtle marker has turned green the video description has a link to the list of all the color names that you can use the color change is more apparent when we go forward and you can change the background color of the entire window with the BG color method so I can tell my window background color to be bisque which is sort of a nice Peach brownish color I can make the pen width thicker by using pen size so let's make the pen three pixels wide instead of one and you'll see the difference when I move forward and I can change the shape of the turtle to look like a turtle by using the shape method and putting the string Turtle as the argument a complete as in more than you ever wanted to know list of the methods for the turtle and window are at the link that's shown in the video description here's a complete program that draws a square it sets up the turtle on lines 1 through n by importing the turtle Library creating a window to draw into creating a turtle setting the window background color and then the color shape and size of the turtle itself and on line nine here's a new function speed if you give it a zero the Turtle draws as quickly as possible on lines 12 through 19 I draw a square by moving 150 pixels and turning left 90° and doing that four times in a row and at the end I hide the turtle which leaves the square all by itself let's run the program and see what it looks like and voila there's the square at this point I suggest you just pause the video and go wild and draw anything you like from the shell then try expanding the square program to draw a house by drawing a triangular roof up at the top I've written that program and here's what it looks like when it runs this is without the fastest possible speed so give it a try and start familiarizing yourself with Turtle Graphics in Python there are three main structures in programming sequence repetition and conditionals everything we've done so far is sequence one command after another now let's look at the second structure repetition consider this program that draws a square let's run it and sure enough that's what it does this program goes forward 100 left 90° four times what if we had to draw a pentagon with five sides that would require us to type four forward and left five times an octagon with eight sides would require us to type or copy and paste forward and left eight times and it would be easy to lose count what to do but first let's take a quick side trip and discuss calculating the angles for a regular polygon for the square we turned left 90° because squares are all right angles what if you want an equilateral triangle you might think oh the angles in a triangle all add up to 180° so you'll write code like this let's go forward 100 and then leftt 60° and let's copy and paste it so we have a total of three times run the program and it doesn't work why not pause the video and give it some thought before I reveal the answer the problem is that the interior angles of a triangle all add up to 180° but that's not the perspective we want the way we want to look at the problem is that we need to get the turtle back to its starting position in three turns for the three sides and that's one full revolution of 360° so each turn has to be 120° 360 / 3 so let's change these 60s to 120s and notice that's one other disadvantage of sequence if I had five sides or eight sides I'd have five or eight corrections to do let's run the program and now the angle is calculated correctly that's much more like it that means if we want to draw a pentagon fivesided figure we have to go 360° in five turns which is 72° each 360 / 72 here's the beginning of the program for the Pentagon and instead of writing a forward and left and copying and pasting it to get five total this time I'm going to write a for Loop I'm going to say the word for and then a loop variable the variable that controls the loop and in this case I'll call it counter because I'm counting how many times I've drawn aside the word in and then a list of values that you want the counter or Loop variable to take on so 1 2 3 4 five and then a colon after the four is set up you have the body of the loop the things you want done that many repeated times and in this case I want to go forward 100 pixels and then left 72 degrees after the loop is finished I'm going to set the window background color to light blue the body of the loop on lines 11 and 12 is indented under the four statement and it must be indented properly all the statements in the loop body must line up exactly at their left hand Edge or python will complain let me put in a mistake on purpose and you'll see that python complains that I have an unexpected indent indenting properly is easy with th because th helps you do it correctly what's actually happening when we run this program The Loop variable counter refers to the first value in the list one and then it does the body of the loop which draws one side of the Pentagon the loop variable then moves on to refer to the next value in the list and does the body of the loop again the loop variable counter proceeds to refer to the next value in the list three does the body of the loop again to draw the third side of the Pentagon counter moves on to the next value into the list four does the loop body again then counter Loop variable moves on to refer to the next value in the list five and does the loop body once more that completes the Pentagon there aren't any more items in the list so the for Loop is finished and the program proceeds to the next statement after the four again it's important to note that setting the window background color to light blue is not indented so it's not part of the loop body it's outside the loop let's run the program to show that it does what we really expected it to do and sure enough it works great this program doesn't use the loop variable in the body of the loop let's change the program so that each side of the Pentagon is drawn in a different color first I'm going to change the list of values to a set of color names instead of 1 2 3 4 five I'm going to set the strings green red blue orange and purple there are still five items in the list so the loop will be executed five times I'll still get a pentagon but in this case the loop variable isn't really designed to count the loop variable is telling us which color to draw the side in so let's change its name from counter to something more appropriate like side color then inside the loop before I draw this side I'll set the color of the pen to be the side color let's run the program and I get a multicolored Pentagon let's do one more program that involves a for Loop but not a graphic one I'm going to move the shell up a bit and I'm I'm going to clear it and create a new program and this program is going to display the cube of the numbers 10 through 15 and as usual I put my name and the date first I'm going to have a line that labels my output I'm going to print the word number and Cube and now I'm I'm going to set up my for Loop for counter in 10 11 12 13 14 and 15 the body of the loop will print the number and its cubed nicely lined up with my heading I'm going to need formatted output for that so I'm going to have my format string this says print as an integer with six places a space and then another integer with six spaces format that and fill in the blanks with the counter and the counter to the third power the cube of the counter and then I'll print the end when I'm out of the loop so counter will first refer to 10 and it'll print 10 and a th then counter will refer to 11 and it'll print 11 and whatever 11 cubed is then 12 and 12 cubed 13 and 13 cubed all the way up to 15 and 15 cubed when I try to run this program I have to save it with a name let's call it cub table. py and there I have my numbers and the cubes from 10 through 15 inclusive there's an answered question here what if we wanted the program to ask the user how many sides they want for their polygon so they can say oh I want eight sides or I want seven sides or I want 12 sides what if we wanted to ask them the starting and ending number of the cube table let's say they want the cubes of all the numbers from 23 through 37 in that case we can't write a list of values for our four Loop because we don't know in advance how many values we're going to need we'll solve that problem in the next video at the end of the last video we were left with the question of how to use a for Loop if we didn't know in advance how many times we would be repeating that Loop the answer to that question is the range function which effectively produces a list of integers here's a program that uses the simplest form of range for I in range five print I in this case my Loop variable is just a single letter I rather than a word like counter this is a convention among python programmers common Loop variables will be letters like I J K or n when we get to the discussion of lists we'll see why this is a reasonable Choice let's run the program and see what it produces we see that it produces the number Z 0 1 2 3 and 4 that means we did Loop through five times so Range Five is the same as if we had typed the list 0 1 2 3 4 when you have a simple range the loop variable starts at zero and goes up to but not including the number you specified why start with zero because if you're doing calculations with the loop variable those calculations are almost always easier when you start at zero than when you start at one trust me on this this simple form of range is exactly what we need to solve the problem of allowing the user to specify the number of sides they want for a polygon let me move the shell down a bit here and clear it out here's a program with the turtle initialization already done for us I'll ask the user for the number of sides they want for the polygon n sides is assigned the in of input of how many sides and I'll also ask how long they want each side to be side length refers to the int of input of how many pixels per side and then I need to calculate the angle that I'm going to turn when drawing the polygon and that angle is ass sign 360 divided by the number of sides now I'm ready for the loop this time I'm going to use a more descriptive Loop counter for side in range and sides I'm going to go forward the specified length and this time I'm going to turn right by the angle that we've calculated let's run the program and see how it works let's say I want a fivesided polygon at 100 pixels per side and I get a large Pentagon let's run it again and say I want 12 sides of length 37 and I get a 12sided figure let's give it one more run and say I want a sixsided figure with 120 pixels per side and I get a giant hexagon so the program is working just great the next version of the range function comes in handy when you need to have a starting point other than zero this will solve the problem of displaying the table of numbers in their cubes where we let the user specify the beginning and ending number here's what this form of range looks like in the shell for I in range 5 comma 9 print I in this version of range you specify the beginning and ending number this example is the equivalent of writing the list five 6 7 and 8 as with the simple range the numbers that it produces go up to but not including the ending number here's the start of our program that does the table of Cubes here's the start of the program that displays the numbers in their cubes first let's ask the user for the starting and ending numbers they want start refers to the in of input of starting number and finish is assigned the int of input of ending number once I have the starting and ending number I can print my heading and then I can say for I in range start to finish plus one I have to add one because I want the Finish number to be included and remember range goes up to but not including the number I specified and now I do my formatted print two six space numbers integers and I fill in those formats with I and and I cubed let's clear the shell and run the program my starting number will be let's say 21 ending number 26 and there's the cubes of the numbers 21 through 26 run it again my starting number let's say is 45 through 56 and there are the cubes of the numbers 45 through 56 there's a third vers version of range that lets you specify the starting number ending number and step size between numbers I'll show you that here in the Shell I can say for I in range two to 11 in steps of three print I and this is prints two then 2 + 3 which is five then steps three further which is 8 three further would be 11 but remember I never include the final number so this prints out 2 5 and 8 I don't have a good example of a program that uses this version of range but I do want you to know about it so that you can use it if you ever do need it and that's range the function that effectively produces lists of integers that you can use in a for Loop when you don't know in advance how many times you need to Loop and this video I'm going to draw a set of right angle bookends each bookend will have a 50 pixel wide base and a height of 100 pixels and they're going to be spaced 40 pixels apart and here are the comments that say exactly that at the beginning of my program before I start programming I'm going to draw a picture of what it's going to look like when it grows up this doesn't have to be a fancy picture as you can see here I just want to get an idea what it's going to look like and most important I want to add numbers to it so I can see how much space I'm going to need everywhere the Red Dot there in the middle by the way is where the turtle begins moving my parents always used to tell me do I have to draw you a diagram and my answer in this case is yes you do have to draw me a diagram because it really helps me figure out what's going on so having this diagram in mind I can now start the program the first things we already know I have to import Turtle I have to set up a window by calling the screen method and I'm going to have a turtle T1 which is a turtle object let's draw the right bookend first looking at the diagram the easiest thing to do will be to move 70 pixels East and then I can back up 50 turn left which will get me facing north and go up 100 pixels the question is how do I move 70 pixels East without drawing anything and the answer is to use the pen up method which says bring the pen up off of the screen when you move then I can move forward 70 dots put the pen down again move back 70 dots and that will excuse me back 50 dots and that will draw my 50 dot wide base I can then go left 90° and go forward 100 rather than try and write the entire program before testing it let's see if that part works so I'm going to run that and sure enough I'm getting the bookend that I want it's a bit thin so I'm going to add something here let's add t1. pen size 3 to make a thicker line and run again and that's looking good now it's time to draw the leftand book end I really don't want to try and move the turtle back to the beginning point or back to the far end of the leftand book end so what I'm going to do instead is I'm going to create a second turtle and it's going to start at the home position right in the middle of the screen Facing East I can make it raise its pen and this time I'm going to go back back 70 pixels because I'm going to the left I'm going west put the pen down this time I'm going to go forward 50 dots I'm still going to need to go left 90° and then draw the vertical of the leftand book end let's save that and run it and I forgot my pen size on the second Turtle so let's put that in run it again and now I have my book ends exactly as I wanted them did I really need to use two turtles here no not really it turns out that there is a method for Turtles called home if you say home that Returns the turtle to its original place in the middle Facing East without having to do a lot of work so instead of creating that second Turtle I could have done t1. home and then gotten by just fine with one Turtle let's show that and oopsie that doesn't work because I forgot to bring the pen up before I went home this is the sort of thing that happens all the time if you start writing without planning you get weird results like that not a problem we'll add a pen up before we return to the home position and in fact because the pen is up I don't need this I didn't delete the line the reason I didn't delete the line is because just in case I'm wrong and I do need it again I don't want to have to retype it so instead I did what's called commenting it out if everything works I can delete the line later but normally I will comment things out so just in case I make another mistake I can go back without having to do a lot of extra work so let's think of what the computer is going to be doing I've drawn my rightand bookend I take the pen up off of the screen and then I return to the original place and then I go back 70 pixels which is exactly what I want to do because I still want the pen to be off of the screen doing the pen up again wouldn't hurt but it wouldn't help either this time it ought to work and I've gotten by with one turtle the question is should you always use only one turtle or should you use multiple Turtles ask me if I care do you care no I don't really care a lot I'd happen to be a one Turtle kind of guy and I like to do things with one Turtle if at all possible but there are some algorithms some drawings that you want to do where it will be a lot easier and a lot more convenient to use multiple Turtles it's somewhat of a balancing act if using multiple Turtles makes things harder to read then go back to fewer Turtles it's a judgment call but I will not be disappointed if you do the assignments and get them done with one turtle or multiple Turtles as long as the program is done and working properly the second thing we can take away from this video is that sometimes you will write a program and it won't come out the way you want don't panic don't freak out analyze it figure out what went wrong and correct it and that's the world of programming Welcome to our world we've already talked about modules and importing math earlier in the course so what I want to start with in this video is the random module in the Shell let's import random and then if you use the random. random function it will return you a random number between zero and one excluding one so let's run it a few times here and each time we get a brand new number from zero up to but not including one for things like card games you'd like to be able to J Generate random numbers in the range 0 to 51 which gives you 52 total and for that you have Rand range if you give it a single number it generates a number from zero up two but not including that number so if I say random. Rand range of 52 I get 39 and this time I'm just going to use up Arrow to make my life a little bit easier and each time I run it I get some different number and there's no guarantee that I won't get duplicates because as you can see I am getting those if I were programming a dice game I'd like to have a random number in the range 1 to six so I can say random. Rand range with a lower bound and an upper bound this will generate a number from one up two but not including seven so there a two a three a five and so on at this point we can't write any dice or card games because we're missing the concept of selection which we're going to see in chapter 7 we can however use random numbers to Generate random artwork I'm going to go into a lot of detail about how I wrote and designed this program and here's where the video may get a bit strange as I'm going to be alternating between screen recording and a regular camera here's what I want the program to do I want to draw randomly sized triangles squares pentagons and hexagons all centered around the center of the screen I'm going to take you through the steps I used to create this program including a mistake or two because it's important to see the design process in action here's the general outline of the program in lines 4 through six I'm going to import all of the modules that I need in lines eight and N I'm going to set up the turtle and then starting in line 11 I'm going to draw 10 shapes where I randomly choose the length of each side and the number of sides that I want and then draw the appropriate polygon I can fill in part of this right away the length of the side is going to be some random integer in the range 50 to 200 in steps of 10 my random number of sides is going to be a random number again an integer in the range three up two but not including seven which will give me triangles squares pentagons and hexagons the problem now is how to draw a centered polygon I'm starting with the square first I need to know how far to move from the center of the screen and then I also need to know how far I'm going to have to turn the turtle which is facing this direction so that I'm oriented properly to draw the square let's label some of this let's call this distance that I have to move X and the will also be X here's my polygon angle which happens to be 90° or 360 / 4 this means these other two angles let's call them Theta are 45° which is half of 90° now how can I find x one way to do it is to drop a perpendicular to this side whose length is side and now I have another right angled triangle this right angled triangle has a base of length side over 2 and its hypotenuse is X some trigonometry will tell me that the cosine of theta is equal to the adjacent side with that length over the length of the hypotenuse and some Al algebra tells me that X is going to be side over 2 / the cosine of theta how far do I have to turn to get oriented properly to draw the square right now the turtle's pointing straight North if I were to turn 180° I would be facing straight South and then if I back off by Theta degrees that's the direction I want to point so the angle that I have to turn by in order to start drawing is 180 minus Theta now that I have the math arranged I'm going to temporarily set my program to draw only squares by putting a four in there so I'll always always draw a square and then I'm going to put in the code for drawing the polygon my polygon angle is going to be 360 divided by the number of sides that's my interior angle so to speak and the Theta is going to be my polygon angle / two the distance I have to move before drawing the polygon is going to be side over two divided by the cosine of theta Theta is in degrees but cosine wants radians and that's why I have to do the conversion to radians here for each shape I want to return the turtle to its home position I'll set the pen size to three to make it more visible I'll go left 90° and then forward by that distance that we calculated and then to get the turtle oriented properly write 100 180 minus Theta drawing the polygon is something we've seen before for count in the range and sides I'm going to go forward by the length of the side and then right by my polygon angle let's run this and see how it works you'll see that I should lift the pen up when I move away from the center but this is a good help at least to see that I'm doing the right thing so that's looking good now let's put back the random range so I get a random number of sides and see how that works all also by the way I'm going to set the turtle speed to zero so that it draws as fast as possible and oh goodness that's not what I wanted I love the abstract look but the triangles the pentagons and the hexagons are not centered as the squares were so the question is what's wrong here this is what happened by the way when I was writing the program the first time I got this result and it took me about 15 minutes to figure out what's going wrong it's this line right here where I take Theta as the polygon angle divided by two that's the correct angle for a square but not for any other figure let's take a look at a pentagon this interior angle here is 72° it's the polygon angle 36 60 / 5 and my original formula was to say that Theta is equal to the polygon angle / 2 so that would make this angle Theta 36° that can't be right because 72 + 36 + 36 doesn't add up to 180 it only adds up to 144 since the sum has to be 180 the correct formula for Theta is that it's 180 minus the polygon angle / 2 it was just an unlucky accident that this simplistic formula happens to work out to 45° for the square 90 / 2 and 180 90 / 2 also works out to the correct answer of 45 and I mistakenly thought that this was the correct formula it isn't this this is the one I have to work with so instead of naively dividing by two what I really need to do is calculate the angle correctly namely 180 minus my polygon angle divided by two and once I make that change the code starts working very nicely and then the only thing I need to add at the very end is to bring the pen up before I start drawing and to put the pen down when it's in position and there's the program that I was looking for the most important thing to take away from this is that I planned this program out I drew a picture of what I wanted and I labeled it that's not a guarantee that the program will be correct I found that out when I derived the wrong formula for Theta but that planning and the labeling and the drawing got me a lot closer to a solution than if I had just sat down and started hammering away at the keyboard the book covers functions quite well so there's not a lot I can add to it you really really need to read the material and most important use the code lens feature to step through the functions one step at a time this will Aid your understanding immensely here's a quick recap and some small amount of additional information you can think of a function as a black box where you drop in some input value or value into the input Hopper and receive some output value the definition of the blackbox itself is done via the def keyword DF the variable names A and B are called parameters think of them as placeholders in terms of our diagram they are labels for the input Hoppers to our black box and the return statement sends the value that follows it out the out put Hopper when you call the function you provide actual values called arguments that fill in the parameter placeholders and The Returned value becomes the result of the function call a lot of people use the words parameter and argument interchangeably don't do that here's how you can remember which one is which the arguments are actual values that fill in the placeholder parameters argument and actual both begin with a placeholder and parameter both begin with the letter P the book uses code lens to go through the programs one step at a time th has a similar feature used for debugging programs to use this feature most effectively go to the view menu and choose variables and a window will open up to show you your variables as you go through your program then choose debug current script from the Run menu this brings up a toolbar with three icons step over step into and step out to see absolutely everything that python is doing we're going to use step into in this video highlighted in yellow is what python is currently looking at it's starting with line five the definition of the function it says oh I've got a function here and when I step into it it says great here's a function called average and that weird number following the word at happens to be the memory address where the function resides and we may safely ignore that python then moves to line nine and it has to evaluate this statement the first thing it has to evaluate is the right hand side it starts out by figuring what the arguments to average work out to so as I step in it shows that three works out to three and six is six now it's ready to call the function when the function call is made th opens up a new window to show that function and its variables so here's the function and down here are the what are called the local variables and you'll notice that it's already filled in the parameters A and B with the arguments 3 and six python needs to evaluate this assignment statement so as we step in we find that we use the right hand side first and now it needs to add a and b it evaluates a which is currently three and B which is currently six so that works out to 9 two works out to two and now we can do the Division 9 / two which is 4 and a half and that is what variable result will refer to and as you can see that has now been added to our variable list now we're at the return statement and Thon has to or rather python has to evaluate result result is 4.5 and that that's what gets returned to the caller so the whole right hand side of line nine has worked out to the value 4.5 and that becomes the value that our new variable AVG refers to the last statement in the program prints the average and rather than go through that step by step we'll do a step over which will do that statement all at once which prints out 4.5 five and the program finishes that's how you use the debugger in th to go through a program one statement at a time to see exactly what python is really doing whenever you have a python function all the names of the parameters and the variables that you define inside that function are called local variables they belong to that function and nobody else can get to them consider these functions f and G they both have a variable called Z the Z that's used on lines 2 and three is local to function f it belongs to F the Z that's used on lines 8 and N belongs to G and this Z here on line 13 is a variable that's been declared outside of any function all three of these z's are total totally independent of one another it's as if each function is its own private universe and this is exactly what we want because it means we can use any variable names we want in our functions with an absolute guarantee that they won't conflict with the variables defined by anyone else in any other function parameters are also local the X and Y on line five are completely independent from the X and Y that are used on lines 11 and 12 an important point to note is that the parameters get a copy of the arguments the arguments themselves don't change let's step through this program in the debugger to see what's going on we'll step over the definitions of f and g and also the assignment of 2 tox and Y to 3 they show up here in our variable window and now let's go into the call to f x is 2 Y is three and when we make the call we' get a brand new window A and B are parameters have been filled in with copies of X and Y the two and three and 2 * 3 is 6 + 3 is 9 and that is assigned to the local variable Z when we return Z that window disappears The parameters and the local variables are gone until we call F again all we have is the return value of nine which gets assigned to Z and so now we have Z here from line 13 which has the value nine now let's look at the call to G on line 14 we'll step into it X is 2 and Y is three and when we make the call again we get a new copy of the variables X and Y this X and Y are totally independent of this X and Y and I'll show you why if I step over this line X+ equal 5 the local variable X becomes s the original argument X remains unchanged similarly when when I say Y is y * 3 the local variable becomes 9 but our original argument stays unchanged and when I execute this line I get a local variable z63 which has nothing to do with our Global variable Z that's been defined in our main program and again when I return Z these local x y and z all disappear and what's left is the return value which gets assigned to W our variable at the main area and when I print Z and W I get 963 many beginning programmers think you have to name the parameters the same as the argument variables as we did in line 14 when we had X and Y here and we named them X and Y here but there's no law about that remember the parameters are placeholders and they can be filled in with any sort of arguments here in line 16 I'm using Z and W and passing those in as the arguments for the placeholders X and Y on line 17 I'm not using any variables at all I'm just passing raw numbers 30 and 4 into X and Y this means you can't guarantee that the par arer names will always match the variable names that you use in the call the important Point here is that the variables in a function are local no function or your main program either can reach into another function to look at its local variables in general the way you send data to another function is through its parameters and you send data back to the caller via return however a function can reach outs side to look at a variable that has been defined previously consider this program that has two functions both of which need to know the current tax rate while I could have put the tax rate definition into both of my functions individually that's a lot of duplication and if the tax rate ever changes I'd have to change it both in line four and in line nine which could lead to unexpected errors so instead what I'm going to do is I'm going to Define tax rate here in line one before I Define any of my functions because it's been defined here outside now all my functions can access it you'll notice by the way that I've used all capital letters for the definition of this variable this goes counter to what I usually do which is all lowercase by convention when you see something in all uppercase programmers know that's supposed to be treated as a constant you're supposed to set the variable once and never modify it afterwards let's see how these Global variables work let's debug this script the tax rate is going to be set to 7 we'll skip over our definitions and now let's go into the cell call five works out to five 20 is 20 and now what we have is the price and the quantity which are going to be copies of the five and 20 from our main program and let's go and step into this the price is a local variable it's five quantity is a local variable because it's a parameter and it's 20 which works out to 100 and now we need one plus tax rate tax rate isn't defined here but because it's global because it's already been defined outside of our function python can look up and outside the function to get the 0.07 and all is well with the world we return the result as 107 and the rest of the program would continue as normal the same thing would happen if we went into buy 520 and 0.05 become the parameters discount price and quantity and now as I evaluate this whole expression I'm going to eventually need the tax rate and again it will get my Global value here of 0.07 and do all of the calculations and return return return that result remember I said that programmers see the all capital variable names and that's a constant and they know they're not supposed to modify it well what if I did want to modify tax rate inside one of my functions the answer is it can be done but don't do that and I'm not going to show you how to do it because it's bad programming practice it's not a good idea to allow all your functions to trample all over global variables because if Cell were to change the tax rate globally then when I went to go and buy I'd have a different tax rate than the one I expected and things would get really bad so here's the summary of the whole video parameters and the variables that you define inside a function are local they exist only as long as the function is doing its job the moment the function concludes and Returns the parameters and the local variables disappear until the function is called again you can Define variables outside all your functions and those will be globally accessible for reading only to your functions use Global variables like this only for constants that many functions will need in Python you can put if statements inside of if statement and that's called a nested if here's a program that asks for a price and quantity and calculates the subtotal the tax and the total and prints them out let's run it if I have a unit price of $4.50 and I order seven of them there's my subtotal tax and total I'd like to be sure that both the price and quantity are greater than zero let's add an if else for the price I'll ask for the price and then if the price is greater than zero I want to do everything else I could indent them all by hand one by one but th gives me a helping hand if I highlight all the lines and press tab it indents them all let me hide the shell here so you can see the whole program if the price is greater than zero continue with everything else otherwise print price must be greater than zero let's go back to the shell and run the program this time if I enter a unit price of $4.95 it'll immediately tell me that the price must be greater than zero cool that handles negative prices but what about negative quantities if I give a valid unit price and a negative quantity it still goes through with a bad calculation so I need another if else to handle that after I get the quantity I have to ask if the quantity is greater than zero if that's the case I'm able to do all this stuff otherwise the quantity is zero or negative and I print the quantity must be greater than zero I have an if from lines 9 through 18 inside an if from lines 7 through 19 let's run the program with a valid unit price and quantity everything works nicely with an invalid price it gives me an error right away and with a valid price and a negative quantity it gives me an error message as well the program is now working the way I want to because I have a nested condition an if within an if can you have an if statement inside the else portion yes indeed here's another way I could have written the price program in this program I'm asking for both the price and quantity before I do any testing then I ask is the price greater than zero and the quantity is greater than zero if both of them are okay it's okay to do the calculation otherwise one or both of the price or quantity must be wrong in the else portion I'm going to have a nested if statement a unary if if the price is less than or equal to zero then it's bad I need to make a print statement for that separately I have to ask if the quantity is less than zero if it is I give an message there's no else needed for either this if in line 18 or this if in line 21 because the only way I can get here is if the price is less than or equal to zero or the quantity is greater less than or equal to zero if they were both greater than zero I would have handled it here let's view the shell clear it and run the program if the unit price is 450 and I order 10 of them everything works great if the unit price is negative and I order 10 of them it tells me the price must be greater than zero if the unit price is okay but the quantity is bad it tells me the quantity must be greater than zero and if both the unit price and the quantity are bad it gives me both error messages there's an important Point here in order to do a good test of my program I have to test all the combinations of good and bad input to make sure I've covered all the cases another thing to notice is the difference between this program and the other one in the first version of the program as soon as I got an error I gave the error message in this program I wait until I have all the input before I give any of the error messages which approach is better that's a design decision the takeaway from this video is that it's possible to have if inside of if and if inside of else and if the condition warrants it you could even have an if inside of the if as well as an if inside of the else whatever the design of the program requires you may nest if and elses inside of one another to get the effect you need up until now we haven't been able to test for conditions when we ask a person for their age in years as in this program if they enter a negative number we do the calculation anyway even though it doesn't make any sense we'd like a way to tell if the input is valid before we do the calculation and that's why python has the binary if statement which has this generic model if some Boolean expression evaluates to true we do some statements otherwise the expression worked out to false and we do other statements that's a bit abstract so let's put a binary if into this program we're going going to say if the years is greater than zero everything's okay and we indent the things that we want to do as the result of the if we want to calculate the days and we want to print the result otherwise the years is not greater than zero so we need to print age must be greater than zero let's run the program again again this time if I say the age and years is 35 it does the calculation run it again give it a 4 and it gives me the error message that age must be greater than zero in most cases you're going to have an else to go with an if you'll want to do one thing or some other thing sometimes though you'll want to have an If part only without an else to go with it and that's called a unary selection one way as opposed to this binary selection which is twoway let's add some code to ask for the user's name and print it in the output name equals input of what is your name and here in the output we'll put another placeholder and and add name to the things to be output let's clear the shell and run it so if your name is Nancy and you're 42 years old that's Nancy's age what happens if I press only enter for the name and then put the age in years it says you're about 15,330 days old comma period and that's fairly ugly let's put in a unary selection to provide a name if the user hasn't given us one if the name is equal to the empty string and notice I'm using two equal signs here remember a single equal sign means a signment a double equal sign is asking a question are name and the empty string the same thing that's a yes or no true or false question if the answer is true then we're going to set the name to mystery user we don't need an else if the name wasn't the empty string it's the name they entered and it's the one we want to use let's clear the shell and run it first with a name like Fred who's 19 and let's run it again this time with no name 19 and it gives us the name mystery user instead of Fred and the output is a little bit more humorous and at least not as ugly as it was before some people like to have an else with their if no matter what if you're one of those people and you insist on having an else python has a construct for you I can say otherwise else pass pass is a special keyword that means do nothing lines 6 through n now tell us if the name is the empty string I set the name to mystery user otherwise I have a valid name pass on to the next statement nothing is needed here and this also works if I give a name and an age it works fine if I don't give a name and give an age it works exactly as before so summarize there are two types of if statements one is the if with else where you have two choices you do one thing or the other if the years is greater than zero it's valid if the years is not greater than zero it's not valid that's a binary selection the other kind is a unary selection if the name is the empty string we'll set the name otherwise there's nothing to be done and so we don't even need the else part however if you're one of the people who insists on having an else for every if you can always use pass to tell python do nothing here's a program that prints a stage of Life given an age it's written as a series of independent unary if statements to test age ranges let's say I enter an age of seven seven is not less than zero so I don't print that seven is not greater than or equal to zero and less than two so I don't print infant 7 is not greater than or equal to two and less than four so I print the skip on line excuse me I skip the print on line 11 7 is not greater than or equal to four and less than six so I skipped the print on line 14 7 is greater than or equal to 6 and less than 13 so I'm going to print out grade school I continue on to the next if statement 7 is not greater than 13 and less than 18 so I won't print teenager and S is not greater than or equal to 18 so I won't print legal adult the only thing that I will print out is grade school and that's the correct thing let's run the script and view the shell and put in a Seven and sure enough it prints out grade school there's nothing wrong with this program it works exactly as advertised but it could be improved notice that once we find out that the age is between 6 and 13 we don't need to do any of the other tests this is a place where we'd like to use else's to save ourselves some computation so let's rewrite it this way if age is less than zero that's not a valid age otherwise let's test to see if it's greater than or equal to zero and less than two if that's the case we'll print infant if that's not the case then we Nest yet another if statement and ask well is it greater than or equal to two and less than four and so on I can Nest my ifs inside of the else Clauses and that will guarantee that only one of the ifs will be matched there's some extra optimization that I can do here as well if the age is not less than zero let's say they entered seven then I know for sure that it's not greater than or equal to zero so I don't need this test at all similarly if the age is seven it's not less than two so I know it's it's greater than or equal to two in the else Clause there's no need for me to test that again I could go through by hand and indent all of these but to save a little bit of time let me show you what this looks like when we're done and here it is now if I enter a seven for the age it's not less than zero seven is not less than two it's not less than four it's not less than six but it is less than 13 which means we print grade school and we skip this else it's not needed so our program is now a little bit more efficient let's run it and see that it works let's clear the shell view it and run and if the person is seven they're in grade school again the program works there's nothing wrong with it it's a little bit better than the pre previous version the only problem we have now is that we're indenting and we're marching off the right hand edge of the screen and it hard to read and it could get confusing if we had more choices there's a shortcut that you can use in Python when an else is immediately followed by an if you can combine them into the single keyword L if and then I can uninvent this here's another else that is followed immediately by an if so I can combine those into L if and make sure my indentation is correct the same with this else if can be combined into the keyword L if and so on and so forth again to save time I'm not going to do all of them I'm going to show you what it looks like when it grows up this is a lot more readable and it does the minimum amount of testing again let's go with age seven is seven less than zero no well otherwise if seven is less than two which it isn't otherwise if age is less than four otherwise else if age is less than six seven is not less than six otherwise if age is less than 13 which it is we print grade school and then we can skip all the other lfs and El's let's view the shell clear it and run this version of the program and again a sevenyearold person is in grade school the moral of the story if you have a program with a chain of conditions if some condition is true otherwise if some other condition otherwise if some other condition otherwise if yet another condition otherwise last case you can take all the else ifs and instead of having to indent them you can combine them into L if and then all your cases will line up nicely your code will be more readable and you can get away with a lot less computation to get the results you want a for Loop is great when you know in advance the number of times you want to go through the loop in the cases where you don't know in advance you need the while loop let's look at the while loop using something called the Hailstone sequence here's how it works start with a number in this case 17 if the number is odd you multiply by three and add one giving you 52 if the number is even you divide by two 52 ID two gives 26 26 is even divide by two giving 13 which is odd meaning you multiply by three and add one as you see the numbers move up and down much as a Hailstone moves up and down in the clouds before finally coming to Earth in this case coming to Earth means ending up at the number one and it takes 12 steps to get there the question is how many steps does it take for a number to converge to one and there seemingly no pattern to that some numbers have a short sequence others have a very long one for example if you start with 52 it takes 11 steps to get to one if you start at 51 it takes 24 steps here's the logic for a program that implements the Hailstone sequence we'll get a number and set our count of number of steps to zero if the number is not equal to one then we're not done yet and we have to ask if the number is even in which case we divide by two or not even in which case we multiply by three and add one that's one more step added to the count and then we come back to ask is our new number not equal to one if it's not equal to one we have to go through the whole process again eventually we'll get down to a one so number not equal to one will come back as false and we'll print the count the number of steps that we took this bold red line here is our while loop it comes back after we add the count we come back and test again now let's look at the python code to implement this at the top of the program I've taken that flowchart and expanded it into text on line 10 I ask for the number and on line 11 I set the count to zero line 12 is where the magic happens as long as the number number is not equal to one I have to do the body of the loop which is on lines 13 through 17 I know that's the body of the loop because it's indented one level from the while for odd numbers I multiply by three and add one otherwise I divide by two and add one to the number of steps when I finally reach one one not equal to one is false I drop out to line 19 and print the number of steps with the count that I've accumulated let's view the shell and run the program this time with 17 which takes 12 steps if I start with 51 it takes 24 steps if you want to see the process in action you can print the number here and then you will see inside the loop every calculation that has been that has been done if I type 17 you'll see the sequence 52 26 13 40 20 10 5 16 84 21 which took 12 steps one other thing that I have to point out here what happens if I run the program and start with one the while loop exits immediately and I have the number of steps as zero this is an important Concept in a while loop if the condition comes false immediately the body of the loop will never be done I entered a one for the number my count was zero one not equal to one came out false immediately so I dropped down to line 20 and printed the number of steps as zero let's look at another use of while getting input until the user tells us they're finished here's a program that asks users to enter prices of items and gives them a total when they've finished but again here we don't know how many items they have they may have one item 10 items or 50 items we're going to set up a sentinel value a special input value that indicates a there are no more data items coming in in this case we'll use 1 as the price because nothing can cost1 that will be our Sentinel value we start off by setting the running total to zero and we set up a Boolean variable called more input initially true meaning I'm waiting for more input I'm going to run the program so I can do the narrative along with the code I'm waiting for more input more input is true that's why I'm asking for the price or negative 1 to finish I'm going to enter $8 $8 is not equal to ne1 so it'll add $8 to our running total we returned to line six more input is still true we're still waiting for more in put and that's why I got the prompt again from line seven this time I'll add $4.50 $4.50 is not equal to negative1 so that will get added to the running total I come back up here more input is still true and I again prompt for a price this time I'm going to enter my1 since 1 is equal to1 I'll take the else branch of this selection and set more input to false once that happens I come back to line six and ask is there more input this time I get false and I'll drop down to line 12 and print the total of $12.50 finally you can use while Loops to repeatedly request input until you get a valid value for example your program might ask users a yes or no question you want to make sure they either type the letter Y or the letter N if they type the letter X or something else you want to prompt them again and say no really give me a y or n that's what this function get yes or no does you give it a message the prompt to be displayed it starts by setting the valid input to false before you ask for input you don't have valid input yet as long as you don't have valid input the program will put up the message and get your input and convert it to uppercase if you gave me a y or an N then that's valid input and I'll set valid input to True otherwise I'll tell you to enter yet y for yes or n for no the loop will come back and if you did give me a yre n valid input's now going to be true not true is false and I'll drop out and return the answer if you didn't give me valid input I'll go through lines 5 through 10 again this is the we're going to keep doing this until you get it right Loop here's the main program I'll call get yes or no with the prompt do you like carrots y sln i put this y slash in here so that the user has an idea of what to expect to put in for valid input get yes or no will return either the letter Y or the letter N into the variable carrots if carrots equals y I'll print one response otherwise I'll print a different response let's run that script and view the shell if I type an X please is enter y for yes or n for no this is the loop in action it's going to keep asking me again and again and again until I finally type A Y or an N this time I'll go with Y and the program ends telling me I like them too let's run it again check with invalid input and then valid input and the program works the key point of this video is that the while loop lets you repeat some actions as long as some condition is true you don't need to know the exact number of iterations in advance this video isn't very highly scripted and I'm going to be doing most of it in the Shell so you have been warned we've been using strings a lot in this course a string is zero or more characters inside of quote marks you can use single quotes like this or double quotes like this or triple quotes if you need a multiline string and you'll notice the back sln which is Python's way of saying give me a new line a string can have one single character in it and there's a special string called The Empty string that has no characters inside of it at all even though it doesn't have any characters between the beginning and ending quote marks it is still a perfectly valid string we've seen that you can add strings for example door plus Bell adds them together the official name is concatenates them and we get a single string doorbell you can also take a string and multiply it by an integer and it repeats that word as many times as you need there are no other arithmetic operators that work properly with strings strings are objects with numbers we would usually give the number as a parameter to a function for example the absolute value of 3.7 with strings however we need to use the dot notation as we did with turtles let's create a couple coup of variables here let's make the word playground and let's make a sentence this is a sentence and let's have a variable called shout which is all an uppercase if I want to convert the word to all uppercase I can't say upper of word I can't use it like a number instead I have to use the dot notation and say word. uper this sends the upper message to the word if you're reading from right to left and the result is playground in all capitals Capitals in a similar way I can say shout. lower which will convert all the letters in the string to lowercase the exclamation point isn't a letter so it remains unaffected there's also the capital capitalize function if I say sentence. capitalize it converts the very first letter in the string to a capital letter notice that it capitalizes only the first letter it does not affect any of the rest of the word so it won't capitalize every word it' be nice if you could do that and later on the course I may show you a way to make that happen there is one exception to this dot notation if I want to find the number of letters or number of characters excuse me that are in a string I can't say word. length that doesn't work I have to say length of word so that's the one exception to dot notation I've shown you upper lower and capitalize another useful function is strip which gets rid of leading and trailing wh space on a string white space is defined as blanks or tabs or new lines let's take a look at this program it asks what's your name and tells you that's a nice name this sep equals empty string at the end tells python not to put extra blanks between the items that it prints let's run this and run it legit I'll say my name is David it says that's a nice name David you'll notice that the cursor for the input was right next to the question mark what happens if somebody decides that they're going to do this what's your name they'll put an extra blank and they'll say Joe and let's put a couple more blanks at the end the problem is that your name has those blanks inside of it and so they'll say that's a nice name comma blank blank Joe blank blank exclamation point hardly a nice thing to look at here's what we're going to do we're going to say say that the new name is equal to your name. strip and then instead of printing your name we're going to print new name now when we run it if they say their name is Joe the extra blanks at the beginning and end are gone we can use capitalize we could say this we could say new name equals new name. capitalize which will now replace the old ver version with the capitalized version and if they say Joe everything looks really nice instead of doing it in two steps I can make a chain of function calls I can say take your name get rid of the leading and trailing blanks and then capitalize that so I can do it all in one line as a chain of function calls now if the person says their name is Nancy everything works out exactly as it is and it's a very convenient way to do a series of function calls Allin one go there are a couple of other functions you might find useful if I say word. lstrip it gets rid of blanks or Whit space at the left if I say word. rstrip it gets rid of trailing white space at the end of the word you can also use strip in another way I don't see this a lot but it's there if you need it let's say I say that the word is equal to Dash D Dash something and three D4 make a bunch of dashes there I can now say word. strip and tell it what the character is that I would like to get rid of so I want to get rid of dashes at the beginning of and end and it does that again I haven't seen a lot of use for that but if you ever need it there it is one other useful thing to do is strings is to find out if one string is contained within another let's go back to the word playground and I want to find if the letter a is anywhere in playground I can say word. find and give it the letter A it'll say yes it's at position two what does position two mean well it turns out that you can treat a string as though it were a list of characters so when I have the word playground the p is at location zero the L is at location one the a is at location two and so on in fact I can extract any character I want to by saying this if I want the word character at position three that gives me the letter Y word Subzero and later on by the way you'll see why I'm calling it word Subzero why I read it that way is the letter p this is called indexing the indexing operator is a square bracket and the number in between the square brackets is the index that you're looking for what would happen if I tried word of ne1 the answer is it would give me the last letter in the string word 2 would give me the N what happens if I go off the edge of the universe the length of the word is 10 so if I try to get to word 11 it'll say the string index is out of range that index number is too big for the word same thing if I go off at the negative end if I say word sub negative 11 it'll say the word index is out of range let's go back and look at word again I can do find for more than one character if I want to say word. find ygr does ygr exist anywhere in playground the answer is yes starting at position number three what if I try to find something that isn't in the word like igore answer is it gives me back a negative one that doesn't mean it's the last character the negative one is special it means not found let's take another word here like bookkeeper I like that because it has three sets of doubled letters in a row and I want to find the letter O it will find the first occurrence it won't find all of them it will find the first o which is a position number one similarly otherfind of K we'll find it at location three 0 1 2 3 so find gives you the index of the first occurrence of a string inside of another one or negative one if it's not there at all there's a function called index which does something similar if I say word. index of grro it'll give me four and that's correct because if we look at it zero one two three four is where we grro starts however if I try and find something that's not in the word like gr W it'll give me an error if you want your program to give an error when something isn't found use index most of the time though you'll want to get back a negative one rather than getting an error so your program can continue and do something useful usually using an if statement in the previous video we saw how to get a single character from a string by indexing with the square brackets you can get a section of a string by specifying a slice let's make a variable called string and set it to recasting if I write string square brackets 2 col 6 that means to take the slice starting at index number two the C up to but not including the last number six and that gives us C if you leave out the last number on a slice and just with the colon in a square bracket the slice goes all the way to the end of the string if you leave out the first number the slices presumed to start at the beginning index number zero and if you leave out both numbers and just put in a colon you get the entire string let's talk about comparing ing strings strings are compared in what's called lexicographical order so the string a is less than the string b as one would expect and ant is less than bison and a NC is greater than a NC here's something that may surprise you if I ask is ant less than capital z zebra I get false why is this because the wav strings are represented the lowercase a has a numeric value that is greater than the numeric value for an uppercase Z you can see what the numeric codes are for a character by using the or function the or of lowercase a is 97 whereas the or of capital Z is only 9 90 and that's why ant sorts after zebra with a capital Z strings are immutable you can't change a letter within a string let's create a variable verb that has the word Play If I want to try to set the first letter to the letter c to end up with Clay I can't do that the string object does not support item assignment if I want to change a string I have to create a completely new string I can say this noun equals the letter c plus the slice of the verb from position one onwards which is the L A and Y and then noun contains what I I want a lot of string manipulation involves going through the string one character at a time and you can use a for Loop to do that if I set the verb again to play I can say for character Inver CB print that character and it gives each character in turn sometimes you need to know the character and its index value no problem use a counting Loop for index in range Len of verb well the length of our verb is four and so range will give us0 1 2 and three which are the index values of the beginning next and so on characters I can then print index and the character at that location inside the verb and I'll get the index and the value both if I need those for my program an extremely useful operator for Strings is the in operator that tells you whether one string is contained in another for example is the word cast in recasting yes it is is the word red inside the word predicate answer is true if I ask if the word red is in breed the answer will be false the opposite of the in operator is the not in operator so if I ask is red not in bread that will come back as true let's use this to write a program that takes all the vowels out of a string we'll start with a comment that describes what the program does and let's write a function to do that called remove vows and it'll take a single parameter s which stands for our string this is very common in Python programs they'll use either s or Str Str to represent a generic string since strings are immutable we can't change S so we're going to have to create a new result string which starts off as the empty string for each character in our string s we're going to ask is the character not in the string of vowels if it's not a vowel we want to keep it so we'll add add it to the end of our result variable otherwise it is a V and will pass we won't do anything to our result once we're done we can return that result let's save that and run it to make the definition and test it really quickly in the Shell if I say remove vowels this is a well let's have all the vowels in there soti full orders that should contain all of our vowels and it got rid of all the vowels for us now that I know my function works I can write my main program in my main program I'm going to ask the user for a sentence which put enter a sentence and then I'll convert it to something with no vowels by calling remove vowel vows and sentence is the argument that goes to the function and then I'll print no vowels and don't forget invoke main otherwise the program won't do anything let's clear the shell and let's run the program and for a sentence let's say taking out vowels makes things hard to read and that's what we get as a result in order to do the assignment you'll need one more function that isn't covered in the book and it's not the book because it involves lists which are in the next chapter but you're all pretty sharp people so I know you can handle this just consider it as a preview of Coming Attractions the function we're going to invest investigate is called split let's say we have this variable phone equals 48 5551212 if I wanted to get the area code prefix and number as three separate strings I could do something like this phone. find of Dash to find where the first Dash was and then use slices to separate the string into its component parts but it's much easier for me to say this Parts equals phone.it and tell it the character or characters that I want to use for splitting if I now print Parts you'll see I have a list in square brackets of three strings 408 555 and 1212 I can then assign those to individual variables I can say area code equals Parts zero prefix equals Parts one and number equals Parts sub two and then print area code prefix and number individually if you don't give an argument to split it divides the string on Whit space blanks tabs and new lines if I set my sentence to be four score and seven years and then say word list equals sentence dosit with no argument in the parentheses if I look at the word list it split it up into the words exactly as I wanted I can now use a for Loop to go through the list as well just as you saw in chapter four when we introduced the for loop I can say for word in word list print word and that'll print each word on a line all by itself knowing this we can write a program that goes through a sentence and builds a new sentence with each word reversed so the string for example would come out as Roth El Maxi that's the program we want to write a bit useless but it gets the point across let's put the comments in here to tell what the program does accepts a sentence and then prints it with each word in the sentence reversed first we're going to need a function to reverse a string let's define reverse with S as the parameter we're going to need a new string as the result which starts as the empty string and then for each character in the string s we're going to say the new ver value of result is equal to the character we have plus the old value of result this adds the characters at the beginning of the string not at the end and we return result let's save that run it and then we can test it here in the Shell if I say reverse example works like a champ now the main program which prompts for input splits it into words and calls reverse for each word and creates a brand new string with the backwards or semi backwards sentence we're going to Define main to say that sentence is input of enter a sentence we'll get our word list by splitting the sentence on Whit space and we're going to need a string for our result let's call it backwards and again it starts off as the empty string for each word in the word list we're going to set backwards equal to its previous Value Plus whatever we get from reversing the individual word plus a blank this extra blank is to separate the words when we build our output when we're done with all the words we'll say backwards equals backwards. strip to get rid of that last blank at the end and then print the result let's save clear the shell and run and it's not doing anything because guess what I forgot to invoke main this is a common error so don't feel bad if you did it I do it too let's run that again and the sentence will be useless but instructive program and there it is with each word reversed so that's how you can use split to split a string into a list of substrings and then process them one at a time throughout the videos you may have noticed me reading code like this as X = 3725 y = x Sub 0 what's that sub all about let's take a look back at algebra where you might have seen something like this this it looks a lot like our lists except that the index number is written as a subscript when computers first started being used for scientific purposes programmers needed to represent lists like this but they couldn't do subscripts on a teletype or punched cards and they couldn't write something like this and read it as X1 X2 X3 because those are the names of independent variables not part of a list those early programmers came up with a solution they put the index number in square brackets to represent the subscript in fact in a language called Fortran one name for lists was subscripted arrays and that's why we use brackets for indexes and why we read them as x sub1 x sub2 Etc that's the story of sub let's consider this Pro program to get the average of 7 days worth of temperatures in degre C let's run it and it tells us the average temperature is 28.3 de nothing remarkable here except it's very repetitive we need an individual variable for every one of the temperature measurements what if we had a whole month's worth of temperatures that would be really difficult we'd have a lot of copying and pasting with a lot of room for error and can you imagine what line 12 would look like if we had to add 30 numbers up all together instead of having a separate variable for each day we can use a list to group all of the values together under one name if you think of an ordinary variable as a mailbox for an individual house you can think of a list as a row of mailboxes for an apartment building they all have a common street address with an apartment number to distinguish one from another in this case the case of a list our apartment numbers begin at zero instead of one and as we saw with strings we use square brackets to index into the list here's a version of the temperature program that uses a list as you saw in chapter 4 you create a list by putting its elements in square brackets separated by commas and you access a list element by putting its index numbers in square brackets as you see on line six now you may be thinking that's not much of an improvement yeah we don't have the individual variables anymore but line six is still as long in fact it's longer because we've had to add the square brackets but remember just as you can go through a string one character at a time with a for Loop you can do the same thing with lists so instead of this big long expression I'm going to set the sum to zero and then they say for each item in the day list set the sum to sum plus the item that's a lot shorter and if I run the program it still gives me the exact same result one advantage of lists is now if I have another week's worth of data let's add some other numbers like 30 31 29 29 30 30 and 32 I don't have to change this part of my program at all it's exactly the same it just goes through every single item in the list I do have to change this line because now I have 14 numbers instead of seven but to avoid even that retyping I'll replace the seven with the length of the day list then no matter how long or how short my day list is I'll always get the correct answer let me go back to my original Seven entries and you'll see it's working correctly and this is the beauty of using lists with for Loops they work hand and glove with one another to make your life very easy when you have a lot of values that are all grouped together let's look at some more list operations and we'll start by making a list of strings in this little program where I set the words list to be the numbers 0 through five spelled out again you access a list with square brackets Z is the first element and five is the last element because there are six things in this list that's the length of words you can also use negative indices word sub1 gives the last entry excuse me let me type that correctly words 1 gives me five words 2 gives me four if I go off the edge of the universe such as words sub six or words sub7 I'll get an index error because my index is out of range surprisingly there's no find function for list but there is an index which returns the position if an item is found in the list I can say words. index of the word three and that gives its position if I say something that's not in the list it'll give me an value error I can avoid that sort of error by using the in and not in operators for example is two in words that's true is 14 not in words that's also true let me show you this in operation in a program I'm going to say number equals input of enter a number in word form and then I can say if the number is in words I'll print found at index words. index of number I know I'll find it I know I won't get an error because the number is in the list somewhere otherwise if it's not in the word list I don't want to generate an error an error an execution error I want to have my own custom error saying sorry that is not in the list let's run this and if I type in three founded index 3 run it again and put in seven and that's not in the list we can take slices of arrays we can take words starting at index one up to but not including four if I leave off the ending number I get from the starting position to the end the slice starts at position index zero one really big difference between strings and lists are that lists are mutable you can change elements of a list for example I can say words sub one equals Uno and now if I look at my words list it has Uno in position one I can change a slice to a slice of equal size let's take the words from two up two but not including four and change them to the words dose and Trace and those two have changed you can also change a slice to a different size I can say words from two up to but not in including four is going to be a list consisting of a single item dose e Trace 2 and three I can go back and change it again and add more items let's take words from two to three which means only item number two and let's change it back to dose trace and add some extra stuff and now I have extra stuff in the list starting at location 4 while I could use slices to delete part of a list by replacing the slice with an empty list it's more readable to use delete deel I can delete the items in the words list from four up to but not including six and I back to where I had it without the extra stuff one more thing before we wrap up this video most of the times arrays will have similar elements as in our examples all of the elements in the first program were all numbers temperatures in this example all of the elements in the list were strings that's normally the case but it is possible to have elements of different data types such as this I can say person equals and the first element of the list will be a string the second will be an integer and the third will be a float to represent a represent and this represents this person's name their age and their weight in kilograms it's also possible to have lists inside of lists and that's a topic we'll get to in another video here are some other methods you can use with lists first let's make an empty list by putting two square brackets next to each other and show that it's empty if we want to add a number to the list we use append if I say numbers. append 10 now there's a 10 in the list let's add another number and a pend an 11 at the end of the list now there's two items and we'll go with one more here notice that a pen changes the list it does not create a new one if you want to add more than one item at a time you can use addition to add one list to another list I can say numbers should refer to the old value of numbers plus the list 13 14 15 and now numbers has the numbers 10 through 15 in it the pop method removes the last element of the list if I say last entry equals numbers. pop last entry will have the number 15 in it and numbers no longer has it in there you can also pop an entry in the middle of a list let's say mid entry equals numbers. pop 2 if we look at Mid entry it gets the 12 and numbers no longer has the 12 in it rather than use slices to insert elements into a list you can use the insert method giving the index number and the new value I can say numbers. insert at position two I want a 12 and at position zero I'll put a nine insert inserts only one item at a time unlike slices where you can add as many items as you need okay that handles our laundry list of functions let's write a program that will ask users for numbers until they enter a negative number and store all those numbers in a list we'll then find the average and print it and then find out how many numbers are below the average exactly average and above average and display that as well first the function to get the numbers it's going to return a list of numbers as a result so start with the empty list list and then set up the loop we're not finished yet and as long as we're not finished we have to ask the user for some input enter a number or a negative to finish not great phrasing but we can work on that later if the number they entered is non negative then we can append it to our result list otherwise we have a negative number and we're finished and we can return the result list by the way during these videos you may hear me say the word array instead of list that's because the idea of a list is called an array in a lot of other programming languages and I teach a couple of courses so every once in a while I use their nomenclature of array rather than the python nomenclature of a list so bear with me and whenever you hear array think oh that's a python list let's run this program and test it we'll have a test list equals get numbers let's give it a three a four an 8 7 and a two and a 1 and if we look at test list there are numbers it's working great now we need the function to find the average of the numbers in the list so we're going to calculate the average of some list of data in this case we'll set the sum to zero and then for each item in the data list we're going to add it on on to the sum to get the average we need the number of items in the list and that's the Len function we take the length of our data if the number is equal to zero which means they gave us an empty list to start with we'll just set the average to zero the average of an empty list is zero that seems a good compromise otherwise the average is the sum divided by the number of items and we return the average Let's test that let's make our test list in this case 10 + 15 is 25 + 11 is 36 let's set average to be Cal average of our test list so it looks like that function is working pretty well and now our main program we're going to create a data list which we'll get from get numbers we'll calculate the average which is the calculated average of our data list and then we'll print the average is and let's use formatting here to make it look nice to three decimal places whatever the average is before we go further Let's test that to see if it works and again I forgot to invoke main so let's do that and run again if I take 10 11 and 15 and then 1 the average is 12 good now we need to go through the list again counting the number of items in each category the number of items above the average so far is zero the number below is zero and the number equal to the average is zero for each item in the data list if the item is greater than the average then the number above becomes one greater otherwise if the item is less than the average the number below plus and becomes one if it's not greater or less it must be equal and so the number equal is incremented by one finally we need to display those results we'll print number of items below average the number below the number of items equal to average and pardon my typing errors here is an equal and the number of items above average will be n above let's clear the shell and run the program this time let's do 10 11 12 and 15 and that the average is 12 two of them are below one is equal to the average and one is above average and there's our program that shows lists in action in Python it's possible to have lists inside of lists these are called nested lists let's say we measure the minimum average and maximum temperature every day for a week we can represent it as a nested list as you see starting on line eight let's take a look at that nested list up close and personal the main list has seven elements numbered 0 through six and each element is itself a list if we were to print temps sub 2 we'd see this entire sublist printed out let's try it print temps sub2 and there's our list inside the main list temp sub 2 is a list that has three elements numbered 0 through two if we wanted to print the first element in the highlighted Row the 29.0 we'd print the element at index0 in the row that's at index two here's how you say that in Python you print temp sub 2 to access the row Subzero to get to the first element in that row and there's the 29 here's a print statement that prints three other elements from the nested list I've put numbers on lines 7 through 14 to help you figure out which row and which column is which what do you think this print statement will print pause the video and figure it out before continuing did you get the right answer temp sub 6 sub 1 is row six column 1 30.4 temp sub3 sub 2 is Row 3 column 2 which is the 29.3 and temp sub4 sub Zer accesses row four and element zero inside that row which prints the 24.6 okay now let's write a program to find find the lowest minimum temperature and the highest maximum temperature for the week the way we've light out the data you can think of each sublist as a row and each entry in the sublist as a column within that row we'll start with a function called find minimum that has two parameters the nested list of data and the column whose minimum we want to find this is more General than just finding the minimum of column zero that way if I wanted to find the lowest average temperature I could use the same function I just give it a different column number to process here's how this function is going to work we'll start the minimum value as the entry in row zero of the column we're looking at we then look at the entries for every subsequent row 30 is not less than the minimum value 29 is not less than the minimum value 25 is less so that becomes our new minimum value 24.6 is less than 25 so that becomes the new minimum value 22.3 is even less so it becomes the minimum value 28.9 is not less than 22.3 and when the loop ends our minimum value has the minimum entry from that column of elements let's let's translate that into python code we'll set our minimum value to the data in row zero at the column we're interested in and then we'll find the number of rows in the nested list for Row in range 1 through n namely the rest of the rows if the data at the given row and column is less than the minimum value then the minimum value becomes the data point at that element when the for Loop is finished we can return the minimum value now let's write and invoke the main function we'll Define main to set the lowest minimum to find the minimum of our temperatures data column zero and we'll print the lowest minimum temperature is degrees celsius. format lowest Min invoke Main and run the program the lowest minimum temperature is 22.3 De and let's spell temperature correctly the next time we run it to find the max maximum value in the column the logic is the same only the names have changed let's copy and paste the minimum finder change minimum to maximum we start out with the maximum value being the first item in the column and this time if the data in the row and column is greater than the maximum value then the maximum value becomes the the data element and we're going to return the maximum value and in a similar fashion we can say our highest maximum is find maximum from the temperatures nested list this time column two which is the maximum temperature for the day and the highest maximum temperature is is De c. format highest Max let's run the program the lowest minimum is 22.3 the highest maximum is 31.6 and if we look at the original data sure enough this is our lowest minimum and that's our highest maximum and that's how you work with nested lists in Python here's a program much like the ones we've written before it asks you for your age and years and then tells you about how many days old that is in our get age function we have a loop that makes sure that you have an age that is greater than or equal to zero let's run this program and see that that works if I say 2 it tells me age cannot be negative if I put in 20 it gives me the answer however this program will die the great death if I enter a float like 3.5 or if I enter something that's not an integer at all like f i v python provides a way to catch these errors which are called exceptions python does this by using keywords try and accept the way it works we put the keyword try before the code in question the code that might get an error at runtime and let's indent it and then if at any time a runtime error occurs during this block of code python will immediately jump to the accept block instead of crashing the program and do whatever is in the accept Block in this case we'll print the message please enter an inte that isn't negative now that we have done the try to catch runtime errors and an accept to handle them when we run the program if I type 3.5 It'll ask me to Ure that isn't negative if I type a Word it gives the same message I'm still handling negative numbers properly and I'm still handling positive numbers properly try and accept let you handle conditions that would ordinarily crash your program they're especially useful when dealing with files up to this point we've put our data into arrays in the program or we've asked the user to enter data at the keyboard in this video we're going to create a file that has data in it and we'll write a program that reads that data manipulates it and then writes a new file to disk here's a file named actors. txt that has a partial list of actors and actresses who have won the Academy Award it's sorted by first name we want to write a program that reads that file puts the names in the format last name comma first name sorts them alphabetically by last name and writes the results to a new file called actors sorted. txt first we need an empty list list for our result actors by last name equals the empty list next we have to open the file by using the open function we'll set our input file to be the result of calling open with the arguments actors. txt and R the first argument to open is the path to the file since the file happens to be in the same dire Dory that the program's in we give the file name all by itself if the file isn't in the same directory as your program you'll need to specify an absolute or relative path you can find out more about that at the links that are shown in the description of this video the second argument tells what we want to do with the file in this case the R means we're opening the file so that we can read it and the result in input file is a file handle it's a python object object that's used to access the file's contents by the way if you try to open a file that doesn't exist such as saying bad file equals open of No Such file.txt for reading you get a file not found error and we'll talk about how to handle that kind of error in a subsequent video now that the file is open we can use a for Loop and read the file contents one one line at a time for line in input file this for Loop will read the file one line at a time and assign each line of input up to and including the new line character to the variable line so if I were to print line in the loop and then run the program you would see that everything looks as if it's double spaced because print adds a new line and the line that we read in from the file still has the new line character at the end that means we need to strip the T rephrase that means we need to strip the trailing whites space to fix the problem and I'll create a new variable just to make the difference clear we'll say actor equals line. strip which gets rid of the new line and then let's print actor and now we are getting the lines without that trailing new line let's comment out this print statement it was just there for debugging and add the code to split the name and put it together in last name first order and append that result to the list by last name we'll say names equals actor dosit the new name is going to be names sub one which is the last name plus a comma blank plus name Subzero which is the person's first name then we'll say actors by last name. append new name and to debug let's print new name clear the shell and run and it looks like I have an error because I forgot my plus sign here let's put the Plus sign here to make it right clear the shell and run again and now we have the names in last name comma first name order when we're out of the loop after we've read the file we close it by saying input file. close it would close when we exited the program anyway but this is a nice way to make sure that we have things cleaned up up now I'm going to sort the file by last name and say actors by last name. sort the sort method for lists sorts in place it does not create a brand new list it changes the original now I need to open an output file for writing the output file will be again open we'll give the file name actors sorted. txt and this time we'll say w because we want to write a file if this file doesn't exist already it'll be created if it did already exist it gets wiped out by the new one that you just specified so you have been warned now we'll write a loop to go through the sorted list one person at a time and write it to the output file with the right method for person in actors by last name we'll call the output files right method and give it the person plus a new line character the right method requires a single string as its argument unlike print you can't put as many arguments as you want separated by commas it has to be a single string also unlike print it doesn't add a new line automatically so if we want a new line in our file we have to explicitly say so and that's why we put the back slash in there to explicitly put a new line into our output file when you're writing an output file it's Ultra important that you close the file this guarantees that any buffers the operating system is using to hold your file data will be written to the disk there's our program let's put a message at the end that says print of file written as actors sorted. txt to give us some indication that the program has concluded let's clear the shell and run it and if we go here and look at the actors sorted. txt there are Academy Award winners sorted by last name let's modify the program that sorted the names of actors by last name and change it so that the user can specify the name of the input file to read from and the output file to write to I've already put all of the program into a main function just for convenience our first change is going to be on line nine instead of opening actors. text I'm going to call get input file to ask the user here's that function I'll Define get input file to say file name equals input enter input file name and then input file equals open whatever that file name was for reading and return the file handle if I put in a valid file name like actors. text everything works fine but if I put in the name of an invalid file instead of crashing the program let's use try and accept we'll set valid to false and while not valid I'm going to try getting the file name and opening it and if there's an error I'll print error opening file file name I also have to said valid to be true if it opens successfully otherwise I have an infinite Loop now let's run the program and this time if I put in no such file. text nonexistent. text it'll only continue if I put in actors. txt and everything worked great I'm going to do something similar for the output file in this case instead of always writing to actor ed. text I'll call a function called get output file which asks the user for the file name to write to and since I don't know in advance what that's going to be I'll just say file written here at the end and now the function it's going to be very similar to get input file and I'm going to use try and catch to make sure that an invalid name doesn't crash my program I'll set valid to false while not valid try asking for a file name this time my output file will be open of whatever name you gave me for writing and if it was successful everything's valid otherwise let's give the error message that we would get from the operating system by saying exception as error print the error straight from the horse's mouth and then return output file let's clear the shell and run the program if I give a bad file name it doesn't let me get by I'll say actors. text which is a valid name for a nonexistent file name I'll say say nonexistent sln file.txt and it says there's no such file a directory if I say new sorted file. text which is a valid name it wrote the file and I can check that by opening new sorted file.txt and sure enough that worked great there's one more place for me to put a try and accept and that's while I am writing the file that could run into an error let's say if I ran out of dis space or if there was a bad sector on the dis and the program crashed because it couldn't write it properly I'd like to be able to catch those errors as well I'll do that by putting a try before the loop that writes my output and an except exception as error because I want to see the exact error that I got I'll print error encountered writing output file and then I'll print the direct error message from the operating system I'm going to add one more Clause here it's called the finally Clause the finally Clause is executed with the the try succeeded or not if the try succeeded it'll go to the finally if the exception happened it'll still do the finally and that's where I'm going to do my output file. close this guarantees that whether I had an error or not whatever did get written will be saved to disk and I don't need that line anymore I'd like to show you this error in action but I don't know how to cause a hard disk error and frankly I wouldn't want to so you'll just have to take it on faith that this works at any rate that's how you use try and accept with programs that read and write files to make sure they handle errors without crashing the program lists are great for things like the weekly or monthly temperatures where you naturally index by the position in the list what if we had a program that asks for the name of a country and then tells you the population of that country here's such a program using something called parallel lists each entry in the country's list has the population in the corresponding location in the population list here's our main program we ask for a country and if the country is in the country's list we find its position using index and then print its population by going into the corresponding entry in the population list and if the country isn't in the country's list then we simply say that we can't find the country let's run this program to see how it works if I say Denmark and Greece those work and a country that's not in our list yet would be Croatia and it can't find that country there's nothing wrong with this program but if we were to add a new country say Croatia in alphabetical order in our list here we'd have to make sure that we put the population 4 million 15 54,2 in the exact corresponding location in the population list this is an error prone operation and it just feels awkward let's run the program again real quick Denmark still has the correct population and now Croatia shows up in our list what we want is some data structure that makes this sort of thing easier and that data structure is the python dictionary let's think about using a real dictionary dictionaries aren't indexed by word when you want the word adom defined you don't look to see that it's word number 3472 and then look for definition number 3472 you look up the word adom by name and right next to it is the definition and this is exactly what a python dictionary lets you do here's the start of a dictionary based version of the countries in population program on line five we have a dictionary defined instead of using square brackets which are for lists we use curly braces inside the curly braces we give our keys the things we want to index on a colon and the values for that index so for the key Belgium the value is 11,358 357 and for the key Greece the value is 11,183 716 let's go to the Shell and do some experimenting although you use braces to define a dictionary you still use square brackets when you index into it country pop of Denmark I use square brackets and Country pop Greece if I try to use as my index value a value that isn't in the dictionary such as Croatia I get a key error I can avoid getting a key error by using the in or not in operators I can ask is Denmark in country pop true is Croatia in country pop false so by checking first to see if the key is in the dictionary I can avoid having key errors let's see how we have to change our main function I've copied and pasted it from the previous program first the name of the list countries has to now become country pop our dictionary because we're using a dictionary we don't have to find an index number the key is our index and here instead of saying population at our index we go directly and say look in the dictionary for the country in question and that will retrieve the population that's it let's run the program to see that it works if I say Greece and Denmark and Croatia we get the same results as before so what has using a dictionary really bought us the real thing that has bought us is the index and value are now in one data structure and not two if I want to add Croatia now I can go to the correct Place say Croatia as the key colon and then the value 4,1 154,00 this is just ever so much more convenient let's check to see that that works Grease Denmark and now Croatia has been added to our list of countries in addition to using square brackets to access a dictionary you can also use the get method I can say country poop. getet of Germany and I can do country poop. get of let's say czechia which we have not added yet the latter call returns a special value none which does not print out as anything I can show you that let's do country poop. getet of cheia is equal to none and that's true if you don't like having none as a value you can give a second argument to get that gives an alternate value in case the key is not found if I say country poop. getet Germany comma 0 if Germany is found it'll return its value otherwise zero since Germany is in our country population dictionary we get the value if I do country poop. getet with Ghana not in the dictionary and zero I get my alternate value of zero one other important thing that we need to do is iterate through a dictionary here's one way to do it I can say for country in country pop print country and Country pop of country this for Loop will go through all the keys in the dictionary and then print in the body of the loop and there we have it in this case the countries happen to be in alphabetical order but there's no guarantee of this keys are placed in the dictionary in a way that makes it easy for python to access them and if that happens to be the same as the order in which you entered them well that just happens to be good luck another way to iterate through a dictionary is with the items method which gives you both the key and value again in whichever order the dictionary stores it I can say for Country comma population which returns both values in country pop. items print country and population finally let's look at a a program that creates a dictionary from scratch we're going to create an empty dictionary on line six set a finished flag to false and as long as we're not finished we're going to ask the user for a name if the name is not the empty string will then ask for an age and this is how you enter something into a dictionary you say people subname equals age and you put the dictionary access on the left hand side of the equal sign if they did enter the empty string we're finished and then after we've entered all the names we're going to use our items method again to get the names and ages and print them all out let's run that program I'll put Joe as 29 let's have feder Rico B 18 let's have Nancy B 29 what happens if I put put Joe in again and he's now 22 instead of 29 I mixed up his age with ny's it's not an error it just replaces the value for that key and let's put in somebody named Albert who's 17 right 29 and quah who's 35 36 I have a lot of people who are 29 years old it would seem and then when I press enter to quit I get the names and ages what if I want to make sure that I have the items in sorted order let's go to the Shell to give you an example I'll create a small dictionary here example let's put um Jim and make him 26 let's put in Allen and make him 37 and put in Barbara and make her 48 for her age if I say name Keys equals example. keys and look at that it gives me back a special structure called dictionary keys that has only the keys from the dictionary I can't use this in a for Loop though unless I convert it to a list so let's make name list to be the list form of example keys and now if I look at name list I've got Jim Allen and Barbara I can sort it in place by saying namel list. sort and now if I look at it I have them in alphabetical order and I can say for name in namelist print is years old. format name example of name and now I have them in alphabetical order let's modify our program to make use of this so that our people in the dictionary that we've created come out in alphabetical order we'll put name list equals list of people. keys and then we'll sort the name list and then instead of using the items method we're going to have to go back to the other way that we iterated through it we'll have to say for name in name list instead of the age we have to go into people of name let's save that and run it and see if it works we'll have feder who's 19 Barbara who's 20 Jorge who's 35 Thomas who's 22 and Steve who's 47 and there they are are in alphabetical order just as we worked with builtin functions before we wrote Our Own functions we've been using objects throughout the course for example when we create a turtle it's an object when we went to tell the turtle to turn left we used dot notation and say t. left 90 which tells the object T to use the left method me with 90 as its argument strings are also objects let's create a string s and give it the contents a b CDE e instead of having an uppercase function that we pass a string to for example new string equals upper of s that's not how we do it instead since s is an object we say s do uper and now now if we look at new string we have it all in uppercase lists are also objects let's create a list 1 2753 and then we can tell the list sort itself and then we can print it and it's sorted into order those are the kinds of objects that we've been working with already now it's time to write our own objects it seems like nobody understands objects but everyone understands toasters so let's write a class to simulate a toaster as a python object first what's the difference between a class and an object you can think of a class as a template or blueprint for what an object should look like and an object as the thing that you build from the blueprint or you can think of a class as a cookie cutter and the objects as the cookies you cut out using the cutter the diagrams in the book that show what objects look like aren't standard so I'm going to use a standard called uniform modeling language to draw diagrams of what our classes look like the class name is at the top of the diagram by convention class names always begin with an uppercase letter by convention means that this is an informal possibly Unwritten rule for the way most people write and are expected toite python you can go against convention but people will look at you funny if you do so in the uml diagram you then list the attributes an object of that class should have attributes are like variables they describe the things that an object has in this case a toaster has a number of slots a voltage one 10 in the US 220 in Europe the Browning level usually 1 to six the number of slices of bread currently in the toaster and a Boolean that tells us whether the toaster is on or not in a uml diagram you give the data type of an attribute after the attribute name the plus sign means that these are public attributes users can directly access or change them then you list the methods of the class the things that an object can do if we had a robotic toaster it could turn on turn off insert slices of bread pop them out and set the Browning levels again the plus signs mean that these methods are available to anyone using our class and you specify the data types of the parameters and the method return values let's start writing this class in a file called toaster. py we start out with the name of the class class toaster and and then a Constructor method with the special name of underscore uncore init uncore uncore it takes one argument called self again this is by convention self stands for the object we are building or working with right now in this method we set all the default values for our attributes the number of slots for ourself is two we'll set the default voltage to be 110 the Browning level will set to one the number of slices in the toaster is zero and is on will be set to false we can now create a toaster object let's create a toaster object called bread burner and the way you create a new object is just to use the class name and that calls the Constructor and let's print bread burner and see what that looks like and that's our result well that's not very helpful we'll find a way to improve on that later for now we can examine the object by accessing its attributes let's print number of slots and we're going to say bread burner. n slots and that will access the number of slots property or attribute that belongs to the bread burner object similarly we can say print voltage and and then bread burner. voltage let's set the voltage to 220 we can say bread burner. voltage equals 220 so we can use it on the left hand side of an equal sign to assign an attribute and then let's print our new voltage which will again access that attribute let's run this and we have two slots 110 before our change and two 20 volts after the change there's nothing inherently wrong with our Constructor but if we want a four slot 220 volt toaster we have to manually reset the attributes instead let's change our Constructor and give it parameters so that we can create toasters with a particular voltage and number of slots since toaster should ship without bread in them turned off and the Browning dial set to one we can keep that part in the Constructor so in this case my Constructor will now say I want to have the self I want to have a number of slots and a voltage when I build my toaster the number of slots attribute that the object should have will be set equal to the number that I specified as my parameter and the voltage of the object I am currently constructing will be the voltage that I specified in the parameter list now let's get rid of this preceding code and this time I'm going to create two toasters one of them will be a us toaster and it'll be a toaster that has two slots at 110 volts and I'm going to to have a European toaster which is a new toaster with four slots at 220 volts let's print the US toaster voltage just to make sure that it's correct and let's also print the Euro toaster voltage to make sure that those were set properly by our Constructor and there's our 110 and 220 it's still unsatisfying to have to print all the fields ourselves it would be nice to be able to say print us toaster and print Euro toaster and have the toaster object displayed as a string we can tell python how to convert an object to a string representation by supplying the underscore uncore store uncore method so that you don't have to see me typing for a long time I've typed this beforehand and just pasted it in here's our uncore uncore Str strore uncore method we create a string with placeholders and then use format to fill in all of the attributes of our object and notice that we're using the if else shortcut to tell whether the toaster is on or off and we return that result now when we run the program when we say print us toaster us toaster an object in fact a toaster object will have to be converted to a string and this method will be called similarly when we print the Euro toaster object theore uncore St strore underscore method from the toaster class will be called and we get some very nice output indeed rather than what we used to get and now we don't have to print every attribute individually although if we want to print one of them individually it's still possible to do so finally we need to write the remaining methods the turn on method sets the Ison attribute of the object we're currently working with to true the turnoff method sets the is on attribute of our object to false insert bread needs the number of slices to insert this if statement makes sure that we don't overfill the toaster the pop bread method makes sure that the toaster is on before we prop any bread and no matter how much was in there after we're done there are no slices of bread in the toaster anymore the set Browning method gets a level and checks to make sure that the level is in range before setting the Browning attribute of the current object here's how we called them we create a toaster with two slots and 110 volts we'll turn it on and we'll insert bread and then print the result let's run that we have two slots 110 volts two slices at Browning level one and the toaster is currently on now wait a minute you might be thinking to yourself here's turn on we called it and we gave no arguments but here's turn on and it has one parameter similarly when we called the insert bread method we gave it one argument the number two but here in insert bread we have two parameters self and in insert what's going on here and the answer is self remember self refers to the object currently under consideration in these two statements what's really happening is this the object that we specify at the left of the period at the left of the dot becomes the argument that fills in the self parameter when we called the insert bread method the object that we're calling it with becomes self and our other argument that's in the parentheses fills in the number of slices to insert into the toaster admittedly this might seem slightly inconsistent but that's the way the game is set up and we have to follow those rules and that's the basics of creating and using objects in the next video we'll Implement a class that lets us do operations with fractions