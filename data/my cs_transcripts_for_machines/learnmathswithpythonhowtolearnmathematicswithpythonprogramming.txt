hello everyone good morning we'd like to welcome you to Pike on a youth all right so we're going to start this morning with Python teaching math very sorry yeah Python meeting teaching math with Python but it's welcome Liam Calloway hi everyone thanks for coming out to my talk today for the first talk of this session so first a little bit a little bit about me who is this guy so hi my name is Liam Calloway I recently graduated from the University of Tasmania I am currently a software developer at wise tech global and in the past I've been a tutor at in CSS the national computer summit computer science Summer School and the University of Tasmania this is my second PyCon and it's my first time ever giving a talk so go easy on me so first of all just that's a bit about me about you show of hands who in this room is currently a student University High School cool and who's a teacher well nice alright so hopefully you find this interesting so I'm gonna start this talk with a brief anecdote as a lot of talks tend to so last year at the University of Tasmania I treated a course called computational science but this course was a bit different because it was actually offered under two separate unit codes with two different titles the other being to scream mathematics with applications so this course covered a lot of sort of firstyear maths concepts with set theory camana Toric's number theory but it was also supplemented with practical implement practical implementations taught in Python and the content was exactly the same for both unit codes so this meant that students studying a programming degree were doing the same assessments as students studying a mathematics degree they had lectures for both maths and programming assignments for both maths and programming and tutorials for both maths and programming so I was taking the tutorials and the lab sessions for the programming content but I got to interact with students from both streams and I would get this question a lot from the programming students do I have to learn maths I want to be a programmer maths is hard why do I need to do this maybe not always quite negatively sometimes these questions were genuine coming from like I am scared is this something that I'm gonna need to be good at to be good at my job but then from the math students do I have to learn programming a lot of these mathematic students were taking a programming course for the first time and this was all completely new to them so they answer these questions I would usually say no you don't need to learn these things B should and this course is a pretty good way to get started with it so python is pretty great right we're all here at PyCon I don't think I'm gonna have to try too hard to convince you of that there's lots of really good reasons that Python is a useful language it's very clean and expressive because it's interpreted it makes it highly interactive and it's batteries included we have a lot of useful tools through the standard library and in fact you might be familiar with something called the Zen of Python these are some design principles that Python is built around if you open up a Python interpreter and type import this we get a whole list of these and I've pulled out a few here we have things like beautiful is better than ugly sparse is better than tense but readability counts but the reason why I've selected these here is because I think that these are some good examples for mathematics as well if we're doing a proof we want it to be beautiful and simple rather than ugly and going on for pages and pages but then at the same time we don't want to make things too dense because readability counts also I actually started at an applied mathematics degree rather than pure maths so that last one in practicality beats purity so this leads me to the conjecture that getting handson with Python is a great way to learn some maths but also getting handson with maps is a great way to learn some Python so for the rest of this talk I'm going to run through some examples that I think illustrate this concept how we can introduce some mathematical concepts alongside programming concepts and use this bridge to sort of extend both topics so first let's talk a little bit about set theory yes this talk will feature memes so what is the set I said is a collection of objects that belong to some group they're defined by certain property or attribute the elements of a set of unordered and we don't care about repetitions within a set in maths we have a few ways of notating out a set we have something called list format where we simply list the values but more commonly we use something called defining property format where we have some function which defines our set and then some range of values that our set can take so that's all well and good how do we do this in Python well Python also gives us a few different ways of defining a set again we can simply list the values using what's called a set literal with the curly braces but we also have something called a set comprehension which just like defining property format allows us to create a set using some generating function and some range of values for that to take so this is a concept that students that maybe have a bit of programming experience before but a new to Python might take them a little bit to wrap their head around they used to the sort of traditional looping structure but for mathematics students they're already used to this kind of notation and we actually found that a lot of them pick up this idea a lot quicker so that's quite neat it also in Python if you want to create an empty set unfortunately you can't just use the empty set literal like that because Python is going to interpret that as a dictionary so you have to use this set constructor instead so now that we've got some sets what can we do with them well this brings us to set operation and insert operations are really just about allowing us to answer specific questions about groups of things so we could use set operations to see who has attended either plaque on a U or Linux comp or even things like how many people came to the keynote this morning but forgot to bring a coffee so I'm going to run through some of these set operations really quickly first of all we have set Union this is the elements that are in either set a or set B and we denote it with this little u symbol conversely we have set intersections so this is the set of elements that are in a and B and this is notated with the update upside down new symbol and set difference the set of elements that are in a but not in B so now that we've seen that how do we do this in Python well gives us this nice clean readable function notation we have two sets here a and B and we simply call the corresponding function on one set and pass it the other one and you can see these results here so it's really obvious what we're actually doing here a union B a difference but II but Python also gives us another way that we can do this using what's called the operator notation where we replace those functions with single character operators surfy Union we have the vertical bar character intersection has an ampersand and difference is subtraction so at first glance you might think that this is actually less readable it's not as clear what's going on here but this is still useful to know because this operator syntax is actually closer to what we're going to be doing in mathematics in maths we're used to this idea of having two objects with an operator in the middle of them but what's more this actually suggests a really useful conceptual link to other topics like boolean algebra and logic you saw that for a union we use the vertical bar character well in boolean logic that's an or symbol and the union of two sets is the element in a or b so that we can start extending some of these ideas and linking them to other topics and then on top of that we can also start looking at some more advanced computer science topics talking about things like operator overloading how is actually made possible an in Platinum's case that's using the double underscore meffert's there's a bunch of others Python set operators as well that are built in things like subsets and supersets or symmetric difference which is the equivalent of a set X or another useful thing we might want to do with sets is dues membership testing we want to determine if an element belongs to a set or not so in Python we just use the in keyword we've got a nice readable way of doing this as well we can say is the element for in set a so this is really simple Python makes it nice and clean and readable but again there's opportunities for further discussion and exploring these topics how long does this take to run what if this set is really large well then we can start talking about things like linear search or binary search but of course these are a set so these are actually going to be backed by hash sets which were more complicated data structure but these have interesting properties because they're storing the elements not in the order that they're added but based on their hash values and now our Python sets have a lot of the same properties as the mathematical definition of a set the elements are now unordered and we can't have duplicates but now we can also start talking about how sets give us instant look up with Oh 101 runtime complexity and what does that actually mean what is Big O notation so that's a crash course in sets next up combinatorics this one's bothered me for ages permutation lock clearly all right what's combinatorics comment focus is all about different ways elements of a collection can be combined hence combinatorics we have many intuitive realworld examples for combinatoric switch makes this a lot easier to sort of talk about and explain but it's also highly relevant to a number of important computer science problems a lot of these have ongoing research and like lots of fields of mathematics it actually builds upon a links to lots of other disciplines so the breadandbutter of combinatorics are permutations and combinations so given a collection of items how many ways can we select a subset of them and does the automatic if we care about how we're going to order them its permutations otherwise combinations so permutations often conceptualizes how many ways can we arrange in n items so this could be something like the books on our bookshelf or classes in our time table or the numbers in our pin code now there's a formula given for calculating the number of permutations we have this n factorial over n minus K factorial now I'm not going to sit here and talk about equations or talk but this is going to come back later so just keep that in mind now combinations otherwise conceptualizes how many ways can we choose n items so now we don't care about how we order them we're just selecting them so for example which books would be featuring a catalog or maybe picking out our lottery numbers though gambling is bad so then don't do that and again we have a similar similar formula for the number of combinations you'll see here that this actually has an extra K factorial term on the bottom here of the fraction and what this tells us is that the number of combinations is always going to be a lot less than the number of permutations because we don't have the option of rearranging them and to generate extra permutations so in Python we're going to be using the Ida tools module now Ida tools has a bunch of different tools for efficient iteration but in particular for our case it has builtin functions for calculating permutations and combinations so if we're teaching this to a student we might give them an example like this or they need to do is import permutations they create some collection of things they want to permutate in this case subjects maybe for a timetable and they run this permutations function and they go great that's worked let's print out the result and we get this ila tools dot permutation object so many questions what is this what is going on wide in my program work well it did but clearly something more complicated is going on here and I'm a tutor I have a class of twenty kids I kind of have to tell them well for the moment we'll come back to this later but just convert to a list and then you can print it out and we'll see all the values this is going to bite me later and similarly for combinations just instead of importing permutations we import combinations so you can see here we have a different collection of fruits how many what two different fruits could I take maybe from morning tea before so you can see we have an apple and a banana but not a banana and an apple because they're the same combination so let's run through a practical example of the question that a student might get on an assignment how many eight character passwords are possible using only the lowercase alphabet without repeating a character all right so we need to think is this permutations or combinations the autumn matters for a password so it must be permutations so the students seen some examples they might start out with some code we give them the lowercase alphabet they get the permutations function lowercase letters how many ways can we pick eight of them and then we need to see how many so we use the Len function and we get another error objective type Ida tools permutation has no Len why why won't it work well some of you in the room probably know exactly why it's not going to work but the student didn't but the student who did pay attention in class remember that I told them to just convert it to a list now this is actually like this code is running so I have to comment this out otherwise my talk would end here nothing that sadness awaits so why didn't it work well remember this is our formula for calculating the number of permutations in factorial over N minus K factorial so let's substitute in our values for N and K we have 26 letters selecting eight of them let's evaluate some of these permutations we see we have six point three times ten to the ten that's 63 billion possible passwords quite a lot to deal with so what do we learn from this well clearly factorials get really big really quickly and again now we can start talking about run time complexity and also in this case memory usage and why these two things matter now we had that idea tools permutation object before well that was a generator and generators are a really cool interesting concept and you know we can start talking about these and the problems that they solve and how we can use these tools to get around things but we don't actually always need to rely on generators to solve these sorts of problems sometimes we should just go back to the basics so let's take another look at that question how many a character passwords are possible it didn't ask us to generate those passwords and are definitely don't ask us to store them in memory okay once you give students this tool of being how to generate generate these permutations and show them how they're going to want to do that but you don't actually need to do that for every question sometimes it's just a matter of doing the maths now of course calculating 26 factorial or whatever by hand is a bit tedious maybe you don't have a scientific calculator on you so we can just use Python again unfortunately the path Python doesn't have a builtin factorial function but we can import one from side PI put in our values for N and K and we see our 63 billion passwords we're a little bit of floating point error but you know don't worry about that okay next up linear algebra so I contemplated whether or not leaving this section in because it's actually really hard to talk about linear algebra in a few minutes in a talk but the reason I left it in is because I think it's a really good example of how we can start thinking about algorithms so linear algebra matrices what is a matrix matrix is a twodimensional array of elements here the positioning within a matrix does matter and matrices are actually a different type of mathematical object so you have standard operations defined but they might work a little bit different to what you're expecting now if we're going to do anything with matrices in Python chances are we're going to be using numpy because it's a really cool library for scientific computing it has amongst a bunch of other tools a really highperformance n dimensional array object that we can use for doing matrix operations so let's start playing around with numpy if we want to construct some matrices we just import the matrix constructor we pass it a list of lists and we get these two matrix objects out let's do some addition and subtraction on them so for addition and subtraction of two matrices you simply add up the elements in the corresponding positions so this means the two major disease need to have the same size you can see for addition we have in matrix a in this position too and in matrix B this position three and our result is five but if we were subtract them a result is minus money all good so far what about matrix multiplication well clearly it wasn't gonna last something different is happening here to multiply by three definitely isn't 9 last time I checked but also you'll see that the results for this is actually different if we flip the order because matrix multiplication is actually defined differently to addition and subtraction so this is where I try and teach your matrix multiplication in 30 seconds no that's not going to happen ok so this is how we might teach it to a mathematics student we've got some nice formula for how to define matrix multiplication but if you're a firstyear computing student who doesn't really like maths they're so scary right what's this thing this is like a Samos 11 how about an algorithm all right we like algorithms algorithms are fun they tell us what we need to do there a recipe turns out actually writing matrix multiplication in an algorithm is also harder than I thought it was going to be but this is my attempt at it so if we're multiplying two matrices together C equals a times B we iterate over the rows and columns of C and what we actually do is we get the corresponding row from one matrix and the corresponding column from another matrix and we multiply each element pairwise and sum them all up like this so for this position we're using this row in this column and for this position we're using this row and this column all right that's my thirty second explanation of matrix multiplication but we've got this algorithm so now let's do it in Python and you can see that the code for doing this in Python is pretty much just that algorithm that we had before hint I wrote the Python first and then yeah okay so the only extra thing we need to do is sort of calculate what our values for the rows and columns are and sort of initialize our matrix with a bunch of zeros to start with and then we can sum them up there's a bunch of different ways to do this there's better ways to do this but this is one way and now we can do matrix multiplication with just two lists of Lists we don't actually need the numpy matrix constructor and we can see that we get the same results that we had before admittedly they're not formatted as nicely so why why Liam you just told us you can do this with numpy numpy is going to do a better job why not just use numpy well this gives us a better understanding of how matrix multiplication actually works because remember the students that are studying this also are going to have to do this on written maths assignments okay and if you're a programming student who's new to this getting any sort of practice of sort of conceptualizing this idea and the steps that you need to do is really useful and this gives us practice in doing that and we're breaking down a process and actually implementing an iterative algorithm and again this also gives us a sense of why matrix multiplication is a really computationally expensive task even though it's so important you saw we had those three nested forloops before so we have a classic example of a nolan cubed algorithm so what does that mean and there are there ways that we could maybe do it better turns out kinda but not really and we can make a similar case for matrix determinant this is another calculation you can do on a matrix which sort of reduces down to a really simple recursive algorithm well moderately simple recursive algorithm so now that we've done this made from matrix multiplication let's take it further let's practice some oip so we can actually create our own matrix class like this and using the double underscore mul method for overloading matrix multiplication we can just insert our code from before we can also do the same for an add method and a subtract method etc and we can create our own matrix class and do some of those operations that we saw none by doing ourselves so now we've got an introduction in 200p all right my last set of examples are all about visualization and data so digital K did a talk yesterday in the education tract and she had a bunch of great examples for this so I was like really impressed to see those as well so some of these might be a little bit familiar but I'm going to go through them really quickly if you're interested in this stuff I'd really recommend watching her talk it was fantastic so first I just want to talk briefly about Jupiter or as it used to be known I so Jupiter is a webbased notebook which allows students to present to prepare documents which contain both live code snippets and rich text to annotate them so this is really useful if a student is preparing some sort of report or presentation and they need to include code in it and that code is actually runnable now what you might be surprised to learn as well as that these slides that I've prepared today were actually all written in a Jupiter notebook as well and then it's a little simple extension to convert them into slides so this can be a really useful tool in some of these sort of situations so my next few examples about how we can sort of do some visualization and plot with python or use the matplotlib library now in these cases the code itself is not particularly interesting or relevant to the talk so don't get too bogged down in what's happening there how this is useful is that a student or a tutor can prepare this sort of boilerplate code and provide it to students to allow them to experiment so I've got five minutes left so I'm gonna rush through these we can plot functions really simply we just create our xaxis and a yaxis using MATLAB and numpy and we can simply show a nice beautiful sine wave there similarly we can do the same with charts and graphs we just get our xaxis and some Y points here and we can see a nice bar chart so maybe we've done some data collection in class and we want to plot that into a bar chart let's get a little bit more fancy let's do a linear regression so here we've got a bit more boilerplate here I've got a function to calculate a line of best fit now of course I'm not doing that myself I'm using the stats function the starts module from side play and then we can just do a linear regression plot like this so you can see here now I've got some X&Y data points and I just call that function and we get our nice blue data points with our line of best fit through the middle let's get even more fancy 3d surfaces these are really cool so you saw before with the function plot we had of a function with one variable y equals x well if we add another dimension to that we have something like Z is a function of Y and X now we take it into 3d so again a little bit of boilerplate here we have this apply function which is going to map a function onto that 3d space and then do our plotting here again not too important don't worry too much about this code I can show you later but what we can do is define some functions so I have one here called a saddle otherwise known as a hyperbolic paraboloid I think it just looks like a Pringle and we can plot that with some X&Y ranges here we can see I have another function here which is a little bit more complicated called a sinc function and I can just change this here run that obviously we get another 3d plot there all right so summing up pun intended look I said at the start I like bad jokes all right so I really think based on these examples we can see that learning programming alongside mathematics can be used to sort of help bridge these related concepts if we have students familiar with one stream or another they can sort of use that as an entry point in to start exploring the converse both of these fields contain a lot of opportunities for further extension and inquiry once we get started it's easy to use these tools to sort of start stepping through some more complicated ideas and clearly Python is a fantastic tool for introducing these concepts to new students as you've seen all these builtin libraries provide plenty of useful tools because as interpreted we're dealing with a lot of interactivity and this allows students to really experiment you saw I could easily change that example of a 3d surface plot before and of course pythons simple clean and readable syntax it's really going to lower some of those barriers to programming there's been lots of talks about this some already in the education track but where I find this is useful is that it allows students and tutors and teachers to focus more on the important concepts that they're trying to convey we're not getting too bogged down in syntax and other things like that instead we can actually start talking about things like you know calculating permutations and runtime complexity or using hash sets things like that so thank you very much for listening to my talk the slides are available online through this tiny link they're on github you'll actually see that Jupiter notebook so you can also look at all the code snippets there do we have time for questions No okay so thank you very much if you're interested in this any questions I'll be milling around feel free to come up and talk to me I'd also love to hear if you have any comments about anything I've said because these are just my opinions as students teachers or other developers I'm curious to see what you have to say otherwise thank you alright so as he said we would ask that if you have questions for Liam you take it up to the hall as we have ten minutes until our neck