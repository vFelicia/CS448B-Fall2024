hello and uh welcome to the beginning of my unix tutorial series uh for beginners now assumingly if you've clicked this video you know what unix is but if you haven't and you just stumbled along on curiosity well unix is an operating system from the 1960s which we can still find uh today in our modern operating systems and that's operating systems like mac os x or linux which i'm using uh now you can even find it on things like an iphone or an android smartphone but anyway you can't actually find it on uh microsoft's windows which i'm sure most of you are running most of the population at least but there is a way of actually getting unix onto it which i actually might make a video on uh later but anyway now when i say this is a unix system i don't mean all this like all this graphical stuff i mean what you get in the terminal or the shell and you get there by going to the terminal application or at least terminal in my case on a mac it's called terminal i know that but on your system it might be called console or shell or something like that anyway when i say i mean what you get here in this little application the text so when i type stuff in commands and stuff you get output that's what i mean by unix the shell okay so i'm going to go back to my special terminal with a large font for you guys okay so i must say this what i have now isn't actually unix from the 60s 20 or 30 years ago whatever it was rewritten and what i have now is called gnu well it's not actually called canoe but well it's from the gnu foundation and the interesting thing about gnu gnu is it stands for gnu is not unix that's the acronym and basically what it is it's a clone of it really it's unix rewritten to be open source or at least open without uh legal restrictions because the original one unix was proprietary which meant it was had a private owner and had legal restrictions on it well the new one one i'm running now run most if not everyone's running is uh open which means it's got no real restrictions on it okay back to the shell okay so the unix shell is a command central thing you only open it if you want to do something and you can only do something with commands for example this will print out some stuff and so will this and this will print out the username of this logged in okay so one of the main things you anyone will really want to do on unix well the shell i'm going to refer to it now from now on as this shell one of the main things anyone want to do with the shell is navigate the file system so make move delete files it's you know etc rename them yeah things like that and i'm going to show you that in this video okay so i'll navigate in the file system you're going to need to know a few key commands which are probably the most the main command she'll need in unix or the shell and the main one probably be ls and ls stands for list the designers for to be you know smart to take out the um unimportant characters from the words the verbs and just make it really short two letters ls to um list files in the directory and that's fine i guess it's a bit confusing at first but once you get used to it ls is better you can type it quicker it's shorter yeah so alice use ls to um to view the um files in the directory to list them in a ascending order from a to z okay so ls list the um files in a directory and you can see which directory you're in and when i say directory i mean like the path the file system path of like where you are so in terms of windows you have the c drive you could have your my documents folder in linux i have my home folder which i'm currently in on mac it's the same so and you can see what current director you're in on the unix shell by typing the pwd command and this basically stands for personal work directory so the current directory you're working in so let's quickly clear that so i'll type in pwd and it tells me i'm in home michael and that's the directory the first folder is called home and in the home folder i'm in michael and this is the directory i'm in so let's say i want to change directories so i want to change the current place i'm in so well i have to go somewhere so could quickly hit ls to see where i can go and i guess i'll go to this workspace folder i can tell it's a directory because it's in blue or green outside the blue in this case that's because it's uh one of the attributes of it but anyway uh so i type in cd and this is another new command cd well cd stands for change directory and this command you can change the current directory you're into another so i'm going to type cd and then the name of the directory i want to go to now you notice there's nothing before it you know no path before this workspace name that's because well i'm in this home folder which contains uh the workspace folder so cd workspace will hit enter and type in pwd and look my work to re directory has changed to workspace so i'll type in ls and ls tells me that there's four folders in this workspace folder and it's these four so let's cd again to quadratic one and it's ls okay and i can see more files i can see the program i wrote for android okay so let's say i want i have a file here called my file alright so i can have a look at what's in this my file this is cat command i'll explain it later and i see it's a text file which has this gibberish in it okay well let's say this my file that i've made is in the wrong place i don't want it in this quadratic factorizer folder i want it in the bin folder this here so what i want to do is move this file into here and in linux to do this use move command or it's typed mv so mv is just move and we type mv and then the file we want to move which is called my file in this case and then directory where you want to move it to so bin okay and then we'll type ls again and we see there's no my file anymore in this directory and we'll type ls bin and you see what i'm doing here before i haven't really typed anything after ls but i'm typing bin after ls now so what this is going to do is it's going to look in the bin folder and list the files in that it's not actually going to list the files in the current one rather than the one i've typed okay so you can specify which directory to list files in alright so i hit enter and i see that my file is in the right one so if sake of this i'm going to sit into the bin okay now i'm in it okay so let's say i accidentally misbuilt my file let's say i want to call it something different like your file so i'm going to use the same command i've already told you it's called move okay so this is the rename command realistically you're essentially moving this my file to a new file see what i mean with a different name because well when you move something you don't actually copy it over and delete you just move it you're not really copying so this is the same for renaming you're not actually copying it over and then renaming it now you're just renaming it so that makes sense to you sorry thanks so much if you type mv and the original file and then the new files and there and type ls to see what's done and look no more my file but this is your file and we can cut it again so it's still the same thing and yep it's still the same thing all right let's just say now that we don't want this file at all it's absolutely useless we want to delete it well to delete a file in unix we type the remove command and it's referred to as rn rm stands for remove of course so we'll type rm your file and we'll type ls and it's completely gone it's deleted it's no longer on my file system and there's a quick shortcut that you may find useful uh let's say i want to go back i'm in this crazy directory i want to go back to my home folder well to go back here without um typing cd oh michael i don't want to type this is too long i just type in cd then tilde the squiggly line and in unix or the shell the tilde is a shortcut for in for the home directory so if i type you'll see that um the tilde is uh the home path and yeah for the sake of it echo the echo command echoes whatever you just um wrote to the shirt command line so hello and it's gonna go back all right so anyway i'm gonna cd tilde which is the equivalent of cd home michael and i'm going to see my work directory and it's in home let's type ls here okay now what i've showed you is actually rather simplistic it's really simple commands and command arguments as well but let's say i'll show you some more advanced uh examples now actually i'll show you some now actually now i'll show you how to find the disk space of file users so let's say i have this linux mint 10 gnome cdr iso this disk image in my home directory and i've really recently noticed my disk is running out of hard disk space and i want to see how much space this is using so to do this i'll type in d u and what d u stands for is disk usage so i'll type in du and linux mint 10 you know cd iso and it gives me this line 716060 and the file name this is how much disk space um this file is uh taking on the hard drive and this is in kilobytes so this is six hund seven thousand seven hundred thousand six seven hundred and sixteen thousand sorry kilobytes which is 716 megabytes of disk space which yep it's reasonable i'm not going to delete it um uh what i've just done here is um i've cleared the screen so let's say i have a lot of garbage typed up yep okay so now i want to clear it it's all messy i can have a type clear or i can do a quick shortcut and type control and l yep so ctrl l will clear the screen and leave the current line also will clear all right so let's go down to the more advanced ones so let's say i'm in this folder the root what's called the root folder which is the top directory where the entire file system lives and we can see the home folder that um all my files live in okay so let's say i want to um cd i want to move this file uh one folder one no no not my cd into another folder let's go to workspace let's go back to quad okay let's say i want to move yeah i'll make a new one echo pay no attention to this is just to make an example okay so let's say i want to move this my file into my home folder from the root folder so i'm here and i want this my file into my home directory well to do this i'd use the move command wouldn't i yep so i'll type move and ultimately i'm going to have to type all this and you'll notice i'm typing forward slash or you know what tilde is that's a that's the equivalent of this yes is it not or with the equivalent of a view username so i'll type tilde but i'm typing also a forward slash and the forward slash is what you use to represent a folder so a folder path so in this case bin folder and it'll tell me it's a directory all right so if i type then you know yeah see i need the forward slash so it's a directory so anyway where was i i was i was doing uh that's right moving the my file to my home directory so i type mbtilde which is the same as homemichael forward slash and wolves it was workspace was it not and it was quadratic factorizer and it was my file yes and now space so new parameter tilde or yeah i'm just going to write home icon normally i wouldn't write this i just write tilde but anyway enter so i'm going to look in my home directory and well you see i can scroll in this but on some computers where it's completely a terminal you can't scroll yep so those people they need more to see more uh information on the screen but they don't have the scroll so in order to see my my file folder which i've moved here i'm gonna have to type in a second command so and it's a button under the backspace with a shift so hold shift and the button under the backspace and get this straight line and i'm going to type in less so it's going to shorten the amount of screen i'll explain uh this thing here later and how this works in a different video it's one of the advanced parts of linux but and and this is going to list all the files in the directory part by part so as i hit return the enter key is going to keep displaying it every other line line by line so i'll keep going down to m see if the my file is there and what do you know it's there so i've successfully moved it away so i've seen all i wanted to see so i'll just hit the q button to get out of the less and there we go back to the shell so i can still so i know that my file is uh in this folder right so i've shown moving files i've showed renaming let's get on to paths all right so let's say i'm in here and i want to quickly get to the home directory well that's one up so i type in cd i could type in this or alternatively what um you could do as a shortcut is type in dot and dot will um sorry not dot my bad dot dot and dot well the dot will um represents the current directory you're in it's a current folder that you're currently in but dot dot is its parent folder it's it's the folder that contains it so cd dot dot will give me up one and i'll type in and i'll see i'm in home so let's see this dot okay so let's go down to the dot cd michael let's say i want to type a command and it's going to be deleting that my file well i would have to type dot my file oops sorry my bad rm dot slash my file so this is the current uh directory so these two represent the current directory plus the my file folder well actually you don't actually need this but for some commands uh you do but anyway you're right yeah and it's deleted the my file alternatively you could have that it's equivalent same thing why i showed you this dot slashes because some commands need it and you'll know what as your time progresses an example will be probably this one ascii print i don't know i don't even know what this is but anyway let's just say i have python you're actually never mind i won't even bother with that i have no idea what that is okay so the main reason why anyone would use unix is because it's a lot faster than a typical file manager i mean i could open up one right now and i could see all the files i've been editing perhaps see i can see the workspace folder i can see quadratic so all the stuff i could do it all here but let's say but it's fast because you can do lots of things at once so i can see there's a lot of uh dot c files so c code that i've written over time and let's say i want to organize my directory i want to move all the c files into another folder let's call it c all right so i'll go back to the shell because this is um video on unix after all type control l clear the screen and i want to move all the c files into a directory in home called c so the first thing i'm going to have to do is create a directory and to make a directory in the shell you type mk dir and what this stands for is quite obvious make directory all right so we type mk dr c and this will make a c directory in the current directory which is home so i'm gonna type make directory c now if i type ls and then c whoops oh crazy stuff crazy stuff ah ls star c okay so my type ls whoops i'll type in ls ls and we'll see there's a c folder right here oh it's apparently two folders okay so i'll type in cd now i'm gonna go to the uh c folder i made i have a look at it nothing's in it it's a blank folder okay so i'm gonna go back back to home and i want to move all these dot c files into this c folder well obviously i would use the c commands the move command sorry and now here's something new i'm going to type in asterisks and what this asterisk is is it's a wild card or what's referred as a wildcard and basically the star references represents every possible text you could make for example you could write my name michael as star l these are equivalent or mike star l or mike starr ayo but it wouldn't be um mic star l a l star this would not be equivalent the equivalent all right but these two are so you see what i mean in this case the star represents ae or in this case it represents my cat so the staff character represents text that you don't actually know okay so i'm going to type move and then star character dot c so in this case it's going to reference every possible file name in this directory so it's going to represent echo but this dot c well that's going to pinpoint it down to a few so it will only reference these it won't reference this because it's got some text after it so it will only reference this file this file and this file but it won't reference any other really because they're not dot c and they're just finished suddenly i mean this case there's some text after it so you won't reference it all right so we're moving all the star dot c's to the c directory yes write it as dot c okay and hit enter it's done it all let's have a look at it there we go all of our dot c code is moved into this c folder just like that so and in one command relatively simple i've moved all my c folders files into this folder easy right okay now let's say i want to copy all those files that i've just moved all these files i want just moved into my uh into a new folder okay i'll make a new folder right now so i want a clone of it so i want all these files again in this new folder because currently there's nothing in it so i'll go back a bit ls see that i'm in my c folder so what i type in is cp so whether i showed you cpu or if i haven't cp stands for copy and what it does is it copies files okay so cp i'm just gonna use star so that's every single possible file in this directory so it's gonna move absolutely everything into new folder hit enter and there we go what do you know it's decided to skip emitting directory now that's basically jargon for skipping this directory not going to copy it okay so that's how you copy files with the asterisks then so let's say i want to find the files i'm at my shell i've been working on some code and now i've lost it i want to find it i forgot the directories in so i type the find command now it's not called fnd it's not called fin it's called find okay you can't really shorten it fd it could be fd but you don't know it's just fine okay so now this find command has parameters on it as actually has a lot and i can't actually sit here and explain every single one of them to you because that would take a ridiculous amount of time so what you do is you type dash dash help and this is a parameter to basically every unix command and hitting enter is going to print out a bunch of information so i can see now that there's more information that they can fit into my screen so i'm going to use less or i basically just did there is i hit the up button and that's a shortcut to getting to what you've just typed what you've just entered so here i can browse through all the commands i've typed today or in a period of time okay so i'm going to hit up once help straight line less there now i'm going to see all the output that the help command gives you like so okay so i'm going to look at this what what do i need what do i need it's all crazy this doesn't make any sense to me so in order to use this i'm going to type man find now man is a very useful command and what it basically stands for is manual so man will give you the manual for find man will not work for actually everything a lot of commands won't have a man manual but basically all unix commands do but once you download the internet they probably won't have one they could but they probably won't so man find it's going to give us a manual it gives us help here on the bottom we can have it press h for help more help or here we can use arrow keys to navigate and this gives us a brilliant description of the man find command which is absolutely excellent you can become an expert and find with this here's a parameters you can all information all this text describing just about everything descriptions of every little parameter you have see if we can have one to turn off warning messages here well i'm already quite familiar with find and so i'm going to type find i name so it's going to find all files with this name and i'm going to type star dot c all my c files type i want to only want files so type f and that's all i realistically need okay enter and it's going to go and find print every single c file in my directory simple enough i'll type it again for a different type i'll call it apk and this prints every single apk file i have in my home folder or at least my current directory and you see these dot these file paths well these are actual file paths relative to what directory you're in now so if it's like this here if i were to do it in this command now what's happening now is searching my entire file system for apk files looking looking i literally have hun tens of thousands of files in this hard drive i'll take ages to search it so a quick shortcut there this third parameter so it makes it so it only searches the home folder path must proceed home oh that's right you have to type it here i think whoops and there we go and we see this path is different to this path because they're relative they're relative to what directory you're in okay so let's see want to what to do clear the screen let's see i've covered quite a bit i've probably gone longer than i should have but hey it's it's unix there's a lot to cover oh man command so basically every command i've said there's a manual form and you can get a good description of about everything normally i don't actually go in the manual i just type in help and this will give me a help for everything so it gives you a brief description i want to copy files by force i want to copy a directory now no distance directory and yeah things like that so you know i'll do an example i want to copy directory so let's see what do i have now i'm in my root folder so i'll go home ls okay let's move this c folder to workspace okay so to do this i'm going to type you know not move let's copy it okay so copy so i'll type cp you know i'm just going to show an example of what a typical person who's trying to copy would do so c and then workspace this is probably what you do right let's hit enter and it tells me it's a directory it's not going to copy the directory so in order to make to do it let's look at the help all right so this is what you probably should do when trying to do this and it doesn't work look at the help page okay and we see that you um we need to read these keep going down down here we go look at this one ah recursive copy directory copy your directories recursively i think that's the one we're missing ah here we go v verbose this actually doesn't really affect anything it just um tells the command to print what it's doing i always like to do it when i'm doing it okay so i'm going to type cp dash r for recursive dash v now these dashes these are what you um type in order to give a parameters to cp and a quick hint is you don't actually have to type the second dash you can just type rv but this is only for some applications so generally i just type out like this and then we'll type c and then workspace now you see it's printed up a ton of stuff just a ton of information too much information this is because i typed v verbose so it mostly told me everything that's happening so let's have a look at workspace and we see there's a c file so let's let's see what's in c and all this stuff okay so let's say i have a command i've written up my own command because i'm a programmer so let's say i have one let's quickly compile this code don't really pay attention to this and i have my command called gcd let's say i want to execute this command in this directory well you'd guess i typed gcd right this is what you assume what happened well if i hit enter it's not going to work this is because when you type gcd it searches the bin folder of the root directory so this folder and this folder and this folder it searches these three directories for uh gcd and it doesn't find it so it tells me command not found well obviously it's not found because the executables in this directory it's not in any of those three so in order to execute this command i'm gonna have to specify that the command is in this directory if the dot slash remember this well anyway dot gcd hitting enter and the command is executing this is the program i wrote and yeah and yeah so that's basically it yeah i have no idea how long this video is going for but i think it's enough to cover uh file moving and stuff this is probably too long actually let me just look at this you see here there's a unique shell as well that's what i'm using to record my screen looking here it tells me it's a whole gigabyte wow doesn't actually tell me how long it is but oh here we go 35 minutes wow long video i'm gonna end it now okay goodbye i'll make another a few more videos on unix see you in those videos bye okay so hello and welcome to my uh second video on unix and just watching over the first one i noticed a few factual errors in the video and so a quick google search when i noticed some after i did a quick google search on unix and i got to this site excellent site wonderful site freeengineers.org forward slash learn next yeah blah blah blah in the description box below and it's basically got all this like factual information you know just syntax and stuff for unix commands and it's just great it's condensed into one quick little page and you can probably go through in well 10 minutes and i do recommend you uh get on here because not everything i say is maybe the best way it's done and you're probably the best teacher for yourself because well yeah and seeing a few things i got wrong or not as correct be like cd doesn't stand for current direct change directory stands for change current directory which i thought was somewhat odd ccd yeah and pwd stands for present work directory which makes a lot more sense you know what i said and also looking at this you can just type cd to get to your home directory so for example i'm here in my home directory now but i'll go to my documents and instead of typing this i could just type this i honestly didn't know that until well that quick google search so yeah you should actually go out and try find information on unix yourself because well not everything people tell you is the perfect way okay so i'm looking at this i'm going to use this guide now to uh to explain let's see um i think today i'm going to cover permissions file permissions and uh let's see and maybe this as well moving renaming and copying files okay so permissions permissions here we go in our unix well we have just like every other real file system or whatever we have our permissions for files so for example if we like download a file of the internet we might not want it to be executable we don't we might not want the uh person to actually physically be able to execute the file because well it might be dangerous it might be a virus it might be malware something like that so there's an executable commission which this x represents and what the x represents and yeah i do believe and uh you may also want to keep files private for example there's multiple users on your computer you might just want the cliff user to be able to read it rather than the whole system so any user on the phone so permissions also you might only want a file to be read only you might not want anyone to write to the file if it's like a some sort of special i don't know whatever so let's see let's do examples shall we so i'm in my home directory you can see that and let's say i have a new file let's yeah i'll make a new one and i want oops we got a cd to test okay so let's clear that so i don't have any files in here you know i think i'll i'll do this one first moving renaming copying no not sorry editing viewing files so with this i'll create some files and then i'll modify the permissions on them all right so let's see here in unix you can do uh there used to be a editor called pico which was proprietary it had a private owner or entity whatever so we couldn't actually be included in the uh the public gnu one so that's a make a clone of it and they made a clone called nano so you might get the uh the naming convention here so with nano you just type nano plus the file name that you want to edit so i'm going to call it a file okay so nano a file and it'll bring me to this little editor so here i can just write text it's updates live and you can do multiple lines whatever you can hit enter and it behaves just like a normal text editor would except without a mouse but that's fine because you have the arrow keys to navigate and well it says all right and now it's quickly out of it i click control x in the menu below and that gives you what you can do and this little up thing stands for control so control x bring it to a new menu do i want to save yes i want to save the buffer so i hit y what file do i want to call it name a files fine there hitting ls i see that a file is there okay and let's just say i just cd to this directory i see there's a file called a file let's pretend i don't know what's in it i want to see what's in it was a command called cat now cat like this file thing says will dump a file to the screen in ascii so that means is it'll print out what's in the file in the ascii uh system standard so cat a file now this is written in nasty text which means like the 128 letters numbers in the table i don't know how to describe it and we see exactly what's in the file this is what i wrote down in uh and cat will print it out to the screen now alternatively let's say the file's really long so let's make a new one see here where can i go again let's just go here so i got this file and you see it just a whole bunch of information has come out onto the screen just print it out but let's say i want to see the beginning of it i don't want to have to retype it and and do this another i only want to see this beginning part of it well you can do that and as a file the command called head and head will give you what's referred to as a head of the file and by that i mean the beginning of it so head file log.txt will print out the beginning bit of text oh that's actually quite a lot i don't know what's on it's just this part okay so it's printed out the beginning part of it and there is a another command that it's just like this it's called tail and we'll do the opposite it prints at the end of it so i'll just quickly type that and it gives me the end the last few lines to the file and let's see the uh help we might be able to select how much line do we want yeah here we go hitting n we can uh specify how much lines the defaults 10 okay all right so let's see here let's see what else is there everyone else okay so head up yeah see look n will give us the amount of numbers all right uh yeah you could use these are other editors vi and emacs and vi is just a crazy editor it's just really i've no idea how to use it i mean i couldn't care less about it actually i'm sure if you don't do a quick google search or a youtube search you'll find a tutorial on it i'm not even going to go on this it's just i don't see the point it's ancient emacs uh well i could say the same but i do see quite a lot of people still using it i don't even have emacs on my system okay i'm sure i have vi i think everyone has vi and you can just see from this i don't even know what's going on i don't know how to save it just get out of it i don't even know how to get out of it okay that's terrible there we go that's a fourth closet all right so basically if i ever wanted an advanced editor i wouldn't go vi i just get like a graphical one like really all right so we'll zoom less yes you can write less and instead of using it like this like uh whatever and then doing that you could just write less and then the file name so far log and we can do that and it's the same thing as before we hit q again to leave it okay so that's editing viewing and editing files so to view your type cat to edit use an editor to um to well uh what's it called edit the file so let's go back to our test directory all right so if you're seeing this all right so if you're seeing this uh what's a god i've decided that after just doing the permissions for uh part of the video it got way too complicated i didn't do it very well so i'm i'm gonna cut the permissions part out of this tutorial theory it's already getting long enough anyway i'll come back to file permissions in another video okay so random see you then