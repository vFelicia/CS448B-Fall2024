welcome to today's leftbrain lesson which is all about numbers one of my favorite topics so of course we're gonna start with some of the basics like integers and floats depending on how much finegrained control you need but then we're gonna talk about rounding numbers up depending on how many digits out you want things or how you're gonna print them we're gonna talk about the difference between casting and coercion so it's whether we want to change things specifically from one type to another or it's happening automatically in the background and I show you some of the constants you can bring in like pi or e and then some boolean math the thing a lot of people don't think about but one in a 0 the true and the false these are definitely ways that we can calculate and then of course working with some random sequences how do we get random numbers generated and then how do we print those to a console and the way that makes sense for whatever the application or program is that we're doing so stay tuned stick with me and I can make sure that you never go bald let's talk integers shall we so here's some basic integers just to review we can have a negative 17 a 0 or 42 as long as we don't have decimal places also not just notation so see I have int 1 & 2 & 3 and I'm just using commas and then assigning them to these 3 but this is just like before when we made variable is a little bit different syntax a little more compressed but we can put them all out in the same way if I just putting commas between them and you can see that they work just fine and we can check them to make sure they are of type integer okay now let's talk flow to get some of the basics so we're gonna make a couple variables here one we're gonna set to the integer 21 1 to the float 3.1415 and by printing out the types you can see that we get exactly what we were hoping for we get an integer and a float type but here's a good question so how many decimal places do you think that we are gonna get when we run this cell because we input 4 after the decimal and we get we're out okay so Python doesn't have any problem with that level of precision but what about this we're gonna import a constant pi which goes on as you all know forever so how many decimal places do you think it's gonna print out for pi okay so this is gonna be its normal limit so that's the precision level that we're dealing with usually not a big deal but just something to kind of keep in mind that is different levels and at certain times that's way more than we want to show someone so if you want to tell someone what pi is 3.14 is usually good enough so let's move on to the next topic and talk a little bit about rounding let's look at how we would do that so let's make a variable and this one has many digits after the decimal and we can use this cool function round and it puts in the variable and a parameter which specifies how many digits we want to round to and then we're also going to wrap that again and this second function called type just to make sure we are still dealing with the float so when we run this cell we get that it's still a float and that it's now down to just two digits okay now if you don't put any parameters into it at all it's gonna actually assume zero and it's gonna move it all the way up to an integer and it's a different type also now so the important thing to remember is that if you round all the way up python is gonna try to save memory and it's gonna turn it into an integer and it's not a float anymore also let's talk about if you want to round in certain ways because sometimes what they call ceiling or floor rounding makes more sense meaning no matter where the digit is just bring it up or bring it down and there's a couple things we can do for that we can import a module called math and then we can wrap it in a function called math dot seal for sealing or math dot floor for floor and you can see it's gonna round it up to 183 I'm sorry nine as you can see it's gonna round it up to nine eightythree or down to nine eighty two let's start casting so let's make a couple toys variables here so we have a negative float and the regular integer and now I want to use an absolute function okay so you remember for mathematics absolute numbers are nonnegative numbers they're a distance away from something so we can actually run a float negative 3.14 into an absolute function and get out an absolute number which is a cool thing that Python can do and remember we didn't actually make my float back into this absolute number we just referenced it made an absolute value and viewed it sorry when we cast our float into an integer what do you think we're gonna get did you guess negative three because we still have the negative up there we didn't actually overwrite it we just displayed this so nothing to remember is that the state of the variable it can be very different from what you're outputting on on screen so let's look at another casting if you're gonna take my integer and turn it into a flow to my integer right now being 21 what do you think we're gonna get 21.0 right like it's just the same number the other one you can kind of think of as having a point zero but it's gonna take up more memory now because it's remembering more precision also want to talk about complex numbers you know not that they really come up that much in regular life but they are cool and I'm sure you remember in mathematics how fun it was to you know use angles to solve you know multiplication problems and you know that's just kind of cool so knowing that Python has complex ability is neat we can actually in input two digits here it's gonna be we're on the xaxis something is and we're on the yaxis something is the two integers here or one float and one integer are gonna give us 21 to the right and then negative 3.1415 down you can think of j is the yaxis so it's cool to know that it has that and we also have hexadecimal so you know in reality the only time hexadecimal comes up in my life is like with colors sometimes we'll be with Photoshop things like that but there is a conversion because that's a base 16 system but we can convert the number 78 to hexadecimal and get 0x you know for E or whatever it is and we can do this with any number we want so we have a conversion and we can convert back and we can do all sorts of cool things through casting in Python coercion very similar to casting but it takes place behind the scenes without our knowledge so a good way to think about casting is that it's explicit it's a decision that we make and then coercion is very similar but it's happening implicitly it's happening behind the scenes pythons just making it happen so it can solve problems for you so easy example we have 1.0 a float and we're gonna add it to the integer two but after go of running through the function float which turns it into a float and you'll see that we end up with 3.0 okay now if we actually add one directly to the number two we get the same answer so behind the scenes it's just saying whoa 1.0 can't be added to just two I better turn to into 2.0 and then do the man next let's talk constants so a few constants that are that commonly come up are PI and Euler's number so just so you know how you get those is by importing the math module so once that's in for did you can run math dot pi and you can get 3.14 yada yada and you can run math dot e to get 2.718 yada yada yada so that's great sometimes we don't have to type all these things out we just throw in math dot pi or math dot e or maybe even assign that to e and you do something like that and then throughout your code you can just use e whenever you need to so there you go let's talk boolean math so this is just kind of an interesting thing to have in your head that false and true also act like the numbers 0 and 1 in python and they can actually be used as replacements for 0 and 1 so we're gonna sign a couple variables here just F equals true I mean F equals false and T equals true and you can see that we can simply just do 1 plus F right so f is gonna be 0 so 1 plus 0 should give us 1 1 plus true so it should be 1 plus 1 which is gonna give us 2 and then we can do 1 false equal 1 1 minus true equals 0 so cool little thing we can do there with billions so now let's talk about randomness so randomness actually seems to come up a lot when I'm programming and I wouldn't have thought it when I started but you know just the way the world's going especially with like neural networks and some of the kind of cuttingedge stuff that we're gonna eventually get to it's all about controlling uncertainty it's about having grasp on randomness so you know in the super basic sense what we can do for a random number is bring in a module called random and I'm also gonna make just a little sequence here that we're gonna use in a couple cells but if you want a random number it's as simple as random dot random open closed parenthesis right it's a method inside of the random module so we run that and we get in this case 0 for 0.04 but it's always going to be a number by default between 0 and 1 and there are a whole bunch of parameters so make sure to wrap that thing and help and go google it if you're interested in all the other ways you can generate random ranges but you can see by just running this over and over again we're gonna get a different number between 0 and 1 and one of the cool things that you can do sequences is you can use random dot choice I find this really powerful if you want to pull something out of this sequence like you want a random thing out of a database or you want a random item pulled out of some kind of a list or a dictionary you can use this random dot choice and you'll see that it's gonna pull out the number six in this case but if we just keep running it we get two we get six again we get six again we get six again we get four so it's a very cool way you can pull that out of lists using the random module okay and finally let's talk about just how you would print these things because you know it's not really intuitive to always see tons of numbers after the decimal so let's just show how you might want to print this out in a way that's more human intuitive so we make this float which has a whole bunch of numbers after the decimal but we can say in a format in a print format my float and we can actually just reference it and see everything or we can use a colon dot 2f and remember this is different than needing to round it first and then printing the rounded number the whole numbers still there in memory we still have all of the precision that we had before but in a simple way we can actually just print out that it's national pie day subscribe to the mnemonic Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations welcome to today's lesson on strings very excited to talk about strings because there's so much we can do with them and we're gonna start by going over the basics how to print them to the console how to format them so they look nice when we're printing for the user we're gonna talk about slicing them up on an individual character level going from one character to another and then taking pieces in between we're gonna talk about concatenation which is the process of putting strings together again merging them we're gonna talk about escaping which are special characters that we can use to get out of strings and put in information that gives it much more power we're gonna talk about raw which is another type it's an input type that lets the user type things to us and then we can change those using casting into numbers or floats or whatever we need to do with them we're gonna talk about reaper which is a function that doesn't print in the same way a human would read it but it does in the same way that a computer thinks about what it's giving us and it can be really useful in a lot of situations then we're gonna talk about encoding so we talked about everything being utf8 inside of Python so we're gonna look at all the different fun characters we have how we can use them and then we're gonna use an origin alysus to actually figure out what's going on behind each of the characters and then finally we're just gonna show off a bunch of methods I don't have enough time to go through everything but we're gonna look at how to change the cases and strip them in different ways and do alignments and finds and replaces and splits and oh my let's hop into the deep end of strings so the basics okay python has a builtin class of strings you'll know this as STR when you search for the different types and here's an example a best friend is like a fourleaf clover hard to find lucky to have I'm gonna put that string of text into a variable called friend and now I'm gonna make a couple more of those and look at the different types okay they're both strings make sense whether they have spaces or not now here's a question for you the number equals five but it's in quotes is it gonna be a string or an integer well we should know this it's going to be a string an STR and that is because of the quotes you know let's talk about the basics of printing so of course we have double which were starting to get used to for making a string variable but also don't forget we have single quotes and the reason you might want to use a single quote or a double quote in different situations has to do with the text inside so in this example it's national pie day we have a contraction that uses a comma so we're gonna want to use maybe double quotes but also maybe we have double quotes inside so we want to use single quotes or some kind of mixture of them so later we'll look at some other ways to handle that but just in a basic understanding either of these they're just identical they're the same thing so let's look at some formatting issues now formatting becomes a big thing you're constantly printing you're constantly writing things out and knowing how to make it all look right and spaced right and read right for the user is a big thing so formatting is one of those kind of core concepts in programming so let's make a couple variables here we have one that's called pop and another one called tart first brotherandsister I assume and there's an old style of printing this does work in Python 3 it also works in Python 2 you'll see it a lot but it's not the recommended way so I just wanted you to see it but not really use it and that is to print out this % s % s and then use a percentage of the middle and it corresponds to the two variables so when you run that it does work but it's not the preferred way and there's a lot more powerful things you can do when you use this dot format function okay so this is the way we should be printing things print you open the quotes and you close them and somewhere in between where you want the variables to show up you use these double brackets double bracket double bracket okay so we know that our 1 course wants a pop and bar to a tart so it should say ding comma my pop was tarted I know I know okay so there we go boom work just fine but here are some cool things we can do now also we can also put the order of the variables in in any order that we want in the brackets so this one will go first then second by default but look now we can say make this the zeroeth because python often use a 0 for the number 1 slot and then number one meaning number two for this one so when we run this you'll see we get a reversed order ding my tart was popped you know it's very cool and in this one we're doing the same thing but now we're adding a duplicate okay so now we have 0 twice which no problem we can do that too so you can see how powerful it is to use this dot format with an open closed parenthesis because they're variables that are being put in passed in as parameters okay now let's look at some slicing and you know might not be an intuitive word but what we mean is we're taking the sentence up imagine I like a carrot and we're slicing it into little pieces and each one of those pieces is the different characters the K the end the ode the W so we're gonna make a new variable here called knowledge and now let's talk about some of the functions we have like we have Len which comes up a lot and it's actually gonna count how many characters there are inside so count them for me and then take a guess at what this cell is gonna I've returned 55 whoa that's a lot but it's also correct now there's a question does it use the space as a character or not holy crap I don't know the answer to this I just asked it and thought it up right now 1 2 3 4 yeah 55 that includes the spaces because spaces are gonna be a Unicode character too so now we both know but let's look at slicing so we're gonna take knowledge and we're gonna put this different type of bracket notice the square bracket that we're using not the normal parameter parentheses K this is a different thing this is slicing and when we say 7 what we're saying is go in 7 letters 0 1 2 3 4 5 6 7 we are going to be returning a G okay now we can also do a slice that's a bigger chunk so instead of like little thin carrot slices this is just like cutting the carrot into thirds or something with larger width in between so in this case we're going from character number 7 to character number 20 so what do you think should happen when we run this cell okay we get GE is only a you know this is the slice from seven to 20 through here now what about if we use zero and then comma and then negative one whoa what's a negative Dylan we have you talked about a negative whereas echo well I kind of give it away with my mouse but take a guess and you can see it's an e so it looped around okay we have e because it's at the very end and this is another really cool powerful thing so knows you have these long lists and you know long sentences and things like that and you're gonna want to start from the other end start from the bottom and work your way up instead of working your way down now we also have in between first and last letters so we can do one negative one and it's a little confusing cuz one's a looped around and ones on the front end so what do you think we're gonna get Oh everything in between minus those two on the side so you know it kind of you know went around and just took out the ends right it chopped the ends off the two sides and then I want to also show you that we can use some of our membership conditionals that you're gonna learn in the next section but it's really cool to just ask you know is the letter e inside of the word knowledge because behind the scenes they're kind of working like lists so we can do that too true he is in knowledge you can see it right there next to the L and behind the D okay now let's talk about concatenation so one of the things that we want to do at certain points is take these slices and put them back together right like two strings can be merged together so here's a couple variables I've created popsicle knuckleball and then a sequence which is all made of strings three strings Alvin Simon and Theodore with little dashes around them so let's go ahead and make those variables and then let's do this it's a concatenation pop string plus knuckle string is equal to this new variable X what do you think is going to happen when we print X it's squish them all together right popsicle knuckleball right now what if we do multiplication what do you think we're gonna get when we take something that's a string and we multiply it by five five times easy cool huh it's just popsicle popsicle popsicle everywhere popsicle popsicle now what if we concatenate a sequence K so we have our Alvin Simon Theodore sequence above what if we use pop string which has already got some kind of a variable in it our text and then we do dot join we bring that method in and we pass in an entire sequence so this is kind of confusing right like we actually have pop string which is its own variable and we're passing in this sequence so what do you think we're gonna get Alvin popsicle Simon popsicle Theodore whoa blow my mind but there's some very cool things like join that we can use to put these together and that's a process called concatenation now let's move on to our next topic which is escapee basically saying that there are certain patterns that if you put them inside of a string can break out of the string but most importantly it's this one character that's used most often it's a backslash okay so remember forward slash and backslash this is the one that has the top leaning to the left to the Leaning Tower of Pisa of falling to the left and when you use this inbetween which should be just a normal string it's gonna break out the next character and the next character in this case happens to be N and n is gonna create a new line when it's broken out so in this sense take a guess what you're gonna see that way you expected it takes high it adds the space there's actually a space right here that's a character that came in and then it sees this and says okay the next character is gonna make me do something different not something that normally would be inside of a string oh it's order n create a new line and then ho so we have hi ho hi ho it's off to the next cell we go and in this one we're using the letter T now T is short for a tab and some of these things you're just gonna have to memorize but as long as you understand the concept of escaping and you're trying to do something with text you can probably go look up some of the other characters that you can escape and depending on your use case but as long as there there you can do really cool things like combine it with multiplication so just like before what do you think we're gonna get when we multiply an escape character and then n with five yeah five new lines check down here line line line line now let's talk about raw input which is something that is super cool it's the ability to simply ask the user for information text numbers integers and then use it in the same way as we've been using everything else so here's an example if you wrap this string what's your name in a function that starts with input what do you think is gonna happen let's find out what's your name and then this cool text box look I can name myself whatever I want Oh's oh okay well what happened now well we have a variable here that we set this to so let's check what's in it oh is oh cool huh so it just prompts the user to input things and then if you're working with websites and things like that you can actually style it so it happens in different ways but at the core of it this is pythons way for you to just type input and one of the things we can do is actually cast before dropping it into our variable so you can see how that could be sort of convenient if we were to take an input and it was some kind of a number we might want to cast it into a float because we'd want to do a calculation with it I mean I doing fingernails probably three times a month but yeah once a month okay so the number one goes in and because of the dot zero we already know that it's a float it couldn't have done that in any other way but I suppose just to show you how the proper way to do it is because you don't always have that hint would be to wrap it up like that and you'd see that it's a float okay cool so what if we want to take how many times each month do you cut your fingernails and turn that one into a float and then we want to use some concatenation maybe we want to add them actually so this is a that's an interesting mistake I just made we could probably learn from that plus we'll concatenate it if these two are both strings but we have trained changed them both in two floats so the plus is just going to do what plus does always in math and add the two together okay so the next question is how many times each month do you cut your fingernails well I cut them three times on average precisely so we run that now we can actually add the two together and put them in a new variable and we can have a total of four times a month on average I'm cutting either some kind of my nails I guess is the way to interpret that now let's talk about this repr function because I find that it's a great way to see how we interact with computers versus how a computer X with the computers okay it's like catching it in its own little environment how do you talk to yourself when I'm not around you know but if we import this module date time which you don't need to know we can make a couple of these variables based on date and time so let's just print these out know using a normal print so what we're saying is take the information that came turn it into a string cast it and then print it out so you can see the format the 2016 1204 and then the hour minute second and like super decimal second okay now I want to take the same variables but now instead of printing them out with string let's print them out with the Reaper function and see the difference now in this case it looks quite a bit different look it says date time dot date which is similar to how it's up here date time date and then dot today this function this method right here is now replaced and just to remind you guys it is a function but it's also a method because we're accessing it through the dot syntax but you can see it's a little bit different this is more of how the computer sees it and views it and thinks about where the information came from and this is more about how humans would want to read it so sometimes it can be great to run different things that you're trying to learn about through the Reaper function just to see and of a more structured way of where they're coming from now let's talk about encoding is I want to build on that utf8 statement we made in the new mnemonics so ASCII is a different set of characters this is the one that you could have found in some places in Python 2 or python 1 and what you find in older computers that's now been totally removed from python 3 but it's the characters that kind of I'm most familiar with they come on the American keyboard but look at this if we actually make a variable and we put a string in it with ASCII characters in Python 2 we could have asked is this instance Unicode like we could have said is it a skier is a Unicode we could have checked for it but it's we're gonna get a warning now because everything is Unicode and that threw me off because it's saying like Unicode it's not defined it's just because it's baked so deeply into Python 3 that we don't need to check it all the time and that means we can just write variables like this strings that have whatever that is that blah I think or law or something and then you know cool Japanese characters like that they can just be written right in and one of the cool things about this is that with Python 3 we can actually just use unicode we can use Greek letters that come with Unicode so we can use the PI symbol if we want to just set math dot pi to you know the PI we can use the Greek letter epsilon the capital one if we want to use something for like some and it makes it very cool we can use all these like copyright icons and things like that inside of our code to you know explain things better to other people who are reading it and to remind ourselves and you know just be badass programmers really okay and then I want to talk to you about this function it's called Ord and what it's doing is it's linking a specific unicode number that we don't see but is actually behind every character so in an ASCII character like a there's gonna be a specific number in unicode utf8 that is going to correspond to the capital letter a so we'll have another one for the capital b and you can see that they're separate but then when you actually go to lowercase they have their own numbers too so this is I was keeping track behind the scenes of all these characters in fact I think I could probably even take like this Greek epsilon and throw it in there and then it's gonna have its own number and it's always gonna be that same number so that's gonna correspond with what we see on our end ok so just one other use case for this I want to show you is that we can use a for loop and I know you haven't seen this before we'll talk about it later but just kind of observe it and get familiar with it on a sort of superficial level to actually run through every single character in a string and show us what the character is that corresponds to the utf8 so you know that capital i' is always going to be the number 73 behind the scenes okay now let's talk about some methods that we can use with strings because this is really the fun stuff is okay so finally let's talk methods and there's way too many to cover everything but I just want to get you excited about some of the big groupings and the stuff that I use a lot so let's start with a new variable that's a long string our best friend string and now we can actually use the method dot capitalize to make sure it starts with a capital in this case it already does so you don't say anything but that a at the beginning right there is because we ran it through this method and we can go further and use some other cool ones like upper we can make everything lowercase we can make everything title case so that each letter has a capital at the beginning of it and we even can do checks so you can take a string variable and you can say dot is upper and we're asking give me a true or false response if it is all upper or if it's not and you can do that to then trigger the change so you can say hey bring me a bunch of text if it's not already in title case then make it in title case or something along those lines there's also some really cool ones that we can use with strip and this is gonna remove white spaces so if we have an input function like a raw function that we looked at before and somebody types in some stuff with a bunch of spaces at the beginning or end this is gonna strip those clean we also can remove the leading white spaces or just the trailing white spaces and hard to see these but they would be spaces that would be over here over here we can also do some cool stuff with alignment for example this one dot Center is going to bring us a method that allows us to put 50 characters before and after it'll take that number and split it between the two and put them on both sides to help Center your text and there's some other cool alignment ones too we don't have time for but I want to get defined so if we take this string here and we use dot find clover it's actually gonna parse through the entire thing and find the word clover and then it's going to count how many spaces it went before finding it so we know that it's 34 in there's also this one that counts characters we're looking for how many times the letter A and lowercase shows up so like one two three four like that it will count it and return that there's four in the entire string and the max and min which you might think of usually only in the terms of numbers are also in alphabetical order so it can say you know is there a queue is there a Z what's the maximum height flow letter inside of this string and we can see that it's a why and we can do the same with men I'm sure it'll find an a oh actually a nothing yep so even before a is a space so it's really cool there's a lot of neat things you can do with Find and Replace you can actually go in and say take the word clover right which this can be a really useful function and we know where that is right here and then we say replace it with snickerdoodle then boom the best friend is like a fourleaf snickerdoodle that is very cool and it can do some of the same things that you can do a slice but way simpler more automated especially with big corpuses of text so let's make our friend variable and then let's just run dot split method and see what happens oh how cool is that it broke out our entire sentence into individual words and it does this by a need Eliminator we want so we didn't put in an argument we passed in nothing so it just did a default which is to look for these spaces but check this out we can also add in the string with a comma in between it and it's going to look for these and split at the commas so see now we have a list that has three different items in it and it's the ones between the commas and we could do that with all sorts of stuff you can make maybe Ellie is where you want on yours to be or I don't know some kind of crazy array that makes sense to you and the last one I want to talk about is split lines this is just like split but what it's going to do is automatically do it on the character return so if you had a large corpus of text that had paragraphs this would break it in each paragraph into their own item on a list very cool stuff lots of neat methods I encourage you to explore oh and remember what about this and in fact before we end I will give you a reminder of something else we learned dot tab is going to let you look through all of these cool things so I encourage you now to just go through and play with them all see what else you can do with the text subscribe to the mnemonic Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations we will be learning the how of programming by reviewing code examples that demonstrate how lists work including some of the various sub topics like how to view a list how to insert new items into a list how to find certain items inside of a list how to retrieve the specific item that we find how to remove items combine sort all of the stuffs that we might want to do with lists then we're gonna talk about range and range is a really powerful way to make a list it's a way that we can specify huge lists without having to go in there and manually type everything and then finally we're gonna talk about matrices which are really just lists inside of lists and different things that we can do to break them up and flatten them down and look at them in different dimensions so let's get ready to talk about the allimportant Python list definitely one of the most powerful types in Python comes up all the time as a programmer and you can see why they're so powerful they can hold integers floats strings they can hold lists of lists and they all have a few characteristics so we start with a variable we use an assignment operator this equal sign and then we open a bracket and close a bracket the square brackets and inside we put all sorts of different elements which can be different types they can be strings integers floats etc they can be all sorts of different things and elements are just broken up by these commas so you can see how easy it is to make a list and then we can even put lists inside of lists and they will be broken up in the exact same way with the comma in between let's run this cell we now have three lists our scores tax code and mixed and now let's look at how we view it so if you're using Jupiter of course we have individually running cells so we can just write scores which is going to return it and of course we're using an IDE or some kind of other interactive way to work with Python you could use the print statement and it would do the same thing and here is something I haven't talked about yet but we have an entire video devoted to for loops so don't worry about the syntax too much but one way to think about this is that this is a special way to address some kind of logic on each individual element before passing on to the next one so it would be like you know multiply 3 times 3 and then multiply 1 times 3 and then multiply 4 times 3 or whatever it is in this case we're just printing that we can break them into their own lines and now inserting is gonna be one of the most common use cases you're gonna maybe create a list and you're gonna wanna you know scrape the internet and like tack on a whole bunch of things to a list or you know whatever reason a database of some kind and you're gonna want to add things to and any variable that is of the type list has a method called insert an insert requires two arguments the first one is the position that you want to insert the element in and the second one is the element itself I've got a question for you here is our tax code list you can see that it's BAM Fuzzle caddywhompus gargle ooh and Billingsgate we want to add a loophole to this tax code and we have specified the number to what position is it going to end up in thank you yes is that what you thought the third position so this is a reminder that python uses zero indexing so this is the zero number this is the one and this is the two which makes sense when you think about it from a computer's point of view but it's not necessarily intuitive to how we would normally count normally you would say this is probably the third item in a list but it's not how Python works so it's just something to remember now another really powerful way to add an item to a list is to use the append method and this is really powerful because we don't need to know how long the list is instead we can just say append and no matter how long the list is it's gonna put this on the end when we run this cell you can see that we now have added our loophole our was loophole so now we added our was loophole to the end so now BAM Fuzzle cattywampus loophole gargola Billingsgate and Oise loophole are all inside of the tax code so how are we gonna find one of these list items because these lists you could imagine become thousands or maybe even millions of elements long how can we find something in an efficient way well Python gives us some really powerful methods to do that also so here we are making a new variable called letters and we're creating a list that holds the string these are single character strings PQRS Oh and you what we can do is actually say here's the variable of type string dot for accessing our method use the method index and check to see if the list is holding the string of character R so when I run this cell what do you think is gonna happen cuz you'll notice that there is an R there is a P but there is not a Z okay well that's what we expected so it's actually a little more powerful okay so that's what we expected right we have R which is in the second position 0 1 2 we have P which is in the zeroeth position the very first one and then we have a Z which is not in the list at all so it throws a value error not in the list you can imagine how powerful that would be if you want to look through you know a database of names and say is this name in there another thing that we might want to find out is how long is our list so we can simply wrap that in le n for length when we put our variable of type list in there it will return 6 for the 6 items 0 1 2 3 4 5 or 1 2 3 4 5 6 so here you can see that it actually does return how many individual elements there are and we don't need to think about it in the terms of 0 to 6 we just think of it as 6 you know a little tricky there but just something to keep in mind how Python indexes sort of on 0 but there's still only 6 elements in it you know but I feel like that's one of those things that like just trips up everybody even good programmers are just like why didn't that come yeah oh yeah that's right zero indexing you know so retrieving something out of a list is also very important ok here's a reminder of our tax code Bam Fuzzle caddywhompus loophole gargle ooh Billingsgate was loophole so if we want to retrieve an item there is a very special syntax and they call this slicing whenever you see these two brackets surrounding integers we're slicing a list up you know a couple things to note here is that this is very different from like space equals that that's creating a list with the integer 0 in it this is assuming the list already exists and it's this variable tax code and we want the zeroeth element we want Bam Fuzzle to be returned let me run this cell and show you what I mean so you can see it's actually saying bam Fuzzle and what if we put in one it's gonna bring in caddywhompus or two so this is a way to pull out the third element or the second element from our list and we can also slice out groups very commonly you're gonna want a range of things so here we want one through three now remember our zero indexing makes this a little confusing why don't you take a guess we have 0 1 2 & 3 and we're specifying give me everything between 1 & 3 so you know if you haven't seen this before you might think well it could bring all of these 3 it might bring just these 2 or just these 2 but let's run it and see so we get just caddywhompus & loophole so by slicing the index 1 through 3 we're ignoring 0 makes sense we're starting with 1 then we're getting to and then surprisingly we're not getting 3 so that's just a reminder that the third element is kind of the one that you ignore it's gonna capture the one right before it it's not gonna include this but it is gonna include that so I always think of it like this ones included this one's not included now another interesting thing about slicing is we have the ability to use negatives so what do you think it negative 3 is gonna do you guess and then we'll talk about it dargol ooh okay so it brought us this one let's look at why negative 3 goes backwards it loops around the list we can always assume that this first element is 0 and then we can count up 1 2 3 or in the case of a negative slice we actually jump and loop all the way around to woz loophole so negative 1 negative 2 and negative 3 okay so the way to think about that is actually let's say 0 1 2 3 let's not use 3 because that is actually the same either way but something like Billingsgate you can think 0 loop around negative 1 negative 2 so negatives are another really powerful way to jump to the end of a list now let's look at how we can save a slice just reminder here's what our tax code looks like slicing is very powerful in its shorthand notation where we use those brackets with the colon or an individual number but it's also on its own function and its own function comes with more parameters in fact it has the ability to step which is an interesting property so what we can say is I want to get every other element every odd element or every third element so here there's a function called slice now if we look at some of the parameters using our nifty shifttab in jupiter we can see that the first argument is for where the slicing starts the second one is for where it stops this is very similar to the colon but then we also have this thing called step meaning take every second item so I will save this into a variable and then we will pass that variable into here now remember that's the same as taking this and doing that you have something specific you want and then use it as a variable later but it can be used either way depending on your purpose so let's go ahead and make that slice now we can see slice 0 none to just what we specify it now we're gonna pass that into our tax code and we get out every other element just like we asked for so it starts with the zeroth element and then it doesn't take one but then it does take two and then it doesn't take three and it does take four very cool pattern now if we do one that's gonna be the same as just a range that's gonna give us everything or if we do three it's gonna jump all the way to the third one and just give us Bam Fuzzle and gargle ooh and if we add another element there it would bring that back too so very cool way to retrieve items now how about removing an item from a list because this is another very common thing well it's as easy as using the remove method tax code remove Bam Fuzzle course we won't get rid of that loophole but now Bam Fuzzle is gone so you can see right here it that was the first element in our list and when Bam Fuzzle caddywhompus Gargoyle ooh and billions gate and now it's just caddywhompus gargle ooh and Billingsgate just what we wanted now let's look at some fun ways to combine lists together so there's a lot of powerful things we can do here I won't cover them all but for example what if we have a list here of strings it's all different strings no integers in here code mint or Python and developer now if we take this variable and we pass it into an empty variable of type string and we use the join method it can actually combine these together so if I went I don't know feels like it went kind of fast there but basically we have we have our list okay it's all made of strings and then we're saying just forget that for a second and then what now we're saying over here make a new variable and it's got a string inside of it this could be words but it's not it's just empty it's just one space character so the string is of one character and it's the space character so you don't really see anything but just know it's a string of one space and then we're saying hey you're of type string and you have a special method called joined so when you pass in a list the join is going to combine all of these together they're not separated any more this is all one word this is like a paragraph or a title whereas these are individual elements inside of a list now lists can also hold a different list so an example of that would be here we have a list called things and it's holding strings an int is holding a string an integer and then a whole nother list and this list has two more integers and it also has another integer that's coming in through this variable numbers here and that has a float now here's the syntax that you don't need to know yet we're gonna cover this in later videos but one powerful thing I just wanted to show you that we can do with lists is we can break a string apart into individual characters and then put those individual characters back into a list so don't worry too much about this it's called the list comprehension that we're gonna talk about later one of the cool things you can do is take a string 1 space 2 space 3 and break it into actual integer so we've cast it into an integer here and these are four different integer numbers that we could do math on and they started out as just numbers that were inside of a string so maybe you can imagine some situation where you're you know parsing some text and you're pulling out numbers and then doing math on those numbers kind of cool as long as we're talking about these lists inside of lists we're basically making groups right so let's look at a couple different ways that we can do some more powerful grouping we have a list here that's just full of a bunch of integers a bunch of random numbers and one of the things we can do is create groups of either 3 or 2 or 4 or whatever we want now don't worry too much by the syntax this is kind of later in the course kind of stuff but I want to show you that we can actually make an awesome group of four or we can make a group of two so we've taken all of these elements up here and said make those two a group make those two make those two a group and this group is technically called a tuple but we'll learn about that in the next video so it's really cool to be able to take lists and break them up like that and another neat thing that we can do is actually count them so this really cool method called max we can pass in a list and then we can look at a key called X dot count so we can find out that the number one is the most common you can see that number one occurs three times and all of the other ones only occur once so pretty neat stuff we can do is just the tip of the iceberg when it comes to combining let's talk about sorting we'll start with a couple lists here these numbers are not in order and these words are not in alphabetical order so just note that to start with and then we can actually just run them through a function called sorted which is gonna look for either the smallest to largest number or alphabetical setting if we run scores through this function we see that we're now in order one two three point three three point three etc and another syntax for that is using a dot sort method and then passing nothing into the parameters so starting with tax code our list we can actually use that syntax to put these in alphabetical order Billingsgate bumfuzzled caddywhompus and gargle ooh and then finally I just want to talk about one way we could reverse a list we could sort it in backwards order and that would be to use this negative one saying sort of go backwards with a couple colons before it and by using this we can actually sort backwards so gargle ooh caddywhompus bam Fuzzle and billing gates will be in the reverse order now we have an idea of sorting so so we've covered a lot this is an area where you're gonna want to keep playing with lists until you get more familiar with them but now let's talk about ranges which are a really powerful way to make lists next up let's talk about a special function called range and it has a lot to do with the way lists work there is a function here and it's called range and it takes a minimum of one parameter so if you give it one argument it is going to create something of type range which is different than type list but in this case we're gonna want to be using him in the sense of a list so instead of leaving it at range 6 we're actually going to always be wrapping it in this list here we can get range to return a list of six elements zero one two three four and five six elements here and imagine if we wanted this to be a million long or a hundred thousand long now the way to think of range with one argument is that this is the stop argument it's gonna start at zero and it's gonna go until it's got six elements and then it's gonna stop but we can also specify in between some kind of a range so we can have a start element and a stop element and in this case going from three to six just like with list slicing this is like list creation but it's gonna go from three four and five creating three elements and just like the list slicing it's gonna take the start argument and actually make that the number and then it's gonna stop one before the second now if we look here we use our ship tab to learn a little bit more and we'll see that range has another argument start stop and step this is very similar to how we were using the slice function where we were stepping every other or every third and we can do the same thing so here we're gonna create a list it goes from the elements two through ten so there's gonna be eight elements total and it's gonna be using every other one which gives us which gives us that's right two four six eight which range do we appreciate this range this range you tell my cheerleader days didn't go too well now we can also go backwards so we can have list range and we can have 0 through negative ten and remember this is gonna go around a loop so what do you think is gonna happen here where we have a negative 10 and a negative two because before we talked about negatives looping back around in a list but we haven't even created a list to loop yet so what do you think it's gonna do well let's find out interesting so negative two negative four negative six negative eight who do we appreciate yeah it doesn't really work the same but it is stepping backwards negative twos and it is giving us a total of negative ten so you can see it works about the same way now interestingly we can put positive steps and it's not going to be able to go anywhere because it's gonna only have negative numbers for its list so we have to have negatives for here and negatives for here if we're looking to step through a negative range that's all range in nutshell very powerful very cool very fun way to make lists they I want to touch on the power of lists when they're holding integers and floats and numbers we can work with and thinking of them as multiple dimensional arrays so we might have something like this a matrix which is really a list of lists and it has nothing but numbers in it it's got two elements this element and this element and each of those elements is a list of three items in themselves but another way to think about it would be in a multidimensional sense so we could actually think of a Y and an xaxis and think of it as a 2d array where we have these numbers stacked on top of each other just like a matrix and one of the things we can do when we start thinking about lists in this way is we can do things like rotate so here if we take the matrix and we'll use this function that we haven't talked a lot about called zip which combines two different elements together in a special way and we reverse them by using the negative side of the matrix reverse that we talked about earlier so we can actually output this which is a different arrangement of the matrix that we started with where four and one are grouped together five and two are grouped together in six and three but then if we break these out also based on the comma the same way we did up here you'll notice that it creates a different shape four five six one two three one two three four five six it looks like what we've done is just rotated this around and we have a different shape now and that's exactly what we did we rotated a matrix so imagine like in a video game when you want to move a character around or you want a character to like turn to the right this is essentially the concept pretty neat stuff really when you start thinking about it another thing we might want to do is flatten them out so let's look at some examples of that because there's a bunch of different ways to think about this so let's start with a multidimensional array we have one two three four five six on separate things so another way we could actually write this out is using commas and spaces and this is totally valid we can run this cell in the exact same way we could have when it was all flattened out anytime there is a comma feel free to drop it down to a new line and Python will know to keep these all oriented correctly and one of the things we can do is run this sum function over it and for the second parameter put a blank list and look what we get we get it all flattened out one two three four five six all in one way now there's a couple more comp created ways to do it I just wanted to show you we haven't covered these things by using list comprehension we can do it there's also something called itertools that can do it the same thing so a bunch of different ways this is the simplest so thanks for watching and let's get our right brain ready for another lesson coming up next subscribe to the mnemonic Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations welcome in today's lesson we are going to be learning the how of programming by reviewing code examples that demonstrate tuples what they do what makes them different than lists and what it means to be immutable and then we're gonna talk about a different type called sets and how sets are a lot like a Venn diagram they have the ability to calculate Union intersection or difference or even symmetric difference so get ready cuz these are a couple fun types to play with let's get started so let's start talking about tuples so tuples are very similar to lists the main way you can tell the difference is because of the brackets on the outside the circular brackets mean that it's a tuple the square brackets mean that it's a list and the difference is being that the tuple is unordered and immutable meaning it can't be changed and we'll talk about that more in a second but let's start by just creating a list in creating a tuple so we can compare the difference so when we run these first three cells you'll see that even when they're printed to the console they have the different bookends so that's one of the easiest ways to tell what we're dealing with also of course we could simply ask by using one of our favorite functions type and noting that it's a tuple also okay now let's look at some of the methods that are gonna come with tuples so let's use our trusty dot tab function here that Jupiter allows us to do to see what methods a type has so by hitting period and then hitting tab I can see that a tuple has two methods count and index so here's a question before we look at those what do you think is gonna happen when we do a dot tab on my list you think a list is gonna have more or less methods whoa tons more right okay so the reason why there's so many more is because of an important property of tuples and that is that they are immutable we can't have an immutable tuple that's pointing to a mutable element so there can be some changes but on the highest level the tuple is a secure unchangeable thing now let's make a couple two poles let's make some DC villains because they're immutable you wouldn't want to get rid of them and then an integer one for pi so one cool thing is that we can cast these into lists we want to maybe edit these but they're immutable so what we do is we can take pi we wrap it in a list function and then we end up with a list we can actually wrap this list inside of a tuple so new list tuple and it's gonna become a tuple again so you can see now it's locked into place here and finally I just want to show you that just like the list we can use the for loops which once again we haven't talked too much about yet but we can use logic on individual elements in a sequential order one of the easiest being simply printing them out so 1 2 3 4 5 you know list you know tuples time to talk sets sets are very powerful and they are different from lists and tuples because they don't have duplicates and they're not stored in order and they are mutable so I think of them kind of as Venn diagrams like the same way you could imagine a Venn diagram using unions or intersections or differences that's usually the way that we're gonna work with sets so we'll show some examples of that after we get the syntax down the main syntax is to use these curly brackets on both sides so you're probably noticing the pattern here with the square brackets for lists and the parentheses for tuples and now the curly braces actually the curly braces are used for both dictionaries and for sets but the difference is a set only has one item in between the commas main thing to notice is that it has the curly braces here so let's make a set there we go we've got Dylan Elmer Gere Mochan and Naomi so what type is this well it's a set like we said it would be now there's also a function for creating sets and we can pass in a set or we can pass in a list but of course we can't pass in the elements in the same way we would a list it only takes one argument the argument needs to be made up of several elements so just for an example we can see the function create sets in both of these situations ok so now let's talk about the duplicates because that's one of the big things about sets is that in this list we have the number 2 2 2 2 and that's just fine with a list we can have a whole bunch of duplicate elements it's gonna remember them in order in a sequence but a set does not it can only have the element one time so we're gonna make this list a set and see what happens we're making my list with the duplicates and then we're passing that into the set function to make it a set so when we look down here at the length of my list when we check the length of this original one and we check the length of my set you're gonna notice that there are different sizes because it's eliminated all of the duplicates in fact if we actually want to print out my set here you can see that it's now 1 2 3 4 5 instead of 1 2 2 2 2 3 4 5 and now I want to talk about what we would do if we had a list of strings so here we have a list of strings that we're turning into a set now remember the dot split method is going to take each word and separate it by the space and make it a list of strings instead of one long string so we can think of this as inputting a string for my a separate string for peanut another string for is and then turning that into a list which is then turned into a set when we do that I want to show that it does consider the difference between capitals separate and unique Elmer my and is my is coming in as a separate character and this makes sense the Unicode behind the capital m and the lowercase M are separate so it sees these as totally different elements so even though it might read the same we have to remember that something like a capital might be seen as different and unique to the computer when it makes the sets enough with the Venn diagrams stuff now let's talk unions so to take the union of two sets is as simple as calling one of its methods now we're gonna need two different sets to work with so let's take the first one again my peanut is named Elmer and then let's make another set which is just names but one of the names happens to be Elmer so you'll see Elmer here and you'll Aylmer there now we know that sets can't have duplicates and when a union is checked its going to see if there is any duplicates between the two different sets the way this would work is we can pick either one will start with names and then we do dot Union to access the method and then we pass in the other set and when we do this we will get a return that has every single unique element in either set so we're combining the two now something like Elmer that's in twice is still only gonna show up one time but anything that's in either of the sets that's unique is gonna make it into this super master list so you might want to use something like Union if you're combining two databases together and you say okay like you've got a big list of names and I've got to be listed names and we know some of them are duplicates so let's push them together using the Union and it will create a list of everything in both lists but not duplicates of an e so we don't end up with two of one name and just to show you we can actually do it the exact opposite way too so peanut because it's also a set is going to have a method Union and then we can pass names into that one and either way we do it we're gonna end up with the same list let's talk intersection so very similar to how unions worked we have methods that allow us to do this and then we simply do names dot intersection access the method and pass in peanut you can remember from high school math do you guys remember what the intersection is gonna do is opposed to the difference only elmer i don't know if you guys expected that you did kudos good good job paying attention in high school but the reason we got that is because the intersection is the only place in both lists where the same element shows up so we have elmer here and we have elmer and you know once again just remembering that the reason why these look similar is because we're using this dot split to break this up if we do the reverse do you think we're gonna get the same thing yep either way you do an intersection it's only gonna bring you the things that overlap specifically so once again if you have a big database and maybe you want to say gosh I wonder what in our database is overlapping like who signed up for your website and has also signed up for mine you could compare email lists or something like that so intersections are powerful now let's talk difference this is a really powerful way to think about sets so we'll make our traditional sets again our peanut and names now what do you thinks gonna be returned when we do peanut difference for the method and then we pass in names is that what you expected cuz I remember this one tripped me up when I was even writing this it took me a second to remember what the difference actually was but just like when you're doing subtraction you have to remember that say three minus five is actually negative two you have to think of the first one is being sort of like the staple to compare the next one to it does matter the order that we put these in so names dot difference in passing and peanut is different than peanut difference passing in names so here the way to think about this is that we have peanut and it's a set with all of these elements my peanut is named and what it's gonna do is it's gonna bring in another set and it's gonna check if anything overlaps and if it does overlap it will be removed so it found Elmer in the second set that was passed in so it removed Elmer from the first set and we ended up with something that was close to my peanut is named and then there's no Elmer in here and Elmer which has been removed again is my name so you can see here we have everything that we had inside of peanut except it's now missing Elmer because that was the one word that was overlapping in the other it's kind of think through the logic you sort of know what's gonna happen here but it might not be instantly recognizable so in this one we're gonna get all of the names Elmer because Elmer was the only one that was in the peanut that's it tons of use cases for that if you're trying to say like you know remove all of these things from my database or something along those lines now let's talk about symmetric difference because this is the one that is a little bit more intuitive for me this is the one that just says subtract everything if it's in both lists so we can do names dot symmetric difference peanut or peanut dot symmetric difference names and we end up with the same result we have a list here that just removes anything that's duplicated like Elmer but it does combine everything else so we do end up with names like Guillermo and we do end up with words like peanut that are only in one or the other set and then of course just to prove that it works we'll look at it in the reverse so very cool now we know how to work with set so we can do all of these unions and intersections and differences and tuples and they're immutable states and the difference between lists and all of that so the only thing left for the basic group types is the allmighty dictionary get ready we're going key value pairs in the next lesson subscribe to the mnemonic Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations welcome in today's leftbrain lesson we are gonna be learning the amazing powers of operators in Python so we're gonna start with the traditional arithmetic operators a lot of the ones that you're already familiar with from your math class and from your math tutor and then some gotchas then we're gonna look at the comparison operators which are the Equality ones greater than less than equal then then we're gonna look at the assignment variable is a very important thing that we're actually already familiar with whether we knew it or not next we'll be looking at the identity operators to find out is or is not something what it says it is and taking that a step further afterwards we'll look at the Equality which is similar but a little bit different and you'll see why and then we're gonna talk about membership whether something is in a group or not in a group and then finally we'll look at logical operators let's start by talking about arithmetic operators so pretty basic the ones you learned in math class you'll probably know but let's just review them so blackjack is gonna be set to 21 Jackson to 5 and lottery to 0 so let's do some Q&A what is blackjack plus Jackson correct what is blackjack Jackson close mmhmm yep 16 correct what is blackjack divided by Jackson god I don't have to answer these what is Blackjacks times lottery yeah zero because anything times a lottery is zero so losing proposition ooh not defined what are you missing here Jabba black hmm and that would make sense looks like I'm in spell alright that's gonna raise it to the power so everything that uses exponentiation even if it's zero ends up being one because that's how exponentiation works makes sense okay and finally let's talk about why the square root looks so different and that's because we don't have a builtin Python operator for it I mean we do it's part of the library that comes with it the math library but we have to remember it's not quite as easy as just using one of these operators we have to actually bring in the module math and then we have to call the method sq RT and put our variable in there so we can still do it it's not impossible but just know it's a little bit of a different route and I can understand that not everybody had the greatest math teacher so you know maybe sometimes you had to learn a little bit more arithmetic from your tutor so let's go over those and just in case you need a refresher the double wack which is a kind of the urban tech dictionary version for a forward slash a whack it blackjack whackwhack Jackson is no remainder division meaning we will end up with what for did you get that so we have 21 we have five it's gonna go into twentyone four times evenly and then we're gonna have the remainder of one but we just throw that away okay so double whack division means we throw away the integer now mod losing and it's hard to get your head around but it's kind of like when you ride a bike you never forget once you see it okay so what do you think we're gonna get when we use the modulo operator on the exact same problem blackjack modulo Jackson did you guess one well maybe not but I bet now you have a sense for it right because the five is gonna go into the twentyone four times with a remainder of 1 so it's like getting the remainder only but just to sink this in a little bit more it's interesting to think about what's gonna happen so let's try it again 10 modulo 1 well we know one's gonna go into 10 10 times and nothing's gonna be left over so maybe we're gonna get a remainder of zero right nothing left but about two that goes into 10 evenly also do you think we'll get a yep what about three now we know three is only gonna go into ten three third yeah three times and we're gonna have a remainder of mmhmm okay five goes in yeah all right I can see it loot end goes into ten just one time they'll remain there maybe zero correct oh and now we're backwards so now we have the bigger number on the right so or the denominator and what do you think happens here because it can't even fit into it one time let alone have a remainder ah I just get stuck at ten interesting what if we go even higher do you think it's always ten no matter what the number is on the other side yep I was there any questions I gave away but now let's look at some gotchas cuz that's where things get tricky all right dividing any two integers will produce a float so we talked about earlier how you want to save memory by using integers when possible and if you're casting them and it's happening automatically it's called coercion so 9 divided by 3.0 an INT and a floating number is going to give you a float but if you actually have two integers and you divide them you still end up with the float so that's another important thing is you can't actually keep integers even if you're doing perfect integer math it just does this by itself so you would want to wrap this in the int function and then it could take the answer and do that for you there's also a zero division error that we need to be really careful about and you know this is definitely broken every one of your calculators in elementary school but we get the same thing and we're gonna get this kind of an error zero division error at least we know what's going on when we see err but you know even pythons not powerful enough to divide by zero' and now let's look at some comparisons three is it less than 10 we're gonna get a boolean value return to true or a false true obviously ok so here we are at the movie theater you've all seen the pricing it's terrible it's two dollar fifty if you want a small popcorn three dollars for a medium or eighteen dollars for a large set some variables and do some single comparisons is small less than large true is small greater than large false is small greater than or equal to large 150 or eighteen noop what about less than or equal to false okay so just look at the syntax there if you want to do blank or equal to use the symbol and then use the equal sign right after it here's one got your warning is it can be really easy to just do that backwards like you put the equal sign first and then use the greater than or less than operator and you will get a syntax error for that so just a little reminder there to make sure to use the greater than or equal in the order that you would say it greater than or equal to blank okay done with that let's look at multiple operators so this is kind of where it becomes powerful sort of more powerful than your regular calculator is you can just start stringing this stuff together and making it more and more complex so we can use the word and and we're gonna learn a little bit more about that later but is small less than medium and is medium less than large that is true as small as the medium and is medium less than large you tell me true is small bigger than medium and is medium less than large all right small is not bigger than medium what about small being less than medium and medium being less than or equal to medium yes small equal to medium well we haven't seen this yet but double you're gonna see this is an equality operator and the double equals is saying is it exactly equal to so remember the regular equal sign that doesn't work that's what gives us an assignment so double equals is saying is small exactly equal to medium and is medium less than large oh okay I think you get the picture now let's look at a little bit of mixed up stuff because we can do some arithmetic operators right in the middle of these comparisons so imagine small plus small plus small that's a dollar fifty times three is that gonna be once it's totaled less than the medium of three dollars and is the medium gonna be less than the large false right because this totaled up to be more than three dollars dollar fifty times three what about when we throw the parentheses around it okay so now we have small plus small and then we're going to multiply it by small then is it going to be less than medium and less than large take a second what about if we do is small less than medium or is small less than large or is a little bit different in the end so we only need one of these develop the true for the whole thing to be true and of course it's true so they go give you a little overview of the way we can use the comparison operators now probably the most powerful one that we've already used a lot next up is the assignment operator we had to learn the basics of the assignment operator early on we needed it just to work with variables the equal sign but there's a lot more to it than what we know and there's also some great shorthand notation and in fact the many things the assignment operator can do also mimic the story of my life so I thought this would be a great time to tell you that story story of my life first I was a fetus it's much weirder to say out loud than it was to write and then after nine months I was born and in fact actually I was born I was 0 because that's more pythonic after 9 months of being a fetus I was born 0 and then I had my first birthday after 12 months of being alive that's more like hell Python would do it so that's why I'm gonna do it then after 79 more years I became a grandpa so this new variable Dylan is assigned the old variable plus 79 in the old variable zero so we're gonna have a Dylan that is 79 years old but then I found an expensive lotion and it took me back into my tweens now note the difference on this line because instead of having to sign it to the old variable plus that variable we can just squish the two together in this nice notation and it's the equivalent of subtracting 65 there I am 14 years old again awkward years here I come but then after twice that amount of time the multiplication I found love at 28 identity operators are really powerful and I find them easy to understand in the terms of just simple English okay so we have is right BIP is equal to bippity bop is equal to buddy bop is BIP it's kind of saying like are these the same is BIP equal to Bop boss what about being equal to BIP true and what about if we use the is not so it's just as simple as saying is bit not equal to Bob kind of but in that turn and the syntax of is not nothing the way I said it and you get a false and a true all right well there's cool ways to mix and match this too so we can say you know is three three true what do you think by this one is three three point oh we know there are different types false okay so we know that even if they're the same number if they're not the same type it's not gonna work out what about true is true is that even valid okay I guess that's true what about true is false mmm that's like a conundrum false okay true is false I guess that would be false what false is false could that be true yep it's what false is false so it's true it's true that false is false two wrongs in this sense make a right what about false just period okay boss has remembered it didn't really need to return this you know like if we have returned false because it's actually something that returns a boolean value because it turned out false what about not false yeah Oh true okay so there you go the true is true true is false is wrong false is false that's the same false false not false true alright super super simple right they're easy to understand huh might have to wrap your head around it for a minute but that's how identity operators work let's talk quality everybody we need to be more equal in this world especially you stupid popcorn prices okay so here's what we got something interesting to pay attention to double equals now the weird thing about double equals in programming is that it's not the same as equal it's not an assignment and it's much more like what you would think of as the normal equal sign if you weren't a programmer like what you learned in school like is this equation equal to this other equation that's what we're asking but we use a double equal sign because there's also a way to write it like is not it's kind of a more sharp way to have two of them so we can combine them with the exclamation point so just kind of remember that it's gonna feel a little unintuitive to use double equals for is it equal to and the regular equal to for like become this the assignment operator but just I can show you how it works small we're asking is it equal to large and we're gonna get back a boolean response a false well if we ask is small not equal to large which we know it's not we're gonna get it true and then just a little gotcha here is you don't actually get thrown a warning if you do it backwards but it doesn't work so it can be a place where a bug in your code comes you see it's like yep worked for me but nothing really happened not in this sense in the sense we're trying to use it for this boolean response okay so just make sure you always get it the right way and it's similar to when we used the comparison operators this piece has to go in front of the equal okay and that's equality now let's talk about memberships obviously everybody wants to be a member of a coolkid group so what if 34 is not in the coolkid group how do we check well we can just say is 34 in and then we have this list here which we'll talk more about in the next video 34 35 or 36 if the answer is yes give me a true yes okay and we can also do with sentences if the word good is in this sentence this is a great example then give me a true but it's not so we get a false how about this what about if good is not in the sentence this is a great example it is not in this so we'll probably get a true they think you can see how it works 34 can also not be in a group which is false because it is in the group so it kind of give you a quick overview of how the membership operator of in or not in works and last but not least our good old Spock logical operator one of my favorites cuz it's right there you know it's just in your face it's just it's not going around the bush it's just boom true or false give me a yes or no answer you know logical operators got things to do places to go so cat equals true dog equals false cat or dog so we're saying here is true or false are either of them true yep cats true so true here we're saying cat and dog are both of them true well we know they're not we know dogs false so probably false and here we can wrap it in a little bit of an if statement something else we're gonna learn about more but this is very cool because it gives us the power to say if true then print high and if false well don't print high which is equivalent of nothing how about if not true might be get a hang of this now but you know if something is not true then it's false so nothing happens if something is not false then it's true so something happens okay so we get the print of high and just to close it out here's a little bit of a way you can imagine putting things together to create some more kind of advanced functionality let's assign a and B both to the variable v and then let's ask this question if a is equal to 5 and if b is equal to 5 then print you know we're both fives and they both are so it's been printed and we can also use it the other way we can say if a is not 5 okay which it is so that one's going to come out false or if B is equal to 5 I'm gonna change that right now and we're saying that this one's evaluating to true so either this one or this one evaluates to true this one's false this one's true then give us another print boom one of us is not 5 which is also true subscribe to our new Manik Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations okay in today's in lecture we're gonna be looking at some examples of conditionals so we're gonna look at a canonical example to start with and then we're gonna get an overview of the key words if eltz and l if and then we're gonna look at how they can stack into decision trees we'll look at some ways you can write them out in one line and then when you have more complex logic how you might want to look at nesting them and how those will evaluate and finally we're gonna sort of mix and match these conditionals with things that we've learned before okay we are back now with our trusty jupiter notebook so let's look at a concrete example of a conditional so look at this variable we have taste and it's equal to the string good and we have calories which is becoming the integer 350 now we can use these in almost an english readable sentence you know print the string eat cake if the taste is equal the double equal sign to the string good and the variable calories are less than the integer 300 else print order salad right so can Elsa eat a cookie if she walks up thinks it tastes good and has 350 calories in it nope because that's too many calories for her variable says that it has to be less than 300 so instead of printing eat cheesecake we got order salad okay so let's look at all the different key words that we have and how they might kind of bunch together so if if you remember is represented by Anna now if calories are less than 300 what do you think's gonna happen without anything else specified nothing so we executed the cell and absolutely nothing came out however if it would have if it would have hit the boolean true we would have got an outcome so that's one thing to remember is that nothing else happens by default you have to actually add this else statement which of course is represented by our mnemonic for Elsa and in this case it's not gonna validate up here as true it's gonna come out as false but then it's gonna say if that's false then do this and then of course we can put the third one together which is the elf who's sitting in between the two and if the calories are less than 300 print eat else if kind of in English you'd say if else but calories are exactly equal to 350 print just this one time else print order salad now the cookie is 350 calories so what's gonna happen correct just this time so got away with this one because it's exactly on the dot now let's look at decision trees so that was our mnemonic with our with our kind of dead tree with no leaves on it and we have a couple variables here for Elsa and Anna set to 21 and 17 now we're gonna find out what fun things Anna is old enough to do now if Anna's age is greater than or equal to 21 print she can drink and drive of course but not at the same time very very important you realize it not at the same time else if Ana's age is greater than or equal to 17 and on his age is less than or equal to 21 we can print she can drive but not drink so using that and operator we've now specified that we have to be in between seventeen and twenty one has to be inside of that bracket that range and else we can print she's not old enough to do anything fun so on a seventeen why don't you follow the logic through here and see what's gonna happen all right well let's first assign the variables to their respective ages 21 and 17 and she can drive but not drink man that's 17 for you it's a sucky time in your life alright let's talk about some simple logic and how we can kind of code these things both in one line or in sort of a more spaced out way now we get Python can handle tons of conditions but how you want to write them is important because you have to give your code other people you have to read it yourself so let's look at a couple oneline examples now to me this logics you know pretty readable print kid if Elsa's age is under 13 else print teenager so what's gonna happen also we just assigned to be in 17 she is a teenager but this one's a little more tricky so we have to if state in Senate print kid if on his age is less than 13 which we know should print else because it's a teenager but then teenager if on his age is less than 18 else adult so what do you think is gonna happen first evaluate here and then there or there and then there take a guess teenager hmm okay let's look at this in a more spaced out way so we've talked about it before but Python of course is aware of whitespace this what saves us from all those terrible brackets from other programming languages but the important thing is that they represent a sort of nesting that you can't quite see here as well now if you look at this if Anna's age is less than 18 then if this evaluates true go into the block here but if it evaluates as false just skip that whole block and go down to here and then once you're in here you're gonna then look at the age to see if it's less than 13 to print kid L it's teenager so take a guess is what this code is gonna run before I hit it a teenager again okay so the thing that's important here is that this evaluates in kind of a different order so anna's age is less than 18 is now here on the back end and you can think of this as coming first not as something that comes first in one line but is something that's inside of this thing so the thing at the end is actually the biggest because it's like i'm inside of this thing and you can see that much more clearly down here but over time as you you learn to program you'll see it kind of compressed into one line more because people are starting to save time and kind of type more advanced but at the beginning think of it like this until you've got it kind of in your head how it works now imagine this twoface has captured Batman and he happened to come in I don't know why he's you know at the bake sale or with frozen guys or whatever but here he is and he says to Elsa and the elfin on hey I've got Batman here but there's a chance he could survive because I'm gonna flip this coin and it follows this very special logic if not true print Batman dies else print Batman lives what do you guys think is going to happen when twoface flips the coin Batman lives of course he does he's Batman let's talk about why so if not true it's kind of a weird statement now let's just look at if true hate to do this to you Batman but now you're dead okay so if true is the boolean answer we would have got if Ana's age is less than 18 we would have actually got back from just this chunk of code they're either a true or a false but you can see you can actually skip the processing step and just type it right in so if true do this if false do this and then the kind of the trickiest one and you just sort of got to think about this for a second to make sure you know it if not true you know that's false why not just write false because it's wordy you should but just know if not if not true is the same as false and that's why you end up with Batman living okay last thing let's go look at a few ways we can sort of mix and match these things together so a reminder that we have the taste set to good and the calories to 350 now what's gonna happen here print eat if taste is good and calories are less than 300 else order a salad calories are 350 order salad right all right now how about this what if we what if Elsa says hey you know I know there's 350 calories in there but I'm gonna exercise right after this and that that's gonna burn 200 so now let me see if I can eat this piece of cheesecake and you can see that we're actually doing the math here it's in the parentheses so it should be executing first and then it's gonna go and do the rest of this statement so what do you think we're gonna get yeah she gets to eat the Cheesecake even though it's over calories because she burns some off all right and now finally I want to just talk about what we do when with the operator for memberships is added so now the taste isn't good anymore the taste is awesome but the calories have dropped so it should be edible what's gonna happen here print eat if the taste is in the list with items awesome delightful and delicious and the calories are less than 300 eltz order salad awesome is it in the list yes it is nice so awesome is right there but if it was good that would be no good because then you would have to order salad thanks for watching another video I will see you next time remember be smart be creative and be syntactically observant subscribe to our no Manik Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations today's leftbrain lesson on Lupe's I mean you know Lupe's sorry that was that was we're gonna start with learning about for loops probably the most common type of loops and then we'll look at a cool thing called a numerate which will use all the time to keep that stuff in order and then we're gonna look over what kind of types inside a Python we can even loop over cuz at first you don't really know strings range list dicks who knows and then we're gonna look at starting and stopping within loops so sometimes you want to break out of a loop something changes you're done with it how do you trigger those kind of things then we're gonna look at a while loop very similar to a for loop but it's gonna work on a different type of conditional and then we're gonna look at nesting so can we have loops inside of loops it's very assembly we call Inception a kind of loop inception and then we're gonna look at a really fun thing yeah this is so fun I'm just gonna show you now we can use a loop to boom make a status bar it's gonna get you know see how far through the process of looping we are which I just think is the coolest thing ever and we can do that by only importing one module so stay with me you're not gonna want to miss this episode of looping the lesson so what do you thinks gonna happen when we take this variable food that's a list and we put it in the syntax for and we just make this word up it doesn't always have to be item it can be the letter I sometimes you'll see it as then like you know who this will be like foods with an S and then this one will be like food without an S something like that first thing we have to run this whole thing again but why not let's just do it foods food oh there goes that's what you get you get pizza pasta salad not you list it out so what we're saying here is for food in foods print whatever this thing is okay and it's a great way to just name things in a way that you understand and to understand that this as long as it's a list or a type that can be looped over that that's all we have to do so what do you think is gonna happen when we add in one more thing called enumerate we're gonna wrap this function around our foods oh man am I gonna have to fix all of these okay around foods what you expected very powerful very important function that we can wrap something that can be looped in is called enumerate and this allows us to create both an index and an item and we can print out the index meaning how many times the loop itself has happened and the item being the place inside of the loop the list or the items that we've passed into it excited about for loops like you know you're thinking about all the cool stuff you could loop over and you're probably thinking but what stuff can I loop over who can tell me that well I can tell you that let's look at different things that are commonly looped over for instance strings might not have thought up but check this out the string hula hoop can just be passed into that same syntax for item in and then the name of the string and we can print out the item hula hoop and it's gonna create something or each character is its own item cuz we talked about it before strings are kind of like lists and behind the scenes now what about this remember the range way have you seen range you haven't seen range it so check this out for I in range of 20 so what we're saying is create a list of 20 depends on how deep you went into the concept of types if you saw a range or not but so you know they're basically just like a list I think 1 through 20 of a list and boom there it is you do cool stuff with it okay so what about jumping over a gap okay so don't worry if you haven't seen this thing yet but this is another range which is a list but it's gonna skip every two so actually the reason I like this in particular is that it goes 2 4 6 8 you know 2 4 6 8 pretty cool huh so we know we can loop over strings and ranges and we actually already know we can do lists but just to show you again to keep it in context with everything else we can make a list our bucket list in this case and then we can just print out the things that we still need to do before we die what about dictionaries these are where it starts to get really powerful and a little complicated so stay with me here we created this dictionary called colors and it's got two items dictionary a key and a value as we talked about before and we can loop over it in the same way and the first item that we do is going to always be the key if we only put one kind of argument in between the four and the in then we will get the keys the first part of the dictionary we can also get the values right by putting K comma V in colors and then we use this dot items method at the end okay so a few things to remember here is it doesn't matter what letters were using here like this is not gonna work okay I mean it's it's gonna work in the sense that it's gonna print out both it's not gonna print out just the key and if you're wondering why it didn't just print out the key this time it's because we're using this items we did that we would get just the key all right hopefully that is clear and now you know that we can use dix lists ranges and strings in loops another way to construct a loop is called a while loop and these can be useful in the right situation so it works like this we start with the variable in this case we're gonna make a bunny hop and we're gonna say that we wanted to hop three times and we construct the loop in a way that instead of using four we use well and then while while while hops is greater than or equal to zero then we're gonna print hops and then after we've printed it we're gonna decrement it by one that way it eventually comes to an end so we get three to one hops do the same thing with something like temperature we're gonna say well the temperature is greater than 112 then print the temperature and then decrement it and notice this time we're using the shorthand and we can say oh the T is now cool enough to drink it wasn't when it was 115 but it is now at 112 there's the question can we count up also of course we can if we can decrement we can increment and that can be useful in many cases and we want something to just happen a certain amount of time you know we don't always have to have like this nine kind of hardcoded in either we can say like you know check a database see how many in a classroom we have a number turns out to be 32 and then just put that variable there so then it will count up just as many times as we have you know students in the classroom or something and we don't need to actually construct a forloop and have that data in exactly the kind of format that Python can loop over so you can see the advantages let's look at breaking out of these loops so there's gonna be times when we don't want the thing to just run X amount of times we want it to check some kind of a condition like should I still be doing this or has the goal of this loop and accomplished it's time to stop so let's start by just placing a conditional inside of a for loop and show you what that looks like alright and don't let this character throw you off I just thought it'd be fun to go get another you know utf8 icon so you guys would know how how fun Python can be so in this case we're running a range so it's gonna run six times and it's gonna ask if this Captain Picard icon is three print make it so else print not so so this is what we get not so not so not so make it so not so not so pretty cool huh so you can see that it's just running through it and then when it found the one that was equivalent to three because we used our is conditional then it said make it so and it was made so when the Starship Enterprise survived that encounter but here comes another encounter will Captain Picard make it so this time for Captain Picard in range six if Captain Picard is three then print make it so but then we're gonna break out of the loop so we're not gonna get to the rest of them so will he make it so he will but he's not gonna make more not so afterwards so this break kind of as it seems like it would be it just takes the entire loop and stops doing it it breaks out of it okay so we also sometimes might put the break before the print statement so do you think it just breaks Acutes everything in this block of code and then breaks or do you think it's gonna print something underneath the break well let's find out not so okay so we have to remember that when it breaks it really breaks like right on this line it's not just breaking out of the loop this code but it's where it's specifically located so you know that can be another bug in your code at some point you might say like when when I was breaking out did I really complete everything I needed to complete because as soon as it sees that word it's done even if you're already in this block of code being executed is valid all right so enough with breaks enough with conditionals what about continue that's kind of a weird one we're in the you know the Star Trek deck with Captain Picard from the next generation obviously the best version of Star Trek here's how it goes for Captain Picard I just wanted to use a unicode eight so don't let that scare you you use any letters you want or any word you want here but I chose Captain Picard Unicode icons so for Captain Picard in range of six if Captain Picard is three print make it so else mmm also make it so so we make it so is all over the place how many times will Picard make it so yeah six times it's pretty obvious but we're building up to stuff here okay now what if we wrap it in the enumerate now we have an index so we can say how many times this is looped independent of knowing exactly that this is arranged six it's easy for us to see in this example but a lot of times it won't be and when we do this we are gonna have the same thing but now we also have our index to help us keep track of how many make it so is we have so so far Captain Picard's like making it so every direction you know like should we fight the Klingons make it so should we you know do something good for someone make it so he's doing that everywhere but now all of a sudden continue is into the loop so when we get to the third part of the loop the third iteration and Captain Picard becomes a valid true statement because Picard is going to be three we're gonna have to make it so and then continue what do you think is going to happen sike nothing yet Oh even more buildup you say doing more you're building up more and more and it's so intense I don't see why continue did anything because it doesn't do anything according to this example well that's because it was underneath the statement now look what if continue is put in front of print what do you think is gonna happen now one two three make it sews and four no make it so was made so that's because continue isn't just something that applies to this whole block it's specifically that line of code and this can be where bugs come in sometimes in your code because you're like I don't know I executed it it was valid and then I continued but it didn't happen so it's actually something you always want to put you know down here at the bottom like it is in this example so in this example it's saying if this and then continue but there's nothing else to continue down here so we don't see it all right so to make this really clear what's happening is that when it hits continue it's not breaking out of the loop the loop is not stopping but it is going to stop doing anything below it in its specific blocks so this print statement never got a chance to be made so it just went all the way back up here to the loop and then continued but it never missed a beat see we've got the index here to prove that three four five six it just didn't make it to this even though that was valid okay well that's break and continue for you so now let's not take a break and continue on with nesting well welcome fellow birds to our next section on nesting to twerp twerp or tweettweet tweettweet okay so and get a little crazy in this room but nesting is a very difficult task for a baby bird like you to learn and it's my job as the mom missed actually the dad bird to teach you how to build a nest and I am gonna do it in the only way I know how I'm just gonna throw you into the deep end we're just gonna push you out of the nest and you're either gonna follow the ground and die or you're gonna learn how to nest so we have a variable that's set to an empty list and we're gonna pend a few things to it now from the outer ring we're gonna be appending 1 & 2 and from the inner ring the inner loop here we're gonna be appending 11 and 12 so I also put these in order of true and false so you can see that it's this one than this one now there's no real good way to I think explain this I tried a few times in rehearsal but I think best just to print it out and let you guys look at it and let's talk through it best we can but it's one of those things that I would say keep staring at it maybe pause your video kind of thing so if you're ready of course you're not ready you're a baby bird you don't know what I'm doing but no sympathy got to push you out it's for your own good mmm all right you flew good job you're a flying bird now so let's see how you did it all right we have the very first thing that was printed I was appended is the 11 so it obviously read from the first ring first and then it printed our true statement and then it went and got our big stick our first big stick one then it did the next thing and that was print the false version of the same small stick and big stick but here's where it gets interesting so now let move it up to 12 on the inner ring it kept being true and it kept the same position on the second loop it didn't go all the way back it just looped this one once then loop this inner one twice so you can see now it's got a false but we're still on the first iteration of the bigger loop and then once it was done with that it finally went up to the bigger loop and then it ran this appended the 11 and then 11 again and then it went up to the 2nd 12 and then the second 12 okay so I guess point is it's like loop bloopbloop doo doo doo so it'd be like 1 2 1 1 2 2 like that makes sense kind of tricky but just play with it and get your head around it here's another way with a little bit more nesting so you can see if we had a list that was already premade and it has you know single digits double digits and then triple digits if we were to do a four or loop a for loop and then print out everything you can see that it will print and sort of this pyramid order one more thing to get you kind of thinking about how to do it is for I in range of one through ten okay another for loop which is X in range for eleven through twenty this case you're gonna see that it's gonna be pretty long and it's actually gonna print eleven twelve all the way up to nineteen and then BOOM back to eleven twelve all the way to nineteen and then BOOM actual eleven twelve all the way up to nineteen I think you get the picture but guess what all of his work was not in vain whatsoever because we are now going to learn the coolest thing that you can do with a loop ever that is watch your nest get built with a progress bar yeah yeah boop boop we did it loops are done we have completed this lesson yeah subscribe to our mnemonic Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations welcome in today's lesson we will be learning the how of programming by reviewing code examples that demonstrate how to connect we're gonna talk about some of the most common use cases and methods the basics of creating dictionaries how to display the keys and values that are inside of them how to retrieve keys and values sort dictionaries insert new elements and of course remove things that we don't want then we're gonna talk about loops something that we're not gonna cover in detail here but there's some very powerful ways dictionaries can be combined with loops and I want to give you the first overview of what to expect in some of the later videos and how the power of the two can be put together and then finally we're going to talk about default Dix now this is a special package that we can bring in that mimics most of the dictionary functionality but also adds a few more elements that can be useful so get ready for a good time with dictionaries let's start with the dictionary basics creating an empty dictionary now we use the curly brackets which is very similar to sets so let me show you the main difference here is really in how we structure the data that's inside so we use curly brackets for a set and we use in the example of strings here we'll make the first element and then we'll use a comma and then the second element but with dictionaries we have to have a colon between the two instead of the comma so we if we actually wanted to dictionary elements it would need to be two pairs for example something like this that would be the equivalent of two items inside of the dictionary whereas each item has a key and a value so since they both use curly brackets here's my question what type is this variable gonna be a set or a dictionary since we haven't specified anything with our format got your guess in hand it's a dictionary not really sure why but that's just the default that they use so in fact if you actually wanted an empty set you would have to do something like that where you created an empty bracket and then typecast it into the set type the basics are the colon and the comma pattern inside of the brackets next let's look at some ways we can display dictionaries because there's two elements both the key and the value there's a few different ways we can actually display them also so let's start by making a dictionary that we can play around with it's called Hogwarts and it has the names of some of the Harry Potter characters and then after the colon it has the house that they belong to hermione is in Gryffindor and Hannah is at Hufflepuff and course Penelope ravenclaw nobody likes Penelope now just like we print all variables we can simply do Hogwarts to see the entire pair so we can see the key and the value now another way that we can display the key and the value is by using this method called items there's some more functionality with items but nothing that we're gonna worry about now so most importantly if you only want the keys or the values we have separate methods for those so Hogwarts dot keys is gonna return just the three people and then Hogwarts dot values is going to return just the three houses so a few different ways to display those there now let's talk about retrieving elements out of dictionaries this is something that comes up a lot so we're gonna create a new pokemon dictionary here and one of the main methods we can use is this dot git method and the method requires one argument that we must pass and this pass is going to be the key for the value that we want returned so we have to pass in either a string or a number that matches one of the keys here so you can see we have our Bock in here we have our buck right there so we would expect it to return the value like in a real life dictionary this would be like looking up the word here and then getting the definition back when we run this we will get 14 now it doesn't work the other way we can't put in the value and then get back the key it doesn't work that way now there's also a shorthand without using the method get we can use our slicing if you remember earlier we had the two brackets and they were put right up against the variable here and we can do the very same thing so we need to pass in the key which we have right here and it will return the match value 89 you can see that we have 14 or 89 so now let's look at a second argument that the get method can actually take and that is a return value if nothing is found so in this case we're gonna look for Jericho odor kakou yeah that's right kind of like Pikachu but a jerk version in this argument we're saying look through my dictionary and if you find Jirka Chu then return it and if not return Pokemon not found so in this case we know that Jirka Chu is not Ivysaur or Pikachu AER Bach or Jigglypuff so when we run it we will get Pokemon not found so now let's talk about sorting a dictionary because inherently dictionaries are not stored in a sequential order like a list but there are functions that we can wrap around them to get some of the functionality that we need so let's go ahead and create a new Hogwarts dictionary with some of the characters and the houses that they're from and then let's sort them so first we know the items is going to return both the key and the value so when we sort these we get everything returned and sorted by the key it uses the key first so we have H a and then H E and then the letter P and then we can also specifically say sort it by the keys and only return the keys and then we'll have the same thing but we won't have the values returned also and of course we have the dot values method and we can run that before using the sorted function and get a similar result but this time sorted on values so you can see that can be a great way to actually sort out your dictionaries when the need arises now let's talk about inserting new items into a dictionary new key value pairs let's start with our pokemon dictionary here we have our pokemon and the level that they're at Ivysaur is at 89 and pikachu is at 11 and arbok is at 14 and then Jigglypuff is over there at 51 so now I want to add two new Pokemon my first one is Professor X and he is at level 34 and my second one is the Joker now we specify the new item in the same way we would slice out one of the values based on key except we add a new one so professor X does not exist in the dictionary at all right now this would normally cause a key value error except we have an assignment variable here and we're also giving it a value when we run these you can see that both the Joker and the professor X have been added to our poke dictionary right and there we go now Joker and professor X have both been added as keys and values so our dictionary is growing now let's talk about what we do in our dictionary gets too big and we need to remove something removing key value pairs from dictionaries can be pretty easy so let's go ahead and make another dictionary with poke just to remind ourselves what we have and reset it and then we simply use the de el keyword and the same way we would slice an item out hoping to get a return value we just put del the keyword before it and then all of a sudden poke Jigglypuff is gone and we just have our bok I have a soar and Pikachu another way that we can actually clear an entire dictionary is by using a method that all dictionaries have called clear and when we do this we end up with a dictionary of nothing and that is removing items from a dictionary well we have an understanding of the basic ways we can work with the dictionary I want to talk about what we can do when we combine them with the powers of loops now loops are an entire lesson that we're gonna talk about in the section on recursion so I don't want you to look at this and think it's stuff that you should know but maybe take a more relaxed attitude towards this loop section just see some of the things that we can actually do with the dictionary when it comes to nesting and looping just to go kind of quickly over this the same way we had the Hogwarts keys and we could display the keys out we can actually specify something called for and say for I in Hogwarts key and this is saying for the index or whatever character string we want to put here for I or whatever variable we choose to put here for I in Hogwarts keys and we can actually print the keys so we can just print the keys out now we also can do the same with values and then this variable I will become not the keys but the values and we can also specify both a key and value so remember these are just variables we can choose them to be anything we want and here we can actually combine the two together for a custom combination that way we can actually have a couple variables here they can be used together in all sorts of combinations using the dot keys the dot values and the dot items now like I said you don't really need to know this right now but the reason I put them here is because I think someday you might want to come back to these videos and this seems like the most logical section to keep some of this stuff so just like we were sorting things before by printing them out with the keys and values and then wrapping him in the sort function we can also do that with loops a little bit more complicated but sometimes there can be more places where we can add new logic so there can be reasons for it but just so you see it's the same thing we're organizing by keys but here we're using some different logic to organize it but just another way to do it just for your reference for later so now something you should pay attention to again the default dictionary I want to talk about the default dict it's a different type that we can bring in using a package and the reason why it can be so powerful is because it allows us to specify some logic saying if you get a key and you're not past a value instead of throwing an error just use this as a default and this makes it really powerful for quickly appending items into it that aren't completely validated ahead of time so I'll show you with an example here so we're gonna create a dictionary and this is just a blank dictionary has nothing in it and then I'm gonna slice to the third value now there is no third value so we are gonna get a key error however in some situations maybe instead of throwing back an error saying this doesn't exist we want it to automatically make something and something the same for all of the keys that are passed in without values that is where the default dict comes into play so from collections we have to import default dict first just like we do with a lot of our packages and then we have to actually create a type an object that is a default dict type and the most important parameter here is this where we say int so what we're saying is in this special dictionary if somebody calls a key that's not there automatically using integer as the value pair for example now in some dict it's also blank so this new dictionary we have some dict it is blank and when we call the third value we would get a key error if it was a regular dictionary but in this situation we get no matter what number we put in here it's gonna automatically put an integer now that's really cool because then maybe we want to do some kind of math maybe you want to build some kind of it you know giant dictionary that has zeros for all the values that aren't filled in but the numbers in other parts or we can even put in other types so here we can try putting a string in and when we run it we are gonna get a blank string in return so now the dictionary actually has a key of four with a string value after it and you'll see in our applications play video there's some really cool ways to make hierarchical trees or api's and some things some some kind of more complicated things but it's nice to not get an error thrown back at you but just have some kind of a default parameter that the dictionary knows that it should have if it gets incomplete information so that's it you are now up on dictionaries thanks for around with me subscribe to the mnemonic Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations scopes an important concept so we're gonna start by looking at some basic examples of what we mean where variables can be where they can't be then we're gonna look at some more specific categories like locals and Global's and the system Global's and then how we can make our own Global's and what global even means then we're gonna talk about namespaces I think of these as big long lists of variables we have access to so we're gonna talk about how you can actually find out what these are how can you output the variables that you have in your namespace and then also talk about the order that your code is actually written in it's another important thing that decides what you have access to at what time so at certain states you don't have the same namespace as you do at other states as you write code and move your way down a page there's changes in the namespace along the way that you have to take account for and then finally we're gonna talk about privacy now this relates to classes so it's a little bit premature for what we're talking about but I want to start implanting the idea that there's also what you could think of as a system of permissions so let's talk scope Cope's an important concept because it's really about what's in the area I almost think of it in real life like something that would be geofenced in or different rooms inside of it building something like that so for the example I tried to make it kind of in the same way and I want you to first imagine a kitchen now say you had one pie that was sitting on the counter and we're gonna call that pie global rhubarb and then inside the fridge there's another pie from the night before and that's called local apple now you can really think of the two pies in a real world sense as being separated by the fridge let's say that one area is the kitchen counter and one area is inside of the refrigerator and they are separated by that fridge door someone would need to open the door and actually put one of the pies in or take one of the pies out if you wanted to get past that boundary so the concept of scope is like asking what pies are here on the counter right now and then what pies are in the fridge but we can only but we can think of those as separate namespaces we have a variable called pipe and we also have a variable called pie so if these were written right next to each other we know that one would override the other when the next line came we know first this variable would be assigned this string and then later would be overwritten and then assign this string next but because it's inside of this refrigerator function it's protected until it's called that's not gonna do anything so just take a second to think about what's going on here pie is defined and pie is about to be redefined in here so if this function changes it then pie is gonna be Apple underneath but if it doesn't change it it's gonna be global rhubarb underneath okay so let's run this in a second but let's type global and local scope so the way I touched before about the fridge being its own area that would be a local scope of the fridge and the counter would be the local scope of the counter but when you say something's at global what you're saying is it can be everywhere whether I'm in the fridge or on the counter I have access to some super pie like some lemon a lemon meringue pie let's make it that's floating near the ceiling and it's just everywhere it just follows me around so when I'm in the kitchen it's there and this like floating kind like I think of a kind like a drone like a floating lemon meringue pie that's on a you know drone that flies around with me and whether I'm at the fridge or I'm at the counter that lemon meringue pie is always within scooping distance of my spoon let's look at an example of what I mean and now when we print out baked what do you think is gonna happen because this is returning the local scope of pie okay we get local apple seems reasonably to find this thing inside even though pie was defined before it overrode it and then it returned it into our bake variable here and then when I go to look at pie do you think that's been overridden because it was overwritten inside when we executed this function no global rhubarb so it stayed on the outside it's almost like it was like this lemon meringue pie was floating out here but then when I was looking inside of the fridge I like pulled it in and then replaced it with an apple pie and then ate the apple pie but it was a clone like the other ones still floating up there still remembering it's a meringue pie and it's gonna follow me to the next place man I sometimes I blow my own mind with how good I am metaphors now let's look at system Global's maybe another way to think about this would be reserved keywords but these are the ultra global namespaces these are like just by entering the house whether you're in the kitchen or you have your drone meringue pie next to you or any of that stuff you can't change it so TR UE I can never make this a variable I can never change it in any way I will just get errors when I try to do something like that so whenever we take a system global like true and we put it into a variable we do make a copy of it but we can never actually change true it could never go the other way regular Global's are usually defined with capitals now it's important to remember that when we write a variable in all caps what we're signaling to other programmers is that this is a global that you should set the parameter on or that we really don't want you to mess with it doesn't mean that they can't it doesn't make it immutable it's just still a regular variable but there usually is something specific that the programmers trying to bring your eye to trying to bring attention to we've assigned at the variable pink this car color and now we're gonna try to change it with a function so we have a new car color which is the exact same variable what color is inside blue and pink just like we did before it's exactly what we expected this new color took its cue from the inside of the function but now let's look at it again and this time let's use this key word global so now imagine that we take the exact same code where we're assigning a car color pink on the outside of the function and then inside were making a car color blue and then we're returning that car color but we're adding the global keyword to car color first what we're saying is hey this thing is now global now global meaning break the heck out of this fridge I know you were in applepie that was inside the refrigerator but now I've strapped you to it drone so you can follow me around and you can get out of here too so what do you think is gonna happen when we try to change this one well first off we get this syntax warning now I was playing with this before recording and I'm gonna leave this syntax warning here I do think this is a this is not really how you would write a normal function that you were using globulin but for our example I'm trying to show the overwriting I'm gonna leave it that way so what's gonna happen when we run this okay blue that makes sense it took its cue from the inside car color overrode it then we made it a global and then we returned it but here's the powerful part because car color here was defined as a global even though it was returned inside of this variable it also is able to break out and override pink up here which was defined inside here which should be confined to the inside of this refrigerator rhubarb is now Apple people the world is upside down global gave it so much power that it broke out of the refrigerator by itself and put itself on the counter and replace the pie on the counter so now we have an apple pie inside and outside pretty wild so you can see why this global keyword can be a powerful thing it can allow us to define something in a local space that can break out of that local space so now let's talk about namespaces now the way we were talking before about the pie being on the counter or in the fridge that was something where you would look around and just see which pies are there but when we're talking about programming we don't have a physical world a counter that we can look at so namespaces are the equivalent so imagine we're in the living room watching the football game and we ask our you know wife or husband or girlfriend or whatever honey I am curious what pies are in the refrigerator and what pies are on the counter right now so she comes back with a list she says okay on this postit note I've listed all of the pies that are on the counter and then on this postit note I've listed all of the pies that are in the refrigerator and then you go get on the counter there zepa land pineapple and cheesecake and then in the fridge there's you know apple and and others so the namespaces are those postit notes with all of the lists on it because we don't actually have that physical space we can look at that so how do we output one of these lists so first off I just want to import this module P print it stands for pretty print and it has nothing to do with name spaces or scopes but when you print out a dictionary it does a nice job of indenting them when you print it out to console so it's just an aesthetic thing and this function would work just fine without just to prove it to you I'll show but it's a little bit ugly for an output so when we wrap it in this nice function P print then we get it in a more indented way with this nice scroller so that's the only reason we have that there don't get confused on that anyways but here in our local you can see that we have the variable car color and its value right now we can think of these as key values or give these as variables in their current state B this is the container and inside of it is the color blue it's weird or inside of this cucumber there is the value of truth you know that's the thing and that's the thing about the core of a cucumber is that they are true they're they are true blues actually cucumbers are true blue inside these are the variables we have access to so now remember inside of our fridge our local space is defined much more narrowly out here when we're just running it it's saying alright my local space is pretty much my global space I'm not inside any containers if we're both you know we're both in a house that has no refrigerators and all the pies are out in the main area then the global and local space will be the same but you can see once I put the local function inside of my own function pie is being assigned to the string pecan then you see when I run this fridge function there's only one thing that comes up just this pie in fact if I get rid of that there's nothing just an empty dictionary that has no variables it's a refrigerator with no pies inside of it which is really sad thing but no matter where we are inside or outside if we use Global's we get every variable that's available to us anywhere so here's global ran by itself and now you can see even if we call our global function from inside of our refrigerator we will get everything it's a good way to put that is a the apple pie that's in the refrigerator is not something the guests know about until they open the fridge so basically inside of the fridge we have access to the Global's what the Global's don't go the other way and have access back and that Python has built in these global and local functions that you can use code there are some amazing magics we can use for example percent who is gonna show you all of your global variables so you can see that a warm pie showed up and our pie from before an even P print it is in the namespace cuz it's in its own object its own name and then cucumber from before and car color so you can see this is the way in reality to do it is just open up a new cell and put percent now that we know about these powerful magicks for clearing out our namespaces i want to show you in a real world application why you would want to think about using these and how going down the page in a linear order from top to bottom and left to right is actually something that does come off you need to really think about what's happened before and after certain points to reset so yes we'd like to reset everything so looking at it we know that our namespace is empty there is no variables that have been defined no names that have been defined so if I want to find out what the cosine of 90 is and I haven't brought in the math package or module two you can see that nothing is gonna run make sense right we haven't defined what math is and that makes sense because the namespace is empty but after we do import it so now I've imported it let's look at our namespace so we have brought in math and the only thing that we're seeing in our namespace is math so now that I have access to math I know that I can do math dot cosine and we gonna sign it to our variable which should be a second name and now you'll see that we have both and also whenever we see something here in namespace it's also a trigger that we can probably find some methods so if we do math dot and then tab remember in Jupiter it shows us all the things we can do with it or if we went over here to even our variable that we made and did the same thing we can actually see why the point would be like you try to run something you don't see it you check the namespace using this percent whoo and Jupiter it shows you what you have access to a names you have access to and then that kind of starts getting you thinking about how these tools can work together it's like they get o if you're like a mechanic and you're like working on a car and you like scan around to see like what's close to me screwdriver a wrench maybe I can use one of these so it's just about scanning the area for what's available only let's talk privacy now if you are going through this course in the passes like we talked about earlier you probably have seen classes but if you're just sort of following these in a linear order you probably haven't classes are gonna be an important thing that we learn later but for now you can think of them as soupedup functions and it's really the only place you're gonna find variables that have different permissions like privacy on them but let's go ahead and just get our head around them because we are talking about scope right now and the scope of a variable or name is going to be where it's located like on the counter or in the fridge we're now saying is that like if you look inside the fridge and you see an apple pie you're like sweet I have access to it it's in my name space but then you go to pick it up and there's a little note on it that says like this is Beth's pie don't eat it or you're dead and you're like ding so even though I can see it and I have access to the pie I'm in my you know office refrigerator or whatever and it's actually somebody else's and I can't eat it or they're gonna be mad at me so that's what this is about this is about taking a name and saying hey don't mess with it because it's got some other use so if you see a name that has a single underscore like this one underscore Sherlock Holmes then you know that it's probably supposed to stay private and just like in the office you like could eat somebody else's pie that they left in the fridge you really shouldn't and that's exactly how an underscore should be thought of is that somebody made it another programmer wrote it and said hey don't touch this this is private it's mine I don't want to messed with for whatever reason although you could it's not really locked off or do anything it's just it's sort of like suggested like hey like we're all in an office here I'm writing code you're writing code don't mess with it because I put an underscore there I want it to stay private and then double underscore private is a little bit different so this is especially when we're dealing with a class something you're gonna see that is important when there is a double underscore or a dunder as it's sometimes called then you're referring to something called name mangling and you really can't mess with this pie like this is the kind of pie that if you eat it the fridge might not even work anymore and you're gonna break the whole refrigerator don't if you see a double underscore change it because what's happening is Python is actually looking for these underscores and then it's changing it in classes so it has the class name in front of it it's almost like an important utility function that when you're using classes which are like blueprints for objects when it's making the objects it's gonna need to see that that's a private variable or a private function so that it can override it so might not make tons of sense if you haven't learned about classes yet but the important thing is just to remember that anytime you see this double underscore think to yourself oh that should probably be behind the scenes or hidden or I shouldn't be messing with it that's like going to Disneyland and looking like over the gate like that's not for the guests you know that's the double underscore and this one's like hey don't mess with me like I got my headphones in you know I know you could like if you need to like make eye contact and I'll take my earphones out but really just I'm trying to work right now alright so you learned a ton today we're getting pretty pretty advanced here you guys are really starting to learn a lot about programming so I will see you in the next lesson subscribe to the mnemonic Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations are you ready to get funky with functions well I hope so because today we are gonna be talking about functions in a nutshell we're gonna learn the basics the syntax of how they look the keywords that we use what they can do then we're gonna talk about very important concept related to functions which is calling the function how do you tell it to execute that code how do you pass in variables how do you get things back out of it that's gonna all be covered in the calling section and then our final topic is gonna be parameters because there are stipulations that you can specify and some that are specified by Python is itself for what can go into a function and what can come out and how that looks so we're gonna learn about some of the styling that you can use when you're telling somebody else how to put a function in we're gonna talk about something called star args which allows us to do lists and then we're gonna use something called star star quarks so get ready to find out what all these funky words are about in this lesson functions funky functions I mean let's go to Funkytown man I wish I could afford that song you know the rights to use it even know what song that is is how bad I sing who knows but listen today we are here to learn about functions so why do you think that a gas pump is what I chose for our mnemonic you put X amount of dollars in and you can mathematically calculate what amount of gallons you're gonna get out so I'd like to think of functions as ratios even though obviously they can have all sorts of logic they don't have anything to do with ratios at the end of the day but just to keep it in your head to start with think all right every $1 that I put into this gas pump I am gonna get one half of a gallon out so if I put in $2 I get one gallon of gas and we want to model that using a function we would do a syntax that started with D ef4 define or defining a function short and then we would give it a name using our normal naming conventions we don't do camelcase we could but we just conventionally don't and we can't use dashes or the number one or a number here at the beginning so we have gas pump this looks good and then we have an open and closed parenthesis colon okay this is just the syntax to get used to and in here is where we're passing our variable now this dollars can be anything it's whatever variable we choose to make it it can be that Captain Picard utf8 icon I used before it can be anything the Python understands as long as we use it as a symbol to remember what we're using it for inside so name this something that makes sense to what you're doing in here think of everything in here as something that's enclosed kind of in Tupperware different then our variable because that just holds a state but an entire working machine like a toaster think of a toaster with all of its little components and they're all in here those components only interact inside the shell of the toaster and here we take whatever is passed in it could be $5 it could be $50 depends on how much guess you need for your car and then it's going to multiply it by 1/2 by 0.5 and it's gonna create a new variable gallons now this gallons variable is stuck inside of the function there's no way to get it out unless we explicitly ask for it using this keyword return so we'll talk about that in a second but let's just look at an example here this is my function for a gas pump it's gonna give you half a gallon for each dollar you put in so we're gonna define how much cash we have we have 14 dollars in cash and then we're gonna pass it in ok this number 14 it could go right here also we don't necessarily need it to be a variable but just to show that you can it will go in to here it will process and it will return whatever this gallons total is are you ready to pump some gas done right 14 dollars we got 7 gallons of gas and now our you know fast motorcycle rebel without a cause Harley Davidson is all you know full of gas and pumped up ready to to cruise the open road so we're gonna be cruising the open road we're probably gonna need to make some calls so why don't we talk about calling a function very punny doing very punny ring ring ring hey you're conscious here would you like a bowl full of melted contacts like contacts like the kind that you would put in your eye like a whole bowl full of a melted down no that sounds disgusting gross and memorable doesn't it that it does let's talk about calling a function so we've defined this function here cup of melted contacts it's hard to say because it's not a real thing that anyone would ever do and cream okay so we're passing in to this function I imagine imagine like a cup of coffee but we're passing in melted contacts instead of coffee and then some cream you know probably to make it taste better and we're gonna return instead of making the variable first and then returning the variable we're just doing it all kind of in this shorthand notation so we're just returning the sum of the two so we have a function now what he thinks gonna happen when we run this nothing kinda but kinda not actually there is a function that was just to find but functions are containers they're like can they're like toasters there they were there and they're ready to go but until you stick that toast in them they're not gonna do anything it looks like you plug in a toaster and it looks like it doesn't work right because you haven't put toast in and press the button down that's the same way so calling is essentially the same thing as putting toast in the toaster and pressing the button so let's make a couple variables here so we're gonna melt down 64 contacts melt you know I hope you know what I mean like a context that people put in their eyes for good vision I imagine like a bunch of them 64 or 100 or whatever and then you put them in a bowl and put them in the microwave and you just melt them into a liquid okay because they're probably plastic or something weird like that okay so that's what we have for our variables now what do you think is gonna happen when our function doesn't have any logic in it except it just has this keyword pass so we are passing in this number 64 and we're also passing in this number four what's gonna happen nothing oops so that's kind of weird now that's a totally pointless function but you might see something like this in code because you know you're gonna need it later or kind of like a reminder that you're gonna do something but you know in essence this function that we created called morning drink really has no use so let's go ahead and start filling it in with some stuff that might actually do something so what do you think is gonna happen if we don't have a return but we do have some logic inside well following what we said before it will process that these two have been added together but they didn't go anywhere they didn't get returned they didn't get put into a variable so you know Python just got this this like toaster that's like hey I'm ready to be pressed now I have the mechanics inside of the toaster and you can press the button and put toast in me but you just haven't yet now this is like a toaster that has nothing inside of it this is like a toaster that just needs some toast so let's give it everything that it needs let's think of this return keyword as pressing that button and putting toast in our toaster 68 all right so what happened here let's just remind ourselves sixtyfour and four are the two variables that we passed in that makes so 64 came in here four came in here what was pairs is now melted contacts okay so that's important to keep this is a variable of the number 64 and it just becomes this ok these don't have to match up even though it seems kind of like like they kind of should like you you could go the extra mile and like make it so that this is also melted contacts and you define melted contacts as the variable and that it could be smart for your situation but just important to know that this is totally separate ok now that we see that it's working let's make a point to separate these two concepts so we have what I consider the Tupperware part up here the logic the container the toaster and then I have the part where you put the bread in down here so we don't have to put them right next to each other so in this case the toaster analogy really breaks down like this is like almost like a light switch or if we could put the toast in the wall somewhere else but the toaster was like on the other side of the room and then sent the heat over or something weird but anyways the point is that these two are totally separate so you should think of this as being something that can be somewhere else in your code right like put it way down here and you can run it and you still get the same response ok it just kind of magically travels through the air and this is what makes it powerful is that we can write all of these complex functions and the functions can have functions inside of them and they can call on others and there's a huge stack of logic and all this amazing stuff your computer can do and you just write something like here like you know make me a morning drink or you know move my mouse to the right and it does all the logic to move all the other things and all the pixels around and you know kind of the mindboggling stuff is done separately and it's contained in its own world ok well now we know that the function works but you might ask yourself how would I know if I didn't write the function myself if you didn't have firsthand knowledge well luckily Python helps us with that too because there is a callable function that we can pass our function or actually any other object because everything is an object in Python in to find out if it Scala below or not so here's an example the tiniest simplest function I can imagine actually we can make it more let's call it a a function a we define it we name it we give it the parameter with no print we have parentheses for the parameters with no variables passed in the colon to give it a statement that it's over and then pass now it's kind of unique to have it up there usually you would see it down one block but it actually works if it's just passed in this kind of shorthand notation so we have a can we run this true or false true because it's a valid function right there it is right in front of us so we also can check other things so we know we defined morning drink this should we call ball too yep and what about the number one an integer well an integer is not really callable in my head it's not a function doesn't do anything you can't pass anything into it but who knows pythons weird oh we were correct false you could not pass it in and you might think a variable all right well that's a container it's got some stuff inside of it maybe that's callable so let's find out if our two knees can be all boss so it's easy to find out what's call and what's not but what's the syntax to actually make a call ring ring ring yellow would you accept a collect call from simple function no parameters being passed in it's a three times four return yes yes I will even know what I press but I don't even know what I'm saying there collect calls it's an old watch old movies people it's how people tell old people used to make calls I guess or old poor people made calls so here's the problem with the syntax if you don't make the call with the parentheses on it meaning that there could be parameters even though in this case there's not but you have to say I could be passing in some parameters if you forget to do it which is a really common mistake you don't even really get an error so you have to be kind of aware of it because it is just what it says it is it's it's a function it's kind of like a variable even though you never put it in a container it's in this private place dunder main and its dot simples and then it sort of attached it to this behindthescenes method okay so if you see this just realize oh I forgot the parentheses that's the only thing you need much better then you can call this and it's actually going to process what's inside and do the return so this is gonna like working with the Tupperware this is like moving it around or looking at it it's defined up here in sort of the same way a variable would be but this is actually execute this is do something like go ahead and process that and give me your return and this is also where we will be passing in things when we get to our parameter section so quick touching on annotations annotations are not required in other programming languages you have to specify things like this but you don't in pathan so if you want to specify for the sake of clarity that you want to pass in a parameter and you want that parameter to be an integer so don't pass me a string you can actually use colon kind of like a dictionary here and you can say alright this is the variable remember X is anything you want to name it as long as you want to work with it in here but you can say I want it to be of type integer or if type string or of type float and you can use this arrow here with a list to say you will be getting back a list check this out shopping equals ad okay this is a function you can see it to find right there and it's got the number four this is an integer it's got a string which is going to correspond to a string and it's got four point four which means it's a float so it's going to give us a list in return because we specify it so look down here when we do shifttab it gives us some information here saying pass me in an integer pass me in a string pass me in a float so that's really the power of it when you're working with the team they can see what you were expecting or gives them more clarity on what what you need and it's not gonna throw an error if you give it the wrong thing it's just gonna work also a worker not work depending on what the logic is but it's not necessarily something that is enforced either so keep that in mind and you can see that the type we got back was a list just like I said it would okay many ways that's annotations okay enough about the topic of calling time to hang up on that topic you know what I mean very funny very plenty doing let's talk parameters very cool stuff these are the things that were passing into our functions to be processed these are the dollars in the gasstation example so there's a few styles on how you can put them let's start with the most basic we have a couple variables BM here and ym and they're just defined as these two numbers and we have a function called hungry hippo it's gonna take in an X argument and a Y argument remember we name these and match them here and it's gonna subtract Y from X okay so you know what is it subtraction is not commutative it's whatever the opposite of commutative is so it has to be done in a specific way so watch what happens when we have a function we call it with BM first it's gonna take seven in the first argument which is going to become X which is going to make it seven and then we are going to subtract Y which is going to be the ym argument which is going to come in here and subtract there so we're gonna start with seven and we're gonna subtract Y now it will still work if we reverse it because the logic needs it in a certain order we are gonna get a different answer we're gonna get negative four so this is something to be careful of well I mean we can't just be passing in parameters like willynilly on this thing you know it's not gonna know which order you want things in so we have a few options one you can make sure that the order goes in correctly always starting with the first argument first argument second argument second argument or we can actually specify so in cases like this where we need things to be in the correct order we can be explicit about the variables we're passing in so in this example you'll see that we set Y and X the same way we did up here but in this case we're saying Y is equal to ym and we make sure that the variable three that we have is in the variable named ym when you do this it will go the same no matter what order they're in so watch this for example we're gonna get out four here and we also could rearrange this and still get out four so it's gonna be invariant to the order that they're in for lack of a better word now let's look at a new function where we have this equal sign on the opposite part instead of having it down here where we're calling we're actually having it up here where the function is so this is interesting do you think it is the same thing let's try five all right so I think you kind of get it just now that this is acting as a default argument if we were to put in something else over the X like then it will override it but if no arguments are passed in it's going to default to five so this is a really powerful thing to do if you would get an error if no argument was passed in but you know sometimes they're gonna be lazy the user is gonna be lazy or whatever and you just want to make sure that something goes in and a five is a good default value so x equals up here in the function is an automatic default position so we can mix and match the two I just kind of want to show you how you can have something that's required to be passed in or you can have something that's a required slash it has a default so it's kind of optional in a sense but it does need an argument it's not optional to have an argument but it's our optional to pass it a new one it's got a default state so here's an example of that we can pass it why am get three yeah we're gonna have a missing we're missing error here so the positional argument X is gone this is referring to how we have passed in one argument which is all that's really required from the mix and match but it's not the right one because we were so explicit about saying that ym is only going to replace this one that has the default it's not gonna work but we could say it's X and then we would have something that ran so what do you think about a triplethreat nobody likes a triplethreat double threats are terrible single threats are terrible triple threats are oh they're a home run okay got a function first second and third are gonna be the variables we pass in and we're gonna add them together to see where our runner goes so we place the arguments in the function call with a comma between the two to separate them out that makes it so that it's first comma first and then the number one then comma cuz you can take all these together and add them up and of course we get six you already knew that and that's it for style part of parameters now we're gonna talk about args and kwargs the coolest words in Python so what is passing in Star args do I will show you it means that we can pass in something of varying length whether it has two items or four items or 50 items as many items as your memory can handle by putting star args up here it's gonna take in the entire list of everything that you pass in another really powerful thing if you have a function that just says you know process however much comes in I don't need to know how many times the variable is gonna come in just every time I see one this is what I'm gonna do so do you think we can make some specific and some of the star Arg style that in the same function can we have some that are just like I need these and then the rest are like and anything else you got but I gotta have these oh yeah of course I was really a setup question let's be honest but here you can see we have first required second require third required and then as many more as we want to pass in so when we make the call we have this star args up here we have the first one one two it's got to go in second tequila goes in third tequila and then floor plus the rest car in jail hey your decision let's talk star star quarks star star quark is there just like saying it star star quarks what do you think adding star star kwargs will do to this function did you guess that cabbage equals vegetable well what's happening here is we're able to not just pass in a long list we're actually able to pass in pairs so this creates a dictionary on the back end that we don't really see and it's combining the two things as they come in and keeping them grouped together so when something gets passed in as star star kwargs we can run this for loop and remember before we talked about having an index and a value a key and a value using this dot items method well we can use that to actually see what's going on we can pull a name and a value out of what's passed in through star star kwargs and we can put them in these positions right the first position is gonna be the name and then the second position is gonna be the value from the string video remember this equal sign is only a string of text this could be like hi guys or whatever that's not an actual equal sign that's just part of what I'm showing you because these two are connected together and when they come in they come in as Apple equals a fruit okay so it's a string like a tag that we're putting on top of it and then we're passing in a real variable called cabbage and we're saying by the way that's a vegetable so we can throw in these little tags with it which can help us when we get more complex logic inside of a function okay so let's just break this down from the top because I'm not gonna pretend it's really easy at the point we're at now but it can be worked through so we have a new function we're defining it named bar makes sense it's getting a first second and third argument these are just single arguments and then we're giving it this star star kwargs the special options it's going to be this kind of key value dictionary styled pair then we're closing out the definition and we're saying here's the logic then we're going to make an if statement so we're going back to our conditionals and we're saying bring in this dictionary of stuff and get out the item action if it was passed in which it was passed in down here and we're saying once you see what that is if it's this and it's equal to this then execute this logic adding this this this together and printing it out okay so it's a little tricky but when we call the function we're passing in the first three parameters that are just singles then we have this pair here action comes with sum and then number comes with first so we get the sum is six kind of make sense keep thinking about it look it over you can always download the notebook from my github and then I just want to show you kind of a fun ending let's talk about unpacking it's just a really cool thing that you couldn't save a ton of time doing when you really get your head around not totally necessary as a beginner but I just want to show it to you we can make this function called alphabet and we can bring in a B and C the first three letters of the alphabet and we do nothing but print them so we can pass in a dictionary we can pass in a dictionary with two stars or we can pass in a list with star so star Arg star Arg and star star quark here is what happens ABC one two three and ten twenty thirty so the first one it's the dictionary it has just a single star in front of it which is just an art not a quark but I also said that only the quarries were the dictionaries right so when it sees the dictionary come in it just says all right there's only one star here so it's an argument just use that argument that argument and that argument and it just throws away the value the value that's paired up with the key and just uses the keys by itself but when you pass in the star star quarg the dictionary then brings you the exact opposite it only uses this as a label and brings you the value the value and the value and then if you bring in a list you just want to use a single which makes sense because there's only one space there's no colon and another key value pair it's just a key or an item from a list so kind of get your head around that and you will understand how to pass things into functions how useful it can be to store all that code and you know on the broader context just how amazing functions are hunted layers of functions below what we have to deal with and it's really amazing it's what makes computers and all this magical tech stuff work so that's it we'll see you next time subscribe to our mnemonic Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations all right get ready for this howto video where we discuss nesting we're gonna talk about passing functions left and right we're gonna talk about a really important concept called closure meaning like what variables are packaged along with it when we're sending functions off to go visit places and do different things and that's what makes them firstclass because they have the ability to do anything that a Python object does which is pretty incredible when you start thinking about it and then we're gonna talk about nesting and the differences in the way we can nest the different functions and what it means for how we call and execute them and of course closing on closure we're gonna build on the concept from the why videos where we talk about being at the post office and closing a box with a package inside of it and the entire environment of the post office going into the box also so when your friend opens the box he's also inside the post office so we're gonna go through and just show a bunch of experiments and examples to see where and when you can access what to hopefully drive that concept home so get ready let's talk nesting all right let's start with first class functions remember that airplane seat that first class experience that's what we're about to go through now so imagine yourself with all of that beautiful you know we eat we tea stuff going on in your on your flight so here's what we're gonna look at we're gonna look at functions and how they can be passed in to one another so we're gonna define a function just called R and O we import the random module and it returns a random number between 1 and 10 so I'm gonna run this cell multiple times and you'll see that we get different answers each time we run it so it's picking a random number so we have this function R and oh we know how to call it we know it provides a random number here's the question can we use a function as a parameter and if we do do we add it with the parentheses or without the parentheses what happens so here we're defining a new function this doesn't have to match up remember because we're inside of the parentheses here so this just has to match whatever logic it is there is a variable in itself this is the variables contents this is the shotglass this is the liqueur we have defined a robin's nest and we want to bring in Rando when we do we're gonna have some kind of a return here and then we're gonna do some logic we're gonna add 100 so we know we're getting a number we know they're both of the type integer so that should work we should get some kind of random number here and add a hundred to it and then return it if we're allowed to pass functions in as parameters and as you probably guessed because in Python we have firstclass functions we can pass them right in so let me just run this sell a few times and you'll see that we get that random portion 1 through 10 is always added to the static 100 the constant that we get from the second function so a cool way to think about we have these little packages of code and they can actually be passed into packages of code it's also easy now to start thinking about how Python really does so many powerful things when you start writing programs that do amazing things on your phone applications that tap into all these other resources you can kind of imagine that you're just on the top of all of these nested functions it's calling on a function that could be calling on a function that's calling on a function and they're all hidden from you but they're going all the way down to the ones and zeros the binary that actually runs computers or goes into huge databases and does more complicated queries just because you ask for something simple so really cool to understand firstclass functions means that functions are treated as objects and they have all of those same firstclass rights so we talked about passing a function into a function but let's talk about nesting meaning the functions are inside of the functions so we can look at it a couple ways first we think of them as separate containers where one is just going around like a kitchen and grabbing whatever it needs because it's got access to everything in the kitchen and that's what I call this separate category so the way to think about this in code is to define a function that does something simple like just returns the string of texts fly i'mjust will run that so you can see that it works and then let's define another function and what it's gonna do is it's gonna return bird and then it's gonna multiply it by five so it's kind of like our firstclass function here but you might be asking yourself but you didn't pass anything in ah that leads to an interesting question what if we would have put Rand oh just right in there like that what if we in fact don't pass in anything that and that does that work oh it does look we don't even need to pass it in so it does work when you pass it in and in some cases you want to because you can't just have everything floating around everywhere but it's good to know that we can grab them just like we would any other variable so here we can just say take that function multiply it by five and return fly fly fly fly fly fly okay so when I mean separate what I mean is floating out there in the environment variable that we have access to it's an object technically but it's just an object that we have access to at any given time like we could call it at any given we can also build some new container and put it in the container because it's already in the kitchen it's like out on the counter and we can put it in the Tupperware stuff that's in the type of work can't necessarily get out of the Tupperware and get onto the kitchen counter it must be hungry I wonder why I'm making all these kitchen analogies ok but let's look at it together so this is another function that we calling nest to and inside of it is another function so the function wasn't created outside and then we're just calling it in this thing solely exists its whole life is inside of this cage it's inside of nests bird doesn't know what it's like outside but what's interesting is we can define it it is in the scope inside of this function so maybe the best way to think about this is to focus on the inner function first pretend this is all of our world don't worry about the indentation all we're doing is returning this string egg but who's gonna call that well we could call it down here if we were pretending this wasn't spaced out and this then it exists so maybe we can just add a return and then put a definition so we're now indented one layer and this is automatically going to get called and then returned okay so that's interesting egg is solely living in here and we can't call it outside so right here I can't call bird for example there's nothing there but with the separate one I could call well I already have it's pretty obvious but yeah I could call bird right it's already there so interesting just to think about how we nest things and where the scoped of variables and access is let's talk about closure so closure is one of my favorite topics but kind of tricky to understand so for those of you who are like just playing my video in the background will you you know like right political comments now is the time to stop doing that and actually watch the video because if you don't see this it's not gonna click very easily it's conceptually hard to understand but seeing examples I think is the most concrete way to deal with it so I'm excited for this we're gonna talk about closure with some experiments that I was testing before that will hopefully demonstrate this so here's our scenario we're a tiny little bird we're like a little bird that can't fly yet and we're inside of a nest and we're inside of the jungle okay we're in a tree like our mother bird has left so we're just hanging by ourselves and we don't want to jump out of the nest down to the ground because we don't know how to fly who will probably get eaten and and we don't know how to get back to our place but we can like hop a little bit so we can like hop out of our little stick nest and we can go up and down the branches and we can pick little branches or eat little bugs stuff like that that's on the branch okay trust me this is going somewhere otherwise you might end up a garbage man in the stinkiest part of town and assigned to only the stinky garbage we have a variable here called stones three it's outside of every function that we have obviously we have access to it it's at the top then we have our first function which is our nest so we're moving from the forest floor where the stones are up the tree into our nest it's another little container and we have inside of here some sticks we don't have access to that variable from the outside but if you're in this function you do then we go inside of the bird inside of the bird the bird has bones so we have the variables stones sticks and bones and they're at different levels of scope so now we have this print function in the most inner nested function and it's printing sticks stones and bones so we're checking to make sure it has access to all three of these levels we're just gonna make that function it's not executed yet but that's the layout okay so now let's just double check what we have access to stones 3 we do have access to because it's on the outermost thing sticks 3 we don't because it's nested inside of a function and we can't get to that we haven't executed that and then of course this function we can't even call we can't even execute birds 3 because it's inside of another function which we don't have permissions for so that one's protected too so now we know what we do and don't have access to so if we take nest three our outermost function and we run it it is going to return bird three which is a call to the inner function and it's using the parentheses so you know it's going to execute the logic that's inside of here so it should print all of these out and what do we get yes by just calling this outer function which then in turn calls the inner function which then in turn says do I have access to this this and this which it does does and does okay all right so execution with parentheses down here now let's look at it without parentheses so this is basically the exact same except now I've changed everything from three to four just so we know that we're working with fresh variables nothing's coming down the page and one big change here is that the returned variable isn't being executed that's different from this one because we add the parentheses around it so this one's just passing it in and it is going to use closure to bring all of these variables into it and then we can pass it around later so same thing stone sticks bones execute from the inside when we define this function and then run nest for we'll get something different instead of executing it we just get some information saying hey this is a variable it could be ran but right now you're getting back just bird for the variable holding the entire function and all of the namespace and all of these variables at all three layers so we can put this variable which is uh necks acute 'add into a new variable and then we can pass it around so now we can run this and instead of using that function to execute that function it's just gonna pass all that information into a new variable called shotglass make sense shot glasses hold things and if we look at this we'll see the same thing as before so we just passed it in no problems there but here's the question when we take shot glass and we add the parentheses is it the same as having the parentheses in do you think it's gonna actually execute this code surprise surprise it can and it has access to sticks for stones for and bones for so that means all of this stuff that that and that it all got packaged in here so really bird for is amazing like it was like I'm gonna get a stone I'm gonna get a stick I'm gonna get bones you can pass me into another variable and then you can execute that variable later and it has all of that stuff in it so when we're talking about closure we're talking about this concept that the function itself has like brought in all of these variables that are normally just floating around and I mean it kind of makes sense that it has access to it here but it's sort of surprising that it has access to it down here so it's really bringing a lot in with it the entire environments in there so now let's take it a step further and look at what happens when we actually repackage that variable that's holding a function that's also that a nested function and it's got some logic that's looking at variables that are spread out all over the scopes so here we are stone five this is the same as last time we just added five to everything now we're gonna take this remember the return is coming in without the execution no parentheses there and we're gonna put it in a variable this is the same as shot glasses last time just a new name we put it in closed package and now I have to find a whole nother function so remember now we're kind of going back into another Tupperware container so we are gonna check to see if you can actually return it so before I run this function what I'm saying is I have a new function and its goal is just to return whatever is in mystery and what I'm going to put into it is the closed package this equivalent to shotglass and I'm going to put the parentheses on it so it should execute this that should execute that which should check to see if all those variables are there but remember this is now all contained inside of this can I print world like all of these variables that were all outside they can't get out of this because it's enclosed in its own Tupperware so now it's like before where we'd open the box and we'd look around and we were like actually in the post office like everything came out of the box the entire environment but now that entire post office is inside like another little Tupperware container you know like there's another wall on the outside that we definitely don't have access to those variables are not floating everywhere in our code but they will be contained inside of here so can I print you certainly can sticks five stones five and bones five so pretty interesting stuff just weird to take all these variables and like package them in with something and then put them in something else and I mean it's really just fascinating to see how closure works I mean it can let you get access to variables when you're pulling up modules things like that so just powerful interesting and something that you should know about now go back to do and your political comments you Republican Democrat independent or other channel your inner Martha Stewart for this one we're talking decorators you've seen this set of functions before but the last time you saw him they were reversed and we had Rando on top ads 102 the random number generated here and that is possible because even though it's floating in the scope of this Dec function it can be read by the inner function and then the call gets returned not executed in here because there's no parentheses it gets passed into this Rando Dec variable and then we execute it with the parentheses okay that didn't make sense watch the last video so let's do do it and what we get is exactly what we expected let me run it a few times you can see that we keep getting our random integer added to the big number so this is basically what a decorator is shorthand for decorators can be thought of a really simple way to take a general common function that you want to modify a lot of other functions so it doesn't come up all the time but I'm telling you that I never saw decorators like seven eight years ago and now they're coming up all the time so my most recent real world example of dealing with a decorator is if you connect to Google's cloud infrastructure they have decorators all over the place and they're really powerful because you can make a function that does some kind of complicated computation and then you'll add a decorator which are these @ symbols and then the name of a function that's been defined as a decorator and what happens is Google takes your output and then sends it up into its cloud infrastructure and can then paralyze it or do processing or host an app in the cloud it can do a whole bunch of functionality that you don't need to worry about anymore you don't have to write all that stuff because it's general everybody wants the app to be fast so you just add the decorator at fast to your function and Google figures out how to make it go fast so with the world of API is and this Internet of Things I think you're gonna see decorators popping up more and more now what they do is sort of a shorthand it could all be done with functions being passed into functions but there's a lot of cases where it's just a waste of time to write all that stuff so a decorator is something that you want to be general something that you want to apply over and over again like if you had a house but you wanted every item and every wall and the house to be pink you could write a decorator that says no matter what the thing is after it's made and put in its place color at pink right it's like bringing a can of spraypaint in and just painting everything that you own pink you would make that function of spraypainting everything pink a decorator because it would apply to so many things and it's really not that useful if you're just gonna do it once like up here it would be just as easy to make this two functions as it is to make one function that's a decorator and then apply it here is a situation where you might want to use a decorator you might define like at the top of your code a topping we're gonna think about cakes in this example as our sort of mental visual pneumonic so you imagine the topping of like frosting and it can be put on any cake it can be put on a chocolate strawberry or vanilla cake we just pass in any cake this is a variable that we've defined and to make it a decorator function we just need to do well nothing we just call it later using that symbol so it's really easy to make decorators and even easier to use them here we pass in any cake and the cakes in this case are going to be a number for chocolate one through 10 for strawberry 11 through 20 it'll be a number here and then we just do the same thing we add 100 to it and then send it back for executions or just like what you saw up here we only now need to write one topping function because we know that we want frosting on all of our cakes and then on each of our cakes we just add at topping so the way to think about it is whenever you see that at symbol and then some kind of word you automatically know oh that's some function somewhere else in my code and once this logic executes it's gonna go traveling up here and go into there so you can just take all of this and then pass it into topping and then all of this and pass it into topping and you can see when we run chocolate cake what you think might just do what's here in the definition like you think the code works down in fact that's that is one interesting thing is that you can always think of code as moving down the page except in this one situation this is the only thing that's popping into my head right now is times where you can add something above the execution line and it actually works that's interesting so here we call chocolate cake and it does run all of this but it takes that return and instead of just giving it to you down here in the call like it should it then puts it into the topping function it automatically goes up here and passes it into that so you can see when we run chocolate cake we get that random number one through ten and then it's added to 100 and we can do that over and over again and we'll see that we'll always get a number between 1 and 110 now moving down with strawberry our number that's random is gonna be between 11 and 20 so we got the same thing but these numbers are always gonna be between 110 and 120 and then doing it one last time you can see it works for a vanilla cake too so you can imagine if you had thousands of these functions and you really just needed to add this little topping or you have like a handful of these toppings that you sort of memorize like shortcut functions that modify it in some way especially something like cleaning up text before it goes out or like rounding digits up so that they're whole numbers because you're presenting them to the user or in some kind of a graph like it's great to just have a little function that does that and then you can just apply it to everything that comes out so hope you're feeling very much like Martha Stewart now and you're still imagining that weird pink house subscribe to our mnemonic Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations welcome to this howto video on comprehensions and now the reason I broke this out from the other videos is because we're really not learning any new core functionality we've already learned how loops work some of the amazing things they can do and comprehensions are just gonna be a way for us to shrink this code it's gonna be notation it's gonna be shorthand and we can do all sorts of cool things in a much more simple way so we're gonna start by looking at types how do we handle the different group types like lists dictionaries and sets then we're gonna talk about operations how do we use comprehensions and still bring operations that we might need in then the same with conditionals how can comprehensions and conditionals work together we're gonna talk about nesting you know we can have loops inside of loops so can we have comprehensions inside of comprehensions we sure can and we'll talk about why and then we will talk about using range and finally a generator can also use comprehension so they can use our yield statement and have that same overtime functionality with the pause that we talked about and finally we're gonna look at a fun fizzbuzz problem a problem that you'll very likely get on your very first programming interview and how we can do that in comprehensions to make you look super sharp when you solve that problem all right let's do it so we're gonna go over lists dictionaries and sets to start with so first off let's look at a regional way we might go through a loop over a list so we've got this list to find it's just got some strings in it we call it old so it's full of prunes and wrinkles and wheelchairs and such and then what we could do before was write a for loop we could say for I in old and we know what we're doing here is saying old must be something that we can iterate over and this I stands for the individual elements the pockets if you and we're gonna take each one of those and perform this method of append onto a blank list so we end up with a new loop list okay simple enough so how would we do that with a comprehension that only takes one line instead of one two three well we could just say for I in old just like we have up here and the logic that we would normally have inside is just put right here now logic in terms of operators would go here like a multiplication and we'll see that down here in a second but we don't actually need to take a blank list and then append it because this comprehension is inside of the brackets and look brackets are how we make lists so these are important again this is not a not a willynilly kind of bracket situation that's gonna be important if you want it to be a list curly braces are gonna make it a dictionary or a set let's look at that next boom prunes wrinkles in wheelchairs fin okay dictionaries now this one's a little bit more tricky because we have keys and values so I made a couple lists here now these are just classic lists you can tell by the brackets of superhero identities in real life and as heroes you know Bruce Wayne and Batman Clark Kent and Superman etc so the way we might loop over this dictionary in our previous how videos would have been to say four key and four value in and then we would zip the two together and then go over them so here we're making a blank dictionary you can tell by the brackets that we used and then we say take that dictionary and add R which is our key and make that equal to value so make that key equal to that value that comes through from the zip this new dictionary called loop dictionary and it consists of these key value pairs which was everything that was in these two separate lists but can we do the same thing with comprehensions yes we can dictionary comprehension looks pretty similar right for key value in zip just like we had up here take what was inside nested loop it up this way accept the fact that we're using a dictionary is defined by this outside comp dict done cool huh okay so lists and dictionaries no sets are close to lists but one thing that's a little bit different about them of course is that you can't have duplicates the old way of dealing with this would have been for n in nums we would have just added it kind of similar to append with the list but the comprehension way we can put the curly braces around it and you're probably thinking well you just put curly braces around around this comprehension so how could how does it know it's not a dictionary comprehension and that's just because pythons smart enough to know that we don't have keys and values we just have I guess just a value here or a key a key and value are squished into one it's a symbiotic relationship but just because we're not saying and like if this was like K V then it would be expecting something that was a dictionary to come in but since it's getting numbs which is a list it's all confused so we just make it a simple element that can be put into a set so my set was created on the fly there no need to do this part like watch this I think we can just do set set boom same thing right so don't don't don't let that trip you up you don't actually need it to say my set there we have our our own set and then just the very last thing is that when we do this with the square brackets just remember that we're making not a set but a list so we are gonna get all of our duplicates so the difference between duplicates and not duplicates is curly braces for none and brackets for a sequential order that does have duplicates all right there's the basic types lists sticks and sets all right now let's look at operations and the good thing is you've really learned to everything you need already you know how loops worked and then you just saw some examples of the basic comprehensions with basic group types so now we're just gonna add some layers to it and this is just kind of a nuance thing that you'll get familiar with over time on where to put operations and conditionals when you're doing comprehension so good to just play with this one this is a great notebook for you to just goof around with or test yourself and see if you can recreate some of these just to get familiar with them I'll show you the first ones now so we create a list of nums and this time we're just saying no change and we're not assigning it to a variable so it's basically just gonna print a console because we're inside a jupiter notebook and it's gonna stay a list because it's in the brackets around it so it makes sense that it looks exactly like it did before then we're gonna take a multiplication of each of them so now we're saying for each element in this list multiply it by two and you can see this would be the logic inside of the for loop we just put it in front so I like to think of it as something that would be like right it would be underneath this and it's now like moved up and to the left so it's in front now an easier way to read this as the old way would be like for aya nums and then it would be do this multiplication so same thing we're gonna get what we expect the multiplication and everything has been multiplied by two and now I'm gonna show you just one more kind of layer so we're saying for this in nums we have our answer here now when normally we would do our logic because we want our logic to be behind an if statement we put it at the end if then go ahead and print if not don't this is gonna be only our even number think we could just you just do multiply two again right there if you wanted to see that just for those few that is selected here those two that is selected you could actually do the operation on them there you go that's operations with list comprehensions but remember that could be dictionaries or sets or all sorts of different things next up conditionals pretty much just as easy the main thing to remember about conditionals and operations is operations usually are on the left like you we only have one line now so we take what would have been the top of our for loop or a while loop and now we say operation stuff is mostly on the left conditional stuff is mostly on the right if it's gonna be an if statement or something's gonna trigger on some kind of check you're probably gonna add that check to the right side of it so let's just look at another example here so we have a normal for loop where we're saying here's a list and then go through all the items in the and if it's a module Oh of two that brings no remainders then we know it's an even number so append it to my list easy enough just add that and then we just have our normal four and in nums which is just like for this item in my list or group type then we have our if statement which would you know normally be down a line but we're gonna keep it in one line because we're doing comprehensions and then you have the logic so conditionals go on the right operations go on the left well I'm sure you're all wondering what this exciting banana example is about well we're gonna make a dictionary and it's gonna be assigned different fruits and vegetables and ducks and babies and their number of best friends let's say so we have the key value pair separated by the of course the calmness changes the elements and the colon signifies the relationship between those two now one thing we could do in a normal function is we could pass in both this dictionary list and then this custom value that's asking for a string okay now this string is going to go into a function called starts with okay this is a method that's just built into the string function and one things we can do is put one of these dictionary comprehensions in the same line as the return so look at how convenient that is we've got this function that is pretty complicated it's bringing in a dictionary it's saying for these key value pairs sort them by only the ones that start with the letter B even though we have apples and carrots we don't want those we just want bananas and baboons and babies so we can put that all in one line and that's that's cool I mean that's it's easy to read we're saying for key value in this dictionary of items where this logic is applied returned both the key and the value and don't get too caught up on functions that's our next chapter but we're basically passing these things in and you can just see that comprehensions can be really powerful we've now sorted what could be you know a million item dictionary down to just the ones that are with the letter B or you know that maybe we just want baboon so we just type that in and it searches that whole key value pair so sorry it's very interesting when you think about it and down here we can take that and it doesn't have to be inside of a function we can just all of a sudden right here make it we can just say it's a dictionary comprehension and here's what it needs to do we could also you know give that a dictionary key value so now we have give which is our just wanted you to see how easy that is be happy baboons babies and bananas that's our banana example now let's talk about nesting okay so now let's talk about nesting comprehension so first off just gotta make sure that you know how to think about loops inside of loops or else this isn't gonna make sense in a normal way so just kind of recap we have an outside loop that we've defined as letter and it's got four pockets in it because it's string with four characters and then inside of that is another loop that has four pockets also this time it's a numbers inside of a list but it's the same thing so we can think of this as running just this outside loop once for a and then what is inside the loop well a whole nother loop that goes through four times so we'll expect just for a to get one two three four and then just for B to get one two three four so you can see that's exactly what we get we get four a's and then four B's and four C's okay and then just to kind of get your head around it if we add the print line up here so that it's not inside of the second loop we get it just once because that's actually what's happening we're doing it once but we get these you know four times it prints out so just to run that I want to make sure that you see that you'll get it once a and then one two three four and then B one two three four okay so that lets us see what a comprehension with two loops looks like starting here like our outside loop four letters in ABCD that would be like right here four letters in ABCD and then we have no no no way to signify to python just a space and then we start four again and no and then for num in our numbers which is the same as for num in our numbers and then the thing that would be the print statement in the most inner part the most nested part is going to be on the front here so it's not going to be printing from this level it's going to be printing from this level so we add that and we put it into this test list and we get out one two three four just like we expected here one two three four one two three four one two three four and one two three four so the syntax just remember it's just for right after a four and then whatever you put here is gonna be the innermost nested statement normally if we wanted to work with the range we might have a list like this one of a bag full of gold silver the blooms I don't know I'm not a pirate and jewels we can use this function length and it's gonna say one two three four I see four Puckett's that's the length of it and then range accepts an integer and the number four will make a range a list of one two three four so I'm printing before we assign here and then we're printing again so expect two print statements but I did this one because I want you to see that this is actually a number and then down here to see that it's actually the character is multiplied so down here you'll see zero one two three and that's because it found the length of for which you know we have the zero indexing and then it printed that out and then it said for the index of that number so for the first pocket take that pocket and then multiply it by five and what's in that pocket is a string so we end up with five pieces of gold and five pieces of silver and five two blooms so we're getting rich you know or da blooms however you want to say it now when we're doing I'm gonna do this just to reset it this respect to one with list comprehensions look we can just say in bag that would not work right here if we take just bag and say you know run that we're gonna get an error because it's got strings inside of it but down here it's smart enough to understand that we want to take that item and we want to multiply it by five and get five of our the blooms and gold and it can handle the range by just sort of understanding that if you're in a comprehension it's a range cool huh there is our powerful yield keyword so if we're gonna use comprehensions for a list we've seen this before we take our element we can do our operations to it we say for X in blank and then we have our group item here our group type so we run that and you can see that we do have a list just as expected because we have brackets on the outside the way that we make lists but if we use parentheses which normally would be a tuple if we weren't working with comprehensions but we have the same logic the for loop and the group item we end up with a generator interesting so that's the way to think about generators with parentheses around the outside and then of course we can convert them back and forth using our normal function our inner function or our list function so there you go just a little glance at how you would work with generators and comprehensions and now finally for my favorite thing fizzbuzz always reminds me you have a soda is that something from the Simpsons is Cola or something it is Bart Simpson drink not important don't stand topic can't believe I only had one Z and fizzbuzz that's such a lame error anyways it's fizz buzz with two Z's it's a little program a little test that a lot of newbies get and the goal is to write a program that prints numbers from 1 to 100 but for multiples of 3 it prints fizz for multiples of 5 it prints buzz and then for multiples of 15 it prints fizzbuzz and sometimes there's little variations of that using comprehensions we can write it in one line so you look very impressive if you do this at your first job interview so I think you should play with this on your own and make sure you understand how it kind of fits together and here is what we're doing or at the end we're creating a range in here you can see a handful of these statements where they start repeating module o3 is equal to 0 and then we say else and then we kind of keep going down so here it is in one line boom visit buzz print it all in a big long list one two fizz for buzz five fizz and then seven a areata this is the same line we're just spacing it out so you can read it a little bit more but this is a one line solution and it's the same as up here but this way you can see it a little bit better so we're saying to print this and then we say if X is the module O 15 and that is equal to zero elfs and then yadda yadda and then else yadda yadda and then L so then we do this for the range 1 through 100 you'll see this will print the same thing but just a better way to look at it very cool very fun fizzbuzz away with two Z's and we are done with comprehensions I think it's time to go visit our memory palace and get a little crazy before we move in to the allpowerful section of functions functions functions functions functions functions subscribe to our new Manik Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations come in today's lesson we will be learning the how of programming by reviewing code examples that demonstrate the ways we can work with recursion iteration and generators so recursion is defined as something that calls itself and we're gonna look at a couple examples that demonstrate a factorial and a Fibonacci sequence return then using classic iteration and getting the same result as recursion then compare the difference and finally we're gonna talk about generators now generators are an entirely different type of object in Python and they're very powerful because they have the ability to generate their returns each sequential step which allows us to pause or halt the system in many different places and that can be a really powerful thing we're gonna look at the time it takes to execute generators we're gonna show a couple examples of generators and traditional looping iteration so get ready because this is gonna be an exciting lesson that hopefully is explained clearly enough that you don't have to iterate over it too many times let's start talking about recursion let's start talking about recursion let's start talking about recursion in the sense of factorials so here is what makes recursion recursion it has a mini version of itself inside of its own logic it is a tricky thing to get your head around but the important way to look at it syntactically is when you see the name of a function up here repeated again somewhere inside of the logic but another way to think about them is that they're sort of stacking on top of one another in sort of a pyramid shape so when we look for factorial 5 we then need to wait for a whole new function which is actually getting the input of 4 instead of 5 to find its answer which is then waiting for a whole new function which gets the input of 3 not 5 or 4 to get its answer and then when it finally gets to the answer when it finally gets a 1 input and it gets a return then it solves this one which solves this one which solves this one which solves this one back up the chain so the way to look at this inside is usually with an ifelse we're saying finally if you get to the input of 1 we have an actual answer for you but other than that we're just explaining the logic that's it get you to the answer no matter how far out you are from the number one and you can see that right here we're taking the number n which we're gonna put in this five could be any number and then we're multiplying it by this exact same function but that function is taking in the number five minus one and so on and then the next one and the next one and the next one let's just run this and you can see that each time we print it each time it made one of these we had a different print statement here so even though you see one print statement we do get it printed out five times because each time was a whole different function this whole function is inside of just this call to another whole function which has a call to another whole function so that is how you think of recursion and why it's different than traditional looping so now let's show another example instead of the factorial example I'm looking to create Fibonacci if you don't remember the Fibonacci sequence it's 1 plus 1 is 2 and then 1 plus 2 is 3 and then 2 plus 3 is 5 so one of the ways we can do this using recursion is by calling a function that is decremented by 1 and then adding it to another function that's decremented by 2 we're running this exact same process we're saying to get this answer first put in that one and that one and then to get that answer put in that one and that one so you can see we can actually run this we get this thing out of the way you can see we could actually run this function multiple times so each one of these is a separate call but I wanted to show you that it does make the pattern if we recall the first place the second the third the fourth the fifth and so on in the list so you can see that we can get it that way but another another example of being able to find the actual function with some kind of different argument inside of the exact same function with the original argument and then something modifying it down there okay so that is recursion in a nutshell nutshell nutshell nutshell now let's talk about iteration because iteration is a more abstract notion and the same way recursion is it's a conceptual thing that goes beyond just Python or a single programming language an iteration is simply the process of doing something to every element in some kind of a sequence I always think of it in my head first as a list a list of items and you're doing something to all of them like if your actual notepad like a physical todo list I consider that iteration when you cross out each item when they're done you say is this item done you do the logic and then you cross it out but that pattern of crossing out happens the exact same way to every element on your list every to do that you finish so the way we would define this and this is just a reminder that that's what the Fibonacci sequence output is that we're looking for so this function this iteration version of the Fibonacci sequence is a little bit different you can see that we start with two assigned variables a and B 0 1 1 and then we say for I in the range of 0 through n so this is going to make a list because we need a list to iterate over that's as long as the number that we input so in this case it's a list it's one long in this case it's a list that's six long and then what we do is we take that list and then the logic that we use on every single item is that we make the item a the equivalent of what was B and now we change B to what is a plus B and that does the same thing as a plus B and then it becomes a a plus B becomes a and we can do the exact same thing to get the Fibonacci sequence just as we expected the 1 1 2 3 5 8 and the 1 1 2 3 5 8 up here maybe that gives you a little bit more of a sense of what it's like to work with iteration versus recursion talk about generators this is a very powerful object inside of Python for its ability to work asynchronously for its ability to pause its state let me just show you traditional example of a loop that has the logic for squaring because we're gonna use this as a comparison for the generator 1 next just to remember how this works we have a function it's called loop squares we're gonna pass in these numbers and then each number is going to get squared by itself and then it's going to be appended to a list so we have to start with a blank list we have to run through each of the items like in the way we just talked about in an iterative way iteration and then on each iteration we are going to append that result and then return the final list when we're done so we run these two cells and we get exactly what we think it did a type check here on the return numbers it's a list and then there is the list itself so now let's look at how we would do that exact same thing with a generator in less lines of code and arguably in a more powerful way depending on your use case so this generator version does the same thing by starting a function and as the same inputs and we're gonna input the same numbers we have for I and noms which is the same as I here for each number that we have in the list and it does take a list we can't just put in the number five and it makes its own and although we could build it that way but the point is it needs a list at this point before the yield statement and then the yield statement which you haven't seen before a brand new key word is the equivalent of the logic in this case append but any other kind of logic to and the return all wrapped into one but it's a special type of return because it's not just returning any object it is returning a generator object the yield keyword is crucial for returning a generator object what we're saying is don't just return any variable like our normal return can we need you to send back an actual generator type of a variable and because of that we have the ability to keep some of the logic inside of it and execute it one by one so what I mean by that is that if we run this function and then we look at the output we actually have a generator object now remember before we actually got back our list and by printing the list we printed the list when we try to print the generator we just print something that says I am a generator we don't actually print out all of these numbers they're sort of unprocessed they're more raw you could say and the reason why they're more raw is because we need another function after that to push through each step so the logic for two times two which was done and then appended to this has not been done yet it's actually the logic two times two is inside of the yield statement it's inside of our object right here so when we say next and then we look at the generator object that we got out then we find our first result so the number four comes out and finally only at this point have we processed two times two so sitting in here in the next step in the generator is three times three it hasn't been done yet but by calling the next function we get it nine and so on down to sixteen so that's the difference is it's bringing in the entire logic and waiting to execute it until the time is right and there's certain reasons why working asynchronously is powerful like something with a server where you're waiting for a response from someone or there's some kind of thing that needs to happen before the logic is processed so you can see how powerful they are another thing about them is supposedly they're a lot faster okay now I'm gonna be real upfront that these tests are not demonstrating what I read think I'm on the right track when guiding you this way but I want you to be aware that I'm not solid on exactly why these times are coming out the way they are when we use our timer function in Jupiter what we'll see is the amount of time it takes to create this function and then down here how much time it takes to call it and they're doing the same thing they're both processing the same list the numbers 2 through 6 and they're doing the same logic the multiplication here so arguably one of the main reasons you would use a generator is because it saves time it's not gonna be as computationally heavy it doesn't need to run through the entire list you can run through it piece by piece on an asneeded basis but beyond that I actually thought that doing the generator by itself would be faster like it's just a more efficient way all around to handle it but with a use case this small it comes out to be about the same amount of CPU cycle so you might not see it but I did want to show you how we could run something like this so you can see up here on the wall time it took 3.1 this is M us which I'm gonna assume is milliseconds but I'm 100% sure on that but 3.14 up here and then it took 3.14 down here so creating the function putting the yield logic together or in this case running the loop and appending all the logic to the answer they took the same amount of time but now when it actually comes to calling the function down here and processing the list you'll see that it took 5.1 and down here it only took 4.05 so even though we have all of these calls it's kind of amazing like next generate object next generate object which we think take more time it's like starting and stopping all of this over and over again you know they do come out being more efficient as a whole so my point is if you're gonna be working with a gigantic data set and down the road when you're you know a real high paid programmer and you're doing crazy stuff with big data sets you should revisit the concept of whether you should use a generator and see if there might be ways to get more computational gains out of it as a beginner it's not a thing to worry about but it is a thing to know that there is time differences between the way we write code just one more example it's just a different version of kind of what we started with but I want to make sure that you see the difference in the yield statements and I found out that surprisingly my name backwards is super cool and I was really proud of that and wanted to share it with you we have a couple of different functions here one that's going to use a generator and one that's going to use a regular loop so in this one we're gonna be importing a string of characters in fact my name DUI LAN it's gonna be an argument that passes through here we're gonna get a number from this the amount of letters minus one so we have we have five characters here so this is gonna return the number five but then we're gonna decrement it by one so we end up with four in here here we're gonna create a brand new list an empty list with no items inside of it and then we're gonna make a loop and we're gonna say while the count and this count appears four is greater than negative one then I want you to append something to this list and that thing that you'll be appending is the text count so it will be this and then in the slicing bracket it will be this count so it'll start with five and then four so what it'll be doing is appending that letter than that letter then that letter each to this list so this list is going to grow from being empty to being this but it's gonna work backwards and reverse my name and then just to make sure that our while loop does eventually end we take this count variable here and we decrement it by one using our shorthand notation our shorthand assignment notation right there because this is a word this is a string we want to create a blank string called new and we want to join this new list unto here but we totally could just return the list but it just makes more sense living in this case to make it a string Dillon backwards is nailed like my name is nailed like nailed it Dillon pretty cool I think let's look at it in generator version so here we have the same thing reversed we're gonna pass in an argument we have the exact same argument except we're making it into a generator and then running through each part of the generator using an outside for loop our inside for loop here meaning inside of our function so this is quite a bit different looking but I wanted to compare the two so you could see that they actually could be interchangeable we could use a for loop up here instead of a while loop it would just look different so I wanted you to maybe play with these two and kind of get your head around why they're different but why they kind of work the same and here we're taking that same string that comes in my name dy LAN and we're breaking it down into how many letters it is using the Len function so we end up with five and then we are sing one in the same way we did in the same way we did up here so we end up with four but then you'll notice these other two minus ones which are pretty unusual so these allow it to loop around and then also to skip in increments of one so if you remember back to when we worked with our range function in loops the range had a start a stop and it had a step function so we can use all of those in this to create the kind of range that we need so a little bit different than the count approach but it works and then when we're in here we do a very simple piece of logic instead of needing a pend which is only a method of the list out that we had before we can just yield the logic itself which is slice this right up and then put this into a yield statement piece by piece so we can get it out later so when we run this you'll see that we get the exact same thing and in this case we're getting it back out as a generator so we don't need it as a list or a string but you can see it totally worked so we ran the function we saved the return into it generator because we know it's a generator object and generator objects can be looped over so we just said for I in Jen print I and then all of a sudden you get nailed thanks nailed it all right you lovely generator people who know about recursion and iteration thanks for listening and enjoy the next lesson subscribe to our no Manik Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations welcome in today's lesson will be discussing the why of programming by reviewing mnemonics and having a discussion that relates to the following topics our first topic is going to be debugging we're gonna talk about what a bug is the difference between bugs and features in the surprisingly gray area and then we're gonna talk about what the action of debugging actually looks like then we're gonna move over to something called a stack trace we're gonna talk about what that is how to read the stack trace and what it means we'll talk about exceptions what are exceptions we'll talk about the difference between a syntax error and an exception and then to follow up on that will talk about exception handling we'll talk about what that means why it's different from regular exceptions we'll talk about the keywords raised and finally we'll talk about what the keyword raised actually does and what the keyword finally actually does so remember that there's only 12 giant pandas in captivity in the United States it's really not that many so our first pneumonic today is going to be a wonderful ladybug and it's gonna represent the topic in general of debugging and the reason I chose the ladybug for our mnemonic is because it has the word bug in its name and it is a bug it's double bugged just like some of your code might be so what is a bug well a software bug is an error flaw failure or Fault in a computer program or it's system that causes it to produce an incorrect or unexpected result or maybe even just to behave in unintended ways and because unintended ways can be hard to define it's the same reason why bugs and features come in many shades of gray if you don't clearly define the functionality that you want to achieve sometimes a bug becomes a feature or a feature becomes a bug so what is the action of debugging well debugging is the process of smoothing out these bugs or replacing the parts that broken once you have a clear definition of the functionality you want when that functionality always occurs you have a bugfree code but it almost never happened because there's so many use cases that you can't predict so debugging is a spectrum and it can be easy it can be as simple as a print command that prints a variable at a certain point in the program and you notice that it's wrong and make a quick fix or it can be as complicated as introducing new complex debugging code which just tests for subtle changes between your expected outputs and your true outputs and there can be so many layers to this both nested inside of functions instead of functions or in simple decision tree style complexity where you have conditionals that are layered on top of each other so there's a big spectrum to debugging so our next pneumonic is going to be a giant Ginga and it's gonna represent the topic of a stack trace and the reason I chose this giant Jenga game is because the process of playing that game Jenga is sort of similar to a stack trace in the sense that we're looking up and down this pile right we're analyzing which pieces can be separated which pieces can be moved and we're guessing how that's gonna affect the balance of the overall structure and in the same way we're looking up and down this code trying to imagine how it's going to affect the overall output so what is a stack trace well a stack trace is a report it's a report at certain points in time during the execution of a program so it's gonna take each line like a step and we're gonna be able to see a list of the method calls but the application was in the middle of when the error occurred aka an exception was thrown let's talk about how to read the stack trace because not every bug will have a stack trace but many do and if they do this means that the bug is not on the surface level of your code but instead it's wrapped up deeper down and by deeper down I mean that the order of the code that it's compiled in has different layers to it and our bug might not be on the top surface layer so it could be deeper in scope like inside of a function or it could be deeper in the source modules being imported so it's of starting at the top of our code we just start with our topmost method call and then often this will get our attention close enough to the problem that we can work through the rest so our next pneumonic is going to be China's red flag and the reason why this represents the topic of exceptions is because it's literally a big red flag that you can remember and exceptions should be thought of as red flags that need to be addressed so what is an exception well imagine if somebody passed in a string argument when your function only works with integers exception handling is how you deal with this so what's the difference between a syntax error and an exception well syntax errors which are also known as parsing errors these are syntax problems and I think of them similar to just misspellings or typos you probably just type something in wrong and if you look closer you'll see that you're missing a semicolon or something like that but even if a statement or expression is syntactically correct it may still cause an error and in those cases you have an exception and the reason I chose this for the mnemonic is because in the same way that a practical joke works exception handling is all about bringing attention to the unexpected so what is exception handling well exception handling is about making sure that we have variables that don't break our code in some way so this is gonna be similar to how we had our conditional section before we're gonna want to do exceptions to make sure that our variables are what we expect they are at the right times exception handling is a process of responding to an unwanted action during either the compile time or the run time which we'll talk about in a second so we're gonna want to know a couple of key words for this specifically the key words try and accept going back to the conditionals these are very similar pythor's us these conditional type keywords to help us find where our code goes wrong in the sense of a variable not being what we expect it to be let's zoom in on this try keyword so kind of like our conditional that had an if statement where we could say is something equal to some variable our try statement is going to check to see if the exception is the type that it expects so remember when we have an exception there is already a type that it can have when we downloaded Python many of these exceptions already exist we can add a few more but there's already dozens and dozens they come with Python so that's what we're gonna be checking for and we have a few options we can try with no exception we can try with a match type so the exception we get matches the one that we're telling it to look for or we can try with a type mismatch meaning if it's anything except the one that we want so let's talk about trying using the keyword try with no exception so first the statement between the try and the accept keywords are executed probably able to see this better in the next video when we're actually looking at code examples but you can imagine it a lot like our if statement from before and then if no exception occurs the except Clause is skipped entirely and the execution of the try statement it's finished and we also have try with a type match so in this case if an exception occurs during the execution the rest of the Clause is skipped and then if it's type matches the exception named after the accept keyword the except Clause is executed and then the execution continues after the try statement and then finally there's try with a type mismatch and sort of the opposite to the others if an exception occurs which does not match the exception type named in the except Clause then it's passed on I feel like I feel like you'll probably understand that better in the next lesson so you know I said the things right I think it's like all over the place until you sort of see the spacing and stuff so roll with it in the next video so now let's talk about a couple more keywords that go along with that and we're gonna use the pneumonic of a cosplay woman raising her sword and it's gonna represent raise and finally two more keywords that we're gonna use for debugging and the reason I chose her is the mnemonic is because when you see someone looking at you and then they raise that sword you know something's wrong and these will tell you something's wrong to just these are exceptions that one means you're gonna get killed okay so what does the keyword raise do it's focusing on that one first so raise is a way to override the default exceptions in a way that we want so what does the raise keyword do so let's focus in on that now the raise keyword is a way to override the default exceptions in any way that we want so we can display information that we need to to other developers and to users so I mean in a nutshell raised just allows us to define our own type of exception errors and really you don't need this too often Python has the main ones already built in but every once in a while you have a special use case where it's good to know that you can do this now how about the keyword finally what does that do well we can use the finally statement to ensure that a block of code is closed at the end of the file even if there is an exception that causes the interpreter to break so we have something that stops right in the middle of the code but we still need the code to jump to the bottom and close something up or release something to make sure that it actually is pulled away in the correct way kind of I kind of imagine like on your computer when you like pull out a USB stick without clicking the thing and it's like uh like that's the way you can think about this so times when you might want to do something like this is when you need to close out an Open File at the very end of your program or something like that and for a final pneumonic I want to group together some of these exceptions into runtime and compile time exceptions so our mnemonic a marathon runner and I chose a marathon runner for the run time and compile time because a marathon runner is keeping track of their runtimes like on their watch and then I also think of the compile time is maybe the big number thing that you'll see at the end of like runners there big finish line number you know and also I kind of think compile time sounds similar to a mile time so you might want to think of it that way too but that's up to you so now let's talk about grouping these errors into two different groups one for runtime and one for compile time now studying with compile time this is when we're first executing the code on RN not when the user is actually using it compile time errors happen when we feed in a whole bunch of text to the compiler it's reading the code that we just wrote and it's converting it behind the scenes into machine code ones and zeros so these compile time errors are usually syntax errors meaning we type something wrong they're typed keen errors like where we use a variable that's say type string but we're using it like it's a type integer and it doesn't know what to do and then in rare occasions that never happened to me but when I read the documentation I said it happen there's compiler crashes where you just have to like shut your IDE down or the Jupiter notebook breaks in our situation okay and then there's also the runtime errors and these are the errors that will be used when somebody else brings up our program and there could be say a division by zero meaning somebody put a zero into our code from the user end and it did something weird broke gave us an error great staying with me on this lesson so let's end with a quick summary of the mnemonics that we just learned and the concepts that they represent now our first mnemonic was a ladybug and it represented the topic of debugging in general we learned that bugs are pieces of code that produce unexpected results we learned that bugs and features come in many shades of gray and we learned that debugging is the process of smoothing out these bugs once you have a clear definition of the functionality that you want next we learned the mnemonic of a giant Jenga set and it represented the topic of a stack trace and a stack trace is a report and this report can point to different points in time as the computer compiles our code and some different techniques to read this stack trace and understand it and our next pneumonic was a giant Ginga and it represented the topic of a stack trace and we learned that a stack trace is a report and it's a report that talks to us about our code in different points in time as it moves its way down the code from top to bottom and then we talked about some of the techniques to look at the stack trace and get some intuition about what might have gone wrong then we learned the pneumonic of China's big red flag which represented the topic of an exception and we learned that exceptions occur even when we have written our statements correctly and it often has to do with what's inside of our variables after that we learned the mnemonic of one of those hand buzzers that like a clown would have or the Joker and it represented the topic of exception handling it's how to handle those red flags and we learned that exception handling is the process of responding to the unwanted actions either during compile time or during run and then we learned the mnemonic of a warrior princess as she raised her sword and it represented the keyword raised and the keyword finally and zooming in on them we learned that raise is a way to override the default exceptions in any way that we want so we can display information that we need to the users and other programmers and then we learned about the finally keyword which lets us run a special block of code at the end of our file which helps us either disconnect from a server or close out a file or something else that might cause a problem if we don't make it all the way through our code and our final mnemonic was a marathon runner who is keeping track of their run time and also looking at their final time on the finish line and this represented our run time and compile time errors so we learned some of the things that would happen at the different times and which kind of errors would be grouped into which ones and then our final mnemonic was a marathon runner and he was keeping track of his run time and then also his finish line time and this represented our run time and compile time errors and then we talked about how different errors can fall into these two different groups so I think we've had enough theory for now why don't we pull up our old trusty Jupiter notebook and start looking at some of these examples in code subscribe to our new Manik Academy YouTube channel for daily uploads that will help you learn amazing concepts through effortless associations you