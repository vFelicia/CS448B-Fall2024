00:02 - hello fellow scratchers do you want to
00:06 - make a zelda style rpg in scratch well
00:09 - this is the place to be if you've
00:11 - managed to catch any of my rpg devlog
00:13 - videos then you'll know what's in store
00:15 - and i can tell you it's really
00:17 - really exciting not only do we have
00:20 - scrolling tiled maps but the tiles are
00:22 - layered support height and depth we have
00:25 - a fully animated player sprite as well
00:27 - as animated tiles to bring your levels
00:29 - to life we'll implement clever per tile
00:32 - collision regions so that we can get up
00:34 - close to our levels and also allow us to
00:36 - move in front and behind tiles how cool
00:40 - is that and wow don't get me started on
00:43 - the awesome built-in level designer
00:46 - that's just crazy cool have you ever
00:49 - seen anything like it in scratch before
00:51 - and look at all these beautiful tile
00:54 - costumes we have over 500 of them what
00:57 - that's crazy a huge shout out to the
01:00 - pixel artist oh lobster for these and
01:03 - you can find all of them in a scratch
01:05 - starter project linked in the
01:07 - description under this video however if
01:10 - you prefer to use your own costumes or
01:12 - source them from elsewhere then that is
01:14 - just great everything will work just
01:17 - fine now obviously we have a lot of fun
01:20 - things to cover in this series but we
01:22 - have to start somewhere and today in
01:24 - episode one we will be focusing on the
01:27 - player specifically adding a solid game
01:30 - loop to carry us through the entire
01:33 - series and then player controls and
01:35 - movement getting that diagonal movement
01:37 - to work just right not too fast and not
01:40 - too slow is the real trick stay tuned to
01:43 - learn how we fix that and finally we'll
01:46 - add in that lovely player animation
01:49 - getting things looking really pro
01:51 - costume naming is key so make sure to
01:54 - stick around until the end of the video
01:55 - to learn my clean and concise coding
01:58 - tricks
01:59 - are you ready for this i know i am guys
02:02 - let's get scratching
02:05 - we'll begin by checking out the starter
02:07 - asset project click the link in the
02:10 - description under this video or you can
02:12 - find it by visiting my griffbatch tutor
02:14 - account on scratch
02:16 - the first time you visit the page you'll
02:18 - need to give it time to load as it's got
02:20 - lots of assets and i mean a lot of
02:24 - assets in there this time
02:26 - if we look inside we have a player
02:28 - sprite no scripts but plenty of very
02:30 - cool costumes these ones i downloaded
02:33 - from opengameart.org
02:35 - and all the credit goes to the user
02:37 - virial veriel very l
02:40 - you'll find all the costumes are
02:42 - designed to face in four directions up
02:45 - down left and right and they are all
02:47 - animated beautifully yeah really cool
02:50 - these we'll be using today but there's a
02:53 - lot more in this asset project to look
02:55 - forward to the tile sprite alone
02:57 - contains 500 costumes wowzers each 16x16
03:02 - tile was hand drawn by the awesome pixel
03:04 - artist oh lobster and wow is he good so
03:07 - a huge shout out to him for making this
03:09 - resource available to us thank you man
03:12 - moving on you'll find i've made a
03:14 - pleasant pre-tiled background sprite
03:16 - full of grass yep useful
03:19 - then we have a neat font sprite you can
03:21 - refer to my text engine tutorials to
03:23 - learn how we are going to make use of
03:25 - this later on in the series
03:28 - lastly we have the asset project
03:30 - thumbnail yeah we won't be needing that
03:33 - right so let's hit remix and we're ready
03:37 - to go
03:39 - this is the scratch rpg
03:42 - episode one
03:44 - the first thing i'm going to do is just
03:47 - click on the thumbnail sprite and hide
03:49 - it
03:50 - oh wow look at the size of that player
03:52 - sprite click back into the player now
03:55 - shall we do some coding
03:57 - when green flag clicked
03:59 - we want to set things up so start by
04:01 - setting the sprite size to 200 and then
04:05 - click that script
04:07 - here we go so the first thing you'll
04:08 - notice is that all the graphics in my
04:10 - rpg have that retro pixel art vibe a
04:13 - size of 200 means that we see all the
04:16 - details that's so cool
04:19 - next up we'll make the player face us
04:21 - switch costume 2.
04:23 - so now is probably a good time to talk
04:26 - about how we've named these costumes
04:30 - the first part of the name indicates the
04:32 - action being performed by the player
04:34 - idle means they are just standing still
04:37 - the next number indicates the direction
04:40 - they are facing i've used the standard
04:42 - scratch directions here so 0 is up or
04:45 - north if you like
04:47 - 90 is right 180 is down and negative 90
04:51 - is left just the same as the direction
04:54 - numbers here so to face the camera we
04:57 - want the idle 180 costume
05:00 - back in the code switch to the idle 180
05:04 - costume so that covers size and costume
05:07 - next up we need to talk about the
05:09 - sprite's position
05:11 - for single screen games we have the
05:13 - luxury of only having to consider a
05:15 - sprite's position on the scratch stage
05:18 - but for scrolling games we need to keep
05:21 - track of the player's x and y position
05:23 - on the entire level map
05:27 - for this reason we have to create two
05:29 - new variables
05:32 - player x full sprites
05:34 - now as a helpful hint you might notice
05:36 - that i always use fully uppercase
05:39 - letters in my variables that are for all
05:42 - sprites
05:44 - and now we need to create another
05:45 - variable player y also for all sprites
05:50 - we'll start the game by setting player x
05:52 - to zero and set player y also to zero
05:56 - great
05:57 - for now that's the setup done
06:00 - next up we want to begin our main game
06:03 - loop this is where all the action takes
06:05 - place the controls are checked and the
06:07 - player is moved and then we update the
06:09 - screen
06:10 - one thing you learn real fast when
06:12 - coding game engines is that we'll always
06:14 - need a way to start pause stop and
06:17 - restart these game loops so broadcast a
06:20 - new message
06:22 - start hyphen
06:24 - game loop
06:25 - it's nice when the event name is pretty
06:27 - self-explanatory i'll drop in a when i
06:29 - receive start game loop in preparation
06:32 - for all our coding but before we go on
06:35 - let's consider the stop game loop code
06:38 - when i receive a new message
06:41 - stop
06:42 - game loop
06:44 - and we can simply drop in from the
06:45 - controls category a stop block
06:49 - and we want to stop
06:50 - other scripts in sprite
06:53 - if ever we broadcast stop game loop we
06:56 - can be sure this will do the job
06:58 - cool so let's build the main game loop
07:02 - bring in a forever block the only thing
07:05 - that will stop this loop is that stop
07:07 - game loop event
07:09 - now we are going to use the same
07:11 - broadcast system we've used in many of
07:12 - my other tutorials here the first
07:15 - broadcast is a new message of tick
07:18 - player
07:22 - and the second is for
07:25 - paint
07:27 - player
07:30 - in summary this will run the tick player
07:32 - scripts first
07:33 - and then the paint player script next
07:36 - before scratch then hits the end of this
07:38 - forever loop and the frame is complete
07:40 - at this point the game screen updates to
07:43 - show the changes
07:44 - before this loop starts all over again
07:47 - the benefit of using this broadcast
07:49 - system is that it also allows us to
07:51 - synchronize our game loop across all the
07:54 - sprites in our game right now we are
07:56 - only working with the player sprite but
07:58 - later on we'll be adding the tiles npcs
08:01 - and who knows what else so we can look
08:03 - forward to all of that in future
08:05 - episodes
08:06 - quickly tidy up then and we'll begin by
08:09 - coding the when i receive paint player
08:12 - it would be hard to work on the rest of
08:14 - the scripts if we can't see the player
08:16 - painted to the screen and for now until
08:18 - we actually have a scrolling level we'll
08:20 - use a motion
08:22 - set x position 2
08:24 - and the variable player x
08:27 - and we have a set y 2 and the variable
08:29 - player y
08:31 - what this means is if we were to switch
08:33 - the player x reporter to be a slider
08:35 - variable then we can run the project and
08:37 - tada the player's position is linked to
08:39 - the player x variable this shows that
08:42 - the game loop is working perfectly we
08:44 - can do the same with the player y to
08:46 - check that it's working too that's great
08:49 - also if we stop the project without the
08:51 - game loop running you'll see that the
08:53 - sprite's position is no longer updating
08:57 - so our next job will be to add keyboard
09:00 - controls for our player
09:04 - when i receive tick player
09:07 - and yes first we detect the keyboard
09:09 - controls so make a new custom block to
09:12 - keep our scripts tidy
09:15 - name it player controls and tick to run
09:18 - without screen refresh
09:20 - have you seen my crazy cool joysticks
09:23 - tutorial if not then it may be worth
09:25 - giving that a watch you may even want to
09:27 - add it to this project the reason i ask
09:29 - is that we need to implement four-way
09:32 - movement and this is best described by
09:34 - the movement of a joystick a joystick
09:37 - has two axes of movement joystick x is
09:40 - for left or right and joystick y is for
09:42 - up and down
09:44 - we'll replicate that in scratch using
09:46 - two new variables
09:48 - joy x joystick x for this sprite only
09:54 - and joy y also for this sprite only
09:59 - for starters let's set joy x2
10:02 - from the sensing category key pressed
10:05 - we need to look for the right arrow key
10:09 - if you run the project here you'll find
10:11 - that the joy x variable now toggles to
10:13 - true when the right arrow is pressed and
10:16 - false when it's not
10:18 - now many times players will want to
10:20 - support the wazz keys wasd as well as
10:24 - the arrow keys for that we can use the
10:27 - or block and set joy x to key right i
10:30 - repressed or key d pressed
10:34 - now pressing either of these keys causes
10:36 - joy x to become true that's excellent
10:39 - so how about the left key
10:41 - duplicate the or block and change the
10:44 - keys to left arrow
10:46 - and the a key
10:48 - and here comes the fun bit we change joy
10:52 - x by
10:54 - zero subtract
10:56 - the left or a key presses
10:59 - the interesting thing about these true
11:01 - and false key presses or in fact any
11:03 - true or false values is that as soon as
11:05 - you use them in calculations the true
11:07 - value gets counted as a 1 and the false
11:10 - values become 0 so
11:13 - if we press the left arrow only then
11:16 - this second change will subtract 1 from
11:18 - joy x
11:20 - looking at the running project pressing
11:21 - right gives a value of 1 and left
11:24 - minus 1.
11:26 - perfect
11:27 - let's do the same for joy y
11:34 - set joy y to the key up arrow
11:38 - or the w key
11:42 - changing joy y by zero subtract the down
11:45 - arrow or the s key
11:50 - great we can just test that works okay
11:53 - by slapping that green flag and confirm
11:56 - we can toggle the left right up and down
11:59 - keys and the w a s and d keys
12:02 - nice work
12:04 - it won't be hard to get our player
12:06 - moving around from this
12:08 - come back to the when i received tick
12:10 - player script and we'll make a new
12:12 - custom block naming it try move with an
12:15 - input named dx and another d y
12:19 - this is the distance we want to move in
12:22 - tick to run without screen refresh
12:25 - so we'll make use of this new block
12:27 - right away right after checking the
12:29 - player's control keys
12:31 - and pass in the resultant joy x
12:34 - and joy y values
12:37 - now this define try move script later on
12:40 - we will need to perform collision
12:42 - detection and the like in here but for
12:44 - now let's simply move the player without
12:46 - worrying about such things change player
12:49 - x by the dx input and of course change
12:52 - player y by the d y input
12:56 - splendid smash that green flag
12:59 - holding down any of our direction keys
13:01 - should now send a player
13:03 - well it's fair to say they are hardly
13:06 - hurtling around the screen but it's
13:08 - fantastic that we've got movement in all
13:10 - eight directions that including
13:12 - diagonals now
13:13 - do check each direction of movement if
13:16 - any key moves the player in an
13:17 - unexpected way then now is the time to
13:19 - double check your scripts before moving
13:22 - on
13:23 - if you want a bit more speed to your
13:24 - player's movement and i certainly do
13:26 - then we'll do this in the tick player
13:29 - script
13:30 - just multiply joy x by
13:32 - 5 and multiply joy y by 5.
13:38 - now here's an interesting thing
13:40 - you may have noticed while playing other
13:42 - top down games on scratch that moving
13:44 - diagonally can make your player move
13:46 - considerably faster than just moving
13:49 - left or right alone
13:51 - this is because if we consider our joy x
13:54 - and y values before we added our
13:56 - multiply by 5
13:58 - moving up or right individually moves at
14:01 - a distance of one pixel
14:03 - but when we move both up and right at
14:07 - the same time the distance traveled is
14:09 - actually closer to 1.4 pixels and that
14:13 - is 40
14:15 - faster
14:16 - to fix this we need to normalize the
14:18 - joystick movement speed to account for
14:20 - these diagonals and the way we do this
14:23 - is to divide the joystick x and y by the
14:26 - distance a spot of pythagoras will give
14:29 - us that and there that looks perfect
14:32 - back in our code then make a new
14:34 - variable
14:36 - joy dist
14:38 - for distance and for this sprite only
14:42 - then set joy dist to the square root
14:48 - of
14:49 - and bring in a sum operator
14:53 - and two multiply blocks
14:58 - and we want joy x multiplied by joy x
15:01 - and joy y multiplied by joy y
15:05 - cool pop these in either side of the
15:07 - addition
15:09 - that gives us the true distance and we
15:11 - can test that by running the project and
15:13 - checking what values appear when we move
15:15 - around the screen we should see zeros
15:17 - and ones and 1.414214
15:22 - for the diagonals
15:24 - also see how the distance is never
15:26 - negative even when moving left or down
15:29 - that's quite useful actually so come
15:31 - back to when i receive tick player
15:34 - script
15:35 - bring in and if else around the try move
15:38 - there's no point now trying to move the
15:40 - player if no key has been pressed and
15:43 - now we can easily check for this when
15:44 - joy distance is greater than zero
15:48 - why not just give that a quick play
15:50 - through to ensure that nothing has gone
15:51 - awry
15:52 - and yes i can still move around just
15:54 - fine okay so next up we are going to be
15:58 - dividing the joystick movement by this
16:01 - distance
16:02 - the great thing about normalizing is
16:03 - that whenever you divide something by
16:05 - itself it always comes out as one so
16:08 - before we move set joy x to
16:11 - the result of dividing
16:13 - the existing joy x
16:16 - by joy distance
16:18 - and we do the same for joy y
16:23 - setting joy y to the result of dividing
16:26 - joy y
16:27 - by joy distance
16:30 - right that's how we normalize shall we
16:32 - give it a test
16:34 - oh this is great the normal x and y
16:36 - movement is unchanged but the diagonal
16:39 - speed has been rained right in and we
16:41 - can travel at a very consistent pace
16:44 - what do you think
16:45 - it's funny though but many people can
16:48 - actually find this change feels like
16:49 - it's gone too far
16:51 - i guess we are so used to the faster
16:53 - diagonal movement that the reduced pace
16:55 - can feel a little bit sluggish so much
16:58 - so that even games like zelda actually
17:01 - implement a special diagonal speed that
17:03 - is just that little bit faster than what
17:05 - we have here
17:06 - we can do the same if you like just by
17:08 - popping in an if block before the set
17:11 - joy x here
17:14 - check if joy dist
17:16 - is greater than one
17:21 - and if it is then it's definitely a
17:23 - diagonal so to compensate we set joy
17:26 - dist to 1.25
17:29 - that's instead of the 1.4 value
17:32 - give that a test and see what you think
17:34 - now
17:35 - yeah see the diagonals are just a little
17:37 - bit more speedy if it's good enough for
17:40 - nintendo it's good enough for me
17:43 - okay we are making great progress
17:46 - what would be cool though is for us to
17:48 - next begin using our players costumes if
17:51 - you look in the costumes tab the first
17:53 - four costumes are for our player idly
17:56 - facing north east south and west their
17:59 - costume names begin with the word idle
18:02 - followed by the direction 0 90 180 and
18:06 - minus 90.
18:08 - the next costumes are for walking and no
18:10 - surprise we find walk 90 as the first
18:14 - costume name for walking right
18:16 - this is followed by five more costumes
18:18 - six in all to animate our players walk
18:21 - cycle
18:22 - so to make use of these sprites we will
18:25 - need to know what direction the player
18:26 - is facing back to the code then we'll
18:29 - need more space to code this in so take
18:32 - those movement scripts out of the tick
18:34 - player receiver and wrap them in a new
18:36 - custom block
18:38 - player movement
18:40 - and tick the run without screen refresh
18:42 - block
18:45 - pop those scripts in the define block
18:47 - and make use of the block from where we
18:49 - pulled it
18:51 - great so to tell what direction we are
18:53 - facing use an if else block
18:57 - and check if joy x is less than zero
19:00 - that means we're facing to the left
19:05 - make a new variable
19:08 - player der for direction
19:11 - for all sprites
19:14 - and set player der to
19:18 - negative 90. that is left
19:21 - next up duplicate that if and check for
19:24 - joy x being greater than zero
19:31 - and set player der to
19:33 - 90. that's to the right
19:35 - okay so duplicate the whole thing and
19:38 - switch to look for joy y
19:41 - being less than zero
19:44 - that means we can set player der to 180
19:48 - because that's the down direction
19:51 - and then well if none of the above it
19:53 - has to be up so we can scrap the last if
19:56 - check and simply set playerder to zero
20:00 - that's up
20:02 - those last ifs go inside the else here
20:04 - cool give the green flag a tap and
20:08 - confirm that the player die is being set
20:10 - to each of the four values
20:12 - 0 90 180 and negative 90 as we move
20:17 - around the screen
20:19 - that's wonderful because that means we
20:20 - are free now to set our costume
20:24 - switch costume 2
20:26 - now remember our costume starts with the
20:27 - word walk so we need a join block
20:31 - and enter the word walk in the left
20:32 - left-hand side
20:34 - and on the right drop in the newly set
20:36 - player der variable
20:39 - and i can't wait to see this smash the
20:42 - green flag
20:44 - oh yes this is really starting to take
20:47 - shape that makes a huge difference but
20:50 - you wait until we add the actual player
20:52 - animation their walk cycle that will be
20:54 - the icing on the cake
20:56 - well for player animation we almost
20:58 - always resort to using a frame variable
21:02 - this is by far the easiest way to keep
21:04 - track of things so make a new variable
21:06 - named frame for this sprite only
21:10 - and we change frame here in the player
21:12 - movement script this means it doesn't
21:14 - change unless we are moving
21:17 - but rather than changing by 1 to go on
21:20 - to the next frame directly that would
21:22 - just be too fast
21:23 - change frame by
21:25 - 0.3 instead
21:28 - this means it will take roughly three
21:29 - ticks of our game loop before we change
21:31 - costumes feel free to play around with
21:33 - this value as you see fit
21:35 - now we can't go adding this frame number
21:38 - to a costume name
21:40 - but if we switch to the first costume
21:42 - like we already have then we can now get
21:45 - back the costume number using this block
21:47 - see
21:48 - and that means we can now add the frame
21:51 - to this to create our animation we need
21:54 - a new variable to hold the current
21:55 - costume number call it bass costume as
21:59 - it's the base costume that we'll animate
22:01 - from
22:02 - make it for this bright only
22:05 - so right after switching to the new
22:07 - costume we can set base costume
22:10 - to the new costume number
22:12 - if we run the project you can see that
22:14 - the base costume number is being set
22:16 - along with the frame variable increasing
22:19 - and increasing but i don't want to
22:22 - actually set the final costume in here
22:24 - the final costume change can be done in
22:26 - the when i receive paint player script
22:29 - up here so make a bit of space
22:32 - and we then switch costume 2.
22:36 - we'll need to sum the costume with the
22:38 - frame so drop in an addition block and
22:41 - on the left the base costume variable
22:44 - on the right
22:45 - yes we want the frame variable but guys
22:48 - it's not enough to drop it directly in
22:50 - there otherwise you'll find your player
22:51 - dancing around like a crazy thing and
22:54 - that's because there are only six
22:56 - costumes per animation but frame is
22:58 - increasing way further and trundling
23:01 - through all the costumes this sprite has
23:03 - available to it we need to constrain
23:05 - this loop to just six frames
23:08 - the block for this is called
23:10 - mod
23:11 - and however many costumes you have in
23:13 - your character animation that is a
23:15 - number you place on the right of the
23:17 - modblock that's six if you're using my
23:20 - starter asset project
23:22 - on the left we would drop in frame but
23:25 - first we need to ensure we ignored the
23:27 - fractional part of this number if you
23:30 - look frame currently is 231.6000
23:34 - goodness knows where all that imposition
23:36 - came from so drop frame into a floor
23:40 - operator and now the number gets rounded
23:43 - down to 231 oh that's much better
23:47 - drop that in turn into the mod six
23:50 - and now we'll only get values between
23:52 - zero and five out of this which is
23:54 - perfect and we can plonk it carefully
23:57 - into the right hand side of the switch
23:59 - costume here
24:01 - and here goes nothing green flag time
24:07 - sweet animation look at that this guy's
24:10 - got a very satisfying bob to his walk
24:13 - don't you think it's so cool that we can
24:15 - now animate this player in all
24:17 - directions by using a bit of clever
24:19 - costume naming
24:21 - so we are almost done for this episode
24:24 - but you may notice that although the
24:26 - walking animation is now working great
24:29 - when the player comes to a halt things
24:31 - are not so good the player just freezes
24:34 - mid-walk and some of those animation
24:36 - frames do look really weird when caught
24:39 - mid-walk cycle
24:41 - what we need to finish with is adding in
24:43 - those idle costumes and as luck would
24:46 - have it if you look at the when i
24:48 - receive tick player script
24:50 - we already know the player is idle when
24:52 - the joystick is not pressed and that
24:55 - would be in this empty else condition
24:58 - so if you like we can duplicate the
25:01 - switch costume blocks from the define
25:03 - player movement script down here as they
25:06 - are very similar to what we need here
25:09 - bring them back up to the tick player
25:11 - script and into that empty else branch
25:15 - only rather than switching a costume to
25:17 - walk we now switch to idle
25:21 - the direction we leave as is whichever
25:24 - direction the player was last facing
25:26 - and now this change frame our player has
25:29 - no idle animation cycle so for me
25:32 - instead of changing frame let's set
25:34 - frame to zero instead now that's not a
25:37 - change frame that's a set frame to zero
25:41 - cool
25:42 - that should be it
25:44 - click the green flag with me one last
25:47 - time
25:47 - and now after we finish walking the
25:50 - player should return to their idle
25:52 - standing pose
25:54 - yeah that looks sweet i can do little
25:58 - shuffle movements and the animation
25:59 - plays along perfectly isn't that great
26:02 - let me just hide those available
26:04 - reporters and we are done
26:08 - well i hope you enjoyed this video if
26:10 - you did then please please smash that
26:13 - like button and don't forget to
26:14 - subscribe to this channel because the
26:16 - next episode will be here before you
26:18 - know it and man it is going to be
26:22 - awesome as we begin to build our tile
26:25 - stamping engines if you want to get
26:27 - these episodes earlier then you can
26:29 - consider joining the channel membership
26:31 - not only does that directly support the
26:33 - making of these videos but you get
26:35 - membership perks like channel emoji
26:37 - priority replies to comments early
26:39 - access to videos and if you want access
26:41 - to the projects themselves how cool is
26:45 - that
26:46 - but i'm afraid that's all i've got time
26:48 - for today so have a great week ahead and
26:52 - scratch on guys
27:00 - [Music]
27:33 - you