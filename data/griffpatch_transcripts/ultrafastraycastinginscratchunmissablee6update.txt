00:02 - hello fellow scratchers i tell you what
00:06 - it's crazy what i've been up to this
00:07 - week i've said it before but the best
00:10 - breakthroughs in scratch coding happen
00:11 - when you're just having fun you asked me
00:14 - for image scanning and texture mapping
00:16 - and i said no we cannot do that with a
00:18 - bitmap raycaster
00:20 - well that was so last week this week
00:23 - we're blazing on all cylinders so how is
00:25 - this suddenly possible well stay with me
00:27 - and i'll reveal all with not one but two
00:30 - epic breakthroughs in one video your
00:33 - vaycasters will never have run so fast
00:35 - am i excited you have no idea
00:38 - guys let's get scratching
00:42 - right so load up our raycasting projects
00:45 - it doesn't matter if you're still at
00:46 - episode 2 or you've made it all the way
00:48 - through to episode 5 you can add in the
00:50 - following script enhancements at any
00:52 - point so let's begin by saving this
00:55 - project as a fresh copy for me that is
00:57 - episode six
01:00 - okay so this is all about speed i have
01:03 - quite a powerful pc here so this looks
01:05 - to be running pretty good right
01:07 - well don't forget that we have set the
01:09 - resolution of this project to eight
01:12 - that's quite chunky hold on if i make
01:14 - the res slider visible then we can drop
01:17 - this down to level four
01:24 - right now you can see things are slowing
01:26 - down i don't even let us set res lower
01:29 - than this but the level walls do look
01:31 - better for it it'd be nice if we could
01:33 - run this faster though right
01:35 - hey i wonder what how fast or slow i
01:38 - should say will it run at even better
01:41 - resolutions
01:45 - oh heck looks great but not so fast but
01:50 - better not to be subjective what would
01:52 - help is if we added a quick fps counter
01:54 - so as to get a good measure of the
01:56 - actual render speed in frames per second
02:00 - in the player sprite we need three new
02:02 - variables
02:03 - the first one tick 30 this will keep
02:06 - track of the current time in 30th of a
02:09 - second scratch's default refresh rate
02:11 - make it for this sprite only
02:14 - next up another variable named delta
02:18 - leaving it for all sprites this will
02:20 - record the time it takes to render one
02:22 - frame
02:23 - and finally
02:25 - fps or frames per second also for all
02:29 - sprites this will be our readout of the
02:31 - final frame rate
02:33 - excellent
02:34 - we need to initialize these values
02:36 - setting delta to 1
02:42 - and set tick 30 to 0
02:45 - that's the start time
02:48 - just pop these in under the initial
02:50 - green flag script
02:52 - okay scrolling down here's our main game
02:55 - loop we'll add our fps scripts here but
02:58 - in a new custom block
03:00 - we'll name this
03:01 - fps frames per second and add a nice new
03:04 - input named last tick 30
03:08 - and check the run without screen refresh
03:10 - why not
03:11 - just pop the new fps block in at the top
03:14 - of the forever loop
03:17 - and the input just takes the current
03:19 - tick 30 value
03:21 - super
03:22 - so let's manhandle that into some free
03:24 - space
03:25 - and code up the new fps counter scripts
03:29 - this is nice and easy we calculate our
03:31 - current game time
03:33 - set tick 32
03:37 - the multiple of
03:39 - timer that's the current time
03:42 - and 30.
03:43 - this value will now increase by 30 every
03:46 - second keeping in time with our desired
03:48 - frame rate
03:49 - now we calculate the delta that's the
03:52 - time between the last frame and this one
03:54 - so set delta to take 30 subtract
03:59 - the last tick 30 value
04:02 - cool hey we can see this working when
04:05 - the project is running at full speed
04:07 - this delta should read one that's
04:09 - because it's taking exactly one frame to
04:11 - draw the screen
04:13 - but if i up the resolution
04:17 - ah now we can see it's taking over four
04:20 - screen update cycles to draw each screen
04:24 - now it's just a simple step to convert
04:26 - this into frames per second
04:28 - we set fps
04:32 - to the round
04:35 - of dividing
04:37 - 30
04:39 - by delta
04:41 - sweet and there now we have a way of
04:44 - measuring our game's speed
04:48 - hold on did you notice this at some
04:51 - resolutions our walls are mysteriously
04:53 - appearing
04:54 - see-through to be specific this happens
04:57 - at a res of one
04:59 - and three three and one
05:02 - so if we hope to work at these
05:04 - resolutions and i am super optimistic
05:06 - about the fantastic improvements in
05:07 - speed we're gonna get then we should fix
05:10 - this it's caused by a quirk of the pen
05:13 - extension and luckily there is a quick
05:15 - fix
05:15 - come into the raycaster sprite and find
05:18 - the define raycast script
05:21 - it's all to do with where we begin our
05:23 - first vertical line this x value the
05:25 - glitch occurs at pen widths less than
05:28 - four
05:29 - in these cases we must begin drawing at
05:31 - only whole numbers of x so if res is
05:35 - less than four
05:38 - set x to the round of x
05:47 - simple
05:48 - if we test that now i'll get some
05:50 - enemies behind this wall and wiggle that
05:53 - red slider yes solid as solid as a solid
05:57 - thing smashing but do you feel we are
06:00 - getting distracted from making our uber
06:02 - fast raycasting
06:03 - no no not at all this is all part of the
06:06 - ride so hold on tight there's just one
06:08 - more nugget of code to fix before we
06:10 - dive into the meat of this explosive
06:12 - episode when the frame rate of our
06:15 - project drops have you noticed that not
06:17 - only does a screen update slow down but
06:20 - ah the player's movement also slows down
06:24 - with it man it's like wading through
06:26 - thick to recall
06:28 - in any decent first person game the
06:30 - player's movements have to be completely
06:33 - independent of the frame rate when my
06:35 - game is running half speed this delta
06:38 - value rises to 2. this tells us that we
06:41 - should be moving twice as fast to
06:43 - compensate for the slow frame rate
06:45 - useful
06:47 - so armed with this value find with me
06:49 - the define player tick script
06:52 - here are all our player movement values
06:55 - mostly turns and move blocks
06:58 - we are just going to multiply all these
07:00 - values then by delta
07:03 - turn left by 3 multiplied by delta
07:09 - turn right by 3 multiplied by delta
07:14 - move forward by
07:15 - two multiplied by delta
07:20 - okay this one's negative move by
07:22 - negative two multiplied by delta
07:26 - now watch out on these drafting scripts
07:29 - leave the turn 90s as they are
07:32 - just multiply the move blocks again two
07:35 - multiplied by delta
07:37 - and two multiplied by yes delta
07:40 - yay let's give that a test shall we now
07:44 - normal movement feels about the same
07:46 - that's good we don't want any unexpected
07:48 - choppy movement or to be moving too fast
07:51 - now let's drop the res
07:53 - so our frame rate has indeed dropped but
07:55 - the player's speed is no longer slowed
07:57 - down but we keep on running around even
08:00 - so
08:01 - that's cool of course you may now feel a
08:03 - bit sorry for these enemies in the game
08:05 - as they have not benefited from the same
08:07 - delta speed boost
08:09 - if you have enemies then we can fix this
08:11 - in the same way click into the entity
08:13 - sprite and find the when i start as
08:16 - clone script
08:17 - and we just replace the move 0.5 with
08:20 - 0.5 multiplied by delta
08:27 - so standing back here they come and pull
08:30 - down the res and do the enemies care no
08:33 - they do not they remain coming at me at
08:35 - full speed independent of the frame rate
08:39 - so good but this frame rate come on guys
08:43 - i've promised so much and thus far we
08:45 - are still lagging like bright yellow
08:48 - banana slugs so
08:50 - how would you like to see an absurdly
08:53 - quick win
08:54 - for this we need to be in the raycaster
08:57 - sprite
08:58 - if you look at the costumes you can see
09:00 - we have the single hitbox costume and
09:02 - it's a 4x4 pixels in size
09:05 - this is the costume we fling across the
09:07 - level over and over again as we raycast
09:10 - and each time we ask are we touching the
09:13 - level are we touching a level are we
09:15 - touching the level scratch needs to
09:17 - check all 4x4 that's 16 pixels
09:20 - underneath to see if any of them are
09:22 - indeed touching the level
09:24 - so interesting question what if we
09:26 - reduce the size of this scanner would it
09:28 - have a big difference on the array
09:30 - casting speed
09:32 - but forget trying to size this by hand
09:34 - no no no no i have an awesome trick that
09:38 - i only just learnt while working on
09:40 - image scanning of all things
09:42 - make a new costume and we need a large
09:44 - filled rectangle i'm just going to
09:47 - switch to bitmap and fill it all in
09:50 - i'll name this costume big
09:54 - now in the code tab when the flag is
09:57 - clicked
09:58 - we need a new switch to costume block
10:02 - switching to the new big costume
10:05 - doing this will let us set the size of
10:07 - the sprite to one percent that's really
10:10 - small
10:11 - careful now though drop this script in
10:14 - before you switch back to the hitbox
10:17 - costume okay so this will result in our
10:20 - already small hitbox costume being
10:22 - shrunk down to as absolutely small as
10:25 - possible and then when we use a touching
10:28 - sprite or color block now scratch will
10:31 - always do just that single pixel check
10:34 - that is so sought after
10:37 - genius
10:39 - but does shrinking down the scanner have
10:41 - a positive effect on frame rate
10:44 - let's drop the reds to 4 and c
10:49 - oh
10:50 - wow guys
10:52 - i am still able to maintain 30 frames
10:55 - per second at a reserv4 that's bonkers
10:58 - and even a res of one is still hitting
11:01 - six to seven frames per second that's
11:03 - almost double what we were getting just
11:05 - moments ago
11:06 - now does this come at any cost you may
11:09 - ask and the answer is yes by shrinking
11:12 - our raycasting costume our rays are
11:14 - thinner but also if we skip too fast
11:17 - potentially gappy and gaps lead to
11:20 - rendering errors around sharp corners in
11:22 - our level
11:23 - but the speed
11:26 - hold on though the enemies are always
11:27 - getting in the way i'm going to remove
11:29 - them temporarily just click into the
11:31 - entity's sprite
11:34 - and reduce the spawn counts to zero
11:40 - so even at a resolution of one things
11:43 - are not looking absolutely hopeless
11:45 - speed wise and the res of two is
11:47 - incredibly playable for me
11:49 - but i want it faster is that even
11:52 - possible
11:53 - hey look my famous pillow room is
11:56 - looking different the pillars are so
11:58 - much thinner than they used to be do you
12:00 - know why
12:01 - well this is actually the correct width
12:03 - of the pillars showing up for the first
12:05 - time a side effect of shrinking down the
12:07 - size of the scanning ray costume is that
12:10 - it can now slip past the edges of the
12:12 - level far more accurately so well that's
12:14 - a boon but where was i yes speed the
12:18 - question is what in general makes bitmap
12:20 - raycasting so slow
12:22 - well it's because we are doing so much
12:25 - work at a resolution of one we are
12:27 - firing out
12:28 - 480 rays each on every game cycle and
12:33 - each ray has to travel hundreds of
12:34 - pixels potentially wow well that's like
12:37 - 48 000 pixels to scan each and every
12:40 - game tick crazy no wonder it runs slowly
12:44 - we previously tried to mitigate this by
12:47 - casting less rays using a res of six or
12:49 - eight but this isn't ideal the only
12:52 - other option is to get the rays to
12:54 - travel faster by skipping more pixels
12:56 - perfect for speed but alas resulting in
12:59 - rays skipping over walls and corrupted
13:01 - rendering of our scene
13:03 - but man look at all this wasted scanning
13:06 - in the middle of the room and corridors
13:08 - all this space that we know is empty and
13:10 - yet we still have to scan across it all
13:12 - the time
13:14 - well hold on
13:16 - what if we just used another sprite
13:19 - costume to highlight areas where nothing
13:21 - is happening and then allow our rays to
13:23 - skip fast across these
13:26 - if we are careful to guarantee this area
13:29 - is always at least 10 pixels away from
13:30 - any wall then we can always move by 10
13:33 - pixels at a time in this area and never
13:36 - hit a wall
13:37 - oh my word that sounds amazing
13:41 - but drawing this floor area could be
13:43 - time consuming
13:44 - except no not at all how about we flip
13:47 - this concept and just add a thick
13:49 - outline to the level costume and that
13:52 - gives us the very proximity we need
13:55 - we've got to try this
13:57 - and we start by duplicating the level
14:00 - sprite again
14:05 - name it
14:06 - level proximity
14:11 - then in the costume editor select all
14:14 - the shapes that make up the level you
14:16 - can do this by dragging a box around
14:17 - them or by pressing ctrl and a on your
14:20 - keyboard
14:22 - now we can simply set the outline width
14:24 - to 20.
14:26 - so just how wide a perimeter has this
14:29 - added to each shape
14:31 - well pen outlines are measured in half
14:33 - pixels so it will be 10 pixels wide
14:36 - and since it's 10 pixels across but the
14:40 - line is centered on the edge of the
14:41 - shape then that's actually only five
14:44 - pixel offset to our perimeter definitely
14:46 - worth bearing that in mind
14:48 - great so into our code
14:50 - we can delete this toggle map script no
14:53 - need for that in this sprite and now we
14:55 - want to code up the special ray skipping
14:57 - scripts
14:58 - click into the raycaster sprite and find
15:00 - the define single ray script
15:03 - yeah here it is and this is the simple
15:05 - repeat loop that scans forward two
15:07 - pixels at a time until it hits a wall
15:10 - right then make a new custom block and
15:12 - name it fast proximity ray
15:17 - and we tick the run without screen
15:19 - refresh
15:21 - okay so it's this little repeat loop we
15:24 - are replacing so we'll pull that out
15:26 - into the new define block replacing it
15:28 - with a call to the fast proximity ray
15:31 - script itself
15:32 - yeah we can test that to confirm it
15:35 - works just the same as before
15:37 - cool that's fine time for some real fun
15:40 - to ensure we get the minimum touching
15:42 - checks we'll rework this script using a
15:45 - forever loop
15:48 - so the logic is this
15:50 - if the ray is not
15:53 - currently touching
15:56 - our proximity sprite
15:59 - then we are safe to move forward by a
16:01 - full 10 pixels
16:03 - now why 10 and not 5 well even if we
16:07 - overshoot a wall by 5 pixels we will
16:10 - still be guaranteed to be within the
16:12 - perimeter of the actual wall if a
16:14 - collision should occur
16:16 - that's handy
16:17 - so if we were not touching the proximity
16:20 - sprite let's repeat until we are
16:22 - touching it that's right the proximity
16:25 - sprite
16:26 - and we continue to move fast 10 steps at
16:29 - a time oh yeah this is what dreams are
16:32 - made of now
16:33 - finally this repeat will end when we
16:36 - have hit the proximity sprite so what do
16:39 - we do we need to back off a little i'm
16:42 - opting for a move of negative six steps
16:45 - this is just in case we have overshot
16:48 - and now we do the detailed scan of the
16:51 - real level but we must remember it's
16:53 - possible we won't find a wall we could
16:56 - just be passing by so we'll repeat for a
16:59 - fixed number of tries say eight times
17:03 - each time we move forward we move by
17:05 - just one step
17:08 - then check if we are touching the real
17:10 - level sprite
17:13 - and if we are
17:14 - then splendid we want to stop this
17:16 - script we are done
17:19 - now if after eight tries we are still
17:22 - not touching the level we can assume we
17:24 - were just passing by a wall and we'd
17:26 - loop around and start fast skipping
17:28 - across the level again yeah i really
17:31 - really like that i am stoked to give it
17:33 - a test so off we go
17:37 - looking fine at resolution eight and now
17:40 - dropping the res down to two
17:43 - oh
17:44 - wow are you seeing this
17:46 - amazing 25 frames per second is that
17:50 - possible
17:51 - this is madness if you'd shown me this a
17:54 - week ago i would have said speeds like
17:56 - this could not be achieved with a bitmap
17:58 - raycaster
17:59 - even at a res of 1 15 frames per second
18:02 - in scratch
18:04 - houses
18:05 - you see what's so great about this is
18:08 - that not only does it give us much
18:10 - smoother walls or the opportunity to run
18:12 - our projects on slower pcs at reasonable
18:14 - frame rates but more than that it means
18:17 - we have the power left over to finally
18:19 - look at adding extra features like
18:22 - textured walls texture mapping something
18:25 - that looked impossible just last week is
18:27 - now looking very very possible in fact
18:30 - yes i've already done it just look at
18:33 - what we've got to look forward to it
18:35 - looks amazing in scratch which is
18:37 - unbelievable but you should see it in
18:39 - turbo warp oh wow this is insanity
18:43 - so yeah i might have gone a bit far with
18:46 - the animating textures and floor
18:47 - reflections but seriously it's just been
18:50 - so much fun
18:51 - our next step in getting here will be to
18:53 - learn how to do the fast full color
18:55 - image scanning that's gonna be serious
18:57 - fun and then after that we will be able
18:59 - to make episode 7 of the raycaster where
19:02 - we will add in the scan engine and
19:03 - implement the wall texturing yeah even
19:06 - animating ones if we want to
19:09 - what a treat
19:11 - are you excited oh yes so please smash
19:14 - that like button and don't forget to
19:16 - subscribe to the channel so as not to
19:18 - miss the next crazy cool episode it's
19:20 - going to be epic if you want to catch it
19:23 - early or need the scripts then why not
19:24 - consider joining the channel membership
19:26 - which also includes priority replies to
19:28 - comments and the fabulous custom channel
19:30 - emoji well that's it from me thanks for
19:33 - watching have a great week ahead and
19:36 - scratch on guys
19:40 - [Music]