00:00 - [Music]
00:02 - hello fellow scratchers
00:04 - do you like mazes ever wanted to
00:06 - generate your own i'm griff patch and
00:08 - today we are going to learn how to do
00:09 - just that
00:11 - mazes are basically one long twisting
00:13 - corridor from start to finish
00:14 - but with branching corridors with dead
00:16 - ends that confuse
00:18 - those attempting to solve them so the
00:20 - question is how do we get scratch to
00:22 - draw one
00:23 - well we'll begin by deleting this sprite
00:26 - one and since we now have the stage
00:28 - sprite selected
00:29 - let's go into the backdrop background
00:31 - editor and switch to the bitmap
00:33 - mode fill the entire screen with pure
00:36 - black
00:37 - this will be the colour of our walls and
00:39 - we'll carve out the maze
00:41 - from this blank space next we'll create
00:44 - a new sprite
00:45 - naming it bounds the sprite will define
00:48 - the maze bounds
00:49 - we want to draw a non-filled rectangle
00:52 - with a pen width of something like
00:54 - 40. that's quite fat and i'll draw it
00:57 - out
00:57 - such that it sits just inside the
00:59 - drawing canvas border
01:01 - like so once i'm happy with its size
01:05 - i'll just reposition it on the stage by
01:07 - setting both its x and y position
01:09 - to zero now we'll add another new sprite
01:13 - naming it maze this will be responsible
01:16 - for all the maze drawing
01:18 - so what costumes will we need the first
01:21 - we shall name
01:22 - tile and we'll need to be quite accurate
01:24 - drawing these costumes
01:26 - so zoom right in with the plus button
01:29 - such that we can see
01:30 - only a handful of the checkered grid
01:32 - tiles remember each grid tile is 4x4
01:35 - pixels in size
01:37 - i'm choosing my maze floor tiles to be
01:39 - pastel yellow
01:41 - i'm selecting a transparent pen color
01:43 - though and then
01:44 - we can draw our square that is exactly
01:48 - eight by eight pixels that is two full
01:51 - grid squares wide and tall
01:53 - then to ensure it's centered just drag
01:55 - it until it snaps in place
01:58 - next we will draw the main costume that
02:01 - we need
02:02 - and this is a coverdoor costume we'll
02:05 - duplicate the tile costume
02:06 - and name it corridor now
02:10 - using the selection arrow tool we select
02:12 - the yellow rectangle
02:14 - and then pull out the right hand side to
02:16 - make the rectangle 5
02:18 - grid squares long that's 5. that will be
02:21 - about 20 pixels wide
02:22 - and eight tall make sure not to center
02:26 - the costume this time round
02:28 - as it wants to be just like this
02:31 - now to help us understand how the maze
02:32 - is being drawn we'll add a thin red
02:35 - border to the corridor costume
02:37 - and also add a small red arrow on the
02:39 - left hand side like this
02:42 - okay now don't do this in your project
02:45 - but let me just copy this rectangle to
02:48 - show you
02:48 - how we are expecting these costumes to
02:50 - fit together in a maze
02:53 - you see the start of one corridor will
02:55 - stamp directly over the end of the
02:57 - previous one
02:58 - like this when in this formation you can
03:01 - see that the length of a single path
03:03 - tile
03:03 - will actually be three grid squares that
03:06 - is 12 pixels wide
03:08 - we'll need that number shortly so
03:10 - remember it 12 pixels
03:13 - i'll just delete these parts to tidy up
03:15 - and we can look at how to actually
03:17 - script this
03:19 - okay move into the code tab and we'll
03:22 - begin by clicking on
03:24 - extensions down here and adding the pen
03:27 - extension
03:28 - we'll need this to draw the maze as
03:30 - we're definitely going to exceed the
03:31 - clone limit
03:33 - drag in the arrays all block this is
03:36 - used to clear the screen
03:37 - of anything we've previously drawn we'll
03:39 - trigger this right away
03:40 - of a when green flag clicked hat block
03:43 - so firstly how big is our maze going to
03:46 - be
03:46 - it'd be nice to have a way of setting
03:48 - this so
03:50 - remove the my variable here and make a
03:52 - new one
03:53 - naming it tile size for all sprites
03:58 - and then set it to 40. that is our tiles
04:02 - are going to be 40 pixels wide that's
04:05 - nice and chunky for starters
04:07 - now bring in a set size 2 block okay so
04:11 - how are we going to size our sprite
04:13 - so that is working at the selected 40
04:15 - pixel size
04:16 - where this size block expects a
04:18 - percentage hmm
04:20 - tricky but no problem let's do the math
04:24 - setting the size to 100 would mean our
04:27 - tiles are of size
04:28 - what was it 12 pixels remember
04:32 - that's what we said so if we divide 100
04:35 - by 12
04:36 - it will be 12 times smaller which would
04:39 - make it
04:40 - one pixel wide rather than 12. good
04:44 - from here it's easy to make it 40 pixels
04:46 - we just simply
04:48 - multiply it by tile size aha we win
04:52 - next let's position the sprite where we
04:54 - want the maze to begin
04:56 - go to x zero y of zero and we'll point
05:00 - in a random direction ah but we only
05:03 - want to point
05:04 - directly up right down or left
05:07 - nothing in between to do this we need
05:10 - the direction to be
05:11 - multiples of 90 degrees so multiply
05:14 - 90 by pick random minus 1
05:17 - to 2. if i run this script you can see
05:20 - that this gives us the directions
05:22 - minus 90 0 1980 perfect
05:26 - now we want this corridor to build up in
05:29 - length
05:29 - so we'll make a new custom block naming
05:32 - it draw
05:33 - maze for now we'll leave the run without
05:36 - screen refresh clear
05:38 - and we'll drag this new block to the end
05:40 - of the green flag script
05:42 - so we want to draw using a corridor
05:44 - costume so switch to that
05:46 - and then right away we use the pen stamp
05:49 - block
05:50 - so with an imprint of the costume left
05:51 - behind on the stage we can move the
05:53 - sprite forward by
05:54 - tile size like so clicking the draw maze
05:58 - script
05:59 - over and over demonstrates this working
06:02 - what will make it even better is if the
06:04 - corridor had bends
06:06 - so use a turn right block after we move
06:10 - either we turn 90 degrees left or keep
06:12 - straight
06:13 - or 90 degrees right that's just 90
06:16 - multiplied by random minus 1
06:18 - to 1. we can test again by clicking the
06:21 - green flag
06:22 - and then repeatedly clicking the draw
06:23 - maze button oh
06:25 - yes this is looking really cool note
06:28 - that because we are stamping
06:29 - only the last corridor costume on the
06:31 - stage is actually a sprite
06:34 - right enough clicking to build up this
06:36 - corridor we need another draw maze block
06:38 - that we can drop in at the end of the
06:40 - existing draw maze script
06:42 - this is now one of those dangerous
06:44 - recursive scripts i've mentioned before
06:46 - since the block is making use of itself
06:49 - be warned
06:50 - if this was running without screen
06:52 - refresh it would reduce your computer to
06:54 - a crawl
06:54 - so don't do that yet what this maze
06:58 - needs first
06:59 - is to respect its bounds we'll stop it
07:01 - in its tracks
07:02 - using an if here around the draw maze
07:06 - to allow it to continue to draw the
07:07 - sprite must not
07:09 - be touching the bound sprite that's the
07:11 - rectangle around the level
07:14 - if i run the project you can see that
07:15 - the corridor does indeed stop when it
07:17 - gets to the edge
07:19 - good now we also do not want the
07:21 - corridor to cross
07:22 - over itself so extend the sensing check
07:25 - with an
07:26 - or and check for touching color and
07:29 - select the corridor color
07:31 - using the color picker but
07:34 - if we run the project we can see that we
07:37 - have a problem
07:38 - the maze now stops right away and why
07:41 - well look if i move the sprite a little
07:44 - out of the way you can see that the
07:45 - corridor
07:46 - is of course already touching the yellow
07:48 - from the previous corridor tile
07:50 - we can't have that we'll need to add a
07:53 - special sensing costume that doesn't
07:55 - overlap the corridor tile we are coming
07:56 - from
07:58 - open the costumes tab and duplicate the
08:00 - corridor costume
08:02 - select the rectangle and carefully drag
08:04 - the left hand
08:05 - edge to the right until the corridor is
08:07 - 2 by 2 grid squares
08:09 - the arrow to the left shows where the
08:11 - previous covered or tile will end
08:14 - this can be deleted and then colour the
08:17 - block
08:17 - red so that we can identify it from the
08:19 - corridor colour
08:21 - we can name this costume detector
08:24 - now click back into the code and we'll
08:26 - switch to the detector costume before we
08:29 - perform the touching sensing in this if
08:32 - i'm going to run the project again now
08:34 - and we find that it's working once more
08:38 - and also there we have reached a point
08:42 - where the corridor has collided with
08:44 - itself
08:44 - just like in the game's snake so
08:47 - obviously we don't actually want to stop
08:49 - when this happens
08:50 - it would be much better if we could try
08:52 - a different direction
08:53 - to turn in instead well at each point
08:57 - there are potentially four directions of
08:59 - travel
09:00 - we can add a repeat 4 around the if
09:02 - sensing condition
09:04 - and we can turn right by 90 degrees as
09:06 - the last script in the repeat
09:08 - loop so if we fail to move forwards we
09:11 - can certainly now
09:12 - turn right and try the next direction
09:15 - let's give that a run oh
09:18 - now what are we seeing here the corridor
09:21 - travels nicely winding around
09:23 - but it still appears to be running into
09:25 - trouble and stopping in a mad spin
09:27 - okay well the reason is simple
09:31 - sometimes the corridor goes head first
09:33 - into a dead end of its own making
09:35 - in this case it doesn't matter how many
09:37 - times we turn around there simply is
09:39 - nowhere else to go
09:41 - so how do we get out of this one the
09:43 - answer is
09:44 - we don't instead we need to back up
09:47 - until we find a place
09:48 - where we can begin drawing again the
09:51 - difficulty is
09:52 - how do we know where to back up to since
09:55 - we randomly were turning left and right
09:57 - as we went
09:59 - okay for this we need some help from a
10:01 - custom block
10:02 - with input variables as unlike normal
10:04 - variables
10:05 - these do not forget their values when we
10:07 - return to them
10:08 - let me show you what i mean make a new
10:10 - custom block naming it
10:12 - try directions from and we'll add a
10:14 - numeric input
10:16 - named start direction we can move the
10:20 - turn right script and everything
10:21 - following it
10:22 - into there and replace with a call to
10:25 - this new tri-directions block
10:28 - but and here is the clever bit we pass
10:31 - in the current direction of the corridor
10:33 - note this is the direction before
10:36 - we have made any random turns the magic
10:40 - of this
10:41 - is that we can point back to the start
10:43 - direction
10:44 - at the end of the script guaranteeing us
10:46 - to be pointing the same way we were
10:49 - when we came in this means we can now
10:52 - safely move
10:52 - backwards by tile width using a subtract
10:55 - block from zero
10:57 - to backtrack us to the previous tile
11:00 - position
11:01 - the magic of this idea is that even when
11:04 - we now reach a dead end
11:06 - and all four turns come back blocked we
11:08 - now reverse the turn that led us here
11:10 - and move back to the previous position
11:13 - this in turn
11:14 - takes us back to the previous
11:15 - tri-direction script and will continue
11:18 - turning around to see if there are any
11:20 - other directions
11:21 - that are yet to be travelled this
11:23 - process is now
11:24 - fully recursive and should leave no turn
11:27 - unchecked
11:29 - which means running the project now
11:31 - yields a rather awesome
11:33 - sight wow just look at that
11:36 - did you see us backing up the pathway
11:38 - and then finding a new possible turn
11:40 - there and that's it the whole screen has
11:43 - been filled
11:44 - and the maze is complete the script ends
11:47 - with the maze sprite back at the
11:48 - beginning where it began
11:50 - and nowhere else to search well x marks
11:53 - the spot right
11:54 - so i'd suggest we swap out the coverdoor
11:56 - costume for a small
11:57 - x here to finish off the effect switch
12:00 - to the costume tab
12:01 - and we'll make a new costume naming it x
12:04 - now draw a sweet little x using a 3
12:07 - pixel wide line
12:08 - it should be around six to seven pixels
12:10 - in size mine is just over the size of
12:13 - one grid square
12:14 - and i'll select and drag it to ensure
12:16 - it's nicely centered
12:18 - while we're here we might as well click
12:20 - into the cold or sprite
12:21 - and remove the arrow and the red border
12:23 - from the costume
12:24 - now back in the scripts simply switch
12:27 - costume to x
12:28 - after the drawing of the maze we can run
12:32 - the project again now
12:33 - and see a much cleaner maze form
12:38 - and then to finish it off there's the
12:39 - red x right in the center where we began
12:43 - that is awesome
12:46 - so being the naturally curious type of
12:49 - person you are
12:50 - you may have already fiddled with the
12:52 - tile size variable we set up at the
12:54 - beginning
12:55 - well if you haven't now is the time
12:57 - after all the smaller we make the tiles
12:58 - the more maze we can fit on the screen
13:01 - let's change tile size from 40 down to
13:05 - 30. and here we go i can see there's
13:08 - more to the maze
13:10 - and it's working great i have to say
13:12 - though it's taking its time
13:14 - perhaps we can make this run faster by
13:15 - editing the define draw maze block
13:18 - and making it run without screen refresh
13:20 - so how fast will it draw the maze now
13:24 - click the green flag wow did that finish
13:26 - already
13:27 - i'm just clicking the green flag over
13:29 - and over i can't get enough of this
13:31 - no wait i can because now i want to set
13:34 - the tile size down to 20.
13:36 - yikes still fast so a tile size of 10
13:40 - then
13:42 - we have reached the limit of our sprite
13:44 - costumes
13:45 - now you can play around with changing
13:47 - the costumes to bitmap
13:48 - or adding a transparent rectangle around
13:50 - them but to be honest
13:51 - if you stick with a size no smaller than
13:53 - 12 you'll probably be safest for now
13:56 - however to continue this tutorial let's
13:58 - back up the tile size to 20.
14:02 - interestingly you may have noticed that
14:04 - the maze produced
14:06 - has a rather zigzaggy pattern this is
14:09 - caused
14:09 - by the random turning left and right
14:11 - with every move forward
14:13 - perhaps it would be nice to make
14:15 - corridors that have a preference for
14:17 - straightness
14:19 - here's the script that turns us left or
14:20 - right so if we didn't run this script
14:23 - then the corridor would be completely
14:25 - straight but obviously
14:27 - we need to turn at some point so
14:29 - surround this turn with an
14:31 - if and compare pick random one to ten
14:35 - with one this means there is a one
14:38 - in ten chance for the corridor to change
14:41 - direction
14:43 - okay run the project oh my gosh i think
14:46 - we overdid it these corridors are very
14:49 - long
14:50 - and very spirally i rather like it
14:53 - but let's tone it way back down we'll
14:56 - use a random
14:57 - one to two instead there that's a good
15:00 - balance and it gives you another fun
15:02 - variable to tweak
15:04 - so let's take stock we have a resizable
15:08 - maze and the center is marked off with
15:10 - an
15:10 - x what we lack perhaps is a start to the
15:13 - maze
15:15 - how about we find the longest possible
15:18 - passageway from the center
15:19 - and stick the start there to do that
15:23 - we'll need to keep track of how long
15:25 - each corridor is
15:26 - as we draw it and simply remember the
15:29 - furthest
15:29 - point reached we'll add four new
15:32 - variables to achieve this
15:34 - furthest x for all sprites and furthest
15:38 - y also for all sprites and then
15:42 - furthest distance for this sprite only
15:45 - and distance for this sprite only
15:50 - we can set both furthest distance and
15:52 - distance to zero
15:53 - before drawing the maze as we've yet to
15:55 - travel anywhere
15:57 - it'll be easier to create a custom block
15:59 - to record the distances
16:00 - make a new block naming it record
16:06 - distance
16:08 - then if distance that is the current
16:10 - distance traveled
16:12 - is greater than the furthest distance
16:14 - traveled
16:15 - then we set furthest distance to
16:18 - distance
16:19 - furthermore we also record where we are
16:21 - when we recorded this distance
16:23 - by setting furthest x to x position
16:26 - and setting furthest y to y position
16:30 - good now come over to the draw maze
16:33 - script
16:34 - now every time we move forward we change
16:36 - distance by one
16:40 - and when we move back we change distance
16:42 - by minus one
16:44 - this will keep track of how far we've
16:46 - traveled from the start of the maze
16:50 - and now we can pop in our record
16:51 - distance block just after we increase
16:53 - the distance variable here
16:55 - that means if this is the furthest we
16:57 - have traveled so far
16:59 - then it will record the position in
17:00 - furthest x and y
17:02 - that is all we need to find the furthest
17:04 - point now we just need a way to mark it
17:07 - on the screen
17:08 - so let's add a broadcast to a new event
17:11 - named
17:11 - maze generated after everything else has
17:14 - run
17:15 - in the green flag script
17:23 - create a new sprite named player
17:28 - and i'll draw a costume of a small blue
17:30 - circle
17:32 - mine is seven by seven pixels and it
17:34 - sits nicely within the two by two grid
17:36 - cell
17:37 - i'll make sure it's centered now
17:41 - to the code this is simple when i
17:43 - receive
17:44 - maze generated then using the of block
17:48 - in the sensing category we set size to
17:50 - the size
17:51 - of maze this keeps us the same size as
17:54 - the maze tiles
17:56 - next to position our player sprite at
17:58 - the furthest point from the center of
18:00 - the maze
18:01 - we go to furthest x and furthest y
18:06 - now i'm excited to run this because i
18:08 - love it when a simple script can solve a
18:10 - seemingly difficult problem
18:12 - and there we go we are seeing the blue
18:15 - player dot
18:16 - being positioned at different places on
18:17 - the maze and all looking very good
18:21 - yeah this is really really fun
18:24 - i can feel my eyes trying to trace the
18:26 - route between the start and the end
18:28 - to see if it is the longest path i guess
18:30 - it's this way
18:31 - then here i did it pretty good there
18:35 - well done me okay so it's fun enough
18:39 - using my mouse
18:40 - but it would be even more fun if we
18:42 - could control the player sprite using
18:44 - the keyboard
18:45 - yeah let's gamify this project now this
18:48 - tutorial
18:49 - isn't so much about player movement many
18:51 - of you will have lots of experience
18:53 - doing this part yourselves
18:54 - so don't feel you need to do it the same
18:56 - way as me feel free to use your favorite
18:58 - scripts for player movement
19:00 - but i'll quickly code something up so
19:02 - that we can get the job done
19:04 - i'll start by hiding the player sprite
19:06 - when the green flag is clicked
19:08 - then adding to the when i receive may's
19:10 - generated script
19:12 - i'm going to wait until no keys are
19:14 - being pressed
19:15 - this is to ensure that we don't move at
19:17 - this very start of the game until all
19:18 - the keys are released
19:20 - now we can show the player sprite before
19:22 - starting the game loop
19:24 - repeating until we are touching the maze
19:27 - yeah touching maze gives the wrong
19:29 - impression it doesn't really mean we are
19:31 - touching the maze at all
19:32 - what we are touching is the x in the
19:34 - middle of the maze as
19:35 - that was the last costume the maze
19:37 - sprite was changed to
19:39 - and that's going to be our goal then
19:42 - on touching the mazes x we exit the
19:44 - repeat loop
19:46 - hide the player and broadcast a new
19:48 - message
19:49 - of reset maze
19:53 - next up create a new custom block named
19:56 - move
19:57 - with two inputs of dx and dy run without
20:00 - screen refresh
20:02 - to ensure our player's circular shape
20:04 - doesn't get caught on the edges of the
20:06 - maze
20:06 - we can add a second costume a small
20:09 - centered square
20:12 - naming it square and while i'm here
20:15 - i'm going to name the circle as player
20:19 - we can switch to the square costume and
20:21 - move the player sprite by dx and dy
20:24 - in the x and y directions now check if
20:27 - we are touching the color black
20:31 - and if we are we move back to where we
20:33 - came from
20:34 - using zero subtract dx and the same for
20:38 - dy
20:38 - like so finally set the costume back to
20:42 - the player circle costume
20:45 - good so all we need to do
20:48 - is detect the player key presses right
20:50 - i'm going to do this next bit in a
20:52 - slightly different way to usual
20:54 - but nothing crazy we create a new block
20:57 - named
20:57 - move with speed with an input called
21:00 - speed running without screen refresh
21:04 - and what i'm going to do is rather than
21:06 - detect keys and then move in big steps
21:09 - i'm going to repeat right here once for
21:11 - each pixel i want to move
21:13 - use a ceiling block to round our numbers
21:16 - up to the nearest whole number
21:18 - and then pop speed in here now comes the
21:22 - keypress scripts
21:23 - drop in two calls to the move block the
21:26 - first
21:26 - is for moving left and right and we'll
21:29 - use the trick
21:30 - of key right arrow pressed subtract
21:33 - key left arrow pressed to give us the
21:35 - one for right and minus one for left
21:38 - we can duplicate this and use it for the
21:40 - right hand input of up and down
21:43 - i'll fill in zeros in the other inputs
21:46 - so the trick here is that these moves
21:49 - are small just a pixel at a time
21:51 - but we loop the movements a number of
21:53 - times each frame to allow us to move
21:55 - further
21:56 - we just need to drop a move with speed
21:59 - block into our game loop over here
22:01 - and decide how far we can move each
22:03 - frame
22:04 - it's a good idea to move relative to the
22:06 - size of the level
22:08 - so perhaps we'll move by tile
22:11 - size divided by eight that will mean it
22:14 - takes eight frames to move across each
22:16 - tile of the maze
22:18 - you may want to play around with this
22:19 - value or do things completely different
22:21 - it's up to you wow we are almost done
22:25 - we should just take care of this last
22:27 - broadcast to reset the maze
22:29 - click into the maze sprite and add a
22:33 - when i receive reset maze hat block
22:36 - and then move the entire script from
22:38 - under the green flag
22:39 - into there and we'll pop a broadcast to
22:42 - reset maze
22:43 - to trigger from the green flag and by
22:46 - jove i think we've done it let's click
22:48 - that green flag
22:49 - and give it a test drive
22:52 - okay so the wall collisions are working
22:54 - great i can't pass through them
22:56 - and i'm not getting stuck on the edges
22:58 - or corners i can move
23:00 - right up against the walls and still
23:02 - move around
23:04 - so far so good i don't feel the maze is
23:06 - overly taxing yet but
23:08 - you never know when you might have gone
23:10 - wrong when there are certain choices
23:12 - ah yes uh i have gone wrong hold on let
23:15 - me back up a bit
23:16 - it must have been that turning back
23:18 - there and
23:20 - this oh no no no no this way
23:26 - oh poop no back this way
23:29 - yeah this is looking good
23:36 - ah no um
23:40 - no it's okay here we go oh phew
23:43 - ha we did it and the game resets
23:46 - and we have a new maze to solve
23:48 - wonderful
23:50 - so how about setting tile size down to
23:52 - 12.
23:54 - ah that makes things even more tricky
23:58 - you know what would be really good is
24:00 - perhaps a timer or something
24:02 - well i'll leave that up to you yeah this
24:05 - maze is a lot more hard to predict
24:07 - let me speed this up
24:20 - yay i got there in the end now before we
24:23 - finish this tutorial let me just
24:24 - show you one more cool thing you can do
24:27 - if we click into the bounds sprite
24:29 - and add some shapes to the costume
24:33 - see how the maze shape now is bounded to
24:36 - fit around these shapes
24:38 - that's really cool it's even better in
24:44 - black
24:47 - look we can do circles
24:51 - or perhaps letters yeah
24:55 - i love this i know you guys are gonna
24:57 - have a lot of fun with this too
24:58 - and with that that brings us to the end
25:01 - of this tutorial
25:02 - i hope you've enjoyed following along
25:04 - and have made some excellent mazes
25:06 - of your own if you enjoyed this tutorial
25:09 - then smash the like button
25:10 - and don't forget to subscribe to the
25:12 - channel to avoid missing my
25:14 - next exciting video thanks for watching
25:17 - and scratch on guys
25:28 - you