00:01 - hello fellow scratchers have you ever
00:03 - wanted your projectiles in scratch to
00:05 - have better physics
00:06 - collisions motion and bounce this could
00:08 - be hard to get right but keep watching
00:10 - and we'll cover everything you need to
00:12 - know
00:12 - in just one amazing episode let's begin
00:15 - by drawing a tank costume that can fire
00:18 - the ball projectiles
00:19 - make sure it's centered on the canvas by
00:21 - dragging it till it snaps in position
00:24 - i'm adding a special invisible rectangle
00:26 - around the costume
00:27 - to avoid the unpleasant clipping that
00:29 - you get on the edge of the sprite
00:32 - name both the costume and the sprite
00:35 - tank
00:37 - next we'll create a level sprite
00:41 - using the rectangle tool to draw some
00:43 - nice borders all the way around the
00:45 - level
00:46 - and a couple of other boxes to join in
00:48 - the fun
00:49 - we need one more sprite now we'll name
00:52 - ball
00:52 - for the projectiles
00:56 - i'm drawing a red circle hold down shift
00:59 - whilst dragging
01:00 - to ensure it stays perfectly circular
01:02 - not too big now anything around the 16
01:05 - to 17 pixels or so will be good
01:07 - again after drawing select it and drag
01:10 - it
01:11 - to ensure it's perfectly centered this
01:13 - is very
01:14 - important so don't miss this step
01:17 - okay we'll begin with the tank scripts
01:20 - i'm not going to do much here we'll
01:22 - position the tank in the center of the
01:24 - screen
01:24 - and then forever loop pointing at the
01:26 - mouse pointer
01:28 - a second loop can listen for the mouse
01:30 - clicks and space key presses
01:35 - these simply trigger a clone of the ball
01:37 - sprite to launch our projectile
01:39 - and then wait for 0.2 seconds this will
01:42 - prevent us shooting too
01:43 - fast if we hold down the fire button
01:47 - now to the ball sprite we initially hide
01:49 - the original sprite
01:51 - we'll let the clones do the actual work
01:54 - when i start as a clone
01:55 - move the bullet to the same position as
01:57 - the tank and point towards the mouse
01:59 - pointer to get our direction of fire
02:01 - now if we move the ball forward by 20
02:04 - pixels
02:05 - it should be located pretty much at the
02:07 - end of the tank's bowel
02:08 - you might have to play with these values
02:10 - to get it right
02:11 - and then show the new clone if we run
02:15 - the project now
02:16 - and click the spacebar we can check
02:18 - whether the position seems good or not
02:20 - for me the 20 pixels is spot on however
02:23 - we don't want the ball appearing in
02:25 - front of the tank so
02:27 - if we go back to the tank sprite i'll
02:29 - stick a go to front layer before the
02:31 - first forever loop
02:33 - okay back to the ball sprite we need to
02:36 - set the projectile's initial velocity
02:38 - that is its speed in the x and y
02:41 - direction
02:42 - make two new variables speed x and
02:45 - speed y for this sprite only
02:48 - and we'll set them to mouse x and y
02:52 - divided by 10. so the further the mouse
02:55 - is away from the center of the screen
02:57 - the faster the projectiles will travel
02:59 - in that direction
03:01 - then we add a repeat loop for 200 cycles
03:04 - we don't want our balls to live forever
03:07 - the main processing for the ball will be
03:08 - done
03:09 - in a new custom block we can name tick
03:12 - run without screen refresh stuff the
03:14 - tick block into a repeat loop
03:16 - and then after the loop delete the ball
03:18 - clone
03:19 - nice okay the tick custom block
03:24 - first wants to simply move the ball so
03:26 - add a change x
03:27 - and change y by speed x and speed y
03:30 - respectively a good point to test
03:33 - run the project and the balls fire out
03:36 - towards the mouse
03:37 - nice what we should do next is stop them
03:40 - from traveling through the level walls
03:43 - we check if the ball is touching the
03:45 - level
03:46 - and if it is simply delete the clone
03:50 - you can test it again great the balls no
03:52 - longer penetrate the level walls
03:54 - but disappear instead a good proof of
03:57 - concept
03:58 - but not very impressive we want to
04:01 - create balls that can
04:02 - bounce let's rearrange the script
04:06 - so that we can check the collisions
04:08 - after both the change x and change y
04:10 - independent of each other this way of
04:12 - doing collision detection
04:14 - is perfect for levels that are only made
04:16 - up of vertical or horizontal walls
04:18 - without any slopes and i use it a lot in
04:21 - my platformers
04:22 - if a collision occurs due to us moving
04:24 - the x position
04:26 - then we already know the bounce will be
04:28 - horizontal
04:29 - and if we glide after moving the y then
04:32 - it's going to be a vertical bounce
04:34 - calculating the bounce is therefore easy
04:36 - we just negate the speed in the x or y
04:38 - direction
04:40 - now if we run the project you can see
04:41 - that we have succeeded in creating some
04:43 - beautiful horizontal and vertical
04:45 - collisions
04:46 - you may recognize these physics from
04:47 - games such as my taco burp game
04:50 - here let's just add some gravity into
04:52 - the simulation
04:53 - change speed y by negative 0.5
04:57 - and there we have a super bouncy ball
05:00 - simulation
05:02 - so why is this not the end of the video
05:05 - well watch this if we edit the level to
05:09 - include a curved surface
05:10 - and test again now look at this the
05:13 - balls
05:14 - should not be bouncing directly up off
05:16 - the curve like that
05:18 - you see as programmers we often design
05:20 - our games to hide issues like this
05:22 - so for example in taco burp i
05:24 - purposefully made no
05:25 - sloping platforms this simplifies the
05:28 - taco collisions greatly
05:29 - but in this tutorial we're going to try
05:32 - to make things bounce
05:33 - way better right this simplified
05:36 - movement collision scripts have to go
05:39 - we'll start by putting it back to
05:40 - changing position x and y
05:43 - but then when a collision occurs rather
05:45 - than deleting the clone
05:46 - we move the projectile out of the
05:48 - collision using a change by
05:50 - 0 minus speed x and the same for speed y
05:54 - like this if i run the project
05:57 - you can see the first problem we have to
05:59 - solve after a ball collides
06:02 - it is currently thrust back out of the
06:04 - level leaving it floating quite far
06:06 - away from where it collided we want to
06:08 - make the projectile
06:09 - end flush against the wall to do this
06:13 - we'll back the ball out of the collision
06:15 - more slowly by wrapping the change x and
06:17 - y in a repeat until
06:19 - not touching level and then move the
06:22 - ball out a little at a time
06:24 - by multiplying speed x and speed y by
06:27 - negative 0.1
06:30 - if we run the project you can see that
06:32 - the bullets are now ending their flight
06:34 - flush up against the walls that sets us
06:37 - up perfectly
06:38 - for our next step make a new block named
06:42 - find normal
06:46 - and we'll make use of it down here under
06:47 - the tick script
06:50 - do you know what a surface normal is
06:53 - if we draw a collision like this then
06:55 - the normal of the collision
06:57 - is this red arrow pointing out
06:59 - perpendicular to the surface we have
07:01 - collided with
07:03 - to be able to calculate how the ball
07:04 - will bounce we are going to need to know
07:07 - what direction this normal arrow should
07:09 - point in
07:10 - to do this we will employ a little trick
07:14 - rather than checking for a collision
07:15 - with the ball itself
07:17 - we sweep an offset ball costume around
07:20 - first
07:21 - in a full circle checking for collisions
07:24 - when we know where the surface begins
07:26 - and ends
07:27 - we can take an average and that will be
07:29 - the surface normal
07:31 - duplicate the ball costume naming it
07:34 - normal i've renamed the original costume
07:37 - as ball
07:38 - then back in the normal costume zoom out
07:41 - and with the ball selected i will use
07:44 - the arrow keys to move it
07:45 - six pixels to the right by pressing the
07:48 - right arrow
07:49 - six times just make sure you are zoomed
07:52 - out
07:52 - when you do this now back in the scripts
07:56 - under the define find normal switch to
07:59 - the normal costume
08:01 - we'd better also make sure to switch
08:02 - back to the ball costume at the top of
08:04 - the tick script
08:05 - we need a new variable named dir der
08:09 - for this sprite only to store the normal
08:11 - direction in
08:13 - set it to zero and point in the same
08:15 - direction of der
08:18 - make a new custom block named rotate
08:20 - with a numeric input of
08:22 - by
08:25 - in here we change dir by the input by
08:29 - and then point in the same direction
08:32 - now it's important to check whether the
08:34 - first position in our circular sweep is
08:36 - already touching the level or not
08:39 - if it is then we need to locate the
08:41 - point where the collision
08:42 - starts we repeatedly rotate until we are
08:46 - no longer touching the level
08:48 - rotating right by 15 degrees as we go
08:52 - create a new variable named der start
08:56 - to record the collision point for this
08:58 - sprite only
09:00 - set dir start to der but subtract
09:04 - 15. that was where the last collision
09:08 - occurred
09:09 - now for the case where we start sweeping
09:12 - and there is no collision
09:14 - duplicate the loop but modify it to
09:16 - repeat until we
09:17 - are touching level get rid of the knot
09:21 - and we rotate counterclockwise by
09:24 - negative
09:24 - 15. when we have found the collision
09:27 - point
09:27 - we record it in dir start as before
09:31 - but don't negate it by 15 this time
09:34 - afterwards we need to bring our sweep
09:36 - back to the top to prevent us
09:38 - rechecking the points we have already
09:40 - checked by setting der
09:42 - to zero and pointing in direction de
09:45 - move the script into the else here
09:49 - now all that's left is to sweep
09:51 - clockwise until we find the second
09:53 - collision surface
09:55 - duplicate this last loop script again
09:58 - checking for a collision
09:59 - but make the rotation b by positive 15.
10:03 - once found we can average the two
10:05 - directions by setting
10:07 - du to der plus der start
10:10 - all divided by two let's test this works
10:14 - by first ensuring the ball sprite is
10:16 - visible
10:17 - and that we are using the ball costume
10:20 - then drag the sprite on the stage
10:22 - to right next to a wall and click on the
10:25 - find normal script
10:26 - to run it you can see it sweeping around
10:30 - first left
10:31 - and then right before reporting a dir of
10:33 - 45 degrees
10:35 - that's quite correct brilliant so
10:38 - now we have the normal vector we will
10:41 - create a new custom block named
10:43 - bounce to calculate the correct bounce
10:46 - off the collision surface
10:48 - include two numeric inputs nx and ny
10:52 - standing for normal x and normal y make
10:54 - it run without screen refresh
10:57 - we can make use of the bounce block
10:59 - right after finding a normal
11:01 - we just need to convert the normal
11:03 - direction der
11:04 - into a normal vector using sine of der
11:08 - and cosine of der simple
11:17 - okay now for some rather magical maths
11:21 - let me draw you a diagram we have a
11:24 - speed x and speed y
11:25 - represented here with the blue arrow the
11:28 - red arrow is the normal vector
11:30 - that we calculated and is represented by
11:32 - an x and n y
11:34 - it points directly away from the
11:36 - collision surface
11:38 - the purple arrow shows the speed we want
11:40 - to calculate
11:41 - after the collision now this bit i
11:44 - looked up on google
11:46 - we can calculate the dot product of the
11:49 - speed and normal vectors like this
11:52 - and the new vector can be calculated
11:54 - using this from the tail of the speed x
11:56 - and y
11:57 - to the collision wall now why is this
12:00 - super awesome because if you now
12:03 - rearrange these vectors to line up here
12:05 - like this
12:06 - we can see that the new green arrow if
12:08 - doubled allows us to calculate the
12:11 - correct
12:11 - speed vector after the collision
12:14 - that's pretty awesome and a little
12:17 - mind-boggling
12:18 - but let's just go with it and put it
12:20 - into action
12:22 - create a new variable named dot product
12:29 - and set it to speed x multiplied by nx
12:33 - plus speed y multiplied by ny
12:40 - and then we change speed x by -2
12:44 - multiplied by an x
12:47 - multiplied by dot product and the same
12:50 - for speed y
12:51 - but with ny instead of nx cool
12:54 - that's all the math's done already now
12:58 - come back to the define
12:59 - tick and make sure to set our sprites
13:02 - costume back to the ball costume
13:04 - after calculating the bounce this
13:07 - is an exciting moment we can run the
13:09 - project and see
13:10 - what we have got oh my word it's a
13:14 - miracle
13:15 - the balls are actually bouncing pretty
13:16 - much in the directions you'd expect
13:19 - it's amazing what a little dot product
13:20 - maths can do but
13:22 - hold on there there seems to be a little
13:24 - bit of error
13:25 - in the bounce right here see how the
13:28 - ball is bouncing off to the right
13:30 - i'd expect it to be coming right back
13:32 - down at me
13:34 - it actually took me quite a while to
13:35 - track this one down
13:37 - here's me using say blocks to show the
13:39 - normal directions
13:41 - i'd expect them to say 180 when
13:44 - colliding with the ceiling
13:45 - but they are reporting 172.
13:48 - okay if we go into the ball costumes and
13:51 - select the normal costume
13:53 - all we need to do is resize the ball by
13:55 - about half
13:57 - and when you do this hold down the alt
14:00 - key alt the alt key before you start
14:04 - dragging this causes the resize to occur
14:07 - from the middle of the circle
14:09 - not the edge very important
14:13 - now this improves the precision of the
14:15 - circular sweep
14:16 - quite a bit as the larger circle was
14:18 - colliding with the floor
14:19 - too early testing again shows the
14:23 - collisions are now reported
14:24 - as 180 as expected so i can remove the
14:27 - debug and we can continue let's add back
14:30 - in the gravity to our simulation
14:34 - oh yes this is very satisfying the only
14:37 - thing missing is that the balls are
14:38 - exceedingly bouncy
14:40 - now why is this well it's because our
14:43 - collision
14:44 - maths are absolutely perfect there is no
14:47 - loss of energy from these bounces in the
14:49 - form of friction
14:50 - and luckily this is really easy to add
14:52 - in find our define
14:54 - bounce block and we'll change the minus
14:58 - two values here
14:59 - a value of minus two means a perfect
15:01 - bounce
15:02 - and minus one would deliver no bounds at
15:05 - all
15:06 - we'll pick a number in between minus one
15:09 - point
15:10 - six now look at this
15:13 - the balls are quite visibly losing speed
15:15 - now on collision
15:17 - but you can see too that this has caused
15:19 - some quirks
15:20 - but the balls are appearing to stall and
15:22 - stop moving
15:24 - this occurs because sprite collisions
15:26 - are never perfect
15:28 - we need to ensure we allow for a little
15:30 - ever by moving the ball away from the
15:32 - collision surface just a bit
15:33 - to prevent them getting stuck
15:37 - dur is already pointing away from the
15:39 - surface
15:40 - we'll move the sprite gradually in that
15:42 - direction using a repeat 10
15:44 - and within it we'll move the ball by
15:46 - half a pixel
15:47 - by sin of der and cos of der
15:54 - then stop the script when we detect no
15:57 - collision
15:57 - we do it this way so that the loop will
15:59 - always run once through
16:01 - even if it originally would not detect a
16:03 - collision
16:04 - in the unlikely event of not being free
16:06 - from the surface after 10 repeats
16:08 - we delete the clone running the project
16:11 - now and oh nice we've got a much more
16:13 - stable simulation
16:14 - the balls are no longer sticking to the
16:16 - surface
16:21 - now just a few more tweaks to finish
16:23 - this project off
16:25 - we can fade out the balls instead of
16:27 - just deleting them when they time out
16:31 - duplicate the main repeat loop and make
16:33 - a second
16:34 - short loop of twenty that also changes
16:37 - ghost effect by five
16:41 - now let's make the level a little bit
16:42 - more exciting try whatever you want
16:45 - this is the really fun part of making
16:47 - projects like this
16:53 - i love how the balls are naturally
16:54 - rolling down the slopes isn't physics
16:56 - great
17:01 - but ah we've hit an issue
17:04 - and you see my simulation has suddenly
17:06 - slowed down to a crawl
17:08 - or mega lag and look i can see the
17:11 - culprit right
17:12 - there that sprite is stuck in a wall in
17:15 - an endless loop
17:16 - in theory this should not happen but
17:18 - sadly as i said
17:19 - costume-based collisions in scratch are
17:22 - not perfect
17:23 - let's protect ourselves from this
17:25 - happening by making our repeat loops
17:27 - more robust locate the define find
17:30 - normal script this has the potential not
17:33 - to end
17:34 - if it doesn't ever escape from the level
17:36 - collision
17:37 - we can fix it by adding an if to the
17:39 - define rotate block
17:40 - and check if the absolute value abs of
17:44 - der
17:45 - is larger than 720 that's two full
17:48 - rotations
17:49 - then simply delete this clone
17:52 - there's one other loop in the define
17:54 - tick script that is worth fixing too
17:57 - make a new variable named count to keep
18:00 - track of the loops
18:02 - for this sprite only initialize it to 0
18:05 - and change it by 1 each time around the
18:08 - loop
18:09 - check if count gets larger than 20
18:12 - and then we again delete this clone
18:17 - now if i were you i'd like to add in
18:19 - some code to make the player's tank
18:20 - movable that would be super fun but i
18:23 - think i'll leave that to you
18:25 - however to allow us to test out firing
18:27 - from different locations
18:28 - i'm going to set the tank sprite as
18:31 - draggable with this block from the
18:32 - sensing category
18:35 - then in the ball sprite because we are
18:38 - no longer launching balls from the
18:40 - center of the screen
18:41 - we update the ball launching script to
18:43 - offset by the start position
18:44 - x and y of the projectile
18:49 - and that is it we can run the project
18:51 - full screen and drag the tank around
18:54 - i really love how the balls roll around
18:56 - in the disc shape i made
18:57 - to the right that is very satisfying
19:03 - so to round it all off let's just look
19:05 - back over the scripts to see what can
19:07 - change
19:08 - to make this project your own firstly
19:11 - the projectile velocity
19:12 - that's how fast the bullets travel
19:14 - through the air is set here in the ball
19:16 - sprite
19:17 - it is dependent on how far your mouse is
19:20 - from the tank
19:21 - but we could for example change it like
19:24 - this to give a constant speed in the
19:26 - direction of the mouse
19:28 - a value of 14 is quite fast but
19:31 - eight would give us much slower bullets
19:40 - we can play with gravity too just change
19:42 - speed y here
19:44 - zero for example turns gravity right off
19:50 - then there's ball bounciness scroll to
19:53 - the define bound script
19:55 - and see the number minus 1.6 and
19:58 - remember
19:58 - values can range from -2 for complete
20:01 - bountiness
20:04 - down to -1 for no bounce at all
20:13 - and lastly in the tank sprite we can
20:16 - change the fire rate
20:17 - by modifying this number a smaller
20:20 - number
20:21 - makes a tank fire faster like this
20:25 - and that folks is a wrap i know what
20:28 - you'll be asking for next
20:30 - what about bald ball collisions and man
20:33 - yes that would be
20:34 - really cool but it also is a whole other
20:37 - level of scripting
20:38 - and would get complicated very quick
20:41 - definitely a tutorial for another time
20:43 - what i think you should try next is
20:45 - developing the player movements
20:47 - and then adding in objects to be shot at
20:49 - wouldn't it be cool
20:50 - to add other players too do you think
20:52 - you could give it a go
20:54 - well i hope you've enjoyed this tutorial
20:57 - if you have then please do smash the
20:59 - like button
20:59 - and don't forget to subscribe to the
21:01 - channel to avoid missing my next
21:03 - exciting video leave me comments to let
21:05 - me know how you've got on
21:07 - and don't worry about posting your
21:08 - project ids here too if you want
21:10 - but until next time thanks for watching
21:13 - and scratch on guys