00:02 - hello fellow scratchers do you want more
00:05 - people to play your scratch games well
00:07 - then perhaps it's time to make your
00:09 - games mobile friendly yeah so many
00:12 - people want to play scratch on their
00:14 - mobile devices these days and to ensure
00:16 - they're not left out today's tutorial
00:18 - will cover the most asked for of mobile
00:20 - friendly control schemes the fixed
00:22 - mobile thumbstick control
00:24 - it has only two parts a fixed circular
00:26 - base and contained within a small
00:29 - draggable stick
00:30 - the whole thing stays neatly locked to
00:32 - one corner of the screen out of the way
00:34 - but the best part is that this little
00:35 - beauty can be dropped easily into almost
00:38 - any scratch project then with a little
00:40 - tweaking you'll have your game's mobile
00:42 - ready in no time indeed stay tuned
00:44 - because i'll be choosing a selection of
00:47 - your projects at random and we'll see
00:49 - just how easy it is to add and then play
00:51 - these games using it how exciting is
00:53 - that so are you ready yeah well let's
00:57 - get scratching
00:59 - so starting a new project we'll keep our
01:01 - scratch cat
01:02 - but make a new sprite for our controller
01:06 - naming it control stick
01:10 - then in the costume editor name the
01:13 - costume base
01:15 - we'll begin by designing the base of the
01:17 - thumb stick
01:18 - feel free to make this look any way you
01:21 - want and just take what i do as a guide
01:23 - i'm making an all black base
01:26 - drawing the initial circle while holding
01:28 - shift to ensure it's a perfect circle
01:31 - i'm aiming for a size of around 85 by 85
01:34 - pixels
01:36 - then we must drag the shape until it
01:38 - snaps to the middle of the canvas like
01:41 - so this is such an important step so
01:44 - please don't forget to do this
01:46 - then purely for effect i'm drawing a
01:48 - second circle around the first but this
01:50 - one's just an outline without a fill
01:53 - again snap it to the center
01:57 - cool i like that
01:59 - next up we'll add a second costume
02:03 - this time naming it stick
02:06 - so why are we adding this to the same
02:09 - sprite rather than the simpler approach
02:11 - of adding a separate sprite for this
02:13 - the reason is if it's all scripted in
02:16 - one sprite
02:17 - that makes it far easier to backpack and
02:19 - copy into other projects so to draw the
02:23 - thumb stick i will use pure white
02:26 - but this does make it tricky to see when
02:28 - you're drawing this one is around 33 by
02:32 - 33 pixels
02:34 - again snap the circle to the center
02:37 - and again i'm drawing another circle
02:40 - around the inner one to make it look
02:41 - extra nice
02:45 - brilliant now we can just drag the
02:48 - joystick base on the stage to position
02:49 - it where we want the controller to
02:51 - appear in our game
02:53 - right time to lay down some code blocks
02:56 - when flag clicked
02:59 - switch costume to bass
03:05 - then set ghost effect to 60.
03:14 - and now we run the project
03:16 - cool this makes the joystick bass
03:18 - transparent that's very important so
03:20 - that we can see the game play behind it
03:23 - since we're using a single sprite we'll
03:25 - use a create clone of myself block to
03:28 - generate a separate sprite for the top
03:30 - thumb thumbstick
03:32 - and when i start as clone event block
03:35 - lets us continue the scripts for just
03:37 - the new clone so adding a switch costume
03:40 - to stick only affects the new clone
03:42 - sprite
03:44 - and we run the project and
03:46 - ah
03:47 - you might have hoped to see the white
03:49 - thumbstick appearing in front of the
03:50 - darker base but no it doesn't the reason
03:53 - is simple the clone has been created but
03:56 - clones always appear one layer behind
03:59 - their original sprites not in front as
04:01 - we need here
04:03 - so fix that with a go forward one layer
04:07 - and there we go the stick has appeared
04:09 - wonderful and i think we can risk making
04:12 - it a little less faint set ghost to 25
04:20 - very attractive like a licorice wheel i
04:23 - do rather like licorice how about you
04:26 - yum
04:27 - shall we get this little stick moving
04:29 - around
04:30 - bring in a forever loop
04:32 - now any press of a touch screen is
04:34 - detected in scratch by the mouse down
04:36 - block
04:37 - so
04:38 - wait until
04:40 - mouse down this will pause the script
04:43 - until we touch the screen
04:45 - now we repeat until the user's finger is
04:47 - no longer touching the screen that is
04:50 - not
04:53 - mouse down
04:55 - then in here we can go to mouse position
04:58 - this will make the control stick follow
05:00 - the mouse until the user releases it
05:03 - it's testing time again now a little
05:06 - warning you have to switch to full
05:08 - screen mode to test the project from now
05:10 - on otherwise you'll end up grabbing the
05:12 - sprite on the stage as you drag and that
05:14 - messes things up no end
05:16 - oh yeah this is looking promising i can
05:19 - click and drag the little circle around
05:22 - and the larger circle stays still cool
05:26 - next we shall make the smaller stick
05:28 - return to the center when we finish
05:30 - dragging it
05:32 - drag in a new go-to block and drop it in
05:35 - as the first block in the forever loop
05:38 - we want it to always start in the center
05:41 - the center is defined by the position of
05:44 - the base sprite here
05:46 - but not only is the control stick sprite
05:49 - not listed in the go to sprite list but
05:52 - there's the added confusion that we have
05:54 - two control stick sprites the original
05:56 - and the clone which sprite would scratch
05:59 - pick well the good news is it always
06:02 - chooses the original sprite and that is
06:05 - the base there's a few work rounds to
06:07 - get the same missing sprite name in this
06:10 - block today i'm going to use a variable
06:12 - to do the job
06:14 - scrap this default one and make a new
06:17 - variable naming it bass sprite
06:20 - or if you're daft like me call it myself
06:24 - and mark it for this lemon only
06:27 - right under the first green flag script
06:30 - set myself to the name of this sprite
06:33 - that is control stick i'm going to copy
06:36 - and paste it to make sure i spell it
06:38 - just the same capital letters and all
06:41 - great so now we can use this variable to
06:44 - tell the sprite where to go to
06:46 - and that is the original controller
06:48 - stick sprite
06:50 - give it a test
06:52 - we drag and release the stick and it
06:54 - springs back most satisfyingly to the
06:56 - center of the base that's great
06:59 - so if we're going to control our games
07:01 - with this stick we'll need a way of
07:03 - reading back a stick position from the
07:05 - thumbstick sprite
07:07 - first we'll get the direction of the
07:09 - stick
07:10 - to help us see what's happening i'm
07:12 - going to draw a little arrow on the
07:14 - thumb stick but don't worry i'll remove
07:16 - this once we're done make sure it points
07:19 - to the right
07:20 - we want to find the direction of the
07:22 - thumbstick from the thumbstick base
07:25 - but since we are coding within the
07:27 - thumbstick clone the thumbstick itself
07:29 - let's start by pointing back towards the
07:32 - base sprite
07:34 - that is the myself variable again gosh
07:37 - i really wish i'd call that variable
07:39 - bass sprite
07:40 - oh
07:41 - it would make so much more sense right
07:42 - now hindsight right
07:45 - now we can see as we drag the stick it
07:48 - does point back perfectly
07:50 - so if we were to flip it around 180
07:53 - degrees
07:54 - turn 180 degrees
07:58 - there we go sweet it is pointing in the
08:01 - direction we are dragging it we're
08:03 - halfway there let's record this
08:04 - direction in a variable so it can be
08:06 - used in our games
08:08 - make a new variable named stick
08:11 - direction
08:13 - leaving it for all sprites
08:16 - then set stick direction to
08:22 - direction
08:25 - now we look at how far the player has
08:27 - pushed the stick away from the middle
08:29 - that is the amount of power applied to
08:31 - this movement make a new variable stick
08:34 - power also for all sprites
08:38 - and this we set to the distance between
08:41 - the thumb stick and the base
08:44 - distance to
08:47 - myself
08:51 - and it's testing time smash that green
08:53 - flag and watch those stick variables fly
08:57 - the stick direction tells us the
08:58 - direction the stick is pointing in and
09:00 - the power variable tells us how fast we
09:02 - are moving it in that direction
09:05 - we only have one problem the little
09:08 - thumbstick can be yanked right out of
09:10 - its base and across the screen that's
09:12 - not right no we must constrain it to the
09:15 - base circle and that would be around
09:18 - here yes a stick power of around 25
09:22 - anymore and it will have gone too far
09:25 - so we can check for this with an if
09:28 - stick power
09:29 - is greater than 25.
09:36 - but hold on i feel this 25 will crop up
09:40 - again so let's make available to hold
09:42 - this value in name it
09:44 - max
09:45 - stick
09:46 - for this sprite only and we set it after
09:49 - the green flag is clicked to 25.
09:53 - great replace the greater than 25 down
09:55 - here with our max stick variable
09:59 - so if the stick power has gone further
10:01 - than mac stick then we want to move it
10:04 - back to the max stick distance 25
10:07 - we can calculate the change needed by
10:09 - subtracting stick power from max stick
10:12 - this gives us the negative difference
10:14 - between these two numbers moving by this
10:16 - takes us back to here
10:18 - perfect
10:19 - so move steps
10:21 - with a subtract operator
10:23 - on the left we have max stick
10:27 - and from this we subtract stick power
10:30 - cool let's try it out
10:33 - oh man yes this is great the little
10:36 - stick control is nicely constrained
10:38 - inside the larger circle but we can
10:40 - still make finer movements within this
10:43 - area too and that's what we need however
10:46 - the stick power variable is
10:48 - unfortunately not capped at 25
10:52 - okay no problem after moving the thumb
10:55 - stick back stuff in a set stick power
11:01 - to max stick
11:04 - again this will be 25 so checking that
11:06 - out and yep there we go it now maxes out
11:10 - at 25
11:12 - but in all honesty when we use the
11:14 - controller in our games it is unlikely a
11:16 - power of 25 will mean anything to us
11:19 - better if the max power variable reads
11:20 - as one for max power and zero for no
11:23 - power that would make it consistent and
11:25 - simple to use
11:27 - bring in another set stick power block
11:31 - and we will simply divide the existing
11:33 - stick power value by
11:36 - max stick to ensure that the value never
11:39 - gets greater than 1.
11:42 - and the proof is in the pudding and
11:45 - there it is a maximum power of one
11:47 - achieved
11:48 - one more thing before we can try using
11:50 - this stick and that is when the stick
11:52 - snaps back to the middle after i release
11:54 - it the stick power available must reset
11:57 - too
11:58 - so up here
12:00 - set stick power to the empty value this
12:03 - indicates that we are not touching the
12:05 - stick at all
12:07 - pop it under the go to myself at the top
12:10 - of this forever loop
12:13 - great and the power resets do nothing as
12:16 - expected i'm really pleased with how
12:18 - this is behaving we'll be controlling a
12:20 - game with this in no time so i'll remove
12:23 - the small arrow from our stick costume
12:26 - and then click into the scratch cat
12:29 - sprite 1 sprite
12:31 - scratchy will help us test this
12:33 - controller out quickly now when green
12:36 - flag clicked forever
12:38 - this is our game loop now we'll check if
12:41 - the controller is being used
12:42 - if stick power is greater than zero
12:49 - then we simply point in direction
12:55 - and drop in the stick direction variable
12:59 - so what do we have here then
13:02 - we've only got a mobile stick that can
13:04 - change scrap cat's direction that's what
13:07 - how cool is this so how about a bit of
13:11 - movement two
13:13 - move forward by
13:14 - stick power steps
13:17 - but remember stick power never gets
13:19 - bigger than one
13:20 - that is never going to get anywhere fast
13:23 - so thrust in a meaty multiply block and
13:26 - make the stick power six times more
13:28 - speedy
13:32 - and now we are getting somewhere it is
13:34 - nice to have a stick that allows for
13:36 - slow or fast movement just as you need
13:38 - them so we can run away from a mob or
13:41 - skillfully edge around an obstacle at
13:43 - least that's the idea if it wasn't so
13:45 - fiddly to use on a touch screen
13:48 - okay let's talk about stick activation
13:51 - did you notice how the thumb stick gets
13:53 - activated even when we click as far away
13:56 - as this from the controller well that's
13:59 - no good if we want to be able to click
14:01 - on other buttons or elements on the
14:02 - screen without moving the thumbstick so
14:05 - this must be fixed the common technique
14:07 - used is to only allow the joystick to be
14:09 - activated when the mouse press begins in
14:12 - the area just around the thumb stick
14:15 - controller once activated it captures
14:17 - all movement no matter if you stray
14:20 - outside the activation area or not
14:22 - then on release of the mouse button the
14:24 - capture is over this also means you
14:26 - can't click outside the activation area
14:29 - and then drag over it to begin using the
14:31 - stick no it requires activation with a
14:33 - direct click
14:35 - cool shall we code that up
14:37 - switch to the control stick sprite
14:40 - this forever loop is getting too long we
14:43 - can break it up separate off the whole
14:45 - of this repeat until script this is
14:48 - specifically dealing with dragging the
14:49 - thumbstick around that is once it has
14:51 - been activated
14:53 - we'll wrap this up in a new custom block
14:55 - naming it stick drag
14:57 - please please please do not tick the run
15:00 - without screen refresh that should only
15:01 - be used if the script is supposed to run
15:04 - instantly but we know this script will
15:06 - run for as long as the mouse is held
15:07 - down so don't run without screen refresh
15:10 - don't right attach the new define block
15:14 - to the orphaned repeat until script
15:17 - before we make use of this new stick
15:19 - drag block we'll do a little rethinking
15:21 - of the forever loop here i think it
15:23 - makes more sense to replace this weight
15:25 - until mouse down with a repeat until
15:28 - mouse down
15:29 - the reason is that then we can
15:31 - continually reposition the thumb stick
15:33 - to match the position of its base
15:35 - just in case we ever move the bass
15:37 - around mid game well we might
15:40 - next bring in the if else block and drop
15:43 - in a less than operator
15:45 - now the mouse has been clicked but is it
15:48 - close enough to the thumb stick to
15:50 - activate it we check the distance to
15:52 - mouse pointer being less than
15:55 - hmm
15:57 - i'm thinking perhaps around 100 pixels
15:59 - for starters and in which case i'll just
16:01 - use the size block that starts at 100
16:05 - and that also means that if we resize
16:07 - the controller sprite this check will
16:09 - scale with it
16:11 - so if we are within 100 pixels of the
16:14 - base of the thumb stick we can use a
16:16 - stick drag block this stick is activated
16:19 - but otherwise we clicked outside the
16:22 - activation area in this case we simply
16:24 - wait until
16:25 - the mouse is not pressed down not mouse
16:29 - down before we continue to loop around
16:31 - and wait for the next mouse press
16:33 - beautiful let's see this in action
16:36 - firstly when clicking on the stick i can
16:39 - use it as before and also i can still
16:42 - drag outside the controller and it keeps
16:44 - working
16:45 - it's captured the mouse input that's
16:48 - great but if i release a touch and start
16:50 - pressing elsewhere on the screen now the
16:52 - thumb control does not activate splendid
16:56 - let's see just how close i have to be to
16:58 - activate this thing
17:01 - actually it appears the activation
17:02 - distance may be slightly too lenient i
17:05 - think we should require it to be closer
17:08 - we can scale down this size from 100 to
17:11 - say around 60 by multiplying size by 0.6
17:20 - now if i click around the stick i have
17:22 - to be really close
17:23 - yeah really close to activate it cool so
17:27 - you can play with this 0.6 number to
17:29 - configure how close to the control you
17:31 - want yours to activate
17:33 - the last action to confirm is that i
17:35 - can't control the stick by starting a
17:37 - touch outside of the activation area
17:40 - even if i then drag back in over the
17:42 - thumb stick
17:43 - no splendid it works great good job
17:47 - so this type of thumbstick control
17:48 - scheme is excellent for games like
17:50 - slytherio or that kind of genre where
17:52 - you want to point your avatar in any
17:54 - direction
17:55 - but what about other games where we
17:57 - would need to track the x and y
17:59 - directions separately
18:01 - let's change the player sprite to be
18:03 - like a standard platformer
18:05 - having an if left arrow pressed and an
18:08 - if right arrow pressed to move the
18:09 - player left or right respectively
18:13 - so the problem here is that our stick
18:15 - direction and stick power don't
18:17 - translate super easily to this instead
18:20 - what we want is our stick x and stick y
18:23 - variable instead of the direction and
18:25 - power
18:27 - the good news is that these values can
18:28 - be quickly calculated using our friend
18:31 - trigonometry
18:32 - stick x is equal to
18:34 - stick power
18:36 - multiplied by the sine of stick
18:38 - direction
18:40 - and stick y equals stick power
18:42 - multiplied by the cosine of stick
18:44 - direction and this will be used so much
18:46 - it makes sense to code it right into the
18:48 - control stick sprite itself so click
18:50 - back in there now
18:52 - find the define stick drag script and
18:55 - we'll begin by making two new variables
18:57 - stick x
19:00 - for all sprites
19:02 - and stick y also for all sprites
19:06 - then scroll down to where we set stick
19:08 - power
19:09 - and now we can set stick x to
19:14 - and here we go multiply
19:19 - stick power
19:21 - with the sign
19:26 - of stick direction yeah
19:30 - then duplicate that
19:32 - making sure to set not stick x but stick
19:35 - y
19:36 - and then change the sign for a cosine
19:39 - cos
19:40 - gosh you should be getting pretty
19:41 - familiar with us using the sine and cos
19:43 - blocks in this way they are just so
19:45 - useful and we'll use them like this over
19:48 - and over again
19:49 - so click the green flag and here are the
19:52 - stick x and y variables updating as we
19:54 - drag the thumbstick around
19:59 - hold on i note that when we release the
20:02 - stick these values are not resetting
20:04 - back to zero we should fix that we'll
20:06 - need a set stick x and stick y block
20:10 - but this time setting them both to zero
20:13 - yes having an empty value in here can
20:14 - cause us more problems than it solves so
20:17 - yeah set them to zero but where do we
20:19 - drop it in not in this custom block but
20:22 - back over here under the when i start as
20:25 - a clone just after we set stick power to
20:27 - the blank value that makes sense to do
20:30 - it all together
20:31 - a quick
20:32 - test
20:34 - and that is great the stick x and y
20:36 - values are resetting when i release the
20:38 - mouse
20:39 - well then let's see if we can plug this
20:41 - into our test game script
20:44 - click into the first sprite and well i
20:46 - guess we can actually just replace the
20:48 - whole left and right checks with a
20:49 - change x by and then multiply stick x by
20:52 - 6 for extra speed
20:55 - and this is a great test as it shows how
20:58 - we've completely separated the x and the
21:00 - y axis from each other i can drag the
21:02 - stick left and right to control the cat
21:04 - but the up and down axis does nothing at
21:07 - all
21:08 - but what if we didn't want to recode the
21:10 - whole control system and wanted to plug
21:12 - in to an existing game just mimicking
21:14 - the more conventional left and right key
21:16 - presses
21:17 - well in that case it might be best to
21:19 - count any movement of the stick past a
21:21 - certain distance
21:23 - say over 0.5 to mean that we are walking
21:26 - to the right
21:27 - or to the left or jumping to do this
21:30 - bring in an or so we can keep the left
21:33 - key press check in place and then add in
21:35 - a less than operator and for movement we
21:39 - check whether stick x is less than
21:42 - negative
21:43 - minus 0.5
21:45 - negative 0.5
21:47 - for the right control we do the same but
21:49 - check for stick x being greater than
21:52 - positive 0.5
21:58 - so how does this play out
22:01 - trying some little movements first and
22:03 - that doesn't do
22:05 - anything no movement of our cat but as
22:08 - soon as we go over the threshold half
22:10 - goes our player splendid and that still
22:13 - works with any key presses too so that's
22:16 - fantastic
22:17 - right now to have a whole lot of fun we
22:20 - can't know how well this thumbstick
22:22 - works without dropping it into a few
22:24 - real scratch games and having a play
22:27 - but before we do i just want to make the
22:29 - thumbstick a little bit bigger
22:30 - it may work well on large pc screens but
22:33 - when played on a mobile phone not so
22:35 - much boy is this thing tiny
22:38 - no problem click into the control stick
22:41 - sprite and drop in a set size block
22:43 - before we set mac's stick
22:45 - and we'll try setting this to 200
22:47 - percent yeah that will be huge and
22:50 - wowsers look at that great for players
22:53 - with big thumbs and small devices i
22:55 - guess but there's a problem we can't
22:57 - drag the thumbstick far enough to reach
22:59 - the edge of the base circle anymore
23:02 - and that's because we need to increase
23:03 - our max stick variable in relation to
23:06 - the sprite's size too
23:08 - well 25 is a quarter of the original
23:11 - size of a hundred so set max stick to
23:13 - size divided by four
23:15 - we get four by dividing 100 by our
23:18 - previous 25.
23:19 - there that's better we should just fix
23:22 - the position of our controller so it's
23:23 - fully on screen
23:26 - stop the project and drag the base to
23:28 - wherever you want it to sit and i think
23:30 - i'll try it on the right hand side for
23:32 - now instead
23:33 - yes that works so well perhaps it's just
23:36 - a little oversized though so maybe i'll
23:38 - size it back down to 140
23:42 - and one more tweak drop in a go to front
23:45 - under the green flag script right at the
23:47 - start to make sure the controller is
23:49 - brought in front of all the other
23:51 - sprites in the project
23:52 - and now we open our backpack
23:55 - and drop the whole control stick sprite
23:58 - in there and i am so excited to try this
24:01 - out but even more excited to see how you
24:04 - guys will get on with this just remember
24:06 - the studio for this project is linked in
24:08 - the video description and it's going to
24:10 - be so fun because you get to choose any
24:12 - of your games to put in there as long as
24:14 - you've added a mobile joystick to show
24:16 - off
24:17 - okay so without any forethought at all
24:20 - let's find a fun looking project
24:22 - how about um
24:24 - snowy town by teen
24:28 - hey what's this mmo platformer
24:31 - well okay turns out this is a remix of
24:33 - one of my games who knew but why not i
24:36 - can confirm it does not have any mobile
24:38 - controls yet so perfect i'll look inside
24:41 - and locate the key press scripts
24:44 - here they are so first we need to open
24:46 - our backpacks and drag in the control
24:49 - stick sprite
24:50 - then back in the main game sprite i'll
24:52 - replace the wasd the was keys with our
24:55 - stick controls
24:57 - replace the right key presses checks
24:59 - with if stick x
25:01 - is greater than
25:02 - 0.5
25:08 - and for the left movement stick x is
25:11 - less than
25:12 - minus 0.5
25:15 - quick test
25:18 - here we go
25:19 - [Music]
25:21 - yeah look at this i can easily move left
25:23 - and right with the thumb stick
25:25 - now this may be a common issue though
25:27 - the thumbstick sprite is still not in
25:29 - front of the other sprites in the game
25:32 - to fix that perhaps we can just click
25:34 - into the thumbstick sprite and add a
25:37 - wait one second before it starts setting
25:40 - up the stick we could also trigger this
25:42 - off a broadcast event or any other way
25:43 - that works for you
25:47 - okay back in the game sprite
25:50 - the jump key is detected here i'll
25:52 - replace the space key check with a check
25:54 - for stick y being greater than
25:57 - 0.5
25:59 - here we go again
26:01 - but this time dragonistic up lets us
26:03 - jump around two here b and we are off
26:06 - hey this isn't half bad what do you
26:08 - think
26:12 - [Music]
26:15 - should we try another game
26:17 - hey this looks fun click and jump by
26:20 - mangold658
26:22 - another platformer huh
26:25 - let's see if we can switch it for the
26:27 - thumb stick control
26:31 - drag the control sprite from our
26:32 - backpack and we go searching for the key
26:35 - and mouse control scripts
26:37 - here they are in the ninja sprite
26:41 - check for stick x greater than 0.5
26:47 - and less than
26:49 - minus 0.5
26:51 - we've replaced the jump checks
26:55 - with a test for stick y being greater
26:57 - than 0.5
27:00 - so how does this feel
27:02 - yeah we can move
27:04 - and jump
27:06 - the first spikes pose me no problem aha
27:09 - a sword fun wait a minute how do i use
27:12 - this sword oh man i think there must be
27:14 - another key for that um
27:17 - i should have read the instructions i
27:18 - guess we'd have to start getting
27:20 - creative with our controls to make this
27:22 - work fully mobile perhaps a tap of the
27:24 - screen to swish the sword or a swipe
27:26 - down or even clicking on the mob ah
27:30 - oh no ouch oh no
27:35 - ah
27:36 - oh
27:37 - [Music]
27:40 - oh no
27:41 - maybe i'm not the best at this game or
27:44 - it could be because i'm using my mouse
27:45 - rather than my thumb so i can record
27:47 - this video could be yep actually that
27:50 - must be it
27:51 - right ragequit let's find something a
27:53 - little bit different ah
27:55 - a car game highway madness by game
27:58 - central let's see
28:00 - oh well it turns out this too has mobile
28:02 - controls in place but it does suffer
28:04 - from a jiggling issue so perhaps our
28:06 - thumb stick can fix that
28:08 - locate the movement scripts
28:11 - drag in the control stick sprite
28:15 - and then check for stick x being greater
28:17 - than 0.5
28:20 - or perhaps 0.3 to be more sensitive and
28:24 - then less than minus 0.3
28:29 - so here we go
28:32 - [Music]
28:35 - and it surely works i might add that we
28:37 - could adapt this one to allow for
28:39 - smoother movement using the analog stick
28:41 - x variable rather than triggering off
28:43 - greater than and smaller than limits i
28:46 - think that would work even better
28:48 - however that's a cool game good work
28:51 - here is a slither io clone by slaud was
28:54 - taken oh wow i'm such a cute button of a
28:57 - snake
28:58 - yes so this works just like mice of the
29:00 - wire game control wise and the snake
29:02 - already follows the mouse but if you've
29:05 - played the mobile version of slytherio
29:06 - on your phone you'll know that this too
29:09 - will use a mini thumbstick so hey let's
29:11 - try doing the same here i'm going to
29:14 - make our stick base a slightly different
29:16 - color so that it shows up against the
29:18 - black
29:19 - just trying to figure out what i need to
29:21 - change
29:22 - okay for now i'm going to just drop in a
29:24 - set mouse direction block in here
29:30 - and set it to stick direction i probably
29:33 - need to check the stick power first but
29:35 - never mind let's see
29:38 - woohoo it's working great
29:40 - this is purely working by direction of
29:42 - the stick but that's all we needed
29:44 - really
29:45 - wow i'm still such a tiny snake what's
29:47 - going on
29:49 - [Music]
29:53 - oh wait oh yeah okay i didn't consider
29:56 - that the game would count me as pressing
29:58 - the mouse button down to accelerate all
30:00 - the time that's another issue that needs
30:02 - solving for this game to work fully
30:04 - mobile
30:06 - next up cube comics has created his own
30:10 - sputastic spin on lemonoid invasion
30:14 - wow it's looking great now this game is
30:18 - tricky to port to mobile because it's
30:20 - already controlled by the mouse and
30:22 - keyboard together the keyboard to move
30:24 - and mouse to aim and shoot the obvious
30:27 - option is to combine the two and have
30:29 - the ship fly and fire in the direction
30:31 - the thumb stick is pressed
30:33 - we'll start there so we can see that in
30:35 - action for simplicity and speed we'll
30:38 - change the control scheme over to use
30:40 - the thumb stick completely
30:41 - in reality we probably want a menu
30:43 - option or a key press to toggle between
30:46 - the two control schemes
30:47 - so in place of the key presses i just
30:50 - drop in stick x and stick y variables
30:53 - but careful it's too easy to forget what
30:55 - point towards does and think you can use
30:58 - the stick direction in there no no don't
31:00 - do that we are not pointing towards
31:03 - something at all we want a point in
31:05 - direction block to then point in
31:07 - direction stick direction
31:10 - right let's test
31:11 - okay this is working as i expected i'm
31:14 - finding i have to be super careful not
31:16 - to move too fast making aiming
31:18 - adjustments is causing the player to
31:20 - accelerate towards the very potato that
31:23 - i'm trying to avoid that's unfortunate
31:25 - the result is that i have to keep
31:26 - turning to retreat away to give me space
31:29 - to attack them again from a safe
31:30 - distance
31:31 - even so this is still quite fun
31:34 - i have had one interesting idea what if
31:36 - we split the joystick power into two
31:39 - regions
31:40 - so that pressing hard flies us around
31:43 - but more delicate presses only cause us
31:45 - to rotate so we can aim
31:48 - to implement this we leave the pointed
31:50 - direction as it is so it always turns
31:52 - but just surround the move blocks with
31:54 - an if
31:58 - and check for when stick power is
32:00 - greater than
32:02 - say 0.4 or maybe higher we can play with
32:05 - that value later
32:07 - and that should be all we need to do
32:09 - let's see that in action
32:11 - hey yeah look at this i can now use
32:14 - little movements to aim and then push
32:16 - further to thrust off across the level
32:18 - what do you think of that idea then
32:20 - pretty cool right i'm sure you guys can
32:22 - come up with some really interesting
32:24 - ideas to solve these problems too
32:27 - wow there's a lot of game types that
32:29 - would be interesting to try this
32:30 - thumbstick out on what i've learned from
32:32 - this experience though is that mobile
32:34 - controls in scratch are perhaps not the
32:36 - best it would be great if scratch
32:38 - embraced its mobile audience more fully
32:40 - and added native support for mobile
32:42 - touch joysticks or even better a mobile
32:45 - touch extension to grant us multi-touch
32:47 - scratch blocks oh yes sign me up for
32:49 - that
32:50 - well okay guys as i said earlier i'm
32:53 - putting a link to the scratch studio for
32:55 - this tutorial in the description under
32:56 - the video you can submit any project you
32:59 - like so long as it uses the mobile stick
33:01 - control in some way but please if you
33:04 - don't mind only submit one project per
33:06 - user that would be great so choose
33:09 - carefully and that just leads me to say
33:11 - if you have enjoyed this video please
33:14 - smash the like button and don't forget
33:15 - to subscribe to the channel so as not to
33:17 - miss my next exciting tutorial if you'd
33:20 - like early access or priority comments
33:22 - then these are just some of the perks
33:24 - available to channel members look out
33:25 - for the join button lurking around under
33:27 - each video and on my main channel page
33:30 - right that's it from me have a great
33:32 - week ahead and scratch on guys
33:38 - if i release the touch and start
33:40 - pressing else
33:43 - let's see how blah blah blah blah blah
33:46 - blah
33:47 - the mobile touch joysticks or even
33:49 - better a more ball