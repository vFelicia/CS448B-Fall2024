00:02 - hello fellow scratchers coding a project
00:06 - in scratch that can capture or scan an
00:08 - image of the screen is so much harder
00:11 - than it should be and if it's not hard
00:13 - then it's slow
00:15 - but there's so many cool projects just
00:18 - begging to be made that would make use
00:20 - of this i myself need it to scan in
00:22 - textures to my upcoming raycasting
00:24 - tutorial but it's also super cool for
00:27 - making paint programs with save and
00:28 - loading of pictures for warping or
00:31 - changing screen colors or even for
00:33 - dabbling in advanced graphic processing
00:35 - effects there's really no limit to the
00:37 - ideas out there but there is a real
00:39 - problem although color scanning can be
00:41 - done simply enough once you know how to
00:44 - detect a single pixel of color scanning
00:46 - the full 172 000 pixels that make up the
00:50 - scratch screen takes way
00:52 - way too long
00:55 - man is there nothing that can be done
00:58 - well until a few weeks ago i would have
01:00 - said no but some very clever scratches a
01:03 - huge shout out to geotail in particular
01:06 - have pioneered a brand new approach to
01:08 - scanning with astonishing results
01:10 - promising to reduce our scanning times
01:12 - down from an eye-watering 20 minutes all
01:15 - the way down to
01:17 - well how fast do you think this could
01:19 - get have a guess in the comments below
01:21 - and then keep watching and i will reveal
01:23 - all as we step through how to code this
01:26 - marvel ourselves and there's a bonus no
01:29 - it's not a lemon although that would be
01:31 - rather cool later on in this video i'm
01:33 - going to reveal a super fun project i
01:36 - have been working on that also makes the
01:38 - most of this new scanning technique with
01:40 - hilarious results so don't go anywhere
01:44 - guys are you ready
01:46 - let's get scratching
01:48 - if you haven't yet watched my previous
01:50 - video on colour detection in scratch
01:52 - then you may want to quickly watch that
01:54 - now because i'm going to begin where we
01:57 - left off in that episode this is the
01:59 - complete color detection project you see
02:01 - here
02:02 - but so as not to lose our progress let's
02:05 - save the project as a copy and name it
02:07 - something like full screen scanning
02:10 - so here we go we don't need everything
02:13 - we have here though sorry scratchy you
02:15 - can leave the party
02:17 - then rename the remaining sprite from
02:19 - sprite1 to
02:21 - scanner cool that's better
02:24 - we also added some simple mouse drawing
02:26 - scripts again not needed drag off the
02:28 - when flag clicked script
02:31 - and lastly we have the when space key
02:34 - pressed script pressing space will
02:36 - detect the colour under the mouse
02:37 - pointer we can keep the key press but
02:40 - change it to scan the entire page delete
02:43 - all the scripts underneath except the
02:45 - reset timer block so we can still keep
02:46 - track of the time it takes to complete
02:49 - brilliant
02:50 - so full screen scanning the way this is
02:53 - always done is to simply position our
02:55 - sprite at the top left of the screen
02:58 - detect the color stuff the value in a
03:00 - list and then repeat this process for an
03:02 - entire row and then do the same for
03:04 - every other row of pixels zigzagging
03:06 - down the entire screen until all the
03:08 - pixel colors have been captured
03:11 - no problem let's do it make a new custom
03:14 - block scan
03:16 - and make sure to tick the run without
03:18 - screen refresh block
03:20 - we'll begin a scan right after resetting
03:22 - the timer and of course return the set
03:24 - time to timer after that to calculate
03:28 - how long the scan took to complete
03:30 - just throw away the rest of the all
03:32 - detached scripts
03:34 - right our scan begins at the top of the
03:36 - screen set y to
03:39 - 179
03:42 - that's the top row
03:44 - then repeat
03:47 - 360 times
03:50 - changing y by
03:51 - negative
03:53 - one
03:54 - each time around this will loop us from
03:57 - the top to the bottom one row at a time
04:00 - perfect
04:02 - we want a similar loop to take us from
04:04 - left to right
04:05 - so starting by setting x to negative 240
04:09 - the far left and then we repeat by 480
04:15 - changing x by positive this time one
04:20 - now place the second loop within the
04:22 - first one just before the change y this
04:26 - should produce that zigzag movement
04:28 - pattern we were after and we'll visit
04:30 - all
04:31 - 172 000 screen pixels
04:34 - scary
04:35 - because now when we drop our get color
04:38 - block here the number of touching color
04:40 - instructions this script will
04:42 - potentially run will explode into the
04:45 - billions that's right we are talking
04:48 - seriously big numbers here gosh how long
04:50 - will this take to run
04:52 - before we can find out though let's just
04:55 - finish off the script by making a new
04:57 - list to record the scan results in so
04:59 - name it scan for all sprites
05:02 - then we simply use the add to list block
05:05 - to add the colour value to the scan list
05:08 - splendid that's practically it just a
05:11 - bit of housekeeping scroll up and make
05:13 - sure to reset the scan list before we
05:15 - begin we do that with a delete all of
05:18 - scan
05:19 - then as this will take some time to run
05:22 - set time here
05:24 - to please wait this will ensure we know
05:27 - the scan is in progress
05:30 - lastly in some free space add back a
05:33 - when green flag clicked and set time
05:37 - to press space to scan
05:40 - just in case we forget what to do right
05:43 - and drop in a hide block
05:47 - and erase all to clean up the pen canvas
05:50 - cool that is pretty much all a basic
05:53 - scanner needs to do shall we see if it
05:55 - works
05:56 - click the green flag and then as
05:58 - instructed press the space key to begin
06:01 - our full screen scan and it is off can
06:05 - you see the new colour values simply
06:07 - flying into the scan list and you might
06:10 - be impressed by how fast it's going
06:12 - until you remember we are expecting 172
06:16 - 000 items to be added to this list once
06:19 - it completes
06:20 - and we've only just reached 1 000.
06:23 - oh gosh so this is clearly going to take
06:26 - some time to complete and that's not a
06:29 - good thing when we haven't even verified
06:31 - that the scan is actually working as
06:33 - intended it would be awful to wait until
06:36 - the end and be disappointed
06:38 - perhaps we should stop it here and
06:41 - confirm the scan data is legit
06:44 - for this we'll create a new sprite
06:46 - naming it render
06:50 - let's paint out the contents of the scan
06:52 - list using pen
06:54 - in which case return to the scanner
06:56 - sprite momentarily
06:58 - and we're going to copy this script
06:59 - under the define scan block into our
07:02 - render sprite after all scanning and
07:04 - painting follow the exact same movements
07:07 - okay then back in the render sprite
07:10 - what we don't need is the get color or
07:12 - the add to list blocks but do make sure
07:15 - to keep the change x by 1 in this loop
07:19 - next make a new custom block named
07:22 - render and tick the run without screen
07:25 - refresh block as this render script must
07:28 - run as fast as possible
07:30 - so attach the scripts
07:32 - and begin by erasing all previous pen
07:35 - drawings we want a clean canvas
07:38 - next set pen size to one
07:41 - a thin pen size is paramount to
07:43 - preserving as much detail as possible in
07:45 - our drawn image
07:47 - we want to put the pen down just before
07:50 - we begin repeating by a 480 this will
07:52 - allow us to paint across the screen as
07:55 - we change colours
07:57 - but make sure to pen up again after the
08:00 - line is complete
08:01 - lastly we need to correctly set the pen
08:04 - color
08:04 - do be careful to use the correct block
08:06 - here it's the one with the actual color
08:09 - showing in the right of the block
08:11 - but rather than choosing a colour by
08:13 - hand the value will come from the scan
08:15 - list
08:16 - using the item of scan block but hold on
08:19 - what item number do we use we need a new
08:22 - variable to keep track of that
08:24 - name it scan index or idx for short
08:28 - this can be for this sprite only
08:33 - begin by setting it to 1 the very first
08:35 - item in the scan list
08:38 - and then use the same variable as the
08:40 - item number in our scan list
08:43 - cool
08:44 - lastly we change scan index by 1.
08:48 - this will now loop through all 170 000
08:51 - items changing the color of the pen as
08:52 - it goes excellent we can call forth a
08:56 - render block to test this script are you
08:58 - ready i certainly am click the render
09:01 - block
09:04 - hmm
09:05 - do you see anything
09:07 - ah wait look up here if i'm not mistaken
09:10 - there's a little color to be found
09:11 - behind these pesky variable reporters
09:14 - well we certainly didn't get very far
09:16 - with scanning the full screen did we
09:19 - anyhow the real question is does this
09:20 - small area match the original scanned
09:22 - image we just erase all to remove the
09:25 - pen and see the original image behind
09:27 - and yes you can see that this white
09:30 - patch is the part we were seeing click
09:32 - render again and yep you can also see
09:35 - the tops of yoshi's eyes brilliant this
09:37 - confirms both scanning works and also
09:39 - that we are able to draw it back to the
09:41 - screen afterwards
09:43 - but it also confirms just how slow this
09:46 - method is crazy slow so is there
09:49 - anything we can do about that
09:51 - well even without any new techniques
09:53 - there is one improvement to be had
09:55 - if we look at the list of scanned colors
09:57 - do you notice how often the numbers seem
09:59 - to repeat themselves
10:00 - this is because often in an image
10:03 - similar colors do group together
10:06 - okay then in the scanner sprite come
10:08 - back into the define scan block and
10:11 - consider that rather than jumping right
10:13 - in and using the expensive get color
10:15 - block we might first check whether the
10:17 - next color was the same as the last one
10:20 - after all it only takes one check to do
10:22 - that compared to the seventeen thousand
10:24 - checks that getcolor has to do what if
10:26 - we to lose
10:27 - so only if we are not
10:31 - touching the color given by our previous
10:33 - color value
10:35 - then we go ahead and use the get color
10:36 - block to scan for the next color
10:39 - nice little optimization time for
10:41 - another test i'll make the timer visible
10:43 - so that we can see how long it takes
10:45 - smash the green flag and pop that space
10:48 - key
10:49 - oh nice notice that we passed the 1000
10:52 - item mark in no time
10:54 - and 10 000 is just around the corner
10:58 - that little change has indeed made quite
11:00 - a difference in speed but as things
11:03 - progress it's still clear that this scan
11:05 - is still going to take quite a long time
11:09 - just how long well hold on while i do
11:12 - the long wait on your behalf and i'll
11:14 - meet you on the other side
11:17 - [Music]
11:20 - and it's done
11:22 - we
11:23 - that took forever a whole 21 minutes of
11:28 - my life is gone
11:29 - man
11:30 - but was it worth it let's click into the
11:33 - vendor sprite and check out the scan
11:35 - results
11:36 - click
11:38 - so this is okay the entire image scanned
11:42 - this time
11:43 - 21 minutes but the render quality is
11:47 - a little off the edges are not smooth
11:50 - and we have a definite loss in detail i
11:53 - can switch back and forth so you can see
11:56 - so why is this and can we do better
11:59 - well take a look at the costume used in
12:01 - the scanner sprite if you remember we
12:03 - used a simple 2x2 costume to scan for
12:06 - touching colors that's very small but
12:09 - not really small enough after all we are
12:12 - trying to detect the colour of a single
12:14 - screen pixel with a costume that
12:16 - overlaps four pixels
12:18 - the problem is if we make this costume
12:20 - smaller you'll find that your scanner
12:22 - may well stop working altogether well
12:24 - that's no good luckily there is a simple
12:27 - fix that gives amazing results let's
12:29 - start by naming the existing costume as
12:32 - dot
12:32 - appropriate i think and then click to
12:34 - paint a new costume
12:36 - and name this one black screen
12:40 - what we are after is a huge black
12:42 - rectangle that fills the entire screen
12:44 - and for this i just click on the convert
12:46 - to bitmap
12:48 - select the fill tool
12:50 - and then we want the fill color to be
12:52 - pure black more on y later and then just
12:56 - click on the canvas to fill it black
12:58 - that's the way excellent so with this
13:01 - new costume in hand return to the code
13:04 - and find the when flag clicked script so
13:07 - the trick to getting our small costume
13:09 - even smaller is to set its size to one
13:12 - percent
13:13 - but scratch doesn't want us to do that
13:15 - because it already knows that the
13:17 - costume is small so to get around this
13:19 - we first switch to the black screen
13:22 - costume with this one costume selected
13:25 - scratch will allow us to set size to one
13:28 - percent it's not an issue and then right
13:30 - away we cunningly switch back to our dot
13:33 - costume and aha scratch doesn't notice
13:36 - and we have a micro sized costume for
13:39 - scanning wonderful let's test
13:42 - oh wait i forgot this still takes 20
13:44 - minutes oh fine fine i'll go and put the
13:47 - kettle on
13:51 - 20 minutes later and the results are in
13:55 - click that render block and oh my word
13:59 - it's
14:00 - perfect absolutely perfect isn't that
14:03 - crazy wow what a difference that simple
14:06 - costume sizing trick can make that's one
14:08 - to remember right
14:10 - man are we great at scanning now with
14:13 - simply stunning results but yeah it's
14:15 - still taking an age to complete
14:18 - how can we possibly do better though
14:21 - well i'm glad you asked
14:23 - up until now nothing we have done has
14:26 - not been done before in the world of
14:27 - scratch but what follows this is brand
14:30 - new cutting-edge stuff and is seriously
14:33 - rather exciting i think we can all agree
14:36 - what is slowing our scan down is that
14:38 - given a single point on an image our
14:40 - colour detector still has to test
14:42 - against 16 000 different color
14:44 - variations to identify the color that it
14:47 - actually is that's far too much work is
14:50 - there not some way of working towards
14:52 - the right color more progressively
14:55 - right to help explain this new technique
14:57 - for simplicity's sake we'll limit our
15:00 - search to just shades of red after all
15:03 - there are only 32 shades of red that
15:05 - scratch can detect and these are them
15:08 - the current way of finding out what
15:09 - shade of red this point on our image
15:11 - matches is to check through each shade
15:14 - one at a time till scratch says yep we
15:16 - are touching this shade but that took us
15:19 - 27 checks
15:21 - but look what happens if we first darken
15:25 - the image we are scanning making it
15:27 - exactly half as bright
15:29 - now if we try to check its color
15:32 - we only need to check 14 shades until
15:35 - scratch says we have a match
15:38 - now that is clever
15:40 - then we re-brighten the image and we
15:43 - also double the brightness of the
15:45 - detected color
15:47 - ah hold on though we are not quite at
15:49 - the right answer yet can you see how
15:51 - this darker shade could map to either of
15:53 - these two more accurate shades of red
15:56 - the only way to tell which one is the
15:58 - right one is to check these two shades
16:00 - again with the test color at full
16:02 - brightness
16:04 - and there now we have the correct answer
16:07 - with just 16 color checks and that is
16:10 - much better than the original 27.
16:12 - impressive
16:14 - but we don't have to stop there oh no we
16:17 - can continue halving the brightness of
16:19 - the image over and over until the
16:21 - numbers of possible shades to scan drops
16:24 - right down to only two options
16:28 - so now at each brightness level we scan
16:31 - for just two possible color options
16:33 - which then lets us brighten the image
16:35 - and do the same again each time
16:38 - brightening the image until after 10
16:40 - checks we will have found the correct
16:42 - color wow
16:44 - okay then that was for shades of red
16:47 - how does this work when we combine it
16:48 - with green and blue too
16:51 - well it works in a very similar way
16:53 - except at each level of brightness
16:55 - rather than having to choose two shades
16:57 - of red we have to try out all eight
17:00 - combinations of two reds two greens and
17:03 - two blues
17:04 - and that's it everything else works just
17:06 - the same
17:09 - if you do the maths we'd need a total of
17:12 - 40 color checks to find any color value
17:15 - at all
17:16 - now guys think about that our previous
17:18 - best color scan was doing 16
17:21 - 000 color checks and now we are saying
17:23 - we can do it in 40 color checks
17:26 - this new method could be up to 400 times
17:29 - faster now that is astonishing sign me
17:33 - up
17:34 - let's code so we need a way to make the
17:37 - image darker to let us darken everything
17:40 - and not just one sprite we'll use a dark
17:43 - overlay on top of everything else we
17:45 - already have the large dark filled
17:47 - costume remember so that will do
17:49 - perfectly and also i like to keep the
17:52 - scanner all in one sprite so it's easier
17:54 - to backpack and move between projects
17:55 - later on
17:57 - so in the scanning sprite under the
17:59 - green flag script just here after we
18:01 - switch to the blank screen costume drag
18:04 - in a great clone of myself block
18:07 - then with a when i start as clone hat
18:10 - block we can set it up
18:12 - firstly we bring the clone to the front
18:15 - this is very important not only so that
18:18 - it covers over everything else but also
18:20 - so that it receives any broadcasts first
18:23 - before the original scanner sprite more
18:26 - on that soon too
18:28 - next set size to 100 it must cover the
18:31 - entire screen and position it at the
18:33 - center with a go to x y of zero zero
18:37 - we can double check it's working by
18:39 - dropping in a show block and hit the
18:40 - green flag boom and then there was
18:44 - darkness
18:45 - splendid
18:46 - and if you like that see how setting a
18:49 - ghost effect 50 does indeed let us use
18:51 - this in a way to darken the screen
18:53 - do make sure to use ghost not the
18:56 - brightness effect and we can keep
18:58 - halving the number in the ghost effect
19:00 - to cause the image to get darker and
19:02 - darker
19:03 - cool
19:04 - but you may be wondering don't we only
19:06 - need to darken the one pixel that we are
19:08 - checking the color of as we scan it
19:11 - why darken the entire image
19:14 - well here's the thing
19:15 - darkening a pixel testing the color and
19:18 - then changing the brightness again is
19:19 - actually not possible on a large scale
19:21 - in scratch without having the screen
19:23 - refresh and that would slow things down
19:25 - immeasurably
19:27 - but instead if we scan the entire image
19:30 - at a given brightness before then doing
19:33 - it all again at the next brightness
19:34 - level well then then we would have a
19:37 - workable solution
19:39 - okie dokie took away the show and ghost
19:42 - effects we don't need them in here
19:45 - when we run the project now we can be
19:46 - sure that the dark overlay clone is
19:48 - there but it's just hidden for now
19:50 - right scroll over to the when space key
19:53 - pressed script
19:54 - one complexity of having this clone
19:56 - hanging around is that events like this
19:58 - key press will now run on both this
20:00 - sprite and the clone together to avoid
20:02 - running the script twice we can add in
20:04 - an if here at the top checking whether
20:07 - the costume number is greater than one
20:11 - if it is then this is the black clone
20:14 - see
20:15 - then we can drop in a stop this script
20:20 - there now only the original scanning
20:22 - sprite will initiate a new scan
20:25 - we need a way to keep track of the
20:27 - current brightness level we are scanning
20:29 - make a new variable named scan pass
20:33 - making it for all sprites so that the
20:35 - clone can see it too
20:38 - we will refer to each scan of the screen
20:40 - at a given brightness as a full pass of
20:44 - the scanner and we expect there to be
20:46 - five of these
20:47 - start off setting scan pass to zero
20:51 - we won't use the old scan block this
20:53 - time we need something new to be able to
20:55 - synchronize the dark clone brightness
20:58 - and the scanner together
21:00 - we'll instead use a broadcast and wait
21:03 - block
21:04 - with a new event name scan pass
21:07 - cool
21:10 - when i receive scan pass
21:14 - both the clone and the original sprite
21:15 - will receive this event but since the
21:18 - dark clone layer is in front of the scan
21:20 - sprite
21:21 - that one will receive the event first
21:24 - and consequently run first
21:27 - good to know
21:29 - we need to identify first if this is the
21:31 - clone duplicate the if check above from
21:34 - our keypress script
21:37 - so in this if we know this is the front
21:40 - black costume so we change scan pass by
21:44 - one this will increase with each
21:46 - broadcast to this event
21:48 - and now we show the dark clone sprite
21:51 - before then setting the ghost effect
21:54 - setting it not changing it
21:57 - but ah what values do we use in here to
22:00 - make the brightness of our screen go to
22:02 - the right level
22:03 - in theory we should be able to calculate
22:05 - these values by dividing 100 which is
22:07 - fully bright by two to half it over and
22:10 - over again but those numbers don't
22:14 - actually work out as the best values to
22:16 - use
22:17 - i did extensive testing and have come up
22:19 - with the best values for each pass that
22:21 - produce the least scanning errors so
22:24 - let's make a new list named ghost values
22:29 - and make it for this sprite only
22:33 - set the ghost effect to
22:36 - item of ghost values and pop the scan
22:39 - pass variable in there
22:41 - brilliant shall we populate those five
22:44 - items for the five scan passes
22:46 - start by adding five items to this new
22:49 - list
22:51 - the last pass is easy it's 100 that's
22:54 - fully bright
22:55 - the one above is 50 half of 100 nice and
23:00 - easy
23:00 - but the third that's where it goes a
23:03 - little off rather than 25
23:06 - we use 24 24.7
23:09 - the one above is 12.1
23:13 - and item 1
23:15 - 5.9
23:17 - cool i'd advise you try to keep these
23:20 - values as i have them here as i spent
23:22 - quite a bit of time testing to make sure
23:24 - these worked as accurately as possible
23:26 - plus too much variance and things will
23:28 - stop working
23:30 - brilliant i'll hide the list now and run
23:32 - the project pressing space
23:35 - and it goes dark
23:37 - very dark but not actually black can you
23:41 - see the image
23:42 - trust me it is still there if i screen
23:45 - capture it and bring it into photoshop
23:47 - the levels adjustment tool can pull the
23:48 - dark colors back up
23:51 - it's still there notice how having first
23:53 - darkened the image we have now got
23:55 - colour banding visible where the image
23:57 - lost precision and that's the very
23:59 - effect we are to take advantage of to
24:01 - speed up our scanning that's exciting
24:05 - okay back to scratch so that's the
24:08 - ghosted layer done and its scripts will
24:10 - end here so everything below is now the
24:12 - scanner sprite scripts we can code that
24:15 - up next
24:16 - now the first scan pass needs to be a
24:18 - little different to the others so with
24:20 - an if else block
24:22 - check if scan pass is equal to one
24:26 - make a new custom block
24:28 - named initial scan
24:31 - and tick run without screen refresh
24:35 - and we'll run it when pass is equal to
24:36 - one
24:39 - great so it will help if you move the
24:41 - new define block over next to the old
24:43 - define scan script
24:46 - it'll roughly follow the same pattern so
24:49 - duplicate the scan script into here
24:52 - what does need to change though is the
24:54 - inner if just move it over here for a
24:57 - moment
24:58 - so we have the repeats and moves to
25:00 - position our scanner sprite ready to
25:02 - detect the next color and since the
25:04 - image is now so very dark we understand
25:07 - that there is only eight possible color
25:09 - values that this color could be that's
25:12 - cool but what are they
25:14 - tell you what let's assume we have them
25:16 - in a list
25:18 - in which case first make a new variable
25:20 - i for this sprite only
25:23 - set it to 1
25:27 - and then repeat until
25:31 - we are touching color
25:35 - but not the color available no we need
25:38 - this new list for the possible colors
25:40 - make a new list naming it
25:43 - colors for this sprite only
25:45 - this will contain all the possible
25:47 - colors that we are expecting at this
25:49 - point
25:50 - then we check if we are touching item of
25:53 - colors
25:54 - and the item number is the i variable
25:57 - sweet all we need to do then is keep
25:59 - changing i by one in this repeat until
26:03 - the color matches
26:05 - and finally when it does this repeat
26:08 - ends so to store the results away we
26:10 - need this old add to scan block and
26:13 - don't forget to attach change x by one
26:15 - two very important to keep us moving
26:18 - and just be careful though this isn't
26:20 - the color we detected this time around
26:22 - we need to replace it with the item i of
26:24 - colors
26:26 - there
26:27 - wow we are so close to being able to run
26:29 - this script but gosh we haven't yet
26:31 - determined what the list of possible
26:33 - colors we are matching against are
26:36 - now these values will not change it's
26:38 - always the same set of possible colors
26:41 - but rather than entering them by hand
26:43 - i'd prefer we create a script to
26:45 - generate them for us
26:46 - so let's move over to the far left of
26:48 - the scripting area make a new custom
26:51 - block named setup colors list and tick
26:55 - the run without screen refresh
26:58 - we are going to begin with the color
27:00 - black that's zero so set the color
27:03 - variable to zero
27:05 - and now we loop around the two reds
27:09 - two greens
27:11 - and two blue color options just two of
27:14 - each making up the possible eight color
27:16 - combinations
27:18 - right then in the innermost loop we add
27:21 - to the colors list the value in our
27:23 - color verbal
27:25 - oh man my english american spellings are
27:28 - really getting confused sorry about that
27:30 - now it gets a little fiddly we change
27:34 - color by
27:35 - now usually we would change the blue
27:38 - channel first as that is the easiest
27:40 - number to change being the one we don't
27:42 - need to multiply by
27:43 - but
27:44 - now i'll let you in on a little secret
27:46 - do you remember how scratch can detect
27:48 - 32 shades of red and green but only 16
27:52 - shades of blue well that means when we
27:54 - darken the image to the fifth level we
27:58 - only have an option of red and green to
28:00 - choose from as such we will make sure
28:02 - that those are the first ones in our
28:05 - list so that they get priority
28:08 - red first then from the previous color
28:10 - detection tutorial red is the value 256
28:13 - multiplied by 256 yes that's 65
28:19 - 536 better to plug the value in directly
28:22 - so change color by 65
28:26 - 536
28:28 - multiplied by the minimum change of the
28:30 - red color and that's eight
28:33 - which gives us five hundred and twenty
28:35 - four thousand two hundred and eighty
28:37 - eight
28:37 - you know what let's fill that number in
28:39 - two
28:40 - five two four
28:42 - two eight eight double check it's
28:43 - correct
28:44 - yep cool
28:46 - right as soon as we've completed the red
28:48 - channel we need to reset the color back
28:51 - to what it was before
28:53 - to do this we subtract from it using a
28:56 - change color by
28:57 - the amount of red we just added that's
29:00 - 524
29:02 - 288 but in this repeat we added it twice
29:06 - so we need to multiply that by two
29:10 - okay then we also now want to progress
29:13 - the amount of green for this repeat
29:14 - block
29:15 - green is 256 again multiplied by eight
29:19 - skips gives us 2048
29:22 - hooray and as you can guess one more for
29:25 - the outer blue repeat
29:27 - step back the green using a subtract
29:31 - 2048 multiplied by two
29:34 - and the skip for blue is not eight but
29:37 - sixteen because it's less detailed than
29:39 - the red and green
29:41 - sorted this may have felt like a lot of
29:44 - hard work but it will pay off shortly
29:46 - don't try to simplify these maths
29:48 - further yet as there's a reason i left
29:50 - them like this watch this space
29:53 - we can click this script to run it and
29:55 - have a quick look over the resultant
29:57 - eight numbers to confirm yours are the
29:59 - same as mine here they are
30:01 - how do you do are yours the same i hope
30:04 - so
30:05 - we are almost ready to test just a few
30:08 - scripts to tidy hide the list and then
30:10 - scroll over to the when space key
30:12 - pressed script we need to hide the black
30:15 - clone sprite once the scan is complete
30:18 - otherwise we won't see anything pop a
30:20 - broadcast and wait block on the end here
30:23 - and introduce the new message scan
30:25 - complete
30:27 - we use a broadcast so that we can hide
30:29 - both this sprite and the large black
30:31 - clone
30:32 - then when i receive scan complete
30:36 - we simply hide
30:40 - right time to smash that green flag and
30:42 - then do as the text says press the space
30:45 - key to start that initial scan
30:48 - and wow it's done already in just 1.8
30:52 - seconds for the initial pass that sounds
30:54 - pretty good to me but i won't be happy
30:56 - until i can see some results
30:58 - is that possible after just one scan
31:01 - you bet it is we need to click into the
31:03 - render sprite
31:05 - now we could just click render but the
31:07 - result of the initial scan is simply too
31:09 - dark to make out no problem then let's
31:12 - brighten it up
31:13 - simply multiply the pen color by 16 to
31:17 - boost its brightness
31:18 - this only works because we know all of
31:21 - the red green and blues are dark enough
31:23 - to allow it
31:24 - and here goes click the render block
31:26 - again
31:28 - oh yes look at this i simply love it can
31:32 - you see how we have only got four colors
31:35 - black red green and yellow yellow being
31:38 - a mixture of the red and green light
31:40 - when combined
31:42 - now at this stage we have not introduced
31:44 - any blue so obviously mario shorts
31:46 - appear black but this will change when
31:48 - we add in the next scanning pass but wow
31:52 - so cool
31:54 - i'm getting hyped now to build on what
31:56 - we've started and get the second
31:57 - scanning pass implemented i don't think
32:00 - it will be too much work so click with
32:02 - me back into the scanning sprite and
32:05 - here under the when i receive scan pass
32:08 - we see the initial scan block
32:10 - what we'll do is borrow our old scan
32:13 - block and use this for all subsequent
32:15 - scans
32:17 - with modifications of course
32:19 - the first scan is always a special case
32:21 - because it has to initially fill the
32:23 - scan list whereas the following scan
32:26 - passes must update the previous scan
32:28 - values from the time before only with
32:31 - more detail
32:33 - before we work on the define scan script
32:35 - further scroll up because we need to
32:37 - broadcast more scan pass events before
32:40 - we'll ever reach the second pass
32:43 - temporarily detach the scripts under the
32:45 - first broadcast and surround the
32:47 - broadcast with a repeat block
32:50 - setting it to repeat two times
32:52 - finally we attach the other scripts
32:54 - below
32:55 - perfect that will initiate the second
32:57 - scan pass
32:59 - okay we are on make sure we can see the
33:02 - define scan script but keeping the
33:04 - initial scan scripts handy too
33:07 - so focusing on the define scan script on
33:10 - the right we can keep all the repeat
33:12 - blocks and also the nice not touching
33:15 - color that will still save us lots of
33:17 - time not having to scan the same color
33:19 - again
33:20 - we do need to ditch the get color block
33:22 - though no way do we want it to be
33:24 - scanning sixteen thousand colors now oh
33:27 - no
33:28 - instead from the initial scan script
33:30 - we'll duplicate the scripts from the set
33:33 - i to one and below and for now detach
33:35 - the add to list down below this top part
33:39 - is for scanning the eight possible
33:40 - colors
33:41 - we use this then only when the previous
33:44 - color test failed
33:46 - but it's not that simple at this point
33:49 - we've already scanned an initial color
33:51 - value in the first scan pass
33:54 - and now we are just refining it in this
33:56 - second scan pass
33:58 - so first we'll need to retrieve that
34:00 - previous color
34:02 - set the color variable to
34:05 - item of our scan list
34:08 - now we must keep track of which item we
34:10 - are up to so make a new variable naming
34:13 - it again scan index idx for short
34:17 - for this sprite only yeah this is just
34:20 - the same as the one we did for the
34:21 - render sprite
34:22 - initialize it again to 1 at the top of
34:25 - this script before any repeat loop
34:27 - begins
34:28 - then we can pop it into the item of scan
34:31 - down here
34:33 - but wait up don't pop the result into
34:35 - the color available as it is
34:37 - no because the previous scanned color
34:40 - was scanned at half the brightness
34:43 - compared to what it will be now
34:45 - so as such we must double it to find its
34:48 - current expected value set color to 2
34:51 - multiplied by item scan index of scan
34:55 - yeah that makes perfect sense and now
34:58 - for the magic we need to add together
35:00 - the previous color value
35:02 - with each of the possible colour values
35:04 - to test against
35:06 - and just pop that back into the touching
35:09 - colour block amazing we are almost there
35:12 - once this repeat until has found a
35:14 - matching color we need to make sure we
35:16 - store it in the color variable we could
35:19 - set color to color plus item of colors
35:22 - but that's the same thing as just
35:24 - changing color by item i of colors right
35:28 - so we'll just do that
35:30 - then there's this add to scan we can't
35:33 - use an ad block now as the items already
35:36 - exist in scan list
35:38 - instead we need to replace the values
35:40 - that are already there so we use a
35:42 - replace item block
35:45 - the item number is scan index
35:48 - and change the list to be scan
35:51 - finally the value is the color variable
35:54 - sweet we can get rid of this ad block
35:57 - and the other two redundant blocks
35:59 - and oops i almost forgot wow we most
36:02 - certainly need a change scan index by
36:05 - one after replacing the item then so
36:08 - that moves us on to the next item in the
36:10 - scan list yeah and that is that look
36:15 - here is the complete scan script
36:17 - so i'm ready to give this a test come on
36:20 - click the green flag and smash the space
36:23 - key
36:26 - and done three seconds very cool
36:29 - if it worked of course to check we need
36:31 - to enter the render sprite but we're
36:34 - going to update the pen color multiple
36:35 - to be just 8 as 16 would be too bright
36:38 - after the second pass
36:40 - now clicking the render block
36:43 - oh yes i can see some awesome results
36:46 - here look at this so much more color is
36:49 - coming through now look at the blues
36:51 - have shown up and overall there is much
36:53 - more variety of shades that's crazy on
36:56 - the first pass we detected up to four
36:58 - colors and with the second we bumped
37:00 - that right up to 32 so how many did you
37:04 - get with a third scan pass
37:06 - click into the scanner sprite and find
37:08 - the when space key press script
37:11 - we can simply up this repeat from two to
37:14 - three to enable the third pass
37:16 - this will broadcast scan pass now three
37:18 - times and each time we brighten the
37:20 - image and then scan the screen
37:23 - so yes with three passes we can expect
37:25 - to see up to 256 different colors
37:28 - but it's at the third pass that we
37:30 - encounter our first problem with our
37:31 - scanning strategy oh no yes it's true
37:36 - watch this run the project and smash the
37:38 - space key
37:40 - and we wait
37:42 - we've reached scan past 3 and we are
37:45 - still waiting
37:46 - and
37:47 - well
37:48 - we can wait here forever because this is
37:50 - never gonna finish why
37:52 - well the problem lies in the define scan
37:54 - script
37:56 - we are stuck in this repeat until loop
37:59 - here the problem is that if we never
38:01 - match any of the colors made up from the
38:03 - list of possible colors then there is
38:05 - nothing to ever stop this repeat loop
38:08 - from ending look at it it only ends when
38:10 - we touch the correct color well why
38:12 - hasn't this been a problem before
38:15 - well it just so happens that the
38:17 - ghosting values i gave us for darkening
38:19 - the background allow every color to scan
38:21 - accurately for the first and second
38:22 - passes but not so on the third and
38:26 - fourth on these scans scratch cannot
38:28 - accurately capture every color but for a
38:31 - few very small edge cases we miss detect
38:35 - and are taken down the wrong color
38:37 - branch
38:38 - this is very unfortunate but that's life
38:41 - i'm afraid we must live with this and
38:43 - find a way to fix it what we will do is
38:46 - make sure that when we find no color
38:48 - combinations that match
38:49 - that we then widen our search to include
38:52 - all the colors just around the
38:54 - previously matched color
38:56 - that way we cover our bases and we
38:58 - should not get into trouble again cool
39:02 - so the simplest way to widen our search
39:05 - is to extend our existing color list
39:07 - here so that once the eight expected
39:10 - colors have been tried we then go on to
39:12 - check the other 48 possible neighboring
39:16 - colors yeah that's how many there will
39:18 - be
39:18 - so scoot over to the left and find the
39:21 - define setup colors list script
39:24 - now i told you we would come back to
39:25 - this
39:26 - we must keep the initial eight items in
39:29 - the same order as they are now so to
39:32 - simplify this we'll want to run this
39:34 - script twice once for the narrow two
39:37 - possible red green and blues and then
39:39 - again for the wider four possible red
39:42 - green and blues
39:43 - in which case let's edit this custom
39:45 - block so that we can specify the first
39:48 - color
39:49 - add an input named color
39:52 - and then add another label depth
39:57 - and an input also named
39:59 - depth
40:00 - this signifies the number of shades of
40:02 - each color channel we are looking
40:04 - through
40:06 - so the depth is replacing all these
40:09 - repeat twos
40:13 - and these multiply by twos
40:17 - good
40:18 - look we can bring out an instance of
40:20 - this setup colors block and fill in the
40:22 - depth of two
40:23 - we want this to work as before for those
40:26 - first eight colors
40:28 - so of course we also want this set color
40:30 - to zero to be replaced by the starting
40:33 - color input
40:35 - and so pop zero in the from input up
40:37 - here
40:38 - splendid i'll just move that down and
40:41 - make sure to reset the colors list with
40:43 - a delete all of colors block before the
40:45 - setup runs
40:47 - if i make the colors list visible then
40:49 - clicking the delete and setup should in
40:51 - theory reset the list and set it back up
40:53 - exactly as it was without air change
40:56 - yes perfect
40:58 - but if we try a color depth of four
41:01 - and click the script again
41:03 - now look we have 64 values in the list
41:06 - that's four times four times four
41:08 - combinations of red green and blue
41:10 - that's great but it's not the right
41:12 - values or the correct order
41:14 - so return the depth to two for the
41:17 - initial values
41:18 - and then duplicate the setup colors
41:20 - block
41:21 - and now we fill out the depth of four
41:24 - but hold on
41:26 - that will cause us to have duplicate
41:28 - colors in the list since we are adding
41:30 - overlapping shades of red green and blue
41:32 - here
41:33 - okay we can't have that it will slow
41:35 - down our scan let's stop that from
41:37 - happening by adding an if around the add
41:40 - to colors block make sure to keep the
41:42 - change color block below outside that
41:44 - new if
41:46 - and now we only add a color to the list
41:49 - if the colors list does not
41:52 - already contain
41:54 - the color value we are about to add
41:56 - there neat that will prevent the same
41:58 - color being added twice
42:01 - we can check that by running the setup
42:03 - script again
42:05 - and yep only 64 colours so that is
42:08 - working
42:09 - but this is still not quite right we
42:11 - need to make sure the second set of
42:13 - possible colours includes the colours to
42:15 - the left and right of the current shades
42:18 - at present we are only checking items
42:20 - further to the right we need to shift
42:22 - the whole check one shade of red green
42:24 - and blue to the left
42:26 - to do this we adjust our starting color
42:29 - let's do the maths bring in two addition
42:31 - blocks
42:33 - and three multiplications spreading them
42:36 - out evenly in the additions
42:40 - now we want to move by eight skips of
42:42 - red that's 65
42:45 - 536
42:47 - plus eight skips of green that's 256
42:52 - and oh no
42:53 - don't need to multiply here my bad just
42:56 - 16 skips of blue
42:58 - what does this all add up to
43:02 - 526
43:03 - 352
43:05 - but don't forget we are moving left with
43:08 - this color so enter
43:10 - negative
43:11 - five two six
43:13 - three five two
43:14 - just double check
43:16 - yep that's the one perfect
43:20 - click to run the setup color script
43:22 - and just double check your 64 list
43:25 - values look just like mine i do hope so
43:28 - because that was the last of the hard
43:31 - work
43:32 - it's time to try and run the project
43:34 - again
43:35 - click the green flag and tentatively
43:38 - press the space key will it hang like
43:40 - before one two three
43:43 - and yes it is finished in 4.5 seconds
43:47 - excellent news
43:49 - so we must see the fruit of our labor
43:51 - click into the render sprite and drop
43:53 - the multiply down to four
43:56 - before clicking the render block
44:01 - oh my word would you look at that i told
44:04 - you it was going to be a real step up
44:06 - the banding on mario's hat is
44:08 - practically gone and everything is
44:09 - looking more colorful
44:12 - the great news though is that now that
44:14 - we've got this far there is nothing
44:16 - stopping us now performing the last two
44:18 - additional scan passes
44:20 - so let's first make this scan render
44:23 - kick off automatically when the scan is
44:25 - complete just drop in our when i receive
44:28 - scan complete
44:30 - easy
44:31 - now we need to click into the scanner
44:33 - sprite and find our when space key press
44:36 - script
44:38 - finally we can perform the full five
44:40 - scan passes oh yes come on
44:43 - and lastly return to the render sprite
44:46 - with all five passes complete we will no
44:49 - longer need to artificially brighten the
44:51 - resultant image so remove the multiply
44:54 - and simply return the item of scan to
44:56 - our pen color
44:59 - this is it oh my goodness i'm so excited
45:02 - and just so you know the results we are
45:04 - getting here are not even as fast as
45:06 - they can be since the very act of me
45:08 - recording the video slows things down
45:11 - and i'm going to press the space
45:13 - pass one
45:15 - two
45:16 - three four
45:19 - and five and it's done eight and a half
45:22 - seconds and man just look at that render
45:25 - it's gorgeous and oh so so quick it's
45:29 - ridiculous isn't it not only do i not
45:32 - have enough time to make a cup of tea i
45:33 - could hardly even make it to the door
45:35 - and back
45:36 - and so a new era in scratch scanning
45:39 - dawns and there you are yoda i really
45:42 - love the detail that the scanner manages
45:45 - to keep in his cloak it's stunning
45:48 - i am dead excited by this and i would
45:50 - love to know what you are going to use
45:53 - these amazing scripts for whether it be
45:55 - to flip an image's polarity
45:57 - turning yoda to the dark side
45:59 - or something altogether more awesome
46:02 - leave me your comments under this video
46:04 - you probably already know that i'm going
46:06 - to be putting these scripts to good use
46:07 - in my upcoming raycasting episode with
46:09 - wall texturing but i also have released
46:13 - a crazy adaption of this project called
46:15 - griff patch's blue line filter that
46:18 - performs real-time warping on your
46:20 - scratch webcam
46:22 - so wacky and altogether too freaky
46:25 - i'll leave a link to the new project in
46:27 - the description under the video
46:29 - so i hope you enjoyed this video if you
46:32 - did then smash the like button and don't
46:34 - forget to subscribe to the channel so as
46:36 - not to miss the next exciting episode
46:39 - this one has been a bit of a marathon
46:41 - but it's just so fun and i don't want
46:43 - you to miss out on knowing all about it
46:45 - well until next time have a great week
46:48 - ahead and scratch on guys
46:57 - you