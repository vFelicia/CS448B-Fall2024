00:02 - hello fellow scratchers when i began
00:05 - this simple raycasting series i intended
00:07 - it to be no more than two episodes i was
00:09 - very clear there was no way we would be
00:12 - adding textures to these walls it's too
00:14 - complex and well bitmap raycasting in
00:16 - scratch is far too slow to handle it
00:19 - well here we are now in episode 7 of
00:21 - this epic series and yes today we are
00:23 - adding textured walls oh man i will not
00:26 - be able to live this down but guys you
00:28 - should never underestimate what is
00:30 - possible in scratch right so what
00:32 - changed my mind well firstly we made
00:35 - huge progress on boosting the speed of
00:37 - our raycaster in the previous episode
00:39 - six faster passing my expectations and
00:42 - secondly the recent breakthrough in fast
00:44 - image scanning see last week's ultra
00:46 - fast scanning tutorial with this in hand
00:49 - the final obstacle was out of the way
00:51 - and so here we are
00:53 - but before we dive into coding let's
00:55 - have a quick chat about how texture
00:57 - mapping works in a raycaster like ours
01:00 - so what is a texture okay so here's our
01:03 - lovely level that we drew in scratch
01:05 - this is a top down view but if we were
01:07 - to angle it and heighten the walls
01:10 - that's a little bit too much but well
01:12 - bear with me
01:13 - the little square up here is a texture
01:15 - and when placed end to end it produces a
01:18 - seamless repeating pattern
01:20 - perfect for plastering all over the
01:22 - walls of our game wow that looks cool
01:24 - but obviously the walls in our game are
01:27 - not this tall there let's go for this
01:30 - height
01:32 - now to apply the same texture to this
01:33 - wall we need to repeat it many more
01:35 - times in the same space so the takeaway
01:38 - from that is that the wall height will
01:40 - be very important to us
01:42 - but how do we decide where on a wall the
01:44 - texture should start and end for this we
01:47 - are going to use the simplest method
01:49 - possible we'll divide the map up into a
01:51 - grid of squares each square is the size
01:54 - of the height of our walls to match the
01:57 - size of the texture
01:58 - now we raycast as a ray collides with a
02:02 - wall rather than just recording how far
02:04 - away the wall is and its colour we now
02:06 - want to record the texture at this point
02:09 - too
02:10 - in this example we work out how this
02:12 - point maps to our texture we simply find
02:15 - out how far across a grid square the
02:17 - collision occurred and this gives us an
02:19 - index into the texture and tells us
02:22 - which vertical slice of texture we are
02:23 - going to need to paint
02:25 - this index is therefore the data we need
02:27 - to store in our raycasting list so that
02:30 - when later on we begin drawing our scene
02:32 - we can look up each texture line in our
02:34 - textured list and color by color draw
02:36 - out a slice of texture one at a time
02:39 - and that's pretty much everything you
02:41 - need to know to get started so i am dead
02:43 - excited to go come on let's get
02:46 - scratching to begin texture mapping what
02:49 - we need are some textures right and a
02:52 - way of scanning those textures into a
02:54 - list well haha luckily the last tutorial
02:57 - i made was on ultra fast image scanning
02:59 - a coincidence i think not now i don't
03:02 - know if all of you have managed to code
03:04 - that little project up but if not then
03:07 - don't panic because for your convenience
03:10 - i have released a project named
03:11 - raycaster episode 7 assets on my tutor
03:14 - account you'll find a link in the
03:16 - description under the video and not only
03:18 - does it contain some fine example
03:20 - texture assets but it also includes the
03:23 - completed scanning scripts all ready to
03:25 - go
03:26 - so if you want to use your own scanning
03:29 - scripts then go ahead just note i've
03:31 - made a couple of changes so let me just
03:33 - go over them quickly now
03:35 - firstly when the scanner is used the
03:37 - first thing we do is switch to a new
03:39 - costume texture 32 this is the costume
03:42 - that contains our textures look at these
03:44 - beauties cool right and this is left on
03:47 - screen using a second clone that wasn't
03:50 - in our original scanning scripts
03:52 - then rather than triggering the actual
03:54 - scan off the space key i have just added
03:57 - a weight zero and then gone directly
04:00 - into the scan scripts right away
04:03 - the next change is the addition of a
04:05 - delete this clone under the scan
04:07 - complete event receiver this way after
04:10 - the scanner is complete we tidy up any
04:12 - clones that are hanging around
04:15 - and lastly if we head over to the define
04:18 - initial scan script we are setting x now
04:21 - to negative 239
04:24 - one more than the original minus 240. it
04:27 - turns out that this is the preferred
04:29 - starting position for pixel perfect
04:30 - scanning and yes we do need to do the
04:33 - same in the second scan script too
04:36 - cool so that is all the changes that
04:38 - i've made feel free to do the same in
04:40 - yours or if you want to continue with my
04:43 - scripts then just open up your backpack
04:45 - and drag the entire scanning sprite into
04:47 - there you'll then get the textures for
04:50 - free too so now we can open our
04:52 - raycasting projects and we will continue
04:54 - from where we left off in episode six
04:57 - but before we begin to ensure we don't
04:59 - lose any of our hard work make sure to
05:02 - first save this as a new copy for this
05:05 - is episode seven yeah
05:08 - next open up your backpack and drag out
05:11 - the scanner sprite into your sprites
05:13 - panel
05:14 - as you know this sprite comes with a
05:16 - number of textures already in place so
05:18 - to scan these textures into the scan
05:20 - list all we need to do is click this
05:23 - begin scan event block and there it goes
05:26 - you can see the screen scanning in
05:27 - progress this should take just around 10
05:30 - seconds to complete thanks to this
05:31 - awesome new scanning scripts
05:34 - once done we can check out the scan list
05:36 - content and you'll see it scanned 172
05:39 - 800 colored pixels that's a full 480 by
05:43 - 360 scratch screen cool
05:47 - next bring up the costume we just
05:49 - scanned
05:50 - here it is in the costume editor
05:52 - now don't hesitate to try your own
05:54 - textures in here i only provided these
05:56 - so that you had something to get started
05:58 - with all my textures are 32 by 32 pixel
06:01 - squares
06:03 - just make sure they all line up like
06:04 - mine and you'll be rocking
06:07 - what you might notice if i zoom back out
06:10 - is that i'm only using the top portion
06:12 - of the canvas for this textures
06:14 - as such all the rest of the area will
06:16 - end up wasted space in our scan list
06:19 - since this is such a big list it will be
06:22 - worth reducing the size of the scan to
06:24 - save on memory
06:26 - so in this scanner sprite make a new
06:28 - variable naming it texture size
06:31 - keeping it for all sprites
06:34 - and we will set this to 32 before we
06:37 - begin our next scan
06:40 - all my textures as i had said were 32 by
06:42 - 32 pixels but if you're using your own
06:45 - textures then this can of course be any
06:47 - size you need
06:48 - next up scroll across to the define
06:51 - initial scan script the full screen
06:53 - height is 360 pixels but now i'm going
06:57 - to reduce the scan to only scan the
06:59 - height of two texture squares that is
07:02 - two multiplied by texture size
07:04 - and the same must be copied into the
07:06 - define scan script too
07:09 - cool we are set so come back over and
07:12 - click the begin scan script again
07:17 - perfect this now scans faster and the
07:19 - result in the scan list is only
07:21 - one-fifth of the size
07:23 - good job
07:24 - now that we have our textures all
07:26 - scribbled away in the scan list we can
07:29 - shift our attention to creating our
07:30 - texture mapping grid
07:32 - click into the raycaster sprite and find
07:35 - the define single ray script
07:38 - as we all should know by now this is
07:40 - where we fire off a ray across our level
07:42 - and by the time we get to setting the
07:44 - distance here the ray will have collided
07:46 - with a wall
07:48 - so now we need to calculate this
07:49 - sprite's position relative to the
07:52 - texture grid
07:53 - split off the if touching level color
07:57 - and then make a new variable naming it
08:00 - texture offset for this sprite only
08:05 - and for starters just set texture offset
08:07 - to the x position of the collision
08:14 - cool return the if touching script
08:17 - so previously we were setting the entire
08:19 - wall to just one of two colors these
08:22 - colors being defined just here and here
08:26 - obviously these color values will no
08:28 - longer apply if we are adding textures
08:30 - to our walls as the texture gives the
08:32 - wall color
08:33 - so instead of storing the color here we
08:35 - will now store the texture offset
08:38 - but remembering the first nine or more
08:40 - numbers are reserved for enemies and
08:42 - collectibles not walls so how about we
08:45 - add 100 to each
08:48 - okay here we go then let's run the
08:50 - project and see what we've got
08:53 - oh wow look at this we are in rainbow
08:56 - land the color of each vertical slice of
08:58 - wall is now governed by its x position
09:01 - on the level so the further east to west
09:04 - we travel the bigger its colour value
09:07 - that's pretty neat and
09:09 - oh gosh you'll notice we have walls of
09:12 - ranks this is because i forgot we'd be
09:14 - having negative x positions being added
09:17 - to our list so that the plus 100 was not
09:20 - quite enough to stop this happening not
09:22 - to worry the important thing is that we
09:24 - can see the position of the collision as
09:27 - a color
09:28 - so what we are going to do next is take
09:30 - this x position and place it in a mod
09:33 - operator block
09:34 - this will give us the remainder of the x
09:37 - position after dividing it by the right
09:39 - hand number in this case 25
09:41 - and here is the result a beautiful
09:44 - repetition of gradient squares
09:47 - the length of these squares is 25 pixels
09:49 - on our level costume so for a perfect
09:52 - square the height of the wall must be a
09:54 - matching 25 pixels right
09:56 - and yes that is correct look in our pen
09:59 - sprite
10:00 - we calculate the wall height here the
10:02 - top wall is positioned at 1.5 multiplied
10:05 - by height above the middle of the screen
10:08 - and the bottom is one height below add
10:11 - these two lengths together and we get
10:12 - two and a half multiplied by height
10:15 - but then finally we notice that we are
10:17 - already multiplying height by 10 up here
10:19 - so 10 times two and a half is you
10:21 - guessed it 25 the height of our walls
10:25 - cool so back in our raycaster sprite and
10:27 - this mod block
10:29 - why does modding by 25 give us this nice
10:32 - repeating pattern well the mod operator
10:34 - returns the remainder after division so
10:37 - with an exposition of 60 and a grid size
10:40 - of 25 60 divided by 25 gives us 2
10:43 - remainder 10
10:45 - but this is great 10 tells us just how
10:48 - far across this grid square we have gone
10:51 - yes indeed mod is exactly what we need
10:53 - for our texture mapping
10:55 - but before we continue you may have
10:57 - noticed this nice repeating pattern is
11:00 - not continuing on every wall
11:02 - do you know why
11:04 - it's because we are only calculating
11:06 - this offset using the x position of the
11:08 - collision this gives us the texture on
11:10 - walls running east to west but not north
11:13 - to south
11:14 - those would require the y position
11:17 - well easy fix bring in an addition
11:20 - operator and sum the x and y positions
11:23 - together
11:24 - then pop that back into the mod operator
11:26 - and check this out oh yeah now we are
11:30 - really tripping the entire level is
11:32 - pasted with multi-colored squares that's
11:34 - quite amazing
11:35 - so that's almost done but there is one
11:39 - problem the texture offset value return
11:41 - from this mod will be a value between 0
11:44 - and 25 the height of our walls
11:47 - but our textures are 32 pixels wide
11:51 - to render correctly we are going to have
11:53 - to translate from one scale to the other
11:57 - the maths is easy enough we begin by
11:59 - dividing by 25 the wall height we can be
12:02 - a little clever here and just divide the
12:05 - x y positions first
12:07 - because then we can mod by one since the
12:09 - left side is already 25 times smaller
12:12 - great now we just need to multiply the
12:15 - number back up by 32 our texture size
12:24 - so set texture offset 2 but be careful
12:27 - here to ensure all our numbers work out
12:29 - we should use a floor block to round the
12:32 - number down to the nearest whole number
12:34 - and then drop in the current texture
12:35 - offset multiplied by texture size
12:39 - and that's it our texture will have been
12:41 - scaled to the correct texture size
12:43 - we can run that again and you should
12:45 - find that our colours are just a little
12:46 - bit more vibrant now as the colour range
12:48 - has been increased
12:51 - so we are practically ready to begin
12:53 - coding the texture rendering now but
12:55 - just before we do it would be good to
12:57 - consider this touching level color check
13:00 - this was designed to let us change the
13:02 - color of the walls that face different
13:03 - directions
13:05 - well even when texture mapped it will be
13:07 - useful to see this distinction so for
13:09 - the second draw let's add one million
13:12 - and one that's one with five zeros and
13:16 - another one on the end
13:18 - i use this large number because our scan
13:20 - this can in theory contain 172 thousand
13:23 - items so to be safe i'm using an offset
13:25 - of 1 million
13:27 - the extra 1 on the end is because the
13:29 - texture data in our scan list begins
13:31 - with 1 not 0. the draw above we set to
13:35 - two million and one
13:38 - two with five zeros and a one
13:41 - cool we can work with this looking at
13:44 - the running project things are looking
13:46 - fine to me so on we go
13:49 - click into the pen sprite and find the
13:52 - define draw row block it's time to do
13:55 - some texture painting scroll down to
13:57 - where we are setting the pen color
13:59 - now we're really going to pull this
14:01 - script apart now
14:02 - firstly we won't be needing either the
14:04 - set pen color or brightness blocks so
14:06 - move them out of the way
14:08 - but keep the go to xy
14:11 - the blocks below are responsible for
14:13 - actually drawing our wall
14:16 - we pen down
14:17 - move the sprite and pen up to complete
14:20 - our simple coloured line
14:22 - but our textured walls are made up of 32
14:25 - equally sized sections of colour so
14:27 - instead of drawing them from top to
14:29 - bottom in one go we must split the
14:31 - journey up into 32 pieces and draw them
14:34 - one at a time for each color in the
14:36 - texture
14:37 - we'll begin with the pen down as before
14:39 - to begin our line
14:41 - then repeat
14:42 - for texture size iterations
14:45 - are 32 pieces yeah
14:47 - and then we pen up
14:49 - now we want to gradually change y so
14:52 - instead of this set y we use a change y
14:55 - by
14:56 - right next problem is now how far to
14:59 - move by
15:00 - let's calculate the actual height of the
15:02 - full line we want to draw
15:05 - under the go to x y
15:07 - set height to height multiply by 2.5
15:11 - that accounts for the 1.5 up and one
15:14 - down that we draw
15:15 - then to account for the extra pen width
15:18 - res we subtract res
15:21 - that's the full height of the line then
15:23 - but we want to break this up into 32
15:25 - smaller steps we'll make a new variable
15:28 - to hold this naming it d y for this
15:31 - sprite only
15:32 - and because we are drawing downwards set
15:35 - d y to zero subtract
15:39 - and then we divide height
15:46 - into texture size pieces that's 32 equal
15:49 - pieces
15:50 - great because if we now change y by d y
15:53 - then after 32 repeats we will have moved
15:55 - the full distance again yeah
15:58 - but just before we draw each line in our
16:00 - loop we now need to decide each line's
16:04 - color
16:05 - bring back the set pen color
16:08 - so type used to be a color but now we
16:11 - have switched it to be a texture offset
16:14 - the one currently giving us the nice
16:15 - tiled gradient
16:17 - so how do we map this to the texture
16:19 - stored in our scan list
16:21 - well we'll need to set the color using
16:23 - an item of scan list for sure but what
16:26 - item number
16:28 - make a new variable naming it scan index
16:31 - or idx for short for this sprite only
16:35 - so the type variable holds our texture
16:38 - offset but remember we added one million
16:40 - and one to it we need to get back our
16:42 - original offset without the millions
16:44 - so set scan index to type
16:47 - mod
16:48 - 1 million one with six zeros
16:51 - easy gotta love that mod block right
16:54 - let's explain how this offset is going
16:56 - to work with our scan list
16:59 - here is our scanned costume and all of
17:02 - the colors are stored in the scan list
17:04 - from top left as item 1 running across
17:07 - and then starting again on the next row
17:09 - as item
17:11 - 481 since there are 480 pixels in a full
17:14 - row
17:15 - the scan index variable will be a value
17:18 - between 1 and 32
17:20 - representing how far across the texture
17:22 - we need to reference
17:24 - so we begin with the color at scan index
17:26 - and then to find the color below this
17:28 - one we just need to add 480 to the scan
17:31 - index
17:35 - simple this process repeats down the
17:37 - texture until we have picked out all the
17:39 - colors one at a time
17:41 - cool we are close to being able to test
17:44 - this
17:44 - but one word of warning you'll note we
17:47 - didn't set the pen color before we did a
17:49 - pen down at the start that is a little
17:52 - dangerous as it could lead to a dot of
17:54 - the wrong color so let's get around that
17:56 - by setting the pen transparency before
17:59 - the pen down
18:03 - oh my look at the stage something
18:05 - exciting is going on over there
18:07 - so yeah they set the transparency to 100
18:11 - fully invisible
18:13 - the initial pen down will then do
18:14 - nothing at all
18:16 - but hmm look at this the walls have
18:19 - mysteriously all gone transparent now so
18:21 - something is wrong
18:23 - and you know what i know exactly what
18:25 - the problem is it's our set pen color
18:28 - block here this is not the right one i
18:30 - just used the previous one
18:32 - look it takes a color number so this one
18:35 - just sets the color hue
18:37 - leaving the transparency as it was which
18:39 - is why it's now invisible but we wanted
18:41 - to set the entire red green blue color
18:44 - value and for that we need the other set
18:46 - pen color 2 block with the color swatch
18:50 - this one also sets the transparency back
18:52 - to non-transparent as well as the color
18:54 - so drop the item of scan in there and
18:57 - throw away the old set pen color block
19:00 - yeah
19:01 - but guys are you seeing what i am seeing
19:03 - over here in the project window this is
19:06 - so amazing let's have a walk around
19:09 - wow it just blows me away that we could
19:11 - have something like this working the
19:13 - texture is mapped beautifully onto our
19:15 - level walls shrinking off into the
19:17 - distance and with a frame rate of 20
19:19 - even now and that is quite something wow
19:23 - perhaps the only thing missing is that
19:25 - we've lost our lovely darkening of the
19:27 - walls as they move into the distance
19:29 - this set pen brightness block over here
19:31 - is how we used to achieve this but if we
19:33 - were to drop that in after the set color
19:36 - you'll find the results are very
19:38 - unsatisfactory we do get the darkening
19:40 - effect but all our colors are messed up
19:42 - now and that's because the red green
19:44 - blue color we set has a brightness built
19:47 - into it after all some shades of a
19:49 - texture are naturally lighter or darker
19:52 - than the others but if we use the set
19:55 - pen brightness block we override this
19:57 - and all shades become a uniform
19:59 - brightness across the entire texture
20:01 - double yuck so to fix that we use the
20:05 - change pen brightness block
20:11 - yeah it's not quite a straight swap in
20:13 - though
20:15 - we need to change the 120 down to be 35
20:19 - and the divide by to be divided by say 2
20:23 - there that's pretty cool
20:26 - perhaps a little too dark if you think
20:28 - so you may want to try dividing by 3
20:30 - instead
20:32 - yeah i'm liking that what do you think
20:35 - okay we can optimize this a tiny bit see
20:38 - how we are calculating this brightness
20:40 - value each time around this repeat loop
20:42 - let's just do it once before the loop
20:44 - begins
20:45 - make a new variable named right for this
20:48 - sprite only
20:51 - and set it to our 35 subtract distance
20:54 - divided by 3.
20:56 - we do this before our repeat loop and
20:58 - then drop the right variable into the
21:00 - set brightness block
21:02 - excellent that should work just the same
21:05 - yeah cool
21:06 - so how about we also restore that extra
21:09 - feature that darkens the walls facing in
21:11 - different directions to show up these
21:13 - corners better
21:14 - we recorded the wall direction by adding
21:17 - a million or two million to our type
21:20 - variable in the raycaster sprite
21:21 - remember
21:22 - so back in the pen sprite
21:24 - check if
21:26 - type is greater than
21:29 - two million two with six zeros and if it
21:32 - is change the right variable by
21:37 - negative 15 to darken it just a little
21:41 - drop that in just after the set right
21:43 - block and you can see the right hand
21:45 - wall is now just that little bit darker
21:47 - and the corner is much more visible nice
21:50 - feel free to play with this value to
21:52 - find the brightness that you are happy
21:53 - with
21:54 - walking around the level i found that
21:56 - negative 15 is a good compromise not too
21:58 - distinct but enough to make the corners
22:01 - stand out
22:02 - okay this next one is interesting the
22:05 - texture mapping works great like this
22:08 - but we are doing too much work look at
22:10 - this far-off wall ahead if we zoom in on
22:13 - it you can see that we are still drawing
22:15 - our texture by splitting the wall height
22:17 - into 32 pieces regardless of how tiny
22:20 - the wall becomes
22:22 - if i zoom back out and adjust res so
22:24 - that our pen lines are 10 pixels wide
22:27 - would we not expect the height of these
22:29 - walls bands to roughly match the same
22:31 - width 10 pixels high
22:33 - yeah i think so too the benefit of this
22:36 - is that it will make the whole engine
22:38 - run faster less looping faster engine
22:41 - plus this is a common feature in 3d
22:43 - engines swapping out a high res texture
22:45 - with a lower quality texture as it moves
22:47 - further away is called mipmapping
22:50 - now we aren't going to be implementing
22:52 - things to that degree but instead we'll
22:54 - stick to a simple pixel skipping in
22:56 - powers of two that is 2 4 8 16 32
23:00 - etcetera
23:01 - so our aim is to be able to scale back
23:04 - the number of times we repeat here
23:07 - make a new variable named scaled texture
23:10 - size for this sprite only
23:16 - and we'll now be repeating by the scaled
23:19 - size
23:20 - instead to set this value up temporarily
23:24 - move off the repeat loop into some space
23:27 - so this scale texture size is the number
23:30 - of coloured segments we want to paint we
23:32 - could work that out by dividing the wall
23:34 - height
23:38 - by res our pen width
23:41 - then bring in an if else because we need
23:43 - this value to be a power of 2.
23:46 - so if the scaled size is less than say
23:49 - 12
23:55 - then we set it to 8.
23:59 - that's the power of 2 less than 12.
24:02 - now duplicate that if and put it inside
24:05 - the else branch
24:06 - this time checking if size is less than
24:10 - 24 that's double the 12.
24:12 - if it is then we set it to 16 the next
24:15 - power of 2.
24:17 - duplicate again checking size being less
24:19 - than 48 and set it back to 32
24:23 - and lastly if it's not less than 48 then
24:26 - just set it to texture size and let it
24:28 - be full resolution that's fine
24:30 - cool we have our desired scaled texture
24:33 - size then
24:35 - now if the scale texture size is smaller
24:37 - than our actual texture size we will
24:39 - need to know how many pixels we are
24:41 - skipping each time around the repeat
24:43 - loop
24:44 - make a new variable named skip for this
24:46 - sprite only and set skip
24:50 - to the result of dividing texture size
24:56 - by the new scaled texture size but just
25:00 - in case your textures are not sized in
25:03 - powers of two
25:04 - wrap the divide in a floor to round it
25:07 - down to the nearest whole number
25:10 - great now that we have skip everything
25:12 - we do can be multiplied by this
25:15 - starting with d y the distance we move
25:17 - by setting it to d y multiplied by skip
25:28 - also this scan index this 2 needs to now
25:31 - increase by 480 multiplied by skip but
25:34 - we can save having to do this here by
25:36 - instead multiplying skip by 480 outside
25:39 - of this loop
25:41 - set skip to the result of multiplying
25:43 - skip by 480
25:46 - and then finally we can replace the 480
25:48 - here with our new skip value before
25:51 - stuffing the repeat loop back on the end
25:54 - down here oh that was hard work well
25:56 - it's done our textures now scale notice
25:59 - how the far away wall is now constructed
26:02 - from far fewer pen lines speed wise
26:05 - we've gained perhaps an extra five
26:06 - frames per second it's not a huge deal
26:08 - but it's something and i'll leave it up
26:10 - to you to decide if this last
26:12 - optimization was worth the extra effort
26:14 - for you
26:15 - as we walk around you can see how the
26:17 - texture gain resolution as we move
26:19 - towards them that's so cool
26:21 - increasing res to a wider pen width and
26:23 - the vertical texture changes in line and
26:25 - that feels more consistent
26:28 - now hold on a moment did you see that
26:30 - this is rather disturbing to see when we
26:33 - get close to a wall the textures
26:34 - suddenly go mad warping horribly
26:37 - this is caused by us relying on scratch
26:40 - to position our pen and not remembering
26:42 - that scratch will try to prevent us
26:43 - drawing off screen
26:45 - to fix it scroll up in our scripts to
26:47 - where we first position the pen with a
26:48 - go to xy
26:50 - we're going to stuff this y value into a
26:52 - new variable naming it simply y for this
26:56 - sprite only
26:57 - then before we go to x y
27:00 - set y variable 2
27:02 - and move the expression from the go to y
27:05 - below into the y variable above
27:08 - like so
27:10 - now we can use this y variable in the go
27:13 - to
27:14 - super but we still have the same
27:16 - rendering problem okay hold your horses
27:18 - scroll back down to our repeat loop and
27:21 - instead of changing y by d y
27:24 - drop in a change variable y instead
27:27 - changing that by d y
27:30 - then we can once more replace the change
27:32 - y position block with a set y position
27:36 - and pop in the new y variable and aha a
27:38 - miraculous change our terrible wall
27:41 - warping has been fixed nice one well
27:44 - done that's so much better
27:46 - walking around this maze now is really
27:49 - quite something we've come a long way
27:51 - since our episode two days of course i
27:54 - know what you'll be asking next what if
27:57 - we want to use different wall textures
28:00 - you read my mind shall we click into the
28:03 - raycasting sprite and find the single
28:05 - ray script of course
28:07 - we set our texture offset just here and
28:10 - this if you remember is just an offset
28:12 - into the scan list
28:14 - now then if we want to use the next
28:16 - texture don't we just have to add 32 to
28:20 - this number
28:21 - yes of course any multiple of the
28:23 - texture width so easy so change the
28:26 - texture offset by
28:28 - the result of multiplying
28:30 - texture size
28:32 - by
28:33 - well try one
28:35 - did you see that texture change amazing
28:38 - how about number two
28:40 - oh yeah this is fun number three
28:43 - oh man this is a really cool texture
28:45 - thanks to
28:46 - opengameart.org for these amazing
28:48 - textures by the way what an amazing
28:50 - resource yeah so nice it even looks good
28:54 - at lower resolutions too
28:56 - there are simply loads of these to have
28:57 - a look through
28:58 - so if you look at the texture costumes
29:01 - how do we get access to this second row
29:03 - of textures ah no problem just a little
29:07 - maths
29:08 - we need an addition block on the left is
29:11 - the column number of the texture then on
29:13 - the right a multiplication
29:16 - by
29:17 - 480 and the number on the left of the
29:20 - multiply is the row number so now we can
29:23 - access the next row row number one as
29:26 - well see
29:28 - and if we wanted this tnt well that's
29:31 - row one and column one two three four
29:33 - five six seven
29:35 - and there it is woohoo we are
29:37 - unstoppable now
29:39 - i guess that must be the end of the
29:41 - episode
29:42 - what what's that you you want to know if
29:45 - it's possible to have more than one
29:46 - texture on the same level at once oh man
29:50 - what do you like okay so yes it's
29:52 - possible let me quickly show you how it
29:54 - can be done the best bet is for us to
29:56 - start by duplicating the level sprite
29:59 - again yes i know we are getting quite a
30:01 - lot of these aren't we and we'll rename
30:04 - it texture 2.
30:07 - now in the costume editor using the
30:09 - rectangle tool i'll draw a fill shape
30:12 - over all the parts of the level that i
30:13 - want to be the new texture as a hint you
30:16 - may want to group the entire level
30:19 - before doing this as it will make the
30:21 - next step easier ha because now you must
30:23 - delete everything else that is not to be
30:26 - in the new texture see this would have
30:28 - been so much easier if i'd grouped it to
30:30 - begin with
30:31 - right with that done come back into the
30:33 - raycaster sprites code and here we are
30:36 - in the single ray script once more
30:39 - now locate the change texture offset
30:41 - block this is us choosing our texture
30:44 - so we need a new if-else block and we'll
30:47 - check whether or not we are touching the
30:49 - new texture 2 sprite
30:52 - then we can duplicate the change texture
30:55 - offset block into both the then and the
30:57 - else branches of the if
30:59 - and you see we can now choose between
31:00 - the two textures depending on whether
31:03 - the wall is within the texture 2 area or
31:05 - not
31:06 - and now i'll keep the special texture
31:08 - the same and change the default texture
31:11 - numbers in the else
31:13 - and there i have two different textures
31:15 - visible in game at the same time amazing
31:18 - this is just too good let's find that
31:20 - pillow room
31:23 - oh sweet would you look at that
31:26 - right i gotta try a few more
31:28 - combinations
31:33 - oh nice that's quite alien isn't it and
31:36 - with this back wall texture man wow i'm
31:39 - digging this pairing i think we just
31:42 - need to play with the floor and ceiling
31:44 - colors a bit and this would be amazing
31:46 - i can only begin to imagine what you
31:48 - guys are going to do with this and how
31:50 - awesome your raycasters are going to
31:52 - look once you have texture mapping in
31:54 - there like this one as always you'll
31:56 - find a link to the raycasting studio in
31:58 - the description under the video so that
32:00 - you can share your projects there i
32:02 - can't wait to see them but i am afraid
32:05 - we've come to the end of another epic
32:07 - episode if you enjoyed watching then
32:09 - please smash the like button and if you
32:11 - haven't already subscribe to the channel
32:13 - before i cry you know you want to if you
32:16 - are a keen fan or an educator then
32:19 - please consider joining my channel
32:20 - membership you get all sorts of perks
32:22 - including if you want it access to the
32:24 - finished projects themselves so cool it
32:26 - just remains though for me to thank you
32:28 - for watching i hope you have a great
32:30 - week ahead and scratch on guys
32:33 - [Music]
32:42 - you