00:00 - [Music]
00:02 - hello fellow scratchers
00:03 - i'm griff patch and welcome back to part
00:05 - nine of our series creating a tiled
00:07 - scrolling platformer in scratch
00:09 - today we're continuing to look at
00:10 - enemies adding them to the level editor
00:12 - and we'll also discover how enemies
00:14 - should behave off-screen
00:16 - finally we'll finish off with the
00:17 - enemies saving and loading
00:20 - let me take a moment to remind you that
00:21 - it might be a good idea to back up your
00:23 - projects before we start work
00:25 - i always do this before each episode
00:27 - saving my project as a copy
00:30 - also in case it helps i've provided a
00:32 - link under the video to the completed
00:33 - project for episode
00:35 - 6. if you need to compare your scripts
00:37 - or want to remix from there then well
00:39 - you know where to find it
00:41 - now before we dive into creating our
00:43 - exciting new features
00:44 - we have two bugs spotted by followers of
00:46 - this channel that we should address
00:49 - i can easily show you the first when i
00:51 - spawn gumba on top of this blue drop
00:53 - through platform
00:54 - and then press the down key all the
00:56 - goombas dropped down through the
00:58 - platforms too
00:59 - really quite a funny mechanic but not
01:01 - the desired behavior
01:03 - this is occurring because we copied all
01:05 - the collision detection scripts from
01:06 - mario into the enemy sprite
01:08 - without alteration in the enemy sprite
01:11 - find the define fix collisions at point
01:13 - xy script
01:15 - this if check here is to blame see it's
01:18 - looking for the down key presses
01:19 - we simply remove this and now testing
01:21 - again yep
01:23 - that's sorted it the next bug is a
01:25 - little bit more subtle
01:27 - when we bounce on a goomba's head we
01:29 - tend to be overlapping quite a lot more
01:31 - than expected
01:33 - well this is true and it's because in
01:35 - the define tick goomba block
01:37 - we are performing a touching here before
01:40 - we have moved the actual sprites on the
01:42 - screen
01:44 - which means we are testing last frames
01:46 - collisions
01:47 - not this frames collisions we can add in
01:50 - a paint sprite here to reposition the
01:52 - goomba
01:53 - but more importantly click into the
01:55 - mario sprite
01:57 - and at the end of the when i receive
01:58 - move player script
02:00 - since mario is jumping and will
02:02 - therefore be moving fast
02:03 - we again add a paint sprite for mario 2.
02:07 - now let's test that and see if it looks
02:09 - any different
02:11 - well not a huge amount to the untrained
02:13 - eye but compare it again in slow mo
02:16 - and yes the new bounce is much less
02:19 - overlapped
02:20 - that's how it should be okay so back to
02:23 - today's tutorial
02:25 - click into the enemy sprite we need to
02:27 - make the goomba costume available in the
02:29 - level editor
02:30 - so drag the first goomba costume over to
02:32 - the tile sprite
02:34 - now if we look at the tile costumes we
02:37 - can see it has appeared as costume
02:38 - number
02:39 - 29. we'd better remember that number 29
02:42 - got it
02:44 - now we need to choose what key in the
02:46 - editor swaps to the goomba brush
02:48 - clicking to the editor sprite and make
02:50 - the tile key map list visible
02:53 - we'll add a new row for costume 29 the
02:56 - goomba costume
02:57 - and assign a key press of nine
03:00 - now this is a new key so to make that
03:03 - work we need to duplicate one of these
03:05 - when key pressed blocks and configure it
03:07 - for the key
03:08 - nine also setting next brush to nine
03:11 - two this is a testable moment so run the
03:14 - project
03:15 - press zero to enter the level editor and
03:17 - then number 9 to switch to the goomba
03:19 - brush
03:20 - i can lay a few down on the level exit
03:22 - the editor and there they sit
03:24 - as standard tiles on the level but not
03:27 - all
03:27 - is well with this solution remember
03:30 - those semi-solid platform tiles over
03:32 - here the blue ones
03:34 - what if i want to place goombas in front
03:36 - of these
03:38 - oh dear as soon as i do goomba replaces
03:41 - the decorative background tile
03:43 - making things look bad is this a
03:45 - disaster
03:46 - well yes and no the majority of games i
03:49 - code
03:50 - also do not allow enemies to be spawned
03:52 - on top of other tiles
03:53 - think apple it's just part of the level
03:56 - design
03:57 - however for mario it's not so easy to
03:59 - get away with
04:00 - as these situations come up a lot i
04:03 - asked you guys whether you were up for
04:05 - the challenge of allowing placement of
04:06 - enemies on top of tiles
04:08 - and the overwhelming response was oh boy
04:11 - yes
04:11 - so i hope you are ready for this i'll
04:14 - just go back over my level and remove
04:16 - the gumba tiles
04:19 - okay so our actual gumbas spawning code
04:21 - is still in the enemy sprite and is
04:23 - triggering off the g key
04:25 - positioning goomba at mario's feet but
04:28 - no matter how we proceed to spawn our
04:29 - goombas
04:30 - this will need to change to allow the
04:32 - positioning of them at a given tile
04:34 - location
04:35 - if you click into the mario sprite and
04:37 - find the define reset player script
04:39 - you can see we are doing just that here
04:42 - for the mario spawn
04:43 - setting their x and y variables based on
04:46 - a spawn index variable
04:48 - we'll reuse these four blocks to do that
04:51 - i'll just duplicate the whole lot
04:52 - and then remove the parts we don't need
04:57 - there this is all that's required so
04:59 - drag them
05:00 - onto the enemy sprite like so
05:05 - click into the enemy sprite and drag the
05:07 - new script over
05:08 - to around the existing when g key
05:10 - pressed and when i start as clone blocks
05:13 - we're going to rearrange these three
05:15 - sets of scripts now
05:17 - we'll start by making a new custom block
05:19 - for spawning enemies
05:20 - naming it spawn type with a numeric
05:22 - input of tile type
05:24 - run without screen refresh
05:30 - so i'll put the set x and y blocks we
05:32 - just brought over from mario
05:34 - into the custom block to position them
05:36 - based on their spawn index
05:38 - then i will set frame to the empty value
05:40 - to indicate that the enemy has just been
05:42 - cloned
05:43 - and is yet to be drawn now here's
05:46 - something new
05:47 - we add an if tile type equals
05:51 - 29 yes it's the goomba tile again so
05:54 - if we are spawning a goomba then we can
05:56 - do everything we used to do when a new
05:58 - clone was created
05:59 - drag those scripts over from there but
06:02 - make sure to remove these old
06:03 - set x and y blocks to prevent the spawn
06:06 - at mario's feet again
06:08 - next we need to take the create clone of
06:10 - myself block from the when g key pressed
06:12 - and add it after the show block here
06:15 - finally at the very end of our scripts
06:18 - after the cloning is done
06:19 - we set type back to the empty value and
06:22 - we hide
06:23 - this is to keep the identity of the
06:24 - original sprite only the clones
06:26 - should be left with a type variable set
06:30 - okay it would be nice to test these
06:32 - scripts to do so we'll need to just
06:35 - invent a way of triggering the spawn
06:36 - block
06:37 - so let's reuse the when g key pressed
06:39 - hat block
06:41 - this when i start as a clone block can
06:42 - be deleted
06:44 - we'll set the spawn index to
06:50 - tile index of editor
06:54 - this reflects the position of the mouse
06:56 - on the level when the level editor is in
06:58 - use
06:58 - we can then spawn type of 29 and
07:02 - that will spawn a goomba
07:06 - great now we can happily test this click
07:08 - the green flag and press the zero to
07:10 - enter the level editor
07:12 - then press nine to switch to the goomba
07:13 - tile but then for the time being
07:16 - press the g key to run our test script
07:18 - and spawn goombas at the mouse cursor
07:21 - yay this is great the goomba is no
07:24 - longer appearing at mario's feet but
07:26 - instead at the mouse cursor
07:28 - excellent our next hurdle
07:31 - is to liberate goomba from the g key all
07:34 - together
07:35 - however we are not going to be able to
07:37 - store them in the tile grid list
07:39 - because this doesn't support placement
07:40 - of enemies over existing tiles
07:43 - so we will instead store the enemies in
07:45 - new lists of their own
07:48 - before we create the lists we need to
07:50 - add scripts to clear away all these
07:52 - goombas
07:52 - bring in a when i receive level done
07:55 - loading
07:57 - that's the perfect place to trigger a
07:58 - clear down and respawn of enemies
08:00 - as it's broadcast right after a level is
08:03 - loaded
08:04 - what we'll add in here are two new
08:06 - broadcasts
08:08 - set the first one to the new event named
08:10 - entity clear
08:14 - and the second to entity setup you can
08:17 - probably guess what these are going to
08:18 - do
08:19 - when i receive entity clear
08:24 - just delete this clone simple as it gets
08:27 - all the enemy clones will disappear
08:29 - then when i receive entity setup this is
08:32 - going to have to run
08:33 - quickly so create a new custom block
08:35 - naming it spawn loop
08:36 - and we run without screen refresh and
08:39 - then
08:40 - drop the new block under the entity
08:42 - setup receiver
08:44 - now this is a good point to create those
08:46 - new lists to hold the enemy's spawn
08:47 - information
08:48 - create two new lists object idx that is
08:52 - object index for all sprites
08:55 - and object type also for all sprites
09:00 - now i call them objects rather than
09:02 - enemies as i expect will end up storing
09:05 - more than just enemies in them
09:07 - okay so here is an example of how the
09:09 - lists might hold the position
09:11 - and type of 5 enemies we simply have
09:14 - pairs of data on the left the tile
09:16 - indexes
09:17 - where the enemy spawns on the level and
09:19 - on the right we have the tile type
09:21 - so at level index 447 we're placing
09:25 - aguma that is tile29 and then at index
09:28 - level
09:29 - 682 we have another gamba
09:32 - simple okay back to the code
09:36 - we're going to need to loop through the
09:37 - list so make a new variable named
09:39 - object item hash to keep track of which
09:42 - one we're looking at
09:45 - now let me quickly dash through creating
09:46 - this script and i'll explain it to you
09:48 - afterwards
09:53 - okay here we go we start with object
09:55 - item one
09:56 - as we enter this repeat loop we begin by
09:58 - setting the spawn index to
10:00 - row one of the object index list
10:03 - that's where we want the enemy to spawn
10:05 - and we set the spawn type
10:07 - from the object type list then our spawn
10:10 - type
10:11 - custom block takes these two values and
10:13 - does the hard work of setting up and
10:15 - cloning
10:16 - our enemy after the spawn is completed
10:19 - we hide this main sprite not the new
10:21 - clone mind
10:23 - and then change object item hash by one
10:26 - this takes us on to the next enemy row
10:28 - and the spawn loop continues
10:30 - once for every item in the object list
10:34 - finally after creating the clones to
10:36 - ensure this sprite does not get mistaken
10:39 - for a clone itself
10:40 - we set object item hash and the type
10:43 - variables
10:44 - to the empty value
10:47 - well that's the spawning scripts out of
10:49 - the way
10:50 - now we need to get the enemy data into
10:52 - these lists via the level editor
10:54 - click into the editor sprite and find
10:56 - that when i receive move player script
10:59 - this is where all our level editing
11:00 - scripts live and this
11:02 - if brush equals zero will run when the
11:04 - mouse is pressed down
11:06 - in the editor ready to draw we're going
11:08 - to insert a new if condition
11:10 - in here that differentiates between tile
11:12 - drawing and
11:13 - enemy placement we can identify these
11:16 - by their key mappings so key number nine
11:20 - is for enemies
11:23 - make a new custom block naming it paint
11:25 - enemy
11:26 - run without screen refresh which we'll
11:28 - use right away within this new if
11:31 - follow it up with a stop this script to
11:33 - prevent it continuing
11:35 - into the tile painting code now
11:38 - i'll just move the define paint enemy
11:40 - block into some free space and we can
11:42 - code it up
11:43 - firstly unlike painting tiles we only
11:46 - want to allow
11:47 - dropping of enemies on the first mouse
11:49 - button press
11:50 - not during a drag we do this by ensuring
11:53 - we set
11:54 - brush to a value as soon as something is
11:56 - painted
11:57 - and then stopping this script from
11:59 - running again until brush is set back to
12:01 - zero
12:03 - this happens when we let go of the mouse
12:07 - next we look to see whether there
12:08 - already exists an enemy at the tile
12:10 - index we are clicking on
12:12 - going back to our example lists we could
12:13 - ask is there an enemy at tiles 682
12:17 - and in scratch this is done using the
12:18 - item hash of list block
12:20 - so item hash of 682 in object index
12:25 - would return the value 2. this is great
12:27 - because
12:28 - we can use this to allow us to place and
12:30 - remove enemies in the list
12:32 - so we set found index to item hash of
12:35 - tile index
12:36 - that's where we're drawing to in the
12:38 - list object
12:40 - index and then compare where the found
12:42 - index is greater than zero
12:44 - if it is then an enemy already exists at
12:47 - this tile and we remove it
12:49 - by deleting the enemy at item found
12:51 - index of both object index
12:53 - and object type but if an enemy was not
12:56 - found at the tile index
12:58 - then we instead register a new enemy by
13:00 - adding the tile index to object index
13:04 - and adding brush to object type finally
13:07 - we finish off the scripts by forcing a
13:09 - redraw of the enemy sprites
13:11 - by broadcasting entity clear and then
13:14 - entity setup it's just easier to delete
13:17 - and recreate all the enemy clones than
13:20 - trying to handle which one to remove
13:21 - create or update okay let's test this
13:25 - and see what happens
13:27 - pressing 0 to enter the level editor and
13:29 - then 9 to switch to the goomba brush
13:31 - i can click and hopefully place one
13:34 - whew it worked only he's walking off
13:38 - i was half expecting him to stand still
13:40 - but figures
13:41 - we haven't yet coded enemies to do that
13:44 - notice how every time i change the
13:45 - enemies on the level
13:46 - the goombas are all resetting to their
13:48 - start positions
13:50 - that's a good sign exactly as expected
13:53 - now let's stop the enemies from moving
13:55 - when in editor mode
13:56 - click into the enemy sprite and find the
13:59 - when i receive
14:00 - move enemy receiver we'll add a new if
14:03 - at the very top
14:04 - and check whether editor is greater than
14:06 - zero that is
14:07 - we are in the editor mode but we'll also
14:10 - check whether
14:11 - type is equal to the empty value and
14:14 - then stop the script
14:16 - so no sprite movement is run when in
14:18 - editor mode and the type check is just
14:20 - to ensure
14:21 - that only clone sprites run these
14:23 - scripts
14:24 - we can now test again and yes the
14:26 - enemies we placed a moment ago are now
14:28 - stationary in the level editor
14:30 - that's a relief if i on pause with the
14:33 - zero key the goombas spring to life
14:35 - and as soon as i press the zero key
14:36 - again they all return to their starting
14:38 - positions
14:39 - that's wonderful but let's think for a
14:43 - moment about how
14:44 - enemies move if enemies who are off
14:47 - screen begin
14:48 - moving as soon as the level starts then
14:51 - many will walk off the platform edges
14:53 - fall down gaps and
14:54 - once we finally reach them we'll be in a
14:56 - very unpredictable positions
14:58 - this problem is generally solved in
15:00 - platformers by placing the enemies in an
15:02 - idle state in which they simply hold
15:04 - their position
15:05 - until that is the player approaches and
15:07 - they scroll into view
15:10 - we can script this effect in the when i
15:12 - receive move enemy script
15:14 - start by moving the if type equals
15:16 - squish block
15:17 - above the if type equals goomba the
15:20 - squish animation is not concerned with
15:22 - being idle
15:23 - and then add an if above goomba's if and
15:26 - check for a frame being less than
15:28 - zero if you can remember when an enemy
15:31 - is first cloned we set
15:33 - frame to the blank value we will use
15:36 - this to represent the idle state
15:38 - it is worth noting that the blank value
15:40 - is counted as being less than
15:42 - zero now if the enemy is
15:45 - idle then we'll check if they're off
15:47 - screen or not
15:49 - check if the absolute value abs of
15:52 - x minus camera x is greater than
15:55 - 260. since the screen width is
15:58 - plus or minus 240 pixels wide that would
16:01 - mean that the goomba
16:02 - is at least 20 pixels past the left or
16:05 - right edge of the screen
16:07 - so we stop this script they remain idle
16:09 - off the screen
16:11 - we can duplicate this script and change
16:13 - it to look for y minus camera y
16:16 - being greater than 200 again that's 20
16:18 - pixels further than the vertical extent
16:20 - of the screen
16:22 - so if we got this far then goomba is
16:24 - idle
16:25 - but we're about to come on screen so we
16:27 - should probably think about what
16:28 - direction we should walk in
16:30 - if mario is approaching from the left
16:32 - then goomba's x variable will be greater
16:33 - than mario's x variable
16:36 - so we point goomba left that's -90
16:39 - otherwise mario is to the right of
16:41 - goomba and we point goomba to the right
16:43 - plus 90. there's nothing more to it than
16:46 - that
16:46 - so let's run the project and test it out
16:49 - the first thing we notice is that the
16:50 - top goomba is the only one we are seeing
16:53 - we know that there's another goomba
16:54 - sitting just off screen to the right
16:56 - that i placed down earlier but they have
16:58 - not yet made an appearance
17:00 - so we can safely assume that they are
17:02 - idle let's just check
17:04 - yep there he is he triggered as soon as
17:06 - we approached
17:07 - i can test this further by placing down
17:09 - some goombas on the blue platforms to
17:11 - the far right
17:13 - now if i come back here and start the
17:14 - level up again then all the goombas stay
17:17 - idle on the platform until i come across
17:19 - them
17:21 - like so brilliant the idle state is
17:24 - working perfectly
17:25 - very good and that only leaves us with
17:28 - one more item on our to-do list for this
17:30 - episode
17:31 - adding the enemies to the save codes
17:34 - well then click with me into the level
17:36 - store sprite
17:38 - before adding yet more scripts let's
17:40 - break up these long
17:41 - save and load scripts into smaller parts
17:43 - to keep track of what is happening
17:46 - we'll start by making a new custom block
17:48 - named save tile grid
17:52 - and we'll move the scripts that are
17:53 - solely for writing out the tile grid
17:55 - list into here
17:57 - this part is just setting up the save so
17:59 - skip that
18:00 - and we'll take this part where we write
18:02 - out the width and height of the tile
18:03 - grid
18:04 - and everything below however if we look
18:07 - down at the bottom of this script
18:09 - the very last part the final repeat loop
18:11 - is what we do to put the save code into
18:13 - the level store
18:14 - so bring that back up here just remember
18:17 - to pop in a call to save tile grid just
18:20 - before we attach the repeat script
18:22 - on the end there that's clearer to
18:25 - understand
18:26 - see we prepare the save code add target
18:29 - to save code
18:30 - and store the save code next
18:33 - we'll do the same for the loading of
18:35 - levels create a new custom block named
18:38 - load tile grid
18:43 - and move the delete all from tile grid
18:46 - and everything following it
18:47 - into the new define block again
18:50 - replacing the original scripts
18:52 - with a call to the new load tile grid
18:54 - block
18:55 - we need to make a small change to this
18:57 - load tile grid script before we will be
18:59 - able to extend our saving
19:01 - the repeat loop in here currently only
19:03 - finishes when the entire save code has
19:05 - been read in
19:06 - but if we are adding extra data to the
19:08 - save code
19:09 - we need to stop this loop instead when
19:11 - the full grid has been read in
19:13 - so within this final if condition add a
19:15 - new if to check when
19:17 - tile index is greater than grid height
19:20 - now because we transposed our level
19:22 - before saving
19:23 - each time we have read in a complete row
19:26 - we move up to the next column
19:28 - this if is watching for when we've moved
19:30 - up the full height of the level
19:32 - and so we stop this script and so
19:35 - we break out of the repeat loop okay
19:39 - we are ready to actually extend these
19:40 - scripts now we are simply going to add
19:43 - a second data block to our save code the
19:46 - first was the tile grid list
19:48 - the second will be the object lists
19:51 - starting with the savings script
19:52 - we'll add a new custom block named save
19:55 - objects
19:58 - drag it in right after the saving the
19:59 - tile grid like so
20:02 - i'll move the define block into some
20:03 - free space we'll need a new variable
20:07 - named
20:07 - row for this sprite only and then let me
20:10 - build up this save script quickly
20:13 - basically we start by recording the
20:15 - number of enemies in our level
20:16 - and then starting at row one we write
20:18 - out the enemy's position
20:20 - that is the tile index and then their
20:22 - type
20:23 - both using an underscore delimiter no
20:26 - cunning compression here
20:28 - then it's a simple matter of changing
20:30 - row by 1 and repeating for the next
20:32 - enemy in the list
20:35 - loading them back is equally
20:36 - straightforward
20:39 - make a new custom block named load
20:41 - objects
20:45 - pop it under the load tile grid it's
20:47 - important we read data out of the save
20:49 - code in the same order we put it in
20:52 - then take the define block into some
20:54 - space
20:56 - let me quickly code this one up too so
20:59 - to load the objects
21:00 - that is enemies we first delete all the
21:02 - items from object index and object type
21:04 - for a fresh start
21:06 - then read value this will give us the
21:09 - number of enemies to be loaded
21:11 - storing it in the value variable
21:14 - we use this in a repeat block so that it
21:16 - will loop around
21:17 - once for each enemy saved start by
21:20 - reading
21:21 - another value this will be the first
21:23 - enemy's level index
21:25 - add that value to object index and then
21:28 - read value again to get the enemy's type
21:31 - so add that to object type the loop then
21:35 - repeats and reads in the next object
21:37 - until the entire object list are fully
21:39 - recreated
21:41 - well in theory assuming we didn't make
21:44 - any mistakes
21:45 - then that should be it we can run the
21:47 - project and see whether it works
21:50 - first thing to note is that all the
21:52 - goombas i have placed earlier
21:53 - have gone well that makes sense because
21:56 - they were not saved in our save code at
21:58 - the time
21:59 - and our level loading codes now cleared
22:02 - them down
22:02 - before loading a level well then i'll
22:06 - enter the level editor
22:07 - press nine and place some goombas down
22:10 - then when i exit the editor the enemies
22:13 - should have been added to the level save
22:14 - code
22:15 - and stored i'll just squish him to
22:17 - remove him from the level and then
22:19 - re-enter the level editor
22:21 - now this is good sign goomba has
22:23 - reappeared
22:24 - that pretty much proves our save and
22:26 - loading scripts have worked
22:28 - but an even better test is for us to
22:29 - switch to the second level
22:31 - level two using the l key and look no
22:34 - goombas are here yet
22:36 - i'll place a couple on this first
22:38 - platform here
22:39 - good
22:43 - then if i switch back to the first level
22:49 - there just one goomba was left that's
22:53 - really perfect
22:55 - now we can have fun populating our level
22:57 - with many many goombas
23:00 - and that sadly brings us to the end of
23:01 - another episode but i'm
23:03 - super happy that we went to the trouble
23:04 - of allowing enemies to be placed over at
23:06 - the tiles that's a really
23:08 - awesome feature that will have further
23:10 - advantages moving forward
23:12 - i can't wait to reveal those two in
23:14 - upcoming episodes but as a clue
23:16 - mystery boxes i can't believe we're
23:19 - almost at episode 10 already
23:21 - and we haven't yet covered mario losing
23:22 - a life we really need to get that done
23:25 - do keep me up to date with how your
23:26 - projects are coming along if you've
23:28 - enjoyed this tutorial then smash that
23:30 - like button
23:30 - and don't forget to subscribe to the
23:32 - channel to avoid missing my next
23:34 - exciting video
23:35 - thanks for watching and scratch on guys