00:02 - hello fellow scratchers i'm griff patch
00:05 - and i am super excited to get right into
00:08 - coding our raycaster today oh my gosh
00:11 - yes i hope you enjoyed designing your
00:13 - levels and are ready to go because we
00:15 - have so much to cover today we'll be
00:17 - creating light rays light beams with god
00:20 - rays that is in itself such a joy to
00:22 - play with basic 3d projection and
00:24 - finally a lens corrected shaded render
00:26 - of our level wow oh come on let's get
00:29 - scratching
00:31 - and so we continue straight off from
00:34 - where we left our projects in episode
00:36 - one our levels are designed and we can
00:38 - walk around first person style using the
00:40 - wasd waste and cursor keys
00:43 - right then raycasters they're called as
00:46 - such because they work by sending out
00:48 - rays of light from our player in
00:50 - straight lines across the level to find
00:52 - where they collide with walls
00:54 - casting rays
00:55 - a good place to begin then is with the
00:57 - process of casting or firing out one ray
01:01 - to do this we'll need a new sprite but
01:04 - rather than starting from nothing we'll
01:06 - instead duplicate the player sprite
01:09 - now rename it raycaster
01:13 - and then we can delete all the blocks
01:15 - yeah we don't need these
01:18 - next go into the costumes tab and also
01:21 - delete the player costume so the only
01:24 - thing we are keeping is the little
01:26 - hitbox costume from episode one
01:28 - right on we go
01:31 - let's set up the raycasting sprite
01:33 - when flag clicked
01:35 - switch it to our hitbox costume
01:38 - and we'll set the rotation style
01:40 - to don't rotate
01:43 - doing this will ensure the touch sprite
01:45 - sensing blocks are as consistent as
01:47 - possible
01:49 - for now we'll fire off a new projectile
01:51 - when the space key is pressed we want to
01:54 - fire the projectile the same direction
01:56 - the player is facing so point in
01:58 - direction
01:59 - now to get the player's direction we
02:01 - look in the sensing category and get the
02:03 - elusive thing of thing block a tricky
02:06 - blocked find but ever so useful now
02:08 - switch the right side to read player and
02:11 - the left side can then be set to
02:13 - direction
02:14 - so point in direction direction of
02:17 - player great
02:18 - now for its position
02:20 - easy go to player
02:23 - quick test and this is doing what we
02:25 - expect we should find that every time we
02:28 - press the space key a little square
02:29 - hitbox costume is positioned just at my
02:32 - player's feet
02:33 - not so exciting so let's set it off
02:36 - moving like a projectile until it
02:39 - collides with the level so repeat until
02:42 - we are touching
02:44 - the level
02:46 - and until we do we just move the
02:48 - projectile forwards with a move
02:51 - four steps
02:53 - now before i explain why i chose four
02:55 - steps here let's give this a quick test
02:58 - smash that space bar
03:00 - and off it goes trundling in a straight
03:02 - line across the level and when it hits
03:04 - the wall it stops the repeat loop is
03:07 - ended now remember i told you to make
03:09 - sure the level was fully surrounded by
03:11 - walls i hope you listened because if not
03:14 - this projectile loop would never end
03:17 - right now that's not such a big problem
03:19 - but later on that will cause great lag
03:22 - so be warned
03:24 - coming back to that move four steps how
03:27 - did i come to that number well obviously
03:30 - a smaller number would mean the
03:32 - projectile would move slower you can try
03:34 - it if you like but when creating a
03:36 - raycaster one thing you do not want is a
03:38 - slow project
03:41 - speed is everything so then why not bump
03:44 - this number right up to say 16.
03:46 - well then the projectile would move in
03:49 - such large steps that it can skip right
03:52 - over a wall without gliding and that
03:54 - would be bad news for us so we need to
03:56 - find the largest step we can take that
03:58 - will not have this problem
04:00 - well if we look at our costume we see
04:03 - that it's 4 pixels wide therefore if we
04:06 - move by anything more than 4 pixels we
04:08 - will be leaving gaps between the sensing
04:10 - locations so 4 is the biggest step we
04:13 - can safely move
04:15 - moving by four pixels does have the
04:16 - benefit of getting the projectile across
04:19 - the level quicker but a disadvantage is
04:22 - that it can leave the projectile deeply
04:24 - embedded in a wall
04:26 - luckily we can deal with this by
04:28 - carefully reversing it back out again so
04:30 - that we find the true point of collision
04:34 - to do this duplicate the existing repeat
04:36 - block and this time we repeat until we
04:39 - are not
04:41 - touching level and to reverse slowly out
04:44 - we need to move by negative one step
04:48 - perfect wanna see that in action
04:52 - sweet each projectile now ends up very
04:55 - nicely flush up against the wall no
04:57 - overlap to be seen
04:59 - i find it quite funny though that if you
05:01 - look closely you can see the projectiles
05:03 - wiggling back out of the wall after
05:04 - they've collided that's because we are
05:06 - not using any run without screen refresh
05:09 - blocks that means every move we make in
05:11 - a repeat loop is being animated
05:14 - well we'll stop all that animation now
05:16 - anyway make a new block and name it
05:20 - single ray
05:22 - and we make sure to tick the run without
05:24 - screen refresh
05:26 - okay
05:27 - move everything below the point in
05:29 - direction block into our new define
05:32 - block
05:33 - and then drag in a new single ray block
05:35 - to where we move the scripts from
05:38 - so where before we were animating the
05:40 - flight of the projectile now we have
05:42 - wrapped the entire process in a run
05:44 - without screen refresh
05:45 - boom the projectile finds the wall
05:48 - instantly and we can change direction
05:50 - and at every press of the space key our
05:52 - projectile just materializes at the
05:54 - point of collision very neat indeed what
05:56 - we've created here can be thought of as
05:58 - a line of sight raycast it shows us what
06:01 - is directly in front of the player
06:03 - a fun enhancement to this might be to
06:05 - draw the line between the player and the
06:07 - collision like a laser gun
06:10 - so have you ever used the pen extension
06:12 - before
06:13 - just click on the add extension button
06:16 - down here and add scratches pen
06:18 - extension
06:20 - sweet a whole new category of scratch
06:22 - blocks to play with to avoid ending up
06:25 - with a screen full of lines drop an
06:27 - erase or block in to begin each shot
06:30 - next we set pen size to 4
06:34 - to keep the width of the line similar to
06:36 - our projectile
06:37 - and then
06:38 - set the pen colour to 53
06:42 - this is a hue colour and should be a
06:44 - nice jedi blue
06:47 - then to draw the line itself within the
06:50 - single ray script after the go to player
06:53 - we drop in a pen down
06:56 - now every movement of the sprite will
06:58 - leave behind a line
07:00 - so then pop a pen up at the bottom of
07:03 - the script as we've finished moving
07:07 - super let's test
07:10 - hit the space bar
07:12 - zap what a beautiful blue laser gun we
07:15 - have made
07:16 - that works really well and we can rotate
07:19 - and shoot it off again and again the
07:22 - lasers trace from player to wall
07:25 - instantaneously and with very good
07:27 - precision you getting any ideas for
07:29 - awesome games you could make with this
07:31 - seriously there's so much we could do
07:33 - with the things we cover in this
07:34 - tutorial it's one you'll find you can
07:36 - keep coming back to again and again
07:38 - okay the next step is to go real time
07:42 - with the laser gun changing it into a
07:44 - laser beam or laser pointer so no more
07:47 - when space key pressed bring in a when i
07:50 - receive block and we'll make a new
07:52 - message named raycast
07:55 - swap all the scripts from the space key
07:58 - over to that and now all we need to do
08:00 - is broadcast this event so click into
08:02 - the player sprite
08:05 - now locate the bottom of the main
08:06 - forever loop and just pop in a broadcast
08:10 - raycast
08:12 - okay so how beautiful is this
08:16 - i feel like we need a bright spark on
08:19 - the end and a sizzling sound as we cut a
08:21 - big chunk of level away with this huge
08:23 - awesome laser beam
08:25 - each step of this tutorial brings with
08:26 - it fun new toys to play with this is
08:29 - just too cool
08:31 - so moving fast now we've done a single
08:34 - beam how about we widen it out to make a
08:37 - full spread like god ray-like
08:40 - no problem surround the single ray block
08:43 - with a repeat
08:46 - yeah for ten why not
08:48 - but we need to turn within the loop so
08:50 - that the rays are spread out apart from
08:52 - each other turn clockwise that's to the
08:56 - right by 5 degrees
08:59 - ah but this repeat needs to be within a
09:01 - run without screen refresh 2. otherwise
09:04 - it just won't work
09:05 - so make a new custom block naming it
09:08 - raycast
09:10 - and tick the run without screen refresh
09:14 - the repeat 10 goes in there and drop a
09:17 - raycast block in where we move the
09:18 - scripts out from
09:20 - splendid i'm feeling good about this run
09:23 - the project
09:24 - oh man that is cool i like it a lot it
09:28 - reminds me of a laser show at a concert
09:30 - each ray emits from the player and
09:32 - individually finds the furthest point it
09:34 - can travel to before it collides
09:37 - you get some really interesting patterns
09:39 - being cast by these rays now
09:41 - so no problem here things are still
09:44 - running really smoothly shall we try and
09:46 - up the number of rays even more
09:49 - we'll begin by making a variable to
09:51 - define the spread of rays that we want
09:53 - to generate
09:54 - name it fov fov for all sprites
09:58 - that stands for field of view and will
10:01 - be useful for raycasting later on but
10:04 - for now we can think of it as the spread
10:06 - out of the raise
10:08 - under the when green flag clicked set 5
10:11 - to 60.
10:13 - that's a good standard setting that will
10:15 - work well for us later on
10:17 - however for extra entertainment right
10:20 - click the fav reporter on the stage and
10:22 - make it into a slider
10:24 - then i'll set the minimum value to 30
10:27 - and the maximum to
10:29 - 120 degrees
10:31 - nice now back in the define raycast
10:34 - we'll use the fov variable as the number
10:37 - of times we repeat
10:39 - wow that's going to be a lot of rays now
10:42 - 60 of them and since there are so many
10:44 - we'll reduce the turning angle to just
10:47 - one degree to squeeze them all in
10:50 - leaving less of a gap
10:52 - it's testing time
10:54 - oh wow wow wow the rays are so tightly
10:57 - packed that they have formed what looks
10:59 - like a solid flashlight beam that looks
11:02 - so amazing and watch this i can adjust
11:05 - the fog slider to expand and contract
11:07 - how wide the beam is
11:09 - so neat
11:11 - but do you see a problem we have here
11:13 - the beam is not centered on our player
11:16 - instead it's always being sent out to
11:18 - one side of us
11:19 - to fix this we need to rotate the whole
11:22 - beam half of its width to the left
11:25 - counterclockwise
11:26 - okay then before we start drawing the
11:29 - beam add a turn left block
11:32 - and half of the beam is easy to
11:34 - calculate it's 5 divided by 2.
11:37 - that's the ticket the beam is well
11:40 - centered and you can see it clearly as
11:42 - we play with the fog slider so cool i
11:45 - could play with this like forever
11:48 - what i especially love is to watch the
11:50 - shadows being formed by these light rays
11:52 - as i move rotate and strafe around the
11:54 - level
11:55 - look at the shadows cast by the little
11:57 - pillars they are particularly cool don't
11:59 - you think well if that doesn't get your
12:01 - imagination flowing i don't know what
12:03 - will but we are not done yet not even
12:06 - close
12:07 - for now we are going 3d
12:10 - are we excited oh yes take a look at
12:14 - this example scene up until now we've
12:16 - been using this blue beam to represent
12:19 - light shining from our player into the
12:21 - level and i've talked about this being
12:23 - the player's line of sight that is
12:25 - everything our player can see
12:27 - so for example the player can see this
12:29 - front wall here but won't be able to see
12:32 - through it to the wall behind
12:34 - in this scene we can identify five
12:37 - distinct wall sections visible to the
12:38 - player from this viewpoint
12:41 - if i pull up a 3d view of the scene
12:44 - we can clearly see the same five
12:46 - matching sections
12:47 - so how do we go from our 2d raycast to a
12:51 - 3d view
12:53 - well let's slow down the raycasting and
12:56 - watch the scene build one ray at a time
13:00 - we cast out rays from left to right as
13:02 - before making a note of just how far a
13:05 - ray had to travel before it collided
13:07 - with a wall
13:08 - this tells us just how far away the wall
13:11 - is in that direction
13:13 - and so when we begin to draw a 3d scene
13:16 - again from left to right we know we need
13:18 - to paint a slice of wall we just need to
13:21 - know how tall to draw it
13:23 - a close-up wall is large and a far away
13:26 - wall is tiny
13:28 - this is called perspective and it's a
13:30 - simple concept to be precise an object
13:33 - that is twice as far away appears half
13:36 - as big
13:37 - that is perceived height is equal to
13:39 - size divided by distance
13:42 - using this idea we raycast and draw an
13:46 - entire 3d scene one ray at a time
13:50 - so here goes nothing make a new variable
13:54 - x for this sprite only we'll use this to
13:57 - keep track of how far across the screen
13:59 - we've drawn
14:00 - set variable x to negative 240
14:05 - the far left and drop it into the top of
14:07 - our raycaster custom block
14:10 - then we change variable x by
14:14 - now over the course of this repeat fov
14:17 - we want the x variable to travel a total
14:20 - of 480 pixels because that's the full
14:23 - width of the screen
14:25 - so to split that distance into five
14:28 - equal parts because we're repeating both
14:30 - of
14:31 - we divide 480 by 5.
14:37 - next find the define single ray script
14:40 - remove the pen down and pen up blocks so
14:43 - that we no longer draw the 2d rays
14:47 - to begin drawing our 3d scene we need to
14:49 - know how far a ray has traveled and
14:52 - therefore how far away a wall is
14:55 - scratch has a block for that distance to
14:58 - player
14:59 - that will tell us the length of the
15:00 - current ray from the player to the wall
15:04 - let's make a new variable to store that
15:06 - in name it
15:07 - distance for this sprite only and set
15:10 - the distance variable to
15:12 - distance of player
15:15 - super
15:16 - next we need to apply the perspective
15:18 - calculation to this distance so we know
15:20 - how tall the wall should appear on the
15:22 - screen
15:24 - make a new variable naming it
15:27 - height
15:28 - again for this sprite only and then set
15:30 - height
15:34 - to some value divided by the distance
15:40 - but we still need to fill in this left
15:41 - side and this is known as the actual
15:44 - wall height or size of the wall this is
15:46 - a weird one really as it's all relative
15:49 - but for now just enter the size number
15:52 - as 4 000
15:54 - yeah it's quite big sounding but don't
15:56 - worry that should be about right and you
15:59 - can play around with it later to see
16:00 - what effect it has
16:02 - now we have everything we need to draw a
16:05 - slice of wall bring in a go to xy block
16:09 - the x position is simply the x variable
16:12 - we created that a moment ago the y
16:14 - position can be our height variable
16:17 - now lower the pen to the paper pen down
16:21 - to draw the wall move the sprite using a
16:24 - set y2
16:25 - followed by
16:27 - zero
16:28 - subtract height
16:30 - so if height was 100 then we'd now be
16:33 - drawing a line from a y of a hundred to
16:35 - a y of negative one hundred
16:38 - so then pen up once more to complete the
16:41 - line and our single ray is done and by
16:44 - the nature of being called in a repeat
16:46 - loop the next ray will begin to draw
16:48 - until the whole scene is completed oh
16:51 - man yeah we are in a position to run
16:53 - this baby what do you think it will look
16:56 - like
16:58 - oh wow now what is interesting is that
17:01 - you can really see these vertical lines
17:04 - they are all very distinct it's kind of
17:06 - hypnotic like a really old console game
17:09 - i love it though we can still see the
17:12 - map where we were walking around
17:13 - overlaid on top which is kind of funky
17:16 - at this stage and even though we are
17:18 - just drawing lines we can easily make
17:20 - out the 3d scene with its corridors and
17:22 - rooms it's quite something how we have
17:24 - suddenly magicked up a virtual world
17:26 - from our simple level map it really
17:29 - amazes me that it can be done so simply
17:31 - and that really is the joy of raycasting
17:36 - right to improve things further let's
17:39 - hide the 2d map
17:40 - click into the level sprite now don't
17:42 - just use a hide block that won't work at
17:45 - all in fact it would break the project
17:47 - since we are relying on touching blocks
17:50 - to detect the walls of the level so
17:52 - instead use a set ghost effect block
17:55 - set to 100. this causes the sprite to
17:58 - become completely invisible without
18:00 - actually hiding it and yet they remain
18:03 - visible to the sensing blocks just as we
18:06 - need
18:08 - yep look at that
18:10 - very cool
18:12 - so next we'll try to remove the gaps
18:15 - between our wall lines
18:17 - so do we just want to bring the lines
18:19 - closer together
18:20 - if i slide the fog value
18:23 - wow that does the trick but the level
18:25 - ends up being distorted squashing the
18:28 - scene horizontally what we need is a way
18:30 - of changing the spacing of lines without
18:32 - changing the field of view
18:35 - this is often referred to as resolution
18:38 - or just res for short
18:40 - make a new variable named res for all
18:43 - sprites
18:46 - and at the top of the raycasting sprite
18:48 - in the green flag script set res to 8
18:52 - this means we want every vertical line
18:55 - to be 8 pixels wide
18:58 - then make it into a slider
19:02 - setting the minimum value to 4
19:05 - and the maximum value to 16.
19:10 - we can instantly drop the res variable
19:12 - into the set pen size block
19:15 - oh yeah you can see our level instantly
19:17 - fattened up but we're not done yet
19:21 - see how the lines still become gappy as
19:23 - we adjust the res slider
19:26 - let's see what the problem is
19:28 - come down to the raycast custom block
19:31 - these figures are now all wrong we need
19:34 - to space out the lines based on the res
19:36 - variable not the fov variable
19:39 - so how many vertical lines can we fit on
19:42 - the screen
19:43 - make a new variable named scan lines
19:50 - set the scan lines to
19:52 - 480
19:54 - that's the width of the screen
19:56 - divided by
19:59 - red the thickness of the lines
20:02 - this is now the new value for our repeat
20:05 - loop one thing leads to another and we
20:07 - must also adjust the turn by angle this
20:10 - wants to still turn by 5 degrees in
20:14 - total
20:15 - so this becomes 5 divided by scan lines
20:19 - the last value is the x variable and
20:21 - obviously we want to move across by the
20:23 - width of the pen which is res
20:27 - what a reshuffle right but do we have
20:30 - success run the project
20:33 - it looks fine at a reserve eight great
20:36 - let's slide that down
20:37 - oh hmm okay we still have a small issue
20:40 - with gapping at odd numbers but the even
20:43 - numbers all look to be really tight
20:46 - this is probably due to where we begin
20:48 - drawing so you see how the first line
20:51 - starts halfway off the screen
20:53 - let's try moving the whole drawing half
20:55 - a pen width to the right
20:57 - instead of setting x to negative 240
21:01 - bring in a subtract operator and enter
21:03 - 240 on the right and then on the left we
21:06 - want half of the pen width that is res
21:09 - divided by 2.
21:13 - there let's see if that fixed the
21:15 - problem
21:17 - yeah awesome that looks perfect now what
21:20 - do you think
21:22 - let's have a walk around
21:25 - oops too close to the wall there
21:28 - oh yeah yeah this is really coming
21:30 - together and it's very fun to explore
21:32 - the level but because it's all in one
21:34 - shade of blue it can be a little hard to
21:37 - make out some of the turnings
21:39 - a quick improvement we can make is to
21:41 - darken the walls as they move further
21:43 - away from us
21:44 - find the define single ray script
21:47 - and look for where we get the distance
21:49 - to player we want far away to mean
21:53 - darker so from the pen category bring in
21:56 - a set pen brightness block
21:59 - in brightness terms larger numbers mean
22:01 - brighter so we are going to need to flip
22:03 - this number so that larger distances
22:05 - become darker
22:06 - bring in a subtract block and we'll
22:08 - start from a brightness of 120.
22:12 - rather than just putting distance right
22:14 - in there we use a distance divided by
22:17 - 1.5 to make the level fade out a little
22:20 - more gradually
22:22 - feel free to play with these values the
22:24 - larger the number we divide by the more
22:25 - illuminated the level feels
22:28 - brilliant you can see the effect that
22:30 - this has had on our 3d rendering it
22:32 - feels so much more atmospheric there's
22:34 - just so much more perception of depth
22:37 - it's quite spooky in fact i don't think
22:39 - i'd want to be walking around this maze
22:41 - in real life i can tell you
22:45 - oh look at this i especially love this
22:48 - room because it really shows off the
22:50 - perspective of the 3d projection
22:52 - right we have an important adjustment to
22:55 - make now that many scratch raycasters
22:57 - not all but many fail to implement
23:00 - so look at this wall straight in front
23:03 - of me
23:04 - but do you notice something weird
23:06 - is it just me or does the wall look like
23:09 - it's curving away from us
23:12 - the effect can be amplified if i whap up
23:14 - the field of view wowzers now you can
23:17 - really see the curvature ha that's a
23:20 - crazy fisheye lens effect
23:22 - and surprisingly it's completely natural
23:26 - think about what we are seeing standing
23:28 - close to a wall the distance to the wall
23:30 - directly in front of us is way closer at
23:32 - the distance to the wall to our left or
23:34 - right so given that perspective says the
23:37 - wall further away appears smaller it's
23:39 - obvious the wall should indeed curve
23:41 - away to the edges of the screen
23:43 - but unless we want to feel giddy and get
23:46 - all motion sick we should probably
23:48 - follow the general convention of most
23:49 - first-person computer games and apply a
23:52 - lens correction to straighten these
23:54 - lines up
23:55 - luckily this is not very hard the fix is
23:58 - to stop considering the distance from
24:00 - the eye to the wall and instead measure
24:02 - the distance from the wall to the
24:05 - player's view plane this is defined by
24:07 - the direction the player is facing
24:09 - we can always draw a triangle from the
24:11 - player to the wall and then form a right
24:14 - angle from their view plane like so
24:16 - if you've studied trigonometry then you
24:19 - can calculate the adjacent length here
24:21 - using adjacent equals the cosine of t
24:24 - multiplied by the hypotenuse did i look
24:27 - that up on wikipedia of course i did
24:30 - okay let's code it up we'll use another
24:33 - set distance block and as the mass
24:35 - dictates we'll multiply the current
24:37 - distance
24:41 - that is the hypotenuse by the cosine of
24:47 - ah we need the relative direction of the
24:50 - ray we don't have that yet it's given by
24:52 - subtracting the direction of the player
24:55 - from this ray's direction
24:57 - to get the original direction come back
24:59 - to the define raycast script
25:04 - we'll make a new variable
25:07 - de dir for this sprite only
25:10 - and now set der to the initial direction
25:18 - cool
25:19 - so quickly back to the single ray script
25:22 - and now we can subtract d from the
25:25 - current direction there that makes the
25:27 - direction relative to the way we are
25:29 - facing
25:30 - splendid this is just begging to be
25:32 - tested let's see what this effect has on
25:35 - our scene
25:36 - so this is looking good the walls do now
25:39 - appear straighter backing away and yes
25:42 - hardly any curve to be seen awesome
25:46 - now while i go for a little walk around
25:49 - let's have a think about what else we
25:50 - could improve gosh i do hope you managed
25:52 - to get this far it's just too much fun
25:55 - okay what i think we should add is a
25:57 - floor and a ceiling the pure black does
26:00 - make the walls appear a little floaty
26:01 - since the walls appear to be bright
26:04 - close up i feel the floor and ceiling
26:06 - probably should do the same
26:08 - so click into the backdrop and then into
26:10 - the costume editor i'm going to start
26:12 - painting a completely new costume and
26:15 - draw a filled rectangle to cover the
26:16 - entire bottom half of the canvas right
26:18 - up to the midway mark
26:20 - now that's cool look at the 3d scene it
26:23 - already makes a difference just having a
26:24 - horizon
26:26 - but i'm not quite sure about the color
26:28 - though
26:28 - with the rectangle selected change the
26:31 - fill to be a gradient
26:33 - i want the top color to be black but the
26:35 - second color you can make a bit lighter
26:38 - and any color that suits your game
26:40 - there oh i like this and the ground is
26:43 - more defined now and yet it still feels
26:45 - like it's fading into the darkness in
26:47 - the distance how about for the ceiling
26:50 - now we could choose a pure black for a
26:52 - night sky
26:53 - but i think i'll just duplicate the
26:55 - floor you can use copy and paste if you
26:57 - wish or drag with the alt key and then
26:59 - finally flip it vertically
27:02 - yeah there we go let's see that in
27:04 - action man that's good with every
27:07 - upgrade it gets more immersive
27:11 - hold on i just noticed the player sprite
27:13 - and raycasting sprites are still showing
27:15 - we should have hidden these a while ago
27:17 - shouldn't we click into the raycaster
27:19 - sprite first finding the when flag
27:21 - clicked
27:23 - just set ghost effect to 100 to hide the
27:26 - hitbox
27:27 - we then do the same in the player sprite
27:30 - under the when flag clicked set ghost
27:32 - effect to 100
27:40 - much cleaner
27:42 - right let me just show you some other
27:44 - things that it might be nice to improve
27:46 - sometimes when you approach a wall
27:48 - you'll see a significant jittering like
27:51 - a wall edge can't decide whether to draw
27:53 - or not do you see that
27:55 - not the nicest is it
27:57 - now remember i told you we could move
27:59 - our raycaster sprite by four pixels each
28:01 - time so that it moved fast but didn't
28:03 - skip any walls well
28:05 - that is only half the truth sure we
28:08 - won't skip over a complete wall but when
28:10 - moving by four pixels at a time we can
28:13 - still skip over the edges of a wall
28:16 - and that is what is happening here
28:18 - click into the raycaster sprite and find
28:20 - the define single ray script
28:23 - for a test try reducing this to a move
28:25 - by two steps instead
28:28 - testing that does indeed show a great
28:30 - improvement in the jitter wow but we do
28:33 - have to realize that the cost is that
28:35 - the raycaster will now run approximately
28:37 - twice as slow as before and that could
28:40 - be a bit too slow for some
28:42 - so bear that in mind and consider
28:44 - whether you want speed over accuracy
28:47 - of course you can always set the
28:49 - resolution to a higher number to keep
28:51 - things running fast it's up to you
28:54 - now since we're in this bit of code
28:56 - there's another thing we can tweak
28:58 - when i face a wall do you see the slight
29:01 - wobble across the bottom
29:03 - this is due to a sensing wall collisions
29:05 - to the nearest pixel we can adjust this
29:08 - move -1 to be just half a pixel instead
29:12 - try it using move of minus 0.5 steps
29:17 - and see how this improves the axi of the
29:19 - line it's far smoother isn't it again
29:21 - this will have a slight impact on the
29:23 - speed of your raycaster but this time
29:25 - not as dramatic but you can leave it at
29:28 - -1 if that does bother you
29:30 - okay guys enough little fixes we are
29:34 - close to complete but i do have one more
29:37 - significant enhancement to show off and
29:39 - it's cool you may have noticed that
29:41 - although shading for depth works wonders
29:44 - for distinguishing between walls that
29:45 - are behind each other it doesn't really
29:48 - help for corner junctions
29:50 - see how the corner here has no line or
29:52 - difference in shade or color to help us
29:54 - see it clearly
29:56 - what i want to finish with is a way of
29:58 - coloring walls to distinguish them apart
30:01 - look at this diagram we want all
30:04 - vertical walls to be colour a and all
30:06 - horizontal walls to be color b
30:09 - so array collides with a vertical wall
30:11 - here we want to paint the wall with
30:13 - colour a right but how can our vein
30:15 - customer know this
30:17 - well how about we paint another level
30:20 - costume and everywhere we have a bit of
30:22 - color that means the wall next to it
30:24 - should be color a
30:26 - if i draw a color all down beside the
30:28 - vertical walls then all i now need to do
30:31 - is check whether i'm touching this color
30:33 - after a wall collision to know if i
30:35 - should paint color a or b
30:38 - this seems like a plan but do you really
30:40 - fancy painting these colors in by hand
30:44 - no me neither so let me show you a
30:47 - faster way
30:48 - start by duplicating the level sprite
30:53 - naming the copy as level color
30:57 - okay are you ready you need to carefully
31:00 - follow these steps
31:01 - in the costume editor begin by making
31:04 - sure you are zoomed to 100 with the
31:06 - little equals button
31:08 - start by duplicating the level costume
31:11 - we need to select all the shapes that
31:13 - make up the costume either by dragging a
31:16 - selection box around them or by pressing
31:18 - ctrl a
31:20 - next up using the keyboard press the
31:22 - right arrow key just once this will move
31:25 - the entire duplicated level costume
31:27 - slightly to the right
31:31 - now click the copy button ready to make
31:33 - use of it again shortly
31:35 - got that so far
31:37 - great
31:38 - now we delete this entire costume don't
31:41 - worry the copy is still there ready to
31:43 - paste
31:44 - next up select all the shapes that make
31:47 - up the first costume again by dragging a
31:49 - selection box around it or pressing ctrl
31:51 - a
31:52 - but this time with your keyboard we
31:54 - press the left arrow key just once and
31:57 - the whole costume moves just that little
31:59 - bit to the left
32:01 - and here we go finally we press the
32:03 - paste button
32:04 - this results in our left and right
32:06 - shifted costumes being laid out on top
32:08 - of each other in a single costume you
32:11 - can see them both there
32:13 - the magic of this is that we are left
32:15 - with the color only to the left and
32:17 - right of the walls of our level but not
32:20 - below or above
32:22 - just what we needed
32:24 - right then so click into the raycaster
32:26 - sprite
32:27 - to detect the level color find a defined
32:30 - single ray script
32:31 - separate off the set distance script we
32:34 - want to set the color before this
32:36 - drop in an if-else block
32:40 - and we'll check whether we are touching
32:42 - level color
32:45 - if we are then we've collided with a
32:47 - vertical wall so set pen color
32:53 - to let's go for 58
32:56 - else we again set pen color to 53
33:00 - or whatever color value you want of
33:02 - course
33:03 - are you ready to test this i most
33:06 - certainly am oh yes this is so smart the
33:10 - walls are really showing this effect off
33:12 - well that's such a clean corner now big
33:15 - improvement if i walk about you can
33:17 - clearly see how the walls alternate
33:19 - between the two shades of blue depending
33:21 - on which way the wall faces
33:23 - i've got to say i'm really pleased with
33:24 - how this raycaster has turned out
33:27 - oh and here's my favorite room again
33:29 - look even better than before awesome
33:32 - the only problem with this technique of
33:33 - colouring appears on walls that are
33:35 - either curved or run at an angle in this
33:38 - case we tend to get a rather unstable
33:40 - flashing of color
33:42 - there is a solution though just come
33:44 - back into the costume editor for the
33:45 - level color sprite
33:47 - for walls that are not horizontal or
33:48 - vertical we must paint the colors in
33:51 - ourselves it's not really a problem i'm
33:54 - going to draw a big rectangle through
33:56 - the middle of this circular level
33:57 - structure here and then delete the
34:00 - circle part completely
34:01 - now the coloration should be very well
34:04 - defined let's see that in action
34:07 - amazing the large circular pillar is now
34:10 - segmented into four areas by the
34:11 - rectangle i've just painted in
34:13 - you could actually have quite a lot of
34:15 - fun coloring in levels the way you want
34:16 - to what do you think
34:18 - wow what a mammoth episode this has been
34:22 - and goodness have we made a lot of
34:24 - progress we've gone from just having a
34:26 - 2d level and a player to a fully 3d game
34:29 - just like that
34:30 - i really hope you've had a lot of fun
34:32 - following along if so then don't
34:34 - hesitate to smash that like button and
34:36 - let me say i really really look forward
34:39 - to taking a stroll through some of your
34:41 - levels so continue to submit them to the
34:43 - scratch studio linked under this video
34:46 - now if you haven't already to avoid
34:48 - missing any future videos subscribe to
34:50 - the channel now we've just passed 100
34:53 - 000 subscribers
34:55 - what a milestone right thank you
34:58 - everyone that just blows me away and if
35:00 - you want to support my channel further
35:02 - to help me make these awesome videos
35:03 - then please consider joining my channel
35:05 - membership there's a lot of perks to be
35:07 - had including more direct access to me
35:09 - through priority comments you get the
35:11 - fun channel emoji early access to videos
35:14 - before anyone else and for those who
35:16 - need them the scratch projects
35:17 - themselves
35:19 - but this is it we've run out of time
35:21 - thank you for watching have a great week
35:23 - ahead and scratch on guys
35:33 - you