00:00 - [Music]
00:02 - hello fellow scratchers
00:03 - i'm griff patch and today's tutorial is
00:05 - all about demystifying grids and lists
00:08 - grid lists list grids storing
00:11 - information in the list
00:12 - but in the shape of a grid seriously
00:14 - though this gets me really excited and
00:16 - it's just so super useful for creating
00:18 - all sorts of projects
00:20 - be that a board game art projects
00:22 - spreadsheets mazes with pathfinding or
00:24 - scientific simulations
00:25 - the list goes on gridlists are used in
00:28 - many of my projects
00:29 - in fact let me show you apple obviously
00:32 - uses a tile grid
00:34 - it's right there in the very layout of
00:36 - the level do check out my tile scrolling
00:38 - tutorial series for more on this type of
00:40 - game
00:41 - well how about this my sand and water
00:44 - simulator
00:45 - i love this one it works on a grid with
00:47 - tiny grid cells
00:49 - where every cell is a particle of sand
00:51 - water stone or air
00:53 - the list behind this project has to be
00:55 - pretty big don't you think and
00:58 - you can do all sorts of fun simulations
01:00 - with grids have you heard of john
01:02 - conway's game of life
01:04 - next up my port of slytherio wait
01:07 - this uses a grid how so ah
01:10 - now this is really interesting the
01:13 - problem with slither i o
01:14 - is the number of collectible orbs that
01:16 - appear in the world
01:17 - all at once thousands and thousands of
01:20 - them
01:21 - so many in fact that it would cause
01:23 - scratch to slow
01:24 - right down if we had to consider them
01:27 - all at once when drawing and calculating
01:29 - orbit collisions
01:30 - instead the entire level is split up
01:32 - into a virtual grid
01:34 - stored in a list and the orbs are
01:37 - allocated to each grid cell
01:38 - using clever bucketing linked list data
01:41 - structures
01:42 - only the orbs in the nearby grid cells
01:45 - need to be checked
01:46 - which is far faster the takeaway
01:49 - grid lists are invaluable even when you
01:52 - might not expect it
01:54 - now look back at this pathfinding
01:55 - project we recently covered
01:57 - we were using clones to create a
01:59 - directional path through a level
02:00 - which sprites could then follow to get
02:02 - from any point
02:03 - to a goal in this case it was the apple
02:06 - but
02:07 - using clones had its limitations
02:09 - specifically
02:10 - the 300 clone limit making the path
02:14 - tiles any smaller
02:15 - would exceed this limit and break the
02:17 - project
02:18 - no we need another way of storing this
02:21 - grid of directions
02:23 - this is where lists can come in super
02:25 - handy lists don't have to be visible on
02:28 - the screen
02:28 - and they allow us to store large amounts
02:30 - of information
02:31 - the only flaw is that we are after a
02:34 - grid of data
02:35 - something like this but a list is just a
02:37 - single column of data
02:38 - like this well this is actually not a
02:42 - problem at all
02:43 - you see the view of the list you are
02:45 - used to seeing in scratch
02:47 - is just one visual representation of the
02:49 - list that scratch happens to use
02:51 - for example we might just flip the list
02:53 - on its side like this
02:55 - and that doesn't change the fact that
02:57 - item 1 is still a and item 2 is b
02:59 - so no it doesn't matter how we draw this
03:02 - list really so why not imagine
03:04 - that we split list up every three items
03:08 - and then stack them on top of each other
03:10 - and voila we have the same list but
03:12 - reimagined
03:13 - as a grid this strategy works for a grid
03:16 - of
03:17 - any size all we need to know to
03:19 - visualize it correctly
03:20 - is how many columns wide the grid is
03:22 - supposed to be
03:23 - so if instead of storing letters in this
03:26 - list we store directions
03:28 - we will have no problem using lists as a
03:30 - basis for our pathfinding projects going
03:32 - forward
03:33 - goodbye clones hello lists i'm dead
03:37 - excited to show you how to do it
03:40 - with that in mind today's tutorial will
03:41 - be an introduction to using lists as
03:44 - grids we'll learn how to take a
03:46 - hand-drawn maze costume
03:47 - scan it and store the walls in a grid
03:51 - list so here is the actual grid list
03:54 - implemented in scratch each grid cell is
03:57 - represented by a large square tile 120
03:59 - by 120 pixels
04:01 - now there's quite a few variables
04:03 - visible on the stage don't let that put
04:05 - you off
04:06 - as you can see here tile width is as i
04:09 - said 120.
04:10 - next up we have grid columns and grid
04:13 - rows variables
04:15 - these are letting us know how many tiles
04:17 - wide
04:18 - and tall the grid is supposed to be this
04:20 - one is four columns wide and
04:22 - three rows tall even if the fourth
04:25 - column is rather hidden behind the large
04:26 - scratch list reporter
04:28 - okay then there's the grid x and grid y
04:31 - variables
04:32 - you will notice unlike the previous
04:34 - variables that we mentioned
04:35 - these ones change as i move my mouse
04:37 - that's because they are reporting the
04:39 - position of my mouse within the grid
04:42 - not in pixels like mouse x and mouse y
04:44 - would
04:45 - but in grid tiles you can see how the
04:48 - bottom left tile has a grid x and y of
04:50 - zero zero
04:51 - as i move to the right the grid x
04:54 - increases from zero to one
04:55 - to two and then to three grid y changes
04:59 - as i move up
05:00 - also starting at zero increasing to one
05:02 - and then two
05:04 - it's important to note that although
05:05 - lists begin at one our grid positions
05:08 - always start at zero
05:10 - this is called being zero indexed in
05:12 - case you're interested
05:14 - talking about indexes our next variable
05:16 - of interest is the index variable
05:18 - this represents the item number in our
05:20 - actual list for the grid cell under our
05:22 - mouse
05:25 - here let me fill the first grid cell see
05:28 - how item 1 of the list
05:29 - now shows a hash symbol this represents
05:32 - an
05:32 - impassable wall moving across to the
05:35 - next cell
05:36 - you can see index is reporting do so it
05:39 - is no surprise that if i fill this cell
05:42 - that item two now gets a hash two i'll
05:45 - do the same for three
05:46 - and four to complete the row so pausing
05:49 - there
05:50 - can you guess which item in the list
05:52 - will get a hash if i was to fill
05:54 - in this tile next yep it's item 5
05:58 - the very next item and what about the
06:01 - top
06:01 - right cell which item in the list
06:04 - represents that
06:05 - yep it's the last item in the grid list
06:08 - item 12.
06:09 - so the final unmentioned variable is
06:13 - tile
06:14 - and this simply reports the item in the
06:16 - list for the grid cell
06:17 - the mouse is hovering over hashes
06:20 - fulfilled tiles
06:21 - and nothing for empty ones splendid
06:24 - let's get scratching we'll begin then by
06:28 - coding up a simple
06:29 - tile grid like the one you saw start by
06:32 - removing scratch cat
06:33 - sorry mate and add a new sprite naming
06:36 - it
06:36 - grid switch to bitmap mode and zoom
06:39 - right
06:40 - into the drawing canvas to draw an 8 by
06:42 - 8 square
06:44 - in bitmap mode it snaps easier to exact
06:47 - sizes
06:48 - try to start exactly one checkered
06:50 - square above
06:51 - and to the left of the costume center
06:53 - and end one checkered square
06:55 - below and to the right great job you can
06:58 - check the size here
07:00 - make sure it is indeed eight by eight
07:02 - okay
07:03 - now to the code tab when green flag
07:06 - clicked
07:08 - make a variable
07:11 - tile width for all sprites
07:15 - and set it to 120 just like in our
07:18 - example
07:20 - next make grid columns for all sprites
07:24 - right we can calculate the number of 120
07:28 - pixel columns
07:29 - that will fit on the screen start by
07:32 - dividing the stage width that's 480
07:34 - by the tile width variable which will be
07:37 - 120
07:38 - right now but we just need to ensure
07:41 - that we round the results to a whole
07:43 - number
07:44 - i'll use a floor block around the divide
07:46 - to round it down
07:48 - next we make a variable named grid rows
07:51 - for all sprites duplicate the above
07:54 - script
07:54 - and change it to set grid rows and use a
07:57 - value
07:58 - of 360. that's the height of scratch's
08:01 - stage
08:02 - okay two more variables to add i didn't
08:05 - tell you about these
08:07 - offset x and offset y
08:10 - both for all sprites this may not be a
08:13 - scrolling project but nonetheless
08:15 - we need to offset the entire grid to
08:17 - ensure that it is drawn touching the
08:19 - bottom left corner of the stage
08:21 - that's an offset x of minus 240
08:25 - and an offset y of minus 180
08:28 - time to make our first custom block it's
08:32 - never too early
08:33 - name it scan and for the time being
08:37 - leave the run without screen refresh box
08:40 - unticked
08:41 - i know right what's going on so drop a
08:44 - scan block at the end
08:45 - of the green flag script for the purpose
08:48 - of this tutorial
08:49 - we need to enable the pen extension so
08:51 - click the extensions button
08:53 - and select the pen extension bring in an
08:56 - erase all to clear anything that might
08:58 - have been drawn previously
09:00 - our first mission is to correctly size
09:02 - the tile sprite
09:04 - remember we drew its costume to be 8
09:06 - pixels wide
09:07 - and yet we set the variable tile width
09:10 - to 120
09:12 - use a set size block and begin with a
09:14 - size of 100
09:16 - the costume right now therefore would be
09:18 - 8 pixels wide
09:19 - as designed but if we divide that size
09:22 - by eight
09:23 - well eight divided by eight is one
09:26 - that's one pixel wide for sure
09:28 - the beauty of this is that now that it's
09:30 - one we can multiply the width by
09:32 - tile width and then the sprite is
09:35 - certain to become
09:36 - tile width pixels wide just what we
09:38 - wanted
09:39 - excellent except for our project i
09:42 - prefer
09:43 - a one pixel gap between tiles so that we
09:46 - can see the edges
09:47 - so i'm just going to subtract 1 from the
09:49 - tile width
09:50 - before we're multiplying it now
09:53 - set y to offset y to move it to the
09:56 - bottom of the stage
09:58 - we'll create an outer loop that draws
10:00 - each row of the grid one at a time using
10:02 - a repeat
10:03 - grid rose so how to draw a grid row
10:08 - start by setting x to offset x
10:11 - to bring the sprite to the left edge of
10:13 - the screen
10:15 - now repeat again this time for grid
10:17 - columns
10:18 - we begin by stamping our very first tile
10:22 - and then prepare to stamp the next one
10:24 - by moving to the right
10:26 - using a change x by tile width
10:29 - that is a whole tile to the right this
10:32 - inner loop then repeats
10:34 - until the first row is stamped
10:38 - before we loop back to stamp the next
10:40 - row we need to move our sprite
10:42 - upwards use a change y by
10:45 - tile width remember our tiles are as
10:48 - tall as they are wide
10:50 - great then the outer loop is safe to
10:53 - continue
10:53 - and begin stamping the next row this
10:56 - continues until the entire grid is
10:58 - complete
10:59 - we can give that a test click the green
11:01 - flag ah
11:03 - so this is close to being correct the
11:06 - only flaw
11:06 - is that we begin positioning our tiles
11:08 - on the bottom left edge of the screen
11:10 - but our tiles are centered on the
11:12 - midpoint of their costumes
11:14 - so end up with half their tiles off
11:16 - screen
11:18 - we need to move the entire grid half a
11:20 - tile to the right
11:21 - and up we can do this by adding tile
11:24 - width divided by 2
11:26 - to the offset x and offset y
11:32 - running the project again and the
11:34 - problem has gone
11:35 - great i get a lot of satisfaction out of
11:38 - perfectly aligned graphics
11:41 - guess that's why i love my grids why
11:44 - don't we try
11:45 - tweaking the tile size down from 120 to
11:48 - 40 pixels instead running that
11:52 - yeah so nice you can see more clearly
11:55 - the order in which the tiles are drawing
11:57 - too
11:57 - left to right and then gradually filling
11:59 - bottom to top
12:01 - this is in contrast to the tile
12:03 - scrolling tutorial
12:04 - if you are following that series with
12:06 - the tiles filled from bottom to top
12:08 - and then gradually left to right now
12:11 - there's no real right or wrong order to
12:13 - do this in
12:14 - but it just so happens my preference is
12:16 - actually the way we are doing it in this
12:18 - project
12:19 - our next trick is to implement the image
12:21 - scanner
12:22 - but before we can do that of course we
12:24 - could really do with a costume to scan
12:27 - so make a new sprite naming it level and
12:30 - draw an interesting level costume
12:32 - i'm personally drawing the most amazing
12:34 - awesome mega spiral ever created
12:38 - there genius now click back into the
12:42 - grid sprite
12:46 - and we'll add in an if else before we do
12:48 - the stamping
12:50 - checking whether we are touching sprite
12:52 - level
12:53 - you could use touching color here if you
12:55 - preferred but just be aware that
12:57 - touching color
12:58 - is considerably slower so always use
13:00 - touch sprite if there's no other good
13:02 - reason
13:04 - so if you are touching the level sprite
13:07 - then we'll set
13:08 - ghost effect to zero that is the tile is
13:11 - fully visible else
13:14 - set ghost effect to 80. that will make
13:17 - it
13:18 - very faint but we'll still be able to
13:20 - make out the edges of the tile
13:22 - which is really nice way allowing us to
13:24 - see the grid for now
13:26 - give the project to run
13:29 - notice wherever the grid cell contains
13:32 - any part of the level sprite
13:34 - the tile gets filled in with a solid
13:35 - stamp everywhere else
13:37 - dim problem is this grid resolution is
13:40 - just a little bit too low
13:42 - to make this very exciting so let's try
13:45 - reducing the tile width to
13:46 - 20.
13:50 - now we are talking we can actually make
13:53 - out the spiral pattern much better
13:55 - but perhaps at the cost of speed
13:59 - not a problem though right click to edit
14:02 - the scan
14:02 - custom block and switch on the wonderful
14:06 - run without screen refresh yay here we
14:09 - go again
14:12 - oh wow yeah that's better that scan took
14:15 - no time at
14:16 - all let's try a tile width of ten then
14:21 - cripes scratch is eating this for
14:24 - breakfast
14:25 - perhaps we might venture a size of six
14:27 - you ready
14:28 - whoo that's better than we might have
14:31 - hoped
14:32 - so quick and look at the detail we're
14:34 - getting in our level scan
14:36 - there's no comparison to the tiles we
14:38 - were using for our pathfinding tutorial
14:40 - you can see why this method is so
14:42 - tempting
14:44 - but have you noticed did we forget
14:47 - something
14:48 - where's our grid list i promised you
14:51 - well alrighty then
14:53 - let's do this make a new list
14:56 - naming it grid and tick for all sprites
15:00 - since we are scanning a whole new level
15:02 - in the scan scripts
15:03 - start them then by deleting all from
15:06 - grid
15:08 - now in the inner loop each time we stamp
15:11 - we want to add a tile
15:13 - value into our grid list however
15:17 - we'll actually do the job in the if
15:19 - condition this way we can add a
15:21 - hash when we touch the level sprite and
15:24 - add an empty value we're
15:26 - not touching the level either way we add
15:28 - just one value
15:30 - per grid cell well that's it actually
15:33 - wasn't so hard was it run the project
15:36 - right
15:37 - well something happened look the grid
15:39 - list now contains
15:41 - 4 800 items
15:44 - let's take a peek in the list there are
15:47 - certainly runs of hashes in there
15:49 - and lots of empty rows too as expected
15:52 - it's quite hard to inspect with such a
15:54 - lot of tiles let's ramp back a bit
15:57 - and set tile width to 60.
16:00 - there that's easier we now only have 48
16:02 - tiles in the list now
16:04 - if i scroll to the top you can see that
16:06 - the first three items are all blank
16:09 - values
16:10 - this correlates perfectly with the
16:11 - bottom three cells of the grid in my
16:14 - example
16:15 - scrolling on through the list i can see
16:17 - that there are then four hashes in a row
16:19 - and this again correlates to the four
16:21 - filled in tiles
16:23 - i'm happy that this is working as
16:24 - intended so let's move on
16:28 - having this data in our list is a
16:30 - triumph
16:31 - but in itself is pretty useless until
16:34 - that is
16:35 - we can read the values back out in a
16:37 - meaningful way
16:38 - for example given a position on the
16:40 - stage tell me the value in the list
16:42 - for the respective grid position is it a
16:44 - hash or blank
16:46 - now that would be very useful i think we
16:49 - can manage that
16:50 - make a new custom block named get tile
16:53 - at
16:54 - x with an input of x and a label of y
16:58 - followed by an input of y tick to run
17:01 - without screen refresh
17:05 - to use this block we'll bring in a new
17:08 - when green flag clicked
17:10 - repeating forever in here
17:13 - place the get tile at x y and we'll look
17:15 - for the position
17:16 - of mouse x and mouse y this block needs
17:20 - to give us back
17:21 - all the details of what's at the
17:22 - location on the screen
17:25 - firstly we need to work out the grid x
17:27 - and y that the mouse is within
17:29 - start by making the new variables grid x
17:32 - for this sprite only
17:33 - and grid y also for this sprite only
17:37 - just set grid x to the input x and run
17:40 - the project
17:42 - let's look at what the values reported
17:44 - by grid x are
17:47 - minus 240 on the left and 240
17:51 - on the right the grid x needs to start
17:54 - at
17:54 - zero no negative values here we can get
17:57 - this by subtracting
17:58 - offset x from x run it again and confirm
18:01 - that the left edge now reports zero
18:04 - cool now each tile is tile width pixels
18:08 - white
18:09 - therefore we divide this new position by
18:11 - tile width
18:13 - to give us the count of tiles we have
18:15 - across the level
18:16 - test that again yeah so on first
18:20 - inspection this looks a little off
18:22 - but look closely you can see that the
18:25 - number on the left of the decimal place
18:27 - is the correct grid x value it's just
18:30 - that we have a fraction part to the
18:31 - number 2.
18:33 - we can remove this by rounding the value
18:35 - down to the nearest whole number
18:37 - using the floor operator
18:41 - oh yeah perfect that's the correct grid
18:44 - x let's do the same for grid y
18:47 - set grid y to the floor of y
18:51 - subtract offset y divided by tile width
18:55 - we can test that works too
18:58 - no problem there grid x and y are both
19:02 - showing the correct
19:03 - zero indexed grid position of the mouse
19:05 - cursor
19:07 - so make a new variable naming it index
19:10 - for this sprite only here we go
19:14 - set it to grid x plus one
19:18 - this is a good start if i test that you
19:20 - can see that the bottom left tile
19:22 - is reported as index one after all
19:25 - lists always start at item one
19:28 - moving to the right also increases as
19:30 - expected
19:32 - now we just need to account for the up
19:34 - and down two
19:36 - now remember we know how many cells are
19:38 - in a grid
19:39 - row moving up in the grid by one row
19:42 - is the same as moving right by an entire
19:45 - row of cells
19:47 - that number is stored in grid columns
19:50 - so change index by grid y
19:54 - multiplied by grid columns
19:58 - testing that reveals a very hopeful
20:00 - result the cell above the first cell
20:03 - reporting
20:04 - 9 as expected and the top right cell
20:06 - reporting
20:07 - 48 that matches our list length and
20:10 - therefore the number of cells in the
20:11 - grid
20:12 - i think we've got it to make certain
20:15 - let's find out what is
20:16 - actually at the position in the grid
20:18 - list for this make a new variable named
20:21 - tile and set it to
20:24 - item index of grid
20:28 - now click the green flag again so what
20:31 - are we seeing
20:32 - look at the new tile variable reporter
20:35 - as our mouse moves over solid tiles
20:37 - we are seeing a hash and then over empty
20:40 - tiles
20:41 - we see the empty value this is most
20:44 - certainly working as planned
20:45 - and we are able to read these values out
20:47 - of the grid list based on the x and y
20:49 - position
20:50 - on the screen okay so
20:53 - just for kicks set tile width to 20.
20:57 - yeah that's too cool
21:00 - you may be thinking that all this seems
21:02 - like a lot of work to do
21:04 - what we could already do with a touching
21:06 - sprite
21:07 - but this is just the beginning and we'll
21:10 - find this method has the potential to do
21:12 - so much more and also run way faster
21:16 - than using the touching sprite block
21:18 - believe me
21:20 - so the last part of our tutorial is
21:22 - focused on being able to set the
21:24 - position tiles based on a tile index
21:27 - alone
21:28 - in our example here say we want to place
21:30 - a tile at
21:31 - index six so what is the grid x and grid
21:35 - y
21:35 - of that tile hmm okay
21:38 - well first things first in our code
21:42 - add in an if block under the get tile at
21:44 - block
21:45 - and check whether the space key is
21:46 - pressed now the index variable is
21:49 - already set
21:49 - from using the get tile at block above
21:52 - we can therefore replace
21:53 - item index of grid with a new
21:57 - hash character i can run that and if i
22:00 - hover over the bottom left tile with an
22:01 - index of one
22:02 - press the spacebar and hash character is
22:06 - added to the list successfully
22:07 - look i can skip one and add one in for
22:10 - three and four too
22:12 - but nothing is drawing on the screen
22:14 - that's right
22:16 - this list is not linked to the screen in
22:18 - any way
22:19 - no it's a scan of what the level first
22:21 - looked like
22:22 - if we want the level to change to
22:24 - reflect this new change
22:26 - we'll need to do it so make a new custom
22:29 - block
22:29 - naming it position at index with an
22:32 - input of
22:33 - idx that will be the grid index we want
22:36 - to position and stamp our tile
22:38 - at one without screen refresh we'll
22:41 - begin by converting this index
22:43 - into a grid x and y
22:47 - so working this out is all based around
22:50 - division look at this example we want to
22:53 - find the grid x and y
22:55 - of item six yeah so start by remembering
22:59 - that list indexes begin
23:01 - at item one so we have to adjust for
23:04 - this
23:04 - by subtracting one from the number six
23:07 - right we're left with the number five
23:10 - now we use division
23:11 - and we're dividing five by the number of
23:14 - columns
23:15 - in this grid that is three in this
23:17 - example
23:18 - so how many threes are there in five
23:21 - well
23:22 - one remained a two
23:25 - now look see here isn't this at grid x
23:29 - of two and grid y of one coincidence
23:33 - i think not it's quite plain to see
23:36 - that the count of full rows will give us
23:39 - how far
23:40 - up the index cell is and the remainder
23:43 - is how far across we are
23:45 - awesome do we have a maths operator in
23:48 - scratch
23:49 - that gives us the remainder after
23:50 - division though
23:52 - well yes we do and it's called modulo
23:55 - or mod for short
23:59 - so set grid x to
24:03 - idx minus 1 and
24:06 - mod this against grid columns
24:11 - grid y can be set by dividing idx minus
24:14 - 1
24:17 - by grid columns and then rounding
24:20 - down to the nearest number using the
24:23 - floor operator
24:25 - right lastly we just need to set x
24:31 - to offset x mustn't forget that
24:34 - plus the new grid x
24:38 - multiplied by tile width to space them
24:41 - out correctly
24:42 - we'll do the same with the set y to grid
24:44 - y
24:46 - multiplied by tile width all added to
24:50 - offset y
24:53 - just got to plug that in now so after we
24:56 - were replacing the item in the grid with
24:58 - a hash
24:59 - we can insert a position at index of the
25:01 - index
25:02 - variable this will position us correctly
25:04 - on the screen
25:05 - for the grid cell of index so set goes
25:09 - to zero
25:10 - and then we stamp are we there
25:13 - exciting run the project i'm going to
25:16 - stamp the bottom left cell
25:18 - press the space key ah underwhelming
25:21 - we have succumbed to the half tile issue
25:24 - once more
25:25 - back into the position at index script
25:28 - we need to move half of the tile width
25:30 - to the right
25:31 - and up and look we are already
25:33 - multiplying by tile width
25:34 - so it's easiest just to add half to the
25:37 - grid x
25:38 - and let the multiply take care of the
25:39 - rest the same goes for the grid y
25:42 - just add half and this is
25:45 - it run this project again yeah
25:49 - these tiles are very much more aligned
25:52 - but well
25:52 - um it bugs me but the last tile i draw
25:55 - never looks as lined up as it should
25:58 - ah i've got it we are seeing the actual
26:00 - sprite here
26:01 - not the stamp they are slightly out from
26:04 - each other
26:05 - no big deal we can hide this issue
26:08 - literally
26:09 - at the bottom of the scan script stick
26:11 - in a hide block
26:14 - but we must also then add a show block
26:16 - to the top of this script
26:18 - otherwise the hidden block will not work
26:20 - when we ask it
26:21 - whether it is touching the level that
26:23 - will break our scanning altogether
26:26 - can you tell i've fallen to that myself
26:27 - a few times
26:29 - splendid run the project and i'm feeling
26:31 - that we are 100
26:33 - ocd compliant oh yes much better
26:37 - you can see that the newly placed tiles
26:38 - are also showing in my tile value
26:41 - as i revisit them so although we started
26:44 - by creating a scanning project
26:46 - you can see that we might very well use
26:49 - this project without the need for this
26:50 - at all
26:51 - like if i hide the level sprite we can
26:53 - start with a
26:54 - blank slate and draw our level ourselves
26:58 - well there's loads of ways we could
27:00 - branch out from here
27:01 - but this is the end of the episode for
27:03 - today i'm aware that this project has
27:05 - not ended with a really complete
27:07 - end product but i'm happy enough with
27:09 - that because there are so many exciting
27:11 - things ahead
27:12 - all i would say though is if you want to
27:14 - play with this project further
27:16 - and i'd encourage you to do so make sure
27:18 - that you create a copy of it first
27:20 - from the file menu that way you have a
27:23 - backup to return to
27:25 - ready for the next part when it arrives
27:27 - in the meantime though
27:29 - let your imaginations run wild and see
27:31 - what you can create with this don't
27:34 - forget you have the option to switch to
27:35 - detecting colors with the tile scanner
27:37 - if you have an idea for that
27:39 - or think of how you might use the get
27:41 - tile at xy blocks in cool
27:43 - novel ways right guys if you've enjoyed
27:46 - this video
27:47 - please hit the like button and if you're
27:49 - not subscribed to this channel yet then
27:51 - what
27:51 - why not do it right now you really don't
27:54 - want to be late for my next exciting
27:56 - episode
27:57 - finally if you'd like to support this
27:58 - channel you now have the option to join
28:01 - my membership
28:02 - if you're a kid and of course get your
28:03 - parent to help out after all it's worth
28:06 - it
28:06 - we do the best scratch tutorials and
28:08 - some fantastic learning here
28:10 - that you won't get anywhere else it's
28:13 - the best way
28:14 - to help me make this channel the best it
28:16 - can be oh
28:17 - did i mention you get perks win-win
28:20 - but until next time scratch on guys