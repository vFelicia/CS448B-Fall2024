00:02 - hello fellow scratchers
00:04 - i'm griff patch and welcome back to part
00:06 - six of our series
00:07 - creating a tile scrolling platformer in
00:09 - scratch
00:10 - and wow are we making some amazing
00:12 - progress now that we have a level editor
00:14 - we are going to need a way to save and
00:16 - then reload multiple levels
00:18 - or even share level codes with friends
00:21 - now if
00:22 - like me you've had a lot of fun since
00:24 - the last episode creating a level that
00:26 - you don't want to lose
00:27 - then let me show you how to back it up
00:29 - before we continue with the tutorial
00:31 - make the tile grid list visible and then
00:34 - right click the list on the stage
00:37 - and click export make sure to choose a
00:40 - safe location on your computer
00:41 - to save the file to and click to confirm
00:45 - now if at any time you accidentally mess
00:47 - up your tile grid list
00:49 - just right click the list again and
00:51 - choose the import option
00:53 - find file and confirm to import it few
00:56 - it's back
00:57 - better safe than sorry backing things up
00:59 - should be a very important part of your
01:01 - coding process
01:02 - believe me okay to save a level in
01:06 - scratch requires us to be able to create
01:08 - a level code from our level
01:10 - you will no doubt have seen level codes
01:12 - used in scratch games already
01:14 - often looking like a series of numbers
01:16 - and letters the main point is
01:18 - that the value can be assigned to a
01:19 - single variable or copy and paste it to
01:22 - be shared with friends
01:23 - the process of changing the data in our
01:25 - tile grid list to a level code is called
01:28 - encoding and that is what we'll be
01:30 - covering in this episode
01:32 - let's create a new sprite for this
01:34 - purpose naming it
01:36 - level store and within this make a new
01:39 - list
01:39 - for this sprite only named level store
01:45 - so we need a way that we can take this
01:47 - huge level list
01:48 - and convert it into a single text value
01:51 - storing it
01:52 - as an item in this new level store list
01:55 - row 1 being level 1 row 2 for level 2
01:58 - etc scratch has one very simple built-in
02:02 - way of encoding lists
02:03 - we can try it right away using an add to
02:06 - level store
02:07 - and then drop in the tile grid reporter
02:10 - yep it's almost too simple click the
02:13 - script to run it
02:14 - and watch what happens to the level
02:16 - store list
02:17 - when not in full screen mode we can
02:19 - select values in the list and copy it
02:21 - using ctrl c
02:23 - let me paste it into a text editor so
02:26 - that we can see it in more detail
02:28 - so this is just one long long series of
02:31 - numbers
02:32 - each separated by a single space letter
02:35 - in computer speak
02:36 - this would be referred to as a space
02:39 - delimited list
02:41 - the delimiter being the character that
02:43 - is separating all the values
02:44 - in the list this episode would be over
02:47 - much quicker
02:48 - if we were simply content with this but
02:50 - really
02:51 - this does not live up to the
02:52 - requirements of a good save code
02:55 - firstly it's just far too long and
02:57 - secondly using spaces as a delimiter
02:59 - make it hard to select with the mouse
03:01 - and leads to errors
03:02 - when people try to copy and paste it so
03:05 - what can we do
03:07 - we'll just have to create a list
03:09 - delimiter of our very own
03:11 - make a variable named encoded for this
03:14 - sprite only
03:15 - we'll use this to build up our encoded
03:17 - text value
03:19 - next make a new block named write value
03:23 - with a text input value a label of
03:26 - delimiter and an input letter
03:30 - all we're going to do is set encoded to
03:32 - the join
03:33 - of encoded
03:38 - and the join of value and letter
03:42 - lots of joining right but this simply
03:44 - appends the value
03:46 - and the letter variables onto the end of
03:48 - the encoded variable
03:49 - let's use this to begin creating our
03:52 - level encoder
03:53 - make a new custom block save level
03:57 - level hash as an input
04:02 - and set encoded to the empty value
04:06 - create a new variable tile index for
04:08 - this sprite only
04:10 - and set it to 1 the first tile in the
04:13 - tile grid
04:14 - now we'll repeat over each tile using a
04:16 - repeat
04:17 - grid height and within that a repeat
04:20 - grid width within these loops we'll
04:24 - write value
04:26 - item text index of
04:29 - tile grid with a delimiter of the
04:32 - underscore and then change
04:35 - tile index by 1. this loop will now
04:38 - write out each item in the tile grid
04:41 - into the encoded variable separating
04:43 - each value with an underscore delimiter
04:46 - below the repeat loops we delete all of
04:49 - level store
04:50 - and once more add encoded to level store
04:53 - recording the results of all this work
04:56 - now we can test this
04:58 - by clicking on the save level custom
04:59 - block
05:01 - i'll copy the results from the level
05:03 - store list into my text editor
05:04 - and we can compare the results
05:08 - look at that it's not really any
05:09 - different in size but
05:11 - all the spaces are gone and because of
05:13 - that if i double click on the text
05:15 - it all selects as one happy save code
05:18 - great work
05:19 - but this level code is really long
05:23 - is there perhaps any way to make it
05:24 - smaller i mean
05:26 - a lot smaller luckily the answer is yes
05:29 - there is you may notice when looking at
05:32 - the save level list
05:33 - that the same tile costume numbers are
05:36 - repeated over and over again
05:38 - in long runs well how about instead of
05:41 - recording all these duplicated values
05:43 - we simply record the first number and
05:46 - then
05:46 - the length of the tile one of that type
05:50 - this technique is aptly named run length
05:53 - encoding
05:54 - and is what we'll do next to achieve
05:57 - this
05:57 - we will need to make two new variables
06:00 - the first named
06:01 - length for this sprite only which we'll
06:04 - use to count up the number of tiles we
06:05 - find in the current run length
06:07 - and the second named tile for this
06:10 - sprite only
06:11 - that tells us which tile costume we are
06:13 - counting for
06:15 - before our repeat loop we set the tile
06:18 - to the current tile in the tile grid
06:23 - and we set the length of the current run
06:25 - to zero
06:27 - now we need an if else within the inner
06:29 - repeat
06:30 - being careful to keep the change tile
06:33 - index under the
06:34 - else now we compare the current tile
06:38 - to the next tile on the level that is
06:41 - item tile index of tile grid
06:44 - if it matches then we add one to the
06:47 - length variable
06:49 - counting it as one more tile of the same
06:51 - type
06:52 - but if it's not the same then we need to
06:54 - make a record of the previous run of
06:56 - tiles using
06:57 - our right value tile delimiter of
07:01 - underscore
07:02 - and another for the run length right
07:04 - value
07:05 - length delimiter of an underscore
07:08 - with that done we make a record of the
07:11 - new tile costume that we have just
07:13 - encountered
07:14 - by setting tile to the same item tile
07:17 - index of tile grid
07:18 - and then setting length to one it's a
07:21 - one this time because
07:22 - we need to count the new tile we just
07:24 - found
07:25 - and then the loop continues and repeats
07:27 - around as before moving on to the next
07:29 - tile
07:30 - but now only recording values when the
07:33 - tiles change
07:34 - so this is nearly done we just have one
07:37 - special case to cater for
07:39 - and that is the last run length never
07:41 - gets recorded by this loop to address
07:44 - this
07:44 - we just duplicate the two right valued
07:46 - tile and length scripts
07:48 - after the loops are done now let us test
07:52 - this again
07:52 - by clicking on the save level script let
07:56 - me paste the new save code into the text
07:57 - editor
07:58 - to see the difference and look at that
08:00 - how much smaller it has already become
08:02 - okay perhaps we can do even better you
08:05 - bet we can
08:07 - look at this level in which direction
08:09 - would you say the longest runs are found
08:12 - vertically or horizontally
08:16 - yep without a doubt the horizontals have
08:18 - it
08:19 - it's a shame then we decided to store
08:20 - our level column first rather than row
08:22 - first but
08:23 - not to worry we just need to transform
08:26 - the level
08:26 - as we encode it instead of adding 1 to
08:30 - the tile index to move up
08:32 - a tile each time we add grid height
08:35 - this will move as a column to the right
08:38 - then when we reach the end of the level
08:40 - we move up one tile by changing tile
08:42 - index by one
08:44 - and move back to the first column by
08:46 - subtracting
08:47 - grid width multiplied by grid height
08:50 - sorted let's test it again do you think
08:54 - it will have any effect at all
08:56 - copy and paste and oh boy yes it did we
08:59 - cut the size by another third
09:01 - but wait there's more we can do yet
09:04 - looking at the save code by far the most
09:07 - common character
09:08 - is the underscores now obviously we need
09:12 - something to act as a delimiter
09:14 - so that we know where each number starts
09:16 - and ends if we ensure
09:17 - each run length is no longer than 26
09:20 - tiles long
09:21 - then we can encode the run length as a
09:23 - letter and use it as the delimiter for
09:25 - the tile
09:27 - first off how do we convert the number 1
09:29 - through 26
09:30 - to the letters a through z for that we
09:34 - need to create
09:35 - a new list named a to z
09:38 - for this sprite only add a row to it
09:41 - and enter the letters a b c
09:44 - all the way to z there should be 26 rows
09:48 - in total
09:50 - remember to click out of the last row to
09:52 - ensure it saves
09:53 - now if we were to want the third letter
09:56 - of the alphabet
09:57 - we just use item 3 of a to z
10:00 - simple or the 26th letter yep it
10:04 - said great to work the other way
10:07 - if we use an item hash of letter c
10:11 - in a to z then scratch reports three as
10:14 - expected
10:15 - or a one no problem we can convert
10:18 - letters to numbers and numbers to
10:20 - letters
10:21 - okay so this is where the magic happens
10:24 - look at our pair of right value blocks
10:26 - here
10:27 - we are going to simplify this to be just
10:29 - a single right value block
10:31 - keep the value as tile but switch the
10:33 - delimiter to be
10:34 - item length of a to z this will convert
10:37 - the length number
10:39 - to a single letter and use it as the
10:41 - delimiter of this tile
10:43 - we can now delete the second right value
10:45 - and remember to duplicate this change
10:47 - to replace the final pair of right
10:48 - values too
10:50 - we just need to ensure that our run
10:52 - lengths never exceed
10:53 - 26 in length so wrap
10:56 - the tile comparator with an and and
10:58 - check that length is less than 26
11:01 - great we'll test this again to see how
11:04 - this has affected our save code size
11:07 - copy and paste
11:10 - oh yes all these underscores are gone
11:14 - cutting the size by another third this
11:17 - is getting
11:18 - really tight now in fact i only have one
11:21 - more
11:22 - targeted optimization to squeeze in we
11:24 - can observe
11:25 - that the most common tile on our level
11:27 - is tile number two
11:29 - because it's the empty tile so we can
11:32 - replace
11:32 - all tile twos with the empty string
11:36 - saving us one character per empty tile
11:39 - so before we write out the tile here
11:42 - add an if and check whether tile equals
11:44 - two
11:47 - if it does quickly set it back to the
11:49 - empty string
11:51 - and here goes the final test of our
11:52 - comparison
11:54 - copy and paste and there what an amazing
11:58 - reduction we have achieved
11:59 - cutting a final fifth off the size sweet
12:02 - we just need to add some header data to
12:05 - the save code to aid us in decoding it
12:07 - correctly
12:08 - after we set encoded to the empty value
12:11 - up here
12:12 - we add a write value 1 with a delimiter
12:15 - of underscore
12:16 - this is our save code version number
12:19 - next
12:19 - write out the grid width and then the
12:22 - grid height
12:23 - both with underscored limiters without
12:25 - this we wouldn't know the dimensions
12:27 - of the level lastly we want to stop
12:30 - assuming we are saving level 1 each time
12:33 - and support saving of any level number
12:37 - remove the delete all of the level store
12:39 - block then surround the add to level
12:41 - store block
12:42 - with a repeat block for level hash
12:46 - subtract length of level store
12:49 - we are using this to just pad out any
12:51 - missing level those
12:53 - to make sure the add item is just adding
12:55 - empty values to the level store
12:58 - next under the repeat block we introduce
13:00 - a replace
13:01 - item level hash of level store
13:04 - with encoded this is quite neat the
13:07 - repeat loop makes sure the list is long
13:09 - enough to allow us to add our level
13:11 - and then we can safely use replace item
13:14 - to put the level into the list
13:16 - let's try it use a save level block with
13:19 - a level of
13:19 - 10. click it and see what is stored in
13:22 - our level store
13:24 - all the rows before level 10 get padded
13:26 - out with blank values
13:27 - and the new level is sitting at row 10
13:30 - and if we save as level 5 row 5 gets
13:33 - filled out leaving all the other rows
13:34 - just as they were
13:35 - as you'd expect saving is level one just
13:38 - replaces the previous level one row two
13:41 - with the save scripts complete let's
13:43 - delete all from the level store list
13:45 - and then use the save level script with
13:47 - a level number of one again
13:49 - to just populate the first level run
13:51 - that by clicking it
13:52 - and we're all set to go now we can focus
13:56 - on scripting a level decoder
13:58 - that takes our wonderfully compact level
14:00 - code and inflates it back
14:02 - into a fully playable level we start
14:04 - with the prerequisite make block naming
14:06 - it
14:07 - load level with a text input of level
14:09 - hash
14:10 - and run without screen refresh
14:14 - set encoded to item level hash
14:18 - of level store this gives us the encoded
14:21 - level ready for decoding
14:23 - create a new variable named read index
14:26 - for this sprite only
14:27 - and set it to 1. this holds the position
14:30 - in the encoded string that we are
14:32 - currently decoding
14:33 - starting with the first letter we'll
14:35 - make a new block named
14:36 - read letter
14:42 - and make a new variable named letter
14:47 - set letter right away to letter
14:52 - read index of encoded and immediately
14:56 - change read index
14:57 - by one this custom block is useful
15:00 - setting the letter variable to the next
15:02 - letter from our encoded level each time
15:04 - it's used
15:05 - we can see this working by using the
15:07 - load level block
15:08 - for level one click it next we click
15:12 - on the read letter script to find letter
15:14 - set to the first letter of the encoded
15:16 - script
15:18 - even better each subsequent click takes
15:20 - us to the following letter
15:21 - one after the other this will be very
15:24 - useful indeed okay
15:26 - now we expand the concept to reading
15:28 - whole values
15:30 - we make another block named read value
15:36 - and a variable named value for this
15:39 - sprite only
15:40 - setting it to the empty value ready to
15:42 - be built up
15:44 - use the read letter block to get the
15:46 - first letter
15:47 - followed by a repeat until block
15:49 - repeating until either letter is greater
15:51 - than nine
15:54 - or letter is the empty value this will
15:57 - loop around until we hit a delimiter
15:59 - that is any character that is not a
16:01 - number
16:03 - within the repeat set value to the join
16:05 - of value
16:06 - and letter this will build up value
16:10 - a digit at a time until the end of the
16:12 - number is found
16:16 - we should test this works too click the
16:18 - load level one block to reset the
16:20 - decoder
16:21 - and ensure that both the letter and
16:23 - value reporters are showing on the stage
16:26 - now click on the read value script value
16:29 - is reported as 1
16:31 - and letter as underscore that's good
16:34 - that's the level save version and its
16:36 - delimiter
16:37 - click the read value script again and we
16:39 - get 100
16:40 - and underscore that's the level width
16:43 - again for level height of 40 now one
16:46 - more time
16:47 - to get the first tile of the level and
16:49 - the letter shows a special a to z value
16:52 - that is the run length of the tile we
16:54 - could keep clicking now to read off
16:56 - the tiles one at a time right
16:59 - armed with this awesome script let's put
17:02 - together our full decoder
17:04 - locate the define load level script and
17:07 - we'll continue where we left off
17:09 - start by reading a value then we'll
17:11 - check whether it's
17:12 - not one
17:16 - if it isn't then we'll just stop right
17:18 - now this ensures we only allow decoding
17:21 - of level code version 1.
17:23 - next delete all of tile grid read the
17:26 - next value
17:27 - from this we can set grid width to value
17:32 - and read another value and set grid
17:34 - height to value
17:37 - so using a repeat loop we'll quickly
17:39 - recreate a blank version of the level
17:41 - grid list
17:42 - of the correct size by multiplying grid
17:44 - width by grid height
17:46 - and add the blank value to tilegrid
17:49 - we create the levelgrid list in advance
17:51 - of decoding to allow us to handle the
17:53 - transposed row first ordering
17:56 - if we click the load level 1 block now
17:58 - we should see all the level vanish and
18:00 - be replaced by empty values
18:02 - oh gosh goodbye beautiful level i hope
18:04 - we see you again soon
18:06 - now set tile index to 1 followed by a
18:10 - repeat until
18:13 - read index is greater than
18:16 - length of encoded that will only stop
18:19 - when the entire encoded level code has
18:21 - been processed
18:23 - okay so read the next value
18:26 - this is the first tile costume number in
18:28 - the level
18:29 - we must compare it to the empty value to
18:31 - handle that special case when it should
18:33 - really be
18:34 - tile costume 2. so if it is empty
18:37 - then set tile back to 2. we'll need a
18:40 - repeat block to create the run of tiles
18:42 - but what goes in the right side letter
18:46 - holds the encoded run length which was
18:48 - also doubling as the delimiter
18:50 - we can just use the item hash of letter
18:52 - in a to z block to decode it
18:55 - excellent now within the repeat we can
18:57 - then replace the tile
18:59 - at tile index of the tile grid with the
19:02 - tile costume
19:03 - value we just need to then move on to
19:06 - the next tile before repeating around
19:09 - but remembering we want to move across
19:10 - by a column not
19:12 - up a row so we change tile index by grid
19:15 - height next check if
19:19 - tile index is greater than
19:23 - grid width multiplied by grid height
19:26 - this happens when we've moved across a
19:28 - full row of columns
19:30 - so we then need to move up one row and
19:33 - also back
19:34 - to the first column simply change
19:37 - tile index by 1 subtract
19:40 - grid width multiplied by grid height
19:43 - so once we've completed one run length
19:45 - of tiles the outer repeat loops around
19:48 - and if there are more tiles to be read
19:50 - then it reads the next one
19:52 - and off it goes again in the end all the
19:55 - encoded data will be processed and then
19:57 - well job done did you follow all of that
20:00 - i hope so because no time to lose we
20:03 - should put it to the test
20:04 - and now the moment of truth do all these
20:06 - scripts work together
20:08 - click the load level one block and wham
20:11 - the level grid suddenly looks very full
20:13 - once more
20:14 - a very good sign indeed but of course
20:16 - the ultimate test is running the project
20:18 - to confirm that the level is loaded and
20:20 - playable
20:22 - click the green flag to run the project
20:25 - and if it all appears to be working then
20:28 - give a huge sigh of relief
20:30 - wow what an achievement well done at
20:34 - this stage we should hook things up so
20:35 - that the save and load scripts can be
20:37 - made use of in our game
20:39 - to begin with add a when i receive
20:42 - level hyphen save
20:47 - make a new variable named level hash for
20:49 - all sprites
20:51 - this will keep track of the current
20:52 - level number we are playing or editing
20:54 - and simply defer to the save level level
20:57 - hash block
20:58 - we'll also do the same with a new when i
21:00 - receive level
21:02 - load script and drop in a load level
21:05 - level hash block okay time for a change
21:08 - of scene
21:09 - click with me into the editor sprite we
21:11 - are going to activate the save and load
21:13 - scripts from there
21:15 - within the when i receive generate level
21:17 - script set level to 1
21:22 - and then delete all of tile grid
21:25 - and finally broadcast and wait level
21:27 - load
21:29 - this should reset our game to level one
21:31 - each time it is run
21:32 - we can test this works by running the
21:34 - project we enter level editor by
21:36 - pressing the zero key and draw some
21:37 - random blocks around the level
21:39 - nothing unusual here but if we hit the
21:42 - green flag oh
21:44 - the changes we have made have vanished
21:47 - and why
21:48 - because the saved level has been
21:49 - reloaded without our recent changes
21:52 - that proves the level loading is working
21:54 - what we need to do next is hook into our
21:56 - level saving code too
21:59 - scroll to the when zero key pressed
22:00 - script
22:02 - we want to save when the user toggles
22:04 - out of the editor
22:05 - so add a broadcast and wait level save
22:09 - here just before editor is set to zero
22:12 - now we have to be a little careful
22:14 - the saving of the level must not run
22:16 - while the main mario game loop is still
22:18 - in progress
22:19 - so broadcast and wait for a new event
22:21 - named
22:22 - level stop
22:27 - putting it before the level load script
22:30 - we'll script the receiver for this event
22:32 - soon enough but before that
22:34 - we'll complete this script with a hide
22:36 - variable level hash
22:39 - and a broadcast not a wait this time to
22:42 - a new event
22:43 - level start game loop we don't wait
22:47 - because waiting for the game loop to
22:49 - finish would never end
22:51 - we need a similar set of scripts for
22:53 - loading the level when you enter the
22:54 - level editor below
22:56 - start with a broadcast to level stop and
22:58 - then set the editor to 1
23:00 - before broadcasting and waiting for
23:01 - level load
23:03 - oh and we shouldn't forget to show the
23:04 - level hash variable for which we are
23:06 - editing
23:07 - very useful and finally broadcast level
23:10 - start game loop again without a wait
23:15 - now we can click into the mario sprite
23:17 - and find the define game loop custom
23:19 - block
23:20 - just move it down a little and we'll pop
23:22 - in a when i receive level stop hat block
23:25 - all we want to do in here is stop other
23:27 - scripts in this sprite
23:28 - that means that the game loop below will
23:30 - stop running before our level is saved
23:32 - then we need a when i receive level
23:35 - start hat
23:36 - and it simply relaunches the game loop
23:39 - now we have a way of stopping and
23:40 - starting the main game loop really
23:42 - easily
23:43 - super we can test again now so hit the
23:47 - green flag
23:48 - pressing the zero key to enter the level
23:50 - editor we can draw a few tiles
23:52 - and then press the zero key again to
23:54 - test the level
23:55 - and now the moment of truth click the
23:57 - green flag again to reload the level
24:00 - and this time the level has not been
24:02 - lost
24:03 - success now i can't help but feel we are
24:07 - kind of
24:08 - back to where we were at the beginning
24:09 - of this tutorial episode a single level
24:11 - that saves with the project
24:13 - hmm quite right so why all this effort
24:17 - well we are about to reap all those
24:19 - benefits as we add in a way to switch
24:21 - levels click into the editor sprite and
24:24 - we'll introduce
24:25 - a when l key pressed l for level
24:28 - selector
24:29 - then if editor is less than 1
24:33 - stop this script as we only want the
24:35 - level selection key to work within the
24:37 - level editor
24:39 - now we ask the user which level to edit
24:42 - by using an
24:42 - ask block joining the words enter level
24:46 - number
24:47 - open bracket current with another join
24:50 - block
24:51 - with the level hash variable on the left
24:53 - and a close bracket
24:55 - on the right we'll confirm they entered
24:57 - a reasonable value with an
24:59 - if and check the round of answer is less
25:02 - than one
25:03 - and if it is then we stop this script so
25:06 - to change level
25:07 - the first thing we do is save the
25:09 - current level
25:11 - so broadcast and weight level stop
25:13 - followed by a broadcast and weight
25:15 - level save next set level hash
25:19 - to the round of answer now with the
25:21 - level variable pointing to a new level
25:23 - number
25:24 - we broadcast and wait level load and
25:27 - finally just a broadcast
25:29 - to level start no wait here it should be
25:32 - noted that if the level you switch to
25:34 - has not yet been created
25:37 - then it will save a copy of the existing
25:39 - level as the new level
25:41 - this can be quite useful let's see it in
25:43 - action
25:44 - run the project i can enter the level
25:46 - editor with a zero key
25:48 - noticing that i am on level one now i
25:51 - press the l key
25:52 - and i'm prompted to enter a level number
25:54 - i can enter two
25:56 - and confirm the level number has
25:58 - switched to say level two however
26:00 - as this is a new level i ended up with a
26:02 - copy of the previous level
26:04 - which i can then edit
26:10 - now pressing l again i can switch back
26:12 - to level one and look at that
26:14 - it's the original level and l again to
26:17 - jump back to level two yep
26:18 - it's still there yay this is working
26:21 - great
26:23 - time is running out for this episode but
26:24 - i really don't want to leave you without
26:26 - the ability to set a level size
26:28 - or simply clear a level we can duplicate
26:30 - the level changing script removing all
26:32 - the broadcasts and we'll trigger off the
26:34 - r
26:35 - key for reset level change the question
26:38 - to
26:38 - reset level are you sure
26:42 - and check if the answer is not equal to
26:45 - y
26:46 - if not then stop this script now we ask
26:49 - another question
26:51 - the join of enter level width
26:54 - current with the join of grid width
26:57 - and a close bracket if the answer is not
27:01 - empty
27:03 - then we set grid width to the answer
27:07 - duplicate the question and its if
27:09 - condition
27:10 - and change all the widths for heights
27:13 - we can now use the generate level block
27:16 - to create the blank level of the new
27:18 - size
27:19 - however now we have a problem if we
27:22 - change grid height
27:23 - all the tile clones in our level will be
27:26 - misindexed
27:28 - we need to sort this so add a broadcast
27:30 - and wait for the new event
27:32 - level done loading
27:37 - and tack on a broadcast level start game
27:39 - loop
27:40 - yep no waiting on that oh yes we mustn't
27:43 - forget
27:44 - to add a broadcast and wait to level
27:46 - stop just before the ask for level width
27:49 - otherwise our main game loop could go
27:51 - crazy when the level size is changed
27:54 - now scroll over to the define generate
27:57 - level script
27:58 - and we'll move the set grid width and
28:00 - height blocks out of here
28:02 - and up to before the block is used here
28:05 - otherwise generating the new level will
28:07 - forget the size we just entered
28:10 - we're nearly there click back into the
28:12 - level store sprite
28:13 - and find the when i receive level load
28:15 - hat block
28:16 - we need a broadcast and wait to level
28:18 - done loading
28:20 - after the level is loaded in case the
28:22 - level size has changed here too
28:24 - and this is it the last script of the
28:27 - episode click into the tile sprite
28:30 - and find a little space add a when i
28:33 - receive
28:34 - level done loading we are going to make
28:36 - sure that each tile has a valid tile
28:39 - index
28:39 - for the updated grid height this works
28:42 - just like
28:43 - our get tile at xy script but start
28:46 - by checking if tile index is greater
28:50 - than the empty value
28:52 - now if it is then set tile index
28:56 - to 1 plus the floor
29:00 - of tile y divided by 32
29:04 - then we change tile index by grid height
29:08 - multiplied by the floor of tile x
29:12 - divided by 32
29:15 - and guys that is it the last script is
29:18 - done
29:18 - and we can run the project to try this
29:20 - new feature out
29:22 - click the green flag and press the zero
29:24 - key to enter the level editor
29:27 - then press l and switch to level 2.
29:30 - finally press the r key to request a
29:33 - level reset
29:35 - then we enter y to confirm the reset
29:39 - next enter a new level width
29:42 - or we can press enter to keep it the
29:43 - same however
29:45 - i'll create a tiny level of width 20.
29:48 - then for the height i'll enter 15. and
29:51 - pow the level is reset and if we move
29:54 - around
29:54 - look how tiny it is so that definitely
29:58 - worked
29:59 - success we have made it to the end of
30:02 - this episode oh my gosh
30:04 - what a trip i can't believe i even tried
30:06 - to fit this all in
30:08 - it has been a lot of work but it will be
30:10 - well worth it for the flexibility it
30:12 - gives us moving forward
30:14 - and what should we look at next i'm
30:16 - thinking
30:17 - implementing the coin pickups for
30:19 - starters but feel free to drop me your
30:21 - suggestions
30:22 - under the video as always if you've
30:25 - enjoyed this tutorial
30:26 - please smash the like button and don't
30:28 - forget to subscribe to this channel to
30:30 - avoid missing my next exciting video
30:32 - but until then thanks for watching and
30:34 - scratch on guys
30:35 - [Music]