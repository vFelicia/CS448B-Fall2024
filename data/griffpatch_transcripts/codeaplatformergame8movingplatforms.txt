00:02 - hello fellow scratchers yes oh yes
00:06 - moving platforms i'm so very very
00:08 - excited because well this episode is
00:10 - pretty much the whole reason that i
00:12 - began the classic platformer series yes
00:15 - i am griff batch and today we are adding
00:17 - moving platforms woohoo
00:19 - these platforms can come in all shapes
00:21 - and sizes and can have simple or complex
00:24 - movement patterns we'll also be covering
00:26 - the tricky issue of collision avoidance
00:28 - and the unavoidable and very sad
00:32 - squishing of cats yes it's all here so
00:35 - gosh what are we waiting for let's get
00:38 - scratching as we begin make sure to save
00:41 - a copy of your episode 7 projects for
00:44 - this is episode 8.
00:47 - now since we are going to want to add a
00:50 - moving platform right here on the very
00:52 - first scene of the level i'm going to
00:54 - click into the level sprites costume
00:56 - editor and make some space by deleting
00:59 - the central diamond shape
01:01 - cool
01:02 - now let's create a new sprite to
01:04 - represent the moving platforms
01:07 - i'm going to name it platform for short
01:10 - next draw a simple rectangle shape
01:14 - this will be my moving platform but
01:16 - don't worry it can be any shape or color
01:18 - you want you should play around with
01:20 - some of these for some fun
01:21 - but now we can drag the platform on the
01:24 - stage to a good starting position i'll
01:26 - pop it down here in reach of scratchy
01:30 - okay that's a good start if i run the
01:33 - project the moving platform is visible
01:35 - but it is far from solid
01:38 - we can run right through it this is the
01:40 - first thing we should solve
01:42 - as you might suspect it will be really
01:44 - easy click into the player sprite and
01:47 - find the check touching solid custom
01:49 - block
01:51 - you remember when i made you create this
01:52 - block and you probably thought gosh why
01:55 - go to all the effort for creating this
01:56 - only to do a touching sprite we could
01:58 - have done this without it
02:00 - well this is where we get the payoff
02:03 - where we originally had touching level
02:05 - now we bring in an ore and switch it to
02:08 - have two touching blocks
02:10 - the second one can become the new
02:12 - platform sprite
02:14 - so what have we done here yes everywhere
02:17 - in our code that uses the check touching
02:20 - solid and that's quite a lot of places
02:22 - now
02:22 - every one of them will now also count
02:25 - platforms as solid 2. oh yeah now that
02:29 - saved us a whole lot of time let's test
02:32 - it out
02:33 - walk over and jump on the platform
02:36 - yeah look at that the platform is indeed
02:39 - fully solid that's great just as solid
02:42 - as the level itself
02:44 - well next up walk onto the next scene
02:48 - ah
02:49 - the platform is here too and it's just
02:51 - as solid as it was on scene one so we
02:54 - need to tell the platform which scene it
02:56 - belongs to
02:58 - click into the platform sprite
03:00 - we have a nice event for changes of
03:02 - scene so bring in a when i receive event
03:05 - block and the event we'll use is
03:08 - ah yes change scene great
03:11 - the event only gets triggered when the
03:13 - scene is changed not every frame which
03:16 - is very useful to remember
03:18 - now to ensure the platform does not
03:20 - appear on every scene we'll hide the
03:22 - sprite
03:24 - then if scene hash equals one
03:28 - our first scene
03:30 - then show that's about as simple as it
03:33 - gets right but luckily this works just
03:35 - fine you can imagine we can add as many
03:38 - ifs here as needed to define moving
03:40 - platforms on lots of scenes
03:43 - but enough of that let's get that
03:45 - platform moving make a new custom block
03:48 - we'll name it animate platform
03:50 - i use the word animate because it
03:52 - reminds me that this is a long running
03:55 - operation and we should therefore not be
03:58 - ticking the run without screen refresh
03:59 - block it'll be clear why shortly
04:02 - so drop a copy of this new block into
04:04 - the change scene if block after we show
04:07 - the platform
04:08 - okay a little bit of teaching for you
04:10 - now we will shortly be adding scripts
04:13 - into the animate block that will move
04:15 - the platform up and down in a forever
04:17 - loop so the question is if we are
04:19 - looping it forever what will happen if
04:21 - the player changes scene will the script
04:24 - keep running
04:25 - the answer is no
04:27 - and why not
04:29 - well event receivers like this one have
04:31 - an interesting property in scratch that
04:33 - when they get broadcast again
04:36 - while a previous one is still running
04:38 - the previous one gets stopped right away
04:41 - before the new one begins running in its
04:42 - place
04:43 - so when we move to scene 2 the animate
04:46 - platform script gets stopped and the
04:48 - platform should hide
04:50 - ok lesson over let's make the animation
04:54 - as long as your project is stopped when
04:56 - you drag out your go to xy block it will
04:58 - be automatically set to the position of
05:00 - the sprite on the stage as it is right
05:02 - now
05:03 - that's useful
05:04 - now drag the platform to its next
05:06 - position up here
05:08 - now let's get a glide block
05:10 - cool again it's all set correctly i can
05:13 - test the project to check
05:15 - now it glides right up there
05:18 - but it's a tad too fast i'll change the
05:20 - glide speed to two seconds
05:24 - yeah that's much better
05:26 - next to glide it back down to the start
05:29 - drag in a new glide block oh wow it's
05:33 - set it to the original position i was
05:35 - expecting the new position but i guess
05:37 - this is because the project is still
05:38 - running
05:40 - it must remember the first position it
05:41 - was in
05:42 - well just make sure that the x and y of
05:45 - the glide are the same as the x and y of
05:47 - the original go to x y okay
05:50 - and set the glide speed to two seconds
05:52 - as before
05:54 - running that gives us a nice up and down
05:57 - motion so to keep the motion going we
06:00 - can surround the glides with a forever
06:02 - loop like this
06:04 - now one more thing that can make this
06:06 - look even better is to pause the
06:09 - platform at the top and bottom with a
06:11 - weight block for yeah one second will do
06:15 - okay this is looking perfect i'm all
06:18 - ready to give this a try
06:20 - but what will happen if we get on board
06:23 - oops oh so wow this wasn't so great the
06:27 - lift was able to move right through us
06:30 - how did this happen
06:32 - well this has to do with how and more
06:34 - importantly when our sprite collisions
06:37 - are detected and resolved
06:40 - at the beginning of every game frame we
06:42 - assume the player is not colliding that
06:44 - is not overlapping anything solid
06:47 - next we move the player check for
06:49 - collisions and then move them back out
06:51 - of any collisions again
06:53 - now
06:54 - what has changed here is that the
06:55 - platform scripts have now become the
06:57 - first thing to run in our game frame
07:00 - how do i know it runs first well that's
07:03 - down to how scratch operates
07:05 - the first thing to run is any script
07:07 - that is already running from the last
07:09 - frame
07:10 - like forever loop
07:11 - we have our main game loop
07:13 - and we have the platform forever loop
07:16 - but look the game loop
07:18 - broadcasts these events
07:21 - so these events get ready to run as soon
07:23 - as possible but not before this platform
07:26 - forever loop gets to run because it was
07:28 - already running from last frame and so
07:31 - we know that the platformer will always
07:33 - get in before the other broadcast
07:35 - receivers
07:36 - right then so the first thing to move in
07:39 - the game frame is the platform
07:42 - but now look that means we are beginning
07:45 - the player's scripts now only to find
07:48 - that they are colliding this is not a
07:51 - good state to be in as it is known as
07:53 - the stuck state in our game and it
07:55 - becomes impossible to move now why isn't
07:59 - the level turning red then to show that
08:01 - we are stuck
08:02 - well in the player sprite find a when i
08:06 - receive tick player
08:08 - look the switch background that we put
08:10 - in here is only looking for touching
08:12 - level not touching platform that was my
08:15 - bad we should have really used our
08:17 - custom touching solid block for this too
08:20 - shouldn't we
08:21 - anyhow what we need to do for starters
08:23 - is now realize that we may be stuck in
08:26 - the level even as this event receiver
08:28 - begins to run
08:31 - tell you what
08:32 - create a new custom block naming it
08:34 - moved
08:35 - by moving platform
08:38 - and yes we run without screen refresh
08:40 - this time
08:45 - we'll use it first thing as the tick
08:47 - player script begins to run
08:51 - i'll just move it into some space
08:55 - to decide if we are indeed colliding use
08:58 - the check touching solid block and check
09:00 - if touching is greater than
09:03 - zero
09:04 - if it is then we have most likely got
09:07 - trapped in a moving platform and for now
09:09 - the quickest way out would be to use our
09:12 - existing fix collisions in direction
09:15 - block
09:16 - setting the direction to zero to push
09:18 - the player up out of the collision
09:21 - okay cool so let's see what effect this
09:24 - has on the moving platform shall we
09:27 - just getting ready to jump on top and
09:29 - yes look at that we are going up this is
09:32 - awesome the platform feels super solid
09:36 - and is working surprisingly well in fact
09:38 - if you were careful with your level
09:40 - design you might even be content with
09:42 - this just as it is because it looks
09:44 - great
09:46 - so well are there any problems
09:48 - yeah there are
09:50 - let me just walk under the lift okay
09:52 - this isn't going to be pretty
09:54 - and did you see what i saw
09:57 - scratchy miraculously avoided certain
10:00 - death by teleporting on top of the lift
10:02 - that's crazy but also expected the fix
10:06 - collision in direction script we used
10:08 - was after all not designed for resolving
10:11 - collisions with moving platforms and
10:13 - sadly there's worse to come
10:16 - let's switch the direction of the
10:17 - animating platform
10:19 - click into the platform sprite i'll
10:21 - duplicate the animate script so we can
10:24 - keep a copy
10:25 - now let's quickly set the start position
10:35 - and matching end glide position
10:41 - and then fill in a new exposition for
10:43 - where the platform will glide across too
10:50 - okay running that now
10:53 - let's see how this affects the game
10:57 - if i jump on the platform
10:58 - oh wow it's hard to stay on but wait why
11:02 - is that
11:03 - well it's because although the platform
11:05 - is moving left and right unlike the up
11:07 - and down platform it's not pushing me
11:10 - and it's not pushing me because it's not
11:13 - colliding with me
11:14 - no it's just slipping by under my feet
11:17 - so there's obviously another mechanic
11:19 - missing here and that is floor friction
11:22 - we need the very fact that i'm standing
11:24 - on this platform to mean that my player
11:26 - is moved along with it the problem is to
11:29 - do that we need to know how far the
11:31 - platform has moved by each frame
11:33 - and look we are using a glide so how
11:36 - much is it moved by
11:39 - well let's work it out
11:42 - bring in a new when i receive block
11:46 - and we'll make a new event named tick
11:48 - platforms
11:50 - now just like all the other tick events
11:52 - as i described earlier this too will run
11:55 - after the anime block which is in a
11:58 - forever loop
11:59 - so by the time this runs each game frame
12:02 - the platform will already have glided
12:03 - along by a small amount
12:05 - well perhaps we can measure how much it
12:07 - has moved
12:09 - make a new custom block named tick
12:12 - and add a numeric input of new x and
12:15 - another named new y
12:18 - check the run without screen refresh
12:19 - great
12:21 - this new block will run under the new
12:23 - event and we can pass in the new
12:25 - position of the platform that is
12:26 - position x and position y
12:29 - remember that the glide has already had
12:31 - its chance to move the platform so this
12:34 - is the new position
12:36 - but where was the platform last frame we
12:40 - don't know do we
12:41 - make two new variables last x for this
12:44 - sprite only
12:47 - and last y
12:49 - for this sprite only
12:52 - then after the tick block has finished
12:54 - running we set last x
13:00 - to position x
13:03 - and then do the same for last y to
13:05 - position y
13:07 - this means the next time this event gets
13:10 - broadcast we will know where it was last
13:13 - frame and the great thing about that is
13:15 - we will be able to calculate how far it
13:17 - has moved
13:19 - we can test this using a say block and a
13:22 - subtract
13:23 - and we say new x
13:26 - subtract last x
13:28 - yep that gives us the difference between
13:30 - the two x positions
13:33 - run that now
13:34 - what oh
13:36 - sorry what a scatter brain we haven't
13:39 - yet broadcast the tick platform event
13:41 - click into the player sprite and find
13:44 - the when i receive game loop script
13:48 - we broadcast tick platforms
13:52 - and pop it after the first broadcast
13:57 - aha we have something showing up now
14:01 - do you understand what we are seeing the
14:04 - platform is telling us how many pixels
14:06 - it has moved in the game frame to get to
14:08 - where it is now
14:09 - notice when it stops the number changes
14:11 - to a zero because it's not moving i
14:14 - think that's really cool what with the
14:16 - fact we are using glides and all and i'm
14:18 - certain that this will help us move the
14:20 - cat on the platform
14:22 - so back in the platform sprite
14:27 - move the say block out of the way now
14:30 - bring in and if else what we need to
14:32 - know next is whether the cat is even
14:35 - touching this platform or not
14:38 - if touching player
14:40 - then
14:42 - for now say the speed again
14:45 - else
14:46 - say nothing
14:48 - that seemed like a good plan but sadly
14:51 - this doesn't work and why because the
14:54 - platform is simply never in contact with
14:56 - the player as we said before the
14:58 - platform is sliding along peacefully
15:00 - under our feet to really know it's
15:02 - touching we should move the platform up
15:04 - a little tiny bit before doing our
15:07 - touching check
15:08 - put another if else block above the
15:10 - first and check whether the new position
15:13 - is above the last one
15:15 - in this case the platform is moving
15:17 - upwards
15:18 - this is the easiest case because as such
15:21 - we can just move the platform up a tiny
15:23 - bit more change y by one and it's bound
15:26 - to be touching the player's feet
15:29 - but what if the platform is moving down
15:32 - and therefore away from the player that
15:34 - makes it a little bit more problematic
15:36 - because even if we move up a little bit
15:38 - it could be far from the player's feet
15:41 - but luckily because we know the previous
15:43 - position of the platform we can just put
15:46 - it back up there and then look above
15:48 - that position instead and then once more
15:51 - we will be able to locate a collision or
15:53 - not
15:54 - we are not quite there yet though as if
15:56 - you run that you can see that the lift
15:59 - is trying to drift away that's because
16:01 - all the moving the platforms has taken
16:03 - it off course of its original glide we
16:05 - must restore its position after all the
16:07 - checks are done
16:08 - use a go to
16:10 - and drop in the new x and new y
16:14 - that's where it's supposed to be
16:16 - run the project again i'm feeling really
16:18 - good about this i just need to get on
16:21 - the platform
16:23 - it's harder than it looks
16:25 - yes brilliant now we can see the speed
16:28 - of the platform but only when we stand
16:31 - on it
16:32 - the obvious next step is to get the
16:34 - player to move along with set platform
16:37 - keep the first say block handy but
16:39 - discard the empty one we're all done
16:41 - with that
16:43 - now for flexibility we are going to use
16:45 - some global variables to record the
16:47 - required movement of the player
16:49 - make two variables
16:50 - platform dx for all sprites
16:54 - and platform d y
16:56 - for all sprites
16:59 - now set platform dx
17:04 - to the new x subtract last x from the
17:07 - say block
17:08 - that now records the left and right
17:11 - movement
17:12 - but platforms can also go up and down so
17:16 - we also set platform d y to new y
17:20 - subtract last y
17:22 - so if we run the project now and i climb
17:25 - on the platform you will see platform dx
17:27 - changing value
17:29 - but when we jump off mid flight you'll
17:32 - notice that platform dx does not reset
17:35 - to zero or empty value but stays set
17:38 - that will cause us some confusion if
17:40 - left like that but i'm not going to set
17:42 - them to zero in the else here as you
17:44 - might have expected because in the long
17:47 - run we will hope to have more than one
17:49 - moving platform on a scene and if that
17:51 - is the case then even if we are standing
17:54 - on one platform the other platform would
17:56 - then set the variable to blank
17:57 - completely messing up our code so
17:59 - instead click into the player sprite and
18:03 - we want this tick first script
18:06 - this runs before the tick platforms so
18:08 - in here we'll set platform dx to the
18:11 - empty value
18:14 - and do the same for platform d y
18:22 - great so smash that green flag and we
18:25 - should be able to confirm that the
18:26 - platform values are now only set when we
18:29 - are indeed standing on the moving
18:30 - platform
18:34 - excellent we are really getting
18:36 - somewhere now
18:38 - find the custom block we created earlier
18:39 - today moved by moving platform
18:43 - and now before we check for collisions
18:46 - let's move the player we need a change x
18:50 - by
18:53 - and a change y by block
18:57 - and then drop in the new platform dx
19:00 - and platform d y variables
19:04 - oh yeah this is going to be great run
19:07 - the project
19:08 - and wait for it
19:10 - oh yes look at that doesn't that look
19:13 - great we are being carried along
19:16 - beautifully by the platform no obvious
19:18 - pixel slippage and we can even walk left
19:21 - and right as we travel along one thing
19:24 - we haven't implemented here is
19:25 - continuation of velocity you will find
19:28 - that as we jump off the platform we jump
19:31 - vertically upwards and are not traveling
19:33 - along with the platform any longer but
19:35 - perhaps that is one for another time
19:38 - maybe slightly surprisingly you can see
19:41 - that when standing in the path of this
19:42 - platform we even get pushed along by it
19:46 - that is because as soon as we collide
19:48 - the platform is counting us as being on
19:50 - the platform and moving us with the
19:52 - platform
19:53 - but this may be a bit finicky and prone
19:56 - to issues here let me show you i'll
19:58 - click into the level sprite and add a
20:00 - solid wall right in the path of the
20:03 - moving platform
20:05 - so what do you think will happen now as
20:07 - i travel along on the platform
20:11 - here we go
20:12 - oh oh
20:14 - now i was not pressing jump there in
20:16 - case you didn't understand what you were
20:18 - seeing
20:19 - what is happening here is that when a
20:20 - platform moves us into a collision we
20:23 - still have the fixed collision in
20:24 - direction script running and that
20:26 - attempts to lift us up out of a
20:28 - collision but in this case the collision
20:30 - cannot be resolved by moving us up no we
20:33 - need to move right to get out of this
20:35 - one
20:36 - as such we bounce upwards and things do
20:39 - not look so good
20:42 - so can we just set the fixed collision
20:45 - in direction to 90 to push us out
20:47 - sideways
20:48 - let's give it a go
20:53 - wow
20:54 - yes okay so that's a lot better so why
20:58 - did we set it to zero in the first place
21:00 - well because we were originally dealing
21:03 - with an up and down moving platform
21:05 - click back into the platform sprite and
21:07 - switch back the old animate platform
21:10 - script the ones that make the platform
21:12 - move up and down
21:13 - now let's see if this platform is still
21:16 - behaving itself
21:18 - oh what no as soon as i was on the
21:20 - platform and it moved i was wiggled
21:22 - right off without warning this mechanic
21:24 - has been completely broken by the change
21:26 - to fix collision in direction to 90. so
21:30 - just confirm that let's go back to the
21:33 - player sprite and change fix collision
21:34 - back to zero
21:41 - yeah look at that we have perfect
21:44 - movement once again
21:46 - but that means we have a problem and the
21:50 - root of it is simply that the fixed
21:52 - collision in direction is not suited to
21:54 - getting us out of an unknown direction
21:57 - of collision
21:58 - find the fixed collision in direction
22:00 - script
22:01 - and i'm going to move it into some free
22:03 - space
22:06 - now just to refresh your memory i've
22:08 - removed the run without screen refresh
22:10 - from this custom block for the moment
22:12 - so if i play scratch cat so that he's
22:15 - colliding with the level like so and
22:17 - then run the fix collision in direction
22:19 - zero script
22:20 - you can see him bounce up and down
22:22 - further and further until he is safely
22:24 - out of the ground but if we change the
22:26 - direction to be 90 then the cat is
22:29 - instead shaken left and right more and
22:32 - more until they find themselves out of
22:34 - the ground
22:35 - but the problem is this what if the way
22:37 - out of the collision is neither to the
22:39 - left nor up
22:41 - but perhaps diagonal
22:43 - what we really want is a fix up script
22:46 - that can find the closest point we can
22:48 - move to that is not colliding with the
22:50 - level so rather than searching back and
22:52 - forth like before a better solution may
22:55 - be to search in ever increasing circles
22:58 - looking for the first point that no
23:00 - longer collides
23:01 - sounds perfect how hard can it be
23:04 - make a new custom block naming it find
23:08 - closest space to
23:11 - with a numeric input of x
23:13 - and another of y
23:15 - that will be the middle of our search
23:17 - circle
23:19 - then add a label
23:20 - max and a numeric input of the same name
23:24 - max
23:25 - this will be the maximum distance we
23:27 - look for a way out of the collision
23:30 - then finally we most definitely run
23:32 - without screen refresh
23:34 - let's duplicate this fix collision
23:36 - indirection script as that will be
23:38 - relatively similar
23:39 - just separate off the repeat loop
23:42 - okay yes we want to record the original
23:45 - direction so we can point back to it
23:47 - once we finished and yes we want to
23:50 - begin looking just one pixel away and
23:52 - then work our way outwards
23:55 - but this point in direction
23:56 - just throw away the der parameter as
23:58 - this custom block doesn't have one of
24:00 - those anyway
24:02 - what i suggest is that we set it to zero
24:04 - we begin looking directly upwards
24:07 - okay cool we're set up so actually put
24:10 - back the repeat loop
24:13 - we'll use the max input variable as the
24:16 - number of times we will repeat around
24:20 - now remove the scripts from within the
24:23 - repeat loop but keep them handy
24:26 - the first loop is repeating to move us
24:28 - on ever increasing circles we'll need a
24:31 - second nested repeat loop to actually
24:34 - move around in a circle testing for
24:36 - collisions we need a compromise here
24:38 - though to avoid doing too many checks
24:41 - and i've chosen 16 points per circle
24:45 - we ensure we always begin at the same
24:47 - point with a go to x y and drop in the
24:50 - input variables x and y
24:54 - then since we are already facing the
24:55 - desired direction we move forward by
24:58 - distance
25:00 - so having moved are we touching anything
25:03 - solid
25:04 - bring back the check touching solid and
25:06 - it's connected if script
25:08 - if we are not touching solid then this
25:11 - restores the direction of the player and
25:13 - stops the script we would be done super
25:17 - but if not then we need to search on so
25:21 - right after the if check turn the player
25:23 - clockwise
25:24 - but by how much well
25:27 - 22.5 degrees actually how did we come to
25:30 - that number simple 360 degrees is a full
25:34 - circle right and we are repeating 16
25:37 - times so 360 divided into 16 parts is
25:42 - yeah 22.5
25:45 - great and so after a full circle has
25:48 - been searched we need to grow the size
25:50 - of our circle's radius change distance
25:53 - by one
25:55 - do make sure this is not within the
25:57 - repeat 16 but is within the repeat max
26:01 - stonking all that's left is to restore
26:03 - the original position if we didn't find
26:06 - a way out of this collision
26:08 - go back to the original position using a
26:10 - go to xy with the input of x and y
26:13 - and we stored the original direction in
26:15 - the variable orig so point in direction
26:19 - of rig
26:20 - so we are facing the right way
26:25 - here let me size it into view
26:28 - so this is our fine closest space script
26:31 - excellent
26:33 - but come on
26:34 - let's see it in action
26:36 - i'll position the cat with his feet
26:38 - colliding with the floor and then click
26:40 - the new find closest block
26:43 - bam we appear back on the surface
26:48 - we can test the wall to our side too
26:52 - and wham we move out of the wall to our
26:54 - left that is super but what about the
26:58 - tricky one overlapping both on the
27:00 - bottom and the side
27:03 - oh yeah we get moved diagonally out of
27:06 - the collision that is awesome shall we
27:08 - see it slowed down
27:11 - edit the custom block and disable the
27:12 - run without screen refresh temporarily
27:16 - and here we go
27:18 - now i've sped this up a tad but can you
27:20 - see how we are moving in circles that
27:22 - are getting bigger and bigger until
27:25 - we found a point of no collision it
27:28 - should be noted that usually the amount
27:30 - of overlap is quite small and so the
27:32 - number of checks required are far less
27:34 - than we are seeing here
27:36 - great so this clever script is the real
27:40 - magic that solves all of our platforming
27:42 - woes it's our get out of jail free card
27:45 - and we'll simply make everything work so
27:48 - what are we waiting for let's get it in
27:50 - the game
27:52 - okay so don't forget to re-enable the
27:54 - run without screen refresh if you
27:56 - unticked it
27:59 - click into the player sprite and find
28:01 - with me the define moved by moving
28:03 - platform we are going to remove the old
28:06 - fix collision in direction script and in
28:09 - its place we use the new find closest
28:12 - space 2 block
28:14 - the position is going to be the x
28:16 - position and the y position
28:18 - that's the current position of the
28:20 - player and
28:21 - r so what about the max distance to move
28:25 - what's that about
28:26 - why would we want to limit this
28:28 - so for now stuff in 16 and we'll talk
28:31 - more about that in a second
28:34 - it's about time we smashed the green
28:36 - flag and gave it a test because i am
28:38 - dead excited to see it work
28:40 - firstly jumping on the simple up and
28:42 - down platform oh yeah that is working
28:46 - just as well as it did before which is
28:48 - great news
28:50 - but stop right there what do we want to
28:53 - happen if we are standing right here
28:56 - will we squish through the wall be
28:57 - pushed through the lift or moved out of
28:59 - the way what do you think
29:02 - okay enough of that let's find out
29:04 - right
29:05 - it pushed me back to the left out of the
29:08 - way
29:08 - let's try this again but right
29:10 - underneath now
29:13 - pop it pushed us out the right hand side
29:16 - what if we were under the lift just the
29:18 - edge to start with
29:20 - oh well that was okay but how about
29:22 - right in the middle this isn't going to
29:24 - be pretty hold your breath
29:27 - oh boom there you go poor scratch cat so
29:30 - you remember that number 16 we put in
29:32 - the max value in the find closest space
29:35 - 2 block
29:36 - that was saying that when we collide the
29:38 - furthest we can be moved to safety is 16
29:42 - pixels
29:43 - well when in the center of this lift
29:45 - there is no safe move within 16 pixels
29:48 - of us so boom game over
29:51 - before we think more about that
29:53 - let's try out a horizontal moving
29:55 - platform click into the platform sprite
29:58 - and switch around the scripts again
30:03 - and let's see
30:06 - jump on the platform
30:08 - and then when we hit the wall
30:12 - yeah perfect we are simply pushed back
30:15 - out of the wall and fall down gracefully
30:17 - this oh bother oh
30:19 - let me try that
30:20 - again oh whoops oh it's okay i got this
30:26 - and there we go yep
30:29 - and i should be able to be pushed along
30:33 - cool this is looking really spot on
30:37 - good then we should revisit scratch
30:39 - cat's demise yes sorry scratchy get back
30:43 - under that lift and we'll work out
30:44 - what's to be done with you
30:46 - now as soon as our fine closest space
30:49 - fails to find a free spot within 16
30:52 - pixels
30:53 - what we want to do is
30:55 - well sorry to say this but that's game
30:58 - over kitty or at least we lose a life
31:00 - right and we can tell when this occurred
31:03 - by using an if
31:07 - and checking for when touching is still
31:09 - greater than zero
31:11 - then thank goodness we covered losing a
31:14 - life in the last episode because now we
31:16 - can simply broadcast
31:19 - lose life
31:22 - run the project and check that out okay
31:25 - here we go don't panic scratchy it's
31:27 - okay oh
31:30 - not so okay but thank goodness cats have
31:32 - nine lives another go
31:36 - super so how close to the edge can i get
31:39 - away with
31:41 - oh that was about it i'm guessing if you
31:44 - want things to be more strict then
31:46 - you'll have to try using a number less
31:48 - than 16 in your find free space block
31:51 - but brilliant we are almost done
31:54 - i'm just going to finish by trying out a
31:57 - few more platform movement patterns
31:59 - click into the platform sprite
32:01 - so first off don't think you are limited
32:04 - to horizontal or vertical movement only
32:06 - or even just back and forward motion
32:09 - look we can add in a third position with
32:12 - differing speeds
32:13 - let's give that a ride
32:23 - i'm going to have to jump over oh i'll
32:25 - bother okay so that's perhaps something
32:28 - to watch out for if we move off screen
32:30 - then the platforms all reset their
32:32 - movements now we could address that by
32:35 - keeping each platform as a sprite or
32:37 - clone and never stop or start it just
32:39 - hide it when it's not in the current
32:41 - scene
32:42 - or design your level to stop you moving
32:44 - off the screen so easily perhaps like
32:45 - having a roof
32:47 - i'm just going to remove the obstacle
32:49 - for now so you can see it moving around
32:51 - me there
32:52 - so cool
32:54 - but what else can we do
32:56 - let's run over to scene three
32:59 - i'm going to add a vertical sliding
33:01 - heavy door in here scroll to the when i
33:04 - receive change scene
33:06 - we can duplicate this if checking now
33:08 - for a scene of three
33:11 - if we run that then we'll end up with
33:13 - the same moving platform living on this
33:15 - scene too
33:17 - but what i want to do is flip this
33:19 - around and use it as a moving door so
33:22 - delete the second animate block
33:24 - and we can create a new custom block
33:27 - named animate 2. remember we don't tick
33:30 - the run without screen refresh we're
33:32 - animating here
33:33 - make use of it in the new if
33:36 - gosh my scripting area is getting a bit
33:38 - messy i'm sorry about that i'll just
33:40 - tidy this up
33:41 - and put together another vertical script
33:44 - like this
33:45 - you'll need to play with the values to
33:47 - fit these to your level but just let
33:49 - your imagination go wild because you
33:51 - could make any shape move around that
33:53 - you could think of what could you do
33:55 - with this right i bet you could think of
33:57 - some super ideas i just can't wait to
33:59 - see them in this week's studio
34:01 - there that's cool
34:09 - oh no oh i forgot to reset the rotation
34:12 - of the normal moving platforms
34:14 - hold on
34:18 - and there we go we are off
34:26 - and with that my dear fellow scratchers
34:28 - we come to the end of another episode
34:31 - but what an episode i hope you have
34:33 - learned a bunch of helpful stuff in this
34:35 - one so please don't forget to smash that
34:37 - like button and if you haven't already
34:39 - then subscribe to the channel right now
34:42 - who knows what day a video might pop
34:44 - into the notification area and you don't
34:46 - want to be late to the party
34:48 - next week i'm going to be mixing it up
34:50 - with something completely different so
34:52 - watch out for that but by no means are
34:54 - we 100 done with this series yet either
34:57 - i just want to thank all my channel
34:59 - members for their ongoing support and if
35:01 - you are a loyal fan or an educator who
35:03 - uses my teaching then please do consider
35:05 - joining the membership too there's some
35:07 - great perks to be had plus it helps me
35:09 - to be able to make even more videos
35:12 - win-win
35:13 - but until next time thanks for watching
35:16 - and have a great week ahead scratch on
35:18 - guys
35:21 - [Music]