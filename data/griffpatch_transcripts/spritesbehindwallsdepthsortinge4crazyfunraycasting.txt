00:02 - hello fellow scratchers i'm griff patch
00:05 - and i hope you're enjoying this 3d
00:07 - raycaster series as much as me in part 3
00:10 - we managed to bring a non-player entity
00:12 - nano into our game so cool and that was
00:15 - a big achievement but we were left with
00:17 - the problem that we could still see nano
00:19 - through the level walls so we have our
00:21 - mission for today we'll be covering pen
00:24 - stamping drawing to and from lists and
00:27 - creating a depth sorted list oh my word
00:30 - finally though we'll fill our world with
00:32 - cloned entities to make things a lot
00:34 - more fun
00:36 - so save a fresh copy of your episode 3
00:39 - scripts and let's get scratching this is
00:43 - episode four the problem we are facing
00:45 - is that nano as a scratch sprite will
00:47 - never appear behind a wall drawn using
00:50 - the pen they just can't the pen layer is
00:52 - permanently sat behind all sprites and
00:55 - that's the way it is
00:56 - the only way to overcome this is to use
00:59 - the pen stamp block stamping a copy of
01:01 - our sprite onto the pen layer
01:04 - now we can move the original sprite away
01:06 - and the stamped layer remains what's
01:09 - more we can now continue to draw more
01:11 - pen over the top of the stamped sprite
01:13 - and voila that is how we achieve the
01:16 - result we are after
01:18 - our next problem is working out when to
01:20 - stamp nano as some walls appear behind
01:23 - them and others are in front of them at
01:26 - present we draw the entire raycast scene
01:28 - in one go a nano appears pasted on the
01:30 - top
01:31 - so we will have to split up the
01:33 - raycasting to draw the further away
01:35 - walls first then nano and then anything
01:38 - closer to the player last
01:41 - but to raycast and draw later on
01:43 - requires us to store the results of the
01:45 - raycast in some way and that means using
01:48 - scratch lists we'll need to store each
01:51 - ray's x position distance to the wall
01:54 - and the wall color
01:55 - right then that's where we will begin
01:58 - click into the player sprite and find
02:00 - our define initialize raycaster script
02:04 - this runs before each raycast
02:06 - now we make the three new lists
02:09 - draw x to store the x positions for all
02:13 - sprites
02:16 - draw dist to store the distances again
02:19 - for all sprites
02:23 - and lastly
02:24 - draw
02:25 - type
02:26 - now i'm using this to mean wall color
02:28 - and it's again for all sprites
02:31 - we want to begin each raycasting sweep
02:34 - with our lists empty so delete all of
02:37 - draw dist
02:39 - type
02:40 - and draw x
02:42 - excellent a fresh start
02:46 - click into the raycaster sprite
02:49 - okay now what's the plan here
02:51 - rather than directly painting the level
02:53 - as we raycast we want to instead record
02:56 - all the information gathered from our
02:57 - raycasting such that we can draw the
02:59 - scene later on
03:01 - as such we'll move all the pen drawing
03:03 - scripts out of this sprite and into the
03:06 - aptly named pen sprite down here for
03:08 - later
03:10 - therefore under the when i receive
03:12 - raycast separate off these three green
03:14 - pen blocks these are setting up the pen
03:16 - ready to draw drag them into the pen
03:19 - sprite and then delete them from this
03:21 - sprite altogether
03:23 - let's just check they made it in there
03:24 - shall we
03:25 - yeah there they are in the pen sprite
03:28 - great so click back into the raycaster
03:30 - sprite again
03:31 - next up is the define raycast custom
03:33 - block
03:34 - nope this doesn't draw anything with the
03:36 - pen so we can move on to the define
03:38 - single ray script up here
03:41 - the first part is the ray casting we
03:43 - need to keep that the same but
03:45 - now we are into the pen drawing separate
03:48 - these scripts off starting at the if
03:50 - touching level color block
03:52 - the only exception is these two set
03:55 - distance blocks they should remain with
03:57 - the raycasting scripts there did you get
03:59 - that
04:00 - right we are ready to start pushing
04:02 - values into the lists
04:04 - we could just add them right in but to
04:06 - make things easier going forward we'll
04:08 - make a new custom block specifically for
04:10 - this job name it
04:12 - draw
04:13 - with a numeric input of type
04:16 - then a label at x
04:18 - and a matching input variable
04:20 - x
04:22 - then pop in the label dist for distance
04:25 - and the matching numeric input test
04:28 - now please be double sure to tick the
04:31 - run without screen refresh here
04:33 - otherwise you'll get bugs later on as we
04:35 - change things up a bit
04:36 - so we make use of the block right away
04:39 - but what data do we pass into it well
04:41 - the x is easy that's the variable x the
04:44 - distance yes we have that too it's this
04:46 - distance variable but the type that was
04:49 - to be the wall color right so that comes
04:52 - from this if-else block here the first
04:54 - color was 58 so let's fill that out
04:57 - but we still need this if condition so
05:00 - how about we just drop the draw block in
05:03 - there in place of the set pen color
05:06 - then we can duplicate the draw block
05:08 - into the else and enter the second color
05:11 - number that's 53 for me like that
05:15 - and again remove the actual set pen
05:16 - color block
05:18 - excellent that will do the job
05:20 - right we are almost there so although we
05:23 - call this custom block draw what it is
05:25 - really doing is saying this is where we
05:28 - want to draw and instead stuffs the
05:30 - values into our list for later so under
05:33 - the define draw script we need three add
05:36 - to list blocks and we'll add each of
05:39 - these three input variables to the three
05:41 - lists
05:43 - just make sure to add the type input to
05:45 - the draw type list the x to the draw x
05:48 - list and the dist input variable to the
05:51 - draw dist list
05:54 - cool
05:54 - that should cause our list to be filled
05:56 - up nicely
05:58 - we can take the remaining pen drawing
05:59 - script over to the right
06:01 - and then drop it safely into the pen
06:04 - sprite along with the other pen scripts
06:07 - then as before we can discard these ones
06:09 - from here
06:10 - hooray click into the pen sprite
06:13 - first job is to tidy things up bring the
06:15 - copied scripts into some free space
06:18 - that's better now usually while we code
06:22 - i like to stop regularly so that we can
06:24 - test some things are working as expected
06:26 - the best we can do at this point is to
06:28 - make our three new lists visible on the
06:30 - stage tick those boxes and then run the
06:33 - project
06:34 - now this is interesting see how the
06:36 - lists appear empty
06:38 - you'd be forgiven for thinking that we'd
06:39 - mess something up but hit the stop
06:42 - button
06:43 - and aha now the lists are suddenly full
06:45 - of data
06:46 - what gives all i can say is don't worry
06:49 - about it right now it's just to do with
06:52 - the order scratches running our scripts
06:54 - and it won't cause us any major issues
06:56 - well since the data is now visible what
06:58 - can we make from it
07:00 - each list has the same number of items
07:02 - that's good as we are adding data to
07:04 - each one for each scan line to be drawn
07:07 - i can see the x list appears to be
07:09 - filled with expositions ordered from
07:11 - negative 240 to 240 as expected that's a
07:15 - good sign
07:16 - the draw distances look to be all set
07:19 - and the type column is showing the
07:20 - correct two color codes that i added
07:22 - perfect
07:24 - so we can move on just hide the lists
07:26 - again
07:27 - right to draw the scene we need to work
07:30 - through our lists a row at a time but we
07:33 - need to draw quickly so let's make a
07:35 - custom block call it draw
07:38 - and tick the run without screen refresh
07:40 - and here we go drop the draw block at
07:43 - the end of the when i receive paint
07:45 - block
07:47 - first we must reset the pen canvas ready
07:49 - for our drawing and we have the array
07:51 - scripts here so bring them in
07:55 - the other script is for painting a
07:57 - scanline of the level but first we want
08:00 - to loop through the lists
08:03 - a repeat block will do as well but how
08:06 - many times do we repeat well that
08:08 - depends on how many items there are in
08:10 - the list so a length of list block and
08:12 - well the draw x list is as good as any
08:15 - as we loop around we need to keep track
08:18 - of which item or row number in the list
08:20 - we are up to make a new variable naming
08:23 - it row
08:24 - and then the hash is a shorthand for the
08:26 - word number so this is row number
08:30 - we'll begin at row one so set row hash
08:32 - to one
08:36 - then within the loop we'll change row
08:38 - hash by one to take us through each item
08:40 - in the list in order from first to last
08:43 - okay then awesome now we must draw a
08:46 - scanline of the level
08:48 - make another new custom block naming it
08:50 - draw
08:51 - row run without screen refresh
08:54 - it's a great idea to break code up into
08:56 - these custom blocks so that we can name
08:58 - things not only does this make it easier
09:00 - to know what a script is meant to do but
09:02 - it also makes it easier to find the
09:04 - right script later on
09:06 - pop it in as the first block in our
09:08 - repeat loop before we change to row 2 3
09:11 - and 4 etc
09:13 - right exciting now we get to code the
09:16 - drawing scripts define draw row then
09:19 - our aim is to be able to use the
09:22 - painting scripts here but they require
09:24 - an x variable and a height variable and
09:27 - neither of these are yet set in this
09:29 - script
09:30 - no at present these values are still in
09:33 - our lists
09:34 - but before even that we don't have a
09:36 - type variable at all
09:38 - making a new variable type for this
09:41 - sprite only
09:43 - and set type 2
09:45 - to get an item of our list we use the
09:48 - item of list block and choose the draw
09:51 - type list
09:53 - we just need to say which item we want
09:56 - and that of course we get from the row
09:58 - hash variable
09:59 - this way each time we draw a row we will
10:01 - get the values from the next item in the
10:04 - list
10:05 - the x and height variables are already
10:07 - created for us so we can duplicate the
10:09 - set block and switch it to be set x
10:13 - just ensure to switch over the list to
10:15 - match the variable so that should now be
10:17 - draw x
10:19 - just one more then for the draw dist
10:22 - list and the matching variable distance
10:25 - very good
10:26 - can we plug the painting scripts in oh
10:29 - boy yes drag them together getting
10:31 - excited and now we can run the project
10:35 - and hallelujah we have success we should
10:38 - be seeing the level drawing once more
10:40 - that sure is a relief
10:42 - this is a public announcement grief
10:44 - patch has noted during editing that he
10:47 - forgot to set the pen color from the
10:49 - lists
10:50 - and as such we have temporarily lost the
10:53 - wall coloring many apologies for this it
10:56 - will be rectified before the end of the
10:59 - video perhaps it was because he got
11:01 - distracted by oh wowzers nano is going
11:05 - haywire though they are certainly not
11:07 - ending up in the intended position from
11:09 - the last episode
11:10 - that's okay though it's super easy to
11:13 - fix scroll up to the when i receive
11:15 - paint and just drag the draw block up to
11:18 - the top of the stack
11:20 - that then allows nano to be positioned
11:22 - after we paint the 3d scene leaving nano
11:24 - positioned correctly afterwards once
11:26 - more
11:27 - there
11:28 - nano restored
11:30 - but gosh what has this actually achieved
11:32 - remember the goal to find out which
11:34 - walls are behind and in front of nano
11:37 - okay so take a look at this here is our
11:40 - scene as we have it now i've taken the
11:43 - liberty of drawing an oval shadow under
11:45 - nano so that we can easily see where his
11:46 - feet touch the ground
11:48 - now it's pretty obvious that this left
11:50 - wall should be drawn in front of nano so
11:54 - let's watch this scene draw in the order
11:56 - that scratch is drawing it
11:58 - essentially we are drawing from left to
12:00 - right the same order we are raycasting
12:02 - and then nano is popped on top
12:05 - bad they need to be drawn behind the
12:08 - wall
12:09 - so we might try drawing again until we
12:11 - reach nano stamp them and then continue
12:14 - to draw the level
12:16 - well no
12:17 - that doesn't help either because the
12:19 - next walls should have been painted
12:21 - behind nano now they are in front
12:24 - no good
12:25 - so what we need to do instead is paint
12:28 - everything behind nano first
12:31 - then paint nano
12:33 - and then paint the remaining scene in
12:34 - front of them that will guarantee
12:36 - everything is drawn in the correct order
12:38 - and order is the answer to how this
12:41 - needs to be done we must take the data
12:44 - we add to our lists
12:46 - and sort it ordering it by ray distance
12:48 - the distance to the wall
12:50 - the items at the top of the list should
12:53 - be the furthest away
12:55 - so they draw first and the items at the
12:58 - bottom of our lists being the closest
13:00 - walls and so they draw last
13:03 - that is perhaps a bit of a scary thought
13:05 - ordering a list in scratch
13:07 - but fear not it's not so bad if we take
13:10 - it a step at a time
13:13 - since our lists start empty we will
13:15 - assume the list is always in order
13:18 - then each time we want to add to the
13:20 - list instead of adding to the end like
13:22 - before we find the right position in the
13:25 - list to insert the new row that will
13:27 - keep the list in order
13:29 - this we repeat over and over until we
13:31 - are done and the list is guaranteed to
13:33 - be and stay fully ordered this is called
13:36 - insertion sort
13:39 - so let's begin
13:41 - click with me into the player sprite and
13:43 - find the define initialize raycaster
13:45 - script
13:46 - i'm going to begin by adding a dummy
13:48 - value to our empty raycasting lists
13:51 - and add to our draw distance list the
13:54 - value 999.999
13:57 - wow this represents a distance that is
13:59 - far far away much further than any wall
14:02 - we'll ever actually draw
14:04 - this little trick will help simplify our
14:06 - scripts as it guarantees an upper limit
14:08 - is already in place
14:11 - now add a blank item to the other two
14:12 - lists the draw type list
14:16 - and the draw x list to keep things
14:19 - balanced
14:20 - sweet
14:22 - next we make a new variable
14:25 - naming it draw index or draw idx for
14:29 - short for all sprites
14:31 - we will use this to keep track of the
14:32 - position in the list we are inserting
14:34 - into but rather than starting at 1
14:38 - set draw idx to 2.
14:40 - we never want to insert anything in
14:42 - place of item 1 the dummy boundary row
14:45 - cool and now the real fun begins click
14:48 - into the raycaster sprite and yeah we
14:51 - need to update the define draw script
14:54 - previously we were always adding new
14:57 - items to the end of the list but now to
14:59 - keep the list ordered we need to search
15:01 - up and down the draw distance list to
15:04 - find where the new distance should be
15:06 - inserted
15:07 - we begin by looking above the current
15:09 - item
15:10 - if it is closer than our new distance
15:12 - then we move up the list
15:19 - so repeat until
15:21 - greater than
15:26 - item of draw
15:28 - distance
15:31 - draw index subtract 1
15:38 - that's the item above us in the list
15:41 - and compare it to
15:43 - dist input variable
15:46 - then in the repeat loop we change draw
15:48 - index
15:50 - by -1
15:52 - okay what
15:53 - so we are repeatedly moving up the list
15:56 - a row at a time until we find a row
15:59 - above us that is further away than the
16:01 - distance we are trying to insert
16:04 - cool but what if our new distance was
16:06 - already closer not further away
16:09 - then we would need to search down the
16:11 - list instead so repeat until and this
16:14 - time use a less than operator
16:17 - item of draw distance
16:20 - but another change just use the draw
16:22 - index variable without the subtract one
16:25 - and compare to dist
16:28 - and we change draw index by positive one
16:33 - yes so we are repeatedly looking down
16:35 - the list until we find a draw distance
16:38 - closer to the player than the new
16:40 - distance
16:41 - great stuff because at this point we
16:43 - have found where to insert the new slice
16:46 - of wall
16:47 - we can't use the add to list block we
16:49 - need to use three new insert item at
16:52 - blocks instead
16:54 - these give us the control over where to
16:56 - insert into the list
16:58 - make sure to switch them to the draw
17:00 - type
17:01 - draw x and draw dist lists then move
17:04 - over the matching input variables
17:07 - and finally we say where we want to
17:10 - insert into and that is the value of our
17:13 - draw index variable three times over
17:16 - oh gosh wow
17:18 - that was some serious scripting i hope
17:20 - you are all still following along okay
17:23 - do we dare give this project a test
17:25 - hopefully everything is still working
17:27 - oh yeah cool the level is still there
17:31 - the question is can we tell if it's
17:33 - drawing ordered from back to front
17:36 - luckily there is a quick test we can do
17:40 - stop the project click into the pen
17:42 - sprite
17:44 - and then single click on the draw custom
17:46 - block
17:48 - now the stage will redraw slowly in the
17:50 - order the items are set out in our lists
17:53 - and
17:55 - yes that's certainly not from left to
17:57 - right but instead drawing from back to
18:00 - front that is so awesome to see and
18:02 - weldon you if you've managed to get this
18:04 - far now we are truly coding
18:08 - so let's take stock our level is now
18:10 - drawing from back to front check
18:13 - we have our nicely positioned entity
18:15 - nano
18:16 - check
18:17 - our entities are being correctly drawn
18:19 - behind walls
18:21 - fail and of course not for they are not
18:24 - part of our ordered list
18:27 - to draw nano in the correct layer we
18:29 - need to shuffle them into this list too
18:31 - keeping them all nicely in order all
18:34 - together
18:35 - well okay then click into the raycasting
18:38 - sprite and we'll take our beautiful
18:40 - define draw script and copy it into the
18:43 - entity sprite that's right just drag it
18:46 - straight in
18:48 - then click into our entity sprite
18:51 - and move it into some free space like so
18:56 - we need to find the define rotate view
18:58 - script
18:59 - here it is up here and drop in the
19:01 - awesome draw block
19:03 - we are going to insert nano into the
19:06 - list
19:07 - now what type shall we assign to nano
19:09 - this is not going to be a colour so
19:11 - perhaps we can use their costume number
19:13 - instead costume 1.
19:17 - as a side note if you are using 1 as
19:20 - your wall colour then go back and add
19:22 - 201 to that number so 202 and that will
19:25 - fix this potential conflict
19:27 - now the x position ah the x position
19:30 - stored in here is the perspective
19:32 - adjusted x position we need to therefore
19:35 - do the perspective correction on our vx
19:37 - variable before we add it to the list
19:40 - do you remember how to do this multiply
19:42 - the x position that is vx
19:44 - by
19:45 - dv divided
19:50 - by v y
19:53 - that's the distance
19:55 - cool the last input is just the distance
19:57 - itself and that was v y
20:00 - brilliant
20:01 - oh i have one little optimization we can
20:03 - make
20:04 - when v y is less than zero the sprite is
20:08 - behind us there's no point drawing or
20:10 - even sorting one that is behind us so
20:13 - surround the draw block with an if and
20:15 - check that v y is greater than zero that
20:18 - is it's in front of the camera
20:22 - and on we go click into the pen sprite
20:26 - let's work out how to stamp this entity
20:27 - now that they are sorted into our draw
20:29 - list
20:30 - so here is where we previously
20:32 - positioned the entity sprite
20:34 - no longer just attach that script
20:37 - leaving the single draw costume block to
20:39 - draw the 3d scene
20:41 - next we use a hide block to ensure the
20:44 - actual nano sprite is hidden
20:46 - this won't stop us from stamping copies
20:48 - of them onto the pen canvas though
20:51 - great bring up the define draw row
20:54 - script
20:56 - so coming in here we now need to
20:57 - consider how to deal with a type of one
21:00 - it means we are drawing an entity with a
21:02 - costume of one not a wall as we would
21:05 - have previously been the case
21:07 - we should split the script so that we
21:09 - can handle both scenarios
21:11 - detach the set pen block we just need to
21:13 - save this set height block though as
21:15 - this is needed for both walls and
21:17 - entities to adjust for perspective
21:20 - keep that but the rest of the scripts
21:22 - are for drawing walls so put them with
21:24 - set pen here
21:26 - and now we check the type
21:30 - if less than
21:36 - if type is less than say 10
21:39 - that will let us use costumes one to
21:41 - nine for entities which we'll do fine
21:43 - for now
21:44 - okay time for a new custom block to
21:47 - handle the entity painting
21:50 - name it stamp entity run without screen
21:54 - refresh
21:58 - just attach that to the old entity
22:00 - scripts for starters and we'll revisit
22:02 - that in a mo we want to use the new
22:04 - block right away in our if condition but
22:06 - we also need a stop this script
22:09 - afterwards to prevent the rest of the
22:11 - scripts from drawing a wall too
22:13 - now you may prefer to have used an if
22:15 - else but i do have a habit of trying to
22:18 - avoid lots of scripts nested inside each
22:20 - other where possible so out of habit
22:22 - here we go
22:24 - right let's look at the stamp entity
22:26 - script
22:27 - hmm
22:28 - actually there isn't much in here that
22:30 - we're going to need to keep we've now
22:33 - already calculated both distance and
22:35 - height so bin them
22:39 - set size two oh yes we need that that's
22:42 - all good
22:43 - then we have the go to x y
22:45 - and this is wrong we can chuck the x
22:48 - maths blocks and in this place we simply
22:51 - place the x variable remember how we
22:54 - already made the perspective adjustments
22:55 - before adding it to the list just now so
22:58 - cool
22:59 - and so finally with the entity sized and
23:02 - positioned we stamp
23:05 - marvellous because that means can you
23:09 - believe it we can finally test this out
23:12 - and i'm dead excited to see the entity
23:14 - finally integrated into our scene
23:17 - and here we are there's nano looking a
23:19 - bit more pixely than before and that's
23:22 - no bad thing as it fits nicely into the
23:24 - style of the pen drawn level
23:26 - and next shuffling around the side of
23:28 - them to view them from behind a wall
23:30 - oh here we go and yes guys look
23:33 - fantastic half of nano has been obscured
23:37 - by this front wall amazing hey i know
23:41 - let's drag the 2d nano entity around the
23:44 - level
23:45 - this really shows things off i can move
23:47 - them back and forth and behind the wall
23:49 - and they are hidden perfectly that is so
23:52 - cool isn't it and i should be able to
23:54 - bring them right in front of the same
23:55 - wall too yeah there we go
23:59 - and how about this wall we can have them
24:01 - in front and take them all the way
24:02 - around the back
24:03 - hold on to see things at their best
24:05 - let's set all the ghost effects back to
24:07 - 100 to hide the player
24:13 - and the level sprites
24:15 - ah and we'll also need to add a new set
24:17 - ghost effect to the entity sprite
24:24 - set ghost effect to 100.
24:31 - there oh yes doesn't that look good you
24:34 - know i could play with this all day
24:37 - but you'd soon get bored of me so come
24:39 - on let's keep going one thing we haven't
24:42 - yet addressed is getting the entities to
24:44 - fade to black as they move off into the
24:45 - distance to match our walls
24:48 - for this click into the pen sprite and
24:50 - find the stamp entity script
24:53 - now we can't use the pen brightness
24:55 - block for this we need to use the set
24:57 - effect block from the looks category and
25:00 - we use set brightness to
25:03 - and drop it in before we stamp
25:05 - this works a little differently to the
25:07 - pen brightness maths a brightness of
25:09 - zero means normal brightness and
25:11 - negative numbers get darker so we need a
25:14 - subtract operator on the left enter 40
25:18 - and on the right drop in a divide
25:20 - operator block
25:21 - we can divide distance by
25:23 - 1.5
25:25 - you can play with these values to find
25:26 - out the ones you like but this value
25:28 - works good for me
25:30 - let's take a look
25:31 - oh wow that's already really creepy is
25:34 - that you nano
25:36 - oh phew yes it's you very cool that
25:39 - definitely integrates nano into the
25:41 - scene far more naturally and i love it
25:44 - but nano he looks so lonely just him
25:47 - alone in the shadows oh how about we
25:50 - give him some company this was never
25:53 - supposed to be about just a single
25:55 - entity after all
25:57 - we should click into the entities sprite
26:01 - and here we are setting up one single
26:03 - nano entity well if we want more we'll
26:06 - do well to use clones and to create them
26:09 - fast we'll need a custom block name it
26:12 - spawn
26:13 - with a numeric input count
26:16 - followed by a text label of
26:18 - and finally another numeric input type
26:22 - run without screen refresh
26:25 - use the block right away and will spawn
26:28 - that is clone 25 entities of type
26:32 - 1. costume 1 is the nano costume in my
26:35 - project
26:36 - wow this is going to be so cool
26:38 - drag the define block into some free
26:40 - space
26:42 - first thing we'll do is show this sprite
26:44 - we'll need this for the collision
26:46 - detection with the level don't forget
26:48 - that although we are drawing this in 3d
26:50 - at the end of the day they are also 2d
26:53 - scratch sprites in a 2d costume level so
26:55 - collision detection is completely
26:57 - possible and useful just like we have
27:00 - for our player sprite
27:02 - now create a variable type for this
27:04 - sprite only
27:07 - and set type to the type input variable
27:09 - we just passed in
27:11 - all of the resultant clones will then be
27:13 - set to this type a 1 for nano
27:17 - then we repeat
27:18 - to create each clone
27:20 - the number of clones we want is given by
27:22 - the count input and that was 25 nanos
27:25 - right yeah
27:26 - next we position the clones i want this
27:29 - to be a random position around the map
27:31 - so use a go to random position block
27:35 - but hold on what if a nano ends up
27:38 - randomly positioned on top of a wall of
27:40 - the level or even starts on top of
27:42 - another nano entity we don't want either
27:45 - of these to occur so repeat until
27:48 - not
27:49 - then pop in an ore
27:51 - the first thing to check is touching
27:53 - level that's the easy one
27:55 - so not touching level or touching
27:58 - another entity but nope scratch won't
28:01 - let us choose entity in this touching
28:03 - block pants
28:05 - okay fine let's work around that throw
28:07 - it away and click into another sprite
28:10 - bring in the touching block again and
28:13 - now select entities
28:15 - then we drop that back into the entity
28:17 - sprite right click back into the entity
28:20 - sprite here's our touching entities
28:22 - block that we needed pop it ruefully
28:24 - into the or block
28:27 - okay until we are not touching the level
28:30 - or another entity go to a different
28:34 - random position
28:36 - and that will keep going around and
28:37 - around until the entity lands happily in
28:39 - some free space
28:41 - once there just create a clone of myself
28:44 - make sure that's done outside of the
28:46 - inner repeat loop but within the outer
28:48 - repeat count loop
28:50 - wow we are nearly there guys at the
28:53 - bottom of the script to keep things tidy
28:55 - set type back to the empty value
29:00 - and then hide this sprite
29:03 - oh man this is it time to run the
29:07 - project
29:10 - look at that a herd of wild nanos has
29:13 - appeared what's so cool is that you can
29:15 - see they are layered correctly from back
29:18 - to front
29:19 - if we hit the green flag again they
29:21 - randomly spawn in different locations
29:22 - around the level
29:24 - let's have a wander around oh hello
29:26 - another nano over there i wonder where
29:28 - the rest are hiding yeah they are
29:30 - everywhere so fun it is surprising how
29:33 - many of these little entities we can add
29:34 - without overly slowing down the game
29:37 - which is a good thing because we will
29:38 - surely have a lot of fun with these
29:40 - going forward
29:42 - we are now drawing to a close on this
29:43 - episode but before i go i'm suddenly far
29:46 - too conscious that i broke the two-wall
29:49 - color system of our level ever since we
29:51 - moved to using lists we've got to fix
29:53 - that so click into the pen sprite and
29:56 - find the define draw row script
29:59 - what is missing is the set pen color
30:01 - block we never brought that over from
30:03 - the ray casting sprite so drop a new one
30:06 - in before we set pen brightness
30:09 - set pen color 2 and that is simply the
30:12 - type variable
30:17 - oh yeah wow there you go so much better
30:21 - i knew something was missing but i just
30:23 - couldn't place what it was until now the
30:25 - game looks far better with the wall
30:27 - colours restored
30:29 - wow i am so pleased we made at this
30:31 - point i didn't intend to teach entity
30:33 - placement in this series at all it was
30:34 - started just as a quick and crazy easy
30:37 - way of creating 3d levels in scratch but
30:39 - since you guys were so keen to keep on
30:41 - going here we are now and i have to tell
30:43 - you there's still more to come from here
30:46 - it's not a big step to creating
30:47 - collectibles level progression different
30:50 - entities and enemies we can look at how
30:52 - to make these enemies move around and
30:54 - chase us and could even add projectiles
30:56 - wow wouldn't that be something
30:58 - do fill the chat below with your
31:00 - comments i'd love to hear how you're
31:02 - getting along don't forget to submit
31:04 - your projects to the scratch studio
31:05 - linked under this video too
31:07 - if you've enjoyed this tutorial then
31:08 - please smash the like button and make
31:10 - sure to subscribe to the channel yep
31:12 - subscribe now there's no time to lose
31:15 - and that way you won't miss the next
31:17 - exciting episode if you feel you could
31:19 - support me more in making these videos
31:21 - especially if you're an educator then
31:23 - please consider joining the channel
31:25 - membership a huge thank you to my
31:27 - channel members and a special shout out
31:29 - to emperor aurora
31:33 - 55 code nerd scratch mail 1835 and sean
31:37 - higgins for their tremendous support
31:40 - okay that's it from me thanks for
31:43 - watching have a great week ahead and
31:45 - scratch on guys
31:47 - [Music]