hey guys what's up this is kazy from clever program.com and you are watching codeacademy part 14 yeah you guys excited um I hope you guys are really excited cuz now we're about to get to even more exciting stuff so check it out 46% complete that's almost we're we're halfway there but keep in mind there's one of those uh bitwise stuff which is kind of weird I'm almost thinking to skip it cuz it's so esoteric um so we're actually probably closer to 100% than you might think okay we've completed all these parts we've completed some of really tough stuff and getting started is really the hardest part as you start to get better at and understanding how computer programming is working you can figure lots of the other stuff out easier much easier okay so let's keep going here we finished student becomes teacher that was a big one that's why it was a unit uh in itself self and we got to lists and functions now so this is going to be great it says lists and functions now that you've learned about list let's turbocharge them with functions turbocharge with functions that sounds great and after that that sounds even more epic Battleship but one thing at a time let's continue on with list and functions unit 7 okay list accessing this is simple stuff we've already done it who are they kidding right oh add your code here this said print the second element so n of one print put parentheses around cuz I'm trying to train you for Python 3 simple we keep getting this badge over and over again I love it though list element modification okay element modification change the element to something else so I don't know on line three multiply the second what does it say multiply the second element so that by five so be n of 1 * 5 or time equals 5 but you know let's just use the long hand notation here to do this because like that book Learn Python the Hard Way always try to do things the harder way first then you'll really get it and then the shortcuts and everything will come more naturally overwrite the second element with that result wait I did yep print out the list okay great okay so you see that was pretty simple n was equal to 135 I multiplied the second element by five and now that's a result a lot of people make this mistake this is not changing what n of one was right this element right here this is just taking that element and multiplying by five does it does nothing by itself let me just show you this is a point I do want to elaborate and not take for granted cuz it is confusing if I did this right first of all it wouldn't show you anything at all but if I put in a print statement you can see that all it does is it just multiplies that by 15 you're not actually saying hey change the value of it so if I print out the list n you'll see that n is is still 135 you didn't actually change what the first element was so that's why you have to go here and change n of 1 to be equal to n of 1 * 5 how I read it is hey the new n of one is going to be what n of one was SL is Time 5 so now n of one is in incremented by uh itself being multiplied by five all right let's keep rolling here appending to a list we've already seen that append it says append the number four and. a pen 4 easy easy sley whatever that means removing elements from a list the exercise this exercise will expand on ways to remove items from a list you actually have a few options first a list called n so you can do pop and pop removes an item from the end of a list so let me show you if I did print and pop here's what it does it pops off the element and then prints it out now why that's important is check it out if I do print n here what pop actually does is now the new list is going to actually be 13 and it prints that result so it literally like break SL pops it out at the end of the list and and then it shows it to the screen so I almost think of it like pop just put his hand in the bucket of the list 135 took five and just shot it out and since we use the print function it took the five and shot it out to the screen and it got pasted into the terminal right here which is where it's showing and it's not in the list that bucket anymore okay so I'll prove it to you by running this code here and you will see oh I'm sorry actually I have to put the five back in I'll prove it to you by running this code here and you will see that original list was 135 but after the N being popped and we print out n you see that the pop printed out the five and then uh print n should have printed out 135 but because pop had already taken out five and threw it smacked it against the screen now the list only has one three two elements left in it okay that's the function pop that's what it does it's a method but I don't want to confuse you guys with too much terminology right now easy way to think about it is if it has a DOT it's most likely a method and otherwise it's a function just for now um okay n.p index will remove the item at index from the list and return it to you so you can also say hey instead of Pop which by default Returns the last element so in this case pop automatically puts in a two here because 0 1 and five is at location two so if you don't put anything it automatically puts in a two there but if I do index of one you'll see that pop actually puts it hand hands in a bucket takes out the three which is the U First index item and smacks it out to the screen because of print and then that item is not in the list anymore so you can see it right here right 15 it didn't it printed out the three at the top it popped it out and then it just printed out five in the list okay so we can do that and we can also do remove now what's the difference between pop and remove remove takes out that item but it doesn't actually remove it from that um or sorry it actually removes the item but it doesn't hold it anywhere so pop when you pop it out right it let's say we do uh X is equal to n of pop and that's it right and then I do print X and then okay sure I'll I'll do print n as well so what this does is this item got popped out and turned into five and then it printed out the X which is why you get a five and then I printed out the list and the print list is 1 comma 3 but with remove it doesn't make that item usable it doesn't return an item it just removes the item so if I try to end out remove um we actually have to pass in an index so if I give it index two right it it'll store none here okay so if I did n. remove one or if I did end that oh sorry in uh remove method does not take in index indices it actually takes in the number you want to give it so I I want to give it let's say five for sure right it look for that five and you'll remove it but it doesn't pop it out so you X is actually you know none because there's nothing it just removes that item from the list and that's it so when you use a remove function it doesn't make sense to actually store it anywhere is just for removing that item from the list okay whereas pop pops It Off also pop takes in an index great and then there is delete which is like pop in that it will remove the item at the given index but it won't return it so the only way it's like pop is because they're both taken an index but it doesn't actually uh return anything so for example if I call if I did delete the item and two and I print n well that item is gone but if I did X is equal to that and did print X let's see what we get here you actually it says invalid syntax it doesn't even allow you to do that okay so when you use delete you can only just do it on a line of its own pretty much and it doesn't return anything it just removes that item from the list to me I would use delete that's a nice way to delete an item um and remember when you're making games or anything more complicated it doesn't always have to be integers that you're deleting right so don't think of it like when would I need to delete a number well sometimes you might have some more complicated information in there you might have um you're let's say you're making a video game and it has a list of characters well let's say that two of those charact it's a two versus two whatever game fighting game or whatever if one of the character dies one side only has one character and the other side has two characters well from that list where you only have one character left you're going to delete the character from that list okay you're still using the same data structures even if you're making really complicated games in the back end you're still using dictionaries and lists and all those kind of things okay remember that and if you want to look more into making games with python there's a very great python Library called py game so go there and play around with it if you want and you can make really cool games I have made a few games from that as well all right remove the first item from the list and using either pop remove or delete so I'm just going to use delete because it makes the most sense and it's the easiest to understand right delete it looks like your list is 1 three instead of 35 oh they want us to remove the first element okay congratulations we have finished this section great next up is function recap so a lot of things here but let's get on to the next section all right changing the functionality of a function functionality of a function that's a bit wordy there in this exercise you will just be making a minor change to a function to change what the function does change the function so the given argument is multiplied by three and returned again they're using terminology here um uh programming specific terminology not to necessarily throw you off but to just get you attuned to how programming terminology works and that you start paying attention to it okay at first you might be like what it's like sometimes mathematicians when they're using something like given this conjecture uh according to proposition three we have the following proof you know a intersects B so we're going to try to demystify all of this and simplify what is an argument it's whatever you put in the parenthesis okay if you have something comma and another argument that's now you have two arguments okay these are arguments um function this is the name of your function this is the argument that it takes mean that's the information it's dependent on for this function to run right if you wanted to calculate a trip to a uh to some other country you would have to take into account how much the plane ticket costs how much um the hotel there costs how much you're going to spend there so automatically that function is depending on three inputs okay so that's the function being defined here and now here they're calling the function so what they're saying is change the function so the given argument is multiplied by three in return everything is fine except they're taking the argument which is the X and they're adding it by three so what they're doing is if I did so I made number is equal to 5 let me just put it here for Simplicity sake and I pass in I pass in five to our function what is it going to do it's going to change this x with our number which is five it's going to put a five there it's going to do five 5 + 3 gives you eight and it's going to return it right so let's check it out we got back eight we want to make it so instead of being added by um adding by three we multiply by three it's as simple as changing the plus sign to an asterisk you get back a 15 let's give it a try and I can guarantee you that we are correct guarantees next more than one argument that this excise exercises to recap how to use more than one argument in a function define a function okay simple okay two arguments in a function I've given you this problem before but I'm going to give it to you again try to do it without looking at anything make a function that takes in two arguments and returns their sum or make a function that takes in two arguments A and B and returns their multip multiplication or their product do it quickly all right I'm going to show you I'm going to define a function sum a comma B returns oops return a plus b now to use this function I'm just going to say sum of 2 comma 5 I'm going to say print and you're going to see that's going to Gave Me 2 + 5 which is 7 um for the multiplication one I will say define multiply did I spell it right no I did not multiply a comma B return a * B and and I can say print multiply 2 comma 5 which should give me back a nice 10 so that therefore I get a seven and a 10 here function it's very simple Define a function called add function that has two parameters X and Y and adds them together the function name uh should be add function has two parameters and added them together simple Define add function two parameters I can call these parameters whatever I want okay just to prove a point here a ridiculous point a lot of people think that it has to do with these parameters names and that they should match your definition no these are arbitrary which means that you just make them up whatever you want whatever you feel like that day okay but don't make it so confusing that when somebody else is reading your code is like what is this what is this language this person is using all right return This plus this okay and it's going to say I'm right well of course I'm right okay but that should really be wrong because that's a terrible names let's make the name simpler we can call it MN if we want it to be consistent with everything else we can call it A and B I Like A and B for this but if it was really up to me I would actually call it num one um maybe like this and num two and then say num one plus num two okay or if I really want it to be very clear with what's going on I would call it number one plus number two and now this re read really nicely we're defining an ad function that takes in a number one and a number two and returns number one plus number two it's really easier to read Than A and B some arbitrary variables all right start next lesson string and functions write a function called string function that takes in a string argument and then returns that argument concatenated with the word world don't add a space before World takes in a string and then returns that AR concatenated with the word world okay simple let's try it let's create a function that takes in an input and add something to it so let's say that we took in whatever we took in we wrote um ice cream next to it okay if we wanted to so we would just simply say oh sorry I would Define the function define string function and it would take in something and and what it would do is return something plus is not an ice cream that's what I wanted to say okay with the period let's run it oh yeah print Python 3 you got to put parenthesis parentheses hello is not an ice cream because we took the string function passed in hello to it what it did is went up to the string function put in hello for something and everywhere it saw something it put hello there if you put hello right here now it says hello plus is not an ice cream notice I put a little space here if I didn't put that space right there you would see okay first of all okay so let's say I didn't put this space here you'd see Hello is not an ice cream right next to each other so I put a space there it makes it nice okay and if I want it to be fancier and use string well this is I think this is pretty simple let's just leave it at that okay so did you I I I just want to make sure you understand what we did okay so again put in hello for n right this is n so this is hello string function gets called on hello this parameter takes in that hello and then returns hello plus whatever we want to put there so now you try doing this one on your own and then watch the video all right so I'm going to Define it right here Define string function takes in something returns something plus they want us to say world that's it don't forget to add a space before World you see that don't oh it says wait don't add a space before world oh so I guess they want you to do it at the same location all right hello world look at that introduction to using functions with lists nice so now we have a function right here Define list function it takes in something we're assuming that something right now is a list and it returns that and we're creating a list and outside of the function and then we're printing out the result of calling that function and passing in that list so what happens is that n is this it goes to that replaces this with the list and then it returns that list this whole thing just turns into that list and gets um or I'm sorry this whole thing gets turned into that list and because of that that gets printed out to the screen 357 so let's run this one really quickly okay fairly simple using an element from a list in a function passing a list to a function will store it in the argument just like with a string or a number Okay so what are they saying here passing a list to a function will store it in the argument so basically what they're saying is that if you pass it in here this argument here you know this x is stored that argument is stored you know so that list is stored in the argument all right what they're showing here is something really simple we have okay it's kind of cool and so let's talk about it right so this argument here is just an arbitrary argument if you gave it a number it would be really confused on line two because let's say you gave it a five it would come down here and it would say give me the zeroth index of five and then it'd be like what am I what the heck am I talking about that's doesn't make any sense and the program would poop out and give you a giant red error saying you can't index an integer right if I open up my terminal and showed you really quickly it said like in object is not subscriptable right right here it'll like start crying so we're assuming that we're getting a list so let's say if you got a list here then this part turns into a list 5 comma 4 and calling zero on this list getting the zeroth index of that well that simply evaluates to five and that actually gives us back something nice so imagine we created a list called numbers and we pass that list to the function first item it would go up to that items would be stored as this list right here 279 and on 279 we would get the zeroth index of 27 and9 what's the zeroth index of 27 and9 it's two this would get evaluated to two and that would get shot out to the screen so let's see it in slow motion all right sorry I'm not going to go into post production make it slow motion but you hopefully got my point all right let's keep rolling change line two so that list function returns only the items stored in index one of X rather than the entire X list so we are going to pull out index one so if we pass it in this list it would pull pull out 5 but when will this it's also always good to think about when will this program poop out you know why because if you have friends who are programming you want to crack their code and you want to ha break their code to embarrass them and also hopefully to teach them a not teach them a lesson but to maybe help them find a bug so they can fix it and there are also jobs called programming testers who make a ton of money every year so programming testing is an actual job so their job is to try to see what edge cases break the code so it's a good idea to try to break the code all the time either you can make fun of your friends or get a highpaying job or both so the case where this would break the code is if I gave it a list of only one element it will try to index the second element because it has a one right here and it will poop out and give an error I can also give it a list with no elements I can also what if I gave it a set uh a dictionary what if I gave it uh an integer right or a float number all of those would give you back errors if I gave it a string right like hello that would work because you can index a string so it would pull out the e but if I gave it a string with only one letter in there it would poop out right so just to uh just be aware of that um okay this should be good we gave it 357 it went up here pulled out the first uh second element five or the index one and returned it very simple modifying an element of a list in a function okay so we're just modifying an element of a list okay so basically let's say that we have this list 357 right what we want to be able to do is pass it to a function and have it change one of the values inside of that list to something else permanently so let's say right now this is five once I take this list and dump it into my function machine that CHS out some kind of output so I dump it into my function machine my function machine takes this uh list and makes changes one of the elements and then Returns the list okay so let's say that I wanted everything every number in my thing to be multip multiplied by three or I wanted one of the numbers to be completely changed uh and multiplied by three so let's say I take Define uh a changer I'm just going to call it changer and it's going to take in some list I just say list one and I'll take the list one's uh second item and or sorry the second item and multiply it or sorry yeah multiply it by five and change it like permanently right so since I want to change it permanently what I'm saying is that the new list one so the new second element of that list is what that element was up to this point multiplied by five okay so and and here I'll I don't have to return anything I can just say print uh list one right that's it and I can say print list one here as well just so it can print out and show you how the changes took place and here I can Define some list um I'm not going to call list one because I don't want you guys get confused that um function arguments have to match the variable names outside of the function sometimes people get confused with that so I'm not going to make it list one just to not confuse you but list one would be a perfectly good name name I'm just going to call it list underscore and I'm going to say this list is you know has has uh three elements in it and I'm going to call them a changer function on this list so let's run it and you can see that it was 54 and five but after it got thrown into my function changer right this machine and then it once it goes into this machine the machine is like like it does something to it for three whole lines right 2 3 4 but really the third line does something to it so it takes it and it turns up that one of the numbers in it and mutates it changes it to something else and so now that four is now at 20 and then it takes that and you know just returns it or whatever and that's it we're done so they're they're just kind of showing you that here and actually they're giving you um example that does just that so it takes in the zeroth element and multiplies it by two so it takes in the first element multiplies it by two that's really what they're doing okay so we're going to change it so that add three to the item at index one of the list so we're going to take this is index or sorry this is index one and we're going to add three to it right we're not just doing this because this will just take that number and if it's five we'll just do 5 plus and 8 and done you're not saying that hey um make the first element 8 you're just saying take the first element and just add three to it and then what do don't even print it don't do anything to it just add three to it so it'll it'll go sure it'll do that on the back end but it won't that statement won't be useful to you so you want to say do that to X of one what x of one was up to this point um or I'm sorry the new X of one should be what it was up to this point plus three okay store that result back into index one and we did all that on line two and return the list so return X in this case terrible terrible names but that's okay so you can see that we passed at the list 357 but we took the second element incremented it by three and made the five into an 8 and kept the rest of the list the same okay where are we we're at modifying an element of a list and we're in the section introduction to using functions with lists let's see how long the next part is so we're going to finish this part and this will be the last part of uh this video and this is code academy python part 14 hard to keep track of this now but this should be the last thing we're going to do and then I'll see you guys in the next video so let's keep going through this right here all right you can also append or delete items of a list inside a function just as if you were manipulating the list outside of a function so you guys have already seen a little bit of how we do aend and delete items and remove and pop and so on and so forth Define a function called L list extender Define list extender that takes in that has one parameter LST is a common way of saying list in Python the reason why we don't say actually list is because list is a defined word so that's why we try to stay away from that right just like Dell is a defined word or print is a defined word uh Tuple is a defined word so we try to stay away from using the defined words because we don't want to change the meaning of something that already exists in Python itself so LST and inside the function a pen number nine to the list so we're going to do list do or I'm sorry list. aen n so that will add attach on a nine so if we pass it this list then it would just tack on a nine like that and then return the modified list so return what will happen if I had to break it down n is equal to this it'll pass that into the function list extender it will come up here pass that list in right there uh it would take this list and do do append on it and append a nine to it and now this list effectively becomes that and then it returns it returns that list with the nine at the end of it now let's check it out don't take my word for it let's prove it by running this and you can see that we have added a nine congratulations guys we've finished this section this is it for this video this is kazy from clever program.com and this is the end of code academy part 14 I will see you guys in the next video