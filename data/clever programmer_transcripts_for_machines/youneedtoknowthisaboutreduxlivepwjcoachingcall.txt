what's going on guys welcome to another video and today i'm excited to drop another coaching for on the channel and today we're going to be covering a bunch of redux stuff and a bunch of value based propositions so get excited it's going to be a fun video and without further ado let me go ahead and introduce the amazing community that we have over at profit with javascript say hello guys yo hey that's it let's go that's what i'm talking about guys let's go that's the energy that we want to get started yeah it's cool awesome stuff guys nice all right now guys i've literally we were having a great conversation before we've literally started going live so i'm gonna go ahead and literally carry on from where we were going off and we are we were pretty much answering questions so guys let's jump straight back into that so we started off with priyanshu had a question and then uh whoever was about to ask question afterwards go feel free after after preentry so you shoot yeah so i was asking about typescript so like i've done a lot of javascript now and i'm also going to do a lot of it again but typestrip is like something like a strongly typed language and and it has a lot of concepts of classes and objectoriented programming in general so like although it is a very evolving language it hasn't evolved yet people are still trying to learn typescript and like getting a hand in it and but i don't know the future of it so like if you could just introduce us with it and like the future of it and everything like that yeah so if if you guys don't know what typescript is you have javascript javascript's the language that we code in whenever we're doing like web development or the brains behind web development uh typescript if you've come from a language like java or c sharp or something like that you'll notice that in those languages you have things like uh you have to define the type of a variable so you have like string number integer double float things like that you have all sorts of types now the reason why is because it's meant to be a strongly typed language right so it's strongly typed because notice how in javascript all you have to do is sort of type in const name equals priyanshu and it just works right but if you was going in typescript you'd have to say const name colon and then you would say string and then you would say parenting and then what would happen is if i tried to give um if i tried to give oh nice corey's in the house what's up dude uh yeah but if i went to go ahead and give um let's go ahead and say i tried to give a constant name so imagine that i'm just going to go ahead and you guys can see my screen right let me go ahead and share it now so you guys can see this yeah so imagine like we had um something like this we had kant's name and then so this is what we're used to right so this kind of thing in typescript you basically have it like this uh i can't remember the exact syntax what i think is that yeah uh i think it's that yeah um because i used to code quite a bit anybody it's been a while um but let me go ahead and freeze it nice oh man okay yeah so there we go so you'd have to do this but now imagine if i went ahead and did this right so i went and did something like this uh what's going to happen it's going to freak out it's basically going to say no no no this doesn't work because we're protecting uh against this sort of this sort of headache but we don't want to have we don't want to allow for anything but a string inside of it so this is the benefit of oops it's the benefit of typescript right and there's also a bunch of other stuff there's like classes i mean you get classed in javascript but there's also like a um i used it so much a while back but kind of arrow functions are part of javascript um but but there are a bunch of things involved in typescript but what we'll do is we'll have a deep dive one day on typescript and we can pretty much go through that but to answer your question priyanshu um so the future of sort of typescript and what is it about um wait where's uh they move everything also i just have like one other thing a lot of uh companies like fan companies use uh typescript so i mean i think there is a still a bright future for typescript there's a definitely a bright future for typescript 100 the the thing i would say for uh production environments building in typescript is actually really powerful right it's really powerful because you're protecting your code base and the thing is when you introduce typescript you can either do it at the beginning so you can either build the project from ground up with typescript that way is that's kind of the but be careful by the way so whenever you use typescript there's also a type of um a variable called any right so you get string number and you can also have any now any stands for it's kind of like you're kind of going back to javascript then because you're letting any type of variable like yeah you're letting any sort of um any value go into uh that that variable so it could be a number it could be a string so you you want to kind of stay away from that otherwise it kind of defeats the purpose so you want to kind of give everything set values but don't want to get too far into it but the main sort of takeaway from this is yes typescript is here to stay uh it has a place and it's very very powerful but the main thing is for example if i was to get a freelancing job right now would i code it in typescript no why because it adds quite a bit of time on to the build it complicates the build it adds maintainability to the build i wouldn't sort of scream against it but i wouldn't personally do it now um in the new build for a client if only unless they requested typescript or if it was for a team effort or something like that would i recommend it if i was to go into a team so i've actually gone into a team before and um and implemented typescript when they didn't have typescript so i actually went in and i said to them i think typescript would benefit the team because basically by introducing types you pretty much eradicate a ton of bugs because it no longer it sort of prevents you from it prevents um how do i make a gallery yeah it basically prevents you from having like you know uh unexpected variables being sort of used when they shouldn't be um but you can pretty much you can you can introduce typescript halfway through a project so imagine you've got a huge javascript project you can actually go ahead and slowly translate files to typescript you can also do that uh and that's it with uh es with uh react yeah so remember javascript is the language the react is just the library in javascript so think of it this way so you've got um um let me show my screen okay so imagine think of it this way right so you've got you've got so many keyboard shortcuts so you've got uh javascript right this is like the brains of web development we all know this we all love this right and then you basically have um so then you have react and react all reactors is a library that uses javascript right now typescript is basically like they call it a superset which means it's basically just an upgrade of it basically adds on stuff to javascript right absolutely all the types of code all the javascript code is actually valid right like just like json is valid to javascript it's like javascript so i didn't type script yeah so to remember every single thing that is in typescript it remember it has javascript inside of it so it says it's javascript with extra stuff that's all the way that's all you need to think which means if you write code in this in typescript you have to do something called a transpile step transformation transpilation or step right now do you need to know exactly what this means no it basically just means that there's a step involved which converts this code to typescript to javascript sorry because this doesn't run in the browser this is code that we write and then there's a step which basically converts all of this stuff to this stuff but we don't see that step is in you just kind of implement it or you use like a template or something like that but we're not going to get into that right now but the main point is this browsers run javascript we code in typescript and then this this special magic makes this code work in a browser okay so that's how it works yeah so that's how it works um but let's go ahead and oh my god thank you my question was um sonny my question was we we've got react node.js and javascript okay now node.js i'm not sure where it fits into the equation i thought it's a frontend stuff that my mind is saying is backend because i thought it renders javascript but where does it actually fit in and i'm i'm listening and i'm seeing that people are studying node.js i thought it just something sitting there waiting to receive uh javascript commands am i right uh so the way it works is you're close you're very close and it is a confusing thing i think it's you're not the only one who's going to be confused about this so um pretty much uh yeah this will be up to help you out um i hope a few people so again share my screen boom let's go back to the drawing board so imagine you've got um the question was node.js what is it right so in encoding you've got front end and you've got oh god's sake god damn it you've got front end up front end and you've got back end right um uh back end now in an app what does this look like front end is basically where the phone is so this is where like the phone the desktop whatever it is this is where the client goes and sort of like plays around with the app so it's got some kind of header it's got some buttons on the screen it's got for uh you know this is your web page right so this is the web page so web page uh so this is your front end so the the the the person's gonna play around with your front end now that sounds bad um and then you've got the back end right i just realized and we're on youtube so yeah um then you've got the back end which i'm not going to say that and it's just something else right okay okay and then you've got the back end so here you've got this will be like the server right now on the front end you've got uh the so everything runs javascript okay so when we're talking about no okay so so javascript runs on the front end and it also runs on the back end right you can use python and stuff like that on the back end but we're going to assume that we're using javascript across the entire interface right so on the front end you would have react so here you would have react okay you'd have react and then that would render out this beautiful front end that we would basically go ahead and build now on the back end you don't have react react is a frontend library that uses javascript on the back end we have a runtime environment called node.js and all that this does is it basically node.js is basically like imagine it's like an environment that basically just runs on this server so it's like it's an environment that just runs here and it lets you execute javascript right so all you need to know is that whenever you see react it's always frontend whenever you see node.js always backend right so about why people learn why do people learn node.js do they they say they are learning node.js is it just for cli like command line or has node.js got a language that you've got with it uh so remember node.js is javascript so when if you learn some javascript on the front end you're going to be able to use it in the back end as well but what you need to remember is so let's say we had a web page right and let's go ahead and say like this had some kind of booking system so i went ahead and said like same say this was airbnb so i go ahead and i input some i want to stay in london for three nights and then i click book right so i'm gonna go ahead and click book over here now when i click book it makes some kind of request to some kind of server right and on this server we could have like mongodb run it like we can have some kind of database we could have firebase at the back we could have a few things at the back right and what we do is basically like when we book it it sends something called a request now this is where you might hear the term of api so you might hear like an api being used now an api all it means is how things communicate like from the front end to the back end right now the benefit of an api is that companies so imagine you want to basically talk to paypal you want paypal in your website then paypal provides you an api which means that you can talk to um the the paypal backend sure right and then they will basically allow they'll provide you instructions on how you send things over to their backend and then how it comes back to you right now we can also build the entire back end uh which is which is what we pretty much do in a lot of cases so i would recommend if you're kind of confused and it still doesn't make sense the two takeaways from this right react always front end right so whenever you hear this it's always front end right never get that too confusing that'll sort of simplify everything node.js is always backend and this this but sony when we are using node.js like it can be used for many different content stuff like we can like without node you cannot do react you cannot do electron no no see that that's where you that's where the confusion comes in that's incorrect the back end is node node.js is not a language node.js is something called a runtime environment which means that you would have a server like running in like aws or firebase or something like that or like a cloud function the environment would be node.js right now this is only running javascript so remember every underneath the hood imagine like these are just two different cars right so you've got like a car running react you've got a car running no i mean this is not it's not the same thing but i think of it that way right and under the hood is javascript every time right so whenever using react or node.js but remember uh in order to run any sort of like code on a backend server you need node.js running on that server right so you need nodejs or dino is now popular you can run dino on the backend server and then run your javascript on that um and but on the front end you don't so browsers by the browsers like have a support javascript out of the box they let you sort of run javascript on a browser which is why every single web page we use has javascript um and then we can use libraries such as react to go ahead and build these like really nice web pages yeah so javascript yes and the reason why is because you can do frontend development and backend which is why we call it full stack because it's the entire stack yeah so adding adding to that analogy we also use v8 engine inside of node and react yeah so remember try not to get confused with the the engines just yet like all that stuff uh that's just like the sort of versions and stuff like that and and certain every time there's an upgrade for example i think it's in like version 8 and above you could start using optional training or something like that or there was a certain version where you had to be at to use like new features of of javascript but the point is is that that's like a separate thing but yes to answer your question um your that's where you basically would have you you would set the engine inside of package.json so you'd usually do that inside of package.json and that's where you'd set something called an engine but in this case guys if you if you don't know what i'm talking about don't even worry about that for now just know that about this stuff and this is what makes more this is what you need to focus on so we have front end we have backend and node.js is like uh iis or like apache in the lamp stack is that correct um okay so yes because is also a web server apache is also web server and node.js is also like uh acts so this is just running your javascript phone from the server the same way the server is also an operating system so like and on that server like linux you install apache or the nginx which will run your services you can run php also on that one then yeah and honestly i wouldn't get too involved with um with um uh like apache and that stuff because that goes into devops territory which is something you can move into in in time and kind of get involved with now top tip for you guys for everyone watching even on youtube um if if you do want to sort of branch out and sort of you want to up your income devops is is an area where there's a lot of money like is that's just something which i'll say so i actually sort of like took on a responsibility in my first job of just one of the developers touched all the devops stuff so i pretty much just shadowed him so i pretty much sat next to him i was like dude just show me what you do and uh i picked up on a lot of devops stuff and the pay is really high for devops work and it's also it's pretty cool stuff what you can do at devops now devops is just kind of like i'm not going to get into devops today but you can go ahead and check it out but devops is sort of more of the the the pipeline of when you push code what happens how is it sort of like pushed in how do how do you sort of like scale deploy that sort of stuff is always your deployment yeah it's all that sort of continuous integration mainly yeah so continuous integration things like that yeah yes and cd yep ci cd pipelines i have one question yeah like i i work in asp.net as a full stack so there the build time of our application is quite high okay so how can we compare that build time because it every time it when we build something so it takes a toll on the developer like you have to wait for this much time every time you build so in a large uh um like an organizational level project so what is the if it's a big project suppose say one gig or higher so what is the build time or what can be approximately the build time is it fast or is it slow according to your experience so that's a very broad question because uh if we build an app right now the build time's going to be super quick there's not much to compile there's not much to add in right if you have loads of pro like you can have something called husky which is where before you push your code it runs a bunch of checks and it runs a bunch of like they're called um precommitments so you can do test scenarios and things like that but you can have a bunch of stuff like that involved and and you can have loads of different things like which happen um when you basically go ahead and and commit and stuff like that um and you can also have a bunch of a bunch of other stuff happen when you push some code so but the thing is is that look when you have a build step it depends on on sort of like if your code is getting so let's say all your code was written in typescript then um it would pretty much it would pretty much be a case of uh uh it would take longer because it has to transpile all of the code so you see what i mean it depends it really depends on what what is in your build right really depends on that sort of stuff um but with that said that's a really good question actually um and also um i see comments coming through on on on youtube as well so we i can see you guys on there but this is mainly focused towards the people's attention so ask a quick question about reaction go for it yeah um so basically i so i started learning javascript and then i think i discovered reacts a little bit too early and i dived into reacts and i just loved react and react is amazing yeah um and one of the main reasons i joined the the bwj was because i was lacking a lot of the javascripts um building websites in javascript yep but my question is should i keep specializing in react yup and not focus like so so much in building websites with pure javascript because i feel like it's a lot easier to build a website to react than it is with javascript um so i was wondering is it is it good to specialize mainly in reacts and follow reacts like properly yeah so really good question i think that's going to help a lot of people but the question is pretty much should he stay on like web pure web devs or html css javascript or specialize in react right now what i would say is i okay so to answer your question in an example i never write websites anymore in pure html css javascript ever nice ever ever ever right i i always use react yeah because yeah it's just so much easier i literally do npm uh create react app npx create react app and boom i'm up and running and even today i'm going to show you guys the template for redux and pretty much you can go ahead and it just goes ahead and um sets everything up for you right now remember there's a few things that you need to consider when you're doing any of this stuff so why did react get popular it's because it it's so quick and easy to get up and running it's pretty much plug and play and it's very lightweight so so if you need reactroom you can plug it in if you don't need it you don't need it it's going to make your website quicker without it right as in it's not going to slow it down much with it but the point is that you only have what you need whereas with angular and things like that it's very heavy you have to have pretty much taken everything and then kind of go with it that way so my advice would be specialize in react and the payoff would be a lot greater than sort of trying to branch out and this is also asking answering a question of which framework slash library should i learn like should i learn view or shall i angular and react maybe i should learn both and no i would say specialized because if you if you can provide a tremendous amount of skill in one thing then you're going to basically be worth a lot more right so so so remember like and the one thing which is which is really good for you guys right now is that you you're actually a very lucky point where react is so you can be super specialized in react and it's worth a huge amount and it's pretty much it is here to stay like i'm telling you it's going to be here for quite a while like react and then the benefit and the beauty is is that because it's full stack the skills you're going to require when you do react are going to be very much cross you can pretty much go ahead and like if i need to code in python now i can pretty much go ahead and pick it up really quick like i really don't need to kind of like go back and kind of expand ages i kind of because because you know the programming principles and you've practiced it you've done full stack development so you've done front end back end it does really after that point it doesn't matter really what's being used the things which might differ react is going to stay for a very long time on the front end um you're going to have iterations like serverside rendering things like that which are definitely worth investing in i'd say so to answer your point as well specializing in react is one thing but sort of taking it to the next level learning about serverside rendering and react things like that like next js preact they're gonna be quite beneficial because you can go ahead and say to a company rather than your website taking like uh a few like 500 milliseconds now it will take 200 milliseconds now that might not sound like a big deal but when you've got millions of customers or something like that okay it literally makes it like it is ridiculous how much money that that translates to for a company which means imagine you can basically go ahead and say okay i'm going to make your website load this much quicker right now you can ask for whatever you really want you can ask it really doesn't matter about the money if you said i want 30 grand extra they're going to be like well you're going to save us this much and trust me when i say they're making a lot more than 30 grand from the tradeoff right in a lot of these cases so uh i'd say specialized yeah that was a really good question dude that makes that makes me really happy because i'm i i think for me at least react is so much easier to build websites like yeah so much easier i mean even with css handling and things like that it's going to be uh yeah 100 like uh it's just something that's another thing we want to add a point to sunny's point hey hi hey dude how's it going so i actually wanted to add a point to what just sunny said yeah he said like react is so powerful actually what happened was a company was asking for uh angular weather like for an angry developer i said i'm like specialized in react and they still wanted me to go further with their interviews they were like dude can you just make uh this happen with react and they took it seriously and they were even ready to pay me more for uh reacting one of the interviews actually oh man so so the original job wasn't even for react no no the position was for an angular developer nice and i applied i told man i can't do this i can't do in react it's like i can't switch from react to angular that's not the way so they were like um okay interesting so can you make it they challenged me actually can i make it in so i have an interview around for tomorrow maybe it's the second last round awesome and it's around so i have a pretty big challenge in front of me dude well we've been like good luck one and two i think that's awesome like and that's not that's not the first time that's not the first time i've heard that as well that's that's yeah honestly like let's see you've got the whole community behind you dude um and and i would say that's not the first time i've heard that as well that's really a common thing as well like i've had so many people who that our companies are offering an angular position and what tends to happen is that you say like oh yeah i know react and then they're like oh actually um yeah you know like go ahead and do it with react because we kind of like react we just never we didn't make the jump yet so uh a lot of places are like that um i think that helped a lot of people out so thank you for that um somebody i just want to add one one question from so this is from somebody on youtube and i think it's actually a really good question it says um for enterprise application development angular is better had this question in the interview so i disagree i disagree because okay split it this way um just think about what's in practice as in companies that are using this stuff um and you guys might not be able to see this right now but it's pretty much i just highlighted a little question um but is it all they're saying is angular is better for bigger companies and the point is um so i actually worked inside of tesco now if you guys don't know what tesco is tesco is like the walmart in america so if you do you guys know what walmart is right like that right yeah exactly so like it's basically like walmart it's a huge shopping complex pretty much right around the world yeah exactly right around the world as well right now exactly so thailand even the thailand website one of my good friends i actually brought him on a coaching call early on uh he was working on the thailand integration in tesco so i'm good friends with that guy who done that stuff for tesco so it's pretty cool right like and and all of tesco uh the entire tesco website is react right so every single thing is react so to answer that question um no it doesn't matter about size sunny uh yes powerful yeah yeah so related to the pedro's question about direct jazz so actually other cases in production where you prefer using uh just paper js css and html uh compared to react or just there are no such cases since uh for production i mean not for learning projects yeah but especially for production maybe for us even small website for a small content website yeah where it doesn't have any connection with uh ipi and javascript yeah i would say uh honestly no i mean like what i would say is to answer your question in a more in a more focused way no to there's not a need for doing it in pure html css javascript but there is a need in some cases to do very sort of uh granular javascript tasks so so your understanding of pure javascript sometimes is needed so it's a pure javascript meaning like dom manipulation so like as in how to find elements on a web page things like that sometimes you need to get a bit hacky with javascript right it says so you kind of so it's kind of a balance of knowing enough but they're not getting too bogged into sort of like um as in the point is that everything can be built with react but your understanding of javascript you should sort of dial it into a point where you're comfortable manipulating the dom you're comfortable manipulating things like that and right it's still based in javascript so yeah yeah exactly like it's going to be kind of um but yeah you never i never ever find myself in situations where i'm like you know i should do this in pure html css javascript if i see if i see somebody's built a website in that i either a run the other way or b i pretty much would propose that we rebuild in in in something that react but i wouldn't really take on anyone who who who's doing that approach yeah react is that you can integrate vanilla js and html all into one file yeah yeah yeah so you see jsx exactly jsx is super valuable even if even if i for instance if i have a lot of uh content on the website uh let's say i have like a lot of pages there for my website with the content so uh in that case i'm gonna use react.js but uh anyway it contains a lot of html pages uh in the in the directory right anyway yeah so remember have you have you done uh have you done any other clones yet out of curiosity not really not practically enough okay so one thing i would say is it would really benefit you to to to go through the clones at some point because you'll see how it will answer your question on on having several pages because everything in react is component based which means even every single web page that you kind of would be looking at say you have the the home page the contact me page the my account page would pretty much be a component inside of react and then you use react router to render the separate pages and then they do very clever things like lazy loading like things like that so it only loads what it needs to load until the point at which you need that page and then it will go ahead click it and it's super fast like um but but i would recommend looking into react router because that's going to show you how to have several pages on the website and i would also recommend um oh okay yes and nars actually said we need to enable pasco okay yeah so you guys are right uh we'll fix that in the next call um but also um i would recommend the clones are really going to help you sort of uh answer that question yeah cause that's that's a good point does does it make a difference because you know obviously you'd have like one html file for like the homepage and then an html for the contact page but in react you would have like a bunch of different components per page does that slow down like if i would have like imagine like 20 components in the main page and then in the second page we have another 20 components would that slow down or or is it still is still really fast um so no no it would be really fast uh i want to say facebook has almost 37 components that's true that's a good point yeah so that's a really good yes i think literally the examples are really good at sort of demonstrating it but um no so everything is react is very clever at staying optimal it's very very tight because he only renders he only renders what he needs to render each time yeah that's that's a good point yeah yeah it only runs that's why they use microservice architecture dedicated to a particular purpose or particular service yeah and that's how facebook keeps it it's super neat and clean exactly and they also uh have uh interestingly enough they actually have so micro service architecture something which i recommend everyone go ahead and read up on it's quite a valuable thing to know about but they also actually have um front end micro services now which is even which is quite crazy enough like uh where pretty much they they can scale up scale down on the front end components and then you have component libraries it gets really it gets really kind you can optimize everything put it that way um but for for you guys when you're learning react the only one thing i would say at this point that you should worry about optimizing is use of um a keys so you know whenever you have like a a list or an array make sure you're using the correct keys now a key a good key is not the same key for everything right a key the whole purpose of a key is to be unique right so to be unique now if you don't know what i'm talking about just pretty much we'll get into all that stuff that was the question i asked a couple weeks ago yeah yeah exactly i remember it came up in the core yeah yeah um and then we'll jump into the bone all right yeah i was wondering for two days yeah like uh what are the things i need to learn to means like be a front job ready front end developer so job ready front end developer all right um okay so it's it's a pretty big question but i would pretty much just go ahead and just do a quick whiteboard session on it so yeah so things you're gonna need things you need as front end oops front end dev all right now what i would say is we actually create a whole youtube video on this me and kazi um go ahead and check that out yeah yeah i went through all those things like because but i was like wondering about like uh i need to learn all those things yeah if you could like write down the list yeah okay yeah so remember like try not to get it so so always keep an open mind because even what i write on this list could be outdated tomorrow right as in it gets very it's very quickly moving so i'll show you some tactics to stay ahead of the curve but html this is your fundamentals this stuff has to know you need to know this stuff right and i'm not saying you need to know it to a point where you're a master because even never consider yourself a master i still don't would i still don't call myself an expert ever in in react i literally always keep like a beginner mindset of like no i can learn more like as an or never have like oh i know this stuff you know i know i know javascript like you always want to keep sort of an open mind to that stuff so uh hate this is going to be your fundamentals now inside the course we we cover a lot of this fundamental stuff inside of like modules one two three upwards right so you can pretty much go ahead and use that to to strengthen this uh i would recommend using things like flexbox foggy to go ahead and work on like your your flexbox skills because that's super useful um css grid is another one which will bring i think we should do a whole coaching session on css grid because it's kind of an intricate thing but it's really powerful even i always kind of forget how to use it and then i have to do it like a little refresher course before i use it i wanted to ask like uh should i just go with the flex work for now and after learning a few things a few more things then i go for css grid or yeah like after learning yeah yeah go with flexbox uh all my clones that i that i use uh are flexbox and and they look beautiful so everything's pretty much in that so the next thing is so once you get to a pretty comfortable point with this right with hdmi css javascript literally now people there's always a popular question and everyone sort of asked me like um so so something like when should i when do i know when i'm ready for react or maybe i jumped in to react too quick honestly like if you can get a web page up right so you literally imagine you you built out a web page and then you you were able to get um you you got some text on the top you pretty much had like a button um and then when i clicked this button uh i got like some output so it was like oh my god you clicked the button like wow it clicked right now to get that working it's going to use a javascript now i literally tell people they're like no sunny like that that can't be enough i'm not joking when i say like if you like once you literally get some css working on this page make it look a bit neat you have a button it outputs some stuff you pretty much connected html css and javascript together right i would say don't waste any more time just kind of like jump into react because you're still going to be learning this stuff but like why delay it like why kind of go the old school route and relearn everything and do it just just start using react and my best advice would be do it with the clones and pick up on pattern recognition pattern recognition meaning um you're going to start to see trends you're going to start to see like patterns with what we do in every build it's going to help you sort of advance so react is going to be very important there now react goes it breaks down into like a bunch of things so remember like i said it's a library so it's a very lightweight library react right um now uh it consists of a bunch of things inside of it so you've got like if i want page rooting right so if we need if we need like multiple pages in an app then i would go to react router right so react router if i need like if i need data management inside of an app right it says in so i need to like sort of handle the flow of data in an app i would recommend learning the react context api first right and then i would recommend learning redux right so this is like part one and then this is part two and now many people are like yeah but suddenly everyone uses redux in professional environments but all i'm gonna say is like trust me when i say you're gonna save a huge amount of headache and time learn this first understand how the pattern works with like the way you dispatch actions there's a reducer what the heck is a reducer all that sort of stuff like understand how it works because this is a really easy and quick to integrate again all of that stuff is in the clones and we have like 25 clones now so you literally have 25 pieces of content to go ahead and practice this stuff through and then i would say once you understand the pattern then move to redux and today we're going to be covering redux we're going to be going into a deep dive into redux and i'm going to show you a bunch of different things inside of redux and how we can go ahead and work because redux is something again like i said it's going to bring you the most value when it comes to actually applying to the job so what's most important in this point so i'm trying to not list too much because i want it to be actionable right so i would say at this point react is definitely going to be like this is where your monies are yeah so if you can pretty much get this down you're gonna be you can pretty much get on the way to making some money now um a part of a frontend developer is making things look beautiful right if you if you're a frontend developer and and stuff looks really ugly all the time chances are like your trust value kind of comes down people are like oh yeah do i really want him to build a an app that looks like it's meant to be facebook but it looks like an oldschool 1990s like piece of crap like no you don't want that right so i would recommend really diving in getting your flexbox down right look into things like material ui so material um material ui material ui now this is what's up we also have chakra that's another ui library for react if anyone's interested you can check it out oh yeah so chakra there's a few that are out now remember these are the reason why i say these are good these are good for personal projects to make things look really beautiful to get things looking a nice kind of way but the point of using design libraries and stuff like that is because is that you're gonna start to see trends you're gonna start to see what's in fashion because literally just like you paint a house and you know like sometimes grey's in fashion and you get like houses where like uh everyone starts to paint their houses like inside interior gray and you're like okay well that's kind of a thing now like it's the same thing in web development right it's the exact same thing in web development like the the web kind of goes in and out of fashion and you basically need to keep up with that so i'm going to give you guys a little trick right now uh what you can do is you can go ahead and check out um this website so this is a really good website i actually teach a lot of my oneonone students says so dribbble.com now dribble's amazing because like let's say you you want to build an app or you've got a freelance client who wants to go ahead and do some kind of like they come up to you and say hey sonny i want to build like a um a financial app right then i would literally come in here and look there's they've got some designs for a financial app right so now you've got some kind of inspiration now did i pay for any of this nope i just pretty much came on this website it's free but notice the design so let's look at this design for a sec right very flat very flat you don't see 3d buttons you don't see like 3d things everything's kind of like crisp and flat right the colors are sort of like matching and things like that now let's go ahead and look at an app like let's go ahead and go over to here right so you've got like a gadget store out now what do we notice here oh again everything's flat right yeah it's following this flat there's not an overload of colors there's like a powerful use of white and then they sort of splash colors in at different points and you can start to tell but and the reason why this is so powerful is because this is the current trend so the current trend the current in right now is modern flat design yeah so flat ui so i and this this is something which we always see when people tend to build their um uh when they tend to build their sort of like portfolios and stuff is i see like 3d buttons and when they hover over it the button kind of pops out a little bit and as much as we love that uh it's sort of against what's in fashion right now right so it's kind of like instead what's in fashion right now is if you go to like let's go ahead and quick quickly have a chicken check out material ui let's go ahead and do button and you guys will see like look at when i click this button you're gonna see like a ripple effect yeah so this is like google's sort of ui library and you see this is like this sort of in it's a very sort of nice beautiful sort of like very simple but elegant design right so all this stuff is if you just want to be a frontend developer it's crucial in understanding this stuff now going back to what we were doing so again master get really dialed in on this stuff and react right don't over complicate it because i saw like even previously when when you first asked a question there was like a huge list of things right remember just like pedro said the goal is not to be like a master of every single thing is to to really harness your skill set and and and build your skill in in in our case react right and use things as you need it because i'm like if i was to say to you hey um it's kind of cool to go ahead and check out a vr react library you'll be like oh that's sick like yeah but i mean that's going to come in handy one day but i can guarantee pretty much hardly any client is going to come to you and say i want a vr library it's going to be very rare so you see like it's all about picking and choosing what you're going to be using most in this case this is going to be pretty much the main things you should dial in on before progressing anywhere further hey sunny i have a good question is bootstrap used much anymore uh so yes it is used um bootstrap is they recently actually just got rid of jquery support inside of bootstrap so that's really interesting um so a lot of you guys might have heard of jquery in web development world jquery now is no longer supported in bootstrap 5 which is telling you something it's basically jquery is slow javascript's involved you can pretty much do everything if you see code written in jquery just know that that's not a good thing right that's not a good thing now to see code written in jquery you can pretty much refactor everything to go ahead and and make it like es6 javascript um and i always do that and i always sort of like have a go at somebody if they do it in in in jquery because it's not a good practice right to go ahead and do that so um i don't even look at what if it's jquery yeah i think when his days are gone yeah i actually to be honest it's true i really can can you bring up that screen that you had uh yeah sure dude uh not the dribble not the dribble this one no the tools yeah thanks yeah so go ahead screenshot this guys if you need to um yeah so so that's gonna be i have a question yeah like all the full stack positions are asking about docker is it possible to have a lecture about docker oh about docker yes right so so a full okay so this is something interesting as well so most full stack positions will say to you like oh yeah docker right they'll list that in the tools of things to use now truth be told yes i've used docker in the past um but do i know how to use docker off the top of my head nope like if you ask me like i said do you remember how to do i remember docker compose up and down uh beyond that like because i really don't remember i only i literally use it as and when i need it or if a company is using it i will use it uh i i don't think it's the skill you should be prioritizing your time towards it so it's in a sort of let's imagine you've got a month three months right and you've you've got dedicated time towards three months what are you going to learn in three months i wouldn't even have docker on my list um i would literally have react react react and i would literally just push all of my my time and everything into react into back end full stack development and things like that because that's going to bring you the most value towards a client towards a company towards anyone like out there who wants to hire you whereas if you said hey i'm really good at docker trust me like the chances are they've already set the docker stuff up right you literally just have to go in and just run a command and it'll just pull everything up um but uh i definitely am i'm happy to do it but again i'm always sort of like trying to like resolve the sessions around what's going to bring everyone the most value and in this case things like redux i think which every single person on this call will benefit from redux um so it's always trying to figure out that balance of you know trying to get the most value happening but um and also uh oliver gomez on youtube dropped a good comment he said docker is not necessarily list for devops yeah it's more of a devops orientated uh tool as well so chances are you can have it yeah you're gonna have a devops guy and that devops guy is gonna pretty much have it right up and running now again if you know it it's gonna be valuable but i wouldn't put your time towards it uh at this point so sonny quick comment i don't know if it's a question you just mentioned like you know the full stack development you have to learn both sides of the coin right you need to be you need to know react first off and then you have the css component and so when you're is it will it be a fair statement to say that when you try to be a full stack developer you're trying to be a jack of all master of none and and sort of just know enough to kind of delve into it and get the job done or as you said you know how how far along do you should you be in css like you just said how to how to make the site look pretty that's not that's uh it's not possible for everyone right unless uh yeah i would i would say so again when i first started coding react this is full transparency so it makes it kind of gives you guys some reality towards it my css was crap they didn't look anything like the sights i'm building right now honestly i i kind of thought like i don't want to learn css like i really don't care but when i put time and effort into it it it really did kind of pay off in terms of value because if you show a beautiful website to someone that's going to grab them right they're going to be like oh this is nice you know like this is awesome but if you show them a website and you're like oh so this is doing this on the back end and it's functioning in this kind of way and it's really cool and it's kind of like you kind of lose them right like i said if but if it looks beautiful and then it does stuff then they're like okay i'm listening like i'm always all right now uh to answer joe's question um pretty much uh what he asked is like should should we learn like if we sort of put our attention towards being full stack developer are we going to sort of not specialize because we're going to try and be a jack of all trades now the beauty of javascript is this right i would say again this is why i love firebase firebase is really awesome because you can pretty much put your time and attention towards frontend development right and you can power it with firebase so you don't have to focus too much on backend stuff right but what i would say is you'll reach a point where you naturally kind of need to do stuff for example processor payment so whoever done the um the amazon build so i'm not talking about the standard build but the five day challenge one if you guys did that then pretty much go ahead and you'll see that we we use cloud functions to run a backend express uh server so there's no js running in firebase cloud functions which is the back end and then we pretty much have everything everything running on that now my advice would be this start with react build websites make them look good make them be functional make them do everything learn things like redux that's what i did for my first job i was not even sort of like fully i had java background but i pretty much did a lot of um uh react uh i pretty much just kind of selftaught react to to a very sort of like kind of average level i'd say and then i went into a full stack position so i just got thrown in the deep end now this will answer your question because i knew react which is javascript i was able to break down the back end and pretty much understand node.js and i was able to go ahead and look at what they're doing and then you sort of everything becomes about like logical flows and things like that like uh what is happening when they send data here you just pretty much follow the code and you pretty much see okay so this is kind of happening i can read it because it's javascript i code in javascript because i do react you see all right so the beauty is if if you're coding in front and react stuff you're going to be better at node.js if you're cutting a node.js back back and stuff you're going to be better frontend so it's kind of like this is the beauty they said like it's a fullstack natural cycle so but my advice would be stick to front end first and then kind of move to back end gotcha yeah should i watch sunny's clone i am like i apply uh flex to each and every div that exists like even if i don't need to i just apply div then flex every day rosa i apply flex to each and every div that exists right now after watching upload yeah i would say it's a balance it's a balance between having less code which is which is clean and functional remember more code doesn't mean better code right like you want code which is like literally you could look at it now i read a book and it was like uh and it was like literally like a little snippet and it was it literally changed my entire sort of perception on this stuff because all the books said was all like oh whatever i read it was like a quote or something and it was pretty much like comments are and comments are bad and i was like that doesn't make sense but the point was that the reason why they said that is because your code itself should be so readable and functional that by looking at your code i should be able to figure out what's going on and and since that happened it's true like if i if i have to read a line of code which is a comment you see it's kind of adding to complexity like it adds an extra step for another developer to come in and look at it but if your code is off the bat named correctly the variables make sense it's not just like const a equals b it's like well what the heck is that like if it's like const name equals sunny it's very clearly a name and it's got the values on it like it's very clear right um so so that's my uh that's my take on sort of like making code that's what makes you a good developer as opposed to somebody who's very junior like is and that's where the sort of differentiation starts to come in as well um i saw a good question by oliver gomez and he said let me see if i can find it it's on youtube it was um i think i've lost it uh oh yeah what's your take on graphql did tesco use graphql yeah so tesco did use graphql um graphql is a query language for databases um we're not going to go into graphql now but yes to answer the question graphql is something which is quite a valuable skill to have um and i would definitely say if you've got spare time it's definitely not going to harm me to go ahead and learn graphql yep uh yeah do i need to it means like i don't know about this means like these things so as i'm just asking you just tell me if i need to learn like for my frontend uh development job uh do i need to learn like a rest api uh yeah because think of it this way you're gonna you're gonna build a like you're gonna build a front end you may not be doing front end stuff but you're gonna be talking to a back end right you're gonna be talking to a back end of some kind can you guys hear me yeah yeah he's frozen joe i'm going to make you cohost dude you're just a natural like yeah um yeah so so um to answer your question trophy uh so uh what was the question actually just a minute let me complete like there is like in on the list like i went through four and five videos all those videos that clever programmer had uploaded and from that i have made list like rest api graphql server side rendering and node.js no but you see dude what you've done is you just picked out the sort of hot like hot topics right now how many of the builds have you done how many clones have you done no i have just started out so i just want to like have an overview of all the things so that i could just complete the clones first yeah yeah so literally like just i am i'm yeah i'm not just starting means like i'm just starting out so i just want to get over like what are the things i need to learn so to keep it simple to keep it simple stop over complicating it like screw thinking about server side rendering if you haven't done a clone yet like don't even worry about self sign rendering i i don't even build apps since i said rendering unless i need to like because in all like if i have to tesco had server side rendering so i worked on server side rendering in my own clients and my own freelance stuff i don't really do it like as in only if they request it as a special thing in which case i'll bump the price and i'll do it for them but um truth be told like i said what i would say is honestly go and start building the clones from from like from and you'll start to see patterns and it will answer a lot of the questions that you have but that's the best thing you can do right now don't worry about writing lists don't worry about like do i need to know this this is because knowing things in isolation isn't going to help you build a product or a service right knowing knowing how and and and in what ways to break down a problem and and apply that in practice that's how you go ahead and become a developer a developer isn't somebody who can code and just sort of like write right line off the line of code a developer a good developer is pretty much somebody who can just say like okay you have a problem and you want to build a product to solve a problem and i know some stuff some some some stuff in programming which is going to help you fix that problem right exactly and then when you start thinking like that it changes everything and it starts to become it's all about what value you can bring as opposed to i can code right yeah okay funny yeah uh one more question and then we're going to jump in so let's go so it was just like people are always on to like asking like it's not me who's asking about it it's like the people who are asking that whether they should master wordpress and uh stuff like that or whether they should come to javascript like what's the value of javascript when wordpress and wix are there like seriously some people people are asking me that so let me just answer them yeah so actually that's a that's a good shot so these are this is these are two good points here so okay it's all down to goals right what is your goal as in like if your goal is to to make money and to sort of go ahead and uh to basically take on a bunch of clients and build them sites that they can easily maintain and and sort of you know go ahead and launch as a site then i would say if speed is what you're looking for speed ease of use and sort of maintainability and so on wordpress yeah then then wordpress wordpress is something which is again like like like joe said like it's gonna be something which is it's it's very simple to get up and running um i personally haven't done much wordpress i've done it like here and there when i needed to uh like a client offered me a certain amount of money so i was like screw it why not like i might as well go ahead and take his job so i pretty much did it um but if you but a lot of people i know become so good at wordpress that they can just accept a job boom they do that job except another job do it technology job do it before you know it they've cleared like 20 000 in a month and i'm not joking like i've seen people do that and then it's like wow okay so it really doesn't matter if you're doing javascript whatever if you're clearing that kind of money then you're you're doing something right so i would say wordpress is something which is uh it's definitely there's value in it right shopify is another one which is actually not spoken about enough shopify is something which if you get good at shopify there is so many ecommerce websites out there or like what i would say is recommend is if you guys are actually have sort of an entrepreneurial mindset and you kind of want to do something outside the box or sort of want to start your own little company up or something like that i would recommend honestly find local businesses near you and this is something which garyvee sort of proposes as well like go ahead find local businesses around you and for example let's say you found a bike shop and they have a terrible website yeah go ahead implement an entire little build in shopify be like look this this will collect payments you can pretty much add products you can add the bikes you can add parts it pretty much manages all your customers it does everything for you i've built it for you uh you can decide what you want to pay me if you want to have it yeah and pretty much do that enough times and one you're going to learn the skills to sort of close clients you're going to learn how to sort of build that sort of soft skill approach pair that with the soft skills book by john thomas and you have a really nice thing yeah i started reading it really good right yeah really really good book so i would say that's one thing so wordpress is going to be useful in that sense shopify again something which is going to be again if you if your goal is money then honestly that's kind of a good way to go right then you can sort of build up some money built which buys you time and then of course you can go ahead and learn something like react and build your skills when you have that time but some of that some people are definitely sort of more they need to make money quick so wordpress shopify good approaches to solving that now another thing is um webflow webflow's relatively new i've seen loads of adverts on it webflow allows you to do the entire process so you can pretty much design the app so imagine a client came to you and said like i want an app bill you can pretty much go ahead and say to them okay i'm going to design it in web flow i believe you can do that pretty quickly in web flow i think that's what they kind of built it for as well and then you can pretty much like design and then like it builds the front end for you yeah exactly it like builds the html css javascript everything and like clean code yeah exactly like it will go ahead and um it would go ahead and actually build it out for you as well so that's going to be really really handy and then you can it will basically take that design that you can pretty much show the mock up sort of that sort of stuff and then you can go ahead and um translate that to code now that actually plugs and plays i think you can actually you can convert the code to react i think as well in workflow i'm not sure but i think you can do that they also got cms which means that you can actually manage data flow and stuff like that with webflow and then you can actually deploy with webflow so you see things like uh shopify things like um webflow things like um um the other one um what was the first one we said wordpress wordpress yeah so all that stuff all that stuff is that good if you want to make money as a freelancer and that sort of route um and again and now suddenly i can guarantee you that there are going to be people in the comment section who's just going to be like oh then why are we learning react why are we learning javascript are we learning everything like that so you you should i think that that would be helpful for some people yeah i would say like in that case honestly guys like again it comes down to the point where like all you could pretty much go ahead and learn just like you could become a css guru and and and you could get paid bucks for being so good at css and not know anything about react but you're just a css guru like you see it really doesn't matter sometimes about the skill it's about how much value that skill can translate to and provide someone else what's up corey he did um yeah so it's all about like sort of like how much that that value can bring to someone else and that's going to pretty much determine what the what the sort of return will be for you so it doesn't matter whether it's wordpress or something but the reason why react is so hot is because react is the number one most wanted language so the jobs are flying right now the pay is huge it's fun to code and react it's extremely powerful you can take react go ahead and take it to react native pretty much build ios native apps android apps uh you can build web apps you see like it's immensely powerful and you can pretty much do everything in webflow you still have restrictions like because then you're still pretty much using a draganddrop sort of with some custom coding you can still probably add in but um you need to make sure that like again if your clients are for example before uber was built you you wouldn't go on web clone kind of build uber right like as in you see what i mean like you see there's a need to know bespoke programming uh to solve bigger problems bigger that clears a lot of stuff out for some people because some people are just like okay i'm gonna learn wordpress and i'm gonna like just get coding in the trash i'm just gonna do all this all day and it's not just about that it's about the uniqueness like react is highly customizable and i'm it i might be wrong but sometimes wordpress might not be that customizable say that you're building the next uh uber as you said or something like airbnb yeah well maybe sometimes wordpress might be helpful but most of the times you want to enable extreme amount of customization and for that purpose i don't think that anything is better than code itself yeah so it's a balance between code and value as in like if i would i'd recommend literally i would actually recommend if your if your route is to go in freelance and take on jobs and wordpress is a quicker way of pumping out websites go ahead and learn wordpress you know but um in terms of landing a full position uh learning wordpress isn't going to get you like a secure job it's in like it may get you a job somewhere but in terms of in comparison to react it's not even close um purpose is like the quick solution to anything like you're building a ecommerce website just quickly quickly do do a shopify thing and then you could say that you were in for the long term then of course react yeah exactly i have one question for this uh regarding this only okay see uh as far as clients are concerned when clients have certain requirements then we sometimes refer shopify or vex or wordpress and we can make them make him a website for as he wanted but when his his needs are something different he says that i want certain different customization as per his different needs then sometimes these kind of website don't have those specifications in that scenarios if you are a person who has got knowledge of react so does the knowledge of react is useful there we can customize uh these platforms wordpress vx websites so remember like you nee you need to remember that like every single conversation encounter client is different which means that like if somebody comes to you with a wordpress website you can't just be like okay i'm going to somehow plug react in you see i mean like as in if they have a wordpress website you probably chances are you're going to just be adding to their wordpress website and adding functionality and stuff like that i haven't worked with i mean you might be able to combine the two i haven't done that but the point is is that like if you have freelance clients if you have uh somebody who just comes to you and says i have an idea and i want to execute it on because a lot of times when i have conversations with a client it's pretty much kind of a conversation of remember we look at it in terms of we know that okay there's a react we know there's wordpress we know their shopify right but somebody might have an idea and they might have some money and they might be like look i just want to get this thing built i have an idea i have a vision of what i want i have no idea about tech and all this stuff so then it's up to you to say like it's up to you to be then kind of put yourself in a position to say like okay if it's an ecommerce website they're after maybe shopify is going to help them out right maybe shopify is going to be the quickest most reliable scalable route they pretty much can go from zero site to up and running selling products within a day now if you said to do the same thing and react i can't guarantee you'll be a day and it probably looked like if it was in the day um as compared to shopify it would look literally perfect in a day like like if you put the work in so you see the tradeoffs can be it can be in that sense but that's all the questions we're going to take for now guys let's go ahead and let's jump into some functional stuff um because that was an awesome that was actually an awesome q a and if you're watching this on youtube and you found value go ahead and smash thumbs up dude that was at least 500 i swear awesome dude nice um right so now uh i'm actually having fun today because i've got um yesterday just to tell you guys a little quick break before we go into that i actually went ahead and bought a um so so i had a mouse right and i i use this mx master mask and it's how i do all the drawing and stuff like that it's called these buttons on and stuff like that but yesterday i was sitting there doing a like doing a bit of work and then the thing died and i was like i couldn't figure out why i died and i charged it and everything so oh yeah pedro uses it as well and uh i freaked out and i was like i'm going live tomorrow how am i gonna draw on the screen without my mouse and um i ordered it and luckily amazon saved the day with the new one so this is a new new version so it's it's so good yeah this is mx monster three super silky yeah yeah so believe it or not i bought my own mouse like literally for my own money i bought it well done i was on basics yeah it was like a need for me because i was like making websites and like web designs sorry instagram posts so i needed it so i just i just said i said to my dad that hey i need it and i want that price for my competition of from my school and i got some money from there so i just said i just told him that i'm gonna order it and i just ordered it and it was like a great feeling like ordering my first thing on my own and this is highly valuable you know like my sister is using it all day all night yeah i'm using it all day so honestly for me yeah and this is something i want to start off with with this this next portion guys so the next thing we're going to talk about is things which can make your life easier in terms of coding and stuff like that so like it's pretty much i'm going to show you the development environment so that you guys can code easier but literally like like uh priyanka said like it's it's like an investment in yourself to sort of like upgrade your equipment so in this case like a mouse right we all overlook a mouse we all use a track but i don't need a mouse like the point is that like this little thing speeds up my entire world makes my life so easy to suck like anything like moving one component from another damn it was so hard yes how people do using things like touchpad it's so hard to be fair i've used i i do even when i'm like uh on a plane or something like that i just literally use touchpad so and whatever works for you make it work but what i would say is is this is something that kazi actually sort of drilled into my head and it's changed my entire outlook and since i've done it the returns have been nothing but great for me so if you are on a debate right so let's say you want your you need a screen right you need a new screen and and right now you're just working off one screen and you have the money or and but you're on the fence and you've kind of been debating for a while we've all been there right we've all been in that situation um i get off the damn fence and just buy the screen like this is this is issue what i'm saying like i know it can be a conversation of i'm literally the person who was sitting there because i'm like carl it's expensive man you know like that mic right yeah like it's in this yeah this mic isn't i remember when kazi said like should we upgrade it i was like you know dude it's expensive like the headset's expensive like this lighting everything's kind of pricey but then it's like invest in your yourself invest in your skill set like i know someone said the lights yeah okay the lights are fancy my girlfriend brought me those um but they look cool [Laughter] yeah but like things like like literally like the mouse things like your screen like in front of me i have a huge ultra wide right now and it was an investment and since i've had this ultra wide i pumped out 25 clones so it's literally a case of like do you see what i mean like and if i didn't have the the screen i'm telling you the clones would have taken me a lot longer and it would have been a lot tougher to go ahead and do that so i would recommend that you do just like if you're on the fence with things like that get off the fence and invest in yourself and and the returns come like this is don't even like stress about it like the returns will come because it will speed up your productivity speed up your skill with that said let's go ahead and jump in into today's session so um so i want to show you guys so yesterday um yesterday last week we talked about redux right now redux if we we all know i'm not going to go into the pattern of redux but i'm going to show you use cases of redux and then afterwards because it's recorded you guys can pretty much go ahead at your own pace go ahead and and do stuff um uh and kind of run through it um give me two seconds guys uh still fun fact maybe i kept just me oh we just like made after so long oh nice um so so now guys um we're gonna go ahead and click getting started with redux okay so this is it now redux getting started has never been easier than it is right now so we literally do npx create react app we name it and then use use this command dash dash template redux and it will set everything up so i'm going to go ahead copy this pull up a terminal right pull up a terminal so yeah again let me go ahead and say terminal there we go and here i'm going to go and here i'm going to say the app is called let's just call it um oh i'm not going to do it here actually i'm going to go ahead and do a directory so let me go into yeah well it's another good skill to master the command line if anyone's interested they should definitely do it because you can do so much with the command line yeah command line literally it's going to be it's going to be an investment in yourself to go ahead and do that because if yeah put it that way that's another test if you feel really uncomfortable in the command line i've been there trust me i was once at a point where um uh i literally remember i was in university and again i am somebody like disclaimer who went to university and i wouldn't even recommend somebody else to go to university now i think what you're doing right now by being here by literally just being surrounded by people who want to learn and who are actually taking action is much more valuable than any sort of degree or masters or anything and take it from somebody who did the degree did the masters did all that i wouldn't go like if if i knew i knew now i would have saved the money and i would have just like did a course like this i would have gone ahead and just actually done stuff as opposed to um you know uh doing it that way so there's actually a big quantity about this and i would like to say to anyone who is like in the fans of going to college or not so if you're going to a college like a community college or something don't go for it just invest in yourself in something else but if you're getting an offer from something like stanford or harvard why aren't you in it seriously like that's that's the level of colleges that you're targeting and if you're getting those jobs then if you're getting those offers then don't miss it yeah exactly stanford and like harvard and those type of colleges are really expensive shoe but yeah it's worth it it's worth it i mean it still depends on what the situation honestly i would say is it isn't like the industry still expects like you to have like a degree and masters and you know kind of thing is because it's not about the degree it's about the experience yeah exactly if you could tell them that you can work on a website you can do a bunch of stuff like you know redux you know this that that means a lot more honestly when i used to interview people who are coming uh to join like the company that i was in and things like that i wouldn't even kind of i don't i didn't even care about the degree that they did like it might and anyone who said like oh you need a first class degree to be here i kind of i don't want to be a part of that team like because because that's not a good developer space in my opinion like the people who say like you don't actually need a degree but like what do you know have you got the open mindset of learning that's the team you want to be a part of right not the team that's like oh what's your gpa what's your like you know it's just like it's just silly you know so um let's go ahead and jump into this so yo i'll keep hearing someone say hello um oh okay awesome making sure you can hear me oh yeah yeah yeah we can hear you i had a question who is that nathan okay what's up nathan so um i'm new this my first day and it's supposed to be an onboarding welcome dude yeah yeah but i the link for the onboarding on facebook is not working the onboarding was actually i think because there was some scheduling this is just only for this week and you're right nathan the onboarding calls always on a monday but for this week i think there was some sketchy scheduling conflict and i think rishi sent out a thing on slack yeah rishi sent that uh morning was today at nine yeah today at nine so as far as i was aware the onboarding was at nine uh am pst and then it was a twohour onboarding and then it would have been the coaching call so i'll catch up with rishi afterwards and figure out what happened there but regardless uh welcome nathan uh welcome to the course and also there will be an onboarding uh i would speak to rishi about that but just keep an eye out in the chat and and you'll you'll you'll see the onboarding okay yeah and my last question is um what got me to really sign up for the course was the clones that you you make yeah and i was wondering how did you get the clone to look exactly like the existing one the the css and the styling and the assets and all that um so it's literally a case of uh of dialing in on on skills like flexbox dialing in on css skills and that sort of stuff and then actually going ahead looking at the final product in some cases i would inspect the actual website see what see what they use see what colors they're using use color pickers and things like that match it closely to what they do and what i'll do is i'll even stream it one day when i'm building live um i think that'll be cool for everyone to see yeah you'll see the reality of the build um so uh i know there's an app called site sucker yeah which literally will suck everything like the assets the designs and everything no so i don't use anything like that and then to be honest what they do is that it's not going to give you a proper code base or like anything it's going to give you like some weird um because a lot of these sites don't actually it's kind of it's server side rendered and delivered so even what you get is it's not going to be the actual site because when you look go on the site it pulls the information they need so the way it wouldn't actually suck the site in the correct way so um yeah i actually go ahead and i just visually look at the site and i'll kind of clone it like and i'll build it that's dope thanks dude yeah all right sonny you you you use inspect to kind of see what they're doing right like how nice does it i do expect i do in the beginning i did in the beginning and i got really good at kind of getting a knack for it and then but what i'll do is i'll show you guys um i think what i'll do is either on twitch or on youtube or something but when i do a build um maybe not this week because we've got two big videos this week thursday friday um but what i'll do is i'll go ahead and stream it and that will be really handy for you guys to go ahead and see the reality of what's behind the scenes when i get stuck what i do and that sort of stuff because trust me there are times where it's like four hours five hours i'm saying i'm just coding and i'm going to a little zen state um and i just kind of chuck music on and you know he's just code um so cool yeah yeah good features sunny yeah yeah i added i added uh i added a user authentication and assigning page to the netflix clone that we did and it looks it took me a while but i managed to make it look exactly like the sign in page nice practice to do that dude that's awesome man and that's what i would say is that literally take the clone and go with it and build things on top like pedro did like literally go ahead and do it like let you go ahead and take it to that next level and that's going to be the difference of what actually goes ahead and takes it from you just clone something to you remembering now because you probably would have had to extend on it add on things really understand the code to kind of go ahead and build on it so that's dope dude and i'd recommend everyone does that if you work on a clone um yeah awesome so with that said let's go ahead and create a react app so i'm going to go ahead and do mpx create react app and i'm going to name the app this is a redux tutorial um i'm going to say template redux and then i'm going to hit enter and all this is going to do is it pretty much create react app is a tool provided by facebook it pretty much goes ahead and sets up the entire react app and then the dash dash template redux basically sets it up in a way of um having everything oriented around redux like sort of so for those of you who don't know what redux is redux is essentially when we have data inside of an app so i'm going to give this a quick rundown because we do explain this in quite a lot of videos um but redux is essentially when you have an app so in react you have component based design right so everything's components so if you have a header it's a component if you have um if you have a product it's a component things like that so when you have a componentbased design um imagine the first thing you have is the app component right this is the first thing that loads and everything is kind of like generated underneath this now obviously you can change this so it's not the app component but i'm just sort of assuming that we don't and then imagine like underneath this you had like a header so let's go ahead and say we had like a header we had um a few other things so we had a header we had like a sidebar oh man you get really quick at doing this stuff but like still you never get it rightfully but sidebar and then underneath that imagine like inside the sidebar you had like things like um yeah some let's just exaggerate and phenomenally say product right for some reason in the sidebar you have a product so it could be like an adverb so weird yeah and then like here i mean in in some cases you have the adverts where they have products inside the sidebar um so so here you could do this for example and then say inside the header um or like let's just say here you have um let's just call it let's call it a checkout page right so imagine you've got another page which is checkout now here imagine you have products as well right so you see like uh componentbased design the beauty and benefit of it is that you can write one component aka this one this one and this one and um it's pretty much so this one this one and this one and it's pretty much a case of you just reuse the component right now imagine we log in right so let's go ahead and say we have another component over here and this one's called login right so this is a login component now when we log in i have the user at this point so imagine i log in i now have a user but my user in the code is over here so he's literally over here as in like he's in some kind of variable and the login component now there's a we can basically go ahead and pass it down so we can kind of like have a variable here pass it down set the user and then we have access to it here and then i can pass it down here pass it down here to the product imagine we needed the user's information whenever we we interacted with the product then i would pass it down here then i would also pass it all the way over here and here now you can see what happens is the user kind of gets thrown everywhere right it's kind of a headache and we call this headache prop drilling so whenever you run into something like this we call it prop drilling and this is a headache we don't want to do that right because then what happens is the user goes from here to like here to here uh it goes down here and it just becomes messy and then you get this nasty like tree of crap going on and you don't want that instead what we do is we we introduce something like a data layer so imagine that we wrap the entire app yeah and this is essentially just think of this as just call it redux no okay so let's just say redux and the purpose of redux is that when we log in what i can do is i can basically throw the user into this layer right so the user's now just thrown into this layer now this layer obviously surrounds the entire app which means that what i can then do is i can do powerful stuff like i can do powerful stuff like pretty much because the user's in the data layer so it's pretty much around the app if i need it here i can just pull the user in at this point you see um so here i can actually just go ahead and grab the user i don't need to do any of this weird sort of pulling it around even here if i need the user i can just go ahead and pull the user right and it works two ways so like imagine if at this point i add a product to the basket i can just add the product to the basket and then in here i can pretty much have a basket and we modify the basket and now if i need the basket for some reason in the header you know like in some in some apps like amazon you have the basket icon in the header i can pretty much just go ahead and pull it from here so i can just go ahead and say give me the basket from here so you see like it creates this uniform um this this very maintainable structure to our code where basically we can pass a variable in a global like fashion so pretty much if we have a variable over here i just throw it inside the data or it's either redux the redux store we call it or slices of the store and then pretty much you can just use it wherever you need to use it okay so we pretty much just went ahead and created the the react app so i'm gonna go cd redux tutorial and now i'm inside now i'm gonna show you guys a little trick so i'm gonna go ahead and say code and i use the insider's edition but you guys it would just say code dot so code dot but i'm going to do code insiders dot and that will go ahead and pull up a uh a visual like a video studio code uh again i'm using the inside edition you guys will have the normal one and here you'll pretty much have everything set up for you so i'm going to go ahead and make this a bit easier for you guys to read by popping it over here and in order to do code don't you have to add it to your path first yes you do so in order to do that you have to do command shift p right and then type in shell command and in again because i'm using the beta version it'll say inside install code inside this command and pass but for you guys it will say install code command in path you need to do that before you do that little trick okay so that's going to help you guys out a lot you don't need that in windows by the way you don't need that in windows yeah because probably because microsoft made it you know it might just be a builtin function no no it by default it adds it to path while installing nice yeah that's yeah that's what i'm saying because it's like windows yeah it did not work for me when i had powershell i was having issues and i helped sayuri the other day she was having the same issue she has even she was on a windows 10 machine and she was using powershell as a team so we had to we had to add a small thing to our path you found it on on stack overflow and then it got working yeah you have to add like a an alias or something there is an option at the bottom in the installer that you add to the path there is a tick box i highly recommend for windows users to use the bash terminal because it has all the functionalities and uses the same commands as linux and excel for circles so yeah exactly yeah you don't need to use sudo yeah but it's it's basically the same but it's very useful exactly now guys for this next bit i'm going to do a deep dive so i'm literally just going to go ahead and i'm going to mute everyone and again you can unmute yourselves if you need to ask questions and stuff like that but we're going to go heavy on this bit so this is focus mode so literally everyone like get ready because it gets quite heavy right so it's going to get quite heavy and in terms of like understanding things like that so i just want you guys don't even try and follow along because remember it's recorded so you can literally go ahead and watch the video back at another time do at your own pace but at this point i want you guys to really really focus because it's about to get really really sort of intense at this point so save all the questions for the end so you so you're not interrupted yes so let's try and save the questions to the end and then what i would say is if there are good questions uh uh any other cohosts or uh it will be awesome if you just literally just kind of get a few of them on on sort of slack or something like that and we can pretty much just you know sort of pile them up dope so with that said guys now what we're going to do is we go into our source i press command j or control j if you're on on windows and then you're going to go ahead and do npm start okay now this is going to spin up the app um and then what i'm going to do is make myself a little bit smaller in the corner so that way everyone on youtube doesn't get blocked as well okay and now um okay so i've got another app running i was doing another job so this is going to run on 3001 now so what we're going to do now is i'm going to go to app.test i'm going to get rid of the app.test.js i don't really want test files i don't want i'll keep the logo for now because i want to show you guys something get rid of setup tests right so it says compiled successfully so i go back here and boom we have the first app running now you can see this is what this is is a counter app so i've got a plus i've got minus and i've got an add amount and add async so let's go ahead and add two and you see it adds two every time if i go ahead and change it to 20 click add adds 20 to that amount right if i click add async it you see there's like a delay because asynchronous anything asynchronous means that there's like a delay so imagine we're making like a network request or something like that then um it has a little delay before it goes ahead and does it so what makes this different to the original create react app basically the value here is not stored inside of simple state it's stored inside of the redux store okay so it's inside of the redux store and i'm going to go ahead and just quickly get rid of this get rid of this so this is actually stored inside of the redux store so this right here this this counter is actually going to go ahead and it's part of that data layer so remember we we drew out that sort of data layer where we had the um the the apps and remember you had like all the components like in that i drew out and then you had that data layer that wrapped it right so this number is pretty much stored in that data layer and it's stored as the calendar i believe right and then what we do is when we need it we just pull it from the the redox store so i'm going to go ahead and clear this um there we go yeah nice so so what i'm going to do now is going to go to our code and i'm going to go ahead and check it out so app.js so i'm going to command j to hide that and here you can see we've got a bunch of stuff happening in here so this is pretty much edit app and save to reload so you can see this is where we're seeing all of this stuff now you see at the top we've got this counter component so what i'm going to do is and this is also an example of me going through code that imagine like i had never seen this before because last time i had the coaching calls the first time i actually saw this template so i'm going to show you guys how i would jump through it so i'm going to hold command and just click it and it takes me to the countdown file now inside of here i can see a bunch of stuff now naturally you're going to freak out you're going to go oh my god what the heck is going on in here right but what i would say is don't freak out you're going to see things like selector right selector is something which we're going to talk about um we're going to see things like dispatch uh dispatch is something we're going to talk about and then you see things like use state now eusta is obviously a react hook now react hook is something that um and also thank you very much iron 26 for the nice words on youtube um so uh usa is something called a react hook and now for example remember we said how we had those components earlier right so you had those different components on a web page now if we have a component each component can have like a little memory right so it can have its own little memory so this one imagine this one had like a little counter in it right so it had like a number one and this one had like a number four and this one had like a number i don't know it could be three for example right and they had like a plus and minus button on each one now each one can have its own memory and we call this state okay so it's the state of the component so in this case it could be like um the state let me go ahead and admit we have the state of the component so here we can have like this one is also going to be the state okay so state yeah and then we can also that's how every sort of component has can keep track of what's going on so what you see here pretty much is something called state okay now let's go ahead and dive a bit more in so we can see we've got a button with a plus a button with a minus and then we've got a span tag with the number in so this bit here is referring to this bit over here yeah so you've got the plus you've got the button the minus and you've got the count in between it right now if you don't believe me i can go ahead and prove it so i say um told you i'm not lying um probably spotlighting wrong but anyway uh let's go refresh see i told you i'm not lying and it's there okay so we can see that that's pretty much where the code's running so honestly i would say when you're even going through your code yourself make sure you actually go ahead and literally do stuff like that because it will help you understand that okay that's where it's happening too you know um but what i would say is uh yeah so we have that and then we have set in current amounts at decrement amount so at this point we can leave ignore all this stuff what i'm interested in is this plus and minus right now the way redux works right is again remember we had those components so we had things like little components and then we had that little tree remember we had like the app.js at the top and we had a bunch of stuff underneath it where everything gets rendered and then we have the data layer right now remember when we had the login so imagine like we have the login uh the user gets like pulled in from the login component then we basically push that into the data layer now in order to do this we do something called we dispatch so we dispatch the user into the data layer right so this when we refer to this as a what we do is we dispatch an action right and then think of it as this entire data layer um oh nyam thank you very much for a donation because you are doing an amazing job request you please make a live trading website and like robin hood okay we could do that um thank you dude uh so we we can dispatch an action and this this data layer has to kind of like listen to what's going on it needs to like have some kind of idea as to like okay you just dispatched some kind of like set the user action so i need to know what to do with that so what we do is we call that reducer right and this basically has something called a reducer and what the reducer does is it just basically listens for actions right so this is the job of a reducer it just listens for actions so we have this dispatching of actions we have a reducer which listens to actions and then remember the final part of the flow is like say this component needs the user then we have a way of mapping it right so then we have the user itself so in our content in our example we had the count right so over here we're using some kind of count now you can see this is where that sort of this is where that mapping is happening so you see where we have this over here where it maps back into the source so remember here we we logged in we just like dispatched imagine like this was the counter we press plus or minus we're dispatching a new value for the counter so i'm going to go ahead and change this now to be counter so it's relevant to what we're talking about so counter and then here we're pulling from the counter right now to get the information we typically good practice is to use something called a selector right so we use a selector to pull this information from the store from the redux store okay now you don't have to use a selector you can you can literally just kind of grab it in a different way but selector is a good practice to use okay so you can see we've kind of got a few different things happening here we've got like this one this two and then this three right and this is kind of what forms the this is when i was saying remember i was talking about a pattern before and how once you know that pattern you can pretty much go ahead and use it regardless if you're doing react context api or regardless if you're doing redux right so in this case number one would be dispatch the action so let's go ahead and say that this had a plus this had a minus right so uh in our context we would talk about um boom in our in our case we have here the plus button is where we would dispatch right so let's go ahead and make it so imagine this was a plus button right you would basically increment the counter and that would push an action in and it'll be some kind of increment action so you see here we're dispatching and increment right so again don't worry too much about like oh that what what code is he using there just remember try and get a grasp of the the pattern that i'm talking about right so we have this so when we click that plus button right so i'm going to change the car seat so when we click that plus button it dispatches that that increment counter right so going back here oops going back here it dispatches the increment counter on click of that button right and then the same happens for minus but we dispatch a decrement uh action right now where does this get like listen to like and and and and we'll we'll touch on this in a second but we actually use the count value here so remember we dispatch some kind of count of and then we kind of pull it in here and obviously we've named it incorrectly here it should actually be count so let's go ahead and fix that so it's clear um and then we got this and then now you see here we've got the actual count itself and remember like i said we we use a selector to go ahead and get the account now again don't worry about the code just try and remember that this is the pattern that we're doing so we use a selector to pull the information from the redux store so don't worry about the middle step just just remember we dispatched an action it changed the redux store and then we use the selector to go ahead and pull it inside of wherever we need it and in this case we're just pulling it inside of that piece of text here so it's like here right now with that said we how does number two happen so where where does the the action translate to actually changing the data layer and that's that's where the reducer happens right so to jump into that we're going to go into features we're going to go into counter and we're going to basically just look at their code and we're going to see what's going on so it's counter slice and this is where the magic happens right so in redux the way it works is it's good practice to split up so imagine where imagine this data layer this huge little layer right uh what what it's good practice in relax to split the data layer up into something called slices right so we can split it up into sli so split uh layer into slices now what do we split into usually it's context specific which means that if we have information about a basket i would have a basket slice if we have information about the user i would have a user slice so imagine like this this is like an onion right and it has different layers of it so inside of that layer you can have information purely about the basket inside of another layer you can have information purely about the user okay but in our case we've just got one for the counter so it literally does nothing but has information regarded around the counter okay now um now with that what we're going to do is this is again this is like boilerplate code so it's not in this case we don't want to we don't really care too much about going ahead and and uh this this this sort of coaching call isn't about sort of diving into exactly the line of code it's about understanding how to use the code from the template and then reuse it as we need it and then you understand the pattern and once you understand the pattern it's very easy to go ahead and do things as custom as you need it right so this is what we're going to name the slice so this is counter the initial value so imagine that data layer that slice in the in the data layer that needs an initial value so in our case it's going to have a value of zero right so we're giving the counter a value of zero um and then what we're going to say is in this case i wouldn't i mean i personally wouldn't call it value here so i would say i'm going to change this i would call it count i would this is a bad example they shouldn't do this i don't even think that's a good value i would call it count right so in our case we have an initial state and the count is zero right so we're talking about this count so then it needs some kind of beginning value in the upload so we're going to give it zero now this is where part two happens reducer so remember we dispatch an action when we click that button so part two is where we listen for the action okay so here we have different types of actions so we have one action called increment we have one action called decrement and then we have that special one increment by a certain amount right so the increment by a certain amount is actually where this magic happens so where you can pretty much go ahead and pass it a value and it goes ahead and modifies the store based on that right now let's go back to our code uh let's give it one sec god it really drives you out when you're talking okay we're back um so we have like three actions right we have increment we have decrement we have increment by amount so you can see each one all it takes as this sort of argument is it just needs to know what the current state is so which is why this is called an arrow function it just takes the state now again the state is not the global state it's the select a state for that slice so in this case we have the um the counter slice right so we have the counter slice right so in this case the counter and then we're creating a size so it's called the counter slice okay and then we give it a name which makes sense so in this case counter right so um right so now what we're going to do is here we pretty much have these these three actions and then we export them so that way we can use them outside of the app right so here you can see counter slice.actions and again uh like even here for example this is a clear example of where it doesn't make sense because we don't see dot actions anywhere but this is something where that redux there's something that is called the readouts toolkit and it makes our job a little bit easier because it basically goes ahead and they give us access to things like the actions right so we just define it in here and then they pretty much make it in this very neat format so what we do is we go ahead and export it when we need it and then you can ignore this one for now the increment async so forget about that for now but then what we do is so i want to show you guys so when i click this it's actually dispatching an event called increment right now if you don't believe me i'm going to actually go ahead and show you the exact where it does that so what we can do is we can aim we can go ahead and right click and click inspect and then what we can do is we can go to the this top thing here click that and click on redux you need to install something called the redux devtools right the redux dev tools are going to be really handy for you guys so it's this right here redox dev tools yeah so go ahead and install that and that's going to make your life a lot easier when it comes to debugging redux and they're very powerful tools as well so now to prove to you so inside the code we had inside accountant.js when we click the button so on click it says dispatch right and look and hooks anything with use dispatch use state use whatever it is it's called a react hook and they only exist in the functional component not class based we're going to touch on that somewhere else right but um so now what we're going to do is uh here we we we have this dispatch right so again don't worry too much about what's going on here i'm just trying you just want to go ahead and practice the use case of it and now trust me i know it's it's a bit kind of like oh what's going on here right i know that it's kind of like i don't fully get it but the way that you're gonna get it is play with it so literally when you watch this video back play with this and see for yourself like get it working to as you need to get it working and then pretty much go ahead and it will make sense like that but assuming that you're gonna get it in one go and if you don't get it by watching this video it's just the wrong way of thinking right it doesn't really work like that right so here what we do is when we click that plus button we're going to dispatch an increment action now to prove that it does that i'm going to click plus and look counter increment so it just said inside the counter piece of state and increment action was f uh fired off and then you can see the really nice thing about the dev tools is actually shows you the counter piece of stay and the count changed from zero to one and if i click it again and i click this one you see it changed from one to two and then you can see it change from two to three now the awesome thing about devtools is you can go back in time so if i click this one and click jump it actually rewinds the app so you see i can actually go ahead and rewind the app to different points and you can pretty much debug it in this way which is really awesome right now so so it dispatches right so remember we talked about it dispatches the action and the reducer listen so now let's take a look at the reducer so we just dispatched the increment action and then here rem all it's doing is saying okay now go to the state go to the count and get so state.com plus equals one so basically go ahead and add one to it so if i change this to like two for example now every time i dispatch that increment action it should add two right and now there is something that we need to know about inside of so you would have seen me in react context api or if you do any of the clones you would have seen me never ever manipulate things like this directly right and that's what this big comment here is for because what we try to do and this is something which you may go over your head right now but it will make sense at some point in the future we do something called um we don't like to mutate the state directly right we don't we never like to do this we never like to do like constant name equals um sunny or something like this um or i mean even if you do like that and then you we don't ever like to do like this right because this is called like it goes against immutability and basically immutability just means that you shouldn't really go ahead and um you shouldn't really have to go ahead and um and change stuff like this especially when it comes to your state your state should be like every change that happens in your state should be like a copy so it should be like every time a change happens and to prove that the reason why it works is because look every time a change happens it basically copies it and creates a whole new piece of like a whole new slice of state and replaces it with that slice of state and that's why we can go back in time inside of our app right that's the only reason why i can go back in time is because if we have those copies right and that's really really good practice of and you might be thinking hang on but it doesn't make sense because it's not going to use up a lot of memory and stuff like it doesn't they do it in a very clever way um so here what we say is change the state by plus equals one and then decrement as you can imagine it's just doing the same thing but it's doing negative like minus equal one and then increment by amount takes the state and it also takes something called an action right now this is the cool part now what we can do is we can actually combine logic inside of our app and what we can say is okay so the state uh dot count plus or equal to the action.payload now where does this get fired off so let's see where increment by amount gets filed so let's go to our counter and we can see here is where add amount actually gets fired off so if i change this to like 20 1000 or something like that you see it actually gets added there so let's go ahead and find it so down here we can see increment by amount right and then what they're doing is they're passing a number in and they're just doing some fancy stuff here says they're saying convert it to a number the increment amount and the incorrect amount is just simply an input field so this num this box right here so this is pretty much just like one or something like that and then it's going to convert it to a number and just add it there and then what we're going to say is dispatch increment by amount and then you see like these ones right we don't even though it takes state we don't pass the state in so in relax we don't do that right we just it's very clever it knows what it's doing right but when we have something called a payload what you can do is you can just pass the payload here so for example in this case if i was to change this to increment by amount six right now it's going to ignore whatever value i put inside of here and she's going to add on six right and you can see if i click increment by amount if i check the action that got dispatched it dispatched an increment by amount and the payload was six right so if i go back now and check inside of counter slice you see because state remember we don't pass the state redux does some clever stuff on the back end so it knows like what the state is and things like that but the action we have something called the payload and that is what we just passed in as a parameter here okay so we've got number increment by amount like that now what i'm going to do is i'm actually going to go ahead and create an entire new slice of state and i'm basically going to have something else so we can pretty much see this from the ground up so inside of app.js and on top of everything i'm going to have h2 saying this is a this is my name right and then let's go have a look our code so this is my name and then i'm going to have an input field underneath it so i'm going to have an input type is text and it's going to have some kind of input so this is my name so i'm gonna the goal here is to say sunny hit enter and then i should see sunny pop up here when i click the button right so i need to have some kind of button here and this button will basically just go ahead and say update name in the redux store okay now how do we go ahead and create a slice of state wire up the button use like all the things we need to use to keep track of what i'm typing in and stuff like that and do all that so that's what i'm going to show you now right and this will actually go ahead and show you how to create an entire piece of state just like the counter was and then we're going to basically change it to do what we need to do here so the first thing we need to do is go ahead and map our input so here every time i type in this field i need to know what i'm typing in so the way we do it is we we go ahead and introduce something called state so const and here i'm going to say the input so this is how you write a variable in react think of it like that you say input and then the convention is you say set whatever the name must have set input you say use state and then this has an initial value of blank because we typically don't have anything written in here so the initial value is blank and then we have to import it from react so this should have just gone here actually it didn't import it correctly but that's a clean way of doing it and now what we do is this is something which you would have picked up on if you've seen the clones but if you haven't seen the clones i recommend you go back rewatch them and and this will make a lot of sense but inside the input what you want to do is you say value of the input is our input variable right now notice what happens now if i go ahead and type in so i'm banging on the keyboard but nothing's changing over here right nothing changes over here that's because we need to actually keep track of what's going on so we say on change every time the user types in it fires off an event so this is an arrow function and then what we're going to say here is yeah we say exactly we say set input and we say event dot target dot value and what this is saying is set the input to whatever the the user is typing in so event.target.value is just a way of saying get the value of what they typed in and then what this does is every time i type in it goes ahead and set input is how we modify our value in in the sort of the react way and then this will cause the input to change which means it rerenders and it shows you so now if i say sunny so you see it starts to work right because it's actually mapping to the react state right now the next bit so i know when i click this now the goal that we want is when i click it it should say sunny and then that would like be our test case of saying okay sunny was successfully added to the store and you might be wondering yeah but something this isn't how real apps work no trust me just understand fundamentals to this level and then really get the pattern kind of dialed in literally do it on the most silly basic examples but get that repetition ingrained and then you'll start to know the pattern and then it re then you start to build on it right but what we're going to do now is we have a folder here called counters right so what i'm going to do is i'm going to create another folder called um is it is it count is there another photo here no it's on the photo so here i'm going to say no so it's not actually okay so here i'm just going to create another piece of state and i'm going to call this one um let's call this one the the user because there's a user slice so everything about the user right so we're going to call it user and then what i'm going to do is i'm literally going to copy whatever was inside no sorry this shouldn't be um i'm going to call this one the user slice sorry this is going to be the user slice and i'm going to one way is i'm going to grab all of the code from counter slice and i'm going to paste it here because i'm assuming that i'm a complete beginner and i have no idea how to implement redux i'm just copying the template and i'm figuring it out as i go so this is a good way of learning so what i would say at this point go here you want to change this to be user size so if we click command d it does multitab and we've got counter slice here count the slice here and count the slices we're going to change this to be user slice and you see it changed in all three places right then i'm going to go here and change the name of that piece of state to be user now in here we're going to have an initial state for that that for that user and we're going to basically say the user by default is going to be uh no so it's going to be nobody right um and then what we're going to do is we don't need a decrement we don't need an increment by amount we don't really care about any of that in this case i want an action called let's just call it set user so we're gonna have a new action called set user right and this one's gonna take a um a uh so let's see how they did it before they took an action so here we're gonna go ahead and this will take an action okay so have this this and they'll take an action now remember the action took a payload last time so you could pass something along with it and in the previous example it was a number in this example we're going to pass a string which is going to be the user's name so here i'm going to say we're going to get rid of all of this and get rid of all this stuff i'm going to say when you get a set user action so for example when this comes in when we get a set user action which it dispatches in action we're going to say the reducer listens for the action so this is where we listen for it so when you get that set user action we're going to say go ahead and state.user should now equal so state.user should now go ahead and equal the action dot payload right so we're just going to use this as a basic example and now what we can do is i need to go ahead and change this to be exported so we don't have this stuff anymore and it's no longer called increment it's called set user so what we've done is we created a function that we can go ahead and use outside so we can listen to uh to when this action gets dispatched remember we need to listen to it and then we need to export it so and again we don't need we don't need this increment async and here remember the selector is the final part where we actually pull the value back in so we need to create a selector here so i'm going to create one go ahead and get rid of this comment here and you can see our code is actually pretty simple it's actually pretty simple i know that understanding is a bit complicated but the code itself is actually super clean right so this is our selector and here we say select user i'm going to say and this goes ahead and gets a state but instead of doing state dot counter because it's not the counter slice anymore and the reason why it was called counter before is because the name here was counter right so here it's user so it's going to be state dot user dot or in this case it's going to be the user right but in this case what i'm going to do is i'm going to change this to be name yeah so inside the user slice we're going to have a name variable because that's kind of confusing and then here we'll have set name and then here we'll have set name that kind of makes a bit more sense otherwise it's going to it's going to be confusing for you guys so we're going to say select name and then here it says state.user.name right now we've actually prepared everything so what we can do is we can go into app and then you see we actually have this store.js file and we didn't look at this one before but you see what the store.js file does is it's basically where we combine all of those different slices which make up this thing right here right this this layer this data layer so here is where we basically pulled in the counter slice right so what i'm going to do is i'm just choosing to copy this i'm going to change it to instead of count and reduce i'm going to say user reducer and we're going to pull it from the user slice right and here oh is inside of her is inside of a camera folder okay i'm not going to change that now but we shouldn't be inside of it we can't afford it it should be inside of its own folder um but what we're going to do now is we're going to say we're going to go ahead and add a user slice we're going to say the user slice should use the user reducer and that's what we need to do to connect it so now this doesn't have one layer in it it has two slices one for the counter and one for the user right and inside of counter size we handle all the stuff which could potentially change the counter inside the user slice we have all the stuff which could potentially change the name now if any of you guys have done the builds you would at this point start to see where there's slightly some benefit to doing it this way because you would see that the codes kind of split up based on the different contexts right it's split up based on like um and i see like cyrus like kind of it was like a tick moment there he was like okay that makes a big sense yeah because like it splits up based on like based on the context and it kind of makes your code a bit more simple to understand right so at this point we have set name and what we're going to do is we're going to go to app.js not app.js yeah app.js and what i want to do is i'm going to go into counter.js and see how they actually used everything because i want to use all the stuff as well so i'm going to pull my app.js here i'm going to put it aside maybe so we can see now so on my left i've got counter the js this is where we have all the sort of counter logic here and i'm basically got an app.js i've got this is my name the input and that button where we want that test right the angle is i'm going to have a h2 tag or underneath it which is basically going to say the name if there is one okay so here if i do h1 the goal is to have like a name pop up here right so in this case it's going to bug out it's like oh there's no name which is understandable right we didn't have a name so what we need to do is we need to do a few different imports first now i'm going to first go ahead and do import and i'm going to import the selector so that way i can actually use the user so i'm going to say select user or select name sorry it was select name from and this is from the user slice so this is actually from user uh sorry this one should be inside of um features forward slash counter forward slash user slice okay so select name and now what we can do is we can use this so we can use this line of code so we can say cons oh god what we're done yeah copy this line and i can change it for as we need it so i need to import use selector so i've imported it from react redux right and then instead of this it's going to be the name and we're going to use that name selector to go ahead and grab the value so what this does now is it should actually go ahead and get that name for us and it puts inside this variable and what i can do is down here i can have a big h1 let's just say h1 and the same name so if i do this now there's no error which is actually a good sign right so if i go ahead and look at the state right now you see i've got two slices in the state right so inside that state remember we set up two sites where the counter with the name and the user which was the initial value was no now to show you that this is actually correct and it's not lying and it's not sort of like i'm not faking this let's go back to our user slice and let's change the initial value to um let's go ahead and say sunny like this right now the initial value is sunny so you see it's actually pulling it from our on from our our um our reducer right so that's going to basically go ahead and and it proves that it's working at this point right so what we're going to do now is we're going to map it so we want this to be be node to begin with but when we hit that button i want to set the name based on whatever the user's typed in okay so that's the next part and you can see that like this is what i'm trying to show you guys here is that this is kind of the approach that you're gonna need to take when you're sort of breaking down a problem so it might not always be a case of um like very clear thinking and you you're probably watching at this point and be like oh like i have no idea how the hell i'm gonna actually do that in production or i don't know how i'm going to actually use that trust me just break it down practice with these kind of examples and once you get that pattern going right literally build silly apps like to do apps and things like that with it right like get things like that built and trust me like that the confidence comes up and you start to solve more complicated problems and we can get more kind of finegrained into that sort of stuff but at this point what we're going to do is we're going to go ahead and you are like setting up boilerplates and redux yeah so a lot of people hate setting up the boilerplate including me i hated setting up the boilerplate but if you go ahead and use this template way it actually sets it up with the latest sort of hooks and stuff like that um so this is if you've used redux before anyone in the comments or anything that has used redux before you notice this looks a bit different because this is like the sort of cutting edge frontline stuff this is where they're using hooks they're using all the modern stuff so yeah so what we're going to do now is i need to get that action right so i'm going to go here and i'm also going to import not just select name i'm going to import the set names remember inside a user slice we had this right here so we had the set name so i'm going to go here and i'm going to import that into my code and what we can do is remember in order to be able to push something into the data layer i need something called a dispatch dispatch is basically how you dispatch it inside the data so to get the dispatch we just use this nice little command here so we say cons dispatch equals use dispatch i need to just import that from react redux and now we have it so now i have that gun that allows us to shoot values into the data layer and then what i can say is when i click that button so let's go ahead and say on click right i wanna so let's just let's create a function called handle click right so everything kind of happens here so i'm gonna create a quick function up here saying handle click and this is basically gonna it's not gonna take an event and basically when we click that button let's just test it and say uh you clicked me so just see if it actually comes through right so that's the first thing i'll do so i'll go here console click it and it says you clicked me right now i want to test it and see if it keeps track of if our state over previously if i click it and say you clicked me and then it should say the name so let's go ahead and do this we say you clicked me input because the input is what we mapped that that entry field to so if i save that go back and here i say sunny update name so you see you clicked me sunny and if i change this to like um priyanshu say it says update name you click me preentry right so you see like it changes based on this value now now that's cool but we want to push that value into the data layer and then it should rerender and show it big and nice here now to do that it's actually pretty simple because we've set everything up now we go ahead and we just say dispatch because we want to dispatch an action so literally we're at this point now so when i click that button on the dispatch in action and i want to dispatch the set name action and i want to pass in a payload right and the payload i want to pass in is going to be the input so whatever their users typed in right so let's get rid of the console log and now what should happen is this dispatches the set action with the input right this goes ahead and gets picked up inside the reducer so the reducer goes whoa whoa you just shot an action so it's gonna go into step one we're gonna dispatch the action step two the reducer is gonna hear it and it's gonna say okay change the state dot name to whatever you passed in so in this case we pass the input in then the selector is used to pull the information back into wherever we need it so we we pull it in here so use selector and you can see we render it here which means react is very clever it will rerender where it's need where it needs to rerender so at this point what we can do is we can go ahead and test it so now if i go ahead and say sunny update name oh nice if i go ahead and say like alex boom and this is fully getting updated in the react store uh redux store right now so if i go to redux i can see look it's shooting off a set name action so let's go ahead and shoot another one off to prove it let's just go ahead and say um it's going to say hardeep and i'm going to update name in the redux store so this one right here right so let's look at the action and it says type was user it was inside the user slice it was a set name action so you see they even have really nice naming here and the payload was hardy right now the reducer picked out and if we click on the diff it shows what changed inside the state which is awesome so it showed that it was alex and it changed too hardy right and then what's really cool is that i can actually go back in time and i can change it back to those values right which is really nice um now that's literally that's in a nutshell like i know it seemed like a lot right but when you actually break this down once you know that pattern right once you know that pattern and what i'm going to do is i'm going to show you guys uh if i type in redux right here give me two seconds two seconds and i'll answer a question so you see here guys where we have the this right here yeah where we have this where it says redux right oh come on yeah redux right here yeah so think about what's happening here so look just like i said before so this is the diagram so view is the component store is what gets changed and then you have an action which gets fired off so an action which gets fired up i prefer my diagram i think it's a little better than that diagram um so we have the action gets fired off uh that's step one step two a reducer picks up on it right so reducers kind of sitting there inside there they're listening right step three it manipulates the store in some way so in this case uh in our sort of uh in our situation it manipulated the store at this point so remember state is state is the same as store in this case it should stores an easier way to think of it um and then this is where the manipulation happens and then the selector is the final part where it connects back so you remember you kind of have this cycle right here right where basically goes round and round and round like and it kind of keeps on happening um so if we go back and see so we subscribe and that the subscribe is the selector and then you see we're back to square one dispatch and you just have this is the pattern i'm talking about right now you can learn this pattern in the clones so if you're literally looking uh thank you wifey mohammed he says you're doing a great job and you donated two dollars thank you dude um so if you learn this pattern this is the pattern which makes that which will be the difference between you landing a job potentially and not landing the job and i'm kidding you not that this is the pattern that she's gonna actually do that so this this is super valuable to know redux right this pattern right here um why is it so valuable is because you can pretty much scale up an app pretty much with this with this um uh with this uh sort of foundation underneath it so once you have this in place i know it looked like we did a lot but if you get really fast to this honestly look at this this is not actually that much code and it's very scalable right and the best part is like you have a very simple store where pretty much this is where you combine all the see that it just says configure store the reducer we're just passing this stuff right now redux is a lot more powerful than just this you can do things like middleware which means that every single time uh something goes in so imagine imagine i went ahead and middleware in redux is something really powerful for example every time i dispatch an action i could put a point like a process here which says only do the next step if they're authenticated for example so you can do stuff like that in redux right so it's very powerful you literally can go into every in very intricate parts of it and it's also very good for network requests async stuff like that now what i want all of you to do is go ahead and actually give this a try okay so like i want you guys to to to go ahead and like afterwards in your own time in your own space like go ahead and give this a try this is going to give you so many different skills by doing this like this run through what we did today because what it shows you is is we used we used react state here to keep track of what the user was typing in we used the redux store to go ahead and do the entire uh dispatching in action right we dispatched an action into a store we created a new reducer we created a new slice of state right we now understand somewhat more of the concept of what slices are inside of a inside of this redux layer and the whole purpose of slices is so that you don't have all the code in one place because as your code base gets bigger like i don't want to see every single action in one place i just want to see all the actions for a user all the actions for the counter or the actions for the basket right and if you add a new feature on think about it if you have a team of 100 developers but everything is nicely divided up can you see how easy it would be to work on the same stuff at the same time right or like all on different areas because you your code is structured in such a way that it allows you to sort of have that sort of working uh harmony between each other so this is actually a really really good um sort of exercise for every single person to go ahead and try i recommend that you all go ahead and give this a try and pretty much and you're going to run into bugs you're going to run into problems um and that's why the learning sort of comes in right that's where you sort of pause the video you dive in you sort of you you research about redux and that this pattern and the pattern that i'm talking about is this one now i don't take it lightly when i say that that's so valuable like as in honestly it reduxes the remember we talked about the skills that a frontend developer needs to go ahead and sort of succeed in in their career to get you kickstarted if you go ahead and sort of practice all so this is my this is my hack for you guys right um if you want to really sort of get an edge right now in terms of what what's going to put you in the best position to get a job right um so pedro says i just struggle with the syntax like what to write i get the concept but not yet how to use it so 100 understand what you're saying i literally would look like for example i if you asked me to write that stuff off the top of my head i wouldn't know i would forget like that's why i use the template and i just pretty much copied this stuff and i just repurposed it to solve the problem yes yeah now um so what i would say is in terms of understanding syntax it's never about remembering the the point here is that if you if you understand that pattern that we spoke about right that that sort of circular pattern that we that we sort of discussed then it really doesn't matter about um it doesn't really matter about the syntax for example it you could you could go away from coding for an entire year and come back and and what you'll find as well guys is that this is a very modern approach to doing redux this is using hooks it's using a lot of stuff but what you might see in in actual production is something called map state to props match this map dispatch to perhaps right it's and what we will do we will go through that at some point but at this point i just want you to use the elegant way the really new way the nice way because this is the simplest way of doing it um but but if you practice with this you'll understand what that stuff is doing because it doesn't matter about the syntax at that point because you know what's happening but under the hood once you once you kind of get your head around what's going on under the hood the rest isn't really as important right um uh so hey yeah i just have one question then i have to leave okay um so when you're sharing your uh screen on react to the app you can share it yep yep so in the input field uh in your react app redux your app yep on the web browser web browser uh okay so boom boom yep on your react yeah they're in there in foot field if you put uh spaces will it still capture the space or i mean empty space completely empty was it like this uh if you clear that up and then just hit space i mean and then hit button will it capture so yeah it would say let's do like a ton of space so again this is something this now leads into something called uh validation so like this is where you would protect against that sort of thing so what you could do here is you can actually disable the button so i'm going to show you a quick hack right now and it's not a difficult hack you literally go ahead go to app.js go to your button and you say disabled if there is no input and now check this out so okay so this is in the buy now in the clone right we did the same thing yeah yeah the amazon clone for the buy now so that we don't hit it multiple times yeah exactly so you can do it there but you see it doesn't protect against the spaces you're gonna have to there is a way to do that as well but the point is that this will protect you from updating a blank value so there is a way of doing the blank spaces as well or you could do something called trim so it's dot trim uh and then execute like the function and that will actually trim out the white space um but yeah so that's how you would go ahead and do that um okay thank you so much and thank you everyone i just have to leave now gotta go oh dude one sec before you go that's how i just fixed it so if you you see if i do the space and i add uh so when i did disabled uh you see here input dot trim that trims basically yeah okay cool yeah all right thank you welcome dude um nice so yeah so as like going back to pedro's question so again yeah so it really doesn't matter at that point about this the syntax just try and learn the concept which is why i teach the react context api first and how deep in the comments said this is a lot similar to react context api i'm seeing the pattern here redux is a little bit harder than context api in my opinion yes so redux is a little bit more of a step up which is why i say because redux you now have multiple slices of state but trust me when i say that's actually a lot better right you actually want to do that you want to have your code split up in that way um but there is more code to write okay there's actually more code to write um so i would say learn the react context api because you'll notice if you've used if you've done the clones you would have seen like some kind of similarity between the dispatch the sort of pulling it in um and that sort of like that sort of pattern you would see a similarity between the two um and then once you know that it's it's not going to be like a a strange thing right priyanji says i was not able to understand syntax although the main thing that was i got the good grasp of data and i learned about the basic structure redux that's why that's what matters yeah exactly dude like sonny i have a question yeah so this template thing is using the map connect map state to plots and that connect function of the typical redux stuff under the hood or it is something different so what's the difference between the typical uh redux style and this template the way to think of it is rather than so if you have you ever coded in have you ever done a classbased component versus a functional in react yeah uh so in a class so for those of you who haven't even right in classbased components you have things like um you have different together yeah you have like you mean no not setters and getters but like you would have like you would have like a a different way of writing in a classbased component whereas in functional components you just use hooks right use the use state hook to prepare a piece of state now the the reason why this makes it so simple is because it actually sort of eradicates a lot of mistakes like if you've if you've ever done a class based component you'll notice that when you do this dot set state there's a lot more room for error whereas when yeah there's bindings there's this this keyword that throws everyone off right so i've never been able to understand it to be honest i don't i don't think any developer truly understands this but um the main point is is that like it's just more room for error right now that's why like obviously hooks was uh an advancement in sort of react so it was something which came out afterwards and it was something which made something it made it a lot easier for you to go ahead and code functionally now it makes it a lot more easy to write your code in a much more understandable way for example the dispatch right like here for example let me go ahead and show my screen again the dispatch over here you'll notice that like all it does is it just says use dispatch we don't even need to know what else happens like they've made it that simple right it's a hook and sure you can go ahead and click into it and then use i mean don't do that because you need another script for that but um this is basically like use selector for example they've made it to a point where you literally just pass in um like your selector and even today we actually covered something called selectors which is something which we we didn't i didn't actually know about until quite late on in my first job uh thank you so much carlos by the way uh proper react you're making things so easy to grasp i need to take a little break i'm going to go ahead and bring that on screen now um you make things so easy to grasp i have to take a little break from com ai to master this gold piece of state stuff from redux thanks you're welcome dude and thank you so much for the donation that's awesome man i'm glad you found some value in that um but yeah so what i would say is um there's a few different concepts here that we need to like sort of bear in mind right like in react so the golden nuggets of today's session right so if what i would sort of tell you to focus your time on right now is the following so i want you guys to go ahead and things to focus on okay so some things to focus on now one is uh html css js right the better you get any of this stuff though the more it's going to benefit you in the long run right it's going to it's always going to come back in full circle and help you out in some way or shape or form so here that's going to be something which is always going to benefit you as a developer now two we have obviously we talked we spoke about react right so obviously today's session was entirely in react um so that's going to help push us far right now this is where we sort of mentioned redux and redux was to solve the problem of oops redux was to solve the problem of uh managing data within the app so we went over the sort of data flow inside of an application and how you can use it to make your app more maintainable to make it more sort of split in a way that makes more sense so inside of redux we had a few things we had all i'm going to say here is master the pattern right then the syntax doesn't matter right so this is number one master that pattern that we spoke about today because then once you know that pattern the the syntax regardless of if it changes or like we use we're now using hooks and before it was classbased stuff it really doesn't matter after that point if you know the pattern and which and you know the sort of fundamental of how redux works really isn't going to matter past that point so that's going to help you in in sort of grasping the concepts of redux we also talked about something today called selectors so selectors are insane they are something which i wish i used a lot more of early in my career because they do make your code and even when i do freelance projects i always use selectors now because they literally trust me build your code right not in a way that just works build it right from the get go and it will save you so much hassle and pain down the line um and then inside of react as well two fundamentals i want you guys to master so two fundamentals this stuff here is number one is state inside of an app inside of a component and number two number two is props that's so disproportionate anyway um and number two is props right now props we didn't cover too much today but these two things inside of react are going to be essential for you to sort of like to to push your react skills further right so with this set and obviously we spoke about things like flexbox and things like that which is obviously going to help your design skills sort of go to the next level when it comes to uh css sorry for the squiggly line yeah so you can see today so i want you guys to focus on the fundamentals things like flexbox and if you haven't already played it go ahead and check out oh no oh yeah go ahead and check out um flexbox foggy don't underestimate this game guys like i kid you not it taught me flexbox a game taught me flexbox and i went back to that game several times and it and i promise you it really did make me like the the reason why i'm so good at flexbox now is because of that game um it's just flexboxfoggy.com i think or google it honey i have a question regarding uh flexbox okay there are things and designs that can be done by flexbox uh so usually they say online that it's better to use grid is that true yeah so that you can you can definitely achieve some powerful designs with flexbox um you can achieve some really powerful design with css grid it really depends on your sort of like your requirement but don't underestimate flexbox because i i'm not sure if i'm allowed to do this but i'll show you guys but i'll show you a company that i worked at before right so it's mister because they say that that uh that the flags is uh unidirectional and not multibinary yeah honestly dude i like don't even worry about the jargon like if if it can make the thing look in a certain way that's what you need to worry about like in this case so i'll show you an example so i built this webpage for this was one of the companies i worked at once so it's pretty sick like nice little ui and stuff like that and then if you go down here so i built this section here and i remember we had the exact same discussion that you you mentioned now and they were like um the designer had all these funky designs right and they were like uh oh no we can't we can't really have that design because flexbox isn't gonna allow it and i was like no no no let me see if it actually we can do this right so this is all done with flexbox and breakpoints right so so what i'm gonna show you now is look when it resizes right so everything that you're about to see is done with flexbox and breakpoints so look at that it resizes to that size and then as it gets smaller boom it starts to resize and look at that everything you see there and that and and these are not like these are individual circles so and then you can get really granular with the designs and and like that's a design which if you had sort of originally looked at you'd be like okay there's no way i can build that with flexbox right this was actually built with flexbox and it uses a combination of flexbox uh in particular uses the order um the special thing called order inside of flexbox and it uses some kind of some positioning here as well um but this is kind of an advanced case of using it but you can see like it's extremely powerful so never underestimate it because you can really get some funky designs out of it um and there's also like at one point i'll show you something called storybook storybook is how i built all of these components literally without even looking at any of the other uh the the rest of the web page you build it in isolation and it teaches you very good responsive principles and stuff like that but that's a that's a conversation for another day um but yeah so just to sort of wrap up again the fundamentals we have the flexbox um we have like redux master the pattern and what i would say is like i always teach it this way learn react context api first and then move to redux because you're going to get that pattern a lot easier and the implementation of react context api is kind of simple compared to this but with the template yes this is cool but like um pedro said and a few others said the syntax is kind of confusing whereas in the react context api is kind of easier to grasp so i'd say use that approach first and then kind of go with this and then react fundamentals i want you guys to kind of dial down on the two main fundamentals of state and props these two are going to take you so far and you need to know these in order to sort of build out the web page because remember it's like building a house if your house is weak on the fundamentals like you haven't got a solid ground the house is eventually going to sink or it's going to break somewhere and trust me it will happen at some point like you might not see it now but it will come to a point where you're going to go ahead and be like oh the app works it's fine but you're going to reach a point where everything starts to like break and it's kind of like holding on by a thread and that's where you don't want to be right um so that's going to help you out a lot um so with that said um uh i'm gonna take i'm gonna take two questions and then we're gonna wrap up so two questions and then complete uh completely wrap up but has anyone got a final two questions and then we'll go ahead and and and finish up there funny i do have a question once you uh learn context uh and then you learn redux and you're comfortable with both should we stick with redux since it allows you to scale once you get past a certain point um okay so it's a very good question um so personally what i would say is is building your skill set on redux is going to make you it's going to provide a lot of value in commercial environments production environments i still use the react context api for freelancing jobs for example i took on a freelancing job not long ago i used the react context api because it was just the easier thing to use right it was quicker for me to build i was able to get the exact sort of functionality that i needed and i didn't need to over complicate the build so i used react context api but like i said but once you get that pattern dialed in really doesn't matter what syntax what method you're using but to be honest they've made the redux so easy with the new toolkit i mean like if i needed to create something a little bit more you know like a little bit more sort of intense i actually probably would use redux now because it before the resistance was higher because the entry was kind of like you know it was really long to get everything set up now you just run that one command and the entire template is up and running so uh before they didn't have that so i would have always gone with the context api but now i would say in terms of your value as a developer redux is going to push you really far away yeah awesome dude that was a good question um any one final question guys hey sonny what are the implementations of redux are you planning to include in the modules um so modules right now again like any any heavy node.js um type of interaction so so right now we're still working out the module sort of syllabus for react because it's quite a lot that we there's a lot to break down in terms of how we sort of teach it what's the best way to teach it and we're using these calls as a good sort of like filters to understand where the sort of trigger points are where students find it difficult where students find resistance so it would most likely eventually be a case of react basics teaching you sort of the a to b in terms of react then it will sort of teach you the kind of react context api route and then some kind of demo project and then kind of progress into your redux build and show that kind of project and then you'll sort of see the progression that i'm talking about um and then eventually like the final project will be some some full something like an amazon clone full stack with redux uh you know yeah and honestly what i would say is don't even wait for the the react modules dude i would say the react challenge has everything and what i would say is take it upon yourself uh to go ahead and literally clone the so so if you and this is a good example exercise for anyone right now is go ahead do the template that we did today and then repurpose it for the amazon clone if you can get that working i guarantee you your redux will be dialed in and you would have different slices for different pieces of states that is an awesome exercise for anyone who wants to really push your knowledge right now and sort of like because that's going to really excel you in terms of because it's going to be something which is going to really push you in terms of understanding and where things you know like it's going to really push you in that level and it's going to it's gonna be a very very good exercise for you to do today yeah today was about um uh redux today yeah so the main difference i'm sorry go ahead no so you can uh so the main difference you would say with between context api and redox is that the redux allow you to create multiple slices but contacts api doesn't no so you can is that the right understanding then you can do it with with the uh react context api but react context api wasn't built for this like it wasn't really built to be used in that way i've modified it in a way to make it do the exact same job in a very easy snippet of code um so when you say modified is it more more uh not manageable type of code that you create yeah i would say so redux is built to scale it's built to you can definitely do it with react context api uh redux has a lot and and remember what we spoke about today was a direct comparison of what react context api offers against redux redox offers a ton more in terms of middleware in terms of extra things that you can plug into your redox just like you can plug things into react redux itself has a bunch of like it's so well built out in terms of community you have just plug and play basically yeah you have redux thunk you have redux offline which handles offline data persistence all that sort of stuff is now sort of supported and they have immense like documentation around it and it's it's a really really um uh well supported uh uh library module whatever the hell we want to call it companies yeah it would be redux that they would list exactly so my um my approach is learn the react context api to understand the pattern and then transition across the redux and you'll find the transition easy um otherwise if you jump straight to redux it's like trying to like you can't even walk yet and you're trying to sprint you see like it's going to be it's going to be a very big jump i'm not saying it's impossible but it's going to be something which is going to be a lot more resistant you're going to face a lot more resistance and like difficulty in an understanding as opposed to and this is take it from someone who went the hard route in the beginning and this would this would ease your transition by doing the react context api then progressing to uh their redux cool don't yeah so remember it'll be straight on youtube right now and what we're doing is we're dialing in the process to get it up on the on pwj um like as quick as possible as well we're trying to work on that in terms of we're working with the customer support team to make that really quick and easy um there's been a bunch of headache with the even with the waiting room stuff from updates so we're just trying to fix a lot of technical technical stuff while carrying on the content the youtube link uh if you check if you type in cover program i'll go ahead and drop in the zoom chat right now um but yeah so so remember these chats you can pretty much just go ahead and watch on youtube um but yeah yeah that was so sonny this will be the norm going forward all the calls will be on simultaneously are streamed on youtube and then so the the reason i'm saying is if it's on youtube there's less less of a headache because people keep asking for this and if you're already pushing it to youtube then no worries right yeah so there's two reasons right away one is uh it it's going to help a lot more people too uh and if anyone who's got the questions as opposed to like uh like but then you get the coaching calls on youtube it's not the same like trust me it's not the same to be inside the corn to ask questions and to be inside the community and things like that is you have a lot of value here you also have like direct access to each other you have direct success access to a lot more also it's something we're trialing we're testing it out for now it doesn't we're not saying yes we're going to be putting every coaching call in the future on on youtube but remember every on youtube there's only limited calls on on pwj you have all the previous calls as well that you can go back on and check out as well so yeah and also everyone on youtube go ahead and smash the thumbs up button if you enjoyed that yeah if you have room for one more question let's do it one more question and we're done yeah yeah so uh you were saying in uh redux like it's like a layer of onion right yeah and for each context we are having various slices right so now in this case like we're having the counter but we might have uh multiple variables also in one particular slice right so do i do it in the initial state i create an object inside it or should i how do i how do i encounter like if i'm facing such a case scenario how do i encounter that so you do it like this you pretty much just have initial state the name age you'll have things like the name age let's just say height uh you'll have the i'm not 20 by the way yeah there we go um and then you can have like a city london or something like this okay um and then basically what you could do is uh if i show you inside the app quickly um now if we go to the state you see inside the user we have the variables okay yeah so sunny in that in in that right there where you the initial state that could be a a database call where you're getting all that information uh on load and you know instead of hardcoding it here no so so you want to set the initial state always here and then inside of your app you would have a user effect which would make a call upon loading oh gotcha yeah so you want to want to do that and then you kind of then you kind of like um uh it really depends right so so you can sometimes you have middlewares as well which handle this this kind of comes down to architecture which kind of gets a little bit more complicated but try and keep it simple for now but to solve the problem at this point use a use effect okay yeah um thanks perfect okay with that said guys what's up uh yeah sony i'm just asking uh about these hoops yeah accused effect are you gonna plan on this that you will gonna teach the books like on a separate call yeah so in fact in fact what i would recommend you really heavily do and this will provide you with a huge amount of value is for for hooks and things like that go ahead and check out uh previous coaching calls and also go ahead and check out the clones on the clones guys the clones are so valuable like i'm not doing those clones will teach you everything they will teach you because because it's one thing to teach you it right but if you see it being used in all sorts of scenarios it just shows you okay i can use it like this i can use it like this i can use it like this this is how i write it and then you get pattern recognition which means that even if you don't recognize the syntax you know that okay he's using a used state hook he's using a user factor that's what that does that's what this does so the clones there's like 25 clones up on youtube right now i'd recommend checking all of them in your own time um and also i would recommend also checking the previous coaching calls because there are some coaching calls that i actually went through hooks just purely hooks um uh but but for sure like there will be definitely like topup taster sessions of hooks and things like that here yeah because i recommend that especially for the like when we move from the class based component to the functional component yeah so what exactly on which which syntax is representing like use effect if i do a multiple job yeah like component date mount component exactly yeah so these kind of concepts we want to understand because this is the main like subscribing when we used to we should subscribe when we should unsubscribe this is actions like that yeah this is all going to be part of react basics which is the module that we're going to be dropping soon in in pwj so i'm working on that now but at the same time i'm shooting the videos on thursday friday for discord imessage so there's quite a lot of like content as well as a gazillion tech issues um behind the scenes so so really trying to like pump out the content for you guys uh so to get you guys as much value as possible but um a hundred percent i agree with you uh and also just to answer your question all of those lifecycle hooks that you mentioned component demand component will component should update and all those things every single one gets replaced with use effect which is nice yeah so every single one gets replaced with use effect but how many times we use it we have to understand that because the use case like if you will the use case for one example so the use case like the use case that's what i'm saying so the use case is going to be the best way of demonstrating that is because even if i was to explain it in a call the best thing for you to do is go through those clones honestly because you'll see so many use effect use cases in those clones i i demonstrate on on different builds different cones different different scenarios and we used tons of different use effects throughout that um so i would definitely go ahead and check that out yeah um awesome okay with that said guys i'm gonna call it on questions there i hope you guys enjoyed that call um awesome yeah awesome bro i love that guys and also upper react always drives value man thank you thank you so much guys every so pretty much and and thank you also for accommodating today because it was a change of plan but you guys are awesome you guys stuck around and sort of stick to stuck to the end so really appreciate and love all of you guys and like i said go ahead and do go through this entire build in your own time and if you can and you want a challenge literally try and do a redux conversion of the amazon clone that'll be an awesome challenge for you guys but with that said everyone on youtube as well if you enjoyed that smash the thumbs up button because it'll just help the video go out to more people and it'll help we're almost at 800k subscribers which is insane um we're like a few few away from it so uh thank you so much guys and um yeah i know right thank you so much guys and uh i will see you in the next coaching call actually i'll see you this week on thursday and friday yeah and for everyone on youtube if you guys enjoyed that stick around make sure you subscribe we're almost 800k so if you want to be a part of that literally just hit the subscribe button make sure you subscribe to the notifications and also guys smash the thumbs up button so that the video goes out to you as many people as it possibly can really appreciate and love all of you guys and i will see you next time signing out peace