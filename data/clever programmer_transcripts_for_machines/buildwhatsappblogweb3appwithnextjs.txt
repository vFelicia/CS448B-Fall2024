in this video you're going to be building WhatsApp web 3.0 dap using next.js we're going to be using third map to deploy our custom made solidity contract that will keep track of all the messages that you and all the other users are going to send and receive with this app and once we are done with the app we're going to use digitalocean to deploy it to the Internet so with that said let's just jump straight into the build all right let's go ahead and get started building the WhatsApp clone so as always just go into your favorite folder wherever you like to build our stuff and then just run our clever programmer CLI so let's see programmer and there you go just pop in your email and your name and now you can type in WhatsApp and it will narrow it down it will immediately pop open two websites for you so one of them is third web and we're going to get there in just a little bit you can go ahead and connect your meta mask right here so that's helpful if you do that immediately and the other one is digitalocean who are giving you 200 if you use the link to sign up and so let's go ahead and just go ahead and set it up so I prefer to use Google sign in all the time everywhere all around the internet so once you hit that Google sign up connect one of your payment methods you will be charged with a little bit of my money but it will be reverted immediately so don't worry about that I prefer to use a card so I'm just going to do that it'll all be blurred out but you can probably figure it out card number expiration CBC name and your billing address and as you can see it already says my card is a death added successfully so that's pretty cool and um you can immediately get started hosting stuff I'm just gonna go and hit explore over there and that will set up my first project so I actually don't even need to worry about it you can customize it look around feel it out after the video you want to get the retention high and if you just go into Apps that'll be the best to prepare everything for the rest of the build and once you're already here in the meantime our CLI tool just finished everything it also says opening vs code which actually got done in my other screen let's go ahead and pull that over and there we go that is pretty much everything we're going to need for now so you want to double check the node modules that are installed and if they are what you can do is CD into your next app and then go ahead and hit yarn depth that will spin up your next step and basically you're good to go at this point let's see what we got so it opened up on localhost 3001 whatever reason I have something running on local 3000 and here's your app that is basically it and probably my metamask is already connected something we're going to disconnect and so yeah this is what you will see and then you have already metamask connection enabled so let's go ahead and now set up our contract let's deploy it and let's keep going all right now with all that done let's go ahead and come back here and what I'm going to do is I'm just gonna try type here truffle create contract and I'm gonna call it what's app just like that and what that's going to do is it will generate a WhatsApp solidity file right here let me actually make it nice and big for you that's what she said so once you're there first of all what we want to do is make sure that our solidity version is 0.8.17 that's what we're going to be using and you want to also make sure that in your truffle config if you scroll down it actually should be coming with the CLI but yeah you definitely want to make sure that this is 0 8 17 as well so now that we're here let's go ahead and actually build this contract out we are not going to need the Constructor but what we're going to need is we're going to have a struct which is going to be a message struct and we're going to Define what the message is going to be made up of so we're going to have a user who sends the message we're going to have a string which is going to be the message text itself the uint which is going to be the timestamp and um that's basically it now we're going to create an array of these messages we're then going to create a number that will that will just keep track of how many messages have already been sent and we're gonna go ahead create a mapping that is going to map a map when the person message the last time so that's going to be a public mapping and we're going to call it last message that's going to be helpful later on I'll explain it when we get there so we're going to need an event which will you can just name it new message and it will take an address which will be indexed from which will be which will be the from and then we're going to have a u and it's going to be the timestamp of that specific message and the string which will be the message itself with just two s's like that and I don't think okay something is up here let's let's try this out again all right there we go and let's put out the semicolon at the end of the line now we're gonna have two functions one of them is going to be send message and it's going to be public function and the other one is going to be get all messages like that it's going to be another public one and we're also going to have actually a light we're gonna have three functions in here so that's going to be get total messages count so it's going to be like that again a public One open close you're good to go Bob is your uncle now these are going to be the easier ones so I think we should just go ahead and get started with these so it's going to return total messages now something you need to do in solidity is actually Define what type of data will be returned so let's actually do that right now and let's fix the indentation and all that stuff and let's do this for the other one and this is going to return this is going to be a public View and it's going to return a whoa message array just like that from the memory just like that and it's gonna be in third person like that and we're going to return messages but so far it's pretty easy these are the easy ones now this one isn't going to be hard either I'm just going to start at the very end uh what we want to do is emit a new message event where we're going to send or we're going to pass in the message sender who's going to be the from person we're going to pass in block.timestamp time stamp just like that we're going to pass in another score message now you might be wondering what that is but that is something that we need to pass into this function from the front end so let's go ahead and Define all those things so that's actually going to be one thing it's going to be a string so that that's that and that's where it's going to come from now again I keep forgetting these uh semicolons it will keep coming up because like I will keep forget them so that's something you shouldn't forget but I certainly do forget all the time not now obviously all right talk about it all right so now what we're going to do is we're going to say this is where we're going to set a time limit or like a there has to be this is where we're going to set a constraint that five seconds have to be have to pass between two messages sent from the same person so like nobody's gonna go and have some adrenaline rush and just like blast messages to the group because that's unhealthy so what we're going to do is say last message and then passive message that's sender so that's the person that is actually executing the function and we're going to say plus five seconds must be less than clock Dot timestamp and oops settings came up and we're just going to go ahead and say a little nice error message we're going to say wait five seconds before sending another message just like that so that should pretty much be good to go now you can increase it's decreases as you want to and also solidity is like super op because you can type in five seconds like that that's crazy and it like understands it actually it's not just like my mistake there so what we're gonna say is moving on is last message sender or we have to update it so that's going to be block timestamp and then we're going to increase the number of total messages like incremented like that and then what we're going to do is just like in regular JavaScript we're going to push a new message into our array up here so what what do we need we need the address we need the text and we need the timestamp so we're going to say message dot sender like that message and block dot timestamp just like that now it says push not found or visible so what we need to do is actually format this in a format that this will actually like it so that should be good yeah so that's pretty much our contract now let's go ahead and build it just so we're on the same side and you can use multiple things I just like to use this stuff right there I have truffle enabled and it says compiling everything is up to date nothing to compile here that sounds interesting so just for safety just run truffle compile because truffle build is not used anymore so let's see what happens next okay we're good that's basically it now let's go ahead and deploy this contract all right nice to see you here let's continue deploying this guy a few things I want to show you because that third rope is cool but what I want you to do is like whatever website your CLI pulled up just go there and hit that Turtle icon because that's going to take you to your dashboard now you want to make sure that you're on the girly Network because right now that's pretty much the only test Network I know about that's not like completely toast like rinkaby is done for all these builds are like out the window and as you can see I already build it once yeah and then here actually you can click that and then just go there and it's like literally this too easy guys third lab stop making things too easy all right we're just gonna stick with this one little command that's going to like take care of everything so you just want to put it in here actually I'm not there you want to go out to or once after a YouTube app right here and paste it there and I'll sit back and relax enjoy the views now once it is done you will see this and it probably opens up in your uh browser but Chrome is not my favorite browser so it's not the default one but this is the one that I use for all kinds of development stuff so that's the link that you're going to get or not this one but something like that you get the point just put it in here it will be opened up you can select the chain it's obviously girly that's the only one that like exists at this point I think anyways now what you want to do is hit this deploy thing so let's go ahead and do that there will be two transactions so the first one is like this guy right here wait for the confirm hit that this will take a little time so let's wait for it and then another one will show up and there it is there's the other one so if you keep your meta mask open it's not going to pop up again because it's already open so you can just click that scroll down and confirm and once all of it goes through this is what you will see now this is a super cool interface where you can uh mess with your Contour so I'm just gonna make things a little big here so you can see it better like it just executes everything for you and you can keep refreshing it and you can double check that stuff that you are receiving on your end inside your app is the same as what you will actually get back so this is a cool tool that you can use to double check that your app is working perfectly and you can even send message here so yeah that being said let's go ahead and connect this to our front end all right come back to the red lit studio now what you want to do is go to your code section and this is where all the magic is at all right anyways let's go into your context and that's where all the magic is going to happen so we're gonna go ahead and get started we're gonna go ahead and get started by setting up a couple of States over here so as you can see we already have use account and all that kind of stuff imported so let's just extract the user address over here and let's just say that's going to be equal to whoa not that use account like that and let's go ahead and now have a message is just set messages just like that and another one is in user a press like that and those are perfect initial values now these are going to be our uh these are going to be our states so let's export them straight away so we're going to have messages and we're gonna have user address and if we go into your chat index file we already imported the context for you so what you can do is say what you can do is say messages oops messages equals use app context that way you can remove that dummy data and basically this file is ready to go and the app is going to be perfectly Dynamic the moment you start using it and the moment you start fetching stuff now the one thing though that I messed up is this address has to be like that you don't have to destructure it all right with that let's go ahead and set up all the contract connections so if you have another the CLI tool has already done all this for you but you might as well want to run it once again I don't know it's there if you want to and you can disregard all the import statements for now because once again the CLI tool took care of that so what you want to do is copy this line of code and just paste it like right here and what I like to do is just command X that guy out and then just say process Dot oops process.environment dot contract address like that and now what I will do is go ahead and create a dot dot env.local file and what that will allow me to do is I will be able to change the contract address super easily if later on I decide to update the contract so that's just a nice little touch and what you can also do is whenever we're going to deploy this whole application to digitalocean where you can have a local developer version on a test net and if you were to deploy it to the main net that can go to onto your digitalocean so that will connect to the I will connect to the mainnet that's so there's that will be our contract connection again if you've watched any of our previous builds where we custom built out everything this is like outrageously easy compared to that anyways so what we're going to do now is we're going to set up all the functions that that will read the messages and then the one that is going to send the messages so we're going to have two functions to do one get messages and that will be an async function and we're also going to have a send message that is once again going to be an async function and actually that will have an input like that so let's go ahead and get started with get messages now the only thing that never goes away is the try catch when when working with anything blockchain related so that keeps on being a thing now in your try catch now to make everything work we will set two more things up out here and that'll be your functions connections to the contract and once again ridiculously easy so copy that line under reading data and that guy over here so that guy and then paste it right there now we're gonna rename a few things over here just because uh just for an easier readability so it's going to be message messages date like that and we're gonna and we're also gonna rename his loading to messages loading there's going to be multiple loadings in here and I just don't want it to get confused and then for writing data we also want to copy that that bad boy and then just put it right underneath now we're going to rename muted async to message and is loading to set message send message loading so what this is what this does in a nutshell is this sets up the contract instance and these two will establish all the function connections so your app is going to prefetch everything and it will have everything ready to go and all of them is going to be ready and connected to third web so whenever you invoke it it's going to be much faster than how you would normally do it that's once again third it was too convenient at this point dang now what we'll do is inside of get get messages trial statement we'll make sure that if the messages are loading we not we don't try to like fetch the messages again because that just doesn't make sense I forgot the S there and whenever whenever all the messages are actually loaded we're gonna need to format them a little bit so we're going to have formatted messages and it will be messages data dot map so once again what's happening is everything is being fetched like straight away you don't have a choice it just happens and then here all you do is just format them so we grab each individual message and we'll return an address so it's going to be more easier to read and instead of that we're going to say is message dot user and then we're going to have the message itself it's going to message the message and we're going to have a time stamp that we're going to use moment js4 so we're going to say moment the Unix open close paren and now we're going to parse int we're going to generate a number out of a few things it's going to be mess message.timestamp like that and we're going to convert that to a string real quick and we'll format this to an hour minute oops hour minute Am Pm format so that's all it does and then the entire thing is going to be a Unix timestamp so we're going to be able to work with it later on in the app and then let's just update the state so send messages and formatted messages so that in theory should already fetch everything we have so let's connect let's connect our meta mask and you don't see anything so that's perfect that means there's nothing there like no messages in there all right now to be able to send messages we're gonna go in the send message function and we're going to have another try catch thing here so we'll catch air and open close brand once again so console log error like that and all we're going to do is we already destructured we're already got all the all the function connections so we're gonna use this function the message function and we're going to just say await message pass in message and you gotta make sure that it's going to be an array and so that is pretty much it now we'll need to export this bad boy so paste that there and now if you go in and now if you go into your chat input file we'll need to wait we'll need to go ahead and actually destructure this from the context so we got that there and then right here in the handle handle send message function you will be able to go ahead and say oh wait and send message and input now before we before before you send anything here what I want to do is just make sure that the input has to have some sort of value so if it's empty we don't want this function to run at all and basically that is it so let's go ahead and check this guy out let's see what do we got and so I'm just going to say yo this build is awesome and just in case there are any kind of Errors I just want to have my console open so we can debug everything quick and let's hit return on that it says message is not a function okay so maybe there is some sort of conflict between this message and that message so maybe let's rename this to a message text and paste that there let's see if that fixed our issue or not um just for like safety measures I'm just going to restart our app now I also want to make sure that whenever I load my app before anything I want to run a use effect that will basically fetch all the messages so it will run get messages and it will also update my users set user address and I just want to say address in there so that's perfect and I also want this to run every single time my wallet is actually changed so let's see what we got there's some sort of crazy thing going on there so that's not cool let's see what can we do about that also there is a there was a typo to burn this something is wrong with this use effect because it keeps firing things off for no reason okay yeah so if I comment that out it stops so apparently you actually do need to destructure account and that'll stop that random constant rendering so let's actually put those back around there and I also renamed them to account instead of address just because it's more descriptive so that should in theory now work so let's see what do we got so let's just type in something yo this is cool exclamation point all right it says contract must be defined what do we go what is the issue with contract though let's just say console log contract and I also have a hunch that this process environment situation is going to cause a lot of trouble so let's call console log that guy out too just for fun okay so the reason that's not being rendered out because the browser itself doesn't have access to contract address so what you want to do is just say next underscore public and that is going to be your new name so go into your EnV file and that's going to be your new name so once we're good there we can actually remove this and I'm pretty sure it's going to work after I restart this whole process and let's refresh all right this is dope oops I left a catalog on and there you go there is your meta mask popping up so that should be working now so let's confirm it let's see what do we got and how is it gonna work and now it says it's pending let's give it some more juice and there you go the message is sent now you will need to re reload this you will need to reload in this instance and for some reason okay it was just a little delayed but there you have it that is your app you can now go ahead and send messages using this interface and there you go just to prove it out this is yo how's it going have you subscribed yet and if you haven't what are you doing just go subscribe while I send this nice little message over here let's go ahead hit confirm on that bad boy as well let's wait for it a little bit and let's refresh let's see what do we got bam there you go now just before we wrap this up this is the time we go ahead and upload this and deploy this using digitalocean so let's do that all right let's set up everything for digitalocean there's a few key things that you need to set up before you can even get started so first of all you need to make sure that you have this line in here Pro it comes with the CLI tool but in the future you want to copy this over once this is done because digitalocean has a different way of processing images you have to go into your next config file and make sure that unoptimized is set to true I cannot emphasize this enough without that your entire deployment is going to fail and there's your 200 running out for no reason all right so those are the two preparations that we need to do now the other thing you can you need to do is we'll need to put this entire project onto a GitHub repo so what I'm going to do is just say rmrf because and Dot get and what that will essentially do is basically remove the current version management that we have going on right now that comes with the CLI tool now what I'm going to do now is go into my GitHub quick sign in right there fingerprint security key fingerprint that bad boy again and there's my GitHub nice little shout out go go ahead follow me because if you don't what are you doing all right I'm just gonna give it a repo name and it will be what's up live because we built this live together it's gonna be a public one because I don't care and now what I'm gonna do is just follow all this stuff so I'm going to say get in it in here oops get in it like that that initializes a new a new version control over there and then I'm going to say git remote at origin and then just copy whatever link you got there paste that guy right there so that technically connected the two two repositories together now what you want to do is say git add period not slash period like that that'll stage all the changes that are happening here which is a bunch and now what you want to do is say get commit Dash M and you can just type in whatever you want but I'm just gonna say little nice check mark and app is done exclamation point I messed something up there good commute there you go I don't know what happened there that seems pretty much the same oh you cannot do exclamation point apparently you should see a bunch of files like that and that means that you did good stuff there and it should go it should say zero out here and all that stuff now once it is done just say git push has no Upstream yada yada okay that's fine I'm gonna just go ahead and copy that it probably works bam there you go now if it went through well that it should technically show up on your GitHub and there it is my app is done right here perfect so once that is ready to go now I want you to go into your digital ocean platform in here you will need to go to apps as we did earlier and then you can just go ahead hit create or create app just right there in the middle and then you will need to enable GitHub access right here I can't seem to draw a circle around it there you go so manage access go right there and select the appropriate account you got hit our repository that doesn't really matter now we'll load a little bit and then you can go ahead and select which repository you will enable or which repository are we talking about and in this case it is WhatsApp live so I'm just gonna say WhatsApp Dash live right there and select that repo now if you remember there's a few folders here but the one that we want to deploy is inside of next app so that guy right there so you want to type in next Dash app right here make sure you have Auto deploy checked off and then you want to go with the main branch because that's the only one now hit next and then here in environment variables we'll go ahead and set the globals up so go ahead hit edit and go back into your EnV file copy the name of it put that there as key and then copy this value which is just your contract address paste hit save and if it says one environment variable you're good to go now hit next was a little too close hit next again review yada yada it will say that it will cost you twenty four dollars per month however forget you have 200 dollars so spend it now go ahead create resource and it will take a little bit of time to deploy it so if if you can see something like this like some random name that was given has been created and you're good and then now you can go into your build logs and watch it go live real time and there you go there's your app go ahead and now up here it will show up right there and if you click it I should bring it to Chrome or whatever it supports metamask let's go ahead and now connect connect and you're pretty much good to go so thank you so much for watching with that said see you in the next one