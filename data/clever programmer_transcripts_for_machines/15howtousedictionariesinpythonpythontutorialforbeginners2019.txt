hey what's up you guys aaron from claire programmer here and today we're gonna be delving into dictionaries in Python so first off dictionaries are just another data structure in Python they are known as Maps or hashmaps if you're coming from another programming language and all pretty much they're really good for having super organized data they're basically mini databases also their fastest out you can index into them in constant time dictionaries are used like everywhere pretty much the contacts in your phone like if you have like bunch of phone numbers and email addresses associated with the main um that is how it's stored in the phone using a dictionary um if you have like a grocery list app on your phone or something that's like saying oh okay I need to buy 17 pancakes and four and a half who loops then a dictionary is probably how its implemented it's very good for basically storing data in a database because that's pretty much what it is what we'll be going over is how to create dictionaries like the syntax of them I'll do index into dictionaries how to add the dictionaries are what key value pairs are in an element of a dictionary and functions like get items keys values pop pop item and clear okay what those all do um and then we'll be going over a few examples and even how you could sort a dictionary so if any of that is what you're looking for then that's what I cover in this video let's get started so let's just create a dictionary dictionary so the way a dictionary works is instead of having elements that you can index into with numbers like in a list if you guys don't remember remember if you have a list then you would index it like this or something listed zero listed Wanless it to etc and instead of doing something like that in a dictionary you can actually specify what your your index names are so and these can be anything actually but usually there are strings let's just show you that so we could say let's say we have actually let let's do an example let's say we have a let's say we have some groceries okay you could put some things here so you could put bananas and strings and then have a colon here and then have a number okay so this is what a one element dictionary looks like there's a little thing here on the left of a colon usually a string and then a colon and then another value over here okay so that's one element in a dictionary two elements would look like this oranges three all right I think you guys understand by this point so this is the first element of the dictionary and this is the second element so now that you've seen what it looks like I'll explain so a dictionary is a way you can organize data in a more organized matter nothing that was a little redundant but pretty much you can you can say that these two things for each item in the dictionary these two things are associated so this on the left is actually called a key this on the right is I should call the value this is called a key value pair they have these in every ProLiant languages well you might know them as maps or hash maps and other programming languages but in Python they're called dictionaries same thing here this is a key and this is a value and these are a pair these will always be together so what's cool about dictionaries is that if you have a dictionary since and we do we have a dictionary called groceries instead of if I wanted to get the first element here bananas and five um I couldn't I can't just take in zero like this because that's not going to work all right what you actually to do is put in bananas so you see how we're indexing into this dictionary with the key okay we need the key that's why it's called a key you need the key to get the value so let's run this and see what happens or leave Chuck in a print statement first let's see what happens as you can see five popped up which is this five right here because we used bananas here too as the key then it gets its associated value which is five if we put in oranges here you can believe you know that three would pop up go try it yourself you don't believe me but yeah I'm pretty sure most of you can make that conclusion yourself it'll work the exact same way as this been honest in all right so that's how you that's how you index into a dictionary using using this notation here but you might be asking okay well in a list if I put in a number that's not in the in the list like about a list of length five and I put in an index of like 300 then you're gonna get an error same deal with same deal with dictionaries if you put in something like like a key that doesn't exist in dictionary then you will actually get a key airsea a key air right here it says hello is not hello is not in the dictionary which makes sense so actually instead of using this um bracket notation here and kind of like indexing into lists but your indexing into each dictionary there's actually a method called dot yet which does the exact same thing but if the key is not found in the dictionary then it won't give you an error it'll just say none it'll just spit out a none type so you avoid this red text of doom and death and um everything worked fine so if I put in but now Ashley's put in oranges sure to show you now okay bananas here bananas just keep it simple and can sort keep it consistent if I run this you're gonna get five just like when we use brackets okay but if I put hello which isn't a key in the dictionary and I hit run then you just get none instead of the big error so that's a nice little method that you're given it just as a little safety check within this get method it probably does the bracketing itself into the dictionary but it says if it's not in the dictionary then return none rather than then giving us an error so that's a little that's a nice thing to use um just you can if you know it's in the dictionary you can just use the bracket notation but if you don't know then it's better to use get it's just safer okay so those are some basics of dictionaries or dictionaries are very very good for these kinds of things maybe another example we have is maybe we had a a contact list okay so if you had a contact or a contacts let's say you had a bunch of friends and they all had phone numbers okay how would you do that with a list how would you associate a phone number with friends I mean you could have like one list called names and then one list called phone numbers and then just have the corresponding elements all be each other but that's just kind of silly because it's like two separate lists and if one gets screwed up or there's mistaken one then they're not then the entire things next messed up like if one thing is good if like the first name got deleted and everything is gonna shift over and it's just a big mess so that's where dictionaries come into play okay you could have something like this and I'm just going to format it differently so that it's nice and I sort of look at let's just say you had Joe as a friend okay and his phone number was one two three four five six seven all right and then you had Jane and her phone number was nine eight seven six five four three okay so this here shows us um that Joe and this phone number are corresponding because this is the key and this is the value same with Jane so now we can actually just index into this using the name and we can get so if you wanted to get Joe's phone number we would just put in Joe into contacts and what's the issue here oh oh I forgot a comma yeah you need a comma to separate all of the dictionary values Oh what is happening here Oh silly me so the formatting was fine here okay but obviously I can't have these dashes in these numbers okay Python doesn't know what the heck this is it thinks it's nine eighty seven well actually no Python thinks it's nine eighty seven 6543 and uh and python thinks that this is one 123 400 400 500 4567 what I actually need is just the phone number like that okay without the that's stupid or we could even use strings okay we could actually do this why do we do this this makes more sense okay hit run there we go and this string gets given back to us when we get Joe and if you want to Jane you better believe it we get her phone number too okay so that's pretty cool right this allows us to structure data with any name any key we want and then put anything one over here the real the real power of dictionaries though is when we actually start putting a bunch of different things in here so let's this is a contacts list right they might have more than just a phone number so if they have more than just a phone number then why don't we use a list here right you could just use a list like this okay so you have a phone number here and then you have an email address so email address email address add website com it's going to be straight okay at website.com and same deal here we just put a list whatever em at web.com good enough some weird examples but you guys get the idea so you're able to now associate this key this name of Joe with all of these things in this list alright this is something that is very very powerful with dictionaries um you're able to basically structure the data in any way you want group it together in any way you want and of course this this list can be of any length you want so you can actually put as many contacts you could have a phone number you could have a email address you could have a LinkedIn account you could have a Facebook you'd have everything Instagram account snapchat etc it never ends so you're basically allowed infinite flexibility when it comes to defining what it means to have a contact of Joe do you have his home address his billing address everything okay um but what about this you could even make this better and actually make this a dictionary itself right so this is a dictionary and then you have Joe and then within this its value is actually a dictionary you see where I'm going with this right so you could actually have phone number or just put phone and then boom you have that there and email okay and now I have a dictionary of contacts with his name and then for each person there's a dictionary associated with that person that has all his contacts so his phone is this his email is this and so on and you can you can keep doing these nested dictionaries as much as you want so this verse is this you can see how this is a little bit more descriptive and um you can really see the power of dictionaries here because try representing all these ideas like Joe has a phone number of this and an email of this and Jane has a similar thing with only lists think about it how would you how would you coherently and in a smart and intelligent way represent that and with a list you just can't so dictionaries are good for that some other examples you could use or you could use dictionaries to do things like count the most common words in a sentence this is a little example that I learned when I was learning dictionaries myself many years ago in my first Python class at university but what if you had a dictionary called word count word counts okay and let's say you just wanted to count all the words in a string so or a sentence which is a string okay so let's just say I like the name Aaron because the name Aaron is the best all right so we can see this this sentence here and let's say we wanted to know actually let's get rid of to simplify this let's say we wanted to count all the words here okay and you want to count the the how many times each word occurs in this dictionary something you can do with dictionaries is you could actually either iterate through this entire string well actually you'd have to split this up into a list so that each word is its own element there's a method for that called string dot I believe string dot split and then you would get all these words in a list and then you can iterate through all them and then every time you see a word you add it to the dictionary and every time you see it again you can up the count so it would end up looking like this I'm not actually gonna code this out because of there yet there's a lot of code there well you guys can do that if you want but this is what the end result would actually look like um you would have I okay would be one you would have liked which would also be one all right and then you would have V which would be why is this double quotes you would have V and that would actually be three as you can see it pops up three times V here V there and feed them so this is the idea that I'm getting so you're able to go in and every time you see you're iterating through these every time you see a word and you see that it's in the dictionary and then you can just go into this dictionary by indexing like for thee when this word V whenever you see it you could uh you could have just gone like this word counts at V um and then you just add one to it so whatever numbers there you would just add one to it okay and you would have to actually do it this way so you would just say okay the new value of this thing here in the dictionary is whatever the old value was plus one okay and then you would every time you see the then you would took that it okay that's the idea so dictionaries are very useful for these kinds of things it keeps it very nice and organized you can see here is counting how many occurrences of each word there are imagine if you had an entire book you could actually go through this and then sort it by these these values to see which words were used the most in which have reduced least okay and sorting a dictionary that brings me to a different another thing I want to talk to you guys about is actually um some methods you can use in dictionaries so we have some dictionaries here but let's say you wanted to get all of the data within the dictionary back out so there's actually three methods here I am going to print them out here in a comment so you can see what to look like it's called dikdik items okay dict dots keys and dict dot values alright so we have three methods here and I'm just gonna explain what they all do verbally and then I'll show you so here this dick is just saying you have a dictionary here so that would be word counts or contacts you would stick that word that is dictate and then if you call dot items on it what actually get is a list of tuples and each tuple is a key value pair alright you will call that items and you'll get a list of tuples and each tuple is a key value pair I said it twice so that you guys can let that sink in if you didn't get the first time on this one same deal but you will get a list of just the keys so you would get I like and V for this and if you called it values you would get a list of only the values 1 1 & 3 okay so this gets you a list of tuples of both this gets you a list of just the keys the the orange strings here and this would get you just the green values the the numbers or these could be lists or dictionaries themselves you know what I mean it can be whatever you want but these are the three methods let's just see what this looks like let's just do word counts okay so word counts dot items okay let's just print this and close this off print it and as you can see it says dick items and then you have this list in here of tuples this highlighted portion you have a list of a tuple so i is one like is one and V is three okay if you want to make this actually a list instead of a dict items thing i apparently if you call items you get a dict items addicted ohms object but i'm pretty sure you could actually just cast this to a list just like this hit run and bat yeah see you just get the list out so that's that's a very useful use case of casting i think i went over that in a video a few days ago or a few minutes ago if you're watching this if you're binge watching this and trying to learn Python for the first time or whatnot but yeah so you can actually cast that to a list to actually get the list out of it so that's that let's try the next one now so we have that we have keys same deals gonna happen if I delete this you're gonna get that dick two items object can so I'm just gonna leave this list cast in and just change this so instead of calling items we're gonna call keys and you guys can probably predict what we're gonna get you get all the keys I like and V alright and same deal with values I'm just gonna show you for completeness sake but I'm pretty sure you guys understand what's going to happen you're gonna get these numbers here 1 1 & 3 okay so that's three very common methods in Python for dictionaries but you also have a few more like what if you wanted to delete something from a dictionary okay if you wanted to delete something from a dictionary how would you do that well there's a there's a method for that as well so let's say we wanted to delete word counts equals oh what am i doing word counts dot pop okay so pop what it does that's a little bit of a weird a weird word choice in my opinion I'm used to it because I've been programming for a long time but when you pop something you are like you are taking one item from a group of things so a dictionary a tuple a list or whatever and then you're just popping one off so you pop usually the last one or the top one or whatever you pop off one element that's why it's called pop instead of remove or something but you can actually pop something out of a dictionary by calling it's key so this would actually completely get rid of this thing if I ran this or I am running this I just haven't run the code yo but this line of code will actually delete this from the dictionary and then this will only be in the word count dictionary following here likewise if I use like then it'll delete it'll delete like if I use E then it'll delete delete' V okay let's just try that so let's run this and then so printed before delete V and then print it after okay so I'm gonna print the dictionary you're gonna see the whole thing I'm gonna pop one of them off and then I'm going to print the dictionary again so as you can see v has disappeared because we popped it off alright so that's what pops up that's how you remove a remove something from a dictionary and one cool thing is it's called pop because this here is actually this I mean I mean this this little thing so if we actually printed this it's actually popping it's not just deleting it it's actually popping it off and retrieving it from the dictionary for us and then allowing us and then getting rid of it so let's say you had a bunch of contacts you'd be like okay retrieve and delete contact then you in this contacts dictionary you could like pop off one of the things it would delete it from the diction form the thing and then it retrieves it so that you can like display like oh this person was deleted blah blah blah blah or something like that so as you can see um it gets this value actually doesn't get the entire thing I guess ooh I guess when you pop it then it only returns the value not the key as well but yeah you're able to get the value of this key back from this entire expression here all right so that's pop now there's also a way you can just get rid of you can pop off a random one so instead of actually specifying which one you want with the key you can just call pop I don't like this so let's say word counts dot pop item and then um print word counts oops print word counts like that and let's do this twice boom boom so this is actually going to pop a random thing from this it was gonna it's either gonna pop this one or this one or this one it's just random I don't know how the computer determines that but it's just random so it's just if all you want to do is just get rid of one thing then you could do it that way or even like you could do you could run pop item three times and each time you go through it remember how you got number how we got this three back when we when we just used a regular pop method here using the key then we got forget back if you called pop item three times you would eventually get all these numbers in a random order but let's just say that's all you like you had to sum up all these things you could actually do it this way you could just pop item three times and then keep adding one to want um adding these numbers together so one plus one plus three you would eventually get five something like that I can't think of a good example right now but I'm sure that would be useful it's something I'm dictionaries are very robust and they can be applied to many different problems that's why they're so beautiful they're just so flexible and juicy and just sexy you know but if I keep running this um it doesn't appear to be random perhaps I'm wrong with that I swear it was supposed to be random hmm I don't know maybe I'm wrong I will doublecheck that one second guys all right I'm back you guys um so yeah I actually misunderstood when I was reading up on this method here refresh when I was reading this and refreshing it um it says it pops an arbitrary element not a random element and the distinction there is um pop item will well pop pop will pop what you the key you give it the exact element that you specify but pop item will just pop off the last one of the dictionary okay and since the last one could be anything you want it seems to be be consistent here every time because that's the way we created it here here this one this one and this one um but because yeah because it's in this order it's always gonna pop the last one but sometimes if you oh that's one thing I forgot to say yeah actually you can actually add to a dictionary to simply by let's go over that real quick because I'm gonna need that to continue so put this on hold here okay put this idea on hold and we're going to go print word counts how did I forget this and word counts you can actually this is how you would add to a dictionary you can actually specify let's say ciarán pops up twice in this word count right so let's put Aaron Aaron like that and then we know what pops up twice so let's just put two so what this will actually do is it'll create the key Aaron here and then create the value two and it'll actually pop up in this word counts dictionary so let's have two print statements here and get rid of these so we're not confused right so what what this is gonna do is it's gonna print this dictionary then it's gonna add this to the dictionary and then print it again so we can see it so let's do that and as you can see we have the dictionary here and then we added Aaron with the value of two to it so that's how it got added to the dictionary so that means whenever you're adding to a dictionary it doesn't always add in the same spot it might add to the end or somewhere else because the dictionary doesn't actually have an order unlike a list or a tuple I don't think I actually mentioned that earlier but yeah a dictionary doesn't have a order because because you can index in as a key okay and it doesn't matter where the key in the list is we never used that key it's always gonna be there so a dictionary is just kind of like a bag of things a bag of values that have like labels on them which is the keys and then you can just like hey just find this key and then it gives spits out the value for you so there's no specific order all right so that's that's how you add to a dictionary but now let me go back to pop items so I was saying earlier that pop item will pop in arbitrary one so it doesn't pop a random one it just pops I think the last one in the dictionary and then whatever happens to be the last one it pops that one and then you get something back so let's see what this gives us back I'm not actually sure if this gives us just the value or the key and the value so let's just try it all right so come with these out hit run and as you can see it actually gives us a tuple so you remember how pop only gave us three it only gave us the value three instead of this together but when you do pop item it actually um pops a arbitrary element in the or entry in the dictionary as a tuple so you get the key and the value which makes sense because when you're popping you're actually specifying the key so you're like okay I know I want this key and I'm gonna get that value associated with that key but when you pop item you need to keep it together okay and then you can of course just you can just index into this tuple at zero for the key and add one for the value if you wanted to so that's pop item all right let's just go like this dict clop item and continue on we don't need these either so that's how you I'll leave I'll leave this as a chunk together because that's kind of nice you have a dictionary and then you're adding to the dictionary here manually all right oh the last thing I wanted to go over was dicta dot clear so what this will do is it'll literally just wipe out the entire dictionary so that whatever your dictionary has your dictionary will just look like this an empty dictionary with absolutely nothing in it okay so if I called a word counts dot clear all right this is just gonna make word counts equal to nothing all right nothing absolutely nothing and that's good if you just want to delete it I mean not even delete it you're just clearing the dictionary I don't know why you would want to do that but it's there if you need it I'm sure it's useful in many cases because yeah how else would you go and delete you're not gonna pop it like 27 times or whatever if your dictionary is really long or 27 entries long you're just gonna clear it instead of doing anything else or just override it with a new dictionary but yeah that's the last one I want to go over like I mentioned oh there's actually one last little thing I want to mention before I finish off this video but um like I said dictionaries are actually unordered so there's no specific order to them but there is a module in Python called ordered dictionary which actually keeps the order of a dictionary for you alright so I'm going to import that here so it's from collections collections is just a package I believe import ordered dates okay ordered dick just like that so what this line is saying from this collections package in Python so this is just something in Python it there's a bunch of things in here that allow you to do different things oh I'm not gonna explain this now if you don't understand this look it up on Google if you're interested look up the from and import but when you import something you're importing a new kind of data type here okay a special data type called ordered dict so what an ordered dict is it'll actually allow you to keep an order in a dictionary and the order that the dictionary has is the order that things are added to the dictionary the order date so if you add something to the order dict then that has the order that it will stay it it won't be a random order all the time I'm not sure why this was being not a random order it's supposed to be but it seems to be consistent maybe it's cuz it's so small but you cannot rely on a dictionary to be in the same order every time okay you cannot rely on a dictionary to be in the same order every time you have to index by key okay just be aware of that that's why pop item says oh I have this twice that's why pop item says it'll pop an arbitrary element because it'll just pop the last one pop item will just pop the last one which could be any random one or it could be consistent and this case it's been consistent but if it was random on a different computer I've seen it be random before just take my word for it then yeah then it'll be an arbitrary umm thing you get back from this method so that is order dict um useful probably for something I'm not sure I haven't actually really used it I usually use dictionaries for things like this but if you actually did want to sort a a dictionary I suppose you could use one of these things right you could get all these in a list and then sort the list and then put the list into an order dict so that the the dictionary stays in the order that you added things to it so you just keep appending to this order dict and that would be it I forget how to add to an order dict but yeah you could just call like okay word counts dot values or something values right and then we have to cast this to a list right so lists just like that so this will get us a list of all the values so this would be one one three and two remember because we added this to the dictionary this will get a list of length four with all those four numbers let me just show you hit run okay you get one one three two okay so we get a list there we can see that it's not an order so you could actually say okay uh you could use so you could use sorted um but I prefer a list dot sort so we're going to do list dot sort just like that okay and then click um oops what is going on dot values none oh maybe we do have to use sorted I think I got mixed up here yeah yeah cuz this sort sit in place so you could use sorted and just enclose the entire you can see that uh these periods popping up I don't want these just giving space for clarity sake as you can see so we're getting all the values from the dictionary here we're casting it to a list then we're sorting it we want this list to be sorted sorted and then we are gonna print that sorted list so remember before it was going in out of order one one three two now it's going to be in order as you can see it's one one two three pretty cool right and then also you could probably cast this to a dictionary alright so now that you have a sorted list cast it to a dictionary oops but now we can actually print this dictionary apparently you can't do that I mean you'd have to use the order dict somehow to keep it um in the way you'd have to look it up I'll leave that as an exercise for you but yeah look up how to use ordered dict to give it a list or something and then be able to preserve the order of these these um these things oh I think the error actually here was yeah we have a list of numbers when it's like how the heck do you cast a list of numbers to a dick that was the air those habit that was stupid on my part you would actually need to somehow preserve the keys as well so maybe you'd have to actually use items instead of keys or values and then sort by by something else but basically yeah that's pretty much all the basics of dictionaries in Python um there a lot of more things a lot more things you can do with them you can even do dictionary comprehensions or a list comprehensions you can actually you know what that is I'm not gonna go over that now but it's just something to note it's kind of cool you can actually construct dictionaries just like you would a list comprehension but it's the dictionary comprehension or a tuple comprehension you can do that with these things very very cool but uh that is it for this video you guys thank you for watching I don't know how long this took I feel like it was pretty dang long but I really want to go over dictionaries thoroughly because dictionaries are freaking awesome in Python you can do so much stuff with them um they're basically like mini classes yeah like you don't have to use objectoriented programming because you can just use dictionaries they get little jobs done but yeah um I'm discussing now I'm just gosh a gushing and gushing about the dictionaries so great anyways yeah thanks for watching you guys I'll see you next time have a great day you