Hey you, in this video we are gonna be talking about tips on learning how to code. And now these are gonna be very amazing for beginners, but these also apply to intermediates, maybe some advanced people, but I will say mostly beginners and then intermediate. With that said we are gonna jump into this video. Hi, I am Rafeh Qazi, also known as Papa Python, from cleverprogrammer.com. We have been doing a challenge where we do something everyday. So this is day three, and my challenge is to do one video a day everyday, so this is that part of my challenge. And if you would like to follow me along on this 30day challenge, you can choose to code in the morning for 30 minutes every time. I recently made this video on DMOs, and it got crazy epic comments, and hopefully they'll pop up on the screen somewhere. With that said let's jump into it. So top tips on learning how to code. Alright so I'm gonna start off with probably the most important one. I looked online and there are videos on it, I made a video on it a while ago as well. I'll pop that up right here and you should check it out at some point. But there are certain things nobody really talked about. So here's what's really important. Okay so let's say tips on coding. Number one is think. Okay now you might be thinking that this is very obvious. Obviously you need to think. It is actually not obvious, and this I see happen all the time and stops people from improving in coding. I see this happen all the time. I used to see this happen amongst my peers when I was learning how to code and when I was in my heydays becoming better and really fast. So it's gonna take in name, quest, and color, by having us type it, and then it's gonna put all of that. And this is something I notice also a lot in the world of chess. So chess is all about problemsolving. It's about creative thinking. It's about coming up with these really amazing solutions to these really fascinating problems. And most times, and I became top 1% in the world in chess, and I'm also on Lichess if you ever wanna play me right here. The point is I had to apply a lot of problemsolving and a lot of thinking to improve in chess, but what I noticed a lot of other people do is they would just, they would be looking at a position, and they would instead of thinking about it, they would just play a move really quickly, or later when they were reviewing their game, just like how you should review your code after you're done writing it, when they would be reviewing the chess game, instead of thinking about the solutions in each particular situation and then writing it out by hand what they should have done instead, they instead just look at something called a chess engine, and chess engine just tells you all of the best moves most of the times. So they would just look at the chess engine, and then they're like, "Oh this is the right solution. "Oh okay yeah I knew that." So they'll use these dangerous words, dangerous. This is probably the most dangerous thing that I've seen stop people in their tracks in improving at anything, whether it's table tennis, soccer, chess, or coding. And they'll use words like, "I," phrases, "already know that." Okay this is a very dangerous, very dangerous phrase, "I already know that." They will use these types of words and instead of learning the thing or figuring it out, they will just go, "Oh I already know that." They will take a problem and they'll think, "Oh it's just trivial," but when they get actually deep down into it, when you actually ask them what each line of code does there or talk me through it, they will either oversimplify it or just say they know it and won't walk through it. This especially can be seen when people talk about recursion. They'll just go, "Oh yeah Fibonacci sequence, I get it." Do you really? Do you really understand recursion? Or is it just that you've seen a solution of some problem somewhere and you're just applying that instead of actually knowing how to deal with this, right? This is where people get this concept of, they go, people often ask me, "How do I remember all this?" They're like, "I can't ever remember "all these commands in coding, "and I can't remember stuff." And people, like I'll play a chess game and people will go, "How do you remember that "and how can you play that entire game out "even a few days ahead of its time when it was played? "How do you actually remember that? "You must be really good. "Your memory must be really good. "You must be really good at memorizing. "You must have a photogenic memory," and I would get that in coding as well too. It has nothing to do with remembering, it has nothing to do with memorization. It has to do with understanding. Alright the reason why people have to remember stuff is because when they're learning a code or when they're learning tutorials, they will literally just look at what the other person is doing in that tutorial, and they just follow it, like, oh he just run this for loop to make this like tictactoe game. Let me just make this exact tictactoe game and just follow the tutorial. And each section they do, they just hit Enter and they move on, hit Enter and move on, hit Enter and move on. At the end of it they will say, "We're done with 27 modules, where are you at?" They won't know how to apply any of it, they will forget it. Does that ever happen to you where you actually go through? And this used to happen to me like crazy. I would go through these modules and I would go through these courses at like super fast pace, and I would say I did every single thing that this said to do, except at the end, I can't remember it, so I have to go through the tutorial again, or I have to go through some other tutorial. And two, I can't actually apply it into my own projects and into my own things that I'm doing. When you have to remember stuff, this is a red red red flag. Red flag. Rote memorization is a red flag. I would know. I have been to a religious school where I had to memorize the entire book of Quran, alright. So when I was younger I went to a school where I had to do that. So that was rote memorization. So I know the difference between rote memorization and understanding. Understanding will win any single day of the week, alright. You will never have to remember stuff again. If you don't think you can remember it, you just don't understand it well enough. So use this as your vehicle. Be that person who spends 10 hours on let's say module one or practice one instead of being that person who takes joy in saying that they completed it, they completed all 27 courses or 27 modules or 27 practices in one hour, except that person will be like, "I don't remember anything," and for you, you will finish that one thing, you'll say you understand it, and then you'll be able to apply it to your own code. You will never have to remember it again, and that will truly be a concept that now is part of your brain, part of your nervous system, and as you go and learn newer concepts, they will just build on top of that previous concept. The way to learn faster and the way to improve faster is to actually improve really slowly, meaning that progress looks really slow, because most of the time what's happening is your brain is actually hurting like crazy, it's expanding, trying to wrap, it's trying to wrap itself around some difficult concept, and it feels like it's stretching and about to explode. And right when you actually understand that concept, there's a breakthrough that takes place, and it takes a few days for that pattern recognition and that concept to actually get imprinted into your brain, but then when there's a concept that's deeper and builds on top of that, it's gonna be a lot easier. So for example, right, if you wanna do this problem of solving a maze by writing code, it's gonna be really really difficult for you, but if day one you understand how recursion works, day two you solve some kind of problem of recursion, day there you do some more practice with recursion, by day 10 or day 20 you can actually solve a maze using recursion. So you're building these concepts, except if you say stuff like, "I already know that," and you look at things on its face value, you don't think deeply, I should actually say think deeply, I shouldn't say think. Should actually say think deeply, okay. If you think deeply about something, then they'll be ingrained in your brain and that will be a concept that you understand. The reason why I'm speaking about this so much is I'll see all these people who will just sit there and when they get stuck on a problem, one, they'll either just follow the tutorial down to the tee, and won't work, won't use that tutorial to work on something of their own. Two, another big mistake I see them making is that they will go, "Let me just run the terminal "and let's see what happens. "And let me just rerun the terminal again "and see what happens. "And let me just run the terminal." No, you have to think about it, alright. You have to actually take time to think about it. Don't just keep running the terminal and hoping that some things make sense, okay. So don't be lazy in your thinking. Another thing I will say that is a huge tip on learning how to code, and I also don't see this in many places, is make the tutorials your bitch, alright. But let's make a more PG version of saying this. Make the tutorials your own. This I cannot emphasize enough. This is one of the fastest ways to improve in coding. If you go through the things and you go through them at face value, let's say you have to build this project and it's a blogging application, okay. I remember I used to take course from Coding for Entrepreneurs, and I went through his Django course a long time ago. He's epic, you should also check out his channel. So this is just an example. So if I went through his course, I would go, alright, he's building a blogging application with Django. That is super cool. But if I do this exact same thing in the exact same way, it's gonna be rote memorization, I'm not gonna learn anything, 'cause I've been through that way too many times, way too many times where I followed something exactly, it didn't register in my brain. So what I did instead is I'm like you know what, in the future, I imagine myself making lots of videos, so instead of making it this written blog, how about I turn it into this video blog post or video website, video blog website, okay kinda like vlogging website. So instead of the website having a header and then like text underneath it, how could I make it so then it has a header and then it pulls videos from my YouTube and just puts them right there, 'cause I had a YouTube channel, right? So how about it just put those videos right there? So I went to work and what I did was I followed the tutorial pretty much word for word, except I would always make, like if he was using an example, I would always make it a little bit different and I would make it my own example. I would almost never copy everything that he's doing, because very quickly your brain falls into this autopilot mode and you are not learning. As soon as your brain isn't feeling like it's active or there's some work taking place, you are not improving and you're killing yourself. It's gonna kill your career. You're not gonna improve at the rate that you wanna improve. And for anybody who feel they've spent years coding but they still feel like a beginner, that's the reason, alright. So because again I've been there. I would make all the examples my own, and that made it stick a lot deeper. Alright that made all the concepts stick for a lot longer. Tip number three, work on your own projects. And very important, I'm gonna put this in parentheses, I will say long term. Alright now this is a pretty important concept, so what you wanna do is you wanna always work on some project that you like, and you have a skill level to make. When you look online for example, some of them get very complex very very quickly. Build an API that connects with this thing and this thing and then the REST server and the skill of a lab. It's gonna be very difficult for you if you're just starting out, alright, or if you are even a year in or two years into coding. Work on something else instead, alright, work on a project, work on some different kinda project. For example for me, I was doing a lot of coaching, I was doing a lot of oneonone consulting, I was doing a lot of mentoring, so I created this like freelance invoicing app that stored my students' data, it stored my students' information for how much I'm charging them, stored information for when the sessions took place for either with my students or my freelancing clients, it stored information like I'd be able to type in their name and it would search all of the sessions I had with that person, and it would have this little like epic graph of how much revenue I've made working with them and how many projects we have completed, it would also have this functionality to compare this month's revenue with last month's revenue, so I always knew the revenue goals, how many clients, the client goals, and then we also had client success goals. So it was something that isn't that difficult when you think about it at surface level. It's kinda like having Excel sheet alright, or just a, you would think about that project as there's a table, right, and it's just storing information. So it just stores information, and then the cooler parts of it were like that it allows you to search that information, and then another cool part of it is that it was online. So now let's say you don't know how to make a search engine, and let's say you don't know how to make, you don't know how to put your app online. But just start at the first step, right? Start at the step of storing the information for that, start that application and then store information, okay. So for example what would that do for you? And what did that do for me? When I was working on a project where I learned how saving stuff worked or CSV files worked, that taught me how to actually save data to a file. Then when I learned how to read data from a file, it wasn't just freaking boring CSV lessons for me. What I did with that is I thought, okay, because I had this project in the back of my mind and a burning desire to build this project, I'm like holy shit, if I can get the CSV files, if I can store data in a CSV file, and I learn how to read data from a CSV file, I essentially have a database. I have data that can be stored, so even when my program shuts down, the data is somewhere so I can use it. So I'm like that's pretty cool. So if I learn CSV file, I can actually apply this to my, let's just call it, I call it like invoicing app, so let's just call it that, that's fine, to my invoicing app. Ah that's cool. So now after I go through, so now imagine what happens to my understanding, when I'm going through the CSV module, I'm like, oh, oh, oh shit, that's sick. Dot dot dot dot, oh this is how you read data, this is how you save data, this is how you can loop through it. Oh that is amazing. Oh and there's a module that lets you do stuff, read and write to CSV files really easily with Python. That is amazing. So not only am I excited about learning, I'm actively learning 'cause I know exactly where that learning is gonna be applied to right after I'm done learning. So then I would finish the video on CSV. Then the next thing I would do instead of going to the next video, I would go and apply that to my invoicing app, alright. And now my invoicing app could finally have data that doesn't just die after the coding is completed, after I stop running my project, this data gets stored somewhere, so I'm like that's great. Then the second thing I learn is how to filter data, filter. So once I learned how to filter data in Python, I'm like oh my God, if I can learn how to filter, I bet I can go to my invoicing app and I can do it so if I type in the name of a particular person, let's say John, it can filter all of John sessions that I had, and it can tell me exactly how much revenue I made working with John, and it can also tell me how many sessions I've had with John. Oh that is awesome. So let me use the filtering thing also in my invoicing app. So right after then I would go through the next lesson on filtering, I would then go apply it to my invoicing app. Then when I was learning about Heroku, I went, oh, Heroku allows you to make your app go online. That's basically what it is. So how sick would that be if I took this thing that's on my computer and put it online? Oh my God. So that gave me motivation to learn Heroku, and then as soon as I learned it, I was able to, as soon as I finished watching the video, I went and tried to apply it to my invoicing app. I mean there's a lot of failure in between here, right, that takes place obviously, but once I could apply all of these to my app and then I could upload it, I mean I learned so much faster than anybody else 'cause none of these concepts I was remembering, I was understanding, so that meant that I get to take these concepts with me anywhere for the rest of my life, apply them to any project, be able to teach them and charge money to teach them, and it allowed me to be a badass really really really fast. So this is what I mean by work on your own projects. Now this part, long term, I haven't expanded on. The reason why I say you should do it long term, have a long term project is the real skill improvement you're gonna have is where you're working on one project for long term. So let's take this invoicing app that I made. It started very simple. It looked super hideous, super ugly, but then I kept adding like one layer to it and then another layer and then another layer. So it started with just me learning how to do CSV files, then I added the feature of filtering, then I added the feature of online deployment, right? And eventually everything I would learn, I would try to add it to this project. And when you can work on one big project, there are few amazing things that happen. You start understanding how code works in the big picture perspective. You'll learn how to manage projects. And the reason why this is important is whenever recruiters are looking at what you have done, they're never ever ever caring about a hundred tiny things that you've done. Oh you've made a tictactoe, oh you've made a rock, paper, scissors, oh you've made this API that can actually text from iPhone, oh you've made this little thing with the D3.js that can actually do graph visualizations, oh you've done this other thing with Plotly, oh you've done this little data science project, oh you've done this little machine learning project, nobody gives a shit about a hundred little things that you have done or these projects you have done. They wanna look at what's the biggest thing you've done. And the reason why they look at it is that it reveals how you manage projects, it reveals how you actually document code, it reveals if you have respect for other people who could be working on this project, and if it's not other people, if you have respect for even yourself because you have to document things correctly. Because when you are working on a longterm project and you come back to something, a few months later and you haven't touched it, you're not gonna understand anything unless you have proper documentation, you have proper, you have it properly documented basically, right? Otherwise you're not gonna understand anything. Or your code is written very cleanly. So those are the things they care about at the company. They care about how well you're gonna work with other people, they care about how well you can manage big projects, 'cause likely the companies hiring you has one big project that they want maintained and improved and features added to. Also another thing it shows when you're working on one big project is can you add new functionality and features without breaking everything you've done in the past. This also shows your mastery of things like version control, because trust me, when you're working on big projects like these, you want to be using version control, and you will truly grasp the concept of version control without having to go through a hundred freaking different tutorial, the reason is that otherwise you can't maintain this amazing project you have done. If you don't use version control and let's say like, version control is basically like a time machine, if you fuck something up, you can go back in time. But if you don't use version control, what's gonna happen? Let's say on the ninth month, you mess something up, your whole code is broken and you can never figure out how to get back to when the app was working, and now this project you worked on for nine months or two years is now dead forever. It's kinda like playing a game without a memory card, right? Back in the days we had memory cards, now we have hard drives. It's like playing a video game that doesn't allow you to save ever. And imagine if you play the 10hour long video game or 20hour long video game or a ninemonth long video game with never having the functionality to save. So that's what things are like when you don't have a time machine or version control. I use Git, but there are other ones like SVN and whatnot. So honestly there are so many more tips I can give you, but if you actually apply this and never ever ever say this dangerous phrase, people saying just, "Oh I already know that, I already," those are always the weakest players, and players who were jacked almost never said this not because they have lack of confidence, they're always curious. And players who are way better than me would actually be more open to listening to new ideas and thinking, seeing things from the other person's perspective, because you blindside yourself from having these breakthrough moments when you just take this oh obviously, because once you allow your, your ego kicks in, when you go, "Oh I already know this," but if you would just get rid of your ego, think deeply, you're gonna have a massive breakthrough. So think deeply, very important. It will lead to true understanding. Then make the tutorials your own. So whatever tutorial you are going through, apply those things in your projects or do these mini little exercises that are on your own and come up with your own examples rather than just follow everything the tutorial is telling you. The slower you go through it and the more you make your brain hurt, that's when true understanding is gonna start taking place. And work on your own projects, alright, longterm projects, and this will give you reason to think deeply. You won't need to force yourself to be motivated, and this will give you a reason to make the tutorials your own, because you will always be thinking about how this can be applied to your own project and that will lead to much better understanding and a much deeper level of learning and a much deeper appreciation for coding, and it will feel like a masterpiece. So with that said, I don't know why I did that, thank you so much for watching. I love your face. And as always I'll see you in the next video. (upbeat music)