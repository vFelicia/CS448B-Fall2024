do you want to build the instagram clone with the react native all right then i guess you're in the right place because that's exactly what you're going to be doing today guys you're going to be building this exact instagram clone with react native and i mean check this out by the way my brother just hit 250 000 subscribers on youtube so guys let's give him a shout out let's make this chat go crazy let's go uh that's the cause man he's the one who helped me set up this epic studio setup too so there's a ton with this app right you got the stories component at the top as you guys can see and there will be ton of components that you guys are going to be building right so first of all you're gonna be building these four screens right over here okay the home screen the login screen to sign up and all of that and then there's tons and tons of components we're gonna be building like the header component stories and it just goes on and on and on okay so remember this is all that's going to be included inside of this tutorial now i can actually go and like a post i can go and unlike a post right boom let's go down here boom right i can make a new post i can go here write a new post right put the url in hit post and it will update it and add it onto the screen so you can actually do that and i can also sign out so with react native how do you implement the sign up and sign out functionality if i click sign up it takes me to the sign up screen and i can easily sign up here okay so let's go ahead and log in and let's see if it actually works all right also it has nice little error validation so you see those form becoming a little red because it's like hey you haven't put in enough uh things yet right the login button becomes enabled i hit login and boom i'm right there so if you are liking the app and you think it looks sick guys go ahead smash that like button and subscribe to the channel because you're gonna be building amazing things and becoming an amazing developer so with that said let's get right into it awesome man we got the hype going yo let's go pump just somebody says nice guys we're up to almost 400 likes this is beautiful samir says fire let's go jay patel says shave i just did man how many times do you guys want me to shave and get haircuts awesome loving the love and the energy guys so uh we're gonna get into the code pretty quickly so you guys can see exactly how this thing works but a couple of things first so one of the things i wanted to show you guys is this okay so if you want to be part of the instagram react native challenge sign up here we're going to be giving away i'm giving away a thousand dollars in cash so first place is getting 600 second place gets 300 the third place gets 100. we did this for the last ubereats challenge we had tons of submission and we had three people that actually won and they got about a thousand dollars in total so if you want to participate in this challenge just for fun and learning right even without the money just go to this page put in your name and your email right and it will and hit submit and it will take you to the next page which has all the information about how you can sign up and it will give you really useful uh roadmap as well so you can download it and it's again all of this is free right and this guide will show you like everything that's part of this build everything that you need to know everything you need to install hopefully it'll open up today so once it opens up you'll be able to see everything inside of it right so this has all of the stuff that you'll need to know to be able to participate in this challenge and build this app okay and what are the extensions that we we like that we're using uh you know how does my screen look like it looks i i get people asking me that all the time and then your prizes are listed out here and then all the rules for the challenge so make sure your deadline is october 15th submit all your stuff by 11 59 pm okay cool and uh last but not least if you want to get your javascript skills way way way up because this project is going to have a ton of javascript inside of it guys and i know a lot of you struggle with the javascript parts i know a lot of you guys while you're building these clones and following along a lot of you are new to coding right a lot of you that join our coding bootcamp or just i get to talk to you're a lot of you're new so if you want to get your javascript skills up and you need something a lot in depth go to cleverprogrammer.com pwj that has everything you need to know about how to just get your javascript skills rock solid and it goes at a much slower pace than i will be going during this live with that said guys that's it uh we're gonna get wrap wrap this up and get into the build at this point okay so if you're interested check out that javascript uh course link is in the description it's freaking awesome cool so let's go ahead and get it rocking and rolling at this point so few things we're going to do okay so first of all we're going to start a brand new project all right we're going to start completely brand new project i'll have some music playing here if it bothers you guys just let me know not a problem cool just have it like lightly playing in the background alright so here we go open up your terminal all right and even if you're a complete beginner trust me you can follow along and you can build it with me all right i know it's gonna look complex in the start but if you build it with me i promise a lot of things are gonna unlock you're gonna be able to understand a lot of what's going on all right so let's go people are saying we accept your new challenge that's awesome cool so here we go i'm going to go into my github folder and then i'm just going to create a folder let's actually now i'm just going to do npx create react native app just like this this allows you to start a brand new app and i'm gonna just call it ig clone youtube live okay you can call it ig clone that's fine this is just so it's easy for me to look at okay just click template from expo examples and just pick the blank one so this way we'll be building a expo react native app all right because expo makes it super easy to install and get started with everything if you don't have react native installed then um then basically what you can do is just go online look up how to install react native and that'll give you the instructions you need okay you're probably gonna need node installed and things like that let's see so this app is going to take a while we have some people asking how long does it take to build this app this app is going to take a while guys this is going to be a long build but we're going to try to go through it fast because it has a ton of functionality okay so i'm gonna try to make sure we don't go for ubereats we hit like six hours but we're gonna try to go much faster through this all right so let's go into ig clone youtube live and i'm gonna open up my code editor in this folder okay we'll close out of that and we'll keep this open boom all right and here we go appgs and i'm gonna do this move this over here so you guys can clearly see everything i'm gonna make this bigger all right so now let's go ahead and do this right i'm going to open it up and i'm going to just say yarn ios this is a you can just do yarn as well i do yarn ios because the shortcut way of opening up the iphone app as well the assets are going to be uh the assets are going to be available for you guys in the description as well um amanath or david if you guys can help with that hey angela's like bro you are insane yes sir cool here we go so let's see if this app is now working we'll refresh so now this will be a complete brand new project we're going to be starting this from scratch all right and i will try to explain it all step by step so you can follow along and the few shortcuts in here that could be useful for you is um hitting r inside of here that'll allow you to refresh okay all right so universal react app with expo so that basically means we're good to go and now we're going to work on our home screen with header so what what does that mean we're going to start off by building our home screen all right not the entire thing right because that's a lot we're going to start off with the first component of the home screen which you see at the top right so if you look at the top you see that header component that's the one that we're going to start off with this one okay so that's the first thing we're going to build and we're just going to start our home screen so we're gonna create that as well okay so just keep that in mind as we go through this so i'm gonna leave that leave this down here for you so you can know exactly what we're working on every step of the way uh and if this is helpful for you guys uh doing this let me know or if this doesn't matter at all let us know that too because save us some time next time cool so here we go let's get started with this all right so i'm going to create a um i'm going to create a new folder all right and i'm going to call it screens this will host all of my screens and inside of this i'm going to create home screen dot js okay and here's what we're gonna do i just like to do rnfe like this and let's just say home screen for now i'll go back to app and this app what i wanted to do is i just wanted to render my home screen so i'm just going to say this uh and notice that it auto completed this for me i'm also not going to need this for now right so take a look at that this home screen right there was auto completed okay or sorry added just by writing this and this import was auto imported cool so we got our home screen going but notice that it's in a place where we don't really want it to be right so how do we mitigate against that well i'll show you inside of home screen so i'm going to command click and go inside of home screen and we're going to wrap this component in a safe area view all right let's do safe area view and make sure to actually import safe area view as well so we'll do safe area view just like this now notice that it's now safe okay now it's actually showing up where it where we want it to show up essentially okay so that's exactly kind of what we want this is a good sign this is what i like to do whenever i'm starting a new component i just want to make sure hey can i read just basic text from there if i can then that's a really good sign oh by the way thank you so alex b really really appreciate you super chat and he goes let's go and he just dropped two pounds or is that two euro it's one of them but thank you i appreciate it not very good but yo there we go nice thank you manoff cool so i just turned off the music it was kind of distracting to me so hopefully if you guys want the music back let me know and we can have some vibes going but i kind of like this for now all right so let's go ahead and start now working on this home screen i'm going to put a header component here okay and now it's going to break so i'll just put that as a actual i'll just leave that as a comment right now because we're now going to make our component so let's go ahead make a new folder we're going to call it components inside of here i'm going to create another folder and it'll be called home all right so what this basically means is these will house all the components for our home screen and this component will be called header.js this is the component that you guys are seeing at the bottom left of the screen this is not prerecorded arcade yes this is not prerecorded indeed this is absolutely live yeah lander says shout out there we go lander here's your shout out so let's work on this component now okay so now let's go into header and header is going to have a lot of things okay but before we go and start working on header i want to do a couple of things to the home screen we want to make this dark as well all right so let's just come down here and i'm going to say i'm going to create a styles i will do stylesheet create okay and then inside of this i'm going to make a container and we're going to give it a background color of black and then what i want to do is i want to give it a flex one so this is a cool hack that you can do in react native all right let's import our style sheet as well from react native and then here i'm going to say style and we're going to say styles.container all right so now the whole screen just turned black that's exactly what we want here let's go down here we're going to go header all right this will be complaining for now that is absolutely okay so again the trick is r and f e inside of header and we will just say header like this let's go back to our home screen and i'm going to remove this r character i'm going to write it again go down here and hit enter and it will auto import this okay and i'm going to zoom in just a little bit so you guys can see this better oh wow that's ridiculous thank you so much this is wild wow fast chats gave ten dollar donation what the heck that is wild thank you so much oh now it's gone so that's so let's bring that back right there current full stack developer absolutely amazing really happy to hear that by the way where and where are you working that's dope okay so i got my header component okay now the header component is not really showing up so there are a few reasons number one is because the text color might be in black so let's go ahead and just do color white so now the header component is showing up so that's a really good sign header component is working uh basically how we want it to work okay that's really good and yes rnfe is the snippet extension okay that's what you need to uh you need to get that extension and that's where you can do the rnfe uh really easily as well okay so let's go react native snippets and it's probably going to be this number one this is the extension that you need to get okay this will allow you to get the all the snippets that you're looking for cool all right so here we go all right so we want to do a couple of things with this now so let's go inside of my header component and now we're going to get to work guys this is going to take it's going to take a second to make all of this stuff work okay so let's go ahead and let's create an image okay so i'll add an image i will do style styles.logo okay and the source will be kind of like that except we need the header logo all right so when i say this logo what i mean is it's the instagram logo that you see at the bottom left so i'll show you guys what that looks like it's gonna be this logo right here now if you have access to the assets file you're just gonna get it from there i have access to my assets file so i'm going to create a new folder and we'll create assets just like this and inside of my assets folder i will simply drop this asset like that all right and here i'm going to say header logo.png and now it's complaining hey i don't know what image is no worries we're just going to import that it also says hey i don't know what styles are so we're going to do style sheet okay and then we're just going to come down here i'm going to say con styles and i can just do style sheet dot create and we'll just leave a empty style sheet here for now all right now this logo is absolutely huge oh by the way we broke 500 likes so awesome thank you guys for smashing that like button appreciate it this video goes out and helps more people and that helps more people become developers so that's fantastic all right so now within this style sheet what we need to do is of course we want to give it some styling all right so let's go down here and we're going to say make the logo and i'm going to give it a width of a hundred height of 50 and then we're going to say resize mode and we'll just give it a contain there we go so now the logo is looking like how we want it to look like but we need to do a couple of things we need to put the whole thing in a container because when you guys see this over here right what i'm looking at what i see is i see one big container that contains everything and then inside of it i see two divs or two like separate containers one container or one div on the left hand side or let's do react native terms it's called views so i got a big view inside of it i got two baby views one on the left hand side that contains the logo one on the right hand side that contains all the icons all right so now let's go ahead and build uh that okay so this logo i'm gonna give it a touchable opacity as well because i do need it to be a touchable button all right it's going to complain it doesn't know what touchable opacity is but that's only because we haven't imported it yet so there we go now when i click it it detects it like a button click later we can make that a logout button but for now we're not going to add any additional functionality to it wow this is absolutely wild you guys prakash just gave you a five dollar donation he says love your channel bro i've started learning app development from it i messaged you and insta as well for it actually keep the amazing work absolutely prakash thank you so much for the five pound uh five euro donation really appreciate it this is crazy you guys this is awesome thank you so much thank you all right so let's put the whole thing right inside of a container so that's what we're going to do so this view i'm going to give it a container like styling and that will contain everything inside of it so let's go here and i'm going to go ahead and do container i'll put a comma here so it stops complaining at me and we're just going to go justify content and we'll go space between all right we'll go align items center flex direction i'll show you why you actually need to do row because it's interesting why you have to do that in react native actually we'll give it a 20 margin horizontal okay and now we'll call that here so we're gonna do style equals styles.container there we go so the styling just got applied now we're gonna need a bunch of more uh images okay so this part just requires us to put a bunch of more images okay so we got the header logo now we the next one so let's get outside of this touchable opacity here all right and we're also going to create a container for our icon so i'm going to create a view and this is going to have a style of styles dot icons container all right and this will contain all of our icons so i'll just put some dummy text here for now i'll give it a color of white just so you guys can see there we go and now it's showing up so the space between is what's allowing all of this to be like separated out right like if i actually remove this you guys see how it just all comes together like that so space between is making it really nice and now whatever i put in here right but this is why you'll notice that we actually need to give each of these containers a row because by default everything is column based okay so let's go down here and we're gonna go icons container and there's not much styling for the icons container honestly it's going to just simply be a flex direction of row and we don't really need to do much more than that so that should put it in a row oh my goodness this is crazy the donations are wild somebody just gave us 2 000 of nigerian wow this is amazing thank you so much i really appreciated a lobby and we got a chandema and says thank you cp for making me so great after following most of the videos and clones finally i was hired as a fulltime react developer yo that's crazy let's go that's awesome wow that's brilliant that makes me so happy to hear that thank you for sharing that all right so now we just need to put a couple of icons and uh we should be good okay and each of our icons is gonna have a certain style as well we're gonna add that oh my goodness [Laughter] this is crazy guys i am uh need to focus i need to focus i'll i'll i'll give a shout out to the super chats in just a second okay i need to focus a little bit i apologize so let's create a styling for icon as well because our icons will need some styling okay otherwise they're going to be huge actually you know what i'll put them without the styling just so you guys can see all right so i'll give you an icon right now so here i'm just going to put an icon alright this is the code snippet that i just pasted why did i paste this just because i don't want the stream to go on forever and this is very simple and already all of this i've pretty much explained okay i'll just explain some of the parts that are hard to understand here so first of all it's an image okay and it has a certain touchable opacity okay and that touchable opacity makes it clickable now why you're not seeing it is because it has the styles that icon and we don't have the icon styling yet so let's go ahead and do that we're going to create an icon styling like that and i'm going to go with 30 height 30 on this and we're gonna go and give it a margin margin left of 10 and i'm gonna say resize mode will be contained just like this all right so now you guys see that plus sign over here boom it's it's showing up okay and again it's an image which takes in a source in source you pass in the link of the image so this is the link of the image all right use your own plus icon don't you don't need to copy mine uh but this is if you want to pause it and copy it you can alright so there we go we got that icon now we're just going to need a couple of more icons so all we're going to do is we're going to just take this okay and touchable opacity so when i click it it has that little effect and i'm simply going to paste once again and i'm going to go down and paste once again okay so i got three touchable opacities everything inside of the icons container the icons container is this invisible container right here uh and it's keeping all of these inside of it okay let's go to the icons container cool wow absolutely amazing guys this is so crazy coding with sneaky says you're so chill and actually very good just started learning react native this is very educational you got it brother thank you for being on here or sister don't know but thank you for being on here i appreciate you and i love your beautiful face for being on here okay so we got the three amazing looking icons we need to now just change their urls so they actually look like what we want it to look like okay so we're gonna just go ahead and do that okay so the first one is a plus sign so that will say plus two math that's completely all right the next one we're gonna need to change though there we go the next one is a like icon all right and i'm just using uh icons eight here uh you can also just go to icons eight website and be able to get the url just like how i am here all right there we go so now we have the three images showing up at the top our header component is looking pretty good let's just make sure there's not anything that we're really missing here so the the one more thing that we actually want to add in here is we want to be able to add a unread badge okay and so what does the unread badge look like well let me show you you guys see that red notifications thing the red bubble on top of the messenger icon that says 11 that's the unread badge so we want to be able to create that badge now okay so let's go ahead and do that all right oh my goodness i'm sorry y'all you're gonna have to forgive me i don't care if you're watching this video and you're gonna be crying you sold donations all the time i don't care i love all of the people that are live here i love interacting with you all thank you for the donations i'm just gonna shout some of these out okay if you're here and you're watching look you're on my stream you can just wait one second while i give a shout out to some of these amazing people okay it's not gonna hurt you you'll be fine by the way it's amazing people on here hi everybody i love all of your guys's energy this is awesome so thank you for that eight dollar donation love your videos mate absolute legend got my love of coding from you please make a complete beginner's guide to coding and react i was actually thinking that and i will make it it will be very beginner friendly like this i understand this is not completely beginner friendly okay this is like this advanced stuff uh you'll understand it but like you won't be able to build it right completely yourself but the beginner series that's my goal just make it very very beginner friendly so thank you for the super chat appreciate it great so let's keep going we got the header component now we need to get the unread badge okay so let's think about how this unread badge is going to work and where is it going to be first of all where am i going to place it am i going to place it here or here or here right and where i actually want to place this unread badge is i actually want to place it preferably right here okay so let's go ahead and let's go inside of this facebook messenger i'm gonna go inside of this touchable opacity because i also want that to be a clickable thing all right and here's where we're gonna if you see these weird auto completions coming up that's github copilot which you should all have it's absolutely incredible all right so we're going to create a view here okay and this view will have a styling so i'm going to say style and we're going to do styles.unread badge and we'll create the styling for it in just a second all right and this will oh one note because it's already going to be an object we don't need to have two curly braces we can just have one curly brace all right and then we're gonna have text and we'll give it a style styles dot unread badge text you can see how amazing these github autopilot like suggestions are like it's so freaking smart it's ridiculous all right we'll go 11. okay now of course you're not going to be able to see it right now and that's because we're going to need to style it okay so it's going to need a bunch of styling so let's go ahead and do that now so i'll do unread badge okay and it's going to need a certain background color we need it to be slightly red so let's go ahead and give it a background color so now you can actually see it it's visible at least right it's not very pretty but it's visible the other thing that we actually need to do is we do need to give it a position absolute okay and the reason for this is because we want to be able to put it wherever we want all right and where should i put it well that's that's a good question so let's think about where we want to put this i'm going to do left of 20 and we're going to do bottom of 18 like this so now we're moving it kind of to the right spot let's work with the width and the height because it's not looking like how we want it so i'm going to give it a width of 25 and we're going to give it a height of 18. okay now it's it's looking good now how do we get it to look circular well if you ever think anything circle what you're really thinking is border radius and look at my github copilot somehow magically it knows i want to give it a border radius weird okay so we're going to give it that border radius now any items that are inside of it i want them to be aligned centrally and notice that when i aligned items it didn't go vertically down it actually went horizontally centered it and that's because by default everything is column based in react native so everything you knew from regular web development um the flexbox stuff is just gonna be flipped and also in react native you don't actually ever have to do display flex so something for you to know all right and now we're going to justify the content to also be center this will actually vertically align it okay and we're going to give it a big z index just because i guaranteed want this to be at the top and above everything not behind anything so notice right right now that badge is actually behind the messenger icon as soon as i give it a zindex it's now in front and on top of that badge icon and that's exactly you know what we want now all we need to do is just give unread badge text styling let's go down here and i'm just going to color we're going to make it white cool and then we're going to make the font weight i'll make that 600 all right and so now it looks a little bit bolder and it pops out so there you go guys there you have it i mean i don't know about you but to me it actually looks like we're quite done with our header component so if you enjoyed that give us some energy in the chat right and uh to show some love and we're gonna keep on going just for you beautiful let's keep on rocking and rolling nice hey jesse in the house let's go if you know react.js is super easy to learn react native yes absolutely that is completely correct oh my goodness uh we do have another super chat that happened i i can't even find it right now but thank you so much oh it's right there fas chat says currently enrolled in your full stack mastery bootcamp april cohort best course for beginner joe amazing thank you for sharing that's unbelievable we do have a coding bootcamp we have now we're focused a lot on front end so we have a boot camp called front end mastery in 90 days we actually help you become our goal is to help you become a developer and get you the skills and if you don't get those skills or you're not able to use those skills to get a job then you don't pay okay so that's the guarantee behind it we're fully behind it so if you're interested a link is in the description there's a free training for you to watch before and then if it's still good and it sounds good then you can book a call with us cool so let's keep rocking and rolling now the next component that we're going to build we're done with this component right so let me go back here and we're done with our header component so i'm going to remove that off of the screen the next component that we actually want to build is the stories component all right so this is going to be really nice and it's going to sit right underneath just like that oh that almost looks like it's real time that's cool so that's gonna sit right there so let's go ahead and i'm gonna just leave that down here so you can see what our target is and what we're trying to do here all right and um now let's start working on the stories component okay so when i think i'm gonna be working on a new component i like to think that i'm going to also be making a new file and since this file is inside of this is a this component is home screens component well guess where i'm going to put it inside of the home component folder cool we're going to call this stories.js just like this and uh just going to make sure everything is good i believe header is perfectly good we're good with that yes i believe we're good with this header stuff so let's move on to the stories now so in stories we're gonna need to do a couple of things oh let's put it in the right place guys so there we go stories is now actually inside of the homes folder simply going to do stories say stories write the text and i'm now just going to make sure that it's actually being rendered out onto the screen but first we're going to give it a text color of white because otherwise it won't show let's do that let's go inside of our home screen and here we're simply going to put stories like this auto complete that so auto import should be happening right there and there we go our stories is now showing up on the screen so it's being rendered and that's good and now we just need to go ahead and make more progress okay like add more things to it so that's it we don't need to touch this home screen file again we just now need to work on our stories component all right and in our stories component we're going to have a couple of things so again some things i'm going to paste just because they're very obvious and they just take a lot of time uh so we're going to be working with dummy data so i'm just going to paste this here okay so these are users all right and we just wanna be able to get access to these users okay so one another way we can do it i'm probably gonna run into some problems but that's okay we're just gonna create a new folder we're going to call it data all right and this data is really just going to be like our fake data where we're going to have like later on we're going to move this to an actual database but in the start we're just going to have this dummy database okay that's created by us so i'm going to cut this and take it out of this file we're going to go inside of data create a new file and this one will be called users.js all right new file users.js like this there we go all right let's go back to our stories component and our stories component will actually need access to those users all right so we'll be able to import that in just a second but now let's start working on our stories component so here's what we're going to do okay watch this auto uh import so i'm just going to actually make sure my auto import is happening so import users from backpack backpack data users all right i'm just going to delete this i know we're going to need access to users in just a second all right and let's go ahead and we're going to give it a certain margin bottom okay so that means that when we have another component it's gonna be like underneath this and give it some space okay stories is also a scrollable thing so we actually need to make it a scrollable component okay and how we're gonna do that is we're gonna give it a scroll view we're gonna say horizontal and we're going to make it alright let's actually import scroll view first scroll view now we're going to go horizontal and we'll go shows horizontal scroll indicator and we'll simply say false okay there we go we're gonna do equals just like that all right so now we got the scroll view now inside of the scroll view is where we actually want to add um everything that we're trying to add okay so i can have an image show up here right so let's actually just have one image show up first this let's import it from react native image so boom we got it imported right there and now this image we're going to give it a uri okay and let's actually write our map statement right here as well so we're going to do users.map and i'm going to say for each story and index i want to be able to do the following so here's what i'm going to do i'm going to take all this image stuff that i was writing i'm just going to move it into here all right there we go all right all this means is we're gonna have a loop and i'm just looping through my user's array because if i go to users right what is it so users are we got a user with their profile photo another user with their profile photo another user with their profile photo so on and so forth so we're just looping through them and as we're looping through them we're going to go image source and i'm simply going to do story dot image this will get me access to the image let's do uri here just like this okay now i need to also show this so we're gonna go style and we're going to do styles.story okay this is going to error out so what we need to do here just create a style sheet con styles style sheet dot create and i'm just gonna leave it blank for now and let's import our style sheet great okay so just a text stack just you guys know because i forgot to kind of talk about in the start but the text stack that you guys are actually going to be working with is going to be you know of course you're going to be doing react native you're going to be using firebase where everything is actually going to be stored and uploaded when you're going to be retrieving your data in real time so those posts you saw i forgot to mention but they're not dummy posts they're actually being directly pulled from firebase and they're being rendered out and when you like a post and you leave and you come back that like is actually there because all of that is actually being stored in a database right so all of these posts are live you guys all right so just want to let you know that also we're handling form validation when you're trying to log in so you can be putting in the wrong stuff to log in so we're using formic and yup for that so you'll also get to learn how formic and yep work so it was important i don't know i forgot to mention it but now is a good time as any to be able to just let you guys know that all right so we got the image we got the uh story now of course it's not going to be showing up because story does not have any size to it so we're just going to go to story and let's go like this and i'm just going to say width 80 and height 80 and let's just see if it shows us anything nice so now all of our story components are actually showing up they're not exactly showing up how we want them to so let's go ahead and give it a width of 70 and a height of 70 because i think they need to be a little bit smaller now i believe they actually need to also be a little bit circular so let's go ahead and make it circular dope so now they're actually starting to look better right this is uh this is a very good sign let's go down here and let's go and now we're gonna give it a margin left of six we're gonna give it a border width of three margin left is not a valid property oh because that's not margin i wrote it i spelled it wrong there we go so now you can start to see it's taking shape okay and we're gonna give a border color and let's give it a border color of this specific one make sure i'm using the right color here there we go so boom there you go now you can actually see all of the stories showing up but what's still different from the component that we're building if you notice what's different so far well the one thing that's different is we don't have the text or the names for each of those story components yet so let's go ahead and add the text for each of them right and we're going to do that right underneath this image but inside of the loop because we need to have this action repeat multiple times right so we're gonna go ahead and do that we what we also need to do is let's wrap this let's actually put the text first and let's just see what happens so we'll do text and i'll just say hello now this says you must have a parent component right so we'll make a view that'll be the parent component that they're inside of okay and now of course it's not showing up so we're going to make sure that we give it a style and we're going to say color white so now hello is showing up everywhere we want it to show up but we don't want hello to show up instead what we want to show up is story dot user not like that let's put it in just x curly braces there we go so now the names are showing up but notice that some of the names are too long like for example nas domonsky is a long freaking name right i don't know why that guy has that name his actual name is nazari domonsky so super freaking long so now how do we account for that and make it so there's like three dots showing up if the name is too big right so this is where we actually need to use a little of a little bit of javascript skills okay so let's go ahead and do that now for the text also just so we don't get any errors let's give this view a key and let's just give it the index that's going to make sure that each of the things that we're looping through is indeed it has its own key otherwise react freaks out okay and it actually improves your uh your reacts performance by a lot if you give it an index cool so now what i want to do is where i wrote story.user i'm going to now write some javascript right inside of here okay so just follow along with me because this part might freak you out but it's okay hopefully it won't do it too much so what we're going to do is we're going to do story.user.length and if it's greater than 11 then what we're going to do is we're going to do story.user.slice and just give us the first like 10 characters make them lower case all right uh and give me like give me some night nice dot dot dots in front of it okay so like this so if the name is really long let's go 10 here oh 11 is fine that's fine so the name is longer than 11 characters give me the first 10 plus so just basically max it out at 10 characters right and then give me the lowercase and do dot dot dot and yeah perfect and of course we need the final condition so this is this is what happens if true then we need of what happens if false and we just need it to give us the name in lowercase because it's already small enough so there we go now you guys can see clever causey the cause man sugar shawn nastamansky a plastic plant so that's looking good now where i wrote stories we don't need that anymore so i'm just gonna remove that there's still a few problems with it so what i'm going to try to do is let's go ahead and give this a style i'll say align items it's the center there we go so now that just align things nicely right so for example if we take that away notice how all these are like too close to each other but then when i bring that back they move away from each other and give us the look and feel that we want and since it's a scroll view we're actually able to scroll this as well so with that said you guys uh we are pretty much done with the stories component okay so if you enjoyed that give us a nice little round of applause get that energy up in the freaking chat smash that like button right really get this thing freaking going awesome this is looking good let's move on to our next component okay so stories component i believe we're good with and what's our next component can you guess all right it's going to be this component now this is a massive component okay and it has multiple things it looks super simple when you look at it but there's actually a lot going on inside of here right so if i put this right there that's the next building block puzzle block that we're doing hey now this component has a lot of things so let me explain at the top let's see if my arrows are going to the right place all right there we go so at the top here this is gonna be a component called post header all right so let me see if i can show you what that looks like so it's wild right it's a post header right there all right so that's that component it's also gonna have another component which is going to be where is it showing up post image okay so there we go post image and then it also has post footer right so when you look at that one big component like this one that i'm highlighting it's made up of multiple sub components okay for example it's made up of post header it's made up of a post image and it's made up of a post footer so there are multiple things so i want you to start seeing react like that like building blocks legos so even though we're gonna be building this all in one file called post.js it's gonna have multiple sub components inside of it and you'll see how we do that all right let's get rid of all of these now so this is the screen we're gonna be building uh not screen but the post component we're gonna be building and i'm just gonna leave that at the bottom right here so you can see what we're doing cool so let's go inside of our home make a new component and this is going to be called post.js okay now post is also going to need its own fake data so we're we're going to create our dummy database and we're going to call it posts.js all right and we're just going to put our dummy data in here and that's what this will look like okay so we're importing the users from the users database okay right there and then posts are just this again if you're building this along with me yet yet you can add your own dummy data that looks like this or you can once you add data to the fire store when we do that later we'll add it to a real database and then we'll be retrieving it from there okay now what is post well post let's actually build bring up our post component right here right so let's just leave that on the right hand side for now hopefully i'll remember to take that off but if i look at my post component or actually this is the entire component right we need access to the user um you know who created the post so that's going to give us the information we need for the post header okay we of course need likes those are going to get rendered down here where you guys see them okay how do you there we go oh that's so much easier it's gonna get rendered like down there caption is going to get rendered out here your first thing profile picture is going to be the profile picture that you have at the top okay and then these are this is an array of comments which will have the user in the comment and the reason why you need it like that is so then you can show like it says here the cause man blah blah blah right so that is where that's coming from cool so that's what the data structure is like it's an array of objects so get used to that everything is always going to be array of objects any time you're dealing with an api almost always okay so object number one represents the first post with all of its comments and then object number two represents the second post with all of its comments okay there we go i hope that was clear great that's all that file is now let's come back to our post component we will do our usual we'll write post and we want to make sure that this is getting rendered so where do i need to go for that i need to go to my home screen because that's where it will be rendered right and then inside of here i want to be rendering it so for example i need to do post like this of course we need to import it so let's go ahead and remove the last character write it again and it'll suggest it okay and if it's not showing anything that's just because we might need to do color give it a white color and there you go now it's showing up so that's good this is a good starting point now we need to work on our post component and post component we're just going to start at bare bones for now with uh kind of as simple as we can make it okay so i'm going to just remove um yeah this is fine so post component is going to take in a post okay and then we're going to go do stuff with that particular post that we get so let's go to our home screen and what i want to do on the home screen is since post is gonna just render out one component we need to actually be able to like wrap it up in a loop and be able to show all of them so i'll show you how to wrap this up in a loop in just a second let's go back here and now let's work on this all right i'm gonna do this i'm gonna do margin bottom 30 because each of the posts should have some gaps in between each other that's what that'll allow us to do now i do want to use a divider so we're going to go divider okay and now divider we don't have so divider we're going to actually need to install we're going to need to install and we're going to do yarn add react native elements just like this that's okay so i'll zoom in just so you can see the command that i just wrote okay that's a bad zoom in because my stuff is hiding it but you get the point hit enter so it starts installing it you'll see the package name these are always the package names so whatever you see written out here is what you will need to install cool all right so now we're going to use the divider uh it's still not auto importing but that's fine so i'm going to just say import there we go thank you copilot all right so now this divider we're gonna give it a width of one and orientation we're gonna make it vertical cool unexpected token post oh we should be good now that's interesting what what just happened to my entire app there we go so now my app is actually showing up there we go so now yes so we can actually see the post that we wrote right it's showing up and this is the line that we need so that's that divider part that i added okay so that's so for now we're just all we're doing right now guys is just initializing post and then we're going to create the post header go post header all right this will also get access to the post and then we're just going to render out a view that view will contain another view which will contain an image and then we're going to have some text right next to that image all right um yeah so now we just need to actually start styling it okay so let's go ahead and what we'll do here is instead of having this written out right here i'm going to remove that and i'm just going to say post header we'll take in a post and then we just pass it it posts like this okay so now post header will have access to the post that we gave it we just need to import image great awesome okay so now this is the part where we actually need to start pulling real information from all of our posts so we're gonna go back to our home screen and we're gonna wrap this up in a loop and we're gonna make this home this post have access to everything so first of all we're going to make it a scroll view because we need to be able to uh scroll it's two l's i misspelled it and then let's also import scroll view so we're going to have the posts in a scroll view now inside of this view we're actually going to map this so we're going to say posts so boom we just imported it and i'm going to say dot map give it a post and an index okay there we go so now we're just looping through okay and this post will need access to the posts as well so how we do that is we go make the post equals to the post and then also we're going to give it a key which is going to be the index alright so now we're looping through and for every single post that we retrieve from post.js so we're gonna post one is gonna be this and this is gonna be the second post or post zero is gonna be this and the post one is gonna be this one okay and then we're just sending that off to our post component and then our post component is getting it and then doing stuff with it as simple as that boom boom all right so let's work on our post header now and make sure that everything is good to go so we're going to give it a style here and we're going to go flex direction and we'll go row we'll go justify content space between we'll go margin will be five and then align items will go center okay now we do need the images to show up so let's actually just give our images a source i'm gonna say uri is post.profile picture okay and now these of course will need a style as well and i'm just going to give it the same style as pretty much the stories because it's going to be uh pulling from there so we're just going to do styles styles dot story just like this and now i'm gonna cheat so i'm gonna not cheat but like i'm gonna go inside of my stories component and we're just gonna grab this exact styling right here we're going to go back inside of post we're going to paste that the only difference really is going to be we're going to make this smaller so we're going to make this 35 and 35 so it's not the big circle border radius is good that's good and border width will make it much smaller as well okay so now it says i don't know what a style sheet is or where you're getting it from so we're gonna do stylesheet and now it's imported there we go hey so now our headers are being made they're not looking perfectly like we want them to but they're showing up so that's good okay so now let's do a couple of more things right so now let's give this text uh this text is gonna have a color of white all right we're going to give it let's give it a margin left of 5 and then we're going to go font weight and i'm going to give it a 700 font weight and now let's give it some text so let's say hello and see what that looks like boom so each of these guys has hello coming out as you can see but we don't want it to say hello we actually want to say post.username or is it posts.user yes post.user and by default everything shows up in a column so remember in react native we actually need to put this in a row okay so let's go ahead and do that now so this view i'm just going to make i'm going to say style is flex direction row that should already do it and now we're going to align items center and that'll put it in the center like this okay so now this looks this looks reasonable and respectful okay this margin 5 if i remove that you'll see that the header is running into the divider that's not what we want we want margin five from every single direction so margin left margin top margin bottom and margin right so shorthand for that is just saying margin so if you do this right so it gets nice spacing from all directions and a good little hack you can use now all we need is the three dots showing up so if i take a look at this i have the clever quasi on the left hand side and then i have the three dots at the right hand side and chris o'brien says i posted it earlier but here it is which you need for the snippet extension install this is the extension so he's giving you guys the extension you need to install thank you for that so now we just need to put those three dots at the right hand side as well okay so let's go ahead and do that now okay so we're gonna make another review is it auto completing this for me jesus all right so we're gonna have another view all right and this is going to be a very simple one so actually let's try this without a view and let's see what this looks like so i'm just going to have text and then my text is just going to say this we're going gonna give it a style color white like this and look the three dots are actually showing up right so that's good now we just need to give it some font weight font weight boom there you go so guys our post header component i believe should be good to go we're done with the post header component now what we need to actually work on is our being able to pull and retrieve the image so that's what we're going to work on next okay hope you're enjoying it and having fun let's keep it rocking and rolling let's just highlight this real quick this is what we've got done so far um this is a scrollable view as you can see everything looks clickable because it has that touchable opacity right boom so there we go let's get out of this view let's go like this and let's keep rocking and rolling so post image is going to be the next thing that we're going to work on okay so i'm going to add another component now and i just want to take a look real quick okay so let's go ahead and work on this now okay so post header is done i'm gonna get outside of post header we're gonna do const post image and this is going to take in as well it's going to take in a post and then it's going to need to do stuff with that post that it gets okay and let's do an implicit return so implicit return is really the equivalent of you writing this and then you saying return and then you putting all your code inside of these parens so the nice easy way of doing it is just put this and that's the same thing as that all right so here i'm going to have an image and this image is going to have a source of host dot image url all right and then we're going to give it a style and the style is going to be very very simple for this one we're just going to give it a height of 100 and we're going to go resize mode and we'll say cover and of course let's go and end this component so make sure you give it that slash like this so we got our image component in here now we just need to add the post image right underneath the post headers we're going to do post image post post there we go so the image is starting to show up it's not looking exactly like how we want it to and so let's work on that and fix that so we're gonna go and build a view here wrap the whole thing up in that view we're gonna go style and i'm gonna say with 100 percent and we're gonna go height 450 and there you go now the image is looking like how we want it to look like so that's it and that looks great to me so the post image component is done you guys so we're done with that now we need to add and start working on the post footer so what is the post footer and if you're new here and you just came on welcome thanks so much for being on this live stream right now i really love your guys energy and i appreciate you guys being here this bill took us just so you guys know a little bit behind the process these bills take 100 to 200 hours from me and my team and david and i worked on this for a long time and what takes a long time is not the build itself but we spend another 50 to 100 hours making sure that every line of code is absolutely as clean as it can be it's as tightly refactored it can be as it can be so when you're watching this it is extremely clear and easy to understand okay so it goes through like a really solid refining process and it's distilled down and just super clean before we uh hand it off over to you okay so it's just a little bit behind the scenes i thought would be interesting for you guys boom all right so now let's work on and add the post footer so post footer is going to be fairly simple but here's one thing that you're going to need to do for it so inside of our post here i'm going to add all of these icons so i just did a copy pasta right now and that copy pasta is basically all of my icons that i'm going to need okay so these are all the icons that i need so i have a like icon a comment icon a share icon and a save icon and if you're wondering what that all of that looks like it'll look like this so at the top right there i make this even smaller so it doesn't really take up any space on the screen but the heart the comment the messenger and then those all the share the save icon right so all of those are right here and the way that is this is set up is you have the image url then you have the like damage url and the only one that has that is the like button because remember the like button turns red when you like a post so you're gonna need two different images for that everything else is straightforward again it's an array of objects so get used to that pattern very very common pattern you'll always see it all the time best to just get used to it so i got my icons now i'm going to do stuff with my icons all right let's go ahead and make our post footer component i'm going to go here const post footer okay and there we go all right so post footer uh let's give it an icon so let's make an icon component so post footer is going to have tons of icons inside of it okay so i'm going to make that component right now so we're going to do cons icon okay and we can even put that inside of post footer but that's fine this is a const icon all right and let's close this and i'm gonna go image style image url all right and then we're going to give it a touchable opacity opacity like this and then each image is going to be image style like that okay so now our icon component is made and now we're ready to use it inside of our post footer so let's go ahead and go icon and i'm going to say image style is equal to styles.footer icon so this footer icon styling we're going to need to make that and let's go ahead and do that right now so i'm going to go ahead and do this footer icon will be width of 33 and a height of 33. just like that okay now let's come back to our code where we were making our icon and let's give our icon an image url as well and the image is going to be post footer icons we're going to give it the first image which is that like image and then let's close it just like this let's give a let's make it an implicit return there we go okay so we have an icon that has um we give it an image style right and then the image url cool and then that shows it so now let's make post footer suppose we can actually see the post footer so let's go on top right here and let's now go ahead and add it so i'm going to say post footer and add it in like this complaining about touchable opacity not a problem just need to import it from the top touchable opacity there we go so now you can actually see the heart icon but it looks like it's too close so what we want to do is make it so it's not too close and by the way guys we're almost at a freaking thousand likes that's freaking awesome so post footer we're going to wrap it rub it all right we're going to go style and i'm going to go margin horizontal and we'll give it 15 we'll give it a margin top of 10. there we go so now the likes has a nice little margin from everything else that was going on and now let's go to our post footer component and uh we just need to add a couple of other things to it okay so let me go ahead and just make a few more icons okay boom boom now it's gonna complain hey i need a parent blah blah blah okay let's wrap it in a parent then not a problem okay doesn't need to freak out now you see that it's in a column we don't want that right we want this to be in a row so let's go flex direction and let's go row beautiful so that's looking good now we need to have uh these three icons in its own view and then the right one in its own view so let's wrap this bad boy in a view like this okay and we're gonna have left footer icons and then we're gonna have our you know essentially our right footer icon but we probably don't even need to uh say that it should just be good to go actually so let's go ahead and go let's create styling for our left footer icons so i'm gonna go left footer icons container and we'll go flex direction row and we'll give it a width of 32 percent and we'll go justify content and we'll go space between all right and let's give this a style of styles.left foot container there we go so it's wrapped in that left footer style thing that we wanted so that's good now each of these images we just have to change them slightly so i'm just going to replace this zero with the one the zero with the two and our images should be looking good now this image right here icon does not exactly look like the one that we have uh right around there right so we're gonna need to just add a slight bit of styling on this okay so let's go ahead and do that so share icon let's create a styling for that so i'm gonna go share icon we'll do transform we'll go rotate not 90 degrees but rather 320 degrees and then we'll go margin top and give it a negative three oh by the way guys i forgot to give a huge shout out so this app was built uh me david and amanath too so monitor actually did a lot of uh work as well on this we had uh but david and i well we had to sleepless nights no i'm kidding i'm kidding amanda had to sleep full nights he's not on here so i can say whatever i want oh he's still on here oh just realized that oh snap he was catching some z's sorry you guys can't see but i have them open on skype so i can communicate with them they'll sometimes help me with uh if we got donations um or if we're if our video is down and just give a huge shout out to them by the way guys they're very very helpful so i want to see some comments of positivity and love being dropped right now for amanath and david guys cool so um this is this looks good to me all right now we need to just give the share icon and put it in the right place so let's go ahead to our second icon right it's our icon 2 because this is our share icon and here's what we're going to do so this is a cool hack that i want to actually show you guys you can actually give it an array of styles so you can put a comma here like this and you can say styles dot share icon so now it's inheriting the styles of the footer icon and the styles of the share icon really cool neat trick you can do it like this very very nice so there you go that style is now showing up doing what we want it to do and of course now we just need to add the last guy so how are we going to do that well we're going to get out of this container and we'll go view and inside of this view i'll put in that icon we'll go image style styles.footer icon and then image url is going to be post footer3.imageurl so now you guys can see the bookmark showing up except i want it all the way at the end so there's a couple of ways we can do it right i think we should be able to do it with justify content uh space between here okay so that's one way of doing it i want to also show you another way of doing it so the other way of doing it is you can actually do give it a style and we can actually go align items and we can go flex end and we can give it a flex one as well so there so flex one basically tells it take up all of this space um and then when you say flex end it it actually moves it all the way to the end there so multiple ways of doing it i just wanted to show you different ways uh personally i like the space between one better but this is this is alright as well cool so our our footer reaction icons are looking good are doing what we want them to do now what we need to work on is we need to be able to show our likes right so we want to be able to actually grab the likes and show them because right now we're not able to uh show them so let's go ahead and do that so this component is going to be a pretty simple one you guys it's not going to be very complicated and i actually have to make a decision do i want to show you guys how to like refactor this code and make it even better or do we just skip it so give me a second here i'm just going to think that through real quick and see if i want to do that hey okay i think we're good with this for now to be honest because i think it's doing what we needed to do and we don't need to mess around with it too much okay oh okay okay okay okay okay so just one thing is post footer needs to take in icons okay that's kind of about it we don't really need to actually worry about that too much okay let's move on and work on our likes component okay we don't need to worry too much about refactoring right now so let's work on likes component and this component is still going to be inside of post footer all right but we just go all the way to the bottom and so we'll work on it here so i'm just going to say const likes oh wow thank you so much we just got another donation uh from darsh and darsh says hey really great work you're doing i know until vanilla js could you suggest some projects for manila.js to get an internship i'm in my second year um i would recommend that you don't worry too much that much about vanilla.js i think just go and start working on react it's okay like i think deeper understanding yes it can always help but i'd rather you just actually start doing javascript with react because there's gonna be a lot of things you're not gonna ever use again like dot inner html and bunch of other stuff that when you're using react you're not changing the dom in real time you know or the dot at like ad event listeners or whatever like you're gonna be using states and stuff so something just keep in mind cool we're almost at a thousand likes thank you guys so much for your love i appreciate it all right so the likes component is gonna be pretty simple it's gonna take in the likes or sorry it's gonna take in the post everything is gonna take in the post so that's one important thing for y'all to know okay everything is gonna take in the post now we are going to uh basically show each of the posts so that's going to be in a text tag and we're going to go post.likes.2 locale string and we'll do just like that and then we're going to close it now it's not showing up because remember text is also currently black so we need to actually change it to white and that'll help us show it and the other reason why it's not showing up is because we need to add it right here so we actually need to go and do and we can actually add it in the same view so right underneath here we just go likes and we give it a post there we go okay so let's go to our likes here right and now our likes are showing up on the screen so that's a good sign that's kind of what we want and now we need to actually give it further styling right so for the font i want to say font weight and let's go 600 on this bad boy okay so font is looking better and now we need to actually give it some styling and so let's put a view on top of this all right and we're gonna give it a styling of flex direction of row we'll go margin from the top should be four so like let's give it a little bit of margin from there and this looks good the only thing it doesn't say yet is the word likes so let's say that and now it says the word likes so 7870 likes it's actually being pulled directly from the post the next one let's see what that says also saying seven thousand eight hundred and blah blah blah likes cool let's go to posts yeah they both have the same image and the same amount of likes so we're gonna do something i'm gonna go in my uh i'm gonna go and posts uhhuh cool okay and then we'll soon be pulling in the information about the people as well okay so now like for example if i change the likes here to let's say like 3 500 likes right and i go down 3 500 likes perfect let's go back into our post component cool so i believe likes are done guys that's it they were pretty straightforward they're simple so we're done with them now we need to add captions so the caption is the next part so where you say where you see it says clever quasi building the netflix clone with react.js this is going to be a fun build that's the caption so the caption is pretty much the same styling as the comments actually so once we do the caption the styling is gonna be pretty easy for uh comments so const caption and we'll do it'll take in a post and we will get a text and the text will say the post.user's name okay so let's just start with that real quick and let's go ahead and render a caption at the top caption give it a post all right and now it's not showing up of course because the styling on the text needs to be changed right so here's what we're gonna do i'm gonna give it a styling of color white there we go now the styling is showing up all right so now i'm going to show you guys something actually interesting so you can have text tags within text tags because we can't use span right so since we can't use the span tags we got to get creative with how we use the span tag so like almost imagine like i'm using a span tag right now but instead i'm just using a text tag okay because uh this is going to have like a special bolded text right and then this one is going to have user first one suppose that user and then we're going to have post dot caption like this right but the clever cause he actually needs to be bold all right so let's go ahead and let's go style and we'll go font weight i'll go 600 so now clever quasi is slightly bolder right and the next text so let's go here let's put it all in a view because it's too close to likes and we want to give it a little bit of a distance so i'm going to actually say here and we're gonna say style we'll go margin top and i'll add in five so now it's it's a little bit more breathable room okay i'm just gonna update the caption just so it looks a little bit better but this is just dummy stuff right now so you don't have to worry too much about it i'm just doing it for like aesthetics just for fun no no crazy uh reason all right let's go here paste that cool just so like we can also check the styling as well right like how does it read on multiline because sometimes on multilines it might read incorrectly okay and now what we can do is we can actually just give even a slight margin so let's go back here okay margin and that way clever quasi and the rest of the stuff can have some amount of margin so let's actually try that let's go margin right five that's not doing that okay oops bold let's try here margin left five interesting okay so that doesn't work oh but what we can do is actually we can do a little hack all right so we can do a little hack we can actually just give a space like this so not here but inside of our caption there we go okay all right david you were right i was wrong that did catch me if the space was really obvious i would have caught it so like that okay there we go so you can make the space really obvious like that but here here it is okay so give that space and now you get that building the netflix clone with react.js and you're good to go okay so let's take a look at both of the com both of them they both look slightly different right the image is the same but other than that they should be good cool me all right and uh another thing that i'm gonna do is i'm just gonna update the dummy data just one last freaking time just so we can also have like my brother's posts in there and some different people's comments oh instagram is gonna be uh complaining which is super annoying actually uh david can you link me my brother's url in slack please instagram is annoying it just expires its links like every few days or something just so you can't be using their stuff all the time so let's grab like a new url here and we'll be good to go in just a few seconds all right so in terms of the caption though let's take a look in terms of caption guys we're honestly done there's not much more to do in caption like i'm just wasting time uh adding not wasting time but like just adding more aesthetics to the app i also think it's good for testing just so you can see like different images working and doing the things that they're supposed to do okay so we got the new image and let's see uh if this image works like how i want it to all right and it does not does it need to end in a jpeg or something david like dot png or jpeg or something like that do i do that 4k thing maybe at the end of it 4k slash 4k slash png will that work damn it that doesn't work okay cool well that link does not work david so if you can give me another link that'd be helpful all right so let's keep on going let's work on adding the comment section now okay so comment section is gonna be a little tricky okay so let's go ahead and do comments section post and when i say comment section right what i really am talking about is this and i'll show you in just a second so let's go post i'm going to try this one last time guys hopefully this works yes it does nice look at that that's beautiful perfect so let's go back and uh comment section is going to be this section right here so it's not the comments themselves it's a you see where it says view all two comments that's what that is meaning that if you have no comments that section will not show up at all but if you do have one comment it will say view one comment if you have multiple comments it will say view all to com view all two comments right so there's three different states that it could have if it's empty shouldn't exist if it's one it should say view one comment if it's multiple there's a view all comments so just takes a little bit of javascript jujitsu but we will work through it okay and you'll learn some dope javascript so let's go there's actually a really cool hack in this one that we figured out and we'll show you and probably even drop that as like a separate video at some point uh by itself so let's just do an implicit return because i don't need to do anything else so all right so here we go here's the text that we want right so text and i'll just say hi for now we'll give this a color of gray actually so it needs to look gray now we're gonna add this comment section right underneath here so i'm just gonna say comments section give it the post so the high is showing up as you can see at the bottom all right now what we do want to do is we want to be able to say hey check the comments length right so something like this so we want to be able to say something like that so i just wrote this line right now and basically it says hey if the comments length is greater than one then say comments otherwise say comment okay so for example if i go back to my well actually let's read out the comments themselves as well real quick oh no that's the next part that's the next part okay so let's test it now right if i go right here and um and i remove one of the things it should go from plural comments to singular comments i'll remove one of the posts now it says comment right we add it again now it says comments so to me this looks like the way that we're checking the length and whether we're going to make the comments or comment is is good okay and now what we want to do so let's write that word here right so this is not the actual view component this is the word view so now we can say view and we also want to determine whether we want to use the word all or not okay so the way that we're going to do that is by this javascript snippet okay right there and what this is basically saying is if the comments length is greater than one then say the word all otherwise don't say any words at all okay and then this will actually say so if i remove this it won't save you all two comments i'll just say view all comments so if i add this part back now it says view all two comments okay so this is the number this is whether we're going to say the word all or not and this is whether we're going to say comments or just comment okay cool and a last case scenario that we actually want to account for so remember we have three cases right one is um zero comments so there's a zero comments case right so zero comments so in the zero commons case don't render component okay in the one comment basically what you want to do is render a component and also say and and and make the word um yeah without the word all and uh singular comment right and then in the last case you render with the word all and you say plural comments these are the three case scenarios right so right now we accounted for these two with this snippet of code now we need to account for this last one which is the trickiest one actually it doesn't seem like it but i'll show you why that's the case so first thing actually we're gonna do is i'm just gonna for styling i'm just gonna add a little bit of margin to the top like this go down here and we'll paste so now i just have some margin so it's it's a little it looks nice right looks like real instagram now we gave it that little uh gap from the from the caption okay now we're gonna make this a conditional render and how we're gonna make this a conditional render is the following way okay so i'm gonna basically say if post.comments.length then render this whole thing there you go so now it's wrapped in a conditional all right so let's go back to our posts and if i remove this comment it will say view one comment if i add it again it will say view all two comments so that's good but what happens if i remove all the comments it crashes and the reason why it crashes this is pretty weird is posa commons.length actually brings back a number okay so let me just explain this here so post.comments dot length actually gives you a number right so that number is gonna say zero or one or two or three like that right so the truthy value of zero is false all right uh man this is this is gonna be weird to explain but yeah because it's it's pretty tricky the true d value of one is true so when uh this is one it goes i'm true and so then do this but when it goes zero it goes i'm not true so then it tries to do just this part and when it tries to do just this part it goes hey you're writing the word zero but it's not within the text components so what do you want me to do when i just have a zero here to render it has no idea just freaks out it says text strings must be rendered within a text component uh but if this was the word false it would do nothing super freaking weird okay super freaking weird so if you literally had a thing that was rendered saying false here it will work but if you had a zero here it would not work so bizarre okay really really bizarre so the hack there is you want to make this zero uh either be a false or a true you don't want it to be a number so for example i don't want this to render to one or two or three or four i just either wanted to say true or actual word false and so the hack to do that and turn it into true or false is i just do the same thing post the comments on length and this is a dirty dirty hack but put double negations if you put double negations now if you have zero comments it will work and it is so bizarre and it doesn't show right look at that didn't crash if you have experience with javascript you should really enjoy this part i really enjoyed this part i was like yo i finally understand what double negation is it's the craziest freaking thing so yeah double negation is a uh bizarre one you could do a ternary operator way but this is just cooler and this nn approach is very very common when you're reading code everywhere they'll do this this way because it's just nicer and you don't have to say or null so this looks nicer but yeah so double negation will just turn whatever you have into a true or false and expose that things through the value so there you go now this section will work and with that said we are good with the comment section okay beautiful nice you're doing a great job right now if you've made it so far i know this is hard and it takes a lot of time but i'm proud of you for being here there's still 218 of you live so thank you so much for that and thank you so much for your support comments encouragement uh it really really helps i appreciate all of you let's get rocking and rolling now we're going to add the comments component and comments will show the actual comment so for example where it says the cosmetic wow this build looks fire super excited about this that's the actual comments section now all right so let's go and work on that const comments we'll do post do like this all right and then inside of here i will map through all the comments that i have i'll grab the index all right and uh within this loop i'll write down what i need to write down so we'll make a view within this view we'll add a text and the styling is going to be the same as the styling is going to be same as the caption so it's gonna look very similar i'm gonna be using the the same techniques here so we're gonna do color style we're gonna say color is white okay um and literally the the rest of it is going to be the same so the user is going to be bold so we're going to do style i'm going to say font weight is going to be 600. okay and then the other part is just going to say comment dot comment so why comment a comment because uh comments is this thing here and uh comment is this one object here and comment.comment is this guy right there that's why boom boom boom all right so that looks good of course we need to give this a index we're also going to give it a styling but let's give it a styling in just a second let's just go render it out right now and let's see what we look like so we go comments give it a post and there we go all our comments are showing up okay so our comments are not showing up the only problem is that they have a certain things with styling so let's go and fix them so this comment right here i'll give a space okay can we go and make it very obvious like this yes we can so there we go so you put a space there and that'll give a space between the user's name and then their comment itself okay and now this view we're gonna just give it is slight styling so right here i'm actually just gonna say style and we're gonna give it a flex direction of okay row we're gonna go margin top five so each comment now has slight margin uh between each other perfect so comments component is looking good you guys honestly we're done with the i mean we're going fast we're going freaking quick here we're done with the comment uh components there we go nice so if you guys are enjoying this so far again break that like button we're so freaking close to 1000 likes um and yeah appreciate you guys let's keep going so what are the next things that we need to add so this is looking pretty good now let's work on our bottom tabs component okay so what is this bottom tabs component you're talking about kazi i'll show you so let's get rid of our post footer bottom tabs component is this guy right here that's the next one that we're gonna build okay and bottom tabs is going to go and sit right here you guessed it right at the bottom just like that okay um kind of like that yeah i don't i hope i'm doing it in a way where it looks like it's actually there yeah so pretty much like that so let's work on it now i'll just leave it here so you guys can see this the whole time and we're gonna code this thing up now so it's a new component and now we're going to go inside of home new file and we're going to call it bottomtabs.js all right and uh there's a lot of stuff that's gonna be added into here guys so buckle up this one is gonna be a fun one bottom tabs great so first things first we need access to all of those variables right so i'm just going to copy them okay and we're going to paste them here all right so what is all of this these are just bottom tab icons all right we got the home icon for the bottom left one we got the search icon oh they're opening up okay we got the search icon we got the reels uh zenology says how did you get this good i practice and code a lot so even if you see my last week it's um pretty ridiculous and i've been doing this for years now so you know this is this is probably just my last week right so this is just one week 44 hours in the last seven days there's probably more that i didn't that they didn't even log but yeah so yeah there's there's a lot of coding happening right like eight hours 54 minutes on thursday uh seven hours 36 minutes on saturday three hours on october sunday so like every day there's a lot of actual and and keep in mind walka time records not the time you're thinking not the time you're white boarding not the time you're walking outside and thinking about how you're going to solve the problem not the time where you're like dreaming about the code it's logging just the time where you're actually physically typing code right that's what it's showing so the reason why i'm showing this to you guys is not to like discourage uh but to encourage right like these are the last 14 days to show you that it's not that i am good it's that i just practice this a lot you know and and maybe i'm practicing this maybe more than you okay so this so just make sure that you know you can do this trust me you just need to spend time coding okay spend a ton of time coding every freaking day you know as much as you can and you start getting better like coding yes it is hard it is tricky and these concepts take a long time to grasp but like you're gonna get pretty good at javascript if you spend 72 hours in freaking two weeks right i don't maybe i didn't even have it enabled before two weeks so it doesn't have that but i just have the last two weeks uh enabled so yeah that's there's literally no secret all right it's just hours coding how much time are you spending uh you should be able to see that so hopefully that was helpful for you all right beautiful uh david can we clip that one that was actually pretty sick so just time stamp that moment please and clip it because that could that could be an awesome video yeah a lot every day yes sir okay so i got all my bottom tab icons right here guys and now notice that i have the active and the inactive ones and what's the point of active or inactive well it's simply because when you click at the bottom home versus the search right which one this switch to which one is active and which one isn't so that's that's why we need the two different icons one that's the fill one and then the one that's like unfilled beautiful sorry it's filled right there you see that cool so every icon has an active or an active state and we're going to need to be managing that state all right so when we're managing states i'm thinking we're going to need to import use date so i just imported it here because we're going to need that and we're also going to need a couple of other things in order to be able to do this one so i'm going to import divider because you're going to need it so let's go divider all right from react native elements it's going to be that like little line at the top and other than that let's just get into it and then we'll import things as needed okay this is a heavy commit this is a heavy one so let's go through this all right so bottom tabs will take in icons all right and it will also need to manage certain states we're going to go active tab set active tab and we're going to go and give it home okay so the default one is going to be home now we're going to create another component called icon and this will do the following this will have an image okay and each of those images is going to be wrapped in touchable opacity to make it a button so whenever i'm making a button i just i usually just wrap it untouchable opacity now there's this new api thing that they release called pressable so maybe that might be the way to go look into it but the regular way is just anything that needs to be a button wrap that thing and touchable opacity and you should be good to go nice yeah okay okey dokey so wrapping this in such an opacity now we need to now show these icons okay so there's a lot going to be going on here okay so let's do this so on press what i want to do is set the active tab to icon.name okay okay and now let's just see if we can actually show these icons bottom tabs so let's go to our home screen and let's just show them so let's go to home screen and i'll add bottom tabs in the safe area view bottom tabs like this and you're gonna give it the icons and uh this is gonna be the only kind of annoying part that you're gonna you guys are gonna need to do so let's import them so like we're making the icons here but we're never using them in this file we're using them in the home screen by importing them so bottom tab icons bottom tab icons are being imported and bottom tabs will also need to auto import this so there we go import bottom tabs and bottom tab icons from that i know it's weird but it's just because i don't want to make the home screen super bloated i also wanted to show you how to import and export stuff around because very useful skill to have when you're working with react all right so bottom tabs takes in certain icons we're giving it those icons let's go back it's being used all right and then let's just render them out all right so i'm just gonna loop through each icon so we're gonna go icons.map and we're gonna go icon index and i'm gonna go icon key index icon icon okay so pretty soon we're going to start seeing these icons okay but what we need to do is make our icon component actually be able to show these images so we're gonna go source uri and let's just go icon dot active for now or inactive for now let's give it a certain size so we'll go style um we'll make styles dot icon styles all right and let's go down here and let's create a style sheet and we're going to go stylesheet dot create and we'll go icon and icon will have the following styles it's going to have a width of 30 and a height of 30. so look at that all the icons are now showing up at the bottom they don't look super pretty but they're showing up so that's good now let's actually give a create a container that'll contain all these icons so we'll go container i'm going to go flex direction row remember because i need them to show up in a row all right um let's put a comma here and why this is not taking place is because we need to actually wrap this up in that style so we will go style equals styles.container it's already an object so we don't need to put two squigglies there there we go so now you can see the icons are actually showing up at the bottom they're showing up in a row that's good now we need to give them some spacing um between them right so we're gonna go not space around but we're gonna go space actually space around should be fine let's go space around so space between pushes them too far out to the edge right and we don't want it that far out to the edge so let's go space around on this hey beautiful guys this is awesome thank you so much we just smashed a thousand freaking likes so huge shout out for that thank you guys appreciate the support appreciate the love let's keep on rocking and rolling all right so here's what we want to do now let's give it a height of 50 and padding top of 10. cool okay so it's starting to look starting to look good so notice that when i give it a padding it it pushed the stuff down right and when the height is too small it's too small so we want to give it a height so it's like a little bit bigger right and now we want to start doing a couple of things we need to actually give there's some dynamic styling in here that we're going to do as well so be ready for that but first let's actually put all of this in a wrapper okay uh and what this wrapper is gonna do so we're gonna actually create a wrapper on top of all of this okay so here's what we're gonna do we're gonna go view and we're also gonna put a divider line and for the divider we'll go with of one orientation vertical uh why vertical i never understood because it's always horizontal but vertical just makes it a little bit thinner so go figure i have no idea how to explain that but that's that's the divider documentation so go yell at them don't yell at me sheesh yo guys can i get like just in the comments just like sheesh you know what i'm saying let's get the comments popping a little bit i could use some tea now let's go style and we'll go styles.rapper okay kinda like snoop dogg there we go so the wrapper it gave it a um so the wrapper we're gonna make it so it gives a position absolute soon okay we're gonna do that soon not doing that yet that's jesus all right [Laughter] the top comment by that's funny it's hilarious thank you for the energy i need this energy let's go you're the best coding sneaky sheesh guys six hours x am this many hours of coding live under all of this crazy guys so like i need your energy right now i need that food for me thanks for the love i appreciate every single one cool so we got this view where we're doing our tabs are showing up now we just need to do a couple of um you need to do slight little touches okay and one thing we need to do is based on which icon we click it should become active all right so let's go ahead and do that now so right now i'm just hard coding the inactive image right but here's what the active image would look like so now they're all have that fill going through it but we need to make this a dynamic thing and how we make this a dynamic thing is like this basically what i want to say is if the active tab is currently the icon.name that's selected then give me active or give me the inactive all right so this is now working look at that everyone i click is showing up okay so it says hey the current one you've clicked if it matches that specific icon then make then give me the active url for it otherwise give me the inactive url for it there we go okay so the active tab is keeping this is what's changing the state when we do on press beautiful where did he get the users array at stories.js there is i have a folder called data inside of it i have users so that's where it's at i'm getting it from right there okay beautiful so that functionality is now working and doing what we wanted to do now let's go ahead and work on some additional functionality on this okay so this is going to be slightly tricky but when we click the profile so first of all profile picture we need it to be round so let's go ahead and do that oh and let's style the wrapper as well guys style this wrapper so we're gonna go position and we can do absolute we're gonna go with and we can do hundred percent go bottom three percent and let's go z index 999 so it's always on the top i'll go background color and we'll give it that's the color we'll give it there we go so now it's guaranteed always going to be on top okay cool all right beautiful all right let's go ahead and style this now so we go profile pic and here's what we're gonna do let's give it a border radius of 50. let's give it a border uh we'll we'll look at that in a second and a border color of white all right and i'm gonna take away this arrow function just for a second just to make it a regular profile pic like this and now we're gonna go to our profile and give it a styling okay so we're gonna need to add a conditional statement that asks us if it's our profile picture so here's what we're going to do profile picture needs to inherit the styles of the icon plus the styles of the profile pic so immediately what i'm thinking is i'm thinking it's going to be an array right it's going to be an array of styles like this and the second array is going to be a conditional okay it's gonna be the second array is gonna second item and there is gonna be a conditional one so we're gonna say if the icon name is profile then what i want you to do is styles up profile pic otherwise give me back null styling so notice that the profile pic styling is now being added here but not added to these other ones right because if i remove this conditional statement and i just hard code this in there now everything is going to have the circular thing which actually you can't see but trust me it's a circular thing that now all of them have so we don't want that we just want it to be like this okay and now we also need to worry about the styling of when we click it so this is the styling of just the profile icon itself but now we need the styling for when we click it so we need to now do dynamic styling so how we're going to do that is profile pic is going to take in active tab or it will be by default it'll be empty like this okay and we will make it a function so this is really cool you can do dynamic functions uh dynamic styling like this and what i'm gonna say is border width should depend on if the active tab is profile if it is then give me a width of 2 otherwise give me the width of 0. now active this is a function or a method so we're gonna put dot profile pic open close parentheses like this okay now it's complaining oh wait but default should be empty oh oh yes yes yes active tab wait where did i write active i wrote active somewhere oh yes yes yes yes right here active tab typo cool there we go so there we go okay now it's getting the styling but here's we're gonna be here's the fun part now if the active tab is profile and the icon name is the active tab which you've clicked on so basically which if you what you've clicked on is the profile icon then i want you to do the following give me profile pic and pass it the active tab otherwise give me back nothing okay so now we have a array of styles the first one just gets me regular styles the second one gets me the styles for profile and then the third one gets me the styles for profile when profile is clicked so watch this when i click profile now it becomes white look at that right such a nice little touch guys i hope you enjoyed that one i enjoy these like javascript parts that are just clean nice mustache awesome okay so we are good to go with this all right so in terms of the bottom tabs i believe guys we might be just done with the bottom tabs i think we are all right bottom tabs should be good to go uh we are finished with this now we can actually move on to doing bigger and better things in our lives anytime you have unused imports you can just delete them that's what i like to do just so my code looks cleaner it doesn't look as intimidating plus it just improves the performance of your code because you deleted what you don't need all right now we're going to work on the new post screen that means that you should be able to go there and upload a post things like that okay so what does that look like that's going to look like that's going to be this screen right here all right so what we want to be able to do is we want to be able to go into the screen upload a post and it should show us this post okay so this screen is going to have a this screen is going to have a post uploader component so we're done with bottom tabs so that uploader that you guys see right there that is we're using formic and yup for that and what that allows you to do is validate so when you type in stuff it validates if what you wrote is correct or not and it won't let you push things from the front end that um it'll provide you with front end validation which is super important because then your back end won't get clogged up and you won't have to use your back end to validate for the user because that will provide a much slower and worse user experience all right so i'm gonna open up the actual component that you'll be you will be making so the first thing we'll be making actually on that screen if i go back to that oops not what i meant to do so the first thing we're going to need to do is make that top uh make the part at the top that says new post with the back arrow okay so let's go ahead and do that and we're gonna start working on a new screen as well okay so this is the thing that we're building so let's go ahead and make a new screen so let's go into new screens create new file and we'll call it new post screen dot js and this will do this we'll give it a safe area view um and it will take in the add new post component and we'll give it a style and we'll make it background color black and then we'll do that same hack that we do which is we give it a flex one so it will take over the whole screen and make it black okay we don't need this this yet let's go inside of components we'll create a new folder called new posts new folder it'll be called new new post just like that and that will have all the components so in here we're gonna say add new post.js and add new post dot js will be pretty simple and it will be a text that just says add new post for now we'll give it a style of color white so we can just see it and we're now gonna add it to app.js so we can see it at the app level okay but right before we leave this screen let's just see all the work that we've done so far because it is quite a lot and it is quite impressive what we've done so take a look at this this is what we've done so far we've built this screen right here it's able to take in posts and comments and show them it's able to show you view all comments uh as well and everything is clickable right so i can click it we have our stories component which you can move horizontally like this we have our post component that shows all of this we've built our post header we built our post footer comment section i mean there's a ton that we've already done you guys and then the bottom tabs they look super nice right when you click them they become active or inactive based on what you clicked and when you clicked it so great job so far if you're following along or you're just even watching this like you're gonna be picking up a lot of these skills so in our app.js we wanna now render out this component so i'm gonna remove home screen and i'm just going to say new post screen all right and now new post screen is complaining so let's import add new posts there you go so this is this is pretty good this will just get us started with what we need so we're done with this guys and now we're gonna actually start working on adding that header part right here which will go right up there all right so it's going to be like a back arrow and then it's going to say new posts in the middle so let's work on this now so we're gonna now go inside of our ad post component all right and uh this is gonna be fairly straightforward guys so let's go ahead and make some of our stylings we're going to need so i'm going to say const styles stylesheet.container oh i i don't mean to say that i meant to say not create okay and in here we're going to have container this will have a margin horizontal of 10 we will import our style sheet so let's go import it we'll do header container this will contain the header it's like no kazi what else will it contain all right there we go put a comma right there otherwise it'll keep complaining at you we'll do justify content we'll give it space between and then we'll go align item center and the next one we'll need is header text i'll leave this empty for now and we'll style it in just a second now i want to start seeing things so let's start off uh in our view we're gonna need an image that's gonna be the back button by the way okay and so we'll import i'll get that back button right now and you can use this uh url here uh david and amanda can you guys please get all the assets and all the urls in just one folder and make it so everybody can click the link in the description or something because some of them are assets and some of a lot of them are actually just urls so every people will need access to the urls all right we're gonna do source uri and we're gonna drop this guy beautiful and of course now we need to give it a certain width and a height so let's go here and let's go style with 30 height 30. there we go so now our left arrow is showing up we do want to make it a button so let's make it touchable rapid and touchable opacity okay all right so we got the touchable opacity action going on now when i click it it actually detects it i don't need this text to be inside of the touchable opacity this text can be outside of it this does need to be like a flex direction row type of situation so we're gonna do is we're gonna just use our header container that we made so i'm gonna say styles dot header container um and in add new post uh here's what i'm gonna do instead so i'm gonna make this entire thing its own component so i'm gonna just say const header and just paste that in there and then inside of here we're just going to render that component so i'm going to say view and we'll say header just like that so now it's showing up now this view will inherit the style of the container so we're going to says styles container there we go this is margin horizontal so it just brings that thing in and the next thing we're going to need is post form so i'll just leave that written here just so we remember that okay and this will just simply say new post okay and now we're going to style our header text and we'll say color say color and make it white we will make the font weight 700 will make the font size of 20 and margin left 27.5 okay and we'll give that to the uh new post so we'll just go and we'll go styles dot header text okay so now it looks nice and bold great okay cool so we're gonna fix that in just a second let me actually just take a look here so what i'm going to do is i'm just going to give it instead of a margin left we're just going to give it a margin right of five okay so so that looks good to me this is looking good font weights margin right looks good i'm wrapping the header in header container so that's good okay so so that's another hack you can do by the way to center it okay you can just because it's space between i can actually just add like an empty text component there and this will actually help me center it okay so just remember that i'm going to emphasize that this is just an empty text component with nothing inside of it and all i'm using it for is so my new post can actually just get centered that's all okay there of course better ways of doing it but it's uh but we're just going to make it work for now cool so it looks good to me now we got to start working on our post form beautiful so this is actually gonna be a heavy one alright so buckle up because we're gonna be doing a couple of things here so we're going to call this formic post uploader all right and we're going to make a new component inside of new post okay cool all the urls are there awesome thank you for sharing that with me so this is going to be called formic post uploader dot js just like this all right and uh we're gonna make our forms uh we're gonna make our form inside of that okay so it's gonna be a couple of things we're gonna do number one first let's just see if our formic post uploader is showing up so we'll give it a style color of white and um i'm just going to say formic and let's go like this i just imported at the top right there and our formic post uploader formic component is showing up and now we need to actually start writing code in here so we need to do a couple of things we need to install yup and we need to actually install formic so let's go ahead and do that i'm going to do yarn add i'm going to zoom in here so you all can see what i'm writing uh yarn add formic this will install that and then the next thing that we need to install is yup so we're gonna do yarn add yup so these are the two installs that we need now we can zoom out all right and now we're gonna do upload post schema and this is to give it a schema of like what's allowed and what isn't allowed okay we're gonna say image url and it's going to be a yup string and we're going to make sure to say hey make sure it's a url and then we're going to make it required url is required okay that's what it's gonna say and then caption we're gonna say yup dot string dot max and we're gonna max the caption out at 2200 and then i'm just gonna say caption has reached the character limit and that's how it is on instagram you can only you can write up to 200 200 characters so that's what will allow you to do that make sure to put the comma because it's an object you're giving it with two properties one image url and one caption two keys now it's saying hey i don't know what this yup thing is so let's see if we can import it uh okay we can't import it so we're just gonna type it out we're gonna say import everything as yup from yup all right and then we'll also say import formic from formic all right when it's complaining like that all you got to do is just refresh and it should be much better now it's freaking out why i changed this so we're just gonna go ahead and say yup uh corey says is this a recording this is not a recording i am live right now what is up welcome i feel like we gotta make these lower quality so feels like we're live all right so we got our post schema now we can actually start working on our form um this is where things get just a little bit tricky so hang in there with me and we're gonna go through it alright so now let's go inside of our formic post uploader and we're gonna do the following okay so we're gonna say thumbnail url set thumbnail url and we're going to say use state imported from react by the way if you haven't already and we'll start it off with the use state so this is going to be a placeholder image you guys that we're going to be using when it doesn't have an image yet so it's just a placeholder image okay as a matter of fact let's just actually do that let's call it placeholder image and we'll give it that image and we'll replace this with placeholder image just like that okay all right and now comes the really tricky formic part okay so here we go so this return i'm gonna make my format component and here's how formic works formic is so within the formic this is where our form is gonna go our form and when i meet my form right you're like what form what are we building as a form that's where you're gonna put in your caption and you're gonna put it in your url that essentially doesn't look like a form you never think of it as a form but it's actually a form right so we need to treat it like a form because we need both of those things to go at the same time we also need both of it to have a validation and we need to be understood like a form there are like two things at once right so inside of formic you put your form so this is where our form is gonna go and our form is going to be made up of like two text input fields right which is where you can actually write your text a caption or for the url so that's just keep that in mind um the the syntax is going to be really heavy and the syntax of this is going to make you feel like you're confused or you don't know what's going on but the idea is what i just stated alright so initial values are caption and image url which are going to be empty in the start then we have on submit what should happen and on submit what we want to happen is we needed to get the values and we just needed to print out the values that's it and validation schema that we're going to give it is going to be the validation schema that we just made right there which just says make sure that the image and the caption fields are filled out okay now is the part where we build out our form and so we're gonna have an anonymous function kind of just like i mean this is crazy but uh copilot is like filling it all out which is insane but i'm just going to build it out with you guys so we're going to go like this so we're going to go handle handle blur handle change we're going to give it handle submit it's going to i mean it's going to take handle submit of values errors and is valid all right so you're probably like what the hell's going on here all of this guys is being pulled from formic itself okay so that's what's going on there so this is a function and then we're going to render that function's output right there there we go says expression expected and i'll just put in false so this whole thing is a function and it's destructuring a bunch of values that we're going to need and then we're just returning them right away and here we go now we're just going to build this thing out so we're going to put jsx fragments and then inside of it we're going to start putting our stuff so we're going to go view inside of this view we're going to have our image this is going to be the image that like holds that dummy uh dummy image and then we're gonna have our text input field okay make sure you import it can't find variable formic so import uh i believe it's imported with a capital f here there we go now it's not complaining anymore so text input we're going to give it a placeholder of just like hello well that was weird my app just crashed let's go back into expo go and it doesn't matter whichever one of these i open i'll open this one okay and of course we also want to make sure that our text color is gray so we can actually see it so i'll say placeholder color gray so now my thing is showing up right you can see it's not looking pretty but it's it's showing up there so that's good so we're gonna need like multiple text inputs okay so this is text input number one for the captions and then we're gonna need another one for the url okay so basically this one is gonna say write a caption and this one is gonna say enter image url okay so there we go both of them are there and then on top of this so we have an image um and then we're gonna have so let's go here and let's update the component because we're not just on headers anymore you're going to be building this thing right so that's what it looks like so if you t if you pay attention to this you can see on the top left you have an image then you have write a caption and then underneath it you have enter image url so let's go add all of that stuff in now okay so for image i'm just going to kind of uh hard code the image uri here so we're going to say source uri and we're going to just say placeholder image okay and now of course we need to give it certain styling so it actually shows up this whole thing actually should be wrapped up in a view i believe yeah so we're gonna remove that view from there and we'll move that view down here so this image now we needed to show which means that we need to give it its size that's why it's not showing currently so we're going to give it a size of a width of 100 so we're going to go style style width of 100 and then we're going to give it a height of 100 like this so now that image is showing up okay now let's start working on these text inputs that we have okay great so so let's work on the write a captcha one so this one is gonna be multiline is gonna be true on this all right so now it will allow us to write multi lines like you see how i'm hitting enter and it's taking me to the new line okay now we need to give it a color so we can actually see what we're writing so i'm going to just go ahead here and say style color white so now when i type it should actually show me what i'm writing we'll give that same color down here to this guy as well there we go cool for the caption though we're going to also have a font size so we're not just going to have a amber also gonna have font size for this let's go font size and let's give it a 20. cool i mean it looks pretty similar so i don't oh yeah yeah so there we go now write a caption looks much bigger which is fine now what we want to do is on change text handle change and give it caption so what's nice about formic is you don't have to pass all these states like you don't have to do like this date and set state and then do this and make a state for every single thing formic will handle that for you everything is built in on blur we're gonna say handle blur and give it the caption for value we'll give it the value that it's getting from the captions and that should be good enough okay now we're to work on the other text input and the other text input is going to take in a couple of things as well so we're going to do on change text right there copilot is very smart on blur do the same thing beautiful values do the same thing and then the only thing that's left is yeah i think that's pretty good font size should be a little bit smaller so i'm going to grab the styling from there we'll overwrite this and we'll just say 18. so it's a tiny bit smaller dope okay now the only things that look different is how the views are styled so let's go ahead and we're going to style our views now style and i'll say margin 20 boom that's already making it look better we're going to say justify content space between okay and we're gonna go flex uh flex direction row nice so enter image url is the one that's looking funnier so let's see if we can move it out of this view and if it does what we want it to do it does okay but let's just move it back for now and i just want to make sure that we're doing everything accurately okay yes so we are going to move it out of this view actually so let's move it out of this view let's put it right there okay let's also put a like a divider here so it's very clear that they're like two separate things right now the divider let's give it a width of 0.2 and then orientation is going to be vertical it's like a very thin divider that we want to add there uh okay now write a caption is looking a little bit funny so let's put a view on it and we'll put a closing view down here just like that and for this i'm going to say style and we'll go flex one beautiful and then we'll go margin left on this there we go so now write a caption is looking good yeah pretty much all of it is looking good now we just need to go underneath text input and uh just need to do a couple of things so we need to now write error so i'm going to say errors dot image url and then we're going to say font size will make it 10 and give it a color of red so this will show us the errors and i'm just showing you this so you can see how formic works with errors so we're going to errors image url so you can see now it's already complaining about the error right image url must be a valid url just like that right so when you don't write it it goes a url is required perfect all right and then what we want to do is you want to give it a button and that button on press should handle submit it should take in the title and it should be called share and then disabled should be is valid so thanks to formic we get is valid from formic itself and it knows whether the form you're submitting is valid or not you and i don't have to do anything about that let's import button from react native there we go and now our share button is showing up now notice that when i reload this page it actually starts off blue but then when i start writing it becomes disabled so that to me looks weird what's this complaining about font size so i wrote font size incorrectly here so like that's weird right like why now it's grayed out but when i refresh it starts off as an enabled state so this is a little bug that formic has and they have no good way of solving this so like the thing that i found that you have to do is uh pass in validation validate on mount and give it true so like this will actually validate this as soon as this component is mounted so like now let's refresh and see it's disabled i can't even click share until i type in it's not working and now when i type in it's not working but if i give it an actual link hello.com boom now it actually allows me to hit the share button and when i hit it look at the bottom left so look at the bottom left every time i hit this look at the console log it's getting the data for me right so if i change this to hello new post boom look at that so we're getting um all the data that we actually need right that's i guess that's a good thing about uh just having that this is a nice little trick you can do and everything then works okay great now our validation is working as expected so we're pretty good now all we need to do is be able to render the image right so for example let's say i get an image okay let's use this image here and we wanted to be able to render that image right there before you hit post so we're just gonna need a couple of things for that we already got this right so this thumbnail url is going to be the one that we need so let's go to our image url text input and as you're typing in here what we're going to say is on change we're going to get access to the event and we're just going to say set thumbnail url to the nativeevent.txt so whatever text we're getting from there okay and now we have access to that thumbnail changing and now we just need to make it dynamic so we're going to go to our image right here and this part right here we're going to make it dynamic and we're going to say thumbnail url if it is if it exists then give me thumbnail url otherwise give me the placeholder image okay that's it and now it should be good so let's paste in and there you go it actually renders it in real time let's remove this and now it's not there anymore let's type stuff and it goes invisible so that's exactly what we want beautiful okay so it looks like this is um working how we expect there we go awesome so this is looking like it does everything we needed to do when i hit share it's giving me just hit 5200 subscribe subscribers i'm getting the image url so in terms of being able to post the image we are good now we're going to connect the database part to it later for now what we need to do is we do need to create our signed in stack and signed out stack which means that we're going to need to start adding in navigations now because if i hit this back button i unfortunately can't navigate to the home screen so we want to be able to navigate back and forth so let's uh work on that now guys okay so formic post uploader is successful all right i don't think that there's anything else we have to do here we're good we did the whole thing good job for hanging in there because that one is a little complicated but when you get it right it's so good like for example if i make this link invalid boom it even crashes how nice right no suitable url request handler found for htt so it just like broke right and now let's go back and now it can handle it and we can actually just hit share so very very good exactly what we want it to do so let's go to the next part now and start adding in navigation so navigation guys is going to take in um a little bit of moving around but it's okay i believe in you you can do this so let's create a new screen and we will call it navigation.js all right and in here first of all we need to install a couple of things so here's what you want to install now remove this off the screen all right so here we go we're gonna do yarn add and we're gonna go react navigation native so that's the first install you wanna make the next install is you wanna install the stack so we're gonna go pretty much the same thing except slash native we're gonna say slash stack we also will need access to gesture handlers which means when you swipe left then swipe right so we're going to do yarn add react native gesture handler and you can also use npm i like yarn more because yarn is better it will resolve all the dependencies for you dope we'll also get valid url we might want to use it at some points but i think let's just get it for now if we end up not if we end up deciding not to use it we just won't use it so it's fine now inside of our navigation we can actually start working on this so let's just go ahead do our usual rnfe cool so the cons that we're actually going to be exporting from here we're going to call it oh wow thank you guys thank you guys yeah sometimes i forget to zoom out guys i apologize so i didn't do much all i did is literally rneffy boom that's it okay cool so now inside of here well i'm just going to call this the signed in signed in stack okay and then we're gonna have navigation container and this entire thing is going to be inside of the navigation container we don't need this return so because we can just do an implicit return like this wrap that in navigation container and then we're gonna do this we're gonna go stack.navigator stack dot navigator we don't need the stack actions so let's import that though let's go import create stack navigator from react native stack that's perfect and we're gonna also do import navigation container from react slash native just like that okay now let's go ahead and make our stack so we're gonna go right here we're gonna go cons stack we're going to set our screen options to basically say that don't show the header okay and now inside of here we're gonna do uh initial route so we're gonna set our all of our screens now so we're gonna do stack.screen kind of like this you don't need to pass the options here okay and for each of these screens we're going to give it a name so here i'm going to call this home screen and then here i'm also going to import my home screen from right here so i'm getting my screen from my screens folder okay let's go ahead and get our new post screen just like this so i got my new post screen now so i got both of those screens now i need to just give it a initial route so we're going to do initial route name and we'll go home screen and then we'll go screen options screen options just like that so these options that i created here i'm just passing that header is false here are my screens so don't need this remove that all right so here's my signed in stack now we actually need to be able to use the signed in stack so in our app dot js instead of new post screen we're actually going to pass in the signed in stack like this so let's go here and let's export default signed in stack let's go back let's now import it so now we got the signed in stack we don't need to give scr we don't need to give app specific screens anymore we can give it an entire stack and notice that it's already rendering it correctly okay that's perfect that's exactly what we want this means it's working another way i can find out it's working is i can change the initial route to new post screen and it should render the new post screen when i refresh uh you can see it does go back refresh it now shows the home screen so this is doing exactly what we wanted to do now all we need to do is when i hit the plus sign it should be able to take me to the new post screen so here's how we're going to do that let's go to our home screen our home screen is going to get access to navigation our header component is also going to get access to navigation let's command click into header it's going to destructure the navigation that we just passed it and when you click the plus sign which is right over here we're gonna go on press what we wanted to do is we wanted to do the following navigation dot push take me to the new post screen that's it and now inside of the new post screen so the for make post uploader or not sorry the new post screen oh sorry inside the add new post component that back arrow all we're gonna do is say on press navigation dot oops now what i meant navigation dot go back this will allow us to just go back and forth between the first two screens so formic post uploader is fine but what did i i thought i imported something that we don't need that's fine okay now header actually needs access to the navigation so we're gonna go navigation equals navigation add new post component we'll destructure navigation for this but here's where navigation is actually coming from let's go to the new post screen new post screen is the one that actually has access to it only screens have access to navigations then you pass it to the children of those screens so this new post component is a child navigation close this and i think it should be good to go literally in the first try but let's see hit plus navigates me it back it breaks so why does it break let's go to add new post we're getting access to navigation we're passing it we're not destructuring it inside of our header component so let's just go and destructure it now it will work there boom look at that that is slick right boom right so you can navigate by sliding to the left so you can navigate two ways so you can navigate a back by sliding left like this look at how buttery smooth that is so nice and you could also go back by hitting the back button isn't that nice guys wow reading the chats just to engage with you guys actually i'll put the chat right here actually because honestly it's even it's a little distracting but it's kind of like fun for me to be engaging with you guys the whole time all right okay cool navigate here navigate back cool so navigation is working like expected i just want to double check a few things here on submit we also want to be able to go back so when i actually hit share i want able to go back uh eng happy says no backend for this build absolutely not true bro uh if you looked at the start you cannot do any of the things that we do without a backend for example having signins user registrations user authentication this app will have um being able to create a new account you cannot access and go in without logging in actually so all of that is gonna need a backend and then being able to make a post all those posts will be retrieved by a back end will be written to a back end you will also not be able to see posts if you're not logged in so like there's maximum security on this thing cool james says smooth yes sir looks great all right so now we need to just add that there beautiful first clone i wanted to try we'll try it after live south african network was so bad absolutely i'm happy for you to be able to try it this is going to be awesome you can have a lot of fun with it penelope in the house let's go okay so inside of my form we're gonna add on submit and right here here's what we're gonna do okay we'll say console.log your post was submitted successfully uh we'll add a little tada successful and then we will do navigation dot oh i never mean to do that navigation dot go back okay here we go so let's go back let's go forward um oh this will also need access to navigation so let's destructure it right here navigation and formic post uploader is on the ad inside of the add new post component so let's give it access right here as well and then let's go to the formic post uploader uh yeah now it should have access to it okay great so let's actually make a post let's uh get that image gee this woohoo hit 250k let's hit share and there we go we can see woohoo hit 250k and we can see the image url your post was submitted successfully and it rerouted me back to this page so how freaking nice yo that is amazing emmett says oh my god i have recently received an interview from a company thanks to the ubereats clone thanks quasi yo that is amazing i'm so happy for you so freaking happy for you thank you for letting me know that i appreciate it yo that is amazing it's real world stuff guys penelope says this is so cool i'm happy yes yes yes awesome so boom boom and now i can go back right so that's exactly what i wanted i added my navigation everywhere and um we are good i mean it's valid you alright huh sure we can do that so i'm gonna add in a nice little thing here hopefully it'll let you pick up something too and from valid url so remember we downloaded or sorry we installed this valid url thing now we can actually use it so here's how you would actually use this so let's go down to our uri the only reason why i wanted to fix this is because like if i paste the image here but if it's not an image yet it will actually just give you back blank because it's still something so i wanna make that bug go away so how i'm gonna make that bug go away is right here and all we're going to do is we're going to say a valid url dot is uri wrap this in and if it is then show it so if it's a valid url then show um then show it otherwise show the placeholder the entire freaking time all right so let's try this again and let's go here and let's post an image and let's go back wow that does not do anything how amazing with speech to text using tensorflow oh that'll be fun actually david do you want to write that down texttospeech with tensorflow i think that could actually be a lot of fun oh and pong says instead of prop drilling navigation the library includes a used navigation hook oh that is nice actually that is a nice one thanks for sharing that i learned something new cool okay so there we go now it's working i just have to like refresh it a bunch of times oh because this is still a valid url that's fine so there we go but if you write like dumb stuff now won't like show you the just the black screen it'll actually keep that placeholder image there the whole time which is exactly what we're looking for so we're good with this now our navigations are working okay and now we're gonna start working on our login screen you guys so let's go to screens and we will remember guys all the screens we're building are right here i'll show you these are the four screens you'll be building in this project all right so we're done with the first two these ones okay so these are the ones that we're pretty much done with now now what we're not done with obviously is the back end of these which is going to require quite a lot of work so that's okay now what we need to build are these ones okay so this this is your the one we're going to be working on right now is this one right here the login one then after that we're gonna build a signup screen okay so let's get to work on the login screen so screens new file will go login screen all right and this is going to be a pretty simple screen i mean i don't want to spend too much time on the screen because it's literally very very simple so we're just gonna paste this because there's no reason there's not a lot going on in here to be honest um okay never mind i changed my mind let's just build it let's just build it that's okay let's go to navigation i'm going to put in login screen here uh yes i'm going to use firebase for back end okay let's go like this login screen cool and we'll do styles style is gonna be styles.container okay and then we're gonna have another view and this will have a style of stylezod logo okay uh and let's now get to work on on this right here we'll have an image and this image will be uri okay and we're gonna now put the instagram logo right here so i'm gonna put that right there okay instagram logo you guys can get it from wherever you want but literally this is the logo that has everything in it thank you so much for the super chat it says uh hey kazzy great work man i've started learning a lot more of react native to these projects great work keep these projects coming absolutely you got it you got it buddy thank you for the super chat okay cool so we got now we're gonna put in that uri right there so i'm gonna say instagram logo and of course let's render the screen out as well so we will i'm gonna just make it implicit return because it just looks cleaner that way so let's refresh our app that's not what it should be doing let's go back login screen oh right i have to add login screen here so we're gonna say login screen i'm gonna go right there and we're gonna say login screen and now it doesn't know what styles is so we're going to say cons styles is equal to style sheet dot create and we're just going to make it empty for now all right so login screen is showing up and it's empty because well we haven't given that logo a size so let's go logo wait let's give the logo a style so we can actually just do that right here here's another way to style things by the way you don't need to give it a style prop all the time you can actually just say you can actually just pass it to source which is interesting so there you go now it's showing up now we need to create some containers so they make this look bearable let's go container and i'm going to give it flex one we'll give it a background color of white and we'll give it a padding top of 50 and then padding horizontal of 12. so let's go there cool now we need a logo container and we're going to go align item center and then we're going to go margin top 60. there we go that's exactly where we want the logo right if we look at the reference screen that we're using you should always have a reference screen that you're working against so this is the reference screen we're currently working against okay that's what it should look like you can use style components as well but i am just deciding to go with regular styles like styles in here because just easy you know um but yeah you could definitely use styled components image source nice wrapped up and then the last thing we're going to need is the login form to show up okay so we're gonna need another component uh and that component is going to be the login form and that's gonna go right underneath this so what that component is gonna look like is gonna be this one right here that all right so that goes right about there so let's leave that right there so you know what we're working on and now let's go ahead and uh start working on this you can still use react uh style components i believe with react native so you should be fine but that's all good yeah all right so let's go over to create a form and we're going to put it inside of our components and we're going to create a new folder too in just a second but login screen so far is looking good let's go ahead and start working on the form now all right since under components we're going to create login screen so a new folder login screen folder uh it doesn't need to be capitalized i like to just keep it like this login screen and they'll have a component inside of there and that'll be called the login forum.js and this is how this one is gonna work so first of all let's just go back to the login screen and comment this in and import it so we got it right there let's have uh some text from it showing up boom so now text is showing up so that's good now we're going to start working on this component itself all right so let's just start off with the text inputs right so that's how i like to start my forms text input import so we're gonna need one text input and we're gonna need two why are we gonna need two text inputs because there's two text input fields okay and then we have a button so two text fields and then a button so i'm gonna go ahead and add that button as well title of this button is gonna just be login login just like that cool and now i'm going to get to work on our text inputs so these are going to be pretty simple i want to get to the more interesting backend parts i'm going to skip through this because we just did all this so placeholder placeholder phone number username email auto capitalize none we're going to have the keyboard type to be email address okay text content type as well and then autofocus for this is going to be true rfce i believe is for react uh react not react native so instead of view and text it won't import that it'll import other stuff so like rfce like doesn't import that so it's very similar but like it also won't auto complete these views here nice all right now so that's our first uh input field okay and now we're gonna have another and let's put uh this both of these input fields inside of a view and this is just so we can style that input field okay so we're just gonna say style is styles dot input field like that okay and um do const style sheet or sorry con styles equal to style sheet dot create leave it empty like this so now i can type in here that's cool let's create another view just like that with the text field it's going to be very similar except the only things that are going to be different about this are the following that so it's going to be a password field capital auto capitalize none autocorrect is going to be disabled secure text entry is going to be true so when i'm typing it actually shows me uh the dots like that perfect we don't need redux for a lot of things um everybody that shows you how to use redux online most of the times just using it for some like bs reason that they don't actually need it for but they just do it so they can get more views on their videos i mean i think for some of the videos we added it maybe even for that reason but like you don't need it as much as you think you do most of the time you don't need it like for managing authentication people always use it but like you don't need it because firebase already has all that information so what we did is we went through this entire project built it with redux added all this redux functionality and then went through it again spent another 30 40 50 hours and just kept stripping out every area that we didn't need i didn't absolutely need redux and we realized like there was actually zero need for redux in this entire project so you don't always need it ronto says it feels great to see such uh great productivity and doing the whole project end to end in one go thanks for providing the hope that with consistency in practice quite a hell of a lot works can be done absolutely if you just say laser focus and you start coding you can get actually a lot done but like you're just keeping your brain sharp is the key thing so we got these two uh now the last thing that we actually need is of course we need to give it some styling so the styling is gonna be pretty simple because we have done this a lot of times now guys i'm gonna be moving through this like a little bit quicker and uh here's the styling for this all right we got some margin top order radius action going on here okay uh margin bottom and border width let me remove this padding cool and we're gonna align things to be i believe in the center so let's see if we have that somewhere if we didn't do that so let's uh put everything in the wrapper so we're gonna go style is equal to styles dot wrapper there we go okay so now we just need to make it so it looks like how we have it here okay let's see uhhuh view input field input field oh okay so maybe we might not need this much padding so let's remove let's make the padding patty the battery field can we do a line items center that's not what i wanted justify content center that's not what i wanted either okay that looks good enough for me okay cool okay david if you can spot the bug here let me know but like it's slightly off i believe from what we're trying to achieve the text being in the center so if there's a slight bug that i have here uh do let me know that'd be much appreciated but like i cannot uh find it i can i'll i'm starting a live share so if you want to jump in here you're welcome too yeah i don't get what the bug is but if you figure it out great so because i want to just keep this thing moving so padding login form so the padding that we have is 12 but clearly it looks too big but that's okay we're gonna keep on trucking guys just go eight for now do i have like three text inputs or something oh oh oh oh okay there we go does it still look right though it kind of does like the borders look too dark yeah my text input i just had like text inputs within text inputs um and that was creating the problem but now it's looking better so there we go awesome now we're gonna do some more stuff to the login form okay and when i say more stuff we're gonna be adding um we're definitely gonna be adding like the forgot password and the account password thing and the login button we're gonna make it look nice as well so right here let's go and uh build a forgot password section so right underneath this password i'm going to get right below it and we're going to create a view and inside of this view we're going to say text and this text will say forgot password all right and now we're going to move that to the right there we go flex end and we'll give it a margin bottom of 30. so now login is moved down and let's give this text a color so we're gonna go color and uh it'll be like this bluish color there we go beautiful now this button that we have instead of a button being login i'm gonna just call it pressable and pressable gives me nice things let's go pressable here and what's cool about pressable is that you can write text inside of it pressable and inside of the pressable we can have text and that text can say login now it's complaining probably about it doesn't know what pressable is so let's just import it okay and let's go title size is 20 we'll go style this styles dot button and we'll we'll create the styling for it now so let's go right here and we'll go button so this is the styling for the button okay and uh basically what this will do is give it a background color align it to center so if i remove this you can see it moves it all the way to the left this will align it vertically in this case we give it a min height so the button actually has a certain height and then we give it a border radius so it looks a little bit rounder and nicer cool and then we're also going to have a button text styling so i'm going to put that right down here and it will have a font weight of 600 it'll be white with font size of 20. so here we'll go here and we'll say style styles dot button text there we go so now it's looking pretty nice we should be able to click this too so you guys won't be able to see if we're clicking it or not so i'll add on press and i'll just write console.log you clicked me just like that and if i click it you can see it says you clicked me even though it doesn't have that touchable opacity thing that the other uh that touchable opacity has but that's okay and now we're gonna add a sign up container so we're just gonna do i'm gonna do sign up container and then we're gonna say don't have an account question mark and then do that let's give it a touchable opacity oh not not touchable that's not what i meant touchable opacity and inside of touchable opacity i'm going to have text that pretty much just does this we don't need to do first styles we can actually just create a style right here and i can say color and we'll give it that same color right there okay so now we just got to style the sign up container there we go so sign up container flex direction row which is 100 uh it will basically align horizontally if i remove the width right you actually you might not need the width in this case i'm leaving it anyway flex row will make it so it's not in columns and then margin top will give it a margin from the login button all right so that's what signup container is and that's what it does let's go and let's put a space right there you can put a space wherever you want either with the sign up or after the account whichever one either one works so now the login screen guys is looking pretty freaking good what do you think if you think the login screen is looking pretty freaking good let me know in the comments below and uh of course we still need to add some more functionality to it like actually add formic so they can validate it but you know it's looking pretty damn good to me log in sign up dope cool hey getting some thumbs up nice i see it okay just double checking everything looks good to me to be honest and now we're just going to complete this login form we don't need touchable and we don't need button i'm going to remove that now guys we're gonna wrap it in formic okay so from formic we're going to import a couple of things um and not all of this from formic so i'm importing formic from formic okay and importing this and i'm also getting an email validator so we can actually install this together just do yarn add email validator cool so now this is installed so these three imports we're gonna need let's also we're gonna need to keep track of states so let's just go use state all right and now we need a login form schema okay so basically we're going to do just that so let's go out here that's not what i meant that's what i mean all right so this schema login form schema basically saying for email get me the email for password make sure that it's a string that of eight characters this is validating it's an email this is validating it's eight and if it's not eight then your password has to be at least eight characters very easy uh both of these are required so you can't even hit submit unless you do that and now we're gonna start adding in the formic part so within this wrapper right here we're going to start our formic right here and we will finish our formic all the way at the bottom like right there okay and then we're gonna wrap all of this stuff inside of like the formic juice as we call it so first of all let's just give formic a couple of its props that it's looking for so initial values will be email and the next one is going to be password and but they're both going to start off as empty we're going to have on submit and for now we're just going to say get me the values and simply just do console.log actually we're going to do this because we're going to need to do more stuff later so let's go here and let's just say console log me the values and the next thing we're going to need is the give it the validation schema and we're going to validate on mount to be true so it validates right away cool and now we need the weird part of formic here we go so it's an anonymous function that's going to take in a bunch of things handle change handle blur handle submit values it's getting all of this from the formic form itself okay and now we're gonna just go and do this okay cool so you see this arrow function right there uh all of this stuff is gonna be inside of it and then we're just gonna go all the way down and we're gonna start closing stuff now so right around right about here we're going to start closing things we're going to close close is there any other ones so we need to close must have one parent element so in order to give it a parent element we can just give it a like a gsx fragment type of situation that should be fine so let's go ahead and do that right here go in like that and then go all the way up here thank you david very helpful that's cool hey let's go that's super helpful nice pair programming let's go that's exciting move the whole view to the middle it looks sick all right hedaya thank you looking great looking good so fair says not good nice nice guys your best looking pretty good beautiful thank you okay so now this whole thing is uh doing what it needs to do and now we need to actually start doing stuff with this information okay so we're gonna go down here to the email one and we're gonna add like three more props and this is what they are these three that i just added so on change handle change email on blur handle blur email and value values that email so these three you're gonna need to add for password we're gonna need to do a very similar thing let's go here boom boom very similar all right so now we're done with the password part now we just need to go to our pressable button and tell it hey when you um when somebody presses you don't run this freaking code actually do handle submit okay so handle submit is what we get from here and it sends it over to the on submit all right there we go so now if i hit save if i type stuff in and it hit login it doesn't work if i type stuff in and hit login it still doesn't work if i type in a valid email and then i hit login oh i'll remove the form out of the way so you guys can see and now when i hit login so now it works you see that because it was validating that this is greater than eight characters and it was validating that this is an email for example if i remove this at sign and now i hit login it actually won't do it because it's not validating right from the front end now when i do it it will so pretty freaking cool right so super super freaking awesome all right now we just need to do a couple of more things i need to give it a nice little uh style for validation though yeah let's do it why not so let's make this button a dynamic button and we're gonna do you're gonna take in is valid all right and then you're gonna return me an object based on that all right now background color is basically going to go is valid if it is valid then i want you to give me the fully blue one otherwise give me the lighter blue one so let's go here david what's that color extension that shows all the hex colors is it like hex something color color highlight that's the one right yes sir beautiful let's install it let's go back all right there we go color highlight thank you for the comment nice that's sick so you guys can see what colors i'm giving it right here now i thought i installed it like why did it not install it globally it's weird hey nazrul says great work brother worth not sleeping tonight hell yeah yes disable the button if empty field by using disabled so i'll show you um how to use disabled properly so this valid on on the pressable component right we're actually going to pass it uh i'm gonna actually pass it is styling i don't need to disable it because it will already be disabled from formic itself okay all i need to do is actually just pass it styling that's all i need to do disabled i don't need to worry about on press no no no no no what am i doing so for the style what we're going to do is we're just going to say styles out button but now it's a function and we're going to give it is valid and if it's valid then it will be blue otherwise it won't be blue so let's make it not valid so boom it just becomes a lighter blue but then as soon as it's valid it's like that okay and let's actually test disabled i don't know the api of pressable but but i think it works so there you go like you can even pass it and disable like that cool so like when it's disabled it doesn't work i hit login login login login doesn't work then as soon as this is valid well the email is now not valid there we go so very nice way of doing it and now let me actually see if we want to add in the email validator situation um it's pretty cool it's actually pretty cool we can do it so let's go all the way to the top and let's go to this view for the first text component and what i want to do here's what i want to do okay what i want to do is when a user doesn't type in anything let's say the user just comes to this page this should not um this should be as it is but as soon as the user types so basically here's what i want if there's a wrong input the border should turn red if it's an invalid input if it's a valid input the border should just become normal for both of these fields so it creates a seamless experience for the user without having to say these like big error messages like this is not valid and like saying it right there i just want the subtle red to show up and as soon as you're correct um it just goes away also if you don't type in anything it should stay as it is as soon as you start typing it goes red and as soon as it's valid it goes away okay so there's a couple of case scenarios we have to take care of so now let's go ahead and style these input fields and for style i'm going to say cells input field let's make it an array so the first style should be whatever it is in here the second style should be the dynamic one so this dynamic styling now will be based on the following we'll say border color will be if values.email dot length is less than one then validator dot validate values.email and if it's true give me back it's regular otherwise give me back uh red okay wait what the heck is it freaking out about oh i have to give it an object so let's put it in an object thing like that all right so this is an object and this whole thing will resolve to either this or this okay so now let's check it out it turns red and then let's see if it becomes valid as soon as it becomes valid notice guys right as soon as it becomes valid it starts becoming unread and at the same time the blue button will start to kick in too like that's pretty freaking nice so there we go that takes care of all the case scenarios right if it's less than one then do the thing um yeah so boom we're good with this and now we want to do a very similar thing with the next one as well for the passwords basically okay so let's go to the password and for the styling we're going to do it very similarly and the first one is going to be an input field and then we're going to do this if password length is in between so this is a nice way of saying in between it's kind of pythonic it almost looks like python but basically this is saying if the password length is in between one and six isn't that cool that's kind of cool or if you want to be technical as two and six but like yeah one and six right so i really really like this because it's super clean um and if it's in between that then um you know give me blah blah blah or red okay and as soon as because if if it's less than one it means the user hasn't started typing if it's more than six it means that whatever the user has wrote is valid okay and i'll make the minimum six here as well because it should really be six not eight so let's make that six and now let's come back here and type so right now see you see nothing but then when i go one two three four five six oh that is nice look at that no red one two three four five six no back to no red that's so clean right so as soon as these errors go away the button becomes blue at the bottom and it's just so freaking clean like subtle subtle little things they make it look so good penelope says for us beginners this is like watching a magic show that is the best compliment you can honestly give me because my whole dream and what i share with my team as well is like how can we make this so it feels like a magic show that's like the best compliment you could have ever given is awesome amazing okay great so we are done with our login page honestly it's it's a heavy heavy work that we had to do but we're good with it like this is a solid login why i went like why we went above and beyond like when david and i were building this for you guys is so you can re keep reusing this and any new projects that you do even years later because the code is so clean and it's built so well that you can keep reusing this exact way okay boom boom now we're gonna add a sign up screen okay and the sign up screen is going to be honestly very very similar in in terms of what we do okay so sign up screen i will literally paste it there's not much to talk about and don't want to waste too much time on it so let's go screens new file and we'll do signup screen dot js all right so what's going on here look it's very similar to the login screen okay you got the instagram logo you got a stylus container you have a logo container all right the logo has a height we got the signup form uh we got all the stylings for the logo container and whatever it's literally currently a or it's a replica of sinus uh login signup is literally a replica of login the only difference is that it has maybe an extra field cool now let's go to our navigation and here we're going to switch to sign up screen so let's see that it hopefully takes us to the sign up screen let's refresh um weird it doesn't know about signup screen that's what it is cool i learned something new if your initial route doesn't match it just gives you the first one from the stack ah david look at that learning new things hey so we're gonna do sign up screen i'm gonna go sign up screen and my throat is so dry live streams are unhealthy okay let's refresh boom sign up screen is showing up beautiful okay there we go that's the signup screen very simple very easy pretty much the same styling and all that stuff everywhere okay so we are good we are good so sign up screen is gucci now we need to add the sign up form to the sign up screen okay this is also going to be very very similar it's pretty much going to be a copy pasta i'll just show you where the differences are again very similar so we'll make a new component we'll make a new folder this will be called like sign up screen this will have a file inside of it that's going to say sign up form dot js and i'm just going to paste this okay and let's just take a look at first what it is and what it looks like so let's import now sign up form it's importing it let's none of these files exist oh oh okay wait hold on that's not what i meant to do just ignore me for a second guys let's make this error go away okay so i'm just gonna paste it here like this uhhuh and i'll just explain like what each of these things is doing as we kind of go through this okay so sign up form is going to have a signup form schema email username and password whereas the login form had a email and password all right so slightly different schema but essentially very similar username should be a minimum of two characters password should be six should be required and email should uh be an email and required okay so similar stuff so far all right okay again i'm just gonna bring this in so once i bring it in then i'm gonna explain as i bring it in for you guys okay so just give me a second here guys need a little bit of patience and i will explain everything don't worry i promise i know it looks like oh so much but it's not it's copy paste of um the the page that we just finished building so okay cool and then i'm gonna add in the styling as well because the styling is gonna be pretty much the same okay cool now the sign up form we just gotta make sure it shows up so let's go back to the sign up screen and let's make sure it shows up say refresh uh what's the error we're having right now invalid expected a string but got an object free javascript yes so sign up screen line all right that shouldn't be the problem sign up form sign up form am i exporting it oh i'm not exporting it i'm an idiot all right so i'm gonna export it david you want to do okay oh you got it okay my bad you got it got it so um we i just didn't export it that's all that's a problem i don't know why there wasn't just telling me that there was like well if you go and you go to best boy and buy a tv then you'll be all right it's like what the air is i'm not exporting it like tell me that la porta says it's a little overwhelming for a change into tech so yeah these ones are more advanced i suggest if you're a complete beginner watch the beginner tutorials of like us just doing javascript by itself like if you watch my javascript tutorial that's made for complete beginners i'll make a lot more stuff for complete beginners this is just to show you like what you can do what's possible all right so i'll explain this guys as we go along but uh essentially the sign up form right so the schema is this all right and the schema essentially states this is this is how it needs to be okay after that we still have the wrapper just like the login screen or just like the login form right styles wrapper let's go back we still have formic we still are taking initial values the only difference is email username and password are the values on submit we're just console logging stuff validation schema is the one that we created up there validate on mount is still true we're still doing this handle change channel blur blah blah getting all this stuff right there that we need right the rest of it is very similar guys i don't even need to go over a lot of that okay it's very very similar the only things are that now three fields have this uh validation right so like for example this is red this is red this is red that we need this we have three text input fields now instead of two so the second one is the user name one right and the first one is the email one which is the same as the login one okay and um yeah we have a pressable button that does literally the same thing all right except we probably just want to call it like sign up and sign up one word david or is it do they write it as two sign up right probably two words two words got it thank you um cool already have an account log in dope okay so now this looks good let's test if it works i'll do causey at clever so sign up is disabled currently we'll do usernames clever causey and password is one two three four five six ah there we go so it works it's let's say my username is two characters or sorry less than two characters it has a problem with it hey what's up nazare let's go keep at it hell yeah bro i'm gonna keep at it dawg took over the whole screen all right cool all right guys this is looking honestly phenomenal it looks sexy make sure you have all these imports but essentially a replica of login form so we're good now we want to add navigation guys so we want to be able to navigate back and forth between these screens for example when i click the login button it should navigate me back all right so let's go what's up boy all right so let's add that nas says i'm working on the youtube clone get ready guys the youtube clone is going to be sick give it up for nas in the comments cool so login form signup form is gonna let's start let's start it like this let's go here and uh we'll start the whole game with login screen let's go back let's go to login screen all right we're going to take in navigation we're going to pass navigation to our login form navigation navigation just like this let's go to our login form we're going to destructure navigation and then we will all the way down here where it says sign up right we're gonna say on press navigation dot navi no no dot push and we're going to say go to the sign up screen just like this so now let's refresh the app and let's hit log in or sign up and watch what happens it takes me to sign up screen so nice right but now when i hit log in i want to be able to come back so let's go to our signup form let's go to the same place i'm actually going to even copy the code so we'll copy even that like space there nice little hack let's go and paste and instead of push we're just gonna say dot go back all right let's refresh let's hit sign up and let's hit login ah we have to destructure it from the sign up so let's go to the sign up screen let's destruct let's get it from here let's go navigation navigation there we go sign up form let's pass it let's go to sign up form let's destructure it now we have access to it let's hit log in but we go back sign up log in sign up log in sign up log in nice beautiful zoom says sheesh can't wait for the youtube clone awesome nazarel says please make more videos like these live videos are more engaging i think thanks for even spelling my name that name was my little fanboy moment yes sir we got you pay attention to that stuff man people have said our names incorrectly enough times all right cool so i mean i don't know about you but to me it looks like the navigation is working all right and now guys now it's time for firebase let's freaking do this thing david is having the time of his life all right so for firebase you all gotta go to firebase.google.com okay and we're gonna go to console we're going to create a new project i'm going to call it react native what is this project by the way david what am i doing here what are we doing yo let's go nas just dropped a 10 donation and he says uh let's kill it bro tell us what clone should we build next so let us know in the comments right now guys what clones you want to see next we're on fire right now all right so what am i what are we building i'm just blanking oh yeah instagram my bad guys i'm sorry it happens to me sometimes all right there we go let's go instagram clone youtube live okay i'm just gonna put rn in the store to signify that it is okay to signify that is it is a react native i don't need any google analytics you can choose to keep them on facebook penelope says no way i'm missing the youtube clone i don't even care if it takes me a month gonna be epic yo that's the spirit penelope let's go arthur thank you so much for your suggestions he goes r and fb instagram clone i appreciate that uh just saw it too late cool all right here we go webb um r and instagram clone register app this app is gonna be sick guys security on this is sick like this is just so cool tick tock clone yes summer that's a genius idea my friend all right guys now what i want you to do is grab this entire thing okay just copy this entire thing and uh we're good or actually hold on copy that thing and also let's do a few more things at the same time so we don't have to come in here again to do them let's go into firestore database and let's create our database let's go create database let's go test mode and hit next and enable the only thing you have to know about test mode is that after like 30 days it will disable your database so that's the only thing you have to know uh the iphone mockup on the right mark is simply a simulator it's the simulator that comes with expo so i didn't do anything expo was nice enough to do it for me all right so we got the database going so that's good the next thing we need to know do is go let's go into authentication let's hit get started and the only authentication we need for this one is email and password so let's click enable and that's really it so that should be good all right cool cool beans all right so let's create a firebase js so i'm going to go new file we're going to go firebase.js and you know what the deal is you know what to do you're just going to copy pasta everything you got from there do a sas bootstrap nice that's a good idea payment push notification user auth content management i like it i like it all right cool so now we just got to do a couple of things so here's a snippet of code that's helpful and what this will do is if there's an app um all this is doing is can i write it on like separate lines so you guys can see it easier if the app ex doesn't exist initialize it if it does exist use it export default firebase okay and then from here this is the old firebase way of doing it um but i'll show you guys the new way at some point but for now this is all right that's what your file should look like okay right now so there we go oh baby awesome thank you cool hey that guy says i'm from scotland land of the loch ness welcome all right so we're done with firebase js file okay and then we just need to install a couple more things so we're just going to install firebase so let's do expo install firebase this is a little hack guys make sure you get this right if you don't get this right you're going to be crying and you'll be like i didn't cause you didn't told me i'm telling you right now i'm also zooming in so david or somebody help i'm gonna forget to zoom out so i'm gonna hit enter expo install firebase very important you do that if you don't do that you're gonna run into weird errors and you're gonna have no idea why telegram clone nice sounds like a cool idea amazon mobile clone that'll be fun we need that whatsapp clone for real for real hey good news for you my friend almost got that in the bag all right so expo installed so we've installed firebase now that's good now let's go into login form and guys watch how easy this is going to be this is going to be really really nice so a few things that we need to actually do all right we need to import firebase from firebase okay i'm i'm also going to get alert from react native because i'm going to use it okay and uh here's what we're gonna do we're gonna create a function right underneath the schema and it's gonna be called on login and it's gonna be an async and it's gonna take an email and password and uh here's what it's going to do we're going to do try we're going to do a try catch block so catch an error and uh i want you to just alert me with that error okay and we're gonna do oh wow thank you very nice so await firebase auth dot sign in with email and password and then we're gonna pass in the email and password all right that should log us in and once that logs us in we're just going to say console.log i'm just going to say firebase login firebase login successful cool and then we're gonna pass in my email and we're gonna also just console log my email and password okay just for now um oh i should have tunneled this app right david when we were demoing it we're idiots there's like so much we forgot like there's so many features i forgot to highlight like it's insane next time let's write down a list of all of them so like i can't forget because there's just so much functionality we added to it what's up john from philippines big fan of clever programmer welcome my friend nice to have you here all right here we go so alert alert dope um honestly we might be pretty much done actually all we need to do is that on submit function we just need to say do this on login thing and give it uh values dot email and values our password so the on login function will now have access to the email and password so let's try it now let's try logging sign in with email and password so this will sign in if there's already an existing account i believe so let's just give it a try actually there are no existing accounts right now right so for example if i go to firebase that we started all right let's go here let's go to users you can see there's no user right now so i'll just add in a user and i'll go cozy cleverprogrammer.com and password will do one two four five six so i'm just like hard coding adding in the user cool all right so now if i sign in it will say that that's correct okay so let's give it a try let's refresh and let's go cozy at clever programmer.com let's hit one two three four five six hit login hey it says firebase login successful look at that you guys already working let's go seven the the password is invalid or the user does not have a password so notice right if i just type in a dummy password that's wrong the user is invalid the password is not there right so that's how i did the alert now i'm going to show you guys something cool you can do with alert so some of these parts again i'm gonna go over them a little bit faster okay and i'll show you that you can actually do this so watch this now watch what happens if i put in the wrong password it goes melode the password is invalid or the user does not have a password what would you like to do next and you should be able to hit sign up and it should take you to the sign up screen right and you should be able to go back as well so a fun little thing that you can actually do or you can just hit ok and it goes away so uh for example how does my alert has this button and this button something cool we figured out so here's how it works alert is a function the first thing it takes in is the actual message right so i'm giving it the actual message here and um the oh sorry so it's a function that's taking in multiple things the first thing is the title so that's the my lord part the second thing is the actual message which is right there okay and then the third thing is the buttons that you're giving it right so for example i'm saying uh give me an okay button right there and style it with the cancel styling so it has a slightly bold okay i can give me the sign up button right there this will have the default styling so i don't need to ask you to do anything and then when you do okay on press all i want you to do is just print out okay and do nothing and then when i hit sign up i want you to navigation.push push me to the home signup screen all right so alert is pretty cool you can do a lot with it okay and we can do friendly error messages like that and if i go one two three four five one two three four five six it's correct and if i hit login i just get firebase login successful okay so our login is absolutely working like we wanted to now we need to add these new users that are signed up to our own database so let's go to our signup form now and we're going to do pretty similar stuff all right inside of our signup form we're going to go const on sign up async email password all right and i want you to do try and then catch any errors and uh for errors i'm just gonna do alert alert and we're gonna go fire here and we're gonna say my load and then we're gonna say here error.message thank you let's go we just got protein shake in the house thank you baby zoom says this is mind blowing i love coding i love programming big shout out to you bro this is awesome content thank you so much i appreciate that oh yeah i haven't ate yet either damn wow my calories cool so we got our try we got our catch inside inside of our try we need to actually do a couple of things we need to say await firebase.auth.create user with email and uh can we import firebase actually or is it not imported so let's import it here let's go import firebase from firebase so basically i'm saying go two folders back import firebase from there boom done firebase dot auth and we'll say create user with email and password and then we pass it email and password and then we will say password okay so firebase user created successfully based on the email and password that was put in on the sign up page and otherwise we just get an error all right very simple and now we just need to go to our handle submit guy right on submit guy right there and change all of this with simply on sign up i want you to do values.email and values.password okay pretty simple sign up yep perfect everything everything else is looking good to me so let's go to our sign up page and let's see if it works so let's let's uh hit sign up and let's go here and i will do causey plus one at cleverprogrammer.com and i'll actually show you the user being added in real time because i think it'll be fun to see that so just take keep looking right over here on the left hand side you'll see quasi plus one being a user gets created so go clever quasi one and then password is going to one two four five six i'll hit sign up oh error of course so let's figure out what the error is hold on the user oh no no no no no i'm wrong i'm wrong it did work this page just doesn't refresh um on the fly so i actually have to hit refresh then it should work there we go i love how firebase is not using their on snapshot listener come on guys use your own stuff so there we go and now kazi plus one at cleverprogrammer.com is showing up i just created this user okay perfect so our sign up guys works how freaking awesome is that or sign up is working or sign out or we have we don't have sign out yet but our sign up and our log in are both working so we can create a user and we can log in with an existing user so that's beautiful james morgan asks what extension to use for those slick autocompletes that you do like with the firebase function just now that is github copilot like the crazy stuff that you guys see autocompleting on my screen that's just ridiculous that's like what the hell it's not because i had already typed in the line of code in this project i had never written that line of code in this project how it's actually being autocompleted is because of github copilot is ridiculous it has access to millions of lines of code millions of coding projects actually and it's pulling the data from there and using that to predict what you're going to be writing next most of times it's very accurate it's it's it's my favorite extension and i highly recommend everybody gets that it's literally the best extension cool so let's now move past this and now we're gonna add the new user to the firestore yeah so yeah we can do that it's very easy all right let's go to firebase now firebase.js that we created and uh we're gonna do cons db is equal to firebase.firestore all right and now instead of doing default exports we're just going to do firebase and like that let's go back to signup form and let's actually go to login screen as well not a login screen i mean login form and since it's a named export you guys have to put in these squigglies like this let's go to sign up and let's also put this in squigglies like this but now what we need is we need access to database okay and here's what we're gonna do whenever a new user signs up here's what i want to have happen so i just created a function it's called get random profile picture and what this function does asynchronous it goes to this api and it just gets a random user okay so let me actually just um let me move this like that all right so now it'll be easy for me to show you guys whenever i want to show you guys something all right so this random user api is basically this so if i hit enter if you go here every time it just gives you a random user so i'll refresh again and watch i got miss darcy corn refresh right i'll zoom in so it's very very easy to see this let's refresh so every time i'll get a different user when i refresh this right that's the point of random user i'm using random user to get people's uh to get people's um to just get a random profile photo for everybody that signs up that's it okay it's just a little hack for getting random photos for everybody signs up get the data as a response and as a json response and then uh just get the large picture okay cool and then on sign up here's what we're gonna do we're gonna do this is going to be const auth user it's going to be await blah blah blah all right and now i'm going to use this user okay so let's go here and i'm going to say db.collection users dot add owner uid is going to be auth user.user.uid okay you got username is going to be whatever the username um username david this doesn't look right we don't have access to username here so this should actually not just be username oh no no we're passing in the username from okay okay got it got it got it got it got it got it got it so basically on this sub uh here guys we need to actually do email password and values.username like this like that okay and then this function should take in a username as well and now that username is being passed in uh email is gonna be authuser.user.email and then profile picture we're just gonna say await get random profile picture there we go so what this is going to do is when the user signs up it will add them to our own collection so not just this right here but in our own firebase database it's going to create a collection called users going to add them in there okay so for example now if we go and sign up watch what happens so i'll sign up as um quasi plus two and let's go clever quasi 2 here and i'll hit sign up and it just worked and let's go here it didn't add it to the database interesting oh i did it did i just have to refresh it um so i have a user's collection inside of it i have a user and that user has the following email owner id profile picture and password so if i look at the profile picture now it's this right here so i'm apparently her so this is this this instagram should be called catfish instagram all right that's what this instagram should be called catfishing instagram clone all right so now new user is being created new user when they get created as assigned something random automatically very nice uh arthur says would love to try copilot but i'm way too accommodated with sublime and there's no support for it bro i'm sorry but you're gonna have to just give up on sublime like sublime is it's it's nothing compared to where vs code is at you can have everything that some lime has but way better so i would i would recommend to try to move try making the move penelope says wow now that's really awesome dope all right let's keep rocking and rolling you guys we're making really really good progress let's keep going okay now let's add in firebase auth and navigation so what this means is uh here's what it means we wanna be able to this one is gonna be a really cool one okay and what we want to do is we want to wrap the entire app in navigation okay and i'll show you how we do that so let's go to navigation because right now right i can go as the user i can go anywhere so like watch this i'm currently not logged in but i can if i just change the route here to like home screen or something i'll be allowed to go there if i refresh so currently the app is not protected so we basically need to do something like almost imagine if i could do this like if user is logged in then they have access to so if the user is logged in right then they have access to home screen and new post screen okay and then what i want to do is if user is not logged in damn they should have access to what screens guys clearly cannot have access to any of these right so then they in that case user is not logged in they should have actually access to these bottom login and sign up screen all right so these two are the login logged in screens and then these two are the logged out screens or the signed out screens so let's build two separate stacks that resemble that so this is a signed in stack and now we're gonna do con we're gonna do uh export const signed out stack okay we're still gonna need to do this navigation and stuff like that but here's the difference okay so signed out stock by default we'll have you on the login screen and it also won't have access to home screen and login screen so if you're logged out you literally will have a stack that doesn't even have access to those screens so this is a very safe way of doing it okay and from the signed in stack we're going to remove the login screen all right dope so we got two different stacks now signed in stack signed out stack signed in has two screens and signed out has two screens here okay i'm gonna remove this export default line here and we're just gonna do export consigned and stack okay now we're gonna create a new file it'll be called auth navigation.js all right and uh this is what's gonna happen in here so oh sorry let's capitalize the auth so let's rename it and let's capitalize the a here and uh let's right click here rename symbol and let's go auth navigation okay and we're gonna do const current let's actually start it off like this okay so i'm gonna do return and it's gonna return the following so watch how i'm gonna do this is gonna be really nice so we're gonna basically say if current user is basically logged in then i want you to give me the signed in stack otherwise give me the signed signed out stack let's import so i imported signed in stack and signed out stack okay let's go to um app.js and what we want to do within app.js is we want to basically say auth navigation and that's all we need okay so now auth navigation is our main thing which is going to dynamically determine which stack you see now in here we want to do a few things so we're going to go we want to use a use effect hook all right and inside of this use effect hook basically what i'm going to say is i'm going to say firebase.auth that on auth state changed user is user okay and now we're gonna create so now here's a cool thing so you guys might have seen where you guys do like const unsubscribe equals and then you have to do like return unsubscribe um i'll show you guys a cool hack so all you have to do is just return this so you can also just do this um but what also you could do is you could just remove the squiggly and you should be good now because it's an implicit return here okay um it shouldn't be use gesture handler it should be user handler and we're going to make this function so right in here we're going to say const current user set current user use state is null all right and then we're going to create a user handler and what this is going to do is when you give it a user it's going to check if that user exists and if it does it's going to just set that user otherwise going to set the user to null and um that's essentially it all right so now this will wrap your entire app up so on austin changed is a listener which will never stop listening we're listening at the global level where the entire app is so for example it's kind of like what we're doing is um here's our app app and then our firebase listener is like right here sandwiching that app okay so that's our firebase listener and it's always listening at the global level and if it sees so let me make another visual right there so basically this is the signed out stack and the other one is let's just call it the app stack or the signed in stack so this will handle it so if you're logged in it'll send you here if you're logged out it will send you here yes says thank you for so many hacks i'm noting everything from the start you got it cool all right here we go so everything is gucci or not stay changed i'll pass in the user it'll send it to the user handler the user handler just does if the user exists it sets it otherwise it doesn't so um this should be good now guys honestly the entire app is wrapped up inside of it so like let's refresh and let's see what happens a current user is giving a problem why is that uh okay i have weird imports happening so so i do use state doesn't know this current user is still um okay that's not true it should be able to find current user that's weird why can't define current user current user is right there huh fresh i'm just gonna shut off the app and start it again like i would get if the error said something else but like it's saying can't find variable the variable is right there okay that's a better error so it's saying that auth navigation lowercase does not exist so we're going to make this a capital auth navigation let's refresh now uh can't find variable use effect better error much better error because we're not importing it effect can't find firebase another good error so let's go import firebase from firebase okay now it's freaking out about yeah yeah yeah it's a named export now so i have to do it like this there we go so it's detecting that i'm logged in you guys and it's serving me the signed in stack that's what it's doing this is exactly what we want now we want to add the ability to sign out so we can actually see this in action so i'm going to go to header dot js uh and inside of header we're going to import firebase we're going to do firebase from firebase uh this header is this guy right here guys and i'm just trying to make that uh instagram button become a log out button so we're gonna create a function that that i'm just gonna put right here at the top here and we're just gonna say const handle sign out um and we're gonna say firebase dot dot sign out dot then and yeah i mean we could also do um a weight and try catch this so you could do it like async if we want to be consistent with everything that we were doing so we could wrap this in a try catch try catch there we go there we go so we got handle sign out try this uh and if it works then we'll just go console.log signed out successfully all right seems pretty straightforward right otherwise show the error that happened and now this handle sign out we just want to give it right here so we're going to say on press we can just say handle sign out cool and now let's refresh and um i'll click instagram logo and it should sign me out there we go guys it just signed us out hey nice so we got sign in and sign out functionality uh working completely normally there we go so we just signed in so there you go guys our login and user authentication is getting pretty on freaking point all right that's exactly what we wanted now another thing that we want to do guys is we want to make some firebase rules and basically with these firebase rules we're going to do is this so let's go here let's go to rules and here's what we want to do okay so i'll paste these rules right here i don't want to go too much into the rules but all that's happening is this i'm creating a function which is called uh a user is authenticated and it just returns uh this so if the user is authenticated it it just checks that the user is authenticated if they are not it will return false if the user is authenticated it will return true so think about it like it's just a true or false all right uh and there's a playground here too which is pretty cool so like if i go playground you'll be able to like get specific resources right so for example i can go get me all the users document and i hit run and it tells me like why it didn't work it says um because i'm not authenticated so it did not work see authentication is false but if i go here and i click authenticate hid and instead of a google we do password and i hit run now but look at that it actually says that i'm actually authenticated so this is looking through the user's collection inside of your database that's exactly what you want then later you want to be able to also test posts like this too all right so these rules work and now because they work i'm going to publish them beautiful i just read your message david so that was just a little bit behind the scenes of how some extra firebase rules and ninja skills that you guys um can acquire okay now we need to be reading these posts from the home screen so let's go to the home screen and let's let's let's read these posts now and we're going to read these posts kind of right at the top here and i'm just going to wrap in the use effect hook and i will simply say this okay and we're gonna do db.collection group hosts dot on snapshot there okay and uh only run as soon as the thing starts and then that's it don't run any more times okay so this collection group thing uh let's import use effect by the way okay and we also need access to db so let's go import db from firebase okay now you might be wondering what is this collection group thing so here's what i want you guys to understand okay uh boris lazarevsky says great and amazing work hats off thank you so much i really appreciate it it means a lot seriously thank you james short says amazing clone to watch thank you guys these comments are so freaking helpful it just keeps you going right because we're already going for what four almost five hours now and we're still going strong and it's this energy that keeps us up so thank you guys now collection group what's actually happening here with this collection stuff is i'll show you so post is not going to be a thing on its own post is going to be a sub collection of users because remember only users can have posts not the other way around so um what we're going to have is going to look like this like that all right so one specific user like causeyplus2a cleverprogrammer.com is one specific user that is going to have a collection of posts that he is the owner of all right and then these posts are going to have things like you know caption and uh hello uh crushing the build let's go there we go okay and i'll hit add uh they'll have other things like i mean actually let's just look at the data structure that we have for our fake post database that we made earlier so let's go to data let's go to posts and it's gonna have image url a user right it's gonna have uh image url as well so that'll look like this image url that'll look like this okay it'll have a user right and who's the user it'll have like the email of the user for example so there's a bunch of stuff that's going to be in there and i'll show you guys how we're going to be doing this but overall the data structure is users it has subcollection of posts and what if you have multiple users right so for example let's say i have another user here whose email is causi clever programmer.com right and that user is going to have his own posts so how do we show all of the posts within every sub collection okay and david you should actually make this a clip as well how to uh show sub collection you know and so it's like how do i loop through and get every single post well instead of doing it like i'm going to go inside of this and i'm going to go inside of this and i'm going to go inside of post you don't do it like that you just do a collection group and firebase itself knows how to go inside of each single user and get all of their posts and then give it to you so the hack that we're gonna do is collection group that's the freaking nice thing okay that's how we do it cool there we go so dog collection dog groups um and then just read me the data and show it out loud and guys take a look at this i'm already getting all the posts like literally we just made this post and i'm already getting it right crushing the bill let's go if i update this right now it'll update too so for example we'll make post collection for this user as well we'll do posts right and we will say caption is post 2 from different user an image url is i don't know whatever this so now the second user has posts as well and now let's see if they're being read look at that posts from uh post 2 from different user look right crushing the bill let's go so that's very very nice right it's already working okay great it seems like we're already able to read the data it's very very good now let's go back to the sign up and i just want to change something with the sign up so here instead of dot add what i actually want to do is i'm going to do dot set and i'm going to do doc okay and for doc i'm going to give it auth user.user.email so all that means is instead of these users having these random ids their uh their or document ids their document id is going to be their email because i'm assuming everybody can only have one email right that's safe to assume cool so this will this is when you want to yourself generate a document id and this will make things easier for us later on we'll just be able to say get me the user with this email and they'll know who we're talking about initial values here we go on submit all right that's all good it's all good right there okay that should be good so like let's just test it and let's uh yo fidel sahir says i just joined now this is awesome let's go yo welcome welcome welcome glad to have you here let's sign out let's create a new user and we'll go cozy plus two at clever or actually let's go plus three we'll go clever quasi three and password one two five six i'll sign up all right and notice that we just got a new user with the doc id that we gave it okay other than that nothing changed so that whenever you want to assign your own doc ids just use doc and then dot set it's really nice all right now we're going to be able to add new posts to the user this is where like the back end stuff is going to become heavy i'm going to try to go through it a little bit fast uh and i hope that you guys will be able to keep up with me okay or i'll i mean uh you guys will i believe in you guys let's go to formic post uploader so now we want to be able to actually upload the post that we made let's go use effect and we're also going to need to import database here and firebase from firebase yeah and now we want to be able to do the following okay so we're going to set the we're going to have a current logged in user and we're going to set the current logged in user and i'm gonna get the username in just a second okay i'll show you how i'm gonna do that so we're gonna do uh const uh get user name whoa um all right so let's do it like this going full on nas mode right now const user [Laughter] we already have the db so i don't need to get the db const unsubscribe unsubscribe db.collection this does not look right to me db.dock this is a bad way of doing it david we should do it like is there a db.doc whatever that's fine so this is a hideous way of doing it guys don't do it like this just get the specific document you're looking for um but basically this is what i'm talking about david i'll show you the code in slack so take a look at this right so this is like really stupid code because you should just be able to give like the specific doc id and get your specific user see if you can convert it into that and send it over because it'll be much nicer for everybody to view that than what i'm about the the gibberish that i'm about to show everybody it's not that i mean this is this is a way uh no david i i just mean like look i'm getting one user here and i'm getting just that user's username um okay that's fine that's fine that's okay david i'll figure it out where's david david is on uh sitting on skype with me he's just not like right there so like i can show you guys david here's david look say hi david there we go all right we're going to send him back to where he came from what's up boy he just said what's up we're going to send him back to his hungarian cave where owner id is equal to user.uid okay this is i'm so sorry guys this is terrible it's such a complicated way of getting your username there's much better way of doing this i hope david figures it out for us but seems like he's lost right now uh on snapshot snapshot oh my god this is it's like overkill but it's okay that's what works your challenge will be to figure out how to make it less uh clunky all right like that uh where am i closing what's happening here there we go it's like complaining okay set current logged in user to user name is going to be doc.data.username and then profile picture dog.data.profile picture people are laughing well david is in the back end david yeah david is in the back end that's right david is the back end all right this should get us the username and then at the end of all of this guys we're just going to return unsubscribe all right there we go okay we'll do a use effect hook okay that'll get the username this is just like to get the username of the person who's logged in right now all right and now upload post to firebase right so this is now gonna be the interesting part and uh here's what we're gonna do for this we're just gonna say uh unsubscribe subscribe okay db.collection and we're gonna say get me users and then we're gonna go get the dock firebase dot auth dot current user dot email beautiful dot collection posts and then we're gonna add the new post okay so here we're gonna go dot add and then we're gonna give it the post object it's gonna be a bunch of things i'll just write it over here so you guys can see it but here's what we're doing to add the post get the current user this will get the current user okay get the collections of that user they get the posts of that user so for example this will get quasi okay for example users give it the email this will get me quasi and all the document inside here okay and then when we do dot collection posts is going to get us the children the posts that cause he has if i go here this collection right there okay and then we're going to add the post and here's what the post is going to take the post is going to take an image it's going to take in the current logged in user's username is going to take in the profile picture of the current login user style profile picture it's going to take in the id of who the owner of this post is yes caption created at and it's gonna put a timestamp for when it was created and since it's a brand new post it's obviously going to have zero likes okay and the data structure that we're choosing to use that's going to be the interesting thing so likes by users will store every user's unique email and then to get how many likes we have we just count the length of that array and we're good all right that's how we're going to do it and after all of this is done we want to chain it with once this is successfully done i want you to just go back so basically go back to the home screen okay now we are going to need access to navigation i believe but formic post uploader already has access to it so that's good okay cool so we're getting the username we're adding the post to the database to the database and now let's go here we're going to remove all of this and we're just going to say upload post to firebase just like this and we're going to give it values image url and values now caption those are the two things and upload knows what to do with it and uh then simply we're gonna return unsubscribe okay who said just breathe just breathe who's there actually thank you that's a good reminder quasi gaming yes please stop spamming or you will be spammed from this account all right so this looks good to me honestly uh if this looks good to you guys then we should be good to go so let's try adding a post and let's see if it actually adds it so i'm gonna hit this plus sign i don't even know who i'm logged in as yet and we will go whoopsie daisy you are a little crazy and we will give it a jpeg and i will hit share and did it work i don't know yet guys let's go to our database just look for whoopsy daisy i'm a little crazy nope konzi plus three posts this whoopsie daisy you're a little crazy yo let's go create it at so we got the timestamp for exactly when it was created it has no comments right now here's the image url likes likes by users yo let's go that was sick you guys that was sick you did it you're brilliant i believe in you you can do anything you put your mind to all right let's keep on going hey um somebody said have some coffee i haven't had coffee in actually over a hundred days almost 100 days at this point i am um i'm going sober from coffee for a little bit and just seeing what it does and so far i'm liking it so i'm gonna keep it that way all right now uh we're adding the stuff to the database now but what we a little what we do need to do is read this info from the database you guys so let's go ahead and do that now let's pull the posts from the database all right so we're gonna uh import use state here on the home screen state okay and uh here's what we're gonna do you guys what is it complaining about can't find variable use effect ah there we go hydrate what is happening you guys am i thirsty am i tired people are telling me i need to drink coffee i need to drink water like is there something wrong with my voice is there something wrong with my face i mean i'll hydrate thank you jesus all right i will drink i'm sorry so here's what we want to do look at how easy easy this transition is going to be you guys this pose is already an array of objects which looks exactly like our firebase structure once we replace this variable post here with our firebase posts everything will work like freaking magic that's gonna be very very nice you guys it's gonna be very nice so let's go ahead and uh work on that okay we're gonna do const posts set posts i'm gonna go use state and it's gonna be an empty array because in the start i want you to start off with an empty array okay and now instead of console logging this bad boy right here instead guys here's what we're gonna do we're gonna go set post done that's it that's freaking it and the last bit change this post from capital post to tiny post just like that and we should have everything uh breaking so that's great you guys undefined is not an object so let's go to where we did this let's go to posts not posts my bad let's go to post.js let's go to line what is it saying 121 let's go to line 121 and i'm just going to hit a question mark right there and let's put a question mark right there i mean if i don't have posts it shouldn't even like go any deeper to be honest hold on post our comments is not what okay how about this i'm going to remove this set post from here and let's just see what happens what happens if i give you an empty array if i give you an empty array it seems like my code works fine undefined is not an object evaluating posts dot likes dot to local okay now we're getting a different type of error pause the comments that map i'm just gonna start putting in question marks everywhere and uh hopefully something should fix it and david maybe i could use your help here just to just like a little uh bug that i don't think is like that important to solve uh likes okay i have oh because some of the okay okay got it got it because some posts i have don't have likes in there so let's go ahead and delete uh the other posts guys let's delete all the other posts because they're gonna cause an error so we're just gonna delete posts let's go to our other user as well and just like delete posts that's what's causing the error no duh because it doesn't even have comments right here that's why we're getting errors so you're gonna no no don't delete collections we're just delete this delete um hope i'm deleting the right thing yeah there we go there we go okay let's remove these question marks we don't need a billion question marks that's kind of annoying looks ugly there we go is this really that annoying for you guys the font style i mean i guess if you guys don't like the italics let me know in the comments um i'll just keep going alright so there we go guys now our post is showing up i have a picture of a random user assigned to me when i was created so you can see that photos right there um and yeah this looks good i am able to now make posts as well um other things guys i didn't i did not explain that i probably should have explained a little bit better is if i go into rules just just know that these rules basically say the following if i'm trying to write to the user's collection i must be authenticated and logged in if i'm not authenticated or logged in i should not be able to read or write to the user's collection this rule over here says to the sub collection posts i should not be able to read or write unless i am authenticated all right so even if somehow you got to be able to make a post you cannot make it if you're not logged in all right this is just like extra layers of security yeah i like the style guys i'm not gonna change it i actually enjoy coding in this it's fun for me uh q a will be at the end so i got you with that don't worry all right so now my posts are showing up david if you want to make some posts um that would be cool from firebase you can make them or you can make a new user and make po wait do you have access to my stuff oh i'll have to tunnel no i don't have to tunnel it you can see it right you're already here so you can make them from firebase or from here whatever you want make them from here because then you'll have actual user so up to you hey what are you doing breaking my code read and write access uh you don't need don't know forget about forget about firebase david just make posts from here oh but you won't be able to see anything never mind it's all good we're fine we're fine all right let's go to formic post uploader you guys and one thing we do want to change which can be which we can cause bugs later let's go to formic post uploader and for user here we're going to say user name instead of user all right just to be consistent with how we had everything um is that actually necessary i'm sorry actually i don't think it's necessary right now so i'm not going to tell you guys to do that because it might throw you off later okay so just um just leave it as user because you're gonna have to change it in multiple other places and i think for now we're fine so now let's go to our stories component guys we're almost coming to the end right like look at how much functionality we've already added into this like it's crazy we can log in we can log out we have a home screen we can create a new post at the bottom tabs working i mean this is a huge application right now let's just fix this bug in uh stories so instead of slice of 10 let's give a style what what what is this bug i'm talking about like look at the difference between chickasha and nasdamanski they have a big gap whereas me and my brother's post have like a small gap so i'm just gonna give it a six here and then margin left we're going to increase it to like 18. there we go so now that looks more like regular stories so that should fix the air beautiful all right guys now what we want to be able to do is we want to be able to like and unlike posts um and then after that i'll open up this app to you guys so you guys can use it it's usually a terrible idea but hopefully you guys will be nice david i got an idea maybe from firebase if you see any posts that are not right you can just delete them or just ban those users all right cool so here we go guys let's go to formic post uploader again and one thing i want to do here is let's give the post an email so we're going to say owner email i'm going to say firebase.auth.currentuser.email like this put a comma right there and we don't need this likes anymore because likes will be coming straight from likes by users who liked it for example uh penelope says have to love and leave you all power goes on 15 minutes can't wait to try this one so cool to see a super pro get excited about the little wins also hey thank you penelope i appreciate it and uh if you can stay for the demo that'll be awesome i'd love to have you so here it says good job man you're king thank you brother appreciate it uh why didn't i use postgres sql because i don't want to mess around with networking and sockets and spend hours writing a database and i i want to have like stuff in real time with postgres you won't have real time okay so now we want to give users the ability to like and unlike posts um man that's gonna be a massive one actually all right let's go to oh is the likes okay let's go to post and uh right inside of posts um where we have likes okay so inside of likes instead of post.likes what we're gonna say is post.likes by users likes by users dot length and put that length into locale string and turn that into likes okay so here's what that means you guys currently see that this has zero likes right now right now watch what happens i'm gonna go here and i'm gonna go inside of the post and that post now i'm going to give it a field and we're going to just say quasi clever programmer like that and let's uh also add another one and this time let's make this so now let's say this post is liked by david and qazi let's go back and you'll see that that post now has two likes it's being pulled from the database okay now let's go to post footer post footer component right here full opacity on press okay so post footer is going to take in a handle like function take in post as well uh where is this getting post information right now post footer interesting so let's give it those things from the top here suppose footer let's give it post equals post and then we're going to give it handle like will be handle like now it's gonna break because it doesn't know what handle like is so right underneath posts we're gonna create a function called const handle like they'll know how to handle a like and this is how it'll work so it will get the current like status and here's we're gonna do okay so basically what does not means here why we're putting that knot is basically like every time you click it it will alternate the status okay so that's why you're saying it's not what it currently is so if it's true and you click it on the handle like it'll turn it to true if it's or sorry if it's true already if it's filled up already and you click it it will turn it to false if it's false and you click it it'll turn it to true okay so it's basically saying like look for this post likes by users and see if the current user's email is in there and then just if it is then make it false if it isn't then make it true so nice little hack there and then we're gonna do db collection users dot doc post dot owner email we're gonna do dot collection posts and then we're going to do doc get the post id we'll do update we'll update that existing post and we're gonna say likes we're gonna update the specific field which is called likes by users and we're gonna get we're gonna say if the current like status is true then add it to the database and we're basically going to say firebase.firestore fieldvalue dot array union and what this is allowing us to do is it's to write this to the database and we're just going to pass in the user's email currentuser.email all right so do that otherwise what we want you to do is wow wow copilot is so sick so here's what we're saying the likes by users field if i just liked it and the current like status is that i hearted it then add it to the database that's all add it to that specific array okay so this array added to this array it's basically equivalent to dot push this firestart.fieldvalue.arrayunion is like equivalent.push all right and add the user's email otherwise remove the user's email from the array cool so now we have made this let's get access to our databases now and firebase import we're going to say firebase comma db from firebase like this we do need access to use state and use effect okay so handle like is looking good to me um and then all we want to do is if it works then we want to say dot then we would just want to add like a dot then statement here and so what that will basically look like is the following it'll just be this okay so if it works then say document successfully updated otherwise say error updating document and show me the error okay a post footer i'm going to pass it in my post and handle like and then inside of my post footer we're now going to do a bunch of stuff so right underneath this left container this zero right here this is the heart icon and we want to do stuff with this heart icon so to make it a lot simpler actually what i'm just going to do is i'm just going to replace it with an image i'm going to say image style and i'm going to say styles.footer icon and i'm just going to say source is going to be uri and then we can just go icons of zero dot image url uh sorry my bad post footer icons cool so right now we didn't really change anything but all i did is i made it a um uh image okay and i'll show you why i made it an image so i can like do more stuff to this so i'm gonna wrap it in a touchable opacity let's wrap this in a touchable opacity there's like a war going on about the fonts i love it thank you penelope for the defense i appreciate it all right so touchable opacity we're basically going to say on press call my hand the like function and hand the like and give it the post okay and then my handle like function will know what to do with it so let's click this button and let's watch what happens i'm getting uh error evaluating firebase let's refresh so the error is probably coming from handle like ah because i think in my head because i don't have a owner email i believe so we're going to give this post an owner email so let's go owner email quasi plus three there we go so now let's hit the hard button okay it's still giving an error so let's see what the error is firebase off the current ah misspelled current there we go no document to update ah i need to get the post so let's do this let's go to home screen and uh here's what we're gonna do i figured it out first of all we need to order these by the most recent post because right now it's not ordered by the most recent posts okay so we're gonna do dot order by and we're gonna do created at descending dot on snapshot set post and then there's this other hack that we're gonna do so for doc what we're gonna do is we're gonna say the following return so first of all it's an implicit return this is important okay this is a very common place where people get tripped up but what i'm returning is an object all right and uh this object will basically be for id give me doc dot data uh sorry for id give me doc dot id and then just destructure the data there we go so now what i'm doing is for each of the posts i'm getting their id that's the most important part so for each post uh get its id support this is essentially like post.id okay um i can even make it simpler by just changing this here with post.id and then like post.data all right um and now we're passing that down through set posts and posts right here now we have access to that id so now when we go inside of post we have access to the post id and we won't have like that weird error happening that we were having what's the error happening now so the query requires a collection group you guys can see so here's a cool little thing i'll show you guys whenever that happens because what i'm doing is i'm the problem we're having is it's saying hey it's a collection group and you're trying to do order by hey buddy you're trying to do too many things you need to create an index for it so let's so look at this just command click it and firebase is so smart it already knows what you needed to create so this is what it's saying add an exemption post created ad collection group descending just hit save now for whatever reason this takes a really long time to work so what i'm going to do temporarily is i'm just going to remove this order by for now then we'll bring that back in so david if i forget just remind me i will hit a hard sign and look at that you guys the like just went up from two to three look at that two to three and if i go to the database likes by users right so watch this if i bring this uh here watch what happens when i click the heart it at it takes it out to the database click the heart again adds to the database so it's completely working you guys but now all we need to do is just make the heart turn red when it's clicked or when it's not clicked alright so let's just make the heart turn red now welcome welcome everybody who's here all right let's just take a look if my so this see guys it's still loading like this takes minutes it takes like five minutes or something it's crazy i don't know why it's that slow it's so weird now we just need to do the ui part and the ui part is pretty simple okay so let's go back to post and let's just make sure that the heart shows red and so all we need to update there is the image source okay so let's go get the the zeroth image post footer icon zero which is the heart icon right and all we need to do here is basically add a conditional and we need to say hey if post dot likes by users dot includes includes firebase dot auth dot current user dot email uh if this is the case then what i want you to do is give me icons or sorry post footer icons of zero dot dot liked image url otherwise just give me the regular image url like that okay so basically if i've already liked it give me the like damage otherwise give me the nonliked image and let's give it a try now hey look at that the red every time i heart it it up you guys so that is absolutely brilliant we are doing a great job here um and that's it you guys that is it we are done with the firebase build so i hope that you enjoyed or the react native clone instagram clone with react native we're pretty much freaking done you guys now all we want to do is we just want to open it up to you and hopefully you guys get to jump in and uh enjoy this with us okay tons of functionality that we added and let's take a look we want you guys to be able to use this okay just make sure that you guys you guys can add in your jpeg images and things like that you can log in and log out create a user account so i'll see hopefully if we can get this to work so here are the rules if you want to add a post you go here to the image right click and paste whatever url you have or just type in a url you will have to type in a full url or right click and paste all right like this that's how it gets the image uh and then you have to hit share okay that's how that works uh and guys if you're allowed on here just please be uh you know this this video we want it to be kid friendly so anybody can watch it so please just be appropriate don't write anything inappropriate um remember we have access to your email address and all of that so just you know there's there's no reason to do anything weird and i'm gonna open up the demo to you guys and uh crazy all the disclaimers but uh all right all good here we go let's test it out now watch it break live all right guys so i'm just creating a tunnel tunnel looks to be ready so hopefully it doesn't break but you guys should be able to scan that at the bottom all right you guys should be able to scan that code uh make sure you have expo go installed by the way because if you don't have expo go installed you won't be able to use it and just pull out your phone aim it at the code and click it and it should log you in or it should bring you to the sign up page hopefully so brings me to the sign up page go to the sign up page and make an account so here's what we're going to do i'm going to leave this here so you guys can keep scanning if you want to just leave this here and then we're gonna go right here and i'll bring this so we can all see the database stuff too so we just got a new user nazari at 91995 gmail.com nazari just came in he was assigned a id nazari soon will have a post show up in here hey we just got jonathan in the house let's go nice enjoy this you guys if you're watching this recorded you won't be able to do this i'm sorry this is only for live um because other because i have created a tunnel which is like temporary so like you guys can like this post as well so like once you guys all log in and you start liking this post so i can see jonathan just logged in um i can see a bunch of people just logging in right now uh but another person john logged in we have another person beautiful look at that a.d arista just joined look at that nice guys you are the best thank you i appreciate your love switch to mobile beautiful uh adi arisa just said lol i'll like your post here we go let's like your post boom done hey my post has six likes let's go hey is my index thing up yet it is it is it is it is it is so let me see if i can actually just do that on the fly uh guys some everything is gonna break because i'm gonna change the code on the fly so let's see if it breaks oh oh i'm sorry give me one second all posts should now be ordered by the most recent okay there we go hey here we go hey this is so cool i'm seeing all of you guys log in you guys are liking the post if you log out it'll still remember if you like the post or not i just like their post by the way clever 2020 nice we're getting a bunch of people coming in welcome welcome everybody this is the best app sean mukha says thank you look five likes nice somebody has five likes let's see who ends up with the most likes penelope says this is insane thank you penelope much appreciated yo yo's nice yoyos just commented and look at that guys yoyos has a face right the random photo that's there so everybody should have a random face this is so cool got all these users coming in nice uh remember to make a post just hit that plus sign type in your put in your url write a caption and boom you're good mohammed says no the app is the best you are the best thank you ahmed much appreciated brother much appreciated hardit says nice yes let's go there we go jonathan beautiful the seam got your username right there we have more people coming in alien decali wow you're still here qazi you are the best with the best app thank you appreciate it much love guys if you're enjoying this you think this is freaking cool uh go ahead smash that like button all right break that thing break that freaking like button i'm just gonna hit refresh again oh let's go now i just posted a photo nice who saw that let's like everybody let's blow up nazi's photo let's like that thing he goes you killed it bro thank you yo that is so cool hey let's go test here we go let's blow up everybody arthur says nice job thank you yes yes yes yes just look at how much we got accomplished you guys this is wild this is crazy you can log in log out user authentication this page right here all the bottom tabs are looking good yubani says this is sick let's go yobani nice photo yo bonnie hey wow man this is exciting you guys are blowing this app up this app is like famous thanks to you guys yo we blew up naz's post so nine likes my post is at 12 likes let's go the first one the catfish one hey somebody just posted an office photo what's up ellie and mccauley ellen mccauley says bad code nice wow it's super dynamic ball and hard this is the end grok tunnel yes yes yes yes yes yes full stack react native in one live yes let's go mantham just gave a donation thank you so much madam says thumbs up thank you matam much love much appreciated thank you thank you thank you alien is like yo fire hey let's go guys dedication pays off wow thank you guys thank you thank you thank you thank you tell your friends about it uh tell people you enjoyed it you know get us more watch time play this video while you're sleeping it'll really help the youtube algorithm this youtube algorithm is screwing us over a little bit so smash that like button subscribe get this video out to as many people as possible let's crush it okay and again guys if you want to get the best javascript course on the planet and have an amazing community behind you you come on you gotta check out pwj it's the best course hands down all these skills you were seeing me fly through here they're broken down in so much detail you guys can go in here and sign up alright this course is absolutely amazing you have a community we teach you how to actually make money with javascript you have incredible training the best community live coaching calls right you build amazing projects you'll learn node react mongodb express redux and then you got the best instructors in the game right and then we just have amazing results people went through the course landed a sixfigure job uh people another person jen here landed a ninety six thousand dollar job somebody landed a hundred to ten thousand dollar contract and the list just goes on so if you guys are interested go ahead and sign up for profit with javascript it is absolutely incredible all right good job bro i just loved it all the best bro thank you thank you so much much love you guys seriously so at this point i hope you guys enjoyed it uh the link is in the description below if you want to get our free training that shows you how to become a developer in 90 days if you guys want to join the challenge this challenge here specifically make sure you join it okay just go to cleverprogrammer.com instagram and we're giving away 1 000 to the people that win this challenge okay so what does this challenge mean essentially you're gonna take what i've built here and then you're gonna add your own custom twists and things on top of it all right that's what this challenge includes so if you go ahead and do that and you're the person who modifies and customizes this instagram clone the best maybe you add in a light theme maybe you add in like i don't know stripe functionality or maybe you add in reels right if you add in reels if you add in a explore page a profile page if you win you're gonna get a bunch of money first place gets six hundred dollars second place gets three hundred dollars and third place gets one hundred dollars so join it it's completely free to join just go to this link here cleverprogrammer.com instagram put in your name and email and you'll be good to go yes ball and hard the pwg course is for beginners so even if you're a complete beginner you will be good to go and with that said guys i have nothing else to say but you so you