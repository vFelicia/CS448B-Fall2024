Bill Gates Mark Zuckerberg ron jeremy what do they all have in common a huge ebook just kidding two out of three of them are ultra highperforming developers according to the power law 3 which states that certain actions produce exponentially more results than others even the former chief technology officer Nathan Myhrvold said the top software developers are more productive than average software developers not by a factor of 10x or a hundred X or even a thousand X but by 10,000 X average developers fight for scraps at the bottom compete for the lowest paying jobs and are afraid of being fired at a moment's notice now on the other hand with ultra high performing developers they command respect they leave a legacy and they actually go on to change the world so what's the difference between an ultra highperforming developer versus an average developer alright so how can you avoid being an average developer and actually become an ultra highperforming developer in three easy steps step number one smash that like button to actually help us beat that YouTube algorithm step number two I'm sorry the last step was not true and step number three there are no easy steps in all seriousness we need to go deep to uncover the actual truth on how you can actually become a ultra highperforming developer and think like a billionaire developer and we're gonna actually cover that in this video so let's go so a lot of this video is actually inspired by Cal Newports book deep work I highly recommend that you actually go and read that book and in that book he says there are two things that make somebody who's successful successful and number one they're extremely good at what they do and number two they produce at a very high level so I'm gonna be uncovering a lot of that in this video and we're gonna be deep diving so if you have pen paper like make sure you take notes because there's gonna be a lot of value that I'm gonna drop in this like there are a lot of developers out there right and what's the difference if you actually dissected it right and you look at majority of the developers that are making 30 40 50 thousand dollars a year and they're not so good at what they do and they're just kind of mediocre what is the difference between them and then the difference between the developers who are making over a hundred thousand dollars a year or if you take it to a step above the billionaire developers that are running these big SAS companies and this started these software's as a service agencies or software as a service companies and are just massive right what is going on there what are the differences I'll give you an example of somebody so this person is not really a developer but kind of a developer data analyst his name is nate silver he is the poster child of statisticians so he's essentially think of him like the modernday Sherlock Holmes and he makes predictions on you know who's gonna win the election or who's gonna win this baseball tournament or how somebody gonna perform based on given their historical data how does that map to the future reality and he actually uses the skill of being a statistician like the technical skills to produce then in real life so one if we break down why Nate's alors so popular has a personal brand as extremely successful probably makes over millions of dollars a year because one he's damn good at what he does he's extremely good and number two if you look deep Nate Silver produces at a massively high level so how does that translate into being a developer one you have to put an extreme amounts of hours and time to actually get good and then when you're good it doesn't matter if there's a quarantine outside or the whole world is falling apart when you're good you're in the job market when you're good you thrive when you're not good you're worried about survival and that's why majority of the people and maybe even you are actually struggling because you're probably just not good alright and when you have to think about are you good you probably not and it requires you to put in massive amounts of times to get really good alright so one become an extremely good developer by putting in you know 40 50 60 hours a week step number two how you get really those amazing results is be like nate silver and produce so what does production look like for a developer it means you're making a lot of get commits on a daily basis you're pushing out code onto github you are producing when somebody looks at your github map and they're look at your recent activity they should keep seeing these like green dots everywhere to know that you're active okay and pushing out code on a daily basis and having that level of production is what will make the difference because there are tons of developers that are actually creating stuff but it only just sits on their computer it just solves this little coding challenge but are you actually making projects or apps or things that you're constantly producing and if you increase your level of production you will become a highly sought after developer and you can use that to leverage it into a personal brand or you could use that to get a high paying job because you're producing so much and people can see that and as we start to head towards 2030 where every a lot of things are gonna be automated but by robots and we're gonna have AI be such a fundamental part of the world a lot of things are gonna turn into AI and as we went from like the farming and agriculture age and as we were transitioning look at the fact that the need for the knowledgebased workers is so high and skyrocketing and that's what Cal U port in the book deeper hits home which is there is a massive need for knowledgebased workers that knowledgebase works is not very tangible they're not a factory producing stuff a lot of it is thought and deep thought so how you actually tap into that deep thought I want to dive a little bit more into as well in this video and what you want to do to be able to have that is make sure on a daily basis you have certain hour blocks like three to five or six hours of undisturbed time time blocks where you can actually focus on just coding where you can just focus on developing something or work on a project or following a tutorial that is where you will become extremely good and that is what will make you that knowledgebased worker that a lot of people in today's age are actually looking for that's what makes you invaluable that means you are spending an extreme amount of time learning and then applying that learning and building things using that if you can get that skill down of learning and applying and making applications or doing something with your code you're gonna have a big step up on most of the developers in the world now let's go deep into and ice a casespecific developer that was huge and really really like changed the world in a really big way and we will take a look at bail at Joe so one thing you want to do is study the grace study the people who became billionaires as developers or massively successful developers and try to understand what made them that good because remember success leaves Clues so bill joy you know he's the author of the V text editor or vim and the founder of I believe Sun Microsystems so a lot of the java world he was 1000x more productive than an average developer now the few key components that made him very interesting and a lot of these billionaire developers had when I started deep diving into them is that they have the ability to touch type meaning typing on a keyboard and you know with your fingers in the right place and they actually touch type and they are unusually fast with their speed of writing code now when I looked and thought about it why this would be really helpful and I've talked about it in videos as well learning just comes down to how quickly can you do trial and error that's what a lot of what learning is about and so if you actually type fast you can make errors a lot quicker and then learn from them this is just a very crude example but let's say you type twice as fast as somebody then in a way in one year the learning you will make that person will make in two years here's another characteristic about these billionaire developers or these ultra high performing developers a deep consuming passion for software and I'm actually reading it right off of the wiki that I've linked below in the video and it says such that they think about it and dream about it 24 hours a day seven days a week not just 900 to 500 this often leads to programming nights and weekends but that's a side effect not a cause and what this reminds me of is we have a student in our profitable short cut in our three months online coding boot camp in our coaching program so we have a student his name is Ryan Pro and he fits this criteria so damn well even when he became a client and joined the program I remember he was so passionate about software development and every time he's on the calls he's just crazy about the actual coding of it and he tells me he can never stop learning and to our appliance we give them access to messages on our phones too so he would reach out to me sometimes at like night like 11 p.m. or I even remember I would get some text I think like as late as 3 a.m. in the morning and he would be like hey I just finished module 4 module 5 and I'm just like eating this up and he is a person who seems like a genius to me he's almost like a savant where he's just so damn fast but it's because he has a burning desire and all the time he's talking about coding doing coding or thinking about coding here's another characteristic a burning desire to learn the best of what everyone else in the field is doing they keep learning beyond what may be required for the job slash degree and define other's work of interest so they don't have extreme attitude to be uninterested in finding out what others are doing so that's really interesting to read that they are actually the take interest in other people's aka these people are actually working on open source projects so maybe start thinking about hey maybe I need to look into doing open source coding projects because that is me taking interests in other people's work and me just being interested in the field of programming and open source projects and having them on your portfolio is one of the best ways to also get hired because that's what people are looking for are you actually caring about other people and what are you doing another key point here is they keep learning beyond what may be required for the job in degree so many people I look at in the coding world and they only want to do what's in that job or that degree and that is it that's where they start and that's where it ends for them that is a massive mistake I think that's one of the key things that helped me grow so fast in coding and get so good in a short period of time is because I always wanted to learn beyond what was required and I never thought when I even was going to college I thought about the college part of it just being supplemental I thought about it like hey I already have these amazing learning resources so I would use resources like Udacity Coursera EDX team treehouse code Academy and then I thought of college as it's just one extra resource not Matt my only resource just one extra resource for learning so then I had six streams of learning and I always thought about how can I build projects or apps that were outside of the school world that were just not theory I could actually use it in real life somewhere here's another interesting fact about these developers enough selfconfidence probably even arrogance so as to be unafraid to experiment and make mistakes and to try things that no one has ever done even if it contradicts established wisdom so when I think about Linus Torvalds or Larry Page or you know Mark Zuckerberg or Bill Gates I mean they had a lot of selfconfidence extreme amounts of selfconfidence and when you listen to Linus Torvalds I mean he that actually does seem very arrogant right he does seem very self like he seems very condescending even to the point of delusion so probably don't take part about becoming arrogant from it but take the part of way of becoming and having that high level of confidence that's truly what gives them the ability to go out there and make mistakes fast produce products produce a app that they build fast test it in the market and then if it fails bring it back and then try version two then try version three then try version four and then they're thinking about how can they sell that app for like ten thousand dollars a month or a hundred thousand dollars a month or how can they grow it to multimillion dollar or even a billion dollar business in the future and another interesting thing that they have in common is a flexible attitude / personal philosophy allowing them to pursue what pragmatically works beyond the boundaries of rigid ideology people at the other extreme will spend years finding ways to instead work within those boundaries which may yield a bigger eventual pay off but hinders average productivity dramatically over both the short and long term so here they are talking about having a open and flexible mindset to get out of that rigid ideology and I see a lot of developers doing it just be like no this is the framework we use this is the technology that we use and there's no other way and they just get stuck but like a fast developer is thinking he's like hey maybe why don't we just try gatsby i learned that that's a new framework and you can have pages load up in microseconds pages load up so fast using gatsby j/s that it doesn't even refresh when you actually click it it's just instant almost like the page is cached now one developer who's thinking in the rigid ideology will probably not think of that solution whereas the other developer probably spent a lot of time and now outside of the box came up with this brilliant solution that actually just beats everything but it requires them to think outside of the box and so with these developers they don't really conform to that ideology and they don't mean to be just within the boundaries they will brutally think about what is truly the best way to do something and the most effective and efficient way to do something so for you after reading about all of this for you here are the main things I want you to focus on and learn from this and actually apply one I want you to focus on having hours of focus and distraction free work time when it comes to coding this means you are learning about coding you mean watching tutorials and following along you are reading the source code of other people's projects and learning through reading code or three this means you just actually sitting there and actually coding building an application doing something from scratch so have hours of just uninterrupted time for that so then you need to focus on the second most important thing right one is you increasing your skillset and the second is actually production so in production what you want to be doing is are you actually creating a project at the end of the day are you actually pushing out the code and making git commits can people see what you're up to are you writing a blog post on what you've created or a YouTube video that talks about what you've created that also falls in production anything that is creation anything that other people can either see interact or use I call that production that is where your big wins are that is it for this video I want to know your guys thoughts on I want to do a series on billionaire developers so then for example you know it's like called a billion or developer series and then we have Mark Zuckerberg and basically I just like do a profile breakdown of like what technologies he learned you know when he actually looked coded the Facebook application what stacks did you use to do it kind of just like the overall breakdown and then hopefully my goal from that is one it's extremely entertaining to you actually can see how these billionaire developers thought and have a deeper look and then use the lessons from that into your own life and integrate it so let me know if you would like that series if you would please just drop a comment below cuz you know a thoughtful comment below because it allows me to look at it and kind of engage with you and see if you're actually interested in or not because if you're not then I don't want to make it but if you are then I want to go allin so that and then the other thing is we're doing a epic challenge for JavaScript and the winner gets a six thousand dollar online coding bootcamp it starts April 6 so if you haven't missed the boat make sure you the link in the description below and jump in that challenge the challenge is going to freakin change your life it is a sixfigure jobs for developer challenge it's five days long and it's really designed to help you kick start your career in five days as a developer and it's completely free so make sure that you click the link in the description below sign up for the challenge because I want to see your beautiful face on April 6th other than that thank you so much for watching as always smash that like button subscribe to the channel if you haven't already and drop a comment below and that's it I love your face and I'll see you in the next video