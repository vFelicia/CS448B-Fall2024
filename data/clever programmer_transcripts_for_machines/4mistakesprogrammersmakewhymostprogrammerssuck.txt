that is not gonna happen you're not gonna get a job like that it's not gonna happen you're gonna be unemployed if you do this strategy that is what's gonna happen oh my god this hurts my heart but I had to do it I had to do it I didn't want to talk about this but I'm gonna have to talk about this these are some of the biggest mistakes I see programmers making and together we're gonna talk about how you cannot make these so let's jump right into it now some of these mistakes might seem really obvious to you but some of these mistakes might not be that obvious before I continue further into this video I do want to say that we are launching a JavaScript course and a few days this is our team working on that course right now it's about 952 p.m. here in California and we're gonna be up working until like 500 a.m. or something and for many weeks and months to come it's gonna be a really awesome course it's gonna be called profit with JavaScript you might enjoy it you might not take a look at it if you're interested link is gonna be in the description let's get back to the video shall we let's do it so let's talk about what mistakes you need to avoid making stop making this mistake number one mistake that I see programmers make and I see them make this all the time and it hurts my heart but this is where whenever some programmer a professional developer whoever you want to call it when they're given a problem oftentimes you are going to have this urge to just start coding up the solution and start typing things in and this thing drives me crazy so number one not learning problemsolving so I'm going to type that out for here okay mistake number one problemsolving okay you have to learn how to problem solve but what does this actually mean when it comes to practicality when you see a line of code you don't just start like attacking it when you see a problem you just start typing code up that's not gonna lead to more solutions what that's gonna lead to is it's gonna lead to a bug then you're gonna have another bug then you're gonna have another bug and pretty soon you're gonna be in this world of bugs and you're not gonna know what to do to get out of it why are all these bugs becoming a part of big problem for you and the application that you're building primarily because you don't actually understand the problem so take the time to really deeply understand the problem when it comes to programming when it comes to coding coding is not writing code coding is thinking its crystallized thought on applied to a computer machine the only the boring things are doing is actually writing the code the thinking part is actually the most fascinating so when you have a problem what you need to do first is you want to take that problem and you want to break it into its component parts okay so take that problem chop it up into these little component parts so you actually understand what the real problem is once you understand and you grasp what the overall real problem is that you want to solve you can start whiteboarding the solution before you start writing code because look here are multiple things that you are doing wrong you're dealing with multiple complexities at the same exact time one it's just the inherent complexity of the coding problem that you are faced with that's one two you dealing with the complexity of syntax while you're writing code you're introducing all this stuff at once so if you get a problem you don't know if the problem is of your thought or of the code so to distinguish that you need to first get the problem crystal clear and solved mentally and on a whiteboard then bring it in to Visual Studio code or whichever is your favorite piece of you know software for writing code and then start solving it so I'm gonna say like you know whiteboard your solution first and then start actually writing code majority of the work should be done before you start writing code okay I do this especially when it comes to really difficult coding problems I applied this when it's just something fun and I just want to have fun I just start throwing code at it because I don't want to be disciplined I don't want to be structured I just want to have fun I just want to write code I feel you on that but when it comes to a hard problem they're trying to solve maybe you're trying to integrate the stripe API into your Django web application so people can pay you or paypal or you are building whether ecommerce store or you're solving a problem on hacker rank or lead code I cannot overemphasize how important it is to actually think before you begin to code the reason I'm going on and on about this is because it's that important now let's move on to mistake number two that people make and I want to help you avoid it please don't make this mistake let's jump right into it so what is this this is I'm gonna erase this here real quick all right there we go so mistake number two okay this is not being resourceful what the heck does being resourceful mean Kazi here's what it means spending weeks and months of coding a project building a CRM customer relationship management system from scratch working your ass off on an ecommerce store and only to realize that there's already either a customer relationship management solution that exists on the internet or there's already a thing called Shopify so you can just skip all the ecommerce stuff that you were gonna build these are very obvious examples and I'm sure that you're not running into those problems necessarily but the problems I see people running into are far too obvious that there is a solution that already exists online somebody has solved this problem before you didn't need to solve it so one thing I want you to become deliberate about in your career as a developer is your skills of online research okay literally become a Stack Overflow God and become a googling God okay I am not exaggerating this this is insanely important to your coding career okay might sound like a joke but become so damn good at these two skills that you can almost solve any new problem because you're always gonna be faced with newer problems because whatever application you're working on or something there isn't going to be a tutorial that teaches you exactly how to integrate Google Maps API functionality into your specific application whether you're hosting it with node or you are using Django or you're you laravel whatever stock you're using it doesn't matter you're gonna run into specific problems that you can't solve so how do you get past them you have to get good at researching okay so oftentimes what I would realize happens to me is I would be trying to solve lots of problems that are solved before somewhere and this is a huge trap because it's going to be a massive okay it's a massive time sink and you're literally recreating something that already exists okay so don't do that if you research online maybe like for example I'll give you an example instead of writing CSS on your own use bootstrap okay there's somebody who had already done the hard work of designing beautiful things or use materialize for the front end those things are already done so don't do stuff that makes your life difficult keep it simple for yourself don't may be their stuff that already exists on github maybe you need to do just a little bit of more research and you don't need to actually have to code everything from scratch you can look up boilerplate code that exists online you can look up you know Stack Overflow that ACOTA that exists online that already shows you how to solve a specific problem and integrate it into your app no need to do this all over again so learn how to be resourceful and become really damn good at things like stack overflowing things googling things and get humming things capiche let's continue now i'm going to talk about the third mistake that I see people making so let's talk about that shall we okay let's erase how can i KITT erase all of this mistake number three alright not taking chances okay so what does this mean in the world of developers what people want to do is they want this perfect path okay if I can draw the perfect straight line to success okay let me make it green so it's nice and successful they just want this like easy path but they all day imagine is they're gonna spend this much time like coding and then once they're done with coding there's this gonna be like wonderful job that they're just gonna get right over here and then that's it right so they just work on these projects and then boom there's this magical job that's waiting at the top of this peak and then they're just gonna get it that is not gonna happen you're not gonna get a job like that it's not gonna happen you're gonna be unemployed if you do this strategy that is what's gonna happen so how can you avoid that okay how can you avoid that don't wait for this magical job that exists at the top of the mountain I want you to take chances the entire way okay so what does that look like I want you to apply to someplace when you suck so apply when you have just started in your coding journey I want you to apply you know you're six months into your coding experience I want you to apply you might get a job here you might get a job as an intern here you might get a job as a junior developer right apply here one year into your coding experience apply here you know one and a half year into coding experience apply here two years into coding Spurs apply here three years into coding experience you should be applying as many chances as you can get because to become successful at my you know when I was doing my high school AC teens the reason why sucked and I got a 19 wasn't because I was dumb maybe that might actually that might actually be the final answer a real answer but maybe it wasn't because I was so stupid but maybe because I didn't have the skills of taking the damn test so in your life if you don't have the skill of interviewing you want to develop it while you are becoming a more badass programmer while you're becoming a programmer you want to pick up the skills of interviewing so by the time you're a badass programmer you're also a badass interviewer right let's say that all of these other times you've failed let's say you failed at this time you failed at this time when you try to applied you fail that like one year mark you fail at the one and a half year mark you failed at this this mark over here you failed you failed here but maybe just maybe at this mark right over here you got the job right right over here a boom but would you have been able to get this same job if you hadn't done all those previous applications I don't know maybe not right maybe you would not have gotten this job so I want you to just keep that in mind at all times so you are building up your skill as a developer your portfolio as a developer and your interview skills as a developer take okay this mistake I call it mistake number three this is not taking chances okay so that's this mistake make sure you are taking chances now let's get into a mistake number four forgot to zoom in a little bit earlier you know what I'm saying so what is this one let's delete everything let's wipe clean all this stuff okay all right here is mistake number four mistake number four my friend is not working on long projects okay what am I talking about I'm talking about I'm talking about what the hell did I just do damn I just up everything guys I'm sorry give me one second I'm gonna have to erase all this stuff and let's see okay not working on long projects right so what does this mean I'm talking about mega projects okay I'm talking about behemoths so you want to want to work on these monster projects people make the mistake of you are doing a tictactoe project here you're doing a rockpaperscissors project there you are doing the todo list app you are building a calculator you are going through tutorial purgatory just rinse and repeat you're looking up every tutorial by Devitt I love that guy debit debit you're awesome if you're watching this video my man you're a coolass dude but you're watching every dev ed video you're watching every Brad HUS Brad traversée media video you're watching all of these videos online and building these small tiny mini projects all day long and the problem is you could work on 30 projects a hundred projects but that's not impressive at all to your potential employer or person who is recruiting what they're looking forward right what's the realistic scenario that's actually happening at a software developer's company they are working on one project Trello is working on Trello one project Facebook is working on Facebook one project uber is working on uber one project they're all working on one project instead you are going around like you're spending time right into like if we had like a bar chart or something right and you were thinking about like the time you're spending on a project you have like one project here just like little guy then you worked on another todo list app project then you work on like another little project and you have like a list of these projects nobody cares about that what your employer wants to see is just one project that you spend a massive amount of time working on and it's a behemoth okay it's a behemoth they care about this nobody gives a about your little Tic Tac Toe robot AI game nobody cares so what you need to do is focus on the big project stop focusing on the little stuff so what does this mean take one project and work on this so let's say that these projects right let's say this was a if I have two right here right these are let's say one week projects all of them right I want you to think in terms of doing whoops I want you to think in terms of doing if I can make this green one year projects okay they're gonna be a few things that happen once you do this approach what is going to actually happen is that first of all you're coding skill is gonna improve like like you would not frickin believe okay so how can I move this I'll move this a little bit like there so you can see the other side of the screen okay so let me write here so a few things that are gonna happen right is increase massive increase in coding skills so your coding skills are gonna increase out of this world you will realize that one week projects don't help put you in flow mode but when you work on a one project for one month or two months or three months that's when you hit flow mode that's where you make massive improvements in your projects the other thing that you're gonna see happen is recruiters are gonna be impressed all right they wanna see you work on these long thoughtout projects that's what's gonna impress them one project that shows your code this is gonna show your documentation skills this is gonna show your skills of writing clean effective scalable code how do you make an application that's secure how do you make an application that has a beautiful frontend you can't do this with one week of project this requires so many things for you to build it you are going to have to integrate all of those things into one thing the benefit of this is you are gonna be way more focused and you're gonna have your your recruiters are gonna be impressed and people who are willing to or looking to hire you are going to be much more likely to hire you right what's gonna be more impressive if you were trying to apply to freelance and clients what will be more impressive showing them a hundred little tiny projects or showing them one massive project that you worked on right and just linking them that it's your thing that you're the most proud of so pick things they can work on on the side or whatever for six months to a year or that's how you build amazing applications that is something that I'm a huge believer of so there you have it these are the top four mistakes I will write them down all here just to recap so you can see them all in one place okay okay so let's go here mistake number one is not problem solving okay think before you write code the signal to is not being resourceful mistake number three is not taking chances apply often and mistake number four not doing long doing long megaprojects okay I'm sorry that is running across a little bit did not see that okay there you have it my friends these are the four biggest mistakes that I see developers making all the time that is it for this video thank you so much for watching it again just a quick reminder we are you know if you enjoyed these things and you are like hey I want to work on like some long projects and you're like hey I want to learn how to be more resourceful and I'm gonna increase my problemsolving skills and you know if you're if you're serious about it and maybe you're interested in JavaScript as well my team and I right my team is sitting right over here Aaron just left a little bit earlier and he's gonna come back and we're gonna be just cranking this thing out and making it one of the most best amazing courses on JavaScript it's gonna call profit with JavaScript and our goal is to help you one with technical skills and mastering them so you know talking about API is you were talking about Ajax you want to talk about es6 you want to talk about advanced JavaScript we want to talk about Dom manipulation and Dom traversing and you want to talk about all that technical stuff we got you covered we're gonna do all of that we're gonna also talk about like all the amazing productivity tools that you can have as a web developer and we talked about zsh what I'm talkin about Alfred you want to talk about all those fancy things right we'll talk about them to talk about vs code and how to make your vs code look beautiful we'll talk about that in this course all right I will talk about all of it so those things interest you and you want to become a freelance developer will learn how to income from coating the link is gonna be below we're gonna be releasing it during Black Friday so if you missed a chance during Black Friday one the price of it is gonna go up after that we're gonna close the course down so we won't be launching it for like three to six months later so your if you're interested go ahead click that link below hopefully you haven't missed the boat and if the page is up then you're in luck you might be able to join if it's not just sign up for the waitlist so we have your name on the email and then when we launch it you'll find out that's it guys this is Kazi I love your face and as always always I'll see you your beautiful face in the next video