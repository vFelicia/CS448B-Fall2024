in this video you'll build a coinbase blockchain web 3.0 app with nexjs you will style this app using styled components after you'll learn how to create and emit your very own tokens using the third web sdk we'll then add web 3.0 authentication so users need to log in using metamask we will use sanity io as our database where you'll store your freshly created tokens and include info about them including their usd price conversion and their logos will build the front end and update the portfolio balance and also add send and receive modals based on the data from sanity and the blockchain using third web you'll learn advanced skills like how to use grok with sanity's api to actually retrieve your data we'll then add the functionality to send and receive your tokens on the blockchain using the front end you just built with nexjs finally we'll deploy this app using versailles and host your app on the internet so are you ready let's do this with all of that said let's just get right into it and demo the app right now so here's my app now notice that i can't log in i have to actually connect my wallet boom i click that my meta mask pops up and i will hit next and connect once the connection is done you'll see that my app automatically opens up and retrieves all of my tokens and coins from my meta mask or my sanity database that i have but if you look here it's pulling my four bitcoin and my two ethereum and it's actually telling you exactly what my portfolio balance is now let's say i were to sell off one of my bitcoins well since one bitcoin is about forty thousand dollars you should expect my portfolio balance to drop by about forty thousand so let's go ahead and give that a try i'm gonna hit send and receive beautiful modal pops up and i will go ahead here and i'll i'll type in address and for this address i have actually created another account in my meta mask so i'll just go to that account and it's just called receiver coinbase i'm just using this to send coinbase to it okay or tokens to it i'll copy this and i'll paste that address right here and instead of ethereum and notice it actually pulled exactly how much ethereum and bitcoin i have and again this is pulling all of that from the blockchain right so boom all of this how freaking cool is that by the way like first of all i think it's so freaking exciting so now let's say i click bitcoin i go send one bitcoin to that address we'll hit continue and now watch this transfer in progress and once it's completed it will actually turn green let's give it a couple of seconds boom it was set successfully let's go to my meta mask and let's take a look and i have received the one bitcoin right going back to my bts coin base i only have three bitcoin left here because i sent one right and now when i actually hit refresh you'll see this go down by about forty thousand dollars let's give that a try wait for it wait for it and boom look at that guys how beautiful is that you just saw it drop from 170 000 to 130 000 the whole blockchain is working this app right the tech stack like i've already told you it's built using next.js and it's just beautiful right here you can see wallet connected yeah and then if i go into my send and receive watch this you can actually hit receive right and it pops up your address where they should send it your wallet address and check this out i can choose bitcoin right and then i go and receive and all of a sudden now it says bitcoin right here and this qr code is actually functional so if you were to actually scan this qr code it will give you this exact address okay so you can actually pull out your phone right now if you wanted to right go ahead scan that and once you scan that it'll give you the exact address and you'll be able to send the bitcoin or ethereum uh there okay so that's the build this is the demo of of the app that you're building take a look at it right i can change which uh toggle i'm in here on the left hand side the balance looks super slick right if i go out of here you can see at the top i have my wallet connected once it connects it knows exactly which wallet it is just like coinbase i see my chart right here i see some assets down below right here right and then on the left hand side so really really looks slick looks exactly like coinbase and if you're excited about this this is the demo of the app and now we're actually gonna jump in and just start coding it up from scratch if you're ready i'm ready let's just jump right into it all right let's go ahead and create our next app so how we're gonna do this is i'm going to just go into my github folder you can choose to go wherever you want right and i'm going to initialize this app so i'm going to say npx create next app latest just like that and then just give it whatever you want to call it so for example for us we're going to call it coinbase blockchain out and then just hit enter now it's going to install react and next inside of it because remember next at the end of the day is built on top of react so you're using all of react's technology plus with some nice little sprinkles with next okay so don't worry this is not like it's something completely new it's still react at the end of the day so let's go inside of our project just like that so now i'm going to open up this app in my visual studio code just like this and what we're gonna do is i'm essentially going to run it and see if it actually shows up all right now we're gonna try running this app on our local host so i'm simply going to just do yarn dev here you could do npm run dev as well but that's the command whenever you want to run a next file let's take a look here and boom i'm seeing a bunch of next related stuff here all right now that our next app is created what we have to do is actually create our app insanity as well we gotta get sanity set up that's gonna be our backend that's gonna be our database that's where we're gonna store everything so let's go ahead and do that now i'm going to just open up i'm gonna do sanity.io so you can go to chrome just go to sanity.io and you should be good to go we will hit a login for you you're probably just going to need to create an account once you create an account hit create new project at the top here okay and it's going to give you this command right there this is the important command that you need now for you you don't have sanity installed so what you're going to need to do is first take this command here so let's go back and you're going to need to paste that command again and here's what you're going to need to do you're going to do sudo npm install and then you're gonna need to install it globally everywhere i'm not gonna hit install because i have it already installed but you should do that because um that command is gonna help you install this so uh that's the command there i just wasn't showing it earlier and now i'm showing it right there so type in that command you should be able to install sanity cli no problem once you've done that inside of our app here all right we're going to create a folder called studio so i'm going to hit new folder i'm gonna do studio and we're gonna cd inside of that folder so i'm gonna cd inside of studio and okay guys now when we're about to do sanity init make sure to do sanity init dash dash coupon clever programmer make sure you do that because once you do that it will make sure that you're getting the best plan that comes with 200 000 api requests 1 million api cdn requests and 20 gigabytes of bandwidth you're getting all of that for free so it's unbelievable make sure you use that so you can just keep building as many projects as you want now here i'm gonna say sanity net just like this okay we're gonna create a new project and what should we call this project right you can call it whatever you want i'm gonna call it uh coinbase you know final or coinbase blockchain app let's call it that and then i'm gonna hit enter to just go through with the default settings that it shares with us okay and then the project output path let's just hit enter you should be good and then for what schema you want just do clean project with no predefined schemas that's that's the option that we want to get started with now the installation process is taking place it's actually building your studio folder with the sanity files inside of it as you can see on the left hand side here all my files are now starting to show up right i can go inside of any of these i want but the only one that's really matter that are really important is this schemas file right here this is where you're gonna build your schema and that's where you're going to add your schema so i'm simply gonna go in here and i'm going to essentially copy paste my schema in here okay so let's go here one thing i do need to do is before i do any of that is in my git ignore i just want to go ahead and remove that slash and what that'll do is it will ignore not only this node module but this one as well because i don't want to be tracking all of those node modules there so here's my schema and i just need to update the schema with how i want my coin uh my token schema to look all right we'll build our schema out here and this is what it should look like i have um in my schema what i want to have is title coins the name for this will be coins and then the type is this will be a document everything inside of a sanity has this structure title name type title name type and this is going to be a repeating pattern that you're going to constantly keep seeing okay so now for this document we need to have fields so the fields will contain a bunch of things so the first field will be the name of the token so what is that token in this case we're just giving the title name the name of it is going to be name and the type is going to be string because i'm going to store it as string format the next thing i need to store it as is a symbol okay so what's the symbol so for example you might have ethereum the name it might be ethereum but the symbol will be eth right s or eth or whatever you guys want to call it the next thing i'm going to need is my contract address all right so title is this name is this uh it's going to be type string as well and then there's just two things i need after this i need the price so usd price so for example what's uh ethereum's usd conversion right 3 300 as of today 3 100 as of today and what's bitcoins 41 600 something dollars as of today it might change depending on when you're watching the video and then of course you wanna have logo but logo the only thing that's different about logo is we wanna store that as an image this is your overall file this is what it should be looking like so make sure that you have you have something that looks exactly like this and this will be your schema now with this schema intact we should actually be able to do something like a sanity start and pretty soon we'll be able to actually see this so let's go ahead hit sanity start and let's wait for it to compile it's gonna whip up the sanity backend slash database okay and why we're using sanity guys is sanity is just like the easiest database to use on the planet yet it scales big companies are powered by it like figma sonos and a lot of other big companies that run actually uh use it and they're endorsed by nike as well when i saw on their website so that's why we're using sanity and it's like point and click but it can be as scalable as you want it all right so now it's logging me in i just logged in with my github account and you can see i have coins right here right and coins is empty but based on that schema that we gave it when i actually create a coin watch what are the things what are the fields is gonna have so look at this name symbol yeah so like it's it's pretty fast right now as soon as i called it symbols with three s's you can see it just got updated in real time so super fast how that works and it's going to update and again update in real time so that's super fascinating contract address my usd price and since logo is an image it automatically makes it a easy drag and drop your image in here okay that's why that's working like that quick disclaimer if you don't have sanity io yet make sure you go and register for them they have a free plan you can use and add as many users as you want so let me just quickly show you that real quick so they got a couple of ways for you to get started on sanity i o you could hit get started or you could hit log in and then on here just hit create an account if you don't have an account yet right if you could see that at the bottom right there it's uh create an account and then when it create an account just and just sign up with either google github or email i use github so that's how i signed up so you can just sign up with github and then you should be good to go and that's really all so for now until we get the images and the logos what we're gonna do is i'm just gonna create ethereum here for example we'll call it eth and the price conversion for this is let's just say 3100 dollars or we can type in one eth to usd and that's the conversion that we get so we can just go ahead and add that in just like this okay i just like to kind of leave it like this it makes it simpler and then just hit publish so this is one thing that we've just added to our database and now i'm just going to add bitcoin btc and for the price i'm just going to say that because i think that's what it is today um all right so then we're going to scroll down and at the bottom we have uh go ahead and double check that all right and then we see this green button right here and i'm just going to hit publish on this and then we can just like this we can also add solana and then for this the symbol is going to be sold and for the price we can actually look that up so one solano to usd is about 141 dollars so i'm just going to carry that over and pop that in right there and we're going to hit publish so there's just two pieces of information that we need one is contract address this we need to create our own solana and our own ethereum and our own bitcoin okay we're not going to be tapping into the existing ones so don't let that confuse you we're gonna be creating our own uh coins on the test network okay so we're not gonna be using the real ethereum real bitcoin real solana just yet so that's what we're waiting on the second thing we're waiting on is just the logos which is just these images and what we're gonna get them shortly and then once we get them we'll be good to go so one disclaimer i just want to say is this project does have a bunch of setup more than pretty much any project that we've ever done so just make sure you stick through that because once you get it right you're going to be in a good position to succeed it just takes some time to set up because you have to set up meta mask and sanity and third web there's a bunch of things we've got to set up but don't worry we'll set all of them up together okay so don't let that freak you out we'll go through it together and set it up one thing at a time all right so we're really just going to complete the entire sanity setup right before we move forward so what we want to do is kind of add the global level right so like let me just kind of back out of here for a second and i'll go back or actually you know what let's have sanity start running and let's have a third thing here and um what i want to essentially do is the following i want to install i'm going to do yarn add and we'll do sanity client okay we'll install this because we're going to need that because we want to be able to interact and use sanity on the front end so i'm going to install this package and there's one more package i need to install and instead of installing that later we're just gonna go ahead and install that right now as well so i'm gonna do yarn add and we're gonna do sandy slash image url this will allow us to like when i fetch the image here like the logo that package will allow me to turn that logo into an actual image instead of just a reference because in the start it just gives you a reference all right so now at the root level what i want to do is um i want to just do new folder we're going to call it lib and then inside of this lib folder we're going to create a new file and i'm going to say sanity.js okay and we're just going to import sanity client from sanity client and because this project is going to be pretty big i want to kind of move through the setups and the front end processes quickly so i might be like skipping past some of the code not that it's not going to show it i'm not going to show it to you i'm going to be moving past the front end part pretty quickly because i want to get to the more novel things like blockchain and then the back end part and spend more time on that okay so just kind of letting you know that as we just keep going through it all right so inside of this i got my sanity client now i'm going to just set that up and we're going to export cons client and we're going to say sanity client okay and then we're going to give it a project id now i need to go get the id for this project so what we're going to do is we're going to go to our sanity.io slash manage page right and on this page i'm going to go to coinbase blockchain app and then there is my project id i'm just going to copy that over and we're going to paste that in and then i'm going to say data set is production api version you need to give it a specific one otherwise sometimes it breaks or errors out and then we're going to go ahead and give it a token here so for the token what we're gonna do is inside of our manage i'm gonna go ahead to my api and i'm going to add api token hit editor and i'm just gonna say coinbase app just hit save and then it's gonna give me this token i'm going to simply go ahead and paste that in right here got that token and then we're just going to set the end use cdn and i'm just going to set that to false okay this will make sure that i'm always getting fresh data now in here in course origin i want to go ahead and enable localhost 3000 so that my app actually works and then once you deploy your app you're going to need to add your deployed apps url in here as well that way your app is authorized okay so that's what you want to do and make sure that you have this another thing we're going to need are our assets so let's make sure we go ahead and download them now so we i will have the this google drive folder linked in the video in the description so you guys can go ahead and get access to it so we're going to need code assets all right so i'm going to need this and i'm going to need this other one okay so what i'm going to do is go ahead and i'm going to download this folder so sanity assets is going to be the first thing that i download and then i need to download my code assets folder as well let's go ahead and download this as well so now i have both of them downloaded so now you can see code assets folder and sanity assets folder and the code assets folder we'll be using in a little bit but sanity assets is what we need right away and for sanity assets all i'm gonna be doing is i just need them for my sanity okay so i can go ahead and upload them on sanity so i'm just adding it here i'm using this app called yoink it allows me to kind of just put a placeholder there you don't need your ink okay but uh you just need access to those photos and now i'm gonna go to my points okay on my localhost three three three three slash slash coins i'm just going to upload the images so for solana i'm going to upload the solana image here and once that's done i'm just simply going to hit publish on that so you can see the salon image is now there now for bitcoin we're going to use the bitcoin image and simply going to hit publish on that and then we're gonna go on ethereum and use the eth image okay simply gonna go and hit publish on that and basically all of our images should be uploaded now the code assets folder we're gonna come back to later but just remember where you've downloaded it for now the next thing we need to set up is meta mask all right so now that we're on third web the first thing we need to do is make sure in our meta mask we have rankib test network ready to go that's the test network for ethereum so all i'm going to do is i'm going to hit my account icon okay and coinbase blockchain i'm going to hit settings go to advanced and then we're just going to go ahead and turn show test networks we're going to turn it on okay on now when i hit x and i go back and when i click here you'll see that i see a bunch of stuff including rankinb test network okay that's your ethereum test network so click that i have zero eth currently when you go into it you should have zero ether as well all right we're gonna go ahead click start here and uh we're gonna click get let's get started metamask i'm going to connect my meta mask to it it detects that i have zero eth let's hit continue let's hit the rinkeby test network testnet and let's do create first project now it's going to say i have insufficient funds so we're going to go ahead and click the link to get the funds this is me getting fake ethereum aka ethereum for my test network i do not need link so you can x that okay and i do need to put my account address because it's asking where do you want to receive that money where do you want to receive that ethereum so let's just paste that in let's hit i'm not a robot and we're going to hit send request so now we're waiting for confirmation it this should take about 10 to 20 seconds or maybe even less wow it just says request complete already that was fast let's go and boom we have 0.1 eth brilliant all right so now go back to third web because you should have a sufficient amount of eth so i'm going to hit refresh now it says i have 0.1 eth and i'm going to call this project coinbase clone or coinbase blockchain app all right let's hit create it's saying something about gas fees hit confirm authorize that and then we'll once we're in that's when we start making our tokens okay and third web makes it ridiculously easy to make your tokens and get everything set up for your project it's it's really amazing kind of what they've done to the whole blockchain space they really make this whole process super super easy so we're gonna click add module and i'm gonna pick token here okay and hit setup module and my first token just call it bitcoin okay let's call it b2 btc uh we could call a bitcoin 2.0 as well if we want just for fun okay bitcoin 2.0 you call it that or you can just leave it as is that's fine too and let's hit deploy module we don't need to upload the image here we can just kind of leave it as is that's fine let's hit confirm so of course you have to pay a little bit to mint and create these like oh you have to pay some gas fees to basically get these projects going and pretty soon this is going to be done we're going to repeat the process for ethereum as well okay so you see it just gave me a second notification second transaction i'm going to hit confirm it at that and then i'm going to repeat this process and next up i'm going to create let's just say soul and then i'm gonna create eth okay so i'm gonna do this process three separate times so my first one is done just hit confirm configuration at the bottom go back to the project and let's hit add module and repeat this process again hit token go bottom setup module we're going to say solana and here we're going to say sol it's a deploy module and then we're going to repeat that process okay now solana is done as well we're going to hit confirm configuration and we will go back to project we will add module and we will do one last one token let's go here ethereum and i will say eth this will be our created these are our tokens we're making you call it whatever you want i could have called it cpt like clever programmer tokens okay you can call it whatever you want these are your own tokens that you're making okay now we have ethereum is done as well all right so now what we're going to do is we're gonna give ourselves some tokens okay so in bitcoin let's mint a couple of bitcoin wouldn't it be nice if we had seven bitcoin okay so let's give ourselves seven bitcoin and let's confirm this uh transaction and the gas fees and everything that we might have to pay so this will give us seven bitcoin and in the start all of these will be owned by us as well aka you in this case and then we'll mint our we'll do the same process for ethereum and solana and we'll mint and we'll make sure that we own these okay so let's go here so like for example in bitcoin you can see seven owned by you okay let's go to solana and we will mint and let's meant um i have 50 solana we will do the same process with ethereum once this is done okay so solana is done let's go to ethereum and mint and for ethereum i will say let's say i have like 15 ethereum okay so let's just go through that and then we'll be done now that i'm done with this let's hit refresh to see how much ethereum i have okay let's go back actually and let's look at how much solana i have i have 50 solana let's go to ethereum i have 50 ethereum and let's go to bitcoin i have seven bitcoin so that's perfect all these ones are done and they have real contract addresses so if you go to rinkybee.etherscan.io and you paste that you will see that this contract address actually exists this is real and there is a creator of this right so who's the creator of the xerox three and you can see i am the creator of the xerox three cd so you know who the creator of this is which is pretty freaking cool you can see the contract creation and then you can see that there was something else that happened here as well three min minutes ago which was minting okay through mint that was the method and the first method was just pure creation that's this contract address right you could see probably for all of the ones that we've made you'll find them so here this fake solana that i just created if i search it by the contract address it should actually pull the fake solana right and here it goes creation by who how much minted everything if i go inside here i can see it says rankib test net transaction only and i can see that tokens were transferred from here to my account and there was about 50 solana that i received so in order to be able to get access to this inside of my meta mask what i need to do is grab these contract addresses and in my meta mask i need to actually import these tokens so hit import token paste it wait for it and the btc symbol should automatically pop up and notice that i have seven bitcoin or seven btc i can copy the solano one and do the same process here so i'm gonna hit import tokens paste should say sol and 50 soul indeed copy this uh import tokens paste so now i have solana ethe and bitcoin okay and clearly you can see this is the ether we have created right this is separate from this east okay this is our east now with all of that set up we're ready to actually move forward and um add this inside of our sanity as well okay so grab these contracts now and inside of our sanity we're gonna paste these addresses okay so let's go here and let's do this carefully so we get it right so i i'm gonna catch bitcoin and we'll add the bitcoin address here and hit publish we will capture solana we'll go to solana here paste that contract address and we will wait for this to load and then hit publish and then we will grab the ethereum contract address we'll go inside of ethereum paste the contract address go down here and hit publish so now our sanity is fully updated we got all the data that we needed to put in here and we'll essentially go from here one other thing i want to do since i'm going to be moving this money around between two different accounts let's open up our meta mask right now and uh let's go ahead and go to my second account that i created which is called receiver coinbase two and um let's go ahead and dismiss and then this one we're also going to start adding these tokens okay so i'm going to paste this this gives me the eth okay let's copy our solana one let's go back in here and we'll import will paste this gives me the soul okay let's copy this and let's paste this this will give us the btc so now we have two accounts that have these available so receiver coinbase and coinbase blockchain coinbase blockchain is the one that's connected to third web so let's go back to that one this is our main one right now with everything in here all right now what we want to do and this is the last part of the setup i promise once you're done with this okay you're pretty much done with the entire setup and i promise we're gonna be getting decoding soon okay i know this is definitely the biggest setup we've had of all the apps we've ever built a clever programmer trust me i get it but once this setup is done then it's going to be smooth sailing okay so just hang in there with me and uh last thing you want to do is let's grab our let's go to our wallet let's go to your main account here so for me it's a coinbase blockchain one and we're going to go ahead to account details and uh we're going to export private key okay i'm going to type in my password here and there it is it just gave me my private key for this account okay so i'm going to copy this key right here all right copy and i'm simply going to hit done and then i'm going to create a n file and let's just do next underscore public underscore meta mask private key or we can just do meta mask key and paste that so that is the one okay so this is my key and i have it right here next public metamask key and we should be good so in terms of the setup now we're pretty much done and now we're ready to start coding i'm super excited let's jump right into it all right so the first thing we're going to do is add authentication to our app so let's go ahead and do that now and this process is going to be pretty straightforward but let's just kind of walk through it together okay so i'm going to go to my app.js all right and that's going to be in pages underscore app.js is this file right here now what i want to do is i need to add in my third web okay so in order to do that i actually will need to write this line here and to make all of this work i'll actually need to install all of these dependencies so here according to third webs documentation what i need to do is i need to actually install all of these here so you can run this npm or this yarn one all right either one works so i'm simply going to copy that paste that we can install this one let's add one more things thing to this so this is how this has third web react and third web hooks what i also want is the third web sdk because we're going to need that later so let's go ahead and just do this way third web sdk and hit enter and now it's um going ahead and installing this okay just so you can kind of look at the line that i wrote up close that's what that looks like okay beautiful so now once this installation is going to take place we are ready to start using third web now the next thing i actually need to do is i need to basically add in the supported chains so for so here's a little bit about chains and you can see that for rinkybee the actual id that we need is a chain four i'm going to go ahead and get rid of that the next thing i need to do is i need to actually wrap this inside of my third web so for example i need to now close this with my third web provider just like that okay and i need to wrap this in a return so let's go here let's go there i don't need to semicolon and there we go so effectively what i've done right now is i'm wrapping the entire app in a third web login so that means that you know anything that i'm using here and i don't need to do return here by the way i can get rid of that return just like this so before on my app where i was like loading all the pages now all of the pages are going to be wrapped with this authentication so now globally i'll be able to access this authentication whether in my components or in my index.js or any other new pages that i actually make so now that i've wrapped the entire app in authentication what i need to do is update my index page and for my index page i'm going to keep it kind of simple but we're just going to do a couple of things here okay so i don't really need image and stuff like that and i actually also don't need styles i'm going to use a style component so let's go ahead and add that so let's do yarn add styled components like this okay and i'm going to hit enter again you could do npm that's fine simply gonna zoom out here okay so now i have style components okay so we're going to use style components for this i don't need next head here either style components okay and then the next thing that i really need is i need to make sure my hooks i have my third web hooks because that's what we're going to need in order to kind of provide that authentication okay outside of that let's go to this return and get rid of everything inside of here for now okay and i'll just leave it like a blank div kind of like this so if we were to go to our local host this will kind of you know have nothing on here as of now yep if i write hello here you will see that hello popping up right there okay so it's it's here but it's empty all right now the next thing i need to do is i'm going to say const address and then i get the address and the connect wallet from the use web3 so this is the web3 or third web hook that we have here and this will give us the address and the connect wallet and then i just need to basically create a simple page so i'll show you what that looks like and guys we're going to go through the front end because again i want to get through to the main app really soon okay so we're gonna go through it a little bit in a faster pace all right actually let's do it like this okay so i'm going to simply do the following so inside of this div i'm gonna say i'm gonna add a button okay and then for this button we'll just say connect wallet all right connect wallet and then i'm gonna say here on click connect wallet and we're going to do injected okay so let's give it a try and let's see what happens i'll hit connect wallet so all i had to do was make sure that my other wallets were disconnected so meaning like you know for example one of my other wallets was connected to localhost 3000 so i simply went ahead into it and i just went to connected sites and removed i removed uh localhost 3000 right so now coming back into my coinbase blockchain wallet if i hit connect wallet it pops up so clearly it seems like that it is uh working okay and now i can even add like a conditional that essentially checks whether this is working or not okay so let's go ahead and build our styling now and we will use that styling moving forward okay so i'm gonna have my wrapper here all right this entire thing is gonna be in a wrapper so let's do it this way and let's do that okay so now since inside of my wrapper you can see that it's kind of in the middle so that's great that's what we want the next thing we're gonna do is uh for wallet connect we're gonna give that a little bit styling so let's go ahead and do that now and for wallet connect what i'm gonna say is this here we're gonna go wallet connect all right and we're gonna wrap this button in wallet connect now let's create some styling for this button that we just created okay so let's go ahead and do that and instead of regular button i'm going to call this a button like this and like that okay so now it looks like a nice button again i'm not going to go too much into the css and styling because we have a bajillion videos where we're making front ends so feel free to watch those on the youtubes but i'll explain just a tiny bit on the styling side right and that's okay color is blue right we have our font color on there which is this black color that you're seeing right there font weight and then the font size right that's how we're getting the font size and padding is how we're getting this padding and then of course border radius which gives us those nice rounded corners okay and then on hover it turns into a pointer like that okay so when i click boom it pops up right there okay i'm not gonna connect just yet i'm just gonna finish up the styling on this all right and the next thing we need to do is add details and the details are just going to say right underneath that button it's going to say you need to be on chrome to be able to run this app so the details are going to look a little bit like this right underneath this button i'll add my details okay so you can see you need you need chrome to be able to run this app so if i full screen this right notice how everything is nice and centralized and when i go here it's still nice and centralized right so the styling is it's great it's perfect it's doing exactly what we needed to do all right and now what we need to do is create a conditional rendering which once you're logged in show something else and once you're not logged in show something else so if you're not logged in it should show you this but when you are logged in it should show you like the home page okay so let's go ahead and kind of create that so how am i going to say that is i'm going to say hey does the address exist if the address exists then i just want you to render h2 and i want you to just render the user's address for now all right and then if it doesn't exist then here's what i want to happen so i'm going to put these parentheses here i'm going to take this i'm going to take all of this code right there okay and paste that in here okay so if the address exists then show me what the address actually is otherwise show me this page so clearly it's detecting that the address doesn't exist that statement is false so it's showing me this right here so let's hit connect wallet and now let's actually connect let's see what happens and boom right when i connect it i can see that it's actually showing me my wallet address okay if i go inside here and i disconnect connected sites localhost disconnect boom you can see that it detects it so it's working perfectly all right now what we need to do is we need to create a dashboard all right so inside of these pages here i'm going to create a new file i'm just going to call it dashboard.js okay and then in dashboard i'm just going to hit rafce hit tab so those are my snippets i just kind of autocomplete this okay and now i have my dashboard and all i'm going to say here is you know i'm just going to in this div here i'm just going to say address let's destructure the address as a prop and then let's go back to our index.js and instead of this i'm actually going to say render my dashboard component right and i'm going to give it the address all right and make sure to import it from the top like this okay so now it should render my dashboard component once i log in hit next continue and there you go my dashboard component is now being rendered all right i'm gonna just disconnect this again so connected sites disconnect cool all right so now let's actually start working on our dashboard component and adding things to it actually i think it's better in this case to connect and stay here cool so now dashboard is going to have multiple things like if i actually look at the real one that we have right here the dashboard has multiple things that we're looking at here right for example we have this sidebar component we have this header component we have this portfolio chart component and then we have this portfolio component at the bottom okay and then we have some extra like earn some interest blah blah blah on this side okay so we can get started with multiple we could get started with header or sidebar i kind of usually like to start with the header okay so let's go ahead and get started with our header first all right so now that we want to build a header let's create a components folder at the root level so i'm going to say components like this inside of components i'm going to create a new file it's going to be called header.js i'm going to go in here and we're going to autocomplete this all right and for my header file i'm going to need a couple of stylings okay so let's create our wrapper styling we will create our title styling okay and i'm going to have a buttons container all right okay and why is that well because for title right i'm going to make assets look like this big assets right and then for buttons container i need to make sure that it's in a flex box so it's in row and not columns okay and then we're doing some calculations and stuff like that here so it takes up you know it's like responsive and it it takes up the right space okay so let's go put that back cool all right and then we want to have our button give it a styling as well and then that's it so these are the styled components that i want to essentially make for this and now we just want to essentially write the code let's start off with our button just so you can kind of see what that looks like okay so let's have our kind of buy and sell buttons so let's do this okay and let's make sure our header is actually showing up inside of our dashboard so i'm going to go in my dashboard and we will say here and we'll say header so let's just say header for now and let's see if it shows up okay it's saying styled is not defined so what i need to do is go in here and simply import that so import styled from style components and if you ever see my autocomplete being really really smart that's simply because i'm using github copilot as an extension so you can get that extension as well because you can see that my buy and sell button is here but we of course want it to be in the header so we'll we'll keep working on that now the other button that i will need is a send and receive button okay so let's go ahead and paste that right there now it's complaining of course because it needs to be in a wrapper so it needs to have a parent so let's do this so now you can see i have my send and receive and i'm getting this like little bar right here because in my wrapper i have that this is the border bottom if i remove this border bottom you see it goes away when i add it it's back there there we go okay so the buy and sell send and receive buttons are looking really really nice and now i need to actually build a buttons container and put them inside of the buttons container so this buttons container will make sure that they're in flex okay so let's go ahead and put that right there and let's put the end right below both of these buttons like this okay so now we have them in flexbox all right and then all i need to do is add title up here okay so let's do title and then inside of that title i'm going to say assets boom there you go so you can see how nicely it does it right it's automatically giving this a flex one that's why this is big and taking up for the title right title has flex one here that's why it's taking up the entire space if from title we take away the flex one you'll notice that they all kind of squish together like that but that's not what we want right we need it to be all the way there perfect so now our header is looking pretty good all right and let's keep on going all right so now all we need to do is really move this guy from here to the top okay and that's not gonna happen inside of header that needs to happen inside of our dashboard okay so what i need to do now is basically create a wrapper and a container okay so that's what they're gonna look like i got my wrapper right here okay this will wrap around the entire page and kind of give it some styling we of course need to do import styled from styled components like this hit refresh so the error goes away all right and you can see it's our page is looking alright so sometimes a page acts up funny what you need to do is just basically kill the server that you're running so ctrl c this is my sanity studio that i have running this is my next app that i have running okay so just ctrl c hit up and hit enter so yarn dev or npm run dev and that should like fix it up so now let's refresh and now it's looking the way it needs to be that's fine and now we're basically going to add a wrapper around this the one that we just created let's put that right there so let's full screen this so with the wrapper you can see it's looking nice now all i need to do is put it in a main container so let's go ahead and do that i'll do main whoops main container all right and then let's go ahead and pop that right there and boom there you go now it's showing up exactly where it needs to show up right at the top here and so this is looking good now let's go ahead and work and add the sidebar on the left hand side but actually before we add the sidebar let's go ahead and actually add that table with all of the coins inside of it i think that's a good one to add i think it makes our app fun to make this work we're gonna need to bring in our assets remember that i had you download earlier so we're going to need access to both of these code assets we're going to need our assets folder that has all of these tokens here and then we're going to need access to static as well so we're going to need both of these now so let's go ahead and bring them in add folders to workspace so actually remove those folders because it added it kind of in a funny way so we're just going to create our own folder called assets and in this assets folder we're going to go ahead and just copy all of those so i'm going to go into my downloads code assets assets and i'm just going to copy these all right and we're going to move that inside of our assets folder just like that and then we're going to create another folder and this is going to be called static all right and then in static we're going to do the similar thing and basically just move all of the static stuff in there these are kind of the predefined things so what's inside of these well i'll show you but essentially this is everything that's on the left hand side so essentially our sidebar items meaning uh if i go to my app it's this stuff here right so i have uh and pay and for you and learn and earn and notifications things like that so this is just like made already all right so you don't need to worry about it all you need to worry about is how you're going to get these icons to come up and that's pretty easy we just all we need to do to make that happen is simply just install the packages that are needed so the package that i clearly see we need here is this react icons package so i'm going to go ahead and say yarn add i'm going to say react icons just like that so let's go ahead and install that there's going to be a couple of other things we need to install but we can go ahead and do that later so this will give me all my icons and so my nav bar on the left hand side you know it's pretty close to ready to go because we have all the data we'll make this one pretty soon the thing that we want to work on now is this assets thing kind of here at the bottom all right so let's go ahead and get to work on that and for that to work we you just need to make sure that you have all your images right here with that said let's get to work let's also take a look at what's inside of our static folder so we have our nav items right this is everything that's going to be in our nav and then the other thing we actually have is coins right here so let's go to our coins so inside of coins right all i'm doing here is we're importing all of our logos so that's in our assets folder so i'm just importing all of them and then i'm just creating our coins so this is just static data here so i'm creating my coins how much of these coins i have what's the balance in there and then i'm putting uh bitcoin solana in there polygon in there ethereum just saying what's the balance right and that's how they're getting populated here based on the balance and you know what's going on here so balance what's how much do i how many do i have what's their usd value for example and you know what's the price of it what's the price change so this is just like the styling and over here what we're doing is just we're using data that we have hard coded okay so that's why i'm just giving you these files and you can just kind of use them that's what coins is let's go ahead and build our portfolio components we're going to go in here i'm going to say portfolio.js we'll make sure that we're importing this all right and then for this i'm going to do a couple of things so we're going to need obviously we need a wrapper because everything is going to go inside of that so let's create our wrapper and then inside of our wrapper we're gonna have content that's gonna kind of hold everything together nicely all right and then what i need is uh just a couple of things actually i'm going to need to style that portfolio table and then the table that we create we need to give it a certain styling in this case we just need to make sure that it has not that we just need to make sure that it has good width we are going to need to install the the table row all right so basically you know that's the whole table but then the table row styling is what's needed as well what each row will look like and and then we have the table item of course there's just a couple of things after that so we got table item and then we also want to make sure we have a divider so you see that divider right there we need access to that all right and then this is this is pretty much it as far as this is concerned now all we need to do is just just have one for title as well and that title is the one that says your assets on the right hand side here your assets that's the styling for that so we got all this now let's build our portfolio table so i'm going to go here and we will say portfolio table just like this and then inside of my portfolio table we're going to need table item so let's see if we created one for our table item we have so we're going to need our table item all right so i'm going to say table item and then in here i'm going to add my title and that's going to be your assets just like this now let's just make sure our portfolio component is showing up so we're going to go to our dashboard.js okay and actually we're not going to add it to our dashboard what we're going to do is we're going to create another component it's going to be called main.js main.js will contain everything that's in the main so we're going to add portfolio in there so let's go ahead and do that so first of all i'm just going to do rfce perfect and then inside of my main i'm going to do what i just said right so first of all we're just going to need to style a wrapper here for the main so i'm going to add some styling here and then inside of my main i need to use my wrapper and then inside of my wrapper i'm going to add my portfolio that i've created and this can be a selfclosing tag there we go cool now let's go to our app and uh we will add main to our to our home page right so our home page is our dashboard.js so let's go to our dashboard dot js file which is in our pages and inside of here i'm going to add main right underneath the header but still inside of the main container so let's go main and let's hit enter so it auto completes it and auto imports it from here it's complaining it doesn't know what style this so let's go in main and add that's import style from styled components like this and let's hit refresh let's go to portfolio portfolio probably doesn't have it either so import styled from styled components perfect and let's go ahead and also put this inside of a wrapper so we're going to go ahead and because we did create our wrapper styling so let's put this all inside of a wrapper and there we go okay your assets is now kind of showing up but the reason why it's not showing up is i'm not like adding in the rows that i need to add right so let's go ahead and add those rows and so what we're going to do is let's put a divider here right underneath the table item i'm going to say divider and then under the divider we're going to now build our table okay inside of this table i'm gonna have table item again all right let's close out our table item and then inside of this table item i'm going to have our table row like this and then inside of this row we're going to say the following so we're just going to say name this is going to be balance this is going to be price this is going to be a location you should start to see this on the right hand side kind of pop up allocation and then we will have the last one but this last one we'll actually be just using this last one we'll be doing the following we're going to say bs three dots vertical and make this a selfclosing tag and we'll just need to import this so just bs three dots vertical so going to the top and i'm just gonna say import bs three dots vertical from react icon bs okay so there we go we got the three dots showing up but you notice that all of this is like really close together that's not what we want we want it to have some separation in between them so i'm just going to do that with flex so we're going to say style let's say we'll give it a flex of 3 we'll give this a flux of 2 and then i'm going to repeat this process here for all of these and this will have a flex of one this will have flux of one and this will have a flux of zero okay all right so right underneath this table item now let's go ahead and add in our divider and then under this divider i'm just going to make a div and then here we'll actually now start forming showing our coins i'll do coins.map and this coins is coming from static coins all right so it's being imported from there just like that so in our coins.map i'm going to now say for each coin that you get do the following okay so i'm simply going to return it all right and then here i'm going to say create a div okay and then inside of this div end it inside of this div what i want you to do is create the coin and then give it a coin so we'll go ahead and make this component and then we're going to use a divider now before we go ahead and make that component let's just comment this out real quick and let's just say h2 and we'll just give it the can we try coin.name so at the very least now it's starting to show up in this this kind of table of course what we need to do is style this so we're going to go ahead and create our coin component now so let's go inside of components we'll go like this and we'll do coin.js okay inside of my coin component now i want to make sure that it looks nice so we're gonna add all the things that make it look nice all right so first things first let's import all the things we need so i'm going to need my style components i'm going to need to have this vertical dots here and then let's also use next image because it's highly optimized it's way better than using the regular image tag now for the styling let's go ahead and style this so i'm gonna create of course my let's do rf rafce and let's hit save so we have our coin we're exporting default let's go ahead and add in our wrapper so our wrapper is going to have a bunch of styling to make sure that it looks nice and then we have our name column so we need to add styling for our name column which is this one right there right the name we will need to add styling for our coin icon as well so let's do that boom there we go and then we will need some primary and secondary styling okay cool so what is this primary and secondary about well if i go to the final app you will see that this is primary text and this is secondary text right cool so we got our primary and our secondary and now let's start building out our coin so first things first we of course need a wrapper like this and then inside of our wrapper we're going to have a div inside of that div we will have another div we'll give this a style of flex 3 like this and then inside of this div i want to do a couple of things so i want to have my name for the column okay and then inside of this i want to put my coin icon and in here i will have our image we'll give it a source of coin.logo and we'll give it alt of coin.name great let's close it out perfect and this coin will be getting and destructuring because we'll be passing in this coin from the coin component so in the dashboard you know from the dashboard or from wherever we're creating this we're going to be passing this information back cool so coin.name all right and let's just pass our coin let's just see what happens so far so let's go back to our portfolio and let's do this let's hit n and import coin so now it should import coin from coin and there we go we're starting to actually see it show up right it's not looking perfect just yet but it is starting to show up so that's a great sign okay cool all right let's go back to our coin component and let's keep building on top of our coin component so we got our coin icon then the next thing we need to do is create another div and then here i'm going to have a primary and then we're going to have a secondary secondary just like that and inside of my primary i'm going to put coin.name and in my secondary i'm going to put my coin dot sign there we go so now it's starting to look a little bit nicer we still have a couple of more things to add so let's keep going all right underneath this we're going to create another div like so and i'm going to give it a style of flex 2. and then in here i'm going to say primary we're going to add a this is going to be a dollar sign here just because we're going to show the dollars right after it like this okay so there we go so now we can see all of this cool that's the balance that you know we're just saying we have in usd and then the next thing i want to do right after this primary is we want to add a secondary right underneath it so i'll say secondary and we'll do coin dot balance coin and then we're gonna say coin dot sign so our table is starting to look really really nice and it's coming together it's coming together pretty fast so let's keep on going the next thing we need right underneath here is i'm going to create another div and we'll give it a flex one all right and then in this div i'm going to say primary we're going to do the same thing and except this time i'm going to say price usd there we go cool showing up nicely so that's looking good and now the next thing we need to do right underneath this primary let's create another div and we'll give it a style we'll say color is coin change so for some of them it might be color red right or color green and then we'll basically say if the change is uh less than zero then we're going to give this give it this red color otherwise we're going to give it this green color like that that's how we're gonna style these cool and then we're just gonna go ahead and write so we'll say coin.change if it's greater than zero then basically give me a plus sign okay so you see it's giving a plus sign only if the change is greater than zero some of them might not have a greater than zero change you can go and look in your you know static coins file so if you look for change here change right negative four percent that's why it doesn't have a plus sign here but maybe let's look at ethereum and ethereum has a positive change so you can see ethereum has a green plus sign right there great let's go back and pick that pick up where we left off and now i'm just going to say show me the coin change and then we'll put this percentage sign right next to it okay just like that coin change is now showing up and then what we need to do is let's go right here okay and then we'll do style of flex one all right and here i'm gonna set coin dot allocation we'll do percent how much allocation of our budget do we have in this okay and then close that div and then we'll create a new div this will have a style of flex zero and i'm gonna put my three vertical dots in there okay just like that cool okay so my table at this point my coin act my coin icon is is completed all right all my coins are showing up if i were to add another coin that would also show up fairly quickly right so if i go to my coins component and let's just say that we copy i don't know this uh ethereum from here and i paste that right there and we say you know instead of ethereum it's called uh cp token and it's cpt and logo yeah let's just have it use the ether logo and for balance we're gonna say we have 300 uh dollars worth right and then balance coin let's say seven six price usd is nine change is 24 percent okay so if i were to go and open it up you can see the cpt cpt token showing up at the bottom okay so let's go ahead and um let's refresh this let's uh remove this for now okay and then go back to our app there we go okay so we just removed it we don't need that one now but you can see that our coin component is working right and even though it wasn't perfect but it like showed it and it actually built it out all right now what we should do is before we fix everything and kind of add proper spacing here and everything right like kind of how we have here let's go ahead and work on our sidebar component because i just want to quickly whip up everything then fix and optimize things right and then that way i just have the mvp going kind of as fast as possible so let's start working on the sidebar now so for the sidebar we're going to do it in a similar way i'm going to go inside of my components we're going to create a new file i'm going to call it side.js we're going to hit rafc e so it auto completes perfect all right now inside of sidebar let's go ahead and do the similar types of things that we were doing earlier okay i'm gonna add in my wrapper here okay and we're gonna basically add in the styling for the wrapper so i got my height for it how big i want the sidebar to be i wanted to take up you know pretty much my viewport height i want to have a certain border right to create this like separation right so for example right over here you see that all right so creating that and then i'm just calculating it to be you know basically just to the side and not take up the whole whole thing so to speak okay cool the next step what i need to do is i need to give it a padding so i'm going to give it that padding and then i'm just simply going to close this off like this cool all right so we've got this now i'm going to create my logo container all right so inside of here i'm just going to say margin 1.5 okay and then we're going to close this off and after this let's go ahead and give it a logo okay logo we're going to give it a width object fit margin left so now it's going to just make sure that the logos look nice so these are these logos that we're talking about right here okay and then let's go ahead and do navs item container okay and so basically this is going to make sure that i'm hovering so each one has a container right here as you saw right and then when i hover over it turns into a pointer right there cool all right and then for each nav item i want a bunch of stuff to happen so i want to have it get the styling and the border radius so for example when i hover over you can see that there's a border radius around it i don't know if you can notice that but it's like pretty you know let me zoom in here you should be able to see it right there see that border radius all the way right there right so that's that styling cool okay and then the background color changes on hover right so this is what we want that functionality right there okay so that's why we added that line of code and then for the nav icon what i want to happen is when i hover over it right it has its own the nav icon has its own styling so for example if you notice it's slightly gray there's a background you know the border radius is to make the circle right there so that's why we're doing it like that and then we just make sure it's centralized so place items so display grid instead of display flags instead of justify content or align items we have place items okay because we're using grid cool all right so that's as far as the styling is concerned now we just go we need to go ahead and just create this so i'm going to go ahead and create my wrapper here okay my wrapper is going to create contain everything in there and then let's just add in a logo for now okay so we're going to do logo container and inside of this logo container we'll have our logo okay and then in this logo i'm going to have my image and it's going to be our coinbase logo okay and now for source we might run into problems so all we need to do is actually just import this from here and uh let's go and get our sidebar now showing up so let's go to our in terms of showing the sidebar let's go to our dashboard okay i think let's add the sidebar there so i'm gonna go to my dashboard and in here right underneath the wrapper here i'm gonna add in my sidebar so we'll do sidebar like this save and let's go to our app and let's see if it shows up okay every time i fall for this import styled from style components let's hit save let's refresh okay construct image please use new operator interesting so what's the oh because um i'm not pulling the image so we need to actually make sure we do that let's use the image right here from next and let's refresh again okay so our sidebar is now right there so that's perfect it's able to get its own space it's able to push the rest of this content out right so our sidebar is sort of working how we want it to be working okay so that's a that's a good sign zoom in here just a little bit okay so we got our sidebar cool now what we need to do is we need to add more stuff into our sidebar so let's go ahead and do that so in our sidebar i'm gonna go we'll create our nav items container all right and then i'm going to say then we're to loop through all of our nav items okay so where am i going to get these nav items from well i'm going to say import nav items from it's from our static folder that we have right there we go perfect can't resolve nav items let's check our static here and we do have nav items right there oh i misspelled static spell it correctly perfect great all right now the error makes sense so that's totally fine and we're going to map through here so i'm going to save i'm going to hit enter there okay and let's go here and i'm going to say nav items dot map and for each item i want to do the following i essentially want to create my nav item okay and we can give it a key as well so let's do this index and i can say key can just be the index and we can give it an on click so on click what i want to happen well actually let's give it on click in a second that will require us to add some state let's just do it without the state for now so we got our nav item right there and then i want to do nav icon we'll give it a style and for the style i'm gonna give it a color okay and again this is gonna this is gonna require us to be a little bit dynamic so let's leave this out for a second again because this is required state again all right and then in here i'm going to say item dot icon like this okay perfect let's hit refresh great great great great great great great so now our nav bar is showing up here just like how we just like how we wanted okay so that's a great sign now let's make sure we add the nav title as well so right under the nav icon what we want to do is add our title okay so this is our nav icon right underneath here let's go nav title okay and i'm going to say item dot title okay nav title is not defined no worries let's just go ahead and define it and we're gonna make it empty so i'm gonna say nav title okay and we're gonna go style div empty and let's go const okay now nav title should be defined perfect there you go so look at that when i hover over you get that effect right boom we got that hover effect right i got my table with all my assets right here i got my header showing up at the top there so the app is starting to look like how we want it to look like okay so this is a really good sign let's go back and start adding keep adding more things so i'm going to add you know the things on the side here i think that's some one of the things that we need to add and then we need to add the portfolio thing at the top right there okay so let's go ahead and add those now all right so one thing we need to do to really make sure that this looks great is let's wrap this in content once we do that this is gonna actually look a lot a lot better okay so let's go ahead this content styling that we had made earlier right so let's go and go content here all right and i'll go all the way down and right there i'll add it add it too and now if you look at this this looks definitely a lot better than it did all right one more thing i want to do here is i don't like the how these sidebars show up it's kind of ugly so you know and now there's like four sidebars you know scroll bar showing up so what we're gonna do is we're gonna go inside of our main and instead of making the overflow scroll i'm going to make it hidden so now the scroll bars for the table are gone right so they don't show up anywhere so that's good and then we'll try to see if we can make these scroll bars at the bottom disappear as well actually because that's not nice right when i go over i can see the rest like what the heck is that so we're gonna go to our dashboard.js and then inside of our dashboard i'm just gonna to the wrapper i'm just gonna add in overflow hidden and now it looks squeaky clean everything looks uh great that's that's the look that we are after now before we work on any more like big front end stuff you know for example there's a few things that we got to add i want to start adding in some third web and web3 stuff as well so for example up here i want to say you know the wallet is connected and who it's connected to so i want to add that to the app just like how in our app right here i can see wallet connected and it tells me the address so let's go and work on that functionality real quick so let's create some styling now let's go inside of our header.js and we're going to start creating some styling for our buttons so we're for our wallet so our wallet link is going to have some styling so let's go and give it some styling right there and also so this styling over here is you know just this guy over here we're basically styling that guy right there we're going to give it a wallet link wallet link title is also gonna have some styling and that's that green color text that's gonna say your wallet is connected all right and then we're gonna get our wallet address we don't need to give this a color so let's remove that there and then pretty much we are you know good to go this is all our wallet related styling now all we need to do is inside of our buttons container we need to actually add our wallet so let's go ahead and let's do wallet link inside of this i'm going to go wallet link title and i'm going to say wallet connected and then right underneath here is we're going to have our wallet address all right and our wallet address is basically going to be our wallet address and i'm going to slice it just give me the first seven uh letters and then give me like three dot dot dots sort of situation here and then give me the rest so address dot slice 35 there we go cool so let's take a look if it's adding that alright so it's having trouble with wallet.address and that might be because this is lowercase w and this wallet address we actually need to pass it through our prop so we're going to say wallet address and we're also going to say connect wallet like this so let's go back to our dashboard where are we giving the header so our header we're going to need to pass in the address to our header like so okay let's go back to our header all right a wallet address so we can say wallet address just like this give it the address it will destructure the wallet address and then use it so let's refresh and let's see what happens we're still getting an error and that's because i have another uppercase w here so this needs to be lowercase so let's go ahead and do this and let's refresh and there we go our wallet connected is showing up here and it shows us our first couple of strings and then after that it puts these three dots and then it shows us the rest okay that's pretty much what's happening here let's uh remove the space between the dots i'll normalize it make it look slightly better there we go and now these look similar okay perfect and it knows which wallet i'm connected to right you can see it's pulling that info right from there now let's see what happens if i log out so let's go connected sites let's remove localhost and log out i'm on the home page we're going to hit uh connect wallet once it lets us let's kill our server and let's start our server again there we go all right so it's asking to connect wallet so let's say i connect and i choose my coinbase blockchain one let's hit connect and there you go i'm in so you can see that authentication is actually working just as expected right it's pulling my wallet code right there now let's finish up our styling here real quick so for example when i choose it we want it to turn blue just like this how i choose this here it turns blue and it stays blue so for this you're going to need to actually keep track of state so let's go and update that real quick and what we need to do is we need to keep track of state so i'm going to paste this here and basically what i'm saying is hey the active icon and set active icon and then the default state is going to be whatever the initial title is because in the start i want assets to be blue that's essentially what it's saying so make the zeroth one blue and then we need to import ustate as well actually from react so let's go ahead and do that now we are using use state now we actually need to start using this this active icon and set active icon so we have our nav item now on click we need to do something to it so let's go on click and we're going to say set active icon to item.title and then the one more thing that we need to pass is the style property to our nav icon okay just like this so all i'm saying here is hey if the title is equal to the one that i just clicked like it the one that i clicked if that's the active one then just set it to blue that's all so click click click click click and it works so active icon when i click it if that's equal to the one that's written right here then make that blue there we go that's all that's required to make that happen just a few lines of code so now our sidebar is perfectly completed our table is pretty darn good to go and we have our wallet connected showing up looking really good now all i need to kind of add here is of course we need to bring this chart in and then on top of this chart we also need to build these on the side here so let's build these on the side here real quick and get these up and running so those are just promos right that's all they are so let's go ahead and bring those promos in i'm going to create a component here it's going to be called promos.js and then in mypromos.js i'm going to have a i'm going to do rafce complete that and then here i'm going to add in my styling all right so we're going to add in our wrapper we're going to give it some margin from the top and some padding right we're going to have how our offer card looks so that's the styling for that this title will be where it says yield earned that's that's going to be the title and then we need to have our style our description so that's just the font size we got our placeholder give it a flex one and then this is going to be our additional perfect okay cool all right so this is like anything i guess kind of at the bottom additional there okay cool so we are we're good with this now all we need to do is actually just put this together all right so i'm going to go ahead and go here and say wrapper all right and then inside of my wrapper i'm going to have my offer card and then in here i'll have my title so let me say yield earned so this is my offer card one and then we'll have our offer card two and this will say learn and earn just like that so we have our two cards now we need to make sure that these promos show up so where do we want these promos to show up we probably want to want them to show up in maine so let's go back to main and right underneath this portfolio i'm going to add this here chromos is not defined so make sure you import it like this let's hit refresh and styled is not defined which is the same freaking problem i fall for every single time so let's go ahead and add that in so i'm going to say import style from style components just like that all right so now it should bring it in perfect our cards are showing up looking exactly like expected and now all we need to do is just finish them up we need to just finish up the styling inside of them and adding adding stuff to it okay cool so here's what what i need to do i need to give it a description all right and that could be earn and on earn up to up to 2.84 apy on your crypto right annual percentage whatever interest or whatever right description we're gonna have a placeholder right underneath that that's just to kind of give it some extra spacing and things like that and then i'm gonna give it an additional one so that's gonna be you'll you'll see so let's let's show you because i'll look better there we go so this is our additional right here 2.84 percent showing up right there right here boom and then the span tag knows how to style it inside of the span tag so if i go inside of our additional component you can see for the span tag we're saying hey style it like this override the color make it gray and then font size that beautiful perfect and then we need to fill out our learn and earn part so we're gonna go ahead and fill that out now earn up to okay same thing placeholder and then verify identity and we're giving it special blue and so when we go look there we go so now on our local host you can see uh this looks super solid all right now let's add in the balance chart that chart goes right here what i'm going to do is i'm just going to give you in a downloadable asset the chart so you don't have to kind of copy the file but it's all hardcoded data and we'll go ahead and build it so you'll be able to write it out and you can also just kind of download this file okay it's going to be called balance chart.js okay it's going to be a component like this and then inside of here we're going to do a couple of things so we're going to need to install this library right here so let's go ahead and install it so i'm going to say yarn add and we're going to do react chart js2 all right and then we need to start building our chart so our chart is going to have lots of things so we're going to create this variable here called const data all right that's going to hold our chart and let's actually build our component first now i don't need to import react from react it's not necessary it's like optional you don't really need to do that so this is our balance chart let's build our wrapper which in this case is just going to be empty and then i'm going to put my wrapper right there let's end the wrapper here like so oh all right and then inside of this wrapper i'm going to add a line and that line is uh the line that you see in our completed app right here you see this app this line right there so we're just kind of hard coding that line again you can add it in that's an extra challenge for you but remember that then it's just going to make this app all front end base and we'll never get to the back end part right so some of this is just for kind of show making the app look great so let's add that line and then all we need to do is just create a data that will hold everything so i'm going to do const data here all right and then in this data i'm going to have two things i'm going to have labels and let's just leave that as an empty array and then we're going to have data sets and that's going to be an empty array all right so these are the two things that my data needs for my labels i'm going to have multiple labels so kind of like bunch of my months here so april may june july and then for my data sets i'm going to give it this object right here so fill is false line tension background color this is just to style that line what its point radius should be point hit radius all of that and then you just plop in just some dummy data in there that's it that creates our balance chart and then all we need to do is actually go ahead and use that balance chart so we're gonna go ahead in our portfolio and inside of our portfolio i'm going to import this we're going to import balance chart from balance chart and can't resolve chart dot js just had to kill the server and restart it so that's all i did here kill the server restarted it all right right here and uh looks like it is good to go so i imported it now now we just have to use it so all we need to do here is right under where i'm showing let's see where's a good place to add it for now let's just add it right above the portfolio table so i'll go right above the portfolio table and we'll add it right there let's see if it works for us so it's having errors here so let's go back to our balance chart and that's because we need to destructure here so we're going to destructure data and destructure options we just need to actually create options that's all we need to do so let's go right here right underneath this and we're gonna do const options and i'm gonna say plugins legend and then we're gonna say display false just like that and now options is defined alright so now one magical thing we have to do here is just go import chart from charges auto and even though we're not using it in our code it actually gets rid of that error we were having and there's our chart okay beautiful so now we're getting our chart and we need to add a couple of things there so we're going to go inside of our portfolio and we just need to create a couple more things so for example we need to create a chart styling so i'm going to go right here underneath the content and we need to create and style our chart put a border around it that's what one thing so this will put a border around it like this like a square kind of like how there's one around the data table the assets table the next thing we need to do is we're just going to make one for balance this is not really going to have any styling we're going to have the balance title and give it a specific color we're going to have a balance value as well so those are the stylings we need to create for this and now let's get to work on building these all right so on in the content i'm gonna have chart all right inside of that chart i'm gonna have a div and in here i'm gonna have my balance and inside of here we'll have our balance title and i'm going to say portfolio balance and then we're going to have our balance value and um we're going to give it a dollar sign here and then of course we're going to pull this from our wallet so we're going to say 2 locale string and we'll make this in a second for now let's just put a random number like 46 000 for now so you can see it's showing the portfolio balance is showing up right there that's that's kind of the look that we're after and let's take our balance chart and put it inside of our chart so like this there we go look at that how nice that's looking right there we go so our front end here is pretty much pretty much done so one bug i noticed here already is when i try to scroll up and down right as i'm trying to scroll up and down it's not moving anywhere i'm stuck so what i'm going to do is i'm going to go inside of my main.js and in my main what i'm going to do is i'm going to do overflow y scroll so allow scrolling on the yaxis so here i can see it but that still looks ugly and i don't want to see the scroll bar so what i'm going to do is i'm going to say webkit scroll bar like that with the double dots and the start and i'm going to say display none and now let's see so see i can actually scroll up and down but there's no scroll bar so that's kind of the look that we're after right so that's exactly perfect great if i look at my chart here when i hover over look at that nice little 59 80 81 right it shows it's super nice you can see the dips and if you want to customize this you know feel free to go ahead and customize it make it however you want and um we're now starting to get pretty close to all the amazing blockchain and javascript parts so get ready for that because that's about to start and the sanity and we're about to mix it all together this was a lot of the front end we're building so we're getting into it just stay with me all right now let's go to our sanity and get our because what we want to do is we want to get the entire balance that we have here so we're going to do is we're going to pull everything that we have insanity inside of our sanity database all right and i'm going to pull that and i'm going to pull and then what i'm going to do is i'm going to see that look that up in third web to see exactly you know for each of those tokens how much how much money do i have for each of those tokens so for example sanity you know gives me okay here is a bitcoin well then i look that up in third web and i go how much do i have in bitcoin third web tells me hey you have three bitcoin okay cool then i add a three then i go back to sanity and i go what's another token i have it goes you have eth and it goes and then i go to third web and i go how much of each do i have and it goes you have four eth so then i go three plus four then i do that process again i go sanity what's the next token i have solana okay great sanity goes and asks then we go and ask third web hey you know how much soul do i have and third web tells us in our wallet there's 150 soul okay great so then this is what we have right once we're done with this loop and iterating like that you go all right we have you know total of x amount and this is not we're not going to just store this because it's not in the same denomination so what we want to do is we will multiply this by usd it's a dollar value we'll multiply this by its corresponding usd and this by its corresponding usd conversion right so for example for seoul it's 136 dollars so 150 multiplied by 136 4 thousand multiplied by dollars because eth three multiplied by forty one thousand dollars three bitcoin and then that equals as one big uh number so let's just say that's i don't know hundred and sixty thousand dollars i'm just making that up how much is 150 times let's see 130 so our soul is worth about 20 grand i'm just doing this random math this is 40 times 3 so that's 120 k bitcoin and then 4 times 3 100 is 12 k right so all of this combined should be 120 plus 20 140 140 plus 12 is 100 about 152 all right so we want that balance to be updated like that that's essentially how we want to figure that out so that's where we're gonna have sanity and third web like communicate with each other back and forth so let's go to sanity all right and what i'm going to do is i need to create a query so i'm going to click vision all right so let's go inside of our vision and vision will allow us to create a nice query and this is what this query looks like so i wrote this here but we can also write it from scratch so let's delete let's delete this and i'll kind of have you walk through this together with me let's zoom in a little bit here so it's easier to read but we're using this language called grok and that's what's going to allow us to create this query so i'm just going to say give me where type is coins and then in there just give me the name so let's say i hit fetch and you will see that it just gave me back all of my coins and all of their names okay cool it's kind of like graphqli that's how you write graphql a little bit similar to this also give me the usd price let's make sure to put commas there because otherwise it'll choke so put commas now it's giving me the name of each and the usd price of each perfect that's exactly what we're looking for well give me the contract address while you're at it because that's going to be necessary cool so i got my contract address now give me the symbol and the logo as well alright so now i have the logo image which is this url i got my contract address i got that it's ethereum the symbol that it's eth and usd price and it's doing that giving it to me for all of them so i get back a result of three right and it's uh array of objects so very simple logical api kind of how all apis are right now what's important is for me to understand that all of this is just done in my ui or in my url so if now all i got to do is just copy this url and if i paste that url and hit enter boom look at that i get all my data back in 24 milliseconds so it's freaking fast right this is quick hit it enter and now i got it back in 22 seconds now i got in 17 milliseconds now 13 milliseconds so you can see that it's caching it and it's just making it faster and faster each time that i get it so that is all i need it's this url so let's go ahead back to our app and here's what we're going to do we're going to create a use effect hook and so i'm going to create my use effect hook let's import it all right and the dependency for this one is going to be an empty array so just nothing and i'm going to basically say this this is going to be a async function and here's what we're going to do so we'll do a try catch here so i'm just going to say const coins and we'll await fetch so double quote it just because there's a single quote inside of it perfect and of course we need a catch so i wrote my try and let's just do my catch and we'll just say catch error right and we'll just do console.log error like that and then once i fetch this all i need to do is go temp sanity token so these are our sanity tokens that we're getting and i'm gonna do await coins.json and once i have that then i just update my state so let's create a state variable that's gonna keep track of all of this so we're going to say consanity tokens set sanity tokens and i'm simply going to do use state and we'll start it off with an empty array you state is not defined so all good at the top we will import you state all right and now that we got this we just need to update the state so i'm just going to say set sanity tokens to tamsanitytokens.result you know why because we know that we when we run this query we have this array and it's called result all right so that's how we will get access to it by doing result let's zoom out a little bit cool and you know what while we're here let's console log temp sanity tokens so we can take a look at it and i will hit inspect we'll hit console and all we need to do is just run it so we will go here and we'll say get coins and make sure it returns unsubscribes cool let's hit refresh there we go look at that result boom we even know exactly what the query was and we got our result back okay so if i hide myself here you can see our result is right there and i can see each of these contract addresses right ethereum bitcoin solana so that was actually incredibly easy to use so that's freaking cool sanity is cool as hell that was really freaking cool it's really easy i mean what database do you know that's that easy to use it literally turns into i mean all we did was just an api request right and uh so easy and that api is deployed online so even if we had our studio off here that should technically still work and it did because i just tried it i tried turning the studio off here i shut down that server and i refreshed and it still worked so even without the studio running it works so it's freaking great awesome so now that we're getting our sanity tokens and before we continue further let's just make sure we have one more thing installed that we're going to need which is going to be ether so let's just do yarn add ethers this is going to be an important package that we need let's just make sure that we're spelling it right that's right and hit enter this is going to make sure that we're good to go in terms of the next steps that we're going to be doing now let's import ethers at the top here so we're gonna do import and i'm gonna say ethers i'll do from ethers like this and then also let's import third web sdk so i'm going to set third web sdk from third web sdk just like that because we're going to need all of these now all right now that we have third web sdk and ethers kind of added to this now what we're going to do is let's create the third web sdk and this is how we'll do it so let's go all over the top here and we'll just initialize it right here that's like our very first thing to just create our third web sdk now this key over here we just want to say metamask meta mask here let's go to our n file and what did we call it yes we did okay perfect so this creates our sdk that we can then use at any time okay perfect and this url here is going to be important just so you know where i got this url from go to your meta mask click this button right here go into settings inside of your settings go all the way down to networks go to rankib test network click that arrow and it will show you here you can see the chain id is four right and here's our ether scan and also it will show you your rpc url that you need so take that url paste that bad boy right there that's what you need to make this happen cool so we got this sdk up and running that's good now what we need to do is let's go ahead and update this ignore that real quick okay cool now all we need to do is make sure once we get it we look this up inside of our sanity tokens and we update it accordingly all right let's clean up this function quite a bit so here's what we're gonna do we need so sanity tokens there's just two things that we need to do we need to get sanity tokens and then we need to get third web tokens that's all we need to do so we need to keep track of the this state so we're going to say const and we'll set third web tokens and then we'll say set third web tokens and we'll do use state just like this okay great now that we have this happening here all we need to do is uh clean this part up a little bit so i'm gonna rename my function and i'm gonna call it get sanity and third web tokens because that's really what this is doing i'm gonna rename it here at the bottom as well and i'm gonna clean it up a lot so i'm going to get rid of this console log here i'm going to get rid of this catch here i'm going to get rid of this try here let's uh keep on trying to clean it up this dot result let's do the following i'm going to wrap this like this and just put a dot result there and as a matter of fact i can just call this sanity tokens because of the scope all right so this sanity tokens will not be the sanity tokens because it's out of the scope so let's just use that there okay so that variable is fine so now that we have set sanity tokens now all i need to do is actually set my third web token so here's what i need to do i'm going to do sanity tokens.map and all i'll do just so you can see it as well is we'll just do token.contract address so you can see what this gets us and you can see that each of the tokens contract address i'm actually getting right here at the bottom right as you can see so what i need to do is if i feed that to the sdk right so if i do sdk dot get token module the third web sdk you'll see that it'll help me actually get the token from third web right there so now instead of console logging it all i really need to do is return this as an array all right and all i need to do here is set uh third web tokens and wrap that in and save it so that's it so this is returning an array all right and in a second you'll see exactly what that looks like so let's just add our console log statements here one is going to show me sanity tokens one is going to show me third web tokens third web tokens right there should be being used all right so let's copy that let's paste that here just needed to have a capital w right there and at the bottom right you can actually see these values showing up so if i hide myself here you can see that i have sanity and it shows me clearly that i got three things from sanity three tokens and contract addresses one for ethereum one for bitcoin one for solana and then inside of third web here you can see it's showing me three token modules one two and three okay perfect that's exactly what we were after all right so what we should do is because we'll need access to these tokens kind of throughout the entire app let's lift our state up so instead of portfolio we're going to lift this up and move all of this to dashboard so let's go ahead and copy this let's go to dashboard paste that right there and we'll also copy this entire use effect hook with these console log statements and we'll paste them right here and then we will copy our basically cut actually can cut all of this and paste that here and cut your sdk go back paste your sdk right there and we don't need any of this in our portfolio our portfolio can stay clean just like this now it's complaining that use data is not defined so let's go to our dashboard and we'll need to define new state and use effect so let's go up at the top here and we'll say use state and then we'll also do use effect like this and let's refresh and hopefully it works and there we go and we're still getting our sanity and uh third web information all the way at the bottom i'll hide myself so you can see it perfect that's exactly what we're after so that looks great let's keep on rocking and rolling that's all we needed here now we need to just pass this information down so our header is going to need it and our main is going to need this so for a header we're already giving it the wallet address let's give it our sanity tokens as well sanity tokens and then let's go ahead and give it our third web tokens like so third web tokens and then let's go ahead and repeat this process for main so main gets these things and header gets these things so now those components have access to all this data now while we're inside of portfolio let's just go ahead and destructure this so i'm going to say third web tokens we will need our sanity tokens and we will need our wallet address right now let's just console log all of these things to see if we're actually getting them sanity let's go here sanity tokens and we'll say wallet address and let's make sure we're getting it so i'm gonna just put a gun emoji right there and see if we're getting this so currently it's sending it to us as undefined but we're gonna fix this soon all right so the reason why our portfolio doesn't have access to it yet is because only main and header have access to it so we have to go find where our portfolio is let's go to our main and from our main what we need to do is we need to destructure those so what i'm going to do is i'm just going to copy this from my portfolio here all right let's go to main paste that there cool and let's go to my dashboard and i'll copy all three of these let's go back to main and paste these right here so that's how that's gonna get access to it here you go wallet address cool now it looks like our portfolio is doing the thing so our portfolio is now sharing with us that third web tokens boom right there and we'll go to dashboard and we'll comment out these lines here just to make sure that it's coming from portfolio and it is as you can see it's coming from portfolio okay the gun emoji should show you that let me hide myself here you can see the gun emoji boom you can see the token modules coming from right here so it looks like things are connected we're passing the data back and forth and you know kind of if you could see it at a hierarchical level right dashboard we kind of have right here dashboard and then we have our child components right so here we have our other component which is this component right here i guess would be our main component right main.js and then after this one we have draw this out so we have our portfolio so this is why we have to do prop drilling and we have to pass the third web token from dashboard to main component right and so basically it looks like this it's like we have our three our tokens we gotta pass them from here and then we gotta pass the tokens from maine over to portfolio so it has this like detour multiple steps but it ultimately ends up getting down to portfolio that's the hierarchy we're looking at okay cool so now that we're getting access to this let's check it out right let's go to maine so one thing that third web tokens have is this balance of methods so for example i can do third web tokens right i can see all my tokens here and so each for each of these tokens i have this secret method that it's not showing here but it's the balance of and once we call that that allows us to kind of check what's the what's the balance of you know let's say aetherium that we actually have in our wallet so what i can do is the following we can do third web tokens and let's get the zeroth token because in this case that's i believe that's ethereum i could be wrong but in any case let's go ahead and check on third web zero nine x zero xe9 whatever yeah this is the ethereum one that we're getting so let's go back here zero xe9 yep so zero and we can do things like dot balance of and then i can put in my wallet address what this does is actually returns a promise so if i actually show you this returns a promise so what i'm going to do is i'm going to do dot then once you get this then grab the balance and let's just console log the balance there we go so you can see it's showing me that i'm getting ethereum and it's showing me exactly what the value is and what i have display value is 15. so what the 15 means is that it's saying that i have 15 eth is what it's saying that i have so let's look inside and let's see and yes indeed you can actually verify that i have 15 eth so it's actually pulling that value correctly so let's go back and so what we want to do is we want to pull the display value so i'm going to go here and do dot display value just like this perfect so i'm getting 15 right there now i need this to be an integer so i can actually parse it as an int i mean i could be 15.0 so that could be useful but i could just have it be an int as well and either one should work so what i can do is if i want to preserve the decimal nature is i could just do number that way it just puts it in a number instead of an integer and you can see that i get back a number here and then what i need to do is well if i want to update this guy right here right i need to be able to go through each of the currencies and repeat that process and add up the total so for example i need to convert all of these into usd so convert all of my money into usd okay or convert all of my tokens into a corresponding usd value so for example for eth what i would need to do is return this right and essentially just get back a number that's what i would need to do and what i mean by a number is i would need to take this number and multiply this actually by the eighth multiplier which would be multiplied by you know once i get the number i can multiply that by 3 100 right and you get 46 000 so that makes sense right if i take 15 eth multiply by 3 100 i get 46 000 and if i hide myself here you can see the 40 6 000 showing up at the bottom right there okay perfect now all we need to do is repeat this process right for the second token so in this case it'd be token one and this would be let's say my you know bitcoin and bitcoin's value would be 41 642 right so there it says i have 291 000 in bitcoin let's double check that that actually is bitcoin and is not something else seven bitcoin multiplied by 41 000 is about 287 000 so it looks like we're getting the right number of 291 thousand right there and then if we were to get the last token which would be solana well that's valued at 136 dollars so that should give you back 6800 and let's see how much of solana that we have on deck we have about 50 solana so 50 soul multiplied by 136 dollars 6800 bucks so you know not much but it's something so all we need to do now is every single time we see it we just need to increment it so one thing i do want to do before we continue is the following and what i want to do is i want to create a price a your crypto price to a usd conversion like lookup table so let's go ahead and make that so i'm going to say const token to usd like this all right and then i'm simply going to say four token of sanity tokens all right this is like a modern for loop so use this one instead of dot four each and we will simply say token to usd and then we'll we'll do token.contract address and then we'll do token to usd price okay and wrap it in number that way you get a number back at the end of the day ignore the part below this we'll walk through that together and now let's uh console log this just so you can see that so we'll do token to usd so this is your lookup table that you're going to get and to solve this error all you need to do is just say const here for cons token of sanity tokens and you can see i have my lookup table right here this lookup table i know it looks confusing and weird but this is really just saying okay for the bitcoin contract address this is the usd price of it for the solana this is the usd price of it for ethereum this is the usd price of it so that's all that lookup table is doing we will use this lookup table later in order to do our price conversions and be able to multiply what like if we get seven ethereum right we need to multiply not by a hard coded 136 but thirty one hundred dollars all right so now what we wanna do is we wanna essentially total up all of the money right exactly like we've talked about so let's go ahead and do that so what i'm going to do is i'm going to create a new function we're going to call it calculate total balance all right and this is what it will be and then in calculate balance i will say total is equal to zero we are going to do for and um let's do const token of third web tokens so use this four of loop this is a modern way of doing it and this is better most of the times than four each so we're having whatever you want to use for each use four of and um it's gonna be pretty simple all right so we're going to make it pretty simple all we're going to say is we're going to say const balance is equal to and we will get the tokens balance of using our wallet address we need to put a wait because it's an asynchronous task we're going to make our function async like this and then we're going to say just increment total by whatever that display value is that we get and then what we want to do is with that display value is uh call the method number on it because it we get it as a string so we need to turn it into an actual number and then simply multiply that right here by token to usd all right and we're just going to give it the address and this will look up our table that we've created so for example if i show you console. table and we do token to usd you can see our table right here right there's our table those are those are all the values that our table has right so it's the contract address being mapped like i've talked about earlier and now let's just call it so let's return return total and now let's do calculate total balance and up here we'll do console log total like this and let's see what we get and boom right there 345 000 which makes total sense because if you take seven bitcoin that's about two hundred ninety one thousand dollars and then i had 15 ethereum which is going to be thirty forty thousand dollars and then i had six thousand eight hundred dollars of solana if you add that all up that portfolio balance makes complete sense all we need to do is just carry around that number inside of our um in a state and that way we have access to it so i'm just going to say const okay we'll go here we're going to say const wallet balance set wallet wallet balance we'll start it at zero and then here instead of returning i'm just gonna do set to total like that and honestly i don't even need to return here in this case and then now all we need to do is actually call this function at some point so we want to make sure that we use our use effect hook here so we can do it up there or down here we'll say use effect do it like this and we'll bring this put it inside of the use effect here and then we'll just call it so i'll say calculate total balance just like that and we'll say return and let's just make sure that our console log works i'll do console log and we'll do total balance as total and we'll refresh and let's see if we actually get what we're looking for okay total balance says zero so let's see what the heck is going on there so this regular looking loop does not work inside of use effect properly so we're going to need to change that with something a little bit more advanced so i'm going to completely remove this and we're going to start from the start so i'm going to say cons calculate total balance async yeah we're going to do our usual async and then inside of here i'm actually going to do the following so i'm going to say total balance and this will await and this will be a promise not all and i'm going to do third web tokens and i'm going to do a map on this we're going to do async and for every token i want you to do the following get me the balance from that token based on the wallet address of the current user and then what i want you to do is return the balance display value and we're going to multiply and one thing you want to do is we want to wrap this into number so it is a number at the end of the day kind of like this and why it's wrapped in a promise.all is because this here will return an array of promises and then promise.all await promise.all will resolve all those promises and what's nice about this way of writing it is that it's very performant and it will run every it will essentially run in parallel it'll execute all of the things at the same exact time so it's essentially how you want your asynchronous code to be right and then the last thing we want to do here is we want to return the sum so first of all let's actually just give this a try so for this function here i'm just going to do console log and we'll do total balance like this and i'm sorry this should not be called calculate wallet balance it should be called calculate total balance like this let's take a look if that's running so we'll do calculate total balance and we will run this and i don't need to do this i'll just do that we don't even need to do that actually all right let's hit refresh let's see what happens this is not good balance this is balance of right here this token.balance of and notice what total balance is it's an array of all of our balances right in usd that's what this is so now all we need to do at the end of the day is just call reduce on this and sum it all up so for example console.log totalbalance.reduce and we'll call our accumulator on this accumulator right and our occur and then just sum it up and here's what we want the last argument is going to be this we're going to close all the parens and now you can see that it is summing it up correctly so just whenever you have to sum up an array always just use reduce and this line of code right here you can literally copy this dot reduce blah blah and copy and paste it another thing you could do is you could call it a b and just do a plus b it's like a recursive function and it just kind of like calls itself and uh this is the accumulator so and this is the second argument so reduce method give it two arguments return these two so the first thing is a function that it takes and reduce takes in a second thing which is um an accumulator and where you want the accumulator to start from the initial value so this is the equivalent of when you do like total equals zero all right so it's just accumulator so then this accumulator keeps adding to this and this curve is whatever is in the array so it's like the first time it loops through it goes zero plus that then acc becomes this value right here then it goes 20 then kerr you know goes from here curve goes from there and curve becomes this so then you add 20 291 000 to that and then you do the same process and you add it to that and then at the end you just return that sum so that's what's happening here we're getting the final result now all i need to do here is simply instead of saying console.log i just need to set wallet balance to this so we're going to go ahead and do set wallet balance to that value and now all i'm going to do is i'm going to go down here it says walletbalance.localstring i'm just going to uncomment that out and i'm going to comment this and once i do that you can see that my portfolio balance is actually rendering correctly so let's go right there let's refresh and okay let's see what's happening all right one thing we need to do to make this work is what happens is not all of this information is loaded right when the page refreshes this information gets loaded later so what we're gonna do is say hey watch out for third web tokens and let's so let's hit refresh and now once the third web tokens get updated that gets updated right there as well we can add sanity in here as well that won't hurt it's just making sure it's looking for these getting updated so let's refresh and whenever sanity and third web tokens get updated boom it fires this off because remember if sanity is not ready and or third web tokens are not ready this isn't gonna work anyway so might as well have it wait on that and once those fire we should be good to go if that makes sense okay cool so with that said our portfolio balance is now being loaded up completely accurately using the data from the blockchain and so we're already doing some of the exciting part now we're about to move on to adding modals and making our send and receive functionality work which is really the crux of this app so with that said let's get right into that all right now let's get to work on building the modal i've changed my shirt and i'm ready to freaking go you like my you like my yellow shirt comment below if you love it let's keep on going all right so basically what i want to do when it comes to this is get started on my modal so we're going to just do a couple of things to make this happen so i'm going to paste this right here and then we'll walk through what i added so i'm gonna import my modal from react modal and we need to install that so we're gonna do yarn add react model just like that so that will start installing my react modal so this is all you need to yarn at or npm install i'm gonna use routing from next because why do i need routing well check it out when i hit send and receive here watch how that route changes and so that's what we're doing here you know we're not going to a different page because this is just a you know query parameter but when we do that that's how we're actually popping up and bringing up the model all right so that's what we need to do that's why we need the router we need this transfer model this is a component we're actually going to make we don't have this component yet so let's just go ahead and make that component to start stops complaining we'll hit new folder and we will say modal like this and inside of this model we're going to create a new file and this file is going to be called transfer modal dot js and in this file we're just going to go ahead and complete it like this all right and all i need to do is just put in a couple of things here so i'm going to keep this very very basic i'm going to keep this super super basic so all we're going to do here is we're going to just simply say return all right and then it's going to we're going to have a div inside here we're gonna do send and receive and we're gonna give it a text color of black so it can show up on a white background so we'll go black like that and then just copy that styling and then we'll paste it right here so send and receive that's all that's in here and we're done with this for now and it should stop complaining next thing we're going to do in order to make this model work is add this little mysterious line and this is to anchor tag it inside of any next a next js app if you want to make a modal work essentially you have to do that little hack there okay cool next up what we need is a router so i'm going to go right here and add my router this will allow me to pull you know information from the link changing and the thing that i need to do after this is simply build out my modal so i'm going to go down here right underneath my buttons container and i'm going to basically say modal all right and we're going to say is open because it modal has multiple parameters okay so for is open i'm going to say router dot query dot transfer and we'll just do this so it means if the query exists then open the modal otherwise don't open the model so watch this right if i hit send enter so on this final version of the app if i hit send and receive the query exists so it opens it but then as soon as i click off the query doesn't exist so it closes it so we're going to use the same trick here and and then on request close i'm just going to say route to the home page so that's how when you click it and you close it it goes away and what i need to also do is wrap this button inside of a link so the send and receive button needs to actually be a link that's how that works so we're gonna go ahead and we're gonna link this just like that and this link we will create a href on this so wrap this in the link and we'll create a href and our href will say the following transfer equals one just like that cool and in terms of the modal that's kind of all we're gonna it's all all we're gonna add there so now watch this right when i hit send and receive you can see that i have a modal actually popping up here right so it doesn't look that great yet but it is working it is popping up so that's a really good sign looks like something is working all right now what we need to do is inside of this model we need to render our transfer modal so i'm i'm going to say transfer modal like this and we're just going to close it off for now so it's just going to render whatever is inside of our transfer model in this case the send and receive buttons so let's go back here hit center and you can see that send and receive are showing up so perfect exactly what we were looking for now to make this look nice we're going to add in a little bit of styling so let's go ahead and do that so what i'm going to do is for my modal we're going to pass in we're going to give it some styling so that's what this is going to this is the next thing that we're going to do cool so let's go right here say cons custom styles all right and inside of these styles i'm gonna basically just add in a bunch of styling so here we go so what this styling will do you'll see in a second but let me actually show you first right and then explain how it works i think that'll make it easier for you to follow so we'll say style and they'll pass it custom styles just like that and now let's take a look at our modal and boom so what's happening is that it's creating a black modal and then it's adding it's also making the background black there so for example if i get rid of this let's take a look at it you can see my send and receive is showing up and this so you know that's why it's like that if i go to my transfer modal.js file and i get rid of my color black here and my style black that i have here and save it and we go back and i uncomment this out when we go here oh let's do this so my send and receive is still showing up all right so for now we're going to leave this background color here you'll see why later and then overlay background color right what this does is it gives us this nice little overlay so when i hit this instead of it showing up instead of it showing up like this in the background right like kind of this gray weird color we want that overlay color to be this nice dark color right so when i click that now that looks significantly nicer so that's the approach we want to take here and now what we can do is we can actually start building our transfer model so like what basically goes inside here is what we want to start building now and just to really quickly explain this this part here allows you to center the modal and add in the background overlay and also making the modal black that's effectively what that does going into our transfer modal what we need to do is we need to create a wrapper and of course it's going to complain about this so let's go ahead and add import styled from style components like this and so now it's not going to complain instead of a div we're going to wrap this inside of a wrapper now like so so now it looks much nicer as you can see next thing we're gonna need is we're going to need to create a selector all right so let's create the selector and what the selector will allow you to do is really center the text and the choices that we have in there right so for example when i go here we look and boom how did it do it well send and receive we're in a column so we just put in display flex so it made it a row right and then we put space between so then it evenly spaces them out justify content space evenly right and line item center so it centralizes it and we gave it a certain height cool next up what we're going to do is we're going to do it where if you go look at the main app notice that when i hover over receive right it turns a little gray and when i hover over them not only does it turn does it change color slightly but when i click the selected one becomes blue so we need to add that styling so what i'm going to do is we're going to grab our options that we're going to basically add our option styling so our option styling is going to be like this all right and this will make it so on hover there's actually a background color change that's happening so watch this when i click send and receive when i hover over it's a little hard to see right now so we're going to make it so it's easier to see and it actually works and i think what might help is actually adding up wrapping wrapping those in option so let's go ahead and do that now so let's go here and we'll go option and we want to add we want to wrap each of these in the option tag just like this so now send and receive you can see have better design and when i hover over them you can see the colors changing kind of a light to a light gray in the background so that's what we need now whichever one is a selected one we need that to state stay active so whenever i'm doing that i'm actually thinking of using state for that so let's go ahead and start with that so i'm going to create a state and it'll be called action so we're going to do set action and then we're going to use state send just like this and then we're going to do selected this token part we can actually do later let's just start off with action right now and then the next thing i need to do is basically add in a selected style and add in an unselected style so if i go here if you notice this is how the selected one looks and the unselected one has these borders around like this and when i select this the borders go away so that's that's how the selected and unselected are working there so all we need to do now is in our options we need to basically add a on click so inside of our options right here we're gonna add in first of all a style all right so if i give it a style and we say the following i can give it the selected style like hardcoded kind of in there and if i go back okay let's just fix that error so it says use state is not defined so i'm just going to go here and we'll say use state like that now send and receive and let's not make it an object let's actually just give it jsx because it's already an object so we don't need to have two squigglies here let's go and try that again and boom you notice that send is now blue and if we do the same thing here for this and we say unselected style you can see that receive has that border but when i click receive nothing is happening so this is where state will come in and this is where we will need to do on click things need to change so let's add an on click and what this on click will allow us to do is we will do set action to send that i will paste that here and for this one we will set action to can you guess receive so boom update the state to receive so now that on click should be working but we just need to make our style dynamic so how i'm going to do that i'm going to just say hey based on whatever action the user selected yeah if it's send then you can choose a selected style if it's not send then you can choose the unselected style for send and we're essentially going to do the same thing for receive except for the word re send we're going to say receive right there so that's how they're going to decide how they're going to be styled so now if i full screen this and we go boom look at that it just works it's so smooth and it works beautifully great so now that we're done with that let's go ahead and add a couple of more things to this next part we're going to build is really multiple modals so we've already built this modal but on send when you click send we need to render one type of modal here for one type of component here and when you hit receive we need to render another type of component here for example if i go here and i hit send send or receive notice that this is modal this is like one type of component this is another type of component and then watch i could actually click into this and this is a third type of component so there is like multiple things actually happening here all right so we need to build all of these and being able to write in here and then there's one more type of component when you start sending eth so for example if we grab and we pick a wallet address in this case i'll just go and try to send myself something in the final version of the app so i'll copy my address right there i'll say send it to that address and we will say send one each so currently my wallet as you can see has 15 fake eth right this this won't work because we're sending to a different contract address because it's a different app but that's fine so let's just keep going i'll hit continue on here and notice that now this is a different type of modal that says transfer in pros progress or a different type of component and this is yet another type of component so there's like multiple things that need to be rendered in there so we need to just go ahead and build those out so let's build like simple components for what happens if you click send or receive so one way we can do that is we can basically go we can say you know select modal and we can turn it into a function so i can basically say this all right and this it changes based on what the state is so here's what we're going to do right here right so we have our selected modal and it's going to take in the option or which like option you you're choosing right so for example the send option or the receive option or you know the coin option which option are you choosing and based on that that option to switch case based on the option it will render whichever modal you want or what you want that modal to render so for example that's how this is going to be working so let's go down here and i'll create a modal main styling so that's it just has some padding and flex of one so it's going to take up because we wanted to take up this entire space here and let's go back up and i'm simply going to say modal main like this and inside of modal main what i want to do is i want to now render something so for example let's just say i was rendering h2 and i said yo and notice that that's popping up right there perfect i want to change this from h to that to selected modal and whatever the action type is so by default the action type is send all right so that's why it's writing send now if i choose receive notice that it becomes receive okay so it looks like it's working correctly and my selected modal function is able to choose the modals correctly as well all right now here are the models that we need to render render all right this is going to be called the transfer we're going to call this one transfer transfer the next one we have is going to be called receive this is going to be the receive model so let's start working on our transfer model because this is the nicest one anywhere right it's the most important one anyway let's go ahead and do that so here i'm going to create a new inside of my modal folder we're going to create a new file here and i'm going to call it transfer dot js all right and let's just make it let's start it off with super simple and raf ce finish up the snippet and here i'm simply going to say yowza let's go back to our app and in case when the user hits send instead of this it should render transfer like that now hit import so it should import this from the top and there we go you see yowza if everything went right and it did i'm watching it i love you smash that like button by the way smash that break that like button okay cool so that's what we got here right we got this yowza showing up that's great because this uh transfer is working and we're gonna need to keep replacing these components because for for this we need to have multiple cases and we'll work on them later for now let's just work on our transfer alrighty so let's work on our styling first things first we're going to make a wrapper all right and we're going to import style components we're going to say styled from style components just like this refresh cool and of course we need to wrap this entire yowza in wrapper just like this okay great so thing number one done then what we need to do is basically add in you know things like two and additional fields so for example here you can see our two field and our pay with field all right so let's work on maybe our two field or in this area as well so let's work on our amounts component now or our amount styling so here let's go put amount it's going to be flex 1 display flex and flex direction column why you may ask well because this is how it is right column otherwise this part would be right up here if it was not cool so amount is what we're going to need the other one we're going to need is our flex input container so let's go ahead and style that as well add the styling for that and we will need one more which is gonna be our flex input so i'm gonna let's add the styling for that all right and then we need one more and we'll break it down in just a second which is going to be warning there we go so we got our warning cool all right so we got all of the ones that we needed now just let's go build this out so i'm going to say in my i'm going to have my i'm going to delete this for now and here we're going to say amount i'm going to leave this modal right here so you can see it updating in real time as we keep adding things to it so we have amount inside of our amount we're going to have our flex input container like so inside of this container we're going to have our flex input and this will be a selfclosing tag so we can do that and i'm going to give it a placeholder of zero like so so you can actually see it at the bottom right there the zero showing up we're going to say type is number and then we'll do value and we'll add an on change as well but we'll do that later for now we're going to leave this as is then right underneath this flex input what i want to add is i just want to add a span tag and this span tag will create contain the symbol so for example we could say eath there we go all right looks freaking beautiful let me hide myself here so you can see and you can see that it looks nice exactly exactly what we're going after here right so this is this is all looking good now right underneath this we want to add our warning amount so basically right underneath this i will simply add my warning component and in here i'm going to say amount is a required field cool all right and we're basically going to say color is if amount exists then what i want you to do is give it a different color which is that color right there we'll just hard code an amount in this case we'll just say something all right and the point of this is to show you that hey if i add in an amount then it won't show anything if i take away the amount then it will actually show amount is a required field you could also do conditional rendering as well of this entire thing so that's fine or you can just make the color go invisible and that's fine too both both can work this is just this empty string is just a placeholder for now for when we actually add in our amount and we can actually keep track of it right so for example what we would want to do here is say const amount right set amount and use state we'll start it at zero we'll import our use date and then on change for whatever you're putting into this i want to update my amount so value we're going to say is amount and then we're going to add an on change here that's basically going to say hey set amount to get the e the input whatever the they're putting in the event and we're going to do event.target.value that's going to update our amount and we should be good to go with that so i go here and i press one right and we can leave this blank actually so now there's nothing there i write in one or two it shows up okay now this hardcoded i can just change it with the actual amount so you can see my error from the bottom actually goes away when i have an amount and when i remove it now it says and my amount is a required field all right so we built the styling for this part here right this top part which is the amount part let's build the styling for this transfer form part like the form that we have here so let's go ahead and do that now so i'm gonna go and um grab that styling so we're gonna need just a couple of things here let's get a divider going because uh we're gonna need this to kind of add that little add some of these divider lines to just break it apart so let's have that and then i'm gonna need to have rows that can i can style so these are gonna be my rows that i add uh field name we're going to have that be styled and then let's add in styling for my icon here this is uh what type of styling am i looking for maybe for this icon right there and we don't need this margin here so let's get rid of that let's add in for the styling for recipient as well this styling is going to be for the inputs you can see that i'm doing style.input right there so this is referring to when you're putting in the address right there and yeah let's add in styling for our coin select list so let's go ahead and do that right there let's add in styling for so this is going to be the styling for like for example when i'm able to click that type of stuff so let's go back here let's add the styling for our coin name and then we're going to have our continue button there you go so this is going to be the styling for this continue button right here so when i hover over look how it turns into a pointer right so that styling is going to be there as well and now let's just go ahead and build build this out i'm going to go all the way to the top here and we got our amount and underneath our amount we're going to have our transfer form so let's go here we'll say transfer form and then inside of this transfer form we're gonna have our row and within this note row i'm gonna have my field name and we're gonna say two let's take a look we just need to go ahead and add styling for transfer form because right now it's saying hey i don't know what the heck you're talking about buddy so let's go ahead and do that so i'll do that right underneath this divider let's go ahead and add our transfer form so now it knows what that is and there you go now you're seeing this to field get populated okay right underneath this field name here let's add in our icon so i'm gonna basically say icon just like this and we're gonna do f a wallet like that and now it's gonna be like hey i don't know what this fa wallet thing is well what this is is it's from a react icon so you're going to say import fa wallet from react icon fa just like that and now if you notice right behind my face here you will see this icon right there so that's how that's being added cool just decided to move myself out of the way so you can see the modal better all right right underneath this icon i'm going to add in my recipient all right and this recipient can be a selfclosing tag and for props we're going to give it a placeholder and placeholder just going to say address so you you can now see that address is showing up right there and so placeholder is of one thing i need let's add in a couple of more here so placeholder and i will also need to have a value but we'll add in value later once we can add it in dynamically so what we can do is we can actually just go ahead and create that right now so that's fine so i'm just going to say const value or sorry recipient set recipient you state okay and you can make this be blank here as a recipient alright so for the value we're going to say recipient and then on change we're just going to say this for e just set the recipient to whatever we have in here that's it cool awesome all right let's right underneath this row let's now put a divider so i'm going to go ahead and put a divider here cool so that added just a little tiny divider it's kind of hard to see actually but it just did a very subtle little tiny change all right let's uh work on our other row okay so we built our first row which was this field now let's work on our second row and the field name will be pay with and then we'll do coin select list so this will give us a list of coins to select from let's do coin select list i misspelled it earlier and inside of here we're gonna have icon and then in here i'm gonna use my image source and for this we're just gonna give it a image url and this will basically come from one of our coins so what i'm going to do is just comment this out for now and what i'm going to do is grab an image of brad pitt and hit copy image address and paste it right here in the source so once i do that you can see that my image is popping up right there later we'll use an image of a coin so for now we'll just leave it as that cool so what are you paying with all right so we got our icon and now right underneath our icon we need to actually put our coin name so in this camp case we can just say ethereum all right now of course we'll need to pull this dynamically in the future but for now this is fine and now right underneath the transfer form we will add in another row all right in this row we will add in our continue button so i'll say continue all right go like this we'll add the word continue and boom continue is now showing up right here we'll add in functionality to continue right so we actually hit it something real happens but for now this is totally fine this is perfectly fine and and good the last thing we need to add is what's the balance that you have for that right so here when i choose eth it tells me how much eat balance i have if i choose bitcoin it will tell me how much bitcoin balance i have right so we want to be able to put in this balance part so let's go ahead and do that here so we're going to basically create another row all right and then inside of this row i'm going to do balance title and for balance title in this case i will just hard code it to eth balance so if we go back to our app balance title it says it's not defined so we just need to add the styling for balance title that's not a problem at all we just didn't add that styling so in this case a balance title is going to be we're not really going to give it any styling so we're just going to do const balance title style div and just end it just so we can have something there and then we're going to do the same thing for balance so we're going to do balance style div just to really have just so that these divs have names but not necessarily any styling in this case so i got my balance title right here all right and now next to it what i want is really my balance so here i could do i have let's say zero point you know zero eth so i'm simply gonna to zero point or let's say 1.2 right and we'll just say eth so i've hard coded all of this we will need to make all of this dynamic so we'll need to make this dynamic this dynamic this dynamic right now it's just hard coded but it's fine and now look at this right when i hit receive versus send look at how nice it is when i hit send right send is just packed with uh valuable info all right let's bring in the sanity token because i'm going to use that token to essentially build this image out here instead of using brad pitt's image right now so let's go to transfer modal and in my transfer model we're going to keep track of another state and it's going to be our selected token and we're gonna do set selected token and i'm just gonna use state and we're gonna use sanity tokens of zero now you're like hey where is this token coming from this token is going to be coming from where we're passing where we're using transfer modal so let's go ahead and look look where we are using transfer modal and in header.js it looks like we're using it right and inside of our header.js we're going to pass it that so we're going to say sanity tokens is going to be sanity tokens and let's look for our variable sanity tokens we don't have it here so again we're going to need to prop drill this one more time all right so where are we calling our header component so let's go there now all right so maybe let's go to our dashboard.js dashboard.js page we are calling our header component here and we are passing the sanity token so let's go back to our headers and pass down sanity tokens like this and now we're passing them over to our transfer model cool let's go to our transfer model now and destructure sanity tokens it's kind of annoying to prop drill that way right but that's what we need to do and if we console log this this is what you'll see console log sanity tokens and let's go take a look at the console and hopefully i'm out of the way so you guys can see the console console properly here's an array and this array has three contract addresses right and i click into one and you can see that my logo is sitting right over there and then what i need to do is actually use sanity's thing called image builder to actually build it out so in transfer modal we just need to pass it to our transfer so i'm going to say sanity tokens sanity tokens close it out let's go to our transfer modal and let's destructure sanity tokens as well we're actually better yet let's not call it sanity tokens let's call it the selected token selected token let's go back to our transfer model and in here let's call it selected token and selected token will just be sanity tokens will be the selected token right there okay so paste that because from transfer modal we will need to select our token as well and then as soon as we do that we need this to update so that's why we're calling it selected token cool let's go back to our transfer modal now let's also now console log our selected token and let's see what we see here selected token all right and right now selected token is undefined and that's because we need to actually wrap this up in our use effect so we're going to do use effect hook all right and we're going to wrap this do this and then in our use effect hook we're going to console.log our selected token let's import use effect here as well all right so now we're using our use effect hook and now what we're going to do is let's give our transfer access to a bunch of other things so for example our this will need access to our set action hook because we want to be able to change which action is currently active let's give this access to selected token which we've already done let's give it access to third web tokens as well and let's give it access to wallet address because transfer is going to need access to all of this information and now we're going to need to prop drill and send this information so let's get to work let's go to transfer modal and here right we don't need to give it selected token but for set action we need to say set action for third web token we need to say third web tokens and for wallet address address we need to say wallet address now let's see what we have access to transfer modal and we don't have access to all of those things so let's go ahead and i'm going to copy all of these from here so third web tokens i'm going to paste that right there so now we got our third web tokens and wallet address so transfer modal now is getting access to all the info that it needs and once it's destructuring it from there it's passing it down here to transfer modal now if we go to our header and this is where we're calling our transfer modal or transfer modal needs access to all of those props as well so it needs access to sanity tokens and we're giving it access sanity tokens it should also get access to third web tokens and so let's go ahead one layer back let's add in in inside of our header let's add in third web tokens because i'm already actually passing it through and from our header let's give this access to third web tokens is third web tokens all right and then our transfer modal will also need access to the wallet address so let's give it access to wallet address now i'm going to go into transfer modal now transfer modal should have access to all of these and transfer modal is now passing all that information over to our transfer so now our transfer has access to all of that perfect now selected token is working because it's sending i can see that right here at the bottom so if i put a little gun emoji or a flame emoji come on emoji work there we go you can see that this is working and it's showing up at the bottom right there and it's showing us exactly which token uh which token we have now if you're wondering hey why isn't it showing up for you like this you know the result at the bottom what you need to do here is you need to get off and go to the main page and then when you hit send and receive it will actually show up at the bottom so the trick to getting this model to work is you have to get here and then go to the modal you can't just directly go to that link it won't work so just something you need to know now every time i run it it does work so we're good all right now we need to get ready to build the image so in order to build the image you need to actually import these two things so image url builder from sanity slash image url if you haven't installed this live package i'd recommend you go and do that now so you could do yarn add sanity slash image url and just install it like that but i already have it installed and then you're gonna need to import client from lib slash sanity so here i have sanity.js and inside of here i have my client so that's what you'll need to do once you've done that now we're going to start actually building our image url all right now to build our image all we need to do is just say const url and we're going to we're going to now build our image so i'm going to basically say all of this right here except instead of width at the end here i'm going to say give me a url and now let's console log our url and boom you see that my image is right there and if i go and click it it will actually give me my image the ethereum image okay perfect that's exactly what we're looking for okay great and how this is working is how i'm building this url is i'm just saying hey go to the image url builder alright and then use that to build this and then we're going to do dot image on that give it the specific logo and then turn it into a url so normally just gives you a ref we're essentially turning that into a url and of course one other thing we need to add here is selected token why because whenever the selected token gets updated let's just say the user clicks here chooses a different token right when it updates boom fire my use effect hook and build this out again for me let's also keep track of the state here so i'm going to basically say const we'll say image you know you could say yeah image url set image url we'll say use state start it off with null and then once this happened we will say set image url to url just like this and now i don't need these anymore remember the hack when you wanna do this right refresh and you gotta start from the home page you got to basically get out of the modal so once you get out of the modal and then you hit send and receive now it should work so let's go all the way down here and instead of this hardcoded brad pitt thing we're gonna replace this and we're just gonna say image url just like that again let's go back to our home page and now it's there check it out we did it guys look at that how nice is that right we're now getting the freaking ethereum logo so if you enjoyed that smash that like button subscribe to the freaking channel so we can get this video out to everybody and help as many people as possible become developers in 2022 perfect another state we're going to keep track of is which token is active here so for example i can choose this or i can choose another one right so let's keep track of that state so i'm going to say const active third web token and we can do set active third web token and just leave it as blank here all right and then basically what i want to do is grab that token now another use effect that i actually want to add here is so that i can actually get the token that we have the selected token find it inside of my third web and then essentially match that because what i need is i need access to the third web token that's really what i need so let's go ahead and do that now so i'm gonna do this right here and inside of here i'm gonna say hey const active token so the active token how i want you to find it is go to third web tokens and find me this and here's how i want you to find it for the token the token i want you to find is where the token address is equal to the selected token dot address all right so that's what that looks like and then what i want you to do is just console log active token and we'll say haha just so we can like find it easily all right let's update this url all right let's go to our home page and then once we're on the home page then let's hit send and receive cool and we want this to actually get updated whenever third web tokens get activated or selected tokens get selected oh this needs to be contract address not regular address so that was the bug and there we go now we can actually find it right there it's pulling our module we're able to see it and if i hit the drop down menu here i can see all of the details and view inside of it so it actually pulled the token module so for example this might be ethereum let's say so it might have just pulled all the information for our ethereum token inside of our third web now all we need to do here instead of this console log is i need to basically say set set active third web token is to whatever that whatever that token is and everywhere we had hardcoded things like ethereum or eth balance we're actually going to use and replace that with selected token so for example here we can say selected token dot symbol all right and then that should essentially give us eth or in this case we don't want to say symbol we want to say name all right so now that'll give us ethereum that's perfect this is coming from the sanity database by the way and for each balance instead here i'm actually going to say selected token dot symbol and now it's pulling that from the database and now i'm going to remove this eth here so you'll notice it just says 1.2 but we're going to copy this and paste that right there and so now you see that it says 1.2 eth perfect exactly um what we were looking for and we made it dynamic already another thing i want to do is i want to get this balance right there where it says 1.2 because that still is hard coded so we want to uh basically get that balance and do it so i'm going to create another use effect click here all right and we're going to do it like this and the dependency for this is going to be our active third web token and the for the actual inside of it what i'm going to do is i'm going to say const get balance we're going to make a async function here and in here i'm going to say await the active third web token and we're going to do balance of and we're going to do wallet address and then we're going to set the balance to be whatever it is and of course it's not going to know what we're talking about so we're going to go here and say balance set balance and its initial state is just going to say fetching like this cool so we're going to get the balance and then what we're going to do is just write a if statement here and we're going to say if our active token exists then i want you to run this function get balance and run this function every time our active third web token changes our active third token the web token being this one that you select here okay cool so let's go and see if we're getting our balance so i'm going to hit inspect here and we're just going to console log this and uh in my console log right here let's just so console log balance dot balance.display value and let's see if we get anything and you can see that i'm actually getting back 15 and that's the exact amount of ethereum that i have in my third web so if i go here and i go to my theorem you can see i have 15 eth so that looks like it's working perfectly all right and let's remove that console log now now all we need to do is just update that dynamically so all we need to do is grab this balance here go all the way down and where we have that 1.2 hardcoded we're just going to change that and write the word balance in there all right and now you can see that it's pulling from my balance that i have 15 eth perfectly what we wanted the next thing we need to work on is now we're ready to just send the freaking money over all right there's this amazing method that third web has that allows you to send the money over all right so basically what you can do is there they have a method called dot transfer and it's just as easy as that using that you're able to send your money over to anybody so let's go ahead and create a function and it's going to be called send crypto okay and this is really where we get into the really nice parts and here's how it's going to work so you see it's already auto completing even though that's not what we're going to be writing but it was already kind of auto completing for us right and so what i'm going to type in here is i'm going to say let's just put a console log in here so we know this running it says sending crypto we'll write it like that and then we're just going to check if our active third web token exists and our amount is there and our recipient is there you know normally you would use something like formic or something like a form but this is just a super simple way of doing it and then essentially all we want to do is say you know our or our transaction in this case a transaction and we can just say wait active third web token dot transfer and in the transfer what we want to give it is our recipient address so this is going to be the wallet address that we're going to put for our recipient and what the amount actually is so in this case for the amount what we're going to say is amount dot to string dot can cat and here's a really weird part part about it we're gonna concatenate all these zeros in front of it all right so this part should throw you off a little bit it is confusing like why can't we just send regular amount so if we go here right and if i go in my ethereum our ethereum is 18 decimals so it requires that we send it with that many decimal places so we have 18 zeros that we follow that up with so that's that's why we're using this here and then what we're gonna do once we send it is we're gonna console.log our transaction all right and then we're going to set our action to be transferred so right now our action thing does not know what to do with transferred if we go to our where's our switch statement is it in our transfer modal yeah so we don't have a switch statement for transferred yet but we will create one so transferred and otherwise else we're gonna say we're gonna log an error and we're gonna say missing data so that's how that's gonna be working now all we need to do is attach that button send crypto or that function to our continue button and we should be good to go so i'm going to go inside of my continue and we're just going to say on click send crypto and i guess just to make this code cleaner amount is gonna be something that it takes in here all right and here we're going to give it our amount okay perfect that's just so the the code looks cleaner so send crypto amount and then let's also put give this function a recipient because this function really depends on two things how much is the amount and who are you sending it to and we're going to send the recipient here just like that so now this function looks cleaner functional not messing with global states cool so this should send our crypto so let's give it a try now so we're going to go here i'm going to go to my receiver address i'm going to copy my receiver wallet address we're going to paste it here let's try doing one eth and let's continue at the bottom you see it says sending crypto do we have anything for if it works if it works it's actually just gonna console log the transaction boom let's go we just sent some freaking crypto how cool was that that was freaking awesome so you see we just logged our transaction right there block cash blah blah blah how much how much was sent and if i look inside of my wallet you can see i have one eve oh my god you guys if that was sick smash that freaking like button break that freaking like button smash that like button break it and turn it blue and comment and let me know how freaking awesome was that because we just said their first blockchain transaction yo okay man i'm sorry i'm just so hyped about this this is freaking exciting all right so we got our transaction working and we got the eth i can't get over it we got the eth even though we built this app and i've seen this multiple times it's just so freaking exciting cool all right we're going to refresh this let's go to that transfer url remember to remove that and just go to localhost directly first then once you go to localhost directly and you wait for this to up a load you saw my portfolio balance even went lower oh my god you guys i think this is working this is so cool my portfolio balance i'm sure was like 345 thousand dollars let's try this again this was so much fun let's try this one more time and let's see if our portfolio balance drops by one eighth so it should drop about three thousand dollars and this should become three hundred and thirty nine thousand dollars let's give it a try so let's send over one eighth and look it even updated my balance here 14 eth let's look in our third web let's refresh oh look at that 15 ethan supply and we own 14 but we're still a whale so that's nice all right let's do one eath right there let's put in the address let's hit continue and let's see what happens once this goes to the the other tab the receiver send tab we are good it means it worked send so it was sent and let's check our wallet let's check our other account right here to eth so freaking beautiful and now we'll refresh the app and we'll see if our balance is updated let's refresh whoa moment of truth yo how sick is that it updated our balance guys it's pulling our balance right from here dynamically and it is working just as expected so absolutely gorgeous amazing so we were able to send our crypto now let's make it so we can see multiple coins here and change which coin we want to choose also let's capitalize the letters send and receive here so in my transfer modal let's capitalize this r here all right and then let's capitalize this s here and with that we should be good to go our send and receive are looking great and now let's make our coin list over here so we can see more coins right there we'll build a component called coin selector so inside of my modal folder we're going to say coin selector.js and in here i'm going to import a couple of things i'm going to need so use state from re i will also need style components so let's go style components and then we'll need one more thing but for now we're we should be good so let's keep on going all right so we're gonna do const coin selector here all right whoops all right and what we can do here is actually just do raf c e so it it gives us this nice little nice little component we don't need to react so i can remove that and then we're going to destructure a bunch of things here so let's just break it off into a new line because we know we're going to be structuring a few things i'm going to set action we're going to need access to the selected token we're gonna need we're gonna need to be able to change the selected token i'm gonna need access to all of the tokens in our database and then our third web tokens and our wallet address so i'll need access to all of these things so let's just make sure our coinbase coin selector is working so for now i'm just going to say h2 and we'll say yo and let's just go ahead and add coin selector in the right place so in our transfer modal let's import it so we're going to say import coin selector from coin selector and then we're going to do when somebody selects if the action is select so for example on send do this on receive do this we want to create another case and this case is going to be case where we have select all right so what happens there so when this happens we need to return our coin selector make it a selfclosing tag and we need to give it a bunch of things so we're going to give it set action we're going to give it a selected token we're going to give it the ability to set selected token we're going to give it sanity tokens we're going to get it give it third web tokens and we're gonna give it the wallet address github copilot is so freaking amazing it auto completes all that now let's go to our coin selector and let's just go yo and we will just say wallet address to really just make sure that it's there so let's go to our transfer and this is our transfer right here and we're going to say when you click this guy here we'll change the action so let's find that our coin select list and we're going to say on clicking this here's what's going to happen we're going to set action to be select just like that so let's click it and boom look at that our coin selector component is now running so send click that boom so it is connected now we just need to do a bunch of magic and load up all of the things that we need you know so all of the tokens and all of the stuff that we need so let's go ahead and build our wrapper so we just need to create some styling here wrapper is going to be pretty basic nothing in the styling of that we're going to need a title and then we're going to need our coin list so we're going to need to style our coin list perfect and now let's wrap this inside of a wrapper wrapper click it boom shows up nicely cool we're gonna replace this and instead put title here and in my title i'm gonna say select asset let's save that so prettier kicks in select asset right there and then we're going to give it a coin list so it's going to be a list of coins here and then i'm going to loop through and essentially give it every coin that we have so let's go through the sanity tokens here and then for each token i'm just gonna say hey you know return for now i'm just gonna do this so for each token do token dot let's say name let's see if that works beautiful look at that so we are getting each of our tokens to show up now of course we're gonna need to give this the ability you know to make it look nicer then we're also gonna need to add in things like on click what happens when you click these so let's go ahead and create a coin item component so that's essentially gonna just represent one coin so let's go create a new file and we're gonna call it coin item dot js and let's copy the code from our coin selector here a little bit so for example token and we need access to sanity tokens right so for our coin item we're probably going to need to give it a bunch of stuff and then that that it can then destructure on the back end meaning we're gonna remove all of this and replace it with coin item okay let's go inside of our coin item let's hit r a f c e hit save let's go back and now when i type in coin item and hit enter it should auto import from the top here all right and we'll make it a self closing tag and we're just gonna need to give it a bunch of things so we're going to give it a key so in this case for our key let's just extract the key from here so let's go index so for a key we'll say index token will be token sender in this case will be the wallet address so let's go wallet address our selected token is going to be selected token we're going to send it a set selected token hook we're going to get send it third web tokens and we need to send its sanity tokens just like this and last but not least we need to send it the action so we're going to do set action we're going to send it to set action hook so it can change the actions perfect let's go into our coin item now and let's destructure all of that inside of our coin item it's going to be a bunch of destruction required let's go right there and let's go boom so i'm destructing token sender set action selected token set selected token sanity tokens and let's do third web tokens just like this cool so this looks good now let's say that i wanted to show my sanity token for whatever reason i could go sanity tokens of zero and let's choose dot name and let's refresh this let's go localhost 3000 and then we'll hit then we'll hit send and receive cool let's hit this ethereum and now you can see ethereum is showing up here right if i chose symbol you can see eats would show up if i did contract address contract address would show up there so this is clearly pulling from sanity all right great let's go ahead and add our styling for coin item there's going to be a bunch of styling that we're going to need for this so let's add the styling for a main let's remove all of this oh yeah style components is where we're getting the error from import style from style components let's do a full refresh on this and of course the app is going to break because we're going directly to that link so let's go to the home page first open up our send and receive open up this right there and put it on the side here cool let's get our let's get our styling for our icon so we're gonna get our styling for our icon let's get our name details which is not really going to have any styling we're going to need styling for our name balance is not going to need any styling and then whether it's selected or not we're gonna need a different styling for that okay cool beautiful so we have all our styling in place this will make sure the icon looks really nice all right so for example when i click here the icons show up nice here that's coming from all of the styling here and then we want to make sure it's all showing up in a row nicely like that so we have that as well now let's go ahead and build this out so i'm going to replace this with a wrapper here and we'll go wrapper that says wrapper is not defined let's go ahead and make sure we define our wrapper as well right above we'll put it right above main let's save let's go to localhost 3000 first kind of an annoying process i know but it's the process that works let's go right there so now all this information is showing up i don't need to put this right here anymore let's just leave that blank okay great so we got our wrapper now inside of our wrapper we're going to have our main inside of our main i'm going to have our icon and our icon is really just going to be our image url are we passing our image url from anywhere actually let's see no so we're going to need to actually build our image url and then send it so let's comment this out for now let's build a couple of states that we're going to need access to so let's go ahead and get a state for our balance we will get a state for our image url and we will need a and then that's essentially it when it comes to our state so that's that's mainly what we need then let's use a use effect hook because we'll need access to information on page render and we're going to basically do get balance i'm going to recreate that function get balance we'll say sync and we're going to say let active third web token so we'll just create that there and then what we're going to do is we're going to loop through this so i'm going to take my third web tokens and i'm going to do dom map through them and i'm going to say if my token my bad my token. address so let's rename this to be third uh web token here so if my third web token address is equal to my sanity token so this over here is really just this token here is your sanity token so we're gonna say is equal to token.contract address so if there's a match between third web and sanity then i want the following to happen i want my active third web token to become the third web token all right let's go to our local host again and then we'll hit send and receive cool we're having some errors use data is not defined so let's define new state we don't need this let's remove that and let's go here and we're going to say you state just like this okay cool now let's start our app again let's go to localhost 3000 let's hit send and receive and let's click this use effect is also not defined so let's go ahead and define use effect okay let's go to our home page let's click send and receive let's click this okay cool now you can see when i'm hovering right it's it's detecting there's three things here so something is happening it's detecting that there's three coins here one two three so we're in luck means good things are happening all right all we need to do now is just get it to show those coins that we're retrieving now let's just get the balance of that coin so i'm going to say const balance a weight active third web token this one right here get the balance of and sender is whoever sent the whoever sending the money or in this case it's just a wallet address it's just your wallet address and then at the end we're just gonna say a return await and we will set uh set balance to be display.value and we'll split it and do this right there and don't need that many parentheses cool so that's one of the functions that we needed to make we're going to go ahead and make another function and this will help us build our url so we'll do get image url all right and we will do the following so i'm going to say image url is and we have done this before so this is um not completely new stuff let's just make sure we import some of the things that we're going to need all right so let's go ahead and import these guys here because i'm going to need my image url builder from sanity i'm going to need my client from sanity and i'm going to need my f8 check re it's a react icon so it's a icon that i'm going to need soon enough so we're going to go here and we're simply going to say image url builder give it our sanity client and then we'll say dot image dot token logo and we'll do url so it'll build out it'll build out that image that we need and then we'll just say set image url to image url perfect and now all we're going to do is run those functions so let's go here let's give it a dependency of empty no dependencies and let's just run our functions so these are the two functions that we created cool and then those functions automatically update the value for balance and image url so now i can actually uncomment this and here we can actually say image url boom look at that that was nice huh we're getting the first image the second image and the third image so and i hover over right it's showing it so perfect it's doing what it needs to do now for the wrapper what i want to do is i want to give it a styling and we'll say the background color here will be based on selected token.name and if that matches then this is the color we want to give it cool so this means this is the selected token so because for example if i go here ethereum is our selected token so when i go back or when i go here it remains our selected token in this case bitcoin is my selected token so you see that color remains behind bitcoin so that's why we're adding that part now we just need to give it a on click on what happens when you click it so we're going to say when you click it we're going to do set selected token it's going to be token and set action is going to be send so it's going to send us back to the original send screen when i pick it so let's just give it a try let's pick one of these boom when i pick ethereum it just sends me back let's pick bitcoin and look at that it even updated this with bitcoin yo that is nice when i go here pixellana it has updated with that with that with solana and uh it has fetched my eth correctly let's see if it fetches my bitcoin it fetched my bitcoin correctly let's see if it fetches my solana and it fetched my solana correctly yo this is crazy right that's crazy now we're just gonna need to update this too because this is hardcoded and we need to make this dynamic as well so let's try this let's go to our transfer.js file right and let's go down here and where it says eth if you change this to whatever it should show up there and let's see if we can change this to be selected token and what what's what are we trying to read from here it's going to be selected token dot symbol now simply go to localhost 3000 again and then open the modal all right so now it says eth here let's see if i change this it says btc let's go let's change this soul wow wow and let's see if it works i have no freaking idea so sending it to some address is this the right address let's go to my receiver 0 3 f f that is it let's see if we send it to soul what happens let's hit continue i don't know if it's going to work or not fingers crossed waiting waiting waiting five seconds four seconds three seconds two seconds did it crash let's see what happened oh it worked let's go that is wild let's go right here and i can see that i have two soul yo this is this is exciting this is so exciting this makes me so freaking happy thank you third web for making my life so easy wow that's nice so looks like i mean literally almost the entire thing is working there are a couple of things that we need to add like for example the receive tab i mean this is not over yet right so let's go back to our coin item component and let's go make sure that we finish that out all right so we have our main and we have our icon that's great right underneath our icon let's add in our name details so we're going to go name details all right and inside of these details i'm going to go name and we're going to give it token.name just like this and here we're going to give it a symbol and then that's just going to be the token symbol so let's go do that is it showing up token.symbol i'm not sure why the token that symbol is not showing up but we'll look into that maybe we need to style our symbol class or something oh we don't have a symbol class so that's probably it there we go and it's showing up i was like where is it i couldn't see it hopefully you can see that look at that oh looks juicy look at that okay beautiful so we got we got our symbol showing up now what we need to do is right underneath the main we got to get our balance to start showing up too so let's go balance and we'll go token dot symbol oh yo it's pulling my actual balance look at that 48 soul 7 soul 13 eth it's pulling the actual balance for each man this is absolutely beautiful last piece of the puzzle that i need here is do you notice how this is selected it has this blue check mark next to it right and ethereum doesn't this is our deployed version we need to add that to our app so what we're going to do is right underneath balance we're going to create is selected like this and insider is selected all i'm going to say is i'm going to say hey selected token.contract address if that's equal to the current active token that we have selected contract address then what i want you to do in that case is give me my check give me my little check so let's go here let's see our check is not showing up so let's just go oh yeah what we need to do is give it a boolean here this is going to be a true or false here so let's go and wrap this in a boolean cool it's selected do we have the styling for selected yes we do what's going on here misspelling is what's going on here r d needed another d right there once i added that you can see boom it's the selected one so let's go back here pick uh we'll pick uh something different i'll pick bitcoin and when we go back look we know bitcoin is selected let's pick ethereum let's go back now we know ethereum is selected so our is selected component is working perfectly we can change coins and we can send however much solana we want or how much eth we want or how much bitcoin we want and it's working for everything so guys we are able to send and receive i mean this is incredible we're able to send money around to anybody that we want right that is powerful that is big big big point of why we use the blockchain and if you can integrate that functionality within your app i mean that really makes you stand out i mean imagine putting this on your portfolio and then going after you know web 3 front end related jobs you will stand head and shoulders above so many other people so it's all very exciting now what we need to do is it looks like this component is pretty much done right i think it's completely done actually so we're done with this component coin item and coin item lists and all of that uh now what we need to do is what happens when you hit you know really just a few things left what happens right when a person hits continue right because currently we just kind of sit there and it's awkward and you're like is it sent yet like what the hell is happening right so we want to make sure that state is is accounted for one thing we want to do is we want to have a state trans like a transferred state so what should show up after we've transferred so we're going to go ahead and update that and then we need a state for what to show when the transf when it's transfer ring so let's do action and we'll do transfer ring no we don't need three dots there we can just make it transferring like this so now we have one state for at one action another action and let's go to our transfer modal that figures out which modal to do so now we have select but we also have transfer ring so let's go here and we'll do case and we'll say transferring and we'll go like this and we'll say return and we'll go transferring so there's that state and then we'll have a state for transferred and for this we will say transferred okay transfer complete or something and we can literally style this to be like color green so this is a very simple example here now if i paste my address let's go choose a soul send one soul paste my address here and let's hit continue so now you can see it's saying transferring so now it actually shows us that it's in some pending state what we can do is add a nice loader or something like that to make it look nice that's up to you if you want to do that and then we see transfer complete right here now of course you want to center it and do all of that and you know what i like adding loaders so let's go ahead and add a loader so we'll go to react loader spinner i think this should be fairly easy to use looks simple enough and we can use this and it's also really easy to use so let's simply go ahead and download this so i'm gonna do yarn add react loader spinner and we're gonna paste that right here oh yarn add react loader spinner i'll just type it in so that'll install it now it's telling me i should add this command to the main app.js file so let's go to our underscore app.js file and let's add a global level add that so it imports that so our entire app has access to it and then i'm going to do copy that line let's go to our transfer modal actually where do we need it to render yeah i guess i could have it we could have it render right here so we're gonna do this and instead of audio i'm gonna do tail spin because i kind of like tailspin if you go right here tailspin looks like a nice normal looking loader right there so let's stick with that and let's copy this and in the transferring state we're going to make a div right here i'll go div transferring h2 and then maybe right underneath the h2 we could have our audio loader in this case it's going to be tail spin loader loading and so hopefully that works let's take a look send one soul paste the address let's send it and there we go our loader is showing up so now the user knows that it's actually sending the money right so they can wait there happily so that was pretty easy to add the loader not too difficult we kind of flew through that and you know give and just you know that was like real time that wasn't even we didn't even have notes on that we hadn't coded that before we figured that out on the fly together so if you enjoyed that give some love smash the like button and by the way just want to say if any at any time if the javascript or anything like that and this is getting too tough guys check out our course profit with react go join that course because in that course you'll master the javascript the react parts of it so then you can actually build this with us and really understand it at a fundamental level right so if that's a skill you want to build i would highly recommend click the link below and join of course profit with react you'll get so much training and you'll be able to make projects like these left and right so definitely check that out awesome so we got our spinner spinning we're very happy about that we have a transfer complete state now we can make it look a little bit nicer and how i can make it look a little bit nicer i can style my div and inside of this div i can just drop some styling like this this will help me centralize everything all right and then we'll do the same thing similar thing with our transferred one so what i'm going to do here is we'll delete this completely i'll put a div we'll add in some styling for this div and i'm going to give it the word we're just going to add transfer complete in here okay we don't need that space there transfer complete perfect so you see how it's like nice and centralized and then for transferring what we're going to say is transfer in progress just like that so let's give that a try let's paste our wallet address here where we're sending it let's hit continue and you can see transfer in progress showing up nicely if i make this say h2 for example let's go ahead and make that an h2 and uh yeah that's cool so let's give that a try now let's hit send uh okay cool looks nice and big easily visible oh i'm blurry cool we're back so our transfer in progress is working it shows up visibly and what i can do is it's right now display flex so you can remove the display flex right i can actually do flex flex and then we can actually do flex direction column so flex direction column like that put that behind it let's try sending it one more time boom paste the address send and now it looks much better and everything looks easy to see and color here we can give it that same blue that we kind of pass around everywhere in this app so let's look for that blue and it's this one right here so well i'm just going to copy that blue because i kind of like it and we'll make that the color right there so let's try sending one sole again to that address here and now you see that nice blue loader going we know the transfer is in progress and as soon as it takes place you know we it's confirmed with us you know if we wanted to get even fancier you could probably plug into the ether scan api and show the exact ether scan loader so it can actually show you exactly what percentage of the transaction is complete so that could be a fancy feature you could add and then you know the last really the last bit of it if we want to actually do that the last bit of it is really just um making this receive one look much better so let's work on our receive component so that will look like here's the final version and so the qr code is there ethereum is showing up etherdress and the ability to copy it to so you can hit copy right there so let's work on that functionality right now so we will make a new file here we will call it receive asking you she'll receive that js all right and i'm going to do the same thing we will do in my receive i'm going to just do rfce to autocomplete stuff and now i'm going to need access to a bunch of things so i definitely need use state and use effect here i'm going to need my styled components and we will need a couple of icons and then we're going to need a image builder from sanity as well so all of these imports are going to be necessary for this we're going to need two states that we're going to need to keep track of so what was copied and then of course our image url we'll need a u image url builder okay so let's go ahead and do that and we don't need asset and ref we can just leave it like selected token logo.url that should be good enough i do not need builder right there we just need to select the token receive will destructure three props and we will send it these three props as well let's go to our transfer model and where we have receive we need to actually call our receive component here so we're going to say return right and we're going to go receive and close it off like this cool so our receive component is now imported and we need to give receive we need to give receive a couple of things here the receiver is going to need our set action it's going to need selected token and it's going to need the wallet address let's go back into receive so we're giving it all those pieces of information that's good we're building our image right there inside of receive that's perfect that's all the kind of complex javascript component of it after that is just styling so let's go ahead and create the styling for our wrapper let's create the styling for our content let's create the styling for our qr container we'll create the styling for our divider we'll need to have styling for our row we will need styling for our icon we will need styling for our coin select list our coin name so quite a quite a few things we will need styling for and we will need styling for title we will need styling for our address and we will need styling for our copy button to when we hover over it it should turn into like a mouse or like a clicky pointer thing cool so now there's a bunch of styling now all we need to do is actually just build it out build out the front end all right so this over here is going to be wrapper wrapper and inside of our wrapper we're going to have our content inside of our content i'm going to have our qr container inside of our compa container we're going to have an image okay and uh this image you can write this down with me this image is going to be we're gonna hit the qr server api and it allows us to create a qr code on the fly which is super nice and the size we're going to give it is 250 by 250 and then for the data we're actually going to give it our wallet address that's it that is it it's so easy to use a qr code just use this api give it the data that you need to give it and then whenever somebody actually takes a photo of it or scans it you don't need this period here i believe you can remove you can remove that that's supposed to be a slash and um i can actually copy that and paste it so just in case i'm making any silly mistakes here which i am because i didn't put an equal sign there so now it's perfect equal sign right there data is equal to wallet address so whatever you put inside of the data the qr code when you scan it with your phone will give you so it's that easy all right now underneath actually why don't we just show this for now before we continue further and let's just see what we have so far so let's go to our modal let's hit receive all right builder is having problems like what the heck is builder no worries all builder is is this pass this give it clients and that's that's builder that's it okay cool no worries go to localhost 3000 and then you're gonna hit uh send and receive all right then hit receive and tada our qr code is showing up and if you actually took out your phone and scanned it you will get my exact wallet address that i have right there okay perfect great now what we need to do is i want to put a divider here so i'll put a divider underneath this and then underneath that we'll build our rows so we'll do a coin select list and then we're going to do the similar type of coin select list it's going to be a self closing tag oh actually no let's not make it a selfclosing tag let's do it like this all right inside of our coin select list i'm going to have my icon and for image we're just going to say image url image url like this and the image url of course is none in the start we set it here so you know this this will break make sure you go to localhost 3000 and then come back to it and we'll build it let's go right there hit receive and there we go our image is uh showing up at the bottom so that's perfect exactly what we're going for underneath the icon of course we're going to need to give it a coin name and we're going to do selected token.name all right so there we go we got our name coming through and then we're gonna do another divider that is a selfclosing tag and we're gonna do another row in this row we're gonna have a div we're gonna put a title and title is going to be selected token dot symbol and we're going to say address like so okay underneath this we're going to put the address and we're going to put the wallet address there perfect and then underneath that what we're going to do is we're going to add a copy button copy button all right and on this what we need to do is we need to give it an on click so we're going to say on click all right here's what needs to happen we're going to do navigator.clipboard.write text wallet address i'm going to do set copied to true so once copy this to true what we need to do is notice how in my deployed app when i go here and i hit copy this turns into a tick mark right that's why we're actually keeping uh track of the state if the copied is true or not because if it is true then we just make the tick mark go green and that's exactly what we're gonna do so right underneath right before our copy button finishes i'm just going to paste that right there and basically it's going to say is copy true if it is then show me the check mark otherwise show me the by copy so for example if you look at it now you see the buy copy the two copy things and when i click it it's gonna turn look at that how nice right send receive click it and it's copied man that is slick that is so slick so guys with that said i mean look at this right watch this i'm gonna pick solana let's open this whole thing up let's go boom let's pick let's go seoul and i will send one soul and we will not my own address but a different address let's just double check the address that i'm sending to is correct coinbase receiver copy paste so one soul and i'm going to hit continue and now i'm just going to sit and receive and let's see when it sends if it automatically pushes me back because if it's doing a good job it should automatically push me back so let's see what happens waiting waiting i don't actually know if that's gonna work or not oh nice it pushed me back to transfer complete actually it did it let's try sending another soul transfer in progress look at how nice that flow looks right and notice my balance you know as soon as that's done and i actually refresh you'll see my balance will be updated so freaking cool go here refresh my balance just changed let's send one bitcoin paste my address one bitcoin and my this should change my like 40 000 so this should drop into 200 000 something let's hit it waiting waiting waiting five four three two one sometimes it takes longer complete let's hit refresh let's go we just sent over 40 000 worth of bitcoin let's go inside of our wallet and you'll see i have one bitcoin right here let's go inside of our main account and you see six btc 39 sold 13 eth let's open up send and receive and click here and look at that 13 6 and 39 sold pick one of them automatically updates bitcoin balance 6 btc btc right here right go here i can copy it choose shows bitcoin go here pixellana so solana soul address copy right like look at how incredible the overall experience of this app is right like wow what a freaking wonderful app and it just works you know every single time and just does it so damn well right so there you guys go i hope that you got a lot of value out of it i hope that you enjoyed this and that this actually brought you value you know the reason why we use this stack guys is because this stack is the best possible stack for this type of application we have a super powerful database that is easy to use with point click like sanity but then it's so freaking powerful right that's the type of database we would want to use so we got that we're using third web for interfacing with all our blockchain and all the sdk stuff right that's how we're able to get all this powerful stuff here then we're using next.js for front end and style components just and then metamask is authenticating the app so i mean you have the most modern bleeding edge tech stack that is phenomenal and yeah this is a brilliant freaking application so guys all right you thought you were done but we're not done yet we just have one last step which is to take our application and deploy it online to the interwebs so let's go ahead and do that one website i really love is called versailles.com make sure you just sign up here and you have an account here and then once you have that really all you need to do is the following so we're gonna go in my command line right here and i'm just gonna do yarn build you could do npm run build or whatever and hopefully it doesn't crash here oh it did i'm gonna just do something really awful they have a way to just ignore all all your linting errors because right now it's really just linting problem so the dirty dirty thing we're gonna do let's go to our next config.js file and we're gonna just paste this and we're gonna basically say ignore lint during builds so let's do yarn build one more time and let's see what happens if it works looks like it's building so that's a good sign all right and in the meantime while it's doing that i already know where i'm going to run into errors once i try to deploy it so let's try to circumvent that beforehand so one is um from my public and my private keys so my keys so let's go to versailles let's create a new project let's yeah that's fine let's create a new project and import git repositories all right let's not do that let's just put let's try to push this project and let's see what happens excuse the snoring in the back that's my little elephant english bulldog sleeping but we're gonna rock and roll anyway so one thing i'm just gonna upgrade update because we're having these problems with deploying and it kept not deploying and so the hack that i found to deploy this is the following we're gonna copy everything inside of here or i'm gonna i'm gonna basically remove everything inside of there and paste this and what this does is is go hey does the wallet address exist if it does exist then show me the wallet pretty much the code that we had the only difference here is this will also render a button that will say hey connect the wallet so that's the only difference here that's all and apparently it bypasses the weird error we were having so i don't care we are fine let's try it now let's do yarn build and let's see hopefully fingers crossed that it actually builds and uh goes right it goes through once that happens once this happens we're just going to type in versel on vercell it says setup and deploy it we're going to hit enter and say yes i'm going to pick clever programmer you can choose whatever you want it's asking link to an existing project i'm going to say no and hit enter it's going to say what's your project's name i'm just going to say coinbase blockchain app because i misspelled it initially it's a coinbase blockchain app like that in which directory is your code located it's located right over here so i'm just going to hit enter it came on blurry do you want to overwrite settings no and now it's just deploying it that's all so let's go ahead and update the private keys for this project i got this project right here i'm going to go to settings going to go to environment variables right there and in the environment variables let's scroll down here let's put this here and let's put the link there and i'm going to say use this for production preview and development that is totally fine and hit add so now that private key is there so our deployed version won't break as a result of that so that's good all right and it's currently deploying this app the next thing we need to do is add in the ability for origins so let's go inside desk in our sanity io on localhost 3333. if you've closed this just make sure you go hit start oh wait not desk we need to just go to the regular sanity i o so let's go to that i'm gonna just go sanity io i'm gonna hit login all right i'm gonna go to my block coinbase blockchain app and inside of here i'm gonna hit api and we're going to add in our origin so i'll show you what our origin is going to be wherever this app deploys that's the origin that i'm going to add to our cores okay so this app just got deployed so this is the production link so we're going to copy the production link and we're going to paste that right there so now that's saved in course and is there a preview link that he gave me doesn't really look like it so let's go ahead and check yo guys what the heck this is in our production it's showing up all right i'm excited i'm hella hyped let's see if this works connect wallet let's go ahead and choose this wallet right here that i built initially let's hit connect yo it's showing up let's zoom out here look at that our app is showing up right i'll put myself in the corner here it's getting my exact balance let's hit send and receive let's uh go here solana 0x3ff and let's send to sol so i should go down from 39 and uh this should also become 295 000 maybe or or this should become close to zero here and let's hit continue transfer in progress waiting three two one will it work this is on the deployed version yo it freaking worked how amazing is that this app worked fantastic it's absolutely what we're looking for yeah i mean honestly absolutely brilliant the only uh bad part about this app so far is it is only connecting to my wallet so if you wanted to use it you would need to connect it to your wallet you need to export your key and what i'm talking about here is inside of settings environment variables you're going to need to essentially add in your key once you add in your private key your app is good to go let's refresh this let's see if it works yep i'm down to 188 so my balance has uh updated let's go check my soul now i'll sol you can see it says 37 soul so the deployed version is working you'll be able to use my app but i'm sure that i'll be out of this pretty soon so as long as you're watching this if this link is up great go to check out the app see what you think but i'm pretty sure that at some point this will either crash or shut down or so many people will use it that there will be no money left in the fake wallet that i created okay awesome so there you go all right just a recap of how amazing this was we built this app using nexus for the front end we added freaking sanity for the back end we added style components for styling we added third web to handle the blockchain parts we added metamask authentication to the app we took versailles and we deployed this app for sale right we hosted this online and everybody can use it and this is a blockchain web 3.0 coinbase build that just looks freaking phenomenal so with that said if you've enjoyed this video smash the like button go check out sanity go check out third web if you haven't yet and if you need to upgrade your coding skills or react skills or your javascript skills or whatever make sure to join and check out profit with react it'll be in the link below with that said i love your beautiful face this is kazi this was a huge freaking build guys i can't believe we did it and we crushed it i love your beautiful face and as always i'll see you in the next video you