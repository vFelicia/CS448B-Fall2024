hey guys what's up how's it going this is Kazi from clever programmer calm welcome back to yet another tutorial write your first django app part 5 I said part 5 in the last one but I really need to say it now so with that said I hope you're excited let's jump right into it and today do you guys hear that Wow guys I really can't believe that actually he's here yeah well anyways I really hope that I don't see any more of him so let's continue anyways so what are we doing in this tutorial we aren't gonna be doing a lot of automated testing okay so what the hell is automated testing well here let me break it down in a simple easytounderstand way for you mere mortals out there let's say you have something like Amazon right something giant with millions of lines of code are you really gonna like every time you add a new feature are you gonna test all of the older features to make sure that they're working correctly probably not it's gonna take up a lot of your time plus you're gonna kill yourself so what you're gonna do is actually write these automated tests so every time you add a new feature to Amazon let's say that you add this new cool feature that recommends new shoes you want to make sure that the ability when user clicks Add to Cart that still works when the user clicks check out that still works so what you would normally do is go and manually test it except because Amazon is so big you're not gonna be doing that so you're gonna write automated test I'll test all those things every time you add a new feature so when you add a new feature it automatically tests everything that was before it that's the point of testing okay that's kind of the beautiful thing about it okay so why you need to create tests tests will save you time yep it will save you a lot of time because let's say you were to run into a bug or someone unexpected behavior you will know exactly why it's happening or you'll catch on to it a lot faster if you have code that tests those things as you go along rather than waiting till everything breaks the whole world comes falling down and then you're like wait what went wrong yeah good luck finding the bug in your millions of lines of code right you want a quality test each thing as it comes in tests don't just identify problems they prevent them okay so this helps you identify any problematic new bugs that could be coming in and not only like identified them but prevent them before it even happens almost think of testing kind of like if you just hired people without interviewing them I mean you wouldn't know right you would hire people like this guy and you would have people who you would have no control over don't know and like let's say something was going wrong in your company you're not gonna know who to blame because you never really tested any person right but if you run through an interview or a test with them then oftentimes you don't even have to hire them and you can kind of prevent it before that problem spreads or if they're awesome then you can add them in right to your company tests also make your code more attractive so basically like your code will look nice if you have tests otherwise developers won't take you seriously and tests help teams work together so if your team is working and some complex applications will be maintained by teams write and test guarantee that colleagues don't inadvertently break your code and that you don't break theirs without knowing so this way it also helps when you get employed and you have a job you know it'll help you identify like where the problems coming from and the people who are working with you on your team they know exactly what you're thinking and it won't cause problems in your code either so those are the benefits of testing now you have some basic testing strategies something called a testdriven development it's a pretty common thing it's called TDD TDD okay and basically it's like testing as you go rather than wait till I write my millions of lines of code and then freaking test it right wait till I have 30 employees and then I'll ask them and interview them and find out like don't do that test as you go okay and now what we're gonna do is we're gonna write our first test so oh we identify a bug who look at that well they're purposely planted a bug in our code and now we're gonna use testing to solve it okay we're gonna go Sherlock Holmes all right so fortunately there's a little bug in the pols application for us to fix right away the question was published recently so you guys remember that a little method we had was published recently in our models for question well it had a little bug and basically how it works is the method returns true if the question was published within the last day which is correct so if it was within the last 24 hours it shows you true but it also shows you true if it was published in the future okay so it shouldn't say that it's recent if it was gonna happen in the future right you wouldn't say oh I recently got a car if you're gonna get a car 20 years from now when you finally get a job right so I'm just kidding you probably already have a job I don't let's continue do check if the bug really exists using the admin create a question whose date lies in the future and check the method check and check the method using the shell so first we're gonna check what's going on using the shell alright so let's go back to our code alright so the first thing we're gonna do is run our Python so we're we gonna run that from and we're gonna do Python manage that py shell don't just do Python and it hit enter like an idiot like I kind of did so once you run the Python wait this particular shell then what happens is you can like import your you know models and everything okay so now import daytime we're gonna do from Jango dot utils import time zone and then we're gonna do from pols dot models import wash T on with that said now we're gonna create a question instance with the publication date thirty days in the future okay so how does this work we're gonna create a variable called future question and we're gonna create it from the question class and we will say the pub date is equal to timezone dot now so we're saying that's published right now and then but to that time zone dot now we're gonna add some time to it okay so we're gonna do a daytime dot time Delta and we will do days is equal to thirty just like that okay now we're gonna hit enter so what I say I'm saying is like right now plus 30 days which in other words translates thirty days from now right so basically right now where I am at and what my current day for me is February 20th okay 2018 so it's gonna do February twentieth plus 30 days after February 20th okay so no it's not gonna be February 50th it's gonna be March something right cool was it published recently now we're gonna ask it and it should say no it's not published recently right it should return false except that it returns true so well there you have it we know that something with our code is broken right so since things in the future are not recent this is clearly wrong now we're gonna create a test to expose the bug so right now we expose the bug through the command line right we just use to interact terminal shell but like you don't want to be doing that every single time you also don't want to be doing that manually every single time so we're gonna write a test for it at the automat test it for us okay cool so now we're gonna go into our test file and write this code and then I'll kind of break it down so in our under our polls app we're gonna go into our tests and we will paste this guy here okay I copied over everything and I pasted it over it so what's going on we're importing date/time just like we did in the shell we're importing timezone you're importing test case and we're importing the question model from our models and how is this working the class is we're calling a question model test so the good idea is like every time you want to test a model make a class for that test okay so this way it's nice and organized this class inherits from test case that's coming from here you kind of put that in without really thinking about it okay just like look at what the Django Docs is saying and just like follow it on along it's not necessary for you to like learn about this test case class and how it's being inherited and like get a PhD in it you can but it's not necessary and then for your the name of the function that you're testing you wanna a good practice you want to like break each thing you're testing have a function for that particularly right so for example if I go into my models I have a method called was published recently so since we want to test that specific method under that class look I'm doing test was published recently right and named the test make it pretty specific so somebody who's reading your test method or your test function should kind of know what it's supposed to do just from reading the name so we're testing was published recently but would the future question so what if the question was like published 30 days in advance right here's a documentation for it was published recently returns false for questions whose publication date is in the future cool that's what it's supposed to do except it doesn't do that so now we're checking this okay we're saying hey set the time to 30 days from now that's what this is doing and then we make the future question from question class and then we set the publication date to that particular time from here line 16 and then on line 18 we're just saying hey assert if this is this however this turns to true as we saw earlier right like right here so this is gonna this whole thing 1 if you run it right now is gonna turn to true and that's really the problem that we're having right and we need to fix that or our tests will expose it how do we run our test we're just gonna go to our command line we're gonna do Python manage that py test polls so I'm gonna exit out of this exit and now I will simply do Python manage py test polls so what I'm saying is like test the polls app and then it'll automatically basically run the tests a P Y file inside of the polls app that you created run it and look it says failed failures is equal to 1 and basically it says assertion error it tried this line solved at assert is and what it found out was this was not this and so its assertion error and it says true is not false now if this whole thing evaluated to false which is it's supposed to then it would go false as false and then this thing would return true and it would throw any errors okay now as you have more and more tests in here all you'll have to do is just run that once or you can set up a where where it runs that once automatically and that way you'll only alert you if something is broken otherwise they'll just go silently that's the beauty of tests by the way have you guys ever heard the song fly me to the moon by I've been in love with it and I can't stop thinking about it's like playing in my head nonstop anyways let's continue so what happened is this Python managed that py test polls looked for tests in the polls application and explained that already it found a subclass of the Django that has a test case subclass it create a special database for the purpose of testing if I go here look it says destroying test database so it created its own database from what was happening right now it looked for test method ones whose ones whose names begin with tests ok so it's looking for everything that starts with tests if you don't have these starting with tests it won't find it ok so like let's just say it was like this and I'll hit save and then we'll also run this test pulls and it didn't even find it it said it ran zero tests and zero seconds but as soon as I do that and if I run it boom ran it created a in test was published recently was featured quiet it created a question instance whose publication field is thirty days in the future right over here and using the assert his method discovered that it was published recently returns Trudeau we wanted to return false what we found out here cool the test informs us which has failed and even the line on which the failure occurred so here it'll tell us which line we failed on line 18 right this is line 18 cool so now we're gonna go ahead and fix this bug how are we gonna fix it well this is the code that's gonna help us fix it we already know what the problem is amend the method in models rpy so it will return true of the data is also in the past so we're gonna go into models and we will change this to this indentation and whitespace and Python is important so make sure it's indented correctly underneath this was published recently method and basically we're saying hey set the time zone to now like exactly right now and then subtract one day from now if that's less than or equal to the publish and check if that's less than or equal to the self dot publish date okay so if that's less than or equal to the publish date and then check if cells that published it is less than or equal to now okay so in other words check that this publication date is in between this and this does that make sense it has to be sandwiched between the two and run the test again so now I'm gonna hit save and I will simply run the test again and now look it says ran one test and it gave me an OK and it's saying destroying the database so cool it looks like it had no errors it ran all the tests successfully if it showed me something red or said failures I'd know something failed so now it's working cool now we can also do after identifying a bug we wrote a test that exposes it and corrected the bug in the code so our test passes many other things might go wrong with our application in the future but we can be sure that we want inadvertently reintroduced this bug so it'll automatically keep checking it and we're not gonna be reintroducing this bug because we'll always find it because simply running the test will warn us immediately we can consider this little portion of the application pinned down safely forever pretty cool I think that's pretty freaking cool and now they're like alright we're gonna get into some more comprehensive tests while we're here we can further pin down the was published recently method in fact it would be positively embarrassing if in fixing one bug we had introduced another cool add to more test methods to the same class to test the behavior of the method more comprehensively so now we're gonna test was we're gonna test the was published recently method with old question and then we're also gonna test it with recent question and we already have the future question so you can only have three cases future question recent question or old question if a question is older than one day it should basically say that it's not um if the question is older than one day it will should return false it should say it's not recent if it's in the future it should say it's not recent if it's been posted less than one day then it should say it's recent so for example if we just look at this test code at a high level old question look it's asked it's making sure that it's asserting to be false so if it's one day and one second ago right so if it's one if it's exactly one day ago then what it should do is it should say yes it's still true but if it's one day and one second ago now it should say it's too late and it should be considered false okay it should be considered not recent and then published recently with recent or with recent question so if the question is as you can see here not even one day ago 23 hours 59 minutes and 59 seconds ago almost one day it should assert it to be true okay take these and we will go into our tests and we will add this into our tests okay there we go 1 2 3 4 1 2 3 4 and 1 2 3 4 1 2 3 4 1 2 3 4 or 1 2 3 4 ok so just make sure that it's all indented correctly and then that you should be good there so now we have all of those scenarios covered future old or recent question let's run our test and let's see if we have any bugs no bugs it looks like our method is working perfectly okay just so you understand this code right here it'll only return true when the publication date is in between this and that okay so this is basically saying it's within one day and this is saying it's less than now okay so if this is in between it'll match and now we have three tests that confirm the question was published recently returned sensible values for past recent future questions good again polls is a simple application by however complex it grows in the future and whatever other code interacts would we now have some guarantee that the method we have written tests for will behave in expected ways test of view so you can also test views the polls application is fairly undiscriminating it will publish any question including ones whose publication date field lies in the future we should improve this setting a publication date in the future should mean of the questions published at that moment but invisible until then all right so what are we doing here well when we post our question if it's some data in the future it shouldn't show it just like for example on WordPress if you publish a blog post for let's say you know two days later it doesn't show until two days later right you can schedule your post or on YouTube sometimes I schedule my videos and you know I'll say show this video to the audience in one week from now right so if I do show it from one week from now it shouldn't be showing it at that same time that would be crazy that wouldn't make sense just like that we also want to do with our questions and make sure that it doesn't just show out of nowhere and we want to make a test for a view when we fix the bulk above we wrote the test first and then the code to fix it in fact that was a simple example of testdriven development but it doesn't really matter in which order we do the work in our first test we focus closely on the internal behavior of the code for this test we want to check its behavior as it would be experienced by a user through a web browser okay so the first one it was like the logic of the code this one we're focusing on what happens if the user is like testing it and the user is actually on the front end of the website what does it show to them and isn't that cool that you can automatically test that every time your code runs and you don't have to like go and check if your cart is working or your blog is showing things like that all right so the Django tests client so here's a command we're gonna go in our command line and type in so I'm gonna copy this guy again and remember we got to do Python manage that py shell then paste this guy and then we will get setup test environment just like that okay installs a template renderer which will allow us to blah blah blah blah blah okay we will get this guy and then also they say something about timezone so make sure your timezone is correct mine is in America / Los Angeles if I go in my settings and show you for you it might be something different so you can go in this go to this link and look up what your timezone is okay so we're gonna import the clients and then we're gonna create an instance of the client so here we're creating an instance and now we can get a response from our home page now when the response from your home page should give you something like not found or a 404 it's because if you go to your home page there's nothing there right if you just go to right now your localhost 127 dot 0 dot 0 dot 1 colon 8000 it should give you an error the only routes that are mapped is like if you go to slash admin or if you go to slash pols remember that so that's why the home is giving us a 404 right now we should expect a 4 of 4 from that address let's just do response dot status code and here it is 404 we should expect to find something at polls though okay so let's try that we'll use reverse rather than a hardcoded URL so instead of doing like you know whatever slash polls we're gonna just do a reverse here okay so from Django we're gonna import reverse and we'll paste this guy right here and now if we do response that status code it shows me something if I do response it's saying template response status code is 200 and it's a text slash HTML file which it is okay and now we can also get the content we can do response that content so now it's showing me the content of that file and if you remember we do have unordered lists in the start and then we have bullet points so here you have what's cracking in HTML to show an apostrophe they have to do this ampersand number sign 39 semicolon that's basically apostrophe and we also have our other question what's new and you can see they're links here as well okay so this is like just showing the good version of what the user or we actually see on the front end and we can also do response a context and get the latest question list and look it gave us the questions what's cracking what's new what's up now we can improve our view as well the list of pulse the the list of poll shows polls that aren't published yet those that have publication date in the future let's fix that so right that's a problem so we need to fix that we introduced a classbased view based on list view so we're gonna go ahead and fix things in there now we need to amend it so let's go up to our views and our index view we need to fix this and change it so that it also checks the date by comparing it with timezone dot now first we need to add an import so at the top of our code we're gonna add this here import timezone and then our query set we're gonna change it a bit so where's our query set all right can we put this on one line so it looks slightly less confusing yeah we were fine we're not following PAP eight we're running across a little bit but according to my boy Raymond the og Hettinger or head injure you know according to him he says ninety to ninety five characters should be good enough pep eight I think with the whole edy character line is kind of stupid because honestly breaking this down into new lines messes up to code readability but right now this looks pretty easy to read if you just have it much easier if you just have it on one line anyway okay what is it doing it returns the last five published questions not including those set to be published in the future alright so how is it doing that it's taking the questions model it's finding all the objects and it's filtering those objects and only finding the following okay this statement here it's looking at the publication date and it's only finding so this underscore underscore LT means you're doing a reverse search and you're saying less than or equal to that's what LTE means less than or equal to so any publication date that was less than or equal to the current time meaning only past or current posts filter those and then once we find those we order those by descending publication date so which one was the most recent ones and then we show the first five that's it okay a lot going on and now we can also test our new view so now you can satisfy yourself that this behaves as expected by firing up the run server loading the site in your browser creating questions with dates in the past and future and checking that only those that have been published or listed you don't want to have to do that every single time you make a change that might affect this so let's create a test based on our shell session above sea shells see what is it see she sells seashells down the seashore okay that's a falling to pull slash test that py polls TAS all right we're adding reverse boom and we'll create a shortcut function to create questions as well as a new test class so this will create questions for us cool since this is not gonna be a method it's gonna be a function we're gonna put it outside like that this will create questions how will it create questions you give it a question text and you give it days and then what it does is it'll create a question with that number of days in the future or with that number of days in the past based on whether you pass in a positive number here or a negative number here or something like zero okay right here and then it goes into question that I've just and it creates that object in questions class and for the question tax keyword argument and passes in question text and for the pub date keyword argument it passes in the time which it gets from here cool cool okay so question view index what are we doing there question view question index view test so we're creating a new class here so I'm gonna go right there and paste it and save so now we're creating tests for our index view instead of model okay so this is our model test and what we're saying is like tests no questions if no question exists an appropriate and appropriate message is displayed so if I go into my views and you can see in my views let's see it's there is it not there or is it an RHD yeah I think it's in our HTML right index so here you can see it says if there are recent questions and show them else say no polls are available so we want to test that it actually does say no polls are available on our front end we can actually do that and right here and we say hey first check that the status code for this page is a 200 meaning that you actually find this page second test that that response that you find it contains no polls are available ok so right now remember we have no questions at the moment and then also make sure that the cert query set is equal to the response is equal to the following so this thing latest question list should be empty that makes sense right that means there are no questions so it's just a no polls are available and it should check that this is actually just an empty list cool now what we want to do is test past questions okay again this could go on could this go on one line or this will be too crazy this is pretty crazy so I can I can break that up a little bit that's fine still readable for me okay so we're saying if we create a question okay again this creates its own database so it doesn't have our what's cracking and whatever tests available anymore for these tests it creates its own database and then it destroys that database afterward so within this database we're creating a question and the question text will be called past question instead of what's cracking or what's poppin or whatever and we're gonna say that it should be dirty it should have been created 30 days ago okay so this is a past question hence test past question and then what we're gonna say is hey response get that particular page and once we get that page we want to say hey is that are the latest questions of that page contain that question and the answer will be yes it does because we just created it right here and if this thing is equal to this then the test should pass we're also gonna create a future question so this should test a question thirty days in the future pretty much the same thing and make sure that a response contains no polls are available that makes sense right because if the question is in the future then it shouldn't be available right now so I should say no polls are available and also make sure that the response that context latest question is empty because there are no latest questions it's gonna be posted in the future okay cool and let's check this guy with the recent and past questions again I think it's a little bit more readable like that you can break it down like this that should be fine too but I like it like this and basically what we're testing here is that this thing should equal to this thing and what's going on here on the dock for this as this is test future question and pass question even if both past and future questions exist only past questions are displayed that makes sense too and how does it work we create a question 30 days in the past we create a question 30 days in the future question one is called past question question two is called future question we get the pols index page and then we say that this thing the latest question list should only have the past question those created 30 days ago and not the recent question and it should match that and indeed and it should right if we did everything right we shouldn't get an error if we run this and then what we need to do is define two past questions all right now this is getting a little too big so let's break this one down now and you can indent this too okay so what am I saying here I'm saying so test two past questions so the questions index page may display multiple questions so we also want to see that it doesn't just display one question it displays multiple ones right so we have past question one which was created 30 days ago we have past question two which was created five days ago we get the polls index page and then we say make sure that the question list actually let's do it like this because I think it'll more readable actually so we want to say that this should equal to this okay latest question list should have both of the past questions why in this order because remember the most recent ones it shows it first right if we look at our views and how it does it ascending order it sorry descending order and then the five so that's why that's why I would show the past question too first and then this one right here cool basically the most recent question is just show all the way at the top all right so first is a question shortcut function create question to take some repetition yeah well we pretty much went over this whole thing so we don't have to check that and so on in effect we are using the test to tell a story of admin input and user experience on the site and checking that at every state and for every new change in the state of the system the expected results are published now that's a really important point like you're telling a story with your test guys like this is what's really important to understand so if you're working on a team with somebody and somebody's reading through your test they understand what each of your view is supposed to do and what it's supposed to return like so so so key like if I'm looking at somebody's code I don't know what the hell it's supposed to do right I don't know what the right answer is supposed to be but if I look at their test and they have like bunch of examples and what the correct answer and the wrong answer should be and then documentation I totally understand what each function is supposed to do what each class is supposed to do and then effectively I'm on the same page and then I can actually contribute to this project right I can go that's where you guys hear like hey just go ahead and contribute to open source projects this is one of the ways that you can do that understand look at their tests first and then like I can't tell you enough for those of you who are a little bit more advanced to understand the library here's a protip one of the best ways to do it is not just like instead of just reading the code go and look at their tests and they will have so many things in there and what it's supposed to do you'll start understanding how this library's supposed to work and it's how supposed to behave literally tells a story now we want to test the detail view okay so what we have works well however even though future questions don't appear in the index users can still reach them if they know or guess the right URL so we need to add a similar constraint to detail view okay so we don't want to our users to be able to reach those questions obviously because they don't exist so they shouldn't just be able to go to that particular URL okay like let's say you had a blog post like whatever your blog post is called banana so it's like John com slash blog slash banana if you scheduled it for like a month later I shouldn't be able just go to it from the URL okay so what's going on here we have the detailed view so let's go into our views let's go into our detail view it's right here what did I want us to do they want us to create a query set and do this with it okay excludes any questions that aren't published yet so filter make sure the publication date is less than or equal to then the time zone dot now that's that's it that's essentially it and those are the only ones you can check pretty cool okay very very powerful again you can see how powerful the generic method is and of course we will add some tests to check that a question whose publication date is in the past can be displayed and now one with a publication date in the future is not so let's go into our tests and let's an add the test for this so again it's a new class it should have its own methods and everything right so for the index view we created a class okay for those tests and now for our detailed views we're also creating a class okay very important now we test future question and we test past question how do we do that we create the question five days in advance we send you to the polls detail page so like for example an Instagram if you click into a image and it shows you that specific image that's equivalent in our app of polls detail or questions detail view and for the arguments we give it that questions ID from right here and as a response we get that particular URL and then we say hey make sure that the response actually returns a 404 and it will because here's how we told it and then test pass question so basically here we're saying 404 meaning it doesn't exist right so the detailed view of a question of the publication did in the past displays the questions text so past question we create the question here it's created five days ago we get the URL for the poles detail and we pass in the ID for the past question and then as a response we get that specific URL and then we assert and make sure that it can the response contains the following thing so a response and then it should have the question text in there okay it's a past question question text cool and let's see let us let's see if we're gonna be using any more command line stuff we're not so let's go an exit and let's just see right now if our tests are working in our poll slash view something is happening on line 18 what is happening ah okay it's not indented correctly obviously save up and enter and look at that all our tests ran in here and they all ran successfully so you can see all these tests have already gotten pretty complicated and they're testing our app pretty thoroughly you know this is not something you want to do manually every single time and you can already see the power of it all right ideas for more tests so we have to add similar query set method to results view and create a new test class for that view so we can also test results view it'll be very similar to what we have just created in fact there will be a lot of repetition we could also improve our application and other ways adding tests along the way for example it's silly that questions can be published on the site that have no choices so our views could check for this and exclude such questions our tests could create a question without choice and then test that it's not published as well as create a similar question with choices and tests that it is published also you can have logged in admin users who should be allowed to see unpublished questions but like ordinary visitors shouldn't be so if you're an admin right and you have WordPress blog and you schedule one in advance you can see it but other people can't just like I can't schedule my YouTube videos you can't see it I can whatever needs to be added to the software to accomplish this should be accompanied by a test whether you write the test first and then make the code pass the test this is a the testdriven way of doing it or work out the logic in your code first and then write a test to prove it at a certain point you're bound to look at your test and wonder whether your code is suffering from test bloat which brings us to the following so the thing that they say is when testing more is actually better okay so it might seem that your test is going out of control and there's a lot of like test bloat and you know what you're beautiful elegant and concise code compared to your test looks so much better that's totally okay tests are supposed to be bulky and a lot and this should cover your ass okay that's their job and so they don't have to look pretty they don't have to look beautiful they have to tell a story and have to tell it clearly so it doesn't matter right let them grow and for the most part you can write a test once and then forget about it it will continue performing its useful function as you continue to develop your program sometime they will need to be updated just like we had to update ours telling us exactly which test needs to be amended to bring you up to date so that extent tests help look after themselves at worst as you continue developing you might find that you have some tests that are redundant in testing redundancy is actually a good thing and even that redundancy is not a problem okay so the more you test the better and you don't have to go back and wipe anything clean as long there sensibly arranged they won't become unmanageable okay so the good rules of thumbs good rules of thumb include the following you should have a separate test class for each model or view so for remember for each of our models write or question model question model test we had a different class for this and for each of our views we actually had a different class for a detail view we had a different class for our index view and if we wanted to go further we could also add a different class for our results view a separate test method for each set of conditions you want to test so instead of testing test no questions test pass question and kind of like testing an allinone it's a good idea to break it down into separate different tests each tests doing only one job so here if no questions exist an appropriate message displayed that's what this is test is supposed to do this test over here questions with a publication date in the past are displayed on the end espeacially you can see each each test is trying to do one and one thing only okay test method names that describe their functions so the names themselves should describe the function of the test okay so test no questions test pass questions test future questions and once you build this naming convention you and your team starts understanding it and most of the times you guys will be able to just look at each other tests and know what your app is supposed to be doing or what it's not supposed to be doing further testing this tutorial only introduces some of the basics of there's a great deal more that you can do and a number of very useful tools at your disposal to achieve some very clever things for example so this is a pretty cool part right now we just kind of tested our backend and a little bit of our frontend but what if we wanted to test our JavaScript and how it loads and literally like moving the mouse like have the computer move the mouse and select one of the votes and click vote how does that experience work how can we test that on autopilot where it happens automatically well there's something called saleem selenium or selenium and it's a way to test your HTML actually renders in a browser okay so these tools allow you to check not just a behavior of your Django code but also for example of your JavaScript and your browser pretty freaking mindblowing it's quite something to see the tests launch a browser and start interacting with your site as if a human being were driving it and Django includes live server test case to facilitate integration with tools like selenium okay so if you want to get more advanced look up Django and selenium and you could even look up YouTube videos online and add those kind of tests within your app if you have a complex application you may want to run tests automatically with every commit for the purposes of continuous integration so if you guys know about github and commits you can make it so that when you're writing the code and as soon as you commit it I like to call it like the time machine because that's what get in version control allows you to do you can make it so then it tests it on every commit so that if any one of your commits you know fails any of the tests it'll be like hey this is broken and you'll find out right away before you actually push that code on to github and destroy your life embarrass yourself let down your family and be fired from your job so that quality control it is itself at least partially automated a good way a good way to spa untested parts of your application is to check code coverage this also helps identify fragile or even dead code if you can't test a piece of code it usually means that code should be refactored or removed that's those are some big words coverage will help to identify dead code C integration coverage dot py and you can check you know what's dead code and what's not and yeah so a lot of testing I hope that you enjoyed that in the next part of the tutorial we're gonna be learning on learning about static files management ok so that's it for this video thank you so much for watching again I do want to leave you with this I have my course the profitable programmer is just a badass course that helps you become an awesome Python Django developer it also shows you how to charge what you're worth and get your first client with Python in less than 90 days the focus is on helping you get clients helping you get work if you are interested again here's the link and the link should also be in the description go to that page and sign up and join the VIP waitlist and as my gift to you I will give you a Python earning potential calculator so you can see how much you're earning potential could be as a Python developer okay and I'm gonna be giving you that obviously for free and by joining the VIP waitlist you will be the first to know when the course the profitable programmer opens up that's it for this video thank you so much for watching as always I love your faces off and I'll see you in the next video