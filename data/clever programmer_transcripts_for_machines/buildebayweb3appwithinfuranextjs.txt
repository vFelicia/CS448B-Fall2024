in this video you're going to be building eBay web 3.0 adapt using infuria on the ethereum blockchain we're going to use rainbow kit to connect our metamask to the entire application and we're going to be using web3.js to interact with our custom solidity contract deployed using infuria and you're going to be able to list and sell your items and others will be able to come over and buy those items from you using ethereum with this app so with that said let's just jump straight into it all right let's get straight into the eBay clone and let's build this thing so what I got in front of me is basically a terminal ready to execute some stuff all right so I'm going to type in MPX leather programmer which is our custom built CLI tool just for you now I'm going to type in my email address here and let's see what else do we got after I'll put in my name and then just hit eBay now what's going to happen is you don't see it because it's on my other screen but it basically opened up an inference and you want to definitely use this specific Imperial link that this opened up because this will give you a bunch of perks now I personally already have an account within fewer so I'm just going to sign in but if you don't have an account yet you want to definitely create a new one with right here because it's going to give you a couple of perks and as you can see I created this eBay clone project now the way I did it is up here there's this create new key thingy which I just zoomed into for no apparent reason actually it's purple so you want to select web3 API formerly ethereum and then just give it whatever name my eBay project and it's gonna be like yo you have too many projects so I'm just going to hit cancel but this is literally what I'm gonna get now in here once you open it you want to hit manage key right there or it will show you this screen immediately and you want to go ahead and copy this API key this will be one of the most important things throughout this build so if you don't do anything just go ahead and copy this key and you're you should be good no I'm just kidding anyways regardless of copy that guy yup see copied it and very conveniently our CLI tool has just finished downloading this project so that's cool what you can do now is definitely you want to check for node modules in here in the roof folder and then down in the what is it next app folder so if you have those two node module folders you probably very likely ready to go now what you want to do is inside of next app create a new file and call it dot env.local that is period EnV period local now what you want to do is type in infuria and let me actually make this a little bigger that's what she said yeah should begin so what you want to type in is inferior underscore API underscore key not key or whatever and then just paste whatever key you've got there now you will also definitely keep this as a secret because the secret and um this is not going to work by the time you're watching this you can try though and if anybody gets access to your API key so this is your Warning by the way so if anybody gets access to your API key they will be able to use your inferior account which in turn might charge you if you are subscribed to paid services or just run all your free stuff out so there's that now once we've done this so once you open up the terminal and you should probably see it a keystrokes that I'm recording so what you can do here is go ahead and type in a CD next Dash app and that will basically just navigate you in here so your terminal is going to be inside that folder and now here you want to type in yarn def meaning your Dove and that should have technically opened or started this tunnel for you and what I'm going to do is just make things a little more convenient and if you pop it into a chrome congratulations you have the front and ready to go and this is what we're going to be using to build on top of after our coffee break okay this is the time to take another coffee break and go ahead and get started working on our contract so with that said go ahead and go into your contracts folder and inside there's this ebay.sol file now you want to come in here and this is basically premade contract that is ready for you all right so what can we do here so basically let's just go ahead and hide this terminal because we are not going to need it for a little bit and what we're going to be doing is let's just actually go ahead and start creating our objects trucks whatever mappings and stuff like that that's interesting I have the solution on my other screen and it doesn't look any up like that but I can imagine a scenario when GitHub copilot just puts out all the Developers let's hold their remote players out of their job you okay all right so let's go ahead and type in so let's go ahead and create a struct that will be called Product now that will have a couple of props in there so what are they we will have a address which is going to be the buyer's address it's the person who buys the product that'll be the buyer and then there's going to be another address which is yeah it's gonna be the seller now we're gonna have a uint which is going to be the ID of the product itself and we're going to have a price correct we're going to have another uint which we will be reading these products okay I put a comma because it was because my error linter was messing it was happy about the semicolon but okay all right let's do it that way though so then we're going to have a couple of strings here we're gonna have a name we're going to have a description we're going to have a category category like that and we're going to have an image URL nice it's nicely formatted now and next up what we're going to be doing is also versus like out in the wild out of out in the nothingness the Wilderness we're going to have a other U.N which will be product counter yeah yeah you and 256 you win it's basically the same thing I'm just a lazy person so I sometimes write you and but yeah anyways moving on you want to definitely map all the products and you want to map these product counter thingies so once again he went to a product and we'll be calling it this will be a public thing this mapping will be called products all right next up let's go actually just straight up jump into it and let's go ahead and create a new product list that guy all right so it's going to be list new product right and we will have to pass in a couple of things here so first of all we're going to need a name and this is the time when we're going to start introducing all these like underscores and stuff like that and memory next up we're going to have a description that we pass in then we're going to have a category that we pass in and an image URL that's smart that's actually pretty intelligent I don't know where my formatting went but there it is you also want to definitely pass in the price of the item price like that and you also want to pass in the rating of the item and don't leave any trailing commas what's up with my prettier dude all right there we go there we go okay so apparently okay so my preyear apparently doesn't work as long as the function itself is like has syntax errors which is actually smart all right now you also want to make this a public function because you want to definitely make sure that whoever is interacting with the app is going to be able to call this function so now with that we're pretty good now next up we're going to do is yeah we'll do that eventually at some yeah so next up what you want to do is we'll be creating a new instance of the products truck that we just did up here all right so this is just a definition of the product struck and like just defines what are each and every single one of what kind of traits will each and every single product have and so what we're going to do is we're going to say product memory because from the memory we're doing things and it will be a new product and this is a declaration and this will be a type product and so in here we're going to pass in an object now we will be having a buyer who's going to be address zero all right so let's take a look at that what this actually is because this is some sort of like basic fold address that is that's just a placeholder so let's take a look at what Google what father Google says especially if I was able to type it correctly meaning in solidity and so there you go the zero count is just a special use case indicate that the new contract is being deployed so basically what we're going to be using that in this case is just like this placeholder that's literally what it means what is going to default back to so this is like not a like nobody owns this one is what I'm trying to say it's like when you put an ad item out for sale there's no actual factual Pro it's like kind of like if it's at zero but because that's not an address like you got to do it this way all right there we go so like seller that's going to be the message sender meaning the person who pops open their meta mask and puts out a new item for listing and we're going to have a ID which is going to be the product counter and then we're going to have a price and from now on basically match all these to these guys but like down here so if that was weird just watch me and you'll understand a little bit what I meant to like rating it's going to be rating and then you're going to have name it's going to be name and then you're going to have description it's going to be description category you're like yada yada and now we just close that guy remove the access stuff and let's see what the issue is so this is product identifier not found oh what would be helpful if I would type without typos so product all right cool function stay commutable that are restricted to view that's completely fine as of right now because right now we're not like I don't get it why it says that but it will go away in a little bit don't even worry about These Warnings warnings are not even legit so next up what you want to do is you're going to say products the product counter is going to be new product so what did I just do this will be the mapping all right so product counter is going to be we're going to where we'll literally have a product counter that starts from zero and that will be the index so that will be the ID and we'll be indexing through all these products so what we do now is we're going to have a tuple or like an array of tuples or whatever a mapping all right I'm just running like defensive with all these parts basically so we're going to be creating a mapping that will be mapping that will map all these new products these guys to each product counter does that make sense it's like we're gonna have one first product two second product yada once we build out the entire thing it'll like all come together and you will understand what I'm talking about and then obviously you want to increase the product counter because initially it starts out at zero and then the next if you didn't do that then and you added like a second product that's supposed to depict that you repeat the same step drawing skills on point so if you stay at so if you leave product camera at zero and but you don't step it up the next product is going to be still stored at zero which is obviously not ideal so you want to like stop it I should be able to pretty much be enough for now let's actually do one more thing which is going to be a really quick one so I just want to like create a new function we call get number of fraud ducts which is just going to be like a nicer naming of something we could already do because like whenever you Define a variable under the hood there's going to be a color view function created for it like immediately anyways we're just gonna make it nice anyways and we're just going to create a call function so that will return a uint and where's the T there's the T and then we're just going to literally return this guy back and that'll be basically what we will get started with now in the in a previous video and probably we suggested a couple times but let's go ahead and go into our extensions and you want to download ethereum remix so this is the guy that we are going to be using this is basically remix IDE baked into your vs code if you know what remix ID is this made a lot of sense to you if you don't know what remix IDE is I just saved you a ton of headache and copy and codes so don't even worry about it just get it this is a remix IDE for you all right let's go ahead and click that bad boy so that will be remix IDs icon once you install it and before you do anything you just want to make sure that the compiler version which you can set out heat set right here it currently doesn't have any kind of value so what you want to make sure is that there's 0 8 16 so you want to go ahead and select that guy and now you see it says zero eight sixteen how cool is that all right let's make this small again okay and so now you want to click run and deploy and then just hit activate and that will basically spin up this thing now it also spins up your output but we're just gonna put that out of the way so what's happening here there's a couple of things that are going on so if you go back to infuria and hat back right into your project and then you hit manage key over there and then here you select you can go with mainnet but that's going to cost you a ton of money so I would just recommend going with girly and then copying this guy and then you can paste this RPC URL here now that'll help you when you're deploying and when you're like finished with the app now when it comes to deploying to Tesla it takes a little longer time so instead what we're going to be using is not this but what we're going to be using is if you go to 12 fullsweet.com ganache and then you go ahead and download this guy right here that will download an application to get in a ganache installed all right and then once you install it this will come up obviously you won't have no workspaces so what that means is you can just hit quick start or if you've been already using it you just click whatever workspace you got and you want to copy this RPC server all right so that's what we that's what you want to copy and then go back to your vs code and place it right here and then hit connect and so when you first connect your ganache to this whole thing this is what it will look like and so down here it's going to say network is local or custom just like it does it here it's like cool stuff all right you can also if you press command shift p and then you start typing in secondary you can open up the secondary sidebar thing you can just pop that output window right there and that will that way you can close it close the things down there and then just pull it out wide so you are going to be seeing everything now what you want to do is you want to have your ebay.so file open on the left hand side or like somewhere and then just make sure you selected that actually don't really have other options but just in case you do you want to select the correct one and then just hit compile let's see what it does let's see what it says let's see if our contract is good to go and ready to be deployed and compilation finished so that's cool and now what you can do is hit deploy and it is already deployed to your local blockchain ganache thingy so that's actually pretty good all right and so here are all the functions that you can do so as I said before so there we go now when you create now when you call this get number of products it's going to you say zero interesting so I'm just going to go ahead and clear this output so it's going to be nice and clean and so whenever you call this get number of products that we just defined somewhere in this contract it'll return zero meaning we don't have a single piece of product that's fine let's go ahead and create one so we're going to give it a name my first product one thing you don't ever press command a in here if you do the whole screen is going to turn into this grayish thing and you have to restart remix that's a bug I would guess probably that's what it is don't tell me I didn't warn you next up you want to put a put a description in so product description uh you know what I'm just gonna go with some gummy stuff so I'm just going to type in description category doesn't really matter for now because we're just testing it means you wear out now you would think that oh my God where is uh where am I going to get an image URL from don't worry about it it's just a simple string so you can just type in ing URL cool and then ask for a price now for now you're gonna get away with typing in one or something like that but later on you don't really want to do it because then it will cost an entire ethereum so just keep that in mind and for rating obviously it's a five out of five so that's pretty cool all right so once you hit transact which basically means like post it or like put it onto the blockchain what you will see is a bunch of like addresses guests used and if it like doesn't look super weird it like naturally feels good your developer instincts tell you that there's no error in here there's probably no error in here and another way to check that we're correct and probably this is the better way to do without having to listen to your instinct yes I'm just trying to find the optimal window stuff so I'm just going to delete it again or clear the output again and if you hit get number of products it should say one did I just write a perfect contract in here and if I was to put in zero that should hey there you go oh my God look at that so that's the mapping that's the mapping so remember when I said maybe I haven't said it but remember when I decided or didn't say it that mappings create their own cofunctions so that's why we only created a get number of products thing right so when you create a simple variable that doesn't create a call function under the hood but mappings do and so here what we did is we know that the first product that we put in there is because we're developers we start counting from zero zero one two three this is how we count now first product that we put in there has an ID of zero so this will be waiting for a zero it's about a counter again just put that guy in there call it and then you get back everything that isn't gonna that is that you've just saved into your product now here's everything Let's uh all right so with that said so with that it is time we go ahead and create a function that will allow our users to purchase these items that are listed so purchase I think that's how you write it item nice and that will actually be waiting for a you and ID so we'll have to pass in the ID now this is going to be a public payable and payable me just means that oh you gotta like there's going to be actual factual transactions going on in there so you gotta basically enable all these functions for the function I realized that sounded a little weird but that's what it is now right in here what we're going to be doing is we're going to require a couple things so what we mean what I mean by requiring a couple things is we need a couple of guard functions or guard Clauses is what I meant and that happens with the require keyword so let's go ahead and get started with that so what we're going to need is message.sender we're going to double we want to double check the price obviously that it's the correct prizes being sent so if the message sender no not the message value is less than no equals or more ah actually we should go with equals products.id so here's the tricky thing let's actually just generate the product instance in it so we're going into the product and then we're gonna say storage and then we're going to say product again because this is just going to be a local instance of the product itself all right and then we're just going to say products ID but it has to do there's a lot of products I'm gonna go again to the mapping that's products and then check for the ID that's being passed in and then I'm just storing that in here and this is literally just the type of that variable and storage is that oh we're going to be reading from the storage so that's uncomment this guy so we're we literally need that the message value is the same as product dot price yeah and if that doesn't happen we will just say invalid amounts and for product or something and that won't tell the user whether they sent too little or too much but there's a security feature so we're not gonna bother that now we also want to make sure that the person who's buying the product is not the person who is trying to sell it because that's like like a churning type of thing all right so next up what you want to make sure is that the item hasn't been purchased before how do we do that you ask so remember when we get started the buyer is going to be the zero guy so we also need that that the product the buyer equals that address zero because if it doesn't it means that somebody else has already purchased the item so make sense so it's product buyer has to be that zero guy because if it isn't that means somebody purchased this item so I damn has been bought or something like that I don't know I'm just gonna say that whatever that was yeah that's pretty much what we're gonna go with for now and so next up you also if you don't want to buy your own stuff so message dot sender cannot be equal to product dot seller and so yeah seller cannot buy own prod their own product and we could just eliminate all these typos all right these are basically the guard causes that we're gonna be rolling with for now this should be pretty much enough for us to go for it now at point you want to transfer over that item but before you do that if you want to make sure that the product is paid for so here's where the payable comes in product.seller is going to be the person that receives the amount of money and you want to transfer that amount which is the message that I value so basically what this does is this person will get this much in short all right so that being said we should technically be pretty good to go and move on to redeploy this contract onto our test server and then test it out once again so let's do that let's go into our ethereum let's go into our remix guy hit activate and let's see what do we got oh yeah nice the output thing came up so there's like all this like history and stuff I'm just gonna go ahead and delete that because we don't need any of that same for that same for the output cleaning let's just go ahead and hit compile and wait for it to pass oh compilation finished nice so that's pretty good and I'm just gonna go ahead and hit deploy so there it is okay there's a couple of things that are going on in here the remix IDE is now recognizing our new contract so get number of product zero that that makes sense so we're gonna say first product to sell or for sale description you're gonna have a category it don't really matter it really doesn't actually image URL and we're going to set I'm just going to say 10 because that's going to be like very visual in our ganache so what we're going to be expecting to do is that this account sells the item for 10 ethereum to this account so I'm expecting that this balance will go down to 89 ethereum and this will go up to 69 ethereum all right let's do that and the rating is five obviously you only sell the best stuff nice so there's that and so now what I'm going to be doing is just double check that we have the zeroth item there you go price ten noise so how do we purchase with this guy so first of all you want to change the account that's going to be interacting with the contract so we are in purchase mode now and what we want to do now is we're going to say purchase item zero you want to put the zero in there but don't hit don't hit it yet and here oh I think we put the price in way I believe so maybe not let's see that's probably in 10 way we'll see in a little bit so if I just put in tan there you go oh I just deployed it again okay I'm just going to go ahead and transact and it apparently went through now nothing really happened here wait wait we should technically have purchased this item I'm just going to clean my input and let's go ahead and check on the new product again so we see that the seller is still that person but the buyer is this guy and so even though we expected this to change this actually didn't because when you put in 10 here into this price thingy the contract is always talking in or like always expects these numbers or like whenever we are talking about values in way so what is way is like a super small amount basically so we're gonna say eth converter ethereum unit converter efesh converter.com so basically what you want to do is put in 10 here and if you wanna if you want something to cost 10 ether you will want to list it at this price it's just like dollars and pennies and cents and whatever so that's basically what it is so you want to copy that guy had back right here and so to be able to double check what is happening I'm just going to delete everything once again set go back to my original account and compile it again because that never hurts deploy this guy again because that doesn't hurt either and then go back into my eBay and then I'm just going to say product because I'm gonna make it fast description and I go right nice imgurl and then price I'll just paste that guy there and I hit five on rating transact nice it went through and clear this whole number of items we have one item in there zero call that guy and we can see that's the price so that's we can either copy that and paste it here in the value or we can just go ahead and type in 10 but then select ether and then you just want to hit zero there and change the account TD buyer account and now hit transact boom so that apparently went let's see what do we got on here so as you can as I explained it earlier and then put in the wrong price but now with the new price this went down by 10 ethereum and this went up by then ethereum so like rewind back if you don't believe me because I literally have video proof of this so that's basically how our thing works and by the way if I want to buy it again it is first of all I didn't specify the amount so I'm just gonna put in 10 ether again so it doesn't it cannot send that back but then it says item has been bought and then if I wanna uh check the other error and then I put in yeah 10 transact again yeah item has been so like there's a bunch of checks that are going through here and because the item has been actually we will not see the other the seller cannot buy their own item but like you can just create a new item try to buy it with the seller and then that will pop up so that is basically creating the contract them and testing it out that should technically have given you a pretty good understanding of how this whole thing works and what we're going to be interacting with throughout this build so with that said I'm just gonna go ahead now and let's deploy this guy all right now that brings us to our contract deployment so let's go ahead and at this point there's another extension that we got uh that we're gonna install so it's called truffle where am I even typing sorry that's truffle now this is the exact one you want to install so truffle for vs code this will open up this will add this guy right here and so this is your personal this is going to be your truffle now here what you will need to do is if you have any kind of other projects a link to it or maybe not what you can do is you can just say connect to network and then just hit inferior service and then if it's your first time using this extension it will pop open your your browser and that will let you connect to inferior but however if you don't have that or however if you've used it already it will just fetch all different projects that you've worked on before so in my case I just connected the wrong project again so let's just repeat that one more time so we're gonna go with inferior and then hit eBay clone so now that we have eBay there that will basically enable us to go ahead and deploy everything through inferior's RPC URL to the girly Network now what that will enable us to do is if I go back right here and then I right click the eBay clone and then I go ahead and hit build contract that will pop open my and it literally just said everything is up today yada yada finished okay that's pretty good it's because we already compiled it with uh wait what is it with the remix so I'm just gonna go ahead and remove the artifacts folder and now because it already recognize that oh we built it one more time there's another option that we can generate the API which we will need it's just by typing in trouble compile so there's that and with that it just created a new builds contracts folder and this is your API that we're going to be using later on in the build you know what while we're at it let's just go ahead copy this file and then go back to utils in under next app and then just paste it there it's going to be helpful let's just do that it doesn't take much time now what you want to do next up is go ahead and hit deploy contract okay so once you hit that will basically just give you a bunch of options on like where you can go ahead and deploy it so step one we're going to go ahead and deploy it on girly hey what did I just do boy oh curly there you go now we want to leave the gas price completely alone and empty that's fine and at this point you can go ahead and paste your mnemonic or generate a new mnemonic now if you generate a new mnemonic that will not have any kind of girly eat on it however if you already have a metamask that is connected to the girly Network and you unlock it see I have 7.3 girly eth so that's pretty good I can gen uh get that mnemonic from going here settings advanced not Advanced maybe security yeah and reveal secret recovery phrase so if I hit that I'm not gonna but if I hit that'll show me my mnemonic and then you can just paste it there and then you will it will generate you this EnV thingy now I've already done that so I'm not going to do it again but if I was to do it it will generate it would generate me a new one like this so I'm just going to use the one that I already saved and when you click that it'll take a little bit of a Time to get started with this thing now you want to definitely check your notifications because that's where this HD wallet provider thingy is going to pop up so you want to install that every the first time when you're deploying something so it'll take a little bit of time and then after that you are going to go ahead I'm just going to go ahead and deploy everything for you it still looks a little interesting to me so we're just gonna go ahead and try this one more time now oh so the reason why it like doesn't give you anything besides oh yeah it's deployed is because we don't have the migration set up so let's actually go ahead and do that the way it works is you want to go into your migrations folder and create a new file that you will call one underscore deploy.js or whatever and in here you want to create I'm going to import eBay from the artifacts are DOT choir and then you put in eBay now this has to match with the name of the contract so you want to double check that if you were to be a rebel that uses it for naming I know I used to be one and then you go ahead and say module exports async function deployer and then wait deployer.deploy eBay a lot of deploys deploy they play to play all right now you're gonna go ahead I'd like to clean my output a lot of times because it just clogs up and I don't know what ends where and now we can go ahead and hit deploy once again and when this guy runs through and finishes off oh it's still deploying okay so because it's a task that it actually takes quite a lot of time to deploy it so that's completely fine it's running through a bunch of blocks so there's that whenever it's done it's going to say deploy succeeded now you want to scroll up to contract address and this is your contract address so just to double check let's go on to my Safari I'm gonna say girly white girly Dot etherskin.io and that's the official ether scan and there you go now as you can see done I just deployed this contract and if I'm not mistaken that's going to be my wallet address let's see yup that's it that's that there you go now you just deploy it to girly now the next app we're going to deploy it to our ganache as well why a pretty valid cat question reason why we deployed to ganache and Gurley as well is because we're not going to be changing anything on the contract so like right now we're just going to deploy it to Gurley and then we're going to deploy to ganache but we're going to use ganache throughout the build and while we build it because Gurley is a slow Network compared to ganache when it runs on your local network it's always going to be faster it's always going to be a better developer experience and I want to speed through this build at the end or after the tutorial feel free to go up save this somewhere like you want to definitely go ahead and save it in your constants and then be like oh I don't know you wouldn't be export const for cons contract address or something like that so export counts the dress and then you just want to put it there but I'm just gonna comment it out for now because we're going to once again as I said deploy to ganache and then after the build is done and then you take down ganache you can just swap it swap out the address and then just make sure you connect the girly and you should be good to go switching Networks so once again I'm going to go ahead delete or empty out my output and then go ahead and deploy this guy now I'm going to type in local and it should be good and as you can see and as you can see it is like way faster like it's already done this is why we're going to use glitter so now I'm just going to type in export cause address once again bam and then you can put early after this and oops after this and so that way you're like not gonna mess up let's play now the next thing that we will be doing is you should have already installed with a CI you didn't have to do anything but you already have access to web 3 from web free you want to go ahead and employ import the ABI from this Json let's do that too so what you will say is contract ABI from ebay.json nice so next up what we will be doing is going to say con cons ethereum from window so basically this is just a structures ethereum from window window is literally all the code that's running in your browser and then ethereum is just a part of it so when you destructure it you will have an uh you will have a variable called ethereum all right next you're gonna say if ethereum but not with an exclamation point so if you have ethereum you want to go ahead and say const web 3 equals new web3 and then put in ethereum right there and then you want to return new web 3. that exactly this new web3.east.contract and I'm passing the ABI and the address now the one thing sometimes people forget is the ABI file itself has a bunch of things that are going on in there so there's this contract name there's the API that's exactly what and then like there's all this metadata and the random stuff that's going on yeah like all this stuff that like your app doesn't even need to worry about now option A what you can do is delete all this stuff but I prefer not to do that and instead it's just an easier solution to just contract maybe add an API and that literally takes care of the entire thing and and that's it you're good to go so with that said that is basically the deployment and now let's go ahead and create a nice little connect metamask button alright so I was told that this is the time that we go ahead and connect our metamask to this application so to do that you want to go into your app.js file now this is a bunch of things already imported so now we're just going to import a few more things so first of all we're going to be importing is just a stalling style file styling so from rainbow kit you want to go ahead and import styles.css it's their own specific styling and then you want to go ahead and import chain I'm going to import configure chains you also want to import create client create client yup and then wag me config here from blackme you thought it was going to be rainbow and then uh that's pretty much it oh wait no there's one more thing so we're gonna be importing get default wallets and rainbow kit provider and the Dark theme from that rainbow me slash rainbow kit and then you want to import two more things one of them is going to be the infuro provider from wag me slash provider slash infuro and you also want to import the Json RPC Provider from the same place or like almost now that suggestion was not good it's actually Json RPC like that so not Dash RPC okay so once you have these now we're gonna go ahead and set up a bunch of stuff now with that done let's go ahead and configure all the stuff that's going to be allowed as a user so like basically all the chains that the user will be able to connect to and all the providers for those chains we're gonna have chains and we're gonna have Pro VI and this is like not from anymore so we're gonna have configure chains and we are actually going to have two rays in here so in the first array we're just going to say chain dot Gurley and chains that's where we're gonna be coding in the next stop we're gonna have the inferior provider which is going to have an API key and for a little bit I'm just going to leave it empty but yeah and then we also want to make sure that the priority on this one is the highest so basically there's going to be two providers in here because we imported two there's gonna be inferior provider and there's going to be RPC the Json RPC what we're going to do is whichever chains a user selects you want to make sure we use infuria primarily however if they don't support that specific chain then we're going to have this Json RPC which is just literally the most custom RPC Rider out there so next up let's configure that secondary provider and it's going to be the Json RPC provider and we're gonna have to put in a few things so first of all priority two that's the secondary provider in this case and then RPC is going to be we're going to pass the chain and we're gonna go ahead and type in HTTP and then once again you want to put in this specific RPC address I'm not even gonna say it out because I didn't even want to say it out and that should basically wrap up all the providers that we got out here so these will be used in a little bit now I just want to like jump back right in right here uh to the inferior one and if you remember right at the very beginning of this app we actually saved our inferior API key here in the dot EnV so you want to go ahead copy that name and then come back right here and then you want to say cross dot EnV Dot and then just paste whatever name you gave it and um it should be good to go now one more thing you want to always restart the server so you just want to run your end up again and that will that would allow the application to read the end vehicle it probably already has but just in case it doesn't sometimes it helps and it's just like a safety measure okay so next up what you will want to do is you want to create a new const which is where we will destructure connectors from connect errors and it equals get default wallets like that and now we're gonna say app name it's not even Instagram it's eBay and we're gonna say up name eBay and then we're gonna say we're gonna just literally just gonna pass in all the chains we're just gonna pass in all the chains that we provided here so basically fees are gonna be the only change the user will be able to choose from when they are interacting with our app and then next up we're gonna have a whack me config and that'll be a create and then we're just going to go ahead and create the client with this specific function and then we want to pass an auto connect make it true you want to pass in right after that connectors and then you want to pass in provider and that should pretty much wrap up our setup for this for this metamask connection now there's a couple more things it's not that easy so come here like I'll just command x on it so I can just paste it back and whatever so once again copy that yep and then I'm going to say wag me config and say client and I'm passing Wegman config hey config like that so that closed nice and now I want to say rainbow kit provider and and then theme dark theme that's pretty cool and you can also like you can also enable cool mode now in that case you will probably have to import it yeah so let's import cool mode maybe you don't have to interesting okay check out we'll see if we have to import cool mode anyways it's just like a nice animation that's always it's not that important but before everything you want to make sure you pass in like into the chain selector like all the chains that's pretty much how it's supposed to be look like that's pretty much how it's supposed to look like and now in between all this you just paste that component thingy right back and now we should technically have access to all the connection now there's one more thing that we will need to do and that's going to be in our index.js file now in here you want to go ahead and import connect button from look at Rainbow meet alright so we got that copy that guy and then right under here online 30 line 2030. you want to put in connect button and that should enable yup there you go there is your connect button so that's pretty much that's pretty much a connection I'll show you guys what cool mode is if it enabled itself or if it didn't we'll see hit that that was cool that little animation that was cool man I'll show you once again because it's see and now it won't do it because I canceled it once but there you go that's cool mode hit retry and hit connect and there you go that is your metamask connection you just built it it is done it is so done it couldn't be any more done it is the most done metamask Connection in the done metamask connections history whatever leave it so with that said we're pretty much good to go to get started connecting the actual contract to the front end with that said I'll see you right there okay so it is time to go ahead and start connecting our stuff so we're gonna be doing mainly all kinds of Connections in the context so let's go ahead create a contact folder and then inside there you want to create a context.js file and uh let's go ahead and start importing stuff so we're in one definitely import create context we want to import new state use effect and use call contactor like that from react all of it and then while you're at it go ahead and import use account from wagme which is just super nice and easy way to get all the Account Details so yeah there's that and then you want to import web3 with a capital W from web3 with a not capital I believe and then you also want to go ahead and import create direct from euros and constants which is by the way con yeah this exact uh function that we created earlier so we already built that all right so you want to type it you want to go ahead and actually start creating the contract over here no context so you might say I have context and go ahead hit say create context and then next up export const and it's going to be app pro provider and that will have this children thing in between children that's pretty good and then create the function itself now What's Happening Here I think okay there you go and then that will basically return stuff so let's go ahead and return actually before we return anything let's do the test file or the test variable equals test whatever and now we're gonna return stuff return and we want to say app context dot not contest dot provider yeah and then value I was like garyvee would say I'm going to say test and close that bad boy and then just pop in chilled right there so that technically should be pretty much good to go in terms of a context thing now what you want to do is just make it a like you wanna we're gonna set up one more thing that's gonna make it just as much more easier so you want to say export cons to use uh context just like it suggests right there and uh you just want to return use context and then passing app context basically what that will allow you to do is you will have to import I believe less and it would just make made a hook out of it that's literally what happened okay let's go back to our app.js file and and in our app.js file what we will do next up is go ahead and import the app provider so I'm just going to go up here and make it like separate so there you go app provider and this bad boy I just put it like right here like right around the component actually we should be putting it outside of rainbow kit reason is Rainbow kitten might use stuff that is available in the provider so you want to allow that connection to happen and that's basically what did I do app contest for real okay that should have fixed it nice and just to test out this context thingy you want to open up your console and then inside of index.js you will you can go ahead and import use app contacts from context like that and then down here just go ahead and destructure test from the use up context thingy and then you'll just want to go ahead and console.log and if it says test in here our console as it does and my friends you little just created a perfect context and you graduated to move to the next step of this tutorial so congratulations on that if not just double check that everything that we set up here in the context and in the out.js file is correct and then let's move on I'll before we actually move on I'll just remove all this test related stuff because we don't need any of that you can close the app.js file remove that guy and then for a little bit we're going to be working inside our app provider we're inside our context we'll build a couple of functions and it will be done in a matter of no time I'll see you soon time to sell some products and what we're going to be using for that is our context so let's go ahead and get started setting a few things up here so what's your what we're going to do is we're going to create a couple of view States so there's going to be a contract side con track yeah like that and then you stay snow and then we're gonna say we're going to have a user user address set user address just like that might as well save it from typos and then one more is going to be prop doc handset products these are all going to be used later on in the app first of all this is going to be used this is where we're going to be storing our contract instance that we are generating with this guy next up we're going to have a user address which is we are going to be like saving like straight away so let's actually do that like right now so cons address and equals news account let's destructure that bad boy and while we are at it let's go ahead and set up a use effect that'll actually speed so whenever address changes what we're going to do is say set user address to address and uh we just addressed this situation all right now what we're gonna do is before we move any further we should Techni we should just go ahead and set up the contract situation as well so set contract open this guy and then create we don't have to pass in data just because that's not bad it is that's a different address we have access to that address so once that once this guy returns its thing it will be set into this contract thingy so basically every time you open up the app you will have access to all the contract connections immediately so that's good that's pretty good we are good there now you want to go ahead and create a function which we'll call sell item now actually let's just go ahead and let's figure out what we are going to be what are we gonna need for this so they're creative so we will be calling this this new product thing function and we will have to pass the name description category email price email image URL and rating always we'll have to pass them in so we'll have to account for all that I'm just going to leave this on the side just like a little peek like reminds us for that okay let's do this with an acing function because this is going to be an asynchronous situation and from the front we're going to pass the name we're going to pass in description we're going to fasten category I'm going to pass an image URL we're gonna pass in price handwriting it's basically everything close that bad boy little arrow thing and open the paren now thank you prettier for making my code look nice now you want to make sure that before any kind of interaction happens with the contract there is like the contract actually exists so return it's like card clause and then if that checks out you want to have a try catch functionality which will catch any kind of error that happens and then just console logs it out console error actually let's just put that there and then we can forget about that so error handling nice next up try so what we're going to be doing is immediately because the youth remember what we did with the the contract we expected that it was going to be in ethereum or in ether but that's not reality contract works with way and nobody is going to type up that many serials so we're going to say price in way and we're just gonna convert it and we're going to be like okay and luckily web3.js has what is built in so we can call that web3.utls.tooway thing function let me just pass it in price and then happen pass in the the currency that we want it back in so in this case it's ether sorry the other way around we pass in the prize in ether and because it's ether we'd tell them like what's the initial values currency and because it's ether it's gonna be stored in Whey right here and then I'm gonna go ahead and wait contract methods and this is where we actually go ahead and call the list new product function and so that requires once again name requires description what was that description requires category probably everything that that we have here prescription like I could type it out once but I couldn't type it out for the second though that's fine encryption category image URL price rating let's just double check it here as well I think we should be pretty much good to go here now oh my God copilot is so nice it like added this part as well so I'm just gonna explain it now so far this is how far we went and so because we are creating and adding data onto the blockchain like we want to store something on the blockchain you gotta pay for it all right nothing is freeing the web 3 words so before we can actually wrap this function up and as copilot was already suggesting we have to send in some ether and that's going to be coming from the user address which we already have saved which we already have saved it in in here and then there's a couple more things like you want to set the gas fees to the this number which is three and then this is basically three million all right and then I'm gonna set guess price to null these are like optimization stuff so it like the transaction is going to be more optimized nice that's basically what we are cooking with right now and that should technically lists every new item that we throw at it let's go ahead and connect this to our create button right here so far actually not even the create button I was wrong this list item thing so if you check this should technically already work because that's how our project comes so you want to go ahead and go into the model file model I'm going to go ahead and go into the modal file so once you entered your modal file I'm going to go ahead and import the use of context thingy and then destructure cell item out of it now if you actually have one brain cell like I don't if we don't export this from our contacts we're not going to be able to import it anywhere else so all right we're we are we are all here to to learn and improve myself include it so you've got the sell item function oh that's pretty cool here's our handle submit function which is already connected to the button nice and so what you want to do is before oops before we move any anywhere any further I'm gonna go ahead and say event dot prevent default and what that will do is like it will prevent the website from refreshing whenever you hit that button sometimes you like need it it's like a reacting so we're going to be using that and so next up if there is no name if any of these fields that are required basically for this transaction to go through meaning name it the description category price and or rating any of them those are the pipes though all of them say not name or not the script like that's how you like read it out if any of them don't exist or return a falsy value which is an empty string is a falsy value then we're gonna display a toast error message which we already set up for you and we're just gonna return and we don't even want to like continue the process so see how cool is that that's pretty cool if you ask me so that's there's that now if however we're good on that end and that doesn't happen else or you can just say else we can't say toast dot promise and the reason why we're doing toes.promise are not like a regular JavaScript promise is because the toast thing is going to keep loading as long as our promise is not successful so we're gonna have the toast handle our async function and then our async function as long as it check lasts as soon as it checks out our toast is going to turn a little nice check mark so let's do that so toast I promise and we're gonna say sell item and pass in all the stuff that we need to uh need to pass in so name description category image URL and then next up we're gonna pass in a little bit of a function and that'll basically just change the toast message all the time so as long as it's loading we're gonna be like listing in progress please wait and maybe an hourglass Emoji or something that like makes it nice and then next up we can just Define the success and then can be like okay item listed successfully and if there's some sort of error and airlifting item please try again whatever and with some nice little emoji play we should be good to go so let's go ahead and try that it should into your work if it doesn't and probably made a mistake somewhere along the way alright so with that being said let's go ahead and search for a rug and let's just grab an image whatever this looks pretty good this is a puffy rug shout out puffy mattresses for providing us with the image this is free marketing for them nice so we're just gonna call it a puffy rug and once again shout out for a puffy mattress puffy mattress all right let's go ahead and upload this image right there shout out internet speed nice you can crop it down whatever don't even worry about that okay so it immediately says set image URL is not defined that's interesting okay so that means that for whatever this you state is like set up interesting okay meaning that some stuff was like hello now there it is what do you mean it's not there and you want to definitely put that guy in there so if the IMG URL doesn't exist that should make it fail too however we are passing it in here yeah this is the like one of the biggest drawbacks of using stuff like copilot because you'll just look over a couple of mistakes that you're making along the way I mean I'm glad we like have this here that's helpful all right all right let's start again puffy rug and Shout Out puffy mattress oh yeah Double T that's who failed her English classes no me though put that guy there shout out internet speed and hit done okay there's no issue there and then let's go type in perfect four rug pulls ha pun intended category rug whatever price this is how when you like literally want to start becoming more and more careful with what you put in as a price and also want to like switch to the localhost networks like ganache nice because otherwise it will try to put them to girly but we're not but this address is not ungurly so it wouldn't fail again so once again prize okay actually here you can look at like bigger numbers I'm just gonna go with 0.1 and then rating obviously it's a 5 out of five Co ahead hit confirm on that guy and item successful listed now the only problem is we don't see yet so let's go ahead and do that go ahead and make that happen all right so we got the selling done this is now time we go ahead and display all the items that are like listed for sale so let's go back right here as we can see the product state is like still like empty and if we go back to index we also have this dummy products array so like the app doesn't break so what I'm going to be doing now is I'm going to destructure products from use up context and that way I technically changed that dummy empty array to the array that we are going to be fetching from and let's get rid of all those runs and stuff lining up okay that's fine there so now it says products man it says undefine it okay that's because wait oh of course duh once again if you don't export you can't import it's like a pretty good all right there you go now here is a way it's got a little bit has gone away all right and so to get started fetching we are going to be creating a new function that is going to go ahead and get all the items for us so how's it going to look like all right let's see let's let's do it like right under here so it's gonna be get all items and it's gonna be an async function nothing to input and uh yeah so before we do anything yeah if there's no contract that thus far it's correct there's no contract then we should just like return and then like you can add like custom toast messages whatever like error getting items whatever I'm not gonna do it because take up time and I already showed you how to and then next up what you wouldn't do is like before all that like little before anything set products to empty the reason for that is if there is no contract then you want it to one the products to be like a safe empty array that like will not break the map and if the contract changes you want to wipe out all the old stuff from the old contract and then the new stuff can come in and whenever you refresh it we're going to be using the dot push method yeah I believe that's an array method so we're going to be using the dot push method and we don't want to mess our things up and no one are the one the same product to show up twice sorry three times or whatever okay so with all that out of the way we're gonna have a nice little try catch function next up what we're going to be doing is say cons product count equals oh way oh so basically what we're going to be doing just walk you through at a high level let's go to the so far is we're going to go ahead and fetch this that way we are going to know how many products are there and then what we're going to do then is we're going to have a loop that goes through this mapping and fetches each item one by one so what we're going to do is say contract meth thirds Dot and what was the function name again it was get number of products so that's what we're gonna call I don't need all that random file so let's just paste that there function thing you call and call it and you sh we should be good so we have a number there the awaiting is going to hold back the line until that result itself so we should be good there now what we're going to be doing is we're going to say start with a brand like plain and simple for support loop we're just going to say index equals zero colon no semicolon until index is smaller than product count some icon and index Plus and then open close whatever curly braces are there and then it's a columns the product equals oh wait contract dot methods Dot and which one are we going for I don't know which one are we going for not methods and let's see which one are we getting because we're going to be using the builtin function of this methods thing as if you remember the when we did the ethereum remix stuff let me just show you yeah I connect that guy so if you remember we had this guy this is what we're going to be using all right based on that we're going to say products and then pass in a bunch of things so what we're going to be doing is say products and then pass in index and nonpass and then just call it that should be our product and so now we're going to format this because if you remember we get back like we get back all the data like twice so there's no need for that so we're going to format it a little bit so just it just looks a little nicer actually let me just go ahead and console log the product just so you remember what I was talking about oh if nobody calls this function it's not going to run plastic should set up a other use effect like that paste that bad boy there call it and whenever contract changes we're going to call that now if contract doesn't exist this whole thing is going to kick it off and we won't have any kind of Errors so let's see what have we got let's refresh this guy and there you go there is our item so this is what we are going to make a ton nicer like it it just looks nasty how there's like zero one two three four whatever nah this is not good so we just want to strip out this piece of the object and then just like make a nice looking array out of that so let's do that now and that's why we are creating this formatted product thingy so we're going to create a new object which will have an ID which is going to be a product ID we're gonna have a buyer it's a buyer which is going to be a product a buyer buyer like that and then seller product seller name description we're gonna have category image URL and price now remember in the solidity contract we are only working with way numbers so there's a final there are like multiple ways you can convert between whey and if ether I just prefer doing it on the front end just because like the audience and ethereum and solidity is like soup like in the early days the baby steps is the dawn of web3 so let's just stay where we are like more comfortable with stuff and so we're going to convert everything on the front and plus web 3.js is like making it like way too easy like it should be like almost illegal at this point anyways we're getting back the price in way and we want to convert it into ethers or ether so that's what we're doing here and so that's pretty good and then we have one more thing which is the grading now let me actually console log the actually because I'm lazy I don't want to type all that formatted formatted product nice let's see the difference between the two so here's the ugly bun we don't like that and then number two ah so much nicer there you go so you're welcome that's why you're using random stuff random like formatted formatting things in the middle of our context and then um yeah once that's good to go what you want to do is say set products and my assistant Mr copilot is helping me with this basically what you want to do is get these set products function from this use state that keeps track of the previous actually it shouldn't be previous product I don't like when it like calls it like that so we should just call it previous state all right it should be previous state there you go that in theory show us all the stuff we got now one interesting thing though why does it say item five I haven't even bought it what do you mean I bought it that's probably just hooked up to a template function so don't even worry about it okay so you might be wondering David what is going on here in the first place why am I not seeing all my images like I literally uploaded them and if you still have the console lock turned on yeah this is undefined but actually I just spend a little bit of a time and traced it back and we are doing everything correctly except for one thing now if you look at it like how are we even save saving this stuff or how is it even being saved it is IMG URL and we are trying to destructure image URL once again we looked it over or like I personally looked it over because I'm using copilot so again there's a lot of negatives to it it's not going to put uh put us out of our job I'm pretty sure after these two I'm pretty I'm feeling pretty safe let's refresh let's see what do we got now we have the image URL now the only question is why do we not see it it's probably because we should be saving it like that all right there you go so with that little two literal two changes that we just did from image to IMG which is a story for image once you change that it apparently starts working so that's how we set up the template I completely forgot about it and we also are using copilot to help me out with typing so there's that now with that all set and done it is time we go ahead and purchase these items and we're technically done with the build see there all right we actually got through the very final part of this build which is purchasing these items so before we actually get into that I just want to clear out all the console logs if you've watched any of my other videos you know that um I don't like them like it's good as long as we're building stuff but then it like gets annoying and clogs up my consoles I like to keep that clean I'm a king dude we are going to be creating a new function down below here which we're gonna call by product which is the byproduct of me being funny hey anyways we're gonna pass in this ID which is going to be the product ID that's going to be coming from the front end so let's uh let's do that oh why is it oh there's the error okay so with that said now we also want to have we want to get the usual card Clause so if there is no contract then we just want to return with all the toasting stuff so again a usual try catch and then let's catch the error and then console.air.air I hope that made sense that was like a pretty good scent pretty good sentence if we have the contract we are going to go ahead and try to get the prize so what we're going to be doing is here get what the prize is we need to know how much the product costs all right and we don't really trust Lee friend to tell us what it costs because that could be manipulated pretty easily so instead what we're going to do is we're just going to go ahead and fetch the fetch the contract again for it so we're going to say contract dot methods dot product yeah product ID and then we're just going to call it and then once we called it we will as technically isn't the price but we're just uh you know what let's just actually name it so product so that will be the product and then we will use that to get the price all right so what is going to happen now is we're going to say oh wait and then we're just like straight into calling the purchase Method and so let's see how we actually named it here so this is going it is called purchase item now purchase item and then we will have to just pass in the ID that's all we need to pass in however when we send it in this is where we need to specify the actual purchase price of the product that we are sending in so this is where we're going to be using this line of code now open close paren open this new object and we're gonna say from in the user address which we already have access to you know what while we're at it even though it's like unlikely that it will ever happen that this doesn't exist and the contract doesn't exist because somewhere I believe oh wait hold on whenever here actually never mind you know what let's just put it in the guard cause it's not gonna hurt there it's fine so we're gonna be like okay contact address or user address so whoever is used Oliver is locked in that's the person that will have to pay for the product we're gonna give it a like the general three million gas which is like three million way I believe and then we're gonna say gas price null and then we're gonna say value because in this case we have to press specify the value and out here we actually got the price of that product like we we got the product so and we just want to get the price of that specific product and that will be the value so it's like way harder for any kind of like malicious intense like any kind of person with malicious intent to like tamper with this with this specific transaction and that should be pretty much it now Luna it's sport it because I've messed it up and forgot to export it twice and we're gonna be doing is I believe so it's in product JS where we'll be calling it so what we're gonna do here is we're going to go ahead and import use a context and then uh yeah I have all this uh template function there but we don't need this anymore instead we are just going to destructure this and right here the toast is ready to handle everything and it should be good to go let's see what we got so on click whenever we click one of these products and I don't know why it does that I think it's like I save it it like doubles It Anyways when you refresh it it only shows up once so that's pretty good and then it says item bod so that's interesting because reading length Okay that's weird why do we what are we dealing with all right oh hold on and once you actually do that my playlist should be working so let's go ahead and test this out so if I refresh I'm gonna say all right my Mana mask is popping up it's a zero dollars like that that detail looks a little fishy to me okay so there is this error and it says the value doesn't seem to be checking out I believe invalid amount sent for a product Oh interesting and so the reason why the price like wasn't really working is if you think about it like this is these are all async functions if we are waiting here for we literally have waited everywhere I think I just forgot to put the weight there let's see if that helped and let's see if that worked like there's like a lot of transaction clogged up here all right let's go ahead and refresh click that and there you go there you go now you can see that the Price Is Right There 0.1 each and then I'm gonna confirm it however it literally just says the seller cannot buy their own product so what I'm gonna do is I'm going to refresh here and then swap over to my other account like that come on and that has 69. nice uh Ethan there and let's hit the second one confirm there's the price and item bot now this one is successful so that pretty much revs up this entire build you were able to Now list and sell items using the blockchain using the ethereum blockchain and then once again if you want to send this to your friends deploy it to you anywhere you can just comment that line out and comment this line like back out so that's going to be the valid line and now this application is living on the girly Network so with that being said thank you so much for watching and I'll see you in the next one