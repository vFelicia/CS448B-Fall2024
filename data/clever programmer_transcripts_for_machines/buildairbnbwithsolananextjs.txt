airbnb on salon let me know if this sounds like you you're a developer who wants to get into web3 and you have no idea where to start well i hear you guys and i'm on this coding journey with you and today i have the perfect build for you to get started today we'll be making airbnb web 3.0 dap with next.js on the solana blockchain i'll walk you through how you can create your very own smart contract on the salon chain using anker which is just a framework of rust we'll then show you how you can take that data and store it on chain think of it as a database that is fully decentralized we'll use quick node as our rpc node provider to access the blockchain i'll then show you guys solana playground which you can use to create deploy and more importantly test your functions of your smart contract so that you can understand how it all works we'll use phantom wallet to authenticate our users and sign them in and we'll use salon explorer to verify that they are 100 real now before we get started make sure you use our cli tool that will provide you so you get the fully built front end so we can focus on the solana blockchain code so that said i'll see you guys in the demo and let's get started all right so let's get started so the first thing you should do is open up that terminal and type the command npx clever programmer at latest this is our cli tool that's going to give you all the files that you need so that we can have the same files and start at the same place and while it's initializing it's gonna help us get signed up for quick note because for this app we need an rpc node provider to connect us directly to the blockchain so while it's initializing we can do that so let's type in that command type in your email address then your name and then select the project you want to initialize and of course it's the solana airbnb awesome so there you go look at that so it takes you directly to this page and if you don't have an account already sign in so you can make use of quick notes free tier so i'm just going to sign in and i'll come back once we get to the same landing page perfect so now that you confirmed your account the next step which is nice and quick to get started is click create an end point and here you'll see all the different chains you'll see ethereum you'll see a polygon you'll also see avalanche on here as well but we're going to be using solana so let's click solana and see the three networks there are three networks mainnet uses your real soul do this if you're sure you want to develop on there for us and learning purposes we'll be using the devnet okay so let's hit continue and then click create endpoint and voila it's done that's all you have to do to get started all you need to do next is take this http provider and hit copy and we'll save it for later so by the time you finish signing up you should have vs code open right it opens that up automatically for you guys with our cli tool so we can do what we can do is hit control or command j cd to the front end folder and hit yarn dev once you do that you can also press control click and there we go awesome so you can see this is the static version of the airbnb it's different from the demo right because there's no wallet connection as you see here and there there's just static data right here how do i know it's static well let me show you why it's that because if i were to delete this and then refresh it's back right because it's static data that it's just set up right it's not actually being saved that it was deleted right what's what's the point of this lens well our goal is to take this front end with static data and use the data that's stored on chain and learn about it okay and don't worry i'll break down the app with you guys because that is the main focus so i know you haven't seen what the code looks like and a lot of this is set up for you already so if you're a beginner watch this part and if you're a little bit more advanced feel free to skip ahead when i start coding okay so welcome my beginners let's head over to this fancy whiteboard and let's figure out what we want to do with this app okay so one thing you'll notice is it's not connected with phantom like i mentioned before so that will be our first step so let's write that down as pseudocode okay so our first step together guys it's gonna be set up phantom connection right phantom is a wallet which holds all your soul that we can use to authenticate the users that log in okay what's the next thing we want to do well let's think about the app right this is a essentially a crud app create read update delete right so we want to be able to add a listing right don't worry about how this works just yet just know that we want a function that will add a listing on the salon chain right because this is just going to add it to our local environment and not anywhere else okay so let's write that here create solana program and i'm going to use the words contract and program interchangeably just know that's the same thing okay so create salon program and for the functions it should be add listing right we also want to and let me say create listing so it's more sense create listing we want to uh fetch listing right read list things right fetch listings and what do i mean by fetch well with fetch if you look this is essentially an array of objects that i'm mapping through and displaying right what we want to do instead is fetch the accounts from solana right and then map through them fetch listings right from there we want to update listings right what do i mean by update if you go back to the demo right we can edit this and change every aspect of it we should still be able to do that on solana on chain okay from there we can also delete listings right since we're going to be creating accounts on chain we can also close the account and that will be considered deleting right cool so this is our goals so let's talk about how this app works and usually when i talk about how an app works i think about the tree or the parent child relationship between components okay so what we can do is let's just bring it over here and bring the code over here okay we're going to share some real estate right so if you open up front end right the first thing you'll notice is on the folder pages that there is app right and maybe we could just make this bigger for now first thing that you'll notice is that there's an app.js and it holds all of this right it has a head which the title and then this component right this component right here right is actually the index.js all right so what do i mean by this i mean that there is a parent called app all right there is a app all right and inside of app it has a child and here it says component but that is the index okay sorry for the terrible drawing but i'll make it look nice in a second right so that's the index okay so how do i see what's inside of the index right how do i see what's inside of this component well i could just click the index.js here so within the index there's a bunch of different code here right it might be overwhelming but let's just look at what's important right there is components within the index component right so that means the index has children so let's go through together what children does it have so let's clear out all this and give me a second to organize my files amazing okay cool so we got our app right here and let's just build out that tree here so we all understand what i mean okay so what do we know we know that we have an app right here app we also know that it has a child called index index okay so now let's go to it together and figure out what is the children of index right so a child of the index component would be another set of components right so let's see if you guys can see the first component so these are functions all right scrolling all right is this a component right not necessarily right it has something within it called airbnb clone that's the title okay but is this a component yes it is it is a component called what header awesome you got it so if it's a component called header oops let's undo that i can draw a line right here and say hey index has a component or a child component called header right and you might ask what does header header do right so in order to understand what header does all right let's look at the app right this is what it looks like look what happens if i comment out that header boom all right what did we lose we lost we lost that little area right here that held our phantom connection right then that's the header of a normal app so if we comment out the header component we lose the header make sense cool awesome okay so we got that out of the way figure that out next is the filter menu right what's the filter menu is that a component yes yes sir so that is a component so we'll do right here wheel right filter filter menu nice okay this isn't too bad right guys so we have the filter menu and at the moment i'll tell you the filter menu isn't that important for what we're going to do but it's good to note down awesome okay the next thing that's a component is listings oops listings lists all right and i'll move a little bit faster this is all modals right what do you think this ad listing model means well if i click add listing this component right here is the add listing mode right if i click this pencil icon from the listing i get the edit listing model and if i click this heart icon i get the reserve listing model right they all exist in the index right but when does it show it only shows right when this is clicked right so there's a function that's toggling this on and on on and off and i keep the modals here so what i'll do to simplify this is there's a picture there's a bunch of children right but i'll just label it as one all the modals right so i'll tell you right now which ones are the important ones all right the important ones which i'll mark in blue is going to be the header right the header the listings and the all the modals right that's where the functionality is going to live right and a good question asked is do any of these components have children well if you look let's see if oops let's see if add listing modal has children so let's find that go to components go to listing go to add listing model if you look they have no no real components just a transition right which is not that important for you to learn at the moment but what you do need to know is that the listings component right this one right here that has a child right because for every airbnb listing we want to map through it and create a listing item right so if i were to draw this relationship right there could be multiple right and actually this would be multiple two multiple multiple listing items right these are all these squares are listing items right so if i asked you guys on airbnb right how many listing items do you see right i tell you one two three four okay so that is the tree of our app right so what we want to do for step one oops for step one is set up a phantom wallet connection all right so where do you think i'll need to focus on to do that right if i'm gonna make a phantom wall connection do i need to look at the filter menu no do i need to look at the listings maybe right but if i want to ensure that i'm connected throughout my whole app right i should look right here right phantom wallet connection should go right here okay so with that in mind let's minimize this and if we go to the pages and then go to the app this is where we want to set up that wallet provider right the wallet connection provider okay but at the moment we don't have a wallet connection provider so let's go ahead and set that up so to give our app some context of what a wallet connection provider is what i'm gonna do i'm going to do is create a new folder and let's call it context okay and once we have a new folder called context within the context folder i'm going to make a new file and i'm going to call it wallet connection provider dot js this is what you're going to need to do to set up that wallet connection right and once you're there let's import a couple things we're going to say import connection oops not connection connection provider from solana wallet adapter react so i press tab so that's automatically imported oops how's this guys can you see that cool so after that you can do wallet provider all right we got connection provider we got wall provider and then let's import wallet modal provider as well and this is going to come from the react ui yep this one salon solana wall adapter react ui okay and then what wall are we going to be using we're going to be using the phantom wallet so i'm just going to say phantom wallet adapter and this is from at solana wall adapter wallets perfect okay and the last thing we're gonna do is let's import uh use memo okay cool right so we did a lot of imports but we don't have the provider itself so let's set it up by saying const wallet wallet connection provider is equal to boom all right so this is our provider which we will then bring back to our app right and wrap our entire index with that provider right if you don't understand what i mean just set just bear with me so we have our wallet connection provider we will then need an end point right and another thing is in the parenthesis here let's add children it's going to take in children cool all right so insider provider let's set up our endpoint so let's say const end point is equal to use memo right so this is a react hook and within this hook it's going to take in an empty or anonymous function right and then you're gonna do comma array all right the key thing about this endpoint is this is where we're gonna write the url of our endpoint and if you remember the keyword here endpoint right we're gonna need you can put our quick node connection here so let's go back to here let's bring this up copy this or if you have a save somewhere bring it back and then in quotes go ahead and paste that over here right and if you don't like how long it looks sometimes what i do is i'll take this cons connection is equal to this right and then you can just pass in connection right here okay that should work and let's just put some space between those awesome all right so that's our endpoint setup all right the next thing we want to do is say const wallets is equal to use memo again all right and then we got to get the wallets that we want to use which in this case is just phantom all right so you can leave the parentheses blank in there and just write new we're going to create a new instance of phantom wallet adapter so we're making use of this right here okay and then you know to call this put parentheses right here and then comma and theory okay so we got our endpoint set up we got the wallet set up and now we just want to put what do we want to do with this provider well we want to return parentheses the connection provider okay and what do we want to do with the connection provider we say endpoint right is equal to endpoint all right so where is this end point coming from we use you use memo to set up and get the connection all right we're going to be doing something with wallets next okay so we said the connection provider if you look at our imports we still haven't used the wallet provider all right so let's use that next let's use a wallet provider okay and in here we're going to pass in a prop that's just going to be wallets is equal to wallets right just like this right exactly the same as this endpoint wallet goes here all right another cool thing we could do is auto connect right if your phantom wallet is already connected just auto connect it if you don't want to do that you want to make it you know manual you don't have to put this line right here cool awesome we also want to provide the modal right so when you click on the connection you'll see like the list of wallets right this is the wallet model provider let's go ahead and add that as well wallet modal provider okay and that is going to take in children all right so now whatever we pass into the provider will be passed into the wallet modal provider as well and next which is last but not least make sure you do this so that it actually exports right you can export default the wallet connection provider all right why do you do this we export it so that we can import it somewhere else and where do you want to import this connection provider if you remember you should import it right here awesome cool so in terms of imports this is already set up kind of for you guys we need to do next is say const wallet connection provider is equal to dynamic right which is coming from this input right here parentheses and then anonymous function and you can say import parentheses quotes dot context all right and why am i going into context because that's where the provider is okay and then in between these two parentheses you can put a comma here and then let's put the scope in with the two curly brackets and just write ssr files perfect all right that should be it now all the way back to that first thing i said we want to wrap our connection provider within the app itself right so what we could do is go in here right underneath head hit enter and type in wallet connection provider and put that component which is our index right in there amazing right so everything in this connection provider is set up from our contacts right here cool so we have that set up now oh look at this so look it already it's already auto connecting and it's asking me to connect my phantom wallet but if you look on our airbnb we haven't set it up on the front end so the connection is working but not on the front end so what do we do well if you don't have phantom already go ahead and type in phantom uh chrome extension all right and it should take you to this page right here make sure you add the extension so you can have the phantom wallet right here okay awesome once that's done set up your account and you should have a wallet it should look like this and you're gonna need some soul right this isn't real seoul so don't get too excited right when you're on devnet you can do something called soul faucet and get soul or solana tokens that you can use to test your app right so if you want your address right your wallet address click copy clipboard up here and then you want to paste it and for the airdrop i usually put two then you can hit devnet and bam all right we just got instantly two soul tokens that we can use to play with and now instead of 10 i have 12 right so that's how you set up your solana that's how you get some soul right so let's work on the front end part of this so x at this x out this boom all right so if you want to set up the front end portion about this we need to work on the wallet connect button which is going to go right here what component does that live in right is it going to be on listings on index right take a look at this where do you think it's going to be at okay cool if you said header let's go you got it right that's that makes sense it's like intuitive okay so if it's in the header let's see if we're right you can access that let's see if we're right and head over to the header oops okay so if we go to our index right we think it's in the header right and if we go to the header component let's find that button ah there it is okay see this user circle icon this is it right here right if you're never sure about what you're doing go ahead and comment stuff in and out and that's how i do it to learn what app i'm using if i come this out boom notice how it's gone right here right instead of this div we want to replace this with the phantom or just the wallet connect button we get from salon all right so it's it's there and then it's gone see it so what do we need to get this done we'll scroll to the top of header for now and if you look right here we have the wallet multi button that's what we're going to be using for this we're also going to need something else now that i'm thinking about it we need to require at solana wallet adapter react ui styles.css right this is to get the styling of the react router not the react router sorry the solano wallet adapter okay so we're gonna require that right keep this one in mind wallet multi button and let's scroll down what we're going to do next is let's set up the wallet multi button so the wallet multi button we're going to take that import and just say wallet multi button okay and i already have styling for this so we can just do class name is equal to phantom button right and then uh there's also an icon that i have with it let me see if i have it still right okay cool so then we can do something like this start icon uh is equal to user circle icon self and the icon is going to have a style and the style is going to be height 32 with let's make that 32 as well and the color i have this save for you guys it's going to be hashtag f or 1f2937 that should be it and let's just test this out by saying span connect okay let's just see what that looks like so far okay all right hey there it is you can see the connect wallet but the styling is a little off so let's fix that okay so in our span let's go ahead and give it a class name and for the class name we can do text small font medium medium text black okay let's see if this helps there you go that looks way better i can actually see it now um i think it's missing a little something actually i think that's fine for now so what we want to do next is let's click on the button and look at that it all works the functionality we didn't have to do anything we just had to set it up right cool so if i click phantom bam right i clicked on it i'm connected i know it doesn't look like i'm connected right but there's a way to test it okay so what we could do to prove it to you that i'm connected is head over back to this right here and i want to talk about something really quick so you're going to notice that i'm passing down something called connected here this is what we call props and react and assuming you know what props are where is this connected uh variable coming from right well if you don't know where it's coming from go to the parent right so who's the parent of header the if you know it from our zip board the parent of header is the index so let's go back to the index so back in the index you can see it right here i'm directly passing connected to that header okay so what that means is what is connected right let's find out what that is so if i do control f type in connected boom boom boom boom oh i saw it there we have something saying connected is equal to true right so if we are connected right i should see this connect wallet button change to something else i want it to actually just say my address so my address is like this 8t something okay so let's keep this static for now and then let's go back to header right so how do i set up that condition then if we're connected don't show me connect wallet show me something else right so let's do that real quick what we can do right here is turn this into a template literally by making this an object right and that's actually not template literal just make put curly brackets around this right so what we want to do next is put this in quotes boom it still should be the same thing but now let's set up something called conditional rendering and say if we're connected right if connected is true which is it is question mark right we're going to show uh a t dot dot dot this is my address right a static version of my address and then put colon here and then quotes all right so what did i do with this line let's do alt z can you guys see that better cool so what did i do i put curly brackets around the text and i say if connected is true show me my address if connected is not true show me connect wallet boy so what kind of gonna hit save here boom i look at that oops you see it shows me my wallet connection right here right so my wall address is atkz right it's not the full address right it's just whatever static thing i wrote so let's go back to this i'm not sure what this is i think i opened up the svg all right perfect cool so i can literally make this anything i can say lol all right so now i'm connected that's what it looks like if i hit disconnect and then we do something like this oh yeah connected is still true all right so even though it disconnected right it's still going to say lol so let me just connect it real quick but if i change the connection to false right which we set up believe over here then it's back to connect wall you see that cool so we need to make this dynamic and we also want to change this svg here here not this svg sorry we also want to change this to our actual address and how do we do that well we have something called truncate all right truncate is essentially a function that's going to take my public key and make it to something more readable so if i do this to string oh there you go there you go so it's undefined right and i know it's undefined because what is public key right you can't do a public key of undefined and public key is something i'm passing down already but it's not it doesn't exist if i go to index i go to header there's no public key right there's not even a public key anywhere here right no results right so how do i make public key exist well that's where we can do something called use wallet all right so let's go over here we don't want the static connected right we want a dynamic one so we want to check the connection of our app right there is actually a hook that does that for us already so let's do this use wallet right and if you see we need to import use wallet from solana wallet adapter react so again we don't have to write any logic right solano wallet adapter has logic we just got to plug it in so say const and i'll separate this so it's easier say const object or curly braces right because this is deconstructing and then use wallet right so this is the hook what do we want from use wallet we can break it down by saying we want connected and public key right so what does connected do connected will let us know if we have a wallet connected or not so remember how we had true or false we don't need to write that anymore it will just automatically check if there's a wall connected public key is our wallet address right so when we're connected we have access to our wallet address right so it's going to know it's 8t right so anytime you see public key that's going to be the public address of my wallet so now when i pass down connected it's not true or false that variable it's from the hook another thing that we want to do since we're here is add that public key so we can say public key is equal to public key so now it shouldn't be undefined if i hit save let's go right take a look at this guys that is our wallet address it should look different from you if you have a different address right so let's connect wallet boom we're connected there's our address we disconnect it's gone right and it's dynamic because if i switch to wallet number two hit connect i gotta log into wallet number two bam it's 4a now there you go you have your phantom connection and now you made it dynamic to whatever user so essentially you the user can log in to the app how is that amazing so we have our phantom wallet connection set up so what's next so if we take a look at our plan you'll notice that the next thing we need to do is actually set up the solana program itself so if you want to get started doing that the cool part is we won't have to code on vs code for a while we can actually go to this website so let me make this bigger and let's go ahead and write beta that's sol dot pg.io this is called solana playground right if you're coming from solidity if you heard of remix at all this is essentially the remix for solana what does that all mean it means right you can go into here and create a solana project you can build and deploy through here and you can test all your functions right so what we're going to do is we're going to create a new project all right and we can call this airbnb solana and another cool thing it's just new we can also it has sea horse support which means we can write python with solano and we might do a video about that soon so drop a comment below if you want to see us do a python video with solana that would be really fun so uh we're going to be using anchor so let's hit create and now we have this right here so what i'm going to do is make sure we build on this boom build successful yep yep cool so this is essentially the starter files for our project okay so what i'm going to do next is go to files and i'm actually going to just delete everything because i want to start us from bare bones scratch right we gave you a lot of the front end i'm going to give you i'm not going to give you any of the anchor code right we're going to build this from scratch together how does that sound good all right so if you're with me let's get started now before we get too excited writing salona code what we want to do first is we need to save the changes we made so far right we did a lot of phantom stuff so open up your vs code and if you did a git push right you'll notice that it says for me everything up to date but for you guys you're not going to have permission right so let's make our very own repo to save your changes right and i'll walk you guys through so go ahead make a new tab and head over to github.com and there's multiple different ways of creating repositories use get kraken or whatever third party app you have i'm going to go ahead and click new repository right and from here we can say uh solana airbnb all right cool oh i already have one we can do airbnb salon there you go cool and then you can make this public or private but let's just not click anything else and click create repository if you do it that way you'll see right that github tells you exactly how to create a new repository right but we're going to do something a little bit different than these steps right here cool so going back to your vs code right this is already a repo right the cli starter branch is coming from another repo how do we make this your own well all you have to do is say git remote set url origin and then let's copy this link right here okay so i'm going to bring this back then let's paste that and let's hit enter boom all right so from here we can say get status right and notice how it has the context because we added that and we can just do a git add dot and if we do get status again now it's going to be green right the package.json is red because if you do a cd dot dot then do a git add let's check it out boom so now it's all green that's a good sign we can do next is a git commit m initialized our own repo right you can put whatever comment i'm gonna hit that and if we do a get push all right it's gonna push to our new repo if i refresh this bam there we go right so you can push to your own repo now without changing any of our files right and you can see over here that it's that david right who helped me work on the last app is still a contributor as well okay so now you can save your code and anytime you make a new change i encourage you to push those changes on github okay so that's my quick github lesson the reason why i did this guys because i want to show you guys that we can deploy our app and make it live right so today we're going to be using digital ocean so there's going to be a link in the description i go ahead and click that link so it makes the signup process a lot quicker so that link should take you to this beautiful landing page made by our friends at digitalocean and if you use that link we get a hundred dollars to learn with digitalocean okay so go ahead and sign up and create a free account i recommend you use github because it'd be a lot faster boom so i signed up through github and once you have everything set up for digitalocean go ahead and click apps and this is what we're gonna need to do right here so what is digitalocean digitalocean is infrastructure as a service what does that mean well this web page hosts multiple servers that we as developers can use for ourselves right one of the use cases that we're going to be using today is creating a static server live app right you can also connect it to a database right you can use kubernetes and then we can also create an app of course so click create an app you'll see create resource from source code i want to click github so click on that and wherever you want to use the next thing i want to do is find my airbnb solana which is going to be this one cool and this is the branch and this is the source directory right so this is one is important right what's the source directory it should be the directory of the front end right so what you want to type in is slash frontend right here okay and the cool part about digital ocean is that it has an auto deployed feature so remember i said every time you make an update you want to push those changes every time you push those changes auto deploy will redeploy your app so that's always the latest version and it's synced with this repo all right so that's super awesome go ahead and hit next all right go ahead and hit next next next right we don't have any environmental variables set up just yet right so we can just click create resources and let's see here's everything else all right cool awesome so our app is called c linin uh you're free to change it as soon as it's done to whatever url name that you want for this project and from there we're just gonna let it build all right so the build is complete now what we could do is click on the live app and there we go all right this is live you can take this link and i always say you could share with your friends you could put on your portfolio and at the current moment you can only connect your wallet and that works so cool so anytime you push changes to your repo your live link should be up to date so that's it for a live link let's get back to solana playground okay so moving on we're back at the lib.rs and to get started what i want you guys to do is type in the word use right the reason why i'm typing in use is this is the way on anchor to import right so you know import from javascript use right is to get anchor lang if you don't know what anchor lang is it's a library for anchor right and we want to get certain things from this library or crate sometimes it's called right so we want to do we want to get something specific from anchor length so within anchor lang i want something called prelude okay and then you could if you go colon colon think of this as going inside a folder right first it's airbnb solana and inside we go to the front end and inside we go to index.js right so within prelude right if i do a star here we want everything within a prelude as well awesome so that's our first import that we'll do for now we want to do is type in a semicolon here if you didn't know unlike javascript right we need to put semicolon semicolons here to indicate the end of the line otherwise we get an error okay cool awesome and then from there we can do a hashtag square brackets program right this is essentially a macro which is going to define what a program is so what you write underneath underneath this directly underneath this is the program so from there we can say pub mod clever underscore airbnb right and if you put curly brackets right here this is the scope of our program okay so if you guys are with me you're in good spot all right the next thing i want to do uh in between these two things let's declare id oops declare underscore id and then put exclamation point and then put parentheses okay so every program has a unique key right represents the address of that program right that's where it is on the blockchain right and solana playground will generate you a program id if you click this toolbar right here on the left hand side click copy and then you can just paste that there that's your program id it's going to be different from mine of course so if i hit build oh yeah i just mentioned if you need a semicolon here hit build it should say build successful right so that means this is a valid program right if i ask you does this do anything at the moment it does absolutely nothing because there is nothing right so let's make it do something right let's give it functionality okay so what we can do is we can say pub fn right fn is function right in javascript to make a function i would write something like this function uh add user right it looks it would look something like this right for rust or with anchor you can say pub fn and then the name initialize user all right then you put parentheses right and then you can do this an arrow and write in results like so and there you go cool so this entire thing is a function right okay so don't mind that what we can do next is all right so don't mind the error it'll fix itself in a second what we do care about is this function right here so this is initializing a user right basically what we want to do with this program is create accounts or create a pda right so just temporarily we want to create a pda all right you might ask what is a pda well pda stands for a profile derived account right essentially right we want to create accounts right or pdas pdas are essentially accounts created from the solana program right and we could do this to hold certain amount of data i'm simplifying this but what kind of a what kind of account do you think initialize user should create right initialize user user oops should create a user account with default data okay so what we want to do is have this program create a user account which stores all of our user information okay cool so in order to create a pda we have to give it some context so what we could do is pass in context as a parameter right so i have to write is ctx okay if i was going to add two numbers it could be like num1 num2 right this should look familiar in this case we're going to do ctx right and with anchor you need to specify the type what kind of what type is ctx looking for well it's going to look for context right and this is a struct in anchor right and the type of context it's going to be initialize user right to understand what i mean by this is i'll ask you this does initialize user exists anywhere on our app no it does not right so that means we're going to have to create it later on so usually when we create a function this is the pattern we create the function it's going to take in a context and the context usually has a similar name to the function we created okay so we're going to hit pause on the function right and we're going to move on to creating some struct so at the end of your scope down here let's create the initialize user struct okay so to create a pda right create the context right all right what we want to do is do hashtag derive parentheses accounts right so again similar to program right in this case what you right underneath this macro right here is going to be the pda or the the context right so we can say pub struct and then this right here this name pubstruck initialize user right and then you're just going to write info okay after writing that you can put curly brackets right here and then you can do hashtag account mute right making this mutable meaning this can change right what can change whatever i put underneath here so the authority right what does the authority represent whenever you're working with solana and you make a transaction phantom will open up and ask you to approve that transaction right so if i want to send money to someone you have to approve the transaction because you have the authority right so here when i say pub authority what kind of type should expect it's going to expect a signer right and the signer is one of the things that come from the anchor lang anchor prelude right so this we don't have to create okay and it's going to be mutable because the authority is going to depend on the user it's not one static thing okay so now for the actual creation of the account itself okay so to create the account we can say hashtag brackets count knit oops and actually say enter here it's going to take in a couple things now it's going to be init right if you write this anchor automatically initialize an account for you so we don't have to set any of that up what you do need to set up is the seeds all right you can think of seeds as a variable that will create a unique hash or address for your pda okay but for now uh it takes in strings right but i'm going to write something here it's going to say user tag right which is going to be a string but it's the variable holding the string but pause that for now it's also going to take our authority dot key right dot as reference okay cool and then from there uh we're gonna write bump okay so when you're ever you're this will make more sense later but let's say that hash exists bump will just go to the next available hash okay cool so who's paying for storing this data right or running this transaction it should be the authority right who's ever the owner of this user should pay for it the next thing that the account is going to need is the space right because with anchor or just solana and rust in general they care about how exactly how much space does it take right it needs to know so to figure out how much space it takes or you got to think of what does the user need to hold right so if you're thinking about what a user needs to hold i'm thinking that it needs to have store its authority its last airbnb and how many airbnbs does it have right so if i were to show you guys what an object would look like right so let's say user one is equal to object and now let's see if i can make this oops okay let's make it like this right user one has a key of the authority right and it's gonna and then the authority is going to equal uh 8t right this is my account from phantom right it's also going to have the last airbnb right which i'll say is zero right and then it's also going to have uh airbnb count think of airbnb count as the total amount of airbnbs and that should start at zero right each of these things are going to take different space depending on the type right so this right here this authority is going to be type public key and a public key is going to take up 32 bytes usually this u8 we can say that it's going to it can just be one right same thing with this this can also is a u8 an unsigned integer eight bytes you can just say one okay so in terms of space it's essentially 32 plus one oops plus one plus one right plus eight right the reason why i'm doing plus eight here is because there's something called an account discriminator that is gonna be added right to essentially make space between this account and the next account right so when i say plus eight this is what it means okay cool so that's how much space it takes up don't worry if this makes much sense yet but we're gonna be doing it over and over until you get the pattern got it cool so that's it for the space in terms of this account right here and remember underneath it is um all this information is going to go so this is going to be the what we'll call the user profile right and the user profile it's going to expect a type of box which is holding an account right which is what we're creating and that account is going to have info comma user profile okay awesome and then account is something from anchor lang and so is it box right but user profile right is an actual struct that we need to create it doesn't exist yet either right so let's follow this pattern right so initialize user it's a context the context of what initialize initializing a user is is that it will have an authority and that's going to have a user profile but then we need to perform define what the hell is a user profile right so we need to create this later as well okay cool and then we could say pub system program and then we could say uh program right this is built in you're gonna you're gonna write this over and over for the other context again so it's gonna be info and then system perfect okay cool so we finished the context uh if i were to run this it would fail because user profile it's not going to know what that is right so to define what a user profile is we can actually make that struct here all right pub struct and then you can say user profile right or right we can make another file right we don't have to put everything in one file or else it could get really bloated right so what i'll do is create a new file and then you can go over here and call this one states okay and within this stage we also want to import anchor lang prelude and we'll get the star cool semicolon awesome all right so what did we do we defined the context for initializing user uh we then need to define what that account looks like so let's define the user account right so to define an account we're gonna say an account right and we're gonna do hashtag derive default right okay then underneath we're gonna say pub struct user profile cool awesome and then remember what i said it's going to take in an authority right and what's the type of authority that it will spec it's going to be a public key uh it's also going to take in a last airbnb which will be an unsigned integer eight right and then also gonna be air b and b oops count u eight okay cool and remember just so you remember how much space each type takes right i can write it right here so this is 32 this should be one and this should be one as well right so that's where i'm getting those numbers well so this is the account for a user this is the user account okay uh here's a question if i would run this it would still fail right it's still gonna fail because why right does user profile exist on this page it does not right so how do we make it exist on this page right think of this import right here right so what we want to do is say pub mod states right and then we'll say use right here's use again create and we'll say states colon colon stop right basically what i'm saying with this is get me everything oops everything from states right so what's in states all of this give me all of it right and bring it to this scope right here so that means i can call a user profile in here in the scope okay we will need to do one more thing right you can erase this and what we can write is use super colon colon star semicolon right what the hell did i just do remember how i said this brings states to this scope right use super takes anything from this scope into the program scope so i can refer to user profile as normal okay so it should know that this exists okay cool so to make sure it's still there states awesome all right and if i were to run this it'll still give me an error because this user tag here it was going to say what the hell is user tag and like i said uh this is a variable that's going to hold in a string right so the seeds that it takes in to generate that hash is going to be a string and then my public key essentially right so let's define this variable right so you can say like something like a const user tag right is equal to right and then define it here but just to keep in with our pattern we can make another file so i'm going to do that as well and i'll call this constant.rs so now i have constant rs and what i'll do next it should be anchor lang prelude right anchor blank colon prelude chrome colon star boom and okay all right so here we can define our constants right so and again there's nothing wrong with putting it all in one file right i'm just showing you guys that you can separate it so i'll say constant here and then we could say pub const user tag right and then we can reference itself as a u8 is equal to the string user state right cool all right so now we have user tag and that state set up in the file called constant and then we are need to get the constant so the pubmod constant okay and then here we can write a constant constant homecoming star parentheses all right and use super we'll take that from this scope and bring it into this scope cool so it should know what user tag is and it shouldn't give us an error okay cool so last but not least on the function before we write any logic usually in a function we need a return if you write okay here think of that as a return in javascript right let's say i wanted to return the number five you would put that right here uh if i leave it blank it's not returning anything it's just gonna run the logic and then be like okay done all right so if i hit build uh there shouldn't be any errors now awesome so this means the build is successful right we're only gonna get warnings warnings aren't bad right if you see something like a warning it just says unused variable ctx right because that's true it's just like you know hey uh you put this here but you aren't using it so don't worry about warnings right it's errors that um really matter so we have the initialize user set up now let's just write the logic for it okay so all the setup is done let's write the logic of initializing the user right and again if you want remember we want to initialize the user profile account with default data right if you go back to your states here this doesn't have any values associated with it it's just an authority it's expecting a pub key it's just expecting a number right but doesn't have a value so what number should it start with right how many airbnb should each user have at the beginning it should have zero all right so if it has zero let's get that information and set it up okay so first thing we got to do is say a variable let right user underscore profile right nothing too crazy this is just one variable and we can set that variable equal to and mute right so this mute here is saying that this variable can change uh depending on the user profile right when javascript all right when i make a video let uh num equal one right if i wanted to redefine the value for this i can say num is equal to nine right if i did this in rust right it would say i would give an error because i'm not allowed to change this right i can change it or make it mutable by writing mute okay and then i can say ctx what is ctx right if i were to console.log ctx if i could do that anchor i would see um this initialize user context right cool well what do i want from that if i do dot account right and then do dot now let's look in here if i do dot user profile then i should see in the object itself right the user struct so i can say user underscore profile there we go cool so when i say user profile i essentially get this struct or this account or if your javascript this object okay so if um user profile is giving me an object right i'm thinking i'm saying object because i'm thinking javascript how can i get the total amount of airbnb's right what do i write after this to get the airbnb count if you remember dot notation all you have to do is just write dot airbnb count right and what do you want to initialize that count to be right if you're just making a user how many airbnbs should they have they should have zero and there we go okay from there let's just do the rest of them so i'll say user profile dot authority is equal to ctx dot counts right i'm getting this again right and i want to get my authority here right and remember this the pub authority we can call on that so if i say dot authority all right i can get the key by calling the builtin method here key okay and set that equal to this key right cool this stays the same right but we can also add user profile dot what what else is we're missing all right i need his last airbnb right so the last airbnb is gonna be last airbnb equal to zero as well okay awesome and guess what guys that's it for initializing a user so what can we do next well let's hit bill let's hope for no errors hey build successful right it doesn't look like there's any unused variable either so let me just refresh this to show you guys right clean terminal hit build successful not even any warnings so super clean code all right now the cool part the reason why we're on salon playground is oh is that we can build but we can also deploy right what does deploy mean it means i'm gonna take this program or this smart contract and deploy it on the solana blockchain right and whenever we deploy it on chain we can then get this program by its address and then call any of the functions towards it so let's deploy it right and when you deploy you're gonna it's gonna ask you to connect to your solana playground wallet so that's gonna be uh on this left hand corner here so click on that to connect your playground wallet if you hit deploy and it says you don't have enough solana what you could do is click this wallet click this right here and click airdrop and this will help you get solana sole right so there it is i got two sold just now all right so do that to get enough salon to deploy the contract you shouldn't need much to deploy since it's not that big yet cool so not only that i got two sole the deployment was also a success which means if you hit this cool test tube here we can see the user right and another thing right it's reading so basically salon playground is reading the the program and saying oh here are all your functions and here are all the accounts you set up which makes sense right we have a user profile account and initialize the user all right so did this program create any users at the moment let's click fetch all and you can see it's fetching all the user accounts and you'll see an array empty because we didn't create any accounts our function right here initialize user should create an account right so let's go ahead and test this function works and maybe you'll understand a lot better after we test it so the authority remember the authority is expecting a public key right here and it's also the signer right so that should be your address your playground wallet address or your phantom wallet address so you're just going to click that drop down click my address and you're good to go now here's the important part for you to understand it also needs a user profile right it needs an address for your pda right at the moment we don't have a place to put that data for the user account right we can get that address or that hash i mean through seeds right so which is user tag which is what guys a string and then your own authority all right so if you click this you want to click from seed right and you want to write in that string so you don't write user tag here this would be wrong what you want to do is type in the value this is a variable right and the variable is going to equal user state so that's what you want to write you want to write user underscore state all right this is important because we're going to do it again later okay so the next seed all right there's one user state string and then the authority which is just going to be copy this and then paste it here and then it'll generate unique hash and this is where that user account uh will be living so if i hit test boom look at that test pass i love seeing that and now if i fetch a user profile there we go this object right here represents a user so how many users do we have guys we have uno right we have one right and you can see how many airbnbs total he has zero what was the index of his last area b zero okay cool and also it has the authority and there's the public key right there so i hope that makes sense to you we're gonna do this over and over again with the functions and hopefully it's gonna stick right so let's work on the next function all right so moving right along let's create our next function which is gonna be adding an airbnb i believe right we wanna add or create an airbnb so let's go back to playground and let's set it up all right so how do we create a function guys well it's gonna be pub fn add airbnb all right it's gonna take in context of course and we can write arrow results like so okay cool so i want to move faster and faster as we do these functions because the pattern is going to be very similar right what is different is the logic here so we want to uh basically initialize an airbnb account with um information right what does that mean that means we're gonna take more than context in this uh function right here so what i'll do is i'll press enter and we can also press enter and we can actually leave it like this right so it's gonna take in context it's gonna take a location uh it's gonna take in right it's gonna take in a country right what else goes into an airbnb i look back it's gonna take in price right price and it's going to take in an image url right and we can't forget with rust we need to type in the type and context it's going to be the similar right what's the pattern guys for context it should be the same name as the function most of the time and we can say add airbnb all right does this exist yet nope not yet all right so we have to make it eventually so keep that in mind location uh location when i'm running this function right what should location be should it be a number no it should be a string that's kind of how you want to think about this so same thing with country string right price string right and this is interesting right i'm doing price and i'm doing it as a string right because in our airbnb clone right when i want to add the price i'm inputting it as a string it doesn't have to be a number right if you did want to make a number you can put uh u8 here okay but let's make it a string and for image url we also want this to be a string boom okay so all the parameters are set right we're going to take these parameters later and apply it to our airbnb account but right now we don't have our airbnb account set up right so let's set up the context first let's create the airbnb contacts okay so how do we create the pda context well we need the derived accounts again so we'll derive accounts and then let's see oh yeah we also want to do instruction here this is new we're going to say instruction boom okay cool instruction right make sure i spelled it correctly cool so we got these two macros set up let's write pub struct and then if you remember what i wrote it was add airbnb put in the info right here and then after that curly brackets bam that's the struct for the context and here we're gonna say hash account right and i wanna get the user profile right so here i essentially created or initialized a user account and here i want to use that same user account right so to do that instead of uh saying init right oops init i'm going to say mute right because when i add an airbnb it could be different users i can add airbnb you can add an airbnb cause you can add an airbnb alright so i'll say meat and seeds right so seeds if this is going to be a user profile what seeds do we need to fetch a user right how did we generate this seed well we took in a string right that string was called user tag all right to find that user that we're talking about and we also need to do authority dot key dot as ref okay cool and then we also need to add bump right and then has one authority right who has control over this airbnb it should be one person right kazi shouldn't be able to mess with my airbnb accounts right so we can say has one equals authority okay and then directly underneath this you can write pub user profile which is expecting a box that holds an account right which is holding the account of a user profile and that's the account that this box is holding okay that's how you can read it boom okay so we have a user profile right we need this so that we can determine who owns this airbnb right who has authority over it then we need to actually have the airbnb account so if i ask you guys do we have an airbnb account set up right we do not we only have a user profile set up right so how did we create a new account it's gonna be very similar to this so if you get lost keep this in mind okay so again to start we're gonna say hashtag account right and hit enter here and how do we initialize an account with anchor we say init we take in seeds right but is it's not going to take in the user tag this time right the seeds that to make or generate the uh public key of this airbnb account is going to be airbnb tag right another variable right which we'll make later it's also going to take in our authority right so that's the same dot as ref right but what also helps us generate a unique hash will be to put the index of the user right i need to know what was the last index of the airbnb so if this was the first airbnb the last index should be zero right so if i make a second airbnb the last index would be one right so that's going to help us generate a unique one so we don't get the same thing over and over right we're just going to say user profile right we have access to this because we have user profile and then we can get dot last airbnb right and that's it right so that's how we get the unique hash and these are the three seeds that it takes three variables that generate a unique uh hash like this okay from there we just need to write bump and then who pays for the the space or the creation of this account should be the same as the authority and the space right let's look at well we're going to think about what an airbnb account is so we'll come back to space in a second just know that there's going to be an 8 here okay so i can write pub airbnb account that's going to be a box that holds an account right and that account is going to be an airbnb account awesome okay so you'll notice by the way this is the airbnb account that we need to create so what i'll do is let's define what that is so go to states right we're in states now and now that we're in states we can create the airbnb account itself so to do that same thing as a book all right just going to write that this is an account right and it's going to derive default and then we can say pub struct airbnb count right make sure it's spelled exactly the same as you wrote it here okay just want to make sure cool all right so hopefully this will help you understand a little bit more if you didn't understand what the user account was when i have an airbnb account i mean what is the information that describes an airbnb right so let's think about this every airbnb right is going to need a location what's the location of this airbnb and the type of that is going to be a string it should start to look familiar all right what about uh you know where it is right but where is that location located right so you describe that as the country what country is this in all right okay what else do we need well we also need the price right and again this could be an integer but we can also do it as a string okay cool what about um an image yeah it's gonna need an image right cool so image and we can say string as well and we're going to say pub price right and that's going to be a string as well we know it did price already we need one more thing we need location country price image and oh this is another thing that's going to be important later but it's going to be is reserved and usually you write this in snake case but in our front end we have a camel case so i'm gonna write it as that it doesn't have to be written this way right i'm just gonna write it like this cool so this are the keys to our airbnb object right now translate it to us this is a struck and all of this is what makes up that struct okay cool so that's our airbnb account right uh one thing that i do realize that we're missing is we need to keep track of the authority and that's gonna be type public key and we also need to keep track of the index which i'll write as idx okay cool all right so this is it full thing now this should be defined all right so now this exists and now we can work on how much space does this account take up well if we're going to do the same thing here let's think about it pub key it's 32 all right index 1 location uh is going to be a string this is going to be unique because a string is usually 4 plus how long do you expect the string to be right in characters right so i say 256 is the max that we can expect and then same thing with country 4 plus 256 then price this could be four plus 256 right again you can make this smaller but just know that if you make the location longer than this many characters or bytes it may fail right for the url it's going to be four plus two thousand and forty eight right because this is the longest url string that you can have okay and now we can do for a boolean usually that's gonna be eight okay cool so all this together it should equal up to i have it here oh yeah 2 800 just couldn't get a quick addition on my calculator on the side but there you go this is how much base it takes up plus the account discriminator that i was talking about okay cool uh one last thing we'll need is the account authority right remember this this is the part that i said you're gonna repeat the authority is gonna be the signer and this is going to be system program program info oh and fro info system boom okay all right and is there anything else that i need no i think that's it oh i just remembered airbnb tag would be undefined here i'm going to go to my constants and let's define that real quick and it's going to be the same thing as above you just do constant pub const air b and b tag right and again you don't have to name this airbnb tag just name it whatever variable you want and it's going to equal a string right that says airbnb state so what do i write when i'm generating a seed i write this string i don't write airbnb tech okay because this is a variable holding the string good awesome okay so now that that's defined shouldn't be any errors but i won't be surprised that there is ah mismatch types god oh i see yeah we didn't even finish the function guys so let's do that real quick yeah so we have all of the we have the structs and the context set up we need to now write the function duh so let me just write the function let's hit enter right here so let's make a variable let's say let airbnb account right so what am i doing with this variable here what do i want to set it equal to think about user profile what did i set that equal to i set it equal to the context and i got the user profile so what i could do with this one is set it equal to the context right and remember this can change so we want to do n mute right and if i do dot accounts now i'm in here right and i want to grab the airbnb account so in the account i can say dot airbnb account okay cool awesome i will also need the user profile and that's because i need to set the index of the rmb as the user profiles last airbnb okay so let's do that let user profile is going to be and mute ctx got accounts let's grab the user profile and now we need to fill the context of the contents of airbnb account with all the arguments here right so if i write airbnb account if i were to console log this in javascript i'd see an object right how do i get the authority i say dot authority right what should i set this equal to i mean to get the actual key or you can say context.counts dot authority dot key right that should work because inside here i can get the authority from this right here and dockey will get it in a format that it likes awesome what's next airbnb account dot index set that equal to user profile right calling this variable and from this object give me it should be the same as his last airbnb okay and then we can do airbnb uh low.count i mean underscore account.location is equal to location right this location is coming from this argument okay airbnb count we need country country and i'm just gonna quickly move through the rest of it this should make sense equal to price uh airbnb account image is equal to image and then we need airbnb count dot is reserved equal to false right notice how i'm not using any of the arguments i know when i first make an airbnb uh it shouldn't be reserved or not it shouldn't be reserved already it should just be false are we done nope not yet because i can set the index to the last airbnb but if i don't change that last argument b it's going to be the same index gonna be zero zero zero zero so let's increment it multiple ways to increase airbnb index for pda right so user profile is another reason why we initialize this user profile dot last airbnb oops is equal to user profile dot last air here b and b right and i'm just hit enter here and say dot checked add right essentially check or increment it right and then dot unwrap unwrap it cool just to simplify what this is doing it's basically setting the last airbnb to be whatever it was plus one we will also need to do this for the total airbnb count right how many airbnbs does this user have right well it's going to be user profile dot airbnb count right is equal to the user profile dot airbnb count right so if he had zero airbnbs after he makes this first one he should also have one as the count all right so we can do dot checked add one and dot unwrap it to get it in the right form cool notice how i can put enter here because the semicolon is what marks the end of the line right and there is check ad but there's also check sub check multiply that we can use later awesome all right from there let's go ahead and write the okay again this is like kind of like a return and let's see if there's any errors got it so it says accounts.authority.key is an unknown field alright so i gotta double check any spelling or missing semicolons that's usually what it is so let's see ah okay so i forgot to define the type of this u8 okay and i think it said it had something to do with this this looks good this looks good um is this wrong oh that's good oh a comma right here and then had something wrong with this box count info oh i forgot to close this off there we go always see how this color is off and didn't finish closing off for the box so now let's try let's hit build a build successful and we do get one warning and it's this boolean or mention here right it should be snake case it should and the best practice should be like this is reserved but again uh just for this project i'm gonna do it camel case because when i pull it from the front end i don't have to change anything on my front end okay cool so if you look here right we have the airbnb instruction and the airbnb account but we can't test it just yet because we need to upgrade the build first so you will need some solana to upgrade your build and it's going to cost you more than last time but since we're on the devnet we should be too good to go and in case you're getting any errors uh with phantom right like if you were getting any errors previously with connection go make sure you click settings and make sure you are on the right network should be on devnet not me right because uh this specific playground is also on devnet all right make sure it all matches okay so it's almost done deploying and bam okay so we upgraded our smart contract we didn't make a new deployment right so how many users do we have we have one user how many airbnbs do we have created right we have none right so how do we create an airbnb account well that's what ad airbnb does so let's do this let's do let's make a location let's say space actually no location should be a rocket ship right the country right i'm not going to be traditional let's say space the price 999 and the image so for image let's use unsplash i think i have it saves for spaceship let's use this one right here it's pretty cool they're on mars so back to playground you can literally paste this image here and now this is the context part the accounts right so what user is creating this account right so let's fetch users it can only be one user creating this account and what is that user's public key right so what's the pda of that user it's gonna be this right here cool what's the authority we can answer that question it should be my address my public key right with the public key who also owns this user okay so what's the pda of the airbnb account right that's not created just yet right that's going to get created through the seeds right so this is what you need to put for the seeds so let's do from seed airbnb tag right shouldn't be airbnb tech should be airbnb state right next is the pub key which should be your address which i can copy here or you can get it from my authority and last but not least it does take in a number right so i believe it should be a u8 you can double check that right here user profile last airbnb and the last airbnb is a u8 okay so takes in the u8 and since it hasn't made anything it should be zero right i can double check that here zero okay so let's hit generate there you go it generated a unique hash from the seeds and then if we hit test let's go past boys and girls so now what does that mean if i fetch an airbnb account we have one airbnb in this array right think of it as an object right so when we fetch this later we can take the information and map it through our listing items right can you kind of start to visualize how we're doing this so this is good i hope this is starting to make more sense we have a couple more functions to go so let's keep on going okay so moving right along let's get back to our lib and what we can do next is now let's do edit the airbnb or what i'll say is update airbnb so let's create that function pub fn update airbnb okay okay and then we can do this arrow result like so and then curly brackets there you go so that's updating airbnb i'm gonna hit enter here and it's gonna take in a couple arguments as well right so of course it's gonna take in the context and the context which we'll need to make later is update airbnb okay and from here it's going to take in the index u8 location string all right we need to pass all this in because depending on what we want to do we want to change the location maybe we want to update the country maybe we want to just change everything right so let's pass in everything and only keep what we need okay so location country price and they're all going to be type string string okay awesome all right and then here it's going to be the logic but let's wait on that for a second and let's work on the context all right so you want to make contacts for updating airbnb what you have to do is just follow the same pattern as last right so it's only going to get easier from here i'm just going to do accounts and then we can say hashtag instruction again but this time we're going to take an airbnb idx wait okay cool i always spell instructional and struck sean nice okay cool underneath this we gotta write club struct update airbnb info curly bracket and from there we can do the hashtag account again okay i'm saying enter here cool so what i'm going to set up is the user profile so if it's the user profile right we can do seeds equal to user tag right and remember this is user profile right so to get the user profile we have to find it through the seat so we're going to take in the user tag the authority dot key dot as ref and that should get us the hash that we need right and then bump and then has one okay cool this is all for the user profile um this isn't anything new this is essentially what we did last time right we're getting we're getting access to the user profile again and you could have literally copy and pasted this if you wanted to but i'm just gonna write it out box account info user profile comma cool so we this is how we're getting access to user profile when we're updating the airbnb we need access right keyword access to the airbnb account itself so how do we get the airbnb account well it's going to be very similar as before and let me not make the same mistake cool now this is the right color so it's going to be similar to how we got the user profile so we want to say mute here because it's going to be a different airbnb account each time we got to pass in the seeds to get that hash which will be airbnb tag authority dot key dot as underscore ref comma and right it's a airbnb index dot as ref okay cool and there we can say bump okay now we can say as one equals authority all right let's say pub air vp account and we can say box account info and then what account that you're getting i'm getting the airbnb account there we go so we have we got user profile we got airbnb account right and then we just need the usual stuff which is the authority and system program right and i'll save you the time you literally you could just copy and paste the same thing here cool and that's it for update airbnb do i have to create an account again no because i'm using accounts that already exist we already have a user profile account i already have an ad airbnb account all right so what do you want to do now is just utilize the context right so this should go a lot simpler so we're updating the airbnb and we just want to change it to whatever we pass in right so let's just get the airbnb account right right set that equal to and mute contacts accounts dot airbnb account okay cool and then we can do airbnb that location right is equal to the location we pass in right then we can get the country set that equal to the country oops semicolon not comma okay then we need airbnb account again the price is equal the price and error b and b account dot image is equal to image okay and then from there you just gotta do okay and that's it and now i'm thinking about it we're not actually using the user account at all yeah because we don't want to we don't need to update it because that user is already has the authority so you know what let's see let me go here yeah we're only we're using the airbnb index anyways because before we're using user profile last airbnb but that should be the same as this anyways so what i'll do is let's erase user profile and this should still work all right that's update airbnb just remove that it should still build let's see if i missed anything hey okay so if you get the is reserved that's fine uh line 59 yes we're not really using this right but we do need to pass it in so let's just do that because that's going to come in handy later boom so now we only have one warning and it's the is reserved that one i can live with right we can change that to snake case if you want but it should be fine cool so let's upgrade the contract and let's test update airbnb awesome so it looks like it was successful and now we have update airbnb so let's test it out so we're going to update the airbnb let's pass in the index i don't know from memory that we should only have zero but we can double check index zero perfect okay uh what's the location let's just say do buy right and if you know where to buy is you set uae as the abbreviation we'll say 88 and for the image right i don't have an actual url for this but let's just say it's i don't know like um let's go back here let's say dubai and i like this one so let's take this paste that here airbnb account what airbnb account should we pass in right i don't need to create a new one but we should just take the one that's already made because i know what it is the authority is going to be me and let's hit test hey update your airbnb passed so this is what it looks like currently the rocket ship in space if i do a fetch all now you'll notice that it says do buy now and we have different image and a different price and that's what updating and airbnb should do cool on to the next function all right so the next function that we're going to create is going to be removing an airbnb which is essentially deleting or closing the account right so let's go ahead and work on that so if we want to make a new function you guys should know the drill by now we're gonna say pub fn remove air bnb okay make the arrow result like so curly bracket and bam that's a function all right so now that we have our function let's take in its arguments and when we remove an airbnb all we need to know is the context right which is going to be context and it's going to take and remove airbnb which we'll make in a bit it's also going to take in the airbnb index okay and then i'm just going to say u 8 for the type awesome all right and there's nothing really we have to do with the user profile besides decrement the total airbnb count right so let's set up remove airbnb so just going to scroll down below here hashtag derive accounts hashtag instruction airbnb idx u8 and then we're going to do pub struct remove airbnb alright so similar to update airbnb we do need to take in the index of the airbnb we want to remove just like we take an index of the airbnb we want to update right so this needs info as well and then we can do curly bracket and from here let's set up uh the user profile account so we can say hashtag account i can say mute and then take in the seeds of the user so what are the seeds that we need to get a user hash which is going to be user tag and authority dot key dot as ref and comma we'll add this bump here and we'll say has one which is equal to authority okay cool so with that done this is what a user profile is and the type that it expects it's gonna be a box that holds an account and what is that account it's going to be a user profile account which we created again in our states okay amazing okay so we have a user profile we'll also need to get the air b account airbnb account right so then we'll do the account like this oops then we'll say mute close is equal to authority and then we'll say seeds is equal to airbnb tag oops this also takes in authority.key dot oh yeah dot as ref and again if you ever confused what what seeds that we put in think back to when we initialize the airbnb right this is the seeds that it uses to create the hash right we can use the same seeds to get that key so we can just say and airbnb index dot as ref okay and that should give us the airbnb account that we want oh yeah it's not done yet we need bump has one as well and that should be it from there we could say pub airbnb account which is expecting a type of a box that holds an account i feel like i'm really repetitive but this is the same pattern guys so once you get used to it think about what you need access to all right that's my keyword and what do you want to do with it right so we have user profile airbnb account and we can copy this because it's the same thing the context will need the authority and the system program now quick question do i need to make any accounts or create any new states here nope i'm just reusing these again that are created and getting the specific uh like keys i need or specific account pdas okay now for the actual logic this remove function is kind of misleading you're not removing you're not writing any removing logic right the key here is in remove airbnb right is this close equals authority right it's basically saying hey who can close this or are we closing it like it's all handled through this right here all right notice how this close isn't in here right when we're referencing the airbnb account the close is in remove right so that's handling uh removing or closing that account what we do want to do here is uh decrement airbnb total total count i believe if we already called it already oh yeah airbnb not total airbnb count okay so how do we go about doing that well first we need to get the user profile all right luckily it's in our contacts right and so we can say and mute ctx.accounts.user profile okay so now we have the user profile what do we want to do with it all right think back to adding airbnb account right this is increasing the index we now want to decrease not index but a number so we can do that by saying user profile which is the variable dot airbnb account right so this will get us the airbnb count of the user in this case my user and at the moment this current point in time that i'm talking about we have one airbnb account so this is actually one right now but to decrement it you can say equals user profile dot airbnb count dot checked sub right one and then dot unwrap okay then semicolon because that's this whole thing is one line okay so check sub it's essentially similar to check add except instead of adding one we are removing one and then setting that equal to the new airbnb and that's what remove airbnb is doing right and we can just say okay awesome all right let's remove airbnb see if we have any errors or spelling errors yes we do okay so i'm assuming it has something to do with this struct so i'm just gonna take a quick look at it so looks like the error this is definitely closed this is definitely closed oh forgot to put a comma here and maybe that would fix it hey okay build successful right again warning warnings we can live with right it's just that is reserved which i pointed before so we're good to go and test it right so after we wrote all this code let's make sure we upgrade the program on chain so i'm just going to quickly upgrade and check back when it's done all right deployment successful okay so with that said we can go ahead and test remove airbnb right so again quickly remember that we have one it's this dubai one right here and let's see if we can remove it so what does removing it look like if i were to fetch this it should go back to being an empty array all right so what do we need to remove an airbnb we need the index so what is the index of this right we know because we fetched it it's zero and what are the accounts right so now ask yourself if you get confused here am i generating a user profile public key no am i generating an airbnb account publicly no i'm just passing in what already exists right so with that in mind you just need to get the public key of this user account paste it on there right then you're going to take the public key of the airbnb account paste it on there then you're going to put in your authority which is your wallet address essentially then test and look at that i'll remove airbnb passed and if i fetch all no more airbnb right the account got closed and what you'll see too when you store stuff on the salon chain you need to pay some soul and when you remove it since you're not paying that's only more you get some of it back right so that's cool you'll get your salon back because you're not you're not no longer using that space right it doesn't really matter on devnet because essentially everything is free we're just testing and learning with salon cool so let's remove airbnb next up we have the book airbnb function right so this should be uh pretty simple because we're going to do it in a certain way right so let's just review real quick we have two accounts a user profile account and an airbnb account right so what should be the difference between an airbnb account and a booking account well if you look at the airbnb clone if i heart this i set it for 910 then i do reserved you'll notice that it's exactly the same as it was before except for a slight difference which that this time it includes a date right it includes a date okay and it includes the date because right whenever you create a booking you should know the date that you reserved it for so i reserved it for 9 10 and this is my nice little hut in the philippines awesome and the cool thing is that it's marked by a heart so what's the idea with a booking account right so with solana i'll the only people that have the authority for the airbnb accounts is the person that created it so if i wanted to book it i essentially can't um edit that account and transfer it to me right because i need to sign over that authority but then that's not always the case so we're going to do instead with booking an airbnb is we're going to create a booking account which just passes in the same data from the front end right so that's the workaround for this right we're doing this just to practice creating functions right so this one i want you guys to pause the video and try it yourself and see if you can make a booking account right so i'm gonna give you guys three seconds three two one you got it cool so let's reveal the answer as i explain it all right so you guys want to book an airbnb all right it should be pretty simple it's just going to be the add airbnb function all over again with one extra uh property right so let's do it say pub fn book airbnb parentheses arrow and result yep so if you did this so far you are killing it okay it is going to take in a couple things so i'm going to format it like this take in the context which is book airbnb we will take in the index it's going to be u8 and taking date string location string country string oops price string and of course image almost forgot that string cool all right so from here right we need to create the context so i'm just going to scroll all the way to the bottom here and let's do one of these okay make this a little bit bigger for you guys and let's make the context so whenever we're making a context we want to derive accounts right because we're creating a new um pda for booking accounts that's the goal right but the first we got to define the context we can write instruction here then we can say pub struct book airbnb info and there we go cool so what do we need for a book airbnb we're gonna need uh the user profile account so let's get that how do we get that we're gonna do one of these oops not that one i'm gonna say mute seeds what seeds does a user profile account take in it takes in my variable user tag and authority dot as ref bam then we can do bump then we can do has one equal to authority alrighty so then from there we can do pub user profile and you guys notice drill at this point box account info then write user profile so we can get the actual struct of the user profile account okay can't forget the comma um oh yeah so we have that and now we need to create the booking account right initialize it right so luckily we don't have to do the work of initializing it because anchor can take care of it with for us by saying account parentheses and init right that's what's taking care of it now let's define the seeds what are the seeds of a booking account right so again entirely up to you but what i'm going to do is make a variable called book tag right very similar to user tag and airbnb tag this is going to be a variable that holds a string okay then we're going to take in whatever our authority is and then let me see dot as rep cool and actually we don't need to add anything else all right that can be it okay and then from there we'll just say bump and set that equal to oh no sorry bump then we do payer and set that equal to a sort all right again if you did want to make unique uh even more unique hashes for the seed right we can add an index here but again let's keep we can keep it simple all right how much space does this take up not entirely sure yet so let's just leave that blank for now and then we'll do a pub booking account right this is us initializing the account which takes in that box that we always use okay account info booking account all right so the cool thing is guys if you wanted to make any kind of app right let's say you wanted to make i don't know uh a amazon for example right you can define your items here like you can make a item account right and then put what properties an item has right so that's the benefit of what i'm showing you guys like feel free to use this however you want right you know if you want you can even add more properties to each account we can have like the owner um how far away is it from you and so forth right so after booking account we just need the authority and the system program again so we can save time by just pasting the same exact thing and that's it for the struct all right the next thing we'll do is need to define book tag and we also need to define booking account so start with book tag because that's going to be the easiest and to do that just come down here say hashtag constant then you can say const book tag and u8 and set that equal to the binary string of book state all right so that's the string that we write when we're in putting our seeds remember that now for the states all right we need to define what the hell a booking account is and if you think about it it's exactly the same as this except what all right so i'll copy this i'll paste it because it's exactly the same but make sure you change it right if you're gonna copy paste it make sure you did everything right so it's gonna be booking account not airbnb okay so what's the difference the difference is it's gonna have a date right so underneath this authority you can really write it wherever make sure that it has a date and that's going to be a string and again this how much base does it take up it should be 256. all right same amount of space as location country that should be plenty for the date that's it that's the booking account itself we can now define how much space this takes up and if i add up all the numbers together um it should give me like 3 000 something i believe let me just quickly do it yep 3125 plus the account discriminator okay cool and if i barring any spelling issues or missing commas this should be good to go oh yes forgot to make the logic of booking account yes okay cool so give me an error because i didn't finish writing out the function but we have everything we need set up we just have to write the logic okay so writing the logic what we did if you remember the ad airbnb we needed to get the booking account right and we can do this because that's in our context so it's in our context accounts booking account boom okay so now we got to fill up this right with all the values where do we get all the values for the date location and stuff like that well we passed it all in okay so what we can do is say um booking account oops booking underscore is account.idx to idx and let's get the date equal to date booking account dot location is equal to location booking account dot country is equal to the country and now let's work on price so you can just say dot price and guess what that will equal to its price again i know all right so we're almost done let's get the image and say img all right because that's what i wrote here i think yep and i think i wrote in okay next we need booking account dot is reserved and this shouldn't be false right because if it was um adding an airbnb it would be false because it's not booked yet but when i make a booking account oops my one two four it should be true you might ask and it could be possible to go into the airbnb account and switch that to it true right the thing is the authority right if i make the let's say i put up a nice cabin in the philippines and qazi tries to book it and he wants to change this to true he wouldn't be able to because i have the authority because i made the account right so i could ask him and then he would sign it but there's no guarantee you know he'd be there to sign it or again it's just it's just not right with in terms of authority the easier work around is to just take the data from the front end pass it to this function call and make a brand new booking account all right cool this again is it just to practice creating the function and that's why you guys should get the pattern by now so that's okay let's see if it likes it now and bam build successful yep yep yeah so now we have two warnings because there's two is reserves now but again totally okay right so now we have book airbnb let's go ahead and hit upgrade so that we can finally test it all right there it is there's the magic words deployment successful right let's go ahead and create a booking account before we get a booking account we should probably make another airbnb so again i'll use dubai uh country price and the image okay for the user profile we're gonna need to get that from here take this public key and the airbnb account does not exist but we need to get the right hash for it so we're gonna get the seed which is airbnb state right it's gonna take in the pub key and i believe the pop key is just the authority make sure right here yep my authority which means it's my wallet address and it takes in a number and we can put you wait say zero generate and my authority my address test you do something wrong no unauthorized sign let's see real quick okay i just did the same thing again i might have put the wrong um public key so this is different 60s test cross program oh i see it's because the last airbnb so let's see yeah last airbnb was one right so we need to put in one i'm pretty sure that's it so instead of this from seed airbnb state we need pub key my address let's do this try one there you go it passed right i put in the correct seed for it now right so now this should say two and total airbnb is one all right so we're keeping track of its last airbnb and also keeping track of the airbnb account okay this is so that uh if we have three airbnbs and they have zero one two right remembers what the last index was so we don't have multiple right so now if i fetch this we have one perfect and now how many booking counts gone right to simulate the front end we're gonna book this airbnb so to do that we're gonna pass in the index which i believe it should be one yeah one one the date we'll say september 9th through september 10. right is this how it's written yeah dash okay we could do that put a dash right here boom dubai right and this will be all automated when you're booking airbnb you won't have to input anything it's just gonna take the info of the airbnb account and then pass that as the parameters so we'll do that 88 image you can uh pass the same image okay cool uh user profile account pass in that booking account from seed this should be book state and just my public key right remove the index thing we can just do this generate my address and test boom passed there you go that's what we want to see and now when we fetch this there we go so i have my booking account and we have the date of when i'm booking it right so we can do stuff with this right so that's the booking account all right believe it or not we're on our last function which is we should be able to uh unbook an account so if i click that we are no longer have that account booked okay cool so let's go ahead and work on that so i'm just going to scroll to the top here and let's make that function at this point it should be very easy to make a function all right you can just say cancel booking all right and when we cancel the booking it's gonna have a result like this okay and the difference between this cancel booking and the remove airbnb is that we don't need to decrement the count right if you were keeping track of the last booking account then you would do that but for us uh really you can just write okay here and we're pretty much done okay we do still need to write context though because it's in the context that matters so we'll say cancel book for short and we should also take in the booking index all right i'm passing this in so we know which booking account you want to delete okay so we need the index that's okay uh let's make a note here closing account is handled in context but if you didn't want to do anything else like change i don't know decrement the total booking account right then we could do that here but we don't have that set up right because you get the idea so we just need to set up the context all right so this should be pretty straightforward then so we're going to say derive whoops the royce derive accounts and we can just say pub struct cancel book let's say info right here and within this we need to get the booking account i believe i think that's the only thing i really need yeah i just need the booking account so what i'm going to do is say mute here and let's just say close equal authority seeds equal to book tag authority dot key dot as rep then we do bump then we do has has one equal to authority all right cool and that's the booking which will just have this box that we have again yeah as you can see there's a lot of repetition in a lot of things i'm doing right so just know depending on what you want to do it might be the same thing cool so we got the booking account and we just need the authority and system program once again and there you go we don't need to make any account struck because we already have a booking account um yeah just taking in the id let's see is there anything else doesn't even really need the id not on thinking about it but we'll keep it in there for now all right so let's just see if the build would pass awesome build successful let's upgrade it and then we'll test it all right deployments all said and done let's test this out right so we should have a booking account right yep we do just to confirm oh it doesn't have an authority that's what i realized why don't you guys tell me the authority should be the same so let's see let's go back to this yeah we did miss one thing for booking an airbnb should have made the authority booking account dot authority dot equal to ctx accounts dot authority dot key okay yeah so if you see this one one one one if i didn't specify the authority the default is just this one one one one right here okay awesome and yeah we have this yeah the authority should be my wall address but it's just the default one that's fine all right so we finished deploying we can now test the cancel booking all right so we're gonna pass in the booking index i lost it so let's get a pack which is going to be one all right uh the booking account is going to be this thing over here and the authority should be hours but since i didn't put an authority we i think we have to use the default one which is this let's see if that works if not it should be ours okay cool so signature verification failed let's try my address yeah one constraint failed so this this might be a uh account that i don't have authority to change not too short to be honest with you guys but let's just make a new one let's just book an airbnb the index of this uh we'll say 2. the date can be september 9 or x 2 12 to september 13th the location this doesn't exist but we'll do space or rocket ship rocket ship country space price 9.99 and the image can be test right so again the user should be me right that's the user profile the booking account can come from the seed we can say book state right here then the public key which is my wallet address generate and authority and this time it should have the right authority oh rent exempt threshold oh i see okay okay so i quickly just redeployed the whole contract and let's just start from scratch okay so we have no users no airbnb account no booking account alright brand new contract right i can show you guys how to do that later but let's go from the top and then we can move on the authority is my address the seed user state and or not string we need a pub key which will take in public key generate test boom cool we got a user all right here's the proof all right this is the public key for that user we'll know we'll need it later let's add airbnb right so let's do dubai let's do uae 88 dollars and for the text i mean the image address we can do this guy right here and for the user profile we got that it's right here the v7 uh airbnb account we need to figure out what's going to be the airbnb account so we can say air b and b state all right then we can do pub key which again will be my address and also it's going to take in a number which is going to be the last airbnb that they did which will be zero all right we can then generate it my address test boom we have an airbnb okay cool so we have an airbnb here's the proof let's book that airbnb account so to do that we're gonna need to book it taken the index which i believe is zero as well yep it's zero the date we can say september uh 6 to september 7th location right we can do dubai same thing right again we wouldn't have to manually put this in when i'm calling this function it'll be automatically passed forward in the front end and we can take this image paste it cool all right user profile it's that v7 thing the booking count we need to generate from seed which we'll say is um book state pub key and we can say my account which is this generate authority my address there we go okay so we were able to make a booking account all right nothing weird going on boom okay now we want to remove our booking account right so if we want to remove our booking account we're going to use cancel booking pass in that index all right get the exact booking account address right the public key pass in the authority and it should be taken care of from the context and bam cancel booking pass all right after all that if i fetch all boom no more bookings right so functionality wise airbnb clone is done all we have to do now is plug all of those functions in with our front end so you guys ready for that if you guys made it this far drop a like in the video comment down below that this was helpful and you know what type in marshmallow in the comments so i know you made it this far okay cool so let's work on the front end now all right so all the functionality is done let's figure out how to bring this functionality and call these functions right from our front front end so what i'll do is i'll bring back vs code for a second here and let's go ahead and let's make a custom hook alright so if you don't know how to make a custom hook right all you need to do is just make a folder called hooks and now make sure it's not in pages or anything like that it should be its own folder so inside that hooks folder right i'm going to make a new file and i'm going to call it use airbnb dot js cool so this is going to be important for later all right i'm going to put a pin on this and uh let's talk about a couple things so you have your solana program on chain right if you look under constants you're going to have something set up for you which is going to be the index right in the index.js all right you need to set this up in order to get the program right we need to first fetch the program and what do we do first is get the key right the address right so what's your address well it's easy to find out because if you go to the top of your lib my dz ks right it's different from earlier because i just redeployed it i got in i started a new program what you want to do next is hip copy this all right get back your vs code and then replace this because this is the demo with yours right so now that should be good right the next thing you want to do right is go to this toolbar right here go to idl and hit export idl right you'll see this ideal.json uh it says eight here because i have like eight of them when i was testing this but yours doesn't have to say that you can double click that for using chrome and it should open up that idl in chrome i mean nvs code so i'm gonna press alt z so you can see what this idl is and essentially is a json file of our app right you can see uh all the information like our constants right user state in here right we can also see all the functions we did like update airbnb what you want to do is just copy this and within the constants on airbnb.json right ctrl a and then erase what's in this airbnb.json and paste well not the image.bmg i don't know what happened there i'm going to take all this stuff copy it and paste that in this airbnb.json all right so that's part of the setup for this hook we can go back to use airbnb now all right and once you're here let's import a couple things that we're going to need for this right and i'll explain more what we're doing here so first let's import star as anchor from at project serum anchor let's import some react hooks while we're here we're gonna need use effect um use memo and use state we might not use mute memo but we're definitely gonna use use state and use effect okay okay from here we're also going to be using uh import the airbnb program pub key from constants all right this is what we set up earlier in our constants folder right remember where we put the program id i'm exporting it and importing it here okay next we want import air bnb idl from dot constance slash airbnb.json alright we're importing the idl as import airbnb ideal cool let's also get a system program from anchor actually no we don't want this from anchor we want it from atlanta web3.js there you go we want system program from there we then want to use utf8 from project at project serum anchor slash dist sas cji slash utils slash bytes perfect all right utf8 cool you also want to import uh let's see find program address sync and don't worry we're going to be going over all these and whatever i end up not using we can erase right cool from here let's do use anchor wallet use connection and use wallet okay oh yeah so there's also an author filter so let's see do i have that here utils i think it's in utils oh yeah so this is the uh account discriminator right that's all set it's already set up for you guys right you need to have this here because what we're gonna do is import it in our hook import author filter from utils and let's import public key from solana web 3 and there's just two more things we we can use uh set all right this is going to come from the date so when we're going to book stuff later this is important i'm going to import t r yeah i'm not sure if we're going to fully use those two but we'll see perfect okay cool we got all the imports i know that was a lot right but what do we want to do here well we want to use this hook in order to write the functions we need and then we can call any of those functions within our index so the alternative right guys is if i open up the index right the alternative is i write all the functions in here kind of like how all these static functions are right or i can write all the functions in here and then uh deconstruct it and call it here kind of like i'm using use wallet okay that's what the custom hook is going to do all right just for organization purposes awesome so how do we get started and say export const use airbnb oops use airbnb is equal to an empty function cool so all we need to do at the very bottom is return like this and we're good to go right so essentially uh if i make a variable here let's let's try it let's just show you what i mean let's say const uh number or message is equal to what's up youtube right let's say this is my message to you guys all right and i'm storing it in this hook right what you can do is return that message okay this is how you make a custom hook all right and so once you do that go ahead and hit save go back to your index page let's say import uh use airbnb and you're going to see this suggestion on vs code you can click it to finish it use airbnb from hooks slash use airbnb and let's say const and we're going to deconstruct use airbnb here we can get whatever we want from that return so right now it's just message right so if i do console.log message right let's go back to code inspect and let's see all right because i don't think we're running it yeah we're not we're not even uh running the app right now let's do yarn dead or let's cd to the front end which would be a good idea then do yarn dead there you go all right we see what's up youtube right we see it a couple times but it's not supposed to do that but it should just load as what's up youtube once all right cool so that's how we can get accuser for a hook right whatever i write in user me airbnb i can export later right i can set up my use effect there so i don't have to put it in the index as well and then yeah we can call in all our functions there so let's bring back that code and let's keep it right here awesome all right so you get the idea with the hook right yes all right so let's set up a couple different things here uh one of the first things i want to do is get the program okay so how do we get the program well i think we are actually going to use use memo for that all right like i said we're going to be using use memo and use memo it's going to take in an anonymous function okay cool all right so what do you want to do here with this used memo we want to figure out what the program is right so what we can do here is erase message and i did this already but i removed message from here right so it's just an empty here take out that console log and we're caught up so let's go back to use airbnb awesome from there let's do if uh there's a wallet right so we have anchor while we're making use of this here we can make it simple by saying anchor wallet okay so if there's a wallet we need to set up a provider right so what's our provider well the provider is going to equal to new anchor dot anchor provider okay and it's going to take in a couple things we'll need a connection uh we'll need a wallet and what else would we need yeah we'll need the anchor default options as well so to get the connection all right to get the connection all i have to do is say const connection right we're deconstructing this and getting it from not from sorry from use connection right it's one of the inputs that we have uhhuh and again this anchor wallet doesn't exist yet so let's bring that in we can say const uh anchor wallet set that equal to use anchor wall cool so we got a wallet we got a connection let's pass it all in so we can say connection anchor wallet and we can say anchor dot anchor provider dot default options cool all right i'm just gonna do an alt z here so you can see that a lot better how's that guys awesome all right what do we want to do with all this information well we want to return new anchor dot program and here is gonna pass the idle where we can see all the parameters idl the program id and the provider and if there's no provider we use the anchor provider all right so let's do that let's say air bnb idl airbnb program pub key right then we could say provider cool yep if statement and then put a comma here and then we can say connection and anchor wallet right we'll run this if any of these variables change okay cool so let's try to console.log the program let's log in the program and let's put a little note here it says program is here okay not that window oh and before i move on i have i just realized there's a typo here this is not coming from any we're not deconstructing it deconstructing it i'm setting it equal to this anchor wallet so now let's bring in the right window should be this one boom okay cool the program is here that means that this vn right here is the program and inside it has these attributes right has the methods all our instructions right you can see add airbnb in here all right so if i do program.instruction i can call in all of these functions that we made right and now we have the account we can see all the accounts as well with this program airbnb account booking account and the user profile right so which account do we want to work on the user profile that's correct right so with that said we don't need to this anymore right what do we want to do right what do we want to do when we load app we want to get all of the accounts right all the necessary accounts right we need to get all the airbnbs and the user or just the one user right cool so what should we do first first right first check if there is a user right user profile account right exists right if it doesn't exist all right something else should happen right so if exists right if there is already a user what do we want to do load all airbnb airbnb accounts okay if does not exist initialize the user initialize user right or call the initialize user function from our contract right so let me make this a little bit bigger and before i do that actually let's get that airbnb cool so if i asked you guys really quick how many users do we have on this program we have one right but is this user the same as this user it is not right we didn't initialize a user yet right so if i were to run uh all this code am i going to run this if statement or this if statement exactly if the second one right it's not going to exist so we should run initialize user right if it does exist load all the airbnb accounts right so how can we make this code a reality this is called pseudocode right well one way i can think about it is let's make a use effect all right use effect is a react hook all right that's gonna let us do stuff when the component first loads when it updates and when it gets destroyed right so what i want to run first is this function called start right and it's going to be asynchronous and let's figure out what start does start is basically starting the app initializing any files we need right that's why i'm calling it start cool so if there's a program and if we have a public key right how can i tell if i have a public key well i think uh used wallet can help us out okay so const i can say public key public key is equal to use wallet right so if we're connected we'll be able to see the public key that's connected and it's in this variable right here okay so we can put public key right there and not comma sorry we need a double and right if this is and both have to be true for this if statement to run so if there's a program if there's a publicly we are gucci all right so what do we have what do we want to happen then all right well we can set up a try catch oh okay set up the catch perfect cool so what do we want to try though well remember let's go back to island playground right i keep going back to slaughter playground because the tests really under help you understand what's going on right so when we were getting this user profile how did it generate this unique hash this v7 right it generated it from the seed right so the same way it it figured it out right it gave us that unique hash we can find that pda or that unique address okay i'm using interchangeable words here right so we can for now we'll say const square brackets is equal to a weight and we'll do find program address sync right we want to put in the seeds all right so to get started we're going to put an array here and we're going to say utf8 right oops sorry dot and code right and here we put in that first seed so what was our first seed again it was a string right what was that string it was user state right we're turning it into or encoding it here to make it similar to the seed from our salon a playground what else did we pass in as a seed we passed in our public key right but we can't pass it as is we have to to buffered it to cut it in a format that it likes oh so that's that then we can do a comma here and then we can say program all right and then we had to get the id from the program we do dot program id right hit save here it's like no different it has the system program here it has the user profile it has the authority our public key okay cool so from there we'll get the profile pda right so that's why in this square bracket here from this right it's going to check if there's already something there and it's going to come out as profile pda but what's the next step guys the next step right let's say uh we did find program address sync we found it right it's this v7 thing but how do we get all the information with that right so let's pretend all i have is this what we need to do is take that profile pda and fetch it so then we'll get a user right if we if i were to put something random like this and hit fetch it wouldn't work okay so let's fetch that and it's actually pretty simple to fetch it what we have to do is just say const profile account we're gonna make a variable to store it in and say await program right this is the program itself if you remember it has access to all the accounts dot account dot user profile dot fetch and then what do we want to fetch we'll want to fetch whatever we got from profile pda okay so from here all right now i'm running a lot of code right now but if there is a profile account right if they found something right let's console.log load oops load airbnbs all right else what do we want to happen right we want to essentially uh initialize a user and we're not also going to initialize a user right here all right we're going to come to log need to initialize user okay so which do you think is going to run load airbnb's or need to initialize user or are we going to get an error right could be anything at this point right i'm not sure let's go ahead and check it out okay so let's hit refresh okay nothing saying it's an error just yet let's look at the console okay reading properties of null that's not good um ah i know right so it's because uh we're not calling the function it's called a function so say start all right we wrote the recipe but we didn't make an order for it hey okay so we got an error the user does not exist right there's no user account that means this oh wait failed it went into the catch so that means this catch ran and we know we need to initialize the user but now the question is when do we want to initialize the user right when do we want to initialize the user well if you remember if you watch the todo app we can set up a button to initialize that user right because i don't want to overwhelm the user initializes them right away let's make a button for it all right so the question now is where can we initialize the user or where should we initialize the user so let's take a quick look and understand what we're looking at i'm going to open up airbnb clone awesome cool so the way i'm thinking about it is if you look at this this is our phantom wallet connection if you remember the todo app there should be a button right here that lets us initialize the user right we can actually make it the become host button or we can set up a another button right here so what component is that area that i'm i'm writing in right what component is this is this the listings is this the index like let's take a look right and this looks a little different because i got unsaved so i'd redrew this again but it should be the header that's where it is okay so let's go and look at the header i'm gonna open this real quick go to components go to header and there we go right and you can see that i've already done it for you but i've already imported initialized user and something called initialized right so if you go down below here awesome this is probably where we want to put that button so let's put a temporary button for now and say uh initialize initialize all right we'll just say initialize for now bring this back and there it is right there's the initialize button right no styling whatsoever but we want it to be conditional right what do i mean by conditional well if we're already initialized right remember how we got that uh account doesn't exist all right if the account does not exist we should see this button initialize if we don't see that button i mean if you don't see the if the account does exist we shouldn't see initialize you with me cool so easy way to do that right let's say we're looking for something called initialize that's a variable let's say uh if const initialized is equal to true if that's true should we see the button no we should not see the button so what can we do here we can say curly brackets and we can say if initialized right this is called conditional rendering all right this is a ternary statement if initialized load nothing all right cool and let's put it in here so it doesn't give us an error and then this colon right here is like an or statement if it's not initialized if it's false load the initialize button oops let's do it on c here control b boom should be a lot easier to see okay cool so if initialize true load nothing if it's false load the initialize button oh okay so it's already declared as a const that's fine let's say lit not because it's already declared somewhere const initialized let's see am i declaring it alright initialized no there's no results okay so it is not defined yet so what's the problem let's say lit i'll make it easier i'm just going to make this outside of a header alright so we're going to go up one parent and then bring it back down does that make sense so if we go here let's just say let initialized is equal to true make sure i spell it right and go to header and let's add that in initialized is equal to this is called a prop and i'm passing it initialize as a prop and the name i'll give it is going to be initialized okay and if we go to the airbnb let's see if it's undefined oh now i see it because it's because of the spelling it keeps the spelling wrong so let's go back to the header scroll down initialize okay cool awesome so look at that initialize is true right so we don't see the initialize button this conditional rendering is running this one right and what's happening how come initialize is not here but it's working right it's because i passed it down as a prop right so if you're not sure what props are if you're a complete beginner right think about it that like this right i defined the variable initialized over here right what happens is i passed it down as a prop to here so header knows what initialized is because i brought it down like this okay what we want to do eventually is have our custom hook right to picture this as a hook our custom hook which defines initialized right this is our use airbnb hook it's going to define initialized and then we bring our hook into here and then we pass that down to header that's the goal okay right so we know what happens if initialized is true what if initialized is false so we can go back to the index not that index let's go to this index and i believe it's at the top right here set that to false and it should come back up there you go so depending on what state it is this button will show up right so let's give it the styling we want and the function so what i'll do is let's move this initialize to use airbnb so i'm going to erase this it's going to say it's undefined that's right cool it's going to use airbnb and instead of making it a static variable let's make it into a state yeah so if we're going to make it to a state i'm going to say const initialized initialized and set inish initial initialized is equal to use state i think of this as a toggle right so the value of initialize should start as false right and it's going to turn true if there's a connection okay all right so this is a state then i can return initialized okay and it should be false at the moment because that starts at false and then what we could do is go back to this index and we'll bring it back here and now it should be defined again okay you follow it cool right awesome what else can we do here we can set up the set initialized button now well we set up the button but we need the function okay so let's make our first function in here which is going to be initializing a user right so this is and keep in mind we already have initialize user on the blockchain right we're going to call that function but we need to make a function on the front end that called right so we can say const initialize user is equal to asynchronous okay and we always have to have some check here if there's a program and a public key because we don't want to initialize the user if there's no program that goes with it and we can do a try catch here catch just shorten this to error and then we can console.log that error cool and this try catch we can um let's call it right so remember how we got a user all right so first we can do const oops const is equal to find program address sync right and then we have to put in the seeds again so let's put in the seeds we can say utf gates dot encode all right what's the string that we put for the seeds you got it user state okay and then public oops public key dot to buffer you can do alt z real quick and this should be in the array still and then we can do comma program dot program id okay cool all right so what's basically what we're doing is we're getting the profile pda as we showed before right and um it's going to find the pda for us and remember there's not there shouldn't be a user there this is like the test uh if you go back to this this is literally like the test that we were doing for initializing a user this is us generating from seed the the pda address and then we're going to put the user account data at that address okay and for whatever reason that fails oh it's going to console.log and error but what we're going to do next is set up the transaction that happens right so we can say cons tex for transaction and say await program all right this is our program remember uh looking at that object if you do dot methods we have access to all the methods right so i can write this in one line or i can format it like this i can say initialize user right this is me directly calling our smart contract right cool then from here we can say dot accounts all right what is dot accounts that account is our contacts all right so we need to put in this this is the account so we need to put in our authority our public key right our authority our authority our public key and then the program id right so i'll do the authority first i mean our our pda first right and that's the one we generate from seeds so we can say user profile is pro oops profile pda right that's going to be the pda that we generated oh yeah this should be an object actually okay cool now anymore and then what's the authority right the authority is our public key we have access to that and then do we have access to the system program right we do this should be the lowercase one program is the capital system program it's one of our imports dot program id okay and then we can do a dot rpc cool awesome that's it all right cool so now it's done we can actually put a comma here and pass that function initialize user and then let's go back to pages let's deconstruct it from our hook initialize user and let's bring it to the header yep initialize user is equal to initialize user and this doesn't have to be the same name as this you'll see that in a second and then let's go back to use airbnb and uh we also need to change the state right because once we initialize the user this shouldn't be false anymore it should be true and then we shouldn't see the button yeah okay cool so let's do that okay initializing the user that means after this rpc we can do set initialize to true right and that's not the only time we want to set it to true right in our use effect if you go back to it when should this be true right it should be true it should be true if there's a profile account right we need to set initialized to true all right that's actually one of the first things so i'll put it at the top okay cool uh if it's not true right we need to initialize the user so just in case it's not the last state was true we should make it false and that's pretty much for this else statement right the us seeing the button is literally telling us we need to initialize it okay uh the last thing i want to set up is something called transaction pending right if there's a pending transaction we need to sign for we can make a state for it we can say trend section pending and set transaction is equal to use state and again this is just a flag right just like before it's just going to be true or false depending on what happened and should be false at first okay and what i want to do with this is essentially load it again if the transaction is pending so we want to do is make another and here and if transaction pending is false now there's no pending transactions you can load the try catch um let's use effect here oh yeah we only want this use effect to run the based on this dependency module if i don't put anything here it's just going to run once but if i put the public key it's going to run again when the public key ever changes and it will run again if the program ever changes and it's gonna run again if transaction pending ever changes okay so what do we want to do with this transaction pending is whenever we start a transaction we can say set transaction pending to true turn that flag on right and once that flag is done right we can do something called a finally here and do a set transaction pending as false right so we don't have to refresh all the time sometimes this will take care of it cool amazing okay cool so we can head back to the header let's go to the header yep and what we want to do now is let's fix up the styling of this right this button should have the styling that's very similar to the become host button so we can actually just copy in there where is that button okay we can say class name and just paste that in there and more importantly we need an on click on click one click is equal to and we should have access to this initialize user okay there you go it should be defined now let's save that and let's see what happens all right i'm going to truth i refresh this we should see initialized if i click this on click links newspaper function got object okay cool it thinks it's an object let's figure that out why is this an object okay we can test if this is an object but right before we pass it down here you can say console.log initialize oh i see i cse all right did i put it the same name initialize user oh okay i did we can say console.log initialize user comma yo let's see it's a function okay it looks like it's a function it's a function in index right now the trick is is it a function in the header click refresh i type object that's strange oh i think it's because i weighed the mail the way i made the on click let's put this in here you might like that better hey okay cool it's a function now all right now we do some testing okay that's something initialize user is not a function okay that is interesting ah because it's spelled wrong here too god dammit okay so we're gonna have to spell it wrong over here without the eye well this we can spell right but the used airbnb it should be without the eye and now i might like it and how did i spell here initialize user all right i'm just going to hit refresh one more time hit initialize and see what's up because apparent i know it's a method i spelt it wrong but right and let's see initialize oh dot account okay um yeah this should be dot accounts hit save get this hey okay if you see this this is a very good sign it means that uh this the transaction is going through what matters is if i hit approve uh that it works so let's hit approve oh look at that you guys saw that the button disappeared automatically without me refreshing right so there are some comments down below saying we shouldn't have to refresh you can just set a state that flags if a transaction is pending or loading and once it's done that should go away so let's see if that function worked i'm gonna there should be two user profiles now let's go so this hcd right this was generated from our function right we successfully called a function from our smart contract right the only issue is i spelled it wrong right here right but we can fix that right you can just redeploy the contract i mean upgrade the contract and then just export the idl again right but for now initializing initializing user is done