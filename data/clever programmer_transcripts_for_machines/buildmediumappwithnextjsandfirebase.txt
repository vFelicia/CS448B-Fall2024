if you're a programmer there's a high chance you came across a article about programming and you read it on medium.com medium is a very popular platform for all writers to blog and lots of programmers are using it to actually write and blog on there now if you're using medium or you enjoy the experience of reading it and using it well guess what today we're actually going to build it with javascript and next js from scratch we're going to add a database with firebase so then you can actually store your articles and i know that this has been done a couple of times and people have made a video on medium but this is gonna be different because we're gonna be doing it together and we're gonna be breaking it down step by step until you have your very own medium app completed and deployed to the internet from scratch and i believe that this will have the best possible explanation so if you're excited smash that like button hit the subscribe button if you want to become the best developer in the world and hey if you don't know me i'm rafikaze i'm the ceo and founder of clever programmer i've been coding for nearly a decade and i've helped millions of people learn how to code now with all of that said here's how this is gonna work i have created a starter template for you to get started and that'll give you all the assets and the images and the logos that you'll need access to so you don't have to worry about anything and you'll be able to code on an online ide with me and alongside me so in order to do that just go to dot join.replay.com slash cp dash medium that's the url is going to be very important so click that link in the description below and this is completely free it doesn't cost you anything click that link in the description below and just hit fork disrupt once you fork it you can actually go ahead and then make your own edits and write your own code if you don't fork it you won't be able to actually follow along with me so make sure you go ahead and do that right now and then we'll actually just code this together all right here's the demo of the medium build that we're gonna be doing with next js so for example i can come into my app and i can hit sign in right over here and once i hit sign in watch what happens so i'm gonna hit it right now and boom look at that that just popped up and plus look at me i'm in the screen that's so cool magic of green screen i'm gonna choose quasi at cleverprogrammer.com it logs me in and now it changes this over here and it says see that up there somewhere up there boom so i can actually even write now i can choose which article i want to go ahead and read all of these articles are actually stored in your firebase so this is an actual database they're not just stored nowhere so i click into it and you can actually read your article and we're pulling this straight from your database so if i go over here if i hide myself here you can see that on the right hand side we have the little ads popping up which is really nice and let's go back to a page and then let's go to this page right boom i have my article popping up and there are a couple of other cool things happening too if you actually pay attention i have my article here i got my headline i have the banner photo that shows up and then in medium at the top where i'll say things like hey you have a five minute read let's do this we have a nice sidebar nice fancy sidebar on the left hand side right over here we got a search bar on the right hand side right over here and there you have it okay and the other thing we can do is of course we can actually write articles in here all right so i'm gonna click now you can actually go ahead and put a title we'll say how to make money coding learn how to code and make money in 2022 for banner image i actually like this cali haldon image right over here so i'm going to go ahead right click it and copy image address copy image address right there boom let's copy it and let's come back right here and paste this glory we'll say coding estimated time length let's just a seven minute read and then we'll just put some dummy stuff in here it's going to say this is an article worth reading all right let's hit submit and i'm gonna go ahead and refresh this page and now watch what happens as i scroll down i actually see my article that says how to make money coding it's showing up at the bottom right here i can click into it and then it actually redirects me to this article page i can read the article and there you have it so that is what you're going to be building i hope that you're excited with that said we're now going to get ahead and get started coding now if you want to build this with me make sure to go ahead to this url and click fork rupple and once again this url that i'm talking about right is join.replay.com slash cp dash medium once you go there you can just simply do fork grapple and the point and the benefit of this is all the assets logos and everything will just be handed to you plus you can actually just code a nexus app on this online rupple and it will also deploy it for you so you can just code along with me right here without even needing to open up vs code or whatever text editor or coding editor that you use so simply go ahead and click fork this it'll ask you to create an account so go ahead and choose your own account whichever account you have and then once you're done forking it will bring you to a page that looks like this and this page should only have three things index.js file which is completely empty there's no line of code in here this is a node.js repl okay so if you write node code it will work in here and you should have an assets folder along with the static folder now let's go ahead and let's take a look and what's in asset and static here are the things these are the fonts we're going to need access to so they're right here for your convenience you don't have to go anywhere and download anything and then there are all this images for your convenience okay so make sure to click the link below go to join.replay.com cp medium it's completely free and then go ahead and fork this and then you'll have access to all of this awesome so now that we have this we can actually just get started from scratch so we're gonna need to create a next.js app and then we're gonna actually need to install tailwind as well so let's get started with creating a next.js app make sure to go ahead and choose shell so let's go to the shell all right and now that we're here we're going to say yarn create next app and hit enter and this will install next the next app for you now i'll say what's your project name my project name is going to be medium cp all right and then we're just going to hit enter just cool and what's cool about replit is you can pull your code very easily out of here you can also sync your code github so you will have version control capabilities and all you have to do for that is just go on this lefthand side and so you can push your code go to your other editor pull your code and get access to everything okay i just like it because everything is just up and running here anytime even if you want to come back you can get access to everything that's here all right all right i'm going to bring myself up here just so if there's anything important going on at the bottom i don't want you to miss out but all that's happening right now is we're just going and finishing our install all right so we're now going to do is just move your assets folder into your medium cp and move your static folder into your medium cp and have all your folders in one place okay and then index.js we won't really be needing it for too long so what we can just do with our index js here is we can actually pretty safely just get rid of it so just click here delete boom so now you should just have a pretty clean project called medium cp and this should have these this file structure right over here now let's go ahead and run this app and let's see if it's live so all we have to do in our shell make sure you're in the right folder with medium cp and i'm gonna just go ahead and do yarn dev now once i do that it should actually whip up a server and it should host it on port 3000 and i'm going to go ahead and drag this down so i can see it and there you go okay i already have this app it's up and running and it's showing up now what's cool about replit is that everything that you make is already deployed so if i click this open in a new tab right this open in a new tab right over here it'll just open in a new tab and this app is a deployed version which is so freaking cool like it's live you could show it to anybody and so the entire time you're working on your app it's live the entire time all right now what we want to do with this app is we want to go ahead and make sure that we have tailwind working so what we're going to do is first things first we're going to remove everything inside of this return statement and i'm going to just replace it with an h1 and we'll say woohoo all right there we go so that's all it should say and i'm going to remove everything at the top so basically my index digest should be very simple one function and then it should just say woohoo that's it okay and that's what we're seeing on the screen right there now we want to install tailwind so the right way to do it is go to the tailwind guide install tailwind css with nexus you could just google this and it'll bring you to this exact page step one is creating your project which we've already done so we can skip that step let's go to step two we need to actually install tailwind so let's copy this line right over here because we need taylor and css post css and then auto prefixer okay those are the three things that we actually need so let's go back let's go into our shell and i'm gonna go ahead and paste this okay cool and it looks like that we were successfully able to install that so this is now installed now what we need to do is we need to be we need to generate a tailwind config.js js file and a postcss config.js file how we're going to do that is we're going to copy this line right here and come right here and paste it okay let's hit enter and now we should have two files generated so we have post cs and tailwind config both of these are created okay let's go back now we're going to need to configure our template paths so we tell it where to look for tailwind code and we tell it hey look for tailwind code inside of pages and inside of the components folder and it and the extension should be anything that ends with a js extension or a typescript extension or a x so we can copy this content portion go back into our tailwind config and just replace this content portion right over here that's effectively pretty much it now the next thing that we need to do step four is we need to copy all of these right here and we actually need to add it to our globals.css so let's go into our styles right over here go into our styles let's go into our globals and let's add it all the way to the top just like that we're gonna scroll down you can skip step five and let's go to step six we're going to copy this line right over here and let's go back into our index.js and let's replace our h1 with that line okay and this should test and see if our tailwind css is actually running because this is actual tailwind css so what i'm going to go ahead and do here is make sure to do yarn dev so we act our server starts running let's check and boom look at that we have our next app up and running and we have our tailwind css up and running this is perfect if you've made it to this point now we're gonna go ahead and build on top of this all right now we're going to go ahead and work on the header so what i want to do is i want to just remove i guess i could actually just keep this for a second here nah i changed my mind let's remove it we don't need this so i'm going to go ahead and remove this and let's make a div okay and the first div i'm going to have i'm going to give it a class name of styles.wrapper and don't worry right now if you're like hey where's styles.wrapper we'll make this afterwards for now we're just making a div here okay styles is not defined so let's go ahead and just define style so i'm just going to go ahead and say con styles and we'll make it an empty object okay wrapper does not wrapper property does not exist yet so this is going to be a div now inside of this div the wrapper div what i want to do is i want to have a content div so i'm going to go ahead and copy this i'm going to paste this i'm going gonna replace this with content and anytime you hear that sound my apologies just ignore that sound that's just to keep me focused on making content for your beautiful face and let's end this div all right and then inside of this content div right here we wanna have a logo container okay so i'm gonna go ahead and do div and we're gonna say class name and we're gonna do logo container okay there we go just so you can follow along what we're doing right now is we're just building this header right over here yeah so this header has if we go completely around all the way right this is our wrapper now within the wrapper we're going to have additional stuff so within the wrapper we have our content is going to be another box right here okay and then within our content we're going to have our logo container and our logo container might be this guy right here that just contains the logo okay and then we might have like where this stuff is going to go okay it's like a navigation menu so this is going to be we're going to call this our banner nav and then this one over here called our logo container okay so this is like the underlying html structure that we're trying to build cool so let's go back now to what we're doing and one thing we're going to do is we're just going to make sure real quick that what we're building right now is actually showing up in our home page okay we just want this component that we're building right now this thing we want to actually separate it out as a component and build it separately outside of this so we're going to go ahead and just completely cut this right now okay and what i want to do is i'm going to make a new folder at the app level and we're going to call this folder components just like this all right so you have components now inside of components i want to add a file and i want to call it header header.js okay now in my header.js file i want to create my component here and i want to call it header so i'm going to say const header just like this okay let's keep it empty for now and at the end i want us to export default header just like that okay cool so because this is the component that we're exporting right now within this component i want to go ahead and do return and then paste all the stuff that we had written earlier okay so now header is a separate component now inside of this logo container for now i'm just going to write i'm going to say h1 and we're just going to say hello all i want to do is see that this header component is actually showing up on our screen so let's go inside of our pages and we're going to import this and we're going to say let's go all the way at the top and here basically what i'm going to do is import header from component slash header okay and now let's simply use our header component okay and let's just see what happens and if we get any errors and i know our styles files gonna complain so let's go back to components let's go to header and let's just add the styles above right there so that way we don't really get into any errors it already knows that styles is an object okay so it seems like our server died at the bottom so what we want to do is we just want to run our server again so i'm going to go ahead and just say yarndev okay if that's not working make sure to just go cd into medium cp and then do yarndev okay and now our server should be up and running perfect okay so you can actually see that hello is showing up that means that we've connected our components to our pages folder and we're able to actually create a component import it and actually see what we're doing okay now what i don't want is i don't want to just say hello here i actually want the logo so what i'm going to do is a couple of things first let's import image from next image so i'm going to go all the way at the top here and we're going to say import image from and i'm going to say next image just like this okay and we'll get access to that image down here i'm going to go ahead and say image and we can make this a selfclosing tag so i can just close it like this and then our image is going to have a few properties okay so image is going to have a class name and we're going to give it a style all these styles don't worry we're going to give these styles later for now we're going to leave it empty and we're going to say source logo okay and we're going to get we're going to need to import our logo as well so in our static we have this logo right here all right this logo boom so we're going to get access to this logo this is a transparent logo which is really nice let's go back to pages let's go back to components my apologies and inside of our components we're going to say import logo from and we'll give it a path of where to import it from logo.png just like that all right now it'll actually be able to import it and you can see that the medium logo is now showing up now let's go ahead and give it a certain size so it's not completely going crazy all right so i'm going to go ahead and say height and we'll give it a height of 40. we'll give it a width of 200. okay so now it's a nice smaller logo and if we open this app up completely you can see that it's showing up right there which is perfectly fine that's kind of what we're looking for so the logo container part is done now the next part that we actually want to have is our banner nav part that we talked about earlier our banner nav part will have all of these things right there my apologies as my girlfriend calling my dog has this thing which they're worried it's like a cancerous tumor or whatever so they're working on like they're doing a biopsy so we were just handling that i don't know why you need to know that but there you go now you know okay breaking the fourth welder hi you hi nice to see you there okay let's get back to it so this is going to be our banner nav yeah so let's go ahead and create that now so right underneath this image make sure that that logo container div is closed we're going to go underneath that and i'm going to create a new div and then the class name here will be styles.banner nav okay and we're going to make it a div and i'm going to say our story so i'm going to say our story and then the next thing we're going to have it say is membership because if you go to this one right here right it says our story then it says membership then it's a sign in and then it says get started so we're going to add all of that membership and let's go and we're gonna say sign in and then we're gonna go ahead and say get started all right so now we have all of the things that we see right there now of course we haven't styled any of this which is why it looks funky and doesn't look the way that we want it to look but this is this is really it for now this is essentially our nav bar let's go to this version right here now of course we need to like use flexbox and do all of those things so then it actually puts it as you know a proper nav bar so let's go ahead and start using some styles now all right so in our styles let's start off with styling our wrapper okay or actually let's start off with the logo container first okay let's start off with our logo container and we're gonna go ahead and say it's a flex item center and we're gonna go flex start on this okay let's create another one and this one is going to be our wrapper so let's style our entire wrapper let's put commas here okay so go ahead and wrap her and for my wrapper i'm going to justify it to be at the center it's also going to be a flex it's going to be flexbox enabled okay so if you take a look at it now if i refresh you can see that it's centered right here we're going to give it a gap of 10 and then what we want to do is a padding of 5 and we can give it a background color and you can also give specific colors in tailwind so if you want to give like specific colors you can do this trick so you can do dash bracket and give a specific color so now it got that like orange so starting to look more like what we want so our wrapper is styled now we need to style our content okay now for our content let's go ahead and make it oops let's put a comma right here so it doesn't break let's go max on the width here and then i'm going to say flex 1 we'll make it flex enabled so it's starting to look much better now much better and now it's trying to look like what we want it to look like we're going to justify in between so there's a lot of space between the logo and that text so there you go you can see logo and the text has a plenty of space down so justify between and then just give a gap of 10. so you can see boom right there boom our logo is right there okay let's go back we have our logo container now we need just a few more things so we need to actually style our logo we're going to make it so when you hover over it it's going to be a cursor pointer and then we want to make it object contained that'll make sure that the quality of that image is sharp so when you do object contain regardless of what you do with the size of the logo it will keep it pixel perfect so before it was looking a little squished now it looks pixel perfect so if we look at the finished app and we look at our app we go back to the finished app starting to look similar just that this is not in a row and so to enable things and put them in a row we usually have to use something called flex so let's go ahead and let's do that so i'm going to say banner nav let's enable flex and right when we enable flex you'll notice it's trying to look much better now and starts looking these nav bars actually start to look quite quite similar now okay so flex and then we're going to make sure and say cursor pointers when you hover over any of them it becomes a cursor we're going to centralize the items and then we're gonna give a space between each so there we go so we have a space of five right there and if i hover over you see it becomes a pointer like it's a button that you could click great so our banner nav has made significant pro progress and now what we need is an accented button so accented button okay let's go ahead and go background black and let's add this button on get started so get started we'll have class name and we're going to say styles dot accented button just like that okay so just because i added just a black background i mean it's going to make it kind of invisible to see for now so what we need to do is actually make the text white so we can see the text and now let's add some padding vertically on the yaxis so there's some more space and we will add some padding on the xaxis so there's like more space within the button okay and last but not least we're going to go ahead and round it so now if i look at it it looks nice and rounded yeah so this looks very very nice now our nav bar our headers are looking pretty much exactly the same right our headers look identical the next thing that we will work on is we'll work on adding the banner and these divider like lines that you can see these black divider lines so we'll go ahead and add that next all right now that we added the header the next thing we want to do is we want to go ahead and add the banner for this app so if i go here i'm looking at the banner the banner looks very clean it looks very nice and in my mind it's a separate component because when i see this i see banner.js so it's going to be its own component so let's go ahead to our app and create a new file and we'll call it banner.js okay we're gonna const banner and i'll just say return and we're gonna say h1 banner for now and we'll go ahead and export default banner and let's go back to our other file our index.js file and let's go ahead and import let's remove this line styles we don't need it let's import not header but rather we're going to go ahead and import banner okay and make sure that you say banner right there okay so now what we can actually do is go ahead and paste this but just replace that with banner so now we have two components here we have a header component and we have a banner component now this error that we're getting over here this error is basically saying hey we need something that wraps up we need a parent these are just children these are just little children right they're running around on their own butt naked confused lost running out on the street so we need a parent and we can have a parent div or you could have a parent div that's actually even empty and if you click this button right over here it will actually format all the code for you so let's go ahead boom so now we can see that our banner is showing up okay you can go back here and take a look at it as well now let's go ahead and actually code up our banner or you can just command click it and it'll actually take you to that file that's another cool feature so let's go ahead and remove we don't need this h actually we can leave this to be h1 and i'm going to change this with stay curious there we go all right so now we have a h1 that says stay curious right there now we need to style this so with tailwind what's nice is you could also just inline style it if it's which looks very which is very easy to do and we can actually just go ahead and give it max width so it could take up a lot of space and then i'm going to go ahead and give it a text size of 6 rem so it's going to be pretty big text and then for font i want to give it medium serif there we go medium serif i did not spell serif correctly okay and if at any point we don't have any of these fonts we can very easily go ahead and add them now in tailwind css so a couple of things right we already have assets and assets we already have these fonts right over here we have charter italic and we have charter regular.tff so i'm going to do a little trick and what i want to do is inside of this theme i want to add another property and so we have extend as one property right we're going to add another one and i'm going to call this font family and within font family i'm going to create new property and we're going to call it sans okay so we have a bunch of these properties now i'm not gonna write every single one of them by hand because that'll take too much time so i'll just copy paste these three properties that will also give you access to as well let's put a comma right there so it stops erroring paste boom so all i've done is i've pasted sans property serif property and mono property so those are the three things i added okay and sans has its own things serif has his own fonts and mono has its own fonts now if you are like hey i don't want to sit down and pause the video and write this that's okay in the description below we will go ahead and link the in the youtube video right we'll link the final project as a reply so you can go ahead the final solution of the project and you can also just fork that and then you're going to get access to this completed final version and you can copy this file and paste it over your tailwind.config.js or you can just manually write these 20 30 lines it's not too bad honestly all right and then the next things that we just need are we need let's go right underneath here and i'm going to say medium serif italic and then we're going to say charter italic and then we're going to go medium serif and we'll just go charter okay just like that so that's really all that we need here and now our server should start running our server is having some errors let's take a look at what's going on so one thing we can always try whenever our server is giving errors like these oh did we actually wrap from font family yes yeah we did we closed it so whenever errors like this just close your server so just hit ctrl c all right and then what you can do whoops is just hit up and then you can just do yarn dev okay let me hit ctrl c and i'm just going to do yarn dev so just restart your server if your server is ever giving you problems just do that that should take care of it all right perfect so now if we actually look at our fonts now our fonts actually look very similar to the font that we're going to have in the final version of the app so our fonts are actually looking very similar stay curious stay curious so that was a little trick to be able to just get the nice fonts in one go all right so there we go we got the font okay if you didn't get the font honestly it's not that big a deal you could just build the rest of the app which is the font that you do have not that crazy but how i know that the font has updated is the s's now have that little hook type of thing and the c's as well right and the use so that's really the main main difference okay cool so next up what we're actually going to do is we're going to write a new line underneath this and this is going to be an h3 okay let's make sure we end it let's uh put everything inside of a div so we have a parent and this div and um really what we're doing here inside of this is if we go to the final version we have discover stories thinking and expertise from writers on any topic so i'm going to copy that text we're going to go inside of this h3 and i'm just going to go ahead and paste it inside of this h3 now if we go to our app it says it right there but what i want to do is i want to style this and i'm going to do inline styling here and what i want to say is just say make the text large all right so let's go back and now the text is larger than it was before boom just keep this here for now so everything is bigger for you to look at okay so that takes care of our text now what are other things that we actually need to add we need to add where it says start reading so right underneath this h3 i'm going to add a or sorry let's keep it in the same div i'll add a button and on this button i will say start reading so now you should actually see a button right here it doesn't really have any styling yet but it is a button because when i hover over it my mouse gets a pointer the styling that i want to actually give it is the same styling that i gave my accented button okay so what we can do is we can let's create a new styles right here so i'm going to say con styles and we'll create accented button and it'll be the same accident button that we had in our other file so let's simply go back to our header.js file so i'm going to go back to our header.js and sometimes if this happens with your replit where it takes a very long time to load either just wait so if you wait like 20 30 seconds or whatever it'll fix itself or what i recommend is you highlight all of your code and copy it that way if you hit refresh and you lose all your data you can come back and just paste it back in that file so there's really two ways that you can go about this all right so i'm going to go into our header file and let's copy our accented button let's come back to banner and i'm just going to paste that accented button right over here so i'm going to say classname equals styles dot accented button that's where we're getting the style from and let's go look at it and now we can actually see that it says start reading looks pretty good now we wanna give it some more styling right so for example we want like this guy and this guy right here to have some spacing so let's go ahead and do that so what i'm going to do is this div that we have right outside of our like really the content that we have content that we have let's go ahead and go class name and we'll do some inline styling and i'll say space and let's give y5 so you can see that i'm giving vertical five space in between each of these elements right the h1 tag this guy right here and then our start reading button so now it has some breathing room but what we need to do is we also need to be able to add this like background image and um yeah so how do we do that now let's create another div because what i want to do is i also want to have an image so we created a div for this guy but now i want to create a div for both of these guys right like the whole thing so that's going to be our content div so let's go here i'll say div let's go all the way down i will go like that we don't need the end tag just do slash right here let's make it pretty and i'm gonna call this styles.content okay because that's where my content is gonna go okay now inside of this content div let's add our image so i'm going to say image okay and we need to import image so i'm going to say import image from next slash image okay and i always have this habit of copying everything because that way if you need access to it something crashes you can always go back and get access to it we're gonna make it a selfclosing tag and we need to give our image tag our image component some properties so source we're gonna give it logo.source okay and where are we gonna get the logo from we're basically gonna say import logo from and really what we're getting here is the banner okay so we're gonna say hey get it from staticbanner.png and we're getting some errors now must use width and height so fine let's add a width and we'll say width is 500 and we'll say height is 400 okay so now we added width and height let's see if it shows up yes it does refresh great our image is showing up right over here we want this image to show up here cool so our image is doing its thing now let's style our image so i'm going to go ahead and style it we're going to give it a height of 32 okay i'm going to do a inline flex on it okay and then what i want to do is make sure i do object contain and really object contain will just make sure that the resolution of this is really high so it's not disproportion and then i just want to do flex one on this okay so we're going to leave this right here now you're probably wondering hey this is still not getting styled it's because we need to actually style our content div as well we haven't done that so let's go at the top and create a styling first i'm going to say content and for our content we're going to go max we're going to give it a big max for our content and then we're going to give it flex 1 and everything inside of it we're going to give it flex so that way this image boom pops up to the right hand side just like it did right now okay what other things do we need we're going to need to make sure that we center everything because this is too close to the top so we're going to move it down and then another thing we need to do is make sure that there's an equal spacing between these two so we're going to go ahead and say justify between okay so that's just going to make sure that there's like boom proper spacing between them so this is the content now the last one that we need to add really is the wrapper outside of all of that okay so the wrapper outside of that so let's go ahead create another div let's go all the way down and we're gonna close that div okay and then this div we're gonna give it a class name we're going to say styles.wrapper then we're just going to create a new property here we're going to say wrapper and we're going to give it a max of 10 and make it flex okay now we're going to style that wrapper and once we start styling that wrapper you'll see that these things will start to come together nicely okay so we're going to give it a max height now we want to do item center and we'll also do justify center so justify center should do what we wanted to do okay so let's take a look here okay styles.wrapper okay and let's go ahead and add some color on here too so what i'm going to say is i'm just going to say background and we're going to give it a color i'm going to say fcc017 this is a specific orange that we actually need so there we go we now got that orange in the back i'm going to say border y okay so now we have a little bit of a border action going on okay so you saw that it added that little border right there okay so let's go ahead and do that border y and then we're gonna say border black so that way we can make it black boom just like that so now we have borders on the y axis right now over here on line 14 where we give space between the y's let's add some padding on the xaxis and what the padding will really do is it will just and add a pad right here and what that will do for the content is it'll force it to push in it'll force it to go this way okay so content will come in together so i'm going to say padding of 10 okay and that will bring our content together and then i'm just going to say flex of i want a flex of three here okay great so now this is looking more like the final version that we have right if we had the final version and 200 percent these look very similar as you can see so that's really good this is really the look that we're going for so this is totally fine so at this point our header and our banner is completely done all right now what we want to do is let's make these component this component right over here this component right here we will be calling this card.js all right that's the component we're gonna make so let's go ahead and get to it so i'm gonna go in here we will make a new file this will be called postcard yes just like that okay and postcard js there's a lot of dynamic stuff that's happening we're gonna start with the nondynamic parts right now we're just gonna hard code everything and then afterwards we're gonna make it dynamic so first thing we're just gonna do is we're just gonna go ahead and say const postcard all right and make sure to return and then in this return i will just add an h1 i'll say hello and at the bottom here i'm going to say export the default postcard and now let's go into our index.js and let's import a postcard card okay and let's go ahead here and we're gonna say postcard just like this and let's make sure that postcard hello or whatever we wrote does actually show up underneath here if it doesn't that's the problem okay now one reason it's possible it's not yeah why is it actually not showing let's see let's write it a bunch of times let's make a div here and let's go ahead and paste this a few times in there and let's make it pretty okay still not showing up ah because our server died for whatever reason not sure why that happens but our server is dead so let's go ahead and rerun our server so let's make sure we're in the right folders medium cp and then let's go ahead and let's do yarndev all right now let's go take a look let's refresh and if our server is running correctly yup we see hello here about five times now we don't need this to say hello instead what we need to do is we needed to say a couple of things we needed to say the author's name okay so we're going to have a author container so let's go ahead and actually start even putting this in styles okay so i'm gonna have a author container okay what else am i gonna have i'm gonna have an author container that's gonna contain this then i'm gonna have an author image container that's gonna contain the image okay author image container let's just leave it empty for now let's leave all of these empty or just let's make it a tilde instead of quotes okay unavailable interesting let's hit refresh boom there we go it's back all right then we're also going to have this post details right so post details might be all of the details that we have here all right so if we actually look at this component right over here okay on the left hand side are all of our post details that this we're gonna call this post details okay that's this is gonna be probably the class name i imagine okay right there it's to be the class name and then the class name of this is going to be different all right but for now that's what's important to know so this is what when i say post details this is what i'm referring to okay let's go ahead and remove that let's go back to our app and let's go and add styling for this post details and give it some styling put a little comma here cool okay let's refresh make sure app is up and running alright let's go ahead and get started with some of this stuff so we need images right we need the author image for now we'll just use like a medium logo or something as an author image so how did we get the logo it's simply like this so we're just going to use that so let's import it all the way at the top so we're going to use that we'll also need access to image so remember whenever we need access to image we say import image from next slash image so we're gonna need access to image as well and instead of having this h1 here i'm going to have an image and it's gonna be a self closing tag and then we're gonna give this image some property okay and the properties that i'm gonna give it are i'm going to say sources logo and then class name okay we're going to go ahead and do another style which is going to be the styling of the author's image so let's create another style right here we'll call it author image so i'll do styles.author image just like that okay and let's see boom like that entire logo is showing up as the author image okay now of course we're gonna need to make it a lot smaller because right now it's massive it's like way too big we don't really want it looking this big because that'd be silly if somebody came to your site and was like what the hell's wrong with you why does your stuff look like this get rid of it let's go height and let's make it 40 40. so now it's gonna actually make it a lot smaller as you can see right now of course it looks squished and doesn't really look how you want it to look but this is fine for now if i zoom in looks pretty darn squish right there but that's okay it's normal okay for now it's okay all right so that's our author image now when we have our author image we need to have the author name right next to it as well so let's go ahead and do that okay so we're this image we need to make sure that we actually put it in our author image container so i'm going to call this i'm going to say class name i'm going to go ahead and say styles.author image container okay because that's our image okay let's wrap this whole thing up into a author so let's go ahead and let's go class name and i'm gonna say styles.author container okay so this is the container that contains all the stuff about the okay let's go ahead and format it now within this author container let's go down here we're gonna go ahead and add the author name okay so i'm gonna say div and we'll say class name and i'm going to say styles dot author styles.author name so we're going to style the author name as well so let's put that at the top and just leave it blank for now because we're going to be styling this soon enough and for the author name i'm just going to say rafikaze for now you can say whatever you want whatever your name is so you should see a logo let me move that's out of the way so on the left hand side you should see a logo and you should see a name okay that's those are the things that are containing the author details right now now the next thing that we need to add is of course this title but let's go ahead and style our author stuff so at least that looks somewhat reasonable so let's go and style our author name okay and for our author name it's going to be very simple we're just going to say font semibold so if you look at this font now it just became semibold that's exactly like how this one is so our font as far as we're considered with the font that's good and we now need to make our images these circular images so let's work on our author image style so we're going to say object cover okay and then what we want to do is we want to give it that little skiller style so we're going to give the circular style to the image container rather than the image itself so for the container i'm going to say grid and i'll place items in the center and then we'll give it rounded full and we'll say hey make sure to hide the overflow we'll give it a certain height and then we'll give it a certain width okay and now if we go look you can see that it's like this killer medium image this is probably not the best image to have here that like logo that we have but it does the trick for now so that's the image right there and that's our font now what we want it to be is we want it to be side by side like this but if you look at ours it's not side by side the image is above and then the text is underneath and that's not what we want we want the text to be side by side so what we can do now is we can add that to the author container so i can actually just say hey give me flex and then we'll have a certain gap okay and then let's go back and you can see boom right there we added flex so now we have the author stuff showing up like the way that we wanted to show up that's good so the other stuff is showing up good the next thing that i want now the doctor stuff is done i want the title of the article so let's go ahead and work on the title of the article okay now if i look at the styling of this to me this styling looks like we have bold font and then we have large we also have like font that's large so we can actually just go ahead and create the styling right now so let's go ahead here and i'm gonna say title okay and for my title i'm just gonna say font bold and we're gonna make it to excel okay now we need to actually write this title so where will this title go this title will most likely go underneath our author container okay so once we're outside of our author container but still inside of our post details that's where we'll go so let's wrap this entire thing inside of a class name and we'll call this styles.post details okay and let's end the div right here okay let's do this boom so author is going to go within this now i can write an h1 or sorry not author but the title at my apologies okay the title and within this h1 i can say hey give me the title style and for the title we can write the title that's right here seven free tools that will make you more productive so let's paste that in 2022 let's take a look seven free tools that'll make you more productive so now the fonts look similar and that's good now i need this other style right here productivity is a skill that can be learned now when i look at that looks like there isn't any much styling besides that there is a certain color and that color is like this grayish color so all we need to do is for this briefing right so this is where we'll just call this thing briefing right over here so for that briefing sorry let's go back for that briefing right here we're going to give it this light grayish color so let's go back i'll say briefing and that light grayish color is and we'll go seven eight seven eight seven eight seven eight just like that that's our briefing so now let's go and write that brief right underneath that h1 so we're going to have a div and we'll give it his styles.briefing and we'll simply say whatever's in the briefing so i will go and copy this productivity is a skill that can be learned copied paste okay cool you can see the final version of the app by the way by going to this exact url okay or you can go to that final solution reply that we have fork that and then you can like have your own deployed final working app and you can just be seeing the final version and then build it from scratch okay so there you go productivity is a skill that can be learned so that's showing up and now all we need is this thing at the bottom okay so this is right underneath the brief and this is these are the we'll call these like the article details these will be the article details and these article details right here will have a we'll give it we'll put it in a details container so it'll be inside of a details container i know that's really hard to see because that happened to be yellow so i'll just put that here it's gonna be inside of a details container and then we're gonna have a span tag that's gonna be article details and that's what we will style okay so we'll style all of this okay so we'll have your how many minutes is the read the date the what is this productivity or what's the tag that's going to be double and visible right there cool so let's go ahead and add that in now so i'm going to need my details container just blank and then i'm going article great okay and let's leave this blank for now so let's go down and where is this going to be this is going to be most likely inside of post details but outside of like author container and everything so it's gonna be right now the outermost div and we'll go ahead and start putting those details in so i'm going to say i'm going to create a span tag here and within the span tag i'll simply just write the date so let's just say june 15 and to put that dot i did option and eight on my keyboard but if you need the dot you can also just try to copy it from here because it's right there or try to see how you can do it on windows i'm not sure how you do in windows but on mac it's option eight so june 15th so you can see that it says june 15th right here so we go june 15th and i'll say five men read and i'll put another one of these dots five men read and i'll say productivity boom okay so i have all of those things there and now let's look i have them in my in my app now not just the final version but my hat has that now and now we actually need to style it so what i imagine is probably it's going to be some small font it's going to be like a gray color this is probably going to have a background color behind it with the border radius so i'm already like picturing in my mind the styling because frontend developers it's very important to visualize and imagine what it's going to look like and imagine kind of the code or what the logic behind it before you start coding because then it's going to make your life simpler okay so let's go ahead and do the styling for that let's also put productive in its own span tag because it's going to need a different style than all the other guys okay and for the productive span tag we're going to just call it we're going to say class name and i'm going to say styles.cory gory okay just like that so now we can actually go ahead and create a category class and like i said it's probably gonna have some kind of background color so let's go ahead and give category a background color of that like grayish thing the grayish color we're gonna give it some padding and then we're gonna make it rounded full so now if we go look our productivity is looking very similar to the other productivity right the final version great now we have pretty much all of these in a span tag and let's go look at the name of that span tag we have we don't have a class name for the topmost span tag so let's go and make sure we give it us we give it a name so i'm going to call this we're gonna call it styles.article details okay and now we need to style our article details so for article details we're gonna give it a margin vertical margin of two and then we're going to give it a text size of that right there okay let's go and check so basically we give it a smaller text size so now it's looking good and we're going to need to make it a little bit gray so since we have this so we have this div right over here with the title and everything we need to actually put we need to put all of this article detail stuff in a details container okay so let's go and make a div we'll say class name styles dot details container and we're gonna put this entire thing inside of that div let's make it pretty okay beautiful now details container we're gonna go ahead and give it a style and once we style this everything is going to look perfect okay so let's make sure that we have this flex we're gonna go item center so that'll centralize these items vertically okay then we'll go justify between so there is enough spacing between all of them okay so we got justify between going on here and then we're gonna give it a text color so let's close that the text color is going to be 7 8 seven eight seven eight okay and that's gonna be that light hint of a gray and there we go okay so now it's starting to look very similar right pretty much the whole thing is good to go the only thing we really need is a bookmark and so if we want to get the bookmark we can get that from react icons and install react icons okay let's look at and let's see what's the easiest way to install react icons so when i looked it up i get this npm we can also just do yarn yarn add react dash icons okay just like this so i'm gonna copy this let's go back and let's exit so let's do control c so we get out of our little mode okay and now i'm gonna paste that so we're gonna do yarn add react icon so we'll add the icons basically okay and then we'll be able to get access to them and then we'll simply just import the react icons and why we're trying to do this is so we could have this bookmark right over here okay that's the only reason okay so it's gonna take a second to install let's wait for the install to finish okay so the installation has finished now we can use react icons and i need the bookmark so i'm going to say import if i bookmark and we'll save from react icons and slash fi this is the bookmark that i need let's go all the way down and this bookmark i'm going to add it in its own span tag so right underneath here okay within the post details or the article yeah details container we'll put this within the details container and i'm going to add a span tag okay and the style of this will be bookmark container so we'll style this in a second container all right and then within these span tags what i'm going to say is we're going to add the bookmark and we're going to give it a class name and we'll just style it in line so i'm going to say height of 5 and width of 5 and that's it just end it for me please okay let's go look and pretty soon once we style it we should have our bookmark actually showing up so let's go and get our bookmark working okay so we're going to go ahead and style this now in bookmark container so i'm going to copy this bookmark container let's go here and paste it all right so for my bookmark container i really just need cursor pointer i don't really need anything else cursor pointer okay and now we need to actually run our app okay so we need to run that so make sure to do yarn dev okay once you install everything and now the server will start running and we'll be able to see the update so if the bookmark if you have the bookmark that bookmark should show up so you can see that i actually have a bookmark but it's all the way if i zoom out you can see it's like right there like you see that it's to the left of me it's weird huh it's right there so that bookmark is all the way at the end how we're going to solve for that is once we add this image thing so what we want to do is probably add a container around it then push these things in so they're right here and then once we get this image it'll push the bookmark all the way here okay so once we like make our boxes and containers and then we push the image that'll move the bookmark in so for now it's looking really good i got the post details or whatever it's called article details we're pretty much done with the article details now all we need is we need that image to show up on the right hand side and then we need to actually start containing it because right now just running all the way across and we need to put all of these in a container so now we're going to get outside of the post details right so we can't we're not going to be putting this inside of the post details that wouldn't or actually sorry my bad yeah so like i had said earlier pose details was this part right this whole part is post details so this image is actually going to be outside of post details all right so let's at this point what we need to do is we actually need to make a wrapper so let's make a div all right and we're going to say class name and i'm going to say styles.wrapper here all right and then let's wrap this entire thing in that wrapper so i'll say div okay let's hit that prettier so it formats it and inside of that wrapper i'm gonna go ahead and add our image okay so we're gonna say div here and then inside of this div we're gonna have our thumbnail container all right boom there we go or sorry this div actually right here and i'm gonna go ahead and say class name is going to be styles.thumbnail container so we're gonna can we're gonna create that thumbnail container okay so that's gonna be that image container we're gonna style that and now let's go ahead and put the image okay so this image for we're gonna get some image from at a later point right now let's just use the medium image but later we'll use different images so i'm going to say height is 100 width is 100 and then source is just logo for now okay so you can see that image is actually showing up at the bottom right there now what we need to do is we need to make sure the thumbnail container has the proper styling but more importantly we need to also make sure the wrapper has proper styling so let's go ahead and create our wrapper and let's give it proper styling so then everything is in flex mode so like literally if i even just write flex here that should do some of the trick so boom the medium showed up right the bookmark is showing up right here so it's already starting to look good but we have a couple of things to do so we're going to give it a max width of 46 a.m okay so then that way the width will never increase above this all right we're going to give it a height of 10 rem so we're making sure that it has a set width and a set height okay and let's center the items and this will again remember vertically center so you saw it just gave a littles and then once we have more articles they'll all look really nice and then i'm going to give a gap of one rem okay and then cursor pointer okay so this is pretty good for now we got our wrapper we got the whole thing coming along really well basically starting to look really nice and this like big container will add that later okay but for now you can see that we got these articles showing up we have the image showing up just like how we want we can it looks like we can click in on it and if we had more of these guys so here post details so starting from post details all the way to the end div this is just one post that i've selected if i paste this now it'll actually start to look like we have two posts right just like that so you can see that component that we've made is a very nice component and then we'll be able to actually repeat that component afterwards over and over again now a few things that we haven't styled is we haven't styled our post details so let's go ahead and make sure that we style our post details okay so for our post details we're going to give it a certain flex so we're going to give it a flex of 2.5 we're going to make it flex enabled and we're going to say hey go into columns all right and now the benefit of that benefit of making it be in columns is you'll see that if i actually make that post again so let's say highlight all the way from post details and i just start going down and i highlight all the way to this div and if i post another one oops okay so let's leave that let's go back so our app doesn't crash for now we'll do all that fancy stuff later okay for now let's just keep our app running so our postcard component now our postcard component is essentially completed at this point okay it doesn't look perfect but it's good to go now all we need to do is just add padding on the right hand side and padding on the left hand side so that we can push it towards the middle but outside of that it looks really good and we can add multiple articles as well okay so in terms of the postcard component before making a dynamic where we can pull the data from a database for now this looks so you've made really good progress so far we have our postcard component pretty much ready to go now remember we need to style it and make it so we can actually see it in the right way so we needed to come into the screen and not be squished all the way to the left hand side like this where we're going to do that is actually our index.js i'm going to hit command p here you can hit ctrl p and i'm just going to go to my index.js you could navigate to it too but i just like hitting the shortcuts so for our postcard we're actually going to give it just a little bit of styling okay so then that way we can actually see what everything will look like postcard will be wrapped in a couple of divs so that it could get the styling that it needs okay so first thing we're actually gonna do is i'm gonna put in a div and this div we're gonna give it a class name of styles.post list because remember postcard we're going to have multiple postcards right we're not just usually going to have one postcard at any given time we're going to have multiple so let's go ahead and put multiple postcards here so that we can actually see them all at the same time and if your app for whatever reason is not running just all you have to do make sure is you can kill your server and then you can just start your server again right ctrl c and then just do yarn dev so i'm going to do that now now i'm getting an error that says hey styles is not defined no problem we're just going to go ahead and define styles and we'll make it empty for now okay cool now let's go ahead and refresh and let's see what happens great so we have three posts showing up so this is a really good start okay and they're showing up the right way now this div that we created here let's go ahead and create styling for it so i'm gonna do post list and the styling that we're going to give post lists is we're going to enable flex and we're going to make it flex column i'm going to give a gap of 3 padding of 2 and then we're going to make it we're going to give it some break points so that it could actually work on mobile devices as well so i'm going to say grid and calls 2 then we're going to give it a medium gap of 6 and we're going to give it another break point right here and grid calls three all right so now until when we're telling it hey what how it should behave when the screen size changes so when the screen size changes we're telling it what it needs to do so now if i change screen sizes here you can see that it automatically adjusts to the screen sizes and fits right in the screen just like the way that we would expect it to so that's a really good sign so now that we're done with post list we need to take this and we actually need to wrap it in a container so we're going to go ahead and do that let's put a div that ends here i'm going to say class name and we're going to say styles.container let's prettify it then let's give a container so for container i'm gonna have a oh let's put a comma up at the top right here comma for cont and then put a comma right here so we don't forget max i'm gonna max with it okay i'm gonna give it a huge max width and then we're gonna say flex one so that way we can add more things inside of this container so we've made it we've given it a big width so that way if we want to add in like if we look at the final version here we don't really have anything else but this is still helpful to give it that big container okay so let's go down and now what we want to do is we want to wrap this container inside of main so we're going to do that now create a div and we're going to give it a class name of styles dot main okay and make sure that this div ends right over here the whole thing should wrap in there just like that all right now for main where we're gonna say hey flex and then just make it justify center so let's take a look there we go so now this the final one and our one are starting to look a lot more similar yeah that's definitely a good thing that we've done there now what we want to do is we want to also add a wrapper so this outermost div that we have instead of making it blank we can actually make it a div and we'll give it a class name of styles.wrapper and let's make sure we end this div at the bottom it's pretty fine it's as easy to see and for wrapper we're just gonna say we're gonna make it auto okay so we're gonna give it margin on the x axis and we're just gonna auto that perfect okay so now we have these two that look very similar so this is a really good place for us to be so at this point if we're looking at this we're done with the first page this is our app this is the final app to look very similar so in my mind honestly we're done with the first page the only thing i can imagine that we have to work on right now is if i go into this page right here we need to now work on this page so this page is going to have multiple components so taking a look at this right here these are the three components we're going to be building this over here is going to be our like sidebar or we can call it readers nav so it's going to be that this middle component right over here we're going to call it article main okay article main.js and then on the right hand side right here this will be think of it this as our um another main component that we're going to build and this is going to be our recommendations okay we'll call this yeah like literally recommendations a js just like that so these are the three components that we're now going to actually build and so with that said let's get to work all right these are the three components we're gonna start working on the first one we'll start working on with is the reader's nav so let's start with that component first and then we'll work our way up to the other components let's go back to our app and of course what we need to actually add in before we can even start working on this page right is we need to add the ability to be able to route to different pages because now we have to create a whole new page so the very first thing we're going to do is actually add routes to our app okay so let's start creating a route so the first thing i'm going to do is i'm just going to create a link all right so for example let's go to our component that we made postcard now remember postcard should be like a clickable link so for example if i click here it should take me somewhere right so this entire postcard right here is a link so what do i need to do i need to go to my postcard and this entire thing i actually need to wrap it in link okay and wow i did not know replied could auto import that is so cool so yes we're getting link from next link that is right and then we're gonna end this entire thing by ending it with link just like that now let's prettify it so it looks good beautiful okay so now we have a link but what do we need to do our link actually needs hey where do you want me to send you right so it needs an href so for the href here's where i'm going to have them go i'm going to have them go to post and then whatever the post id is but in this case we're just going to hard code the id to let's just say b123 okay for now it's gonna be a hard coded id so we're gonna leave it like that just one two three okay that's where i want them to go when users click so let's go ahead to our app and let's refresh let's make sure it's still running and let's click a link okay now that i clicked the link you could see that it tried to take me to post one two three right it tried to take me to post one two three however that page does not exist that's what it says 404 this page could not be found so now what do we need to do well what we need to do is we actually need to create this route and create that page and they make it very easy with next to be able to create these routes okay so i'm going to show you how to do that now so we're going to create something where you can go slash post 123 first thing we need to actually do is we need to just create a inside of our pages just create a new folder and just call it post inside of post okay we're going to create a new file and i'm going to call this file slug dot js make sure to put the brackets that's very important and that those brackets are telling those brackets right there are telling your computer that this is going to be a dynamic link right this is going to be a dynamic slug this is not going to literally say the word slug is going to be something like you know 1 2 3 or whatever okay whatever the user wants to put in it's gonna be some dynamic slug and now let's zoom out okay and now we're actually going to you know put something on this page and make sure that that gets displayed okay so this one is going to be called our post so i'm going to say const post all right we're going to leave this we're just going to say return h1 post page okay and then we're going to export default post idea here is very simple which is if i navigate to that slug it should just show me this page right over here okay that's really it so let's give this a try and let's see if this works so i'm going to go back and i'm going to hit click boom look at that so the routing is already working we didn't have to use router we didn't have to like add in react router or do any of that crap that we normally have to do this was like incredibly simple and we were able to do it all in just one go right like we just come to this page and then this page oops sorry we just are able to come to this page and then this page just simply renders so that's very clean now that we've added routing to our app what we're gonna do next is really just you know actually start creating those components that we're talking about components such as this reader's nav the article main and then the recommendations on the righthand side okay so let's start with the reader's nav right here first so what we're going to do is let's just pop in and i'm just going to say readers nav okay and close it and then i will say import readers nav from and then we're just going to need to give it where it's at so i'm going to say components slash readers nav just like that this h1 we don't need it anymore and we're going to create this component inside of our components inside of our components you can if you want to like keep this really clean you could even actually create a new folder where you put all your article related components in there but for now we'll keep it simple and we'll just say add file this will be readersnav.js okay and then in this reader's nav remember we're going to just do readers nav make sure that we export this export default readers okay so we're going to export this and we're simply going to say return and i'm just going to say h1 and i'll say readers nav so now when we navigate to that page it should actually just read out reader's nav post one two three now i can really navigate to any url okay i don't need it to be post one two three i can go to post post i can go to post malone if i want and it'll still read me reader's nav so right now as of now that slug route that's dynamic so it expects it expects slash post because that's what we named the folder and then for this it's just a dynamic slug so this part could be really anything all right cool cool so now that we have readers nav here we can actually start building reader's nav okay so for readers nav we're going to need a bunch of logos we should get access to them now and just so we can actually go a little bit faster on this i'm going to paste some of these right here because these are just logos that you're going to need access to okay icons and logos so we're going to need a small logo we're going to need a outline home logo we're going to need a fi bell bookmarks article line and a pencil square okay because those are all the things all the icons that go on this left hand side cool and make sure you have react dash icons installed if you don't you could install it right now using their packages or you could just install it in the command line in the shell and just do yarn add and then boom add it we're gonna need uh image we have a causing image as well so we're gonna get access to that too so i'll just do import quasi from static kazi okay and then last two things we're going to need access to is we're going to need access to be able to add an image so i'm going to say from next slash image and then i'll also need to be able to have routing access from here so we're going to say from next slash link perfect so with the reader's nav that's kind of it so far let's start with adding our images okay so i'm going to go ahead and instead of this h1 right here i'm going to go ahead and remove it and we're simply going to add an image that's going to be a selfclosing tag and the image source is going to be our small logo and that's really it so let's go ahead and let's take a look at this page and let's see if it's showing us anything so our small logo is looking pretty freaking massive right now and sometimes that happens because we haven't styled it so once we style our logos it'll look fine okay so that's because we got to put it in our logo container so what we're going to do is we're going to make a div and we're going to say class name and i'm going to say styles.logo container okay and we're going to wrap this div inside of that all right and now what we can do is go ahead and create styles so i'm going to say cons styles and we can say logo container whoops logo container put a comma here and for our logo container we're simply going to go cursor pointer okay so our logo container is going to be relatively simple another thing that we actually need to wrap this in is a link so when we actually click any of these icons they should just take us back to they should take us back to the home so just so you can understand what we're doing right now we're trying to build this part of the navbar and when you click this it takes you back home so all we want to do is we want to go here wrap it in link and i want to say href and i'm going to give it a very simple href of hey just take me home and we're gonna finish wrapping it and link right there okay and then this entire thing is gonna be wrapped in a wrapper so class name and i'll say styles.wrapper and then we'll end the div right here boom let's do this okay now let's go ahead and style our wrapper as well so for our wrapper i'm going to give it a width of 5 rem we're going to make sure that the height runs along the entire screen we're gonna enable flex and make it flex column let's justify the wrapper in between and i want my items to be in the center and with the padding of one rim okay all right there we go so now you can see that it's looking closer to the final version and it looks nice so we got our wrapper and we have our logo container and that's really helping the icon you know become like a smaller sized icon okay now underneath this link we're going to create an icons container so i'm going to say div we're going to give it a class name of styles.icons container and then inside of this div right here we're gonna add in all of our icons so we'll add our outline home we'll add our bell we'll add our bookmarks i'll add our article line we're going to add a divider and then we're going to add the pencil square so now if we go here you can see boom all of our icons are actually showing up so far so good boom everything is showing up all right i just changed the screen up a little bit so you can see the code a lot easier and now i can even be huge and we can code together okay but i'm not gonna do that perfect so we have our icons container now obviously we have to style our icons container which is why they all look a little bit funny so let's go ahead and create the styling for our icons container so i'm going to say icons container let's make sure to put a comma right there so it doesn't error out we'll give it flex 1 we'll give it flex and flex column okay and now you can already see that because of flex column right they're going up and down instead of side to side i want to justify center it okay and uh now that vertically centers it that's what justify center does we're gonna give it a gap of 1.4 rem and there you go that added a nice little gap between each my text i want to make it a little bit large okay so these icons look nice and big and then i want to make them gray right so that's going to be our seven eight seven eight seven eight seven seven eight seven eight seven eight that's that okay now they're like gray so the nav bar is coming together pretty nice right that's i had it at 250 which is why it was looking kind of ridiculous but if i have at 175 percent this looks more like our final version of the app okay i'll put our final version of the app right here so that way we could see roughly what it looks like okay i've just made it a lot smaller so we can see the whole thing at once okay so our icons container that looks good all right so far we made good progress on this all we need here is a profile image container all the way at the bottom if you could see that so we're gonna go ahead and do that so what i want to do is i want to create a new div right over here and i'm going to say div and then we'll say class name and i'm going to say profile image container okay it's going to be a profile image container now within this we'll add in an image let's make it a selfclosing tag and then the will will give this image certain properties okay so this image will have class name and the styles will be profile image so we'll create these styles don't worry these two right here and the divider style because we haven't made that yet source will be quasi because we already got access to that and that's really it so let's go back up let's create the style for our divider because we hadn't done that let's put a comma right there now you can see that my image is already showing up okay let's style the divider divider is gonna be very simple it's just gonna have a border like a like a little black border so it's right there very easy to see then underneath the divider what we want to do is we want to add our profile image container so let's go let's let's style the image first so let's go profile image and we're simply going to say object cover and this will make it make sure that it's like pixel like very good looks good and it fits in the middle and then i'm going to set profile image container all right let's put a comma right here and now profile image container we're going to give it a width of 2.4 ram okay so now basically like that image is smaller profile image container yep so that image is now smaller we're going to give it a height same height okay because we want it to be like a square great and then we want to make sure that it's rounded full so it's going to now make it like a circular image okay profile image container div and that div just ends right there perfect okay and then the other things we want to do is we want to say hey overflow on this bad boy let's hide it okay and then we're going to place items in the center cool so there you go now you can see that image actually looks very good like oops it's not what i meant to do apologies let's go back here let's do that all i was trying to do is show you guys that image so you can see that that image looks very very good now let's zoom out with that said our reader's nav is essentially done right if we look at this reader's nav and our reader's nav they look pretty darn similar they actually look exactly the same so reader nav is done the next thing we're going to work on is this recommendations component so let's go ahead and work on that and then the last thing we're going to work on is this one because that's the big boy so we're going to get the big boy at the end all right let's get to work on recommendations so the first thing i'm going to do obviously is make a new component it's going to be called recommendations.js and we're just going to get that recommendations component to show up so let's go inside of our pages and let's go into post and slug and here i just want that component to show up that i just created recommendations okay so i'm going to say recommendations end it and we're also going to import it okay so let's go and say import recommendations from components recommendations okay just like that and then all this is complaining about here is it just needs to be wrapped up in a div so let's wrap this up in a div cool now let's go to our recommendations component and we're just going to say cons recommendations and i'll say return and we'll just return recommendations okay so that's all we'll say and also export default recommendations so this is just making a connection between the components and the files and making sure that things are going in the right place all right so let's see if that is showing up anywhere so the server is loading right now is what the logo is telling me so let's go ahead and see because if sometimes it doesn't load it means your server is having problems i'm going to drag this here and see what's happening so it says it's waking up right now okay no worries so let's just cd into medium cp and then let's just do yarn dev okay and now that now basically i've woken it up okay so if that ever happens just do that and then you should be good to go all right we're gonna call this the youtube cpu youtube medium with nexus and i don't need this note on this rebel perfect this is going to be the final version all right this will be the link that will drop for you guys in the youtube description so you can get access to it all right for some reason it crashed again so we're just gonna cd into medium and then do yarn def just always make sure to cd into medium and then it should be good to go and now that i've done it it should be working now and let's wait for it to refresh okay it's refreshing great now for whatever reason our recommendations hasn't shown up yet so let's take a look what's happening so here's what the problem is our recommendation is actually showing up but it's showing up all at the bottom here so that's why it's actually really hard to see it so we need to make sure that the recommendations goes in the right place so let's go to our slug here and let's take this div and turn it into we're gonna say styles dot content all right and i will go here okay that's weird okay let's go con styles and for my styles on this one i'm going to say content we'll just make it flex so there we go all we're saying is hey you're gonna show hey post page you're gonna have a few components like readers now recommendations and then article main each of these components just show them using flex meaning they should read from left to right instead of top down like a column that's all that's why recommendations just popped up here we just needed to enable flex with the flex enabled now they're good to go where recommendations is good great recommendations we'll take in an author but we'll work on that later for now let's just continue working on the front end part of our recommendations component for our recommendations we're going to need access a couple of logos and icons so we're going to need access to an image so because we need to get images from next we're going to need access to a ai outline search we're going to need access to email unread replit logo tutorial image cp logo and cause e logo and then the js logo so these are all the things we're gonna need access to and remember if you fork this replica we were supposed to when you started this tutorial you can always go in the link in the description click the rebel that says medium starter and fork it you'll have access to all of these logos because in your static you should have all of them js logo right here you have your quasi right there you have replit logo right there you should have access to all of this stuff now if i look at this final version you can see on the right hand side i hide myself you can see the replit logo you can see the tutorial logo and then you can see at the bottom the javascript logo so let's bring myself back that's why we need access to all of them and now what other things that we need to notice about this we have get unlimited access so that's a button and then we have a search bar so we're going to start with creating this button then we're going to create this search bar right here then we need to put this image then rozzy and followers these two buttons right here and then this part okay so now let's go ahead and do that i'm gonna just move it right over here so we can see more of it beautiful all right so we're gonna create a div and then within this div i'm going to call this my wrapper okay we'll say class name and we'll say styles dot wrapper okay and inside of this div we're gonna have another div and we'll give it a class name of styles.accentedbutton this is where our get unlimited access button is going to go so i'm going to say get unlimited access and do it just like this all right and let's take a look let's define styles because that's what it's complaining about right now so let's go and define it and we're going to say that we have a wrapper and we might as well just style our wrapper right now so our wrapper is going to have is going to be take over the entire screen height wise we're going to give it a minimum width of 10 rim we'll give it a max width of 30 ram we'll give it a flex of 1.2 and then we'll give it a padding of 2 ram all right so get unlimited access let's go back to our pages and slug and all i want to do is add like a dummy component or whatever in the middle so we can just say div for now like a selfclosing div okay so that way we can represent that we have three components let's go div and i will say article main will go here and let's end the stiff okay so this is representing that we have three components great make it smaller all right so let's go back into our recommendations we can hit command p and go recommendations or just manually go to it either one works fine okay so we have our wrapper and we have our accented button we have to obviously style our accented button so we're going to go ahead and give it a styling and then for the styling for the accented button it's going to be the same styling how we had earlier so justify center for this one we're going to give the text small make sure the background is black text is white and there's margin on the yaxis and then we're going to add some padding on the yaxis and we'll say here make sure that the rounded is full so it's fully rounded so now that's our get unlimited access button okay great so looks alright so far next up what we're going to add we're going to add the search bar so let's go here i'm going to close this so you have more room to see and for this we're going to give it a class name i'll say styles.searchbar okay and then within this div we're going to go ahead and put ai outline search that's the icon that we actually got access to earlier so you can see that we have the search icon showing up now let's take in an input as well right there and the input is going to have a class name of styles.search input which we will create later so don't worry it'll have a placeholder of search and the type of this is going to be text okay so now you can see that we can write in here so we need to style search bar and search so let's style search bar first so for search bar i'm going to go ahead and say make it flex of course make item center will give a gap of 0.6 rem a height of 2.6 rem make sure it'll have a border we'll give it a padding of one rim and we'll make sure that it's rounded fully okay so now you can see that the search bar is starting to look better right looks actually really freaking good especially in full screen input is looking pretty ugly so let's go ahead and fix that so i'm going to go ahead and say search input let's put a comma right here so it doesn't complain all right so for search input let's put a comma right there as well i'm going to say hey make sure that there's no border that alone will make it really good make sure there's no outline remove any background and give it a full width so now search input looks really nice there we go so just a little bit of styling and you can see how that just really gives it a refined taste it makes the app sync essentially okay now what we need to do is we need to add the author image so then our author shows up because that's the next thing remember if i go here we have the author image and then we have some author title and we have how many followers the author has so let's go ahead and add that image and we're going to add that image inside of the wrapper so let's go down here and time to add our image now this image will need to be contained so we want to have a couple of things actually first we want to have a author container that will contain everything regarding the author now within that we're going to have my apologies we're going to have author image container profile image container a mouthful but this way we can be very clear about what we're actually building and this will have an image we can close it off and this image that we're going to have is we can just use the quasi image for now so let's just use that hard code it and you can see that i'm showing up right there we'll give it a height of width of 100 and we'll also give it a height of 100 so now it's looking a little bit better now we just need to go ahead and style these so let's create styles for author container and we'll also need to create a styling for author profile image container so let's do that all right so as far as my profile image container is concerned i'm going to give it a height of 5 rem we're going to give it a width of 5 ram we're going to make sure it's rounded full and we're going to hide the overflow on it so there we go so now the image is looking good now we need to take care of the author container and all we really need to do is just give it a margin from the top so it doesn't really touch that search bar and it just pops down below just like that there we go so it's starting to look a lot more like this right so our component is starting to look a lot better now what we need is of course the title so the it's going to go inside of our author container but obviously not in our image container so let's get outside of this container right here we're going to create a div and we're going to say hey for styles i want you to style it like author name and i'm just going to say rafika and if it has simple styling you can also obviously style it inline if you really want to really up to you i like how i style it because the only reason i like styling it this way is because your code remains very organized and you can see what the heck this is oh it's the author name and you get it this is styling for the author name when you just have a bunch of tailwind css right here in line for me that makes the code pretty unreadable and i have no idea like what's going on like i like seeing that search bar i like seeing it's a search input makes the code very readable so i like this way of doing it so let's go ahead and we're going to go author name and for the author name styling we're gonna make the font semi bold give margin bottom just slight margin bottom and slide margin top more than slide we're giving it a one margin top okay and after the title what we need is we just need the followers so i'm going to go ahead and i'm going to say div and here we're going to give it is styles dot author following and it's just going to say the number of followers so for now let's say whatever i'm just gonna hard code some number okay and author following we'll need to create styling for this as well and for the author following styling it's just gonna be text and it's gonna be like that gray text that we always use okay so now if i full screen this you can see zero followers one million followers will make the f's lower case so it really looks like the actual medium one zero follow one million followers cool now we're going to need those green buttons right underneath this okay and the green buttons are they are still part of the author container i imagine so let those let's put those buttons right underneath that bad boy okay so i'm going to go ahead create a div and this div is going to be we're going to say class name and styles.author actions and inside of here we're gonna have a button button okay and this button is gonna have a class name of action button and then we'll repeat this button again action button and this but the second button is going to have a component inside of it and it's going to be a selfclosing component it's not going to be a button it's going to be email unread icon that we want to use okay so it should show up you can see the email unread icon is right there and then the first action button here will say follow okay so now we have two buttons now all we need to do is obviously we need to go ahead and style author actions and we need to style author buttons so let's go ahead and style author actions i'm going to make them flex enabled we'll give it a gap of 0.6 rem and then we'll give it some marginal of one room there we go okay and now time to style our action button so i'm going to copy this ignore that sound i apologize that's so i can focus let's go ahead and bring that down action button to my action button we'll have a background color all right let's go one a eight nine one seven so now we have a green color behind our action button we'll make the text white we'll make sure that it's rounded so now i'll look cleaner we have to add some padding to it so let's go add some padding in each direction so that's padding horizontal and py is padding vertical and we'll make the text small so it looks very clean okay so you can see that these components are now starting to look very similar now we just need this part more for medium and the rest of it that goes underneath so now at this point i believe that we're pretty much done with everything that goes inside of our author container and we're gonna basically get outside of our author container and now we're gonna make our recommendation container so if we look at our author container it starts right over here if i scroll down and it ends right over here so we're going to get outside of this and make a new div and this one is going to be styles.recommendation container all right and then inside of this recommendation container we can actually say things like more from medium so i'm going to give it a class name and we'll say styles that type more from medium and honestly that one doesn't even look like it needs too much styling because it looks just like this so sometimes we'll give them class lamps just so it's readable without even really the need to style it or do anything with it we'll create another div and this one will be articles container so this will contain the articles that we want to show so for the articles normally what we would do is we would loop through and show each article but for now we're just going to show the article okay we're just going to hard code it in so i'm going to say image and for the image let's just use what do we have we have the js logo in here so let's just use the js logo for now do we have the js logo ah it's capital s yes let's go capital s gs logo and let's give it a let's give it a couple of things so it's going to need yeah for articles container yep js logo and then right above the js logo so let's give it a height of 100 and a width of 100 and let's add another image and that'll be the image of the author so i'll just hard code quasi here okay great so if i look at the final version here we have the author image okay or the author image right here the title of the author and then that image over here on the right hand side right behind me the image of the actual article so this image we're going to wrap it inside of another class name and this class name is going to be a long one so let's just close the author image first and this is going to be we're going to say styles.recommendation author profile image container so very long name but don't let that scare you this is just styling for this guy right here so let's go ahead and create that styling profile image container and then we're going to say give me rounded full with overflow hidden and let's make it pretty small 1.4 rim and then width give me 1.4 rim and that's really it okay so that's now you can see it's a very small little thing right so that's where the recommendation for or the profile image is going to go now we also need to have another wrapper outside of that let's prettify it real quick where is it how do i purify it huh that's weird it just took away the thing to purify the code okay odd we'll just pretend like that never happened hey okay so let's go down here and we're gonna wrap this bad boy up and the class name here is going to be styles.recommendation author container and this is everything related to the author is going to go inside of that div okay so i'm going to do this so you can visually see this okay so everything related to the author is going to go inside of this div and then image container and i imagine the title of the author the title graphic is your clever programmer is going to go there too cool recommendation often container and then what we need is to put the name of the author so underneath this image we need to go ahead and create a new div and this div will have the class name of styles.recommendation author name and here we're just going to put the name of the author so i'll just say rafikaze okay and we're going to go ahead and style this guy recommendation author name so this one is going to have for recommendation author name we're just going to say text is going to be small so that's all the styling that we need for that and then recommendation author container i believe that we never created styling for this so let's go ahead and create the styling for that and for this we're going to say it's going to be flex we're going to make the items in the center and for the gap we're going to give it a 0.6 rem great so now if i full screen it this is what it's looking so far making good progress now we just got to make sure that we can have the article title show up as well so articles we have this articles container now we need to add the article inside of the article container okay so that's going to be or the that's going to be the recommendation title so let's create another div right underneath this one and let's see if these guys can go on the same div because that would be easier to read okay perfect let's create another div right here and this div is simply going to styles dot and we're going to say recommendation title so it's going to be the title of the recommended article and so for now we'll just copy this article name or let's copy another article name like for example the ultimate course beginners by clever programmer and we'll just pop that title right in there okay everything is hard coded for now the ultimate course for javascript beginners okay and now for recommendation title do we have that styled no we don't so let's go ahead and style it so for a recommendation title the styling is going to be pretty simple we're just going to make the font bold okay that way the font like really pops out all right what we need next is we need a recommendation thumbnail container and that we're actually gonna put outside of everything else okay so imagine it like this imagine this part right here as the articles container and then this part here it's gonna be on its own which is right behind me this part right here so we're still going to put it inside of the articles container but outside of anything to do with the author okay so if i go down right over here we can put it right within this right there where that logo is as well so this logo will be wrapped in recommendation thumbnail container so i'm going to say class name let's make sure that we close the div out first boom i'm going to say styles dot recommendation thumbnail container and then for the image we are going to style that as well so for the image i'm going to say class name it's going to be styles styles.recommendation thumbnail okay that's going to be the styling now let's go ahead and style recommendation thumbnail container and inside of recommendation thumbnail container i'm going to give it a flex 1 item center we're going to center we're going to justify it in the center we're going to give it a height of 4 ram and a whoops height of 4 ram and a width of 4 ram okay so now it's looking much better and then we're gonna go ahead and style our recommendation thumbnail as well so let's go ahead and style that and for our recommendation thumbnail all we're gonna say is object cover that's it okay we're done with that and now you're like looking at it you're like wait this looks weird all we need to play around with now is really the wrappers right and the wrapper we wrap it and we just say hey flex and then this will pop up over here to the right so let's work on our wrappers now or containers whatever you want to really call them but i'm just calling them wrappers for short all right so we have our articles container but that is actually going to have a couple of things inside of that okay so we're gonna wrap everything up in let's go class name i'm gonna say styles.article content wrapper okay and then we're gonna have another div that we're gonna do but first let's go ahead and cut this out and put this div in the right spot that's gonna be very important so this article content wrapper is gonna pretty much wrap up the entire thing so we can put that really anywhere we want just at the end okay and then within this article content wrapper we're going to have article content okay so let's go class name and we're going to say styles.article oh i misspelled this full content and we're going to say article content okay and that's gonna wrap everything that has to do with the article so that's not going to do the recommendation thumbnail okay so let's put that div right over here all right now let's go ahead and style our article content wrapper so i'm going to go here and we're going to style it so for my article content wrapper the styling is going to be fairly simple and what i'm going to do is i'm just going to say hey flex item center we're going to justify it in between make sure that the cursor turns into a pointer when i hover over it and let's give it a vertical margin of one room okay there starting to look a little bit better don't worry we'll get that image back to in just a second now the next thing that we have to style is we styled our word where'd it go we styled our article wrapper right we styled our article content wrapper now we need to style our article content so let's copy this let's go here and for article content we're simply just going to give it a flex of four there we go and now we can see this guy right over here we can see the title and we can see the image all right so it took me like 30 minutes to find the freaking bug of why this is looking like this and i was like what is going on i didn't make it like this why does it look like garbage because what's supposed to happen right is the title should go above or sorry the author info should go above and the title info should go below if you look at this the author info and the title are in the same line just like what is going on took a while but then i realized that i took author container information and i wrapped it around even the recommendation title so i'm not supposed to wrap this around there so let's just cut this line and move it up until it just wraps the author info so this should just be wrapping the author info and once you do that this should become clean as a whistle clean as a whistle okay and now this component that we have is called recommendations and recommendations can take in info like the author okay so you can we can actually make the author dynamic already if we wanted to we could make it where when we get back to author we can get the image from the author all of that okay but this destructuring is going to come handy later not right this second but this will be super useful because when we're calling this component we can pass the name of the author and then everywhere i'll just pull it in there where we will get the author info from including the name and the image is actually from when the user signs up with firebase and logs into the application upon the authentication of the user we can extract their info thanks to firebase so there you go our recommendations is pretty much done if you want to go ahead and test it you can go to which page should be good so i think we'll go to our po slug so let's go to our slug page and if you want to test recommendations you can we can copy these recommendations and paste them a few times and then if i look here you'll be able to see these recommendations this is the entire recommendations component that's not what we wanted we just want this article thing right here to show up multiple times so once we can actually extract data from firebase what we'll do simply is this entire part will wrap it up in a for loop and then we'll just loop through it and then it'll show like each article okay like a recommended article so all good for now we are done with recommendations front end and we can move on and do other things in our life all right so now the next thing we want to work on is our article main which is this bad boy right over here so let's go ahead and create a new component inside of our components and i'm going to call it article main.js just like that all right now that i have this component we're simply just going to go ahead and say call article main okay and this is going to return and i'm just going to say h1 article main for now and then we're just going to go ahead and export default article main just like that now we're going to go back to our recommendations sorry not recommendations we're going to go back to our pages and inside of our pages we're going to go inside of slug and this here will replace with article main now we're gonna get an error that's fine just replace here article main and it will import it in just a second okay great now it should say article main right there let's go back to article main beautiful okay now we're gonna start working on our article main so let's start speeding up through some of the styling because a little bit of it is getting repetitive so wrapper we're gonna have a wrapper for this and for the wrapper we're gonna say hey give me item center justify it in the center okay and then i want a flex of three border left and a border let's wrap that in our class name of styles.wrapper just like this let's go ahead and make sure it's looking good okay there we go now article main is taking up really good space and you can see what the wrapper is looking like and what the wrapper is doing now we're gonna wrap it up one more time inside of content and our content is going to say hey take up the height of the screen make sure make sure that there is a scroll on overflow and make sure that there's a padding of two ram so i'm going to add another div right here we're going to give it a class name styles.content and we're going to wrap this around the whole thing as well there we go okay so there we have article main and we have our content and there's a scroll bar so now if we have to scroll up and down for articles we can actually see where to scroll like here if there's an article we can see the scroll bar so we can scroll up it now all right now over here we can call this article header or post header and whatever you want so let's go back to our post and on my apologies let's stay in article main and we'll add a post header so let's go ahead and do that i can remove this for now and we're just going to go ahead and say div and i'm going to say class name and we'll say styles dot post header container okay so this is going to be the container and then inside of this container we're going to have a couple of other containers so we're going to have class name styles.author container and then within that we're going to have div class name and we're going to do styles.author profile image container just like that all right and the idea here is we have our post header container and then we have our author container and then we have our author profile image container right so that's where all the containers are coming from now within that image container we're gonna add in our image so we're gonna go image just like this and we need to import it from next so import image from next image and for the image right now we're gonna give it some properties and i'll say class name is going to be styles.image source is just going to be copy for now oh we have to import quasi so let's go to recommendations because i believe that's where we had imported quasi let's copy this let's go back to our article main and simply import quasi there okay and give it a width of 100 and a height of 100. all right so we see quasi image showing up okay good good now we need to get outside of that image container because we're done dealing with this part right here let's go down and in the author container we're going to go ahead and actually go and create class name and we're going to say styles and we'll give you the style called column and inside of this column we are going to have our author name okay so here we're just going to say rafikaze okay and then underneath that we're going to have our post detail so we're going to say style.post details and then for the post details i'm going to let me close this here we're gonna have a span tag because it's gonna be in one i'm just gonna say june 15th and we'll give it a read so we'll say seven men read and we'll give it another span tag here and we will give it an icon so this span tag will have a style of all these styles that listen button okay and then within the span tag itself go right there we're going to put an icon and this is going to be ai fill play circle icon and it's just going to say the word listen next to it because what we're creating here is that listen button right there so the play icon plus where it says listen all right now we need to import this of course so we're going to go ahead and import this from the top so i'm going to say import and we'll say ai fill place circle from react dash icon slash ai just like that okay let's go back and you can see that our icon is now showing up okay very good let's keep on going with this now the next thing we need is obviously we need the social stuff to show up so this stuff right over here and before we do that let's style everything that we have here so far so we've styled our wrapper and content now let's style our post header container and for the post header container the styling that i want is i want it to have flex i'm going to say have justify between we're going to put the items in the center and then margin top is going to be 2.2 and then margin bottom will give it a 1.2 ram okay all right there we go good the next thing that we actually need here is we need to style our author containers so let's do that okay so for author container we're gonna have a flex and then we're gonna say gap of one rim okay there we go so we got a nice little gap and it's starting to look better starting to look more like this one over here you got your picture on the left hand side the name on the right hand side and then the title and everything all right after author container we need to style our author profile image container so we're going to style our image right over here so let's give it a height of 3 ram we will give it a width of 3 ram a grid i'm going to center it and we're going to say rounded full and we're going to say overflow hidden let's take a look okay our app crashed and if that ever happens just you can always go back or refresh and that should do the trick so let's click one of these articles should bring us here perfect so now our image is looking circular let's close this okay now we need to style this image because we have this image class so let's go ahead and do that and for image all i really need to do is i don't even need to really style it anywhere else we can just style it right here and i just want to say for my image i want to say object cover so just that's it okay there and then we need to style our column so let's go ahead and style our column boom boom okay for a column we need to have flex 1 flex make sure it's flex column and then we're going to say justify center all right now it's looking a lot better and then let's work on the post details and style them as well so we're going to start our post details suppose details contains pretty much our you know the date the time the length and whatever else so let's go ahead style our post details i'm going to do this okay and for post details the styling that i actually want to give it is make sure we have flex a gap of 0.2 rem and then text is going to be that gray text i'm going to say 7 8 eight seven eight seven eight awesome all right and then last thing that we need to style for now is that listen button so that actually looks green and looks how we want it to look so for the listen button we're going to enable flex i'm going to say give a gap of one rem we will oh i apologize for listen button we won't do that we'll do flex and then we'll say item center will give a gap of only 0.2 rem okay and then we'll say text and for the text we will go 188917 all right so it's going to give it that like greenish text because that scrolling thing looks ugly right now let's just remove it we can always add it to the content afterwards because without it it looks way cleaner yeah so let's just keep that removed for now now outside of getting outside of our author container so if i just look down right here line 38 is where i get out of my author container so getting out of my author container i do need to add information about the socials so we're going to go ahead and we're gonna do div i will say class name styles oops let's go styles.socials and then within these socials we're gonna add in all of our social icons okay so let's go ahead and import all of the social icons that we actually need first so here we're going to need to import our twitter logo we're going to need our facebook logo linkedin outline link and a bookmark link and then a horizontal link okay so we need this guy link a bookmark link and then the horizontal like bots all right so now that we've imported them we need to actually be able to use them and so we're going to be using all of these inside of our socials okay so inside of our socials i want to just say hey io logo twitter all right we're going to go fa facebook wow i can actually even import that's super cool but we're just gonna do this we need gr linked we need outline link and then we need a div here that's self closing actually it'll have a class name of styles.space we'll create the styling for this afterwards hold on this is a selfclosing div cells that space okay close that squiggly there that's what i forgot to do last time let's get our bookmarks and then let's get our horizontal collapsible dots so let's style socials and let's style space so i will do socials and we'll go like this and we'll do space now for styling socials we need to make sure that we have flex enabled right because look at them right now they're on top of each other that's silly that's not what we want so let's go flex that already will take care of that problem and then we're gonna give a gap of one rem between each will give a gray text so we'll do the seven eight seven eight seven eight and then we'll make sure that the cursor or cursor is pointer when i hover over it so now it's looking way better yeah like when you hover over it look at that looks really clean the reason why listen is for not form it needs to be inline but it's like getting on a new line all we have to do here is we're closing the span tags here so let's actually close the first span tag first and then we can actually close the second span tag after and once we can do that listen will actually fall into its line meaning this should be its own span tag and then this should be its own span tag not they shouldn't be within each other okay so there we go so that should take care of listen now we've set up socials we've done the styling for socials completely now we just need to style space so let's go to space and we're going to say give me a width of 0.5 rem so that just added a little space right there okay and then after after space now we have the article main container right so this is going to be the main container where the article is actually going to go so we're going to need this boom container and that's going to contain all right so imagine this we have this article container and then within that we're going to have a banner container so this will be a banner container all right and then underneath that we'll have the underneath that we'll just have the actual article so that will have the article text and everything okay so let's go ahead and create our article container div now and article main container is actually going to be outside of our post header container as well so let's scroll all the way down all the way down and on line 55 56 it ends and this is where we're going to create it so we're going to go class name i'm going to say styles.article main container all right and then within that we will have our banner so i'm going to say class name and we're going to say files dot banner container okay and then within the banner container we will have the image that we're looking for okay so we need a banner image which is like we're gonna need a big image now i've used a banner image already in one of our components earlier so let's just reuse that so from banner boom let's go back to our article main.js and at the top let's paste this and instead of saying logo we'll say banner import banner from banner all right let's go all the way down and we'll have the selfclosing image and for the source we'll say banner for the height we'll give it 100 and for the width we'll give it 100 and the style this will have so we'll say class name and we'll say styles.image okay and then we'll simply go ahead and so this will just inherit the style that we've already created for image so this will just reuse it okay so there we go it's showing up now let's go and style our banner container and then our article main container so let's go here and for our banner container the styling that i want to go with is i'm going to give it a height of 18 rem okay this is going to make the height pretty big and i want to go with full so i want it to be like as wide as as it possibly can be all right and then i want to go grid center i want to hide the overflow and then we want to give a margin bottom of to rem so there we go now we got an actual banner image going okay next up we're gonna style our article main container so let's go ahead and get to work in our article main container and for article main container i'm to give it a flex i'm going to make sure it's flex column and then we're going to give it a gap of one room all right there we go so now these are starting to actually look good we just have to also create our image class our image class is really just object cover so let's go ahead and do that now image is just object cover okay that's it so now our image should look better all right so rumplet this will happen from time to time it goes to sleep so just remember because i was like why is it not changing anything so let's go here and let's go yarn dev and now we should be now we should be actually good to go so if i go in here we refresh this let's wait for it all right so here's how we can get this to be full width well it's very simple we just have to tell the computer hey go into full width all right so just go to content and just type in full width okay and that will push it out and your article main is going to start looking way way way better right obviously we need a better image but this image is okay for now now the next thing we actually need is we need to actually start working on the you know the actual body of the article body yeti so how we're going to do that is underneath our banner container so banner container and right over here and right underneath this we're going to make an h1 and it's going to have a class name and we'll say styles.title okay and we're simply going to just write the title of the article so in the final version it's this right there so i'm going to post that right here seven free tools that'll make you more productive in 2021 and then we're gonna add h4 underneath that and the h4 will have a class name and we're going to say styles.subtitle okay and then subtitle will have a div and that div will have this will this is not going to have any styles is this we'll say name of the person so say rafikaze so let's look at the final version right rafikaze and then you got the date so let's go ahead and put our dates we're gonna say june 15 2022 just like that june 15 comma 2022 productivity is a skill that can be learned and then you have the entire body of the article all right so let's go ahead and add in the entire body of our article before we add in the body body of our article we're gonna just add in the quick brief so i'm gonna say right here and we'll add in our brief okay so right now i'm just gonna write the word brief next to it and boom go back and i'll just paste our brief okay productivity is a skill that can be learned and then we'll have our entire article and our entire article will be right underneath this h4 and we'll say class name and we'll say styles dot article text article text and then we'll just put the article text okay so for now i'm going to just copy this and paste it over here to represent that's an article okay let's look at our app boom looking nice now all we have to do here all we have to do here is we just have to go and style this so let's go ahead and style everything so for example title we need to go ahead and style that so let's go add title here and for title we're going to keep it simple we're just going to say hey give me font bold and make it very large so we're going to set text 3xl so that'll take care of our title okay now let's do get 3xl there we go it's big it just took a second so we got our title now we need to style our subtitle and for our subtitle i'm going to say font medium serif italic and then for text i'm going to say 1.4 rem and we're going to give it a 2 9 2 9 2 9. there we go so we got our text looking different for the brief or the subtitle and then here we're going to say article text and then for my article text i will have font medium serif we'll do the same thing all right it's just not going to be italic so we can actually just go ahead and copy this and simply paste that right over here there we go okay now we got our text showing up so look at that our article main is looking good our recommendations are looking great our sidebar is looking awesome right now like the last piece of the puzzle really is to make the data dynamic i mean that's kind of that's kind of really it so if we can make the data dynamic then we're good okay let's just see if there's anything else left to finish so we're going to look here there's not much left to finish honestly because we can scroll up and down here right i can scroll up and down on this article on the right hand side we have our followers and buttons and suggestions more from medium on the left hand side we have our nav bar so in terms of like the front end honestly with majority of the front end we're completely done now all we need to do is connect our firebase at a database and then be able to actually pull all this data from our database so with that said that's what we're going to work on next one thing i just want to do before we continue with adding firebase is i just want to make it the recommended posts actually show all the recommended posts or like more so at least it looks kind of nice so we're going to go ahead and create an array of recommended posts array of objects rather so we're basically going to say let's go into recommendations first recommendations and underneath here i'm going to add in like some static data so i'm going to say recommended posts just like that and it will be an array and i will say title we'll say what can you do with replit okay and we'll for image i'm going to use the replit logo okay hopefully we've imported this at the top already yep we have and then we have the tutorial image as well so replit logo and then the author is going to be name clever programmer for this one and then image is going to be cp then we're going to take this guy we're going to put a comma comma right here okay and then we're gonna paste it again and paste it again so we should have three different ones okay this the second one is gonna be the title is gonna be the ultimate javascript developer course for beginners the image is going to be the tutorial image and then name is going to be rafikaze and then the image is going to be quasi okay and then the last one is going to be how to become a developer in 2022 and this is going to have the js logo name is going to be clever programmer and we're going to leave this as cp logo okay cool so recommended post now we're going to turn this into a little bit of dynamic data meaning we're just going to write a simple loop and we're going to loop through this so article mean where's the article main container let's look for it article content wrapper rather it's article content wrapper okay so this is where our loop will start so we'll go through recommended posts dot map and for each post we'll do the following okay and then we're gonna wrap up this entire thing all of this up so where does article content wrapper end article content wrapper ends right there so we're gonna wrap that bad boy up with that that so we'll close this and that okay that's why we have paren paren and then a squiggly okay so now all of this stuff here is going to be looping through all right now everywhere we actually need access to so this should give us three articles basically because it's looping through three times for now because we only have three things in that array all right let's close this out so you can see that we're getting on the right hand side we're getting three articles and all of them recommended articles and all of them are js logo now what we want to do is we want to actually get that specific post title and name and everything so we're going to go post dot author dot name post.author post.author.name like that okay and that should get us the actual author name so you can see clever programmer rafikaze clever programmer right so author names are correct and then here this is the title so we're just going to do post.title and then here is going to be post dot image okay suppose dot image let's take a look boom there we go actually that's the wrong place to put the post image because that's where the author image actually goes so we're gonna go and say author dot image and then this right over here we're gonna instead of a hardcoded js logo i'm gonna say post dot image okay and now let's look at it and boom look at that the right hand side is looking clean now looks super right that looks awesome we got the js logo we got all the titles showing we got everybody showing so now our our recommendations look a lot more complete so that makes me happy now we can actually continue with the firebase stuff and then add all the database stuff all right let's go ahead and sign up for firebase so what you can do simply is just go firebase.com and uh if you haven't created an account ever go ahead and create an account for them and what i do is i'm just gonna go into this right here and then simply just click go to console okay hit go to console and then it should bring you here now we're just gonna add project and we're just going to say whoops we're going to write the project name and we're just going to say medium clone replit okay yep okay hit continue and um yeah we don't need to include analytics if you want you can just say include analytics but i don't really care for it right for this app so if i don't need it i'm just going to disable it okay but it doesn't really matter either way whichever option you choose is totally fine so we're just going to wait for this to finish up and then once it finishes up we are we'll need access to the web but for now all we'll do is we'll go into build and we'll just click firestore database so we're going to create a new like database that goes along with this okay and simply hit create database right there okay i'll zoom in so it's like clearer to see hopefully and we'll just go in and yeah we'll just start our app in production mode normally that's not a good idea for this app it's just for dummy purposes and we're building it for ourselves so it's totally fine let's put it in production mode and it'll be great for your portfolio as well so it's going to provision this cloud firestore and then once that's done you can actually we can go ahead into that database and we can actually start adding data in there and then we can actually go ahead and also retrieve that data so we're going to start a collection here and this collection we're simply going to call it articles okay we're going to give it an auto id and articles will have a couple of fields we'll have author we will have banner image which will just be a string yeah and author will be a string we will have body which will be a string we will have brief which will also be a string we will have category which will be a string and we'll have post length which will be a string and then we'll have posted on and this will be a actual date time stamp okay and so like we can choose when this article was posted so let's pour post it on saturday at i don't know whatever that's the time it was posted on perfect and then we'll have one more field and we'll call this title great now we need to actually give these values so for author i'm going to give it a value of kazeacleverprogrammer.com just an email for banner image you could choose whatever image you want but i'm just gonna choose this image you can literally google any image and just pop that here okay i had an image already saved to my clipboard so i'm just using that for body we can add in whatever we want i added in that entire article thing that we had in replit so if you want to get access to that you can go ahead and just like wherever we had that article let me go back i think an article main just grab this copy this come back here and just paste that body right there for brief we're gonna go ahead and say hey productivity is a skill that can be learned category we'll just say it's productivity post length we'll say it's five post links really just means how long does it take to read so we're basically just saying it takes five minutes to read and then for the title you know this is the seven free tools to help you make product become productive and twitter sound free tools that will make you more productive in 2022. you could call the title whatever you want okay and now we just hit save on this so it was not allowing me to save for whatever reason but i just deleted this g added it back and now it's allowing me to save so hopefully if it was causing the same problem that's how you can overcome that so let's hit save and that's one juicy meaty article saved okay we can also add in users so we'll start another collection we'll call it users and then inside of our users collection we'll create an auto id and the fields that we'll need okay this is to mimic what a user will be like in our database once we have them for now we'll just hard code it and we'll basically say hey i'll have a user with that email you could put your email if you want the email will just be a string we'll have a follower account which will be in number and we'll just set it to zero for now and we'll have a field for image url so this will be the image of the user okay i have my image already but again you can go to google grab any image okay and put it here so for example you could do leonardo dicaprio right and then just go to images you can right click copy image address and you can just paste that here that'll work too all right so we got our image url and then we'll put our name and for a name we'll say rafa qazi great oops what did i just do i deleted something crap didn't i delete one oh yeah follower account all right this will be a number and we'll say zero okay let's hit or let's give a specific number let's just say 273 000. all right so now we got email we got follower account we got image url and name so we got all of these things so this will represent what our database will look like in its final version except the only new thing that our database will really have is we'll also we'll have more documents inside of articles and we'll have more documents inside of users okay and how firebase works is you have a collection inside of that collection you have documents and inside of that you have like inside of that document that document is made up of multiple fields okay so you can add a field in there all right so pretty simple what we're trying to create is relatively simple now that we have all of this set up what we do need to do is go and get our configuration information so we can actually set this bad boy up otherwise we won't be able to use it okay so yes i don't need it for hosting we'll register the app medium cp replit register app doesn't really matter what you call it and then it's going to give us information about the sdk and how we can actually use it okay so let's go ahead and grab all of this info we're going to need that so hit copy and then we're also going to need to install firebase so those are two important things now we're going to go back it said npm install firebase right so we're going to go back here we're going to open up our command line we're going to kill our terminal with control c and we're just going to do npm install firebase so we want to make sure that we have firebase installed okay and then we're going to need to put the firebase configurations in the right place so let's go ahead and get that all of that set up so here in our main inside of this medium cp right inside of this main folder right here click in we're going to add a new file we'll call this firebase.js okay and firebase.js will pretty much look like that file that we just copied with our configurations so let's paste that here for now and then we're going to fix it so i'm just going to do yarndev again so my server starts running and then i'm going to close this out okay so we need access to our api key auth domain project id storage bucket messaging sender id app id perfect that's good and then what we're going to need is we have our initialize app and we're going to need a couple of more things here so i'm going to say import we're going to say get auth because we're going to need to do authentication as well so we're going to say from firebase auth then we're going to say import google auth provider from firebase auth that's exactly right just like that okay and then we're gonna say import fire get fire store import get firestore from and then we're gonna do from firebase slash firestore okay and remove that at sign we don't need that okay there we go oops fire store misspelled it perfect all right now this is looking clean and the last thing we want to do is we got our const app and we're going to get our auth we're going to say get auth and pass it the app we're also going to get our provider and we're going to say new google provider and this is in it this is a class right so that's why you say new and then we're going to say cons db get firestore app okay and then last but not least we're going to export all of this so we're going to say provider db so we can have access to all this information outside of just this file right that's why we need this so we can pass the database around or the provider around now since we're using google provider we do need to enable google provider from our firebase so let's go into project let's click this icon right there so now you should see all of this stuff let's go into build and let's click authentication inside of authentication let's hit get started and then inside of this get started we're going to add additional providers like google and we'll hit enable and put whatever email you want great all right and now all we want to do is just make sure that we have our authorized domains so for example this here we want to authorize this entire domain so i'm going to copy this entire url of repple.co and just add it there okay you don't need the https part you don't need that slash at the end okay and then you can just hit add so now this domain here is authorized that way if i'm adding authentication it will work here so with that said guys our firebase is now set up and now that it's set up we are ready to do some magic with it so i hope you're excited but now we're ready to actually start pulling data and doing fancy stuff with it all right now we're going to go ahead and create a context and context is a library that you get with react that makes it easy for you to like instead of having to prop drill you get all the data in one place so we'll just get we'll pull all the user data we'll put in our context file and then we'll have access to it we can use it anywhere so let's create a new folder at the global level at the medium cp level so we're going to go ahead and say add folder i'm going to call this folder context and inside of this context folder i'm going to add a file and it's going to be called medium context.js all right now we want to do export const medium context and we're going to basically say create context now obviously to create context we need to actually import that so we're going to say create context and we're going to say from react and to make the code more legible let's just say const and then at the end we'll say export and then we can say medium context and then we're going to need to export other things as well so for now let's just say medium context and then the other thing we'll need to export is a provider so let's go ahead and create a medium provider okay and then for the provider it's going to take in children okay and let's go like this okay now this is where we're going to get all of our users and our posts so i'm just going to go ahead and say all users set all users all right and we're going to go here and say use is going to be an empty array okay and then we're going to do the same thing but except we're going to say all posts and we're going to say set all posts okay we could just say users and set users as well instead of all users everywhere because speakers just say set users and we could say posts and then we can just say set post okay we'll ask send there so we just assume that it's plural all right so that's good for now and what we want to do is we want to have a use effect hook inside of here so basically anytime that the page loads or this provider gets called and this provider is really going to get called only once like when the page loads because we're going to give it and so once this happens we want this use effect hook to run so let's go use effect right react and like import use effect as well because we're going to need that and then what i'm basically going to say and let's also make sure that we end this use effect with the dependency of a user so when there is a user okay for now we'll just leave this blank okay for now we'll just leave this blank and what we want to do here is we want to get access to all of our users okay so here oh and i'm going to basically say so we're going to leave that array empty so i'm just going to say array but i'm not going to give it a dependency array so basically it'll only work just one time and i'm going to make a function that will get user so let's say get users and this will be asic and then we're going to say cons query snapshot so we're going to get a snapshot from firebase and i'm going to say await the docs and then this collection thing here you remember we exported it out so we can actually import all this stuff now so we can go ahead and say hey import okay collection get docs set doc and doc because we're gonna need access to all of them from firebase firestore so there we go now we'll be able to get access to all of this so we're gonna await we're gonna get the collection and the collection is a function that takes in a database so which database you want to give it so we'll also need to import our database from firebase so let's go ahead and do that now so i'm going to say import db from firestore or firebase sorry our file that we created firebase so we're going to give it that database and then we're going to say hey look for the users collection and basically this will get all of the users from that user's collection now once we get all of that what we need to do is we need to actually like query appshot.docs.map and then we're just going to say doc and let's just say if we want to do console.doc okay so for now we'll just keep this really simple we'll add more to it later but we need to export medium context and then we also need to export medium provider so our provider and our context all right so a couple of things let's make sure this use effect it can't be outside of the body of a component so let's make sure we cut this and we put this inside of our medium provider okay so we're going to put that right there right here okay and then the last thing we want to do let's prettify this the last thing we want to do is medium provider should return and it should return the following it should return medium contacts divider all right and then we're going to give it a pretty right here and it's going to be value and so it's going to return a value and the value that we're going to have at return is going to be posts and users for now okay so these posts and then these users for now okay great and then last thing we want is we want to give the children as well then we want to end this medium context.provider so looking at this makes it look a little bit simpler so we're returning a context provider now what we want to do is we want to wrap our entire app up in this provider so let's go back up to pages let's go to our app and we're going to app wrap this entire app so i'm going to say and we're going to get our medium provider and we're going to get that from our context and we're going to grab our medium context and where it says return this component page props that's our entire app but we're going to wrap this app in medium provider and so now our entire app will have access to this medium provider okay so when i say component yep medium provider component page props there we go unreachable code detected so what's the problem here okay let's keep going regardless of this error oh yes return we want to have parentheses here and then we want to close this return just like that now let's prettify it okay beautiful so that's what your my app your app.js should be looking like okay so we've wrapped the entire app in this context that means our entire app will have access to this context right here okay and let's give it a try let's see if we're actually able to get this data let's make sure we run this function here so i'm going to say get users okay so we just have to make sure that we call that function all right and then in our index.js we can actually use this so in order to use this we want to actually import a couple of things i'm going to say import use context so this hook allows us to actually use the context and we're going to say context medium context and we will also say import medium context or sorry this we can say medium context actually here medium context and then this one here use context that just actually comes from react so we can say import use context from react so that should allow us to actually use all of the data from our firebase that's what's happening here okay so let's go down and i'm just going to say destructure posts and use contacts medium okay and then let's just console log posts and see what's happening all right so that's it so far let's make sure we cd into our app and then yarn dev that bad boy okay perfect and let's look inside of our app right here we should have stuff happening wait we have an error ah use date is not defined okay so let's go back to our medium context and let's import use state and then let's come back to our index.js that should take care of there firebase missing or insufficient permissions interesting we did give it all of the permissions it needed so not sure what's happening there let's try refreshing our app let's see if that does anything missing or insufficient permissions all right so why that's actually happening is because in our firebase we have it to where the rule is that we're not allowing to write so let's go ahead and go to our firebase database firestore database let's go to rules and then inside of our rules go right here and then just change this to true so that just means that allow us to write to this database okay this is not that safe because that means pretty much anybody can write to the database but it's okay for now so let's refresh our app and let's see what happens okay great all right so the app is compiling let's see if we're getting any inspect element data in console okay we're not getting the data yet let's put a little fire emoji so we can actually see that this is showing up so save this oh yeah let's make sure we go back to our home so i'm in my home now and i don't actually get back any data as you can see and probably why that's happening is that we haven't actually loaded the data that fast so we need to actually be able to get the data and then actually load it up all right so here's what we got to do so we're actually getting back our data we're just not getting it in the right form so what you want to do is where it says query shot doc or console login doc just do doc dot data okay and then now when you actually refresh your app and run it you'll notice that we're actually pulling the data so it's getting us the actual user so we have a user right here rafikaze cleverprogrammer.com we have their image url and a follower account of 273 thousand and you can see that it's actually pulling this right from our firebase right 273 000 image url name everything basically this is now working okay we're actually pulling the data so that's how easy it is to get the user data now what we want to do is we want to actually store it in our state so what i'm going to do is i'm just going to say before we actually store it in state i want to get the actual data that i'm looking for so for the user i want to get a couple of more things i want to get the doc id okay so let's go here i don't just want to console.log something okay what i want to do is i want to actually return an object and this object id is going to be doc.id and for data let's destructure this and we're going to get the actual user data okay and that's going to just put it in this variable it's going to set that this as the value of this key okay so data is going to be an object and then we're going to return that now what i want to do is i want to set all users to this so i'm going to do that users okay and then wrap that bad boy up so now we're going to set those users okay and let's go back to our index.js now let's change this with users and let's go like this all right so here we have that fire emoji and then here we can actually see all of our users i'm blocking this a little bit i'm aware so we can see all of our users here okay since we're going to be doing firebase stuff i can safely put myself in the middle of the screen here so yeah so let's go and let's add another record right so let's go boom we will add another user so let's go add document auto id and let's just copy all of this can i duplicate this no it doesn't let you duplicate i don't think so so email follower account image url so i'm going to copy the image url and then let's just go so auto id email davidcleverprogrammer.com image url is gonna be this so same image as me follower count is gonna be i don't know 2300 and let's save him and then of course he needs a name as well so we're going to add a field and i'll send name and we'll say david kosey all right so we have two users here now let's go back to our app let's refresh and this should actually spit out two users there we go we can see that we're actually getting back to users now let's click them and we can see information about user number one and then when i hide this we can actually see information about user number two as well and we have the data and we have david riccosi and we have his name and everything okay so far so good we're able to store the user information in context and then we're able to retrieve that context and then it really simplifies our code allows us to use all this information now what we want to do is we want to actually get information about our post so let's go ahead and get all of the information about our post so i'm going to go back to our medium context and in our medium context we're going to pull all that information all that juicy information about the post right so we have the get users function this runs this function runs when there's like a user detected or a user changes okay so we're gonna add the dependency array after we add authentication in let's go here okay let's add another use effect hook and we're going to add an use effect hook and this one is this function is going to be called get posts cons get posts and it's going to be async function and we're going to get a snapshot we're going to await the docs i'm going to say get docs and i'm going to say collection db and this time it's going to be articles okay so this will get the snapshot of all of the articles and then what we're gonna do is we're gonna say query shot snapshot dot docs dot map and let's go ahead and say let's just console dog.data so we can actually see that we're getting back and we'll also give it an empty array and let's call this function now so let's say get post just like this okay so now we should actually also see posts getting printed out as well and not just users so let's refresh our app and see if we get all of our articles so at the bottom you can actually see we're getting back all of our articles okay i only have one article right now so we're getting back that article right we get the timestamp field we get the post length we get the banner image we get the author everything that's inside of our database if i go to my articles here you can see body if i go to the body it matches if i click the body it goes on it's a long string it's a long line so this is working we're able to get all of the posts now what we want to do is we don't just want to console console.log this we want to actually do more with it so i'm going to go ahead and say return and we're going to return an object and id is going to be doc.id and then data is going to be the following so we're going to body is going to be doc dot data dot body and then brief gonna be doc dot data dot brief and then we're gonna have category to save your time i'm just going to paste all of this here so you can see this boom right there okay it's pretty quiet so we got post length banner image title comments posted on author that allows us to pull all of the information out of this all right we're not really even going to be using comments so let's comment that out because we don't have comments but if we do need to add them later we can obviously always come back and do that so that's what we're going to be returning here and all we want to do is we want to just set posts to that so we want to make sure that we save this in our state and we have access to post now so let's go back to our index.js we don't need access to users here we actually just need access to posts here so let's say posts with the fire emoji and let's go back and let's look and boom there we go we have the data id and then we have everything else as well so let's go back to context id yep id and data we have it all we have it all all right so that's pretty much all we need access to let's go back i apologize that's my bulldog barking we're gonna try to ignore her she hates the ambulance so when the ambulance goes by she will keep barking at it forever so that's it we're getting access to our posts as well all right now that we're actually able to retrieve all the data from our posts what we need to do is just simply replace everything here from everything that's coming from our database okay so like this author the author image this that boom everything so what we're gonna do is in our index file we're gonna grab access to all posts like we're doing here and then for our postcard we're actually going to loop here inside of our post list and i'm just gonna say posts dot map okay and we're gonna just put post like that and we're gonna open this and then we're gonna close this on here yeah one more great okay beautiful so since we only have one post right now we should only get one article that's exactly what i expected and postcard we're actually going to hand it our post and for the key is just going to be post.id okay and then let's go to our postcard component and inside of our postcard component we're actually going to use this information so let's go okay so inside of our postcard component let's get access to this information so we're going to just say post and the path of this is actually just going to be post dot id okay whatever the id of that post is that's going to be the slug so let's click this post now and let's see what happens where it takes us take a look at that that slug 5 t s e k whatever if you look in articles you can see that article has that so this is cool like we're already getting the data and we're able to go to that page and retrieve it from firebase this is awesome we're getting all the information we need now we're gonna need access to the author data as well but that again we're gonna get that we can get that information later okay if i go to my post right now actually we have that information inside of our post right let's go look at our articles we have that information articles dot that specific article and dot author and boom we get the information we need so post.data.author will actually get it for us okay for this image right here that i'm using the logo we're going to remove that logo and for the source instead what we're going to say is i'm going to author data dot image url not author data my my apologies a post dot data and i can say dot yeah post that data or let's see how it's stored in the record so in the record we have i have the banner image let's actually grab this author's data specifically first so what i'm going to do is let's come here and i'm going to say const author data this is set author data and we're going to say use state is null okay and i'm gonna now write my use effect hook this will change based on if there's a post or not okay and in here we're gonna say we're gonna write a function for get author data and it's going to be an async function and we're going to set the author data to the data that we get we'll await and then i'll await get doc doc go into the users go into that author and then grab that data okay so basically what we're doing is we're getting the author and then we're grabbing that author's data all data related to that author okay so then it's going to give us that specific user's information and then we can actually get the photo of that specific user great now we just need to import all this stuff since we don't have access to it so we're going to say we're going to add a bunch of import statements here so let's say import from firebase from dot dot slash firebase the file that we wrote and then we're also going to import our doc and then we're gonna get the dock from firebase firestore all right so now we have our db right and then we have access to dock and get doc that's it now we just need to call this function get author data just like this all right and what's there here weight has no impact on this type of expression interesting great can we do this wait that's that should be good okay call get author data and then i should have access to author data okay and then we should be able to do maybe something like author data dot name users.name so let's see let's see what happens now in our app so let's go back to the home page cd medium and then let's do yarn dev great and let's go back to our home page sometimes it just sleeps and you just got to wake it up and refresh it use state is not defined so let's import you state import use state use effect from react let's look at it now cannot read properties of null author data dot name is it author data dot data dot name is that what it is author data we'll say author data dot name let's make it optional chaining so if it exists great if it doesn't exist then it doesn't freak out and that's complaining about the image source image is missing required src property so we have the property actually there for the image so let's do author data dot image url just like that and let's see what happens now let's refresh cannot read properties of null reading image url let's see what the error here is just going to make it dependent on nothing for now let's make it dependent on nothing all right now while this author thing gives us problems let's at least get all the data from the post first then we should be good for now i'm just going to change this to logo so we don't have an error there anymore so boom our app should be up and running okay now to say this is not a function cool so we're just going to wrap this away in parentheses and then once we get back some result which is actually just going to be a dock then we can call doc.data on it okay so dog gets us the specific reference to the doc and then getdock actually retrieves it so let's go here all right uh so we're awaiting this i'm getting this cool now i want to go down and i want to start getting all that juicy post data okay so for example this here is going to be post dot data dot title of the post so if we go to our base what articles we got title yes we have title great and let's put this in squigglies because otherwise it's literally gonna say posted data.title that's not what we want boom look at that we're pulling this information from our firebase now let's go ahead and change this to post.data.brief and we should be good with that a brief beautiful okay and that's actually pulling from firebase as well now this part here is june 15th here where we have it hard coded we need this to be a date so let's go ahead on a new line and let's get to work on this so i'm actually going to say new and we're going to do some javascript here so i'm going to say new date and get me the date it was posted on and we're going to convert that to two locale string and we're going to make it us and then we're going to say for day make it numeric okay and for a month make it short okay let's hit that so it pretty fize it there we go so that's how our date should be so you can see we're actually now pulling july 1st the date that we actually put inside of our firebase for five min read the length we're gonna pull this length post.data.length i believe or post length post link so it should be like however many minutes read it was that we said okay all right let's put a space there so there's a little space after five minute read and then where it says productivity let's pull that from post.data.category okay we're done with that awesome we have a thumbnail container here all right we never created the styling for our thumbnail container so let's go ahead and do that now thumbnail container is gonna have very simple styling thumbnail container and just gonna have a flex of one all right great and for our thumbnail container we're going to give it the articles we're going to give it the image all right so let's go ahead and say post.data.banner image let's see if it pulls it all right we're getting some error that says hey that domain you need to add it to your domains inside of your next config.js so you need to actually authorize this domain but i'll show you a little trick what you can actually do is there's this nice little thing called cloudenary.com audinary.com okay and you can pass it different links and it can actually fetch it for you okay and it has this demo link and the demo link is this i'll show you right now so we're gonna remove all of this and we'll put tildes and i'll put the demo link so it's rez.cloudmary.com demo slash image slash fetch and now at the end of this i can just say data post dot data dot banner image and now this res cloudinary.com we can go inside of our next config file and we can just allow this domain so let's go here we're going to do images and we're going to go ahead and say domains i'm going to add res.cloudanary.com that way every single image will just come from the same domain cloudnary.com doesn't matter whatever other domain we have okay so nice little trick that we can actually do all right now let's go back and refresh and our image should show up soon says oh so whenever you make changes to your config file you'll need to kill your server and then you'll need to start your server again so let's restart our server and then let's refresh our app and let's see if it works this time all right there we go now our app is working and we're actually pulling that image from our firebase okay that's perfect that's very good so if we change that image that image would change so let's for example go to our firebase and let's change a few things so let's say productivity is a skill we can change that to hakuna matata right let's hit update and let's go back let's refresh and you'll see it'll say hakuna matata okay so clearly it's extracting all of this from our database that proves it we'll change this image and then we'll add the author name afterwards but for now that's how we retrieve our postcard data okay and for every single post that we have we just loop through and we show that post so now let's go ahead and let's make another post so that way we can see another article so i'm going to go ahead and just copy let's say another image so i'm going to go ahead and add document we'll auto id it and we will say title is top 5 programming languages to learn in 2022 we will say banner image is this so i just got another image and i just pasted it okay and then we'll say body is i'll copy the body put it here okay and then for brief i will say here the best five programming languages you'll need to learn in 2022 category i'll say the for this is coding post length here is seven and we'll make this a number seven and then posted on will be a timestamp and let's just say it was posted on july 19th then we'll say yep that's it let's hit save so now we got another article we got two articles here is there anything that this article is missing author it's missing author so let's go author i'll say boom all right let's go back let's refresh and it should show us two articles there we go look at that isn't that beautiful we're pulling from our database everything works we're able to actually read the articles right so in terms of using firebase to read posts on our home page we're able to do that so congratulations if you got this far all right before we continue on to another part let's just fix this bug that we had yesterday which was we don't have my yet my yesterday you're probably either watching it right now or it's weeks past i don't know what pace you're going at but i'm proud of you that you got to this part so we had this name here right we want our name to show up here but it's not showing up so what's the problem the problem that's actually happening is if we go to our code base is asking for an email right here and it actually looks in a particular field type called email so i'm going to first of all just run our server so we're going to cd into medium oh let me make myself much smaller there we go all right so we're going to cd into medium cp our main folder and then i'm just going to do yarndev and now it's going to start all right so the problem that was happening is we forgot to make our field a email field so in our users this field here let's edit it and its type is my apologies what i mean to say is this id here actually the id of the user actually needs to be an email okay so this id let's see if we can actually change this id ah looks like we can't change the existing id i can filter it but it seems like i cannot change the id okay so let's add a new document it should pretty much be the same as that one and for the id i'm gonna put an email as the idea okay so we're gonna say cleverprogrammer email is gonna be that let's add a field and we're gonna have follower account it's going to be let's say 273 000. i'm going to add the same image that i added earlier you can add whatever image you want okay so we're going to say image url and then we're going to add our last field which is going to be name so name then we're going to say rafa kazi okay so just the id is kazee cleverprogrammer.com let's hit save on that and this other one that we had i'm going to go ahead and delete this so delete this document and i will also go ahead and delete this document as well so now we have two documents deleted we just have the quasi cleverprogrammer.com document showing up okay now let's take a look and see if our code is doing the right thing so i'm gonna go ahead and take this line and also console log it so we're gonna do console log and then just paste that in and i'm gonna give it a little uh firefighter emoji so it pops out to me let's go back to our app let's hit inspect and let's see if it's showing up firefighter emoji is not showing up yet let's refresh our app and let's see if our firefighter emoji pops up our firefighter emoji is still not popping up where does it pop up it pops up on the postcard so it should actually pop up on this page right here we need to go to our home page so make sure that when you're on that article page make sure to click the home button because we're supposed to be on our home so when you go to our home page now let's see if the firefighter emoji shows up yes the firefighter emoji as you can see at the bottom right here it does indeed show up let me see if i can make this bigger so you could see it better this is pretty huge on my screen we can see this inspect and there we go firefighter emoji is showing up and our user is now showing up so now we actually have access to our user data we just needed to make the id of the author their email so then we could actually look them up so now we have effectively stored author data and now we can actually retrieve the authordata.name so if we actually go back to our app you can see that now it says rafikaze right here for the author for the article right so now we're actually pulling the author data correctly okay beautiful now we can also pull the actual author image so i can actually say author data dot image l okay now we're gonna get an error that's gonna say hey this domain is not inside of your next config so we won't actually be able to show it it's not configured under images in your next.config what we actually want to do is i'm simply going to go ahead and add that cloudinary link before it so we're going to add this before it let's just put it in a this guy first let's put a tilde at the end of it let's put a tilde at the start of it and now let's paste that link there we go okay let's prettify this there so now i have this cloudantery link and that is properly put in place now it's saying hey i can't read property of null so let's put a question mark here and let's see if that solves our problem yep it does there we go so now we're actually pulling the image from the actual author from our firebase later we'll allow users to be authenticated with firebase and then we'll pull the data from google itself so there we go that particular bug that we had with the author not showing up on the postcard now that is solved all right now our article main this page right over here is going to need a couple of pieces of information this component right here right article main the first piece of information is going to need it's going to need access to the author data so we're going to need access to author data and then the or like just author right and the next thing that we actually need access to is the post itself okay so we need access to two pieces of this component needs access to two pieces of data so let's do this let's go back to our post our article main component rather and we'll give it access to those two pieces of data okay so it's going to get a post and it's going to get an author now obviously since we're destructuring this we need to when we call article main we have to make sure that we're passing the article main component this data that it actually requires now for article main um we're most likely calling it in our post page the slug page that we made so let's go ahead to our slug page and i can see that i have article main here but i'm not passing it anything so i will need to actually pass that post and i'll also need to pass it author okay now we are not actually getting that data so post is not defined and author is not defined which is actually accurate so what the heck is going on we actually need to get access to all of that information okay so let's get access to that info now so what we're going to do is i'm going to say const and we'll say posts and users and we'll deconstruct it and destructure it from our use context library and we'll get our medium context okay now medium context will have to import it so basically i'm going to say import medium context from and then we got to tell it where from so we'll say context not readers nav but medium context just like that all right so now we're actually using use context and this and that'll allow us to get access to posts and users all right it says that we don't have medium context is not defined interesting but the capital m so that should fix it just takes a second all right now we need to get access to everything right so we have posts here and we actually need to get access to our specific post we need to go ahead and find the post that we're looking for when we click and what we want to do how do we want to find the post here's how i want to find the post so let me go ahead and just cut this out for now just so i can explain if i'm on this page right here how will i find the post what i need to do is actually i need to look for that post id through the url in order to get the data from this url right over here we need to actually use router okay so let's go ahead and i'm going to say import and we're going to say use router and we'll say from next router let's pretty much this so everything looks prettier beautiful now that i have all of this info we need to actually be able to search for this okay and when are we going to search for this we're going to fire off a use effect hook on this page so that we can actually pull retrieve this information okay so we're going to say use effect let's actually import it as well so a wraplet allows us to do that so let's just go ahead and import so it automatically imported use effect and then we will say that it'll have a dependency of nothing for now and we'll just make a little check hey if posts if their length is zero then i just want you to return and not do anything okay so this is going to be we call this our guard clause okay but if there is something to be done well then what i want you to do is actually find it so we're going to say post dot find and we're going to look for that specific post so i'm going to say where the post id is equal to whatever the slug is inside of our router okay now we have to make sure that we're actually using our router so we're going to go here and just say const router is use router and just to show you what router query slug will give us we'll console log this so you can see and we'll put a little gun emoji next to it so you can spot it easily in the console log let's save and let's hit inspect okay let's go to console and let's refresh this page and let's see if that shows us what we're looking for so it should really pull the data from the url and it should spit it out at the bottom our reply did not respond which means it's probably asleep so let's go back whoops and we'll cd into medium and we'll do yarn dev okay let's refresh here and let's see if it brings us to what we're looking for and you can see that it's actually pulling that from the route so now all we're saying is hey within posts find the post where the id matches whatever we pass in the slug in the route so this will get us access to our specific post okay and then what we all we want to do is we want to just say hey set post to that okay and we'll create a state variable and we'll call it post and set post okay and then we will say use date will be empty brackets just like that so now we'll be able to set our post to whatever that post is okay and then we can actually pass this particular post now i can actually say post pass the post to article main should be able to pass it now use state is not defined that's not a problem just create a use state hook import it rather and then the use state hook should show up no problem i'll move myself down a little bit okay so now that we're setting the post we're passing the post over to our article main now the only other thing that we actually need to get is we need to actually get the author as well so we're going to say author and we're going to say set author and i'll simply say hey we're going to set this state right here okay this author and this author right here we're going to just set it to an empty array for now okay that's going to be the default and let's get our author as well and how will we get our author let's see what our users is currently okay so inside of this use effect hook let's just write a little console log and we'll say users and i just want to see who our users are or what it shows for users right now so let's refresh okay and let's hit inspect so we can keep an eye on users and i'll full screen this so you can see it easier let's go back a page and then let's come back into it all right so for users i can actually see that i have a clever programmer here of user number one with the following data the user count email all of that good stuff and then we can add other users in here as well so i can add user two user three doesn't whatever it's pulling straight from our database okay so we have users and now to actually set the author for this post what we want to do is we want to take a look at the article and for this article we want to see who this article's author is and once we find that author we want to go inside of our users database imagine this is articles like collection right and then this is users collection so we want to do is we're going to go okay who's the author once we find the author's emails more specifically this is the author email once we find that we want to look for that user inside of our users database and then find that particular author and get access to that author and all of their respective data okay so we pull the information from here first and then we cross reference it in there we pull all the information okay so it's almost like an inner join in sql if it's like an inner join on that particular email address and then we match it and we get all the data so let's do that now so i want to basically say hey users dot find where user.id is going to be that email matches that particular post author okay and let's go ahead and console log this so we can actually see some data back let's refresh this let's get out of this page and go back to that page and let's click into it let's see if we get an error property undefined of reading author okay so what's the error here let's just put a few question marks here and then for this console log let's put another emoji like money face or something just so we can see it there we go so now we're getting that money face and we can see that manifest emoji right and we're getting access to that specific object the user and the user's id is clever programmer and then we're getting access to their data as well and their data is email follower account image url name all of that good stuff okay instead of a console log what we want to do instead is we don't want to use console.log here we just want to say set user or set author rather set author so that'll set who the current author is and then we'll pass that author over to our articles component so we'll say author just like that okay so passing it post and we're passing it author and now we have access to all of that data and we don't need these console logs let's also prettify it a little bit and don't need that many empty lines in between okay so our code is looking much cleaner now looks really clean we have access to post and the author so let's go back to article main now let's just console log and see if we're getting back access to post an author and for the emoji this time we'll make a cookie okay let's go back to our home page and let's go back to the article we have access to post but we don't have access to author that's interesting that's interesting so let's see what's happening let's go back so we are setting the post and we are setting the author and then i'm passing the author to article main all right so here's where the bug lies the bug lies in the fact that when we're getting this data author isn't available yet and so then we send the undefined author so let's go back to our slug okay this is where the problem is happening so we're getting the post but then we're also getting the author at the same time and before the post data has been updated you can't get that posts data because it hasn't been updated yet so what we want to do is we want to make post a dependency of this use effect hook so basically this use effect will run once when this app loads so it will set the post but this will be undefined at that point and then once the post gets updated it will notice that the post got updated and then it will run one more time and this time we are able to actually set the author because the post does exist and we can go and get that post data okay and we can have this question mark and that's just optional chaining and what this will stop your app from crashing which is super annoying when that happens all right so let's go ahead let's go back let's click into it and now you can see that we're actually getting our posts and we're getting the data oh sorry we're getting our post and we're getting the author data and we're getting our cookie so we're actually getting back we have access to all the information that we need now now let's go to and make sure you're sending it to your article main component but now let's go to our article main component now we have access to posts and author and so let's go ahead and change this to the author name so i'm going to go ahead and say author dot data dot name and let's put a question mark here okay all right let's go back a page let's go back into that page right here okay it's having trouble so let's see what the problem is so when we get let's take a look at our author data and what that looks like so let's look at our cookie oh our cookie is undefined now interesting let's put a question mark here for author 2 and i'll just write the word haha right there so we can like really see what's going on okay and i'm gonna navigate to our home page okay our rebel fell asleep so let's go ahead and open it go into medium and then we'll do yarn dev okay now our apple is starting up again so i'll start up in just a second okay let's refresh now okay it's up okay and let's click into one of these articles boom and now we're actually getting back the data right it says rafikaze and we're pulling this straight from firebase so i don't need to say haha anymore i can actually just remove that because we're actually getting the right person and then if i look inside of my article has certain pieces of information like for example i have article.data.body so we can replace this entire thing with body so i'm going to go ahead and do that boom let's go all the way over here let's remove all of this cut it and we're going to say post.data and let's just put question marks so our app doesn't crash let's go back let's go back here go back in here and you can see that our body is now showing up correctly and if i go to our articles and we can change that body if we want so let's go to this and it says new body okay and i'll put an emoji like that tada all right let's go back and let's hit this let's go back to this article interesting it not it did not change the body yet let's see what's the holdup let's close this out there we go we're now getting the new body okay so the body has been updated and it's showing up right over here and it's pulling straight from our database if you see that like little s over there we can go ahead and fix that that's not gonna be a problem let's see where we wrote listen and i just added an s there by mistake so let's just remove that and now that s will go away and now it looks like a regular button alright so we're pulling the body and now we need to make sure that we pull our brief as well and we don't need to actually write brief there anymore that was just so we could have a little placeholder so let's go to brief and we're going to replace this with post let's go post dot data dot brief okay that should take care of it here we're gonna have the author name so we're gonna go ahead and go we're gonna go author data dot name okay now we're getting the author name and then for the author type for the title of the article let's go ahead and say post dot data dot article or sorry that title my bad title let's put a question mark here as well and let's go back let's click boom we're pulling the article now from the firebase and to make sure that the art the title is correct correctly pulling from firebase let's just say 2023 instead of 2022. let's go back come back in here still says 2022 let's refresh our app because sometimes it caches it and so it might not pull from the database a bunch of stuff actually stop showing up in our app so let's see what's happening let's refresh again and then if it's still causing problems we can always just go back and come back into our app so let's click it there we go okay so now it's actually pulling the data correctly and it says 2023 and it's pulling the brief as well hakuna matata because that's what we had written in our firebase and the last thing is of course we need to make the dates more readable now to make the dates more readable i'm going to remove the 2022 and i will also remove the june 15th we'll just put a comma here and an empty space and let's go down here and we'll write out our new date so we'll say new date and it'll be the date of the post okay and we'll say posted on will two locale string this in us okay en us and then inside of this locale string okay just put a comma here it will take in two arguments and the second argument that we'll give it i'm not sure why it puts it so far away interesting all right the second argument we're gonna give it is hey for the day make sure that it's numeric not exactly sure why it's doing that oh it's an object so let's go ahead and do this now let's open that bad boy up okay days numeric month will be short and then our year will also be a numeric all right there what's the error that we're having here the error is that we have to close this guy first because it's an object right so we close that object first and then we close the rest of the stuff right behind it okay great so let's prettify this it looks better all right let's go back let's click into it and now you can see that it's showing the date and the year and it's doing it in a really clean way so day numeric month short and year numeric will achieve this trick for you and you can call it on a date date class has a method to locale string you just call that on it and you should be good to go now we need this part by listen over here to pull from essentially show that same date thing so let's go ahead and do that and then we can go all the way to the part where we have june 15th hard coded so right there on line 49 i have june 15th hardcoded i'm just going to paste that and we don't need the year so i'll delete the year we'll format the code so it looks pretty and there we go now we're getting july 1st right over here seven minute read we need to also pull that data because it's the post length so we can just say post dot data dot post length and let's put a question mark here so we can pull that post length and now you can see it's pulling from our firebase it says five minute read and with that said now we can actually be we're essentially done with our article right like we're pulling the data it says july 19 2022 july 19th it's a seven minute read if i were to change any of this if i were to change like even the category shows up correctly right if we go back to the home page you can see it says productivity and here it says coding and if i want to change any of this data and we want to say hey this is really 2023 update this and for this other article instead of hakuna matata being the brief the brief should actually be these are amazing seven tools all right so now we go back to our app we refresh and you can see it says these are amazing seven tools everything is updated automatically five minute read seven minute read and if i click into any of these you will see that it will actually show that boom boom 2023 it updated it and these are seven amazing tools okay let's go to top five programming languages right did we update this top five programming languages let's go we updated the brief yes so let's if we go back and we go to the brief you can see the brief sorry for top five you can see the brief says hey 2023 right there all right with that said we are able to pull all of the information from an article and our article main is this component is now working perfectly the front end of this component is completed and the back end of article main.js is now completed as well so we're actually done with that beautiful sound that just played we're done with our article main component and now let's get to adding the functionality for the user so the user can actually add in their own data so if i go to the completed version of the app i can actually hit sign in so we need to add an auth so that's actually the first thing we need to do so let's work on adding auth and then once the user actually signs in they can actually click and then they can actually write a post so this will actually store all of the information in firebase and then we can actually retrieve the data from there and show the users posts so now let's go ahead work on the authentication functionality all right let's get to work on adding user authentication so if you haven't done this part yet just make sure you go to your firebase and make sure you have authentication enabled so let's go to our authentication make sure that you have it enabled okay and then you make sure you have the google provider enabled okay these are going to be important things that we're going to need let's get back to our code all right so first thing we need to do is go into our context because that's where we're actually going to assign the users that's we're going to create the methods to sign in and handle user auth and then we'll actually use we'll pass this around and use this in other in other files okay so what we need to do here is we need to import a couple of things here so we need to import auth and we need to import provider okay and since we're importing these from firebase we can just basically cut this here and we can paste it in there okay and get rid of this so auth and provider now let's go ahead and write a function that does that so const we're going to say handle handle user auth okay and we'll make this async and what this function will do is it will sign in with popup so let's get that from firebase as well so here where they go should have added it automatically but let's just add it ourselves so we're gonna go ahead and add it manual so we're gonna say imp sign in with pop up okay and we'll save from and we will basically say hey from firebase slash auth all right because we need access to the sign in with popup now this is the thing just so you understand what we're trying to build is this functionality when we let me log out here real quick the function i'm trying to build is watch what happens when i hit sign in when i hit sign in you can see that this popup comes right that's what we're trying to build so then we can pick our email let's go back so we're going to say sign in with popup and this is a function and this function is going to take in your auth and it's going to take in provider so we have google provider right boom there we go we have auth and provider and we can also await this because this is a async function and then once we await this we can actually console.log and just see what we get here for now okay and for this console log let's add in a banana okay so i can see that it's this one right over here and then we'll make sure that this handle user auth function we pass this around as well because we're gonna need access to this in other places okay so this handle user auth function that we created now let's go to our home page which is going to be we can go to our header actually so what we want to do is we want to go to our header component we want to say when somebody clicks this button sign in let me hide myself of course i'm always in the way this is really annoying all right so when somebody clicks that sign in button right here make sure to do the bring the popup up so we can see this so i'm gonna go ahead to my sign in button and then the sign in button right over here when we click it is actually gonna pop that thing up once we click it so let's first destructure and get access to everything so we're gonna in our header we're gonna need access to the contact so i'm gonna say cons get me the user and get me handle user auth no user yet let's just do handle user auth and i'll say use context okay and make sure to import context use context at the top from react and then we'll get medium context now medium context will have to manually import so we'll say import medium oops let's do import medium context from and then we'll say contact slash medium context okay and then if you want to make it look pretty just hit that right there my rupple just died so i'm going to go ahead and go cd medium and then i'll do yarn dev so now my rubble should start again and it's saying it's starting on port 3001 interesting okay that is fine all right so now let's add an on click functionality for this function and then we'll just say handle user auth so basically i just want this function over here to run when i click sign in okay so let's go ahead and give it a try sign in let's make sure our app is running first of all so cd medium then we'll do yarn dev that'll get our app up and running let's make sure we're not getting any weird errors or anything like that let's refresh okay earlier i was getting an error and if you guys ever get this error which was like if you look down here my storage was getting full and so if your storage gets full your app will crash with some weird bizarre looking error so what you want to do in that case is you want to simply delete your node modules and just like reinstall your stuff again so you can just delete your node modules package right and your package.lock and your yarn.lock and then you can just do yarn or npm and it'll install or yarn ad or yarn install or whatever and it'll install everything for you all right so i got this handle user odds function connected to my sign in so let's see if that works now i'm going to hit sign in and boom it just popped up now we're getting an error that says unauthorized domain so my domain here changed so i'm going to copy this and we're going to go back let's go into our sign in method and let's add another domain so let's add this domain right here and we don't need this https part and we don't need that part either okay let's hit add and that should take care of it let's sit back on this app and let's give it another try all right so we're gonna go ahead and go to the home page and then let's give it a try all right let's hit sign in now and boom look at that it opens up and if i do cause cleverprogrammer.com let's see if anything happens so handle user auth i in my where this handle user auth function is defined alright let's go back to our context or medium context inside of our medium context this handle user odds function i had said sign in with popup give it auth and provider and then just put a little soccer ball there too in case that we are indeed printing this out so let's go down here and you can see we're getting all kinds of data about our user right boom we have display name we have email we're getting all of the user data that we actually need from firebase now there's a bunch of extraneous data that we don't really care about like for example i don't care about operation type and provider id and token response i just care about the user so we're gonna go into our medium context and inside of here let's just get access to our user okay so i'm going to go ahead and say we're going to await this right this is going to be our results so let's go const user data is this let's go ahead and put that there and then if we want to get the user specifically i can just simply say user data or let's go here and we'll say const user is userdata.you okay so that should get us just the user and then we can use that user over here okay and if we have you yeah that's fine we should be fine if we're using user here and let's take a look let's click this let's click sign in let's choose kazia cleverprogrammer.com again and let's see what happens so i did this and now i'm just getting information about the user which is perfect which is what exactly what we wanted and we have our access token and we have our display name and we have our email we have email verified so all the information about the user is now stored now we're going to create a function that allows us to store our user inside of our database so i'm going to basically say cons add user to firebase and this will be an async function and it'll take in a user and what this function will do is we're going to get our user so users and we're gonna pass in the user's email whichever user logged in and this dock right here we're going to create a dock out of this we're gonna say set dock actually let's make sure we've imported set dock at the top yes we have okay so we're going to set this dock right here and then what we're going to do is set dock is a function and then they'll take in an object okay and we'll close this function out right here and set dog function will take an email we'll give it the user email and it'll take a name and we'll say user.displayname image url for imageurl we're just going to say user.photo your and follower account we'll just hard code it to be zero for now okay so when we add user to the database their follower account at that point will just be added as zero okay so what handle auth should actually do is it should set the user okay and then it should actually should set the user and then it should what's it called save the user inside of our database i won't call this variable user here because i think this is going to conflict with something so let's get rid of this variable user here and let's go all the way at the top and here i'm going to say const and set user okay so this will be like our current user so let's if we want to be really clear let's just say current set current user okay this is just very clear it's like the logged in user use state and we'll leave the use date just null for now okay and then here we're gonna set our current user to be that to be the user okay so that's okay actually we can bring that back i apologize we're going a little bit back and forth on it but it's fine so for current user we'll pass it the user that just logged in okay so we're going to set the current user and then the next thing we're actually going to do we're going to save the user okay so we're going to save the user so how we're going to save the user is we'll just call this function add user to firebase and we will go here and we'll pass it the user or current user okay we're going to say current user and this will allow us to add this user to the firebase because where this function is going to run and it's just going to say hey the id that i want you to use is the user email and then what i want you to do with this user is give them an email okay give them a name give them an image and give them a follower account and pull all this information out from the current logged in user okay and then the last thing you want to do is we want to pass in the user okay current user so this state right here current user we want to pass it into our context because we want access to our current user pretty much at any given time we need to know who the logged in user is at all times okay now the next thing i want to do is you want to make sure that if i hit sign in and once i do sign in it needs to change from sign in and actually needs to say something else instead so we need to do essentially what we call conditional rendering okay we just ran into a little bit of an error here cannot read property of user so let's see what the error here is user.email so current user is what we want so let's get current user and set that right there okay handle user will set the current user boom so let's try it again let's hit sign in and let's go ahead and choose this email and now we shouldn't have an error anymore yep no error perfect everything worked as expected and let's go to our firebase if everything worked correctly we should have had a new user enter our database so let's go to users and we can see boomkazyacleverprogrammer.com was added okay if i choose another account let's see if that works so let's say sign in and let me choose rafikaze1 gmail.com and let's see if that works let's go back to our database let's refresh and let's see if any new users were added okay no new users were added as of now let's see what's the error that's happening okay we're getting the doc we're getting the data and we're saving that user add user to firebase current user add user to firebase maybe we need to give it just the user data and not the current user so we need to actually just give it the user right here userdata.user so let's try this again let's give this a good old college try so i'm going to hit sign in and we're going to go ahead and choose rafikaze1 at gmail.com let's take a look boom it was created and it was created on the fly so that was nice and if i sign in again with another email let's say caustastic that should get created soon no what was the error do we have an error at least inspect console i don't see any errors let's refresh let's try it one more time and let's see if that works it updated this email with kazia chest test and so it did work but not exactly how we wanted it to work nope let's go back sign in let's sign in again with rafakaze1 at gmail.com oh sorry i'm signing into the wrong app that's the completed one profit continue one is gmail.com is the issue let's go ahead and property of null okay so since we're getting the user let's try using just the user and just use user.email and let's see what happens over here once we use user.email so i'm going to sign in and let's choose this one again rafakasy1 gmail.com we had no errors and email was set up correctly so let's try signing in now with kazia chest tastic again this is my chess youtube account and email there we go we got kazia's chesttastic right there and cause you chesttastic right here beautiful so now our code our app is working okay so we got our handle user method plugged in and now we're adding the user to firebase and so in terms of the firebase parts honestly we're pretty much done because now we have authentication enabled in our app what we just need to do is add a little bit of conditional rendering here so that once we click this it doesn't keep saying sign in so let's go to the front end let's go to our header okay wait that's weird where did it take me header there we go all right and in our header we're going to fix this problem okay so in our real app it actually says and then this changes from get started to get unlimited access so we just need to do conditional rendering on that so how we're gonna do this conditional rendering is we need to check if the user is logged in so let's go we're in our header so check if the user is logged in so if the user is logged in then we need stuff to happen okay so let's say the user is logged in and i'll go down here and we'll close this off okay and this will be our one statement and then we'll also have our or statement okay and so this is our first statement so we need to wrap this in parentheses and then we'll have an or statement okay and that'll also be wrapped up in parentheses okay i'm going to wrap that up in parentheses and for now we'll just add a empty div in here okay so if the user is logged in then all of this stuff should happen so here we're gonna say current user okay and let's deconstruct our current user here so we have access to him or her the user itself so if the user is logged in then i want you to show all of certain type of stuff okay so what i'm going to do here is i'm going to copy this exact thing and i'm going to paste this exact thing right here i'm going to replace it so if the user is signed in then i want to change that button to actually say write and the styling of it i want it to be this okay and i don't need it to have an on click functionality anymore so i needed to actually say and i don't need to have a on click functionality okay and then this should say get unlimited access okay so this is if the user is signed in and if the user isn't signed in then this is what should happen so let's prettify this and let's take a look let's hit sign in we're gonna go ahead and do this all right let's take a look and now boom look at that conditional rendering took place and now it says write and get unlimited access okay so our conditional rendering is working we're getting the data and we even have authentication built into our apps if you got to this part congratulations you're absolutely crushing it now just for the last and final part we're just going to add a modal that allows us to add data back into our firebase and then we're pretty much done all right so now we're going to work on adding a modal like the thing behind me okay it's like a model all right if you click it boom it like closes and then when you click it again boom it opens and that's the model that we're trying to build if i go over to our screen over here and we click this and we go to our actual app if i hit this modal pops up it's not the most beautiful looking model you've probably seen better looking models we went on we don't want to spend a million hours making this app so if you want to style it feel free to style it but the more important thing is how to actually make it so when you click this modal actually pops up and when you click away it goes away and when you click it there's a dark gray like it's dark there's overlay so that's what we're going to build now so going up at the top we're going to need to do a few things we're going to have to do import modal from react modal and you already know what this means because we're seeing a library that we haven't seen before that means most likely we'll need to install it so let's go here let's control c out of this bad boy and we're going to say yarn add react dash modal okay because we're going to need that and so once that finishes installing then we're ready to actually add the modal and do other nicer things with it so let's actually keep going i'm going to say modal set app element this is something you have to do in next okay so it's like a little config thing that you have to do but we're done with that okay that's it just took one line now we need to actually give it some style so we're gonna just say custom styles and for content i'm gonna say hey give me top 50 and for left i want left to be 50 as well i want right to be auto and this will allow us to centralize the modal okay we're going to give it auto we're going to transform it and we're going to say hey translate negative 50 percent negative 50 we will give a background color and the background color will just be white padding we don't need to give it any padding we can leave it as zero and for a border we can say none now one more thing that we actually need to do for this right is we need to give it an overlay so let's go ahead and say overlay and i'm going to give it a background color and we're going to give it a background color of like dark so that dark color you saw but not fully black so this will have a little bit of opacity here as well to it and we're done okay so we're done creating the custom style for the modal and now we just need to actually call this modal and open it up i know it's installing right now so it's install is gonna take some time but that's okay let it keep installing and then all the way at the bottom here we're gonna open this modal okay and then inside of this modal we're gonna have some properties okay so let's go right here and the property is gonna be is open okay and for is open we're going to say if that's true or false so let's just say let's hard code true for now and then on request close we'll just say hey on the router i want you to push okay so i'll show you what this does because we'll need to add a bit of routing to this there we go and then the next thing we're going to need is for styles we're going to say custom styles just like this okay so that's basically what will bring the modal up now now one more trick that we need to do is let's go ahead and run this app first let's go cd medium and let's go yarn dev and let's see if a modal actually comes up or not let's open this up okay hopefully it'll start running soon and we'll restart okay or refresh let's refresh this one as well and let's see what happens let's see if we get an error or if it's actually working all right so for closing for now all i want to do is i'm going to replace the replace the router dot push that we initially had because router.push is not a thing yet i'm just going to say close okay so i'm just gonna say hey just console log it for me please and then we'll go look in the console and see if see if we're attempting close right to close it's showing close so that's really good sign now what i want to do is we want to add a div in here so we can actually see stuff so i can say i am writing in the modal okay and there we go now we're actually seeing the modal right here and if i click into it notice that the close doesn't get detected it's not actually requesting a close but when you click anywhere outside of the modal it actually requests a close and you can see it's requesting the close okay so we're gonna go ahead and make this more dynamic in a second so what we need to do is we need to make this modal toggleable so when i click sign in or when i click right the modal pops up and i can see it right away so what i want to do is add router so we're going to go right here and i'm going to say const router and we're going to say use router okay and we're going to import it from next so it should be imported right there great and then what i want to do with this router is on that button on on it what i want to say is i want to wrap right into a link okay and make sure that we have link imported at the top so link from next link just like that all right and we're going to wrap this right inside of this link right here let's prettify it so it looks better and the href of this is simply going to be question mark add new equals one all right that's it and when this when we click this what i want to do is i want to toggle this to open up so i'm going to say bool we're going to basically say here hey router dot query dot so if add new if this is open and it has a one it will evaluate to true if it's not open and doesn't have a one next to it this will evaluate to false so it's either gonna evaluate to true or false and to enforce that what we're going to do is we're going to call boolean okay so if it gets this query parameter for add new it's going to get the value 1 right here it's going to replace this with 1. if this is 1 it's going to evaluate to true right if it's not one's going to evaluate to false let's check boolean 1 true boolean 0 false and if there's also nothing boolean null or undefined that'll also give false so that's exactly what we're looking for that's really good so it's open is going to depend on whether this is showing up or not okay and yeah that's essentially it so let's take a look now at this so we're going to go ahead and hit sign in and we're going to go ahead and sign in with causey cleverprogrammer.com now that we've signed in i'm going to click right and boom look at that the modal just opened up now when i click away it doesn't close so we need it to actually close so how we're actually going to do that is we're going to just push a path because if you notice when i click and open the modal it actually adds this path add new so if we actually change this path the model is going to close and how i can change the path is i can simply just go to the router and i can push the home path so now if i click away it closes because i changed the path if i change this path here to add new equals one right you'll see that the modal will open up if i change it to add zero the modal will will still open up because it exists add new path actually exists if add new path does not exist at all then the modal will close so my apologies i explained incorrectly earlier it's actually detecting if add new exists so if add new exists then it'll actually evaluate to true and if it doesn't exist then it will just essentially evaluate to false all right so we can actually go ahead and see what it is too so we can say console.log and i can say router.query.org new so we can actually see what that looks like so i can click we can go add new equals to right and if your console logged out that should pop up maybe it doesn't pop up we need it to maybe pop up on the time that it's clicked all right so now we're actually able to open and close the modal sign in and once i sign in i click the modal i click right and it opens and when i click away it closes click it opens click away it closes all right so what we're going to do here is the upload model okay or we'll call it the post modal that model right here we will turn it into a component okay so let's go ahead let's create a new component and we'll add a new file and we will call this file post component so let's go here add file post now post component postmodal.js all right and we'll say post modal okay and we'll just give it return i'm going to give it a div and the div is going to say modal and then here we're going to say export default post modal and if we go back to our file that we just had open which was i believe header inside of header i'm going to replace this here with post modal component make it selfclosing and let's also import it so i'm going to say i'm going to say import post modal from and i can say import postmodal from post modal okay so there we go that should import it now when i click it let's click sign in first because we have to get to the right so sign in now that we're authenticated let's click and you can see that it's actually saying modal all right now we're going to need to work on this component okay so we're going to work on this upload or this postmodel component and make sure it has everything that we need okay so let's go ahead and take care of the styling for this so we're going to say con styles and i'm going to move to the styles a little bit faster on this one okay so for the styling i can add in a wrapper okay and let's go ahead and this div right here we're gonna make this div our wrapper div all right so we can just say div class name and we can say styles.wrap okay and let's keep this open so we can see it as we style it now for this wrapper i'm gonna go ahead and say hey take width of 70 rem alright i want you to so you can see that it just got bigger like way bigger right we'll take height of 50 ram all right so now you can see that this is a much bigger modal all right we're going to say hey become flex we're going to make a flex column and we'll do justify start i item center so vertically aligned and horizontally aligned okay it's not horizontally aligned or vertically aligned but horizontally aligned item center and then we will give a gap of one rim padding of one rim and font will be medium serif and then we'll give it an overflow scroll and hey you can actually scroll on this thing up and down all right cool so we're done with the wrapper part of it okay now inside of this wrapper we're going to have a title okay so we're going to say class name and we're going to do styles.title and we're just going to say add a post okay or create a new post and let's go ahead and style this i'm going to say title title is going to have just some margin from the top we'll make the font bold and we'll make the text size larger there we go create a new post all right and now here under div we'll give it a class name of styles.smallfield and then in the small field we'll have a span tag and this span tag will have a classname of styles.field title and we'll just say title here okay and then it will also have another span tag and this will have a class name of styles.inputcontainer and this span tag will actually have an input inside of it okay we'll just make it a selfclosing and let's give it a few properties so we're going to say class name is styles.input field type is going to be text value is going to be title okay and we'll keep track of all of this stuff too i'll comment it out for now and then we're gonna add an on change as well to this for now let's just actually create the front end part of this okay so we have a title and then i can actually write but this doesn't look that great so let's go ahead and start styling our small field first so let's style this okay so the styling of this small field will be illtick full width will be flex we'll justify in between and we'll have a gap of one rem okay now let's see there we go so now the input is all over here title is over here okay and we'll style it further so this is small field now let's do let's style our field title right so our field title we're going to say flex 1 and then we're just going to say text end and then we're gonna style our input container okay and for our input container we're gonna give it a flex of five we're gonna give it a height and for the border two and then border color is gonna be that gray color that we always added so there we go now we can actually write in here okay and then we need to style our input field so i'm going to say input field and we're going to give it a full width border of 0 outline none and background transparent so now i can write throughout this entire thing and it's not just that small little field okay so our title is now done okay and let's go ahead outside of our title okay so i'm going to get outside of this span here and outside of this div here and we're going to create another small field so div the idea will of the next one is actually going to be pretty similar so it's going to be a small field it's going to have a field title it's going to have an input container a field so what we can actually do is we can just copy from the small field portion and then we can just paste it again and that gives us a new line and then we can just keep pasting it again and again and it'll just keep giving us new ones okay so let's go ahead down here paste it let's go down here and paste it let's go down here paste it let's go down here and paste it and we're gonna need a couple of them so let's hit sign into this is our final app right the completed app so let's click here and let's click right and one two three four five so five of those are what we need okay so we went one too many so let's just remove one we need one two three four five okay so five of those we need so one is going to be title the next one is going to be brief all right so let's just go to the next one it's going to be brief and then the next one is going to be banner image url banner image url and then it's going to be category category and then is going to be estimated read length in minutes okay now if we go to hours pretty much the same thing yeah and the last one we're going to need is going to be like a bigger text box okay so how we can actually do that is pretty much do the same exact thing except we're going to change our input with just a text area so i'm going to go here and paste let's copy this small field again and let's paste it and this we're going to just replace that with text area okay all lower case so now we have text area okay and what we're going to call this is going to be article text so let's go back i'm going to just write article text here boom showing up and the class name for this input field body and then we'll give it rows as well so we'll say rows are going to be 12. all right so now we can boom right up on just stuff here now we need to actually keep track of bunch of state variables okay so let's go all the way to the top in our app and we're going to keep track of all these state variables okay so we're going to need access to also the user as well so we're going to say user and we're going to get this from use context all right and we'll grab it from the medium context now we'll have to import a few of these things of course so we're gonna have to say import use context from react we're gonna have to say import media contact from contact slash medium contacts and yep so this is it's pretty good so that gets us access to the user and now we need to keep track of state so let's go ahead and import that too so we're going to say import use state and let's do use context let's remove this and we're going to say from react okay let's format our code let's move these lines up all right so now we need a bunch of state variables okay so let's keep track of them now i'm going to say const title set title and i'm just going to paste these because it's going to be pretty repetitive what we're gonna be putting here so title brief category post link banner image body so i'm basically all of these guys if i open up the modal all of these guys right here so every single field will need to actually keep track of it in a state variable and we're doing that right here okay now what we need to do is we need to create a function okay and this function we're going to create is going to be const we're going to say add post to firebase okay our database and it's going to be async it's going to take in an event and we're just going to do event.prevent default so when we submit our form we don't want to refresh anything and now we need access to our database okay so i'm going to go ahead and i'm going to say import say collection add doc and server timestamp from firebase firestore because we're going to add a timestamp to the post and then we're going to get access to our database from firebase okay let's purify it all right let's go down and then i'm going to await and i'll say add doc and we're going to get the collection okay articles so this is the collection that we're going to be adding our doc to that's essentially what we're saying and then this add doc function will take in an object okay so what's the doc where are you adding it so we're going to be adding it to our collection and then what exactly are you going to be adding so we're going to be adding our banner image this is going to be banner image we're going to be adding our body and that's going to be body we're going to be adding our category all of these state variables right here we're going to be adding our brief that's going to just be our brief we're going to be adding posted on and this is going to be server timestamp we will be doing our post length this will be post length and we just want to make sure that it's a number and then title is going to be title and author will be user dot email okay so the user will be pulling in from context okay and i believe we call it current user so we'll actually be pulling in currentuser.email okay maybe even a better name would have been logged in user so maybe you should name it that okay so we're done with this at this function right here and now all we need to do is we need to make it so when we actually update these fields we need to make sure that we're actually keep storing this in the state the banner image or whatever okay so let's go ahead and now do that so the value here is going to be title and then on change event is going to be we're going to set title and we're just going to say event.target.value and we're pretty much going to repeat this process for every single field we're just basically going to paste this everywhere so let's go down here let's put that right there and just change this word to brief so i'm going to copy we're going to go brief we're going to copy this and we're just going to say set brief all right so we could see here we have set brief and then we're going to repeat that process just again and again we're just going to keep doing that again and again so now let's do that for this field banner image url and then this one is going to be banner image banner image and then this part is gonna say set banner image okay let's repeat this part ignore my barking dog she's a wild one we're gonna keep going all right so categories what we're looking for so category and we're going to set categories let's go down here and it's going to say category and then we're going to set category okay with a capital c and i believe banner image is going to be with the capital e so you can't just copy paste everything all right value category okay let's go down here estimated estimated time so where's that post length all right let's go all the way down and we're going to do post length and here we're going to say set post length with a capital p and copy this one last time paste it here and then we have article text which i believe we're just calling it body so let's go down all the way let's call it body and we're just going to say set body with the capital b and that should be it and now we just need to basically add a button where when we click it it shows us everything that we need to it actually submits this right so we're going to say button and then the text on this button is just going to say submit and we're going to say hey on click i want you to run my ad to firebase function that's what i want you to do on click what's the error here oh yeah i gotta say equals okay so we're gonna add to firebase we're gonna run that function the button should be submit and then we need to give it a class name and for class name we're going to do accented button okay and if we don't have that we're just going to create that styling for it we're going to say accented button and this styling is going to be similar to the one that we've used a couple of times here so we're just gonna say background black text white padding vertical two padding horizontal four and make it rounded so it's fully rounded okay beautiful there we go so there you have it you got title brief banner image all of this and when i actually hit submit it will post that in our database so if we've done everything perfectly then we should have no problems with this i'm going to copy that image we're going to go here for title i'm going to say biz for brief bazooka the zuka for image i'm going to paste that image category bazooka estimated time length is going to be 10 minutes i love hookahs and we're gonna put a heart here and then hit submit and let's see it's gonna break all right can't read the current user's email so the question is the current user logged in and the second question is did we call current did we call it a current user in our medium context so let's go to our medium context file in context and let's see yes we did call it a current user so we're good there let's go back into our components post modal component should have called it post malone and current user right we're getting access to that so now let's try this let's get out of here and let's make sure we sign in first so let's sign in right now that we've signed in it should have access to that so let's just do all of this again bazooka zuckerman is the image bazooka category 10 minutes i love bazookas heart sign boom paste submit and let's see if we get an error this time okay inspect what is happening now submit oh i submitted it too many times okay let's see there we go i submitted it and you can actually see author i love bazookas bazooka man bazooka here's the image for that post title image there we go i ended up actually posting it three times let's go back and here we go all of those articles that we just posted are now showing up how beautiful is that that is amazing you did it you got yourself here you should be very proud of yourself for actually getting this done and now you can actually click into it and it shows you everything about your bazookas great job if you got this far you've absolutely crushed it this was an absolutely insane project you did so much if we actually go through this app there's so much that you've done you built the medium header you built the banner you built this postcard components you've made it dynamic where when you sign in there's actual authentication there's conditional rendering once i log in it actually changes it to and it says right and then i can actually i'm reading from a database and i'm able to actually write to the database as well and yes you can make this model a lot prettier and make this better and you can keep taking this app further and further but for now this is a medium clone and you should be very proud of yourself for actually getting to this part and building this all with next js so congratulations if you got this far make sure you smash the like button this video goes out to as many people as possible and as always i love your beautiful face this is qazi and i'll see you in the next video