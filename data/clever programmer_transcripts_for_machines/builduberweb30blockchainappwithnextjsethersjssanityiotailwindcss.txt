we got uber for you today but with blockchain so we thought how about you pay a need and you log in with metamask wouldn't that be cool that's what you're gonna get so let's just go right into the app and not waste a lot of time i go into the app i can log in with metamask boom i'm already authenticated you can see at the top right i'm able to get in let's go to our database and our back and restoring our users rides and trips as you can see and every time you log in it actually creates an account for you with your wallet address attached so let's say my name was bobby adams i could change it to whatever i want even clever programmer i can hit publish once my sanity backend updates when i go back to my database we're good to go you can see my name is now says clever at the top you know short for clever programmer so it just shows the first name there i wanna ride i wanna go somewhere don't you so i'm gonna type in santa monica to let's go to sofie stadium now as soon as i'm done typing that look at that in real time santa monica shows up so far stadium shows up and mapbox automatically draws that out and that happens without refreshing thank you nexus on the left hand side you see all the rides are there uberx uberxl black where are all those images and all those drive and those names coming from actually coming from our sanity database where all of this is stored now you're looking at the price that's interesting the price is in eth where's the price coming from price is actually being calculated fancy algorithm that we'll show you in the rest of this video that basically makes a realistic price that you pay but in eth that'd be cool right you order your right pay with eth boom you're good to go so let's go ahead and check it out now so i'll pick black we'll hit confirm our meta mask pops up to authenticate that transaction we go ahead and we hit confirm to accept the gas fee hit confirm again and boom that transaction goes through and now in order to verify you can verify that the transaction is being sent so i look at my meta mask and it says the transaction is pending i can actually view it on the block explorer hence etherscan i can actually go inside of my sanity database and see that i've actually done this drive this is the trip so on the left hand side we're under trips so it was a trip to sofie stadium you can see place they've dropped off in that ride the pickup the trip type what was the trip price what was the trip timestamp and you can even see who the passenger was which in this case was none other very own clever programmer and we go back and boom look at that the transaction is successfully completed so the status now says success beautiful so this is going to be a fun project that's simpler than some of the other ones we've we've built but gonna have a little bit of an easier understanding you have an awesome project that you'll be able to put on your portfolio and it's just gonna be fun so i hope you're excited and if you're ready to crush it make sure to go ahead and smash that like button turn it white turn it blue i don't know i'll show you a picture of a potato today that's kind of what i'm feeling here's here's a potato hopefully you liked it so it was a gift for you smashing the like button oh by the way your instructor today is going to be lance last video actually let me see did we get over a thousand likes because his job depended on whether it was gonna get over a thousand likes or not and if he gets under a thousand likes lance is fired that's what i've told you guys before oh just barely 1.4k lance is going to be your instructor the worldclass instructors runs our frontend mastery coding bootcamp rushes it at that people love them hopefully you'll love them if this video gets a thousand like or more lance gets to keep his job so do it for lance smash that like button i love your beautiful face let's go and let's start coding this up right away what is up everybody welcome back to another video lance here again and i'll be walking you guys through the uber clone today so let's go ahead and get started so the first thing i want you guys to do is create a folder and let's call it uber clone blockchain just like this from there let's go into that folder and we'll be creating our next j app within here so to do that go into the folder and write npx create next app at latest space dot the dot here after the latest is important because what it will do is take all the starter next js files and put it into our uber clone blockchain folder awesome once that's done if you open up vs code now and open up the folder you should see all these files all the starter nexus files just like this as you can see okay after that i'm gonna go i'm gonna go ahead and set up for sell so to set up results it's very simple all i have to do is go into the command line and type in burst cell it's going to ask you to set up and deploy go ahead and say y for yes and for scope put your account for us i'll do clever programmer and we don't have an existing project yet so go ahead and say and for no it'll then ask you what's your project's name give it the same name as the name of the folder another important part here is in which directory is your code located it's going to be at the root of the folder and to showcase that just put dot forward slash like this awesome last thing here it's going to ask you want to override the settings we can go ahead and say end for no cool so if you hop over to vercell and log in and take a look at your projects here you should see the new project result project that we created so for me it's right here and it says just now because i just made it so if it looks just like mine you're good to go so i'm gonna let this build and i'll cut right back to when it's done awesome so now that's done i'm gonna go ahead and type in versailles dev right the reason why i'm saying versailles dev instead of yarn dev is because with first cell dev i'm gonna be using the local versailles builder to run my code because i won't need to configure any env files because reset will actually take care of it another reason to use versaille dev over yarn dev is because it's going to be easier to catch bugs that yarn dev doesn't if you didn't know the team that made vircelle is the same team that made an xjs so brazil supports a lot of the features that next has already awesome so again paracel dev in the terminal and it should say the server started at local host 3000 so go ahead and copy that link put it into your browser and you should see our starter next js app awesome next let's go ahead and set up tailwind if you didn't know tailwind is a collection of css utility classes that we use to quickly build consistent goodlooking css so to set up tailwind with an xjs there's a couple of different steps we have so if you're ever lost at any point go ahead and hop over to tailwindcss.com slash docs slash guides slash next js all right in that webpage you'll go and find a bunch of steps to set it up so if you follow me what i'm gonna do is say yarn add dash capital d tailwind css post css auto prefixer and that's it we're gonna install all three of these packages with yarn the next thing we're gonna have to do is actually initialize tailwind css so after that's done go ahead and write npx tailwind css init p what's this going to do is initialize tailwind by setting up a tailwind.config.js if you take a look in your vs code you should see that same config.js file right go ahead and click it and we need to configure our template paths so what you need to do is just copy what i have here right in the content we're gonna put the value of dot forward slash pages and dot four slash components just like i have here cool next we need to set up the next we need to set up the tailwind directives to our css to do that you're going to copy all the things i have here and hop over to your styles folder clear out all the starter code and paste these three adds right here so add tailwind components tailwind utilities cool once everything is done installing we can go ahead and set up our app again by saying brazil dev and get started with tailwind go ahead and hop over to index.js as you can see i have hello next.js here and you can see it on the browser but to get started with tailwind let's give this a class name on line six and we can actually say bg dash red600 right all we did was write a class name but if you look at our browser there's the background red at this color if you're familiar with tail one is similar in the sense that all you have to do is type in the class name what kind of css class you want so there's predefined utility classes that you can write such as this to set up and style your css fast and easy so let's move on to the next thing i'm going to go ahead and clear out the class name and we should be good to go all right if you saw earlier i was able to use tailwind to define a class name with what css i want one thing to note is as our project scales the class name is going to get really verbose or insanely long so one way to alleviate that is that we can actually make a style object at the top of our index here and in the style object we can give keys or give it an actual class name with all the css we want as the value so over here i'm going to write con style equals and object right wrapper as the key and as the value we can write something like this here we can find the height and the width like so and also put flexbox there you go nice and simple okay so now that we define that object come down to line six and let's make that div that we need so this div will have the class name the style object dot wrapper so if we put that there i'll actually grab that value of the wrapper and it'll have all the styling that we need so that means our wrapper will have the height and width 100 and flexbox properties and the flex property of column all right another thing i'm gonna do is set up a couple of dibs for our whole app all right we won't have the css for this yet but i'm gonna go ahead and set it up so so in the style wrapper this is where our nav bar will go in next i want to make a div called style.main this is where our map for uber will go and then a sibling to that main div is going to be style dot ride request container okay within that div we're gonna make another div called style dot ride request right here is where we're going to be able to type in a location and also confirm so like i said earlier we don't have the css for this just yet as you can see but i like to set it up so i know what to do later like to set it up now so i have an idea of how my project is going to look later so if you notice in line 8 this is where i'm going to have a nav bar so i'm going to go start working on that now so one of the first things you have to do is actually create that component so in your components folder type in navbar.js right and i'm going to set it up by doing rafce and if you want to have these code snippets like i do go ahead and type in your extensions es7 react redux code snippets and you'll be able to type in rafc just like i am so instantly make function based components like me okay cool so we made our navbar.js go ahead and like so we need to write import navbar from dot forward slash slash components slash navbar and bam you can see it on our app let's go so hop back over to your navbar.js and let's get started on creating our navbar and if you notice we don't need to import react onto this component because ever since react 16 it's kind of like implicit all right so your navbar component should look just like this and we should be good to go and get started all right so i'm going to give this a class name of style.wrapper and of course we don't have a style object yet so i'm just going to set it up and we're going to say wrapper all right i'm going to give it this height and this width and this background color if you're confused at all of what the hell i'm writing there's a tailwind css cheat sheet that you can use to refer to understand what exactly am i writing to translate it to css but yeah so i'm going to set the background to black the text white set up flexbox to justify it around and say items center right and the pixel length at 60 and say fixed z20 awesome cool so if you save you should see this nice little black bar which represents our nav bar and at any point i move too fast go ahead and pause the video so you can catch up cool so once that's wrapper is done let's go ahead and set up the rest of our dibs before i get styling so inside wrapper let's make a div and call it style dot left menu following that inside left menu let's make a div called style.logo and for the logo we'll just say uber awesome right after the logo div let's make three divs like so and let's put all the navbar elements which is gonna be ride drive and more all right and three all three of these div should have the same class name so i'll select all three and i'll say class name curly bracket style dot menu item cool and don't worry if you see all these items like a column we're gonna go ahead and style that later okay you come over to if you make a space between line 13 and 14 like so let's add another div and call this one style dot right menu okay and in that menu this is where we're gonna write another menu item called help like so right and this after help the next menu item is gonna be where the user's name goes so i'll just put my name lance after that make another div call it style dot user image container and this is where your beautiful profile picture is all right so i'm gonna look up a user avatar and this one looks good so let me use this save that image and let me make a folder for these images i'll call it temp put my beautiful picture of me inside this folder and i'll call it avatar.jpg.jpg all right and to use this image i'll have to do say import image from next slash image right this is how we use images with next but now let's actually import the actual image itself so we're gonna say import avatar from the file path which is gonna be just like this okay so to insert the image let's type that with the source avatar and there we go beautiful we're done guys just getting up we're done but now let's actually just finish this up so let's go on to the next part let's make another div on line 23 and what i'm going to do is add a static wallet address had a static number like so which is going to represent our static wallet dress for now but eventually it's going to take up my wallet address when i log in with meta mask okay so now that all the divs are set up we can go ahead and start putting styling to them so let's get rid of this ugly column right by saying left menu flex gap three look at that it's a column now let's make the logo bigger by putting this and i'm gonna start moving a little bit quicker here guys because if i spent time explaining every single css this video is gonna be like six eight hours long which would be pretty cool for one of the videos but for now if you need to feel free to pause the video to see the css that i'm putting in so i'm going to put this for the logo and for the menu items i want the text size to be a little different than the logo make sure it's white font's medium let's add a nice cursive point to it and of course center it like so okay let's do the same for the right menu and also center those items okay our user image container needs a little bit of styling so let's say mr.2 let me give our image a class name of user image so we can actually start installing the image itself give it this css right here okay hit save and that should look a lot better go ahead and also put in the login button right and i don't have the login button set up yet but i'm going to add the css right now so login button should look like this and the login text should have this css as well so then next i'm going to be setting up a variable called current account and this is going to hold the user that logs in with meta mask because later on the video i'll be authenticating the user through metamask all right so i'll be logging in real quick and i'm going to copy my wallet address and if i paste that into the string here that's going to represent the current account that's logged in right and to make it so what we can do now is replace the random set of numbers i have here and actually put i'm just going to format a little bit by using slice like so there you go all right so now we have a beautiful navbar with all the menu item and my current static wallet address we're going to make this more dynamic later so keep that in mind over in lan 38 i'm going to set up some conditional rendering what this line of code is saying is basically if there is a current account take that current account and format it and take that slice so you can format it like so if there is no current account that means the user is not logged in so we can set up conditional rendering that dave is going to say please log in awesome so as you can see if i remove the current account it says to log in let's give it some styling by giving it the classnamestyle.log so that it look a lot nicer awesome next in your terminal i'm going to go ahead and add some react icons you want to use this icons for our project so we're going to need to install react icon so hop over to your terminal and type in yarn add react dash icons okay all right now that react icons is installed let's actually use it by going over to the top here and writing import bs person from react icons slash bs all right now that we import it we can actually just place it into our code so let's just write that in line 46 like so bs person self closing and look at that there's that little default avatar image right next to the login just like this okay so then i'm going to bring back the current account and this is what it should look like if i am logged in awesome so that's the navbar let's go ahead and move on cool so once the navbar is done one thing i like to do is stay organized is to break down my code into small pieces and basically make a todo list of what i want to do right so i'm going to do that using notion and notion is awesome because it lets me visualize my todo list kind of like a kanban board if you ever have if you guys ever use that before so if you look i have this nice three columns that says to do in progress and done right and every single time i finish one of these to do i'm gonna update the status of it so you're gonna see me hopping back and forth between notion every time i finish to do right i recommend you guys use notion especially if you work in a team where you can divide up your task and everybody on the team has an idea what needs to be done so if you look in my done column actually you can see that i already have up code and connect for cell done and if you look in the in progress we have build navbar well we just finished build navbar so i'm gonna happily move this to done and there we go beautiful so the next things i want to work on is to build the location selector and to add the static card list and that seems to be good for now so i'm gonna hop over to vs code and start working on those things so now that's done i'm gonna work on adding the map component to my project so to start off head into your components folder and let's create the map.js component i'm going to write mapjs i'll put my code snippet here and there you go it's all set up and now let's just insert that component here that i marked out so in line 12 i'm going to insert my map component and of course we also have to import it just like this awesome there you go so now that's imported let's go ahead and set this up one thing to note is that we're going to be using map box for our map component so to start using mapbox we have to go back into the terminal and say yarn add mapbox geo as that's downloading go ahead and hop over to mapbox.com and now i'm going to be walking you guys through on how to use mapbox so the first step is to actually sign up and make an account and i already have an account so i'm just go ahead and log in so if you go into the account page of mapbox you should see this screen here from here take a note on what you see there's a default public token and there's a button here that says create a token so i'm just going to copy this and save it what you want to do now is go over to versel remember how i said versailles actually sets up the env files for you so if you hop over to your project on versailles there should be a section called environment variables okay so in environment variables paste the copied code into the value section so it should look like this and name it map box that underscore access underscore token cool after that it's all set up added the environment variable and then once that's done reset your terminal so that their env file is set up cool while that's going on i'm going to use mapbox you need to import mapbox gl from mapbox geo so i'm going to set up our style object here and i'm going to use this wrapper and style it like so and within the map component itself i'm going to give this div after the return the class name of style.wrapper now i'm going to set up my use effect here what i want this use effect to do basically create the map box when this component renders so let's import use effect from react and the side effect that we want to perform let me just clean this code up here for the use effect inside this use effect i'm going to write const map equals new mapbox gl.map all right i'm creating a new instance of my map and within here i'm going to set up a couple properties set up a couple properties so for the style i'm going to paste the map box i created on my account and for the center this is where you can put the coordinates where you want to center your map on so i'm going to put this as my coordinates and you can also set up the zoom how close how zoomed in do you want that center to be or the map itself so i'm going to say three and oh looks looks like it says i need the i need a container and that must be a string or an element so i think i know what this issue is i'm gonna make a container key and give it the same as this id here just like this i'm going to say map and then now the next now the error says that i need the api access token so let's go ahead and bring that over so i'm going to write mapbox gl.access token equals our access token so to get the access token process.emb.mapbox token like how we have it set up let me see if this works looks like i'm still getting the error let me just kind of log it to see what we get so it's getting undefined so it's not recognizing it just yet oh i know why i need to put dot next underscore public before the map box access token and i gotta fix that up in my first cell project as well so keep it the same name right next public that's important so that we can get the access token and one more thing i forgot to do is click on create access token and insert your deployed link down below here in this url so that you can restrict the access of this token to this specific url that we have so that other people can't use your token that's the whole reason why we put everything in emv files because it's best practice not to share your api keys your tokens or anything like that so by putting it here you ensure that no one else can use it so i already have mine set up so it should be good to go and i'm still seeing an error because i have to start my terminal good so i'm going to save for cell dev and this should work let's go it's beautiful it looks beautiful we just need to make that container and increase the size a little bit so i'm gonna go work on that now so what i'm gonna do is hop back over to my index.js and i have those divs set up in my map but since my index is the parent of that it's still going to inherit that style because if you look in line 15 my map component is still there all the component is it just hosts your ui element so i can actually define the styles still here so i'm going to write out the main that i have on line 13 the styling for that just like this then the map container which is going to be living inside the map component and the ride request container and of course the ride request which will have the styling like this so if i hit save there we go now we're talking like this looks a lot better and with that there's the map component so now that i set up the map component let's go remember to go back to our notion and add that to the done nice so the next thing i want to do let's work on building the location selector if you guys are familiar at all with the uber app there should be this white box where it can where it prompts you where do you want to be picked up from and then where do you want to go so i'm going to be working on this section i'm going to be working on the location selector form so hopping back to the vs code if you look in your index you can see in line 21 i marked out where i want that location selector to go right it's wrapped in this nice ride request which is wrapped in ride request container so following the pattern of what i'm what i've done before i'm going to make a location selector component and set it up using my code snippet and once that's done i'm going to set up my use date because i'm going to be using this later coming down to line 4 i'm going to add the class name style.wrapper and then at the top on line 3 i'm going to just make the style object with the wrapper and this is the css that i want for it so wrapper awesome so i'm just going to tap the style object with the wrapper and the css value that i want for it and within the style wrapper div i'm going to call this the search header style dot search header after that let's set up our use state and i'm going to say const in focus set in focus and set initialize our use state with the key of from right the idea here i'm gonna set up the state for from and then it's gonna switch to two right which will then in turn switch the focus between the two headers the two inputs once that's done let's go ahead and import location selector to our index just like so so i imported it and then i placed it in line 22. and in my location selector i'm going to set up some conditional rendering that if my in focus state is equal to from i want the text where can we pick you up to appear if my in focus isn't from or let's say two it should show where to or where are we going and that's gonna switch depending on which input i have selected which will make sense in a bit and then now in our index i'm also just gonna add this property so that we can actually put the container and see it by bringing the z index up so now we should see this white container with the text where can we pick you up because our use date is set to from awesome so in my style object i'm going to set up search header and i'm going to set up input boxes so input boxes is going to be the class that i took hold the two input boxes right one's going to be the location where i'm getting picked up from and the other input box is going to be where am i going to so the next line in my style object is the actual input box and here's the css for that and of course if you remember the uber app if you click on the box there's gonna be like this black border around it that indicates that's the box that is focused all right and then i'm gonna style the actual input itself as well as setting up this property called vertical line referencing the app again there's just going to be this little circle that has a line going which points to another svg right and all that is in line with the text boxes cool and then if i change the use state to 2 you should see where to pop up and depending on which one is focused that use state should be changing as right so i have an extra focus input box here so i'm just going to delete that what i want to do now is to set up the rest of the div so i'm going to make another div here in line 21 and this will be where my input boxes did will go and if you remember inside this input box there should be like this tiny circle that has a vertical line that goes down which connects it to another svg so in line 22 i'm going to put another div inside the input boxes right and if you look at the class name in line 23 i'm gonna put a template literal here all right because what i want to do is if the focus is from i want to focus and add that black around the input box to indicate that this is the box that i'm typing in or focused on so what i'm saying in line 24 is if the in focus state is from the focus input box will be the style d and if not this wouldn't have that focus input box styling and then next on line 27 let me put the svg container inside so if i want to get that small circle i'm just going to copy this right here all right feel free to pause the video so you can also get this svg and i'm going to paste it inside my svg container and if i save there it is there is my little circle which is inside the focused input box makes sense awesome so obviously there's two input boxes that we need here so i'm going to set up another input so inside this input box there has to be an actual input so i'm going to place that in here i'm going to call this style.input with the placeholder enter pickup location from there in line 16 i'm going to set up another state called pickup and set pickup and i'm initialize it to blank next state that i need to keep track of is the drop off location i want to save that in a state as well so i'm going to write cons drop off set drop off and set use state to an empty string cool so within that input in line 39 i also want to add the value and inside here i'm gonna set it equal to pickup and on change we're gonna update our pickup state with whatever value i typed in so if i were to type in santa monica the state pickup will have santa monica as the string because of this on change keeping track of it and the next thing i'm going to set up is the on focus because if this is clicked or if this is focused if this is the box that is focused we need to make sure that the state is set to from because what that's going to do is put in that border around this box like i mentioned before and like i said i want that nice vertical line so if i paste it right here it looks like that and this should connect us to the next input box so all to do is pretty much copy and paste the rest of that over the only difference though is in line 50 the in focus should be set equal to two and it's focused right then that box should be focused all right next i'm just going to write out the svg container in line 50. and inside this container it should have a different one this one's going to be a tiny square right so this square is going to be what connects that small circle svg with the vertical line to the svg square all right so it looks like this it's looking good guys so let's add our input box with the placeholder and of course the rest where the value is going to equal our dropoff state and the on change to update our dropoff to whatever i typed in and of course the on focus so that if it's focused right we switch the state so look at this if i click where can we pick you up where to where let's go this is looking super clean right i'm so excited awesome so i'm feeling really good about that it is looking beautiful guys so what i'm gonna do now is let's take a look at my inputs being passed so i'm gonna contour log our pickup and drop off state variables and i'm going to make sure it's easy to see so if i were to type in these input boxes you should see that console up so i want to type in union city all right you can see it in my console down below it's right there and for the dropoff i'll say empire state building all right so now we can eventually take those states and start passing it through for our map box i'm getting excited i hope you guys are excited too if you're still watching put a like in the description below now that the location selector is done let's let's go hop over to notion and mark the build location selector as done and let's go ahead and add build confirm to in progress so in this section i'm going to be working on that card when you once you put in your information what should pop up is the list of car options like uber x uber excel over black anything of that sort so to set that up let's go ahead and make a confirm component and if you remember the layout i have in my index it's going to go here in line 24. so i'm going to import that confirm component in my index and then let's hop back over to confirm and let's set it up i'm going to quickly set up my style object at the top and let's make our first div the first step i'm going to make is the wrapper so i'm going to say class name equals style dot wrapper from there i want to make the container that's going to hold all types of rides so i'm going to make a div and call it style selector container in the next line i want to make another div for the container of the button so i'm going to say style confirm button like so and inside that div i'm going to say confirm uberx from now and of course since this is a button let's add an on click to that when i click we should run the store trip details function so i'm going to set that function up to the top at line 4 and for now let's make it a async function which will make sense in a bit coming back to the style object at the top i'm going to add the selector container css i'm going to style the selector container and then let's go ahead and style the confirm button container and so that our button can show up let's style the confirm button itself so there we go there's the confirm button there's a nice outline of the confirm button so now the confirm button's done i'm happy to put this in the done section wow we're moving fast guys so the next thing is to add the static car list so i have it marked out here in line 13 where it says ride selector let's go ahead and make the component for that i'm going to call this ride selector js and let's import that same component in our confirm js all right there we go and now we can see it in our browser to your right and the idea with the right selector is it should hold the whole car list like i was saying before it should hold uber x excel black and so forth so i'm going to set up our usual wrapper at the top set up our style object again and then within this div i'll be making another div and i'm gonna call this one style dot title in this title i'm gonna put this text here choose a ride or swipe up for more from there we should make a div for the car list in line seven and i'm gonna hard code the list of cars in an object in line three and that way i'm gonna do it is i'm gonna make an array of objects one cool thing about notion is that i can actually store all the assets in here so if you go hop back over to my notion here are all the assets of the different cars that we can select from the list so what i'm gonna do is add these cards each of these cards into my assets folder in my next app so i want to create an assets folder and put all of these into my next app and don't forget the eth logo and the uber logo awesome so now our assets folder with all the rides is here all right and once that's done let's import all the assets we just set up so import uberx mover black mover black suv uber select uber excel and going back to my array of objects here each object is supposed to represent each car on this list so in this first object i'm going to apply all the properties of it so the name over x the image is going to be the uberx image and depending on what car option you select it's going to have a different price multiplier so this is the price multiplier for the uber x and let me go set up the rest of the objects now awesome so there you go so now all the objects are set up let's go ahead and map through the car list and real quickly i'm just going to change the key to this to service yep i'm just going to update line 39 to class name and within my car list this is where i'm going to map through the object and for every car i want to create the necessary jsx to display it so i'm going to set up my map function here and for every car i'm going to set up this div called style.car which will contain the image of the corresponding icon of the current car in the iteration and that image will have the class name of car image with this height and width and if i press save now there it is you can actually see all the assets there on the on my browser let's go so let's now add the card details so that's going to go along with each image so i'm going to make a div in line 51 called style.car details and within this div let's make another div called style.service where we can insert the car service that's describing so if i put car.service in curly brackets here in line 52 we should see the uber black uber x and all the others on my app we're gonna do the same thing with the time so i'm gonna make a diff called style that time they're all gonna save five minutes away for now and for the price remember we're making this we're gonna be paying these cars with ethereum so in the div called style.price i'm gonna be setting up a variable at the top in line 38 with the divide that by 10 to the power of five and then multiply that with our car price multiplier set that to five decimals and there we have our price in ethereum so again let's also add a nice ethereum logo in there with the image component from next and let's not forget to import that eth logo that i also have in my asset so there it is this is looking sick imagine paying ethereum with uber just to clean this up a bit let's add more to our style object so in here i'm going to make the title and add the css i'm going to add my flexbox properties to car list with overflow scroll and in the car div itself set up the item center and a nice border set up the selected car css and of course the car image and the car details and lastly is the service make that the font medium time the price container and the price and with that all the divs are styled and it's looking amazing and it all has the prices calculated with each based on the car multiplier this is a lot going into this app so be sure to like the video if you made it this far and i'll happily add static cart list to done all right we are making great progress guys so let's add set up sanity to our in progress now that's done and while we're here let's also make that cardless dynamic and let's also add the get location coordinates to our todo list and if you look we're actually almost done isn't that exciting so let's keep on going and here we go sanity is going to be our database and we're going to be setting it up by creating a studio folder in our terminal inside of our next app and just to mention if you go to sanity.io cleverprogrammer you can get a free boosted plan from us all you have to do is follow these instructions right here to get started you're going to have to npm install the sanity client and when you're initializing sanity type in this code sanity coupon clever programmer right it's gonna include a lot more to the free plan that sanity already gives to you so go ahead and make good use of it awesome take that command and paste it into my terminal and there you go for the project name let's just keep it the same uber clone blockchain all right and then it's going to ask use the default dataset configuration i'm going to say yes all right and we want a clean project with no schema cool so you should see a studio folder inside your project hop over to the schema folder and go into schema.js here you're going to find out this is where we're going to basically concat all of the schema files that we create so let's go ahead and clean it up you can remove all these comments and awesome the next thing we have to do is let's think about what kind of schema files that we should be creating so the first one i'm going to create in my schema folder is the user schema.js in that file i'm going to create an object called user schema and it's going to have these keys and values this is us letting sandy know what kinds of documents that we want to keep track of so for us we want a user schema because this is supposed to represent any of the users that log in so when you think about what are important properties of a user that would include these over here that i'm writing out which would be their name their wallet addressed because eventually i want to set this up with meta mask as well as a profile image so that they can put a nice picture and what we're going to do each time we create a schema file we need to import that schema like so import user schema from dot forward slash user schema and then take that and place it in line eight inside this dot concat we're gonna be putting all the schema files we create inside here so let's create another one let's call it ride schema this file is supposed to represent the types of ride services we have remember we set up the static car list like uberx uber black uber black suv this is where we're actually going to pull from sanity the types of rides so the properties that we need to keep track of is going to be ordered by id and the only reason i'm going to use that is so that i can give it a custom order when i call it from sanity alright we also need to give a title and each type is going to have its own price multiplier as you guys saw so we're going to also store that in this document and lastly we can't forget about the icon that goes with it to signify what ride type it is cool so let's go back to our schema.js and add that file into the dot concat awesome next i want to include another file here called trip schema okay and the fields that are going to be important for this document is going to be the right where are they getting dropped off to the pickup where they're getting picked up from and the type of ride that they selected not only that we also need to figure out and store what the price was a ride timestamp would be cool as well as who the passenger is so with the passengers we need to keep a reference of the user that took this ride right it's going to be different if a different user took the ride okay cool hopping back into schema i'm going to import that file as well into line 10. cool another thing that we should probably do is go into your terminal hop into the studio folder and type in sanity start once you do that we can hop over to localhost 3333 desk which will automatically go for us the cool thing about sanity is we can actually update our database from here with this really nice ui right so if i click on users rides chips we have nothing yet but if i were to go to chips and click this pencil here you can see all the fields that i set up in that schema file alright so if i wanted to actually add a document i could do it from here on localhost which is awesome okay so hopping back into the terminal i'm going to actually deploy our project to sanity by saying sanity deploy and for the host name i'll just say uber blockchain let's go successfully deployed which means i can actually hop over to sanity their website with that link anyone else who's a collaborator in that project will also be able to see this all right now the studio is deployed to sanity itself but i'm just going to be editing on localhost for now cool so after you guys do all of that our sanity database is now set up cool so now that our database is set up we only have these more these two items to do left let's go ahead and make the car list more dynamic what we're going to do to do that is we're going to start making using grok to query our database for the rides right so going into our studio i'm actually going to populate our rides with the assets that we have set up i'm going to take all the pngs and basically create a document to represent a ride type i want to take the time to create a document for each ride type now so i'm going to give this an order by d1 the title uberx and this is the price multiplier along with the icon that goes with it so i'm going to be doing the same thing for the rest of the ride types once i finished up creating those documents i'm going to go ahead and go inside the api folder of our app and we can go ahead and delete the hello.js instead we're going to create a folder called db as well as another folder called map and inside the db folder i'm going to make a getridetypes.js in this file this is where i'm going to be querying for those ride types okay and in order to query the ride types i'm going to go back into sanity and log in click on my project and we're gonna need a couple things from here one of the first things is to see this project id we need to copy that and add that to our env variables and we could do that using versailles okay after you copy the project id go back to sanity and go underneath the api tab we're also going to need the token right and i'm just going to give it the name client generate and copy that token and go ahead and add that as an environment variable as well to brazil there we go we have sani token underscore project underscore id awesome so i'm also going to create a lib folder and within that i'm going to write sanity.js file what i want to do here is essentially set up my sanity client so to do that i actually have to go back into my terminal and in my main project folder path i'm going to add do yarn add hat sanity slash client make sure you download this inside you're out of the studio folder and inside your project folder in the path then you can add this command okay so we could do in the sanity.js file just say import sanity client from at sanity client like so and let's create our client variable and set it equal to sanity client parentheses put in these curly brackets and create this object so the project id is going to be the same as we set it up but we can actually call the process that env here so i'm going to say process that env dot sanity project id cool and then for data set i'll do production api version v1 and for the token we can also call in our env and say process dot env dot sanity token okay and then for ucdn i'm going to say false there you go we set up the sanity client so now that's set up let's import that same client in our getridetypes.js like so and here we can actually set up what we're querying for the cool thing if you go back to the localhost 3333 and type in slash vision what we can do is actually test out what we're creating we can actually make a request to query through here so what i'm going to do is try to figure out how to get the rides that i want and once you do that you can get the list of rides add these curly brackets here and then we can kind of filter our query or make it more specific right so the only things i really want from this is the service the icon url and the order by id and a cool thing we could do is actually just order each of these by its id right so if i run this i can actually see that this is what i get back which is exactly what i wanted so this is a really awesome tool by sanity which we can actually just copy this query and paste it into this variable that i have set up inside my getridetypes.js cool so now that we know what we're querying for i'm going to create a ride types function and let's make this asynchronous okay so within that function setup will try catch and if at any point there's in our catch we're going to send that error message okay and in our try block i want to make sure that we save sanity response in a variable and set it so that we await the fetch request for our query and if that's successful i want to send the status message that it was a success awesome okay cool now that our query is set up we can go ahead and actually remove the static card list that we set up earlier so if you go over to ride selector go over to the car list variable that we set up you can just highlight all this and delete it because now we can actually just pull the car list straight from sanity so i'm going to do instead of having the car list is i'm going to set up this use effect that will make that call to the database okay so i'm going to error car list is not defined i'm gonna go ahead and set up a use effect now and here it says carlos is not defined so what i'll do next is actually just create a use effect here in line 27 and what i want to do is set up an asynchronous function it's going to fetch the api route that we set up to get the ride types okay and i'm going to store that in a variable called data and i want to make sure we turn that response into json okay what i want to do next is actually we're going to need to use the use state hook from react let's set that up at the top here in line 22 const car list and set car list we can initialize the use state to an empty array and from there i want to do set car list in line 30 and set it to data dot data right because i want to go get my variable and then the data within that variable like so which data.data should be what i queried for which is the car list okay and it seems like we're still getting errors okay what i'll do now is what i think will fix it is go do export default get ride types because i can't forget to export this function okay ah i see the issue now it says res is not defined and that's probably because i forgot to put res as a parameter as well so i'm gonna do rec comma res and it should work just fine hey there's our query let's go okay so i can take out this console log and i think i saw another error yes so it says invalid source prop for the images because cdn sandy is not configured configured under images i see okay so we need to do is just go ahead into your next.config.js and if you have this issue guys set up an images key which has the value of an object and in that object you need to put in domains that we can allow this to use which is the cdn.sanity.io so now we should be allowed to use that and if i hit save for cell dev again to run my project once more fingers crossed hey there it is let's go awesome after that the car list is dynamic let's go we are able to pull the ride types straight from sanity our own database and this is looking amazing so let's go ahead and put that to do item to done let's work on the next thing all right guys so the only thing left in our in progress section is to get the location coordinates what does that mean well i want to be able to type in the location i want to be picked up from and where i want to be dropped off and i should see that reflected on my map box right so to get that started let's go ahead and create another file and let's call this file get location coordinates okay within that file i'm going to create a function let's create a function called get location coordinates it's going to be asynchronous and of course we'd have to export this function in that function in line 2 let's set up our map box url by making that a variable and setting it equal to the url that we're going to use we're going to make this url dynamic so what we're going to do is this we don't have this yet but i'm going to set up i want to call on mapbox places api url we don't have an environment variable for that yet but that's the url where we can actually make this api call right now to set up the endpoint let's do a forward slash let's do rec.body. right put that in a template literal like so and let's do dot json question mark access token and that's going to equal help.enb mapbox access token right so like i said we should probably set up that variable so hop on back to versus your versailles project and in the name i'm going to give it the same name that i have the mapbox places api url awesome as the value put it put the url inside the value add and there we go awesome so now this is actually going to work all right what this url is going to do it's essentially going to use their api make a request for the location that we pass in for mapbox awesome so i hope that makes sense what i want to do next is set up this try catch block in line four and let's set up our api call in the try block by saying kant's response is going to equal and let's fetch that response and don't forget to set up an away here the next thing you want to wait for is let's set up a variable called const data and set that equal to dot response.json so essentially let's turn our response to json is that successful the response we get back is 200 so let's send a message that says it was success and set property to this and of course if anything goes wrong at all let's set up our catch which will send us an error message essentially beautiful okay so the next thing i'm going to do is i'm going to create a folder and i'm going to call this context we're going to do now is set up our context using react contacts if you didn't know react context is used for state management essentially it will take our state and make it global so that we can access it anywhere in our app so in order to do that we have to set up that context so from here let's create another file and i'm going to call it uber context awesome so if we're going to use reacts contacts api let's import create context from react in our ubercontext.js and then in line three i want to say export const over context equals create context let's see let's actually use that function we have so i'm essentially creating a context for uber okay line five i'm gonna do export cons uber provider equals right notice how it's going to take in children equals and i'm going to return here i'm going to say i'm going to return the ubercontext.provider for now we're going to set this value equal to empty but whatever i pass into this value is going to be what i'm going to have access to globally so keep that in mind so in between the ubercontext.provider put in the children that we pass in and then we're going to need some other react hooks here so i'm going to import use state and use effect and at the top of our uber provider i'm going to set up a couple of state variables bam there we go so here are my state variables i'm going to need to keep track of the pickup state the dropoff state pick up coordinates and the dropoff coordinates awesome so i'm going to set up this use effect next and here i'm going to set up this async and then he in the use effect i'm going to set up the async function like so an anonymous async function in that i'm going to do an await promise.all so i'm actually going to create a promise so on line 5 i'm going to say create location coordinate promise which is going to take in the location name and the location type so let's create that promise by returning the new instance of the promise object in javascript this is what we use to create a promise okay and then of course inside the argument of the promise object i'm gonna i'm gonna put in an asynchronous function which is gonna have resolve or reject and within that anonymous function i'm gonna make an await and it's gonna essentially fetch essentially gonna fetch for the location coordinates and i'm gonna set that equal to the response the next thing i'm gonna do is set up next i'll write a couple headers here the method will be post in the headers i'm gonna put content type it's gonna equal this and the body make sure to json.stringify and have this inside of the scope all right and then line 17 i'm going to write const data equals await response.json awesome so in line 19 i'm just going to write an if statement that says if our message was a success it's going to lead to a switch statement that's going to say if the location type is pickup set the pickup coordinates to that data and then break another scenario would be if the case is if the location type is drop off then we're going to update our dropoff coordinate state with the data okay and of course that would mean it's a result else if the data.message was not a success then the promise was rejected okay then what i want to do next is in the go back to the use effect and put if pick up and drop off exist right make sure all the promises are resolved we're going to wait for all the promises and the promises that i'm going to be waiting for is to be resolved is going to be the pickup promise and the drop off promise essentially okay and in the dependency module 956 let's put in the pick up and drop off okay and let me highlight all of these lines this actually should be within the scope of the uber provider here in line 12 12. cool amazing guys so we set up the contacts as well as getting the location coordinates let's move on okay cool if i hit save though i want to notice an error in my console you're going to see a message that says something along the lines warning each child in a list should have a unique key prop if you ever see that that means whenever you're mapping through something it should also have a unique key prop that you pass down right so we can actually solve this issue by either giving it a direct key right for each one or in your map function it takes in a second argument which we can name anything i call it index mostly because depending on how many items they're on there are that index will go from zero one to an increment onwards so what we could do is actually use that parameter and in our key and set that equal to the index all right now if i save this boom no more warning we're good to go and with that our context is set up as well cool so we can go ahead and move get location coordinates to done on our notion board and we can also just put create context to done as well and that means we're actually more than halfway done to this project so congratulations if you made it this far let's keep on crushing it what i'm gonna do now is move a couple to do's to the in progress section again which will be place pins on the map right we need to put pins on where i want to go and where i want to be picked up from as well as we need to be able to log in through metamask and lastly save trip to sandy so those are the three things i'm going to be tackling next once that's updated let's get back to the code the next feature i want to work on is the functionality where i'm going to be able to enter my pickup location and where i'm going and there should be two pins that showcase where that is so essentially add markers using mapbox so to get that done let's hop over to our map.js okay and let's import all the contacts that we need so to do that we're going to say import use context from react and we're also going to import our uber contacts from our contacts folder just like that cool and if i save this we're gonna see this error that's because i just forgot that we need to go to our underscoreapp.js file and do you see this main component here line six we need to wrap that component with our uber provider so import uberprovider from context and let's wrap this in there so i'm going to do is type in uberprovider in between you can put that component back in there cool so now it's done we now can do some state management within our app so if you remember if you go back to your ubercontext.js everything inside this value equals here is all the variables that i want to be able to access globally that makes sense to you i'm going to go add all of those variables now as you can see this is the list pickup set pickup the coordinates all of that stuff all those wonderful things so awesome but now to actually use those variables let's set up a destructured object so let's destructure our used context we can say const curly brackets pick up coordinates drop off coordinates equals our use context and then you can pass an uber context within that cool so now i have access to those variables i can implement it into my map so what i'm going to do is add a function here called add to map right so with this function i'm going to add those markers like i mentioned so within that function it's going to take two parameters map and coordinates and within that function itself let's make a variable marker one and let's assign the new mapbox marker with these coordinates so what i mean by that is we're going to write mapbox gl.marker parentheses as you can see and just do dot set longitude and latitude to the coordinates that i'm going to pass in and then just put in this add to map to just stick that pin based on those coordinates that we pass in cool all right so now that function is done hop over to line 22 and i'm just going to have a bunch of if statements here that if we have pickup coordinates call the add to map function and then line 26 if we have dropoff coordinates if that exists add that to the map function okay and then another if statement that i want to add is if pickup coordinates and drop off coordinates exist you want to add this little function here just say map that fit bounce and then pass in those coordinates okay and if you remember how we have the pickup and drop off state set up we're just manually changing it when i click we want to involve our contacts here so we can take that state out now pick up and drop off state we can take that pickup and drop off state now and let's incorporate our context api here so i'm going to say import use context and import uber context again but this time in my location selector.js so after you remove the pickup and drop off states we don't need that so let's involve our context so i'm just going to paste in our use context here and destructure it and get the variables that i need so i'm going to need pickup setup drop off and set drop off and you can set that equal to use context and just pass in uber contacts and of course if you want to actually do this we need to import use context hook from react and uber contacts from our contacts folder okay let's type in santa monica and let's type in i don't know sophie stadium got error add to map is not a function okay let me just take a look saying add to map is not a function oh i know it's because let's put all those if statements inside this use effect there you go so try this again santa monica and go to sophie stadium open look at that we got an internal server area i got internal server error because cannot read property of zero oh i see one thing that you have to make sure when you're doing the mapbox url that your env files are the same name so what i'm going to do here is actually update the end of this url to now say process that env next public that's how i have it saved all right so i'm going to type in santa monica and let's type in sophie stadium as well sophie stadium and bam let's go those are the coordinates of those places awesome so that error looks like i had to update my url with the correct env name which was next public access token so once that's all good and done we should be able to see the coordinates of what i typed in okay so i'm just going to log the pickup coordinates and drop off coordinates inside my map.js just to see if i'm getting the same thing here so again santa monica and sophie stadium okay let me just check inspect element and go over to my console let's see let's see it all right and the other array let's go so we're actually getting coordinates back which is a really good sign there you go so now anytime pickup coordinates and drop off coordinates exist then i'm going to be able to fit the bounds here so i'm going to put that in the dependency module of my use effect in line 37 and now let's see it in action awesome look at that there's the two pins so if you don't see anything right here there you go now it's zoomed in and now you can see the two pins okay let me try to see if i can get the padding up more so that we can see a nice line let's just set the pattern to 400 and i think it's fine awesome so let's put place pins on map and our notion to done in this section i'm going to be showing you guys how to authenticate a user using metamask all right so to do that let's hop over into our contacts reason being is because we want to be able to check if the user is logged in anywhere in my app head over to ubercontext.js and i'm going to paste this code in here so i'm going to make a variable called let metamask in line 13 we're going to have if statement checking if the window is undefined metamask is going to equal window ethereum and the important part here is line 17. we're going to have a function called check if wallet is connected and it's going to be asynchronous of course and in line 18 if the window.ethereum does not exist or is not there we just want to return that basically means if you are not logged in don't do anything okay from there i want to set up this try catch block and in the catch if there is any sort of error we're going to console.log here in the try block though i want to make sure i set up a variable called address array just like so and i'm going to set this equal to to an await window.ethereum.request essentially make a request for an account and in line 24 if the address array that length is greater than zero or there is a valid wallet address this is where we want to set the current account so let's actually make that and keep track of it using state so in line 10 i'm going to say kant's current account and set current account equals use date and you're going to place that in line 26 set current account to the address array bracket 0. okay and underneath i'm going to have this function here request to create a user on sanity and pass in the address array bracket 0 as well and obviously we don't have that function yet but what i want to do with that function make a request to our database to create a user document if it doesn't already exist so let's actually set up that function let's make a request by setting up this function so in line 80 i'm going to say const request to create user insanity equals asynchronous and the parameter is going to be the address that i pass in and of course if we're not logged in or if there's no window.ethereum just return okay set up another try catch block and in the catch block do another usual error console log the error awesome and i want to stop there for now because what i need to do is actually create a file so under my api folder under db let's make a create user.js this is where we're going to make a request to our backend to create the user so let's import the client at the very top here so import curly bracket client from our lib sanity folder and then here in the variable i want to put const create user insanity this is actually the function of us creating that user document which we set up with our schema okay so it's going to equal async rec response and of course we have to export it at the bottom and within that function let's set up the try catch okay and then the catch we're just going to send a status of error with the error message and in the try block like i said this is where we create the user document into our database so in the trial block let's write constant user.equals the object right so within that object think about the properties that this user document should have so the type should be users of course the id is actually going to be the wallet address so we can say rec.body.userwallet address the name will be rec.body.name and the wall address would actually be the user wallet address as well okay after we set up that object in line 12 let's set up the await client.create if not exist user doc the cool thing about sanity is that document doesn't exist sanity will create it already it'll already check for us if it exists or not with this method and of course pass in the user doc and that's just something really cool that sandy does and of course if that is successful send a status of 200 message saying it was success awesome so now that we were able to create user insanity function we can hop back over to our uber contacts and in line 83 in that try block we can make the fetch request there so doom do await fetch and the api route that we just set up to create a user and if you think about it what kind of request is this are we trying to get data or we're trying to post data we're trying to post data so for the method i'll say post because it's going to post a new user to our db and if everything i just said was just new information to you leave a comment down below letting me know if you want me to go fully in depth on apis and how to colony awesome let's get back to the video like i said before we're going to create this is going to be a post so in the headers i'm going to put this as my headers and in the body just say json and pass in the values we want to give to that user document which is going to be user wallet address is going to have the value of the address that i pass in the name for now i'll put blank but one thing we can actually do is hop into your terminal and let's do yarn fake at faker dash js slash faker if you're unfamiliar with faker.js it's basically a javascript library that can generate fake data for you so in our case i want to use faker.js to get a fake name so it will randomly generate a fake name for me and in order to use that i'm going to have to go import at the top of uber context and in order to use faker.js you have to import faker from at faker js faker and now we can use it coming back down to line 91 so instead of an empty string we can actually just say faker.name.findname this will randomly generate a fake name when i create the user next on line 19 of the ubercontext.js let's set up a use effect that will check if the wallet is connected like i said we want to be constantly checking if the wallet is connected otherwise you shouldn't be able to use these features and the trips that you set up should be associated with who's ever locked in okay so in the use effect i'll put check if wallet is and now let's actually make a function to connect the wallet so line 39 i want to say cons connect wallet equals async and the anonymous function again you're going to see that it's the same kind of deal and the inside this function in the if statement i'm going to say if there's no window die ethereum just return which i usually try catch block console logging in error and in the try block we're going to set up the variable again for the address array and a weight window.ethereum.request because we want to request a metamask account and if there is a valid account right with this if statement if addressarray.length is greater than zero then we're going to set the current account to the address array as well as make a request to create the user on sanity if there is one and again pass the address array and don't forget once we create those functions i also want to pass that down here to my provider so that i have access to them anywhere in my app so i'm going to one line 30 and let's pass in connect wallet and current account okay now i'm going to my navbar.js because if you remember way back in the beginning of this video i set up a static variable holding the current account over here in line 17. we don't need that anymore because we actually created all the functionality for us to log in already so let's remove the static data and at the top i'm going to import all of my contacts and let's bring in those variables that i created so i'm going to import use context from react and import uber context from my contacts folder and inside the function component of navbar in line 20 i will set up the contacts and destructure it by saying khan's current account and comma connect wallet equals use context and pass in uber context okay cool and i hit save and you can notice that it still looks the same but that's because for me i'm already logged in right so i'm just going to copy my wallet address for now because i'm actually logged in so that's why it still looks the same let's go ahead and check on my sanity and click on users there we go it generated a new user right so when i'm logged in it create a user apparently my name is going to be kim for today's build cool again go into your sanity and your localhost 3333 you can actually click on the user document that was created for me kim so if i click on it you can see the fields are now updated with the information i passed in it generated that fake name for name and it passed in my wallet address which is correct that's it and of course what we set up is working when there is a current account it's going to format that long wallet address using the current account that's left so that looks really nice on my front end but that's what it looks like if i logged in currently we don't have any feature to actually log us in so coming down to 145 let's add on click and use that global state that i passed in which is to on click i want to be able to pass in the connect wallet function and that makes sense if i click the login button i should be allowed to connect to my wallet just like that another thing that we need to do is when i log in i should actually pull the user that's connected from my database all right so if i log in my name is kim right from sanity i should able be able to pull kim's information if i already have a user okay so in back into my ubercontext.js 119 i'm going to make a function to request to get current user info all this is always going to be asynchronous pass in the wallet address because i want to use the wallet address and query that with my database to see what user has the wallet address that i pass in and that's what i want to set to the current user within that function set up the try catch again and we're going to catch any errors by console logging it and in the try block i'm going to say cons response equals and await for the fetch call of getting the user info and pass in the wallet address so like i said i'm going to get the user info with the wallet address that i pass in so again if it already exists we're going to get that information so up at the top in line 12 let's set up a state for the current user and if we get a response let's set the current user to data dot data and if you notice we actually don't have that api route set up so in my db folder let's create the get user info.js and you can guess what we're going to do next we're going to import the client again so importing the client in line three creating the asynchronous function for get user info pass in rec and res so just like before when we get the ride types i'm going to set up a variable called query and pass in how i'm going to query for the user info so i'm just going to paste it take a look at what i typed in all this means is i'm going to ask for a user with the wall address of the wild address that i passed in and what i want from that user is the name the while address again and the profile picture if there is one so i'm going to start all of that in a sanity response variable down here at line 12 and set it equal to an await of the client fetching the query that i passed and if that's successful send the status up to and if it's not send the status of 500. okay so i just created that in my context all right so in line 24 i'm going to add another user effect here to check that if there is no current account let's just return but if there is let's make a request to get that current user's info so i'm gonna set that up in a use effect so that it can run when it loads and the dependency module in line 27 pass in current account of course because you only want the use effect when the current account state is updated or changed okay and let's pass in current user into our provider and in our navbar.js let's add current user and destructure it from our contacts in line 20. okay and if you remember in line 31 this is where i passed in my name but let's pass in the current user let's make it more dynamic so on line 31 let me add the curly brackets and paste currentuser.name.split so i don't need to get every single part of that name so i'm going to use split here in line 33 and i'm getting cannot read property of name of undefined so let me just console our current user real quick and take a look at that is a big part programming let me go take a look cannot read property name undefined and i'm also getting a 500 internal server error okay next thing i want to try is going into get user info i think the reason is because the sanity response i want to get back the first user so inline 18 in my get user info where it says the data key and the response that send i need to do sanity response bracket zero let's see if that works save hey there it is there's kim awesome now that's done we actually completed two things with our notion we completed create a new user on login as well as we're able to add metamask login so mark those as done let's go bring over calculate price now and we should be good to go awesome so now let's work on saving trip to sanity alright if you remember we create a schema that's going to save all the trips that we take so in order to save trip to save our trip to sanity let's go to the confirm js and if you look in line 22 we have a function set up called store trip details at the moment it doesn't do anything if you look so let's go ahead and get that done so like before we're going to need to make a trip document and pass in all the information we want to pass into story trip details are two things the pickup location and the drop off location okay so coming back to the function in line 11 in the parameters put pick up and drop off make it asynchronous put in a try catch block again console lock the area and in the try block we're going to make an await for a fetch call at this api route for save trips and again don't have that set up just yet and we'll do it much later but think about this with this api call are you making a get request or a post request if i'm saving a trip to my database it should be post so for method i'll put post and for the headers i'll put this content type application slash json cool and of course for the body of that i want to make sure that i pass up the key pickup location as the pickup that i passed in in the dropoff location to be the dropoff state that i pass it okay and if you remember there's a reference to the user that took that trip if i put this in my input santa monica to sophie stadium that shouldn't go to kazi's account that should go to the users that's logged in our case it's kim cool so make sure that's set up for the body key now let's import all the contacts that we want to use for this app and let's destructure all the variables from our used contacts in line 13. so i want to get the const current account pick up and drop off from use contacts don't forget to pass in uber context and we should be good to go so now now we're able to actually pass those in those values because they are exist in this component okay so heading over to our db folder create that file now and call it save trips.js at the top of that file import the client and create the function save trips make it asynchronous with the parameters of rec and res the user will try catch block again and if you notice a lot of the same things you do when you're setting up routes with the apis to sanity with the cloud functions for sanity it's going to be a lot of the same thing so in the catch i want to send a message of 500 server error we need to be able to create the trip document that we're going to post to sanity so i'm going to set up constrip doc equals object what kind of document is this so you're going to say underscore type is the trips the id is going to be the wallet address plus the date we're going to use the date object to put in the date of when the trip happened in the pickup we just get the pickup location and the dropoff location that's passed in next i'm going to actually put in the ride timestamp and format the date so that it looks nice when i post it the next key that i want to put to this trip document is the passenger key which actually has the value of an object again and it's going to have underscore key as the first key which will have a little string here that says the passenger with the wall address as well as the date which i will format once again next is here you want to put reference as the key and what we're referencing is the user that's logged in so i'll say rec.body.userwallet address and what type the type of this is going to be reference essentially what that means is whatever chip that i take it should reference the user that took okay another thing that i want to pass in is the price of that trip as well as the selected ride to b the value of whatever the selected ride was and if you notice actually don't have the price and selected ride property set up so from my use contacts let's add price and selected ride on line 13. and my uber contacts.js let's create those two states for selected ride and price and pass it down into value so when i'm actually destructing them it can have access to it cool set up now okay now time to update our save trips document so go to savechips.js you can also add the price and ride category so for the price i'm just going to do up with parts float and pass in the price and for right category i'm just going to write record.body.selectedride.service and then going into the ride selector in this use effect let's actually set the selected right to be data.data bracket zero okay and then coming down to line 43 of the red selector i'm just gonna paste this in i'm gonna paste this in this is gonna change the class name of that div with this ternary operator saying that if there is a selected ride that service equals the car that service then the style is going to be that selected car if not it's just going to be the regular style.car all right so if i save this selected right is not defined cannot read properties of undefined reading service all right so i think what i'm going to do now is go to the context or uber for the set selected i'm going to pass in an empty array and of course can't forget to pass set selected ride into my value of the provider and don't forget in that values pass in set price as well and of course in line 22 i don't want to put this in a new state i want to set this up i'm going to set up a use context here okay and don't forget to import use contacts and import our uber context so that we can pass it in and in ride selector i'm going to try putting using state to put my car list and set car list here instead i'll put use state and import it up instead of passing it through context and i hit save any errors let's go it works so what i could do now once this loads you can see that if i click on any of these cars it will have the styling of selected car and that's what that ternary operator was for before nice okay and then in my save trips can't forget to add in line 22 in my save chips.js client. let's use the method to create the document if it doesn't exist and then send that status message i click on uber black i hit confirm let's see what happens let's go we got a trip it's untitled the trip prices there's the there is the trip type the time stamp and of course we didn't enter a drop off or pick up so that's not going to show up that should be blank so now i'm going to try to enter a pickup and drop off location so again i'll use the same example santa monica sophie stadium there you go see the pins santa monica and sophie stadium there are the pins click on black suv confirm let's see if that's there awesome so we're able to save the trip to sanity there might be little bugs here and there but we'll work on that cool so it looks like we're able to save trips now so let's go ahead and mark that as done in our notion and looks like next is let's calculate the price if you look at our notion we only have two more things left all i have left is to calculate the price and then actually charge the user with that pricing because at this point we're actually able if i reset my sanity here we're actually able to see the save the trips and the price and the reference to the user which is amazing right and when i talk about calculating the price if you look at the list of rides what you see here in ethereum is actually just the price multiplier itself what uber needs to do is calculate the base price first so what i mean by brace price is this the base price is essentially the length of the trip in seconds right and we can figure out with the map box api adjusted the traffic at a given time obviously what we'll do is we'll call the api that will get us the length of the trip in seconds based on the current traffic then we're going to divide that by 10 to the power of 5 just to get a realistic price of the calculation when we send it back in ethereum this is not exactly what uber uses or the formula but what we get back is something along the lines of a realistic price that we get so essentially that's the formula so let's get coding so let's dive right in to the pricing okay so what i'm going to do is within my map folder we actually need to get the duration or the distance in seconds of the trip like i mentioned before so in your map folder create a get duration.js set up an asynchronous function like this and we're going to make another api call to calculate that so make a variable called mapbox url set it equal to this string so right we want to make use of our env variables here so process.env map box directions api url we're gonna get the pickup location the pickup coordinates the drop off coordinates pass in the token and after that we make a try catch response and then let's set that equal to an await where we make fetch request to the mapbox url that i set up once that's resolved set that variable to data and we're going to make another await turning that response to json if that's successful send the stack of success and of course in our cache it will catch any errors sending a status of 500 meaning internal server error so let's set up some more contacts going back to ubercontext.js in line 15. i'm going to set up my use and create a state variable called base price and set base price just like that okay within here in line 32 we need to set up another use effect in a dependency module i'll put up if the pickup and coordinates drop off coordinates change that's the only time i want this used effect to run and if there is no pickup coordinates or there's no drop off coordinates just return otherwise i'm going to set up this asynchronous function and make an await fetch call to get the duration right and from there i want to post the pickup coordinates and the drop off coordinates and send that over to my get ride types api that i set up alright so i can take out going back to write selector i can take out that base price that i had set up i'll actually just pull that from my contacts which means don't forget to set it up in the value to add all those variables that we need so add to my uber context provider in the value and in the confirm.js file let's go into our confirm.js and in line 47 where it says confirm here and selected write that service we also want or to write or uberx because we want either order to show up if one doesn't exist the other one will pop up and so now what we could do is coming down to line 47 is add some curly brackets here and make sure that all of those variables exist so we can say pick up coordinates and drop off coordinates and ride selector hitting save now it says uberx is not defined because it thinks it's a variable just put that into a string and that should be fine so i'm just going to type in santa monica sophie stadium let's see if it's going to calculate the price let it load for a second awesome okay cool so once the map box settled we can look over by the price and it actually says na right so at some point it's not actually sending back a number so let's go check this out at ride selector let's console.log what we're getting back as the base price okay let me just check out this error data only absolute urls are supported so what that tells me is to go into get duration and let's just console log the mapbox url just in case okay i'm just going to reset my terminal by running the cell by clearing it and then running versus dev again i'm going to type in the type in santa monica and sophie stadium see what comes up i'm going to hit enter right so our pins are working and if you look there is the price i'll hit confirm let's take a look hey there we go that's the trip price let's go so not only we are able to calculate the price now we're still also able to save that as our trip with the new price this is looking amazing so far okay with that we can move calculate pricing to done and there we go we have one thing left if you guys made it to this video and you're at this part in the code you are crushing it so with the last step we need to do is just charge this user and let's deploy the whole thing to versailles are you guys so excited i'm excited let's keep on coding we need to charge this user with the price that we calculated meaning we're going to send a request to charge them to mask so let's hop over to our uber context and let's add that metamask variable in there that i set up previously okay going into confirm.js let's add that metamask variable in our uber context in line 13 so that we can call it in our js and go over to your store trip details within the trap the try block in line 40. let's make an await here and do metamask.request we can send that transaction over alright so the method is eth underscore send transaction with the params being from and the value of that being current account and then for two we can send it to process.enb next public uber address so you guys should know what that means at this point essentially we're using the next public uber address as the wallet where you're going to send money to so think of this as us sending money to uber if you guys want to send me a theory go for it this is my wallet address okay but yes i can switch between these two wallets so to prove the payment and of course we don't have that environment variable set up so let's set it up in versailles so going into resell and under the environment variables tab with the name make sure it's the same we learned from our mistakes let's type in next public user address paste in the wallet address that you want to send money to what you consider as uber and let's add that in so now we're actually able to use that so essentially what i did is i am going to send money based on the price that is calculated and we're going to send it over to uber quote unquote so of course whenever you make a new environment variable to versailles let's reset our terminal and type in vercell dev again to run the project and of course we have to make this gas property here and type this in and for the value paste this in and pass in price okay so just to clear my terminal let's also make sure to yarn and ethers because we're going to need that in order to let this run that's why you see this error can't resolve ethers let's import so if we once we do yarn at ethers go ahead and import ethers in your confirm.js rerun your terminal again and i'm just going to refresh my page and there you go no more ethers area very nice so i'm going to just try this out again i want to type in santa monica let's actually go to marina del rey there you go and that's the pricing looks good so let's confirm that ride let's hop over so what should happen when we confirm the ride is that we should be able to send our transaction to that uber account and there we go look at that we're gonna get a notification saying that this account is going to the price that i calculated to the uber wallet that i set up and if you look at the details you can actually view this on ether scan to verify that this was an actual transaction that you guys made on the rinkeby testnet and since it's actually sending it to that test net it's going to take a couple minutes to update the blockchain and voila success awesome all right so we were able to send money to the uber account amazing so let's go we finished everything in our notion and the last thing we need to do is make sure we deploy to versailles so again i'm going to write recell here to upload what we have to my versailles project are you guys ready to deploy let's do it okay so once you do that you should see that it's building we can watch that over here in the overview and we see the most beautiful line at the bottom there done and if you click on this link you should see the actual code live in this deployable link so you can send this to your friends your mom this is amazing so be sure to add this to your portfolio and if you thought this tutorial was amazing feel free to drop a like down below and if you haven't already watch our previous tutorial on twitter i'll see you guys in the next video peace