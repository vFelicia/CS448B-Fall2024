What's up guys, this is Qazi from cleverprogrammer.com. You are here to watch the Python tutorial for beginners. This is the ultimate tutorial, what I've done is I've taken every single video, put it together so you have everything in one place to watch. We're gonna cover all the way from how do you actually install and download Python in under two minutes to what variables and strings and conditionals and while loops and for loops, things like that. All the way to building lots of projects. So we're gonna be building games together and we're gonna be building projects together. Okay so for example, you're gonna learn how to build a circle made out of square. So we're gonna be doing lots of visual development as well. You are gonna be doing lots of exercises that are gonna be given to you with test cases built in and you also gonna have access to projects in here. Okay, and we're gonna be building rock, paper scissors, as one of our projects in this as well. I'm gonna shut up. I hope you enjoyed this. Please do me a favor. We wanna make sure that this goes out to a lot of people. So the one very small thing you can do to really help us if you just hit the like button, and subscribe to the channel if you wanna watch more of this type of content outside of that. Another thing I wanted to tell you was if you want it all in one place, I do have it on my website. The link should be below cleverprogrammer.com/learnpython. And you can make your account there and that way you have all of this all in one place. So you can have access to it, you can come back to it to view it and watch it. With that out of the way, I'm gonna to shut up and move out. Enjoy the video, enjoy the Python tutorial for beginners. I'm excited for you and your journey. This is Qazi, I'm out. (gentle music) Today we're gonna learn how to install Python in less than five minutes. So let's get started. Okay so the first thing you have to do is open up New Tab in Chrome or Internet Explorer, Mozilla Firefox, go to your web browser, type in Python 3 download. Simple as that. Click the first thing that your eye can see or can't see, that's how fast you should be clicking. And instead of Python 2.7, let's go to the latest version and install Python 3.51. You get this download bar at the bottom here. Click continue, continue, continue, agree right. you can read those licenses but just do it and simply hit install. So I'm gonna hit install and type in my parseword. Let's wait for the install. All right, so our download was successful. Move to trash. All right. After you're done installing it, I want you to do something simple and look for an app called Idle. You should now have it. And effectively here you should be able to run your Python code. Let's try five plus five. Boom is giving us something. 10 times 20, yes. X is equal to five, X times five, 25, it's working. Print hello. It's all working, amazing. We're up and running you guys in just, I don't know, less than five minutes. Let us simply type in our terminal. If you're sitting on Mac, you would need to type in term like this, hit Enter. And you should come to this screen. And if you type in Python, it should not be running your Python as well. And you should be able to just type your code in here. So this is how you install Python. And I will see you in the next video. (gentle music) Okay guys, back to where we left off. So we just did some simple stuff in Python, right, we can print stuff by doing this, and then it prints it out to the screen. That's cool. Now what we wanna do is we wanna take it to a little bit of a next level. I want you to come up here and select New File. Okay, this brings up this file here. Let's go back to our other screen. And let us simply put this to the right side. Let's put this to the left side. And what I wanna do is I want to write a few things here like print hello. Print monkeys eat bananas all the time. And then I want to say, and notice how I'm putting these quotes. We will learn a little bit more about that later. And then I can say print five times 25, okay. And I am gonna run this, so I'm gonna save this first. You can save it anywhere you would like. Let's for our purposes, let's save it in our desktop, or let's do one better. And let's go here. And let's call this practice exercises. And we will save it in here printing. And I'm gonna go to run and hit Python shell. And you're going to see what happens. So I'm gonna say run and actually run module. Okay, so I'm gonna say run module, that just means run this whole thing that we just wrote. So let's run it. Let's check out what happens. Boom, on the left hand side, it ran our entire file, okay. On the left hand side, everything you type in, gives you the result right away. So you can write four times eight, 20 times six. But on the right hand side notice when I press enter nothing happens. So you're kind of like writing a story here. That's how I like to think of it. You're writing kind of a novel. And this is almost you having a conversation with Python. You're like, hey Python, what's up? Or in pythons language, eight times eight. And Python is like 64. Here, Python is not listening to you, you write out your entire, whatever you wanna write, and then you send it over to Python. And then Python responds to all of that. Almost like you're sending an email to Python and Python is sitting there. And once it sees your email, it'll type stuff back to you. Okay, let's run it again just to check what happens. And I will run and you can see that it runs all of that at the same time. So what I want to do is, I wanna give you guys a little problem. And the problem is how would you print hello world. Okay, and I wanna be able to test this for you guys. So what I've done is I've set up something kind of cool. I want you to go on, open a new tab, I want you to go to clever programmer.com. And once you're here, I want you to click on learn Python for beginners, notice that it's free. So simply go to that. And here I've put together a little exercise for you guys, okay. So once you start this course, you feel free to watch all of this on YouTube, it's available for free. If you want you can also go to my website. And here it'll give you a little progress bar and everything and you can comment and I can respond to you as well. And here, this is where I'll also put all of the exercises. So if you guys want to follow along this course and do the exercises, this is where you can come and find them. So let's click exercise one and start. Now notice you have a quiz here. It says how do you print out hello world? So I'm not going to answer that for you here. Although I'm sure you can figure out and we want it to look exactly like this in Python 3. Just a little bit about Python 3 versus Python 2 is if you do this in Python 3, you're gonna get an error. So let's just try it out on the left hand side, let's say print 10. You can see that we get an error. And if I do print 10, I don't get an error. So in Python 3, this is the correct way of doing it. In Python 2, you can do it just like this and actually will not give you an error. Okay just something for you to know. So here I want you to select the correct answer. And another thing I made for you guys is if you click this link, what I've put together is so simple, you'll have to like sign up, it will be really short. And once you're done doing that, just click on exercise one. And on the right hand side, you see that I want you to print out hello world. Alright so now that you're here, let's type in something like print 25 times 63. And let's run it. It gives me 1575, great, let's hit submit, let's see what happens. Oh whoops, says output mismatch, and you fail to correct, you fail to answer it correctly. Okay so you can click What's wrong? And it'll kind of tell you what the answer is. Or you can hit submit anyway. And then it might also tell you what the answer is, okay. But I want you to try to figure it out. And I'm sure you probably already have. So I'm not gonna tell you that the answer is, but once you write the correct answer, it'll give you a little green thumbs up and say, Hey good job you got it, okay. So now, I want you to try it and I'll see you in the next video. (gentle music) Okay in this video, I wanna talk about the turtle. So what is the turtle you might be asking? Well, we're gonna find out. Before we get into some of the more boring or the technical stuff, which is actually really fun. But before we get into that, I want you to be able to visualize the code. I want you to be able to see that what we type and what we do, you can do something fun with it right away. Okay and this is not just something for maybe kids, this is something that's gonna be very valuable, I don't care how old you are even if you're 200 years old. Because visualization is a key tool. So if I show you that now, I think is gonna benefit you in the long run. And also sometimes when you're confused about things, you can try this thing out that I'm gonna about to show you right now, to maybe make those examples and concepts more concrete that you might be a little hazy about. Without further ado, let's get started. So what we're gonna do is start doing something with the turtle. So I want you to do import turtle as your first line, okay. Import this secret command here. What it means is that some programmers who stayed up really late at night and wrote code and ate ramen noodle and that's all they did. They spent hundreds and thousands of hours writing all this code for you. You just get to steal it by typing in import. So basically think of it like you have amazing powers at the tip of your fingers by using this command import and you get all those powers, okay. Let's do my turtle is equal to turtle.turtle, okay? And what we're gonna do is we're gonna say my turtle. I don't know, let's do something simple like move, or sorry, forward 100. Alright so let's see what just happened. All right, what is going on there? Right, let's close that, let's start it again. So I'm gonna write this line again. And we're gonna kind of do like a slow motion. Okay we're just gonna play it out again. So I said my turtle right after this first line that I did, right, my turtle showed up here okay. Just to make it even clearer for you guys, I'm gonna start this thing again. And I'm just gonna write the first line that I wrote. So you can see my turtle showed up, okay? Now let's say I'm gonna do my turtle.move, or sorry, I keep saying move. Let's do forward, and let's do 100. Yeah, let's try it, let's see what happens. Do you see that thing go to the right? So that thing went to the right. Now what if I wanted to move it up? Well what you need to do is essentially it's like, okay, it's like this, I want you to look at my face right now. So if I'm the turtle, and I'm going in this direction here, I will go like this much. And then in order for me to turn left, what I need to do is first turn 90 degrees left, like this. And then to move forward, I just go forward, right like that. Okay so we're gonna do that with our turtle. So let's do my turtle.left, how many degrees? 90 degrees, okay. Now if you notice the turtle, now it's facing towards the left and it's looking at going up. So we simply do myturtle.forward 100 again, and you can see my turtle is right over here. Now let's do some more fun stuff. Let's say myturtle.right 50. And let's say myturtle.forward, again, 100. And you can see we're starting to make interesting shapes now, right. Like, what is that? Maybe it could be a shirt, it's a ladder. I don't know, I don't know what that is. But here's what I want you to do. I want you to create a square with the turtle, okay? And I want you to copy whatever code that you wrote, and I want you to paste it in the comments. So either if you're watching this on YouTube or if you're watching this on my website, on Cleverprogrammer, I want you to go to exercise two, the turtle, on cleverprogrammer.com. And I want you to literally copy whatever code you have and paste it here. Okay, I read every single one of your comments, and I will go through it and I'll comment on it. And other people will get to see what you're up to as well. Okay, also on my website, I've linked you guys to a blog that says read this on how to do more fun things with a turtle, okay. So if you go to this blog, it'll teach you what more fun things you can do. Okay so it teaches you how to create stars and some really fun shapes. Okay, so that is it for this video. I will see you in the next video. (gentle music) Okay in this video, I'm gonna go over the solution of the previous problem that I posed to you. And also we're gonna learn how to write the turtle, the entire thing in one go. So the problem that I post you is make a square with the turtle. Well in your case, let's see how you could do exactly that. So let me find the file where we opened up the turtle. Let me close that guy right there, copy this line and paste it. Right there, okay, my turtle has begun. Well, the idea is simple. I take this line forward and go 100. Now since sometimes programmers are lazy, I don't wanna keep writing this over and over again. So one thing I can do to make my life easier, is go to the line that I want to click on. And I want to use basically, go to that line, click my mouse there, hit enter, it brings that down at the bottom, as you can see right here. And now I can just hit enter. So you can see my turtle just move left, okay. Now it's facing up. Now what I want to do is move it forward. Again, and you can see that it's facing up again, or I'm sorry, it moved up. Now I need to make it face left. So how do I do that? I go to left, make it turn 90 degrees. And you can see it turn 90 degrees. Now I want it to move 100 again, you can see it move forward, and 90 degrees and then 100 once again and I have made the square. Now what I want you to be able to do is make a Python file, which means that remember this thing that we opened up, right right here, where we write all of the code at once. So for example, I'm gonna close it, I'm gonna show you how to open it again. Okay, so I'm gonna close this one and I will simply open it again. New file or command N, and I will go and put it to the right side, just so I have the side by side. And I will say something like import turtle. Remember that command if you don't use that command, and you try to do turtle, your program and be like, what the heck is turtle? So by doing import turtle, now it knows what turtle is. It's like when you're talking about your friends. If you talk about your friend, John right, like let's say you're talking about your friend John to your mom or to your dad. And you're like, Dad, this guy, blah, blah, your dad is gonna be like, Who the heck is John? So you're gonna be like, oh, yeah, you remember John from my fifth grade class. And then your dad, if you're talking to him, he's gonna say, oh okay, I know who you're talking about. So important is basically like, hey Python, important that turtle that those coders wrote, and now we can use it. And Python is like, oh that turtle. But if you don't have this important command here Python is gonna be like, what the heck? What turtle are you talking about? You must be out of your mind. Anyways, we're gonna import this turtle. All right, so now here's what I want you to do. I want you to write a script that makes the turtle in one single go, okay? And I want you to make that square with the turtle straight up in one go. For example, let's come over here to our script that I've written. And if I write stuff here, it does things immediately, right, as you saw. But if I come to my right side over here, oh, by the way, just one quick note, whatever you do not name this file turtle.py. You can name it turtle underscore game, or a game or something else. Just don't name it turtle, because then it confuses this turtle here with this file and everything goes all over the place. So don't do that because I ended up doing that and caused lots of problems. Alright, so let me just show you what happens when I run this file. I'll go to run, I'll hit run module and hit okay. And you can see that my turtle went and did all those things in one go. How cool is that? So you don't have to sit there and type it all in, you can just write it in one go. And it'll do that every single time. So I want you to work on that square. But before you go and do that, I just wanna show you what this file actually looks like. So if I go to, let's say documents and cleverprogrammer practice exercises, and we take a look at this file, turtle game. It's just a text file with this code in here. Okay, that's really it. That's all that's going on in here. So I'm gonna leave it here. The code that you write for the square, I want you to either go to the YouTube place, YouTube channel, and post it in the comments. Or I want you to paste your code right here in the comments on cleverprogrammer.com. Okay, I'm gonna take a look at it. I will see you in the next video. (gentle music) Now, in the last video we talked about how can you make a script that creates a square in one go, right? So I gave you an example of a script that does not make a square in one go. So I'm gonna start off in this video talking about how to do that. So I'm gonna solve that problem. If you haven't done it go still try to do that problem. But I'm gonna go over the solution. And then after that, we're gonna talk about what the heck are variables. So let's keep going. So here if I run this code, right, notice what actually happens. We get this thing but we don't want it to go to the right and down we want it to keep going till it makes a square. So I'm simply going to copy this code and paste it again. Except for this line, I oops, I wanna turn 90 degrees and then I wanna turn 90 degrees and go straight one more time. So let's run this bad boy and check it out. Let's see what happens. Okay and boom, we have gotten a square. So if this was your code, and you copied this and you went over to clever programmer.com or you went to YouTube, my YouTube channel and pasted it in below, that would be exactly what you would need to do. Okay, so simple go to Python for beginners, and simply go turtle in one go, and you can paste the code right here. Okay back to what we were talking about. Whoops, the video actually started. So let's talk a little bit about variables. Variables are very simple. It just allows you to store information somewhere, instead of having to say, oh yeah, my friend with the white skin. Or he has this length hair, and his nails are this long and he's this tall. Instead of saying all of that, we store all that information in his name. So we just say John, or Bob or whoever, right? That's exactly how variables are. Instead of saying all these things at once, or having to remember them, you just store it in a variable and then you just, recall that variable and that's it. So something really simple I can say, Bob, right, is five years old. He is 68 inches tall. And where's brown suits. Okay, now if I say Bob, you can see Bob. Or if I say x is equal to some big number, good luck trying to remember that number, but it's pretty easy to remember x, right? So you can say x and you can say x plus 10. Or you can say x minus x and you should get back zero. Anyways that's variables are very simple. On the left hand side, you put what you want to store information into and on the right hand side, you put what you want to store in there. Okay that's it about variables. I'll see you guys in the next video where we talk about strings. (upbeat music) All right in the last video, we talked about variables, you can see some basic examples. I stored all this information in the variable Bob, and then as soon as I typed in Bob, I got back all of Bob's information. Just a quick thing I wanna say before I continue, if any of you are having problems downloading and installing this Python stuff that I've shown you. If you're on Windows, or Mac or any other system, I wanna show you a quick, I wanna really quickly show you a website where you can get all of this information, or you can pretty much do everything we've been doing right on here. The website is called trinket.io. Okay, and here's how it works. So on the right hand side, you can see that if I run all of this code, it draws all of that stuff, okay? And they have a bunch of great examples for you guys to try out. So you can go to Python, and you can discover a bunch of great examples that you can do. Okay so for example, you can look at this example here, and maybe get an idea of how to make some really cool shapes using the turtle module in Python. Okay, so let's stop their code and let's start ours. So if I do import turtle here, and I do my turtle, or you know, you can call it really whatever you want. You can call it my John if you want is equal to turtle.Turtle. And if I say my John.forward100 and I run this, invalid object has no, okay I misspelled turtle here, run it. And you can see that a draws a turtle going forward. Now let me bring back their code. And let's do it. So for example, where it says black here, let's write blue. Okay pen color, background color that is. So you see, we change the background color. So that's a good way to see what this stuff is doing. You can change this color to orange maybe, and see what that does. Okay, so the first turtle that gets drawn is that being drawn by an orange color. Okay so great place to come and try out stuff. Okay, trinket.io. Now, going back to learning about strings. So let's go over here and strings is literally the exact thing that you type, okay. So let's say I wanted to say hello world. If I did print hello world, I would get back and error. And the error would say invalid syntax, I don't know what you mean. So let's try to type it in the Python 3 way where you have to put a parentheses after print. Because print is something called a function which we will cover later. So let's try hello like this and hit Enter. And you can see the error I get it says, name hello is not defined. So it has no idea what you're talking about when you write hello here. It's looking for the variable hello. We have the variable Bob here, we have the variable x, but we never defined variable hello. But you're like, no, that's not what I'm trying to tell it. I'm trying to tell it to exactly like, say hello. Not some variable, hello, that might have some numbers in it or something like that, right? It's not like you're doing hello is equal to five and then printing out hello, and it gives you five. Well in this case, if you wanted to say exactly what you wanted to say, you have to use something called a string. So that just simply means putting that thing in quotes. So now Python goes, oh, you want me to say exactly Hello like this? And then will say hello. Now let's say I wanted to say print hello world, right? If I do, space here, is just gonna give me an error. It's gonna be like a variable with a space in between a variable. I have no idea what you mean. So now if you put both of these in quotes, will go, oh you on the string that literally says hello world. Exactly like that, I understand, I got you let me do it for you. Okay, simple enough, cool. That's it for strings. I'm gonna keep it really simple, I'll see you in the next video. (upbeat music) Okay, so this part now naturally leads us to fun, fun functions. All right, so let's talk about that. All right, so what we have done so far has been really cool. We figured out how to draw a square. And we figured out how to write it as a Python script. So when we run it, it all runs at the same time instead of running it here one by one. We also learned about variables and strings. So in here, the thing that's a variable is my turtle, right? And then we keep using that variable over and over again. Let me ask you a simple question, in this program right here, is there a single string that we're using anywhere? Yes or no? What do you think? Three, two, one, there isn't any strings that we're using here, okay? What we are using here are integers. And integers are just whole numbers from negative infinity to positive infinity, right? So you have negative, you could have 100, 90. But if you have 90.2, that's not your, that's not an integer, right? That's something else which we will discuss. But up to this point, I think that we are, this naturally leads us to functions. So let's talk about that. Notice that when this part of the code runs, what it does, right? This part of the code I want you to just kind of memorize it for now. You're not gonna really understand what it means until we get to object oriented programming. But I want you to just focus on this part, and what does this part do? So let me just simply run the code and let's see what that part does once we run it. And it goes and it draws a square, right? So this part of the code draws the square. Okay, that's cool. What if we wanted to make, whenever we want to make a square, right? It seems like we would have to copy this code and write it again. So for example, let's say my turtle.forward 100. And let's see what happens. I'm gonna save it and I'm gonna run it. Okay, so I'm gonna move it forward. And now I'm gonna try to like draw another square. So I'm just gonna copy paste that code. Oh cool kind of looks like glasses or something, right? So let's go back. This is a square. And this part is a square, right? So every time we have to draw square, we have to copy this whole bunch of code and write it again and again every time. Well think about this when we had, back when we were using variables. Did we have to remember all of these numbers? No we just stored it in x. So I'm gonna teach you guys a trick where you can take this entire block of code and kind of give it a name like a variable name almost, but it's a little bit different. And when you assign something to a block of code, it's called, it puts it in a, you put it in a function, okay? So here. It's all gonna makes sense. So I'm gonna remove this up at the top. Oh, a quick thing, just in case you guys don't know what this is, this is called a comment. Okay, anything that you write with a hashtag in front of it, you're telling Python to ignore that part. Okay I don't want you guys to get confused by that, okay. So for example, if I write hi here, it'll just ignore it. But if I write hi here, it will give me like an error or something. So hashtag means I'm putting a comment, and it's only for humans to read. So now let's turn it into a function. So I'm gonna say DEF, that means like defined, and we're gonna define some function. So what does this thing do? It draws a square, right. So I think it would maybe make sense if we call this function a square. And whenever you create a function, you have to put open close parentheses after it just like that. And put a colon okay. And now everything that you want part, everything that you want to make part of that function, you have to indent it. So what I'm gonna do is go here, hit tab, go here, hit tab, go here, hit tab. Whoops, and then you can also just highlight that part of the code that you want to move and just hit tab all at once. Okay it'll move it for you. Now, let's see what happens when we run this code. So I'm using the shortcut to run the code. That's weird. It's not really moving anywhere, right? Think to yourself, why is that happening? Okay, let me tell you this. If I wanted Bob, or let's say x to be this number, right? And I want it to make x spit out that number, right. Print that number out to the screen. Well define x to be something that's not The part that does the spitting out, that's just me defining what x is, right? But the part that does the spitting out is when actually say x and hit Enter, and it does something. So if I do banana is yellow. Then if I want to say, the yellow part right, I would actually have to say banana and then it spits out yellow. Just like that me defining a function doesn't call the function, doesn't actually use the function. So I actually have to call the function or use the function to make it do something and make it, like spit it out pretty much. So here I'm gonna say square, okay? So like, if you were born and somebody gave you the name, Jimmy, that's them giving you a name. They're not calling you Jimmy. They're not telling you to come over Jimmy. They're just giving you a name, attaching that label on to you. Then later when they want to call you, they go hey Jimmy. And you're like what's up? Right? Like Jimmy, come here. And then you respond to them, okay. So just like that we gave this function a name, square. And here we're calling it. So now let's see what happens. So I'm going to run this. Look at that, right? It made a square. Well, what does that mean? What if we want it to do that same thing where we move forward 100. And we wanted to make another square. So let's say I put this line move forward 100. And then I want to make another square. How would I make another square? Should I copy all this code and then paste it right here? No, the trick is that I just call that function again, that makes the square right. So let me run it. Okay, how cool is that? So why do we create functions? Hopefully it's clear to you, we create a function. So we can just reuse that code over and over again without having to write all of that stuff again and again and again, okay. To make it a little bit cooler, another thing I'll show you about functions in the next video is how we can give arguments to functions, okay, or parameters. So until then, I'll see you in the next video. (upbeat music) So in the last video, we left off at talking about how to make a function. So we wrapped up our square in a function and that way, we were really easily able to use a square. And this way we can use the square as many times as we want, and it's very easy. So what, let's do something cool. So I said, let's talk about the idea of arguments or parameters in a function. So what we wanna be able to do is, let's say that instead of 100, what if you wanted to move at different length every single time? So let's say, we don't wanna be boring and just move, I don't know, 100 steps. So let's take a look at it. Let's say we don't wanna move, oh, I didn't call it anywhere. Let's call it again. And I'm gonna remove this line here. Okay, let's run it. Okay, and let's say we don't wanna be boring and make a really small square like this. Let's say we want to maybe go 200 steps. Okay, so let's try it. Let's go 200, 200, 200, 200 and let's take a look at what that looks like. Nice the square look better. Let's try to tweak it a little bit. And let's make it I don't know. 240, 240, 240, 240. Let's see, that looks pretty cool. But what if I wanted the turtle to go all the way to that edge perfectly, and then go down and then go to the left and then come back up? Okay, let's try something. Let's try 280, 280, 280, 280. And hopefully, oh, still not hitting the exact. So maybe let's try 290 or something. So I hope that you're seeing that we have to change these values here a lot, right? We have to change it every single time. And we have to change all four of them in all of those locations, which is kind of annoying. So how can we make it so we don't have to constantly change all those values, again and again, it's kind of really frustrating. We wanna make it, so we just change it one time and it changes it everywhere. So let's say, I don't know, let's call it n. Okay, let's make it a variable that's the same everywhere. So let's just call it n. And I'm gonna make a variable here, and I'm gonna call it n. And I'm gonna say go 250. Okay, so now everywhere n is we have 250. Okay, so let's try to run this bad boy now. Okay cool 250. Let's make that really small, let's say 50. Okay, that was really small. So that's pretty cool. We were able to use that and that made our life really easy. But a lot of the times, we don't wanna Change the function itself, like the definition of the function here, its job is to make a square. And that's all it should need to know how to do. And we want to be able to give it something which based on which it changes, it changes the length of it, right? So like how far it goes or how big the square is, okay? Maybe you can think of it like in English, if you have a definition of a word that you look up. Once you learn that word, you can use it in whatever way you want, right? But it really depends on the context. For example, if you wanna say, wow, man, you really killed it. You're basically saying you did a really good job and you did amazing. Or if you said, man, you just really killed that thing for me. You really killed it for me. I don't even find it fun anymore. Now you're using it and it, now the context is basically that somebody really made something less enjoyable for you or discouraged you in some way. So the word killed in this case, right? It has a completely different meaning. But based on the context, we change it, right? Well, depending on what context we give it, we change the word kill. But we shouldn't actually go and change the definition of the word kill every time you want to use it in a different context okay? So what I'm trying to say here is instead of changing the function itself, let's do something really cool, let's give it context okay. So I'm gonna say a square takes in some input n, so whatever and I give it, it just puts that in here. And instead of calling it n, let's make it more fun and call it length. So everywhere I see n, I'm just gonna replace it with length. So now the cool thing that's gonna happen is if I give it the length of five, everywhere it sees length is just replaces it with five. If I give it the length of let's say I don't know 200, they'll go everywhere and replace everything with 200. Okay, that way we'll get a longer square. So let's try it. If I run this right now, I'm gonna get an error and let's see why. Okay, I got an error and the error says type error. The function square, right, that's what the parentheses afterwards it means. Missing, that is missing one required positional argument length. So we're supposed to give it something, we're supposed to give it context, right? Like the word kill, we give it context and it changes the whole meaning of the thing. So here in square we're gonna give it the length. So let's say for length we say hundred. Okay, now let's see what happens. Let's run it and we get a square that it goes 100 in each direction, right. So what just happened? We parseed in the 100 here, which really parseed in the 100 here, right? And since there is 100 here it became 100 everywhere else. And so we got a square that's a size 100. And we can effectively do the same thing. If I give it 300, that's probably not even gonna fit on the screen. Oh it pretty much does. It makes a bigger square, right? So now the only place I have to change it is really here. This thing's job is to now just make a square. That's all it does. And here we can tell it what, how big that square should be. So let's say that we say make a square of 300 and then make a square that's 150. And then make a square that's 100. Okay, let's see what that does. Let's see what that looks like. Okay that's 300, that's the 150, and that's the 50. Whoa, that was cool, right? That kind of it was, it seemed like it was about to make some kind of designed right there. Okay so hopefully you guys have a little bit more of an understanding of how arguments work. Just to take it maybe one step further. What if, think, what if instead of these 90 degrees, you wanted to be able to change the degrees? Maybe we can go in here, huh, and say, angle, right. And replace everywhere we see 90 with angle. And so now we have to give our function not one but two arguments, okay. So let's say 300 and 90. So the 300 will replace the length parts, everywhere there's length it will replace that with 300. And the 90 will replace angle. So everywhere it says angle, it will replace that with 90. How cool is that? So let's run this bad boy and check it out what it looks like. We've seen this square before multiple times, 300. But now let's add a twist. Let's make this 45 degrees, let's see what happens. I don't even know what it did. Let's reduce the link so we can at least see what it does, right? Let's run it. Whoa, that's kind of cool. It didn't make a square it did something weird with it. Okay so I'm foreshadowing multiple arguments. And in the next video, we'll talk more about it. Alright guys, I'll see you there. (upbeat music) Okay so now that we've talked a little bit about functions with their arguments, and also a little bit about functions but multiple arguments, this naturally leads us to the next thing. What if I want to make that one square, but I want to make it multiple times? Sure, I can copy it and paste this line and paste it again, right. And then paste it again, so on and so forth. So for example, let's try having it paste it twice. I'm gonna remove these comments here. And just so you remember this 50 goes in for the length, it replaces every part of the length with 50. This 90 goes for the angle, it replaces every angle with 90. That's how it works, okay. So let's go back real quick and simply run this now. Okay, so I'm gonna hit the shortcut key to run it. And you can see I said draw two squares and it did. Yeah, but here is the concept here's the most amazing concept in programming. Which is the concept of doing things over and over again, also known as loops. So if I said, I want you to do 10 push ups, that's like a loop, okay? And every time you do a push up, I count one, two, three, four. And then once you hit 10, I stop automatically, okay. So a way to say that here is you can say for push up in range 10. So for each push up, for 10 times, like do this. And this push up part, I can call it whatever I want. I can call it this, I can call it i. We'll just keep it simple and leave it at one letter i. And what we're gonna do is this part, all this part says is run something 10 times, okay. That's what that part essentially says. If I run that code on the left hand side, if I show you a range of 10 gives me, it gives me this. So when I do range 10, it won't really show you it kind of hides what it gives you. But in reality, it gives you a list of 10 numbers. Okay, so we're going to talk about more things like lists and integers and floating points in our next video. But for now, I just want you to think of it like it gives us 10 things. And so it runs 10 times. Okay, so if I did for i in range 10. And I said print i, what actually happens is the first time in this list, i, the first time you run through in this loop i is zero. Then the next time, right this range 10 is really this list here. So i is zero the first time then it's one, then it's two, then it's three, then it's four. And each time what happens in the loop is the part that's indented inside of the loop. That's the part that runs over and over and over again. So what happens the first time i is zero, we say print zero and we get to zero right here. Then we say i is one, so i is one over here. And then it says print one, we get one over here. Than in the last one, i turns out to be nine, so we print nine and then we get this nine over here. Okay that's a basic idea of how the loop works. So the part that we want to run over and over again, we're going to put it inside of this loop. Notice the colon at the end, very important. And I'm gonna put this part inside of the loop. And I don't even need to put that. I can just do this and I can say, I'm basically saying do this thing here. Draw square four times. That's all I'm saying, okay, and I will replace this code in the regular way without looping, I'll prove it to you. Okay, so first let's run it like this. Dang, that was cool, right? That was really freaking cool. It just ran that four times in a row. Now, I can show you what I mean. Okay, and I'm gonna comment out these lines. And you can see it's gonna draw that same four squares that we just drew. Okay, just like that. But by using a loop, your code gets a lot more clear. What if you didn't wanna run it four times? What if you wanted to run it one million times? Yeah, it would be a lot harder to write that out one million times. But it's really easy to write one million in here. I think that's one million. That's 10, 100, 1000, 10,000, 100,000, one million. That's actually 10 million. So there you go, 10 million. So this thing is gonna run 10 million times, right? If I ran I'm going to close it really quickly because it's gonna keep running forever. But you'll notice that it just keeps overlapping on the same square, that is gonna do that 10 million times. So if I went to sleep and woke up, this will probably still be happening and then it will still be happening after that. So let's exit that before something crazy happens. Okay, so that's loops for you guys. That is it for this video. I will see you in the next video. (upbeat music) Hey guys, what's up? So in this video, I wanna talk about primitive data types. Now we're getting into the adult programming stuff. Okay getting out of the little bit of the baby stuff, even though it's not baby, but, let's just admit it. So let's talk about primitive data types, what are they? Well, okay so let's start off with like basic one's first okay. And I also wanna clarify something about variables for you guys. So you can't start a variable with a number. Okay, so if you say five is equal to, I don't know, hello, right. The string hello, you're gonna get an error. So you gotta start it, you gotta start your variable with a letter. Now you also can't start it with symbols. You can't say something like this is equal to hello, okay. You're gonna get an error. You can combine underscores with your variables. You can say hi, hello, something like this. Okay and that would work for you. Okay primitive data types, what are they? So if I have this thing in the green that you see, that as a string, all right. So in this video, I think we can just keep it like this. Okay so that's a string, hello. Anything with quotes around it, and you can also put double quotes if you want. This is a string data type. Okay this terminology is very important to remember. Then you have your integers. Integers or anything that is like this, okay. 4.3, or I'm sorry four, five, two, those are all your integers obviously. Things that have decimal points in math they are called decimal numbers, in Python we call them floating numbers. Okay so you have floating numbers like 455.5, 354.90. Okay these are your floating numbers. So that's another important thing to remember. So this was just a little primer on primitive data types. Just so when I use this terminology, you guys don't get confused or like wanna throw things at your screen, right. Like I don't know what he's talking about, boom! Just throw your like mouse or your socks. Don't do that. I'm telling you then what they are here. And feel free to look them up a little bit more so you can understand more about them. But this is some of the basic ones we're gonna be dealing with. And then the next videos, I'm gonna talk about things like what is a list? What is the dictionary? So we're gonna go over those as well, okay. Just to give you a little bit of foreshadowing into it for you advanced people there. You wanna learn more, right. You wanna overachieve. A list is basically something that holds multiple things at once. So for example, I can say banana and apple and oranges like this. Right at the start, I can say x is equal to, I hate x, I hate one letter variables and most people People do as well. Because it's usually a sign of bad coding. Always try to make your names very relevant. Get into that habit right now. Promise yourself cross your heart. I don't know, I don't care what you have to do. But work hard on variable naming, even if it slows you down sometimes. Okay so no x know y, only if you have to. It's gonna make your code really hard to read. And when your reasoning through your logic, you're gonna not understand what you were doing. So let's say I don't know fruits, it's a good variable name, fruits. And now if I call fruits, you see a list of that thing. Okay I was talking about primitive data types, but I got ahead of myself. I started talking about some data structures like a lists and dictionaries. We'll cover all that later, be patient. I'll see you guys in the next video. (upbeat music) They're my beautiful children. In this video, we're gonna talk about string slicing. What is string slicing? We're not talking about cake slicing. So let's get started. Well a string, as you remember was that thing in the green here. But that's just really specific to the Idle that we're using. If you're using any other text editor, it's not necessarily gonna be green. So the string is just something in quotes, either it's single quotes or double quotes, as long as it's consistent. Can't have a single quote ending with the double quote, they gotta match, okay? So we have to match with the quotes, that's your string, right? So what we want to do now is slice those strings. Well, what does that mean? Imagine I gave you an email address, email is equal to I don't know rafe@gmail.com, something like that. Well a common thing that people have to do when they are getting this data back is, well, this is the username or something. This part is the Gmail thing. And then this is the .com part, right? So like, let's say we just want the domain or whatever. And here we simply want like the username. So how would we do that? Well, we can use a little bit of string slicing. So let's just start with a simple example. Let's take hello, and let's say we want to get the first letter from hello, we wanna get just the h. Well, how you do it is you index by opening a bracket and closing a square bracket. And if I do zero, it will get me the first letter of that. Okay so h in this case is zero. Right that e is one. In Python, most of the things started from zero. So we go all the way up to this o here, which is a four, okay. So we take this hello and whoops, let's take this hello. And let's simply do one, and that will give me the e, okay. Now another thing I wanna show you guys in string slicing besides doing okay, that index, right, this parseing in the index one Will give me the second letter. What if we wanna do something cooler like get a chunk of code? Well, how indexing works is that start, colon stop. Okay, colon stop. So what you can do is you can say hello. Oh I keep doing that, hello. And you can say start from zero and end at two. Not including two but and at two. So includes zero, but don't include the two. Which means that you really get the zeroth index and the first index, right. So whatever the letter is at the zeroth index, and then whatever the letter is at the first index. So in this case, we'll get an he, okay. How you can read this is just give me the first two letters. That's how I read it. So you can just say, give me the first two letters. Now when you're starting off from zero by default index starts at zero. So if you actually don't say this at all, and you just remove the zero you're gonna get back he, okay? Everything that I'm showing you guys here, play around with it, okay? Don't just sit here and watch my videos. I don't want you to be a parseive learner. Please, please actively do this with me or pause my video and do this. I want you to spend more time doing and less time looking at it, okay? Because it seems really simple when you're watching it. But if you don't put into action and do things that make sense to you, if you don't turn it like into a game for yourself where you're doing something, like making fun little stupid projects, using what I'm showing you, you're not gonna be able to remember it. That's really what my problem with Code Academy is. A lot of people go through Code Academy. But the problem that ends up happening is that, they just go through it at really fast pace. And they don't really have much projects that they get to do there. And not a lot of stuff that they get to do on their own. So the most common complaint I hear hear from people who take the Code Academy was like, it was great, I took the whole thing but yeah, right now I can't like write a single line of code. Okay, so it's not impressive, the higher you are in really abstract levels, Introduction to classes. Oh, yeah, I know all about functions, I'm in introduction to classes. Write a function, write a function that takes in three inputs and does dah dah dah and prints something out in sorted order. I don't know how do that I'm totally lost, right? Don't be one of those people, make sure you build strong fundamentals and your coding level is functional at all times, right? So even if I'm teaching really basic stuff, make sure you can do something with it. That's the only way you'll get better. And make sure you have fun while you're doing it. Anyways, let's get back to it. So, hello, right? Make up your own strings and break them up and see what you can make up from what I've just shown you here, and experiment. What if I change the end? What if I change the stop part of it? And what if I change the start part of it? What if I don't put anything in the stop part what happens? So let's try that. So hello and let's put in nothing for both parts. Let's see what happens. You just get the whole string it, by default, it starts from zero and by default, it ends up the last index. Okay so it's the same thing as saying zero, two, if you counted up was zero, one, two, three, four, right? O is four, so I'll say four here. That will not give me, I have to say five, right? Because it will not include the four. If I say four, it'll go up to but won't include the four. For example, see, so we have to do five, okay. So that helps us get to the end of the string. Now what if I wanna get the last letter from hello, or anything? If I wanna get the last letter, I can do something like this, negative okay. I can also slice by a negative number. So if I wanna get hell from hello, I can do hello. And I can say go from zero. And let's try and see what happens if I put negative one here, right. So another way, basically what I'm saying start from the zeroth part, go up to the last part, but not including the last part. So that gave me hell. Another way to write it is by putting a four here. Okay, another way to write it is not having a zero here. Another way to write this is not having a zero here, that all gives you hell. So you see play around with all those. I'm gonna now show you another thing that you can slice with and that'll also blow your mind. Slicing is very important in app, it's a very common procedure. So it's pretty good to learn it because like let's say you were trying to make an app, which goes on Craigslist and pulls a lot of data from Craigslist, so like pull up ads. So the ad like, you might get the data back in a string form. So you might get something like Xbox 360 pricing its price is $10 and, or that's stupid it's not $10 right? You might get it for $150 nowadays. It's 2016 so the value of it has significant dropped. And then let's say it says the condition type. So the condition type is new. Right, so this is the data that you get from Craigslist. Well if you were writing a script or Python code that would pull that information and then make sense out of it for you. And like a write it to an actual Excel file. So like you want it to essentially do something cool, where it opens up Excel and writes to it. And you want it to like have, product, price, and condition, right. And in product you want Xbox 360, in price you want 150. And in condition you want new, right? How would you pull that data cleanly? So it doesn't put Xbox 360, 150, new all in one place, right. So for that, you need to be able to do string slicing. Okay, so for instance you might say, console or product, right. our console product is equal to, find me the first pipe, right. So like, let's say we have this guy here, there is a method you can do on data, which is called index. So let's find the index of pipe. It tells me that pipe is at index nine. So zero, one, two, three, four, five, six, seven, eight, nine. Which means that if I index the string data, and I do nine, it will give me back the pipe. So what that tells me is that to get Xbox 360, I need to go from the start of that string all the way up to the first pipe, that should get me the product. So I can say product is equal to data. From the start, I don't need to say zero, right? I can say from the start to take the data.index of the pipe. And now if I show you product, boom, look at that. We got Xbox 360. And so now I can write that product to the file. I'll teach you guys how to read and write to files. Okay so then what it will do is that it will actually write Xbox 360 in here for you automatically. Now understand the power and implications, well, why can't I just do that by hand? Right, that might be your question. What if it was 100,000 products can you do it by hand? Good luck, right? What if it's a million products that you were trying to search from and find the best price using your Craigslist bot. That's where programming comes in. Okay, it's very important to understand how programming in here ties together and how it's more powerful than you trying to do this on your own. So that's really the power of string slicing. Okay to break this line down for you a little bit more data, colon, that's just saying start from zero. And then I'm saying data.index of pipe. What does that part evaluate to? Right, .index is a method that you can use on data. That's okay, which just gives you something that you're looking for. You parse it into the function, right. That function or that method index takes in one argument. So what does this whole part evaluate to in our case, this part evaluates one nine, right? This whole part, data.index, right, it evaluates to a nine. So if I do data zero through nine, you can see that I just get Xbox 360, the same way. Nine tells me up to but not including the pipe, okay. So that's how we got the Xbox 360 part. How would you get the 150? You would kinda do the same way to get the price. Okay but you would say instead of starting to look from here, because then you'll find this pipe right here, right this one. You wanna find this pipe now. So you want to actually start your string search from this location or this location that I'm highlighting. And then you wanna search all the way up to this pipe and stop there. And get whatever is in between these two pipes. Okay so that's something that I want you guys to try. Paste your code below for how you might get the price and the condition, okay. That would be a fun thing for you guys to do. I'm gonna keep moving on and talk a little bit more about strings, and string slicing, because there's still a little bit more to it. So and again, I want you to keep practicing all of this right. 'Cause otherwise is going to over overwhelm you, all this knowledge. So let's say that I have, I can do start, stop. And here's another method to blow your mind, step. So how many steps do I wanna take when I'm reading something? Okay, so like, let's say, I have this string. Hi, how are you doing? It is very nice to meet you. I wanna make sure I'm consistent. So not double quotes, single quote. And let's just store that in some variable, greeting. Okay, so if I say greeting, you can see that whole string. So what I can do is take greeting, say start at zero stop at, I don't know, negative one. So like all the way at the end. And then I want you to, basically, it'll go up to o, right. Because it's up to like, or sorry, it will go up to the u part, but not this period right here. Sorry, I just, it won't let me highlight that period. It won't go up to that period. Okay, it'll go up to u because it's up to, but not including the period. Sorry, I keep saying that a lot. But I do know that when you're starting to learn Python or programming those things you will forget a lot. So I'm sorry if I'm reiterating that fact over and over again. All right, so we start from zero, we go up to the u, right? We go from here all the way to here. And then we wanna step. So instead of, for example, taking, I don't know reading every single one of these, we can read every other letter. So I can say instead of stepping by one, which is default, if I do one here, you'll see this pretty much the same string without the period. And if I do nothing here, you'll see the same thing, right? Because that's the default. And if I do step by two, this is basically saying give me every other letter. Okay, so think about maybe creating a game, jibberish game that takes in a string, like it's a function called jibberish. Take In a string, and it just jibberishizes it? Okay, it just like jumbles it up. And if I do three here, you can see now it's stepping by three. All right, so pretty weird, but it's also cool at the same time. And another thing that I wanna ask you guys as a practice to do before I end this video is say I had the string hello. I gave you the string. How would you reverse it? Okay, I want if I gave you hello, I want back olleh. or if I gave you olleh, you should give me back hello. Okay, so hopefully that blew up your mind on string slicing. I'll try to put some exercises on cleverprogrammer.com. So if you haven't already go enroll into the school and there will be exercises and extra resources that you can use to get help. Also there are others in the community who can help you, okay. So good place to go for help. But if you're watching it on YouTube, that's totally fine, comment in the YouTube section below. And I will personally try to help you out. Other than that, I'll see you guys in the next video. (upbeat music) Hey guys, what's up? So in the last video I talked about string slicing. In this video I'm gonna talk about lists. Okay, lists of things and what the heck are lists, lists are awesome. However, in the last video, I left you guys with the question I said, take this right and parse it. And basically Xbox 360 pull that out, save it in a variable like product. Pull this out, save it in a variable like price and save this in a variable like condition. Right, so when you have your Excel sheet open, it looks really nice look like this. Okay, so I'm gonna, in my solution, I'm gonna do it in a different way. Because if you try to use it as index, this is the solution. So you can pause the video, think about how it works. That's how you'll pull the 150. And using the same logic, you'll pull new. However, index is a very ugly method to use for getting, parsing the string. What I want to show you guys is this method called find. Okay, that's very nice method. So like let's say we take the data right, and I do data.find. And find it shows you the bottom what it takes in as the function. It takes in the sub string. And then it takes an optional arguments like start and end. So I'm gonna say data.find and I'll give it a sub string pipe. What a sub string means is that that something that exists in the original string, okay? So for example, I have to give find, the function find or the method find, I have to give it something that exists within this. If I gave it something that doesn't exist within it like banana, it would say negative one, like I didn't find anything. But if I gave it a pipe, you can see that it finds a nine. And another thing you can give it is how you saw is you can give it where to start from. Okay, so I can say like, for example, start looking after 10 or hold up, or look for pipe but I want you to start at string nine, okay? Or I want you to start at string 10. All right, and now it finds pipe at location at 15. So if I do data and if you count it up, you'll see that this is the pipe and it is an indeed location 15. If I do data 15 you'll see that it gives you back that pipe. Right. (clears throat) Okay so, by getting that second pipe, now, you can get the value in between the first pipe and the second pipe. By saying something like, start from finding the first pipe and then go up to finding the second pipe. Right, so I can say, finding or start from or look for pipe and then start from 10 for example, right? And this gives you this guy here. And just to make sure we don't include the pipe in the first one, we can just start from plus one of that. Okay, so that gives you in between the first and second pipe, you get back 150. Okay so, the reason why I went even more in depth in strings even in the video called Lists, is because a lot of what you learn from strings is applicable to lists, okay. So let's take a list and call it groceries. And I will have apple and I foreshadowed this for you guys a little bit, banana. And you also have integers. But usually try to put the same kind of thing in the list. But sure let's put five in there and six in there and then oranges or something okay. Cool, now if I wanna take this list. And I wanna get the first element and the second element, if it was just a string right. Like the reason why lists are useful is 'cause you can use it to store multiple variables. Like for example, if you wanted to use variables to store this, it would be a little. It would be weird 'cause you will say groceries, zero is equal to apple. You would say, groceries of one are banana. And so then when you do groceries of zero, you get back apple. And then you do groceries have one you get back banana. But let's make it make that thing for you in a really easy way, okay. So now if I do groceries, and if I do groceries of zero, I get back Apple, okay. And if I do groceries of one, I get back banana. Because apple is in the zeroth position banana is in the first position. This is in the second, third, fourth position, okay. So let's make it really nice for you. Imagine if you were trying to store a data for a race. So like, four of your friends ran really fast. And you wanna record who came first who came second. So you can say race is equal to, like John came first and then Bob came second and then whatever, Timothy came in third. Timothy is pretty slow. So we can say okay, who came in first? we can ask that question, we get back John. We can say who came in second? We get back Bob. And I can say who came in third? Or I can say who came in last? Like negative one get to the last element. And this answers all my questions. So just like how we were able to slice strings, we're able to slice lists, okay. But notice list is nicer for elements. So for example Xbox 360, and all this stuff, I'll show you guys a really cool trick you can do with list to break that up into pieces. So like for example, if I gave you a string like this, right, what is going on? Notice that there are a lot of spaces in between, right. Let's just replace those spaces, just so it's more visual. Let's replace those spaces with that. And let's say we want to get the what parts separately, is part separately, going part separately and on part separately, without having any of the dashes in the middle. There's a method we can use called .split, okay. And we can parse to .split what we want to split by. So I can say something like this. I wanna split by the dashes, okay? So check it out, now I got what is going on? Right, this is a list of strings. Now the data complexity is getting a little bit higher, right? It's a list containing strings inside of it. Okay I can call this like, greeting or something doesn't matter. And if I do greeting, I can say, what's the first word of greeting? What's the second word? Whoops. Greeting, right? What's the second word? And for example, I can say what's the last word and they'll give me what is going on, on being the last word right. Now, I can also do string slicing, just like how I can do in strings. So I have start, I have stop and I have step. So if I take the race one again, I can say go from zero all the way to the end. I can say, the same way like this. This is like, optional, right? Zero, start from zero, and it ends at zero or ends at the last one by default. If I wanna get from John to Bob, I can say like, give me the first two race like first two contestants of the race. And they'll give me John and Bob. Or I'll say, give me everybody, but the last guy. So I can ask that question to my list, just like that. Okay now to answer you guys this question of how to reverse the string. It's the same way you can reverse the list as well. So let me show you guys. There are a couple of different ways but I'm gonna show you guys the nicest, the fanciest way, okay. So let's take this list and I wanna step by, or sorry I wanna start at the default, which is zero, okay? I don't have to write it zero, but I'll just write it for you guys. I want to go all the way to the end. And I don't have to write this. Okay, so I'll just leave it blank here. And for the last part, first step, instead of saying step by one, which will just give me the whole thing. Instead of saying give me every other element. So like, give me John and then Timothy, I will say, step by negative one. So check this out. Let's remove this. Right and let's remove that guy and let's do that. And you will see how it steps. Right, it just reversed the list. If we have the same string, like let's say we have data, I can do the same way and reverse everything in data. So you can see Xbox 360, and new and 150 are all written backwards. Okay so that's how you would like reverse something. Now I wanna talk about split again, and I wanna talk about one very important method called append for list. One of the most commonly used things that any programmer does in any language. Okay, so split is like Java, UPC, everybody uses that it might not be called split. And then same thing in Python, everybody uses split and the next method I'm about to show you a pen, very common. For all the games you make for everything that you do, it's gonna be like one of the most common things you use, especially a pencil pay attention. So I'm gonna show you the method called the split, so I've shown you a little bit of that already. So let's say I take data and I wanna break it up, right product price condition. Very easy way to do it. Very easy to do is split, so let's do data.split. And I want to say split by pipe. Boom, look at that, how nice is that right? It automatically just split it by that and you can store that in details or something. And now if I do details of zero right, and I can set that equal to product. So now if I do product, I get that. I can say price is equal to details of one. And I can say condition is equal to details of two. Okay price, condition, boom. Okay, so that was like some really nice ways to get this done. In the next video I will talk about append so stay tuned. (upbeat music) So in this video we are going to talk about how append works in a list because the last video got a little bit long. But for those of you who want their minds blown, I want to even give you a better solution for the problem with the whole splitting thing and then storing as a product, price and condition. So remember, we had data Xbox 360 product, 150 price, condition new. There's even an easier way to do it. I can say product, I can say comma price, and I can say condition. And check this magic out and I'm gonna say data.split that by pipe and boom we're done. So now product is the first element from that list. Right if I show you data split by pipe, What you get is first elements, second element, third element. So the first element maps to this product right there. Price ends up mapping itself to 150, condition ends up mapping itself to new. So go check it out. It's also kind of known as the concept of tuple unpacking Really, really advanced concept. We're not gonna get to it till maybe an intermediate or advanced course. But yeah, just something a little fun to blow your mind and look at how efficient Python lets you do things right, efficiently. So really simple way. But hopefully, this shows you the power of how you can combine lists with the whole idea of slicing and all that. Now one of the most common things I wanna show you is this whole thing called .append. Okay, it's a method that you can use on a list, very common method. And this is one of the reasons why lists are a lot more useful than strings or any other thing. Okay, oh, let me just be clear. It's not that strings are not useful or lists are more useful. But the reason why lists are so awesome is because of that, that's what makes them unique, okay. So let me give you some list with. Sure, let's give you racers, or let's do something simple, let's do numbers. Okay, now there's a really easy way to grow this list. So I wanna keep adding some numbers to this list. Well, how do I do that? What if I wanna add some number to this list? I know how to access each of these numbers. I know how to slice each of these numbers and get a range. I know how to step and slice and get ranges at the same time. I know how to reverse the list. Well what if I wanna add more things into the list or change existing things in the list? Well to add things in the list, we use .append. Okay, append meaning ad something to the end, hence append. Prepend add something to the beginning. So we wanna add something right over here in front of the five. So let me do six, and if I show you numbers, and now you have a bigger list. Let's say I wanted to add another thing, I'll just say append seven. Now if I show you numbers, now the numbers has grown bigger, you got seven. Alright so we're using this new app that you're creating where once your friends raced, you put them in the list. But let's say more your friends get excited. They're like, wow, this app is amazing. We want to race too so you can put us in there. But you're like, the list only takes in three people. Well, append lets you add in more people, right. So you store that data, you keep it there and then you use append to add more of your friends into the list. What's also nicer is you can use a loop to add things into the list. Okay, so for example, I can sit for i in range 100. If I say print i, well what is that gonna do? Is gonna go all the way and print up to 100. Okay so I'm gonna stop this right here, but you get the point. It's basically range, right? What is range? Just to show you a range of 10. That's effectively just a list, 10 okay. And then we kind of go through it and we print out each of those numbers. I'm gonna get more into loops in the later video. But just, this is just to give you guys a little bit of an idea of how we use list. So for example, every time i, So first time i is zero, then i is one, then i is two, then i is three and we keep doing that right. So what can I say? I can say, 'cause effectively, right, since this is a list. Now I can explain to you guys a little bit more about loops. Since range is really just a list, right. I'm calling list on it because in Python 3 they hide it from you. And you'll learn why later. But if I call list on it shows me what range 10 looks like. And range 10 happens to just be a list. And list is what allows you to make that for loop. Okay, that you've been making, when you were creating your original turtle games. So what happens is that the first time going through this list, right. Let's say, let's just make a smaller list here for now. When we're going through the loop i is zero the first time. And then we call the print function right here, right. So i is zero the first time and then we print zero. Then i is one because it's a second element from the list. And so then we print one out to the screen. Then i is two, and then you get two here. And then we print out two at the bottom. Okay, so that's how loop runs right. The indented code keeps running over and over again. So that's really what allows you to do a loop, it's actually a secret list in the background. And so that's why you go from zero to 100 here right. Now, if I wanted to take that list that I had at the top called numbers and keep adding a lot of numbers to it, say up to 30, instead of keep having to manually do it, well, here's a nice way to do it. I can say for i in range, let's see 14 or let's say, I wanna start my range, okay. So if I just showed you can also give a start and a stop to range. So let's say I wanna start my range from eight and go up to but not including 20 or 21. So I go from eight to 20. Right so these are the numbers I wanna add. Okay, so let's do for number in range, eight and 21 and I'm not using i I am using the variable number just so you guys know that you can't you don't have to use, i is not some magical built in thing that you have to use. Use a variable that makes more sense. In this case, since I'm going through looping, and it's really numbers. And now you guys know that i turns into a number, it just makes more sense to call it a number. So then you're like oh, yeah. This will just be eight the first time then it'll be nine, then it'll be 10, then it will be 11 and then it'll be 12, right? So let's go back. So let's just replace this with just number. And then let's say numbers.append, and to the numbers list, I wanna keep appending each number. Okay, so the first time I'm gonna append, number is gonna be eight. So then I'm gonna append eight. And so it's gonna add eight to my numbers list. Then number is going to be nine and then it's going to append nine here. The number is going to be 10, is going to append a 10. Okay so let's do it like this. Let's replace this bad boy with number. Let's run it, let's take a look at our list. And voila, you see it goes from one all the way to 20, okay. And if these were your friends and we wanted to see, in the reverse order, like from losers to winners, instead of winners to losers in a race. I would be able to do simply this trick, which says, start by default, stop by default, and then step by negative one. So that answers that question, right. Okay cool, so a lot of stuff. But hopefully it's making sense. And hopefully, lists are making more sense and append is making more sense, right. Append is one of the most useful things. So I want you to remember append and we'll come back to it and we'll probably build more things with it. Okay, I'll have a project for you guys as well. Where you're gonna get to practice it more. For now come up with something cool. Whatever silly idea or a fun idea that you have, code it up, something simple. Post it in the comments below, in the YouTube one, or my website here. Okay cleverprogrammer.com. Either way, it's fine. Alright guys, I'll see you in the next video. (upbeat music) Hey guys, what's up? This is Qazi. So in this video, I wanna talk about a project. All right, so we learned a little bit about loops and how we can do some cool loops and make squares. We learned about functions and how you can give multiple arguments to functions. We did all of this while visualizing the code. That's why we use the turtle Python module so you can learn visually. No matter how old you are, no matter how young you are, visual learning is one of the best ways to learn. And to visualize your code it's amazing 'cause you get it right away. Now I wanna take this time and now allow you guys to do an actual project. So up to this point, we did a lot of fun stuff. And I gave you some basic exercises like make a square. Now I wanna give you a little bit of a project. It might take you long, it might not take you that long. It's not that much code at all. It's, you just have to put a lot of these ideas together. Here's the project. I want you to make a circle out of squares. What do I mean? Just to be clear about what you need to do in the project and how it should look like, I've designed this demo for you guys. So check it out. Make a square turn a little bit, make a square turn a little bit. Make a square turn a little bit. Make a square turn a little, okay, you get the idea. You keep going like this and eventually you get a circle. And if you notice and if you look really into it, you can probably keep looking at this forever. It's fascinating. So, I love this thing. I can myself look at it forever. Pretty enjoyable. Okay, so I'm gonna stop it right here. You guys now have fun with it. Try to make something like this, okay? It's not too complicated, it's really simple. Make a square, turn. Make a square, turn. It just helps you put all the programming concepts we've learned so far. Variables, using the turtle module, the looping structures and arguments in functions and the range thing that we looked at in a loop. So good luck, and I think you can do it. All right, I will see you in the next video where I'll provide you with the solution. (upbeat music) Okay in the last video I proposed a challenge to you. Make a circle out of squares. So hopefully you gave it a try. Hopefully you put it in the comments below. Okay so if you're watching this video right now, whatever you got, I don't care if it's crap, I don't care what what it is, I want you to put it in the comments below. Okay so whether you go to, whether you go to my website at cleverprogrammer.com and put it in learn Python for beginners, we have a comment section. So for example, you can go into one of these videos. I'm gonna have this video up there as well when you guys come to watch. I want you to put your code in the comments below. I will look at it personally and one of our members will also look at it okay. So right over here, or you can just put it on the YouTube channel. That's totally fine as well all right. So let's get to it. First of all, what I wanna do is, I have the square function, which is really cool. But it's really repetitive, right. It does, I mean, if you can see all a square is you move forward and you turn right. And you repeat that four times, right? So why do we have it here like this? This is really bad. There's a lot of redundancy in our logic, right? Like, if you were telling your sister, your brother, your dad, your friend, whoever the steps, you would be like, move forward, turn right and then do that four times. That's how you would tell it to them, okay. You wouldn't say move forward, turn right. Move forward, turn right. Move forward, and then turn right. And oh yeah, move forward and turn right. Right so you wouldn't do that. So if we look at this actually we're doing this step once here, then we're doing the same step twice here. Then we're doing the same step three times here. And we're doing the same step four times here. What does that mean when we're doing something over and over again? Well it sounds like a loop. So I want this thing to happen four times. How do I said do something four times in Python? I just say for something in range. So I'll say for i in range four, that's it. This will do that thing four times. And I'll simply go here and remove that code. Okay so already our code looks much nicer. And that's a way better way of making a square, okay. So notice it still takes length and angle. So if we're making a function, we need to parse those variables length and angle, right. So then length here and angle here can become those. So we want like, let's say length to be 100 and our angle to be 90 degrees. So square makes a square. Let's verify our hypothesis here and remember this function, all functions, you gotta put open close parentheses after them. And you gotta parse in an argument for this function here. So we're gonna say 100 for the length, and I'm gonna say 90 for the angle. Okay, I can also say it like this, just so the code is more clear what it's doing. Okay, I can say it like that. But let's keep it short and sweet here. Let's run it. And that should make a square, right? It made a square, great. Now what we're gonna do is, well, we want to keep making squares, right? So we know we're gonna put it in some kind of loop. Let's say we wanna do it 100 times, okay. All right, so I'm gonna put it in the loop because I wanna make a lot of squares. And each time I make a square I wanna turn. So let me first get out of this loop. And let me do this. Let me say my turtle.right, 90 degrees okay. And let me do this now. And you'll see that as soon as I make that I turn a little bit, actually not 90 degrees, let's turn I don't know, 10 degrees. 90 degrees is silly. So I make a square and then I turn, just like that. I'm ready to make another square. So let's do that. Let's make another square right here. I make a square I turn a little bit, I make another square. Okay, you get the idea. Now we need this process to repeat a lot of times. So we need to make a square, we need to turn right, right. So it's really this step. And we wanna do it again and again and again and again. So sounds like we need to put it in a loop. Let me uncomment that line, hit tab to indent it under the for loop. So it knows it's a part of a for loop. This variable here does not need to be called i, by convention in the world of Python, we usually call it i. You can call it bananas, you can call it that. You can call it an underscore. You can call it whatever you want, okay. Just a little bit about variables. Variables can't start with a number like five or something okay. So, perfect. This looks pretty good. Let's give it a try. Okay, I make a square, I turn a little bit. I make another square, I turn a little bit. I make another square I turn a little bit, beautiful. That's looking really good. Let me close this. Let me make the speed really fast. So let me make this, say turtle that's speed zero and that makes it run really, really fast. So it's going and going and going and going and going and going and going. But now notice the problem. It's not drawing anything new, but it's moving. So it's moving a lot, but it's not making anything new. Where does it stop making new things? Let's check it out. Let's say we wanna do this how many times? Let's say we wanna do this 30. Or let's say we wanna do this loop 40 times. Let's check it out. So let's see where it stops making it new. So the last four times it ran, you guys probably didn't catch it. But the last four times that ran it actually didn't make anything new. So the 37th time it ran, it didn't make anything new. 38th time, 39th time and 40th time. So what the heck happened? Well, here's what happened. 360 degrees right. Though that's the number of degrees in a circle. So a circle has 360 degrees. Now we want to make this circle like really nice and dense. We don't want it to be how was, our circle look pretty empty. And the reason is, okay, so the circle has 360 degrees. Now if we're turning 10 degrees every single time, right. What's 360 divided by 10? That's how many times we can go in a direction if we turn right, only 10 degrees. Is 360, divisible by 10? And the answer is yes. And the answer is actually 36. Right 360 divided by 10, obviously, you don't have to be a math genius to know that, but you get back 36. Which means 10 perfectly goes into 360. And isn't that awesome? That that's the number of times you can actually make unique squares. If you do, if you choose 10 degrees. It's beautiful seeing the visibility in visualization. So even math starts to become beautiful when you put it in terms of computer programming you guys. This was one of my most favorite discoveries. And I still get excited when I think about this. I think that's pretty freaking awesome. What can we do? Well pick a number that is not divisible, right. That 360 is not divisible by. So how about a great number? I don't like a prime number. And what's a prime number that's really close to 10? 11, so let's pick 11, right? Because 360 divided by 11 gives you something that's not divisible, right? Like 360 is not divisible by 11, 11 is a prime number. So let's run this bad boy and check it out. And let's run it 100 times right, not 40, 100 times. And let's check it out. It's turning 11 degrees. Every time it makes a square. You'll notice that it almost never repeats itself. And they'll probably never repeat itself. And it just keeps making the circle darker and darker and darker and denser. And that's how you want it, right. Look at how beautiful that looks. Dark in the middle and starts to get lighter on the outer edges. And those webs are interweaving. And it's gorgeous, right. Bonus project I can give you guys for this is bring some colors out, make some cool designs. Go look up trinket.io. Go to that website, check it out. Look at some examples. Paste your code below. You can help out other people. I can help you out if I look at your code, you have some errors or it looks really cool, and maybe I can help you make it look even better. Or maybe you'll just make something that'll blow my mind because I haven't made such beautiful circles out of squares. Anyways, I hope you guys enjoyed it. I hope it makes sense. Please like the video, subscribe. I'll see you in the next lesson. (upbeat music) Hey guys, how's it going? So in the last video, we talked about doing projects, right? So we go in our the solutions of some projects. In this video what I'll talk about is dictionaries. They're very important in a lot of programming languages and other ones and C++, it might be called maps. In Python is called a dictionary. So let's see what it is about. Okay, so essentially the idea behind dictionaries is to map keys to values. Hopefully that defines everything right. Now basically, that's a very cryptic definition that I gave you if you don't know what it is. Yeah, it maps two things. Okay, so anytime you have a relationship between two things, you wanna use dictionaries. And when you don't have a relationship between two things, you wanna use a list. For example, if you wanna just remember a bunch of numbers, and that's all you care about, you wanna use the list. Okay so for example, I only care about a bunch of numbers like this, I want to use a list. Now what if I want to know a way where I don't know, I use my cell phone, right. I use this thing over here. And using this thing, I can look up a person's name. And based on that person's name, it gives me back their phone number. Right, or if I type in their phone number, it kind of goes the other way around, whatever. How can we do that? Well, that's the beauty of dictionaries, my friend. So you're going to learn something very powerful today. So let's go at it. Let's say I wanted to make a phone book. Right, with what we know in list. I mean, can you think of a way how you might do it? I don't know I mean you could store numbers, right like this as a string. And then store the second number as a string and go 4564433 right. Something like that, whatever. These are not, clearly very silly numbers, but okay. And then you can say phone book and give me the zeroth number. Phone book, give me the first number. Also, notice we're using something different for coding. We're using repl.it, right? So it's actually spelled REPL.it And the beauty of this is that it teaches you how to code while, it makes it very easy for you to code. You can use this without having an actual working environment, locally downloaded onto your computer. You can just run your code on fly. And what I'm going to do for you guys is once I'm done with this session, I'm gonna take this link and paste it into the YouTube description. And that way, you can actually get access to these notes directly, okay. So you'll be able to come to this link and get, for example, the link right now is this. Okay, by the time we're done with this video, the link might be different. And I'll post the most updated link for you guys in the YouTube description. Okay so the website is REPL.it. And you can pick programming language, Python, for your programming language, and then just code here. Okay so let's check out what this does. Let's make sure to add print. Let's check it out. So you can see you have one, two, three and four, five, six, right. You printing out the zeroth element and then the first element of this list. That's great but I mean, it's not really fun to remember names as numbers, right? 'Cause you're not gonna go, oh, I'm going to call you zero, Johnny. And I'm gonna call you one, Bob. And then every time you have to look at Johnny's number, you're gonna type in zero to get back Johnny's number. Or one to get Bob's number, that would be terrible. And what if you had stored hundreds of people in your list, then it gets really complicated. But now let's use dictionaries. Here's how dictionaries work, okay. Let me describe right here in notes. Dictionaries, okay, here's how they work. You have some dictionary, we will call it a dict, okay. And the store key value pairs. So if you put any key gives you back the value. Okay, and how you store things into a dictionary is like so. Your key goes here and your value goes here. Okay, let's said a key one, value one. Then we can say key two, value two. Okay, and you can keep doing this all day. All right, now let's create a dictionary. Okay so let's create our example phone book. So I'm going to say Qazi, which is my name, which is my last name. but I go by my last name pretty much everywhere. So we're gonna take the string Qazi as the, Qazi is the what? Is that the key or the value? If you said, key good job. And we're gonna store the number 1234567890. Now notice that I'm storing this as a string and not an actual number, like an integer or something. Why do you think that is? Well think about it. If I remove the quotes from here, what is this gonna do? Is gonna do one, two, three, minus four, five, six, minus seven, eight, nine, zero. And I'm gonna end up getting back negative 8,223. So it's actually gonna end up storing it like this. That's not what I want. I want the exact number. So usually when you want things exactly how they are, strings are perfectly good data type to use there. And now I'm gonna say, Bob, and I'm gonna store Bob's number as, okay is this a, which key is this? This is the second key and now it's gonna be the second value. I'm gonna store his number as 2222222222. Very easy number that Bob has, he gets tons of wrong calls. And he gets very annoyed. Now to make it a little bit nicer on me to read this dictionary. Sure, I can have it as a long one line. But as you can imagine as we begin to store multiple people, it's gonna be spilling over to the right side. So what I wanna do is make it easier on my eyes and make it easier to type. So I'm gonna go to the start of the line, hit Enter. And Python knows what to do with it and where to put it. And I'm gonna go to the start of this line and hit enter, okay. I'm also gonna go here and hit Enter. And I'm gonna go here and hit enter. Okay and what this does for me is it just makes it easier for me to read. Okay, kind of like this. And I can just simply start putting things in here. We can leave that there, that's not a problem. We can leave that one right up there. And I can put in another person, right. Cat, cad, cat, let's just do cat. Call her cat. Let's say her number is 3333333333. Okay and now what I can do is I can do phone book and what's the way I can get back Qazi's phone number, right? So imagine you go to your phone, your iPhone or whatever you have and you simply swipe up or down right. You go to your, where's contacts? How does contacts work? I go to my contacts and I type in let's say my name. Right, so how does it find it? And how does it give me back the actual number? Well today you're gonna find out the secret behind how it works. Okay so it takes in the key or my name, Rafi Qazi and it spits back the value associated with it. It could be my email address, it could be my phone number, it could be whatever the heck I want it to be, right. So now let's go into phone book and we can say Qazi, right? That's, you put in the key and this whole thing liquefies and turns into the value, okay? So that whole thing turns into one value. Okay so let's print it out and let's see what we get. And I'll break it down how this expression works. So we got back 1234567890. Phone book is just this whole dictionary starting with the squiggly right? So phone book is this thing right there. And I'm indexing that phone book by Qazi. Okay, so as you can see, I have this list here. And I'm simply indexing it by QAZI, okay. And once I index it what happens here? Right, once I index it by Qazi, I just get back the value. So this whole thing liquidates into that and then that result actually gets printed out on the screen. Okay that's how the dictionary works. Now, let's say I wanted to make it a little bit more complicated to where each person had, like their names and each person had their own email address associated with them and whatever, right. So we can make it a little bit more interesting. For example, let's say that I wanted to add more values associated with Qazi, I don't want just his phone number but kinda like how my phone does it. It also has Qazi's email addresses, and it also has Qazi's home address and whatever else right, so how would I do that? Well what I need to do is I need to have one key that gives me back multiple values associated with it. Here I have a key Qazi, I have a key Bob and I have a key Cat. So what I need to do to Qazi, for example, is make it give me back multiple values. Well what's a pretty darn good thing to give back multiple things? I remember it's a list. How about a list of things. So let's turn this from a bare string to a list that contains one the phone number, and then we can say two it contains one email address. So we can say qazi@qazi.com. Okay, fake email address. Let's close that down there. And okay, sweet so now we have a list containing two strings inside of it. At first index it's a phone number and then, or zeroth index rather, and then the first index we half the email address. I can do the same thing to the other ones, but let's just play around with it and see what we get. So I'm going to change this from phone book Qazi and I'm gonna say, okay. I know that once I run this line of code, what I will get back is actually this list. This whole thing is actually gonna evaluate to the value of Qazi, right. So you put in the key, look at the formula at the top right. You put in the key and you get back the value from the other side. So I'm gonna run it and let's see what we get. So you can see that we get back the value. I know that this thing is gonna turn into a list. Then I have to think about how can I access different different things from the list. Let's say my question to you was, can you get me Qazi's phone number? You would say, okay, I'll get you Qazi's phone number. I know that it's inside of a dictionary where the key is Qazi, where there is a key Qazi. And if I access that key Qazi, right if I access the key. The dict, and if I access the key Qazi I get back a list of things containing his phone number and email, right. So you're like, now I know that I have a list of things. How can I access things inside of a list? I remember how you access things inside of a list is based on the index number, right? So for example if I go up here. If I have to access the first element or the zeroth element of the list I would do this. And this gives me the first element of the list. Where asked for a dictionary you would actually put in for a dictionary you would actually put in a name or something. Something that's nice and easy to remember, in a list, you use numbers. So then you go, okay well I know that Qazi's email address is at position one, right? This is index zero, and this is the index one. So if I asked you the question of get me Qazi's email address, you know that this whole expression evaluates to a list. Well then you can just say one, right. Just like this thing over here. And let's change it to zeroth element. Let's just to be very accurate. Let's hit that and you can see that I get back Qazi's email address. Well, what if I wanted to get Qazi's phone number, I would just change this to a zero. And you can see that I got back that's the same thing. Now let's say I wanna do the same thing for Bob right. This is the phone number, this is bob@bob.com. And then we have, let's turn this into a list of things and let's call it cat@cat.com and we have those closing, I'll have to make sure that I close my quotes here, and close the quotes there. Okay great, so I have a phone book. Let's get the terminology right. Let's just practice with the terminology. It's good to say it over and over again. I don't care if I sound crazy and you shouldn't care that you sound crazy. But understand the terminology because it's gonna help you be able to research it better, understand it better, synthesize the information better and be able to write better code ultimately because you will understand all of the data structures. Whereas if you just keep mumble and hand waving, you're going to get very confused later on. You might be able to get past some of the stuff. But then when we get into list inside of dictionaries, inside lists of dictionaries. Is going to get very complicated, you're gonna be like oh man, I wish I learned the terminology when it was nice and easy. So let's just talk through it. I have a dictionary that contains how many keys? Three keys, what's each keys name? Qazi, Bob, Cat. What do each of the keys contain? Each of the key contains a value and that value is a list. Okay, good, each key contains a value, which is a list that's good. And how many elements is each list contain? Each list contains two elements, right as we can see right here. So now if I wanted to get a Cat's number, I could do Cat and I can say zero and I get back 3333333333. So let's give it a run. And you can see on the right hand side, that's what I get back. Okay, so I will leave this here for you guys. And I will link you guys to the code so you guys can go and play around with this stuff as well. Okay, that's it for dictionaries and we will get into it's better use cases later on. For now you're gonna watch Boolean algebra jujitsu after this video. Great job guys, take care. I will see you in the next video. (upbeat music) Hey guys, what's up? This is Qazi. This is my third time making this video. Last two recordings got deleted and they were really long. I'm gonna try to make it short and sweet. Right it only lets me make them better. So that's what I'm actually excited for. Anyways, in this video we're gonna talk about Boolean algebra jujitsu, okay. Before we get to that, I wanna just take a second to show you guys, check it out. The official, Clever Programmer premium short sleeve tshirt. Custom designed let me know what you guys think. And I'll put in the link for you guys below. So if you guys wanna actually get it, you can order it. Some feedback would be great, if you think it sucks or if you think it's good, let me know I would love to know that. Let's get on with what we are trying to cover for today. Okay so, I wanna talk about Boolean algebra. Right, so what is it and how does it work? And why do we need to know it? It's one of the most important things in programming. That's it, period. In all of computer programming languages, anything that you use. Even in electricity, it's super important. At the end of the day, everything turns to zero, one or true or false. Okay, so we have false or true. Notice how there are special statements in Python, which is why they highlight into the color orange. And then it doesn't give you an error, Python like understands what true and false is. For example, if you do true like this or false like this, its gonna give you back an error saying, I have no idea what you're talking about. So they're like pre existing things that are built into Python. Now why would we need to ever use this? Right, why would we need to use this? Well, let me show you guys something that foreshadows a little bit into maybe our one of our next few videos like conditions of control flow. Where I'm going to talk more about if statements. But let me just foreshadow that and show you guys so you guys can see from a bigger picture perspective how it works, and in turn that would make you want to learn what it is and then we can get down into the nitty gritty details, cool. So for example, an if statement works like this. You have an if statement, followed by some condition, which does not need to be in parentheses but I'm just putting in parentheses. And that condition evaluates to a true or false statement. Okay, and based on that, right. Based on this, then this. So it's like if that, then this, okay? So if Johnny made more, if Johnny worked overtime and he worked more than 40 hours, then I want to pay him overtime. Okay, so for example, the only time this block of code runs is if Johnny made more than 40 hours. Which means it needs to value it true. You need to have a true here. Okay, so let's say if true print hello, okay. And notice that this block of code runs because the statement is true. And then this block of code runs, right. This is the if condition. It's not very smart what I'm doing here is kind of stupid. I'm just hard coding true right in there, which is not what you're gonna be doing most of the times. But I'm just doing this to like illustrate how it breaks in it's a bare bones skeleton, so to speak. And let me show you if false, and then see what happens print hi. And you can see that this part of the code did not run because it goes, oh, false. It's false so I'm not gonna run it, not gonna do this right. If false then don't pay him overtime or whatever, right? I could have anything else here. I just have print hello. But the implications of this are far more than printing stuff. It's doing actual stuff, right. Now another reason why this is very important for you guys to learn is imagine if you were hired and you were working in a company and you had to design a system for paying employees. Well, if you do your logic wrong, then you might be paying every employee over time. Which means that the company is paying way more money to its employees. Like, for example, you might write the logic wrong and employee that works three hours might be getting paid overtime for all of those three hours. The company has to pay a lot more money. And then the company has to fire a lot of people 'cause they're like, well, there's a lot of money going out of our pockets, right. On the other hand, you could have the case where no employees getting paid over time, even though they worked overtime, over 40 hours. So with the great power, right as being a programmer, comes great responsibility. So that's why you wanna learn this stuff really, really well. So you don't make these big mistakes and you can help out companies and you can help our clients or whoever, right. So we have this case, false print hi. That's what happens, but now let's do something more interesting. So I'm gonna introduce you guys to something called comparison operators. Okay, so you guys might know that equal equal sign, it compares two things together. Note one equal sign that makes something something. Two equal signs check if one thing is equal to another thing. Okay? So I have two equal signs, I have less than. I have greater than sign. I have a less than or equal to sign. I have a greater than or equal to sign. I have a does not equal sign. Okay, these are your comparison operators. So what do I mean? Five is equal to five, it's gonna give me back a true. Right five is five. How about if I said five does not equal five? What do you think is going to give me? False, right, that doesn't make any sense. How about five is greater than five. Does that make sense? No, it's not. Five is less than five, nope. Five is less than or equal to five. It should give me back a true. Five is greater than or equal to five. And it also gives me back a true because it's not greater than, but it is certainly equal to five. Okay so that's how this works. And look at the bottom and breaks down into true false, true false right. Now let's say we wanted to pay Johnny more if he worked, going back to our original example. Let's say we wanna pay Johnny more if he worked extra hours, right? If he worked 40 hours or something. So how would we check that condition? If you work more than 40 hours? How would we check that? We have to make that condition, we have to check that condition? So these are all called conditions, because at the end of the day they evaluate to a true or false, okay. So this is a condition and evaluates true or false here. So let's make a variable called Johnny hours work. And let's set that equal to 40. And now let's check it. Johnny hours work is greater than 40. So I'm like asking my computer a question. And they'll say false. Okay, so I know I shouldn't pay him overtime then right? Because I got back a false. What if I did, is he making, is he doing more hours and 30? Okay, good, so at least he's working right? He's not just not doing anything. Okay, so he's worked more than 30 hours, but he has not worked greater than 40 hours. Okay, has he worked greater than or equal to 40 hours? It says true. Since I know he hasn't worked greater than 40 hours then in this statement greater than or equal to 40. I know that he's worked equal to 40. But let's just double check and say equal equal 40. Okay cool, so we now know that Johnny has worked exactly 40 hours. So we can't pay him over time in this case, but let's just try it out anyways. Let's do if Johnny, let's turn it into like, like a conditional statement. Which again, we're get more into later. Is greater than 40, right? Then print pay him overtime. Oh, looks like we're not gonna pay him overtime 'cause he has worked exactly 40 hours. Now let's make Johnny's hours 41 hours. Let's say he's worked 41 hours, right, so overtime. Now let's run this. And you can see that it says pay him overtime. So how could this translate for you? Oh, first of all, let's just break down exactly what this turns into, right? So we have this statement, if Johnny works greater than 40 hours, how does this actually work? Well, what is the variable Johnny hours work? We made it to 41 right? 41 is greater than 40, is that true? It certainly is, 41 is greater than 40 and we get true. And then we get into its most bare bones skeleton structure which I showed you guys up at the top right here. And it's simply a just a true at the end of the day. And then this block of code runs. Okay, and if the same way, the reason why this line of code, for example, like let's say, I do this right. If you work greater than 42 hours, why does this line of code not work? Well, again, Johnny hours worked is 41, is 41 more than 42? Of course not so this turns to false. And when this turns to false we get back, We actually get back nothing 'cause this line of code does not run. Okay, that's the bare bone, like that's the main reason why we use Boolean operators. There are lots of other reasons that you'll see as well. In the next video, we're gonna get down more into how Boolean logic works. So for now show you guys comparison operators. In the next video we're gonna talk about Boolean logical operators. Okay so for example, we're gonna talk about and, and we're gonna talk about or, and we're gonna talk about not. All right, and how all of those things work in sync with each other. That's it for this video, I'll see you guys in the next video. (upbeat music) Guys what's up this is Qazi from cleverprogrammer.com. In this video we are going to talk about Boolean logical operators. So in the last video we covered the basic jujitsu of Boolean algebra. Kind of like what is the basic, most fundamental ideas behind Boolean algebra. And we saw that everything that we talked about converse either true or false. Right so here, we have all these things converting to true or false. That's effectively what ends up happening at the end. So now let's go and talk about the operators that I was mentioning. Okay, so before I start giving you the rules and how they are defined in the world of electricity, or logic gates or programming for that matter. I wanna just give you guys an intuitive sense of how it works, because that's way more important than memorizing these, truth tables for a lot of these cases. So let me get to try to give you guys an intuition. So let's start off with and, okay. We're gonna start off with this logical operator. As you can see it's a special word in Python, which is why it highlights orange. If you write and with two d's it does not highlight to orange. And let's talk about what it does. So let's say I did, five and five, it will give me back a five. And here it's not really making sense. Let's try true and true and let's see what it returns. It return true. Now let's try something like true and false. Let's see what that returns, that returns false. So now let me try to give you guys an intuition of how it works for and. Let's say there are either two things. I asked you, do you like poison and do you like pizza? Right? If I asked you that question, and you could only answer with yes or no, what would you say? Hopefully you would say false or no, right. And then I would be, if I asked you to elaborate, then you might say, I might like pizza, but I really don't like poison, right. So the idea behind you not liking poison, but you liking pizza, that whole thing. When you combine it with an and, that whole thing becomes false. Because there's one of those things that you don't like, so you will, you can't say yes to the whole expression that I gave you, right? For and both of the things have to be true for you to say yes to it. Like if I asked you do you like pizza and ice cream? You say, yeah, right. But if I tell you like jumping off of the cliff, or do you like doing your math homework a lot? And do you like writing essays? In that case, probably both of the things you might not like doing. Your math homework and writing essays. And you might say, no, I like doing neither of them. Or for short you would say false. Right, so I can say something like math homework. Let's set it to false, meaning like you don't like it. And let's say long essays, is equal to false. And now let's combine the two. Let's say math homework and long essays. You get back false, right? Math homework is really false and long essays are false. So false and false gives you a false. Now let's try pizza. And let's say we like it, for my friend Danielle, he loves pizza. So if you're watching this video, that's who I was thinking of when I came up with this example. Let's do ice cream and let's set that to true meaning we like both of them. And let's do pizza and ice cream. Right, and you get back true. So even thinking about it logically, whenever you combine something with an and, both of those things are now combined. So when you're answering, you're answering for both of them even in real life. Both of those things have to be true. Johnny, go throw out your garbage. And then you get to play, right. So in that case both of those things happen to be true, if you throw out the garbage, then you kind of get to play. It's a little bit of a contrived example. Is more of an if then statement rather than an and. Okay, how about this even better, Johnny throw out your garbage and do your homework, and then you get to play. Okay in that case, the only way Johnny will get to play his game is if he has thrown out the garbage and done his homework. Much better, now I can sleep better. All right, that's the breakdown for and. So now let me just give you some problems and throw it at your face. Okay false and false. Quickly, what do you think is gonna be? You should have said false. False and true. Remember, one of them is false, both of them end up being false. Because we can imagine that this is poison and this is pizza. And you can't stay true to both of them because there's one of them that you don't like. For it to be true, both of them have to be true. What if I gave you true and false? What if I gave you true and true? What do you think that would be? Okay, hopefully you're trying to get, you're starting to get a little bit of sense of this. Why this will be important later on is once we get to the conditions of control first action, which we should be getting to in the next video. In there, we're gonna be talking about how you can combine an if statement. Use an and to check two conditions, and then the block of code runs. So if Johnny homework and pizza or and, I don't know, throw out garbage. Then this code here runs, okay. Obviously, I'm gonna hit syntax errors right now because I haven't defined Johnny homework, I haven't defined throw out garbage. And you can't write stuff separated by spaces. And I don't know who writes capital variables. Only if it's constantly but we'll get to that later. All right so now let's go to the or side of things. What if we combine two things with an or. If I asked you, do you like pizza? Okay, for sanity check, assume you like pizza, even if you don't. Okay, so just to play along, just imagine you like pizza. So if I asked you do you like pizza or doing homework? If you had to answer that with a true or false, what would you say? Do you like pizza or doing at homework. If you could only answer with a true or false or yes or no, you should say yes. Or you should say true. Because there's one of those things that you like, and I asked you or they're not connected with each other, right? A or B. So let's now, and let me show you guys this in code. If I do false or true, check out the you get back. You get back a true statement. Right if I do true or false, I get back a true statement. And if I replace this with something that we understand better, let's say we don't like poison. Poison is equal to false. And let's say we do like pizza and we already have pizza as true, but I'm just gonna do that again. And now let's write this statement over here using pizza and poison. Sorry pizza, or poison. I misspelled poison, but in one of my older videos, I had it there. So don't worry about why it figured out what poision was. But yeah let's just use this poison variable that we wrote here. So you can see that we get back a statement that's true because one of the things is true. And in this case, that's pizza. So for an or statement to be true, only one of the things have to be true, right. If I asked you, do you like ice cream or pizza, you would say, true. If you could only answer that with one thing. Just like if, you know, again, we take Johnny or our son, Bob. And we go, Bob, either, if you do your homework, or you throw out the garbage then you get to play. So he just goes, oh sweet, I'm just gonna throw out the garbage. So this way, he doesn't have to worry about doing homework. He decides to only do one of the tasks and then he can play the game. But what if he went and tried to be extra nice and threw out the garbage and then went and did his homework. Would he still would, us being his dad or mom, still allow him to play? Of course he did both of the things, great. That's extra bonus, but for him to qualify as a player or like go play his games. He really needs only one thing. That's what the or does in our real life. And so that's what it does in programming as well. So now let me just throw some examples at your face and you try to figure it out. True or false, what do you think I'm gonna get, quickly? I'm gonna get back a true only, one half one of them has to be true. What if I did true or true? What am I gonna get back? True, obviously. What if I do true or sorry? Let's do false or false. True false statements. Do you like poison or homework? You're gonna say no, none of them. There you go. So that's a little bit of a breakdown of or, and if I wanted to break down not, for you not is a very simple. Not is just something that doesn't happen. Okay, so it's just an indication of something. So if I said not true, what do you think I'd get back? I get back false. If I did not false, what would I get back? True is just a negation. So if I do something like not true or false, what do you think I'm going to get back? What is this expression going to validate to, true or false? Remember for something to be true in the or, combined with the or Boolean logical operator, only one of the statements has to be true. So here we do have a true. So true or false evaluates to a true and then right, this pretty much becomes true, and I'm calling not, untrue gives us false. So now let's just run it. Okay, and as you can see, we get back false. So what I'm gonna do for you guys on cleverprogrammer.com is if you guys go to submit your exercises here, what I'm gonna do is I'll have. Or sorry if you go to do the watch the video course on my website, I will have exercises here for you, where you can kind of drill and kill how true and false in this stuff, Boolean operators work. That's going to be very, very useful for you guys. So then when you're writing your evidence statements, you'll understand what you're doing. Okay, but this is kind of, we just need a basic understanding of it. Some places go really crazy in depth into it, like creating things like not true or false, or true. Just combining it and making it into a, like these can be good exercises for you to figure out. But realistically, when you're writing code, you're not gonna be doing stuff like this. So if you can figure this out in your head great, but like, you're not writing code like this most of the time. So I wouldn't wanna worry about it too much. But if you wanna go ahead and give yourself some exercises like this to do, or come to my website where I'll have some exercises for you guys to do, that would be great. And before I conclude this video, let's go back to here. I have put together a truth table for you guys. Or rather, it's on wikimedia.org. So I didn't put this together, but I have an image. I'll link you guys that image. And you can see how the truth tables work. So in the A column, we have some statement. Imagine it being pizza, right? We have that statement. And B say some other statements. So we don't really know what these statements are for now, but you can imagine them to be whatever you want. So let's say we have some statement A and some statement B. If A is false and B is false, then A and B, you get back false. Right, remember and. So if you have, again, A being poison and B being homework, poison and homework, you get back false. You like neither of them. And if we have A or B, since both of them are false, that's still false. And not A is just the opposite of that, you get back true. And same thing over here we have false and true. False and true gives you back a false. False and true you only need one thing to be true in or statements, you get back a true. And then not a which is saying, opposite of A, since a was false, you get back a true. Okay so one thing I need you, want you to notice about and operator, and or operators, if you look down the column of the and operator, you'll only see one true case. And the reason and only reason why it's true is because both of the statements are true. Okay, that's the key thing to remember. Both of the things are true. And if you go and look in the or column, you'll see the or being false only in one case. And the only case is false is when both of the things are false. Okay so notice the key distinction between the two. Okay that's kind of all you have to know for Boolean stuff. And I'm not gonna go into the next video with the really long nested Boolean statements. It's kind of useless. We don't really think that way anyways. And we're gonna get into conditional and control flows. So I will see you guys there. (upbeat music) Hey guys, what's going on? My brain is about to blow up. I've reading this book, called "The Little Schemer." And it's about this programming language called Scheme. And in this programming language, everything is done really difficult and a very difficult way. And I spent eight hours studying it. So my brain is like, fried. But I'm excited to take a break from studying it and get on with teaching something about computer programming in Python. So we covered in our last video Boolean. And we talked more specifically, we covered the Boolean logical operators. We talked about and and we talked about or and we talked about not. So another thing I wanted to mention to you guys, I had it open here so I don't forget. If you guys are on my website, you can write code directly underneath while you're watching the video. So you can write something like print five or whatever and hit this and then it will run it and actually give you the results. So if you don't, if you're having problems running your code or you just want somewhere easy to run it? Well, you can go here and watch the videos and run it at the same time. Back to where were. Okay, so as you can see, we covered a lot of this stuff, right. With and, or not. So now let's do some examples where we combine our conditional control flow with our Boolean logic, okay. So this is what's gonna tie it all together. This is what was gonna allow you to make powerful games and do powerful things right now. Okay not in 100 more videos. Not reading one whole, another book. You can start to build games and functional programs, doing what I'm about to show you, okay. So let's get to it, so you saw I showed you, okay you have Boolean operators like you do true and false, and you get some result. Now, I also showed you how you can have some examples like Johnny homework and this and that this code runs here. Okay, I showed you that at the top. So let me just bring that down. Whoops, the whole example. This is not real code. This is just, this is gonna give you wrong answers for now. So now let's try to do those things where if you had an employee that was getting paid over 40 hours. And you wanted to give him overtime pay, again let's tap it all in here. And let's see how that would work. So if I did, Bob hours worked, and I said, okay he worked, let's say 40 hours. And if I said, if Bob hours, greater than 39, then print, he worked overtime. For some reason, we have less than 40 hours as overtime. But whatever, nevermind that. He worked overtime, so let's see if that prints out. If it does print out, then that means he worked overtime. And as and as you can see, Bob hours worked were 40. 40 is greater than 39, so that part evaluated to true. And then you got back to statement. Now what if we wanted to make it a little bit more interesting? Let's go back to the example of the kid where he throws the garbage. And he does his homework, right? So for example, let's say Johnny homework is equal to true. Meaning he completed his homework assignment. Now let's say Johnny, whoops, Johnny throw out garbage. And let's make that also true. So he's done both of the things. Now let's see if he gets to play a video game. Okay, let's let's see if he gets to play his Xbox 360. So if Johnny homework, right, dad says if Johnny does his homework. And Johnny throws out the garbage, whoops I'm sorry. Then, Johnny can play Xbox 360. Right so if that statement prints out he can play Xbox 360. And I don't know why I'm running Xbox 360, I feel like I'm living in 2005. Xbox One has been out and I'm pretty sure in the next few years they're gonna bring out the new one. So let's change this to Xbox one. And let's hit enter. So it printed it out. Johnny can play Xbox One. How did this work? Johnny homework evaluated to a true statement. Johnny throw out garbage evaluated a true statement. The only time you get back a true when you combine something with an and is when both of the statements are true. So true true and we got back that, right. Now, just for some little exercises here and there. What if I did something like not Johnny homework? Oh, whoops, Johnny homework, or Johnny throw out garbage. Right what do you think I would get here as a result? Let's think about it. So if you guessed it correctly, good, pause the video. Or let's try to figure out together. So not throw out garbage, not true, right? Throw out garbage not true gives you false. And this part is true. So you essentially get true or true. And then not true or true gives you back true. Because for an or condition to evaluate to true only one of the conditions have to be true. And then calling not on a true statement gives you back a false. And hence we get a false okay. Again, I'm not gonna lie so much on these contrived force Boolean examples, 'cause your thing is never gonna get like that. And but it's just good to know how it works, right? It works through the inner parentheses, inside of the parentheses first, and then it goes outside of the parentheses and starts to evaluate things. Okay, so you can see we were able to put things together. Now imagine if you were making a game of rock, paper, scissors. Right, let's rock, paper, scissors, right? I can say if human picked, let's say a rock and computer picked scissors. Now I can say if, now I can say, let's see what can I say. I can say something like if human equal equal rock and computer picked scissors. Then who wins? Right, who gets the point here? So I am going to say that human score is equal to one. Okay, so human pick rock, computer picked scissors, right? And rock, paper, scissors just in case you didn't know rock beat scissors. And now let's check the human score. And you can see that I got back a one, okay. So that's why if conditions are so important, we can also start to tack them on. Okay, so let's say that, let's say if human picked rock and computer pick scissors. If this was not the case, what if there was some other case? Let's say computer pick something else. So let's say computer is bananas, right. So if I write this line of code, how can I check for other things. I can say, whoops. I can say else if, I gotta get out side of the if statement. I can say else if computer, sorry, human picked rock and computer picked bananas. Then you can say I don't know, computer is equal to, computer score is equal to zero. And human score is equal to zero because bananas is not really a valid thing. So you get back both got zero. And then it says something like print. You can't pick, you can't pick anything other than rock, paper or scissors. Right, something like that. And let's hit it. And so you can see that first at check this if condition. It checked if human is equal to rock. Well, human was equal to rock. The only way this statement will run if both of the statements are true. That's what the and forces you to do. If we had an or here, what it would do is it says if human is rock and computer is, scissors. Okay, so in our case, it would go is human equal to rock? It would say true. And it would go or computer equal scissors. It would evaluate that to false because bananas, bananas right there does not equal scissors. So would go true or false. It would evaluate that as true because true or false is true. And it would go okay, human score is equal to one. Okay, but we don't want that, we want both of the things to be true. If human picks rock and the computer picks scissors at the same time, that's when the human wins. But in this case, computer picked bananas. And we said if you pick bananas, if that happened where human picked rock and computer pick bananas, we can say that you can't pick that, you gotta try again. Now why our or statement is useful is imagine if, I mean, do you care who picks bananas? Do you care if computer picks bananas or human picks bananas? Should you stop the game if either of those people pick bananas? Yeah, you should, right. You should stop the game and started again 'cause bananas should not be one of the options. So you don't care who picked something, that's the wrong one. You just care the wrong one is picked. That's why you would use a or. You would say if human equal equal bananas, or computer equal equal bananas. Then friend blah, blah, blah, blah, blah, right? In this case, it won't make sense. But then whatever, right. We print out the this line of code. Else if notice the else if, it's used to connect these. If you wanted to actually write it as, I can show you that later. But if you essentially wanna write it, what you have to do and you're writing it or these three dots aren't there, right. You have three dots that are showing up here. So let me bring down this if then, whatever statement down for you. So if you ever have that case, where these three dots are, these three greater than signs are there, then you have to put the else if, not at the same indentation level as an if. But if you're doing it and you're writing this code as a script, then that's how it would be. The if and else if are at the same indentation level. Okay, they're not at a different indentation level. That's very important. Otherwise, the code is not going to run. Okay and else if helps you join an if with an else if statement. Another one that you might need is else, and else does not care for a condition, okay? You see your if statement cares for a condition, and then it runs the code. Your else if statement cares for a condition. And if that condition is satisfied, it runs the code. Else does not take in condition. If none of these guys match, then else runs by default. Okay, so if condition. All right, if this condition evaluates to true, then this block of code runs. Okay, good. Again or we don't care who did the thing. We don't care who committed the crime. If any one of them did, we just break it. Realistically, when you have this case where human is bananas or, I mean, you're not gonna put every single option ever, that could be wrong, right? So you can't check for bananas or spaghetti or pizza. Well, you can check for is human did not pick. If one of them did not pick, let's say rock papers or scissors, then it should be wrong, right? So let's see if we can write that. If computer does not equal, right, we can say a rock or computer does not equal scissors. Or computer does not equal paper. Then print wrong choice. Pick again, okay. So now let's try it. Now let's say computer is equal to rock. And let's run that piece of code. And it says wrong choice, pick again. Okay, so you can see how using the or statement here ended up giving me the wrong result. What I wanna ake sure is that the computer is equal to any one of these right? So let's try it like this. Let's say computer does not equal rock. And computer does not equal scissors. Right and computer does not equal paper. Right, let me let me just go a little bit here. Make it bigger, then print wrong choice, pick again, okay. So the only way this code will run is if all of these things are true. Meaning computer is not rock, computer is not scissors and computer is not paper, right. So if I made computer is equal to banana, and I went up here and I ran this code, you can see that it checked, hey is computer rock, is computer scissors, is computer paper? If it's not any of these then print wrong choice. Okay, so you can see how powerful these combinators are, is that what I would call them. Like your logical operator, Boolean operators, right. Like and, and or you really, really need them to be able to do this stuff. Okay, to be able to do really powerful things. Okay, I'm gonna cut this video off here. Hopefully you have a much better understanding of how this stuff works. Okay in the next video, we will cover for loops. And I will see you there. (upbeat music) Hey guys, what's up? In this video, I wanna talk about for loops and how they work, okay. So we're gonna get into loops. You saw that we did a little bit a lot earlier in when we were using the turtle module. So hopefully they're a little intuitive to you by now. But now let's use them for more, I guess realistic purposes, right? Things to do with numbers and manipulation of data. So not only can you use it for visual graphics, but you can use it for anything now. That's what I'm going to teach you. So if you're making your own game, you'll be able to use it after learning these things. Or if you are creating your own script, maybe you're at a job, whatever is the case. You're going to become more familiar with loops, and it's going to help you do a lot of powerful things. Okay, so let's get started how loops work. Essentially, it's a way of doing something multiple times. Whenever you think, I need this done a lot of times, what can I do? For example, if somebody told you print out numbers from one to two. You'll be like okay, I'll just write print one and print two, good. But now what if that same person told you print numbers from one through 10. You'll say okay, I'll just write print one, print two, print three, print for print five, all up to print 10. Whooh, a lot of typing, but hey it wasn't so bad. Now let's say I tell you to print up to 1000. Could you type that? Of course you can. Would it take you maybe two hours, three hours. Maybe you'll copy paste, you'll do tricks, though it will be harder. Now if I tell you to type in a million is gonna get much much, much harder. Okay so for loop helps us overcome the burden of doing repetitive tasks. So let's try something. Okay let's say I wanna do something five times. That's how I would say, okay. I want you to look at it less from Python syntax specific perspective of I wanna zoom in microscopically. And what what is i, it's hurting my eyes. And what is range, and what does it do? And I'm getting a headache over here. And where do I put a colon or, I want you to read this as do something five times. Okay, that's how I want you to read it. Do something five times. That's what this is saying. And here, I'm gonna say print hello. So if I told you, do print hello five times, that's how you would think of it. You would go okay, print hello five times. You'd say do something five times. And that's something is print hello. Okay, I want you to get an intuitive sense of this. So then you can reproduce these and do them on your own away from the screen okay. So for example, now let's run this code. And let's see what it does. And you can see it printed out hello multiple times. Now you might be asking what is I? If you don't already know. You can call it whatever you want. You can call it banana, code will still run. What we need to do is break this one, break this down one line at a time if we need to look at it more introspectively and see what's going on. So what is range of five? Well, let's check it out. Let's see what range of five is. So I'm gonna print this out. Range of five is really a list of numbers from zero through four. Okay, so to you use loops, you need to know what a list is. Since we've covered what a list is. That's there you go. So range of five really evaluates to this. Okay, when you write, the reason why I should write list here is because Python hides it. It secretly writes it and you can't tell what it is. Especially since you're starting out, this is gonna confuse you when it says that, okay. When you get more advanced, you'll know why it says this. But for now, I'm gonna not hide it, unhide it and take out the actual form of what it looks like. And I know that if I call list it'll show you like the actual type of what it's doing under the hood. So essentially, whenever you see a range of five, you should think, oh that's just this. It's a list containing five elements starting from zero all the way up to four. Okay, so now we can try it, we can start to break all of this stuff down. We can go, okay, if range of five is really this, so range of five is actually that, zero, one, two, three, four. The first time, right. Let me write this code here. Let me let me change this hello. And let me change it with an i. Okay, and let's do that. You see zero, one, two, three, four, what happened there? So let's see, the first time we ran the code i is zero. So it prints out zero. The second time we ran the code, i went and became the second element of the list. So i became one. Then where i was here, it became one it printed out the one. Then i became two it put two here. Printed out two, then became three. Three, four and printed out four and there you go, you see all of that on the right hand side. Zero got printed, then one got printed, and two, that's why it's all separated by a line. Okay so that's really what that i there, does. Could we call this number? Yes, we can and that's actually a better variable name. So my suggestion to you, especially if you're starting out with programming, never ever use one letter variables? Never, okay. So even if you think you can use an i here or an x or y, don't do it. Take your time and pick up, pick better variable names. So I'm gonna change this with number, because number is that variable. This variable we create it on the fly. And I'm gonna say it from zero through four. Now, let me tell you something about the range function in Python. The range function takes start and stop. Okay, but it's kind of like this. If you have to think about it mathematically. It includes this point, which is why I put this here. And it goes up to but does not include the stop. Okay, so the range function takes into arguments start and stop. So if I gave it one, or let's say I gave it zero, and let's say I gave it 10. You get back let's just do two, because I'm lazy. But you get back zero, one and two. Well what if I wanted to print two from 20 to 40? Right, what if I wanted do that? Well, I can certainly write a list from 20 to 40. Right, I can go at 20, 21, 22, 23, 24, all the way up to 40. But that would take a long time. Let's use range to generate that on the fly. Let's start with 20 and go up to 41. But not including 41, it excludes the 41. So this actually translates to a list starting from 20 going up to 40. And if we print it out you can see it goes from 20 all the way up to 40. So loops are great. Now, in the next video, I wanna talk about while loops. But before I get to that I wanna tell you something. So up until now we have done a lot of Python syntax stuff. Learned the basics of Python and how it works. Programming specific syntax, where do you put the colon, where to do you do this? Now after this point, specially after the while loops, we're gonna get into exercises. And we're gonna kind of drill and kill exercises. I'm gonna make this the best Python course there is for learning Python hands down. What's lacking from a lot of the online video courses are exercises. And I'm gonna give you guys so many exercises is gonna hurt your brain but in a good way. Whereas it makes you smarter and you get better. Because without doing exercises, you will not get better. You can look at me write code all day long, you're not gonna get better because of that. You need to do it on your own no matter how simple it is. And while Code Academy and all those things are great, they hand hold you quite a bit. Which means that you're not really learning a lot of those things. Okay, so we're gonna take a break from a lot of these tutorials and do exercises, really get these ideas down. Okay, what do I mean by an exercise? Let's do an exercise right here right now. Okay, live I'm gonna leave this here for you guys, because I want to leave this link into the YouTube description. So you can actually go look at these notes, okay. So I'm gonna save this and I'm gonna leave this as notes. Print numbers from 20 through 40. Including 40, ha ha, right. Or rather, I can say through to 41. And I can say excluding 41. That's probably a better way for me to write it, 'cause that's how Python thinks of it. Okay, now let's do an exercise. Let's say that we take numbers from a list, sum them up and return them. What do I mean? If I give you a list containing one, two, three, you should give me back six. Because one plus two plus three is six. So if I gave you this list, you should give me back a six. But now let's also start adding together everything we've learned so far. Let's create a function. Okay, that takes in something and then does it. So we're gonna build up to that. Okay, so first, let's just write something using a for loop that sums up all the numbers in the list, and then returns them back to us. Okay, or print them out back to us. So let's do this, let's say count is equal to zero. So we're gonna use some variable to keep track of every number. So essentially then we can say that if, when we go through the loop, we can say okay, I want you to add one to count. Then when I wanna go through the loop again, I wanna say add two to count. Then when I go through the loop again, I wanna say add three to count. Okay, and so in the start, you'll have count being one. Then you'll have it being one plus two, so three. And then you'll have it being two plus three, so six. So you should get back six. So let's try it. So I will say for number in range. Let's say range, what will I say to range to create a list from zero to three or one, two, three basically. I would say one to four. Okay, this creates a list of one, two and three. Okay, so I'm gonna say range one through four. Okay now let's do how can we increment count? Okay, I know that number is gonna be one the first time then two, then three, that's not a problem. So number is good, what we're getting with number, but how can I increment it to count every single time? Here's what I will do, I'll say count is equal to count plus number. Okay, what does this mean? Here's what this means. This says, I want the new count to be. So the new count to be here, new count is equal to old count plus number, okay? But so this is saying my new variable count is going to be what my old variable count was. Plus number, okay. So the first time it goes through the loop, the number is going to be one. Old count is going to be zero, okay. And so it's gonna say now count is one, okay. Then when we go through the loop the second time number is going to be two. Oh by the way, this count is gonna turn to one, right. 'Cause we should redefined what count is. Then what's gonna happen is that number is going to be two. So essentially, you're gonna get back count plus number, which is gonna evaluate two count plus two. And number is two and count was one. So this is gonna evaluate three, store count as three, then you're gonna get back count plus number here again, right. And then you're gonna get, so the number is now, this time going to be three. And so you get back count, which is three plus three. This evaluates to a six and our loop ends. Okay, so let's just undo the damage that we've done. And let's check it out, let's print count. So we run through this entire loop, right. And once we're done running through this entire loop, we print out count. It should be in our, in this case six. So let's check it. Okay, and you can see that count does indeed give us back a six. Well, that's great that we wrote a for loop that runs for the numbers one, two, and three. What if we wanna write this for loop and we want it to run, right, we want it to run and sum up lists for any list given to it, any size list. It could be a size one list size, 30 list size. A bajillion list, whatever. Okay, so let's see how we do it. Okay, because practice is key, right? How do you go from conscious competence to in conscious competence. That's how Jordan Belfort says it right? The guy in "Wolf of Wall Street", the movie who "Wolf of Wall Street" was, the person who "Wolf of Wall Street" was based on. He defines two concepts, conscious competence and in conscious competence. What is conscious competence? That's you thinking about something and then being good at it? What's in conscious competence? You get so damn good at what you do that you don't even have to think about it when you do it. Okay, so how do we go from conscious competence? You're looking at your notes, really thinking about it and how does a function work? To like you just writing code is practice, okay. There's no substitution for that. The only thing that you can do is hard work. Okay, there's no getting around it. There's no, you can't watch somebody else's videos or my videos and just sit there and try to synthesize information be like, why am I not getting it. Can't just take notes all day from your professor, you have to try to do this stuff on your own. End of rant. Let's continue, so let's write this function that can take in any size list and sum it up. Okay, so I'm gonna say define function. Okay so let's just write a little note at the top. So we know what we're doing, right. A function that sums all elements of a list and returns them. Okay, that's what this is doing. That's what return has done. Let's just put a little thing here like this. All right, so let's write this function. I'm gonna say define, that's the first step to defining a function. And I'm gonna say sum list. Okay so the function is called sum list. It takes in one argument, let's make that argument be, whatever my list. Okay, that's, you can call it whatever you want. You can call it A, B, C, X, Z. But remember my rule, try not to think the name of things as one letter variable, try to make it more descriptive. So I'm assuming I'm gonna get my list or a list as inputs, so I'm gonna call it my list. So I'm gonna hit enter now. What's the next part? Okay, let's think about it. So the next part put here is I want to have a counter variable, right? That's what we had when we were writing this for loop. And I wanna say for number in, well, what's the list we're working with? Here, the list we were working with was one through four, right. Kind of like this list. So imagine if we had that list as my list. Well we know what's called my list, whatever list we get is called my list. And so just so you guys know what we're kind of doing is eventually what we wanna be able to do is say some list and parse it the list one, two, three. And this should give us back a six. Okay, so we wanna say assert that some list is, this is equal to six. Okay, so this is a nice little test for you guys, which asserts things. For example if I write an assertion, that's false, it's gonna give me back false. So if I said five is equal to six, my code is gonna yell at me. Hold on, I am obviously having an error here, 'cause I'm writing funky business. But as you can see, I get an assertion error. It goes, hey, five is not equal to six. But if I go six is equal to six. You can see that assertion gives me nice little three here, right? Which is, sorry, does give me three there? No, I'm sorry, yeah, what? So assertion basically just doesn't give you an error. Okay, when assertion works, it just doesn't give you an error. Okay, so assertion doesn't give me back anything. It just gives me back no error when it works, and it gives me a big red angry, scary looking error when it when it's wrong. So I wanna have this assertion here. And why this assertion will be helpful to me, this is gonna test my code, okay. Let's have another assertion. And et's say four, and this should give me back 10. So I'm also teaching you guys how to test your code. So once I write this function, you should be able to call the function by saying sum list, parseing it any list. In this case, this list one, two, three. And it should give you back a six, and it should give you back a 10. When you run this code, if it doesn't give you an error, that means it parseed all of these test cases. If it fails, it means it failed one of these test cases, and your code is wrong. All right, let's keep going. So I wanna say for a number in my list, right? That's the list I get. So remember, this list is gonna be, if we parse this test case, right? If we give it this test case, and list is gonna be one, two, three really, right? So let's just say my list. And what I wanna do is what do I wanna do now, I wanna go count is equal to count plus one, okay. So even though we're doing this exercise right now, I'm gonna have you guys do it again in the exercises portion, you can do it from scratch. For now, just watch along and get the concepts and how it works. Okay, so I increment count by, what should I increment count by? I don't wanna increment it by one, that would be wrong. I want to increment it by the actual number, right? So I wanna say number here. Oh I'm sorry, I wrote this wrong, I'm silly. I meant to increment it by number up there. Hopefully, that didn't throw you off too much. Okay, so but for you guys, when you guys look at the notes is gonna be fixed. Okay, I changed it to number, sorry about that. All right, so whatever count was plus the number from list. Okay, great and now at the end, we have to say return count. Okay, just format it a little bit nicer. Let's remove some of these extra spaces. And let's save it again. And now I'm going to run it. And then I don't get back in assertion error, which I didn't, that means that runs perfectly. Imagine if, okay, so if I said one plus two plus three should not give you a six. Let's say I said, should give me a seven, you'll see that it gives me an assertion error. It says hey, calling sum list on one, two, three does not give me a seven. So it should give you back a six. Okay, that's good. And just for sanity check, let's run it and print something. Let's say one, two, what should that give us, that should give us a four, right. Or sorry, three, one plus two. (gentle music) Hey, guys, how's it going? In last video, we talked about for loops. In this video I wanna cover while loops. While loops are not used a ton in, especially in Python. But they're very important and let's talk about them. Because once you start to understand the concept of while loop, then it's, for loop essentially, let you write in a shortcut. But one thing that's nice about while loops, just to give you guys a little intuition of when to use while loops and for loops. Generally you wanna use while loops for things that you don't know about, when they're going to end, how long they can run for. And you wanna use for loops for things that you know how long it's gonna take. For example, if you want me to do push ups, and you don't know how long I'm gonna get tired, you want to say something like, while not tired, keep doing push ups, okay. And then that way, while loop just keeps running till the person is tired. And then once the person is tired it stops. For loops you need to specify a range. So you would say do 20 push ups and then you can stop. So you would use a for loop for that, okay? While loops, you don't know something. For loops are better if you know something, okay. But I'm gonna right now show you a while loop that mimics a for loop, okay. So I want something to happen 100 times and then I want it to stop or something. Okay, so let's just start with simple example that counts. So let's say I want to do. Okay so let's start off with this. I wanna say my account is zero, I start off with something that is at zero. And then it keeps printing something up by one. So I'll say, how long do I want to run for? Okay, let me add at the top here in the while loop notes for you guys. Again, I'm using Repl.it. So then when I'm done making these videos, I can actually post a link so you guys can actually go through the notes yourself. So I'll put all these notes, I'll aggregate these notes and put it in the links below. And then you guys can just use them, okay. So while and then some condition. And then if that condition is true, true then body. Right or then this. And then it keeps looping. Okay, it keeps looping back and forth. But once it's out of it when the condition is false, then it ends. So it's like an if statement, but it keeps happening over and over again. So if you want if statement to keep asking some question, that's how you should think of a loop. Alright so I'm wanna say, and remember just so you know, condition example would be like, five is less than six. This evaluates to true or false. Okay, so this evaluates to true. Right, five is less than six. Another example would be six is greater than five. Or let's make it so it's like this, this evaluates to false. So conditions are everything that at the end of the day evaluates to true or false. So if you took this condition and put it in here, right? this for loop, this while loop will like run forever, because it will always say five is less than six. All right, now let's keep going. While count is less than, how many times do we want to run? Let's say you want to run 100 times. Then I want to print what the count is. And what else do I want to do? If this statement says zero is less than 100, it'll come down here and it will print out. Right, so for example in the start, I made count to be zero. So if I do this and put zero for count, and zero for count here, it's gonna print that out to the screen. And then what's gonna happen? Once it's done printing it out to the screen, we're gonna go back to this loop. And it's gonna ask, is gonna put condition here again, right? Yeah sorry, I was gonna put count here. And we're gonna have count here. Is gonna check this statement again, and again we're gonna have zero for count. Is gonna ask the question is zero less than 100? Is gonna evaluate to true, then is gonna execute this part of the code, which says print zero, 'cause count is zero and it's gonna print out zero again. Then it's gonna go back to the condition, is gonna check if count is less than 100. Since count is zero again, it's going to go back here. It's going to say print zero, okay. Now I'm gonna run it and watch what happens. I'm gonna stop it. And I think I might have crashed my computer. Hey there so my computer just kind of crashed pretty bad. But hopefully that gives you a little sense of what happens. I should have found this in my terminal. But yeah, it took it like 10 minutes to come back. And I had to rewrite the notes and everything. So let's go back. So this is a problem called infinite loops where you write something where it doesn't match the condition. Like this thing if it doesn't ever turn false, your loop is wrong. Okay, if that thing doesn't turn false, your loop is wrong. All right, because that means that your loop is going to run forever, unless you put in this thing called break. But I don't want you to do that. Generally that implies poor logic. So let's just keep going through this all right. So we want this to turn false at some point. And we don't wanna keep printing on zero every time, right. So what should we do? If we leave this at zero, it's this right? If I leave this at zero, this whole thing is gonna evaluate to false. If this is I'm sorry, I'm sorry. This is gonna evaluate to true every time. Okay, is gonna evaluate to true every single time. Because zero is less than 100. Now it's gonna keep saying true, and the loop is gonna keep running. If I change this to five, this thing is gonna evaluate still to true. If I change this to 90, this whole thing is still gonna evaluate to true. What happens if I change it to 99? Still evaluates to true. Now what happens if I change to 100? This part of the code evaluates to a false. And we are done with the body of, we're done with the loop and therefore we don't execute the body of the while loop, okay. If I needed to add something else in my notes for the while loops, is this. Go back to while loop, right? I would, if this condition is true, then do this and then go back to top of while loop. Okay, so we want this thing to turn false. At some point, here's how we're gonna do it, okay. I'm going to say count is equal to count plus one. So I'm just gonna add one to count every single time. How you read this is that what count, new count is what count previously was plus one. So the first time you go through the loop, count zero, it prints out zero at the screen. Then it prints out, then what it does is it says count is equal to count plus one. So it says count is zero plus one. So the new count is now one, okay. Then it goes here and it goes, okay is one less than 100? Yes, it is, so it prints out one. Then it goes here and this really says count is equal to count plus one. So it says one plus one is two, then it makes this guy two, right. Then it goes while two is less than 100, print out two. And what it says here is count plus one, count is now two. So two plus one, you get three. And while count is less than 100. Count, plus one. Then count turns to three, and this part turns to three prints out three. This part turns three, you get four. And then ultimately when it gets to 100, it stops. So let's just print this out. And let's run it. And you can see it went from zero all the way to 99 and then it stopped. Now what if we wanted to do something fancier? Right, what if we wanted to do something where it goes from 100 up to one, and then instead of printing out zero, it prints blast off. So I want you to try that challenge. And I'm gonna go ahead and do that right now. So you can pause the video, try it yourself and then watch this part. I'm gonna do this stuff in my terminal because I don't want stuff to freeze because it's really annoying. And then I have to redo the whole thing again, when it freezes on Rebl.it. But I will put all of these notes for you guys at the end of the day. So if I do a while loop, right. So let's try it from you go from 100 all the way to one, and then it stops. First thing I wanna do is since I wanna print out from 100, I don't want count to start off from zero. I want the count the start off from 100. Another thing I have to keep in mind and instead of increment I have to decrement. So I have to account for my comparison operator flipping as well. So I'm gonna do while count is greater than zero, right? Then do something. So I'll say while count is greater than zero, print count. And I wanna do count, is equal to count minus one. Now let's give it a try. And you can see that it prints all the way up to one and then it stops. So that's good. Okay now I wanna write a statement where once it's zero, it prints off blast off. So let's write those lines of code again. So I'm going I said this, I wanna say this guy, I wanna say do this and then decrement. But I want to do something special this time. I wanna say if count, whoops, let's just type it up again. Well count is greater than zero if count equals equals zero, I want you to print, see if you can catch there and this logic. But print blast off. Otherwise, I want you to do what? I want you to print count, right. And I want you to decrement regardless of anything. So I want you to do count minus one. So this part is not in the if else block because I want this part to happen no matter what we do. Okay, so I could either put it in my if block and in my else block, or I can just choose to put it outside and that's what I've chosen to do. And you can see it grows from 100 to one and then it prints. Why doesn't it print blast off? That's weird, right? What's the logic there that it's not printing blast off? Well, let's think about it. We have this situation here, right. We have this greater than sign here. So the only way the body of the while loop runs is if this condition evaluates to true. Well, what does this condition evaluate to in this case? It evaluates when count is zero, this whole part evaluates to false. Right when count is zero, that part evaluates to false. If that part of value is to false the while, the body of the while loop does not run. So when our count becomes zero after it gets decremented on this line, then count zero greater than zero returns false. Which means that this if condition doesn't run, therefore, the blast off never runs. So we wanna make sure that when count is zero, the body of the loop should run. This part should run it should print blast off. And after that it should not run again. So here's one addition that we need to make to our code, okay. So let's go back and type of count this. Right, the only addition that we need to, the only thing that we need to add to our code is make count is greater than equal to 100, okay. And then everything else, we can keep it the same. If count is zero, then I want you to print blast off. Else, I want you to print out what count is and then I want you to decrement count regardless, right. I want you to decrement count regardless of the situation. Let's run this. And you can see that it goes. Let me make it bigger something for you guys. And you can see it goes from 100 all the way or sorry, 100, all the way down to one and then ultimately it says blast off. Okay, so hopefully this gives you a little bit of a better idea of how while loops run. The codes will be down below. Thank you guys for watching. I'll see you in the next video. (upbeat music) Hey guys, now we're gonna start the really interesting stuff. We're gonna start doing some problems and you so you guys can actually do it, okay. This is the part where you get involved into this process. So if you were parseively learning up until now, stop now and start actively being part of this okay, because that's how you will truly learn. So let's start off by, I'm gonna give you guys problems to do. But first I wanna show you how it's structured. So then when you read those problems, you're not just sitting there like pfft what is going on? I want you to start understanding how to problem solve, and then I'll give you guys exercises that you can solve on your own, and then I'll provide you with solutions. So let's get started. Let's say I give you a function called sum two, okay. And it returns the sum of two numbers, okay. So let's just make it a little bit more clear. A function called sum two that takes in two inputs, and it returns a sum of those two numbers, okay. That's the thing, that's what it's saying. Now, your job would be to break this down. So how I would break this down and I would say, here's what the input does. It takes two things let's call it num one, num two, or let's not be lazy and said number one and number two. And then output is just number one plus number two, okay, so it takes those two numbers and it returns them. So it helps me break this whole sentence into something that I can code much easier. Okay, and then name of the function, function name is called sum two. Okay so now I know what the output of is like kind of how it's done, what the input expects. Now, I'm gonna try to see if I can create some examples of what it should look like. So I wanna be able to say sum two, give it some number like one and two. So this is how I'll actually use it. Okay, and then my expected output should be three, right? If I take one and two, if I give it one and two it should add it and it should return three. All right, that's my expected output. Okay, so now let's get to coding this kind of function. If you give it something like 100, and then you give it 200 here it should return 300. So here's our work, define sum two. I wanna give it one and two or sorry, gonna give it number one I wanna give it some number, some another variable called number two. And I wanna say return number one plus number two. All right, and now let's test it out. I'm gonna give it, if you just define a function and don't do anything else, notice what happens when I run it. I get none, nothing happened. It's like defining a variable, if I say x is equal to five, it doesn't actually run and give you something. It just makes x five. So function gives names to like blocks of code, all right. Now let's print it out. Let's call the function sum two on a number one and two and let's see if it matches our expectations. And it gives us back three. Okay now let's do it on another one. Hundred and two hundred, right? It gave us back 300, that's good. It's taking those two numbers and returns them, well how does it work? When we call the function with 100 and 200 as inputs, it goes back to the definition of the function puts in 100 for number one, right? It puts in this 100 for number one, and puts in this 200 for the second number. So everywhere it sees number one, it just replaces with 100. Everywhere it sees number two, it replaces with 200. Okay, so this happens and then this happens, okay? It does 300, all right. That's the result of calling the sum two function. So this part evaluates to 300. And then it puts that part out to the screen, okay. And that's the same logic that gets applied for one comma two. Okay so this was the example. In the next video, I wanna give you your very first problem. Okay, so I hope you're excited, and let's go from there. (upbeat music) Okay, now let's try our hand at our first problem. Okay, so I'm gonna give you your very first problem this time, okay. So let's go ahead into our course, this is on the main website, okay. Let's go to, or cleverprogrammer.com that is, let's go to the problem called square a number and let's click on it. And don't worry if you're watching this on YouTube, I'll provide the notes below. So I'll give you the link to the problem. And I'll give you a link to the solution as well, okay. On the website, it's just all more integrated. So at the top, before you get, before you actually have to write your function, I have some notes here to help you out. So like for example, I say something like, remember functions always start off with the word DEF, which means define. So if you're ever writing a function, always start off with DEF. Note two says don't forget your colons, okay. Note three says, always do return rather than print in your functions. Usually you do print to check if it's working correctly. Other than that you wanna do return. I'll make a video on return versus print. So you guys know more in depth what's going on. So here is an example for you guys that we just did in our previous video. But I'll leave this here for every problem, just so you guys can remember how it works. So if you, so remember the add two function that we wrote or sum two function, it takes in two numbers as inputs and returns their sum. Well, this is how you write it. Define add two, takes in two inputs, we just call them a and b, and we return the sum of both of them. So if you look at line four it says, it's now using the function. So that's an example of how to use your function. So print add two, one and two, all right. So one, and two should give you back three, then it prints three and you get that result that you see right there where the arrows are pointing. Okay, now let's get to our actual problem. The problem is called squaring a number. Okay, you can read this on your own too. So I'm gonna go through this a little bit fast. I want you to try this on your own. Hopefully, you have taken a stab at this problem. After you have done so, this part is gonna be the solution. Okay, so I'm going to go through the solution of this now. All right, write a function that squares a number that, write a function square number that takes in a number and squares it. So right away, I know it's something like this. Okay, first part is done, the function is called square number. And I have to put a DEF before it. I also have to put open close parentheses because it's a function. Even if it takes no arguments, you have to put a parentheses, open close parentheses like that. All right, what else does it say? It tells me to take a number and square it, which means that I have only one input, right. So I know that I have one input, and I have some integer, or I have some output okay, some number based output. So I know my return statement, whatever is gonna return should be something that probably returns a number, okay. In this case, right, my output is going to be something like number squared. Okay, so we are taking in one input, let's call the input number, and let's just do a return that number squared, okay. At the bottom, I have a bunch of testing things for you. So this part of the code actually test your function. So it's a function called test square number that tests your function. Okay, so just to make sure you got everything right, you should have a line printed out. If you've done, wrote this correctly, you should have a line saying your code is correct. Okay, so to do that, you have to always uncomment the bottom line that I have here for you which is the call to this function here, test square number. Okay, so you want to uncomment that line below. And now let's run it and see if our code is correct. Okay, and you can see right here that it says your code is correct, all right. Just to break it down, this two asterisks mean exponentiation. So I'm saying number squared, okay. How you would write it in math would be something like this. And then let's see what's happening, right? If you give me two, you should get back four. If you give me eight, you should get back 64. If you give me 10, you should get back 100. And now let's see how it works. So if I give you two, right, this function call over here, square number two, what happens? Let's write it down right here. Square number and give it two. Okay two gets parseed in as the number, you have two over here. Everywhere there's number the variable number it just replaced by two. Two to the power of two or two squared just gives you four. And so it asserts four equal equal four, right? And then it gives you, and then it says good. How assertions work, this thing that I have that tests your code is that if it evaluates to, like it takes in some condition. If that condition evaluates to false it throws a big error, right? If I said assert five equal equal four and I ran this, is gonna give me a big error at the bottom here, right. parse error, but bad input on line 11. Oh, okay, it's giving me an error here, but let's fix this guy. Now, it gives me an error on where I expected it to give me an error on line 14. Which says assert five is equal to four. And it says, no, that's not true. But if I had four equal equal four, it would just parse it quietly, meaning like, it won't do anything. So if it doesn't give you an error, it means that thing is correct, okay. And that's it, that's our solution for this problem, square a number. In the next video, we're gonna solve the problem of checking if a number is even. All right, so try it on your own. And in the next video, I'll have the actual problem for you guys. And I'll have the notes below. And I'll have the link to solution below as well if you're watching it on my YouTube channel. If you're watching it on my website, then there won't be anything below because everything is actually part of the cleverprogrammer.com website. All right, I'll see you in the next video. (upbeat music) Okay, guys, now let's talk about a new problem, all right. So I just clicked this part that says check for even number divisibility. Again, if you're on YouTube, you're gonna have the problem notes below. And the solution notes below as well. So no need to worry. But this is on cleverprogrammer.com. So let's keep going. You can write a function, or sorry, the problem says write a function is even that takes in a number and returns true if it's even. Otherwise, it returns false. Okay, so before you watch the solution, take a stab at it and try to do this problem. Okay, and after you're done trying and you're pulling out your hair, like I can't do it, come to watch the solution, okay? I've given you some hints here as well. So think about what does it mean for number two be divisible by another number, right. So what does it mean? Let's, test it out a little bit. So if I have 10, and I wanna check if it's divisible by two, well, what does it mean to be divisible? It means remainder is what? Right, if I do 10 divided by two? What's my remainder there, right? So my remainder here will be none, because two goes perfectly into 10. And there's a way to check for remainders, okay. So for example, let's let's check if three goes into 12. Right, so if my remainder is zero, then that means 12 is divisible by three. Right, I can also try it like this 12 divisible by three and see if this gives me true or false. If it gives me true well then, 12 is divisible by three. If it gives me false, then 12 isn't divisible by three. Okay? So that's your hint, I've given you your example here as well in written format. And then I have a bonus challenge for you which says, If I give you a number, and you check that it's, if it's even, your function checks is even. So for that function, the challenge that I gave you is see if you can write it in one line of code, okay. But don't try that first. Try to do it with some if else statements, is gonna get you to do some if else statements. Okay, now, let's go over the solution. So the first thing I wanna do is write, what's my function name is even okay. It says right there is even. Another thing that you can do to trick the system is, if you look at my test notes below, well it kind of tells you what the function is called, and how it's expecting to use the function. This is how the function is gonna be used, right. You're gonna say is even and parse in a number. And either it'll give you a true or it will give you a false. So I have test cases here written for you. If your function runs correctly, all these test cases are gonna give you a big thumbs up and the screen is gonna print out your code is correct, right. So let's say that I give this some number. And basically what do I do? If number is divisible by two, right, that's how you check if it's divisible by two. If you just do this, that will give you the remainder. So this will evaluate to zero, okay. But you want something to value to either true or false, okay. So number mod two should give you zero. This means that number should be divisible by two, that's what it means to be even right? Two should be able to go inside of that number. Return true, else return false. Right, if two does not go inside of that number perfectly, then I should get back false. So like if I tested, I don't know 13 divisible by two, check if it divisible it says false. Well, I can even check out what's left over. Two goes all the way into 12. And then one spills over and you get a remainder of one. Hence 13 is an odd number and not an even number. Just in case, you don't know what odd and even numbers are, zero, two, four, six, eight, ten are all evens and then one, three, five, seven up to infinity are all odds. You can have negative and positive odds or negative and positive evens. All right, I also have the notes on my website for you guys to help you. So remember how to, it tells you how to write a function. It tells you where to put the colons. It tells you to return things, and it gives you an example of that add to function as well. So let's test it out. I'm gonna comment out line 43. And I'm going run this and if it prints out your code is correct, then our code is correct. Otherwise, it's wrong. Okay good, it says your code is correct. Now I'm gonna go over the bonus challenge. Okay so, define bonus challenge kind of, or actually I can just do it right here. Because you guys can pause the video and stuff, right? So you guys can go back in time as well. Return, and what do I want to do? Number divisible by two is equal to zero. And that's it. You don't have to do if you don't have to do else, it does it all in one go. Well, what happens here, if the number is divisible by zero, if the number is divisible by two, it will give you a true. If it's not divisible by two it gives you a false. So you don't need to check if this then true, otherwise false, it kind of does that for you. So that's your one liner, okay. Hopefully, this video was helpful for you and you'll learn something. In the next video, we're gonna find out how to find the length of a string. So that's a problem that is gonna be really cool. And you will be able to try it out. Check out the show notes below. So you can practice this and also try to solve this problem, the check for even numbers, take care. (upbeat music) Hey guys, so in the last video I mentioned we're gonna do find length of string. But what's better for you guys is if we do another problem that's pretty similar. So you guys can test out your own skills as well, just in case you got stuck on the even number problem, right? So let's see if you can write code that can give you an answer for the, if the number is odd. Okay, so this problem is called check for odd numbers. All right, so here I have write a function is odd, that takes in a number and returns true, if it's odd, otherwise false. So it's pretty much the opposite of finding an even number solution. So with the even number problem, if I gave you two, it should return false, right? Or I'm sorry, should return true. (phone beeps) Whoops, so real loud. So same thing should happen for this one, except when I give you three, it should say true, otherwise false. Now I'm gonna go over a solution to this problem, just in case you haven't tried this on your own, the link is below to the problem and to the solution. So if you're one watching this on YouTube, go ahead and try it on your own. If you're on my website, cleverprogrammer.com, everything should be okay anyways then. So let's get started. I have some function, it's called is odd, that that's the first step to get correct. And you can check how it works you at the bottom. So again, you can just go ahead and kind of cheat. You see the function is called odd, it takes in one input. So you can kind of go like okay, is odd, my input is some number. And what can I do if that number? What does it mean for a number to be odd, right? What does it mean for a number to be an odd number? Well, all it means is that it's not divisible by two. Right, so for example, if I gave you 12, right? Is it divisible by two? Yes, it is you get back true. But if What if I give you 13, is that divisible by two? No because two goes all the 12. And then there's a one spillover or remainder. So here you have false. But we just wanna flip the results. And meaning this should give you false and this should give you true for the solution to this problem, so let's go. If number divisible by two is not equal to zero, then I want to say give me true. Otherwise, give me false. Okay, let's check if the solution works. I'm gonna uncomment this part and let's go and run it. And it says your code is correct, so that's good. Let's try giving it, is odd, let's try giving it three. It says true, and what if I give it two? It should say false. Okay, cool, and now if you wanna try the bonus challenge on your own pause the video, go try it. Otherwise, I'm gonna go over the answer right now. So here's the bonus way of doing it. Return number divisible by or mod two, does not give you the remainder zero, okay. So it's like the opposite of the even number function. So there you go, that's your one liner, right, your cheeky one liner. Okay, guys, that's it for this video. I'll see you in the next video. (upbeat music) Guys what's up? This is Qazi from cleverprogrammer.com where you learn to code smarter. In this video, what I wanna talk about is string length function. I don't know why I did that, actually. But essentially, how this function works is that if I give you something. I don't know what's going on with my hands today, if I give you something, a string, and you tell me how many characters are in there, okay. So by now, hopefully, you should kind of know the format of how these problems are laid out, and how you can solve them. And you can also look at the tests, like the cert tests that I have to kind of cheat, right. Like, this is how many inputs it takes in and yeah, yeah. Okay, so try this problem on your own. I have the notes below in the YouTube video. I have the exercise solution below. And if you want to, you can go to my website, cleverprogrammer.com and enroll in the course. So that it can keep track of everything. And then it's all nice and all in one place. Anyways, let's keep going. So I'm gonna write the solution right now. So spoiler alert, close your eyes kids if you haven't tried it, do not look at this. You don't deserve to look at the solution if you haven't tried it on your own already, okay? Go try it on your own. Let's get to the solution now. So first thing I'm gonna do is DEF 'cause it's a function. Then string length, 'cause that's what I told you the function name should be right. Write a function that takes in a string and returns its length, right? So the function is called string length, right? Inputs, how many inputs does it take that takes in a string? So the word or should give you a hint that it's only one thing. You can say string, you can say my string, you can call it whatever you want, okay. I'm just gonna call it my string to let you guys know that there's no special meaning behind the word string itself. So you don't need to like know what it does. What this function requires you to know, is how to do a for loop. Okay, if you can do a for loop, you can solve this problem very easily. So I have my string, now, what do I wanna do? I'm gonna run through that string and count each letter. Right, so if it's hello, I wanna count that, I wanna keep track of every letter that I see. So when I see an H I go, I hold my finger up like this, like one. When I see an E, I go two. When I see an L, I go three. I see another L, I go four. When I see an O, I go five. And if I've run out of characters, I wanna just output five, okay. So it sounds like something that I wanna run multiple times, sounds like a loop. For letter in my string, right? If I do print letter here, you guys can see on the right hand side that is gonna go through that and it's gonna print the letter, I have to call the function, of course. String length, and let's give it hello. And let's run it. And on the right hand side, you can see that it goes HELL and O. Right, that's great. So we have access to each character. Now what do I wanna do? I wanna have a tracker variable like count. Okay, and I want to set it to zero. And every time I see something, I wanna increment it by one. So count is equal to count plus one, or count plus equal one. 'Cause it's such a common operation, so we just increment by saying plus equals. Okay, that's how you're gonna see it written down in Python pretty much everywhere. And if you're programming in some other language, like C or C++, you're gonna see it written like this. All right, so I have count equals count plus one. So I'm incremental count by one, right? Increment count by one. And how many times do I wanna print out count? Every single time or just at the end? If you think of that question in English, you can answer that very easily. I only wanted to return the count once. So should it be part of the for loop, or should it be outside of the for loop. It should get outside of the for loop. Good, okay, and I just wanna hit enter so it looks nice. And yeah, now let's try this, let's do print. And my function right, let's see if it prints five. Okay, it prints hello, and then it prints out five. We don't want to print out hello anymore, 'cause we know it works just fine, and you get five. How does it work if you really break it down? Well, to my function, I parse hello, right. So this part of my string becomes hello. Then this becomes hello. The first time we're going through the loop, this is an H, right? Then we just counted by one. Then the next time we go through the loop, this is just a E and then we counted by one. The next time we go through the loop, this is an L, then we increment by one. Next time we go through the loop, it's L again and we increment count by one. And then last time we're in all, we increment count by one, now count is five. And then we return five. Now, if you notice do we use the variable letter anywhere else? No, we don't really use it. So you can say whatever you want here. Or you can just put an underscore here, because we don't really use it anywhere. So we don't care what that variable is. But sure, we'll just leave it as letter. At the end of the day, I wanted to return count. Now let's test our function. If it prints out your code is correct, then our code is indeed correct and we are done. Let's check it out. Oh, whoops, I can't hard code a value here. I have to change this to my string. And let's run it and it says your code is correct. Now guys, we're learning all of this to build something big. Okay, we're going to build our own rock paper scissors. And I don't mean like CodeAcademy.com, let me hold your hand. And here's the entire code. And you feel like you did it, but you didn't really learn anything. I mean, you're gonna be doing practically the whole thing, I'm gonna give you the bare bone pieces, but you're gonna be writing your own code. And I really want you to be able to do this completely on your own. So it's really important that you do all of these exercises and try your best to do them on your own. Because you will need all of these pieces to then go and try to build your own game. So we're gonna start off with the simple game like rock paper scissors. But then after that, we're gonna do something with Twilio API, which is the text messaging you can build pretty much your own text messaging app, okay. And you can actually send people text messages on their phones. So we're gonna be doing some really big stuff here. All right, no more baby stuff. But I want you to be prepared for that. That's why I have this for you guys. I have notes, I have solution notes and everything. So take advantage of that. Use everything at your disposal. If you haven't already subscribed to this channel, and do not miss the next video, because in those all of those videos that are coming up, we're gonna be covering covering really important things. I'll see you there. (upbeat music) Hey guys, this is Qazi from cleverprogrammer.com where you learn to code smarter. So let's get started. I wanna cover last letter of a string function in this video. Okay, so how do we play around with the string so we can get its last letter. That's the function I want you to write. Should be very simple, you should be able to get it pretty fast. If you look at the tests below, if you use the last letter function parse it hello. With exclamation mark, it should give you the exclamation mark. If you give it banana, it should give you an A because A in this case is the last letter. If you give it something with only one letter, it should return that letter. If you give it again, funny guys as you get the idea. So let's code this bad boy up. Again, you do not do deserve to view the solution. If you haven't participated and tried to do it on your own. This is, you gotta be part of actively learning. Okay, I don't want you to be parseively learning, like sitting back like eating some popcorn. I don't want you to do that, okay. While I do agree, this is kind of like Netflix for your career. But I still want you to be actively learning. Okay, it's like Netflix that you engage in and participate in, all right. So let's get to coding this bad boy up. Notes are below, solution notes are below. Exercise problem is below. Everything is there, let's keep going. Define last letter. Okay, now what does it take in? it takes in some string. So you can literally call it some string if you want to, but we're just gonna call it string. What does it do then? Well, it's very simple, it returns the last letter. How do you return the last letter? If I opened up a terminal and showed you guys how this bad boy works, quite simple. If I have a string like hello, to get it's second letter, I would do this. To get its third letter, I do that. To get its first letter, I do this. But if I wanted to get its last letter, there's a trick in Python that you can do. Index by negative numbers. If I do negative two, this gives me the second to last letter, which means I'm gonna get the second L. Okay, hell, last L of the word hell. But if I want to get the last letter, well I can just do this, right. This gives gives me the last letter. Now let's' code this up return string and last letter. Okay, as simple as that, let's test our function and prove to ourselves that we are indeed correct. And it says your code is correct. Okay, that's it for this video. If you watched up to this point, and you haven't subscribed, subscribe right now. Because you don't want to miss the next videos. I will see you there. It didn't end, let's try it again. (upbeat music) Hello there, my beautiful friends. In this video, I wanna talk about who's the bigger guy. This is Qazi from clever programmer.com, and we're gonna solve a pretty sick problem. Sick as in good. Now, this problem essentially wants you to find max of two numbers. So if I gave you, look at line 19. If I give you one two, you should return two. If you give this function, bigger guy function, if you give it 10 and 20, it should return 20. If you give it 20 and 10, it should return 20. And if you give it two and one it shall return two, get the idea? And same thing with the strings, but you don't have to do anything special. Python knows how to check strings against each other, okay. So let's code this up. Notes are below, solution is below. I think you guys know the drill at this point. If you're watching this on YouTube, that is. If you're watching it on my website, everything is gonna be there in your face. So first step DEF, define, we're writing a function that does this right? Look at the instructions, write a function bigger guy. So I know that I do this with my eyes closed. Now what does it take it in? It takes into numbers. So I know that it takes in two inputs, I can say num one, num two or something, okay. And what can I do here? Well, I wanna check between those two numbers, and whichever is the bigger one. I wanna return that number, right? So using if statements and comparison operators, we can do all of this together. If you haven't solved this yet, or if you haven't tried to solve it on your own. Please don't watch this. Pause, try the problem, then come back. But here's the solution for you guys, for you eager beavers. If num one is greater than num two return num one, right? If no one is bigger. Well otherwise return num two, right. In the case where num two is equal to num one, do we care which one we wanna return? Of course not, we don't care. We just wanna return any of them, it doesn't matter. Okay, to specify that for you guys, here, I'll be nice and I'll add in another test, okay. 10, 10, it should return 10. I really don't care what it returns in the case where the two are the same, okay? And what if they are? What if num two is the one that's greater? Well, in either of those cases, right? The first case we return num one. If it's the case where they're equal, or if num two is greater we return num two. Which is why we don't need to give a condition we just say else and we're done. Now let's let's check this bad boy. And let's see how it works, right. Let's give it some, okay here, I'll just do it to be extra tangible here for you guys, right so. Let's do three five, it returns five. Let's give it five nine, it returns nine. And if I gave it five, five, it should return five, right? So we know what it does. And here let's uncomment this line. And when I run it, it should say your code is correct. Which means that it parseed all of these assertion tests. And then at the end, it said your code it, then it went and said your code is correct. Now what if all right, I'm gonna save that for the next problem. Because next problem is gonna be a lot more fun and more challenging. Where you're gonna have to solve the biggest guy. So if I gave you three guys, what do you do? We're gonna discuss that in the next problem. If you haven't already, subscribe. I'll see you in the next video. (upbeat music) Hey guys, this is Qazi from cleverprogrammer.com where you learn to code smarter. In the notes below the problem who's the bigger guys there? So take a shot at it. The solution is also there. But we're gonna walk through the solution right now. So let's get to it. I'm sorry, the biggest guy, who's the biggest guy? Okay, so essentially, if you read the problem, it says write a function biggest guy that it takes in three numbers as input and returns the biggest one. So I take three numbers, and I find whoever's the biggest, and then I return it, okay. So this one gets more challenging. And if you've tried it on your own, you'll notice there are a lot of if L statements that you're doing. Also online eight, I have a bonus challenge for you guys. It's a write a one line solution, okay. What I mean by that is like two lines, right? 'Cause you have to have one line to define the function, obviously. And then you have to have one line for the solution. So that's what I mean by one line, okay. Now, it's medium to hard difficulty, because you guys haven't done anything like this before. So it will be challenging if you want to do the bonus challenge, and I'll go over that as well. First, I'm gonna go through it the normal way. So let's define a function called the biggest guy that takes in three numbers A, B, and C. Okay, or we can call it num one, num two and num three, okay. Now, the approach that I wanna take against this is I wanna find who's the bigger guy between num one and num two. Okay, so find a bigger guy between num one and num two. Then after finding the bigger guy compare, after finding the bigger guy, I wanna find a bigger guy between I'm sorry, or let's just say biggest guy, right? Between big guy, bigger guy, whoops, and num three, okay. That's kind of the approach I wanna take. I wanna find who's bigger between num one and num two. And then once I find these guys right and find like the bigger guy kind of. Whoops, bigger guy. Then I wanna check the bigger guy against num three, and then see who's the biggest, okay. So with that pseudo code slash English written formula. Let's go ahead and try to code this up. So if num one is greater than num two, then big guy is equal to num one. Right, else bigger guy is equal to number two, okay. And once, so now I have found the bigger guy. Now I just have to compare the bigger guy with num three. Okay, so if bigger guy is greater than num three, then biggest guy is equal to bigger guy. Else biggest guy is equal to num three. Return num three. Okay, I haven't tested this function yet. Hopefully it's right. Let's comment out line 44. Which tests our function, right? We wanna run this function 'cause these are the tests I've written for you guys. And it allows you to test your functions. And if we give it one, three, two it should return three. If we give it 30, 10, 20 it should return 30. If we give it, in any order should return 30. If we give it strings, it should also know what to do. Don't worry about that, you don't have to do anything extra. That's just a trick you guys. Python knows how to compare strings, okay. So let's take this bad boy out for a run. We got an assertion error online 44. What's the error? Did we like not write this correctly? It was gonna, test biggest, it should be called guy. I don't know why I have buy, guy. But what's the assertion error? Oh, right yep, return biggest guy duh. Okay, boom, there you go. Success, your code is correct. Okay, so it says I'm running tests. And then it says, good job your code is correct. All right, that's it for this one. Now, let's try to change this and code it up in a better way. Okay, let's code it up in kind of like a one line solution. So the one line solution, I'm okay, I'm kind of cheating. It's not really a one line solution. What it is, is it wants you to kind of use your previously written solution, okay. So you can say define bigger guy of num one and num two. And you can say if num one is greater than num two, return num one, else return num two. Okay, so remember, this was the function you wrote for bigger guy. So now let's use that function to do this problem. Here's the nice solution. So I can say, return bigger guy num one, comma num two. And I wanna actually call my function here, again, bigger guy of num one, comma num two, and then compare that against num three. So if I run it, it again says success your code is correct. Now, how does this work? Well, I want you to pause the video and try to think of it yourself how it works. But now I'm gonna go over how it actually works. Okay, so this is a really nice problem here. It is allowing you to use functions within functions, okay. Well, I have this guy here, right? So what can I do with this? When I parse it like one, let's say I have one, three, two here, right? Those are the inputs I parse it in, as you can see on line 32, one, three, two. So what does this do? It cause a bigger guy function with one and three. Using the bigger guy function, it finds a max of one in three. So this whole thing evaluates to a three. Then it tries to find the bigger guy between three and num three. Num three is two. So then we just go back to this function and find the bigger guy between three and two. And then this function will return three. And that's our solution. Notice this is the key here, the notes, right. Find bigger guy between num one and num two. And then find the biggest guy between bigger guy, and num three, okay? So let me go back and put it like this. These notes will be here for you guys, when you guys are doing the video. This is the solution, okay. And that's it we're getting closer to starting to now work on projects. So like the Twilio API project, where we will be kind of coding up some stuff. And you can actually make a text messaging app through that. And then we will also be getting to do some, make some games like rock, paper and scissors. Okay, so a lot, all these functions are very important for you to learn. So then you can actually use these things when you're writing your own. You're writing your own code, you know how think in the correct way. One thing I wanna reveal to you guys is Python has a built in function called max that kind of does this and finds the biggest number. All right so you can actually just say, max of num one, num two, num three. And I can prove to you it works is if I return look it says, if I run it, which I'm clicking it right now and running it. It just says success, your code is correct. So max is a built in function that finds a maximum between any numbers you give it, okay. Thanks for watching. If you haven't already, go ahead and subscribe right now. I'll see you guys in the next video. (upbeat music) Hey guys, what's up? This is Qazi from cleverprogrammer.com. And we are gonna be building, working our way up to tic tac toe. So this is going to be one problem that I'm gonna give you before I put you guys on to tic tac toe project. Because once you do this, you'll have a better idea of how to complete that project, okay. So this is gonna be a pretty important video. And after this, you guys will be ready to write your very own first game. And what I've done for you guys is essentially, it's not just gonna be a boring text based game, I've created a full GUI for you guys. So once you complete the code and complete the functions, the whole GUI application will work, all right. So without any further ado, let's get started on the helper assignment I created for you guys. So this assignment is called Usain Bolt races you and Qazi. Okay, so here's the backstory, Usain Bolt, you and Qazi had a race, okay. Surprisingly, Usain Bolt won, I don't know why. And then you came in second. And for some reason Qazi just sucks at running. So I suck at running somehow and I came in third. So I didn't do too good, all right. Now, can you write a function that given a person's name returns their plates? So for example, if I gave you Usain Bolt's place, or Usain's name, so I just said Usain, you give me back zeroth place, or sorry, first place. If I gave you, like, if I type in you, or me in your case, I would have you write me. Okay, so like here, if you see the test case, so if I give you me, then you should return second place. And if you put it in Qazi, it should give you three. All right, that's how your function should work. And can you also write a function that does the opposite? Given a place it returns their name. So maybe your function will be called number to choice. And if I give you one, you should give me back Usain. and if I give you two, you should give me back me when you're writing and typing this code me will really be you, right. And if you give the function number to choice three, it should return Qazi's name, okay, so my name. If it works, then you get back a nice little graphical GUI thing that I made for you guys. You'll have a turtle that will make a nice little circle and say, good job, okay. My graphics are getting next level. Okay, so give this function a try. See if you can solve it, see if you can solve choice to number and number to choice. Okay those are your two functions. So essentially, if I give you you here, then you should say okay that's first place or second place. If I give you you Usain here, you should return. okay, that's first place. And here, if I give you two you should return your name. Or sorry, not your name but you. And I'm sorry, I'm confusing you guys. It should return me. If I gave you two this function should return me. Okay, you can look at the test cases, and that's what they say. This whole me and you thing is kind of confusing. But if I give you three it should return Qazi. Alright, number, so I'll leave that there. So in this I've already written the function name for you. And I've already written the argument names for you to make your life easy. All right, what you have to do is complete both of these functions. and then go at the bottom and uncomment this line. If I uncomment and right now and try to run it. You can see it says incorrect, keep trying. If I run it again, I'll say incorrect, do not give up. Which means that my code is incorrect, all right. Once my code is correct, it's gonna make a nice little green circle and say correct, good job. So if you've not given a try yet, go give it a try. Otherwise, I'm gonna go over the solution right now. Okay, so let's get started. So how will we write the choice to number choice function? Alright, so let's write it up. If choice is equal to Usain then return, what? Else if choice is equal to Qazi or sorry, me return to else return. Or let's actually just do, else if choice is equal to Qazi return three, okay. So that will essentially do what we want. If I try to print here and go, print choice to number and give it Qazi. Right, let's see what it does, let's run it. You can see that it gave us back three. That's exactly what we expected 'cause I came in third. Now what if I gave it me, which is gonna be you when you're writing this function. It's gonna say two, okay that's exactly what you want. And let's say we give it Usain, it says one, okay. So it's working correctly, that's exactly what we want. But is there an easier way we can do this function? So there's if, else if and else if that we wrote? Is there a way we can make it easier, perhaps using dictionaries that we learned earlier? Remember, we have choice and that's associated with, or sorry, we have this thing here. And each choice associated with the value of a number. So this should automatically be telling you guys like, hey, maybe there's a key value relationship. If you put in one you get back Usain. Or if you're if you put in Usain you get back one. If you put in me you get back two. If you put in Qazi you get back three. So what we can essentially do is rip this whole thing down and replace it with the data structure that is, that does it for us, right? Let's call it dictionary. So I'm just gonna say choices, what should I call it? Let's call it race dictionary for now okay. To keep things simple. And I'm gonna say if given Usain, I'm gonna write it on, actually, let's just keep it simple. Given Usain return, Usain should be the key and the value should be one. Me, key is me value is two. And then Qazi. Key is Qasi, and what is the value? Value is three. So then we can say return race underscore dictionary. And we can index it by the choice that's given to us. So for example, if you put in Usain here, it's gonna look through this dictionary, right? What's the way the dictionaries work? Its dictionary, you index it by its key. And then it returns the corresponding value. So here race dict is the dictionary, we index it by the choice. So if the user gives us Usain will put Usain here. And that will return, this whole thing will evaluate to the value. So in this case, one. Same thing that will happen with the rest of them, okay. So hopefully that makes sense. And can we simplify this? Yes, we can. Do we really need a variable that we're just gonna use like a second later? Not really. And it doesn't make our code any dirtier or any harder to read. So in this case, you can just do this and it's done. You can assign it a name if the dictionary was really big. But here dictionary is pretty small, we don't need to use an extra variable here. So I think this is good. And let's use the same idea here. And we can say return, if given one return Usain. By the way, let's test it, okay, that's a good thing to do. Let's run this here by hitting run. And let's see what we get, and we get back one. That's what we expected. Let's put it in me here, let's see what happens. And we get back two. What happens here, we parse in me to the choice to number function. So you really parse in me like this. It goes in, it indexes this dictionary by me, right? And me has a value of two. So this whole thing evaluates to two when it's done. Okay, let's hit run, and it returns two, so it's working. And let's do the same thing for number two choice. Return whoops, return to, or return me. And then three should return Qazi, right. And we index it by the number 'cause this time number is the key, okay. So okay it looks good to me. Let's uncomment the line 67. And see after, does it parse all these tests I've written here, right? Does it given the same return one, given one return Usain and all that. Let's run it and it parsees all the test cases. And on the right hand side, you see it made a nice little green circle with the turtle, said good job. And so we are done. Okay, awesome. If you guys didn't get it, no worries. If the dictionary thing was new to you, perfect. This is all supposed to be new for you guys. Now, these concepts are gonna be directly applied in the next video where I'm gonna have the tic tac toe project for you guys. I have the notes for it, I have the solution guide for it. And I will help you guys build the whole thing on your own. And it will be something that you can proudly share with your friends, family, whoever. Okay your girlfriend, boyfriend doesn't matter. It's gonna be something that's gonna actually work. It's gonna have a link that you can share, and it'll directly be playable. So I hope you guys are excited for the next video. And I'll see you guys there. (upbeat music) Hey guys, what's up? This is Qazi from cleverprogrammer.com where you learn to code smarter. Let's jump right into it today, all right. We're gonna be building the tic tac toe project. I am so excited for this one. I've been building up to this for so long. And now you guys are gonna be on the same page with me. And we're gonna build the tic tac toe game. All right so let's just get started. So let's come here and before I start talking about any of this, let's just start off with what it's gonna look like when you're done building it, okay. And you're gonna be able to share this with everybody. So it's gonna be pretty simple. And here's what's gonna look like, right. Not the fanciest thing you've ever seen. But hey, it's something. So you have three choices rock, paper, scissors and you're playing against the computer, okay. So let's say we picked rock, the computer pick paper, what just happened? Well, paper beats rock and so if you look at the computer score, he got one and you still have zero. You, my friend are not a very good rock, paper, scissors player. Let's try again, all right. We have to beat the computer. So let's go, rock. It's a tie, that's pretty good. I think that since the computer already picked rock, he's probably gonna pick scissors next time. So to prepare for scissors, I'm gonna pick rock. Boom, okay so that was pretty awesome. But that was not planned. The game is not rigged at all. It's supposed to be random. But I'm pretty good at reading random computers. Let's see, he picked scissors. So maybe he's gonna pick scissors again. Let's stick with rock. No he picked rock. Paper, okay so he picked rock we picked paper, we won we have a score of two, computer a score of one. We can keep on going forever, but I'm gonna end it for now. Okay so now let's talk about the actual project and what you need to do to get it to work. As you can see, here, I have hidden these functions from you. So choice to number, number to choice. Random choice number and choice result. Those are the only four functions that you need to complete in order to complete this entire project. Everything else I have done for you. So you don't need to touch anything else. Okay you pretty much just need to complete those four functions. And when you're done completing them, your entire game will run. Another thing I've done to help you out is I've added some tests. So if you uncomment line 73, this line right here and run it and if your functions parse the test then most of your functions are correct. Some of the functions it's hard to write tests for. For example, random computer choice. If you're randomly generating choices, it's kind of hard for me to test it. All right, so that one, you kind of just have to do it correctly. All right, further explanation of the project. So you have choice to number function. What does that want? Well, let's say I give you a rock, you should give me back one. If I give you paper you should give me back two. If I give you scissors, you should give me back three. All right, what's the number of choice functions job? Okay, well, if I give you a number like one, you should give me back rock. If I give you two you give me back paper. And if I give you three, you give me back scissors. Okay, so both of those functions complement each other. Okay, they're kind of the inverse of each other. Now, let's talk about random computer choice function. What does that do? Well, the computer needs to be able to generate random choices, okay. So we need to use a random module that I've imported on line five, I have also added some hints for you guys on how to use the random module. So here if I show you guys the problem, I have added some hints for you here. Okay, so random computer choice. So I want you to look up or random that choice does and how to use it. In my solution video, I'm gonna go through the whole solution. So if you can figure it out, you're gonna learn anyways. But I want you to be able to exercise some researching skills and develop your programmer's ability of like solving things by researching it on Google or Stack Overflow or something like that, all right. Because that's important. A lot of the times I'm on Stack Overflow, Google trying to figure out a problem. So figure out how to use random.choice to make the computer randomly choose between rock paper and scissors. Okay, let's go, so it is, just to give you a hint, it's gonna be a one line solution. Like return random.choice, and then parse in rock, paper, scissors, computer is gonna return one of those every time. Okay, now, the choice result function is gonna be the meat of the project. That's gonna be every, the whole logic of the project is pretty much gonna be here. So what's going on here? Well, you have a computer score and human score, which is up here. The global variable maybe I'll explain that, I'll explain that to you guys definitely in the solution. But for now, let's not worry so much about it just focus on not removing these lines. When you come down here and you start coding this up, well, essentially what you're gonna be doing in choice result is you're given the human choice, and you're given the computer choice. So using that you figure out who won. So for example, if human choice was rock and computer choice was paper, well, paper beats rock. So in this case, computer should win. So actually this should actually be this. Computer score is equal to, like that. Okay, so I'm sorry, I had it wrong. I'll fix it up. When you guys get the link, you'll have the fixed version. So since paper beats rock, computer score should be incremented by one. Where's computer score? Is right here. Human scores also right here, okay. So then you can check, hey if computers choice was, I don't know whatever, then you can increment based on that. But what if it was a tie? What if they both had the same thing? Well, in that case, you don't have to do any incrementing, you can just print tie, or you don't even have to check for that condition, okay. So that's the simple answer to that. How are you gonna do choice result? Entirely up to you. I would suggest doing bunch of if, else if, if type of statements, okay. So you're gonna have a bunch of if conditions. You're gonna check rock against paper, paper against rock. What if human picks this and the computer picks that? So you get to exercise some of your if then statements. There is a clever way of doing it, which I will explain to you guys in the solution video. But for now just use your if then type of statements to do this, okay. Choice to number number two choice, I've kind of give you guys an example of how to do it. So you guys should be good on that. And other than that I think you guys, let's see what else I need to explain here. Test all, yep, just uncomment this and test some of your functions. If you give choice number, if you give it rock it should return zero. If you give it paper should return one. And on the other hand, vice versa. Pretty much number to choice, if you give it zero, it gives you rock. If you give it one, it should give you paper. Everything else helps you, all this stuff at the bottom is it helps make the GUI. The graphical user interface of the project. And it wraps up your logic in and makes it a part of the game. Okay so here's your code is not completed and you try to run the game. You're gonna get back some stuff that doesn't make much sense. Okay, so it's not gonna make sense. But once you complete all of these functions, the whole game is gonna work perfectly. And and you're gonna have essentially the game and it's gonna look like this. Okay, all right guys, hopefully that explains the entire project and what you need to do. Hopefully, you have all the tools that you need to put this together and make the game. If you make the game, please put your links, share your links using code sculptor. You can click this button here that says save. And when you hit save, it generates a new link for you at the top, okay. So if I were to bring this guy down, you can see it brought this link for me. And you can go to that link, and then see the entire code or play out the entire code. Okay, sorry about that, let's just bring this guy back at the top. All right, so that's how that works. You generate that link post it in the comments below. Some of the things I want you guys to watch out for is if you hit command or refresh, it just removes the whole thing. You have to be careful because CodeSkulptor is in the browser and it doesn't save your code. So if you hit save it'll give you that link and that link will help you. But if you don't save and you hit refresh, then all of your code just kind of goes away. So watch out for refreshing randomly. And yeah, so save continuous, save a lot. Okay save constantly and then copy that link constantly. So you can you can have that link just in case something bad happens, okay. And maybe even put this code locally gives you a download button. So every few hours you're working on this, maybe hit the download button so you can download it locally. That way, you're not in the risk of losing it, okay. After this, we're gonna work on some other really cool projects, I have that in mind. But for now focus all your energy on rock paper scissors. Let's get it done. Post your codes below, post your links below. I'll have the notes to this problem below. And I'll have this solution to this problem below if you're watching it on YouTube. Okay, if you're not watching this on, if you don't wanna watch this on YouTube and do it directly on my website, cleverprogrammer.com, go ahead and enroll in that school. And there you can keep track of all of your progress. And you can go there and all the resources will be there readily available. Alright guys, good luck, and I'll see you guys in the next video. (upbeat music) Hey guys, what's up? This is Qazi from cleverprogrammer.com where you learn to code smarter. So here we are finally finishing up our rock paper scissors. Thank God, I can say it correctly finally. I'm so sorry, I've been calling it tic tac toe the whole time. I don't know why I keep calling it that. But hopefully this entire video, I'll say rock paper scissors. And if I said tic tac toe, I'm probably talking about rock paper scissors. So with that disclaimer out of the way, let's go ahead and talk about the solution of rock, paper, scissors. Hopefully you guys got to try it. And yeah, so let's just get right to it. So here we have the game open. And I have the solutions here for you guys. Now, having a solution here for you guys is great. But what I wanna do is I wanna walk you through it one step at a time, okay. So let's go ahead and walk through it. All right, choice to number. So if you did the previous problem, the Usain Bolt video that I made. Which is essentially you get a person and you have to number them and which place they get. So if I give you Usain, you give me back one. If I give you me, you give me two. I give you Qazi you give me back three, right. So let's apply that same thing directly here. So given a choice, we wanna convert it to a number. Okay, so let's say that we were given a choice. Whoops, sorry about that. Okay, so let's say we were given a choice like rock, you wanna give me back zero. If you're paper, you wanna give me back one. Now certainly, you can say if choice equal equal rock, right choice is coming from here, which is the function. And if choice equal equal rock, then return zero, you can certainly do that. But a better way to do it is since we know your relationship between two things, we can use the key value pair technique. So the way that I would write the solution is I would say RPS dictionary. And I would say if it's rock, give me zero, if it's paper, can't type. Paper, goodness, all right, here we go. And if it scissors, give me back two all right. And then what we wanna do is we wanna say return, RPS dictionary and index it by the choice parseed in. So for example, if choice is rock, it goes to this dictionary, RPS dictionary, it indexes that by rock. So it goes and looks at this key, and it returns a corresponding value. So this whole thing evaluates to zero. Okay, so that's essentially the idea. And since we're declaring a variable right here, and then using it right down below, and it's, we don't really need to define that as a variable. And we can just put it here directly. but just for reading purposes, and making it easier for you guys to look at. I'll leave that up there no problem. Again I can do the same technique for this one. Instead of having a bunch of if, else if type of conditions, we can have this scenario here. And I wanna reverse the question keys and values here. Okay, so if you give me zero, you get back rock. If you give me one, you get back paper. If you give me two, you get back scissors. So that's essentially what we're doing here. And this function expects a number between zero and two, including zero and two. This is pretty straightforward. It will evaluate to the rock paper scissors, okay. This is why the function is called number to choice, it takes a number and converts it to a choice. All right, how do we randomly generate the computer choice? Well that's thanks to the random module that we imported here, we can use that to actually do this problem. We can say, return random.choice. And random.choice takes in some input like this, like a list. So we can go rock, paper, and scissors. Now make sure your spelling is correct everywhere. Because if you are not consistent with your spelling of scissors, or rock or paper, your program might not work. Because it's expecting specifically those things, right? If I open up a terminal, and I go and open up Python here, and we checked what that does, right? So let's do an import random. And let's do a random.choice and parse it a list of things like A, B, and C. Let's see what it does, and let's keep running it. So hopefully, you're getting the idea that it randomly pick something, it's not just picking one thing, it's randomly picking between those three choices. So just like that, you wanna do rock paper, scissors. Because when the computer is playing, he's randomly picking between rock, paper and scissors, right? So this is a simple one line solution. Now this is where the meat of the project is. And this part is pretty tedious, 'cause you have to write a lot of if else, if else, if else type of conditions. I'm gonna show you a cool way to byparse that. Okay, so I have example code here for you. And this should be pretty self explanatory. Okay, if so you parse this function, human choice and computer choice. If human choice was rock and computer choice was paper, well then paper beats rock and you increment computer score by one. The reason why we're saying global variable is because we wanna specify we're using these variables here, outside the functions, and those are the ones we want to increment, okay. Those are the ones we want to change. If you don't do the global variable thing, and then you change that, you're only going to change the computer score within the function. But once you leave the function, it's gonna be the same. So for example, if I don't use global and I do this computer score plus equals one, inside of the function it might, computer score might be one, okay. Computer score might be one inside of the function. But when you like go outside of the function and you print computer score, it'll say zero. Okay, so by saying global, we're saying, hey that's the exact variable we wanna use. And if I change it, I know what I'm doing. I wanna change it everywhere. Okay, generally, you wanna avoid using globals. But for now, I want you guys to, just use globals, it's fine. The reason why I say you wanna avoid that is 'cause then you can have like, if you have really big pieces of code with thousands of lines or hundreds of lines, you don't want global to be changing, like between two function, like between if you have two, three different functions. If they're changing it, if they all have access to the same variable, they may be changing it in a way you don't want. So you might wanna give all of the functions its own separate variable. So they don't like have a collision with each other. Okay, that's kind of the reason. So, okay, that's a little bit behind choice resolved, and what it takes in as inputs and how we can use that. But instead of coming up with a lot of if else's statements, here's a nice little solution that we can do. So essentially we can say, hey if human choice. It's a weird trick, so sometimes I have to see if I can remember it as well. If you take the difference between human choice and the computer choice. And this is where the choice to number functions come in handy, because what we wanna do is we wanna take the numerical difference, you can't take a difference of strings, right. You can't do hello, or rock here minus paper, you can't do that. So we wanna make sure that these are numbers, how can we do that? We can say human number is equal to let's call our function, choice to number function. And since we already have the human choice, we can just parse it in that human choice. And will return it as a number. So for example, if the human was rock, it will get thrown into the choice to number function, and that will convert it correctly. And so this whole thing will evaluate to zero. Okay so let's leave it like that. And we're gonna say computer number is equal to choice to number function, and give it the computer choice. Okay, pretty simple. So we have the computer number, human number. Now we can take the difference. We can say human number, minus computer number. And if they're, and if you take their difference, and you modulo it by three and you get back one. If you mod something by three, you'll create a world where the only possible numbers are zero one and two, okay. So for example, just to play, sometimes playing around with this is a very good idea. Instead of doing all this theoretical knowledge, sometimes just play around with it. So like let's do zero mod three. Let's do one mod three. Let's do two mod three. Let's do three mod three. Let's do four mod three. Let's do 101 mod three. Let's do some random number mod three. And as you can see here, the only numbers that we're getting are zero one and two. You're creating a world of only zero, one and two numbers. So modulo lets you wrap things around, which is kind of nice. Because we only have, we have rock paper and scissors. So we wanna be able to go zero, one, two, zero being rock, one being paper two being scissors. And then the next one, the next number we want. Instead of it being three, which is not in our list, we want it to be zero again. So we want it to essentially be like zero, one, two. Zero, one, two Zero, one and two. So zero corresponds to rock, one corresponds to paper, this corresponds to scissors. Then this corresponds to rock, this to paper, this to scissors. Okay, this ensures that we never get a number that doesn't map to one of our existing things. Okay, like essentially, what we don't want is this. 'Cause when it tries to look up three and four, and five and six, it won't get anything in our database or dictionary that we have. So we're gonna say take the difference and mod it by three. We know for sure that we're gonna get some number like zero, one or two. If the number is one then computer wins. So basically, what we say is computer score plus equals one. Or you can write explicitly like computer underscore plus one. We can say, else human score is equal to human score plus or plus one. And we need to have one last condition. That would be what if they have the same choice? So if human number is the same as a computer number, then maybe we just wanna print tie and do nothing else. Okay we don't want to increment any scores. We don't wanna do anything, we just wanna print tie, that's it. Okay, so yeah. Alright, so this trick is a little weird. But essentially, what it allows you to do is it takes care of all the possible scenarios. Instead of you having to write nine different conditions or six different conditions. I think it would be six because you have three to three factorial. So instead of writing six different possible situations, like rock versus paper, paper versus scissors, scissors versus rock in writing all those if else conditions, this allows you to write, like capture it all in just these three lines. The logic, I put some notes here at the bottom. So you can kind of understand how the logic of it works, okay. So let's say that zero is rock, one is paper and two scissors. If you do rock minus scissors, mod three and check if it's equal to one, essentially what happens is rock is zero, scissors is two. Zero minus two evaluates to negative two. Negative two, mod three, gives you back a one. As you can see here on this left hand side, okay. So if I did negative two mod three, you get back a one, okay. And one equals one. So it goes rock wins. And it's true rock would win. Even if you just visually look at it. Then we have the scenario with paper versus scissors. So paper is one and or actually, this should be scissors here, I'm sorry. So paper versus scissors. So you have one minus two, right. Paper is, one scissors is two, as you can see here. One minus two mod three, let's check if it gives us one. Two equal signs mean, check if it's equal to one. Then one minus two. That gives us a negative one, right, this gives us a negative one. We mod it by three and negative one, mod three gives us two. We check if two equals one. Since two does not equal one, we give the win to the other side. So we give the wind to the right hand side. In this case, the right hand side is computer and the left hand side is the human choice, okay. So if the mod is ever equal to one. Then essentially what we're saying is that the human wins. And if the mod is not equal to one, then we can say that the computer wins, okay. Let me just check this against my solution code that I have. And yeah, that's kind of what it says. It goes, Hey, if it's equal to one the computer wins, otherwise, the human wins. Okay, so let's go back up here. This looks good, this looks good. And yeah, I think think most of the code here looks good. Now, let's first test our code. Let's run this guy here. What's the error? Oh, we would parse a number, right. 'Cause that's our argument now. Okay, so we parseed all the test cases, let's see if the game runs. Okay you picked paper, the computer picked rock, so you win, perfect. We both picked rocks, it was a tie, let's do scissors. Yep, scissors beats paper. Okay, so there you guys go. The game is now working. I have shared the link with you guys. So you can actually go play it there. And if you wanna try again, now just try to solve it. After looking at my solution, see if you can now try to solve it without looking at the solution. So I'll half the project, the problem there for you guys. So you guys can actually try the problem on your own. And I'll also have the solution there for you guys. And you guys can just hit save at the top left here. And then it'll give you a link. And you guys can just share that link with anybody that you want. And so then you can share this with your friends, family, whoever. Okay, guys, hopefully that explains it. You guys had fun doing rock papers and scissors. And the next project. What I would like to do is build a text messaging app. So we'll have an app which can send out texts to other phones, all right. All right, guys, take care Have a good one. I'll see you guys in the next video. (upbeat music) Back, so here's another cool pattern using the list that I wanna share with you. So let's say we have a list of numbers, okay. And what we wanna get effectively is something that squares. So the result should look like one squared, so that's just one two squared, that's four. This three over here squared, that's just nine. That four over there squared, that's 16. Five squared is 25, six squared is 36. And I think you get the idea. So we would want to call that list to squared list. Or we can say squared numbers, right. Say this list is called numbers. So how do we do that? How do we turn this list into just all of these numbers squared? Let's figure it out. One way you would do it is you could type it out manually. But that's gonna be a lot of work, right? That would mean that you would do squared numbers.append. Append is a method that allows you to add to the list. So here we have an empty list. And since we wanna add something to it, let's just show you what I mean, okay. Let's say we wanna add a banana in there, okay. And let's print out squared numbers. When I run it, you can see that I've now added a banana. Let's throw something else in there. Okay, let's throw apple. Okay let's run through it and you can see now banana and apple are added. Okay, so append just simply add something to the end of the list hence append. Okay, so going back here. What we wanna do is we want to essentially append each of those numbers squared. So how can we do that? Well, we leverage off what we learned in our last video. So we do for number in numbers, this is now going to give us, number is gonna be one the first time. Two the next time, three the third time, and so on and so forth. And what do we wanna do? We wanna do squared numbers.append number, and so we're appending now the number. So we're, basically every time we go to the loop, we add one the first time, then we add to from this list and we add three. But we wanna actually add the squares of those numbers. So we want to do this. And now let's check out what squared numbers looks like. And that's it, okay, simple as that. Very good pattern to remember. And it works, okay. So play around with it, see if you can do something like cubing it or change up this list and see if you can do something like dividing it in two every single time and then a pending that. So you can call it like half numbers. Yeah, practice it out, run this code, I'm going to add the link of this in the, below the video or above the video. So you guys can actually go directly here and play around with this. All right, guys, thanks for watching. I'll see you in the next video. (upbeat music) Hey, guys, what's up? This is Qazi from cleverprogrammer.com. Let's jump on and talk about tuples. Okay, this is something we did not discuss in our data types yet and we need to cover this concept. So remember, when we had lists, and you can add things to list and delete things from lists and lists are super nice. So list would be something like groceries and if you said, okay let me turn on this one thing so it does not keep bothering you guys. Okay, there we go. Now remember list was like groceries and you might have a banana and apple, groceries, that's funny. Apricot, okay. Well with tuples you can use them a very similar way. You could have, let's make it something that you can't change, for example. or social security numbers. I mean, you could use whatever you want, but I just wanted to use this one. And it could be some number here. It could be another number right there and then another number right here, okay. So this here is actually called a tuple. Why is it called that? Nobody knows, but it's wrapped in parentheses. And the main difference between a list and a tuple is that you can add things to a list and delete things from a list, but to a tuple you can't change it. You can't add things to a tuple or take things out from a tuple. So that's really the key difference. I'm going to go down here and show you okay groceries. We can do .append. Cheese, okay. And if I print out groceries here okay, and you'll see the results of, oh just ran a different file. You can see the results right there. It says apricot, banana, apple and cheese. Because I just added cheese to it and it shows that. You don't have a method like append for tuples. So you can't do that for them, okay. This was just a very basic example of this. Why would you need to use a tuple? Well if you were working with data that you really never want changed, like, maybe you were storing people's parsewords, you'd never want to, you wanna store them like this, because maybe that's something you might not wanna change, right? Or at least you might want to make it really difficult for people to change. Even people who are programming those websites for you. Or if you're programming a website like that yourself. Just really quickly let me show you where you can actually find this code. So I'm going to actually push this code up for you guys, okay. Let's see here. Add, learn, whoops, Python. Okay, so you guys can actually go to github.com. Okay and look up my username. So maybe a Clever Programmer. And one thing you can do is go to users and follow me, okay. But if you can't follow me, just look for Clever Programmer underscore stuff, this repository. Go to this repository right here and you will see learn Python. Okay, there's the link. If you wanna go directly github.com/clever programmers/cleverprogrammer_stuff. And in there, you'll see something called learn Python. Go in there, click tuples. And you can actually see the code right there. And that's where I will, let me make it a little bit bigger so you guys can see it better. This is where I will try to add the code for you guys from here on out. And you guys can just go ahead and check everything right on there. Okay, hopefully that clarifies everything. All right, that's it. In the next video, perhaps we're gonna cover a little bit more about mutable versus immutable data types. So I'll see you guys there. (upbeat music) Hi, so just a little bit about mutable data types versus immutable data types. Essentially, to mutate or mutability, or mutable essentially means something that can change. They will use this terminology in computer programming world to confuse the hell out of you. But essentially, it's just telling you that something can change. An immutable just means something that can not change, okay. So for example, I don't know, some things might be immutable. Like I might consider maybe my glasses immutable. They're really hard to change. And I mean, it's really hard to change something about it. And that just what it is, right. And maybe my keys might be a little bit more mutable. Like I can add things to my key chain, and I can take things away from my key chain, right. So that might be an example of something that's immutable, versus something that might be potentially mutable. Your wallet, you can change things, you can add things to it, you can take things out. But maybe from a cup, it's a little bit harder, I might almost consider it an immutable thing. Maybe you could put something in it. But these are examples are just to give you something kind of intuition as to how these things work. But in the real world you have, you're doing data analysis on a lot of sensitive information. You wanna store that as a tuple where it's harder to change it. Or if pairs of things go together, like for example, your name and your email address, that's something that goes together as a pair, then maybe you could put that, you can create a list, that contains tuples inside of it. So the first element of that list could be a tuple containing my name and my email address. And then the second element in that list could be your name and your email address, and so on and so forth. And the reason why they are tuples is because you can't take things out from it really easily or you can't add things to it really easily. So generally stick with a list until you can figure out when to use both of them. And then start using tuples. But for now, play around with tuple a little bit. Figure it out, get a sense of it. All right guys, that's it for this video. And I'll see you in the next video. (upbeat hip hop music)