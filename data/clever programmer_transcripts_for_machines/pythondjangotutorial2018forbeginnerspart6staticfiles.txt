hey you what is up how's it going this's Kazi from clever programmer calm welcome to part 6 of this django tutorial awesome epic series in this video we're gonna be covering this is actually gonna be much shorter than the other ones I hope and I think we're gonna be covering essentially how static files it work in Django ok and how you can use them to customize your apps look and feel ok so without any further ado let's jump right into it okay so writing your first app part 6 right so how what are we doing now now we've built a tested web poll application if you haven't done that go back to part 5 if you haven't done part 5 go back to fart part 4 make sure you're following this in order and now will now add a stylesheet and an image ok so aside from HTML that your app generates right and shows which is you need your frontend so far the voting thing that we have or it shows some text with radio buttons your website needs to be able to do other things too like show people images or pictures of cats or blog post images it also needs to be able to serve up JavaScript if you have any JavaScript right so for example if you don't know what JavaScript is it's totally fine but like any time you're clicking a button and it like pops up a menu kind of thing that's usually JavaScript going on there ok if you click something like a popup comes up that's JavaScript JavaScript is pretty much everywhere so your website needs to be able to show some JavaScript and it also needs to be able to serve CSS okay which is it's called Cass stands for cascading style sheet and you use this to stylize your app and make it look cool and beautiful ok and yeah so that's usually what's necessary to complete a web page in Django we refer to these files as static files now for small projects right this isn't a big deal because you can just keep the static file somewhere where your web server can find it however in bigger projects especially those comprised of like multiple apps right so if you have multiple apps like polls and blog and ecommerce like whatever dealing with the multiple sets of static files provided but each application starts to get tricky that's why Django dot contribut static files is there for you if you're a beginner don't worry about this part too much but this is for more advanced people mentioning this part okay otherwise I'd kind of skip over it it collects static files from each of your applications in any other places you specify into a single location that can be that can easily be served in production okay so now let's get to customizing your apps look and feel so first we're gonna need to create a directory called static in your polls directory okay so let's go ahead and do that I'm gonna open up atom and we will go in our polls hopefully you can see that on the left hand side I don't know how to make that bigger so I'm sorry about that but yeah we're gonna go inside of our polls and inside of our polls I think this is where it wants us to make it so I'm gonna right click this polls not the templates one so right right click here create a new folder and call it static done okay cool and for those of you wondering like how do I switch like that it's command and tab and on Windows that's Alt + tab cool Django will look for static files there similarly to how Django finds templates inside pulls temple pull slash templates so you know how there's like pull slash templates in Django automatically looks for templates there well just like that for your static files Django is gonna look inside of your folder static okay so Django static files setting contains a list of finders and know how to discover static files from various sources one of the defaults is AB directories finder which looks for a static subdirectory in each of the installed apps okay so Django will automatically look for a folder called static under each of the installed apps ok so right now we have polls as one of our apps that we created and remember to install this app we had to do this line in our settings file understand installed apps and then now Django is able to find its static folder if you have another app again like a blog app and you have static folder under there and you install the blog app then you'll be able to then Django will be able to find the blogs blog apps static files okay like images JavaScript CSS those are all considered static files alright the admin uses the same directory structure for its static files cool so admin site works the same way with in the static directory you have just created a create another directory called polls so inside of static we're gonna create another directory and we're going to call it polls okay so kind of like how you have polls templates polls you're gonna have polls static polls okay similar and then inside of here we're gonna create a file called styles that CSS I'm gonna do new file and I'll do style dot CSS just like that okay so this is our CSS again in the command line if you haven't activated your virtual environment make sure to do kondeh or sorry source activate my sights if you haven't done that just in case you need to do something in the command line which you're not gonna in this video I don't think because of how the app directories finder static files finder works you can refer to this data file in Django simply as pull slash styles that CSS similar to how you reference the path for templates so remember how for templates you just go pull slash index dot HTML well for this is pull slash style dot CSS okay and for name spacing it's just like templates so the same reason why you put templates under of the same reason why you make a new folder called polls under templates is the same reason why you create a another folder called polls under static it's so then if you have multiple different apps there's no collision based on like you having the same name for any of your CSS files or any of your HTML files that's what they're saying here okay now we're gonna do some fun CSS stuff okay and we're gonna keep it pretty simple so in our style that CSS what I'm basically saying is that any link tag under a bullet point or a listed thing color it green okay so a stands for is like your link tags anything that contains a link basically returning for now we're turning almost all of our links on our current site Green next add the following at the top of polls slash templates slash polls slash index dot HTML so we're gonna go in our templates pulls index dot HTML and at the top or we're gonna add is we're gonna say load static so we're gonna add that right here load static so what this is now able to do is load our static files and then right here I'm gonna add this so I'm create a creating a link to a stylesheet the type is text slash CSS and the link is this now I'm using the link in a dynamic way this is the best way to link it instead of like hard coding the actual path and you just say polo slash style dot CSS okay that's how we refer to it and that's pretty much it okay so now let's go to our website so I'm gonna do Python manage that py run server and we're gonna open up a new tab and I'm gonna go 127 that's slash 8000 or I'm sorry slash pulls and you can see that all the links are green right if I go back to my stylesheet and turn it into something else so let's go back into sorry style dot CSS is right there I'll bring it here if I change this to like blue save command s go back here refresh you can see that all of this is now blue if you're didn't turn blue clothes out of your server break the server with ctrl C and then try it again and it should be fixed and yep there we go and also make sure to save okay and another way to go to this same link is doing HTP localhost colon 8080 q localhost colon 8080 1 colon 8,000 do the same thing alright so that's essentially how we got that to work bring this guy here now we also can add a background image ok so we'll create a subdirectory for images create an images subdirectory so basically inside of our static and pulls we're gonna create static holes we're gonna create a new directory and we're gonna call it images this is we're gonna put all up all of our images so it should look like this and then you can put whatever image you want right background jiff or so what we'll do is we'll go online and like grab an image so let's get cats right click and then just save the image and you can save it whatever you want you're gonna call it like cat background oh sorry we can't just save it wherever we want I'm gonna save it under my site my site or sorry it pulls static pulls images and I'm gonna save this cat underscore background and it's automatically a JPEG file because I have the format selected like that I'm gonna hit save it saved I'm gonna open up my atom and under images I now have my cat background JPEG so let's go back to this tutorial and it's basically saying to do this add this to your style sheet so I'm gonna add this now I'm gonna save so from images instead of background jiff mine is called cat underscore background JPEG like that so now and it's gonna find basically in our HTML code it's gonna find anywhere we have the body tag it's gonna make its background this cat image okay so if I go to you know our index.html if any of this stuff is in a body tag it'll add that to the background so let's check it out it says and you should see the background loaded in the top left of the screen okay let's give it a try let's see if they're in line and there you go it's there right so pretty cool how it works and what I could also do is I could go to my index.html and like wrap maybe a certain part of it in the body tag so like maybe the part that's in the forloop right so I can I can go like body tag and I can choose to close the body tag outside of this unordered list I can go body like that okay if I want to and I go back i refresh and the same thing okay so this is essentially like a little bit of how HTML and CSS like talk with each other okay and now let's look at kind of their last notes here so there okay so warning of course the static template tag is not available for use in static files like your style sheet which earned generated by Django so in your CSS file you can't use something like static like that it's not gonna know what that is and you can't do like ifthen statements here these are just your static files hence they're not dynamic and can't do like variables and cool stuff right like your index your HTML file can with the which has the Django template exist 'm and in there you should always use relative pat's so here we're not using like slash user slash clever programmer slash github slash my site slash my site or slash pols slash what else is it static slash pull slash images right we're not using the absolute path that's the definition of absolute pet we're using a relative path to it you're satisfied between each other because then you can change static underscore URL so this is again a little bit more advanced I'm gonna I'm gonna skip over this one you can read that if you want and that's essentially how you work with general like static files on Django there you have it folks I hope you enjoyed this tutorial I hope it was informative and juicy and you loved it if you did love it please leave a comment please like it and share it with at least one friend because if you have at least one friend or family member sorry what's happening with my mic if you have one friend or one family member who's doing development alongside you is gonna boost your success rate up by at least 60% they have like scientific studies on this so share it maybe somebody will watch it alongside and you will become web developers together that was one the last part I want to leave you with this if you are serious you want to become a web developer take a look at my new course coming up is called the profitable programmer and I'll put the link over here the link will also be in the description join the VIP waitlist for that course it's gonna be coming up soon I'm gonna drop it like it's hot and I will drop this course a few times a year like maybe two or three times in a full year it's very exclusive but if you join this course you will learn how to become a web developer you will become badass a jingle you will have apps hosted online you will have a portfolio and you will learn how to get clients and earn an income with Python as a developer okay that is my promise to you so go to that page put in your email join the VIP waitlist so then you're the first one to know when this course opens up as well as I'm gonna give you a gift I'm gonna let you download your Python earning potential calculator if you go put in your email right now okay lastly I just wanted to say that in the next tutorial we're gonna be covering part 7 customizing the admin form so that's it for this video thank you so much for watching I love your faces off and I'll see you in the next video