guys how's it going this is qazi from cleverprogrammer.com where you learn to code smarter in this video what I want to talk about is something super awesome so I want to start it I wanted to start a new series and I've been thinking about doing this for quite some time and basically I'm gonna go on codefight.com and fight a bunch of people okay what does that mean well toadfights.com or codefight.com is a website where you go and challenge other people to programming challenges and then you both are given a time and so whoever does it faster and with less bugs wins they try to keep their problems pretty simple they're not too hard so it's mostly just having fun another reason why I want to do this is because I play chess a lot so in chess it's really useful to watch a professional player play these really short games two minute five minute games and by watching you just get to learn a lot so I'm hoping that you get to watch me like play against other people and see how I do I might lose I might win who knows but you'll be learning kind of how to think about code and how to make it play for you and maybe you can go on this website and play for yourself too all right so other than that let's get started we're gonna make this pretty damn fun so let's go here oops so many tabs man I think it's called codefights.com hopefully I'm right yes codefights.com here we go so I just got a bunch of points for some reason and can I change my name let me change it to clever programmer there we go all right so whatever I don't care I can keep my name the same let's see improve and Challenger coding skills while unlocking Arcade map that sounds like a lot of fun but what I want to do is Head to Head let's do it baby let's do it let's fight so we're gonna fight against a random opponent and I'm gonna try to rip them shreds or her but that doesn't sound nice that's not what's gonna happen okay I'm probably gonna lose okay so I'm gonna try to talk through it a little bit but if I can't I'll try to talk through it through it later so at the bottom you can see that I have 52 seconds it's incredibly not smart to skip these uh time you you should just use this time to think about and read through this problem before you get started because if you skip this time then you'd have to understand the problem in the round and you'll lose a lot of time so I've already lost 30 seconds talking to you guys let's figure it out consider an arithmetic expression in the form of a hashtag B is equal to C check whether it's possible to replace a hashtag with one of the four signs to obtain a correct expression this is a pretty difficult problem arithmetic expression ABC is true we can replace hashtag with a plus sign to obtain 2 3 equals five okay so basically it should be like a question mark a b gives you C okay that's what it should say a question mark B gives you C so what operator can you put in this question mark that'll give you back the result okay so let's see they're giving us some time here uh and they have some test results at the bottom that we can also uh run against and check if our answer is correct or not so let's figure it out okay what is it saying let's write some stuff down my comment was there and that was a problem but if I do float or not there but if I do float here I know that it should be correct okay all right so we got this one right and I got a hundred points on this so let's move on I am going to say that uh okay let's just rate it up it was really I forgot that you can't do comments comments count as a source code line which is kind of annoying okay so given length of triangle size check if it is I sauces isosceles hmm we should get some music in here right but not gonna worry about that right now because on my chess Channel I ended up getting some copyright issues so we're gonna stay away from music for a second but in the next videos we'll probably have music okay so I have sides four three two the output should be isosceles triangle size is equal to false 535 the output should be that um how is isosceles triangle described I think it's if the two sides are equal and one is different right so I basically have to check that what do I have to check I have to basically check that I have three inputs and um what should I say what should I say about it in isosceles triangle you have to have two sides equal and one side different okay so let me just read my test cases just to make sure that that's right false true okay so what code do I write to make sure that that is the case hmm so if I sort them then that should mean how does sort get is it sort does it sort here let's just check if sort sort the dot sort method sorts it in an ascending order or descending order so I just want to double check that so let's call this X and call or sorry what am I doing X is equal to this list and then let's sort X and let's call X and let's see what it does and okay when you call sort on a list it essentially puts in an ascending order the dot sort method so if it's an ascending order then I know that either the first two are equal and the last one is different or the last two are equal and the first one is different um is there a smarter way to check this can I call Unique elements and get back if my number of unique elements is two right if I have one two and three the other guy is at score 200 so he's winning right now but let's just go through this and let's see maybe we will win so if I call Unique elements I should get back three unique elements right if I call set on it now what if I call sets on this right I get back two unique elements and in the case that I get two unique elements then I know it's an isosceles triangle because two sides are the same and one side is different that's what two unique elements would mean so I think I am just going to uh you know I don't even need that sort line that they have up at the top I'll say if the length of calling set on sides is equal to two then essentially give me true I actually don't need any of this code I can just write a one line solution and that should work right I can essentially remove all this code and I can say return Len of sort or sorry what was it again Len of um set of the size is equal to two and that should return true or false yeah so I said but basically you can see it's whining that it needs to be exactly that line those amount of lines okay a fun problem and I'm gonna give it a thumbs up good job guys that was good okay now we are on round three and the the score is equal so far so he has 200 and I have 200 and we are on round three so let's let's check it out so what do I want to do here I want to check if it's increasing sequence if it is I return true if it isn't then I return false how would I check if something is an increasing sequence so here this is strictly increasing sequence uh one is less than three Which is less than eight here two is not less than two so we just stop and we return false right because two is not less than two and here two is less than three so this is fine but this part is not fine so essentially I need to write something like a bubble sort if you guys know what that is you'll be on the same page as me but if you don't essentially I want to go I want to do pairwise iteration and I want to check each of them against each other okay so let's go and write something like that I want to go check each of them at the same time and check if the previous one um is smaller than the next one if it isn't then I just want to return false okay uh so I'm gonna let's I'm gonna write a little bit of fancy fancy schmancy code here so I want to say previous comma next in zip sequence starting from one all the way to the end no that would be no no it should be actually all the way up to the end but excluding the last one and then I want to say sequence from one to all the way to the end and then I want to say so my previous is going to be the previous guy next is going to be the next guy in the list and I want to just go and check them against each other if previous um right if I if not so if previous is not less than next then return false and if you make it past all those checks I want you to return true okay so this is going to work and you can see that I passed all of those and I'll hit submit so I got 500 points he's a 200 I got 300 points for the last one and I got done before him as you can see I will go in a little bit more depth depth and explain it this was great uh required knowledge uh bubble sword type of stuff like pairwise iteration right and I'll hit next and so okay I won why did I win well it'll go over and explain it okay so check it out I got a beautiful badge I'm at trainee for 20 wins so you can play me okay I'm not mean I'm not gonna be mean I'll like write nice responses to you and tell you where you could have done better or hey you might just come and crush me who knows uh let's share this on where should we share it let's share it on Google we did something cool right let's just share it oh I have to write my own comment look at that beautiful coffee drinker all right let's get out of here next and close beautiful that's awesome so why did I win because he took 27 minutes to complete it and I took 11 minutes so I'm going to explain the last bit to you guys and if I remember I will simply put it in as a note note for you that you can actually look at so the last problem was check if things are an increasing sequence right so check strictly increasing sequence so what did I write here this cryptic looking code well here's how this works okay here's how this function works first of all you have to understand how zip Works zip runs through two lists at the same time that's what I like about lists so let's say that you have a list called one two three four five or um let's just make it like something different okay let's just say something like this 18 5 7 and that okay uh let's call this list prices and then you have a list called fruits and let's uh let's call it banana we have apple pretty expense expensive Apple fifteen dollars we have another thing for five dollars kiwi uh we got strawberry for seven dollars and then we have uh apricot running out of fruits here so this maps to like banana this maps to this right like they're in this each position like zero position matches zero position first matches first um so what I'm gonna do is I'm gonna run through both of these lists and print out banana in its price at the same time how am I gonna do that I'll just do this I'll say a price a comma fruit in zip and I will say the list prices and then the list fruits and I will say print price comma fruit right so I'll hit run and you can see that it prints the price and it prints the fruit okay and it iterates through both of the lists at the same time so that's what's nice about zip um right it'll it's the zeroth index of the list that starts with 10 and then it's at the zeroth index of fruits at uh index zero and so the first time we iterate through the list price becomes ten fruit becomes banana and the string banana I'm just lazy to put quotes around it but fruit is banana okay I'll just put it and price is 10. okay and that's why you get this out there so that's what zip does it allows you to iterate two through two things so what did I do what is this part here and why is that so nice here's what it does okay so I want to check uh strictly increasing sequence I'll actually leave this here for you guys like as notes or something so I'll just say price comma fruit um how to use zip function and now let's talk about it okay so for what was I talking about okay so here let's say you have numbers and you have them like this one five um six and then let's say you have four okay and what you want to do is go through it and say that this is not in an incr um strictly increasing sequence right because you can see that it's not one five six four this is not higher than six so this is not in a in a strictly increasing sequence right so not a strictly increasing sequence so what do I want to do I want to iterate through this and just check each of these I want to check one against five and see if one is less than five if it is I want to go on to the next iteration I want to check five against six if five is less than 6 then I want to move on then I want to check six against four if six is less than four I want to move on however in this case 6 is not less than four I want the iteration to stop and I want it to return false at this point when we're running the function so how do I iterate through this in a nice way well you can use all kinds of indices and stuff and if you write this in C C plus plus you're gonna have some like ugly code but it'll work but you have to do a bunch of funky stuff but in Python you can have some really elegant pythonic ways to run through this uh essentially it's called pairwise iteration right so I'm doing I'm iterating pairwise so I want to do one five then five six then six four it's almost like a design pattern it's something that um you you have to do quite a bit so it's good to understand how pairwise iteration works so what I did with this sequence of up to negative one and sequence starting from one to the end is this I take this list and what is sequence of one sequence of one or sequence of up to negative one is this that okay so that's that list and then what sequence of one to the end right one all the way to the end it's it's this it's um whoops I want to start from this to five six four now if I iterate through this list you can see that I have one comma five one and five right here so zip will allow me to get one and five at the same time then you can see that the next pairwise iteration is right here five and six zip will allow me to look at five and six at the same time it'll be at the index one in both of those lists and then at the end I want to go through the pair six and four and six and four is right there so by constructing this and using zip on it I get to iterate through both of them at the same time okay and then I can like check if uh so and then I just label them so previous here right if I'm if I'm zipping through this right if this is like this foreign if I'm zipping through here previous is going to be one and next is going to be 5 and then I just checked previous against next as you can see here so I say is previous less than next and I say if previous is not less than next then I want you to return false and stop right there okay and essentially that means if previous is equal to or greater than and that would imply that we don't have a strictly increasing sequence so you can see that's what I do here and then I return false uh so yeah if I did previous right if I had if not previous less than next what would this mean okay so I I iterate through it the first time I have this being one and I have this being five right one from here and five from here I'm iterating through both of the lists at the same time using the zip function is one less than five yes it is so not true gives you false so we don't execute line six you know the return false statement then we go back in the for Loop then previous becomes five next becomes six so this is five and next is six whoops it's five less than six yet is yes it is so not of that gives you false and this whole thing of value is still false which means that you don't execute the block the body of the if statement and then we run through it one more time and previous becomes six and next becomes four and six is less than four is false right so that's false calling not on false gives you true this whole thing evaluates to a true and then ultimately it executes the body of the if condition and you get back false okay so that's what it was uh that's what my code was doing I'm just gonna leave these comments I don't know how useful these are but I'll just leave it um that's essentially what my code was doing and it was able to get a list and check if it was a strictly increasing sequence all right so hopefully you guys enjoyed it if you loved it or you liked it comment or subscribe or like or share whatever you got to do have any questions post them up there I'm really crazy about this I love responding to every single person I mean I would even like go to the point of you know just helping you out like tell you what code to write and you know really help you out so I don't want you to be stuck talk to me okay if you're ever stuck I am here for you that's what I do okay I love doing this I absolutely love coding there's probably nothing more than coding that I love right now I like Jiu Jitsu but I like coding more so yeah hopefully this makes sense if it hurts your brain that's totally fine especially this pairwise iteration thing it would kind of suck understanding it at first you can be like oh my God my brain hurts but once you get it it's so nice it's so nice you guys you're gonna you're gonna love it you're gonna enjoy it a lot these are the type of questions that coding interviews are going to ask you if you're going to a coding Boot Camp or you're trying to get a coding job they're going to ask you these kind of questions so it's good to get exposure to them in a playful way right you're not reading it from a book I mean look at how fun it was we went online we competed against some random person and we had time constraints and then we beat them and it was awesome and now we're just talking about it it's much better to do it like this rather than being forced to have it shoved down your throat you know because you're trying to cram it in to get your new job or something so by making it fun and play you'll actually learn it rather than learn it in school or some academic setting where you're not having fun okay so this is helpful for you if you're a college student if you're thinking of changing careers or if you are even in high school or younger you know this is just helpful to you this is going to make you a better coder in all of that stuff all right guys I love you guys so much um I'll try to put this in I'll try to put this let me name it right now code fight Session One okay for a clever programmer and I'll save this for you guys and I'll put it in the links in the YouTube link or if you're watching it on my website cleverprogrammer.com and you guys can watch it and enjoy alright bye