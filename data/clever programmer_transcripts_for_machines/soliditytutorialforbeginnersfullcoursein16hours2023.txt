in this video we're going to be going over the very basics of solidity so if you haven't done any solidity projects before this is the video where you want to start and this is where you will understand how you can transition from being just a JavaScript developer now becoming a blockchain developer and learning the skill of solidity I will be teaching you things like the variables the different data types arrays structs mappings everything that you need to get you up to speed you will be building your own Hello World app which will deploy to the ethereum blockchain using infuria so without further Ado let's go ahead and get started alright let's get started with the very Basics so let's just build a Hello World app with solidity that's where everybody starts right what you want to do is go to Google and search for remix ethereum ID stuff like that but basically what you're looking for is this this result all right so this is what we're going to be using or you can just type it in remix ethereum.org and so that's the online ID for ethereum or solid data development and this is how it looks when you open it up so you can just safely close that home page doesn't really matter and what you want to do is delete that hello world file I'll just show you how to create a new one so you can just right click delete it or I think even the delete button works too so what you can say is right click on the contracts folder so basically the enclosing folder and just hit new file and then you can type in hello world at Sol and this is where your code will go so this is just an online IDE to help you learn solidity later on we're going to be moving over back to vs code so first we're going to need to specify the spdx license and that basically all it does is intellectual property I'm sure you already know it it has to be licensed somehow and solidity requires that it is being licensed so I would just recommend you start working with MIT licenses that just open sources it and anyone can do anything with your app but you're not liable for it I'm thinking I think not legal advice moving on you will want to specify the solidity version that you're going to be working with which is 0.8.0 however there's the little up Caro carrot in front of it and that means that any version above 0.8.0 will work with this app so if your compiler is set point set to 0 8 16 or something that will work with this app perfectly now moving on every contract needs a contract object and you will need to specify the name of it so that's going to be hello world and in there for starters let's just create a variable we're going to go over what variables and data types are in solidity but here we're just going to use a string and let's just name it greetings so first you say the type then you say the name and then we're going to create a Constructor now the Constructor is a function that only runs once and when you deploy the app so when you deploy it Constructor runs and that's it you cannot run it again but it's good for like setting values such as our greetings variable and we can just give the value of hello world to it and it should be good I also want to mention that in solidity you need to add semicolons at the end of each line unlike JavaScript here is recommended and I think it also even fails if if you don't do it now we're going to also create a function here and I will just be say hello function it will be a public view function that will return a string from the memory I just want to pause here for a quick second let's just go through what what means what so function that's that means that it's a function say hello is the name of the function and after the function name you have to put the open and closing brackets after that comes public now public means that you can call this function from outside of this contract if you were to say private or internal you wouldn't be able to do that and in this case it makes sense because you want to be able to call it from the outside if you don't then you can just say public a private or internal next view means that this is a readonly function meaning that it will not be able to change any values or do any kind of permission things so if you were to give a new value for to grading inside this function that would throw you and returns means that you have to specify what this function will return and then string memory so string the data type of what will be returned and memory is an interesting one so strings can be stored in multiple places in solidity such as memory storage and other places it doesn't really matter just use memory every time you return a string reason is a solidity doesn't support returning Dynamic values in functions so that's why you need to specify memory and so this function all it will do is it will just return Greetings or greeting and that's pretty much this is now on the left hand side there is that solidity deployment icon and that's what we'll be using to deploy this now you can you have to make sure that in the contract drop down you select the right contract once you have multiple files in there it'll it'll make sense to double check it now it's obviously hello world only because that's the only file you have and let's just hit deploy and see what happens now we just deployed it and it's actually quick here unlike the actual ethereum blockchain because here it's a virtual blockchain it just works quick so there you go and if you go down to deployed contracts and open that open the drop down there is your deploy contract and you can just click say hello that means that's just trying to simulate you calling the say hello from outside the contract so let's click that and there you go there is Hello World being returned that's pretty much all this app does but let's just change the greeting value to let's just say hello and if you redeploy it again because here every time you make a change to the contract you have to redeploy the contract otherwise it will use the previous instance it's called commit so you have to always commit to use the latest versions you just keep deploying it every time you make a change and now it will return hello so that's pretty much the hello world now let's move on all right let's go over the most basic data types in solidity so I'm just going to go ahead create a new file in the same contracts folder and then just select that so it will be data types.sol usual xpdx license pragma solidity every single file requires it so you will need to specify it here as well now the contract here will be called data types it doesn't actually matter we're not like this is not going to be used anywhere but just for organizational just for the sake of organizing it let's just call it data types and let's start with the first one it's gonna be you win256. that is a integer and that is a positive integer number that you can sort store here and basically the largest number is 2 to the power of 256 minus one which is a pretty big number you're not going to be using it all but it is capable of storing that now I want to say that solidity doesn't support facility doesn't support floating Point numbers so we're gonna skip that and now we're just gonna go with the booleans right now so that selfexplanatory if you know coding you know it's true false that's it but here we call it Bool and then there is string I think we or everybody knows strings it's a regular text or special characters whatever let's just ring of characters all right so next up is addresses and that is specific to solidity now address is used to store wallet addresses or contract addresses or any kind of ethereum address it and here we're going to have a payable keyword in there so that's just going to specify that this contract is able to send ethereum or ERC token or any token to that address and you also and also make sure that you have you typecasted as a payable so payable parentheses and then paste the address and that will be your address if you don't do that this contract will not be able to send any currency to that address all right moving on last one for this one is bytes32 and you can just think of it as a 32 character long string all right now let's take a look at what type of arrays do we have because that is a little confusing sometimes so far it's the same basically what you do is you specify the data type of the array so if you say un256 and then put the open closing square brackets that will mean that it will be an array of hue in two five sixes so like basically positive integers up to a lot then you can do the same thing with Bulls you can do the same thing with strings and you can do the same things with address payables and if you do payable addresses then the square brackets go after payable not after address that's something to look out for the same typecasting of addresses the payable stuff is applied here as well and that is pretty much all you need to do about or need to know about arrays now you might be having the question that can you put multiple data types into one array a short answer no long answer yes it's getting to the very complicated parts and it is about the best practice to use structs for that which we're going to cover in a little bit I would say you can technically do it but you never really need it so I wouldn't really try to do it all right let's move on all right let's go over mappings now this is again something that is very specific to solidity and only available in solidity and it's a weird data type so you declare it by saying mapping and then you say this basically you'll Define two data types that are going to be mapped one to the other so in this case we're mapping a uint to a string and now you might have a question why is it not a u in 256 u in 256 and U in are the same sometimes these compilers add the two five six sometimes they're not it's whatever it's interchangeable really so in this case what we're gonna do is map a number to a string you should think of it as like key value pairs is going to be public meaning it's going to be accessible from the outside world and by the way the less mapping creates its own function so you don't see it but it's like under the hood if you deploy it you're going to be able to call this my map thing so let's take a couple let's take a look at a couple of examples let's say let's say you're keeping track of the name of every user who uses your app so that would be this would be a perfect mapping for that so what it would look like is you would say one that says quasi two Kevin three David that's basically how you should think of these mapping all right so let and let's say you wouldn't just want to add some value to it so let's say how you interact with it so we're going to say function add value and you will need to pass in a uint which is going to be the key which is one two three whatever and the string that what you want to pass in or you want to map to that key and this is going to be public and this is how you do it so basically you say my map and then you pass in the key and then you pass in the value so let's say number four John is using the app you will call the add value function and then for the key you're going to pass in four and for Value you're going to pass in John so once again juancazi two Kevin three David four John now this is going to be new item now let's say you just want to return one of the functions you want to figure out who was the fourth person that used your app so you will just pass in key as it like four as a as the key and you're just gonna say my map return my map key and it will return you John and let's say you want to remove that because John is not using your app anymore again you pass in four as the key and you're going to say delete my map key that's it that's pretty much it and John is gone rhyme so let's take a look at it in action I was just passing zero Kevin transact you're gonna say get value you pass in so you're interested in what's happening or what what is stored what is mapped to zero and it returns Kevin as perfect and one doesn't really return anything and you're Now You're Gonna Save one to David and transact now it will return it and let's say you want to delete Kevin you're gonna say delete zero and now zero is not going to return anything so it's just gonna say you know to string and that is pretty much all you need to know about mappings I know it's a pretty complicated and doesn't make sense for the first time but as you start using it it will make all the sense and it's actually really useful data structure all right with that said let's move on to the next part all right now let's talk about structs structs is basically if you're coming from the JavaScript world it's an object that went to the gym and got buff and has all these super powers so in the me so why you can create objects with structs it also creates a custom data type so let's take a look at it so you're going to say struct person and here's where the magic starts to happen so you will open up an object you will say string name un256h and bull has driver's license it reminds me like a class so you have all these attributes of a person and now what you're going to say is person my person slow data type variable name and now you're going to create an instance of it so you're going to be passing in a name which is going to be Alice she's 30. and she has a driver's license so that is your person and this is your struct this is pretty much how you get started and let's move on to functions all right let's go over the if else statement in solidity this is going to be very explain this is going to be very similar to how it is in JavaScript so let's take a look here's my Hello World app just pasted it for the boilerplate you can say controls rename it let's just say we have a number which is five and we're going to say if the number is less than five then specify to do something else if if it is if it equals five then do another thing and there's obviously the else Clause that will just catch everything else so that's pretty much the syntax let's put it into a function and we're gonna this is going to be we're gonna call it check num and it will return a bull and so there's our if else statement and yeah if it is less than five then let's just return false then we can return true if if it equals five and otherwise let's just return false that is pretty much it will be able to integrate it to your app all right now let's go over four loops so I'm just going to paste in the previous contract and let's just rename it remove all the useless stuff so we'll all we have is just the boilerplate so that's cool and now we're going to create a an array of numbers and just name it numbers because that looks tough looks mandatory all right now let's create a Constructor that takes in an array of numbers again and all we're going to do is we're just going to set the value of the constant of the variable to the value of the array that we just send in so basically we're just setting the value of numbers all right now let's actually Loop through it so we're going to say new function some with Loop for Loop public view returns and okay so we're gonna have a sum which is it will just start out as zero and let's Loop through it so it's very similar to what JavaScript for Loops are I think it's almost the exact same if not the exact same and that is pretty much it it would just go through all the numbers summarize them up and then return these sum to you so let's deploy it now okay initially it aired out and that's because we haven't passed in the array was looking for so we need to pass in that array we're going to say one two three four five whatever transact now at this point the Constructor has run and the numbers arrays value is the one two three four five that we just passed in and now let's go through it so we're going to be able to fetch the numbers so the zeros at the zeroth index it's going to be one that's cool because that's correct and now we're just gonna hit a sum and it turns out to be 15. so that worked perfectly now let's move on to while loops all right so this next one while Loops this is gonna be again the exact same thing as in JavaScript so we're gonna once again just assume that number of arrays so we're going to have the index variable and we're gonna have the sum variable just like in any other loop and now we're going to say while open the Open brackets I is less than the number length I'm just gonna add it to the numbers and then iterate the iterable now we're going to return the sum and that is pretty much this function Let's test it out and it works perfectly just as expected now there's another one that is the do while and I actually don't really recommend using it it doesn't really make sense why it even exists but it is one of the loops so let's go over it now we're going to say do then then do the summarizing stuff and then we're gonna check whether the index is less than the numbers length and then return the sum now you might be asking what's the difference between the two the do while runs ones regardless of of the condition while the while actually checks the condition first and then runs the function based on whether that condition is true or not it's knocking on the door and then entering the room if you're let in that's the while or like similar to the while loop and then the do while is like you just go in take the door with you and then just like hey is it okay that I came in pretty much that's the biggest difference between the two that's pretty much it I don't recommend using do while let's move on all right now this might sound a little repetitive but I never actually explicitly explained what's the difference between the two so I'm going to show you two different functions and I'm gonna quick type them out nice so the second one we already saw it and I already explained what the view returns is it basically means that this function all it will do is return something it is a readonly function that just reads States from the contract or memory or all these things and then returns it to the to the front end now if you want the function to be able to change values or mutate values all you need to do is just simply leave out the view and then you can do your thing if it's not returning anything again just leave it out and you're not gonna need you you're not gonna need to worry about it now you can also have a function that only views and doesn't return anything I'm not I can't really think about use case for that but that is the syntax would be correct and you can also have a function that mutates states but returns something so there are like four types we just went over two main ones the two extremes so that is pretty much all this part is now let's go over to the last part which is function modifiers and that's pretty much the basics all right now this one function modifiers this is going to be a useful one let's just say you want to make sure that whoever is interacting with your contract is the owner of the contract like it's like some admin privileges so you will say you will create a modifier and you can just name it only owner and then you're going to say require message sender equals owner now who's the owner we'll specify that later let's just type it out and then we're gonna say if the use if the message center is not the owner then we can just reject it with this a nice little error message and then underscore semicolon now we're going to say the owner will be this or that address so we can just specify it or you can you can set it later in the Constructor so whoever is deploying the contract will dynamically be the owner but for now let's just specifically say that address is the owner of this contract now what will happen is whenever every function that uses this only owner modifier will be first running the require statements let's talk about the require D basically requires a condition to be true meaning the message sender so whoever is trying to interact with the contract the wallet that is trying to interact with the contract call a function send money to the contract anything anything that involves a user and this contract that is the message sender that wallet is the message sender so if that wallet address is not the same as specified on line six as that is the owner then that function has to fail and send back the you are not the owner a string is an error message and after that whatever else is in the function that will run that's what the underscore semicolon means so let's take a look at what if the get number function is only going to be accessible from now on by the owner so that means that no one else is going to be able to get the number which is five right here so no one else is going to get that response back but this one address that is specified right here so what's going to happen is when somebody calls this function this line will run first then this line because this is here so if this some underscore semicolon was before the required statement then this would require return this number first and then check whether the message sender is the owner but for security reasons that's not great so this is how you modify these functions and the reason why they exist is you might have multiple functions you want to make sure only the owner is able to access so at that point you can just keep using it keep reusing it like and obviously the modifier doesn't know doesn't have to be only owner in this case it was the easiest easiest example but you can also say modifier add two numbers and then it will just add one and two and then that runs before every single function call where you use that modifier so it can literally be that you would do multiple times it is recommended that you just put it into a modifier and then just keep using that in the functions let's take a look at it in action so we have the contract deployed and we're going to say get add two numbers we're just going to pass in three there nice it will add it to mean my number so now it's going to be eight and when you say get number because this wallet on the because this panel on the left hand side is not hooked up to the same metamask wallet now it says you are not the owner and it just threw an error however if I copy this account address here with that button and then just paste it now all of a sudden it will work so let's take a look at it we will have to deploy it again and then add the two numbers and let's see what what happens and now it return the now it returned the value so that is pretty much how it works all right now remember at the very beginning of the video we just went on to remix IDE now we're going to come back to vs code because I'm pretty sure you want to be able to eventually connect your app to a front end and even in all our tutorials that's how we do it let me just show you the whole workflow of solidity and if you're a very if you're a super beginner don't worry about it you can come back to it later when you're using it I just want to give it to you so that you are able to use it whenever you need to so what we're going to do is I'm going to show you how you can deploy your hello world solidity contract to the ethereum blockchain so we're going to be using the girly test net and there are multiple test Nets right now Gurley is the best one so I just recommend you use that and so the first step that we're going to be doing is we're going to say Truffle in it so you obviously need the Truffle CLI and so we're gonna say Truffle in it and we're gonna say hello world so that will go ahead and in two seconds create you a sample project and so in here you have all these folders and you don't need to worry about any of them so what we're going to say is Hello World dot Sol so far I'm pretty sure it's it makes sense and now just go over to your remix IDE copy here your code all right now that is here that's actually set up our deployment so what we're going to do is there's a link in the description that takes you to infuria and once you create your account which you which is completely free just go ahead click it they hooked you up with the best RPC URL so let's go ahead and once you're in here you can click create new API key or this might be in the middle so you can just say web3 API now this is this all this does is it will give you access to all the blockchains and everything that infuro has access to and infur is implementing and they are constantly adding new Services Under in their projects so we're gonna say my project let's just go hello world and I recommend you never put any spaces in these projects names later it might cause an issue when you're like doing all kinds of Integrations between vs code and inferior because you can do that so let's just go ahead hit create and as you can see this is where everything is at so these are all the services infuria is currently supporting so you have ethereum you have polygon optimism arbitrum Palm I don't even know any of these no actually I do but you have all these and you obviously have all the mainnets test Nets and everything so we're gonna go ahead select girly because that is our RPC URL here's your API key everything is ready to go they even give you these nice little command line tools so you can use it with that all right now let's come back to our vs code and you should install the truffle extension for vs code and here is everything you need for that to work so what we're going to do is we will connect Now using these this network tab to inferior so we're going to say connect to network the provider will be infuro and I need to sign into my inferior so that's cool now I'm just gonna go ahead open it that will take me to an inferior oauth page if you're already logged into inferior you're pretty much good to go if you're not it will make you sign in and then this is what you will see basically you're just gonna you're just gonna give access to trough give truffle access to your infuro by the way they are under the same umbrella it's nice you just hit authorize and your vs code is pretty much ready now you can close this page go back and it already shows you it will fetch all your projects or you can just go ahead and create a new project here and that will show up on your inferior so basically the two are linked together hit select the hello world and if you click on if you're a service here you should be able to see Hello World or whatever you name your all right now let's actually deploy this contract so let's see what do we got so in truffle it shows up there is your hello world solidity file I'm just going to go ahead select that and then there is this nice little deploy button and we're going to select the girly Network and by the way it fetches from inferior cell that's super cool let's just hit enter and it says unable to locate configuration file okay so the reason for that is this extension only looks in this root folder so what I will do is I'm going to say open folder and I'm going to navigate to my Hello World folder and then just open that so now it should work all the extensions are going to load in a second and now truffle will be ready to go so I'm gonna I'm gonna go ahead and hit deploy right now so let's hit that now it will show you all again all the networks that is available so you just want to make sure you select the one that is the inferior hello world world girly you definitely don't want to do mainnet because that's going to cost you a lot of money and I was going to ask for a gas price leave that empty don't worry about it it will just do some smart clever stuff if you leave it empty and now we'll have to set up a mnemonic now I already have it set up and here's what you will need to do to be able to have it set up and saved so you will want to say pace mnemonic I wouldn't recommend generating one because then it will be hard to add new ease to it because now you're going to have to pay gas fees for deployment so we're going to say paste now it's going to ask for the mnemonic and I'm going to open up my Chrome and if you don't know the mnemonic that's the secret recovery phrase I'm not going to show you mine but here it is basically so you open up your metamask and then open up settings and then in security and privacy the first option is reveal secret recovery phrase everything that is in there you just go ahead paste it in this thing and if you don't have a metamask yet it's basically free from the Chrome web store you just download it hit next next accept and you already have a meta mask wallet so that's pretty much it now you're gonna go ahead whatever it is pasted there hit and hit return it will pop open a finder window for you so you can save the mnemonic and that way you will have it just like me how I do right there so you can select that and that will go ahead and start deploying your hello world project and I will say it might say that it needs this HD wallet provider so let's just hit install on that so it will take a little bit of time to install that and then deploy my contract all right now as you can see there are multiple errors and there was one mistake that I made too first of all let's go through the air it took me a little bit to debug it but basically what's hap what's happening for me sometimes is this truffle HD wallet provider it doesn't always install so what you need to do is just copy this font this command the sudo npmi etra4 HD wallet Dash provider and the version and then just paste it there give it admin permissions if it will go through there's some excess issues that it was not able to resolve so with that this should be handled now the next thing that I missed that I forgot is now actually by the way I always forget it so it's just something I do on a daily basis is in the migrations folder we will need to create a new file that will be one zero one underscore deploy.js now this will help truffle to deploy our contract so what it what we need to do here is we need to import the hello world artifact from the contract that we just created and notice how I'm keeping the same casing that I had with the file name so it's because I used Capital H and capital W I'm going to be using it here as well and once that's done we're going to say module dot exports and then pass in deployer as an argument for the function and we're going to say deployer dot deploy and then pass in hello world that's pretty much it actually we can just do it as a oneliner that should be pretty much everything and now it should be able to deploy so let's go ahead here again click deploy so you will have to always select girly but after that it will remember if you once try to deploy it it will always remember the mnemonic and now it's deploying and looks like there are no more errors so that should be good and if you see stuff like this where it like starts counting the blocks that's usually good and as you can see deploy has succeeded it finished running the command so with that is pretty much this tutorial now we're going to include a couple of builds at the end of this video go ahead watch that what uh learn how solidity Works in actual projects this was a good foundation now it's time that you go ahead go out and apply these skills that I just taught you so with that said thank you so much for watching I'll see you in the see you in the belt it's for solidity do you want to finally understand it and wrap your brain around it well guess what we are going to build a todo list app together in my opinion this is one of the best ways to learn how solidity Works how smart contracts work is this app the scope is small it's a simple app yet it's very powerful and effective and it'll get you to understand how a lot of functionality and solidity Works how can we use solidity along with truffle to make our smart contracts how do we add a task and delete a task and show all of the tasks how do we add a task so that it actually adds it on to the blockchain and when you get all the tasks your front end will go to your back end or your blockchain and get all the tasks from there this app will also have full on authentication built into it which essentially means that you'll be able to use metamask or any type of ethereum wallet and log in and log out and this app will only show you your tasks so any other users can't see your tasks and cannot delete your tasks so I think it's a very powerful app I hope that you're excited to use it and with that said let's um smash that like button so this video goes out to as many people as possible and in just a second we're gonna go ahead and demo this app also just real quick want to give a huge shout out to code with kavit who made the video to do app with react and solidity so huge shout out to that a lot of the inspiration comes from that I reference the code from there okay but I just added in next.js a lot of our front end completely custom frontend and we wanted to add in our own explanation so you could learn salinity step by step but if you want to check out also his video go check it out he's absolutely awesome with that said let's get back into the video now let's go ahead and demo the app so the first thing I'm going to do is I'm going to connect my wallet and you can see metamasks popped up over here on the right hand side I will select an account select whichever one you want and I will connect and boom look at that our app is up and running and it's like hey what's up Kevin or Causey or whatever your name is right we'll go there and now I can add tasks walk my dog at 1pm which is actually something I have to do and then hit this plus sign right here and watch this we're actually adding it to our blockchain so now metamask pops up to ask for authentication if we want to do this I will hit confirm and it has been added onto the blockchain and it is a actual task that is created let's go ahead and create another task I'm going to go ahead and eat my food at 5 PM okay let's go ahead and hit Plus on here and now just watch what happens okay let's hit confirm there we go it has been confirmed the front end is looking pretty nice but the main point of this app is not the front end it's that you could actually using solidity add tasks and things to the blockchain and it will really clarify and make you understand a lot of things of how solidity works and how smart contracts really work now if I hit delete on here this icon right there you'll still actually delete that so I'll hit delete and then let's wait a little bit and let's refresh and let's see if it's been removed okay boom I hit delete and now it actually asks me to make sure that it's confirmed and now once I confirm it okay you got to give it some time before it will actually just completely get rid of it because we are removing it we have to let the block our back end on the blockchain side know that we're actually going to be getting rid of it and now it's basically gone and this is happening on the blockchain sites I'll show you how we're doing this on the blockchain side so you can understand and since it's on blockchain you're not technically completely deleting it but we're filtering it out on the Block end and so you'll get to learn how to do that so this is the app I think it's really cool I think you can have a lot of fun building this with me with that said let's just start building this bad boy up now all right now make sure to click the link in the description below this is completely free and this is a template that I created for you solidity with the todo list and it's going to have next.js and Tailwind CSS and all the front end code essentially just ready because I would just give it away I would want you to Simply focus on the web3 and the blockchain part so this Rebel for you will have all of that code already there and then you can only work on the solidity part okay so make sure to go here and if you want to use this make sure to hit Fork Rebel because that's the only way you'll be able to code in here and use this template okay and the link will be below and it'll be join.raplet.com CP solidity Dash to do so you could type that in or just click the link in the description all right with that said I'm gonna go ahead and Fork this ruffle and once I've forged this it should bring you to a page like this and all this means now is you can actually code here and so the benefits of this Rebel that I've sent you to is in this one you will have nexjs already installed all right you'll have Tailwind CSS already installed and configured all the frontend code is already completed so you won't really have to do any of the front end code okay majority of the front end code is complete okay let's not say all because there is still you're gonna still need to write frontend code that needs to interface with the back end okay so that's done truffle has been installed so truffle is I'll show you how to install it but I installed it already for you because it takes a really long time to install so I'm like hey I'd rather just have that process speed up okay this is done this is done most of this is done and then this is done okay so that's the real benefit of this Rebel that you're actually looking at all right so let's get started with that said what I'm going to do now is I'm going to walk you through majority of the code okay what's there so far and what you should find in here because you should find a client folder and that should have all of your frontend code okay so I'm going to walk you through that a little bit and then I'm going to walk you through some other stuff but first just make sure in your package manager all I want you to do is install truffle so you can type in truffle and normally what would happen is you'd have a plus sign here to install it you don't right now like plus sign like this you don't right now because already installed okay so that's already done so let's go here the next thing I want to show you is in your client front end in your package Json you're going to need access to some libraries like react icons or next or some Tailwind stuff that's already there for you okay so you don't have to install it you could yarn it but you don't even need to do that because like the node modules are already there as well so you should be good to go on that end so react icons you already have it then Auto prefix for post CSS until when CSS because these are all the things you need for CSS this the Tailwind files you need for so yeah your Tailwind is ready to go cool so that was one thing I had to explain to you now let's walk through the actual app so let's first take a look at it so you should be able to CD right now into your app into client and then just do yarn Dev and that should start running your app so let's take a look you can also open it in a new tab if you want to just fully see it it takes a second to just be a little bit patient and there you go your app is up and running okay you could zoom out if you want I'm going to zoom in because I'm on a big screen so I want you to see this and right now writing on your app will not work because that's the back end part and you haven't added any backend code so really nothing is going to happen okay it's just gonna refresh and that's it yeah right now there's no front end so whatever you do nothing is really going to happen but you have the nav bar right here you have the entire todo list app you have this to do thing and then you have this plus button right over here so that's mainly the front end right now so let's go back and what I want to show you is these are all the components that I've already created for you okay so the connect wallet button navbar all of those are there okay so navbar task todo list so those are already there for you okay connect wallet button and wrong Network message now some of this stuff you're probably like okay how do I see the wrong Network message or connect wallet button because I don't see them right now so here's how you can see them so let's go into our Index this is the main file where everything is happening these are all the notes for the app but I'm going to just walk you through them together so we won't need them so I'm going to get rid of them okay and let me just walk you through the entire code base okay so let's put that here and let's just walk through the entire code base now all right so we're importing some of the components that we had made but here's what I want you to actually see all right the main part of the logic so these are functions that are just going to be empty all right these are functions you're going to have to complete these are the back end functions so connecting the wallet being able to get all the tasks from the back end being able to add a task to the back end and being able to delete a task from the back end so this is all back end related it okay all three of these functions so when I say backend in this case it's the blockchain part this connect wallet function is going to just simply be connecting wallet to metamask to any type of ethereum erc20 wallet whatever all right so those are the ones that we're going to work on and this is the other main part that I have already handed over to you so this over here this div there's not much to really worry about here but this is really styling it if I get it rid of all of The Styling here it's just going to look like out of whack right so that's just a wrapper that's all that's doing so I'm going to bring that back and that'll just contain the app put it in the middle add a color in the background centralize things so that's what that's doing okay so now you can even pretty much not really worry too much about this piece of code this piece of code the main piece of code that I want you to focus on now and worry about is this guy right over here okay and that's really the main logic of the app so far which is hey check if the user is logged in and if they're not logged in show them the connect wallet button okay so here I can make a user B let's just fake a not logged in use sir and what that will look like how we can do that is just remove that Boolean that exclamation mark let's remove that exclamation mark so it just says is user not logged in so now it is true that the user is not logged in okay and if that's the case then show The Connect wallet button so that's why it's showing that button right there and now we the other situation we have is hey is this the correct Network okay so basically if the user if we go back to the other situation okay which is the user is this basically says the user is currently logged in okay because there's a double negation here negation here so it just means the user is logged in so if the user is logged in we bypass this component we don't do this we do the else statement okay so this is our else statement so if the user is logged in then we want you to ask one more question is this the correct network if we're on the correct Network which in this case is going to be the rinky B test Network then show the todo list so then show this but if we're not on the correct Network so I can mimic that as well by just adding exclamation mark here and saying we're on the wrong Network so if we're on the wrong Network then it's going to not render the todo list but render the wrong Network message component and this is a pretty simple component there's not much going on here and just says please connect to the ring could be testnet and and reload the page so this means you try to connect to some other network like raw spin or something else so that's what's happening there right if the user is not logged in and this is not the correct Network then show the wrong Network message okay so those are the three components and you can toggle them really easily by just removing if I remove both of these right then that means the user is not logged in and it'll show us the connect wallet button if the user is logged in then it'll show us and it's the correct Network then it'll show us todo list and the todo list pops up so just play around with that so you can just understand the logic that's happening here okay because that's the really kind of important part and then of course we're going to make this more dynamic because right now this is just hard coded here but we're gonna actually get access to the user using their ethereum wallet so you're going to need to complete the connect wallet function for that okay and then you'll be able to actually keep track of the logged in user and then where it says is this a correct Network same thing it's you're just going to pull that information from connect wallet and your connect wallet will be able to tell you if this is on ring could be the user logged in or the user logged in somewhere else okay so the connect wallet function will take care of both of these states that you need to be really tracking okay these are also going to be States right or so we're going to be using a little bit of react for that so for now what we're going to do is we're going to go ahead and Tackle really the most difficult part first which is we're going to be going ahead and making our smart contract first because really majority of this code like especially all these parts right here they're really going to depend on what your back end is like AKA what your smart contract is like because here you it's like imagine writing code without knowing what your API is going to look like everything you're going to write is going to be wrong so we're going to make our back end first and the API or whatever first and then from the front end we'll simply just interface with it okay so I hope that gives you a lot more clarity of what we're doing and now we're gonna go ahead and do that okay so let's go and create a back end now so this is our front end okay this is our client front end we're going to create a new folder okay at the global level I'm going to hit folder and make sure it's not in side of client make sure it's outside of client and this folder we're going to just call it our backend or the blockchain part okay and we're going to go ahead into our command line and we're just going to CD into that so hit Ctrl C to end hit CD dot dot so you can actually get out of it and now we're gonna go CD back end okay and now if you're in your back end now we're going to go ahead and say Truffle in knit okay so just type in Truffle in it all right so once you do Truffle in it if you look in your back end you already you have files now so you have truffle config you have a test file a migrations contracts another reason why I'm doing this on replit is you don't have to worry about this installation nightmare that often happens while you're coding Along on a Mac or a Linux or a Windows and you can get a solidity thing to install or a truffle thing to install or next install so everything is already installed and there for you okay so just make sure that you've forked the correct template and again it's in the description if you missed out on that earlier alright so I've done Truffle in it now my like template project is ready to go now we're gonna basically go ahead and create a smart contract so this line over here that says truffle create contract your contract name we're going to go ahead and use that command to create our new contract okay and that's going to create a scaffold of a contract so just like Bare Bones contracts I'm going to go ahead and say truffle create contract and then we're going to go your and sorry not your but we're going to say task contract okay because we're going to make a contract for our tasks so essentially we're getting a back end for our tasks all right let's do that okay so this contract will allow you to create a task and add a task and show tasks and filter tasks it's going to be all task related now if I look inside of my contracts I will see task contract dot Sol okay so let's go inside of here and now it's going to be the really meaty fun part because we're actually just going to be writing a lot of our logic here for our code okay so this is going to be all of our backend logic so it's going to be actually a really important part great let's walk through everything step by step because especially if you're new to solidity I just want to make sure that you understand every possible thing okay so I'm going to zoom in so everything is super nice and clear all right first thing right here this is oftentimes you will see it in solidity just add in some kind of license okay so just you can copy paste this exact one right should be there already now the solidity version that we want is a specific version in this case and I want 0.8.15 okay this is a version that I want every single line of solidity that you end you have to end it with a semicolon if you don't you will get an error or your app will break okay so that's important and here whenever you're actually writing a solidity file you pretty much always have to do contract task contracts so imagine like this is function or a component past contract when solidity you say contract and then this Constructor we don't need it so we can actually get rid of that Constructor okay in here we're going to have two events so I'm gonna have an add task event and is going to take in a so let me write it like regular JavaScript first so so it's going to take in a recipient and it's going to take in a task ID okay so this is how you might write something in JavaScript or you're like okay I'm creating a function or whatever and this function takes called it's called add task and it takes in two parameters recipient and task ID except in solidity you have to say those their types so recipient will be a type address okay so those wallet addresses like whatever the wallet address is like those are specific types of solidity and you refer to them as address and then task ID is going to be an unsigned integer okay so we will say u in and then we're also going to need an event for delete task okay and delete task is going to ask for a task ID and it's going to ask for if it's deleted or not the task is deleted or not okay and task ID is going to be auint okay and then this is going to be can you guess if something is a true or false also what data type is that if you guess Bool good job okay so that's going to be a Boolean all right now we're going to create a data type that's going to represent the following structure so let's go into our index file and I just want to kind of show this to you in index our tasks will have the following structure so this is an array of tasks but this is an object or in in solidity you might call this a map or a struct this is this right over here okay is an object here right JavaScript this is what one task will look like it'll have an ID text and whether it's deleted or not okay so that's what one task looks like so if I go ahead and I go back to my task contract you could do command P for what I did and then just type in task contract okay so we're gonna now create a structure that mimics what we saw so I'm going to go ahead and do struct and task and this structure is just going to say hey it's going to take these are the keys okay so we're gonna have an ID we're gonna have task text and we're going to have is deleted okay and the last thing you want to tell the struct is what are the data types of each of these so for ID my data type is a uint for tasks text is going to be type string and for the is deleted it's going to be a Boolean okay so in solidity if you want to create let's say something with an object right if you want to create a task like if I go back to this task right here if I want to create a task like this so let's copy this and let's come back into our task contract and let's paste it if I want to create a task like that I can use a struct to create that exact task so I can go task and then let's say I pass it a one I pass it clean and let's say I pass it false sorry zero it's going to create that exact task so this is going to return and turn into an object okay so it's almost like you're calling a function or whatever okay it's a Constructor it's a task and then it'll spit back out that okay so that's how that's why you need structs and when you use a struct you will get back what we call an object in JavaScript okay this is just to give you a little reference okay so I'll leave that reference up here and this is a task okay this is what a task will look like okay great so we have our task struct and now what we want to do is we want to have an array that is filled with tasks so when you're creating that you're going to basically say hey I want to create a so let's just do it this way okay so I'm going to create an array called tasks in JavaScript you would just do this but here this is not JavaScript right so I want an array called tasks now what I want it to be is I want it to be of I want it to be an array okay and it's going to have it's gonna be an array and it's going to be filled with these objects okay so if you try to put integers into this array tasks so for example let's just say you try to do tasks dot push so let's say you have this variable tasks available to you now okay and let's say tasks is an array now if you try to do task stop push and put a one it's going to go it's going to give you an error because it's going to say hey that's not the type that you told me the type that you told me it's gonna this is the type this is what it should look like but now if you actually put let's say something that looks like this in here if you try to push this it's going to accept it it's gonna go yes this exact thing okay this is an integer this is a string for task as a Boolean yes I will accept it and it will add it okay so you're creating these strict types so it's like typescript if you've ever used it and then we're just going to say this is private meaning that anybody outside of this function should not have access to it okay and then we're going to create a mapping which is going to be helpful for task two owner so we'll say mapping and I'll say units 256 address task to owner so I know this is probably like what the heck is this all this part means so this part right over here is just a variable okay we're just saying hey create initialize a variable called task to owner and the type that it's going to have is this and all this means that anytime you create task to owner you're going to have an object that looks like the following the key this represents this part right here represents a key right over here represents an address okay obviously and an address might look like those wallet addresses might look like that okay so here let's just say that this is the wallet address of qazi which is me okay and then we go boom all right task to owner and then boom we will have another task like this oh not in the same thing but let's just say we have another task and this is Task one and this is David okay so how this will work is imagine this you have two tables okay and on the left hand side we have a table called tasks and then a right hand inside we have a table called owners okay and so say walk the dog might be a task and then here on the right hand side for owners you have all the owners like qazi whatever but the way that we're storing it is in the following way so we're giving this task an ID of zero so we're going to set the task ID here is zero walk the dog and inside of owners we're going to say the idea of zero belongs to let's say qazi and almost like in SQL this will allow us to do an inner join and match all these tasks so this way the app will have proper authentication and it'll show me only my tasks not somebody else's for example if for one we had clean dishes but that was like David created that then this would basically say hey this was created by David okay so then when qazi logs in qazi will only see walk the dog and when David walks in he will only see clean the dishes okay so the ID inside of the task and this ID this key over here these are the two pieces of the puzzle that allow us to do an inner join and find and the who the tasks belongs to so this is a structure this is what mapping blah blah whatever is okay this is what it'll look like so I'll get rid of that for now okay cool now next up we're going to create a function and this function we'll call it add task all right let's keep on rocking and rolling here so our add task function that we're going to make is going to take in a task text and it's going to take in is deleted okay so here's what I want you to imagine right now this function that we're actually creating here right now we can actually call this function from our front end okay so imagine that we're going to be calling this from our front end at some point and how we're going to be calling this from front and at some point is going to look like this from our front end we're going to do task contract dot add task function and then from our react slash next.js code we're going to pass in a a text like walk the dog and then we're going to pass in is deleted as false or true so we're gonna let's say pass in like this is not currently deleted this is so deleted is deleted as false so this is add task function or method or whatever you want to call it that we are creating that we could interact with eventually from our front end not right this second okay so that's what we're writing just keep that in mind all right now since this is solidity we have to tell it what types these are so task text this is a string and when you do string you sometimes have to write memory there so we'll just write that and then this one is a Bool okay so that's what that is all right so we're done with that part now what we want to do is we want to basically say that this function is external so we have access to it from outside of this too and external basically means that this function isn't really doing isn't really returning anything in this case Okay so we're gonna go ahead and say we're going to create task ID and what will task ID be so think about it like this okay say you have an array of tasks so you have an array of tasks and that array looks like this like this filled with these tasks okay so we got task one we got task two task three what we want to do is we want to generate task IDs here right and we want to generate preferably a unique task ID most of the time and we also want to just make it simple like the first one should be zero the next one should be one the next one should be two so on and so forth this is easy what we could do is say that this array is called tasks what we could do is we could just say when we're creating this task we could just for the ID we could just say hey grab the tasks and grab its dot length so if I get this task's length well I get zero well when I get this tasks length the second time I get one when I get the tasks like the third time what do I get hopefully you guessed it okay you get a two right simple we're just gonna say it's going to be tasks.length okay and we're pulling the tasks from there make sure to put a semicolon so it doesn't error out next up what we're going to do is whatever task the user passed in we need to append that to our tasks array right that's made up of these task objects okay so I'm going to say tasks dot push and now we're going to create that object okay so I'm going to say task Constructor then give it the task ID that we just created right there we're going to give it the task text and then the is deleted task text and is deleted so this will push it on and basically what this is doing is this right here will basically get simplified to that right there okay one task is going to create one object one map all right next up we need to set up that database of task to owner so create that relationship so I'm going to say task to owner okay and I'm gonna give it a task ID for task owners remember this variable that we made task to owner and so it's going to take a uint right and the unit in this case will be zero for this task for the next tax is going to be one for the next task is going to be two and this over here needs to be whoever the user is okay so user is going to go right there okay the logged in user in this case we're just going to say message it's on sender this is a special thing in solidity MSG message and then if you do dot sender it'll get the wallet address of whoever was currently logged in let's put a semicolon here let's put a semicolon here okay and then we can even emit this and we can say omit add task and I can send message sender and then give it a task ID remember we created this event at task and now we can emit it but we just need to give it an address for the recipient so this is the recipient and then this is the task ID right giving it that task ID perfect so in terms of add task function our add task function at this point is complete I'm going to remove these tasks at the bottom or I can leave it and just comment it out all right the next function that we need to add is our get tasks function okay or get my tasks function so let's go ahead and do that so I'm going to say function I'm going to say get my tasks and we're going to say external view returns and we can even say what this will return and this will return a task like object okay and now let's open this function up and start writing okay so we're going to create a variable called temporary okay and so temporary is just going to be an array and what we want to do is we want to keep pushing new tasks to it that are of that owner okay so temporary will filter for the owner and for nondeleted tasks okay so get my tasks we want to do is we want to get tasks that let's say that have that are mine and not yet deleted okay so temporary okay and it's gonna give a new task like object we'll instantiate it like this okay and this array that we want so temporary is going to be an array and this array that we want so in solidity you could give a size of the array so if I said array of let's just say 2 or whatever or 2 right here then what will happen is I will get an array of size 2 and no bigger like it can't go bigger than size two it has a fixed amount of slots and so what I'm going to just say here is tasks.length why because I want this array to be obviously no longer than there are tasks that wouldn't make sense and this temporary here it's going to be this it's going to be an array of these these tasks okay and we're just going to say memory perfect okay and let's put a semicolon there let's put a semicolon here if you miss any semicolons it will break so just keep making sure to put semicolons everywhere all right now we're going to set up a counter that I'm going to set to zero and then we're going to write Loop through this and so I'm going to say for U int I equals zero while I tasks dot length Okay I plus why are we doing this we're going to Loop through all of our tasks and then we're just going to keep adding them to Temporary and we're going to do a check here so I'm going to say if task to owner of that specific task is equal to the message just sender meaning if this is my task so let's say that there is a task owner that has a key of zero right and so if we look at that and we go and get the key of zero and we go okay the task is whatever if this is going to turn it into its value is going to be an address and if that address of that task matches the address of who's logged in then that means this is these are my tasks okay and we're going to add in one more check and we're going to say hey check if tasks is deleted is false so making sure giving me tasks that are not yet deleted let me zoom out just a little bit so give me tasks that are not deleted okay so if this is the case what I want you to do is set that task in that specific position this is just a way of writing a push okay this is just another way of writing a push I want you to get used to it because in solidity this is like pretty common people do it like this or you're just really basically saying in the zeroth position place this in the first position of that temporary array place this so if you imagine temporary is an array of size two so let's just say it's empty empty right now what this is saying is hey go to position zero so this is position zero and then set that to that specific task so tasks text hello is deleted false whatever so add that task there and then go again loop again and then if you find my task again that's also not deleted at that here okay so that's what's temporary is and then we just increment the counter by one so we will do counter Plus okay so let's get out of this and then all we're going to do is we're just going to spit it out in something called result and result is going to be the length of the counter not the length of the entire array so result is just going to be so if my tasks were two and the total tasks were maybe 10 then this result is only going to be of size 2 and we'll Loop through this so I will say I is equal to zero I is less than counter I plus and then I'm just going to say it for a result of I just set it to be if whatever is in temporary of I okay and then at the end we're simply just going to go ahead and return result okay so that's my function here's my Loop then I do my loop again and then I return my result okay so that's what's happening there just make sure to put semicolons in all the right places don't miss any semicolon that's how I call this on my colon okay great so we're good with get my tasks okay the next one that we're going to work on is add task where does the whole tract end so let's see contract and right there okay cool let's go here and we're gonna go ahead and say function and it's going to be a new function we're going to make and this function is only going to be for deleting tasks because we already have a way to add the task we already have a way to get our tasks now all we need to do is be able to delete tasks okay so I'm going to go ahead and say task ID is delete task once a task ID it also wants is deleted or not okay so we can just say Bool and does make it external great now I'm going to say if the task to owner so it's basically if it's if I am authenticated to be viewing this or doing stuff with it so if this is my task that was given then what I want you to do is get that task ID and set its is deleted to be is deleted whatever was passed in which you honestly don't even have to be past this it should just be set to false but like you could do it like this as well that's fine and you can set it to true I'm sorry true so just locate it's deleted as true and then we just emit the events okay this is not completely necessary but you could do this now basically just so you can visualize what's happening is from the front end how we're going to call any of these functions from the front end we want to be able to just do task contract that delete ask and then we give it a task so we give it like an ID so we give it zero I'm just mapping this to that and then we give it this so we just go true so that just means hey I am confirming that I want to delete this specific task and I'm saying 0 comma true and then it will confirm and then delete that task okay but realistically all we're doing is we're not really deleting tasks all we're doing is setting its deleted value to true and then in our get my tasks we're just filtering for it we're just really there's just a filter okay and that filter all it does is it just doesn't show you anything that has the deleted value set to True okay so the filter is filtering is happening here specifically right okay make sure it's not deleted is what that line is saying and then here we're just marking so think of it like we're just labeling it as deleted and then we're just filtering it because on the blockchain you can't really delete anything all right cool and then now we can get rid of this so with that said our smart contract part that we wanted to write our smart contract is done all right so if you've gone here really good job awesome job and now we're going to go ahead and move forward okay now we're almost ready to interact with it from the front end we're very close but not completely there yet so what we have to do is get it ready to be interacted with from the front end so we'll need really two things we'll need a contract address a diploid contract address we need to deploy this okay so that means almost imagine like you're deploying it to the web and then you can access it from your front end okay or you're deploying it then the second thing we need is access to a which if I want to make your life really simple is literally just an ape that will allow you to use all these methods okay so we need this and we need ABI okay I luckily for us gets created pretty easily in the back end okay I'll show you where that gets created once we go ahead and create it for now the most important thing is we need to get a deployed contract address all right now here are the steps that we're going to take so in our back end let's go ahead to our migrations and in here we're just going to rename this to task contract everywhere so task contract that should be task contract and that should be task contract once we're done with that we're just going to download this entire project so everything from Rebel okay we're going to download it as zip on our local computer because for this part we need two Terminals and then Rubble replace currently you can have two terminals open at once and so I'm just going to go ahead and download it and then we can use it locally if you have ever if you ever have problems with downloading just simply refresh your Ripple and then just go ahead and try downloading again and then it should be fine all right so now we have this ZIP file let's go ahead and open this up this ZIP file once it's opened up in your command line I want you to go ahead and CD into it so let's go to our downloads and we're gonna find where that is so so solidity template 2 or whatever okay so I'm going to go ahead and do template let's see if it's CD solidity template two perfect so now I'm inside of this okay folder and now once you're here first things we want to do is this we want to go ahead and install truffle if you don't have it on your local computer just do yarn Global add truffle okay or ndx Global or npm Global at install truffle whatever okay so you're gonna need that okay you need to add it globally you can't if you do it locally it still won't work so make sure you install it globally and then it'll work okay so now we installed truffle globally now what you want to do is CD into the backend folder and you want to do truffle dashboard and this is super cool it'll actually open up a truffle dashboard and you want to deploy it with your own specific wallet address so it allows you to do that so you can actually click metamask here all right and then it says Hey confirm that you're on rinky B Network and yeah I believe that we are so let's connect it okay so now it says there's a green sign here that says connected zoom in there perfect okay so now that it's connected I can get out and I can just hit confirm okay great so now this is good now let's open up our command line we'll leave this dashboard running and just open up a new tab okay so open up a new tab so this one is running or open up a new terminal whatever you want to do is whatever is easier for you okay now we CD into that same place solidity is seeding to back end and what we want to do now is go ahead and do truffle migrate Dash Network dashboard okay so this will compile all our contracts so there's an error you forgot to put semicolon so I'm going to go ahead inside of our contracts and I'll also make sure to put a semicolon here and here okay but more importantly we need to actually fix that on our local file so let's go ahead into our task contract dot Sol and let's see if I can open it with code Runner because it's just quick you could do it with vs code whichever one it doesn't really matter okay and I'll go right there wherever I'm doing the emits and put a put a semicolon here and a semicolon here and just save it okay I'm gonna get out okay let's open up our terminal again and let's try it one more time now it's deploying it look at that already popping up over here that is pretty freaking cool huh waiting for transaction signature please check your wallet for a transaction approval message okay so we're gonna go ahead and now hit process so let's hit process boom or wallet just opened up go ahead and hit confirm okay and now it's just deploying it to the internet okay or the blockchain rather and boom there you go it's been deployed now the very important thing that we need here is the contract address so double click copy that because that's what you're going to need okay everything else you don't really need right now let's go back to our replit and let's open up our shell feels like a ritual feels like a crazy ritual seating to back end okay all right now that I'm inside a rebel and I'm in back end I'm just gonna go ahead and do truffle compile so now once I compile it's going to make my API for me so let's go ahead and see that build contracts boom we have our task contract right here and taskcontract.json that's our ABI AKA our API and what we're going to need to what allows us to be able to talk to this from our front end okay so with that said that is successfully compiled we're done with that now let's go ahead inside of our client folder so let's go here and we're going to go ahead and create a new file and this file we're going to call it config.js so just pretend like I didn't have this file okay so we're going to create a new one didn't mean to have that file okay I shouldn't have that file okay so let's just pretend you never saw that all right and go into clients and you're gonna make it because you're not gonna come with the config file okay so let's go ahead and by the time you're seeing this tutorial that problem should already be fixed and you shouldn't even have a config file so it's great all right now in the config file what I need to do is I need access to that specific contract address that I had copied earlier if you don't have it copied earlier just go ahead double click here copy it now okay and there you go that's the address so just do export const con task contract address equals that okay and this is going to be pretty important so make sure you leave that in your config file okay because this is the contract address we're going to need to be able to speak to it from the front end so almost imagine like this is your access token okay you're gonna need access to your access token now let's go ahead into our index.js and now we're ready to actually start writing up all of our code so we're going to go ahead and import task ABI and we can just say from and we want to get to our task API is coming from our back end taskcontract.json right here so we just need to import this file task contract.json so we got to go into backend and then inside of back end where do we need to go into we need to go into build and then inside of that when you're doing contracts and then go taskcontract.json okay if you copy link to that should that's actually a different link that's not the path so ignore set that cool all right there you have it so now we're importing that address okay that's one thing that we need access to the other thing we're going to need access to is a contract address so let's go ahead and do import task contract address from and this is much closer to us it's just in our config Js you can hit that over there to just purify your code all right now that we have our task API and we have our task contract address now we're really ready to actually finish writing all this code because those are really some of the main things that we needed access to all right first thing we're going to do is Implement our connect wallet function okay because that's going to be kind of the Sim one of the simplest simpler ones and one of the most important and the first thing that happens so for that we're going to need ethers okay and ethers is something that you'll have to install if you don't have it already so we could just go and check if we have it all right let's get to work on connecting our wallet so the first thing I'm going to do is I'm going to pop it into a try catch block We'll add the catch as well okay is going to be just simple it's going to be hey there's an error just say error okay cool and then in the try we're gonna basically write all of our logic so I'm going to say hey grab ethereum from window so whenever metamask actually like latches on so to speak on your app so whenever you like log in with metamask or whatever the window like the Chrome window or the Safari window or whatever you actually have access to a variable called ethereum okay so you could actually destructure that it becomes a property of window you could destructure that out of window okay so we're going to grab access to ethereum and then we're going to say if ethereum does not exist so it's like value is null or whatever then we're just gonna say metamask not detected and then we're just gonna end the whole thing just hit return it's kind of like a guard Clause okay just make sure that's there all right we're gonna check the chain ID and we're gonna get it from ethereum our request and the method that we're looking for here is going to be eth chain ID okay that'll get us the whatever chain somebody logged on with that specific chain ID okay and then we can just say hey this person connected to chain and then we can just write a chain ID okay great so let's go ahead and set a rinky B chain ID and rinky between ID is 0x4 okay that will make sure that the user is on ring can be indeed rinky B is a test Network and it's also what my what I named my cat after and then we're basically going to say hey whatever the chain ID that the user selected if that's not the same as the rinky B chain ID and in that case you're not you're not connected to the rinkabee test net right and then we want to now start getting some State variables into play so let's go ahead and create a couple of State variables we'll just start off with const correct Network we'll have set correct that work okay and this we could set it as false and the start the network that's selected is Fault like not the right one but then when it's set up correctly we're just gonna go ahead and call this and say true because it's going to be the correct one and then we're just gonna end this function because we got the wallet and we got the chain so there's nothing to do anymore just end everything if that's not the case then basically we're gonna hold on let's see oh I'm sorry this should be false because you're not connected to the ring could be test now and then this one should be true okay that means yes we are connected correctly so there we go true okay once that's done let's get our accounts now okay so account is this if I open up my metamask yeah I guess I can open up my meta mask here as well Mount three right so that's an account out of many other accounts so you can see I have multiple other accounts right one two three whatever so we're going to say accounts and we're going to await and do an ethereum.request okay and we'll say method on this one is gonna be let me hide this you can see clearly method is going to be eth request accounts all right once you do that it'll request the accounts and it'll open up that modal where it like hovers over and my modal I mean this thing right when metamask actually pops open so that's what that will do and then we want to do is we want to say found accounts and show the zeroth account or whatever the account that the user pretty much selected okay and once the account is set then we need to actually keep track of the account as well so let's go ahead and add a few more State variables so here I'm going to have is user logged in or not because we need to know that so we're going to say set is user logged in initial state is going to be false obviously let's also go ahead and import you state because we're going to need access to that so let's just do you state hit enter and it imported it all right so this user logged in perfect and then the next one where I'm going to need access to is current account okay so we can actually say current account Set current count and make the current account empty and so we can say the user is logged in at this point so I can say this is true and at this point current account we have access to that as well so we can actually say Set current account and we can actually give it accounts of zero okay so both of those things are now done and at this point we're done with the connect wallet function okay now all we want to do is we want to connect the connect wallet function to our component connect wallet button so let's pass this function down because we're going to need access to it in this component so I'm going to say connect wallet give it connect wallet or function okay so we're giving it this function now let's go to connect wallet button and we can destructure that connect wallet and then we can add an on click method so you see I even have these nice little notes here for you so you can just go on click and just say connect wallet so basically just run that function and I click it now let's see if we've done it correctly because if we've done it correctly it should be working perfectly okay so let's go ahead and say the user is currently not logged in so let's remove that and let's see what happens so I'll hit Refresh on here okay let's go ahead and open our Ripple make sure you do yarn CD into clients and then do yarn Dev that should pop it open okay we should have a button coming up here anytime now all right we have this button right there let's go ahead and click that and boom look at that that popped open that is very nice let's make sure that we're looking at our console log as well okay connected to Cheon I misspelled it but whatever you get the point chain let's hit so this console log worked okay let's hit next let's hit connect and boom found a shrinkaby right that is awesome let's go back let's disconnect our account so we can go ahead click that fox go ahead and hit disconnect account you could change your chain as well so you could change from ring could be test Network so make sure you have Rin could be test Network right so if you don't have wrinkly test Network you're gonna go ahead and click you're gonna click here you're gonna click show and hide test networks and then you're gonna turn on test networks and once you do that these test networks should show up otherwise you can go inside of your settings go in advanced and you could scroll down and you could see where it says show test that works and you could turn it on that way as well okay now let's say you do raw spin or whatever you connect the wallet and it says hey you're not connected to the ring to be test right so that error comes up right away and catches it so it seems like we are ensuring that the user is indeed connecting with rinka B test Network and then it pops it up and then it allows you to connect we can hit connect and boom there we go and then it pulls the account that you connected with specifically so far it's working beautifully all right next up since we're done with our connect wallet function and it works perfectly next up we need to work on get all tasks so we should be able to get all of our tasks or rather let's actually first add the ability to add a task okay so let's look at this code right here note right here it says add tasks from Front End onto blockchain so we all we need to do is we need to just complete this function now Okay add task how is that task going to work first of all we're going to go ahead and prevent default because it's going to be a form we're going to fire off on and this will avoid a refresh okay so this is avoid refresh that's all all right and then and then what we want to do is we want to do we want to create a task okay and this task is going to be the text is going to be whatever the user inputs so this is going to be a state variable that we're going to keep track of and this will be false because whenever you create a task initially that it is deleted will be false so let's go back up let's keep track of input as well so we're going to say input set input and use State use State and it's going to be empty okay all right so there we go and then what we're going to do is we're going to try we're going to have a try catch block here okay and the catch is just going to be simple the catch is just going to catch the error and then it's going to just console log the error okay okay all right so now for our TA for our try block rather we need to pull some of this code is going to be repetitive some of it you've already written we're going to get access to ethereum and then what we're going to say if ethereum so if it exists and your log ethereum is there then what I want to do is I'm going to grab the provider so we're going to do ethers dot providers dot web3 provider and give it ethereum okay so in other words we're going to give it like it's really metamask even though it says ethereum here this is like actually meta mask okay so that's really what's happening here so this is really metamask and we're passing it the metamask provider okay hopefully that clarifies it for you and then what we're going to say is going to say hey grab the signer aka the person who just signed it and then we're gonna call the our task contract okay now we're ready and we're going to do newly there's contract and so we need to create this contract we're going to get our specific contract so for our specific contract it's going to need access to our contract address is going to need access to our ABI okay and then we're also going to need access to our signer so now this will allow us to get access to task contract and all of its methods like add task delete task get my tasks everything that we created in our smart contracts if I go to our Sol file or task contract file this will have access to all of these now okay so let's go back to our index all right now that we have access to all of this since this is the add task function which method do you think we'll need to call after we get access to all of this simple after this we need to actually call our task contract dot add task and we need to grab our task text give it that and we need to give it is deleted okay so here for example is our task this will be the input that the user gives and this by default will be false okay great task and we can then do you know since this is going to be a promise we can then just get the response you don't really need to do much with the response and now we'll just set task set tasks rather and so make sure we we want to create a a state variable that keeps track of these tasks as well so we're going to say tasks set tasks okay I'm going to say you state and in the start it's just going to be an empty array and so we're going to say set tasks and now we're really just going to say whatever tasks was previously plus that new task we just added so this is really just appending to our task array okay that's really what it's doing and then we can say console log completed task or added task okay perfect and then what we want to do is we want to add a whoops I'm going to add a DOT catch and we want to say it error and then just console log the error okay perfect so we have this if and then to this if we want to write an else and we just want to say console log ethereum object does not exist okay so just in case we like don't get that ethereum object cool so now we can actually add a task and all we need to do is we need to connect it to our front end all right so what does that mean what that means is let's go ahead and let's put it in a state of that the user is logged in so I'm going to go ahead and hard code that oh sorry actually we don't even need that anymore we could actually put the actual Dynamic State and we can just say is user or logged in and if the user is not logged in then they'll show up this button and then if the user is logged in then it'll take us to the next thing okay so let's go ahead hit connect wallet let's go ahead and drive without this let's refresh okay great and let's see are we actually connected or are we not connected okay cool we are connected let's change this let's use your logged in save it let's go back boom now let's see what happens once we connect so I'll go ahead hit connect wallet let's choose connect and boom it brings me in okay so this is the final version and we can leave it like this okay so this is already working dynamically if I disconnect it should take me back to the home page so let's go here let's try disconnecting okay let's refresh boom it brought me back to the home page now let's try it one more time try connecting and it brought me back to the todo list app page okay so our is user logged in like that one is working correctly now for this add task this function needs to fire off when we add a task but when I do this and I hit Plus but the thing is that this plus sign doesn't have a on click functionality so we need to keep track of whatever the user is typing in here plus we need to actually when the user clicks this we need to add an on click functionality and we need our add task function to actually fire off when the user actually clicks that and right before we do that let's just go ahead and make this dynamic as well so I'm going to say correct Network question mark That's it okay so this part is now fully Dynamic and it's working okay so now going back to our add task right our todo list let's go into our todo list component our todo list component has a form and then it has this plus button so we have these little notes Here Right that says hey take the input from here because this is the actual input and the form part and then it says hey add an on click right here to that Circle okay so that's that Circle right there so we're going to add both of them so the first thing we need to do is we actually need to update the input from the user okay so we're gonna go back to our index and we need to actually pass the set input hook set input that way we can actually update the input based on whatever the user finds right the set input so that's one thing we also need to give it the add task function so let's go ahead and go add task okay so now we've given it both let's go back into todo list and let's destructure set input endless destructure add task now let's go down and one more actually thing we need to give it to is input because todo list is going to need access to whatever the input is at any given time so let's go ahead and send it input as well okay let's go back to our todo list all right now right here I'm going to say value is input and then we need to on change so we're going to say on change okay set input to be the target value okay so whatever we're typing in so this is like a pretty common react thing if you're fuzzy on this like you could watch my other React videos and next videos I go more into detail on this type of stuff and boom so that should take care of whatever I'm typing in okay and then the plus button we need to add the add task function to it so we need to go on click add tab ask okay so that's about it okay that's about it so let's go ahead and let's go write the word eat a cookie let's hit the plus button and let's see if anything happens boom look at that it popped open and it's asking for a confirmation and it's gonna charge me something I'm gonna hit confirm and you can see in the console log it says added a task that is so cool so we were able to actually add a task either cookie eat a brownie okay that's a second task let's click plus sign and it's working let's go here and let's hit confirm boom you can see that it says added task was ran twice so we ate a cookie eat a brownie eating lots of food here now you might be wondering hey how come all tasks are not showing up that's because we didn't actually finish writing that method so once we finish writing that method it will actually work okay and now if you're wondering hey why does it log us back out we need to actually just write a use effect hook okay so we're going to go ahead and say use effect let's import it and what we need to say in our use effect Hook is simple we just need to run our connect wallet right when our app runs so now if I refresh logged in automatically okay very nice all right great so far app is looking very good it's doing what we needed to do but now what we need to do is we need to be able to retrieve all of those tasks and then show them onto the screen all right now let's go ahead and get all of our tasks okay so this is like really one of the key methods that we're gonna create because it's going to get obviously all of our tasks so some of the code is going to be repetitive and for that we can just copy this so let's actually first write our try block and our get tasks so let's go here I'm going to say try and then catch and whatever error we get we're just gonna console log that error okay and now in this try catch block some of the code is going to be simple for getting up to the task contract so I'm going to copy this and paste it so this gets us the task contract address why is it complaining there we go okay cool and now we need to actually get all of the tasks so we need to go ahead and say let all tasks and I'm going to say await task contract dot get my tasks and then we can just say set tasks to all tasks just like that all right else ethereum object does not exist okay boom there we go so that right there should actually just get all of our tasks for getting all of our tasks we're setting all of our tasks so now all we actually need to do is in our todo list well our todo list need ask act needs access to our tasks and then we need to destructure it here tasks and I have these notes here that says hey just Loop through all the tasks using the task component so we're going to go ahead and just do that now so in our todo list let's go right there and I'm going to say tasks.map and for each item I want you to do the following okay you're going to call the task component all right it's going to be selfclosing and then the properties we're going to give it is for key is going to be just item.id task text is going to be item.task text and on click we're going to give it on click but for now let's leave it okay so on click delete task that's what we're going to do so I'm just going to leave that commented out cool now it's okay task could not find this component so we need to actually just import this component and then we should be good so we have created this task component right over here okay so we just need to import that so import task from task all right and that should get access to it and then we just render out the task component and now let's take a look so let's go back to our app let's hit refresh and let's see if it gets if it's able to pull any of the tasks that we've created thus far ah I discovered it okay so we have to actually call get my tasks because they're never called it so how will it know so we need to get all tasks like pretty much right when our app loads and then it's going to get all the tasks and then it's going to do the thing okay there we go that was the problem that was happening because you can even see it says hey get all tasks is declared but it's actually never ever used so let's bring that bad boy back let's go here let's refresh and let's see fingers crossed hopefully our tasks should show up all right so we're making some progress so it's not writing out what those tasks are okay so something is happening with a task text let's just take a look task text is the input of the user yep also at the end what we need to do of this add task that we actually forgot to do at the end was we need to make sure that once you hit submit you just reset it to empty like this okay once you're done writing the task just set it to empty okay let's try eat a cookie let's try now and let's hit this okay let's hit confirm and let's see if we have better luck this time we do not have better luck this time all right let's to debug this problem let's just add a console log here and say hey just console log all tasks and now when you go back actually and if you refresh watch what's gonna happen keep an eye on the console log and look at that okay so I'm going to make it a little bit bigger so you can see that's what he said and here you can see that I have all my tasks showing up okay eat a cookie eat a brownie eat more eat a cookie so lots of cookie eating tasks right there and then we have task text that you could see there so our tasks are working correctly they're just not showing up the way that we want them to so we'll fix that now so basically what this tells me is that it's just not being rendered out on the front end so for example if we follow the logic down we're passing tasks todo list so let's go inside of todo list I command click it we're destructuring tasks and then We're looping through tasks so the culprit might be this task component let's command click into this and if we look here this is the component that should actually be showing the task because this here is the task component right there this specifically so why is it not showing the task I don't see task text anywhere even though we're passing a tasks test it's not really doing anything with it so we need to actually destructure and go task text and then we need to actually show that task text right here task text so once we do that let's go back and look at that here we go let's say drive a Ferrari that's a task let's add it in so so good thing was it was a frontend problem was in a back end problem our back end was working perfectly and boom drive a Ferrari now we need the last thing we need is to make these delete buttons work so let's go ahead and add the delete functionality okay now let's add the delete task functionality so for delete task functionality it's not this one is not going to be super complicated this one is actually going to be fairly like straightforward what we need to do is there's going to be some bits of repetitive code like for example our try catch blocks rather try and then we're going to say catch error and then just say console log error okay and then we actually need to get access to our task contract address so we're just going to repeat this piece of code right here all right so this just runs and the whole point of this is to get us access to our task contract address let's close out this if statement right here and else will just be console log ethereum does not exist or whatever okay and now within this if statement is where all the magic is going to happen and we're gonna go ahead and delete the task so we can just say oh wait task contract dot delete task and when you delete a task we're going to give it a key okay that key is actually going to be passed in already okay that key is basically going to be like this so for example if you delete this task right over here this task already probably has the key of five because we gave it that key if I go to our todo list we gave it that key right over here the item.id and the ID is incrementally Loops from zero one two three four five six so on and so let's go back into our index so that key is already there so we're going to give it that key so it's like giving it hit delete the eat the cookie task AKA delete the task with the ID of zero and set its deleted value to True okay so now it's deleted value is set to true so we're going to do this okay and then what we want to do is we're just to say let all tasks okay and you could store this so you could say const cons delete task transaction and you could console log and say successfully deleted and then pass in that transaction and let's put a little Tada Emoji in there and then we're just gonna go ahead and await task contract and get all of our tasks again get my tasks okay and then set all of these tasks so now we're gonna set all of the new tasks because now it's going to send it to our back end so we're just labeling a task as quote unquote so we label a task as hey this is marked as deleted then we send it to our back end filters it once it filters it okay so once we're done it filters it we on our front end retrieve all of the tasks again from our back end or blockchain part and then we just set those as the new tasks and then we're done okay so this is the delete task functionality and delete task functionality is now completed now who needs access to delete tasks or todo list is going to need access to delete task and the reason for that is our component task is going to need access to it okay so it's like a little bit of prop girl filling but not too crazy so let's go ahead and do delete task okay and then let's go to our task components and we're gonna go ahead and say on click right on click we are going to delete task and give it the item dot ID that's it okay and that should really delete it so let's go ahead and drive a Ferrari let's go ahead and delete this task okay let's go ahead and refresh save a few times and delete okay nothing is happening right now so what's the problem delete task okay we're destructuring delete task let's go into index we're passing delete task is being passed so all of that is good actually I don't think we need to add this here we need to actually give this on click all right so we're going to need to give this on click to delete task so we're going to go ahead and say we're gonna pass this function delete task and we're going to pass that down so I don't think we need to actually add that here so let's go to our delete our task component now okay let's go to our task component inside of our task component let's go ahead and delete task let's destructure delete task okay and then here we're going to add an on clicks on the garbage can as well on click takes place and we're going to go ahead and say delete task okay on click that's what should happen now let's give it a try I think this is to me is looking right now let's go ahead and click drive a Ferrari try to delete it so refresh we get an error it should show us what error is to oh yeah we need to give it the specific Item ID so let's go ahead and do actually what we could do is we could do it this the other way let's go back to our todo list and here we're actually going to give it an on click and the on click here is going to be delete task and that specific item.id and it was going to task let's go ahead and destructure on click and then we're going to give it the on click okay so that way we have access to Item ID and we don't have to like destructure and pass down the item id Okay cool so let's go and try it now remove drive a Ferrari and there we go now it's popping up beautiful let's go ahead and hit confirm on that so that transaction it says successfully deleted okay now if I go ahead and refresh my app okay let's see sometimes it takes a second so let's give it some time and there you go okay so yeah while it says successfully deleted and you get the transaction ID on the blockchain it still needs to verify it that takes some time so once it's fully verified it can not then it deletes it so now when I refresh and I go here you see the Ferrari one is actually gone so now if I create a new task let's go ahead and hit the plus sign so when I hit confirm this will add the task okay boom we're we got a new task and now I can actually hit let's go ahead and refresh and of course when you task go okay now it's actually there so even creating tasks takes a second okay so that's why you have to wait a little bit and now I can actually remove it okay so successfully removed I have the hash the removal but it's going to still verifying on the back end right the blockchain side so see now the new task has been deleted and it is not there Guy this is amazing if you've gone to so far huge props to you all right so I really hope you guys enjoyed building that todo list app and you got to learn a ton of solidity con Concepts how smart contracts work how you actually interface your front end with the blockchain component it's mindblowing stuff and we had authentication in there so if I actually log out and I log in as a different user you won't see these tasks there and you won't be able to delete these tasks and you won't be able to interface with them so we have all of that and then some and it was so quick and so nice and we didn't even use a database which is mindblowing and cool I hope you enjoyed it huge credit and shout out to code with kavit you should check out also his video huge shout out to him so for a lot of the ideas in this video and some of the code for the code for the smart contract and a lot of inspiration okay so that was really awesome and so thank you code with Kavita the huge shout out to you and again guys as always I love your beautiful face thank you so much for watching and I'll see you in the next video Welcome to another web three slash blockchain project that we're going to be building using infuria this project is going to be a lottery dab now there are gaming companies out there like crypto games using something similar the point of this is you have multiple users enter each of who pays in ethereum a certain amount in the pot and at the end you pick a winner and you randomly select a winner and that Winner Takes the entire pot but we're just gonna have fun with it and learn web 3 by building this lottery app now let's go ahead and kind of demo what the app looks like so here's the app I'm going to I currently have no players inside here right you can see that I have zero players at the bottom so I'm going to go ahead and with one of my accounts I'm going to enter this okay and then we're gonna add in uh one person okay and so I'm going to log in here cool and now we have one person and I'm gonna enter with that account cool so let's go ahead and do that I'm gonna enter boom I'm in and now let's go ahead we're gonna speed up through this process so we can go faster I'll just pay higher gas fee now I have entered as a user and you can see at the bottom that I'm inside now I'm going to enter with the second account so let's go ahead repeat the same exact process and we'll enter it all right now we're gonna enter a second user so I'm gonna go ahead to my metamask I'm gonna speed up and do the same thing and Boom at the bottom you can see that the second user has been added to this Lottery and each of them added 0.15.015 each to the lottery and at the end of this what you'll notice is we have a winner and that winner which is this account right over here he won all of that is okay so that's how this will work next up what we need to do is we need to sign up for inferior and the reason why we need to do that is so we can actually build this app it's going to be completely free and it's going to allow you to build your web3 app and scale it as much as you want so I want you to go to the URL in the description below okay we've given it to you you'll get to this landing page of inferior and then just hit sign up at the top once you do that just make sure you create an account under get started for free pop in your email and your password and once you're done doing that it's going to ask you to verify it then just simply go ahead verify your account and then it'll take you to this next page okay Pick Your Role Etc which organization you can pretty much pick whatever you want hit submit for the network we're going to choose the web3 API formerly ethereum and for name we're going to say production and then just hit submit okay once you're done with that it's going to bring you to this page at this point this is where you are you can take a look around but your job here is done you don't really need to do anything else with that said we're going to continue and next up work on installing metamask now we're going to go ahead and install metamask if you already know how to install and use it just skip this part timestamps for below I'm going to keep going so go to metamask on Google find it as a Chrome extension hit add to Chrome and what you want to do after you add it to Chrome is just hit agree with everything so it takes you to the next part and this is the important thing that I need you to do once you are on this page where it says new to metamask do not pick no I already have a secret recovery phrase choose yes let's get set up create a wallet there and then pop in your password and the important thing we're going to really need is this mnemonic phrase that it gives you AKA or secret recovery phrase this is the important part because in this app in this app that you're going to be building your going to need access to this so make sure if you already have an existing account make sure you have the secret recovery phrase if you don't have a secret recovery phrase or you forgot it just make a new account right now okay and then follow along that way it's going to ask you to confirm your secret security phrase and then it's going to ask you to safely store it somewhere then in your account you're going to notice that you don't have any other accounts like any other networks you only have the ethereum mainnet so what you want to do in that case is you want to go to you want to click where it says show slash High test networks and go to your advanced settings and in there you want to say show test Network so make sure that's turned on and make sure the show conversion on test networks is also turned on and now when you hit X and you hit your networks you can see that all these other test networks are there like Robson and Gorly Etc all right so type in robsten faucet because what we want to do is we want to get some free robsten which is essentially ether okay and that's how you're going to be able to play with this app and do stuff with this app so go to disrupts and test that faucet go ahead to your metamask and you can pin it just like I did here right click and copy the account address and paste this account address and say give me robsten eth it's going to give you the Robson eth you could see that we got 10 Robson 8th right here now I do want to highlight something here you will see Robson will shut down in Q4 okay so it's going to be shutting down soon but what we're showing you here is just as easy to do with the gwarly test Network as you can do with robsten so you could follow along and you could just do it with quarterly okay so yeah so if you're watching this after 2022 just do that you should be fine with that said we're going to keep going and now we get to the coding part now open up your command line and we're just gonna go ahead and get your entire project set up some key notes that I want to show you is I want you to go ahead and do into your GitHub folder or wherever you store all of your stuff and then I want you to use npx clever programmer now before I continue the benefit of doing this way is we are giving you all of the assets for you know just giving it away for you okay so you're gonna have access to all of the assets you will have access to the styling of this app you will have access to the components inside of this app and you know majority of front end you'll get access to okay which you won't get access to are things like blockchain and smart contract because in this project I don't want to focus so much on the front end part otherwise this tutorial would be 9 hours 10 hours long we want to focus more on the interesting aspects of this project which are it's the smart contract the blockchain parts so that's what we're going to be focusing on more and we're giving away a lot of this and if you do npx clever programmer you'll automatically get access to all of these things for this project for this Lottery dap okay so we're making your life a lot easier to do npx clever programmer latest and then it will install it globally and then just go ahead pop in your email and what you want to do after you put in your email is It'll ask you for your name and then simply go ahead and choose the project so here I want you to go ahead and choose the lottery app go to that okay select it and then you're just going to hit enter now it's going to initialize your project it's going to give you the front end right it's going to install all of the dependencies and it's also going to tell you to smash that like button while you wait so go ahead do that right now while it's loading it also automatically there's a fancy thing that we've added to it it automatically opens up your Visual Studio code if it gives you an error there or doesn't work for you somehow just go there and open up this folder inside of your Visual Studio code and there you go there's your project your lottery app there you go okay this is your starter now all I want you to do is go ahead and do yarn Dev and it should open it up on your right hand side or just open it up in Chrome on your Local Host 3000 okay and uh just get to the part where your app is up and running okay so there you go that is the starter okay if it doesn't error out it's telling you that hey this is working all the styling is here and everything is here and this blank page here with this color that's a good sign that means your starter is completely working so good job and with that said we're gonna go ahead and continue building all right now what I want to show you is that at any given time I don't want you to get stuck all right I do not want you to get stuck so what we have done for you is this thing that you got from npx clever programmer if you're a more advanced user you are sitting on a branch right now called CLI starter and there's a branch of this project that's called I believe main right the main one the main branch actually has the solution so at any given point you could switch to that branch and get the solution okay this is the branch you're currently on by default because all you did from the CLI tool was clone this repo on your computer okay so let's just walk through it and you could also go to this repository from the link in the description below so it has a solution on there so you could do it that way too just click uh use one of the links in the description below and you could see that we have all of the code right there right I could click into context and I can click context.js and it will give you the entire solution for this project okay so there you go uh this is just a thing that's made available to you to get answers to get unstuck at any given point just wanted to highlight that with that said now we're going to start building these smart contract um and this is going to be a really fun process because we're going to do it step by step so let's go all right now what we're going to do guys is we're gonna go ahead to remix IDE all right so we're gonna go to remix IDE which is a phenomenal online ID if and it's completely free for writing smart contracts and iterating and getting live instant feedback for everything that you're doing so go ahead there okay and start coding online click that and it'll bring you to their page just hit accept cool hit next blah blah blah and then you should be good to go okay uh here you're going to choose a workspace name all right you could call it Lottery we'll call it Lottery dap and then on the left hand side you will see that it populated it with some dummy contracts and stuff like that just to kind of get you started okay so close the scripts tab close the test tab go into contracts and inside of contracts we're going to make a contract and it's going to be called lottery.sol okay so lottery.solidity contract great now that we're doing this let's go ahead on the left hand side and I'm going to click on that third Tab and we're going to choose Auto compile and for the version we're going to choose 0.8.15 plus that's the version let's go back to our lottery.soul and here first of all the first thing we do always is pick the license so we're just going to choose the MIT license for this one we're gonna pick our solidity version at 0.8.15 we're going to create a contract called Lottery and in this contract okay the first things that we're going to create are State and some storage variables that are going to be necessary for us so let's create a owner we're going to need to keep track of our owner let's create also a player's array okay that's where all of our players are going to go inside of let's also go ahead and create a Winner's array and then we're going to go ahead and create a lottery ID which we will keep track of okay and now I'm going to go ahead and explain something special for you okay so for example I told you that these are the variables variable names here right but I didn't explain to you what address public address payable public is so let's go ahead and do that now address is a special data type in solidity which refers to you know anytime you see a wallet address that's like that that's there's a specific data type for that that's not just a string okay in JavaScript you'll store that as a string but in solidity you store that as an actual data type public here means everybody will have access to these variables meaning that even outside of the smart contract you could access them okay so that's why it's Public Public public so you could make it private as well which would mean that we can't access it from outside but in this case we don't need to do that okay so that's the word public and so hopefully that handles that situation now what is this uh thing called payable payable means that these contract addresses are put in a way where we can pay them or we can send money to them all right now payable means these are the guys that are up you know where we can actually send them money okay so that's why this address type is a payable type because any of these players we want to be able able to send them money based on if they won the lottery or not okay that's what's happening there this empty open close uh array that you see over here that basically says that this data type is going to be an array of addresses meaning that they're going to be multiple addresses in here so players variable isn't just going to be like one random zero x dot dot dot address it means it's going to be an array of addresses it's going to look more like this comma 0x dot dot dot comma 0x times dot zero Etc I think you get the idea right with multiple addresses there okay so that's what's happening inside of this array it's going to be an array of addresses then we have array of winners the reason why we're not making this public or sorry uh not making this payable is because they've already won so we don't want to be able to pay them programmatically or at all because they've already gotten the money and then we have Lottery ID which is an integer because it's going to be zero when you know it's the first Lottery then it's going to be one on the second Lottery two on the third Lottery Etc and we'll show you how to do that as well all right let's keep going with this so once I'm done with that we're going to create a Constructor and this Constructor this runs when the contract is deployed okay so let's create a Constructor here we're going to go ahead and say owner is the message sender AKA whoever Crea uh you know created the contract whoever was like logged into their metamask and was the person that created the contract um at the time that the contract was created okay that's gonna be set as the owner so what construction Constructor means that this piece of code is going to run right when this contract is deployed so the very first time this contractor is deployed a contract is deployed it'll run and then this part will never really run ever again it'll only run once when the contract is deployed if you have experience with the react think of it kind of like your kind of like your use um you know your use effect hook where it fires off once the page loads and then if you don't have any dependencies it doesn't fire off again right kind of like that except it just runs once forever even if you refresh the page and we're going to set the lottery ID to zero because that's what we want to initialize it to be next up we're going to create the enter function so this will be the function that allows a user to really enter the lottery so let's go ahead say function enter and I'm going to set the public function okay and I'll explain why we're saying payable afterwards this function we want to make sure that we require the message value is you need to put in basically what we're seeing here is hey you need to put in more than zero point uh one eth okay so if you're gonna if you're gonna put some money in the pool make sure it's more than 0.1 ether because you can't just put like baby money in that right where we're here to play the big boys are here the big boys and the big girls are here I don't want to get canceled like Andrew Tate um so here then once we do that we want to do players dot push and we want to push the address of whoever was like the logged in user in metamask whenever you see message.sender think the current logged in user with metamask okay that's the easy way I think about it and so I'm pushing whoever was currently logged in and entered the lottery boom add them to the players array that's what we're doing all right so now what's special about this function and why we're calling payable right here is because this function by doing payable here means you can actually kind of quote unquote pay this function okay when you call this function you could enter and you could literally pass it like to eth so think of it like that you're almost calling the function you can pass it a certain amount of eth and that ether you pass this function it will actually store that inside of the contract address okay so the contract address so think of the contract address like just another wallet just like kind of how you have a wallet contract address kind of has a builtin wallet and so the money is going into the contract pool okay so that's how the money is going uh into the pool and then we just make sure that the message value right is greater than 0.1 ether and then if it is we go great we add that to our players array that we created up at the top and we want to make sure it's payable so that whoever entered the player's array is a payable address okay so that way we can pay them out later one thing to note here is if you didn't have the word payable here you wouldn't be able to require message.value okay all right so that is that is the you know the heart of that enter function now let's go ahead and test it out so by the way here's the really cool thing about remix right look at that it just gives us so many accounts and all of them have a hundred ether in it so you don't have to go to a faucet get ether in your wallet do all this garbage you just have it here right away ready to go so that makes our lives very easy okay let's go ahead and I'm gonna take this account the 0x5 B3 account and with that account I'm going to go ahead and deploy this smart contract so let's go ahead and hit deploy now you'll notice that when it deployed it took some amount of uh ether out of my account to be able to deploy okay now the smart contract is deployed now we have this function enter and we'll try to run this function enter I just tried to run it do you notice what just happened right when I try to run it I got into this error over here and this error basically saying hey you don't have more than 0.1 ether okay so we need to actually send it some money before we can run it so we got this error and we're not very happy right because you don't like when you get errors but this happened because we're not giving it more than 0.1 ether equal to or more than so what I'm going to do here is I'm going to go grab value and sometimes this is a little buggy in remix IDE so just command a like select it and then hit delete backspace and then you can like hit one or something or hit the arrow at the top and then it'll actually increment the value so sometimes this bugs out make sure you get the one there and then change it to Ether once you're done doing that and now go down and hit enter and let's see what happens and boom look at that we were entered into the lottery so let me ask you a question if I pooled one eighth and I entered into the lottery What's the total Lottery pool right now I'll give you five seconds to try to answer this five four three two one I really hope you said one okay I really hope you did because it's one person and one person entered with one eth so we have one total pool okay great I'll ask you this question again another person and and enter so keep your answer ready I'm gonna go ahead and choose a different account so I'm gonna choose the zero x a B8 account with 100 ether because I'm a big boy we're gonna scroll down and I'm gonna hit enter and let's see what happens I got an error because I didn't add any value I didn't pull any money so let's go ahead and pull in I'm gonna go one and then let's click enter there we go we just entered it with one eth okay so now the total amount of the pool is two eth okay now let's go ahead and grab all the players that are currently entered so we can see their wallet addresses all right so for get players I'm going to write this function it's going to be called surprise surprise get players and it's going to be just a public view meaning it doesn't really do anything it just shows stuff what we're going to be returning here is a array of payable addresses and just write memory because otherwise you're going to get an error and at the bottom I want to say return players okay so we're going to return players that's all it does those are the players that we're going to be returning that we initialized and you know at the top okay great so now that this function is made let's go ahead and kind of reenter so we're gonna delete the smart contract that we previously had because we're going to need to redeploy this new smart contract because we just made changes to it so I'm going to choose my 0x5b wallet to deploy it with just deployed the smart contract it it is deployed let's click it so it expands and here I have my get players function as you can see I have an array of addresses that is currently empty and it's a zero because there are no players in the pool right now right now I'm going to go ahead and enter with one eth with my you know the owner the owner is going to come in and enter it's like the dude who owned the basketball team right jumps down and starts playing with Steph Curry you know and uh they're team members so that's what's Happening Here the guy who created the lottery is playing the lottery a little conflict of interest there but it's fine now I'm going to choose a second address and hit uh enter okay with the one eth now we got two players okay let's see who um and yeah when I hit players right boom we could see the two players are showing up so this function get players is working perfectly that is amazing now we're going to write a new function called get balance and it will get the balance of the pool aka the balance of the contract address so if it has to eat it needs to show two eth so what we're going to say is return address this dot balance why am I writing the keyword this this refers to this specific contract address the Contra it refers to this contract the one you're writing okay so it'll return the balance that this contract has that's how we get it now let's delete our contract let's go back to our Xerox 5B account which won't be called 0x5 Beyond yours because it'll probably be something different right we all get different addresses with different you know with 100 eth in it um let's go and hit deploy again so you can see you have a bunch of deploy you have your deployed contract and now you can see the get balance which I saw nicely hovered over for you then we are going to let's see then we're going to put in one eth into the pool let's hit enter so I joined with one eth so the owner jumped in again with one eighth and let's go and see what happens when this other guy jumps in with one eth let's hit enter so now two people have jumped in with one eighth let me ask you a question currently what's the pool size how much eth is in there I'll give you five seconds five four three two one I hope that you said to eth because one plus one is two okay if you didn't get that right you my friend have much bigger problems than learning blockchain okay so I'm I would be really worried if you didn't get that answer right you look yourself in the mirror and oh yeah okay so it's showing that we have two eth but it's showing like two trillion or two billion eth and the reason why it's doing that most likely is because it's showing that in way okay yeah so away is like a very small unit right ways like if think of way as you have sense think of eth as dollars you have dollars and then you have cents but something even smaller than ascent because like you know just to expand on this analogy right one dollar is a hundred cents so an eighth might be a hundred way even though one eats is way bigger than a hundred weights way bigger there you go and now I'm writing a comment for you letting you know that solidity Works in way so it's written out and extremely obvious to you so you just have no chance of missing that piece of information now we're going to get lottery ID and I'm going to create this function it will be called get lottery ID and this will be a very simple function so it's going to be public viewer returns and we're going to return an integer and we're going to if you see uint it just means an unsigned integer and that means it could be negative or positive but literally whenever I say int just thank you and keep your life easy and then we're going to go ahead and do return Lottery ID so very very simple because we have made this variable up at the top here on line nine and we're simply returning it online 36. so in order to test this get lottery ID we need to delete our current smart contract we need to go back and then we're going to deploy our smart contract so let's hit deploy it's been deployed successfully you can see at the bottom it's there and now you can click get lottery ID and it shows you that the current lottery ID is zero which makes sense because in the Constructor we defined it to be zero right boom there we go a hand in the brain we defined it to be zero okay perfect now we'll make a new function and this will allow us to get a random number this is going to be a helper function for picking a winner so I'm going to create this function and we're going to say get random number and it's just going to be a public view it's not going to mutate any data so it's not going to cost us anything okay and it's going to return an integer and it's going to return a random number and what we'll do so I'm gonna get so cat cat is going 256 is going to help us generate a random number and to be technically accurate it's going to be a pseudo random number which you know if a really professional hacker tried to destroy your app or hack your app that probably could so if your work building a production you know app and you need this random number to be truly random then um you should look into chain link and how you could set this up with them okay I wouldn't try to do this yourself using sudo code okay so we got yeah so we're gonna go ahead and we're gonna take the ABI and we're gonna say in code pact we're going to pass it the owner of the smart contract and then we're going to give it a block.time stamp so we're just going to give it some unique pieces of information like the owner and the timestamp and we're hoping that that information when we give it to it it'll encode it it'll use the algorithm Keck 256 to kind of scramble it and then we'll call integer on it because we'll and at that point we'll assume it'll give us somewhat of a random looking number would would you know fairly weird obfuscated information that we're giving it so that's how we create a random number I wish they just had math.random because this is ridiculous right but we're early so we got to pay the price for being this early um all right let's go ahead and delete our smart contract that we had deployed and now we're gonna pick a winner that's that's what we're gonna be doing okay but let's go ahead and test or get random number first so I'm going to deploy our smart contract let's go down and you can see get random number it functions right there let's click it let's see if anything happens whoa something did happen it gave us this massive random number I mean that would have been crazy can you imagine if I asked you to guess that number how screwed you would have been holy but Jesus that is an insane number to guess so for us I mean you know the pseudorandom number is pretty darn good okay Keck hack is doing something useful okay let's go ahead and write this pick winner function and I'm going to call it pick winner it's going to be public we're going to require that the person who can pick the winner is the owner nobody outside of the owner should be allowed to pick the winner and even the owner will get to pick the winner randomly so that's what we're doing require and we want to say hey make sure that the current logged in metamask user AKA message.sender you know or whatever wallet you're using is the owner of the address okay and I believe we assigned the owner when the Constructor happened right when the when we when we deploy the smart contract and then we're going to create a random index using the get random number function we made and then we're going to do module players dot length and here's what's happening here okay let's say you have you know you have uh five players or two players Ryu and you have Ken okay from Street Fighter get random index whenever you run this function it'll either get you zero or one or zero or one okay literally just those out of those two numbers it'll randomly pick between those two now let's say that you had also Zangief now this random number will get you a number between 0 1 and 2 randomly between these Okay so that part of how so remember how get random number was giving you this big giant number well you might be thinking how the heck is going is that going to give us a index number like zero one or two how is it doing that that is the magic of this modulo players.length operator is very nice and modulo allows us it's a remainder okay that's what it technically mathematically speaking module is just a remainder so if you did three divided by two you'd get a remainder of one but another way to think about it is this allows you to wrap around whatever you give it so if you give it like two or number three right then effectively you're taking this giant number you're dividing it by three and you'll have some remainder left over there'll be always between 0 1 or 2. so that's the trick we're doing here the way I like to think about it is if I give it three it'll always wrap around give me between zero one and two it'll always always do that if I give it a module like module allows me to wrap things around okay whatever mental framework you want to use to understand that that's fine but but at a higher level if we ignore all this nerdy crap just know that random index gives you between 0 1 and 2 or whatever the length of that array players array is so if that player array is a hundred items in there or 100 players in there playing the lottery then it will be between 0 to 99 and they'll pick a number between um you know that entire range of zero through ninety nine okay all right and then we're going to grab the Rand a random player and transfer them the funds of this contract so remember address this dot balance okay all right so there we go this allows us to take the funds from our contract address okay so let's say that we have this our big pool right and it has all of the Monies then we have this like array of players right player one player two player three we randomly select let's say this player three right and then because of this here dot transfer we are able to take that player three right and and let's say that they have they're a real person they're very happy then we send them the funds okay that's this is what's happening guys There's real life stuff happening you're changing people's lives writing this code so don't just think of it like random nerdy math numbers somebody will be able to use this one day and get money in the bank account and then you know they can provide for their little tiny children or much smaller than them this is not to scale but yeah because that would be a huge face right if you're a little child I was six years old was smaller than your face that would have been that would be crazy um unless you're Shaquille O'Neal so now we're gonna go and uh grab the winners and push the player that was the winner okay so the the the person that we chose to win we're gonna push that winner onto the array so you know in another words this part over here players random index okay this weird looking code that just really means winner okay and so all we're doing here is we're just pushing that winner okay that's what's happening hopefully that's not too scary or weird or freaky what the heck is this okay whatever I don't know maybe I maybe I'll use it one day for something but for now let's keep going all right now we have Lottery ID and what I want to do is every single time you've picked a winner well at that point essentially the lottery is done the current lottery is done so when the current lottery is done at that so at that point I think we should increment the lottery ID by one because now you know you're technically on the second Lottery because the first Lottery is over people have been paid out got their money and Life's good and last thing we want to do is remember that players array we had like the current active players that were playing the lottery well we need to clear that array so we're going to write this function it's going to allow us to do that so imagine you had this array with player one comma player two but this function is not going to allow you to do is really just turn it into an empty array that's all okay and not function but we're just gonna take our variable players that we had initially written and we're going to just reassign it and give it a new definition and we're just going to say hey become an empty array I wish solidity could just make it easy for you okay what we're really writing here before I write it and and freaks you out here's what we're really writing players equals empty array that is it okay in JavaScript that is what you would do and you would move on in solidity they want you to just go through a lot of pain and uh be super verbose with what you're doing but I understand why to make your code less error prone you know add and type safety increases the speed I understand but it's still kind of annoying from a developer experience perspective so that's all you're doing here you're just saying hey players should be a new thing and it should be a array of address payables and currently it's at size zero meaning it's just currently empty we're making it empty okay great okay now let's go ahead and play with this new function that we made so let's deploy the smart contract let's go make sure that it's deployed and showing us and you can see we have pick winner looking orange looking really nice all right so I just want to kind of take a quick pause here and explain what's what are what what the heck is that I just explain what all of this is right why are these blue so what does blue mean why is that one orange what does that mean okay and and then red so blue means these are our Getters these are just your public view functions that don't change any data don't change anything rather than return something okay so these are our getters and then orange are our setters that is where you're changing data and mutating data AKA like we're mutating and we're changing the definition of the word players we're mutating winners because we're adding a player to the Winner's array we're taking laundry ID and we're incrementing it by one so there's a lot of mutation happening and then this red over here it's a legendary weapon orange for to me used to mean a legendary weapon in the game Borderlands so orange is a very special color but that's not what it means here okay and then red here means it's a payable uh it's there's some payment action money stuff is happening okay that's that's as far as I know when I find out new information I'll let you know so the color coding kind of makes it nice you could look at it visually and know kind of what's Happening all right now we're gonna try this okay so let's go ahead and deploy this smart contract uh or sorry we've deployed it but let's enter it with one eth as our uh you know as the owner and then I'm going to go to another uh pick another wallet and I'm going to put in one eighth here and I'm going to go ahead and enter as well so now I've entered here so the pool size now should be two eth and okay actually let's go and enter with a third person account as well so let's hit enter and now we have three people in the pool so that's pretty good let's do get players and look at that we have three players it's kind of hard to tell but it's three players all right so there we go let's hit get balance and take a look at that right Lottery idea zero balance is three eighth okay this is in way so obviously it's gonna be like crazy right because this is the sense incense and ether ethereum is dollar this is going to be a way bigger number um here is all of the addresses right so these are three addresses so here you see the one comma and then two commas right so that means one address two addresses three addresses so three players are in three is the eth and we will now be picking the winner so let's go ahead and pick the winner soon okay now notice that I'm on the smart notice that I'm on a wallet that is not the owner remember the owner was the first one we used okay the owner was a zero x5b3 one but I'm not on that I'm not on the owner so remember our smart contract says if you're not the owner you should not be able to pick the winner so let's see if we can pick the winner so I'm going to go down and I'm gonna go and try to hit um pick winner and notice right when I clicked pick winner I actually got an error at the bottom this error means that I'm not the owner so it's not allowing me to pick it remember for a pick winner you can see only the owner of contract can pick winner that's what line 47 is saying so I'm going to go up at the top and change my wallet address to the owner of this smart contract that was deployed now let's go down now let's pick winner and boom look at that you see that green tick mark and that means we were able to select the we were able to pick a winner now notice that when I say get players there are no players there's zero players empty and that makes sense because we on line 54 of our code after the lottery winner has been picked we set the players to be an empty array if you get the lottery ID well look now it's a lottery ID one so that's really cool and when I hit get balance balance is zero because there's no more money in the pool all of the winner has been picked and that winner got all of the eighth okay next up we're going to make a function that's going to be called get winners and this way we'll see who won get winners will be you know we'll do a re public view returns here it's going to be an address of winners all right there you go so now we're just gonna return winners so it's going to be an address you know it's going to be in a address of arrays and you could see an array of addresses I'm sorry what the heck and that's what winners is that's what we're returning and so you could see on line 59 we're just returning the winners okay when we created that variable earlier all right and let's go delete that smart contract we need to deploy a new smart contract well because we made changes to it it's a different one than that deployed one let's go and go to Xerox five I mean for you it's going to be something different right but I'm going to go to that account and I'm going to hit deploy so the smart contract has been deployed I'm going to pick one ether and I'm going to come to my deployed contracts and I'm going to enter the lottery and I'll pick another account and I'll also put in one ether and I will enter the lottery and I'll pick a third account put one ether enter the lottery once I've entered the lottery I'll get players you can see it's three players right now I will say get winners there's no winners you could see the array of addresses is empty and Lottery is currently zero now we're going to go to the owner because only the owner could pick the winner so I'm gonna say pick winner the winner has been selected great now let's go ahead and get players players are empty because now the lottery is over let's check get winners and look at that guess who won the game is rigged boys and girls that's why I told you don't let the owner hop into the lottery it is it's just gonna be a massacre right the owner of course wins because it's it's rigged and that's pseudorandom you know hell yeah pseudo random right the owner always wins that's what happens so lessons to learn right it's a huge conflict of interest a dude who made the lottery don't let them jump into the lottery but yeah um there you go owner was picked and oh wow what a coincidence check who the owner is and the owner is the same dude that freaking won okay there we go all right uh yeah very good so with that said you are done essentially with the smart contract part how does it feel do you feel special because you should feel very special this is a huge task that you just completed and this was awesome I think I hope you had as much fun as I had going through it with you and picking up these things and sharing these with you I think it's just so cool like this part of web3 is pretty cool and I think um yeah I hope you learn anyways we're now going to take this smart contract that you built and start bringing it into our development environment inside of you know whatever you're using visual studio code or whatever ID you use to code we're going to bring it in there so then our entire app could build off of this but I like this flow a lot build on something like remix IDE so you have that iterative instant feedback loop so you can keep iteratively building building building once you're done building the smart contract bring that back into your app cool with that said let's continue all right so now what we want to do is I want to take all of this and move it into my coding environment so I'm going to copy the whole damn thing okay darn thing let's copy it let's go back to our app and inside of my app I'm going to make a new folder at a global level and I want to call it my back end AKA my blockchain AKA my smart contract part okay because we don't have a real you know traditional back end as in Firebase or super bass or you know mongodb or MySQL or postgres or whatever in this case our backend is going to be the blockchain that's where we're storing our data and running our app from so let's go to our command line now and I'm going to CD into our backend folder now first thing we want to do all right so I have this blockchain part now I want to do Truffle in it however most likely you on your computer might not have it installed okay um and maybe I might not even have it installed so first thing we want to do is make sure we install it so let's go ahead and do npmi Dash G okay I'll just zoom in here so you could see the command that I'm actually typing and I know my mouse is blocking this but it's a dash G okay and then we're gonna do truffle okay and then I want you to go ahead and hit enter and it will and start installing it okay there we go so let's go ahead install truffle all right it's doing its thing it's installing all of the dependencies that truffle comes with truffle is very very helpful in developing and deploying smart contracts makes our lives very easy okay let's go and install this once it's done installing I'm gonna now say Truffle in it make sure you're in the back end folder very important make sure you're in the backend folder hit truffle init and once you do that it will go ahead and scaffold an empty project for you so now you can see that you have contracts migrations tests truffle all of that stuff now in your migrations you have no migrations okay in your contracts you have no contracts you'll have to start by creating a smart contract so we'll hit new file we'll call it lottery.sol and now we're going to go to our remix IDE we're going to grab that contract address that we had gotten so let's go ahead select everything and let's go and copy it and we're going to bring it and we're going to paste it inside of our vs code lottery.sol file so now we have access to it on you know inside of our project let's go to the migrations we're going to hit new file and I'm going to say one underscore deploy.js and inside of this what I want to do is I want to say cons Lottery and I want to say artifacts that require Lottery some of this code is going to be new and weird just write it and you'll start getting used to it okay but don't you don't need to worry too much about understanding this because it's not that important you write it once and then you're done and you can kind of copy and paste it for all your future projects and you should be good okay and we're going to export the following module it's going to be a function that's going to take in a deployer and then we're going to take in whatever we're trying to deploy and we're going to deploy it and pass in our Lottery artifact all you need to understand about that is that piece of thing that we wrote is going to help us deploy our lottery.smart contract and the benefit of deploying it is just like the web 2 deployments it will deploy it to the ethereum network meaning that anybody will be able to actually access it you know almost like it's a website or an API that's publicly available okay that's what a smart contract does now let's go into our truffle config file so I'm going to go and scroll all the way down and my truffle config file so it's this file right here so let's scroll down and I'm I just want to fix the version so version right now is 0.8.16 I'm looking at my English little tiny Bulldog pudgy please baby don't do that her name is pudgy and we're going to change it to 0.8.15 because that's the version we're using and that is it for moving it into your Visual Studio code into your own um you know development environment so at this point you're done doing that next up we're going to set up the Truffle extension let's go now we're going to set up our truffle extension so the first thing you want to do when you're setting up a truffle extension is obviously you need to install truffle from the extensions okay go ahead type in truffle and there you go truffle for vs code now what is truffle it is incredibly powerful software built by consensus and what it allows you to do is in you know basically uh integrate your smart contract with infuria in a very very easy way and deploy to their Network okay and it just makes your smart contract deployment building of it incredibly easy so make sure you're using this for pretty much almost all of your unicolidity projects so at the bottom left click truffle and go into that extension and that error at the bottom if it pops up for you just ignore it it's not important now what you're going to click on is you're going to create a new network so hover on that create a new network and you're going to choose infuro service and then inferior will pop up and it'll ask you to sign in Click sign in and all I want you to do is go ahead and hit authorize at the bottom here and so you make sure that you sign in and I'll hide myself so you can see that authorize button okay there we go all right um so let's keep going here okay once you authorize and that was Kevin and me on the call that you saw on Zoom okay all right so let's go here yep so now it will say you are signed in beautiful and you can exit out once you've signed in now at the top here it's going to ask you to put your project name so go ahead and put your project name we're just going to call it all right so I'm going to type in Lottery and then just hit enter once you type that in and then you could choose this project as public fantastic now at the bottom in the networks you see it says Lottery and it's showing us that it's connected to multiple networks on layer 1 and Layer Two And if you go to your inferior dashboard you'll also be able to see this project there now I'm going to go inside of my contracts and what I want to do is right click on my lottery.sol and go and choose build contract so there you go build contract so click that and then once you once it starts building it for you just simply wait and go in your vs code and choose truffle for vs code for your outputs you can actually see the output I'm going to drag this up now and we'll wait for it and now it says command finish running so now it's built our smart contract and next after we've built it we're going to deploy it so then click deploy go ahead and choose your projects since we're on the robston one choose inferior Lottery Robson INF underscore Lottery underscore Robson choose that that's going to be your deploy destination okay and now it's going to say hey enter gas price just hit enter so you can leave it as default and here you're going to pop in your mnemonic okay so hopefully you've copied your mnemonic from earlier remember when you made your wallet yeah that if you didn't do that go ahead and create a brand you know either find a mnemonic for an existing wallet that you have or create a new wallet and grab that while it's mnemonic this is going to be very important and then paste that mnemonic here once you paste that mnemonic it's going to ask you to save and I want you to just save it as you know kind of wherever you want to save it it doesn't really matter I'm going to save it on my account in desktop and I'm just going to call it key dot ends it's really just short for Kevin and uh then wait for it to deploy at the bottom it's loading okay deploying takes a little bit of time so we're going to keep waiting for the deployment boom there we go it says deploy succeeded finished running command now grab that contract address that we got from our deployment copy that and now you can go over into you know we're create a new folder and we'll call this utils at the top level make this folder inside of it we're going to put a new file and it's going to be constance.js and inside of this file we can say export cons contract and we can say contract address and then boom we can paste that contract address okay that we copied there we go now our app will have access to this contract address now go into your back end go into your uh build and grab lottery.json and copy it then go in utils and paste that file so now we just paste the laundry.json and while we're doing this is because we will need access to our Abi and this has the entire ABI in there okay now we're also going to import in our constants file we're going to import our ABI from Lottery Json and then we're going to export that API yeah as well so now we're just going to do export cost contract API and we're just going to say abi.abi that should do the trick with that said we're all set up our front end now is plugged in and connected to our smart contract and back end we have access to everything now we're going to start creating the lottery from react and start doing the front end stuff okay let's get to it now let's go ahead and actually factually connect our back end and front end okay up until now we kind of pull that information the contract address now we'll actually like create a lottery helper function that connects it let's go into utils I'll create a new file we'll call this file Lottery contract.js and in here I want to do the following I want to import my contract address and my contract ABI from the law uh from my constants okay because my constants have access to all of this information once I have access to that I'm going to create my lottery contract and we'll be you doing it in the following way okay we'll say hey return to me a new web3 eth contract and you're going to take in the contract API and you're going to take in the contract address and with that said that is it so with this thing that we've made now we'll be able to actually access this in other files and use our Lottery contract and at this point you could add the export but we're going to add the export later and this is just going to be a helper function we'll be able to use throughout our entire app with that said let's move on and let's start working on the actual header in our app all right now we're going to be building the header and here's what it will look like boom all right so this is the header that we're going to be building on the connect wallet button so I'll put it here as just like a reference point that we can use as we continue building so let's go ahead and continue building here all right so I'm going to pop in and I'm going to say header okay and make sure you are in your index.js file and we're going to import header from components header okay then just write down header there okay this is a component we've already made for you inside of if you're going to the components folder you'll see header.js it's pretty much already built but it does have some to Do's so it does ask you there are things that you're going to need to do in there to add functionality so it says get the connect wallet and address from blah blah and then on line eight it has another to do replace a static address so we've added these todo's for you to make your life easier and then we have context as well so here's our context.js file so so let's go ahead and work inside of our context file and we're going to keep track of the user's address we also will want to add functionality for connect wallet so the user could log in and it's going to be an async function and we're going to say if the window is undefined okay and window ethereum is undefined so meaning that you know you're not on metamask or whatever and then we'll do else and we'll just say hey please install metamask let's add a try catch in between those if statements and we will try catch it in the following way so we'll have uh we'll console log the error and then inside of our try we want to request wallet connection and so how we do that is we want to do window.ethereum.request method eth underscore request accounts that'll allow us to request wallet connection okay that's that brings up that little popup in metamask and then next up we want to create a web 3 instance so let's do web 3 equals new web3 and we want to pull it from window.ethereum let's go ahead and import web3 from web3 great let's keep track of a couple of other states here so we're going to keep track of a web 3 State and we're going to use that hook right here and we're going to say set web 3 to whatever we defined web3 to be right right above on line 19 and then we want to have accounts and we want to pull all of the accounts from the user's metamask like whatever they connected whatever accounts are connected and we're going to set the address to be the zeroth account like the first account that they selected okay now go to Lottery contract and here I'm going to export default and we're going to export our Lottery contract so we have access to it outside of our utils file for lottery contract and we're gonna actually you know what rename it let's rename it to create Lottery contract that would be a good renaming for this let's go ahead and set a state here on line 9 and we're going to set a state for lottery contract okay so we can keep track of everything that's happening because the lottery contract can get updated so that's why we need to keep track of the state now in line 24 I want to say set Lottery contract okay to create Lottery contract and we're going to pass it web3 that we just got and then what we want to do is we want to say hey window.etherium Dot on accounts changed all right and we want to run this async function in here so whenever the accounts change then I want you to get accounts and set the address to account zero so if the user changes their account picks a new account this will do it okay this will automatically update it without necessarily having to even refresh the page or do anything because it's an on change it's kind of a listener here next up what we want to do is in our provider we want to pass this around so we want to pass connect wallet function that we created around so our entire app has access to it and then we want to pass the current address around so our app has access to it okay so let's go to our header function now and inside of our header function you can see it says Hey to do get the connect wallet and address from context so now we're going to go ahead and get that we're going to finish that to do so we're going to say connect wallet and then address and we'll say use app context okay let's fix the yep address right there remove that address we don't need that and yeah on line 18 we want to say hey if the user card so you can see on line eight we have a todo that says replace the static address or the currently logged in user so on line 18 we had a static address and now what we're saying is hey if the there is an address meaning there is a logged in user then I want you to show the user card with the following address otherwise I want you to show the connect wallet button okay so we're going to say address we're going to pass it the address and then for our connect wallet button we'll say hey um yeah made the connect wallet function should be the connect wallet function that we got from the top okay so that's what we're going to pass in as a connect wallet prop okay great so we've made fantastic progress on it so far let's go ahead and hit refresh and there we go our Lottery dap is showing up and now let's see if when we hit connect wallet if it runs okay so it didn't work right now so let's see what's going on so let's go to our connect wallet button component in components and it has a couple of todo's for us okay so we need to destructure connect wallet because that's what we're passing it and we need that function to run on click okay so let's go ahead and set that up so for the button we're going to give it on click and we're simply going to say hey run the connect wallet function that we wrote when you do on click so as soon as you click that metamask will then pop up okay so that is how we're connecting that functionality and here's our user card component that we have made and we need to destructure the prop the address prop that we gave it okay so that this has access to the address and we need to render the user's address in here so right now we just have some dummy address let's remove that dummy address and let's render the user address in there and we'll just say address just like that okay great now let's go ahead and we'll full screen this so we could see it let's hit connect wallet boom look at that right metamask just opened up we'll type in our password and let's see if this works great it worked and there you go right you can see welcome you could see the current user's wallet address and let's see if it's the actual current user or if it's doing some kind of dummy data thing and look at that 0xa right 0x a it is the current user we'll switch users as a zero um X31 or whatever let's switch to zero x35 let's refresh right let's connect and look at that right it changed the user to zero x35 and so you could see that this app works completely well with this it's picking up the current logged in User it's changing the state when we hit login connect wallet it changes it to the Welcome State it can change the current active user it has allowing us to bring up metamask and unbring it up and basically it's you know authentication at this point of the app is working so fantastic job if you got to this part now we're going to continue and we're going to start adding in the lottery card so you can enter the lottery let's go all right now let's go and work on the lottery card first thing I need to do is actually write the write out the lottery card component and then you're going to add in all the functionality we're going to add it together so let's go Lottery card right here and we and if you run this we get an error which says Lottery card is not defined what we have to do is we have to import Lottery card so that way we actually have access to it and we're going to import it from components slash Lottery card okay there you go we've already made this component for you now this component is coming in with dummy data it's coming in with dummy data and you can see that we got 10 each we got a winner last like who won the lottery last and we can pick our winner so let's go to context.js and inside of our context we want to do the following I want to all right so I'm going to say Lottery pot and we're going to say set Lottery pot so I'm going to keep track of the lottery pot state and we're going to start the state as empty and then we're also going to keep track of the lottery players okay it's going to be an empty in an array of players we're going to also keep track of who won last and yeah okay and then we're gonna keep track of the lottery ID which Lottery are we on are we on lottery 0 1 2 3 4 Etc let's go ahead and now we're going to write our enter Lottery function and I'm going to say enter Lottery this is going to be async and we're going to wrap it in a try catch we're just going to console log the error it's just a good habit to get into and then in the try what I want to do oh copilot is telling everything I'm going to grab my lottery contract and I'm going to call the enter Lottery function that I created on the back end okay it's called enter okay and then we're going to send and send is going to take in the following information into account it's going to take in the from address it's going to take in the value and so I'm just going to pass it a very small amount of ether as value because that's what I want to put in the pot okay this is a minimum amount that I could put in the pot and then we're converting it to whey because that's what it wants on the back end all right now for gas we're going to just pick 300 000 or whatever that is um okay so this is going to be gas in Whey or way and then we got the gas price here and gas price is going to be null now we want to also export this function so let's put enter Lottery inside of the app context and now we'll have access to enter lottery in our other files so let's go to our Lottery card and now we get the data needed from Context okay so now we're dynamically getting all of the data so let's go ahead and import our use app context from context and we will say use app context and we're going to destructure the following properties enter Lottery okay and that's kind of it that's all we need and where we have that enter button happening that's where we want our function to fire off that we just created so I'm going to say on click enter Lottery okay now let's go ahead and try that connect wallet login and then we're going to hit enter and now we should have entered Lottery and let's see what is happening we're currently getting some errors it says cannot tell you cannot read from undefined so we're going to import create Lottery contract from okay from where let's see from our utils okay from dot dot slash utils slash and we're going to say Lottery contract okay that's what we're getting it from now let's scroll down and let's say 0.1 ether instead of 0.01 ether for our value that we pass and now let's hit enter so that way we're just passing in bit more ether into the pot let's hit enter and boom okay that worked let's hit confirm okay let's see what happens so let's take a look at the Smart contract here okay our dummy data of 10 8 is still there so that's not going to change but our smart contract looks like it has entered so our enter function worked it didn't fail so that's a great sign and you can see that we put in 0.1 Ross pen here Robinson okay now but that part we're done now we're going to make it so we actually update the lottery pot let's go ahead and do that all right let's go and update our Lottery pot now okay so let's go inside of our context and we're gonna update the lottery card dynamically using our contract okay so that way where it says 10 eighth we need that to update dynamically and not for us to have to manually hard code it and fix it okay so I'm going to make update Lottery function here and this is going to be an async function and I'm going to say hey if the lottery contract exists okay then I want you to create a pot and I want you to go and get me the get pot method and since we're using web3 you got to do dot call to actually call your method okay and then whatever we get from our pot we're going to set Lottery pot to that okay let's use a use effect hook and inside of this use effect hook we're going to make Lottery contract a dependency so whenever our Lottery contract changes our app should you know our use effect hook should fire off and our app should dynamically update and when it does we should update the lottery so then we run the update Lottery function all right now in our context we also need to make sure that we um export Lottery pots or other files have access to it Lottery pot dynamically render the lottery okay so we're going to destructure in Lottery card or Lottery pot as well and where it says 10 eat we're going to dynamically now write Lottery pot there and it's going to pull from our Lottery pot and put that there foreign for lottery pot let's set it to be zero eighth when it starts so now you can see it says series okay I'm going to make it a string and then it will dynamically update once we have something in the pool so let's go ahead and connect wallet hmm interesting okay got dot get pot is not a function all right get pot is not a function so it's let's see it's get balance okay there we go and so we just got the balance and look at that so on our back end right on our smart contract blockchain part it's get balance that's what the function is so now you can see that when I say get balance I'm getting all of this money in way and so it is a massive massive amount and that's not what we want so we need to actually convert it back into ether so we're going to say web3utils dot from way okay and when you do Dot from way it allows us to convert it back into ether that's the really nice thing about that so it knows that it's getting way all right now let's go ahead and run this and boom that is so clean right now we can see that it's 0.1 eth that's showing up and we'll write the word eth at the end of that there you go now it says 0.1 eighth so now our app is dynamically updating super cool let's now update the lottery ID now we are going to update and render the players so they actually show up on screen when they enter let's go into index.js and we have a todo here that's very nicely written for us and I'm going to say table all right and this is a table that we've already made for you so import table from components table all right so yeah so we're going to get the table make sure you've also gotten the you know Styles make sure you have the Styles obviously and there we go look at that our table is already showing up at the bottom hey nice oh wait I'm hiding everything so I'm gonna hide myself give me one second here okay I'm gonna hide myself here real quick so you can kind of see it so there we go right we got the player showing up now I'm gonna make myself a tinier okay let's go back and let's go inside of our table and here we can actually map we need to map through the players and loop through it so our todo is telling us bring in the players data from Context so we need to get the players data so let's go inside of our contacts and get access to all of the players all right so an update Lottery I'm going to also write a players method and I'm going to say hey set the players to and let's go talk to our back end or blockchain part so I'm going to say go into Lottery contract going to the methods grab the get players method and call it and whatever that returns let's set that as our player so it's going to return an array let's set that array as our Lottery players okay and we can even console log this out so you could see it here all right there you go at the bottom you could see that we got an array of players it only had one item in that array and you could see that we had this guy right there okay and that's the guy that's currently actually logged in so it is working all right now let's go ahead and Export Lottery players in our provider so that we have access to another files right and now let's go to our table.js and I'm going to basically say inside of the loop here okay or inside of uh the div there but first i'm gonna pull my data from my context all right so let's say use app context and we're going to destructure Lottery players okay that's the one that we're destructuring there and now I'm just going to say hey in players row just show Lottery players okay let's do that we're going to say hey if La if Lottery players exist then I want you to Loop through those players and show me those players okay create a table Row from each of them and then show them to me and we're just going to make index the key for player we're just going to pass in the player okay that's it but if they don't exist then obviously just show me dummy data okay or don't show me anything at all so we're going to say style of no players and we'll send no players yet now when we run this you could see that it's actually already dynamically pulling in user information because you could see this is the guy right there and you can see 0xa1fa blah blah blah so this is working perfectly let's go inside of table row and you can see that we're destructuring the player and we're truncating that player's address okay that's what's shortening that address right so you can see that address is being shortened right there that's how that's happening okay it's because we have that function trunk kit that we're calling on it okay now let's say we change our wallet address and see what happens boom okay let's go ahead and hit reject there cool all right you can see we have 0.1 eighth and you can see our user address is still 0xa because that's the player that's that has actually entered 0x35 has never entered this dap it's Lottery okay but now let's say that we do enter let's see what happens now so I'm going to hit confirm okay we'll speed this up I'll just put in high gas prices so I could speed it up and looks like it went through now we'll refresh the page and boom there you go all of the players are showing up and they are being rendered dynamically how freaking cool is that so with that said we're pretty much done with that part just remove the part where it says you know 0.015 eth and we just hard coded it to 0.1 eth so right here we could hard code it with 0.1 each because in this app the only pool like the only amount you can enter with the 0.1 each so we know guaranteed a 0.18 so I don't need to pull data dynamically I can just hard code 0.1 eth here and be accurate because you can't do more or less than that okay so with that said we're done with this part now we're on to the last and most exciting part which is we gotta pick our winner so let's go all right time to pick the winner so here we go let's go into our Lottery card here you can see I have my pick winner okay so we need to add functionality for this let's go into context JS first we're going to write our function pick winner that allows us to pick our winner let me put a little space after my comments because I'm a professional and then we're gonna say hey pick winner function is going to be an async all right so here basically what we're gonna do is I'm gonna write a simple try catch and obviously it's console logger error and then in my try catch I want to say I want to Define my transaction and I want to go into my lottery contract and I want to pick the winner okay and I need to send so to pick the winner I need to send the from address I need to send it the gas and all the other things that it needs okay so we're just going to pick 300 000 way gas price is going to be null and that's that's it okay pick winner is going to pick randomly and the reason why it needs the from address is remember it's checking for if you are the owner if you're not the owner then it won't work all right and then what we want to do is once we get the winner we want to update the lottery okay so we want to actually at this point we want to first update the lottery okay so we want to run our update Lottery function and that way it will automatically update all of the data on our Lottery card you know the current wallet address the current users Etc let's export this pick winner function so other files have access to it let's go to our Lottery card and here I'm going to get access to this okay so let's go ahead and destructure pick winner and then we're going to go ahead and do on click pick winner okay there we go so now we entered our on click we gave her on click the pick winner so let's go and now choose pick winner and we'll soon see what happens okay and let's also update the wallet address for our last winner so we're gonna you know create that function too at some point okay so let's go ahead and set the last winner to be whoever the last winner was so luckily in our blockchain we've already made that smart contract and so I'm going to go to my lottery contract and the methods and I'm going to extract my get winners all right so we are getting our we're calling our get winners method from our smart contract which gets us all of the winners and then from here what we want to do is we want to extract the last winner it's going to be an array so let's go ahead and console log this and we're gonna console log um our last winner so let's go ahead and do that and let's make it an array so let's go to on line 12 and let's make it a empty array by default all right now let's log in so now everything got updated right right when I logged in all the users got updated Etc and let's see if the last winner is showing up so I'm gonna go here we're gonna look at our console and you can see on the right hand side that right now it says length is zero okay so so right now we since we haven't picked a winner it's just saying zero but once we picked it pick a winner it's going to show an array of who won last okay so let's go ahead and do last winner here okay and I'm just gonna write last winner there okay and so yeah let's take a look at it and now we can see that it's showing us an array of people those are players right the array that you're seeing with the actual wallet addresses those are actual players but the one where you're seeing empty that's where it's a winner and it's because nobody has a one yet so we're gonna need to run our one pick winner function first and then it'll tell us so let's go ahead to our Lottery card and we're going to dynamically render the last winner as that note says because right now it's hard coded so let's go and grab our last winner so we're going to say on line 23 actually first let's destructure our last winner so we have access to it we'll go in our context and we'll make sure we're exporting our last winner okay and then we want to do the following we want to say hey if the last winner is there then show all of this div and everything that's happening underneath okay so I'm going to say not last winner okay so if basically so if last one or does not exist then I want you to do the following if it doesn't exist then I want you to create a div with uh we're gonna say style.winner and here we're just gonna say no winner yet and then if it does exist then I'm going to do the whole winner thing Okay cool so let's see what's happening here so if there is a winner then I want you to if there's no winner then I don't wanna I want you to say no winner yet if there is a winner then I want you to show uh a address okay show that the Winner's address now here you can see it says no winners yet that is perfect okay that is what we want when we're doing this right now now I'm going to click pick winner and make sure you're the owner account when you say pick winner and then I want you to go ahead and hit confirm okay and let's see we're still waiting let's see let's speed it up for pick winner I'm gonna put High money into it speeding and speeding it up ah it failed so let's see why it happened ah because I was not the owner right that's why it failed now I'm the owner now let's pick and let's see what happens so I'm going to hit confirm here and then we're gonna see if we can speed up the contract addresses let's speed them up let's put it on high perfect Boom the winner is picked let's go and now you can see user address is empty because new the player players are now wiped out because the last lottery is over right now we're in a new lotteries that makes sense why I got wiped out now for last winners it shows us a hardcoded thing it's saying the Pod is zero so that's good okay lottery number incremented by one however our last winner okay it says no winner yet sorry actually it says we have 0x123 blah blah blah so it's not showing us who the actual last winner was we need to update that because we have left it hard coded remember so we need to go and fix that on line 29 okay we're gonna take that wallet address and we're going to replace it with the actual winner so yep okay there we go that's our last winner we're exporting our last winner as well now let's go here okay we have access to our last winner so all I'm going to do is I'm going to replace all of that and I'm going to say last winner okay and it says address match is not a function okay so since it's an array we're gonna go ahead and say last winner and I'm going to get the last item from that array okay so all I'm doing here is I'm getting the last item from that array so let's say I have 10 winners well since I want to get the most recent winner I'm going to grab the last element out of that array okay and to just kind of visually see it for yourself it's like if I have David Kevin and if I want to get the last winner here well I want to be able to do you know let's say that this is called winners I want to be able to do winners and get me cozy so I want to do winners of two okay in other words I want to do winners of dot length because uh dot length and actually I want to do length minus one right because that'll actually get me the last possible item so if I do winners.length I get three I subtract 1 I get two this whole thing turns to two winners of two is cozy okay since we start at zero one two yeah okay so I'm gonna write that then let's go ahead and do minus one okay great now let's connect wallet and there we go our last winner the actual factual person now one is now showing up how beautiful is that let's click enter to enter the lottery so now we're basically doing the last final demo run and let's test if this whole thing works okay let's click enter all right I'm gonna speed it up speed it up speed it up speed it up there we go okay so now it looks like I have entered successfully it did cost me some robston to do that because I pulled the money let's refresh and you could see 0.1 eighth is there and you can see the new user is showing up there at the bottom beautiful then let's go ahead into our metamask I'm going to switch my account to a different account and inside of this account I will hit enter okay let's go ahead and hit confirm all right and once I hit confirm here let's wait for it we'll speed it up okay let's speed it up speed it up and then we'll hit save and it looks like I have entered with that one as well so let's refresh the pool size the pot size is 0.2 each both of the users that are current players are showing up as players and then we got our last winner showing up as well so this is amazing so far you guys now we have to switch to the owner of the contract smart contract address and then we gotta go and pick our win okay once you are the owner and then you go ahead and pick winner now we'll just wait and wait for that bad boy to speed up okay let's pick the high highest gas price possible speed it up speed it up speed it up speed it up and let's see what happens boom look at that right all the players got wiped because the lottery is successfully over the number for the lottery ID at the top incremented automatically the last winner was updated to whoever won and always remember whenever the owner jumps into the lottery I mean the chances of the owner winning are massive yeah the game is rigged so be careful letting the owner jump into the lottery all right with that said I hope that you enjoyed this so very much as much as I did make sure if you did Smash that like button subscribe to the channel if you haven't already and with that said I hope you enjoyed it put on your portfolio show it off to people and good luck in your web 3 Journey this is qazi I love your beautiful face and as always I'll see you in the next video we're gonna be building the venmo Clone with solidity and infuria this is going to be a very powerful dab that you're going to learn how to build from scratch we're going to be coding up the react part along with the smart contract and the blockchain part there are a lot of Concepts you're going to master as a result of this from blockchain Concepts to programming Concepts but more importantly I think you're gonna have a lot of fun and you're gonna learn that building blockchain apps don't have to be a painful experience they can actually be quite a pleasant experience so while my fire is burning behind me let's have a Fireside app building session with that said smash that like button turn it blue or white depending on if you're in the light theme or the Dark theme on YouTube subscribe to the channel because this is where we help you become a developer and a web3 developer and let's get straight into the video step number Uno which is we're going to sign up on infuria it is completely free it is a RPC node provider and it will make your life so easy okay so that's what we're gonna use when we're building our dap so go ahead to the link below that we've provided for you okay use that special link that way we'll know that you're coming from this video it will be helpful for infuro to know this um and yeah just click the link in the description below okay it's going to be infuro dot IO whatever that's going to be the link click that below and go to this page right here hit sign up once you're on this page all right and then just create an account so I'm just going to create my account right here hit our resend emails it'll send you a confirmation go to your email address go ahead and confirm that bad boy once you're done it's going to send you to this page Pick Your Role so let's say you're an engineer okay slash developer solo freelance whatever and pick your category and then just hit next all right now you're going to create your first project so you're going to do web 3 API formerly ethereum and the last part you're going to do is my first project name it whatever you want I'm just calling it my first project okay all right so there you go now we don't need to touch this in here okay everything you can leave as is because we're going to use an extension later called truffle and that will allow us to interact with inferior and pull all of this information okay so there you go your project should be created in here my first project okay and that's effectively it okay so make sure you go ahead and do that and I'll see you in a second all right so here is the a demo of this app so take a look at it right I am here on my venmo clone the first thing I need to do is actually go ahead and connect my wallet so I'm just going to type in my password on metamask and log in once I am logged in I'll just hit I'll connect both of my you know any of one of my accounts I'll just start with the account one in this case once I'm in you could see on the left hand side that I have all these transactions going through and it's showing the notes as well so here what we're going to do is I'm logged in currently okay so you can see my metamask wallet and you can see that I'm connected okay and here's my other account so here's account two right and then here's my first account and I'll paste in the second account that I want to send my money to and I will drop a message okay you could send your ethereum to really anybody that you want but I'm just going to send it to this address I'm going to say here's some money now metamask opens up and it asks hey do you want to do this are you sure blah blah blah yes I'm sure I'm gonna put in my password all right it's telling us about the gas fees let's hit accept Okay it's doing a little loading all right blah blah blah contract interaction go down hit confirm and we'll wait a couple of seconds here okay let's wait and it says pending so I'll speed it up contract interaction okay we'll speed it up and boom it's done look at that on the left hand side it loaded right away it says here's some money and you can see it says four seconds ago that is beautiful okay and again now I can switch the account as well so I could go to a completely different account okay and I could send money to the other account so I can change accounts and send money to wherever I want okay so I'll refresh you can see that the account just changed over here okay it's a completely different account as you can see let's keep going I'll paste the account number and I'll say thanks for the money and I'll send some money in return okay thanking the person for sending me some money there we go and now we'll hit confirm and let's wait for it wait for it sending and I'll hit speed up contract interaction is done and look at that right away it shows up all the way at the bottom bottom right it says thanks for the money beautiful so there you go I hope that you're excited about this project this will be the venmo Clone that you will be building I hope you're excited it's going to be happening with solidity so with that said let's just rock and roll and right before we get started ladies and gentlemen I just want to give a huge shout out to this man right over here I'm new to the screen screen thing but JavaScript Mastery uh a lot of the smart contract part is from his video called Crypt uh where he built the portfolio so definitely check it out we'll Link in the description below uh it is an awesome resource and on top of that we built our own styling and everything and then converted it into this beautiful venmo app that you see in this video so with that said let's get back into the video shout out to JS Mastery all right now open up your command line and let's go ahead and what we're gonna do is I want you to just write npx clever programmer this is a clever programmer npm package that we have made and the benefit of this package is really that it actually gives you everything you need so we're giving away The Styling a bunch of the app assets and we just make the whole app really really simple for you all you have to do is just type in that command it will install it for you okay and once you're done installing it make sure that it's going to ask you hey which uh what's your email address just pop in your email address and then after that is going to ask you for your name and it's going to ask you for what project you would like to initialize so for example in this case we're building the venmo app so make sure to just initialize venmo it will initialize a whole bunch of helpful files for you so that we don't have to spend a bajillion years trying to build this app you know the styling will already be done we'll do the interesting more fun infuria slash web 3 solidity Parts okay is this really the focus of this video right so boom there we go it uh now it's installing it and setting it up on your computer it's getting the dependencies for you so this is the magic of when you set it up with npx clever programmer okay it's going to basically start the project and it's gonna automatically open it up for you okay if it's giving some kind of error or whatever just understand that all we've done is we've cloned the repo put on your computer so you could point and click and kind of go inside of it as well if you wanted to okay so let's go ahead and now see what is happening all right now that the project is opened up what I want you to do is just open up the terminal and I want you to type in yarn start that will install start your server okay that'll start your project now just go ahead and I want you to open up your localhost 3000 okay and you could put it on the side of your computer like this all right so on the left hand side your server is running on the right hand side your app should be up and running so that's where you should be at and let's go to index.js okay and you can also go into your app.js and you can see that this is a regular react file right pretty much vanilla except the only difference is really we've given you a lot of the styling all right so let's keep rocking and rolling here okay on the left hand side you will see in Source you have assets components and styles and normally you won't have assets or components like that's something we've created for you and given you and in Styles we've created extra styling for you as well okay so that's the structure so we're going to go into our app.js and we're going to delete everything in anything that's inside of that class name app div okay remove go ahead and remove everything so now your app should be this blank canvas we're going to get rid of the logo.svg as well we don't need that let's refresh and again your app should just be not giving any errors but also not really showing you anything okay now inside of that Dave we're gonna basically just put in hello world and once you do that that is enough for this part we're already ready to get started with the web 3 and truffle and inferior part I hope you're excited let's just get to it alright so here we are now we're going to be getting on to the Truffle part okay we're going to be setting truffle up and we're going to be setting in Fiora up so let's go here now in the main directory what I want you to do is create a new folder okay and we're going to call it back end AKA blockchain part so in this case our back end part is really going to be our blockchain part AKA our smart contract part okay so let's go into our back end but what's cool about this when you're in the blockchain world is like you don't really need to deal with Firebase or uh it's funny I'm saying Firebase and a fire behind me but like you know your back end isn't the traditional mongodb or Firebase your back end is the blockchain okay that's where you're storing your your data majority of the times all right let's go ahead okay so let's go ahead and now I want you to type in truffle init okay um and before we actually do that do that let's go ahead and make sure we're in our C back end so go ahead and do CD back end for me once you're in there I want you to type in truffle init by the way quick thing if you don't have truffle installed put in this Command right here and that will install truffle for you and if that doesn't work Google it with that said let's keep on going okay so after you do truffle init it will pretty much set this up for you okay and kind of initialize the repository for you on the left hand side a couple of things should happen okay you should have this contracts part the migrations part and test part get built out and truffle config should start showing up so before your back end should have been empty but after doing this you should have these three folders plus that one file ready to go okay now inside of your contracts you have something called migrations okay so that's what's going to be there and then also you have a migration folder that will have your initial migration okay this is what you're going to be using pretty much to deploy your contracts afterwards as well so all of this information is pretty important now inside of your contracts you're going to create a new file and that's where we're actually going to create our smart contract okay so let's go ahead and call it transactions.soul dot Sol okay Sol is short for solidity and then we're just going to put in a little license here and we're going to say spdx okay Dash license and since this one is not licensed the identifier we're going to pass it is unlicensed okay and then that warning at the top you know is basically taken care of so you could just say hey it's unlicensed that's totally fine all right next up we're gonna go ahead and make a contract and we're going to call it transactions all right now that we got our transactions contract just we're just going to leave it at the blank right now okay and then what we're going to do is here's what I want you to do okay I want you to go ahead and get this extension truffle okay so at the bottom left you see that I have this truffle and extension okay right over here okay that's the extension that I want you to get right so what you're going to do is go to your extensions you can also do command shift X or Ctrl shift X go into your extensions type in truffle and just go ahead and install truffle okay truffle for vs code this one right here and then once you have it installed go to your truffle extension okay and it's gonna make your life really easy when you're developing this is really nice and what we're going to do is we're going to go ahead and hit connect to network and then it's going to ask you do you want to use the ganache service or you want to use inferior service or other the one we want to use is we want to use the inferior service right over here okay so go ahead choose inferior and then I want you to go ahead and choose sign in so let's go ahead click sign in and then just simply sign into your inferior account okay if you don't have an inferior account just make a new inferior account because you're going to need that for this app and excuse my dog she's a little crazy bulldog and she's wild so she'll be barking in the back but we'll ignore her all right here you have um this little air thing showing up you could ignore that it's not important here okay it pops up all the time but it doesn't really matter all right all this stuff pops up here and all I want you to do now is uh simply just go scroll to the bottom and hit authorize okay now that that's done it says you are signed in you can now close this page so simply go ahead close this page okay and now at the top here it's going to ask you to put in the project name okay right right over Yonder boom right there okay so go ahead put in your project names I'm gonna just simply say uh venmo clone or whatever okay so let's go ahead and write that in venmo Clone all right and then hit enter and then we're gonna just make this project public because there's no reason to make it private okay and now you can see on the left hand side we can see inferior service showing up and now I'm going to go to inferior.io and on here let's go ahead and click uh start innovating button okay so go ahead and click that and right when we click it you could see that we see that there's event McClone okay this is the one that we created from our command line little tool thing that popped up over here and now it says this project is active it was created today and boom okay this is good to go right now it should have zero requests okay and on the left hand side you could see that if you click your inferior service and then McClone you can see all the networks you have access to so mainnet you have access to quarterly rain can be rosben and then Layer Two you have access to all these other Main and test Nets okay so with that said you've done a wonderful job now we're gonna move on and we're gonna start working on the smart contract so let's get to that in the next part all right right here we go now we're on the fun part we're going to be making our own contract okay so let me take the photo away and I'll show you why I have that photo in just a second but let's go ahead and work on our smart contract here okay so let's go inside of transactions and I'm going to add in a very specific version of solidity here so we're going to go ahead and choose a specific version of solidity so I'm going to put a carrot and do 0.8.15 okay that's the version I want you to use and usually the first line of code in any solidity app is usually that pragma solidity blah blah put your version okay so go ahead and do that then inside of my contract I want to do a un256 and I want to have transaction count this variable here will be keeping track of how many total transactions we have at any given time all right let's keep going now just so you understand what I mean by this okay I'm going to bring this into the view so remember in our finished version of the app we'll have a transaction or a transfer and then we'll have multiple transactions so that transaction count will be keeping track of how many times the user for example sends a particular like sends transactions right so if we've sent five or ten transactions and all users have sent 10 transactions and the transaction count will be 10. so just keeping track Global track of the count of transactions okay the next step what we're going to do is we're going to create an event that will be fired when a transaction is made okay so for example we're going to say event and I'm going to say transfer and here's what I want transfer to do so I want to show who the transfer is from okay uh the receiver okay who received the transaction the amount of the transaction and the message of the transaction and just you can understand what this means from is going to be this address of the user that's logged in okay receiver is going to be who you're sending it to amount is going to be the amount that you want to send and then the message is going to be this right here okay but now when you're using uh languages like solidity or whatever you have to Define data types so I know that this is a string data type so I'm going to say string the amount I know is going to be an integer okay so I'm going to go ahead and say int all right now if you have a little bit of programming experience you might be like wait a minute qazi how the heck is a Mount uh int a uint by the way is unsigned integer meaning it could be negative and you might be like wait how the heck is an integer if this is 0.002 under the hood everything is being calculated in the smallest denominator in ethereum which is way so away is much smaller number so under the hood it's not actually um in decimals it's just showing you here in decimals because this is not in way okay so uh there's actually no float type in um solidity which is pretty interesting but yeah all right and then we're good with adding all of that stuff and the last thing we're going to add in our event actually is the time stamp so that thing is the thing that's not visible right now so for example timestamp isn't showing up in anywhere uh in any of those okay so time stamp what we're doing is under the hood right when the user hits send we're gonna log that time so let's just say it's like you know it's 12 33 a.m and this dude is sending some money to his friend um for cleaning what kind of friend does he have that cleans at 12 33 a.m I don't know he's sending the friend some money for some okay we don't know what it is uh he maybe maybe gave him some food and now he's he's paying his friend at 12 33 am and that time stamp we're gonna log and it's gonna get log low key under the hood and we're gonna pop that in right there okay that is going to be attached to right when the user clicks send okay just to kind of give you a little insight onto what we're doing here all right now the next thing we're gonna do is uh we're gonna create a struct okay of the transaction that we will be storing on chain okay and um structs as kind of an ugly name and it makes things sound confusing but it's really just a structure or like a data type here and so we're just going to say hey when you see a transaction or a transfer this is the type of stuff it's going to have inside of it okay so expect it to have a sender expect it to have a receiver expect it to have an amount you know expected to have a message and expect it to have a time stamp okay that's all we're saying here Saul the rest of what we're saying here is about these data types okay so the main thing I want you to notice is sender receiver amount message timestamp those are all the things that are happening here okay now what what is this other stuff addresses a specific data type inside of solidity when for wallets it understands it when you say address okay same thing for the receiver it's not just a string so it understands how dresses work underneath the hood all right and then amount is in int string message is a string and then time stamp we're gonna make it a uh in 256. now you might be wondering uh why is this you in 256 and why is this int just by itself if you don't say 256 and you just use int like this by default it's actually in 256 okay so both of these are both of these here are actually in 256. okay so that's really the one thing I want to clarify here okay beautiful so now that we're done with that now we're going to create an array of those transactions okay so the strings are the structure we make we're going to make an array out of that so let's go ahead I'm going to say transfer struct and let's go ahead and rename it and call it transfer struct the reason why we're going to call it that is such a very clear that it is a struct okay and then when you get better as a developer you could just call it transfer or you could call it transaction okay that should be fine now we're going to create a variable called transactions and here's the interesting part about this okay we're declaring a variable called transactions but we're saying that this variable here is going to be an array of transfer structs meaning it's probably going to look like an array okay an array and it's going to contain these transfer struct objects so it's going to basically contain you know if you're a JavaScript or react person imagine this so imagine um I have my receiver and the receiver is zero X blah blah blah I have my sender Xerox blah blah I have my uh not sender I believe it's from one of those and then I have my uh let's say my message and it's hello okay and then you know and that's just like one transfer struck let's say okay and I know the transfer struct has some more stuff but let's just say for simplicity's sake this is one transfer struct and then there's more transfer structs so in a classic JavaScript scenario imagine that you really have an array of objects okay and more specifically the objects will represent the transfer struct meaning that whatever Keys the transfer struct has these objects will have and if you don't put that in if you have an object that doesn't have those keys it'll error out okay so uh there's a lot of type safety into the code and that way your code will have less bugs and errors but at the cost of like really being very verbose and explicit um up front cool okay so let's keep going now what we're going to do is we're going to make a function uh to add a transaction to the array to the blockchain okay with our struct so let's create this function and we're going to call it add to blockchain but really what this function is doing is adding you know essentially it's adding a transaction to the blockchain that's what we're doing we're going to create a so the variable here that we're creating is called receiver all right so here the actual variable here is receiver okay that's the main thing these two are these two are think of them like data types okay address is a data type and payable is a special keyword that makes it so you could actually pay the receiver that's it okay let's keep going so address payable receiver then we're going to have an amount we're going to have our message as well okay so but for this one we're going to say string memory message don't ask me why you have to say memory if you don't write memory you'll get an error so just write memory string memory message okay all right then all we want to do is we want to say public meaning that even outside of the smart contract you should be able to actually call this function so we have access to it all right and um payable keyword means okay that the receiver is actually able to receive ether from the sender okay so something I said earlier but this is just to make it really verbose and clear for you and copilot wants to do a lot of stuff but we're going to skip that now here's what happens in this function when we are in this function what we want to do is when a user calls this function meaning you're calling your function add transaction right well the first thing you want to do is we want to increment the transaction count by one right that should be obvious it's like I'm adding a new transaction to the blockchain increment the the count of and the number of transactions okay and then what I want you to do is take the transactions array that I created earlier push a new uh transaction to it okay and all we're all we're pushing to that array is literally from my JavaScript World okay my JavaScript peeps you're literally just sending an object okay this object is going to be like uh sender Xerox something uh you know receiver 0x something message hello whatever okay timestamp timestamp some Unix Unix timestamp okay so that's all you're sending okay so this over here uh is a Constructor transfer structure is a Constructor and once you pass it all of this information it's going to literally make an object for you at the end of the day that's all it's doing and message does tender just in case you're wondering what it is you know when you're signing with metamask so like when you're doing this thing with metamask right where you're literally signing yeah that is what refers to the message dot sender okay so the dude that's logged in with metamask and hitting send and then hitting confirm it's pulling that dude's account address okay from message.sender now if you're wondering how it's pulling the receiver it's pulling okay for so this is the sender and then this guy who we're sending it to is the receiver okay the amount that we have okay wherever the amount is let's just set that set amount that's going to be the amount that it's pulling and then the message is whatever message you wrote in and the timestamp is like the exact moment you added it to the blockchain okay so that's why we're getting it from the special keyword block and this MSG is also a special keyword in solidity so both of these block and MSG is a special keyword okay my big head is blocking some of that stuff so there you go that's what I was showing you like that little transaction there is the amount okay now I'm going to hide it again because I like myself uh being huge like a big giant on the screen so I'm gonna make this small and I will hide it away from you and I'll just bring this back for now and let's keep going okay all right and then next up what we're gonna do is we're gonna omit the event we actually created earlier so we want to emit the transfer event we created okay so let's go ahead and just omit that event we're going to give it the sender receiver amount message block timestamp and all that good stuff it's the equivalent of doing the you know a console log let's say all right so let's keep going over here and we got our amount we got all of that okay I'm just gonna check if I'm on the right solidity version I am yep so there you go that's your emit event that you're gonna have there okay now we're gonna write a function to actually get all of the transactions from the blockchain so let's go ahead and do that so I'm going to call this function get all transactions and I'm going to give it a public View and we're going to return a transfer struct that's the data type we're going to return and we're going to actually return so think of like we're going to return an array of objects and the array of objects is going to be of type transfers or transactions okay and we're just going to put memory there because if you don't put that you get an error so just put it okay and then we're going to return transactions at the end of the day and um yep and then we're gonna make another function and this function is going to get the number of transactions and we'll say get transaction count okay and uh again it's going to be a public function and it's a view so for review we're telling we're telling the blockchain hey there's no transaction happening here we're not going to be changing the data so you're not gonna don't you don't need to charge us here for anything it's just going to be a view and then public is so you can access it from outside returns is what data type and what specific things are we going to return so we're going to return an integer and then I can just go ahead and say return transaction count and that's about it so yeah and then lastly what I want to you know just explain really is the view keyword right that basically means that the function can only be used to view the data all right that's that's all that means all right and that means that no ether is needed to run this function okay that's something that I want to highlight to you with that said we are done with the contract part now we just sit back we watch the firework and it's time to deploy the contract let's go alright now that you've made the contract it's time to deploy your contract okay it would be kind of like if you had all this wood behind you but you never lit it on fire okay if you didn't do that what's the point of having a fireplace it's useless so when you have a contract there's no point to just having a contract it's like having a bunch of wood we've got to deploy it okay we gotta at the fire we gotta turn it into a fireplace and that's what makes it usable by everybody in the world including yourself so let's go and do that now so what I'm gonna do the first thing inside of contracts you see transaction here I'm gonna hover over it and I'm gonna right click okay I'm gonna right click and what that will allow me to do all right so now what we're gonna actually do is inside of our migrations folder we're going to create a new file okay so let's go ahead and let's create a new file and before we do that go into your one underscore initial migration copy everything inside of that and then I want you to go ahead make a new file 2004 deploy.js paste all of that and everywhere it says migrations we're going to change that with transactions okay so you could also do right click and rename all occurrences or you can just do this in this fancy way or you could use the shortcut command D which on Windows I believe might be control d that right there okay that should allow you to do that multiselect on everything let's keep going and now what we're going to do is we're going to right click on our transactions right here okay and I'm going to choose build contracts now if you're wondering how do I have this build contracts right here it's only possible you guys if you have this truffle extension okay if you don't have the Truffle extension okay this extension right over here if you don't have that the build contract right here will not show up okay so make sure you have it okay so we're gonna hit build contracts now my contract has started building so we'll keep going through it okay it's going to take a second to build and here's what happened okay I just ran into a little bit of an error let's go ahead and I'm going to choose truffle for vs code so go click output and then here choose truffle for vs code so we can actually see what the error is okay and here I'm checking to find we're checking to find what the error is and it says hey there might be something you need to fix in truffle config so I'll show you what we need to do so first choose truffle for vs code scroll down until you can see the error and you can see the error says truffle is currently using soul uh solidity version 0.8.11 and it does not match what we have inside of our file right there so let's go ahead to our truffle config.js right here and fix this problem okay so let's go truffle config and scroll down to line 84ish and where it says version you see it says 0.8.11 go ahead and change that to 0.8.15 okay so we're going to go choose just put a 5 there let's hit save okay and now let's try to deploy this again and see if it works okay it's going through and let's see okay it looks like we have a build folder now that's starting to show stuff so that's a really good sign and there we go you could see it says compiled successfully using Soul version 0.8.15 okay so our contract is now deploy uh sorry it's built now all we need to do is let's go ahead and right click on transactions and this time we're going to choose deploy contracts so let's choose that okay now here I make an error okay so I choose the robsten network but I don't want you to choose the Robson Network do not choose this choose Gorly okay so I want you to choose the gwarly network that's the one okay that's the one I want you to pick don't pick Robson just want to make that super super clear so in your case you should be picking you should be picking that guy right over Derek Worley once you click it it's going to ask you to paste your mnemonic now remember earlier in the video when you made your wallet with metamask that's when it gives your mnemonic it tells you to write it down so grab that mnemonic that it gave you and I want you to bring that here and paste it here okay so we're going to paste our mnemonic now and it's going to ask you to save it now you can save it anywhere you want okay so I'll just go to my own folder here and I'm just going to hit key dot end and there we go we've saved it and at the bottom you should see it's saying deploying contracts okay and your project name is going to be different than mine for you should say deploying contracts to venmo clone okay I just have to create another project because I was getting some errors or whatever but hopefully you won't be getting errors if you are also getting the same errors then it might actually help you to create a new project okay so just a little note for you and pretty soon this um deploying will be completed and it is okay so now that the deployment is completed it gives you this very important contract address you're going to need access to this so hover on to this and I want you to copy it okay this is a very important contract address and then I want you to go ahead and grab this contract address okay so let's go ahead and grab this contract address and what we're going to do is we're going to make in our source folder we're gonna make a new folder and we're going to call it um we're gonna not a new file we're gonna call it make a new folder we'll call it utils okay and inside of utils I'm going to make constants and inside of there I'm going to save a new constant constant file it's going to be called constance.js and inside of this file we're going to make a contract address and we're going to paste the contract address in front of it now a little note for you just put const here I forgot to put that okay so just put const contract address and we'll come back to this file and we'll fill it fill it out completely okay all right so with that said right now you're doing great your contract is deployed so congratulations because that's a huge part of the process and at this point we're pretty much done with the smart contract blockchain part pretty much completely and now we're gonna do the fun frontend part where we're going to connect to this back end and then now we're going to really make the app sing so I hope you're excited I'll see you in a second all right now what we're going to be building is going to be the nav bar okay so it's going to be the nav bar we're going to build for our project this is what it's going to look like so boom right there okay that's what it's going to look like right there so that's the target that's what we're building remember it's not built yet okay it's just a photo so I'm going to leave that here as a target of what we're building or actually let's leave that here so that could be like a use as a reference point okay so now let's go ahead and build it together all right first thing I'm going to do I'm going to go inside of source okay inside there let's go into our app.js and inside my app uh what I want to do is let's go ahead and remove everything from the top and I'm going to say import Style from dot slash style slash app dot module.css okay that's where a lot of the uh styling we've already written for you so it's in there go ahead and call the class we're going to use this a wrapper okay and we're going to inside of our wrapper we're gonna put in our header and inside of our header we'll put in our nav bar okay now no nav bar is going to show up so once I hit run on this we're gonna really when we do yarn start we're gonna get an error okay and the reason why we're getting in getting gonna get an error is because we never imported it okay so let me actually move this a little bit out of the way here as you can see a navbar is not defined so now what we want to do is in components you could actually see that we have created navbar inside of components right so we're just gonna go ahead import that right over there import navbar from dot slash components slash navbar okay and now that it's imported let's go into our nav bar and we're not getting an error anymore let's build out our nav bar from scratch let's get in our navbar styles that we've already made and for this nav we're gonna say navigation container for styles and then we're gonna make a container div inside and then inside of that we're going to use the logo image class logo container rather okay and then we go we run that and we get an error all right so let's go ahead we're getting a error here right this is not loading the logo we'll fix that in a second first let's just go ahead and give it a class name and we're going to say Styles dot logo image for the style on this okay and let's fix this source so we're going to change the source to dot dot slash assets slash venmo logo.svg still not loading okay so let's drag the assets folder and we'll move the assets folder inside of our public folder there we go and now we change it now we run and look at that venmo is showing up that is beautiful okay so let's continue all right now we're going to add in an actions container and we're going to say hello and then we're going to give it an accent color and this is where the user address will go so we're going to say hello comma user address okay and remember right we're mapping it to this one that's our reference point so we got that part now we got the hello part okay and then we have the user address there now we're going to put a hand wave and last but not least we do need to put the image the circular image that we have so let's go ahead and do that okay so we're going to first get our down icon okay because we need that icon for right here okay so let's call our Chevron down icon let's give it a arrow down icon styling and let's make it a selfclosing tag okay now we're getting an error can't resolve hero icons so obviously what we need to do is we need to install this package right here and let's run it cool now it's showing up so you should have this package already installed when you do npx clever programmer you get all the dependencies installed by default so just make sure you add in the slash outline and then you should be good to go all right the last thing we need to add is the image so let's go and do styles.avatar container so I'll make a new div and then inside of this div we're going to put an image and this image we're going to give it Avatar image style uh make it a selfclosing tag as well and the source okay is going to be this specific Source right here at yiang dot me slash avatar.jpg okay you can get your image from wherever you want Yap is somebody who just works with us on the clever programmer team and so that's the image we're using you can use your image or anybody else's image right and boom look at that okay let's get to the end of this boom right if I show you this look at that right we started with that reference and we got pretty much a onetoone match so that is absolutely phenomenal we are done with our navbar uh and now it's time to move on and add our wallet connection let's go now what we want to work on is the metamask connect wallet functionality so basically we want to be able to do this thing okay where you it'll pop up connect with metamask It'll ask for your account you'll be able to hit next and then move on to the next part okay so let's go ahead and start working on this bad boy now there is no front end part to this so just letting you know that there is a there this is going to be mostly a backhand thing we're going to be doing for connecting to wallet because this front end is meta masks like default uh front end when you open metamask okay all right so make a new folder called context and you're going to make it inside of your source okay inside of this context I want you to hit new file and then in there we're going to put context.js all right go ahead and import use effect and we're going to put in use State and create contacts from react okay just like that and then go ahead and do import ethers from ethers because we're going to need access to that okay and let's go ahead and do export cons transaction context okay and create context so we're going to need access to all this data in our other files that's why we're creating this context here so we can do that all right we're going to create a transaction provider here which is going to take in children children is going to be the entire app and what I'm going to say is I'm going to hit return and I'm going to say transaction context context.provider and we're going to give it a value and right now we're going to leave the value kind of empty okay and we're just going to pass in children in between and make sure you have the tag saying transaction call context.provider okay that's what the tags should be saying all right let's go back yep let's go right there and in our index.js what we're going to do is let's go and do transaction Provider from dot slash contact slash context and uh we're gonna create a transaction provider in our index.js and wrap up the entire app inside of it okay that's what we're doing so make sure you put your app here transaction provider and import your transaction Provider from Context uh with that said let's go back to our context and we're gonna create we're gonna keep track of the current account and we're going to see if the current account is logged in or not okay the default state is just going to be blank empty string we're going to have a function which is going to be check if wallet is connected it's going to be an async function okay and what we're going to do is we're going to create a try catch block here and under the catch we're just going to console log the error and in the try what I want to do is I want to say hey if ethereum does not exist here and you might be wondering where is ethereum coming from we're going to get we're going to destructure ethereum from window window is a global JavaScript object that we have access to and if ethereum does not exist and return Please connect metamask that means metamask is not connected please install metamask that's what the error we want to say and then what we're going to do is we're going to create accounts and we're going to await the ethereum request and the method is eth underscore request accounts and then we want to do is we want to say if the accounts length meaning if the accounts exists then set the first account as the main account so maybe you choose five accounts the first one you chose is the one that gets chosen because we can only choose one account and then we if no accounts are found we're just going to say no accounts found let's create a use effect hook that's going to fire off every single time the page refreshes and we're just going to run this function check if wallet is connected every single time the page refreshes okay then next up what we're going to do is we're going to create a connect wallet function all right now we're going to create this connect wallet function this is going to be pretty much copy paste so honestly you can copy paste there's really just going to be very very minimal difference from this function and the other one but this is more so just a little technicality okay so you're going to be writing the same thing that you just wrote okay so nothing really new here um and then you could see that it popped up so I'll remove this from here you could see that it popped up the wallet and you can connect to it right so we can see it running we can see our um connect functions running okay let's keep going and then we're going to set the current account to zero the only difference is we're going to do a window location reload this is just to kind of catch any edge cases and make sure there are no errors happening so just put in the window.location.reload you should be fine and let's keep going okay next up what we're going to do is we're going to throw a new error if there is an error okay and we're going to say no ethereum object found okay object um okay so make sure you pass in the connect wallet to your transaction context provider because now your entire app will have access to the connect wallet function that you've made foreign so let's go back to our navbar.jsx now we're going to start using all of this stuff that we got okay so let's go ahead and use it so let's make sure that okay everything is looking good here connect wallet ah we want to not just get connect wallet but we also want to get access to the current account the the current user that's logged in so let's go ahead import transaction context from our context and let's get the use context hook as well from react and then we will use the context hook we'll pass in and we'll say hey we want to use our transaction context we created we're going to destructure our current account and connect wallet from that and then we want to wrap the entire app up in certain um in this conditional here in this turning operator okay so you want to say hey if the current account is logged in then show this otherwise showed that all right so I'm going to take essentially what is the home page I'm going to cut that bad boy and we're going to paste it in here because hey if the current account is logged in then show this okay otherwise show a button that says connect wallet okay so our connect buttons give it the styling of connect button and then on click we're going to say connect wallet all right and let's take a look at what's happening okay so let's open up our metamask here let's go to our metamask let's go to uh where it says connected let's click the collapsible Three Dots and let's disconnect okay so now that we disconnect let's refresh our page and you can see that it brings up the connect wallet again and if I remove the connect wallet you can see that there's a button right behind it all right so now I'm going to hit that next button right there and you can see I just got connected okay and basically everything that I'm doing is working okay beautiful so our check if wallet is connected fires off every single time we refresh the page so there you have it you did a fantastic job building this wallet connection so far next up we're going to shorten the addresses let's go and do that now the next thing we're going to be building is a shortener so we're going to take a big address turn it into a small one let's go ahead and do that so I've drawn this out for you here this is what it's we're going to be doing we're going to take an address it looks like this and we're going to turn it into that okay so let's go ahead and do that now so let's make a shortener and once we make that shortener then what we can do is we can actually show that user address right there otherwise this would be too big right and it wouldn't fit so let's go to where we have user address and I'm gonna change that and I'm going to go ahead and say current account okay so now you can actually see that our app is showing us this okay that's what you should be seeing right now because pulling it directly from the current account now what I want to do is let's go inside of my utils and in there I'm going to add shortenaddress.js and I'm going to say export const shorten address and it'll take in an address and here's what will what it will do okay so it'll we'll say first and then we'll create another variable called last so first we'll just take the first five uh strings so like 0x35d okay so we're gonna put that and then last is just gonna take the last four essentially okay and then we're just going to say first dot dot dot last all right so you got your first and last here let's go back and now we're going to use this URL shortener or a wallet address shortener I mean on current account let's import our bad boy shorten address and make sure you import it from the right place okay so let's just go ahead and import it from utils slash shorten address that's where we've put it and then we're just going to call our shorten address pass it our current account and we should be Gucci here we go look at that we got it right you could see it right over here and you can see that we've went from this to that beautiful so we're done with shortening stuff now we are going to work on our transaction form so the users could put in stuff and then you know be able to pay other people let's go all right now time to make our transaction form this is what you're going to be building by the end of this one okay so we're gonna be building this form now yes it looks ugly hideous but don't worry about that we're going to initially build it without styling and then we're gonna make it look pretty okay so don't worry about that I'm Gonna Leave This bad boy kind of like floating here for reference as we go through this um and yeah let's rock and roll so I'm gonna go into app.js okay and inside of here let's go ahead and um all right so I'm gonna add in transaction form here okay if you don't have man container activity container make sure you add all of these here as well okay but transaction form as I'm going to be adding now obviously it's going to give an error it says transaction is not defined so at this point you know what the error is right you know what this means if you see that error clearly you didn't import something so just go ahead start your import process we're going to go ahead and do transaction form yeah and we're going to grab it from our transaction form component that we've made now I want you to go ahead into your transaction form okay and uh all right so we have the transaction form here it should be pretty much empty let's go ahead and build it out now okay so we're gonna grab a transaction.n module.css all right so now that I've got my transaction styling let's go ahead I'm going to create a div and in here we're gonna say container okay and then we're going to grab make an H3 it's going to be form title and we're going to send payment and request it says Styles is not defined okay let me go ahead and fix that styles.form title there we go and now it's starting to show up okay so send payment slash requests next up I'm going to create a form inside of there we're going to have a form container inside of there I'm gonna have a swap container and then we're going to add in our switch vertical icon and you'll see what this so This icon is this bad boy right here okay so just keep in mind this is what we're making okay this is a target so we got a form container we have a swap container right and inside of that we have a swap Icon now we're probably going to write swap two Slash from okay so just keep remember this is our reference point okay let's go ahead and do styles.swap text and it's going to be swap two Slash from and now we can see it on our screen that's looking good okay let's keep going I'll put this here because I think this will be fine there not in the way of anything all right and then we're gonna create a form body here okay and then inside of there we're gonna add in a form input container okay and then we're going to give it an H4 and the H4 we're going to assist form input title okay and we're just gonna say two so who are you sending your money to right that's where that goes and then the next part we're going to be doing obviously is going to be this message part okay so that's going to be also an input the type is going to be text and we're going to have autocomplete false all right let's keep going for input container and I'll get rid of this and move it over and this is going to be an H4 as well form input title and we're going to say amount and we're going to have input here okay and class name for this one is going to be form input and type is going to be a number okay so once you choose a number it will give you just make sure autocomplete is off on there and instead of amount we're going to send message and instead of that we're going to change it to text okay and then underneath that we're actually going to make our amount so let's go ahead and do form footer let's give it an H4 I'm going to say footer title is amount so there we go amount is showing up now all right and then we're gonna have a div here and we're going to put a footer container and then I'm going to put an amount container div inside of there and then I'm going to put an input container inside of that okay and we want to put a icon here currency dollar icon which is this icon right there okay and then we're going to do Styles dot dollar icon so now it's showing up on the screen you should be able to see it okay I'm gonna get rid of this guy here for a second okay next up we want to make our we want to make this look a little bit better and then we want to make our send button so I'm gonna paste the same input styling except we're going to change this to a number and there we go since we added our form input styling it fixed it and made it wider I'll hide myself here all right so now I've changed it to a number and then what I want to do is I want to create a button and this button is going to be sent okay and we're going to make it a send button that's the styling I'm going to give it okay now it's looking much better make it type submit and when it comes to our form you know this is what it's looking like right now that's about it okay for our form so if you got to this part great job you've done an amazing job now next up we're going to be working on the activity header let's go all right next up that right there is what we're gonna be building right now the activity header okay so there's gonna be a lot of fun to build and I hope you're gonna learn a bunch of things out of this but with that said let's get to it let's start building that bad boy okay so I'll bring it right over here so you could have like a frame of reference here as we build it and let's go so I'm gonna go into my app.js and I'm gonna hit import activity okay and then let's open up our tabs here and in files you can see I have a folder called activity and then I have activity card okay so let's go ahead and import that so I'm going to go ahead import activity card from dot slash components activity activity card okay all right so now it's been imported and now we're gonna start building this out right over here close everything out all right so I'm gonna pop in my activity card here okay pretty soon it will actually start showing up and I'll leave it just here as a reference so let's go into our activity card and now we're going to build it out from scratch okay so let's go ahead and import styles from Styles and activity module.css okay make sure you do dot dot slash dot dot because we have to go back out to directories okay then we're going to return a container and then inside of that div we're going to have another div and just going to be a tab container okay and then in there we're going to put a P tag and we're going to have a tab title activity so that's going to be this part right over here where it says activity okay so boom right there it's showing up okay after activity we want to add a new class name and we're going to do Styles dot navigation container okay inside of that we're going to add in navigation item and then we're going to do data Dash current so just so you understand what this data.current is that this is how it will give it this active styling over here okay so that's how we do that all right let's keep going I'm gonna make a globe icon let's go ahead and import it from the top it's a globe icon from here icon slash react slash outline and then we're gonna go and do styles.navigation icon okay just like this and then let's create another div here we're going to give it a class name and I'm going to say navigation item and in here we're going to put a user icon and just so you know what this icon will be it'll be this icon right over here right Globe icon is this guy here user icon is that guy okay so once we add in that icon let's go ahead and we're going to add another navigation item and this one is going to be a user group icon the third icon all right and you could see all of these being added here okay so let's go ahead and boom it's showing up that's great let's go all the way at the bottom we're going to add another div and for this I'm going to give it a Styles and say feed list okay let's go to our index.js and here I'm going to remove import from index CSS so I'm going to remove the global styling that we were doing everywhere and I'm going to change that and we're going to go ahead and say go into our Styles and grab our global.css so now when we do that boom look at that the entire app styling is looking beautiful our form is looking beautiful so that Global styling there fixed almost everything okay so now in a full screen it look at how much better that looks right it's beautiful and like our Target that we had here is matching what we've built there so with that said we are done with this activity header part great freaking job and next up we're going to work on our transactions let's go quick thing that I want to highlight earlier when we created that send button the problem that was happening with that was it was like overflowing and doing all kinds of weird stuff so I just need you to go in your Styles and go into your transaction Styles transactions.module.css and we're just going to change something inside of our container so here uh for our container we're just gonna make the width 400 pixels okay if you didn't have that already change it to 400 pixels and then you shouldn't have any problems whatsoever you should be good to go okay all right let's keep on going now so now our button looks really good our send button looks awesome no problems anymore okay let's now go to our context and get to work on setting up our smart contract that's the big main thing that we need to do now okay so we're gonna keep track of some states so let's just Define all of those here so the to address we're going to keep track of that state the amount we're going to keep track of that state as well all right so we're going to keep track of this amount State obviously right let's keep going yeah default it to zero because it's an amount it's a number it's not a string so we're not going to have it empty message we're going to leave the message blank to start off with okay we're going to keep track of our loading State and obviously in the start it's false it's not loading and uh we're gonna keep track of our transaction count because we want to know how many transactions we have okay and um yep and by default we're not going to set it to zero or anything by default what we're actually going to do is we're going to pull it from local storage okay so that is a very clean way of doing it we're going to pull it from local storage uh so when a page refreshes or whatever by default we're going to pull it from local storage and then otherwise we're going to pull it dynamically okay now what we want to do is let's go down and we're going to check if transaction exists we're going to create this function and this is really a getter and Setter function that we're making here okay so let me write that down here it's going to be a getter and Setter function and what this function will really do is we want to get a transaction count so okay so this is gonna here's another way of saying this right get and set transaction count that's what this function really does so what we want to do is we want to get the transaction count and once we get it we want to set it in our local storage okay now where are we getting this transaction count from we're going to be getting this transaction count right from our back end our blockchain smart contract part all right so that's what we're that's what's really happening here okay so let's keep going with this function check if transaction exists we're going to go async on this bad boy and it's going to be a try catch and we're going to say hey if we have ethereum meaning if uh you know so this is saying if you have metamask installed then go ahead and do the following then we're going to go ahead and create transaction contract and we're going to create the ethereum contract now this is going to be a helper function we'll create in a second so don't worry when it gives you an error don't freak out not a big problem so let's go ahead and actually create this ethereum contract function now and really this is just a boilerplate code for connecting a smart contract that you've made on the blockchain side to your front end so versus doing that connection part right now okay so let's go ahead and I'm going to set our provider and we're going to choose the metamask as our provider so we're going to say ethereum then we're going to get our signer and this is going to be our provider.getsigner so this is whoever's signing the contract meaning like the logged in user the metamask and then what we want to do is we want to get the transactions contract okay and so let's go to ether's contract and we need to give it our contract address okay we need to give it our contract address and we need to give it our contract API and we need to give it our signer and then we're going to return this transactions contract okay so now contract address and contract ABI those are things that we're going to go ahead and set it up so let's go and get uh on line three let's go ahead and import contract address from utils constants and then we're also going to go ahead and get let's go to our um let's see where we're at let's go to build so we're going to our backend blockchain part let's go to build and let's go to transaction and let's copy that so what we've copied here all right so what we've just copied is all of all of the contents inside of that transactions file okay so uh we're just going to create that same file inside of here okay so let's go and now paste all of that boom there we go so now that I've pasted it so just copy uh click right click on noodles right and you're just going to hit paste it's gonna paste the transactions.json that we copied over earlier let's go to our constant.js and we're gonna go ahead and say export const contract address so we get access to this and then we're gonna do the re the following okay we're also going to import ABI inside of here from our transactions.json and we're going to export our API our contract API so we have access to it in our other files so make sure you do abi.abi at the end let's go to our uh let's go to our context okay and inside of there let's pull contract address and contract ABI and now let's scroll down to our check if transaction exist function and here we're going to do the following okay let's go ahead and do current transaction count and we're going to await this and I'm going to say transaction contract uh transaction count okay or sorry dot get transaction count rather okay this is the function that we have on the blockchain side so I can show you that let's go to our back end let's go to our contracts let's go to our transactions here and boom you can see our get transaction count all right so we got the transaction count on our back end right that's what we're interfacing from our front end so that's freaking exciting because we're literally going from our front end going to our blockchain part using the blockchain solidity function to get the data retrieving that and then putting it out on the front end I mean I don't know that is pretty freaking cool like that's super super exciting right so that's why the away promise needs to happen because we're doing a bunch of stuff asynchronously here and then once we pull that bad boy we're gonna go ahead and in our local storage we're gonna set that item and we're going to say transaction count all right so now we got our current transaction count okay so we have a current transaction count which is we get our account first so then current transaction count becomes a number like let's say eight or something and then we on line 70 right we set in our local storage and we set the key with transaction count and we said the value to that okay so whatever that may be eight or five or whatever however many transactions have happened okay and uh that's looking really really solid to me okay and then now let's go to our you know use effect hook that we created earlier where we added check if wallet is connected now let's go ahead and add check if transactions exist so basically anytime we Refresh on our page that function should fire off and work and you could also you know check in your console log what it's returning and it'll show you it's returning like a number okay however many transactions you have like three or four or five or whatever okay so with that said um now the last part that we want to add to this is we want to fire off this use effect hook every single time transaction count changes and the cool part about this is whenever there's a new edition a new transaction that occurs your page will automatically refresh and show that transaction okay so that's what's happening great job on that now the next thing that we're gonna add is the ability to send money send ethereum let's get to it all right time to send some money so let's get into it okay so let's go and add the ability to be able to send money okay this is going to be important and when I said money I mean ethereum so let's create a function we'll call it send transaction async okay and um here's what we're gonna do we're going to add a try catch block here and if it's an error then obviously just show an error okay if it's not an error then try all right so here I'm gonna say hey if metamask is installed then I want you to go ahead and add in this transaction contract and create it okay so we're just going to create the transaction contract and then what I want to do is I want to have a parsed amount here okay and we're gonna do it with ether's utils and I'm going to parse the ether and I'm going to parse the amount that was passed so if the user gave us a certain amount we're just going to pass it in here so that utils up parse ether amount what that's really doing is if I go here online to a eth dash convert so just go to eat that can eat Dash converter.com and here if I put in like a small amount of eth like 0.001 it'll convert it to whey so it'll convert it to whatever way that is okay so that's really what that function is doing okay because remember there's no floating amounts there's only integers then I'm going to request so I'm going to wait ethereum or metamask in this case and method is going to be send transaction and we're going to give it params params is going to be an array of object in this case and we're gonna say we're gonna give it a from address all right so here we go right so we put our gas just for gas just put 0x52 all right so this basically right here 0x528 is just a short nice way of saying something like hey I'm I want to pay like 21 000 way or whatever in gas to just cover some basic amount of gas okay that's really what it is and then just choose value parse them out so we got our from which is a current account which is this bad boy right here that's logged in the 2 is going to be whoever fills out the form or like whoever we're sending it to for the form uh we have we're just gonna pay this amount of gas every single time the value is going to be the parsed amount and then we're going to turn it into hex all right so that just converts it to a hexadecimal that's it but we don't really need to worry too much about it we're going to create a transaction hash and that's going to be from the transactions transaction contract and we're going to do dot add to blockchain okay so basically you know that's where we're doing you know Trend uh send transaction okay that's really what we're doing and we're going to pass in our address to our parsed amount our message and then yeah that's pretty good okay those are all of the things that we're going to send then we're going to set is loading to True while that's sending and then we can say loading and then we're going to put a transaction hash all right now what we want to do is we want to await the transaction hash here and just do transaction hash.weight and then once we're done with that we're going to assist success transaction hash and then we want to set the loading to false because loading is done we were none waiting for it and transaction count at the end is going to be updated so now we're going to going to get the updated transaction count okay and then once we get that we're going to set the transaction count to whatever the new transaction count is and we're going to convert that into a number so it comes as like a big int or a big number so we just cast Typecast to like a regular number and then we're fine and then we're just going to do this window location reload thing to make our app more robust and then we're going to add an else here and I want to say you know if that doesn't work then No ethereum Object okay meaning like no matter mask or whatever and it doesn't work cool with that said we are done adding that send functionality now it's really just adding in the UI the beautiful front end for the form everything is ready to go and then we should be able to send money and see everything okay let's go ahead and do that now all right now the functionality we're going to add is really where we add real functionality to the form meaning that when you actually put in an address and you put in a message and you put an amount it will actually open up metamask and then ask for you to confirm and then you're actually able to send the transaction so that is the functionality that we will now add with that said let's get into it so let's get started from where we had left off we created our send transaction function now all we need to do is make sure that in our context we actually pass it so our the rest of our app has access to send transaction function so go ahead and do that and then I'm going to go into my transaction form and inside of my transaction form we're going to use our use context hook and get access to the transaction context and I'm going to destructure send transaction function from there set address to address to and set amount hook okay and the amount hook and message set message Etc right so we we're just going to get access to kind of all of that stuff and we need to send that stuff over too so just make sure you copy all of that and you paste it here so you want to make sure that in your contacts you're actually passing all of that information right the set address to hook the address to set amount hook amount State message set message all of that okay so we're going to go ahead and do that okay cool now that we're doing this let's go ahead and make sure that we write our handle submit function okay and in this we're going to take the event okay and the first thing we're going to do is prevent default and what that does is it makes sure that you don't refresh the page doesn't refresh once you hit submit and we're going to say hey if the address doesn't exist or amount doesn't exist all right so we're gonna say if none of these exist then just do nothing okay just ignore that okay we only want this to work if those exist and so basically this is like a guard Clause that we're adding here and then uh if none of those are true then obviously we're going to send the transaction okay so the transaction is going to send when these things exist okay and then we're just gonna for the input um for our Forum title we're just going to say value uh is the address to okay so that's the address to right here and we're going to say on change we're going to set the address to whatever you're typing in the two and then we're going to do the same thing for our message and then we're going to do the same thing for our amounts right now we're working on our message okay value on change same idea and then we're going to do the same thing for amount it's going to be literally the same pattern okay so let's go ahead and do that for amount on change set amount Target value okay good good old react stuff and if you're wondering yes yes my hair did change okay I went to get a haircut in between the shoot so shout out haircut gang if you saw this you know not most people will make it to this part but if you're one of the lucky few good job all right let's keep going let's wrap up this entire bad boy that we have written in a form and we're gonna add a handle submit to that form okay so the handles the function essentially that we created right here so this form is going to be looking for when you press that juicy send button when you send that send button when you send that send button I'm into so when you click that send button your send transaction or whatever function will handle submit function is going to run okay but let me ask you is it going to run right now that this is empty I'll give you four seconds to answer that four three two one no it will not well the function will run but it won't send the transaction right because there's nothing here so that won't happen but if you have all of these filled out and then you hit send will it run I'll give you four seconds to answer that four three two one hopefully said yes and yes if you have it filled out it will send so let's keep on rocking and rolling here and let's open up our console on the right hand side okay and then we're gonna go to our code um just on change with the capital c okay so that that's where the error was coming from so just make sure it's a Capital C that you have cool all right now it looks like it's working now let's go ahead and type in our to address ignore my dog she's a little baby bulldog she's wild all right there we go we got our two address sometimes you know I order ubereats they show up at the door to drop the food and then she just starts barking and I'm sick and tired of having to edit that out so you guys are just Gonna Hear What I Hear at my house every day so if you got to this dog barking part feel free to comment that as well and um yeah let's write our message have a great day and we're gonna put in some amount and we're gonna hit send and now notice it is opening up Madame mask how beautiful is that let's hit confirm there we go metamask is popping up I will make myself tiny here so you can see confirm boom look at that and the loading transaction hash is showing up to that is nice right that was real clean and there the transaction has taken place right and if we go to the other account or resent this money it looks like we got the eth so we are now able to send money I mean 99.9 of the functionality of our venmo app is complete you know functionality wise but now we still gotta make sure that we render the recent activity and we show all that stuff so I hope this was exciting to you I hope this enlightened you and with that said let's keep on rocking and rolling next up the component we're going to make is this guy right over here okay this is going to be your recent activity slash recent transactions component so you know what who's making the recent uh transactions right this is what you see on venmo as well so let's go ahead and work on that component now get rid of this here and let's go I'm going to pop this in the purple thing in the back is not really what you're actually going to be adding okay that's just like interesting looking padding that I added but this is the part that you're actually going to be building yeah I just wanted to make sure like I want money to just make it stand out Okay cool so let's go ahead and work on this now all right let's go into our activitycard.jsx and inside of my activity card let's go and import my contacts from react and then the next thing I want to do is I'm going to get my transaction context from my context file will get shortened address from utils okay it's gonna be slash util slash shorten address yep just like that and then we're going to uh pull transactions and current account from our context let's go and get all transactions inside of our context let's go and get all of the transactions so it's going to be async it's going to be a try catch here we're going to console log the error and then we're going to say hey if metamask is installed I want you to create the transaction contract and we're going to create the ethereum contract once that's done we're going to get the transactions okay so we're going to say const available transactions and we're just going to await the transaction contract and we're going to call the get all transactions function which is on our back end okay so in our blockchain part so if we go to our transactions.sol you can see we have get all transactions right there and it's a view function and it Returns the transactions we're gonna say get us these structured transactions all right so basically structured transactions all we're doing is we're transforming the data that we're getting and so I'll kind of explain to you what I mean by that right let's go ahead and write this um okay so we are now just going to pull our address to from there this is the um transaction receiver okay that's the who we're sending it to okay uh next up we're going to get our address from and that's a transaction sender and then we have our amount or actually in this case let's just do our time stamp and uh let's call our time ago that we got imported or added earlier all right and we're gonna say dot format okay and I'm going to create a new date in here and we're just going to put in the transaction okay dot timestamp so each transaction will have a timestamp from the blockchain and I believe the blockchain puts their transactions in Unix all right so all right so there we go you heard that confirmation in there uh our developer confirmed with us that it is UNIX our developer being your boy Kevin and basically if you pass it that Unix right and you give it as a number and uh we pass it to new date all right so what what the what the multiplied by a thousand Shenanigans is because you're getting a you okay here it's annoying you don't really need to worry about it but I'll tell you anyways you're getting Unix in milliseconds so in order to turn it into Unix in seconds you multiply that bad boy by a thousand now it turns into Unix seconds you give the unit seconds to your new date time object it turns it into a daytime object then you call time ago format on that daytime object and it knows how to turn it into a time ago naturally you know written language kind of like here where you're seeing uh you know 23 minutes right there or 31 seconds right there that's what time ago does oh okay there we go all right so we're gonna say comma mini here all right the mini is a time ago thing so you can give it mini so that means that it's in instead of minutes or mins it's going to say m or s for seconds okay there we go and then message we will call it transaction.message okay so now that it's uh restructured like this or AKA transformed you won't have to Loop through and go transaction dot receiver transaction.sender you can actually just Loop through and go dot address to dot address from dot timestamp so it'll be much cleaner so your code won't look like transaction.transaction.receiver pass in your amount will parse ins and we will give it the transaction amount in HEX and we will divide it by 10 to the power of 18. so if you're looking at this and you're like what kind of ninjutsu garbage is this um I'll explain real quick we are going my friend from way this is like the ugly stuff about blockchain I don't know why they do all this trash like this development experience is going to get better at some point but that's what it is right now it's in way and we're converting it to eth so remember when we went from like a really tiny 0.002 number and return it to like a 10 billion way number when we went to eat dashconverter.com well now for the front end we got to go from way back into eth and show it to the user okay so we're reversing that all right hope that makes sense okay let's keep on rocking and rolling all right and then we're gonna import time ago from JavaScript time ago and we will also import en from Joshua time ago Locale okay and then we're going to add that Locale to the time ago and we'll say time ago and we'll make it a uh enus okay so then it'll look like American time zones okay um and time ago if you're looking for it right in your package.json we have it either added and if we don't have it added we can just go ahead and install it now okay so in our command line we're going to go ahead and say npmi and we're going to go ahead and say JavaScript and just do Dash time ago beautiful hit enter and now it will install it all right so basically now guys we have it installed okay and once it's installed your time ago is going to work okay let's keep on going through this all right let's go down and we're going to add our set Trend we use our set transactions hook that we got earlier or actually let's define it here so I'm going to say transactions and set transactions and in the start is going to be an empty array okay it's going to be an empty array and then what we're going to do is we're going to set the transactions to structured transactions uh and else we're going to say No ethereum Object okay and in our context provider make sure you also export this value so we're going to say transactions let's pass it to our app so we have access to transactions everywhere else in the app now inside of our activity card you can see that we're extracting transactions all right guys so there we go okay so now transactions will make more sense right because we're pulling it out because we actually have access to it and now this feed list that we have inside of that feed list we're going to all right so we're going to go ahead and do transactions.nap and now we just want to Loop through and render those transactions out this is like mainly the front end part here okay so we're gonna go ahead and destructure an ID and address from our timestamp our message our address from all right so we destructured all of this stuff id address from timestamp message address to Etc um and then we're going to also get the index okay okay so we got this right now We're looping through this and now let's go and render this out so I'm going to do an implicit return here right arrow and then parentheses is an implicit return okay so there we go now class name so key is going to be the index right that's why we pull the index when we were looping and then we want to give it a class name a feed item for this here class name here we're going to give it a styles.avatar container okay and we're going to give it an image and it's going to be an avatar image and for Source we're going to Generate random Avatar all right guys so now you know Generate random Avatar obviously doesn't exist but we're gonna go ahead and uh create that now so let's go ahead and do Generate random Avatar and this function it's going to work in the following way we're going to say random Avatar and I'm going to randomly pick a number between one and a thousand okay I'm going to be using this as my seed number and we're gonna use this diespare API which is very nice okay and um we're going to pop in the random Avatar that's how we're getting this by the way this is using the uh dyspare API okay that's how we're getting all of this and how it works is you give it a random seed so we're just going to give it a random Avatar plus current account and we're gonna say um dot SVG at the end of it okay and um there we go all right so now it will generate a random Avatar every single time and make sure we're gonna create another div and this one is going to be feed details so the point of this is so we can actually see the details part okay so here we have uh you know this this uh feed details is going to be obviously the details part that we're going to be adding to this okay okay and then we're gonna have e a feed author that's where we're going to put the wallet and shortened address so there we go we got the shortened address so we're going to put the shortened from address and then we're going to put the shortened to address so that will say you know from and then it'll say two okay so there we go that's very nice and then what we want to do is we want to add a span tag here and we want to do created at so this is going to be our time stamp here which is 23 minutes or 31 seconds Etc and we're going to put our timestamp there okay right here we're going to put a globe icon right next to it just like this so that's why we're doing this globe okay and let's go class name we're gonna go Styles dot feed author or sorry dot feedbody in this case actually and for the feed body we're going to add in a message so this is the message like have a great day or thanks for the ether all right perfect uh all right let's make another div and for this one I'm going to give it the feed CTA so this is going to be the call to action or these buttons like like and comment just like how we have on venmo and we're going to give it a heart icon and we're going to give it a like icon for that one and for the next one we're going to give it and just so you could see right there we go that's the heart icon so I'll leave this here so you can kind of see the heart icon and the other icon actually let's put it here why not so you can see it okay um so we got the like icon and then we got the comment icon all right let's go ahead and refresh our app let's see here actually let's go to our activity card or sorry let's go to our context here and inside of our context I'm going to go to around line 47 where in my check if wallet is connected function and we're gonna get access to all of our transactions okay so let's call that function get all transactions all right and let's just make sure I'm in a full screen and let's check here if it's pulling it through it's giving us an error it says cannot read undefined okay so hold on let's see what's going on here all right let's look for it all right so it was a tight it's actually a typo here so amount dot underscore hex it's amount dot underscore hex on line 140. so that fixed it there we go we're getting all the transactions and our transactions are showing up I mean that is nice that looks beautiful okay that looks great and you could see oh wow you could see right address from you can see address true the amount sent message and timestamp and all of that is showing up here so this is really really good so far let's go to our account one and we're gonna copy okay I'm going to paste the account two's address so we can send them the money we'll put in a message thanks for the ether there we go and we will put in some eth and let's go down and send it let's hit confirm look it says loading so you could see that right away okay let me hide myself so you can see loading right away there we go and once the loading is done we could speed it up right once the loading is done boom right there there you go now the transaction is showing up how freaking beautiful is that that is fantastic so great work on that so far that is wonderful and with that said we're done with this part at this point we're pretty much done with the entire app we're just gonna put the finishing touches and we're good to go so I'll see you in just a second all right so now we're gonna pretty much just be demoing the app but you might have noticed that I have this ad thing here now this is pretty much just react I'm not gonna go ahead and build this out it's gonna be a challenge for you to build out and add to this app if you get stuck you can always just check out to the main branch because if you did npx clever programmer right for this project you can check out the the main branch that always has the full solution right now you're on the CLI starter Branch so you are doing this from scratch yourself okay so if you can always switch there and then code um or sorry find the solution but I would say you know everything you need to know at this point to be able to put this together okay or make a ad looking thing similar to this and you should give it a try okay you already have the assets and everything like that so I'm just going to go ahead and demo the rest of the app so like let's just play around with the app right and let's just make sure that it works I'm gonna go right here I will click into account one I'll try to send some transactions over to another account let's go ahead and um refresh the page you can see the avatars changed right the logos the random generated avatars have changed we're pulling in the transactions the time stamps or the transactions are showing up I'll put in a new address here we'll put in a message and then we're going to go ahead and put in the amount let's see if it works with Emojis okay so I'll put in an emoji here ah no Emoji showed up oh well let's hit send and let's go ahead and hit confirm there we go we'll go ahead ahead and hit confirm and look at that it's loading loading loading loading right and let's see okay an account three or account two yep the money has gone and without even refreshing the page you can see that it says 26 seconds ago thanks for dinner all right so there you go that is your entire app so with that said I really really freaking hope that you enjoyed building this from scratch I hope you get to deploy it I hope you you know share in the comments that you did it I mean I'm really excited that you were able to follow along build this you should be very proud of yourself if you enjoyed this video smash that like button turn it white turn it blue depending on if you're using dark mode or light mode on your YouTube subscribe to the goddamn Channel I love your beautiful face this is Causey and as always I'll see you in the next video what's up guys in this video you'll build openc blockchain web 3.0 app with next JS this is version two of open C so this is going to be a lot more stable and we're going to be using some really cool tools to build this you don't want to miss it you're going to be using Tailwind to style this app you're gonna learn how to create your own Marketplace on the blockchain using third web we'll be connecting to the blog action Through The Cutting Edge in fura RPC nodes you definitely want this technology in your repertoire you'll then create your own nft collection and mint your very own nfts in this app you'll also be able to list and buy nfts on your own Marketplace using the third web SDK We'll add authentication to this app using metamask and the best part we'll be building this entire project using replit as our online IDE and the main benefit of it is you'll be able to follow along and guaranteed every single one of you will be able to follow along because most of the times things get lost in installation your versions are off and most people just fall off for that reason but with replit you'll be able to follow along click one button fork araple and boom you can follow along literally everything that we're doing without having to worry about something not working okay I hope you're excited because then we can work together build a project so you can add it to your portfolio and you can then go towards getting a job with that said here's one really the important thing that I need you to do if you want to build this project you want to get that job and you want to level up your career I'm going to put this link and says join.replet.com CP Dash open C that's the link it's also in description go ahead on there right now as you have this video open don't close out of this video click that right now and hit fork okay make sure you hit that fork right there because that's how we'll be able to work together and that will have already your next app reinstalled it'll already have all your dependencies installed it'll have your third web sdks installed it'll have everything that you need installed ready to rock and roll so then you can just quickly follow along with the tutorial build the app without worrying about any of the headache and you'll be good to go okay so go ahead click the link hit for create an account and then boom you're ready to go follow alongs on one tab then you'll have your replit the other tab you'll be coding along with my YouTube video so with that said I hope you're excited smash the like button and let's go right into the video what is up YouTube It's Lance a couple hours from the future and I just wanted to take the time time to showcase the beautiful app that we'll be making together so as you can see this is the connect metamask button and once you click it you'll be prompted to connect your wallet and if I hit next here and then I hit connect bam we're instantly into the app that we'll be making so if you take a look down these are all the crypto punks available in our Marketplace together and guess what these are real nfts that live on the blockchain if I were to click any one of them like say this one I get directed to a dynamic page with all the information in the URL right if I go back and I click on another one let's click the clown one look at that generates a unique URL for every nft you create so it's dynamic as well then now for my favorite part I can click this buy now and it's for .02 e if I click buy now look at that I'm buying it for literally what I listed it as so get excited guys if I were to hit confirm there we go I can just check my metamask account you can see that it's pending and there we go and now it's done pending so that means the transaction was confirmed I lost 0.02 eth meaning we were able to purchase these nfts here and if I were to go back you give your app a second look at that the clown one that we just bought is removed from the marketplace as it should so do you guys want to learn how to build your very own Marketplace I know I would let's get to the video so to get started we're going to be using replit.com for this and if you're unfamiliar all replied is it's an inbrowser IDE where you can write code in one thing that makes replicate unique is that it's online so anything that can connect to a web browser for example your phone and tablet you can write code in right another the cool thing that I like about replit is that you can manage your environment so any node.js libraries you're missing you can use replica to manage that as well one thing I want to add to that I like is that once you're done with your project all you need to do is do one click and you can make it public and shareable to all your friends like I always say so without further Ado all you need to do to sign up is go ahead and click on the link provided over here and sign up for an account I already have an account so I'm going to click log in and once you click that link and make an account you should be directed to that GitHub Rebel awesome so you should see this page right here and it should say opencv2 YouTube what you want to do is just click Fork Ripple what this does is essentially clones the current Rebel and adds it to your account alright so now I should have a Ripple myself okay there you go it's up and loading and you should be greeted by this long readme and that's because now you guys have the starter next JS app already set up for you guys so the cool part is if you go to package.json you'll see that you don't have to install any packages yourself right so you could do this all manually but because you forked a rebel all this is right here the only thing that you'll need to do is hop over to the shell and just type in the command yarn to install all the packages that are here and we should be seeing some node modules come up boom so once that's done we should have all the modules that we need and we should be able to do a yarn dip so I'm just going to go ahead and clear my terminal you can do that by clicking this trash can right here and we should be good to go all right so let's type in yarn Dev to see our project cool and let it compile and boom just like any other IDE we can load and preview our project right here so you can see welcome to next.js so if you did want to edit what we have so far I would just go to index and just to show you guys it still all works the same if I go to next.js here change this to clever programmer boom it gets updated and we see welcome to clever programmer so that's the setup for replit I'm gonna go ahead and get started on setting up a third web so we'll be back in this in a second all right so as mentioned before we are going to be using third web for this project so go ahead and go to your browser and type in thirdweb.com cleverprogrammer so you press enter and now you're gonna see this screen where it's going to say connect your wallet so if you didn't know we're going to be using metamask for this as well and if you haven't already I'm going to show you guys how to set up metamask okay so one of the first things is metamask works really well with chrome so if you're not on a Chrome browser go ahead and switch to it now and then come back cool you're here awesome so now that you're here to just get started you can type in metamask Google Chrome extension all right you don't have to type in this whole thing whatever you type that gets you to this specific page you should be good to go right because metamask for those of you who are unfamiliar metamask is a wallet where you can store all your cryptocurrencies it works really well with ethereum at the moment so make sure you have it installed I already have it installed and as you can see here it's going to ask for a password so if I type in my password boom I'm already logged in so as you can see I'm already logged in and for you guys you're gonna notice that you're probably going to be on ethereum mainnet when you first make your metamask account this is the main Network for ethereum so you're going to be using real ethereum if you connect to here so if you look I click this I don't have any real ethereum so I'm going to say zero right if you're developing on this you want to be using their test Network right so specifically we're going to be using rinket B so if you don't see Rin could be here what you're going to need to do is click on this little circle here and scroll to settings and you're going to see a tab called Advanced and once you get to Advanced just scroll all the way down to see show test networks make sure this is on and then you should be able to click this drop right hit save exit out click this drop down then you are officially on the rinka bead test now and as you can see I already have some ethereum on here so if you're wondering all right Lance we're on bring could be testnet how can I start get started with this wallet and start getting ethereum what you can do is copy this link right faucets dot chain dot link slash rinkaby right because like you said like you saw we're on the rink of B test net and you want to be sending your wallet if it's on test ethereum so what you can do is make sure while it's connected usually it asks so it's c o or zero X1 is connected let's click metamask is that the same one yes it is so make sure your wallet address is connected I don't need any test link I just need eth click I'm not a robot right so let's remember how much eth I have right now 0.42 all right let's send request okay waiting for confirmation okay cool request complete 0.1 eth was sent to my account because we're on the test net you can send yourself an unlimited amount of Youth and I recommend you do this about like five to seven times just so you don't have to come back to the faucet later especially when you're testing okay so I'm gonna hit close and now if I check my balance on my wallet I have 0.52 each now Okay cool so what I'm going to do now is do this a couple times and I'll come back when I have a couple eats to spend okay so I was able to just do this one more time it takes a little bit to get eighth so I'm going to stop for now and then if I need more I'll come back and get some more later alright so once that's done you have metamask now you have some ethereum you can connect your wallet so I'm going to say connect and click the wall of your choice and again we're using metamask so cool you'll get this little notification and basically just sign saying that you're okay with connecting to third web with metamask and now we can get started and before I move on I want to talk about third web just a little bit and you've seen us use Thurber before but if you weren't there for those videos third web is essentially a software that helps you build manage and create projects easily so if you remember our previous videos we had to create some of our smart contracts ourselves but with third web it does a lot of the heavy lifting for you and I highly recommend this to beginners because look how simple it is to create a smart contract right I'm going to show you you click deploy a new contract and over here you can see a list of prebuilt contracts like I said there's a bunch of prebuilt contracts so depending on what you want to do it's going to help you set it up so for example what we're going to be focusing on to day is the nft collection right so we're going to be able to create a one of one collection of one of one nfts for example if you think of board API club or crypto punks we're gonna be essentially I'm going to be showing you guys how to make your own collection another thing that's important that we want to show off with this build is we're going to be making our very own marketplace right with the marketplace we can set up you can set up listings we can set up auctions to buy and sell your nfts and it's going to be directly linked to whatever collections that we create so these are the two main things that you want to focus on so let's get started so I'm going to click the deploy now for nft collection and here we can give a name for our collection so take note of what you see here so we're making an nft collection right so the image and name is for what's the name of your collection so what I'm going to call this is I'm going to be calling this collection crypto punks is a popular nft collection and that's what we're going to be modeling it after so I think I believe it's written like punks cool and then for the image what we could do is actually you get the image from openc so I'm going to openc.io and one thing I want to mention is you don't have to make this crypto pumps I'm using crypto punks as an example to model after feel free to put your own unique nfts and use this as your own project all right so like I said let's keep going with this crypto punks cool and what we could do is right click this and save image as so I'm going to click that and again what we could do is click the folder that you want to save it on I'm going to say crypto punks Collection image right name it whatever you want I'm gonna hit save and let's see what we can do here so now that I have that saved go to where it says image upload file and just find the PATH where it is so it's right here I click open and Bam that's going to be our image for the collection all right for the description you can pretty much copy what they have here and again if you're making your own nft collection this is your chance to tell me a little bit about what it does let's see what is the symbol for crypto punks see do they have a symbol I don't think it matters too much what I'll do is just abbreviate it the symbol you can put it whatever you want and I'll put just CP for crypto pumps everything else is going to be determined like this recipient address who is going to get revenue from these assets it's going to be me because I'm creating this collection who's gonna get royalties and royalties are essentially just anytime there's a transaction made on this collection you should receive a little bit of the cut right or if you want it to be somebody else and not the one who created a collection you can change that here okay then you can put how much percentage of royalties of each transaction that will give you I'm just gonna do like 10 okay for platform fees who's going to be playing any of the platform freeze on this account you can just say the one who made it so now this part is important important because now you have to Define what Network slash chain you're working on so if I click select Network let me just exit out click select Network you can see how we can connect this to ethereum right the main net this is where all that you see on openc is right like for example board eight dot clubs on there the actual crypto pumps is on there so if you're making you're ready for production you can use the mainnet for me like I said we're just developing on the test net so I'm going to click rinkaby and I'll just hit deploy now cool so metamask is going to pop up and then it's going to say deploy proxy cool this is how much eth it's going to cost and since we're gonna test now it's gonna not gonna cost much you can go ahead and hit confirm hey let's go so we successfully deployed our smart contract for nft collection and now third web gives you this nice little dashboard where you can mint uh your new nfts right so let's say I want to make more of these guys right I can just click mint which I'll show you guys in just a second but let's take a tour so for permissions you can actually add other people onto this collection to help you mint nfts determine who create new tokens on this contract and that's what the symbol was for you can also transfer tokens on this contract and set all those permissions in terms of code right they updated their documentation here so if you wanted to do any of these things they show you the code and if you're coding in Python they also provide the equivalent there so for example I want to transfer a single nft we're going to need the snippet silk code in in our main project what we can do now is let me show you guys how to Mint more nfts into your collection very cool so setting up that collection was super easy let me just show you how easy it is to now mint unique one of one nfts so to add to this collection you're going to see this beautiful mint button let's go ahead and click it and here same as before we just have to fill out this form that third web provides us so let's say I want to make an nft and again we're modeling cryptopunks so let's click this first guy this is crypto Punk number two number 2025 so let's copy this go to dashboard and just paste that as the name right for media all we have to do is right click this guy save image and again I'm just going to save it all in my folder crypto plunks save and let's say same name let's see if it saves awesome so with that said we can upload the file and there it is so for the description you can give any description you want I don't believe they have a description you just see just created by all right that's fine let's copy that and for traits right this is the cool thing it's so easy to give your nfts traits then to setting it up manually on your own you can just say give it trades like Mohawk dark right two attributes small Shades right so we'll just give this one small Shades oh cool oh actually no it should be the other way around it should be the property is accessory accessory and I'll say small Shades because that's the accessory it has it also has other accessories like my heart dark type mail all right just for fun I'll just do a type and we'll do I don't believe this has to be all capital so let me just make it lowercase accessory and type all right cool I feel a lot better about that again you can add as much properties as you want depending on how unique you want your nft to be but once it's done you can mint to the NFC and just for the quickly you can give it advanced metadata like a background color or just an external URL so let's click mint nft there's now the little message here is mint2 you're going to see the estimated gas fees let's go ahead and hit confirm okay there you go nft minted successfully and let's see if it'll show up if I hit refresh does take a couple seconds because we are working on the test net oh there it is there it is crypto Punk number 2025 this is a description and here are the properties and notice that it's in an array of an object right of objects cool and you can also see who it's owned by and then you can transfer this to other wallets so say like I made this nft and I wanted to give it to somebody off the bat just put in their wallet address here and just hit transfer all right there's also the option to burn it if you don't need it anymore if you don't want it so there you go that's how you create an nft so what I'm going to do is create just a couple more maybe like two or three more so when we make the front end of our app you should be able to see a couple different ones okay so let's do that together let's add basically this row so I'm just going to do this guy wow this one's worth 20.24 e it's literally no joke okay cool let me hit copy same process guys we're just gonna paste this name let's also save the image while we're here this is the one before it apparently the 2024 go and I believe this is all the same that's the description of this one and just for fun let's give it a traits accessory goat I love it accessory oh this is a cool thing because we use the accessory trait before in our collection third web understands that we can just use that again so click accessory and again it doesn't have small Shades it has nerd glasses but I like the go to attribute so I'm just going to say goat and we also have type right and recognizes type which is pretty cool and no so I'm going to hit nft metamask shows up then we hit confirm and just repeat that two or three more times ham bam how sick is that we got two now we have two nfts for our crypto Punk collection and I'm just gonna go ahead and make the rest of them awesome so we have this person and it's gonna be 2023 the want to save this upload file this is 2023 it looks like we're going backwards and description it's the created by okay accessory what do they have as accessory green eye shade let's do a messy hair or actually mole that's an interesting one add row and yes this is the first female one let's do female there you go and just simply mint nft once again now one thing I want to mention while this is loading it's not only images you can upload for as media you can also do audio video HTML if you are familiar with crypto punks at all no crypto pumps if you're if you're familiar with Neo Tokyo at all that's just literally code as the nft which you will own if you purchase it you're not really just limited to just pictures or pngs cool so that's another one and while that's loading we can go ahead and set up the last one I'll do which will be oh this is different crypto pug 2046 okay there we go oops we don't have an image just yet save image as okie dokie upload file 2046 we need that created by clown eyes now that one's a unique one so accessory yes is Clan cloud blue okay let me add bro and again type female and recognize type next and we can put email and mint yeah and if you remember in our old videos third web looked a lot different that's because they updated it and basically revamped their code as well as their dashboard to give you a lot more features and make this whole process a lot more streamlined so with that we have officially four nfts in our collection and as you can see well the process for this is we'll make the collection we set up the marketplace and essentially pull all that information from third web to our application alright so that's it for minting nfts all right so let's say you want to make an nft Marketplace that hosts your nft collections right so all you have to do is come back to the dashboard and click deploy a new contract right and there's our cryptophones collection click deploy new contract and let's scroll down to the bottom and click this one that says your very own Marketplace and again if you're curious about more things that you could do that I haven't gone over you can click this learn more button and you can find out a lot more about this under documentation cool so let's go ahead and deploy now and let's create that Marketplace so here we can call it open C Clump all right because that's where we're getting it from yep open C clone and for the image I just have this CP logo here that we could use and you can just put anything for description right this is an open C column awesome and here's the platform freeze again don't need to worry about that we can go ahead and put this on the ring B test net because that's where our other collections are so I'm going to hit deploy now nice there is our metamask notification asking us to sign I'm gonna hit confirm because it's okay and boom successfully deployed contract so now again similar kind of dashboard we have the overview permissions embed code right so what we want to do is list the nfts we want to showcase on that Marketplace what that means is if you go to openc right if we go to again like crypto phones I think I was just there actually awesome but yeah so all the crypto punks over here are the ones that are listed we want to do something similar and tell third web but hey these are the nfps that I want to make available to purchase so if I click new listing here you're going to see this load and look at that of our nfts that we ever made and if you see these this is from our Tinder clone that we've made a while back so again ignore those what you really care about is these right so let's go ahead and make 224 available right and here the listing type we can put Direct in direct it means you can go directly to the buyer who if they buy it auction means you can put it up for bid and people can bid on it and obviously the biggest bid wins but we're only going to Showcase direct right now for the currency this is all the ones that it supports we can say eth and listing price we can say oh one or actually a point zero zero two e or one e okay pretty cheap but again this is on the test net and I only have so much ethereum to work with you can make this price whatever you want so just for fun I'll just do this point zero one so let's create the listing to confirm okay I'll hit confirm okay successfully created listing as you can see and again it just takes a second to show up and there it is crypto Punk 2024 and it's on our nft Marketplace called openc clone so there it is all you have to do now is put the rest of our entities on the marketplace so keep in mind this is not just for the collection as you can see I could put our Tinder nfts up here as a listing it doesn't it's not it's not exclusive to one collection so I'm gonna do the second one 2025 listing price point zero one as well and let's make a difference let's make it this one's slightly more expensive 0.05 and hit confirm and one cool thing is you can use your own custom currency right so if you wanted to use tokens to buy it we can set that up awesome another successfully created listing and notice how we didn't have to write any solidity at all or any smart contracts for that matter their web manages this and helps out with their prebuilt contract okay and while the other ones are loading I'm gonna set up the rest of them let's do this crypto Punk this one will be cost zero youth which might be confusing actually so I see we denied the cross listing price point zero three great listing the third one is created we have one more it's this one the 2023 one and this will be probably our most expensive one it's going to be 0.09 okay that was the last one and once it loads that's gonna be all the setup for third web we don't need to come back here unless you want to add more nfts to your collection or add another collection so like I said I hope this was pretty simple for you guys again this is what I recommend if you're just getting started for my beginners out there and for my more advanced developers out there you can do a lot more customizations with the code if you're more familiar with it cool so let's get to the rest of the project awesome so after that's all said and done we should be finished when it comes to the third web dashboard side of things if I ever did want to make a new nft for you guys we can just hop back onto here and just add it so what I'll do is X out anything we don't need and luckily since I saved it I'll just paste back our replit project right here cool and if you ever see this binoculars over here that just means we need to run yarn Dev again let's do yarn dip and we're back see there's a little welcome message welcome to clever programmer so like I mentioned earlier in the video we already have package.json here with all the third web dependencies to get started all we have to do is come into app and we can just start importing them okay so what I'm going to do is come at the top here and we can go ahead and import a couple of things from third web I'm going to be needing chain ID and third web provider all right I gotta make sure I spell this right third web provider there you go capital P right we need the provider because we need to wrap our app with this provider so that we can use third web in our app right chain ID is we got to specify what network we're using and if you remember we're using the Rincon B test net and pass that along to the so you're gonna see me do that in just a second we just need to write from at thirdweb Dash Dev slash react okay awesome let it compile and it should fix itself on that while it's doing that though we can wrap this in parentheses it's telling me import info is not defined which doesn't make sense because this is import so maybe just doing quick refresh is going to fix that awesome so yeah you can refresh it through here where it looks like we're good to go let's set up the provider now I'm just going to say third I'm gonna say third web provider and let's put the component in between them and I think I'm missing an e there you go awesome see no errors we're good to go oops didn't mean to click that let's uh hit refresh cool and now we can pass in that chain ID so what we want to do is hit enter a couple of times I'll press space twice and let's write this attribute called desired chain ID and what we want to put in here is the chain that we're importing from third web and we can say dot ring could be to specify the network now to get connected to the network we're gonna need to use something or a specific RPC to get connected to rinconvi right what we're going to be using is something called infuro awesome so as I was saying in order to get connected to the network we're going to be needing to set up some sort of RPC node and to do that yourself would take a lot of work on infrastructure in creating it luckily there is a service that isn't going to allow us to connect directly to the network to do that we're going to be using something called inferior so head over to this link I'm going to type in over here it's going to be infuro.io is the main website and once you head over there go ahead and connect create an account with them and once that's done let's visit the dashboard and again if you aren't familiar with it we can use inferior to connect to an ethereum Network in seconds as you can see here without creating our own RPC node which is going to save us a lot of time so to get started we're going to have to create a new project on here which is pretty simple underneath the product here is all the things that it supports so we just want to worry about ethereum and for the product name let's create one with called openc clone oops and let's hit create bam Okay cool so these are the main things these are the endpoints that we can use to connect to the network if I were to use this one for our project we'd be connected directly to the mainnet of ethereum we don't want to do that we're working on the test net and more specifically this one right here good old Rincon B so what we'd want is that first link all you need to do is hit copy right come over to not that one to here and for the third web provider pass in that endpoint so type in chain RPC do these double curly brackets and let's define this chain ID right here so chain ID dot ring could be and then let's put colon and let's put quotes here and paste in inferior API link right here luckily uh inferior runs on a freak plan so we have a bunch of calls so we don't need to worry about running out of API calls with them so let's go ahead oh we don't even have to hit refresh because there's no errors and if there's no errors we're good to go so that's going to be it for the app let's head over to the index and make some progress over there awesome so clicking index now we can get rid of all of the starter nextgi stuff so go over to line 66 and eight highlight all of that and press backspace all right as you can see we will have this right here and let's also get rid out of styles we can get rid of image and get ahead okay cool now we'll see Styles is not defined that's okay because we're going to be using Tailwind one thing that I can fix right off the bat is this div is not going to be called container I'll call it wrapper and it's not style it'll be style so if you do know Tailwind we're going to be saying con style here and this will be the style object where we can Define our classes like wrapper sounds good cool the main reason we set up the provider is so we can get started with third width so get started with third web let's import two things from there and we're gonna import all right before I get too excited I'm gonna make this smaller and let's increase the size now let's import use address oops use address and something called use metamask and this is all coming from the third web third web bash Dev slash react Yep looks like we're all good just to quickly explain these are two hooks that third web provides for us to make user authentication a lot simpler if you don't know what I'm saying right now with our app openc we want users to be able to log in using their metamask that we set up third web makes it Easy by letting us use a hook to do just that so it's better for me to just show you by writing out a button here that says connect metamask okay there's our button I can click on this nothing's gonna happen because we're going to need to make an on click before I make on click though let's make a variable and let's call it const connect with metamask and that variable is going to be set equal to the hook that we imported use metamask cool now let's add on click all right oops I'll click is actually like this and when we click we want to run connect with metamask which essentially just holds a function that lets users authenticate with just this one line of code really so let me show you what I mean by hopping over to this link right here and you're going to see connect metamask this link right here is the deployed live link of your Rebel that you can send to your friends like I always say and they can see what you've been up to so for me there is the connect metamask button if I click on it it's going to ask me to connect with minimas I'll say next connect boom so now I'm connected right how do you know I'm connected that's what this second Hook is for use address so one way to see connected is going to be you know it says connected right here right on your metamask so just for the example I'll disconnect or log out and we'll do it again after implementing this hook so we can say const address equal to use address awesome and if you want to know what addresses we can simply just console log it right here so let's cancel logit console.log address cool I'll hit refresh over here and you can see that our console log is telling us that address is undefined you can even see it over here if this is what you're used to more I could Refresh on the site I'll click inspect and I'll say console and again undefined when does that change it's going to change when I connect metamask to my app right so once I connect one of my wallets look at that it's no longer undefined it's going to be ox1c and if you remember what my wallet address is it actually starts with ox1c so that tells me that this address variable is going to be undefined until the user is log in so we could use that for Advantage to authenticate a user so that's super sick look at how much code that wrote just to authenticate user now time to show you how to put it all together cool so that was the hooks there's one trick that I want to show you and I'm going to have to go over these function based components right here so just view with react you can either do things class based or function based this is function based and one key thing is that it also just returns something called jsx which is essentially just HTML that we can write JavaScript in so with that said within this same function we can have another function right so I'm going to say const auth is equal to all right it's a function and what this is going to return is the connect metamask button so now we're removing this and putting that in here okay cool so then what are we turning for home for home just for now it's going to change it's going to be a fragment okay and then in this fragment for now let's just input hello so let's see what happens I'll hit refresh here and we should see Hello yep there it is all right even though I have auth here we're not seeing the connect metamask one that's because I'm not calling the function anywhere all right I'm going to show you guys a neat trick that you can do with something called a ternary statement okay we don't know what a ternary statement is it's essentially a true false or a condition that we can check for too we can do something called conditional rendering with that so remember address right this is going to be undefined until I logged in or in other words if I say address here I'm basically using the address as a condition if a dress exists then right that's this question mark I want to load a div here that says we are logged in okay if address doesn't exist and it's undefined which means we're not connected we should load the auth okay cool and if I load the auth what is auth it's this function right here and what does this function return it returns jsx so that's why we see connect metamask here right so if you go into the main page it said logged in because we are logged in let's actually log out now disconnect look at that the second we disconnected the connect metamask on the game so how do we log into our app this is very basic connect meta mask let's click next let's click connect and boom we're logged in on a very simple way I just showed you guys how to authenticate a user feel free to use this for any project that you have that uses metamask so now that's out of the way let's go ahead and style our object so I'm going to do is say wrapper and let's add a comma here and what we want to do for the wrapper is just going to be Flex H screen items Dash Center and a justify Dash center right we just added flexbox let's hit refresh and we gave it a centered items and justify Center that's why you'll see connect metamask is directly in the center right here so if I refresh the bigger one too you'll notice that it still has the login button over here and again it's really small because it's just like that but if I were to disconnect now you'll see the connect meta mask is in the middle yeah awesome so then what we could do next is after the on click let me just format this what I want to see now is our button have some styling right so to give our button styling let's give this a class name you can set it equal to all right style dot connect wallet button okay oh just realized this shouldn't be there let's separate cool that makes more sense now and here's that little arrow that says we're inside this button still paste boom I like that better cool and with Tailwind all we have to do is Select that class connect wallet button and then we could say I don't know BG blue for example just to show you oh BG blue and then give it a number there you go so now the background is blue so now you can see that I'm selecting this class and I'm styling it down all right so now for the actual styling of this that's just going to be rounded LG order is going to be border black order black px10 and we can say py5 you can also give this a nice transition and we'll say transition all and we'll say hover background black so stop there for a second we hover over it so you could see it turns black all right this doesn't make much sense but I can give you a little preview we're going to be adding a light and dark mode to our app so what I'm going to do next is pretty much style it as if it was one of the themes and you'll see that in a second so if I do hover text white oops now it makes a little bit more sense all right however text white and once we add a dark theme to this right I can write something like dark is hover and then I say background what so this is now you can see that it's thinking that the default theme is dark which is why we're seeing the text turn to White we can just double sure make sure as if I do red 500 here you'll see what I mean there we go cool but notice it's funny because if I remove the this dark now it's just gonna be the default right there's no theme involved so once I theme then I'll add the rest of this time with me so far awesome all right one thing I want to showcase is this real quick so let's just run through the demo once again here's our connect metamask button connect our wallet and we see this rudimentary logged in when we're connected what I want to show is if I disconnect I already have the component that's going to replace this right here so if you look in components you look into home you look into index you're going to see that there's a bunch of code already filled out the main focus of this is to show up how to make nfts and mint them and buy and sell them the front end part of this is only secondary so that's why we're okay with giving some running away if you do want to learn more about front end be sure to watch our other Builds on that topic so as you can see this is all given away it's pretty much follow the same concept that we've done before with tailwind and if you want to know what it does just mess around and calm it up but again main focus is the web 3 stuff like I said since this component's already made we can already use it so to use it since we're exporting default we can name that index anything we want so I'll say I'll call it Main and we'll say from dot dot components slash home home is not a component it's a folder and this is cool if I don't specify it's just going to take the index and what I want to happen is if there is an account connected load that very same main component yep and if you see this module not found top navbar layout that's totally normal while you're building with me because top nav bar layout doesn't exist yet alright that is something we'll make together I'm not giving that away I can't make it too easy so to fix this I'm just going to hop over to home index and let's just comment that top net bar layout and since we took out the comment we also have to remove it here and let's just comment out by doing something like this okay star forward slash and there's a closing one to this which will also be oops curly bracket forward slash okey dokey let's hit Refresh on this guy okay connect metamaskmon in on the preview that's fine what I really care about is this openc one all right so let's make this guy a little bit bigger let's do the split screen Style just like any other ID so let me just inspect element let's see what's going on here okay set refresh connect metamask totally fine set connect next boom okay awesome you're probably like whoa where did all this come from like I said this is part of that home Index right here all of that is set up it's getting static information so don't worry this isn't coming from third web it's just a placeholder for now and again if you don't for me these images aren't showing up because I need to import those assets but for you guys it should be already be there once you Fork it so don't worry about that okay so I just quickly paused it to get all the assets now all I have to do is just add them in there there's eth logo there should be a logo there should be a rap teeth logo and just in case other side Creator as well awesome so now this should show up let's refresh it and Bam bam there we go cool and if you're wondering why this is white once we have a theme that should also fix it let's take out this dark right here just make a note of that to put it back in there and actually let's go ahead and bring that back and as a temporary fix this will be fixed once we build out the app more but for now what we could do is head over to globals and let's just make the background black temporarily boom there we go so that looks a lot more accurate to what we want okay and then also temporarily what I want to do is let's go press Ctrl F find text anytime it says text let's just try to make the text white text okay this one is text Gray let's make it text oops text white Creator name and then we have a blue one that can stay blue but this one right here let's make it X Y okay there's no description container you just see it but when it does come it'll be fine verified should be blue I think this is description container that should be white actually no that could stay gray cool all right cool I think I'm okay with this for now this is a lot bit easier to read let's find where 10K items is now because that's what I want to make white as well items so we have image collection status listings oh I see now it's coming from collection stats that's right so what we can do is go to files click collection stats and now we can go looks like these are directly styled totally fine no need to worry about that cool all right that's enough styling for now with that being said that's gonna be the index of our app now that that's done what I want to do next is start start working on seeing the listing of our app right the actual functionality and start integrating what we did in the third web dashboard over here so to get started I'm going to open up files again and we're going to need to see our home that we have set up for you guys and if you take a look at home and you scroll down you're gonna notice that there's another thing that was commented out from the beginning and that was listing is what holds all the nft cards it's not the nft card component itself but it contains them so that's what we're going to be making today so what I'm going to do is if you take a look listings from listings right so that means we should make that component right here so within home let's click add a file and then we're going to say listing dot JS boom so now we have listings.js and all we have to do now is create that function based component so I can say an arrow function all right and it always returns Js X if it's a component and then from here let's just get the import set up so let me just get the divs oops not the fragment we need actual divs here I'll just make it like this for now there we go and I'll just write the word listing here so we know okay last thing in order to start using this component we need to export it so let's do an export default listings cool so we have the component set up let's head back to home and import this guy back in now it should work and now we should get our listing back okay let's take this guy out and oh expected oh cool there it is there's listings right it's all the way over there because we don't have any sort of styling for it just yet so what I'm going to do is go back to listing and we're going to be working primarily on this component itself so I'm just going to make the window a lot smaller so that you guys can see how's that okay cool now to get started let's import some hooks okay so let's import the most common hooks for react which is going to be use effect and you state I'm going to do from react okay and we also want to convert link from next link cool and here is the key hook that we want to use here it's going to be something called use Marketplace all right so you're seeing the pattern third web provides for us a bunch of hooks that make working with nfts and marketplaces a lot more easier if this is a main interest of you guys so we're going to use use Marketplace from third web and you can kind of assume what use Marketplace does it's going to allow us to get to the marketplace we've created and add it to our app okay so what we're going to want to do next is set up any hooks so the first thing I want to do is Let's Make a variable here I want to say const market place is equal to use market place and let me just show you what it console is all right anytime you're not sure what something is it's pretty smart to just want to log it and see what's up let's see something's going on here oh okay so it's we're not logged into metamask use Marketplace is not defined oh okay I see spelling capital P and we have to log back in because it looks like I logged up oh I see so it's actually not capital P should be lowercase and now we should be good all right no errors refresh for good luck and bam we're backed in there's no problem with news Marketplace awesome but I'm also console logging these Marketplace so let's see if we can see it and if you see listing here use Marketplace is undefined right that's because these Marketplace is a hook that's going to take in a contract address so let's just quickly get our open C clone this is the name of our marketplace right underneath is the contract address which is essentially where on the blockchain are contract lives so what will happen if I pass this in then I refresh Let's see we got oh we got an I8 so that's good all right so the fact that we don't have undefined is a good sign because that means let's use Marketplace is working right so in here we can find all the information that we need any functions like get all right that we might be using well there's one that we're going to need get active listings which we're not seeing just yet but let me just show you how to use this object all right so we now use Marketplace is getting this Marketplace what we can do now is make a function called get listings all right got listings is a function that I'm creating right that's going to grab the marketplace get the active listings which is going to be these guys and store it in state all right so before I start in state let's set up that function so again this is get listings I'm going to do a try catch and catch is going to take in an error and if there is an error we're going to console that logs there okay and then for to try let's do a cons list is equal to a weight which means we're going to wait for this uh function or method to finish before moving on to the next step marketplace.get active listings all right it's going to be a method within Marketplace okay no errors and then let's see if we can console log list right after cool and we're not actually running the function it you know why this is just me creating the instructions but I haven't told my computer when touring that's where the use effect is going to come in handy you don't know it's a react hook that lets you perform side effects or functions at any point during the component's life cycle basically when do you want to run a function if you want to run a function when the component loads you can use effect for that and that's pretty much what I want to do so let's set up the use effect to set up these effect it's going to look something like this and as an argument it's going to take in two parameters so we're going to take in a Anonymous function here that's the first one and this function is going to represent what do you want to do or again like what I said the side effect and for the side effect I'm going to call get listings yeah and if I'm calling get listings all right I'm going to have a second parameter that needs effect which is this array this is called the dependency module basically it says when the page first loads run this and don't run it any other time okay let's hit refresh here and there is but looks like it did log me out so let's just connect again and we're back in business that's the inspect element or console logging list oh we got an array of four right this makes me happy because now I can literally see each asset or each nft right there's four nfts this zero one is oxa right oh x a that's the actual contract address how do I know let's see if I can take a look right this is cryptopunk 224. oh there it is there's the asset the actual description of it so the name is 224. so it matches up 0 0 224. so if you see all your nfts that you minted this is a great start because the next thing I want to do is start to display them the thing is though we're not actually saving them in a state right all we're doing is console logging right so like let's say you know it's in the list but if I were to console log list out here we'd see comma outside we're going to see list is not defined did you see that that's because this is local to this function meaning I can't console log list so how do we bring it outside and into our app that's where the other hook comes in use state right so let's set up our use State I just like to set this up at the very top here I can say const array is equal to that hook okay now this array here right it's not a traditional like array that we're used to basically it's destructuring the array that comes from used it you state if you were to console log used it it's going to show you an array undefined and a function right you can take those two things out by giving it a placeholder or name so I'm going to call that first item in the array listing or listings and the function I'm going to give the name I'm going to call it set listing so let me take out this console log so we don't see any more errors and let me also initialize the state so remember how I said listings if I were to console this is undefined right let me show you listings and now if I inspect element you should see undefined for listing yep listings undefined the reason undefined is because we didn't do something called initializing our state which is going to come here so if I say number four here look at that listings has the value of four I've defined it what it's going to start at but if I were to do set listings that's how I change the four to something else maybe I want it to be a six I'll do set listings parentheses four right there's a couple of little nuances with use state but to use it properly right I want the use state to be an empty array reason being is because the type that I'm expecting this to actually be is an empty array and when we map through something it wouldn't cause any errors if the array is empty okay with me so far awesome so now listings is an array now how do we set that listing you can do that by instead of console logging a list here what if I use that function that I was talking about set list so now if I do set listings here if you look it's no longer an empty array and it might be confusing right because we were console logging in the list so why don't we just refresh it we're not console logging list anymore so we shouldn't see an array from that we should see an array right because of this line it was empty but once we ran our use effect that runs this get listings now I can call console log listings anywhere in my app cool you get the idea awesome right so if I did want to put it in my jsx I could I can map through this and make an nft card for each nft cool so that's the functionality I'm going to what I'm going to do next is let's work on the jsx what I'm going to do next is X out this console because now we have the idea and to work on the jsx let's start naming our divs right so we don't need this listing anymore we do need to get started though is our style object all right so we'll come to the top here make some space cons style is equal to object all right so now when I say style.wrapper or something like that we're not going to get any errors which is beautiful so like I just said the first div oops the first div is going to be style dot wrapper okay and let's see style that wrapper cool what I want to do with this wrapper is something like we did before and it's going to be called conditional rendering because depending on the condition I'm going to render different jsx so basically if the listings dot length is greater than zero right if I ask you guys when is the listings that length zero yep exactly you got it Joseph right when you look at this array when it first loads we had the empty array so what's the length of that it's going to be zero when is the length greater than zero that's when use effect runs our function and we load it with our four listings so basically what I'm saying is once we have our listings loaded in what do we want to do a question mark is the event what I want to do is jsx so temporarily I'll put a fragment here and I'll say oops and I'll say oops put listings here yeah just for now just to get the idea but once that's done I'll close off that parentheses and then I'll say if listings.length is zero then we can have this little loading screen so I'll say div load it okay oh and I think I still need this parenthesis here wait okay so we still need loading and let me just fix this parentheses real quick should be a quick fix it's just an extra parenthesis right here and Bam Okay cool so which one do you think is loaded put listings here or loading and if you said put listings here you'd be correct I can see it right there I can use my pen so I can show you guys there it is put listings here right that's because the listing loaded but let's see if you guys can spot the loading okay loading right right there and then put listings here that means it's a little it cool so we just have something to load while we get our listings what I want to do is obviously make this a lot nicer right we don't want this this text what I want to do is map through it all right so what I can do is put this curly bracket here and let's do a listings question mark dot map okay and then from here to use the map we need to takes in an anonymous function and now we could get started cool so carrying on if I want to make the return implied of an error function I actually don't need this one this curly bracket right here what I really need though is another parenthesis right just to match up with this one cool so now I can get started basically if you don't know what map is it's going to iterate through an array and you can give each item in that array a name so I could call it item but really each item is a listing right this is just the variable name and what I'm saying here is for every listing I'm going to make oops I'm going to make nft card component so let's see if this works out say refresh oh it wants me to connect loading nft card here nft card nft card here why do I see four nft cards here that's because there are four items in this array and for every item in the array I'm making this div right the difference now is I want to be making a component instead of a doom right so it's making a component we're gonna have to create that component so I'm not going to style it yet but I'm going to quickly set up that component by going into home clicking it and adding a new file the new file is just simply going to be called nftcard.js cool and then we set up the empty card const and ft card equal to empty array and returns jsx and you can put a div here that says ft card component all right so we know it's there and we also need to export default and ft card so that we can import it awesome that's done let's head back to the listings and let's import it all right and that's pretty much the last import NFC card from dot forward slash nft cool they should just get refreshed and the T card is not defined oh I must have spelled it wrong let's see what we got yep there's my camel case should be fine now yay okay cool we're good to go get back to that listings and we can see an ft card here but let's try now to write nft card yes so now it doesn't say nft card here it says nft card component so now again with that same logic for every listing in the array we will make nft card component so now let's build on this right to build on it what I want to happen now is let's use that link for what we're going from next and in that link it's going to take in an href that href is going to have a template literal here so basically what's going to happen is if I click that nft card I should be taking taken to a page that has that nft card on itself so if I were to go to for example let's go back to openc actually open C search up crypto punks what I want to simulate is if I were to click on an nft card we should see the nft cards page and that's what the Euro URL that we want to copy here right it's going to be assets the listings contract address and then I believe this right here is the listing ID so we're gonna copy that same structure so if you remember it's going to be slash assets slash curly bracket uh dollar sign color bracket which is a template literal and it's going to take listing right how do we get that listing in the arrays contract address well you're gonna have to call the object and do something called dot notation which is dot asset contract address which will then return the value at this key which will be something like this what is this n of T nfts contract address or in other words where does this nft live on the blockchain Okay cool so we have that we're not done yet though because there's another slash and we're going to write a template literal and how do we get the ID of the listing if you remember how we got the listings contract address listing has an attribute just called ID and now we're good and to get to that link we're going to need an a tag within in between this link here so a this is an anchor tag right we don't need to put an href on this because it's taking care with next it's going to make that page and put that nft card in there cool all right so now if I click this oops not only do we need an href here we're also going to utilize a function that's within map right anytime you map through an array and make a component or generate jsx it's going to need a unique key prop so what we could do is for another parameter in map called index it doesn't have to be called index it can be called key but basically for every listing it's going to generate a number one an increment two three four so we're going to use that to Advantage by saying the next line here key is equal to index okay that should be it now let me just test if it's clickable hey page not found but let's look at the URL all right let's make this bigger does it match up to what we want it's our website slash assets contract address and two all right that's the ID of the card we clicked and again it's going to say page not found it's because we didn't make that page yet so that's totally fine but we just know that it's set up for that okay amazing all right so there's our nft card components let's see is there anything else that I need to do no what I'm going to do is I think it doesn't really matter that much but I want to put the key at the top here cool should be the first thing I'm pretty satisfied with the functionality I'm just going to quickly add The Styling now which it's not going to take much as you saw we only made a wrapper div so that's what I'm going to write here wrapper and the wrapper is going to have marginato and it's gonna take in a grid Max with fit then we can give it a flex of one followed by a grid column dash one all right this is us formatting the listing so you can see each nft card nicely all right from there it's going to have a gap of eight gap of 8 p10 a p Tash 24 and MD grid Dash columns and I am using grid to style this listing but you could use flexbox or you could use a combination of both you could still use whatever styling fits you if you're more experienced and again this is for beginners if you don't have experience feel free to just follow what I write and in other videos I'll go more in depth of what the styling does oh the grid Dash columns Dash three whoops and then let's make extra large columns4 I could do 2XL grid columns Dash five okay cool this should be good unless I spelled anything wrong but as you can see look at our nft card component it's now in this nice row right you can imagine those cards being in there but look what happens the way I styled it it's pretty responsive if this is the width it's going to show all the components in a line if I make it smaller like this then it's going to go back into this kind of column that's the cool part about grid so that's what all this does and let me just double check is that everything I think so so cool there you have it guys that's the listing component so we're getting closer and closer to actually displaying the nft but we know that the piece of data is here so let's work on the nft card next okay so working on the nft card one thing I want to do is pass down some props to that nft card right so what do I mean you can pass down information to components or to a component's child using something called props right so if I ask you guys what is listing right you know that listing right it's inspect element listing is going to be each individual item in the array and for each individual item I will make a unique nft card that's why we see four but for every nft card I want to pass down that list basically pass down this object to the individual nft the unique nft all right so if I do something like this okay no errors I just passed down this first n of T to that first nft card I just passed down that second entity to the second nft card right so in theory if I were to go to the entity card component how can I get that listing right I can't do console.log listing let's say something like listing is undefined ready yeah listing is not defined so how do I get it so you saw me you saw me pass down the prop to the nft card I then have to I call accept the prop so to accept the prop you just have a props here and now we can cancel out that's what the parameter is for in the function based component so I say console.props shouldn't have any errors anymore it must mean to connect short loading and nft card component all right I'm also going to just comment out the listings because we get the idea let's clear up our console okay cool let's do a console and now we see a lot of objects right that's supposed to represent bam our props there it is right so there's our listing and each nft card is going to have the each you know entity so there's crypto Punk 2024 as the first object then we have cryptopunk 124 again right it's just repeating sometimes let me see you shouldn't have all 2024s ah there it is 2025 finally there's some duplicates here if I open up this one 20 25. I think it just did it three times for each but it didn't actually generate that 2046. so you get the idea it's console logging that nft card that's how you get a props but how do I get the actual uh contract adjusted each or in other words the information that I need well if you look at the object if I do something called props right dot listing right then I should just be the object let me just see inspect element all right we're breaking down this object now it's just the asset instead of an object with the listing but now we want to know I want to get to the asset okay so I'm Dot props.listing.asset there we go so now it looks a lot more clear this is the asset itself right but what if I just want the name you can dot name so this is practicing dot notation for the new people getting into uh development right it's not necessarily a blockchain thing cool so now we got all the names 24 25 46 and 23. I'd always prints it twice for some reason so if I wanted to display the name right instead of saying nft card component here what if I just take whatever in the console so I know the console log is showing it like eight times but if I put this here as a div look what happens look at that so now we're getting closer and closer to what the final product is supposed to look like which is crypto Punk and showing all of the names but what if I wanted the price well you did the same thing that price instead of name or a buyout currency whatever it is although it is going to be annoying if I have to write props.listing dot blah blah blah blah blah but we can make it shorter by taking advantage of it and doing something called the structure so let's put this back to nft card component and let me show you what I mean so if you remember in listings we destructured an array by saying const array equals use state right we can also destructure objects all right to the structure objects put the object here and then say the key name that you want to pull out so I'm going to say listing right all right that's this part here so now you're going to see that props is not defined first reason is because there is no crops object that I'm putting passing here but if I were just to remove that whole thing and just say listing the asset.name all right then refresh this for good luck connect metamask loading boom there's nft card component and we still get the name without saying prop so later on when I'm you know putting everything in its jsx form right I don't have to say prop so let me just show you what that would look like now yep so if I had multiple keys I would just destructure all of them here and again it's all personal preference but as you can see there it is and there's all the names still same thing different way many ways to do one thing I personally like this way so this is what we're gonna do so I don't need to console log anymore because I think you guys get the idea cool so now that we have props out of the way and you understand it let's go and work on our Imports which is going to be image from next image and we can also import a i outline heart from react Dash icons yeah awesome and while we're here let's make that style object so we won't get that style undefined air again set the skeleton up for it and now right we're going to write the rest of the jsx all right no hardcore functionality here just go to all front end and I'm not going to spend too much time explaining it because I want to get to the functionality that's what you're here for you clicked on this video because the blockchain cool so setting up the main div again nope there you go what I want to do is give this guy a class name nope class name is equal to style dot wrapper okay and then within that div we have another one this one is going to be oops class name keep doing that class Nami equal to style dot image container okay and in that div this is where we're going to make use of that image and in this image we want to make class name of style dot entity image but not only that we want to say the source of this image it is right we're going to make use of a listing now all right you ready listing dot asset dot image right so based on this what do you think it's going to give us right the actual image itself and we need to style it or else it's going to be varying in size but we'll say 340 that's what I have for you width is equal to 340 and ALT equals to nft cool so click connect metamask let's see if it works cross fingers crossed send valid source prop oh okay cool it's because we have to configure our next config which is totally fine okay so let me just double check let's go scroll down here go to next config and let's see what we got yep that's why so if you want to use images what we're going to have to do is tell our next app hey these images at this URL is okay so we want to say images domains and right here and I have the list that we're going to want to use all right it should be all of this boom this Google user content.com and the Gateway ipfs cdn.io so there you go so now it should be fine I'm going to head back over to the nft card page and let's see what happens and refresh okay connect my mask fingers crossed oh what it should be good to go I'm not sure what's happening let me try to reset the server so what I'll do is hit refresh here on the actual page itself yep and it's going to say can't find Ripple no problem at all you have to do a yard let it compile for a second and once you see that white screen feel comfortable doing this and we should refresh this okay connect meta mask loading okay let's go we got pictures and I like that way better than it's saying nft card so for every nft card we make that and mechanic also it's clickable and it leads to the page but again page doesn't exist yet but we're getting so much closer right I have a saying where if not out of 10 times your coding you feel like a dog but if one of the 10 times you feel like a G right then it's all worth it so I get excited when things are working or if I fix an error okay so that looks pretty good to me I'm gonna go ahead and go back to not pages to the nft card right because we're not done yet as excited as I am I wanna add some more styling to this okay so all we did was just image container and I'm acting like I won the championship but that's okay all right so we got this image container here this is the closing div for it and we can make some space and what I want to do is make another div this one I think it has the name of nft lower container all right and it has children of its own that are right over here which is div style dot info container or nft bow content okay and we're gonna have a div here this one isn't gonna have a name but what it does take though is color brackets and I'm going to say listing dot asset dot collection if there is a collection associated with this then we're gonna do and if there is a collection associated with this then we're going to load this jsx okay div class name then we'll say equal to style dot collection title right the collection that the nft is associated with then here we're gonna click in unless a listing attribute again we're listing key which is going to be listing asset question mark dot collection question mark that name so if it has an if there is an asset if there is a collection then just get the name okay then close the div and I'm going to say div over here after the parentheses curly bracket and say class name is equal to style dot nft title and this is where we did it before how do we get the name of each listing it's listing that asset that name cool and it should lead to a closing div closing div we lost the connection bam look at that crypto pump hopefully I can grab this too awesome so from there we can say div class name and this is going to be the price container so I'll say style that price container right because each nft should show how much it's worth yeah and they have a class name equal to style dot price title and we'll say bye at okay and then as a sibling of that div this one is going to be called the wrapped image container oh this should be in the code brackets style dot weth which stands for wrapped teeth image container and then image and just like before we're gonna set it up you just need to start up with a height it's gonna be way smaller in the picture because it's just the logo logo of rap teeth and source oh I still should do the width which is going to be the same with and the source is simply just going to be dot forward slash rap e type boot okay with logo dot SVG let's hope it's in the right spot and for the alt it should just be with so that's the image tag after the image tag though and say div and get this one's going to call it price value okay and listing dot buyout currency we need the buyout threats and if you're wondering how I know this is because I already looked at the object and I just looked at the properties and was like oh that's the attribute I need or the key I need at that value so uh that's how you can do it yourself so again if this token is there let's do a display right which will then have quality div closing div and a closing dip right we're not done yet at this point we want we want to make use of the an icon right I think I imported already but it's this heart AI outline heart we're going to be inserting that really soon style dot likes container right there's no actual functionality to this it's just front end and again not the main focus of this build but it does enhance and makes our project look very nice so style dot art icon all right so we're giving the react icon some styling as well and underneath you could say div this one a class name of style dot like counter right and there's a fun way we we get the amount of likes is we do a like listing dot asset stats dot favorites critical way give your question question mark zero okay so then it should be closing dip golden dip put a difficulty dip and bam that is all the jsx and now let's see how ugly or beautiful my bad it is using a relevant image yep I figured as much that's because let's see where it is in Source I mean in public use logo did something I didn't like oh okay yeah it doesn't need a DOT here it should have a leading slash and see if it works oh connect metamask fingers crossed hey and there it is there's the image she looks beautiful amazing so we gotta do last now is give this some styling so first thing I'm gonna do to get started with the styling on with Tailwind is just wrapper and then we'll say relative give it a flex box property by saying Flex say height is 150 pixels and the width of this each card is going to be 340 pixels okay give it a cursor pointer as well now after the cursor pointer let's give it a flex direction of the column and we'll say it rounded LG oh wrapper is I think wrapper is not defined okay so wrapper is defined okay let's just strange all right rounded LG and you could do background white okay Shadow LG there we go starting to see it now transition all duration Dash 300 hover shadow 2 XL and dark remember we have a theme that we change from light to dark and that's why the CSS might not look consistent because again we haven't set up the theme BG Dash #but it'll all be fixed once I finish this up so bear with me three three three three I think that's all the threes in here okay cool yeah so I took up that dark property didn't take the background white it thinks it's in dark mode so it did that okie dokie so after that let's do image container an image container all it needs is a all right three four and an overflow hit it pretty much it for image container let's reload the page all right I also want to show you too that the grid is still working oops with our app yep there we go and it's done it's you can see that still needs some spacing in between all that there we go so we'll say next is the nft image itself that we need to style it's gonna be rounded large and then let's do an object cover oh we're still looking for image you never realized yep nft image exists then we can do nft lower container and lower container is going to have Flex property and it'll be height dash one fourth Flex Direction column and give it Justified between p4 so let's check that out okay looks less cut off which is good and we got collection title okay and collection title is gonna have some small text and the text will be Gray 500 and dark like when the theme is dark the text should be Gray 400. okay nft title is going to be text sem let's get the font to build okay for our price container it'll be Flex property Flex column items and right you can see all the everything moving around here okay justify Center to Center that okay and space Dash Y dash one let me just refresh this okay it's still looking a little funky press container price title text SM for Price title actually price is still extra small and let's do font light for Price Tag and take a look at that okay still filling out the page say something okay that's I have a typo somewhere it's all good let me just see the legs container itself container should be like a container yep there is that last container it's gonna take a flex property item Center justify Dash and and space Dash X2 hope to and it will take in the heart archon remember we have this styling of this react icon that one will have oops H3 with three text Gray and b500 I remember if the the theme is dark we want the gray to be text 400. cool then we have likes counter enter and likes counter is going to have text extra small text Gray 500 again if it's light and if it's dark so obviously styling is a little strange here so let me see what I can do about that might be typing something wrong so I'm just going to double check if I missed something lower container all right yeah that's there what about info container oh okay I see the problem now I don't have nft info container that one is going to have a flex and this is where we can justify between okay cool now it's more aligned awesome and I'm not too happy with the styling just yet because this should be next to each other and that's the Wii image container and let's see oh okay yeah that'll help we should get the styling for this so let me just style that real quickly wrap teeth image container okay there you go all right and the reason why it's not lined up is because you have to give this a flex property uh let's do an item center right because now there we go that's more like it boom and now the logo is smaller because by default the line items is going to be stretch but if you do item center it's not stretched anymore so that's why it's smaller then we can do a justify and let's give it some space spacing of X2 hey okay that's a lot better and again the text ideally should be white but that is just a theme thing that we'll fix at the end other than that this should be the styling of it so it's not perfect it's not super responsive but if you put some space here this is what the demo looks like awesome there we go okay words coming together we have the nft cards in place and I think that's it for the nft card cool so what I'm going to do next is head over to pages and go into the app once again and I'm sick of not having the theme so let's just get the theme provider in there so let's import theme provider and this is going to help us switch from light mode to dark mode and the really cool part is that it comes in next theme okay next thing you want to do is take that theme proprietor and wrap that around our app as well go ahead enter here the theme provider boom and let's put that component and wrap it inside that okay cool see if that gave us any issues reading some oh that's why my terminal has died let me bring it back in here let's do a yarn depth okay and once we see it loading that's a good sign we can refresh this page and no errors yes okay so the theme provider is successfully wrapped within our app and one thing I could do is test something out now that the theme provider is there I don't have to worry about that background being white or black I can just remove this awesome cool it should just take what the system is what my system is so for example if I go to the header which was provided let me see there's something called use theme right and use theme comes from next themes the same place where the provider came from and essentially what I have set up here is the current theme is going to equal the theme right from theme provider and it's going to be if it's equal to the system then we're just going to use whatever the system theme is system theme is whatever I have set up if I'm on dark mode or not else we're gonna just check what the theme is if it doesn't equal it okay awesome so again if the current theme is dark this is the where the header stuff comes in you're gonna see that Moon icon if I click it turns to light so very cool on that end and look at that the text is now what it's supposed to be as well as this so this is a lot easier on the eyes and that's how we set up the theme provider now heading back to the home folder and going into the index right we had another thing in here called top nav bar layout I think it's time we make it so let's go ahead and make tap nav bar layout component and this component is going to come from a folder that we're gonna call layouts right so we don't have that folder just yet so we're gonna need to basically select and make a new folder but not in components preferably I just want to make a new folder alright so let's click out of that folder and say new folder and this one will call layouts cool so now we have a layouts folder and inside this layout folder now we can make top nav bar layout.js dot JS okay cool now we have the top nav bar layout JS let's make this temporarily small and then we could say function or other words cons top nav bar layout set this equal to return and I'll say div top nav bar yeah and let's also export default top bar layout and this is layout layout okay that's gonna be it for now let's try to see if we can comment it in our index of home is it supposed to be here I don't think so X this out cool so I just moved it outside over there awesome what I was saying was I wanted to go into index and I wanted to uncomment this guy all right it's back in oh I see let's quickly go out to layouts and let's make this equal to the anonymous function I think they'll be a lot more happy if I do that and going back to components home index cool so let's work on this I wanted to wrap the tap nav bar layout around the home okay awesome all right cool don't worry if it looks like that for now we're going to fix up the top nav bar layout because we need to style it so let me go back to the layout let's go ahead and click that and let's get to work okay cool so if you see this again like I said don't worry I want to show you guys what top navbar layout is doing and we can do this by opening up the main project so this is the main project right now it says Doodles here because that was the original and I'm taking the third web contract address and that's why we see this same things so that's it this is the finished build and if I were to open up vs code and let me just remove top nav barley out by commenting it out comment it out comments out the import if I hit save look what this appears over here boom so we can tell that the top nav bar layout is responsible for holding the header or at least that top part so let me just bring it back in and Bam there it's back in there okay so that tells me top nav bar has the header Okay cool so now we can exit up let's check if we have a header right if you look over here header is already done for you as I showed you guys before so this is one of the stuff that we're giving away so what we could do is just import that in here so I'll say import from components slash header slash header oops head okay so it's resolving it and here's the key here it's going to take in children right and what I want to do is call the header here let's see if it shows up that's the real test oh that's right this needs to be a fragment because it needs a parent div nice okay cool we have the open C header set up already this is just we gave to you nothing too special Mostly just front end until I click on this and look at that boom right awesomeness all right so we have light mode and dark mode set up that functionally functionality was given to you guys if you want to understand how it works like I showed you it's simply an on click on the moon icon and if we click it we set theme right we're using you state here to light and if it's light then that theme provider takes place right remember the CSS that says dark that's why we set it up so now it would change cool so definitely if you understand that or if you want to study it more you feel free to take this code and play with it and put it in your own projects so that is the header and the light in dark mode but we aren't quite finished yet one thing I wanted to do was in listing not listening sorry index top nav bar layout there's this pretty neat trick here where I pass in children I pass in children and what you could do now so that we can see the crypto punks and the all the stuff that we worked on before is say main here and then you pass in the children hope not children and look at that connect metamask is on there all right I click on this it's on there I click on this and look my page is up and running I can hit this and it switches right I think it's because I also messed with the styling so let's go ahead and continue Okay cool so if what we learned is that if I write main here I pass in and destructure children I put that children there we should be able to see our app and we have a nice header to go along with it right it's getting really close to the finished project but that is top nav barleya it's getting really close like I just said but one thing that we're missing is I can't click on an individual nft right it should lead to a page with just that image and we should be able to buy it that's the whole reason you're here you want to see how can I make my own nfts my own collection my own Marketplace and how can I go about buying them so I'm going to show you guys how to set up that page and one of the first things we will do is go to pages and what I want to do is make a new file here or actually a new folder right because with next.js you can directly make a page by writing it in here so I could say something like let's add file say lance.js all right so if I say lance.js here and then I make this a component I can say const lens equals Arrow function boom return div oops lens page so save that let's go ahead and go on to here and just add that route oh yeah export default can't forget about that I think I might actually have to be a capital oh no it doesn't have to be awesome so look at that I just made a brand new page that or route that users can go to on app so replit.co Lance will take you to the lens page and just regular react we'd have to use something called react router and set up the routes that way next.js handles that for you which is awesome so again I'm just going to delete this because we don't need it so now let's take this what I just set up to 100 and let's make a dynamic right so if this if I made a page or a file called Lance that takes me to slash Lance but if I make a folder now we're making we're essentially setting up a route for assets oops oh what is this oh we're gonna need to do this because it is a okay I see the problem now so if I make a folder I can't do the assets slash what I want to do right away I'm going to have to make an assets folder and once I make the assets folder from there I have an assets route I should have it at least let me just double check to make sure yeah there's no page found for this but I'm essentially setting up a route here remember if we click on a nft card right where the route that it takes us is slash assets slash that nfts contract address right so to emulate that or set up that route right inside this assets folder I'm going to need to make another folder right but the folder is going to be called brackets address this is how we make it Dynamic cool so bracket address but if you look there's one more thing it takes the zero here is the token ID So within that folder there we can have a file and that file is going to be token id.js and if I were to type that route right now it wouldn't work because again token ID touches isn't set up so again same way I got the Lance page working we can just set up a function based component here I can say const nft because every thing in this page is about the One Singular n of T so I can just call it content of T and make sure you return a div so I'll just make a div for now and we'll say nft page and then we want to export default nft so with that hey there we go we got nft page right we made a dynamic route so this when I go to click on that nft that I did before that first one you can see that at that route the URL is dynamic it's going to show that nfts contract address and its ID and if I were to go back and click this guy 2025 it still takes me to the nft page even though right the URL at the top is different they all lead to the same thing so we have a dynamic route but now instead of a static page we need a dynamic page so that's what we're going to be working on next okay cool cool all right so the goal to make this static nft page Dynamic is we got to set up the individual nft details and essentially get them on this page so to do that let's set up a couple Imports actually so the things I want to import are react hooks these ones use state to use effect you guys are pros at this now and react and we can import another hook right called use router this one's coming from next so next route what I plan to do with use router is you see how this already has the contract address and the ID we can basically get the ID or address from the route and use that to get that listing it's kind of it's kind of kind of interesting way more kind of smart way I'd say to get the nft that we clicked Okay cool so that's going to be explained later but we also need to get import use address and use marketplace right so this should familiar but we're going to probably make another get listing function so this comes from third web Dash Dev slash react okay cool and another thing that we're going to need is something called big number from ethers right there's something that we want to format using big number so that we can read it a lot better in our code and we're gonna get that from ethers cool so we should have ethers because it comes with the forkable Ripple that you guys did so we should be good to go awesome another thing we'll need is top nav bar layout I guess top nav bar layout because we should still see that header at the top right so to get to that route it's actually got the CD out of this folder which will take us to address which will take us to assets which will take us to the main thing and then we go to app layout and get the top nav nav bar layout oh that JS let's see if that's it happy with that am I missing something top number player from Top nav bar layout okay maybe I went one oh it's layout okay cool we're just missing the S because the folder was called layouts that makes sense cool and what I could do is wrap this whole thing and make top nav bar layout the parent div okay top bar layouts and you can take a guess what this is going to do and boom we have a header now for each nft page right so I guess the flow would be something like this I go back here I click on this first nft and we still should have the header and that makes sense okay I think the next uh I think the next smart thing to do now is let's create the skeleton of our jsx where we're going to need to make a bunch of components that make up the nft details such as an image or the info and the sales info so I'm just going to lay out the skeleton now all right so to help me plan out what we should do next or for you guys to visualize right so let's make the jsx and again if I'm making jsx I forgot we're gonna need to make our style object can't Style equals object okay so the very first child of top number Leia should be class name I guess style dot wrapper you got it Hassan okay now for loading right we're gonna say div IDE okay expected oh yeah yeah so this is again this is a ternary statement I'm getting error because I only made the if there is loading right then reload this if there isn't something called loading then what I want to do is load something else the nft image itself so let's quickly set that up just dummy data for now nft info so now the issue is that loading is not defined right yeah loading is basically just a state that I have at the top here so let's set it up by saying cons loading okay set loading is equal to use state right so the default of loading I want it to be false all right so look how it shows nft info like why do you think it shows nft info that's because if loading is false right load nft info if loading is true that means we are loading something set it to True right reason for that is because it takes a while for us to grab the information and then put it there so you don't want people to see a blank page you want to let them know that there's loading so again if you want to make it more fancy and build on top of this instead of just a div that says loading you can add like a little loading screen which we've done before Okay cool so let's fit this back to false because that's what I want so now that you get the idea of what I'm doing here it's a more conditional rendering with a ternary what I want to do next is flesh out the nft info right because it's more than just that so let's take out this give this a class name of style dot nft container because this what I want to load if we're not loading right is going to be the an effective that holds the nft okay where is the code bracket for this okay cool awesome now there's some details on the left of the container inside so let's make a div just for that that's style dot left container okay now in that left container we want the element that's in there div class name style dot left okay and within that div we have our very first component it doesn't exist yet so let me comment it out so it's going to be something like this okay and this component doesn't exist yet but it's going to be nft image all right so inside the container we'll hold the image of the nft that I clicked which should be the first one based on this cool so let's set the skeleton up okay cool so next I'm gonna come below right here and let's set up another div so if that's the nft image this one is also a left element here and inside this left element will have another component but this is not an empty image this is nft details another component that we'll have to make later but you get the idea as I flesh it out okay so closing div closing div let's have the right container set up now so we have a left container usually that means we have a right one so let's style this and call it right okay okay cool I don't know why it's like that maybe if I do this it looks a lot nicer nice in that right container another component goes in here and this one is nft basic info okay another component and a sibling inside that same div it should be in line no it's not it's going to be another one which is going to be where we can buy out fat nft so we're getting close to that buying function now we just gotta set up a page for it long name I guess inside the buyout container oops we'll have another T which is gonna be nft sales info Okay cool so after sales info that closes then we got closing div closing div how did I get here take me back to the assets sorry okay cool boom awesome so yeah this one is closed then we have closing div closing div clothing div and then this should end that jsx the JavaScript inside the jsx then we should have div then top nav bar layout awesome cool so let's see where is this error coming from it should be Style expected but got style oh it's the bio container oh there's been equals here module build failed to refresh hey okay cool if you've seen nothing that makes sense because none of the components are made what I'll do is set up the image and the nft details next now I want to set up the nft details and that's gonna be its own folder under components we have a header folder home folder let's go ahead make a new one nft okay and then within that folder we're gonna make the components from top down so the first thing will be nft image okay so let's add a file then I'll call this nft image dot Js cool so now that we're here make that smaller and let's start some imports let's get image from next image we will also get a react icon from here a i outline heart and from there we do react Dash icons slash AI boom so all those components are there set up the style object and let's also create the components let's say const nft image okay and we'll say return and we'll make that first do image goes here Okay cool so we have that component all set up now what I want to do is head over back to layouts not layout sorry into our assets token address and we can comment this guy out so let's take this here and what we could do now is import nft image so nft image from the path is really long again got the forward slash 10. forward slash component all right so now we're at the components folder so we need to get into nft details and then we can get to the N app t h okay see if it pops up oh my server might have died let me just restart it because I was AFK okay let them just hit Refresh on this type is invalid ah okay I do know one thing that I did forget I always forget this one right here needs to be export default nft hey okay image goes here right so now our nft image is all set up cool okay I just want to talk about how that this nft image should hold you know the assets that I clicked image so to do that we're gonna have to pass it down so we need to head back into that file and just temporarily and a t image let's pass down a prop and you guys don't want to pass down a prop now it's going to be image is going to be what what contains that image it should be listing which I believe we should have asks access to oh we don't Okay cool so that's that means we have to do that next okay so before I could have so much fun and get the listing we're gonna need to set up a function so remember use address and use Marketplace we're going to use that to make the get listing function again okay then we do a try catch in there just like before the only difference that you may notice is that when we are getting the listing and we're waiting for it to happen we will set loading to true all right so we'll see that loading screen happen and while it's loading we can have cons listing right a weight Marketplace and that Marketplace await space market place and Marketplace is holding the you should hold the use Marketplace which I actually need to set up so cons Marketplace it's equal to use Marketplace and it should have the address let's copy that over then we'll do cons address set that equal to use address cool kind of similar to before so now Marketplace should exist and we can get the listing so if you remember the last time we used get listing we passed in this contract address but that's the whole marketplace right we don't want to do that we just want to get the singular nft to get that we're going to need the token ID so if we go over here the token ID of this first one is going to be zero and that makes sense but we can't just pass in zero here we're going to get the direct token ID we're going to make it Dynamic otherwise every single time we're just getting the zeroth one all right to get it Dynamic that's where use router comes along okay so let's go head over to my state here and just to clean this up a bit we can put all these variables within the nft underneath the stick okay oh and forward here let's finish this up console log error sorry about that guys I don't know if you were able to pick it up from the mic but there was somebody mowing their lawn next door but where was I so we have this get listing async error All I'm gonna do is just hit refresh Okay cool so left hand side expression must be a variable or a property access all right so let's just take a look cons get listing just take up all of this and then say how about that oh yep the same thing as before lowercase b and use Marketplace lowercase b that always gets me awesome so this is good let's have async here how do you like that nice okay no more issues with that let's go back to making the function so I think I'll piss oops I'll piss the rest of this here and hit erase there cool so all I did was just put back the try catch return statement is not allowed here or return statement okay I have an extra curly bracket that might have been the error from before and let's just refresh cool there we go so now we have the get listing function it does what it did last time set loading to True which is different and then I was saying how this Marketplace get listing we want to pass the ID how do we get that ID like I said use the router so now what I want to do is go to under address or actually no it doesn't really matter where but I want to put this underneath the other hooks let's say const router equals to eu's router okay and now that we have a router here we want to query this right here and get the token ID all right and that's what this Dynamic essentially placeholder is representing so let's see if we can get it let's see const we called it token ID both capital is equal to router dot query okay and let's cancel log that token ID now cancel that log token ID inspect element you're gonna have a lot of console logs hey there you go so if I refresh just for fun boom undefined right it's undefined until the page loads we grab the token ID the token ID is zero so that's how we can use our URL here and query it so that we can pull our information that way I don't have to pass down every little thing I can just make use of our Dynamic route cool I won't have to hard code zero on here either so what we need to do next is remember that big number thing we're going to use that in the market so I'm going to say inside get listing is big number Dot from token ID okay cool and once that's done we will set the listing to be whatever we get back from this so I set listing to listing and we also want to set loading to false okay uh and again is this function running or not if I ask you guys what do you think yes or no no I just made the instructions if I wanted to run I'm going to start using the use effect to run it when the the page loads right so let's use use effect I'll say use effect here takes two parameters the function that you want to perform and also the dependency module which I only wanted to run once so we leave the dependency module empty then we can say get listing here and over here let's console log listing okay listing is not defined that's right we need to make the state for it so let's set the state so that function actually isn't doing anything let's do const Ing and set listing okay now we are all up to speed and the default should be just empty it can be undefined because I'm not expecting an array on this time so let's see the console yes there you go all right so if I hit refresh here let's run get listing um and just see if this is running console.log okay it's running okay running and now we got it right so when I console listing this is it this right here is the object of our asset so when I say listing dot asset we get this object if I say listing.asset.name it will give me the name of that crypto Punk so yeah I know what this is running now so we'll erase that we can also get rid of the console log listing and let's see what else we could do here I do want to add one more use effect okay and this use effect is going to have if there is no address if there's no address then we want to do a router dot replace and take us back to home and this is going to check every time the address changes all right so I think it took us back to home right now that's fine connect metamask uh also I can turn this to a oneliner because there's not much code in this that's why I do that you can have a onelined if statement I don't need to put the curly brackets cool let's click crypto Punk 225 address is not defined should be oh a dress with two S three S's okay connect metamask I nice cool so if the address changes we'll just get sent back to the main page and we'll probably have to click the connect metamask button again amazing Okay cool so now we got index one as we saw in the console because I clicked that asset at index one okay what we could do next let's see and our TV image is set up I think that should be fine what I want to do next is make sure we're passing it to nft image right we can say image is equal to all right what is the variable listing listing question mark if that's their asset if it has one dot image cool so we pass that down as a prop guys if you remember earlier how do we accept that prop and see it in the console exactly we're going to go back to nft detailed nft image we will then accept the prop so we can destructure it and get the key which is image then let's console log the image so let's see and hope for the best we should see the image for the first one we might not be able to tell it it's the right one the Gateway ipfs oops looks like I downloaded but we'll open it in photos I guess okay it doesn't support it right so that didn't work but there is an easy way to see this all right since we uploaded the image we can just quickly put that in here temporarily say SRC equals pinch will it load oh yeah it's going to need alt property I know I know alt equals image is missing Source property so what do you call this then very strange oh okay I guess it's because the image doesn't load right away so let me just try to wrap this in color brackets I'll say if there is an image then we should load it yeah I'll connect another mask crypto Funk 246 okay image with source must use width height okay that's fine that's better than seeing that there's no Source property so I'll just give it the height that I wanted to give it which is 448 and height of the same size are we good now metamask fine and take me to the nft yes okay cool so we saw that I click on the nft I clicked on this one and I got that image at the dynamic URL right just to prove that it's not static and I'm not lying let's click on this one 223 hey there we go so this is the basic idea what we want to do now is flush out the jsx to what it's supposed to be so the first thing I'll do is cut this out because we are going to use it later but not right now so I'm gonna say class name style dot wrap okay we got the wrapper and now we can do class name or nft header to be exact here we can have an image oops an image this is just going to hold the eth logo so we'll give it a height we'll say 20. and a width with the same length okay and then the source like I said it's the eighth logo so let's do forward slash eth Dash logo dot SVG then we got kicked out it's okay okay that's pretty good for me closing image tag and then the divs let me just get us back in there okay connect to metamask the first one cool there's the eth logo I'm pretty happy with that then another div okay this one will be called style dot likes counter or container sorry okay and then in between I want to have the AI outline heart yep we imported that just to double check then we want class name is equal to style dot heart icon okay and The Sibling for that will be div with the class name of this one is going to be likes count there's one on a sticking out oh and this one should be wrapped in curl brackets okay style dot likes cut all right this one will be hardcoded but if you guys want you can always add your own like functionality and then make this dynamic AI outline heat there you go heart kicked out boom okay nice heart 200 okay then we have closing div here stick those two together but in between that one all right I want another div and this is where our image is going to go sorry luckily I should have it pasted still yep tab so if there's an image all right if that exists and it's already loaded then load the image itself so there we go it's beautiful that's our nft page awesome okay now for some of the styling we got our boy rapper once again and he's just gonna be rounded LG I'll put a combo here give him a border and now this dark thing should start working border transparent and also a dark BG Dash hashtag 3133 now cool okay yep we're in dark mode so that makes sense why we see it then we do nft header this should have Flex as a property I Wanna Give it an item Center and then adjustify between okay I can do p dashboard cool spread that out a bit let's work on the Lex container likes next legs container that one would be Flex items Center justify and space Dash X2 likes container is not defined what do you call this it's fine okay cool Gucci let's do a heart icon and we'll do hide a five with a five text Dash gray Dash 500 and a dark text Gray and it should be 400 like we always did like we did before the heart archon we can do likes count next and likes count is just gonna have the text that is small make it like semi bold so we do font semi bold here do text Gray 500 and guess what happens if it's dark it's going to be text Gray 400. okay cool okay and I know you can't see it but once we start giving the container some color it will start to show up oh hold on this is the vs code we need this one so now we have nft image this will be rounded BG I'm sorry rounded Dash B I mean large and an object okay okay so that's gonna be it for the nft image for now let's work on the nft info and then we can do the buy functionality okay don't worry about the styling just yet it's gonna all gonna come together once we make all the nft details components what I care about right now is showing you guys how to buy nfts so to buy the entities that we've created we're gonna have to hop back into the assets page so where is Pages assets and we are back amazing so just to recap real quick we made in a t image next thing I want to make is nft sales info because this is what contains the functionality so the first thing we'll have to do is create a function on here that we can pass down so we have cons get listing but now we need to make the function to actually purchase the entity so it's const by nft and same deal async okay and when we buy energy NFC who should have a try catch block as a quick note for buy nft we're going to be using the third web use Marketplace hook once again and and I know a lot of third web makes it a lot easier for developers to get started with coding but third web is going to have and does have a lot more features that we could Implement if you wanted to take the scale even higher so I did mention an auction you can do a wait list you can do a delayed reveal so those are some features that we're going to be messing around with and you can look more into on the third webs documentation without further Ado let's just console log the error okay and then from here in the buy nft let's go ahead and await Marketplace again right Marketplace is the variable with the hook dot buy out listing right this is a method which is going to let us buy right the listing with that token ID all right and then how many do you want them to be able to buy we'll just say pass in one cool so this is our function and again it's not running just yet what I want to do next is comment out sales info and you're going to see it doesn't exist and they're right we also need to make that component then so under components empty details let's add a file nft sales info I believe nft sales info.js okie dokie now we can say a const n of T sales info equal to function then let's say return sales info okay I won't forget it this time we're gonna export default nft sales info and right back into our Pages let's go ahead and Import nft Sales info so nft sales info from dot slash dot dot forward slash dot slash components I know it's really long components slash nft sales info okay I'm gonna go ahead and refresh module can't find nft sales info interesting pretty sure I did export default module not found oh it's the folder went out of there okay cool for some reason nft card is in here right now d card should be in there let's expand this okay so that's the same okay then what's the issue here oh okay I see now it's slash component slash nft details right there's another folder in that path oh yeah and we can't just return sales info I'll put that in a div text constant does not match you HTML okay sales info all right we're good to go so with sales info we can hop back to our index sorry and not index pages on the assets and we want to pass down two things the first thing we want to pass down it needs to know how much does this nft cost so to do that I'm going to say price is going to be listing because that holds the information dot buy out currency value per token then we also want buy nft to equal the function that we just made by nft awesome so those props are passed but you're not going to see it in sales info because now we need to make use of it okay I just jumped back into sales info and and now let's destructure this is the first time you can destructure more than one thing from an object so the first one thing I want is price and then the buy nft function so just to prove to you we're getting those props that's console log price and buy nft see what we get let's hit refresh it might bring us back and it should have a price for us we will separate it first the price okay so it shouldn't be that number it should be this this display value we're gonna need to update the price so I'm gonna go back to the component yeah you just have to do one more and as like I said it's display value yep a lot of jumping around because we need to talk to the different parts of the component and Bam there you go that's the actual price that we set up way back 0.01 what I want to do next is let's set up a button in here all right by 1080 and set on click set this equal to by n of T right because we know the function exists and we should also put the price in here let me make it H2 just make it nice and big price cool so connect metamask let's buy this guy cryptopunk224 and now you can see that the price of this is 0.01 eth and let's just keep in mind our listing here let me just refresh it's been a while since I've been here cool these are our current listings if I click buy nft there it is so we have the buy functionality working and you can see here that this is saying buy right and it's going to cost how much the same as displayed and we hit confirm right shouldn't be any errors okay cool and you should see in your meta mask that this transaction went through right we lost point zero one e there you go that's the buy functionality with third web we went all the way from creating the nft to putting it on the marketplace and then buying it now so all that's really left is to make this look really nice and then demo the app so the next few parts is just front end so let's walk through that part all right so let's go ahead and create the rest of the nft sales infos jsx so let me just clean this up real quick and then this a bit and let's get our Imports out of the way the Imports that we need is we're going to import b s credit card to front fill and Bs fill tag this one's gonna come from react icons once again and the specific react icons it's from is gonna be BS my favorite one so after that we're going to import a outline question Circle then we're going to do an AI outline clock Circle okay then we can do from react icon once again and this one is the AI one I also want to import image from next image so I say from next slash image and we should be good to go from there I want to go up into this div oh set up the style object and now we can start aiming our divs so I'll give this one Styles or style dot wrapper we don't need sales info here anymore and now that you guys understand this I feel comfortable erasing it and we'll put it back when it's relevant once again so inside the rapper div we have a header dip which inside of the header div is going to be header content oops style dot header content inside header content here is where our first react icon is going to go it's going to be AI outline clock Circle and uh these changes should be showing up so I'm just going to hit refresh expression expected oh let me see is it missing a dip oh I see just close this off and then we should be good to go nice makes sense oh look at that so remember when we purchased the nft it's not going to show up on here because once it's purchased it shouldn't be in our listings right it's not available for sale anymore so that's why we only see three of these so our purchase went through I click on this there's the image and we shouldn't see sales info there but we should see the Aeon AI outline clock Circle that's what we just inserted okay then after that it's closing div time and then from here let's make another div call this one style dot main container and I actually want to give a name to this as well so this one will have style dot header icon yeah from this point on there's not much functionality left we're just going to do a lot of styling so this is going to be that main container for our app which should hold all the information next to it inside that milk the main container we're going to have price info container someone write it out style that price info container okay after price info container now we'll have a class name of this one will be a template literal special style dot gray gray text and dial right with another template literal style dot style Dot header icon all right so what I did here is use a template literal to give this div to class names one it has gray text and also has the styling of header icon and now thinking about it this actually should go inside the AI outline clock Circle right that's what you have to stylings gray text and style icon cool so what I should go here though is price info container should have the other one which is still to be literal and it's going to have the gray text style dot create text and the difference between that and the last one that I got confused on was this one has style dot medium font and I wanted to say bayat okay then after we say buy it we can separate this and we can make a price container itself okay and then within that div what I want to do is make another one specifically an image so let's use the image that we're imported and this is where I'm going to have the wrapped eth logo so let's do Source equal to slash wrapped Heath Dash logo dot SVG okay and then let's give it a width and height width is equal to 24. oh it looks like it kicked me out let me just go back in 24. height equal to 24 as well and then for the alt you could just say with all right let's go ahead and click on this guy oh it says width is not defined oh that should be a string there you go makes more sense I want to hit refresh connect metamask okay boom we should only have three and there it is all right so after the image I did want to include a span here and in that span we can do a class name dial dot price and then we could do another price right here Okay click this hey there you go so now we bought the buy at and here is the price right it's starting to come together okay and after we got the price it's gonna be two closing divs here so I'm gonna make some space in between and let's add another class here and the class that I want to add is going to be the buttons container so Styles or Styles dot buttons container within that same div let's add a div with now we're going to have the functionality to buy this nft all right so it's going to need the class name all right and I'm just going to format it like so style all right this one actually needs two so if you want to give it two class names put these back ticks over here and start writing your template literal this will have the style of Button as well as the style dot purchase button okay then I just want to hit enter right here and then I'll say on click this is where we can buy nft right so we have the buy nft function that we imported we're going to add it right here and as far as the text goes we'll use a react icon and the one I want to use is BS credit card to front fill nice so this is what we're going to use to buy and we can give the class name style dot button icon okay let's see is there anything else I need for this div oh there's is one more right next to that it's a span and the span is just gonna have class name of style dot button and style dot offer button and then we can also make an offer I'm setting this up just in case you wanted to test out the auction feature you can create your own function to make an offer or a bid for that specific listing okay let me see did I do this right oh sorry this is not make offer this should be later this should be four by now so this is by now and then in my notes here this shouldn't be just yet they should actually just have vanilla styling and it's going to be text large font semi bold all right sorry about that guys I got way too excited there should be a closing div here and then in the next one this div is the one that has the offer button so I'll just set that up right now so temp the back ticks template literal style dot dollar sign template literal style dot offer button okay so there you go so this is the div that contains the buy now button this will be the div to contain the offer or make offer button okay that makes a lot more sense to me and the icon that goes with this is going to be another BS fill with the class name okay so here is where the span goes span class name this one has the same one as the last one it's gonna have text large font semi bold and make up there we go and there you have it that's the jsx and as I was trying to explain before this is the make offer button if you did want to make it clickable you would just add an on click to this div just like how we have an unclick for this diff to bind here you can make a function called make offer okay now let's get into the styling of this app now for the styling we always start with wrapper and let's put this right here and then I'm gonna write out Flex column divide y now we can do our border here and dark divide black okay then we can do a dark rounded LG and then a dark border black okay just let me double check real quick find one Board of black border dark nice okay so that's it for wrapper moving on to header what I'll add header is going to be Flex as well let's Center those items with a line item Center then we can justify between to just put space in between the items then we can do rounded T large then we can say pix px6 py4 and then dark all right for the Dark theme BG hashtag two six two a 30. okay awesome so there's header after the header we got header content oops I wrote headed screen header content time for header content we want to flex items Center and we do space x two so let's head our icon just want to do a quick refresh just check double check okay okay so far so good after header content let's do header icon then header icon is just going to be height six with six okay this moves a little slightly and then we have some stuff that is gray text like this one so let's set that up great text it's literally just gonna hold our favorite text Gray text Gray 400. okay let me just reload yeah notice how it's like gray or gray I'm not too sure which was like the official one I know it's different in some countries so let me know in the comments below if you made it this far we've done all the functionality I'm just walking you through the rest of the front end to make our app look pretty so if you're still watching this and you're listening to me right now I can know if you leave a comment down below and you say gray and let me know which gray too like is it great with the e or do you guys say gray with a so if I see gray in the comments I know you're watching the video so shout outs to you all right after grade text let's do main container and then let's do space Dash Y dash four rounded Dash B Dash large and then we can say px6 py4 and for the Dark theme we'll have BG of hashtag three one three three three no so that should be it for main container let's work on price info now price info we're not even on that page anymore yep yep I know I know price info should have a column nice okay cool main container is looking good now and I believe it's price info container yeah I'm going to press info container that's just going to have a space Dash y1 sap c space okay cool just add a little bit of space there now we also have one for medium font yep if it has medium font we can just say one medium okay we also have a price container price container it's gonna have Flex items Center and a space of x dash two after price container let's actually style the price text3l font bold okay then we can do buttons container buttons container will be Flex space Dash x dash y nice then a button right this has a little bit or a lot more I mean button is going to have Flex with 14 REM items Dash Center cursor Dash pointer justify Dash Center and space Dash x dash four with a rounded LG py2 and a text of white that's what the button has all right we're gonna switch it up let's click on this crypto Punk and boom okay curious about this little icon but we'll keep it moving after that let's work on the purchase button and remember purchase button is the one that lets us buy the nft which is this one okay and that purchase button is just gonna have a blue background which I believe is the same as the one in openc nice so then we can make the offer button and the offer button is going to have a border black and a PG of hashtag three six three eight four zero there we go make offer and the button icon is going to be h6 with a width6 okie dokie we're getting there I love the look of these buttons right it really is just like the open C ones I am curious about this because it does look a little funny let's see all right this is our page I also just brought up the finished one crypto punks it's looking pretty close I just click on this the image is not working on this for some reason but let's see yeah we're missing the sale ends June 1st and this question mark icon so I believe that should go right here okay we can quickly make that what I could do is after the AI outline we can have a div here and this is where we can use that gray text again with the E and then after the gray text I can say sale ends June 1st 2022 at 8 20 p.m GMT this is static if you wanted to make it more Dynamic you should find a way to get the date okay cool oh and I actually think this should go in this div and just take a look okay that's looking better yeah if you're wondering why this is messed up that's because we need to get this red portion and fix it up essentially it'll look back better when I make the rest of the nft details so let's see sale ends June first I also I'm gonna need this question mark right here okay let's get that working so let's do let's do AI outline question right what is it called question Circle question Circle give this man a class name style Dot header icon there we go and this should also be in here still yeah this shouldn't be there okay now it's up there cool there should be this background here why isn't that showing up that is in header content what we got for Adder content so this should have this darker gray background let me just double check okay I think there's an extra closing div here and that closing div should go right here so take that last div at the bottom and move it to line 33 for me and it should go about here this is the closing div for the header right so why isn't the header getting styled and now the question marks over here last name oh no it says class a name here Class A my take out class name please yes all right there we go there is the header that looks way more accurate to what we want awesome right again it needs to be kind of like smushed in more like this but that's totally fine okay I'll fix it up at the end I just want to make the rest of the nft details now I think the only thing is I want this to be spaced a little bit better let's see what we're missing in the CSS foreign container P Y dash y should be P Y dash four Once that's done nice okay there we go finally that's gonna be the nft sales info right all the front end is done for that let's work on the next component let's keep it going what I'm going to do next is head over to our pages and go to assets and then go to token ID I think it's time we finally do the styling on this because I'm starting to get annoyed uh this thing is looking the way it is so what I'll do next is start styling it let's give this a wrapper all right because that's the div we set up a little bit a while ago and if I do colon here and I say comma once I give this a flex you're gonna start to see how it's gonna form okay so I hit refresh I hit this buddy again and now it's not spread out like it was before it's flexed so it's gonna line it up in a that's the default Flex Direction but once I start adding everything else in here it's going to look a lot closer to the actual finished product which I have over here okay and then click on this person this is what it should look like I know the nft image is missing but if I were to expand this look at that it's pretty responsive once it gets to this size we'll start shrinking and then it's just this if you're on mobile so let's do the CSS for this I'm gonna write it out the first thing I want to do is the height of 100 VH and we can do an mxauto and then we'll keep that flux there and we can do Max with Dash 2 XL followed by a flex column and then we can say space Dash Y dash 4 with P Y dash four cool and for our Dark theme we can say dark BG and do the hashtag I believe it's two zero two two two six afterwards there is something that we want to put for LG right when it's large we're going to have a Max width of none and also if it's large we want to do a pyo eight and last but not least when it starts again we'll do PX to 24. cool and this is the finished one let's go over here nice and centered that's the wrapper let me just line it up so now for the nft container which I believe is what it's called nft container yep we have that what I want to do is give it a display Flex text Direction column and then we can say if it's large we'll do a flex row all right it's a column until you know it's wide then it's going to be a row then we can say large space Dash X4 it works similar to when it's dark the CSS happens but when it's LG then that's CSS this Flex Direction happens okay let's do left container left container see set match yep left container and left container can have Flex column space Dash y dashboard left element then we'll have hidden and then make it block so now you should start to see a significant change with this and reset it hey it's good that we don't see it because when we do huh yeah yeah okay that's the Local Host but what about us all right we lost the title but here it is cool yeah it actually helped me realize we need to get the title backing up and running let's get the right container and for the right container we'll give it a display Flex as well Flex of one column and space Dash y dashboard alrighty after the right container we'll do the buy out container which will be Flex of one oops I keep doing that flexible okay now let's figure out where that title is should be here somewhere oh that's right it should be in basic info over here okay that's good to know so I'm no need to worry about seeing crypto punks and all this stuff just yet what I should worry about is my next component nft details what I'll do is in components nft details I like this name a lot because it's literally the folder nft details and this is the file nft details.js okay once that's made I don't want to lose this so what I'll do is get token address and put on the sidebar so now I don't have to open this and switch back and forth we can have it like so now for the nft details I'm going to do a couple Imports which is going to be g r text line left and then react Dash icon slash gr then we can import another react icon again my favorite to BS fill bookmark fill and just a heads up this component is going to have another component with inside of it so it's gonna there's gonna be one more import I'm not gonna make it yet because I want you guys to understand why I'm making in the first place so those are the react icons let's set up the style object while I'm here okay we have the empty style object then we can say const nft details and we're gonna have some hardcoded data right here so it's gonna be drop down data is equal to an array of objects right there's going to be two objects right each object represents the actual drop down so what I mean is if I go to the actual finish product if I highlight this is the first object in our drop down this is the second object in our drop down I'm going to show you guys how to make that cool and again this actually works if I click on this you can see description properties it's very Bare Bones but again I want you to take this app and take it to 11 if you understand it so for that first object you saw what the name was it's going to be description and the icon that it carries will be the oops not that gr text line left one right does that I spell it right yes I did sub close but it will take a class name of style icon and following the same pattern this will also have a title of properties like what are the properties of your nft icon BS fill bookmark fill just like that self close and give it the same class name as a book okay style tag okie dokie all right so there's that drop down data and again all of these things need a return and then when it's jsx we have the parentheses here okay for now let's say nft details as a placeholder and let's get this imported and to get it imported into our token ID page we have to export default nft details cool quickly hop over back to here that's nice and smooth we just need to import that component which will be in the same path as this so nft details from cut.orgs.org components slash nft details and Deja Vu it's going to be nft details cool I feel comfortable erasing this guy is this guy alive oh wait no that's the live one cannot resolve nft details right I'm assuming it's a typo so let's take a look details all right that makes sense let's check this path nft details let's make sure I typed the exact same I guess I spelled it wrong on the component itself but now it's all good let's just double check that okay cool hey when I make a big screen you can see it because that's what we have set up with our CSS all right so nft details is it in the right spot yes it is cool I'm getting so close guys it makes me really happy to see a build almost complete alrighty let's get back to this and now I feel comfortable giving it its actual name which is style.rapper okay we can erase nft details as the placeholder because we don't need it anymore and now what I want to happen is let's take drop down data let's make use of it oh no drop down data dot map right so remember when we map through something we're iterating through each element so how many elements are in drop down data correct Cody it's going to be two elements so if I say item I say index because I want to give each thing I render a unique index and again parentheses for jsx and since I'm using parentheses we don't need a return we'll do drop down right the component I was talking about or just for now we'll say uh drop down item oh yeah and let's fix up the map here I just do it reconnect metamask I've been clicking on 246 and again we won't see it because we got to make it bigger boom drop down item we got two all right two drop down items for two items in the array if you wanna again if you wanted to build this further I'd probably add a description that we could use later all right so let's go into oh yeah I could just go from here make this bigger I should go into nft details and let's build out the drop down component next oh actually better yet let's give this style what am I doing style is pretty easy it's just wrapper and comma here and we'll say Flex Direction column we're gonna do a divide Dash y rounded large overflow and then after the Overflow hit in let's do a border dark for our Dark theme and if it's dark we're gonna divide black and again if it's dark we're gonna do a border black as well followed by the next thing which is the icon I believe then for the icon there's not much to this one it's just the height five with five and then text Gray 600. okay Doki see if that made a difference okay cool that's the outline we expect all right it should be more like this but that's totally fine oh I see dark there we go that's more like it okay that's gonna be nft details so now if we wanted to start making drop down item I'll go back into my components make a new file and we'll say drop down.js cool and since I want to keep that whereas nft details let's also add drop down to our side panels all right so do I have two okay replace that one right so nft details or in that case drop down is in its own thing right so what is drop down if I go to the finished one it is the component that has the actual functionality of this modal right this drop down all right so luckily we have preinstalled a package for you so you don't have to install it and it's going to be called headless UI slash react so let's import and the thing that it's called it's called disclosure from at headless UI slash react okay and then there's some react icons I would like to install which is those arrows that go up and down we'll do bi Chevron up and the I Chevron down from react oops Dash icon slash bi set up the skeleton of style so we don't get Styles undefined again then we can say cons drop down is equal to right function based component I want to put in a return here and temporarily will have a drop down component so that we can see it okay going back to nft details we can import that in here so we can say import drop down from it should just be dot forward slash drop down instead of this guy I can say drop down like so see does he have any issues check the render method of nft details okay it was fine before I just didn't like the way I imported drop down that's fine so let's do import drop down from dot forward slash drop down is it like that okay it likes that better okay then I want to say drop down right here and a valid expected a string oh oh I know my kryptonite it's export default drop down right oh wait I gotta keep it consistent this should be drop down and the file okay cool this file is the same thing yes drop down component let's go okay all right so now for the fun part to get this function working alright so to get started using disclosure and getting those menus up we need to get the disclosure tag up and running all right and this is what we're essentially going to be the parent div of the drop down component and to get some functionality with it we're gonna say parentheses curly brackets open and then curly bracket parentheses arrow and then we'll say opening parentheses all right which then we're gonna need a fragment here because it needs to have a parent component and what we could say is it will have a disclosure dot button which is built into disclosure all right and for some reason it doesn't write the rest of it for me so I'll just manually write it it's fine and I'm just going to write the jsx for the drop down so this first div it's going to be called the button wrapper instead of just wrapper which then holds a dude with a class name of button left okay cool there's the closing tip for it and then in button left it's going to take in an icon right and the icon comes from something that we'll be passing down to drop down so that tells me I'm passing down props I'm already thinking ahead because I know the build but you'll see in a second for now so it doesn't get confusing for you guys I'll put a placeholder here this is where the icon will go okay all right next to the icon will be a span tag and that will be the name of style.title and this is actually where the title prop goes in as well but we haven't set up and passed pop set so title will be there temporarily so then it should be closing div followed by some conditional rendering so we're going to use a ternary again so if open is true and don't worry about what open is it comes with disclosure that's why it's in here so if it's open right the drop down all right what should we see that's all you need to know so if it's open we should see the Chevron down icon right else you should see the other icon all right so let's follow the logic with what I just said if it's open we should see the bi Chevron down icon and it'll be style dot right okay and closing time cool and else right of the ternary is going to be the bi Chevron up with the same class name and let me do class name equals style dot right and close Okay closing do disclosure button and now let's get the panels themselves which will be under this we'll say this closure panel and again it doesn't do the dot part for me so I'll write it myself and then we'll say div with class name style dot inner text container and it will have title in between but again please hold it okay so that's the jsx let's just take a look oh and what it looks like now I missed this guy 20 20 25 open this guy up a icon title and title right so this is where it goes so it's static right now we should make these more Dynamic but as you can see it's pretty close to the real thing yeah cool now before I pass stuff down let's just style it since we're already here okay so let's get started with button wrapper and button wrapper is just gonna have a display Flex with an align item Center and a justify between p dash four oh wait this is the finished one okay separated them now button left is also going to have a flex property it's items Dash Center space Dash x4 and we can open that up now oops you can actually access this tab out okay and then we have title which will have just font semibold okay all right so just a little bit Bolder and then the right icon will be H dash six with six text Dash gray Dash 400. then enter text container we'll have BG Dash gray 50 p dash four BG of Dash hashtag three one three three three nine oops this should have come and now it should stop yelling at me okay cool awesome all right so we don't see the icons because that's what icon should go and the title should be there as well so now let's pass down the props what's the smallest I can make this without not seeing the icons okay it's here it's the limit that's fine okay back to nft details let's pass this down okay the first thing I want to pass down is that when we map through something it should have a unique key prop which we're handling with the index from the map after that the title we're passing down is going to be the item right the item being this object and then how do we get the title if it's an object exactly item DOT type okay from there we can do an icon is equal to Icon or sorry item that icon oh yes close that off and we have two of these nice cool so it still says icon title because we only passed down the prop we now have to accept the problem so we accept it by destruction right here now we can just use it so anywhere it says icon I would like to replace it with just icon and anywhere it says title all right I like to replace it with there's a couple more cool and you can replace this with like description all right so if I open this now it says description the same as title and the properties of your app can also be here okay so you can find a way to make that Dynamic that will be my challenge for you guys but take a look that's looking pretty clean all right we're just pretty much missing this section right here all right so that's the nft details all right are you guys ready for our last component I know I am so what I'm gonna do is let's get to that ID page again okay address token ID and I feel like we should make this bigger make this a little smaller and put plop this guy right there so not to jump from place to place X this one or not we just need two cool so let's check on the last component we need to make and that's this guy nft basic info right here what we need to do is create that component so I'll be over here let's make a new file and I'll say nft basic sick info dot JS yeah entity basic info.js okay cool and it should be empty but we can set it up so now we can switch between the token ID and nft basic info okay I'll make this full screen and let's get these Imports in here so if we're working on nft basic info let's import the react icons we'll use which is bi refresh bi link external from react Dash icons slash bi cool we'll also import another set which is MD more revert from react Dash icon slash MD all right then we can import this Ike there's going to be one more component just like before with drop down this one's going to be called sub info but again I'll leave it out just so it makes sense to you guys so cons style here is our object skeleton then we can say const nft basic info equal to function and it returns jsx which we'll just say div nft info okay we also need to export default and a t basic oh cool now it's there we can bring him in and import it as well so nft basic info from slash dot dot org slash components slash nft details slash nft basic info you with me cool just checking all right and since we have it already here let's pass down the props it will need I want to pass in a prop with the key of name and it's just gonna take listing right the listings names how do we get to the listing name if you remember it's going to be dot asset dot name so without asset dot name hmm yeah I think that's pretty much it for nft basic info I'm gonna use this time to see what we made can't resolve icon slash bi well that's weird we use that already oh icons that'd probably help okay I like it connect metamask click on this one let it load hey nft info so nft info is whoops not yet nft info is all the stuff here like I've mentioned so if it's in the right place we should be good to go yep that's about right so I'll guess I'll load up the structure for it clear this out then I'll say class name oh actually nft basic info has an empty div as a parent and then it starts to have classes in here so the first class will be style.top container and then within that it will be div with the class name style dot collection oops collect icon collection Title Here the title will be called crypto punks not doodles all right so this is again static data and then we have the which will be Styles dot action items and then the action items will be a lot of these buttons over here so a smart way to do this to make use of these four right these four icons yep is to put them in Array and then map through them just like we did with the other object for the description and properties so let's make that array and it should be within here so I'll say const action items okay and that's going to be an array of objects all right so I know there's always going to be four objects because of the four icons so I'll just set up the objects boom boom boom all right now we just gotta fill out the objects and each object is going to have a title of Icon and we're just going to insert each icon for the object so the first one is bi refresh right and all of them will have the class name of style dot icon same kind of pattern so I guess what I'll copy is this part okay Coolio then we can do a bi link external paste that oh wow I didn't mean to copy that stuff just this well that didn't go according to plan okay that's better spacing though could use work oh no I guess that's just how it's going to be which is fine all right so for this one it also needs icon it's gonna be MD share this one icon will be MD more revert right and paste cool so do I have the right names tends to happen sometimes yep yep yep cool let me just say yeah crypto punks is right there yep and we don't see any of the icons because I haven't quite mapped them through yet so let's go ahead and do that so now we can say action items.map we're iterating through that array of objects and four every single item in that array I also want to generate an index main thing though for every item let's reuse some jsx so I can say div and put the key in here which should be the index then class name style dot action item container yep and in between here is the key we'll say that's the item that icon okay cool okay there we go finally something's loading it says b i refresh I'll go to spawner spot this right refresh hey all right we got all the action items cool so let's just see where this closes all right it should be closing div now right over here we'll have another div I'll give this a name of style dot asset title okay and I'll take in name which is the property that we passed in and here we'll have div with the class name style dot sub info container and it's going to take in a component so nft sub component we'll go here okay I'm just gonna go back to the place that I was which is right here Perfect all right we just need to style all of it so let's get started styling I'm going to say type container is flex items Dash Center and justify Dash between and then we can do collection title you can see how those icons move to side then we can say text large font semi bold text blue dash 500 then we have action items with flex divide Dash X divide Dash gray Dash 300 rounded large border gray Dash 300. for my action items yay okay so that adds a little border around the action items let's see what do we have next I action item container you know what since I'm down here let's just put that there okay for my action item container you can add a flex property here and then a cursor pointer just to make it feel like we can click on it can't forget the colon yep of course the point is working then we have an items Center and we have a justify Center and a p3 cool all right it's making it bigger and separated it out I like it so for the actual icons themselves we can say h tests six w6 touch Dash gray dashboard 100. and then for the Dark theme say text Gray 400 asset title it's going to be pt6 with a text of four XL now I'm going to give it a font hold let's just see how it looks so far oh we have to pass down name duh I wonder why I didn't say that before okay no worries yep fun bold looks pretty good that's the title I also wanted to add a text Gray here of 700. and then a dark property of gray 100 okay then sub info container can go right here just reload it but I want to have it hidden large block all right so this doesn't exist yet but there is an own buy here and then when I make it small all that owned by information right here is gonna get hidden when it's big okay so if I make it small it's gone I want to make it large it's displayed like block cool for us if I click onto here we don't see the netsup nft sub component when I make it bigger then you see the NFC type component ah this is so cool it looks just like the finished thing I almost can confuse them okay I guess that's the next thing to do is just mix the component so I want to make the component let's just see I think this guy oh I don't want to do that nft basic info I took it out the folder should be back now I just want to go to nft details and just make a new file and say nft sub info dot JS cool and this should be the last component we make and what we can do now is import the react icons okay hey I feel heart is the ones that we're gonna use from react Dash icons slash AI I think that's it for imports Okay cool so we can say con style equals the skeleton and write out nft sub info then for the turn let's just put div oops oops div nft sub info cool export default nft sub info is next let me see if I can make this bigger because I want to add another page onto this it goes basic info if I didn't want to lose the pages okay there we go it's good to know cool so n of T sub info is here this is nft basic info all right so let's import that last component import nft sub info from that forward slash nft so cool and resolve the module and let's just see if it's there it is nft sub component that makes me happy so let's go to sub info and let's write out the good old jsx okay I'll erase this you know the drill classname style dot wrapper class name style dot text container and here we'll have it's going to be static but it's going to be I want to buy class name so we can style that Creator style owner and say ABC just a static owner and div last name style dot icon text info container here's where the icon will go hey hi fill I with class name style dot text wait no it's not text style that's the icon yeah there you go that makes sense and now then div next to that icon will be the style.text info so text info container will be 4.4 K views again static data so it should just be closing div closing div and then div here this one I'll call class name style dot eye context info container as well we have two of these and this one will have the other icon of heart and for the class name of that one it's going to be style.icom of course followed by another div which is going to be the style dot info container or text info sorry text info container with 200 favorites cool so it should be closing there and and there we go let's take a look at what it looks like without CSS that's interesting now why isn't it showing up it doesn't say an empty sub component anymore maybe if I restart the server oh I checked myself right I did I import it yeah I did I just didn't use it it should be right here nft sub info okay that's more like it we should see some errors I've never been so happy to see errors so let's see AI fill put e in there connect their metamask it's already connected so it instantly logs in got this guy oh there we go and T sub info all right let's get to work on styling it so I'm excited now rapper is going to just be Flex Space X Elon Musk and pyx okay then we have the text info container which is going to have text that is large the font will be medium the text I think should be Gray 500. and the same pattern as before if it's dark we don't need to be that gray so we can say gray 400 which is the lighter shade cool and then for the owner I believe owners next oh let me just take a moment to reload I didn't realize we need to refresh owner is not defined I didn't even have owner cool that's about right so we'll say owner now is going to be text blue because I want it to be blue and then icon text info container and we can say Flex oops items Center space Dash x dash two then I can do icon which is H dash seven with Dash seven text Dash gray 100 dark text Gray Dash 400. now why you don't load oh can't restart one and start it up okay set refresh and finally loaded oh my God guys that's it look at this beautiful front end we are good to go with the drop downs and everything right this is dynamic if I go back and load I click on this crypto Punk this page is loaded it's all set up and good for you to go whenever you make a new listing it should just appear with its own Dynamic page and information right here this is the price awesome so I think it's fitting if I log out and buy an nft with a different account so let's see if it all works fingers crossed disconnect will connect with metamask I don't want to be account one I want to count three because it has point one eighth in there let's hit connect so now for the very first time I'm logged in with a different account as you can see I'm on account three it's active oops this one is not connected because I'm gonna count one we should switch to account three this one's connected all right so which one should we buy guys did you say it 2046 I was thinking the same thing so let's see if we can buy this one there we go buy now actually works metamask lets us know that we can buy it for the exact same price as listed we're not going to get scammed and this is going to cost us 20 eighth it's exactly what we want cool so I just loaded the gas fees we can hit confirm and once that's done we just wait for this to be pending and Bam it's not pen anymore it's officially purchased when you go on third web you'll see that the nft is disappearing as well as it takes some time but when I go back to the main page oh oh wow it's actually really fast and so we bought the nft so it's off the direct listings how cool is that guys all of this was possible thanks to replit third web and infuria we've made the open C clone so pat yourself on the back if you guys made it this far congratulations you have a bill what we usually do here at clever program is we usually deploy our app so that you can share with your friends what I always like to say but we don't need to do we don't need to do that if we're using a replit because if I show you guys I'm gonna go open up a new browser with a different email so now it's this color paste in that link look at that I can already see my Rebel live same URL so that's where it's being hosted if I were to click connect metamask I type in my password and now I'm logged in with a completely different account and I can see the same listings that everybody else sees so go ahead what's stopping you from making your own nft Marketplace and your account so what I want to see from you guys now is this is a public Rebel that you guys can fork and I'll be able to see all the projects that you make go ahead if you haven't already go to this website on replit and go ahead and Fork this ruffle because I can see all the ripples you guys make and I want to see some variations change up the front end make it your own Marketplace I love to Showcase some of my favorite ones so go ahead have fun and I see you guys in the next video in this video you're going to be building uni swap Chrome on the ethereum blockchain using Euro index.js you will be able to convert your ethereum coins into custom erc20 tokens that we'll be building throughout this video that's uh let's get straight into the video alright ladies and gentlemen welcome back to another build today we are building unit swap as you can see in the title so while you're down there looking at the title go ahead click the first link right below that because that's going to take you to this very page where you're going to go ahead and sign up for inferior after hitting the sign in button you put in your name email you don't put in your name you just put in your email and then you put in a password and then you go ahead click sign up and then verify your email whatever answer those few questions it doesn't really matter it's just for analytics but like you can just select engineer and solo freelancer whatever applies to you and once you're good there you go ahead hit submit and then straight away You're gonna go ahead get started with a project now for Network you want to go ahead and select web3 API the reason is there's a bunch of chains that one particular thing supports and then for name you can put in like whatever I put here a production but like you can just put in use swap whatever once it's done hit submit and go ahead and that that's it that's it that's basically it you're done you're in you're good you're set now they're all your projects which is probably only one and if you already have an account just go ahead sign in and basically you could have skipped in this entire part that said let's go ahead and set up metamask okay next up you want to go to metamask.io slash download now once you're there you can just go ahead click that big blue button that's going to take you to Chrome web store and by the way it does build is only going to be working on Chrome or whatever browser that supports metamask but which is suggests chroma hit add to Chrome go through that yeah advics engine whatever and then once it's done it's going to pop open a brand new website for you which is just like their configure page and if you already have metamask like once again you can just skip ahead a couple of minutes but if you're new click agree and obviously read that we all know that's important and everybody reads that privacy policy is the most important thing you will ever read in your life not legal advice now if you happen to have a new computer you can just import your previous wallet over there but if you are brand new you can just click create new pass in a add a password that is go that you will have to remember again read the terms of use and then create a new wallet now I highly suggest you go ahead and watch that video because that's going to explain to you in thorough details and how you can keep your 12 phrase mnemonic safe but in short keep it safe because if someone steals it they will have full access to your wallet now quick tip you want to use separate wallets for development and for your own funds and then never share any kind of detail where your money is at and then only share details of wallets that you don't mind they get compromised now here's your security recovery phrase this is the absolute key if it gets lost you're done like for real without exaggeration so keep it a secret with that said though you wouldn't have to go ahead copy this whole thing hit next and then you will have to verify that you have that you can just copy paste it in there and you're good to go now once you hit confirm minimize basically takes that as your confirmation that you are aware of anything everything that I just said and all the terms you've used everything that they prompted you so once you hit it all done you're good to go there is your management now one more thing you want to do is because you only have access right now to the ethereum mainnet which obviously is a ton of money and you don't want to use that click that show hide right there scroll down all the way where you can see show test networks turn that thing on and then turn on show conversions on test networks that will basically show the dollar amount of every single ethereum in your wallet which is just a nice touch and basically they're good now if you scroll back up and then click the selector there are all your test networks now in this build we're going to be using girly so you might as well go ahead and check that off or you might as well go ahead and select that said let's go and get started coding now if you're familiar with us you know that we have our own CLI tool that makes your life easier and you want to go ahead and to use that you want to type in npx letter program and if you don't have it it will have to install itself I also recommend you add a at latest at the end so that you get the latest version of it and it will get it or it will update itself but regardless just put in your email address and then put in your name and then by the time when we shot this wasn't the latest version but right now we are supporting type search so if you start typing unit swap you it will basically just narrow down the list and then you can just hit return select that one so that's going to be something that that's gonna help you so anyways it's gonna run a couple of scripts and it will install all the dependencies and everything for you to get started and then open up your vs code in that specific project so you can just sit back relax care about coffee whatever and as you can see on my screen that's what's happening there now I already opened this guy up that is the project that we're going to be building on top of and for you to spin it up I'm just going to zoom in a little bit just so you can see it better what you can do to spin this up is CD into uni swap Dash app CD as in change directory right away and then in there you just type in yarndav npm run Dev or something but I just recommend you use yarn anyways once it's good to go you open the uh you open your localhost up and there is your project that is your starter project that we're going to be building on top of and there you go let's go ahead and start setting things up now to make things extremely easy for you we recommend you use truffle extension in your vs code so you want to go ahead search for truffle for vs code install that guy and basically they have an integration with infuro which we're going to be using today so it's a pretty good one and once you're there open that little truffle icon on the left hand side you can go ahead click that click create new network and that will and then select inferior service and then you can go ahead click sign up and that will just take you to infuria and once you're connected the two Services it will prompt you to select the project name now you can either type it in there or sometimes it like shows it up oh because we actually create you can just create a brand new project so just type in uniswap and that's going to be the new name of the project however if you want to connect it to us to an already existing project you can just hit connect to network instead and then that will show you the drop down which will enable you to select your existing project now once you typed in we recommend you use public just go just for easiness just to make things easier and then there you go there is your project all right for this next step we recommend you start using we recommend you use remix that ethereum ethereum.org which is by the way an online IDE just to create smart contracts and I'm going to slow down a little bit because this is where things are getting a little Advanced and these are things that might be new to you now if you watch a couple of my other tutorials I might be using the vs code extension for this tutorial we're going to be using this so if you want to see a familiar familiar thing on your screen as you see on my screen you might as well use remix IDE in the browser now to generate a new workspace you can either leave it on the default or you can just generate a new one but to generate a new one you can click that little plus icon and then just name it the way you want to template doesn't matter and in your contracts what you can do is right click new file and then just name it uniswap.sol now in this file is where we're going to write most of our contracts so starting off spdx license identifier MIT that you just need it don't question it you just need it if you write MIT there that basically it's an open source license anyone can use it and you don't you're not liable for anything that happens whatever you write in there the more you know now you have to specify the version of solidity you are using I see so many people trip up on this you don't want to mess that up type in 0.8.16 that was the latest one when we shot this tutorial well you will need to import though is something oh something from open Zeppelin now they have template contracts and you're going to be importing the erc20 contract okay and this is basically going to and think of it as like a npm package but for solidity we're gonna have two contracts in this file if I'm correct first contract is going to be we're just going to name it custom token and it is going to be child of erc20 so it's going to inherit everything and we're going to have a Constructor in there now that Constructor is going to require two inputs one of them is going to be a name and one of them is going to be a symbol now these are both are going to be strings and then this is going to be you're going to obviously pass that into erc20 because that has a Constructor now erc20 has a underscore mint function built in it it comes with the import so you don't have to import it separately minting requires a few more things minting requires someone a wallet where it's going where all the tokens are going to be minted to and then an amount now what is happening here is we want to Mint a thousand a thousand of those tokens however and this is something that I'm going to say a bunch of times during this tutorial now I've said it many times in solidity the only currency that is accepted and the and the only currency that solidity works with is something called way now that is basically all your first contracts so congratulations you just wrote your first contract that will mean a bunch of erc20 custom tokens into your wallet now you can go ahead close that artifacts thingy if you have Auto compile enabled that just that's just gonna go crazy and it will keep compiling your contract and make sure everything is good to go so as long as that check mark on the left hand side is present you're good and with that said let's start typing up another contract which we will call uni Swap and that will handle all the conversions and everything now that will require another Constructor and inside that Constructor we're just gonna strike start straight away with a for Loop now custom coin that we're going to create in this case coin a coin B coin c we're gonna start from zero and go all the way to go all the ways to tokens dot length now what is tokens yes good question we're gonna figure it out in just a second don't worry about it there it is it is going to be an array of tokens but it is going to be an array of strings it's basically just the names of every single it's not super creative but it guess there's not job done it like doesn't go all the way down to all the fanciness you can use this you can just rename it you can even call it CocaCola if you want to doesn't really matter we just wanted to go with this because it's simpler easier to follow especially if you're a beginner all right so we're going from zero and the max is going to be the length of that array you can put in five ten thousand two thousand three thousand what however many random coins you want to and then just like usual just like in JavaScript you will increment that I variable which is going to be the index now here you're gonna go ahead and create a new instance of custom token you don't have to import anything you don't have to do anything we're just going to in create a new instance of it meaning it will invoke The Constructor so you where you're going to see that in action in just a little bit so as you can see we are passing in two items to the Constructor which is tokens I and tokens I it's literally the same thing and if you look back up to line seven on my screen I don't know how like pitch line is on your screen but on my screen it is line seven it requires two inputs so that's what we are putting in here meaning that the coin name and the coin symbol in this case is going to be the exact same again if you're Advanced you can do some tricks with it but I recommend you just stay with this for now it will get the jobs done perfectly we want to definitely save this new token that we just created like right now in a mapping and we're going to set that up in just a little bit this mapping later on is going to enable you to fetch all these coins way easier than otherwise would be so let's go ahead and set up that mapping so for that we need to use the keyword mapping and it's going to be mapping a it's going to map a string to an erc20 token all right it's going to be public meaning anyone can use it so there's your mapping that we're going to use and then we will set up an eth value and that's just once again to keep things simple this is a beginner tutorial we're keeping things simple simple if you haven't heard of solidity before you're in a good place so we're going to set up a eth unit value which is going to be a uwink what is a U.N it's a number and again I'm gonna I'm referring but I'm going to refer back to the statement that I made just like a minute ago everything is stored in weight so we're going to convert each unit to weight and if you save this website by the way ethconverter.com that is eat eat that is ethconverter.com that will be helpful for you later on so if you put in any kind of ether value in which case in this case it's going to be 0.000 that is 0.001 yeah I'm not gonna say any of the other numbers just copy that that's going to be your way value that we'll be saving there so that's going to be your base way value save it there it will be useful later on don't worry about it for now just do as is and then it will all come together now if you select that last option on the left hand side now we're going to go ahead and compile and deploy this contract that we just built now I also have Auto compiler enabled so it's automatically compiled but you will have an option to do so if you need to and then there is that big orange deploy button click that and down there on their deployed contracts it should show up and those are the two functions that are available right now and those are coming built in with erc20 and everything and the mapping that we created now little explanation here when you deploy a contract the Constructor runs immediately because in the Constructor we have the for Loop that will immediately deploy all three coins so you don't even have to worry about that and so what you can do is here fetch all the coins that were deployed so if you put in coin a which is just of the first coin it will return the address of that coin and so that's what you but that's what we just implemented so mappings works like that you gotta pass in and a string and it will return an erc20 address so that's what you see there and then for tokens that is your that is the that is on my screen on in line 13 that is the array so you can fetch each and every single element like that and if you get these results on the left hand side after you deployed your contract congratulations time to move on all right now you have your custom tokens perfect each of them are deployed and minted thousand of each but how do you verify that you need a function that Returns the balance of each coin so I want to go ahead and get started creating a new function inside your second contract and it will call it get balanced now this will have two inputs one is the token name and the second is an address what's happening you want to get a balance all right so you need the wallet address which holds potentially that token and that's going to be the address and then you want to get you want to pass in the token name so let's say I have a wallet which has a random address and I have coin B so in that case I will pass in coin b as the first argument and I will pass in my wallet address as the second argument and all I expect to see back is just a number of how many ether or or of how many coin B do I have in my wallet so it's going to be a public function which will return a uint as I said and all it will do is just go through the go to the mapping and then pass in the token name so far all it would do is just return and address however once you got that address you want to call a balance of function and this is something that is coming from erc20 so this is part of the standard and there you're gonna pass in the address so it's going to be my wallet address that's going to go in there so what it will do under the hood it will retrieve one the token address so we'll know that coinb has this and that address and we're gonna check that at that address my wallet address a lot of addresses I know so that that coin address my wallet address how much the balance of that it scrub that so this will return that my wallet that has the second address is that will return the balance of the first coin inside of my wallet so let's go ahead and deploy this new contract and actually you can see all the instances you feel free to like keep removing it but you can keep it that's fine too again the Constructor has run immediately so we're not going to check that but you can pass in coin a right there to check how much coin a in your wallet and then you want to pass in your very own wallet address now you can get that from there from the account because it is not actually connected to your Minimus yet it is remix ID's own builtin environment so it gives you a bunch of like test tools so once you pass that in and hit call I'm gonna pause this for here for a second and you should pause guess how much of the of the coin do I have in my wallet invalid address perfect that's all you guessed am I right okay that's just because I have all those quotes there so let's just remove it it's an address it's a different data format I know it's annoying I can get around it I make mistakes all the time remove the quotes call it again so there you go pass that pass the address in and call it and if you thought and if you guessed zero you're good and with that said let's keep moving all right let's just create a function that will return the coin name every time you pass in the coin name it's precise so you want to have a function that will return a string and it takes in a string and it will return it the coin's name from the mapping so there you have it you want to type in token instance map token name dot name function and there you go if you go ahead and redeploy the contract and then go ahead test this out and then type in coin a it will return coin a all right so let's build the function that will return the custom coins address so we can fetch a bunch of things with that just by passing in the name so let's do that all right so we're gonna get started by just starting a new function we'll call it just get token address or whatever and it will have one input which will be a string and it's going to be token name and then it will return obviously an address and then all we're gonna do is just call the address function on the token instance map and then passing token name so literally we're going to use the mapping that we already have pass in the name and that will return the entire thing and we're just going to we're just going to need the address of that specific contract okay so let's go ahead and deploy that and let's see if that works so if I just type in coin a and then hit that there's my address that's uh working perfectly let's go ahead and get started swapping stuff because this is where like the real deal is gonna get started all right now we are going to get started swapping eth to custom coins and this is where the real meaty stuff is happening so you can come back to this if if something is unclear all right so let's just go ahead and create a new function it's going to be oh create a new function it's going to be actually a pretty simple one so we're going to call it just swap East to token and it will have one input it's going to be a string that's going to be the token name so basically what's going to happen is you're going to send X amount of eth to the contract and the token name and that's it and then the rest is going to be handled by the contract this is going to be a payable function because we'll need to send money all over the place and it will return a number of how much was actually converted we're going to need to have a couple of variables here we're going to be saving the input value then we're going to be saving the output value which is going to be input value slash each value and if you look up to my line 15 on top of the screen that's where my eth value is at and then we're going to need to make it an 18 digit way thing remember that's that's a solidity thing and then we're gonna need we're going to need the requirement here we're going to need to make sure that the transfer it actually happens all right so we're going to need to transfer from the coin that the user is firing we're going to need to pass a couple hour much we need to basically the output value amount we need to transfer it to the user's account all right so that's how we're calculating the whole thing and so there is and then we just return the output value which will just tell the user hey this is how much you actually got for your money and so there's the value that helps us once again convert between eth and the custom token and you're going to decide which token you want to get and then you're just going to pass it turn it into way transfer it over and if that's good you're getting ready to go all right so let's go ahead and actually test this out so I'm going to deploy it and let's see what do we got because of the Constructor I already have access to a bunch of Ethan and all these tokens so those are already there so let's go ahead and use that swap eth token function and so I'm going to need to type in coin a and put in a value of I don't know two if this is good and if let's see what happened so it says erc20 transfer amount exceeds balance so we're gonna need to increase that and that's because like initially we just started with a couple of coins let's just make it like 10 000 or something so there's like actual balance there all right deploy it again let's try it again pass in coin a okay it seems like it worked and now we're just going to go ahead and check the balance now it has two inputs remember you're gonna put in coin a and then uh the wallet that you want to check it on so put in new wallet address and we should get back a pretty interesting number in a way but it's going to be a one and a lot of zeros so let's see and there you go works perfectly Works beautifully now we're gonna need to do the swap the other direction you're going to need to do it from Custom coin to eth as well so let's go ahead and do that now all right let's say you converted too much Ethan you want to convert some back I got you start by creating a new function and that and that will call swap token to eth which will obviously just like last time taken one string that is the token name but this time it will also take in a un which will be underscore amount and then this will return once again the U in now we're gonna get started with some quick math and stuff like that so create a new variable it's going to be exact amount which is going to just convert it to way because what convert it to the 18 18 digit version the currency that you're passing in so that's always useful when you work with solidity and you want to go ahead create a new variable which is going to be the eth amount now it's going to be exact amount times The Ether value which is just the conversion value and then and we can get into business now we're going to need to make sure that the current address so meaning the current the contracts built in wallet has enough ease to enough ease to transfer over so you want to make sure that balance is greater than or equal to the amount that is required and if not just throw an error message and then after that I'm going to go ahead and get started actually transferring that money so you want to make it make the message sender address payable and then transfer the required amount now after that you want to make sure at this point that the transfer was successful and then you want to and then last but not least return the amount that was to be that was transferred over now let's go ahead and test this out because there's a couple of things that we haven't discussed just yet but you're gonna find it out real soon so let's go and um do the same steps so we're just going to go ahead convert some eth and then let's get the address so yeah there we go the ethuke token was successful however let's go ahead and start convert some of that back so yeah let's go with 12 coin A's let's uh let's transact and there you go there's some sort of error now don't worry about it it just says insufficient allowance on the second line at the very end that's something we haven't discussed yet but that's something that we're going to address right now so what you need to do is get the address of the coin like that and then we're gonna go ahead and interact with the coin contract itself as you can see on the screen because as of right now we are only interacting with the decks itself but we need to interact right now with the coin because we're gonna we're gonna need to increase the allowance so so put it put in your wallet address right there okay right there that's going to be your wallet address and now you're going to include increase the amount so that's what we need to specify now and just to make like things easy we're going to approve the entire balance of all the coin AIDS and then now it should go through so let's go ahead and actually hit transact and as you can see both of them both of the transactions went through and there you go the balance just changed by 12. you can see at the very end it says 88 and a lot of Nines in front of it so that means that our function worked perfectly in this case and just got it done so with that said let's go ahead and now enable the swapping between token custom token and custom token all right so far we have covered two of the three main swapping methods one just for quick refresh one was eth to custom token two was custom token to eat now we're gonna need to cover the custom token to custom token so let's say you wanna you have a lot of coin A's but you want some coinbase and you don't want to spend e you just want to convert coin a to coin B that's what's coming up all right so we're gonna go ahead and start up with our trusty function and then it's going to be swap token to token or you can name it whatever but uh we're gonna need two strings as input so there's gonna be Source token name and there's gonna be destination token name and you also want to put in an amount which is going to be a number now this is going to be once again a public one and we're gonna need to make sure that the source to connect we're going to need to make sure that we take out the amount yeah we take out the amount that is trying to be transferred from The Source wallet and we just store it in the contract and then we're going to transfer over from the central wallet to the user uh themselves so that's something a liquidated pool would be in a real life situation but this is going to be like a dumb down easier version of that so and now we're gonna just transfer over a bunch of token b or like destination tokens to the sender so once again lines for first line is just taking out the source token from the user's wallet and then second is going to take take the equivalent amount in a different token and then put it back into the user's wallet and that's basically our function so let's go ahead and deploy it and we're going to go ahead and transfer swap some eth2 to coin a and then now we're going to need to increase the balance okay there you go we got the balance now we're going to need to increase the allowance so that's something that we're gonna do and just for simplistic approve for the entire balance let's go ahead and test out our function so coin a to coin B and let's say we just want to try pass over a 10. so what we need to see now is that when we check on coin B's balance in our wallet we're gonna we should see a ten and there you go ladies and gentlemen that is a perfect solution if you see that it is perfect and if not just go back rewind where you can just double check that the function is perfectly written or if you've made mistakes that's that let's go ahead and keep on going now this is just going to be like a quick complimentary function we're just going to go ahead and double check that how much eth is available on the contract so it is going to be an easy actually you should go ahead try it out by yourself there's no input nothing one liner I think so it's like a super easy function Try It Out by yourself pause it now and then if you were able to figure it out good if not it's completely fine too let's keep on going with the solution so it's going to return a uint and what we're going to return is address this dot balance that's it and that should in theory return how much eth is currently stored on our how much it is currently stored on our contract wallet so let's go ahead deploy the new contract and let's see what we've got it'll say zero so that's perfect and if you were to send some in there and convert then it's going to be updated but with that said let's keep on going all right so now we're gonna start using truffle extension inside of our vs code and what you want to do is just copy the entire contract that we just wrote put it on your clipboard command see it and because we're going to be copying it over so in our vs code what we're going to do is go ahead and create a new contracts folder and open up the CLI right there and you want to install truffle so it's going to be a global install if you haven't done that already now is the time and then you want to type in Truffle in it and that will spin up a new truffle project now inside the Truffle project you want to go ahead and type in truffle create contract unit Swap and that will create you a new contract file and that is where you want to go ahead and paste your contract so as you can see definitely you have to make sure that the solidity version is perfect and then just haste the entire contract and there you go now you might be seeing this right underscore under the on opens Upland package and that's because it hasn't we haven't installed it yet so let's go ahead and fix that so it's your net and then paste at open Zeppelin slash contact and once it's done you want to right click on your on your solidity file and then just hit build contracts now if you do not have Shuffle extension at this point go back in the video I explained it earlier how to install it and how to set it up I'm gonna I'm gonna do it again but that is where they set up it so if you're skipping around it's gonna be like somewhere in the beginning so that's where you want to look for it all right let's go ahead and continue so you want to click that and then it's going to build and in the output you can check how that goes you want to see something like successful compiled successfully and then next up you want to hit deploy like right click and deploy and then select girly now we set this up as well and this is uh so don't worry about it just go back and check it out if you haven't done that already now it's asking for gas price leave it empty just hit return on it don't even worry about it and then I'm gonna either paste your mnemonic or if your body is set it up you can just use that configuration and then if you're pasting it it's going to do this and then once you're done it will go ahead and try the blade Howard it's not going to go through it's like you don't see any kind of address on my screen right now and that's because we missed out we completely forgot the migration as file that's something that like we hear a clever programmer every single time that is our signature that we try to deploy and then oh the migrations file so in the migrations folder you want to go ahead and create a new file which will be one underscore deploy and then we'll have to import the unit swap contract so it's going to be artifacts that require any unisplot and then just explore export the deployer and so then you're going to be good to go now try again hit deploy and this time it's gonna go through so let's speed through that real quick and as you can see there is my contract address so you want to go ahead copy that and then go into your unit swap app go into euros and then contracts.js close that output out and then just create a new variable Bowl which will be addressed and just save it there because that's going to be something that that's going to be the thing that we're going to be using now if you want to double check on ether scan currently.etherscan.io paste your address in you're going to see everything that just went through so if you're up to this point congratulations now we're going to go ahead and set up rainbowkin alright so you want to go into your app.js file and we're going to import a bunch of things so just hold on it's going to be Rainbow Dash me slash rainbow kid slash styles.css it's going to be giving us all the Styles and then you're going to copy you're going to import merge from low dash dot merge and then we're gonna this is gonna this is where it's gonna get started this is where it's going to start to be mental so we're gonna need get default wallets we're gonna need rainbow kit provider we're gonna need Dark theme and we're gonna need midnight theme actually you can just choose between the two we sometimes just look at it I don't know I prefer Dark theme if you're interested but try out midnight that's like completely black and then the dark is like dark gray the more you know all these are coming from rainbow kit now really a bunch of things from wag me I believe is what's coming up so let's chain configure chain create client and whack me config all this is coming from wag me and then we're going to import infuro Provider from wagme slash provider slash infuria and that is basically it now up until this point you need to import everything we're going to be using all of it so just pause here for a quick sec we'll check you of everything and let's keep on going then now we're going to destructure chains and Provider from configure chains and we're going to have two arrays in here so in the first array we're just going to put in chain.girly that means that this app is only going to be running on the early chain nothing else is going to work here and then for that we're going to be using the inferior provider where we need to put in an API key now we have it somewhere if you haven't done that already just place it in an EMV file and then you can you don't need you don't actually have to expose it to the browser that's a good thing about it you can just go with inferior API key you don't have to do next next public but as you can see that is how you get your API key so if you haven't done that already now is the time to do and so there you go all right next up we're going to be setting up the connectors for our OLED connection and that's that's going to be using get default wallets from wagme now we need to pass in app name that is going to be uni swap you can pass in whatever and then you're going to need to pass in Chains and then next up we're gonna have a wagme client that will use create client and we're going to need to pass in a couple things here so we're going to need to pass an auto connect you can either set it to true or false I prefer to be truth true but for this build we just use false for whatever reason and then you want to pass in connectors and the provider and with that all the setup is ready and then one last thing to set up is going to be we're going to make sure we are going to create a my theme which will merge midnight theme and we're going to override a couple of colors so we're gonna say we're gonna have an accent color of that and this is like completely optional this is just elements so there you have it extended extended color foreground accent color and now we're going to wrap our app in between wagmeconfig and where we're going to need to pass in Wagner client is it's like a context these are like contexts for our app to be able to access this and then we're going to import the or we're going to wrap the rainbow kit provider with the chains and the theme and then just and then just pass in and then just pass in the app and that is basically it now we're going to go ahead and actually render the connect button to our screen all right let's actually go ahead and render out that connect button and so this is going to be a quick one what you want to do is go into your header file inside your components folder and then go ahead and import connect button from rainbow kit just like that and then we already as you can see we have it commented out that's the place where you want to put it in as a component so that's literally all we do once that's there it's going to show up on the top right Corner no let's actually check it out so there you go literally preset up buy rainbow kit so you can already use it and once you hit I'm going to mask it's going to work perfectly so that's it all right let's go ahead and set up all the contract Builders so we're going to be importing a couple of things here so first of all we're gonna need ethers then we're going to need unisplot API from utils slash uniswap ABI yeah uniswap.json and then we're going to do the exact same for the custom token these are coming with the build all right now next up we're gonna we're gonna need two functions that will immediately straight away going to export so let's not waste any time on that first we're gonna have a token contract that we're gonna export and that'll take in an address and then we're going to you we're going to generate a provider using ethers the providers.web3 provider and that and using the window ethereum and what is window ethereum that's basically the code that is being injected by metamask now next up we're going to use that that we're just going to go ahead and destructure ethereum from that from window and if it actually exists meaning the user has installed metamask we're going to use that to generate first a sign so we're gonna we're gonna say provider.getcenter and all these are going to be like this is gonna be this is a lot of like setup and prep and whatever but this is ultimately going to be like completely needed in order to be able to interact with the contract all right so we're gonna join the contract reader and it's going to use it's going to be new ethers.contract and passing address contract ABI and assigner itself and then just return that bad boy and that's pretty much the first one now we're going to repeat this exact same process for for the unit swap contract itself so the decks so the first two lines are copy paste immediately if statement copy paste and the only two things that are going to change are going to be the the address because that's there's only one address in this scenario and that's going to be the Dax address and then which ABI are we actually are we passing it so in this case it's going to be the unit Swap abi.abi and then we're just passing the same signer that we created up above and then return the contract reader so that's pretty much it now we're going to set up a couple more helper functions and then actually put things into motion all right so these are going to be two functions that we're going to be setting up just so we can convert between eth or ether and way so we're going to import ethers from ethers and then we're gonna use that to set up two functions so there's we're gonna have one function that will be two way and that will take in an amount and then that'll take into decimals but default value is going to be 18 and then con we're just going to say cause twoway ether.udos.parse units and that's just something that like comes from ethers and I'm passing the amount and I'm passing decimals and then we're just going to return that now as a and then we're just going to return that as a string that is the first one and then the second one I'll let you try figure it out by yourself but it's going to be on the same analogy the only difference we're going to be passing in way here and then we're gonna need eth so I'm gonna go ahead and continue now so we're gonna say it's gonna be two eth and once again we're gonna pass in an amount decimals it's gonna be 18 usual utils.forement units and then we're gonna say we're gonna go to eat same we're gonna type the exact same thing all right that being said we are actually going to go ahead and start implementing the East coin functionality all right so let's actually let's like finally actually swap from E3 or custom tokens that we worked so hard for all right so you want to go into your queries.js file and then import a couple of things so pick number in ethers from ethers first of all and then you want to import contract and token contract from the from the contract file that we set up earlier so that's the like contract interaction interfaces functions I don't remember it though completely but that's what's basically going to allow you to actually interface with your contract and then next up we're going to import to eat and to wait so the other two helper functions that we just created and so here we're going to have the swap to eat function which will require a token name and amount and as I always say use try catch functions or console let the error out and then we're going to convert the amount to way because once again it's already only works with weight we're going to use the contract function that we set up earlier to generate a contract object for a unismo for us and then we're going to use that to actually handle the transaction itself so we're going to say contractobject.swap to token and passing token name and TX which is the way amount of the each amount the user passed in and then we're going to go ahead and generate a receipt by waiting for that data and then return it once it's done so that's basically it for that file now you want to go ahead and go over the swap component and scroll down to wherever you see functions for contract functionality here and then you want to put in create a new function that'll heavily rely on our setup for of the front end so we're going to create a perform swap function that's going to be an async function and we're gonna before we do anything set transaction pending true all right and then we're going to go ahead and generate a receipt we're going to go ahead and start create a new create a new variable that we're going to call receipt and then using everything that we set up earlier just type in uh if Source token equals eth and destination token token doesn't equal either and you would just want to invoke and you want to wait for the swap if the token function and then put in destination token and input value and like I said this whole thing is heavily relying on the front and we already set up for your convenience now you definitely want to make sure that a function is actually getting called so we're gonna create a new function that we'll call handle swap it's actually on my screen in on line 73. there was a little bit of scrolling so just wanted to help you out with that now here it's a little repetitive but just kind of double the check that everything is good to go there and then call the function once the once everything is ready now my screen on line 140 where you're going to pass in that function and what that basically does is that will fire up this function and whenever you hit the swap button which you currently cannot see because the wallet is not connected to the app but I'm going to show you just now let's go to this app put in a value there and then we're going to need to select uh tokens that's going to be coin a and you're going to connect your wallet so that's something you gotta do and then it didn't turn blue so there is some sort of error going on here let's let's actually go ahead and figure that out now as you can see on line 16 we have imported use account from wagme and that basically is just going to help us this is going to help us to check whether well let us be is connected or not so just update it on line 61 and you're just gonna destructure address from use account and that itself is going to take care of this whole thing the wallet is connected and then there you go now there's your swap button and then confirm that transaction speed it up a little bit because that never hurt and there you go you can try it with another amount and it's going to work perfectly again so there it is that is your function now we're going to go ahead and fetch balances of each token and render them out on the screen all right ladies and Gentlemen let's go ahead and fetch those balances that's going to be a little bit of a longer thing but yeah that's so that's where it's going to go now you want to go into your header file because everything is going to happen in our header and we're going to import a few things so start with use account from wagme and then we're going to import token balance from token balance and then we're gonna create a new use state which is going to be token balance and it's going to start out as a completely complete nothingness now you want to extract address from or the structure address from use account and then we're just going to go ahead and kick things off with a use effect which we're gonna fire off every single time once the address changes that is important because if you connect a different wallet to the app you want to see the updated balances inside that wallet and not the previous one so this is super important now we're going to go ahead and uh our we're going to update the use date with a bunch of jsx code in there so we're going to use the token balance component and pass in coin a and then the wallet address so we're going to repeat this a couple of times so like we because we have three custom coins we're gonna do this three times and by the way those um coin names are going to be strings so you want to make sure you have coin ABC and then three times the wallet address as as in the address next up you want to have a an if statement and make sure that it and if the wallet and if the user haven't connected their wallets then you want to put you want to punch out a little bit of a notification for them so we're gonna go ahead and set that up right now so it's going to be a toast wallet and it's just going to be like a toast error and we're gonna be like yo connect your wallet or something like that it's going to be there for two seconds and that's basically how it's gonna look like you can see it on the right okay so we just connected our wallet and now you're gonna go ahead and we actually have to render those components out so render out just put the token balance component and render it out right there but throw some sort of error okay so let's actually go into that token balance component let's see what's going on in there so we're going to need to create a couple things we're going to need to have a balance use State and we're gonna need to have a copy icon used to so there's a few things that we need to specify here and that will just be a icon that we already imported for you so that's going to be clipboard icon and then we're gonna we're gonna have separate we're gonna have multiple States we're going to have a transaction pending and we're going to have a not not pending and we're just gonna kick them off based on whatever uh whatever is suitable for the situation and then you also want to have a token address over there and by the way the balance is going to start out as an as like a dash string basically all right now we're gonna have two notifiers set up so that one is going to be in our error and this is going to be like a toaster just like the one before but this time it's gonna go for six seconds and that's by the way in milliseconds so that's why it's six thousand and then we're gonna have a success message or like a success host where we're going to say transaction complete and I mean you can go ahead and set up a duration for that too honestly so go ahead create a new function which is going to be fetch token balance and that's going to be and then we're just gonna kick things off with invoking the get token balance function which we imported earlier which we're gonna set up in a little bit and you're going to need to pass in a name and wallet address for that and then we're going to also need to format the balance and then set that balance or set the formatted balance to the state itself out so there's going to be that's how it's going to look like in in a little bit that's the that's the component that we're going to make a we're gonna have now we're gonna have to make we're gonna have to fill up with the good data all right so go into your queries.js file and we're going to go ahead and set up get tokenbalance function and so we're gonna need to call the contract there so we're gonna need to set up the contact object and just like before use the get balance function from a method from the contract balance and then create a new variable and then return it and that should basically get it every single time and then you're gonna need another one which which is going to be get token address and once again just go ahead try it out by yourself like every single time we create a new function I want you to go ahead from now on because it's going to be a lot of repetition so try it out by yourself and see if it works and then just come back for the solution so try catch console log the error out and then we're gonna create the usual contract object and then the usual way just call on the get token address font method now everything that we just created we're going to go ahead and now import from from that file so get token address and get token balance and then we're also going to set up a new function which is going to be fetching which is going to use the get token address function that we just set up so it's going to be fetch token.s it's going to be an async function use that and then whatever that thing returns we're going to set it to the state and then we're going to go ahead set up a use effect that will run again and again whenever name and the wallet address changes and if both of them exist then we're gonna fetch the token balances and then we're also going to fetch the token addresses and if that if they and if not either of them don't exist we're just going to set everything back to their normal regular or like the initial value and then it says ethers doesn't exist so let's go ahead fix that import ethers from ethers and that should be good pretty much now if you scroll down on my screen it's line 40 but in your screen but on your page it might be something different so just check out where it's at we have a hardcoded balance there but we should go ahead and now fix that so let's see what happens there and there you go ladies and gentlemen as you can see our previous two swaps were successful because you can see the 30 coin a and the 20 coin B transactions that would fit there so that's basically it now we're gonna go ahead and display a success toast whenever the transaction succeeds all right let's just go ahead and set it up so go back to your swap component and as you can see we already set everything up for Success so now we're just gonna invoke everything so go down to your go to your perform swap function we should have set the set transaction pending state to false once it's done and then if the transaction results in a receipt and that result and that receipt doesn't have a transaction hash property then you want to go ahead and notify errors I've hired that off and then pass in receipt so everybody knows what's happening else just notify success and that should basically be pretty successful so let's go ahead and test it out so let's do some transactions over there hit confirm and let's see what do we got let's see if it works let's speed that bad boy up and any moment now and there you go there is your host message and also as you can see on the right hand side once I connect my wallet coin c oh coin bead now has 60 so the transaction definitely went through and now we have proven that it did go through all right let's go ahead and now set up the swapping from token or like from Custom erc20 token to eth so what we're going to be doing here is uh first of all close out everything we're not we don't need a bunch of things go into your query is the JS file and we're gonna set up two functions but let's start with the first one now so that's going to be swap token to eat now it's going to be an async function that takes in token name and amount and we're just gonna do the usual try catch a console log area create your contract object and then what we're going to do is use that contract object to swap token to each basically call that function of the contract so we're going to pass in the usual stuff to the way converted amount of the amount you want to convert and then the token name now it's going to be the same thing whenever the receipt shows up wait for it and then return the receipt now as you remember we're going to need to preapprove the amount to be transferred so let's do that now it's going to be the second function so that's going to be increase allowance and so once again we're going to have oh we're gonna pass in the token name and the amount and then we're going to do the usual try catch console log the error and there's going to be a little bit of a trick here now so I want you to listen closely so we're going to Fat what we're going to do is we're going to determine the address of the uh specific coin that we're gonna need and then we're going to use that address to generate a new contract object and we're going to use that to increase the allowance all right so there's going to be two contract objects here and both we're going to be interacting with two contracts in the same function so that's how let's continue so we're going to use the uni swap contract to get the address of the custom tokens we're going to pass in token name and then we're gonna go ahead and generate a token contract object using that address that we just generated so that we can increase the allowance and so we're going to do that right now so using that we're going to go ahead and say called approve and so what's happening now is the approved function Works in a way where you pass in who can who can interact with this what who can interact with this coin and how much are you allowing them to interact with this coin so we're going to need to pass in two things one of them is going to be the unit swap address and the other one is going to be the way amount of the amount or like the weight converted amount of the amount you want to convert and with that being said we're pretty much good to go here all right now let's actually connect this with our front end so we're gonna go into our swap component and then in the perform swap function there is that if statement so you're gonna add a else Clause after it so we're going to say else if if the source token is not if but the destination token is this is what we want to do so now we're going to generate the receipt based on that and we're going to call these swap token eth function and now we're going to create the increase allowance function so let's go ahead and do that so transaction pending has to be true and then we're going to use the function that we just built and then invoked it and invoking and then pass in Source token and input value and after that once it's good to go might as well turn off the loading screen and so inside of handle swap I'm going to turn on and the loading screen again and then you want to check whether the wallet has some sort of allowance on the source token for the amount that you are trying to convert back to e oh there's a there's an error I'm going to make it async okay that's fine and after that we're good with loading so let's actually move that and then if the result is valid and actually called the perform swap perform swap function and if if not if if the user doesn't have allowance now we get a call the handle increase handle insufficient allowance function and to do that what we're going to do like we we already set that up ahead of time now we're going to just switch out the swap button to a different button and so let's go ahead and do that that's on my screen that's line 162 and then there is a swap button text whether if it's your increase allowance or not and if it is then we're going to call the handle increase allowance function now let's go ahead and try it out let's see how this actually works so we're going to turn some we're going to use 20 coin A's and then swap back into eth and let's see what happens there's some interesting things going on around in the background so that's something so we apparently don't really have the has wallet allowance function but that's completely fine because we're going to go ahead and build it now let's see what can we do here so we're going to pass an owner we're going to need the token name and the amount and we're going to use the usual try catch console log the error that's fine and then we're going to use the uniswap contract to generate our contract object and then we're gonna have an address obviously once again we've got to fetch the token address to get everything and then using the using the token contract we're going to double check the allowance so we're gonna we're literally just gonna fetch it so we're gonna pass an owner and we're gonna pass that passing the unit swap address and then we're going to convert it into a like a regular human number so we're gonna say that's a bunch of things going on there so basically what's happening is we're going to get the way amount and then generate a big number from it and then we're going to use that to generate a string that we'll be able to work with later on so just go ahead copy that and then feel free to spend some time understanding what is happening there and then now we're gonna go ahead and return the result and also export the function because we need to use it in our swap component so let's go ahead and try it out again so if we click swap it says Ops insufficient allowance or gonna need to increase it so we're going to go ahead click that okay there's some interesting things happening here again so it says API that map is not a function we might have made a mistake earlier on yeah there it is so you want to double check that every single time when you are generating a contract contract reader you say you import the Json and then dot ABI and that's what you're trying to interface with because there's a bunch of stuff that you don't need so let's go ahead test this out again so refresh real quick connect your wallet and then I'm gonna say 30 okay insufficient allowance we've seen that and there you go give access let's wait for it to go through speed it up if we need to and then refresh real quick connect your wallet again and then now it says Swap and if you click it you're gonna approve the transaction itself not the allowance so we should be pretty much good to go soon so let's see how that goes perfect it says transaction completed so technically we should be good let's just refresh real quick so connect that and now you see that the values have been updated so that's basically it now we're just going to implement token token and we're good to go all right so to make this work we're gonna need to go into our queries.js file and it's going to be super simple it's going to be super fast so just create a new function swap token to token as in Source token and destination token and amount and the usual try catch console log the error because that's usually helpful to see what went wrong and now you're going to generate the contract object as usual you can once again try it by yourself but if it doesn't if you're not that experienced that's fine too which is going to be basically the response of the swept function and then just pass in everything that we got obviously make sure you convert the amount to weight and next up you want to go ahead generate the receipt and return it now if you don't export the function it's not going to work elsewhere so go back to your swap component after you've done that end of the performance swap's next statement you want to have an else clause which has no other conditions basically it just in the first two we made sure that everything is accounted for so now this is the only option to do or the only option to have and now what you want to do is generate their local receipt for that or update the receipt update the receipt variable for that and then call the swap token the token function from the file that we just from the queries file and pass in everything that function is go ahead and see what do we need so everything should be ready to go pretty much so let's see what do we got let's turn 30 coin A's and just swap them over to coin B let's see if that works so let's hit Swap and okay we gotta increase the allowance that's perfect that's fine okay hit confirm let's see if it works and we can just speed it up see if it's to go and after after that's done we can actually go and now that we have the allowance we can now actually go ahead and do the swap and once you confirm the transaction it should go through pretty fast transaction completed and there you go there you have it your coin a and coin B is updated so ladies and gentlemen that is it it is a fully functional unit swap Decks that is able to convert between random erc20 tokens use them you can literally actually use this and you can transfer your eth into custom coins and your custom coins back to Ethan that custom coins between custom coins and then all that kind of stuff so you can have basically your own trading bot I'm not saying you should be doing that but with a little enhancement you can automate that stuff so there you go that's that's pretty much it and I hope you got some value out of this tutorial and with that said I'll see you in the next one in this video You're gonna be building Sushi swap in next.js we're gonna be using solidity we're also going to be using infuria to build this app on the ethereum blockchain we're also going to be using rainbow kit to connect our meta mask this is going to be an amazing build let's just get started all right now let's go ahead and get started building these Sushi swap cone so as always we're gonna be using the custom CLI tool that we built for you so just pop in your email name and then just start typing in sushi swap it should show up and hit return on it and then let it do its thing now it will also open up infuria for you so go ahead log in or make an account if you don't have one already and then select web3 API as Network and then just name it Sushi swap or whatever you want to and then in the meantime time likely the CLI tool will be done and will open the will open vs code for your convenience so it's full screen that and go back to inferior you should be good to go there you don't need to worry about it so finish setting up your inferior project and copy your API key and that should be pretty much your first step all right now as your first step what we're going to be doing is we're going to be creating a custom token so let's just get started so inside your contract slash custom decks Sol file you can start typing it and just like with any solidity file you will need an spdx license identifier which is going to be MIT and we are going to be working on the 0.8.0 version of solidity so just use that and write the gate we're going to go ahead and import some open Zeppelin contracts and libraries so the first one is going to be the erc20 and we're also going to be importing the safe math Library let's just do that and now we're going to go ahead and actually create the contract the token contract itself so as usual we're going to be building on top of the erc20 library and we're going to have obviously the name and the sale of that token so let's just build out the contractor with those and then create the minting function so that will be that will look like that you're going to pass in the account and the amount and the amount and that is pretty much it we're just gonna get started with the custom decks in a little bit all right let's build the first app or for the custom decks so we're going to be using safe math in here so let's just import that and now we're gonna do a couple of presteps or whatever they they are called so we're gonna go ahead and create an array of strings and we're just gonna put in the names of the coins so you can rename those coins however you want to I'm just going to call it coin ABC and now I'm going to create a mappings later on this is going to be useful so what we're going to be doing is we're going to be mapping the actual ERC instances to these coin names themselves so mapping string to erc20 and it's going to be public and then we're just gonna name it token instance map these are going to be the conversion values so one custom coin will cost you 0.0001 East and then one coin will cost you one coin so this is just for later for for reference and the dexis Constructor will will be a for Loop so what we're going to be doing is we're going to Loop through the array that contains the names and it's just gonna basically run the coin Constructor itself so basically let's generate a new token for you and then we're going to be minting a bunch of them into the contract address itself so that's what address dot address this means meaning that all the coins that are going to be minted and this step are going to be minted onto the contract itself so nobody's actual wallet it will be minted onto the contract so the contract will own all the tokens and you just want to put in like a big number like a huge number that's because you don't want to run out while you're testing just put in as big of a number as you can think of and then what we want to do is we want to save this token into the token instance map just so we have access to it later and we can access it so once you're done and your contract looks like this you are pretty much good to go okay now for the next step we're gonna be implementing the get balance function so let's just get started with that and that all have two arguments one of them is going to be token name and the other one is going to be underscore address so basically when you call this function you should pass in coin a and then whatever your own wallet address is so this function will return the balance in the given wallet of the given token so this will be a function that will return a number and so the only thing that we will have to implement is returns token instance map passing the token name and then balance off and then the address so if you let's say if you have five coin a tokens then you're passing coin a and your own wallet address it should return five so that is pretty much the get balance function all right let's test all the functionality that we implemented so far so first of all what you want to do is start your remix server on your in your vs code this is just a free ethereum remix extension and what you want to do is if you don't have ganache installed go ahead obviously install ganache and spin it up and then just make sure that the ports are matching so that it connects and once you're done with that you can go ahead hit compile and then hit Deploy on your custom decks.sol file and there you go you will have the the instance right there and there will be an issue which which I forgot because when you import from open Zeppelin you should import from contracts as in plural so just go ahead fix that really deploy the contract and then you should be good now once you're in there you will see all these functions that you can call so let's just go ahead and start checking out if we have all the tokens so the first item is going to be coin a coin B coin c so that works and then now if you want to test out get balance like I said a minute ago you can just pass in coin a and then the address which is in case it's going to be the the contract address itself and you should just get back the initial the initial number of coins that you minted onto the contract so you see those bunch of zeros after a one so that means this functionality is working so with that said let's move on all right now let's make a function that actually Returns the address of the coin so function get token address you will pass in a token name and then it will return an address so what we're going to say is return address token instance map and the token name that's literally all it is now let's go ahead and test it so I'm just going to go ahead redeploy the contract and let's try it out so I'm going to pass in coin a in there and there is your address so that is pretty much this function all right now actually let's start swapping eth to these custom tokens so what you want to do is just create a brand new function and we will be passing in token name because now this is where you're going to pass in coin a b or c or whatever this is going to be a public payable function that will return a number first of all let's create a variable and let's just store however much eth was sent to the contract so input value equals message.value and now what we're going to say is output value so basically the amount of coins that we'll be sending back to the user will be calculating that by saying input value.div and this is coming from the safe math thing so basically we'll divide the input value with the eighth value now e value you can just create another variable somewhere outside of this function and then just give it a value totally total it doesn't matter just make sure it's in weight and then we're going to be multiplying that by 10 to the power of the token instance map like how are the decimals we have with the token instance map token name dot decimals so these are all things that are coming from the a safe map so just feel free to pause the video check out what's what it is doing exactly and then continue from there and next up we're going to need to require that we are able to actually send that money so that we have that we have the funds in the contract to send the send back the output value to the user so that's going to be a requirement and then where it's going to be returning the output value just so the user knows okay this is actually how much you you can go ahead check your wallet now mind you on line 54 I have a typo in the required so just be mindful of that this test will fail but let's go ahead and compile there you go there's the air so hit compile deploy the contract and let's go ahead and test it out so swap beat the token I'm just gonna say coin a and then you have to pass in a value there so I'm just going to say ether point zero zero zero one whatever and I should technically I think be getting one coin a so that should be somewhere there so I'm just gonna paste in my wallet address and there it is that's the amount in way so that's literally one piece all right so with that said now let's go ahead and swap tokens to eth alright so now we're going to be swapping tokens back to eth so let's create that function we're going to be passing a token name and the amount and we're gonna be returning the obviously the amount of heat the user will get we're gonna need to do some some conversions here first so we're going to say a un256 exact amount and we're going to be dividing the amount that we're sending to the user or the user sends us so basically the user sends Us in way and we will have to convert it to eth so we're going to be doing that there and now we're going to be saying is to be transferred exact amount multiply by each value so the user sends us their coin in the value of way we have we convert it up to eth and then we're going to be multiplying that with the conversion rate so after this once this is done we're going to need to make sure that we are able to cover that a transaction so the contract has to have enough eth balance otherwise this transaction cannot go through if that is if that requirement is met we will just go ahead and transfer the eth that we need to transfer so that will happen through this we're going to say token instance map token name transfer transfer from from the map from the message sender basically the user we're going to be sending the amount that they are sending to the contract and we're going to be storing it and after that we're gonna and we're gonna be sending the you after that we're going to be sending the eth back to the user so with that said we're just going to return the value and that is pretty much this function now mind you this this function will need to be confirmed by the user we'll collect that on the front so now with that said there is only one thing left to do and that is to create a token swap function all right so the last thing we need to implement here in the contract is actually the token token swap so let's create the function and we're gonna have to pass in the source token name and the destination token name so basically which token do you want to convert to which token and then obviously the amount now this will be a public function and we will need to make sure that both the source token and the destination token has enough balance in the contract to cover this transaction so once that is done we are pretty much basically good to go and inside the require function we can just get done the etransfer immediately and obviously this will need to be approved by the user which again will be done on the front end so with that said now let's go ahead and deploy this contract okay so go into your truffle config and then whatever is inside your networks just go ahead get rid of it it's not really necessary and once you're done just go into our truffle and connect to a network now we'll as I said earlier we're going to be using infuro connect to infuria and your sushi swap project that we created at the very beginning of this tutorial should already show up so once that's there you click it you're good to go it pretty much connects your vs code to that Sushi swap project and now if you if you start deploying the product by you can just say right click and then hit deploy you just select the sushi swap girly Network and then you should be good to go it will get get started everything for you now it will take a little bit to deploy but just wait for it and you should be pretty much ready soon and there you go if you see your contract address at the end you are good and the project has been successfully deployed and once you're done deploying we're going to be doing a couple things to get our front end ready for for this project so go into your build slash contracts folder and just copy your custom decks.json file we're going to be using it in a little bit and now go inside your Source folder and just create new folder called utils and then just paste it in there and now we're going to cut go ahead and copy the custom token.json file and paste that there too we're going to be using that in a little bit this is the ABI this is what will help our front end to interact with the contract now once that is done just go ahead create a new file contract.js we're going to be importing ether because in this project we're actually using ethers and now you're going to go ahead import custom decks ABI the file we just copied and the custom token API the other file is just copied so we're just going to import both of those and now we're going to create a couple of helper functions that we will be taking advantage of later on so we will need to create two functions one for the token and one for the decks itself so we're gonna say export cons token contract it will be an async function and we'll create a provider ethers provider web3 provider and then we're just going to pass in with node ethereum don't worry about that part of that stuff if you have metamask installed the ethereum object will be immediately injected into every single website you visit and now we're gonna deconstruct ethereum out of window and we're going to be working with that now you will need to create a signer which is going to be provider.getsigner and the provider again two lines above that's where it comes from we're going to also create a contract reader now this is something that is only possible with ethersgs so we're going to say new ethers.contract we're gonna pass in the address that will be created with the text and then we're gonna pass in custom token API AI because inside your file there is a bunch of things but we need the ABI so that specific part of the object and we're also going to pass in the signer that will help us later on with all the transactions and we're going to go ahead and return the contract reader now we're going to go ahead and repeat this exact same thing for the Dex contract as well so the only difference that's gonna we're gonna have is we're just gonna hard code the contract address so that comes from your output and now we're gonna pass in the custom decks API that API and with designer so with that said we are pretty much good with this part let's move on to the next all right so now we're gonna go ahead and set up two conversion functions so inside utils just create a new file ethers Dash utils JS import ethers and we're going to be creating a twoway and a two eth function these are literally just going to convert as the name says export function to way amount decimals and decimals by default is going to be 18. so you're going to pass in the amount you want to convert to a in ethers and then just use the library so ethers.u.ls.parse units and then it will just do the conversion for you so you don't even have to worry about that and then just return this string version of that number and then this is going to be the exact same thing but the other but in the other direction and instead of Parts units we're going to use the format units method from the ethers Library so that's pretty much that function now let's actually set up the metamask wallet connection as well so I'm just going to spin up the app and let's take a look at it so right now this is how the app looks like and there's your connect wallet button not working so far let's take a look at what's happening so inside of app.js that's all you're Imports and wagmeconfig and everything so as you can see it requires infuria to connect to the blockchain so copy your API key and go back now you want to obviously put it in your EnV file and then that will make rainbow kit work perfectly that's literally the only thing you have to do and now let's just render out the connect wall button and as you can see inside of heather.jsx down at the bottom you can just there's a static connect wallet there so let's just go ahead and replace that with metamask we already prebuilt this component for you so you can just use it and that will go ahead and take care of your wallet connection if you and if your wallet address shows up at the top where the button was you are good to go and you can disconnect connect whatever wallets you want to so with that said let's go ahead and implement the conversion functions and we're done let's go ahead and create a new file in the utils folder and this is going to be a queries.js we're going to be importing big number and ethers from ethers and contract and token contract from contracts so this is what we're going to be using by the way to just get the East balance Also let's import to eat from the ether's utils file that we just created so we're going to say export const get balanced this is going to be an async function we're going to pass in the wallet address and the usual trial try catch so if if there's an error let's just console log it and see what's up and then in a try we're going to have a transaction that that's just going to convert the value or whatever amount so we're going to make sure that our wallet is connected meaning the ethers is not undefined after that we're going to go ahead create the provider how we already created multiple times and now we're going to go ahead and get the user's balance so we're going to grab the account so all the accounts that are connected to the app so away provider the list accounts and the user's account is very like the first one that is being connected and that's usually the active one because metamask sorts it like that now next up the balance in way is going to be provider.gap balance and then we're just passing the user address and now we have to convert that into East so we can use either the two eth function that we created or we can just type it out again and then we're going to be going to returning it however if you remember this is going to be a big number so later on we'll have to deal with this so let's go back to our index.js and in there we're going to be handling the balance so this is going to be an async function and this is going to be useful later on but basically when you try to swap you will have to select the source in the destination token and so that's what's going to get passed in here so if that if one of the tokens that the user wants to interact with is eth will have to get the each balance of the user and then display it so I'll show you show it to you in a little bit so if the first drop down is going to be eth we're gonna need to go ahead and get the balance of that and actually to do that let's grab the connected wallet so use account from wagme and then let's just save it so we're just gonna pass it in there and then we're gonna be setting the first balance to that balance and we're gonna convert it to a number and then cut down or I mean like what is it attach to decimals if it's the second drop down that is B that is selected as eth we're gonna get the we're gonna literally just repeat the same exact function but we're going to be saving it in obviously the second balance you state so now what we need to do is pass it into these coin drop downs as you can see we already have it highlighted for you so just find the find those two and then replace the string with the function name itself so just you can remove the apostrophes and then you should be good to go now if you run this app it looks like there is some sort of an error in our contract.js so let's check it out and it looks like that we imported the wrong file so we need to import custom decks.json not custom decks API all right let's see if it works so I just selected Ethan it doesn't seem like it's working if you see the balance is still zero which is not ideal so let's take a look at what's happening and apparently if we hand or apparently when we are selecting anything we are not running the function itself as you can see it's not even like completely white it's like this grayish color which means that vs code is recognizing that we are not calling that function so let's just pass it in there both in the first drop a drop drown and then the second drop down as well so with that said now this should work so if I'm selecting it and there you go it updates so as you can see now it shows up as 4.54 eth over there so that looks good let's move on to the next step okay now let's repeat that same process but for the custom token so inside of queries we're going to have another function that will get the custom token balances because we have to handle those differently so we're going to say get token balance and then we're gonna pass in the token name and the wallet address where we're interested in the balance so we will have the contract object which will be coming from the contract file and then we're going to use the get balance function that we actually wrote in the contract and then passing token name and the wallet address after that we're going to go ahead and return the balance and again this is going to be a big number so let's go back to index.js import get token balance from this function or from this and right down at handle ballot let's just add an if out yeah a new file statement in there let's go into the else statement and another if a statement in there and so if it's the first drop down then we're gonna get it for the first drop down if it's gonna be and set it as the first ballot we're going to be using a different we're going to get the balance using the freshly created function and then because it's coming back in way we'll have to turn it into ethers and then we're going to be set it as the first balance and then we're gonna repeat this same process but for second drop down with second balance now I'm gonna go ahead and cut this out so it's gonna disappear a little bit and then we're gonna may add a try catch function that's that's just good practice to do with blockchain apps so let's test out if it works and it looks like there are some errors that's because the address seems like it's off so that's probably because the user account dot address is how we're gonna get back the address add that there and when we're trying to get it from wag me and now it seems like the ethers package has not been imported so let's do that because that looks like it's going to be useful and as you can see now it works so eth is getting fetched and then we don't have any Bitcoin so it returns zero we don't have any Solana so that returns zero as well that looks like it's working now let's work on the swap functionality and we should be good okay so let's actually swap from east to custom token so let's create the function pass in the destination token name and the amount of eth you will want to convert usual try catch and then we're gonna create the transaction value which is we're going to figure it out by converting the amount from ether to way and then saving it in a object so we're going to create the contract object using the contract function we've already created then we'll get we'll create the data which is going to be await contract objects swap East to token and then pass in token name and the transaction value then that will generate a receipt once we wait for it so let's return that and then this function is essentially done go into back to your index file import this function and now we're going to handle it so handle the whole swap so try catch and and if either of the inputs are empty or if the first input is empty we're just going to return because there's nothing to do then and if the transfer coins from value is eth meaning the first value is eth and the second value is not eth we're going to be run this function so we're going to get the receipt from the freshly created function and then we're gonna say transfer coin to backend value and first input these are the these are the arguments we're going to be passing into the function so the first one is going to send the name the second one is going to send the value and there is the function being called and that when you hit that button alright so that should in theory work so I'm just adding numbers but it doesn't work yet now we're going to implement that it automatically calculates how much you will be getting by sending the X amount of eth all right so we're going to say handle output that will return that value so usual try catch and we're going to make sure that the first input is not empty and then we're going to be if the first one the transfer the destination coin is not eth and like we're going to make sure that it is an East to coin transaction and if so we're going to calculate the output value and that will be the we're going to get the first input converted to weight and make sure that we pass in 14 decimal digits and then convert it to eth and then we're going to convert it to number and add two and no decimal with no decimals and set it as the second input and that should in theory get it all done now we're going to run this same functionality if the values are changed up so if we want to transfer from Custom token to eth otherwise it's literally just the same value so if if it might if it's E3 obviously it's going to be the same value if it's token to token because those their value are equal it's going to be again the same that is good and up there in index we're going to be adding a new use effect that will basically just update the pen the output value every time either we change one of the drop downs or the input input boxes so let's test it out and it looks like that twoway is not defined in index.js so let's go ahead and import it apparently we forgot it and now let's just put in random values let's see if it works and it looks like it's it's looking so if we try to trade it looks like two ways again not being defined so apparently we have to import it into a query is JS as well and now it looks like the conversion from eth to custom token is working perfectly so with that said let's move on to converting back okay so before we are able able to swap back to eth or between tokens we'll need to add something called an allowance and that basically just allows you allows the app to do these sort of transactions so in our queries we're going to need to check for this allowance so we're going to create a function for that and we're going to pass in owner token name and amount usual try catch and then usual contract object get the address of the contract or the token so contract I'll mentioned get token address pass in token name and we're going to create a contract token contract object it's just the usual drill and for the transaction data we're going to be saying that token contract object allowance passing owner and the contract address and we're going to save the allowance and we're going to generate a big number from the data that's being returned we're going to convert that to way and then we're going to check if it's zero or below the the requirement require required amount if yes then we're going to return false otherwise we're going to return true and now we're going to import that has valid allowance function into our index and in our handle swap we're going to create an else statement and we're going to check if we have allowance for for the transaction to go and by passing in the current account and the with as the owner transfer coin from as in the like the token name and then the value if it returns true then we're good and we can go ahead execute the transaction otherwise we're get we're gonna have to just console off no user allowance for now and then in a little bit we're going to increase the allowance so let's see what do we got apparently we wrote that decimal value to the wrong place so let's fix that real quick all right let's see what we got and now it shows that there is no user allowance so that's good because we never increased the allowance so that's how it's supposed to all right now go back to your queries and now we're gonna actually increase the allowance so let's create a function for that and usual try catch pass in token name and the amount and we're going to say contract object in the usual drill import everything create all the objects and instances so we're gonna have the contract object address and then token contract object and then with data we're going to generate the usual stuff so now the transaction data will be generated by calling tokencontract object dot approve pass in the contract address and then the amount in way so now it looks like it's still not running that's because we haven't called it so we will have to import it in our index and where we console like no user allowance we're going to have to call that function that we just created cost receipt equals weight increase allowance pass in the token name and the value and now let's console log what happens and there you go now we have to confirm that we want to increase the allowance and we should be good to moving forward with converting tokens okay so the last two steps are swapping tokens to eth and then token to token they are going to be very similar so we're just going to blast through these and we're going to be done in a matter of minutes okay so in our aquarius.js we're going to be creating two functions the first one is going to be swept token swap token eth async function we're going to pass in which token do we want to and how much of it do we want to usual try catch and then just create all your objects generate the data however the transaction data is going to be using the swap token to eth function from the contract and then pass in required arguments a token name and the amount in way generating the receipt and we're going to return that receipt we're going to import this function in our index.js and if the user has sufficient allowance where we already wrote the if statement we're going to be calling this so let's remove that console log and we're going to be just saying conspiracy then we're going to save that in a variable or a constant and then passing the required arguments the name and the amount and we also want to run in again once we increase the allowance so there are two scenarios one the allowance is already there we just want to run the transaction otherwise we want to increase the allowance and then run the transaction so the user doesn't have to keep click so that looks good let's go ahead test it out there you go I'm increasing the allowance now and now the swap is going through so that looks amazing now let's go ahead and actually implementing the Tony token swap so for that we're gonna have a very similar function in the queries.js usual stuff now the slight difference is that we are going to have a source token and a destination token so we need three arguments instead of two we're going to generate the usual contract object and then this is going to be a swap token the token method that we're going to be calling we're gonna need to pass in both the source destination token and the amount obviously and we will generate the transaction receipt based on that and return that now we're going to be importing that in our index file and so far we only have two types of transactions one is when it is being converted to not eth and everything else but that's not the reality so let's add another if statement in after the so the second type of transaction that we are handling is the not East to eth type of transactions and and now we're we just implemented the token the token so the custom erc20 token to custom erc20 token type of transactions so we're going to be doing the exact same thing so we're going to check for a valid allowance based on the required arguments and then if we have enough allowance then we're going to run the function otherwise we're going to increase the allowance and that is basically the application so once again let's just test it out let's just see if everything works we're going to go from a custom token to another custom token we're going to go through the whole transaction flow so now the token spend is approved and now we're going to just reject it because it showed up as a duplicate so we're going to go ahead confirm it and now the transaction is going through that conversion is working so with that said thank you so much guys for following along this was an amazing build and with that I'll see you in the next one peace in this video we're going to be building the ubereats wet 3 Clone with next.js we're gonna be using infuro to connect it to the ethereum blockchain now we are going to be creating a bunch of nfts that will give you discounts in this app and we will be able to check whether the user has it or doesn't and then calculate the subtotal we're also going to have a bunch of goodies in this app so with that said let's go ahead and get started okay so as usual we're going to be using the clever programmer custom CLI tool that we built for you so just make sure you are on the latest version and let's go ahead and just type in npx lover programmer pop in your email then your name and then we're going to be selecting the solidity Uber Eats option and while that takes a while it'll also open up infuri for you so just make sure you have an account if you don't have one already and create a new new project but in the meanwhile meantime the terminal is apparently done and it opened up vs code so that's nice so let's just check out how the app looks like or don't and let's just go ahead create a new API key on inferior so we're going to be selecting the web3 API that is their combined all the chains that you will ever need a type of API so just name it whatever ubereats but just make sure you don't have space in between them because later on when you try to connect it to your vs code it is better not to have space in the project now it'll take a little bit to load and then this is what you're gonna see if you select endpoints that's all your RPC URLs that you will need all right let's go back to our code vs code and let's actually connect it to our vs code so if you don't have truffle already installed into your vs code now is the time to go ahead and do it it's a free extension it's just where every other extension is and just make sure you disconnect all the networks and then you just reconnect so you're starting this session with a fresh connection so go ahead straight away just connect to your infuria and uberes will pop up immediately and there you go that is everything you will need for this one now straight away let's go into our Uber Eats discount nft.sol file that is created by the CLI tool so let's go ahead and get started with that too let's set out the nft collection so we're going to be using solidity version zero eight zero so just make sure you specify that version and then we're going to be importing a couple of things from open Zeppelin so this is going to be an ERC 1155 compliant token so let's import that and also you want to make sure that whenever you're importing in previous builds we already had these issues when you're importing you will import from open Zeppelin contracts not just contract okay and we're gonna be importing ownable because these nfds will have someone who owns them and let's actually create the ubereats discount nft that is an ownable ERC 1155 token so it's going to be a child to those now we're going to create a string that's going to be a public string and that will be the token URI and we're also going to go ahead create a Constructor this is actually like standard nft procedures so you need a token URI you're gonna need the Constructor because that's how you whenever you're minting that's what's gonna run Constructor string memory token URI and then it's going to be ERC 1155 and then we're gonna have a mint function passing in the account the amount and this is going to be a payable minting function meaning the user has to pay for these nfts to be minted so we're gonna make sure that the user at least sends 0.01 ether otherwise we're gonna have to reject this minting and we're gonna be maintain the nfts into his or her account and we're also going to be passing in a couple of other attributes alongside with the amount so with that said that is your Uber Eats discount nft let's go ahead and move on to the next step all right so let's actually set up a couple of things for this nft so first off we're going to be going ahead and opening up our Chrome and we're going to be creating a ipfs API key the reason is when you have an nft you will have to sort the image somewhere and that's usually going on ipfs now again just don't leave any spaces in the project name so there you have it and now what we're going to be doing is we're going to be enabling dedicated gateways because that's something inferior can do and it's super cool so just pop in knit your name clever programmer whatever you really want to but what this will enable you to do is that it will create a subdomain under infuro's ipfs and that is going to be your own dedicated Gateway so once you save it you can go back to your vs code and we're going to be opening a terminal but you want to also make sure that you open it under the data folder so by default vs code only opens it under ubereats infuro so basically the project and then you can either CD into so just say CD data or just open it in the data folder directly so in there's this nice little Lamborghini image and the nft Json so the NFD Json is going to contain all your nft metadata and this is what we'll be using later so let's just rename it so it will be Uber's subscription description again a subscription for ubereats whatever you can that doesn't really matter but that's what you're going to show on show up on openc and you can also pop in your uh sub domain so basically what we're going to be doing is inside the terminal we're going to say inferior auth this is going to be creating a variable equals and then just the project ID column API Secret so that's exactly what's happening I will just save it into your terminal session and then you can invoke it later so you don't have to always copy paste these and then we're going to say curlex post so basically an API call to using the inferior auth authentication to this ipfs that impure is providing if you're uh ipf is the same dot impure that IO Colin 501 API v0 add and then we're going to be attaching the file so we're going to say that Lambo nft and the reason why and this is where it becomes important that you are in the correct folder with your terminal otherwise the lambo nft will obviously not be found so what this game is going to do is this will just upload the image to the ipfs now we're gonna have to because ipfs clears itself and if you pin it it won't clear that particular file so now we're going to say it's going to be another a post call but to slash API v0 pin slash add and in the arguments we're going to be popping in the ipfs we're going to say slash ipfs slash and whatever comes back as your hash as a response from the previous request just paste that there and that should be good to go once again this hash goes right here if it wasn't clear and then you will see your pins that is supposed to be the same hash that just came back or that you just pinned so now you can go ahead and put that at the end of the link and you will also want to make sure that you are copying your dedicated Gateway because that's the reason why we have it just paste it there and that will be your URL for the image so nice that works perfectly now we're going to repeat this exact same process but instead of the image we're going to be uploading and then pinning the nft Json file so I'm just going to go through this fast so we're going to say so instead of file limbo and nft we're going to say nft to Json the reason is for now we only uploaded the image but we haven't uploaded the metadata so now we created the metadata file but we have to upload and pin that and that's what's going to be used by the nft okay we uploaded it now let's go ahead and pin that guy okay there seems to be some sort of error oh and that is because there was a typo so if you type ifura instead of infuria that's obviously not going to work okay and now there you go it is working perfectly and now we're gonna create the pins XD file and we're just gonna paste the two we're just gonna paste the metadata location so that whenever we are creating the NFC we'll be pasting this link in there so that should be good to go let's move on to the next part Oak all right so let's now start converting the US dollar values into whey and ether the currency of the blockchain so if you're going to cart.jsx on 944 there is a const USD to way function it's going to be super simple super quick basically we're just gonna say const eth equals USD USD to eth and on line 36 as you can see it's already defined what that is so you can just change that it's not the scope of this project to include the live updating so just move on now we're going to be converting it to whey and that's going to be using the ethers Library so we're going to say ethers.utls.parse ether and then just pass in the eth.to string or the eighth value as as a string because otherwise it might be a because otherwise it's a number and then just return way done Network it's going to be even easier to convert USD to eth because we've already done that so just copy that one line and we should be good to go all right so let's actually deploy these nfts or deploy these contracts not an fds obviously so you already have your inferior set up if not you can scroll back and I'm showing you earlier how to set it up but if you're this at this part of the video just smash the like button because you've already seen that now you can hit that deploy button there and that will pop up open the little window that you can see right now and we're going to be using the girly Network so just select that and it will start going ahead and deploying and building our contract hold on a second there is some interesting things happening there so it looks like there is some sort of issues with the import and the reason is we have contracts twice so just remove the second one or first one whichever basically opens apple and slash contract and that should be good in theory all right let's try to run it again looks like it's working wait a second okay now Uber Uber its discount nft has some sort of issues and that looks like that's a typo so instead of this count you want to go with discount with t or let's try again looking good so far okay so looks like we made that same mistake again let's fix that oh yeah two more places line seven and eight hopefully you didn't make these mistakes and you're already deployed but that's all right if you did now is the time for you to debug again interesting oh okay so there's you all right I'll learn to type at some point I'm sorry that's all right so looking good this looks way more promising and there it is I think yes okay yeah execute command finish running command so that means deployment is completed and we are good to move on to the next step all right so now we're gonna go ahead and check whether the user has a discount nft or doesn't so what we're going to do is inside of our cart jsx there is a use effect which is the check which is a which has a check discount function in there so you just want to pop in a try catch and obviously if if it fails then just console log the error and in a try Clause you just want to say provider and it will be new ethers provider and then pass in window.etherium that's the code snippet that uh metamask passes into the browser and injects it in there then we're going to go ahead create the signer which is going to be provider Dot getsigner and we're going to be saving the discount nft address it's going to be Uber discount nft.networks five which is the Gurley Network and then dot address so we're going to be looking there and we're going to have the discount nft contract passing in the discount of the address passing in the ABI and the signer now we're going to say Kong's balance equals await discount nft contract dot balance of and then passing the signer dot get signer signer.get address and xero so we're gonna console log it and they previously declared yeah you state we're gonna we're gonna save the actual balance so set this counted and we're going to be converting whatever we get back to a number and we're gonna say balance.2 string so what's going to happen is we're going to get back the balance we're going to convert it to string because otherwise it's a big number and convert that into an actual number that we can work with and if that is greater than zero and we're going to be saving a true or false clause whether that is greater than or less than zero so that's what's going to be in the set discounted state so with that said let's check it out so we're going to go ahead refresh the app and so there's one item in the cart I'm going to go ahead connect metamask with the lovely rainbow kit and the balance is currently zero meaning that I do not have the NFD so obviously there is zero discount being applied and now let's actually mint the nft all right so let's mint the nfts so moving it into the mint nft function in cart jsx we're going to go ahead create a provider in the try clause the usual drill just fetch the ethers provider using the injected code from metamask then we're going to go ahead create a signer which is going to be provider.getsigner and then create the address structure the address so that basically the girly deployment address of the Uber Eats discount nft and we're gonna be saying we're gonna go ahead create a contract instance so discount nft contract equals new ethers.contract passing the address pass in the ABI and then pass in the signer then we're going to go ahead and generate the transaction which will be discount nft contract so we're going to be using the mint function of the NFC contract passing the user address which we get from rainbow kit by the way then we're gonna be passing in the value so that's how much we're going to be paying for the the nft so that's going to be 0.00 ether and then we're going to passing it as the payload and now we're just waiting so await transaction dot weight function that's an async function take some time blockchain isn't the fastest thing in the world and we're gonna we're gonna console log once the nft is minted so let's take a look at that connecting the wallet and minting and it's actually and there you go there is the balance now mind you that is in way I believe so there you have it the nft now is minted all right now let's actually handle the purchase and once this is done we are actually finished with this app so there is a handle purchase function now inside there usual try catch because we are working with blockchain so in the try clause we're gonna go ahead create the usual provider we've already done this now it comes the address instance or the contract contract instance but this is going to be the ubereats instance on the other one so pass in the address ABI signer yada yada and now we're going to go ahead and calculate the total card value so this is something new that we haven't done before now this is going to be this is going to reduce a function called reduce from the job from JavaScript I'm sure you're familiar with it but basically all it does is it Loops through an array and then just adds everything up or does a certain thing and then we're gonna have two variables that we pass in and basically add those two together and we are going to have a starter value which is going to be zero so basically all that's happening is we have the current value and the previous value and we're just going to add the current value to the previous value and therefore it will be summed up and we always start with zero so that is going to be your total USD value now we're going to be converting in into so that's using the USD to wave function that we've already built earlier and we will now check whether the user has the nft these content ft so we're going to set everything up for that so we're going to create the discount nft instance using the address the ABI and assigner and we're going to check the balance so we're going to pass in the signer signers address and then zero and that will return the balance of that specific nft in the user's bullet so if the user has more than zero then we're going to be applying the discount on the total value or like the total whale total way of value that was hard to say so we're going to say total way and then just get the get 70 and we're going to be multiplying it with 70 and then divided by 100 so that will give us the 70 that we're looking for so the 30 discount and we're going to be setting the set discounted to true and that will update the dollar amount and now we're going to go ahead and create the transaction so wait ubereats contracts dot by cart passing the total weight value that either gets modified or it doesn't so if it does if if it doesn't it is going to be the full value if it does then it's going to be the 70 of that value and the parameters are going to be value total away gas limit a hundred thousand let's just increase it from the usual 30 000 just so we have like extra room it's also it's free so it's whatever and we're going to be setting the gas price to null now we're going to create the receipt and we're going to be waiting for it and if everything goes successfully we will just route back to the initial page of this app so this page technically all right now let's add all these things to our cart and now what we're going to do is as you can see because we've already minted this nft the discount is already applied you don't even have to worry about it and so now we can just say place order and that's the if equivalent of the 4.4.90 so let's go ahead hit place that order and as you can see the loading screen works and it just threw you back straight to the home page so with that said that pretty much wraps up this build thank you so much for watching as always if you have any questions let us know in the comment section down below with that said I'm signing out peace in this video we're going to be building the solidity stock prediction that with next.js we're going to be using infuria to build this app on the ethereum blockchain you're going to be able to make bats on the weather a stock price will be going up or down with that said let's go ahead and get started all right let's get started as usual with the CLI tool so let's just run it email name and this is the solidity prediction dap so while it gets started usually in Fiora sign up if you haven't done it already do that already create an account they are amazing and go ahead create a web 3 API just name it whatever you want to in this tutorial I'm gonna name it prediction dap and so there's your API key we're going to be using that later and then our CLI tool is about to finish so once it does it will open your vs code automatically for you so this is pretty much it this is your contacts file and let's move on to the next step okay so let's go ahead create our contract which is going to be stockprediction.sol and as usual we need our spdx license which is going to be MIT and the solidity version will be 0.8.0 and then let's go ahead start creating our contracts so initially we're just going to create all the states variables and structs that we're going to be using in this project so we're going to have an owner which is going to be address we're going to have a uint which will be the prediction start timer and obviously an end timer and we're going to have a current price and we're going to be using int instead of uint and that's because int can be negative and not just a positive now we're going to create our mapping we're going to be mapping addresses to ins that's going to be the bets and we're gonna we're gonna create an array of addresses and those will be the best and then another mapping when we're going to be mapping addresses to UNS and that will be the BET amount so basically what we're doing here with these beddings is the people who are betting we're gonna be mapping the ID of the bad Tech to these addresses and then the amount how much they betted will be also mapped to these addresses now let's go ahead and create a last check time and a is betting active variables as well the last one is going to be a bull first one is going to be a uint then we're gonna also save the last winner and now we're gonna get on to make the struct so the first one is going to be the BET where we're going to be saving the better better address and the amount so it could be positive and negative as well and then the bad info again the address the amount or the better address the amount that amount and we're also going to create a Constructor so the owner initial is obviously going to be the message sender so whoever deploys the contract and then the prediction and time will be block timestamp block timestamp plus five minutes meaning after the contract is deployed you people have five minutes to bet on the app and then the is batting and then the battery batting by default is going to be false all right so that's it for now let's move on to the next step check okay so now we're gonna fetch all the bets that have current currently been made so we're gonna create a function get all bets it's gonna be a public function that will return a bat info array from the memory so we're gonna create a all back array that will have a bat info struct and now we're gonna go through and loop through all the batteries so oh and we're basically all we're gonna do is we're just gonna save all the attributes into all bats so what we're doing is for better amount and bad amount we're literally just grabbing all the data from every single bet and because we're later gonna be saving them that's how we're gonna be getting them so that being said let's go ahead and test it and the usual drill open up remix in your vs code and now what we're going to be doing is we're going to go ahead and deploy this contract now now let's see what do we have for some reason it didn't deploy oh and that's because there is a typo on line number 10 so after fixing that let's see what we've got and we should get a empty array and that is perfect if you get that you are good to go Okay so now we're gonna make sure that users will be able to get started betting because if you remember by default the is betting active is false so let's go ahead and make a function and call it start prediction and it will have an argument that will be an INT which will be current price let's close that and it will be a public function so it will need to be the owner who starts it because obviously only the owner is supposed to start these bets and we're gonna set the current price to the current price that we pass in after that we're gonna go ahead and set the prediction start time to the block blocks current timestamp and the end time to whatever is five minutes after that so let's set that and after that we're gonna set the is betting active to true now next up we're going to create a function which will be enter bat that will allow the users to make a prediction and so that's what we're going to be passing in it will be a public payable function and will require that the current timestamp of the block is less than the prediction end time meaning the prediction has to be active otherwise we're going to send a error message now we also require that the user sends at least .0001 eth otherwise like it's just such a low amount of money that we don't take those bets seriously so that's better mount and we're going to save that to the message sender in the mapping and we're gonna go ahead and push the better or better's address into the Bettors array and we're also going to save we're also going to map the value to the message sender is addressed so the current batters address and with that said let's move on to the next step all right so now we're gonna make a couple of helper functions that we'll be using later on so that's where we're going to be finalizing the prediction don't worry about that part we'll figure it out so help your functions we're going to have one that resets the last winner and that's all it's going to do so it will be a public function and obviously the owner has to call this function and literally all it's going to do is it's gonna say last minute or equals address zero done all right next up we're gonna have an is prediction over a function that literally just checks whether the current block timestamp is more than the prediction end time meaning have we passed the end of the prediction and we'll return true or false based on whether it's true or not now we're going to also have one that Returns the pull amount which is literally just the balance of this current address and we're gonna have one that helps us find the absolute difference between two numbers so we're going to be passing into ins one of them X and Y and then we're gonna see which one is bigger or yeah bigger than the other or larger than the other and then if x is larger than x minus y if Y is larger then we're going to send back y minus X so that's literally it all right so let's finalize the prediction so we're gonna have a finalist prediction function which will take in the current price now we'll need to make sure that the block timestamp has to have or the when we finalize the prediction the block timestamp has to have already passed the prediction and time otherwise we will have to throw an error and we also want to make sure that the betting is active at this point because only active beddings can be deactivated if you're what I'm saying now we're just going to initialize a couple of values here so just like in a regular sorting algorithm we're gonna create a closest prediction a state which is just gonna be the first bet who cares and then we're gonna go to closest distance and we're gonna calculate it and we're gonna pass in the current price and the closest prediction in there and we're also going to set the winner now this is where the trick comes in because this is where we're going to Loop through all the BET and we're gonna update the these closest prediction closest distance and winner based on whether the current distance or the current bets distance is less than the current closest distance so that's what we are doing here in this for Loop and then we're gonna update the winner as well you want to also make sure that the winner is always payable because you cannot reset it later you can but there are like complications with that which we don't want to go into right now after that we're gonna We want to make sure that the pool is not empty meaning at least there is one bat that has a valid value now after that we'll also make sure that the winner is not just an address zero and if those two are good to go then we're going to transfer the pool's balance and about everything in there to the winner and then we're basically going to update the last winner and then just reset everything so prediction start time prediction end time current price is betting active and everything we just go and reset it and we're gonna do the same thing with batters as well but we have to do it one by one so we gotta Loop through that and once that is done we're just gonna reset the Batters rate as well and that is finalizing the prediction let's move on to the next step all right so now we're gonna go ahead and deploy this contract so let's take a look at what the so let's take a look at what the first step will be so let's go ahead and just connect to our inferior Network and the project should show up if you don't have it just sign into your impura extension and you should be good to go now let's go ahead deploy again with the extension and then just select the girl Network that'll be the easiest and I believe the only one that's still working so let's see what do we got all right so now it says that in line 91 there's a u in instead of a u in so let's fix that should be good try again okay now message value something's not okay there let's check it out let's see what do we got oh we gotta put in The Ether let's try again now the current price is not okay on line 61. it would be a great idea if we if we defined it so let's do that let's try again let's see if it finally works and it looks like there's a weird error going on so we actually took some time to figure it out and basically on infuri you shouldn't really put space in the project name because that could cause errors so let's just remove the space and then we should be good to go disconnect from it reconnect and it should be good and now if you deploy again it will go through and it will be perfect so once you're done there is your contract address and if you see that you're good to go that's it let's move on okay so if we're done deploying we're gonna go ahead and copy that address and then just paste it into our contract.js so that way it is updated and we should be good to go now one more thing what you want to do is go into your build contracts and then just copy the file over into your utils folder that's your API no need to worry about it it just helps you interact with the contract itself okay so let's start fetching those bets so let's just go ahead and spin up our app so this is how it looks like everything works metamask quality connects super nice changing wallets nice okay let's go into our context I have a couple of premade functions for you so you can just go ahead and fill those out or fill out the blanks and then you're good to go so inside of fetch bits there is a try catch function I'm gonna start working in there so we're gonna go ahead and pull in the contract using the create contract object function that we already imported for your convenience so there it is super nice it already uses it it already uses the address that you just popped in there so that's cool and now we're gonna do is we're gonna say bets equals weight contract dot get bet so we're already using the contract that we just freshly deployed so that's nice and we're gonna say formatted bats and we're gonna Loop through all the bets and each bet what we're gonna return is we're gonna basically we're just gonna organize them into like objects so we're gonna get the address the amount in a string and we're gonna get the BET amount will have because it's a big number we'll have to format it into string so that we can convert it into eth once we converted it into eth we'll need to convert it to a number so that we can fix it and make sure that it only has two decimals so that's a little nasty just pause the video and then copy and now we're going to update the you state and we're just going to go ahead and console log it so that we can double check that it works and inside our use effect that is getting fired every time is betting active is being changed we're just gonna fetch the bats and that should be good so let's take a look at how it looks like so I'm going to open up my console and there it is there's the array that is empty so that means the uh the fetching works alright so now we're going to go ahead and fetch the owner and the pool so let's go ahead and start filling that out so usually let's create the contract and then the owner will be await contract dot owner and then we're gonna go ahead and just update the use State and then again we're going to run that function every time the is betting active is being updated we also want to go ahead and console login let's go ahead test it out and there is the contract owner address which is because it's my wallet because I just deployed it all right let's move on to the next step which is fetchbook it's going to be very again there's your function just import contract and then who will be contract that gap pool amount and then we're going to convert it to eth and then update the price so let's take a look at how that looks also you want to fire it off in the use effect and there should be your big number there should be your amount so with that said we are pretty much good for this step okay so now we're gonna do a little bit of a complicated stuff so there's this other use effect so basically what here we're going to be doing is we're going to run it every three seconds and we're just gonna check if the betting is over so let's just do that real quick so that's your function to check if the betting is over yet or not and if it is then we're gonna go ahead and grab the is over from the or the is prediction over from the contract and basically we're just gonna go ahead and reset the timer clear the timer and we're gonna go ahead and finalize the bedding stop everything where it's at and grab the latest winner that way we can start sending the money to to the winner so that should be pretty much good to go however if the betting is not over that's the part that's being written right now then we're gonna go ahead and reload this same exact functionality again and come back to it again in three seconds so that is pretty much all it is let's just add a couple of console logs just so we can make sure that everything is Gucci and we can see what's happening so we're gonna add checking status and all that stuff and there it is it shows up that we are checking the status now let's add one more thing which is let's let's just console log the is active so we should see a bunch of falses every three seconds and there it is it shows up and it keeps updating so with that said let's move on okay so now we're gonna go ahead and implement the start prediction so usual grab the contract from the usual place and we're gonna have a another contract interaction so we're gonna call the start prediction function in there so we're gonna turn the coin coin price into way so we're gonna attach basically 18 decimals and set the gas limit to 80 000. now we're gonna go for and go for it and get the receipt so the usual result.weight and console log that just to make sure the Contracting reaction went through and every time we start the prediction we want to go ahead and reset the last winner so we're gonna do that as well so let's go ahead and test it out and if you can see in a little bit I just hit the start betting button and the contract interaction is going through and confirm and now it's pending and it will finish in a little bit so let's see what do we got and there you go the betting betting right now is active and basically I'm not gonna bore you with that but I was sitting around there for five minutes and as you can see at the end the betting is over so that seems to be working as well let's go ahead and now enter the bet okay so let's finalize the prediction right now so what we're gonna do is we're just gonna call the contract function that we've already written so we're going to say finalize betting or finalize prediction and then we're gonna have to pass in the current coin price so that the algorithm can decide who won and who didn't and obviously in a way so we're gonna set the gas limit to 200 000. so that's good and let's see what do we got so if everything is okay the automation or the app should pop open or metamask and as you can see there it is now we're gonna go ahead hit confirm on it and so now it's just going through and the funds will be transferred in a second and we're gonna see in the con in the console how the betting is over and there it is now it says false so that means the betting is over that only means one thing that we have to now fetch the last winner and so we're gonna do that with the usual contract interaction and we're gonna say contract that last winner that will fetch it for us and then we're gonna set it to the U state so we're going to truncate it so that way we don't see like the entire big address we're just seeing like the important part the beginning and the end and we're going to run that function and that should in theory go through so let's go through the whole process again so I'm going to go ahead and start a new bedding hit confirm on it and it will get started in just a little bit now the batting is active so that's good let's make some bats here now let's use a different account and make another bet and let's see what happens so you'd want to make sure that when you're testing it your bet is different from two separate accounts so that's something important to keep in mind and now let's use the admin account again to finish the betting and it will pop open automatically we cut it out but basically we set it out and so there it is the funds will be confirmed if you can see the funds are sent and there it is in the middle the last winner is being updated so that is the app thank you so much for watching I hope you make a lot of views I hope you got a ton of value out of it and with that said I'll see you in the next one peace in this video you're going to be building Airbnb with next.js you're going to be using solidity to build a contract and we're going to be using infuria to build this app on the ethereum blockchain you will be able to list and rent out your property you will also be using rainbow kit to connect your metamask wallet to the app itself so without wasting any more time let's go ahead and get started as usual we're going to be using our clever programmer CLI tool and after you're passing your email then your name you're going to go ahead and just type in solidity Airbnb or something along those lines and it will show up and then it will start installing everything and will also open up infuria so go ahead and just create a new key or sign up with them if you haven't done that already and just name your key Airbnb and then copy that key because we're going to be needing that very soon so at the very top you can see there is API key just go ahead copy it and then let's move on in the meantime our CLI tool will go ahead and open vs code for your convenience and you can just go ahead and get started now inside there you have you see there is a couple of files and that's where we're going to be working before we go ahead and get started just go ahead open up the terminal you can just hit command J and then check out if it runs or if everything is installed correctly just run yarn and then npm installed just for safety and then if everything is ready and good to go you should be able to start this app up by typing in yarn Dev and this is what you will be able to see so if you got to this point good job let's move on to the next step alright so if you so if you've seen that just go back to your vs code and now open up a new terminal or you can just stop running the app and then just type in Truffle in it that will initiate your truffle project which we'll be using throughout this project so now go into your contracts folder and create an Airbnb be a Sol file that's where we will be writing the contract itself and under that in migrations a zero one underscore deploy.js file will help you later in the build and deploy the file the contract itself so let's go ahead and create the instance of the Airbnb artifact and then this deployer function will help you actually deploy this contract so just type in module exports function deployer and then deployer.deploy Airbnb and then you can just forget about this file for the rest of this build because we're not going to be typing here anything else anymore I believe and uh one more setup thing that we need to do is just go into your truffle extension if you haven't installed it already it's available for free in the EVS code Marketplace and then just double check that under infuria service you actually do see Airbnb if you do not this is how you connect just hit connect hit the three dots hit connect to network and then inside and then just select inferior and under that your projects will be listed and then just select Airbnb if you if your projects are not listed you will need to sign in but it's a piece of cake and once you see Airbnb there you are good to go and we can go ahead and get started writing the contract all right let's go ahead and get started with the solidity contracts so first things first we're gonna have to specify the spdx license identifier which is going to be MIT in this case it's an open source project then we're going to be specifying the solidity version which is 0.8.16 if it's if you're on a different version I recommend you switch to 0 8 16 otherwise there might be combat compatibility issues next up we're going to start the contract which is going to be an Airbnb obviously and we're going to have a couple of global variables in here the first one is going to be owner which is going to be a public address then we're going to have a counter which is going to be a public number and we're going to have rental IDs which is going to be an array of numbers again public now we're going to set up the Constructor here and the counter is going to start at zero and then the owner will always start at message sender so with that let's move on to property info struct now we're going to be setting that up right here as gonna be a struct as I said and it's gonna be it's gonna have a couple of things so it will have an owner it will have a guest those are going to be addresses and then it will have a name obviously a string a property address which is again going to be a string a description again string and an image URL which we're going to be stored as a string here and we're gonna have a booking starts at which is going to be a number these are going to be dates obviously that are going to be a booking ends at so this is what we're going to be checking later on and we will have a price per day and then of course we're going to have an ID and the bully a Boolean which is going to be checking whether or which is going to be storing whether the property is booked or not now next up let's go ahead and set up an event which is going to be called property listed and it will have a it will have a couple of properties so name property address description and image URL and then we're gonna be also having the price per day ID and there is an error which I'm not okay it's gone so that's good so that was probably a bug and then we're gonna have another event which is going to be property booked event and then we're going to be storing the ID guest number of days price and these properties in it so these two are basically just console logging but on the blockchain so let's move on to mapping the properties now we're going to go ahead and create a mapping and we're going to be mapping numbers to a property info and this is going to be called public properties all right now let's go ahead and build the list property function so first of all we're going to have a couple of things that we're going to be passing in here the name property address description image URL price per day and so these will be the stuff that we will be using to run this function this is going to be a public function by the way and we're going to go ahead and create a new property variable that is going to be local only and we're going to be storing that in the properties array at the counter index it will have a couple of it will obviously have every single and we're gonna go ahead and assign values to each key so we're going to say and then the prop new probability the name equals name and we go through the entire thing description image URL price per day the ID is going to be the the counter we're gonna have the is booked it starts with false and then the booking starts at and the ends at dates will will be initially zero the owner is going to be message sender and then the guest is going to be address zero which is just basically a plain 0x000 address that is just like an address zero and then what we're going to be doing is we're going to be storing the counter so that now that it exists we're going to be storing it in the rental IDs array so we're gonna push it there now this is an optional step but since we created all the events now let's go ahead and emit the property listed event and then pass in all the required arguments sort name property name property address description image URL price per day and counter and then increment the counter okay it says the property listed event is an Undeclared identifier oh that's because I didn't call it or I didn't name it properly initially so let's just let's just fix that and that is pretty much this section all right now let's go ahead and test the our newly written function so we're going to do is if you don't have it already just install the remix IDE extension and then set the compiler version to match the contract version and then just hit run deploy run and deploy and hit activate now that will pop this window open and then try to connect to the blockchain but there is a big chance that it cannot connect to it because we probably don't have ganache running so just open your ganache copy your RPC server port and then you can obviously put in your inferior link as well for development purposes it's easier to just use ganache for now and then when you deploy it you just deploy it using inferior and so you just change the port and once you're good just hit connect and there is your there are all your wallets and everything so now just hit compile on the contract and then you can go ahead and hit deploy as well now we'll flash a little bit and then you will be good to go you can call the counter it should say zero and then you just basically run through all the functions try listing a property with the whatever dummy data you want and then see what's happening now the one thing that I'll say though is if you try to put in the price in the in eth or any kind of like nonhole number like 0.001 that's not going to work it can own it can only work with the integer so what you want to do is go to this heathconverter.com website and then whatever price you I imagine in ether just convert it to weight and then put that number in there and that should work and now if you call the properties properties function you should get back all the details and that's pretty much it alright so let's go ahead and build now the book property function so that will have a couple of arguments property ID a start date and they just pass those in so we'll be a public payable function because there is going to be actual transaction that's going to be happening in this function and so what we're going to do initially is we're going to calculate the number of days using this easy nice little formula and so what's going to happen is on the front end we're going to be passing an end date and start date as milliseconds so here we actually have to calculate that and because that's how JavaScript works and then here we just have to turn it into what is it actual days so we're going to be we're let's see how much one day is in milliseconds and that's the number right there that 86 4 and a bunch of zeros pause it here copy it over I'm not gonna say it out because I I can't even count how much that is all right give me a break I'm old so just put it there divided by whatever number comes out and then after that what we're gonna do is now that we have the number of days and we know based on the property ID how much this property costs per day we're gonna make sure that the user is sending you know enough eth so we're going to be using the properties map or the properties mapping to calculate that so we're going to say number of days times the price per day for that specific property and then that has to be less than the message values so basically the the amount of eth that the user is sending if not we're gonna have to reject it with a send more eth or whatever error message and then here we're going to say payable properties property ID owners so basically all the if that is getting sent to the contract will be transferred over to the owner and the entire thing and then we're gonna set the is book is booked element of the property of the specific property to true so that others cannot book for the same period and then we're going to save the start date and the end date and then obviously the guest as well and then we're gonna go ahead and run the property booked event and we're going to emit it and that is basically the function all right so now that we've wrote this function let's actually go ahead and test it so the usual method just open up the remix ID extension and then we're going to go ahead rebuild and redeploy the same contract and so you will see version two right there so you can remove version one and there it is and now what you want to do is because it's a new like you will have to list the new properties just pop in whatever values you want to basically you just want to have one property there just test that it still works everything nothing has broken and now we're going to be testing the booking so you will need two dates in in like millisecond ISO format and so here's our eighth and so I'm just gonna whatever copy that but you can just go to the same website and then use whatever dates you want to just put a start date and put an ending date there and then if you just try to run this function right now you should see an air air so that error is good because we actually haven't sent any to this like right now so for now just whatever value you want to pop in there but you should technically be calculating how much it costs per day and you just put in whatever value that you like make sure that is more than in the initial value or the price that you would need to pay and then just hit call and you should now see your your wallet address at both the owner and the guest properties and you should also see that the 10th argument which is booked that should be true so with that said if you see all those things then you're good to go now let's go ahead and set up the wallet connection for our app so we're going to be using wag me and rainbow kit and all these things with it so let's work for it let's go ahead and import rainbow me Rainbow Dash me slash rainbow kid style CSS and then chains configure chains create client and wag me config from wag me and then get default wallets rainbow kit provider Dark theme obviously you don't have to import Dark theme but it looks better from Rainbow me slash rainbow kit and then the inferior Provider from wagme provider infur and later in the video I'll be fixing that typo but that is actually provide durs with an S at the end so plural and then the same for a Json RPC provider a chains and then okay so let's go ahead and set up chains and the provider so we're going to be using configure chains and then just pop in a array of chain.gurly and chain that localhost so what we're going to be doing here is just see all the different chains that this application will be able to connect to and for each of them there's going to be two providers that we're going to be setting up so we're going to be using infuria to connect girly and then we're going to be using ganache to connect to the local chain so for inferior we need to pass in the inferior API key I hope you still have it copied on your clipboard and then the inferior provider will be traded with the with higher priority so let's grab the API key again if you don't have it so just copy that and then create an EnV file put it in there and then just make sure that the names match up so inferior underscore API key or whatever you want to but you got to make sure they line up between the app.js file and the EnV file otherwise there will be an error and then for Json RPC provider you need to put in obviously priority number two but you can just skip that and then you have to configure the RPC itself because aim viewer comes with the RBC but not with the API key the Json RPC provider is completely custom so for RPC just say chain and then hdp 127001 75 45 basically it's your local host and then just copy the link over from ganache and then we're going to create a connectors from get default wallets and then you just configure it with whatever app name you want to pass in Chains and then create a wagme client and then just make sure the auto connect is true that way the wallet will be connected automatically and then passing the connectors and the provider now you want to go down and wrap the component between the wagme config passing client and wag me client and then wrap rainbow kit provider around the component as well and then that should be pretty much it now here's the fix that I was talking about so just that's the error that's going to cause so just make sure Beam for your provider and the Json rpz provider you fix that and then put in the plural and that should be now good and now if you go over into header you will need you will want to import connect button from rainbow kit and then all the way at the bottom just render out connect button and that should show up right now and it should be working so if you disconnect or whatever your your wallet now you will be able to connect and use the rainbow library to connect your wallet to your app so with that said let's go ahead and move on right so now let's go ahead and using the wagme library we're gonna be we're going to be saving the address of the user who connected their wallet so we're gonna import use account from wagme and then just extract a dress out of it and that will take care of that will take care of literally everything for us and every time that address changes we're gonna want to run a use effect that makes sure that the address actually exists meaning there's a wallet connected to the app and then we're going to be saving that address in our set user address use data and the user at a few State just to make sure it works you can go ahead console log it and then you can run a couple of tests there it is there's my address I'll connect it and then if you change it to a different wallet it should update and show you a different address now next up what you want to do is go ahead create a new folder called utils and inside there we will create a constants.js file so in here we're going to be importing the contract from airbnb.json and don't worry about it we haven't put it in here yet so we're gonna put it in just a second and then we're going to import web3 from the web3 package and now we're going to go ahead and save the save the address of the deployed instance of this application however we haven't deployed it yet so let's go ahead and do that right now just go ahead and right click on your airbnb.sol and click deploy and then now you want to go ahead select the girly because we're on the girly Network and use inferior there's your link so just double check that it's there and now using inferior just go ahead and deploy this contract and in a little bit it should show up your freshly deployed nice little warm and toasty contract address so just pop that over there and now you want to go ahead and Export a create contract function so all that's going to do is it will extract the ethereum object from window and then using that it will create a new contract so we'll say new web3.eath DOT contract and then passing the AI and then the address so now let's actually put in the API in the same folder so inside of build slash contract there's the Airbnb the Json file that's the ABI and so we just want to go ahead copy that and then paste it into utils and there it is now you will be able to import it now there's one thing that was supposed to be there but for some reason it got deleted as a modal Styles will be it's not really a blockchain related stuff but it's just some styles that got deleted so just copy whatever I'm typing there so it'll be modal Styles and then content 300 pixels height and then 400 pixels wide margin Auto margin top 150 pixels and display flex and then for overlay it'll be a zero zero zero and then 0.7 rgba it's whatever that's fine just copy that and then you should be and now what you're gonna do is go back into your use Airbnb JS file and then import the create contract function that we just created in constance.js and right here in the use effect you want to set the contract and then put the create contract function in there just make sure you put the open and closing brackets there so that it actually runs and so with that said that should be good all right let's go ahead and fetch all the properties none of them are going to show up because we don't have any but let's still do it so we're gonna have a function get property this is going to be an async function because we are handling blockchain stuff and in there we're gonna have a we're gonna have a try catch if it goes on error we're just gonna console log it and I'm gonna have to worry about error handling for now I need to try we're going to have a number of properties which is basically just gonna fetch the counter from the contract so you can go back and check what that does but basically it's just a number that counts how many properties we have and so once that's done we're gonna go ahead and set the properties use state to an empty array you will see under you will see in a little bit why and so what we're going to do is now we're going to Loop through all of the properties but the way we're going to be doing it is we're going to have to fetch individually each and every single apartment so what we're going to do is go from index 0 all the way to a number of props and we're gonna call the contract that methods properties we're gonna basically fetch from the mapping every single property and whatever we get back we're going to need to format it because the blockchain sends back a bunch of random stuff with the useful information so we're going to have ID name we're gonna have description we're gonna have price per day we're gonna have ispoke and we're gonna have address I believe and you will later see it but I here I forgot to import IMG URL so go back copy that from the contract and just paste it here it will save you a little bit of a headache later but I'll show you that anyways and now what you're going to do is append the formatted property to the current Pro current state of the properties you say now what you want to do is create a use effect that runs every time the contract changes and then that use effect will run the get properties function so every time a new contract is loaded up we will be fetching all the properties that are and then go ahead console log it and if you get a empty array good job now let's go ahead and implement the add listing function so we don't just get an empty array so we're going to say cons to add listing equals is it will be an async function and we'll need to pass in name property address description image URL price per day to it and what we're going to do is obviously if the contract is if the contract exists we're going to have a try catch and we will be calling the contracts methods list property function and then pass in everything that we so name property address description image URL and price per day and then we're going to be sending that from the address that is logged in to the app for a guess where you can just pass in like 3 million and then gas limit and all and then just go from there once that once we added a new property you want to refresh refresh the properties so just run get properties function and to be able to use this function outside of this hook you will want to go ahead and Export that or return it so let's see if it works so I'm just gonna click it and something seems off so let's see what's up with down create it seems like it's not defined let's define it so inside of new listing form that JS let's create that function and you want to prevent default so that the page doesn't reload itself and then what we're going to do is we're going to calculate how much the price per day is in weight because if you remember the contract only works with way so we can use the web 3 we can use the web 3 library to do that so weapery.2way and then passing price per day and then the original type is ether and so after that you can just run add listing pass in everything that it requires and now with the newly calculated price in way and now that should be good to go so now it should work so let's just test it just some dummy data upload an image perfect and let's go pay for it and as you can see now it was successful I'm gonna refresh and it looks like the address is not defined so let's see what's happening with that listings listing item we need an address oh yeah we gotta import it so let's just do that real quick and then the structure from user BMB okay that looks good and now it looks like the image is not loading for whatever reason and it says the source is missing however the sources clearly there so that can only mean one thing and that means that when we are pulling in from the contract we are not actually destructuring it so we just confirm that with a console log so let's actually do that this is what I was talking about so just put it there fetch the image URL and that should solve the issue now it shows up twice but if you refreshing it will only show up once and the app is good to go now we only have to book the property and we are ready with this app okay so the very last thing now that we need to do is being able to book the property so let's go ahead and go through that and we're done with this build so in use Airbnb we're going to create a new function that'll be that we'll call book property and it will be an async function with the arguments ID start at and end that so first we're going to check if we have a contract and everything's ready to go on the blockchain side and then we're gonna be running a try catch just to keep things safe now we're gonna have to check what the due price is and we're going to be using the contract for it however we haven't made that function on the contract end so let's go ahead and do that right now so let's go in there and in Airbnb Sol we're going to create a new function get due price and we're going to pass in three arguments ID start date and end date it will be public view function that will return a number so first what we're going to do is we'll get the property from the property is mapping using the ID then we're going to calculate how many days it will how many days the guest would like to stay using the same exact function formula that we already used and we're going to be returning the number of days time the price per day so basically the total due price that's all for the function will do and then we're gonna go ahead let's actually we're going to go ahead and redeploy this function the reason is every time you change something on the blockchain I will have to reapply it so that comes with having to update the contract address and the ABI as well so go back into your instance JS in the urals and then just update the contract the address cons and now we're gonna go ahead remove the original Airbnb Json and then replace it with the new Abi so once that all once all that is done we will have the due prize and now what we're going to do is using the book property function in the user BMB a hook we're going to call we're gonna go ahead and book it we pass in all the required data so from user address and then value due price because we now we have it so that way there will be no overpayment underpayment nowhere is there and passing the required gas limits and then once you call once you book the property you want to refresh the page so just run get properties and you should be good to go and uh here are the starting day at start day end date you state and everything that is being run in the in the booking model is just to show that this is how the other side of the app works all right let's go ahead and now test it so we're going to add a new listing just like we did last time so all right let's let's get all of it done as you can see it shows up perfectly and now let's go ahead and book it and let's see what happens so this is a perfect nice little is it perfect it's not a perfect nice little modal so let's just book three days and hit confirm and it looks like book property is not a function and it doesn't exist and that is likely because we haven't exported it from the hook let's go try it again and now it seems like it's going through and contract interaction is as you can see the moment it's done pending and you refresh the page the property will be unavailable so that is it that is the app now go ahead and feel free to build on top of it add new features to it and with that said thank you so much for watching see you in the next one in this video you're going to be building Instagram web 3.0 adapt using infuria on the ethereum blockchain you're going to be able to upload images create posts on the blockchain and verified I'm using etherscan another and other users will be able to come over and retrieve and view those images and kind of on the fan style they will be able to tip you so that's uh let's go ahead and jump straight into the build all right let's go ahead and get started building the Instagram clone so as usual step number one is always going to be using our custom made clever programmer CLI tool well obviously without the quote that would be helpful so pop in your name and email obviously yeah in the other order and then you can just start typing Instagram and it will show up right there and as you can see it literally just opened up infuria go ahead accept that and if you don't have an account yet you can go ahead and sign up right here I'm already logged in so I'm just going to go ahead and click dashboard but once you sign in this is basically the screen that's going to greet you and here you can see I have a couple of projects from before but we're not going to be using that now so you can go ahead in the top right corner go ahead and generate new key you want to select web3 API which says formula ethereum because if you are now is supporting a bunch of random chains so I don't even know how many genes they do support but you will see inside so I'm just going to type in Instagram and then hit create and then yeah these are all the chains they supports inferior is jacked this is the key that you're going to be needing so go ahead and copy that you can just press that and then we'll say copy the endpoint and we'll actually wait a little bit until the CLI tool finishes setting up our project and once we're there we're going to continue now once you see opening vs code and ready and actually it opened up on my other screen but here it is the Instagram clone starter files and everything and you can go ahead and double check that all the node modules are installed so like you should see it here and then you should see it there and that should be basically pretty much enough to go with let's go ahead and spin this application up so what I'm going to do is use the builtin terminal in here and I'm going to use that to CD into without the caps lock see it into my next app and then once I'm in there I can just go ahead and type in yarn Dev and as usual our next application is up and running now I'm going to need a chrome for that let's go ahead and grab that Chrome and I'm going to put it right here little window management there and let's go ahead and just type in localhost anyways here's the Instagram code and this is what we're going to be using to build on top of and with that said let's go ahead and get started building the contract all right now let's go ahead and get started setting up all the ethereum related stuff wait let's just put a contract on the ethereum blockchain and to do that we're going to use truffle so we're just I'm just going to type in Truffle in it oh actually I shouldn't have done that all right cut all of it like the video is starting now actually it's starting now all right let's go ahead and just build this contract and get everything onto the ethereum blockchain so what I'm going to do is just create a brand new folder in here I'm just going to type in truffle app and then using my terminal I'm going to go into truffle app and then just type in trouble in it ah no need for four no one into two no need to force it so that should be taking care of it pretty soon all right back to folder creation so now that I have my new folder wait all right so let's go ahead and add a new folder which I'm just going to call truffle app and using my terminal I'm just gonna go in there and you can go ahead and set up a brand new truffle project that will be very easy to deploy onto the blockchain using truffle so we're gonna type in truffle then it's space period and that should be a pretty fast thing to do now there's a few things that we're going to be doing so step number one go into your migrations folder so don't worry about that file you won't have it and in your migrations folder you want to add a new file that will call 0 1 underscore deploy.js and actually before we set that up one more thing I like to do is just get started with the contract so what you can type in is Shuffle create check and then just say inspect Instagram like that and that'll like basically just create a new solidity file with all the basic stuff I'm going to go ahead and zoom in for you making it nice and big that's what she said so now that there's that's out of the way we can go into our deep deploy file and we'll need to import that same contract that we just created so const Instagram equals and instead of like regular required we're gonna use artifacts require and we're going to go and we're going to go ahead and say module exports and Export the deployer itself we're not going to be using this for a little bit this is just the setup set the contract up to be able to deploy and it's such a quick thing that I figured like I'll do it now and usually I forget it if I do it after I finish the contract so I just wanted to get it out of the way and now let's go we're actually going to start typing solidity code so before we go ahead before we do anything what we're really going to do is update the version of the solidity or update the solidity version we're going to be using and that's going to be 0.8.17 that is currently the latest one at the time of shooting which you can see September 29 9 A.M or like almost 10 at this point and we're actually not going to use the Constructor at all however what we're going to have is we're going to have a struct which you should just think about it as like an object we're gonna have image objects that we'll have to predefine and they will have an ID they will have an image URL which we're just going to call URL then obviously they will have a caption and they will have and because this Instagram will actually allow users to tip each other we'll actually store the total tip but tipped amount basically there and then you also want which obviously shouldn't really be a string it should be a un256 so I don't know what I did there but then you want to have an author that's going to be payable because the contract will actually figure out all the tip transferring things so it will act as like stripe sort of thing it's going to be a payment processor as well and so we're just going to call it author and then I like to create an address an array of addresses of all the tippers so Tipper addresses like that and so that will be our image oh yeah that errors went away so that's cool and there's going to be a few more things that we're gonna be setting up so we're gonna have a uin which will be a public number and that just that's gonna literally take care of the amount this is going to count how many images we have so this is going to be an index and that's the that's what we're going to implement and use it as ID later on dude and so one more thing we're going to be adding is a mapping and that mapping is all it's going to do is we'll be able to fetch individual images using this mapping so we're going to have the ID that we're going to map to an image which would be a public public variable and you should just think about it as like a tuple or some sort so this mapping will look like that and we're gonna have two more more events that we're gonna get started with so event number one is going to be image created that we obviously going to fire off when we create an image so you want to have an ID for that you want to have the URL in there you want to have the caption and caption like that and you want to have the address payable and it's going to be the author so that's basically all it is all it is to it actually you should rate the lines unlike me I'm not entirely sure why is that it thinking that there is some sort of trolling comma there but clearly not a trailing comma that's a trading comma now that's all right whatever we're going to leave it it's going to figure itself out I don't care let me figure it out and then we're gonna have an image tipped variable which will have another uint ID which image was specifically tipped you want to put the URL there so whoever is looking at at etherskin is going to see that okay this is the actual image I'm gonna have the caption you want to have the current tip that was actually awarded to you're going to have the current tip stored which like you can literally see the current person how much the current person have actually donated to that author and then I'm gonna have the total tip and then we can just put the address payable once again like that so break those lines again all right let it figure itself out I don't really know what is happening oh it says okay expected that guy semicolon and yeah that's actually something that I keep messing and I keep forgetting to put semicolons but in solidity you cannot get away with it you have to be organized to get out with the oldest and by the way usually this is the point where I go ahead and get started with the remix ID but we're just gonna we're just going to go through this whole thing fast today this is a little more advanced compared to all the other builds so we're just gonna have them you can just check out our Channel and there's a couple other videos right before this one that was again taught by me and that will give you a full breakdown of every single line that is that we covered just here but basically what you will do if you what you would be able to do if we were to test everything out is just get back completely empty values We're not gonna do that we're going to go ahead actually cut this whole thing out like after the semicolon thing let's just cut this out with there's no reason to all right so before we test this trick out what you want to do is we should just create an upload image function which will be public and we'll have to pass in two things for that string memory and by the way this is just some random solidity thing like you like sometimes you need memory for Strings but sometimes you don't and there's no explanation for that or at least I haven't found any but yeah so usually when we are declaring stuff you don't need to use memory but everywhere else you do but you only need to use it with strength so that's that's some interesting things and so we're gonna pass in two strings from the memory or something one of them is going to be underscore image URL and the other one is going to be underscore action and so this is going to be a public function meaning anyone or any user can actually go ahead and invoke this function or use this function and so we're gonna and so what we're gonna do is we're gonna need to make sure that the person who is trying to do our Instagram app is actually in fact a real user and not just some random got that why is my dude ever since Microsoft is doing anything they just up like why can't I turn my copilot off all right disable oh obviously all right so before we actually start a type up the functionality of this before we actually finish up the function we're going to make sure that the person who's trying to the person who's trying to upload an image is in fact a real person because you could come in with a dummy or like a fake wallet and that's not what we want to do so we want to prevent that any kind of like random address would be able to be able to prevent any kind of random address to interact with our contract and if that would have would happen we can just say invalid we'll address so we actually need the user to have a valid ethereum wallet so that's just that's the only thing that this thing is doing here now you want to go ahead and increment image account straight away because if you start with zero that will have a bunch of baked in uh zeros and whatever like starter or like initialized values that we're not want to use and we don't want to have that on our front end so we're gonna start with the index of number one which I know is a little weird because if you're a programmer you start counting from zero and so once we incremented it we want to save that into the mapping that we just created so I'm going to pass we want to say images image count which in turn we have right here so images image count we're going to pass in the ID itself and you want to create an image struct in there and so we're gonna we're gonna we're gonna start mapping all these values so I'm just gonna go ahead copy it down here just so we can see it and put them there so we can map them one by one so you're going to make sure that all these Val so you're going to make sure that all these values actually map to the values that you are storing inside of the mapping so initially you want to store or to start up so the first value is going to be the ID so what's the id it's image count the second value is going to be our URL so that's something that we pass in so we're just going to use that and we're going to have to have the caption and then we're gonna total tip starting out obviously is going to be zero and the address payable author so the basics of the person who is going to be the owner or the author of this post is the message sender the person who is uploading so we're just going to say payable and because we want to make sure that later on we can transfer funds to this account and so we're just passing a massive sender massive sender and then you want to create a new address array that is empty and that's how you do that in solidity for about the comma and as you can see you gotta positionally you're going to correct the you're going to correct the position all of your variables that you keep passing in to make sure they are good with the struct you defined earlier on now forgot the semicolon once again not surprising and then there's one more function that we're going to go ahead and create right now and that's going to be tip image owner and so we're going to pass in a un256 which is just going to be the image ID and it's going to be once again a public however this one is going to be payable meaning that this actually will process payments this will charge users and then transfer money so that's all that's all that little it does so before before you do any kind of like guard guard Clauses or anything we'll have to create a local instance of the of the image we are trying the user is trying to tip so we're going to attach that from the images mapping and then we're going to pass be and that way we're this will contain the low instance of the of that image that is being tipped at the moment now guard Clauses there's a couple of them so we went so you want to make sure that the tip amount oh so you want to make sure that the ID that is being passed in is greater than zero you cannot tip on the zeroth or like first image because that is cut that is that only has dummy data in it that has a null address so that's going to cause errors so you want to make sure it's not the ID is not zero it's greater than zero now you also want to make sure that the ID why did I do a line break but the ID has to be smaller or equal to in the image count actually I shouldn't allow we'll sign there and so this is how our first guard Clause will look like the second one is going to make sure that whoever is tipping is actually tipping more than zero so it's going to be message that value has to be greater than zero so maybe I should write that and then and then you can just put in whatever error message here so a tip must be greater than zero and then let's add another message here too invalid image ID like that put the semicolon out because otherwise the area is not going to go anywhere and then you also want to make sure that the person who is tipping I almost said the person who's tripping huh so the person who's tripping is not the same as the author and so that's why we created the local instance here before we even started the guard plugs so method sender cannot equal to underscore image author all right that's that I think is pretty selfexplanatory like it would just burn gas for no apparent reason but maybe someone wants to do that so I don't know not in this app though do you want to put in an error message which is going to be owner cannot tip their own image put that semicolon out call it a day there's your guard Clauses that's basically going to make sure that whatever kind of transaction is going to come through is going to be valid now before you do anything before you do any of the administrative stuff you want to make sure that the owner actually does get the let's get the funds intended to be sent so straight away transfer the message.value and right after that we're going to go ahead and get start documenting this entire situation that was happening so we're gonna need to increase the total tip so it's gonna we're gonna say plus equals mass value and that basically means it's probably means the same as it does in JavaScript it takes the current value adds the new value to it and then saves it back to the original now you also want to make sure that we save everything to the mapping itself to so we'll have to we'll have to save this newly freshly updated total tip uh total tip amount back to our mapping so image ID is going to be the local oops it's going to equal to the local image instance that we just modified now you might be wondering like why we even created these events here let's go ahead and actually emit them right now and we're going to be using that I forgot them to be honest up here so we're gonna do them both but that you can completely skip on them you can like literally remove these it's just like a nice touch to to use these events and basically what it will do do is later on unlike ether skin whatever you'll be able to see more humanly readable version of what actually happened and you don't have to figure out by transaction ID and whatever kind of stuff because that would literally make it impossible this way there are like some sort of data like you think of it actually you know what think of it as a console logging but like for the blockchain and that should pretty much explain itself like why it's important it but once again if you don't want to you don't have to it's just something that that I think is pretty that I think is pretty important So You're Gonna Save the ID will and once again you want to map the not the values that you're passing into whatever you define up there so you need ID you need the URL so I'm just gonna try to position the screen like that so we're gonna say image dot URL and you want to go and say image dot caption USA image total tipped message the value which is going to equal to the current tip so actually that oops actually that should be like in before total dip what just happened there so put messages of value there and then say image dot total tip and then you want to say image author let's just double check we got ID we got URL caption current tip total tip and then the author nice all right cool now you got indentition whatever line breaking everything pretty or clicked in perfect all right next up let's go let's actually emit the other event as well which I forgot oops so that's going to be image created and yeah that basically just went through right through it so we got ID we got URL we got caption and author now that's that's interesting so we're gonna need to update those and I'm just gonna pass in everything that you pass in there that was like an interesting okay and finally let's go ahead and emit image created Which hat which has all these four items and my autocomplete is doing weird stuff so I'm just gonna go oh this is prompting me to jump through them thank you so we got image URL you're gonna pass in the caption which is going to be under score caption and then you want to pass in the pay your bowl message sender that should technically take care of it there's a comma missing there semicolon good and that is basically it that's your contract we're gonna go ahead and test it out test everything out go ahead deploy it and then just finish out the app real fast all right now let's go ahead and test out this contract that we just built and let's go ahead and deploy it as you probably have seen probably a couple other videos we are using remix IDE which is pretty cool because they have this extension for vs code so you want to go ahead download it if you haven't done that already and if you did that's your icon go ahead open it up you want to set the compiler version to 0817 and then activate the tab now let's see what it does and once again if you haven't seen any other tutorials this might be new but we are going to be using ganache for we're going to be using ganache as our local blockchain so basically to get it you can just go to trufflesweet.com download it right here and then you can go ahead install and then basically this is what we will get and if you're new to this just hit quick start when it prompts you and then you're going to be seeing a screen like this I'm just going to go ahead click connect and then moving on let's just straight away compile this contract let's see if there are any errors in there seems like everything is good to go as you can see right here and let's deploy it let's see what could happen oh let me deploy it again cut it and let's deploy it let's see what could have what could go wrong so we got a few things over here we got image count which currently when you hit call it says zero let's see images see what do we got there yeah this is the base data that I was talking about and this is what we're not going to render on the front end but let's go ahead and now add a new image I'm just going to use double data as usual because these are like literal actual strings so wait where is this so here I'm not gonna put in like a real well but you can do it if you want to so I'm just gonna say URL in here and then caption here are actually my image URL image caption and let's go ahead and hit transact let's see what happens all right all kinds of guest lighting that's perfect and let's see what do we got we're gonna go ahead and grab the number one image and as you can see it we are returning everything perfectly there is the URL caption total tip Perfect all right let's go ahead and tip and we're gonna add the value of I don't know let's just put in like some bold numbers like two e 20 e oh and you want to make sure it's set to Ether otherwise it's going to go in the way you also have to change the the wallet you're using so what we're expecting is from this wallet to this wallet 20 uh eth goes or gets transferred basically so I expect this to go down by 20 eighth and I expect this to go up by 28th so I expect this to be at 86 East and this to be 68 basically a value change actually that's a little weird so I'm just gonna go with 15. all right so a new one I expect the upper one to go down to 53 and the lower wait no go up go up to 83 and the up the lower one I expected to go down to 73. all right let's see if that goes through or not and let's hit transact and there you go it just went through so yeah that that apparently worked in terms of transaction and if we call on it again then you can see the total tip there's this big old number that starts with a 15. the reason for that is in ethereum land and in solidity as I've said it a couple of times you always have to operate within way or like in ways instead of paying dollars you would have to pay pennies let's invert that way to Ether converter oh there it is and I'll just paste it in and there you go and you can see it's 15 ether that seems pretty promising there's nothing really much to talk about here so I'm just going to go ahead close it that was the testing and now let's go ahead and deploy all right now with all that done there's only the only thing really left is to deploy so once again we're going to be using truffle for that this time and here it is this is your extension you want to go ahead and download and then there is your icon that it's going to produce once it's downloaded yeah let it just set itself up and this is not going to be here for you if it's your first time but you can just go ahead hit connect that work and then hit garage paste in basically this RPC server link so there's that and then for inferior I have a wrong I have the wrong project connected so I'm going to go ahead and select info right there and because I wear the authenticated myself with infuria it already fetched all the projects that I have so I'm just going to go ahead select Instagram however if it's your first time there's probably oh there there's probably a little popup window right here hit sign up right there that'll open up infuria and then you're good to go now truffle oh so now what we're going to do next up is we're going to go ahead and right click on Instagram solidity and let's see what the terminal says back to us I'm just going to make it big that's what she said so it says everything is up to date I don't really like that because that usually means that in the build folder there is no there's no API which we definitely do need while it's still here in artifacts it's formatted a little differently so I'm just going to go ahead and see the Trap and then truffle build so that's basically gonna get it done anyways whoops okay so it says pragma solidity is no bueno that's probably because my compiler version is not correct so that's something you want to make sure that is correct let's go ahead hit 17. actually let me just search for it in in here so you want to search for compiler and then using remote version yeah yeah so that basically should take care of it now one more place where it could go wrong is the Truffle config file where oh yeah there you go where the version is 0.8.16 so let's fix that and probably the reason for that is um it is best to go live with one version just below the latest one it's good everything is so new and so early we're gonna go with the latest like living carelessly so let's go ahead and say truffle oh was it compile I think so there you go okay what is truffle build okay so as you can see there are two ways to compile as of right now however when you use truffle build this is just a PA so feel free to skip it oh this is just a PSA so feel free to skip it but uh in the sixth like basically version six of truffle truffle build will be deprecated the more you know all right so we got the API now we're gonna go ahead and copy it into utils right there so it's nice so there's your new instagram.json file and right before we actually move anywhere further I just want to go ahead and set up our front end to be able to interact with this skip that cut that and so with that done it is time to go ahead and like finally actually deploy it so if you don't have anything connected if it's your first time and you haven't worked with inferior before oh not and I caught that too so I'm just gonna go ahead click click right click on it or right click on it and then just go ahead and deploy it to my ganache so that's this guy over here let's see what happens there looking good all right finish running and whenever it says the config file has incorrect format like just skip it it's being too sensitive I don't know why that's happening but there is no problem there finish running deploy succeeded this is your contract address you want to go ahead and copy save that and not even in your truffle config you want to go into a constants file and paste it right into address the reason we are using this instead of the one we're going to be deploying to the test net is local is always faster especially in blockchain from like 10 times more true but we're not gonna stop right there we are definitely deploying it to a test net as well so right click on Instagram again and just type in Girly and trophy truffle configuration file not found that's not true so sometimes if your truffle app is in a separate folder sometimes this extension sees that as an error or something so in those cases you can just go back into your terminal and then CD into that folder CD into your travel app toilet space period and that'll open up a new vs code inside of that folder so in this case let's just do that no no hard feelings deploy the contract let's see what's going to happen yup there you go there's your value and if it's your first time you're going to want to use the paste mnemonic and then go into your Chrome click metamask where you already have an account that is connected that has girly eth in it so you can find faucets for that on the internet anywhere basically hit settings go into security and privacy and then under your reveal secret recovery phrase you will have those 12 words that you shouldn't share with anyone after you got that oh I didn't mean to do that after you say that that window that I just popped up will will pop up as well once you paste it there and then you can just save this file somewhere so you will have it just like I do so let's do it once again and once you saved it it's going to be showing up right there and once you hit that it's going to go through the whole deployment process again now it'll be loading for a little bit and you will need to install from this notification thing so you just want to click that and then install that dependency and then you should be good to go all right after a quick coffee break we just got our contract address so copy that and then you can literally close this window it's just something unique and then you can paste it right up above here and what I like to do is Type in the exact page the exact same and then just paste it right there and after that you can type in Burly so that you know later on that's your Gurdy deployment and then after this you can just say either local or ganache or whatever you want but basically this will allow you to switch between the two really easily or if you were to deploy it your front end to somewhere you can somewhere that has a local and a online online environment handling you can little you can put these in as environment variables for these separate for now it's good for us we can get 99 of everything done just like this and so with that our contract is deployed and it's time to connect our wallets to the application okay let's go ahead and connect that wallet right here now there's a few things that we're going to be importing for that so as follows you need chain configure chains create client and from like which you already have installed so don't worry about that then we're gonna need the Styles or rainbow so import yep and styles.css and then a bunch of things from Rainbow so we're gonna get default wallets there the rainbow kit provider and dark theme and all this is coming from bad thing right there now do more stuff is TeamViewer a provider not that not from there wag me slash provider is Slash and then I'm just gonna duplicate this line and change this to Json RPC this is going to be Json IPC provider like that now a few things that we're going to need to configure we're going to need we're gonna need chains and we're gonna need provider and all this is going to come from after we destructured them from chains and these are going to be two arrays all right so first one chain these are going to be the chains and these are going to be chain dot girly and chain dot foremost just like that and then we're going to need the provider now there's going to be two providers that we already set up so first of all we're going to need to accept the priority to one meaning if you're will be used as our main provider and we're going to provide an API key for it which we I believe I said we're gonna set it up but then we never ended never set it up actually so it's going to be coming from process environment dot if you're uh underscore API see and so the way you do it is by going here and then I think I said you should copy this thing and we're gonna need it so yeah now this is the time where we're gonna need it so in your next step just create a new file and name it.elu.local and then in there if you're on the score API and that's where the value of it is gonna go you will have to restart your server let's do that real quick and now that way it's all loaded in and all ready to go now option two because local isn't really provided by infuria it's uh we're gonna have to custom ADD the new RPC server so before we do that priority two and then we're gonna have our PC and we're going to Define chain that uses the RPC and there we go now for this we probably already went through it once but here it is you wouldn't need that link so copy that guy it there and that should be good to go so why are we putting it twice oh it needs to be lowercase so like that all right since that should technically take care of a lot of things here all right and we're gonna see it in action in just a second just first create the connectors these this is like a bunch of boilerplate code that it just makes it super easy to work for the rainbow and later on you're gonna understand and it's gonna say and we're just gonna pass in all the chains so this here we created the chains themselves and then here we're going to pass it in and these are this is what makes these the chain selector this is going to config this is going to create the chain selector so that's what that's what's happening there and then we're doing one more thing just gonna be whacking fig and you guessed it it's not coming home let me config it's gonna be create client and I'm gonna enable auto connect so that any user come coming in don't have to keep connecting their wallets all the time and then you want to pass in your connectors and you're going to pass in the provider you created now a few things that we're gonna need to do now we're going to have to wrap the entire app with this so that the entire metamask energy is just flowing through our app so black May config and then you're going to say client and that's going to be the Dragnet config that we just created like that without typos paste it and then wrap it around the app and then next up you're going to have a rainbow kit provider which we will need the chains so how's that mean and then a theme which will be dark theme make that a function and then you can enable cool mode it's just a nice little animation that I really love how I usually so that's basically it in terms of let's see what do we got change dot map is not a function all because you have to pass in all of them so like I was passing in this guy but in reality you gotta pass in this guy with a plural that should have solved it let's just double check refresh okay we're good to go there and now if you go into your header and like somewhere here or even Port connect button and then place that button connection button or and then place that place that button connection right after this AI Outline Three like that that should give you that exact account that exact button and because my metamask is already connected and auto connect is enabled that's what's showing up but there you go that's what you will see probably if you haven't connected it to this application yet there you go there's metal and then I'm gonna hit connect once again and that's it that's basically it and then here are all the chains and these are the wrong chains so that's weird that honestly is probably because this inferior API key doesn't resolve itself so let's try again one more time and if I refresh okay it's still not working oh once again I passed in the wrong chain here yeah it's pretty easy to mess up so just want to make sure like you use chain in a singular when you import it and then when you generate create the array of chains but then from them that point on you will want to use it as a plural so from that you will need those and so you will have to pass in with the raw and there you go now it's fixed and it's dark mode and you saw the cool mode how like the little sprinkle animation so that's it for connecting the wallet and now it's time for the functionality all right now with that all done it is time we go ahead and set up our contacts that will literally take care of all kinds of blockchain connection I'm gonna close all these random folders and I'm just gonna go ahead and create a context folder in which I'm gonna have a contest then JS file now this is where all the magic is gonna happen and so let's go ahead and import create context use context try to make no typos in there use State and use effect weird Auto conversion all right all this is coming from react and then we're gonna need to import create contract which is not exactly tied to the context itself but we're going to be using this later and I'll just forget to import it so we're just going to do it now it's just easier for everybody trust me and then we're on the same note we're going to import use account from Acme and then we're going to import Trump Kate Heath address from truncate that Dash address and I also want to import post because it's a toasty app yeah from react postify just like that and then you also want to import grab three from dot three all right well this is nice and cool but let's actually create the context once finally so we're going to create an app context using the create context thing that we just imported and then provider which will take in children and now there's going to be no children sex trafficking or any of that stuff chill now we're gonna have a return clause in the return clause in there just like that open close friends app and app context dot provider value put two objects there because one of them is going to indicate that this is Javascript and the other one is going to indicate that this is actually factually in fact a object and then in between there goes the children with an N at the end all right and then we're going to make a hook out of it because that's useful so we're gonna say use up context contact like don't open close create that okay that function and we're going to return these contacts and pass in off contacts what so you might be asking what is all this stuff that's going on here just chill basically what's happening is we this is a bunch of boilerplate code that you will need to run your contacts and to have like Global globally available functions and variables and all that kind of stuff and yeah that comes with all this stuff so once again you're going to need a you're gonna need this bad boy hook to make it easier later on to interact with it now what I also like to do is just create a test test variable that literally only does it says test and then export it right away here now the reason we're going to do that is we're going to test this mess this guy out so let's import that app provider right there and then we're going to wrap it around the app itself so look right there it's perfect and then going through index file and here you can go ahead import use up context so the hook that we created and then you want to go ahead and destructure tests from use up context just to double check that the context setup and all that is working perfectly so go into your inspector and then onto your console and you should see test pretty soon oh wait it would be helpful if I actually console log it out without that you're not going to see it all right there you go now you can see it's working perfectly and that is basically all the contacts that you will need to set up for this build and I'm just going to go ahead and remove all the all the testing stuff and with that said let's upload some images right so for the rest of the app we are mainly going to stay in the context file so let's actually just jump straight into it get started with a couple of view States and then we're just going to go out eventually to other files to import everything that we create here so we're going to have a use state that is going to start out as an empty empty array oops and then another one that is going to be our user address and that's going to be helpful to just so we're going to have one central place where we're going to take store our user wallet address of the person that actually signed up or signed in to our app and you want to fix all the typos because that's not helpful if you have them so before we go any further further let's actually literally store the user address so for that we're going to use a use effect hook so it gets updated every single time the user is changing in fact their wallet that is being connected so you wanna you wanna destructure address from use account like that and then set up a use effect hook that is clinged onto that specific variable and then whenever that changes and whenever that changes you want to set the user address to truncate ether and pass an address so what that's going to look like this truncating thingy is just going to make it shorter because if you remember and you're going through a constants file this is how one ether address looks like now it's fine but in our app it's going to look something like oops something like this so it's like more humanly readable and you're like let's be real you're never ever going to read this whole thing I haven't had it so let's just let's just actually get rid of that useless stuff so now that we stored the wallet address let's go ahead and import it and then comma let's export post as well then you export user address I just said import because I don't know and right in here write it back in your index CS file you want to destruction posts instead of and straight away let's go into our index.js file where I already set up this empty array but that's only for the like template that you're working on so let's actually change that out and so we're gonna change that out for is it's just destructuring posts from the use of context like that and so that way it is hooked up to hooked up to it and now you're like now this application is going to be working perfectly however apparently we got this error so let's take a look at what's going on that is oh because I should have made it plural so posts and like that see there you go that fixed it so that seems good and then whenever we and then as soon as we start uploading posts it's going to start fetching them or like whenever we Implement that function but it's going to be taken care of pretty fast so the app is by Design dynamic and so before we actually start uploading images there's going to be one more thing that I want to set up and that is all the functions so we're going to have a get all images and this is going to be useful just so we map out we're going to be working with and so we're gonna have an upload image and then we're going to have one more which is going to be tipping the owner so tip owner is in sync you can close and then there's your function all right so each of these are going to be separate section in this video and we're gonna go ahead and finally focus on this guy now to make the application completely dynamic right after everything is done in the uploading right after the app itself is done uploading what you want to do is call immediately the get all images function so that's what we're going to get started we're going bottom to top now now the one thing you want to make sure is having guard Clauses and try catch try catch Clauses in your application whenever you're working with blockchain I can't emphasize it enough that is super crucial and it will make or break your entire application if the transaction fails or the if the Ethan wolf is going to be completely lost and if you like do all these like guarding steps that might save it from from my save your customers from losing their money so we got money on the line we're going safe so we're gonna say if there is no address is connected obviously at that point like there is nothing there's no money to you no money to lose but then again random error messages so you wanna you wanna you wanna keep that stuff safe so now what you want to do is say cons and contract and we're going to create a contract instance right here for this specific function and let's take a look at what that does so that's actually happening in the constant file so let's create contract thing is destructing the ethereum object from the from your window which is basically the code snippet that metamask injects into your application and if that is present and if that is valid then you it's going to create a web 3 item or like a web 3 instance using that that code and web3 is just a it's an npm package it's called web3js and that just enables you to interact with the blockchain however it needs a couple things one obviously wallet connection and then it's going to create a whole contract interface for you based on the ABI that you pass in so that's the Instagram Json file that we put in here earlier and that is the address that we put right here that's pretty much it actually doesn't need these addresses don't even have to be exported but it's just nice I think yeah it seems to be working without exporting perfect so there's no need to use now back in your context so that's you're going to store that contract interface that that function generates and next up I'm going to create a data object or we're going to get started interacting with the truck itself so we're going to invoke one of its methods and that's going to be let's see what we will create I believe it is upload image yes so if you go back there oh it's just I close the line but you can just paste it there so there's like there's no type of options and then you will need to pass an image URL and you will need to pass that caption now these will be coming from the Thrones you need to pass them right there so we expect those to to be passed into this function so they can be passed over there and so it's going to be helpful there and because it is a function that creates and pushes data onto the blockchain you will actually have to pay gas fees for it and the address that we'll need to pay the gas Keys is going to be user address this guy right there I wanted to put like a comma that's fine and then we'll have to start we'll we're gonna need to specify some gas that's going to be this is going to be 3 million and but don't worry about it it's in way it's like a lot less like it looks like a big number but it's not that big of a number and and because we want to make this application as safe as possible I like to create a try catch function as I said earlier so I'm just gonna do that and then catch or that and then console put it out on the console just in case you want to put it out on the console so you can debug if there's any errors going on so air that message like that and then just wrap this entire thing around it nice and then to make this application super interactive we set up toast messages and toastmessage is basically just these little nice thingies that you're gonna see in a little bit Ah that was well explained anyways that's like a little loading animation that's going to watch the promise go through and all the all the back end stuff and then it's just gonna be like super interactive so the users will be able to see exactly what is happening all right so let's set that up that's called toast and I think I think the package is called react cultify which we actually imported so let's just take a look at how it looks like if you go to mpmgs.com it's going to be right there yeah these are the toast messages and you can come here figure it out and then do all kinds of modifications to it make them yours customize it and this is exactly what we're gonna have wrong Arrow type anyways going back here we're going to say toast dot we're going to say toes.promise and then passing data which by the way is going to be a promise because contract method and whatever is returning a promise and then here there's going to be three options so there's one when the promise is pending and then there's gonna be another one on the promise has result and then there's going to be one when there is an error so these are the three cases and then you can just pass in strings and I have these creative for me so I'm just going to copy paste them but you can customize your messages completely and as much as you want you can literally just load in random stuff there for now just for time saving reasons I want to put like a little X there so there we go that should technically be just perfectly enough to get started with the uploading images now one more thing I want to do before we do anything because if you remember we're going to use the localhost because that's still a little bit faster than any kind of Tesla and so we're gonna need to connect this function to that button right there so for that export this guy and then in your header you're going to need to import it so next so we've got the context import and then we're gonna have to destructure it so upload image of course use up context just like that it's actually the wrong one oh this is actually the wrong file oh whenever I import or open header cut before that it doesn't even need to be open so once you export it upload images or upload image you know open the file uploadmodal.js and import use app context and then from that you want to destructure this specific function so you can move that once and then just paste upload image equals use app context just like that that should pretty much take care of this whole thing it says the function takes in zero parameter it's going to go away a little bit this is just like my call Quality Checker okay let's see if that helps okay perfect now it's gone it just has to realize it takes a little bit of time that's fine anyways so now it should be hooked up to that button actually what this was already hooked to that so what we're gonna do is I have this nice rug right here that's gonna be my first it's gonna be my first image that I upload so wait for that little uploader thingy to finish hit done because there's no need to crop there and then this is first post or whatever hit submit okay provided address is invalid all right whoever's editing I'm debugging cut this okay so I figured out the area it's it's dumb it's really dumb to see here when we set the user address that's actually going to be a truncated address and that's not gonna work here you need the full address here so you want to put that in there instead of the truncated one yeah if you caught it by yourself like good it was a pretty weird error all right so let's try again uploading the same image once again and there we go hit done all right my first post it's better confirm image uploaded successfully okay something I guess it's time to fetch that all right so we've got our image uploaded allegedly let's figure out if we can fetch it and actually show it out on the screen so we got to get all images actually should be firing immediately and there's one more thing or one more place where I want to oh and there's one more thing where I want to fire this function off and that's basically every single time whenever someone opens this app so it's gonna be another use effect and in here we're just going to go ahead and paste this and call it once so that should technically call this function every single time somebody turns this app on we'll just confirm that whatever yeah console logging object perfect so that is working as designed however now what you want to do is make sure that the person that there is somebody logged in actually we don't have to make sure that's completely that's not necessary at all however we're gonna need to create a new instance because the other one is unique to that function and it's getting scrapped right after that function has run and then we're gonna be doing some interesting things so what we want to do is let me just show you in the salty litty file so if you remember we are tracking how many images do we got and then we are also tracking it in a mapping so every single ID has an image linked to it so we're going to do is fetch this number and then we're going to Loop through this mapping and that's how we're going to get each image one by one all right so to do that we're going to say cons image count we're going to say away contract methods and then we're going to say image count and we're going to say call because we're just reading from the blockchain that completely will work now let's go ahead and const log out how many images do we got it's image count like that we should see a one right there so that's perfect that's working as we wanted it to work now we're gonna now what we're going to do is whenever we fetch one image by one image we're going to store them and we're going to push them into a temporary I'm going to put them into a temporary array that we're just going to have while we're here and then we're going to and then we're going to save that or a temporary urate into our you state so how that's going to go is we already have the image count and so now we already have the temporary array so now it's time to actually get started looping so for index equals one semi column and then I lost them or equal to are actually index is less than or equal to image count like that semicolon and then X Plus it's pretty basic it's super beginner friendly there should be no issues we're just gonna call the mapping function and so it's going to be cons image weight contract not methods dot images and then we're going to pass in Index right there and we're just going to call it so once again we're just reading from the blockchain no transaction needed and then what you're going to say is new posts dot push and we're gonna say because if you remember actually let me actually let me just show you but if you remember these this image this whole image object is a little bit weird let's see what is happening here I forgot our lead keyword right there so let's try again all right there you go so I'm gonna make this big that's what she said and if I zoom in as you can see every single prop and detail is being returned twice you get this like weird object type of thing with actual named like the name props so what you want to do is go for these because these are like way more easy like way easier to read as a human and so we're just going to save those everything else can go out the window so we're gonna have an ID which is gonna be image dot ID like that URL caption and then you're gonna have total hip which is imaged total tipped and then you're gonna have an author which is going to be the image.author so that's pretty easy that's selfexplanatory I think there's not too much to understand about there there's gonna be a weird move that I'm going to be doing here and by the way we're going to wrap all this into a try catch in a little bit but after like outside of this for Loop what you want to do is I'm going to say set post and now this is when we are going to update the state itself so what you want to do is say new host dot reverse or actually let's not do that right now so let's just be happy a little bit because we have our new post we have the post that we just uploaded there now what you expect from Instagram is that newer posts and I know the algorithm and everything it doesn't do it that way we're not gonna mess with it this is like a true real real Instagram that we're gonna have here so I'm just gonna so what we expect is the newer posts are going to be showing up on top of older posts so what I'm going to do is let's go ahead and I'm gonna get another rug image and it's funny because in crypto land if they steal your money it's basically a rock pool ah am I making fun of other people's losses yes I am all right so here what I'm gonna do is just paste that image there and then zoom out because why was I zoomed in so hard and let's go ahead and upload an other image so done and this is my second post on the top so I expect it to show up on the top right so confirm that full screen metamask and then if you scroll down it's below it's at the bottom that's not how we wanted to do I already spoilered it but basically what you need to do is just reverse that array and so that way the newer posts are going to show up at the top all right so we are like pretty much right there the only thing now that we have to implement is literally just tipping and once we're done with that this application is complete all right now we are at the very last step we are at the Tipping functionality of this very application and this is your time to grab another coffee because we're gonna need to be alive and we're gonna need to be awake to test out all the functionality that we will have so with that all that random jargon that I just said and even I don't know what I just said with all that done one more thing this all has to go into a try catch so before we go any further try catch I don't I can't even type it catch like that error Dot message so like I said everything on the blockchain goes into a try catch there you go there it is now it's cool all right let's go ahead and implement the tip owner functionality of this all right so this is our very last function and what we're gonna get started with is once again creating a new contract and in this case we will need the address so we'll have to actually guard for that too so if there is no address we're just going to return and skip it and before I forget it let's just export this tip owner function all right so we got our contract instance we got everything we need we can get started so good old try catch because you don't want you don't want to mess with errors here event message so that's all cool and then what we're gonna do here is we're just gonna have a hardcoded amount of tip that one user can do or like one user can send to another one you can make this actually it could be your homework to make this a as a dynamic thing but for now we're just gonna go with a hardcoded one and we'll see how easy it is to make it make it Dynamic so what you want to do is you want to convert any kind of and like I said before so what you want to do because I said it earlier solidity only works with weight which is like a super small ether ether amount so you will have to convert it now well how you do it is you get a pass in a string of The Ether value and then actually and then actually specify that you are passing an ether all right and so that's that way this ether amount is going to be converted to whey as it says there all right so there's your amount and so that is what we are going to be sending as a tip in this application but like I said you can specify it you can add like a little model which like which like pops up and then the user can choose how much they can tip 55 like at all the restaurants and so what you're going to do is gonna be like relatively close to what we have here all right so actually from just just for pattern recognition sake you want to go ahead and try it using this thing now there's gonna be one more thing that you will have to adhere which is Val ues and so once you add that and you figure out what's going to be the value of the key which we call Value there's a lot of values so we want to have a value here which will have a number in there but you want to pass in a variable so you go ahead try it out and then pause it pause this video because I'm going to go into the solution right now all right so if you try it out and you failed no worries I used to fail with ethereum all the time in fact I still do in fact I still pause it whenever I get an error and then I spend two hours to debug it so that's fine you just don't see it because it's off camera anyways what we're going to do here is we're going to create a transaction which will be a con which we'll be interacting with a contract methods you'll know that let's go copy function name which is tip image owner or that there it is and then we'll just go call that and then we'll have to pass in the image ID all right so that's something we're gonna have to do so we're gonna need to we're gonna need the front end to pass it in here into the contact cell so that we can pass it over and it's because we are actually creating data onto the blockchain and we're like sending them we're going to need to use the word we're going to need to use the method send down there so the origin is going to be what are the center is going to be the address and then once again not this address the truncated thing because it's gonna err out again like last time I'm gonna go with the usual gas value 3 million like that and then this is the key one the the amount so basically this will specify that there's going to be a value that the user will have to pay that's the big number that kept showing up as zero so we're going to need to pass this in here and that way you're going to actually transfer funds towards the owner of the image you want to tip it will actually transfer funds to the owner of the image you want to tip now you can set a guest limit of null and then just call it and now to make it toasty we're gonna use the toast dot promise method and I'm going to pass in TX as in transaction and then create the usual object and like last time I have the three case scenarios typed up there so I'm just going to paste it here but basically you want to have a pending text you want to have a success stack text and you want to have an error text basically that is pretty much the application so let's go ahead and test this out and actually I have to test out the error itself if you remember wall it says please connect your wallet that's interesting so there's a little bit of a bug there we're gonna fix that in just a second and it's also here so that's also interesting so there's like a few Dynamic stuff that we're gonna have to fix all right so let's do that before we mess with any kind of tipping all right so one of them is gonna be in the right suggestion bar oh so one of them is going to be in the home right bar now in here we will need to import the ease up context so basically the app contacts hook like that and then we're going to destructure user address from that from the contract context like that and that should update this guy okay so that's pretty good and then there's this one more thing we need to up update that's going to be inside of feed and inside action buttons no it's going to be inside of caption now in caption we expect to have a username I don't think that's what we send it that's how we set it there so let's take a look at how we have it in context I actually cut everything yo cut everything where I open a caption so that's not an implementation error okay so for whoever is editing it cut this part out where I first from the point where I first opened item and caption and all this stuff so the only thing that I want to fix here with them is this use of contact stuff everything else will be coming and even this stuff is going to be coming from the CLI so they don't have to fit and then back to the video right now all right so with that fix we should be pretty much good to go so grab this tip owner and we're gonna go to the item file now in here oh okay and we're gonna be going to the action buttons file right there so there's this error that's going on here that's because once again I set up this dummy function there just so it doesn't like completely go nuts so instead I have an error now you're gonna have to import use up contact here and I think you see the pattern here so once again destructure it and then use uh context oops and that should be good to go now let's remove that let's paste it back no errors there so that should in theory make everything work so there is all that's pretty much all the application now I'm just gonna try to tip to my own image and if everything is set up correctly this should throw an error so let's try that I'm going to hit confirm and there you go there's the error and it says owner cannot tip their own image so it worked it is working perfectly yeah there's the error that's cool and so what I'm gonna do instead is go ahead and switch my switch my wallet and there's my new balance so that's nice and also you can see how the profile image is like changing so that's actually tied to that's so that's actually tied to the wallet address all right let's try tipping hit confirm and there you go tip send so that technically means that there was a tip amount sent here .01 e so let's actually do this again let's just double check how much we're sending because I completely forgot it's a con and yeah 0.1 so what I'm expecting from this next stack test because we haven't tested is it goes down or we didn't set up expectations so this is supposed to go down to 83.62 and this should go up to 0.98 so let's let's tip again but this time that image hit confirm and let's do it there you go there it is it is working perfectly it is beautifully built so there you have it that is your Instagram clone with tipping function smell the built in and that's pretty much it about your app and once again as I mentioned it earlier you can go into your constants and then just switch out the deployment now keep in mind that if you're switching out the deployments to the girly one you will have to reupload images and your friends and whoever you're sharing this with are going to have to upload images as well and you also will have to post this website somewhere on the internet but basically that's it that's it for the tutorial I hope you enjoyed it let me know Down Below in the comments whether you like it or not and don't you dare tell me anything negative because I'll find you anyways that said go ahead smash that like button and subscribe to the channel and I'll see you in the next one in this video you're going to be building eBay web 3.0 adapt using infuria on the ethereum blockchain we're going to use rainbow kit to connect our metamask to the entire application and we're going to be using web3.js to interact with our custom solidity contract deployed using infuria and you're going to be able to list and sell your items and others will be able to come over and buy those items from you using ethereum with this app so with that said let's just jump straight into it all right let's get straight into the eBay clone and let's build this thing so what I got in front of me is basically a terminal ready to execute some stuff all right so I'm going to type in MPX leather programmer which is our custom built CLI tool just for you now I'm going to type in my email address here and let's see what else do we got after I'll put in my name and then just hit eBay now what's going to happen is you don't see it because it's on my other screen but it basically opened up an interviewing and you want to definitely use this specific inferior link that this opened up because this will give you a bunch of perks now I personally already have an account within fewer so I'm just going to sign in but if you don't have an account yet you want to definitely create a new one with right here because it's going to give you a couple of perks and as you can see I created this eBay clone project now the way I did it is up here there's this create new key thingy which I just zoomed into for no apparent reason actually it's purple so you want to select web3 API formerly ethereum and then just give it whatever name my eBay project and it's gonna be like yo you have too many projects so I'm just going to hit cancel but this is literally what I'm gonna get now in here once you open it you want to hit manage key right there or it will show you this screen immediately and you want to go ahead and copy this API key this will be one of the most important things throughout this build so if you don't do anything just go ahead and copy this key and then you're you should be good no I'm just kidding anyways regardless of copy that guy yup see copied it and very conveniently our CLI tool has just finished downloading this project so that's cool what you can do now is definitely you want to check for node modules in here in the root folder and then down in the what is it next app folder so if you have those two node module folders you probably already ready to go now what you want to do is inside of next app create a new file and call it dot env.local that is period EnV period local now what you want to do is type in infuria and let me actually make this a little bigger that's what she said yeah should be good so what you want to type in is infuro underscore API underscore key not key or whatever and then just paste whatever key you've got there now you will also definitely keep this as a secret because the secret and um this is not going to work by the time you're watching this you can try though and if anybody gets access to your API key so this is your Warning by the way so if anybody gets access to your API key they will be able to use your inferior account which in turn might charge you if you are subscribed to paid services or just run all your free stuff out so there's that now once we've done this so once you open up the terminal and you should probably see it a keystrokes that I'm recording so what you can do here is go ahead and type in CD next Dash app and that will basically just navigate you in here so your terminal is going to be inside that folder and now here you want to type in yarn def meaning your Dove and that should have technically opened or started this tunnel for you and what I'm gonna do is just make things a little more convenient and if you pop it into a chrome congratulations you have the front and ready to go and this is what we're going to be using to build on top of after our coffee break okay this is the time to take another coffee break and go ahead and get started working on our contract so with that said go ahead and go into your contracts folder and inside there's this ebay.sol file then you want to come in here and this is basically premade contract that is ready for you all right so what can we do here so basically let's just go ahead hype this terminal because we are not going to need it for a little bit and what we're going to be doing is let's just actually go ahead and start creating our objects trucks whatever mappings and stuff like that that's interesting I have the solution on my other screen and it doesn't look any up like that but I can imagine a scenario when GitHub copilot just puts out all the Developers let's hold their General players out of their job you okay all right so let's go ahead and type in so let's go ahead and create a struct that will be called Product now that will have a couple of props in there so what are they we will have a address which is going to be the buyer's address so the person who buys the product that'll be the buyer and then there's going to be another address which is yeah this is going to be the seller now we're gonna have a uint which is going to be the ID of the product itself and we're going to have a price correct we're going to have another uint which we'll be reading these products okay I put a comma because it was because my error linter was messy it was and happy about the semicolon but okay all right let's do it that way though so then we're going to have a couple of strings here we're gonna have a name we're going to have a description we're going to have a category category like that and we're going to have an image URL nice it's nicely formatted now and next up what we're going to be doing is also versus like out in the wild out of out in the nothingness the Wilderness we're going to have a other U.N which will be product counter yeah yeah you're in 256 you win it's basically the same thing I'm just lazy person so I sometimes write you and but yeah anyways moving on you want to definitely map all the products and you want to map these product counter thingies so once again he went to a product and we'll be calling it this will be a public thing this mapping will be called products all right next up let's go actually just straight up jump into it and let's go ahead and create a new products list that guy all right so it's going to be list new product right and we will have to pass in a couple of things here so first of all we're going to need a name and this is the time when we're going to start introducing all these like underscores and stuff like that and memory maxed up we're going to have a description that we pass in then we're going to have a category that we pass in and an image URL that's smart that's actually pretty intelligent I don't know where my formatting went but there it is you also want to definitely pass in the price of the item price like that and you also want to pass in the rating of the item and don't leave any trailing commas what's up with my prettier dude all right there we go there we go okay so apparently okay so my preyear apparently doesn't work as long as the function itself is like has syntax errors which is actually exploring all right now you also want to make this a public function because you want to definitely make sure that whoever is interacting with the app is going to be able to call this function so now with that we're pretty good now next up we're going to do is yeah we'll do that eventually at some yeah so next up what you want to do is we'll be creating a new instance of the product struct that we just did up here all right so this is just a definition of the product struck and like just defines what are each and every single one of what kind of traits will each and every single product have and so what we're going to do is we're going to say product memory because from the memory we're doing things and it will be a new product and this is a declaration and this will be a type product and so in here we're going to pass in an object now we will be having a buyer who's going to be address zero all right so let's take a look at that what this actually is because this is some sort of like basic fold address that is that's just a placeholder so let's take a look at what Google what father Google says especially if I was able to type it correctly meaning in solidity and so there you go the zero count is just a special use case indicate that the new contract is being deployed it's basically what we're going to be using that in this case is just like this placeholder that's literally what it means what is going to default back to so this is like not a like nobody owns this one is what I'm trying to say so like when you put an ad item out for sale there's no actual factual product it's like kind of like if it's at zero but because that's not an address like you got to do it this way all right there we go select seller that's going to be the message sender meaning the person who pops open their meta mask and puts out a new item for a listing and we're going to have a ID which is going to be the product counter and then we're going to have a price and from now on basically match all these to these guys but like down here so if that was weird just watch me and you'll understand a little bit when I meant so like rating it's going to be rating and then you're going to have name it's going to be name and then you're going to have description it's going to be description category and you're like and now we just close that guy remove the excess stuff and let's see what the issue is so this is product identifier not found oh what would be helpful if I would type without typos so product all right cool function stay commutable little restricted to view that's completely fine as of right now because right now we're not like I don't get it why it says that but it will go away in a little bit don't even worry about These Warnings warnings are not even legit so next up what you're going to do is you're going to say products the product counter is going to be new product so what did I just do so this will be the mapping all right so product counter is going to be we're going to where we literally have a product counter that starts from zero and that will be the index so that will be the ID and we'll be indexing through all these products so what we do now is we're going to have a tuple or like an array of tuples or whatever a mapping all right I'm just running like you fancy with all these parts basically so we're going to be creating a mapping that will be mapping that will map all these new products these guys to each product counter does that make sense it's like we're gonna have one first product two second product yada yada once we build out the entire thing it'll like all come together and you will understand what I'm talking about and then obviously you want to increase the product product counter because initially it starts out at zero and then the next if you didn't do that then and you added like a second product that's supposed to depict that you repeat the same step drawing skills on point so if you stay at so if you leave product camera at zero and but you don't step it up the next product is going to be still stored at zero which is obviously not ideal so you want to like stop it I should be able to pretty much be enough for now let's actually do one more thing which is going to be a really quick one so I just want to like create a new function we call get number of fraud ducts which is just going to be like a nicer naming of something we could already do because like whenever you Define a variable under the hood there's going to be a color view function created for it like immediately anyways we're just gonna make it nice anyways and we're just going to create a call function so that will return a you went and where's the T there's the T and then we're just going to literally return this guy back and that'll be basically what we will get started with now in the in a previous video and probably we suggested a couple times but let's go ahead and go into our extensions and you want to download ethereum remix so this is the guy that we are going to be using this is basically remix IDE baked into your vs code if you know what remix ID is this made a lot of sense to you if you don't know what remix IDE is I just saved you a ton of headache and copying code so don't even worry about it just get it this is a remix IDE for you all right let's go ahead and click that bad boy so that will be remix IDs icon once you install it and before you do anything you just want to make sure that the compiler version which you can set out heat set right here it currently doesn't have any kind of value so what you want to make sure is that there's zero eight 16 so you want to go ahead and select that guy and I see it says zero eight sixteen how cool is that all right let's make this small again okay and so now you want to click run and deploy and then just hit activate and that will basically spin up this thing now it also spins up your output but we're just gonna put that out of the way so what's happening here there's a couple of things that are going on so if we go back to infuria and hat back right into your project and then you hit manage key over there and then here you select you can go with mainnet but that's going to cost you a ton of money so I would just recommend going with girly and then copying this guy and then you can paste this RPC URL here now that'll help you when you're deploying and when you're like finished with the app now when it comes to deploying to Tesla it takes a little longer time so instead what we're going to be using is not this but what we're going to be using is if you go to draw fullsweet.com ganache and then you go ahead and download this guy right here that will download an application to get in a ganache installed all right and then once you install it this will come up obviously you will have no workspaces so what that means is you can just hit quick start or if you've been already using it you just click whatever workspace you got and you want to copy this RPC server all right so that's what we that's what you want to copy and then go back to your vs code and place it right here and then hit connect and so when you first connect your ganache to this whole thing this is what it will look like and so down here it's going to say network is local or custom just like it does it here it's like cool stuff all right you can also if you press command shift p and then you start typing in secondary you can open up the secondary sidebar thing you can just pop that output window right there and that will that way you can close it close the things down there and then just pull it out wide so you are going to be seeing everything now what you want to do is you want to have your ebay.so file open on the left hand side or like somewhere and then just make sure you selected that actually don't really have other options but just in case you do you want to select the correct one and then just hit compile let's see what it does let's see what it says let's see if our contract is good to go and ready to be deployed and compilation finished so that's cool and now what you can do is hit deploy and it is already deployed to your local blockchain ganache thingy so that's actually pretty good all right and so here are all the functions that you can do so as I said before so there we go now when you create now when you call this get number of products it's going to say zero interesting so I'm just going to go ahead and clear this output so it's going to be nice and clean and so whenever you call this get number of products that we just defined somewhere in this contract it'll return zero meaning we don't have a single piece of product that's fine let's go ahead and create one so we're going to give it a name my first product one thing you don't ever press command a in here if you do the whole screen is going to turn into this grayish thing and you have to restart remix that's a bug I would guess probably that's what it is don't tell me I didn't warn you next up you want to put it in put a description in so product description uh you know what I'm just gonna go with some dummy stuff so I'm just going to type in description category it doesn't really matter for now because we're just testing it means you wear out now you put things out oh my God where is uh where am I gonna get any major oil from don't worry about it it's just a simple string so you can just type in ing URL cool and then ask for a price now for now you're gonna get away with typing in one or something like that but later on you don't really want to do it because then it will cost an entirety ethereum so just keep that in mind and for rating obviously it's a five out of five so that's pretty cool all right so once you hit transact which basically means like post it or like put it onto the blockchain what you will see is a bunch of like addresses guests used and if it like doesn't look super weird it like naturally feels good your developer instincts tell you that there's no error in here there's probably no error in here and another way to check that we're correct and probably this is the better way to do without having to listen to your instinct is I'm just trying to find the optimal window stuff so I'm just gonna delete it again or clear the output again and if you hit get number of products it should say one did I just write a perfect contract in here and if I was to put in zero that should hey there you go oh my God look at that so that's the mapping that's the mapping so remember when I said maybe I haven't said it but remember when I Senator didn't say it that mappings create their own core functions so that's why we only created a get number of products thing right so when you create a simple variable that doesn't create a call function under the HUD but mappings do and so here what we did is we know that the first product that we put in there is because we're developers we start counting from zero zero one two three this is how we count now first product that we put in there has an ID of zero so this will be waiting for a zero it's about a counter again just put that guy in there call it and then you get back everything that isn't gonna that is that you've just saved into your product now here's everything Let's uh all right so with that said so with that it is time we go ahead and create a function that will allow our users to purchase these items that are listed so purchase I think that's how you write it item nice and that will actually be waiting for a you and ID so we'll have to pass in the ID now this is going to be a public payable and payable mean just means that oh you gotta like there's going to be actual factual transactions going on in there so you gotta basically enable all these functions for the function I realized that sounded a little weird but that's what it is now right in here what we're going to be doing is we're going to require a couple things so what we mean what I mean by requiring a couple things is we need a couple of guard functions or guard Clauses is what I meant and that happens with the require keyword so let's go ahead and get started with that so what we're gonna need is message dot sender we got a double we want to double check the price obviously that it's the correct price is being sent so if the message sender no not the message value is less than no equals four more I actually we should go with equals products.id so here's a tricky thing that's actually just generate the product instance in it so we're going into the product and then we're gonna say storage and then we're going to say product again because this is just going to be a local instance of the product itself all right and then we're just going to say products ID but it doesn't do there's a lot of products I'm gonna go again to the mapping that's products and then check for the ID that's being passed in and then I'm storing that in here and this is literally just the type of that variable and storage is that oh we're going to be reading from the storage so that's uncomment this guy so we're we literally need that the message value is the same as product dot price yeah and if that doesn't happen we will just say invalid amounts and for product or something and that won't tell the user whether they send too little or too much but there's a security feature so we're not gonna bother that now we also want to make sure that the person who's buying the product is not the person who is trying to sell it because that's like like a churning type of thing all right so next up what you want to make sure is that the item hasn't been purchased before how do we do that you ask so remember when we get started the buyer is going to be the zero guy so we also need that that the product the buyer equals that address zero because if it doesn't it means that somebody else has already purchased the item does that make sense so it's product buyer has to be that zero guy because if it isn't that means someone who purchased this item so item has been bought or something like that I don't know I'm just gonna say that whatever that was yeah that's pretty much what we're gonna go with for now and so next up you also don't want to buy your own stuff so message dot sender cannot be equal to product dot seller and so yeah seller cannot buy own product their own product and we could just eliminate all these typos all right so these are basically the guard causes that we're gonna be rolling with for now this should be pretty much enough for us to go for it now at Point you want to transfer over that item but before you do that you want to make sure that the product is paid for so here's where the payable comes in product.seller is going to be the person that receives the amount of money and you want to transfer that amount which is the message the value so basically what this does is this person will get this much in short all right so that being said we should technically be pretty good to go and move on to redeploy this contract onto our test server and then test it out once again so let's do that let's go into our ethereum let's go into our remix guy hit activate and let's see what do we got oh yeah nice the output thing came up so there's like all this like history and stuff I'm just gonna go ahead and delete that because we don't need any of that same for that same for the output cleaning let's just go ahead and hit compile and wait for it to pass oh convolution finished nice so that's pretty good and I'm just going to go ahead and hit deploy so there it is okay there's a couple of things that are going on in here the remix IDE is now recognizing our new contract so get number of products zero that that makes sense so we're gonna say first product to sell or for sale description you're gonna have a category it don't really matter it really doesn't actually image URL and we're going to set I'm just going to say 10 because that's going to be like very visual in our ganache so what we're going to be expecting to do is that this account sells the item for 10 ethereum to this account so I'm expecting that this balance will go down to 89 ethereum and this will go up to 69 ethereum all right let's do that and the rating is five obviously you only sell the best stuff nice so there's that and so now what I'm gonna be doing is just double check that we have the zeroth item there you go price ten noise so how do we purchase with this guy so first of all you want to change the account that's going to be interacting with the contract so we are in purchase mode now and what we want to do now is we're going to say purchase item zero you want to put the zero in there but don't hit don't hit it yet and here oh I think we put the price in way I believe so maybe not let's see that's probably in 10 way we'll see in a little bit so if I just put in tan there you go oh I just deployed it again okay I'm just going to go ahead and transact and it apparently went through now nothing really happened here wait wait we should technically have purchased this item I'm just going to clean my input and let's go ahead and check on the new product again so we see that the seller is still that person but the buyer is this guy and so even though we expected this to change this actually didn't because when you put in 10 here into this price thingy the contract is always talking in or like always expects these numbers or like whenever we're talking about values in way so what is way is like a super small amount basically so we're gonna say each converter ethereum unit converter efesh converter.com so basically what you want to do is put in 10 here and if you wanna if you want something to cost 10 ether you will want to list it at this price it's just like dollars and pennies and cents and whatever so that's basically what it is so you want to copy that guy hat back right here and so to be able to double check what is happening I'm just going to delete everything once again set go back to my original account and compile it again because that never hurts deploy this guy again because that doesn't hurt either and then go back into my eBay and then I'm just going to say product because I'm gonna make it fast description and I Glory nice imgurl and then price I'll just paste that guy there and I hit five on rating transact nice it went through and clear this call number of items we have one item in there zero call that guy and we can see that's the price so that's we can either copy that and paste it here in the value or we can just go ahead and type in 10 but then select ether and then you just want to hit zero there and change the account TD buyer account and now hit transact boom so that apparently went let's see what do we got one here so as you can as I explained it earlier and then put in the wrong price but now with the new price this went down by 10 ethereum and this went up by 10 ethereum so like rewind back if you don't believe me because I literally have video proof of this that's basically how our thing works and by the way if I want to buy it again it is first of all I didn't specify the amount so I'm just gonna put in 10 ether again so it doesn't it cannot send that back but then it says item has been bought and then if I wanna uh check the other error and then I put in yeah 10 transact again yeah item has been so like there's a bunch of checks that are going through here and because the item has been actually let we will not see the other the seller cannot buy their own item but like you can just create a new item try to buy it with the seller and then that will pop up so that is basically creating the contract that I'm testing it out that should technically have given you a pretty good understanding of how this whole thing works and we're going to be interacting with throughout this build so with that said I'm just going to go ahead now and let's deploy this guy all right now that brings us to our contract deployment so let's go ahead and at this point there's another extension that we're uh that we're gonna install so it's called truffle where am I even typing so there it is truffle now this is the exact one you want to install so truffle for vs code this will open up this will add this guy right here and so this is your personal this is going to be your truffle now here what you will need to do is if you have any kind of other projects a link to it or maybe not what you can do is you can just say connect to network and then just hit inferior service and then if it's your first time using this extension it will pop open your your browser and that will let you connect to inferior but however if you don't have that or however if you've used it already it will just fetch all different projects that you've worked on before so in my case I just connected the wrong project again so let's just repeat that one more time so we're gonna go with inferior and then hit eBay clone so now that we have eBay there that will basically enable us to go ahead and deploy everything through inferior's RPC URL to the girly Network now what that will enable us to do is if I go back right here and then I right click the eBay clone and then I go ahead and hit build contract that will pop open my and it literally just said everything is up today yada yada finished okay that's pretty good it's because we already compiled it with uh wait what is it with the remix so I'm just going to go ahead and remove the artifacts folder and now because it already recognized that oh we built it one more time there's another option that we can generate the API which we'll need it's just by typing in trouble compile so there's that and with that it just created a new builds contracts folder and this is your API that we're going to be using later on in the build you know what while we're at it let's just go ahead copy this file and then go back to utils in under next app and then just paste it there it's going to be helpful let's just do that it doesn't take much time now what you want to do next up is go ahead and hit deploy contract okay so once you hit that will basically just give you a bunch of options on like where you can go ahead and deploy it so step one we're going to go ahead and deploy it on girly hey what did I just do employ oh curly there you go now we want to leave the gas price completely alone and empty that's fine and in that at this point you can go ahead and paste your mnemonic or generate a new mnemonic now if you generate a new mnemonic that will not have any kind of a girly eat on it however if you already have a metamask that is connected to the girly Network and you unlock it see I have 7.3 girly eth so that's pretty good I can gen get that mnemonic from going here settings advanced not Advanced maybe security yeah and reveal secret recover a phrase so if I hit that I'm not gonna but if I hit that'll show me my mnemonic and then you can just paste it there and then you will it will generate you this EnV thingy now I've already done that so I'm not going to do it again but if I was to do it it will generate it would generate me a new one like this so I'm just going to use the one that I already saved and when you click that it'll take a little bit of a Time to get started with this thing now you want to definitely check your notifications because that's where this HD wallet provider thingy is going to pop up so you want to install that every the first time when you're deploying something so it'll take a little bit of time and then after that you are going to go ahead I was going to go ahead and deploy everything for you it still looks a little interesting to me so we're just gonna go ahead and try this one more time now oh so the reason why it like doesn't give you anything besides oh yeah it's deployed is because we don't have the migration set up so let's actually go ahead and do that now the way it works is you want to go into your migrations folder and create a new file that you will call one underscore deploy.js or whatever and in here you want to create I'm going to import eBay from the artifacts are DOT choir and then you put in eBay now this has to match with the name of the contract so you want to double check that if you were to be a rebel that uses it for naming I know I used to be one and then you go ahead and say module export async function deployer and then wait deployer.deploy eBay a lot of deploys deploy they play to play all right now you're gonna go ahead I'd like to clean my output a lot of times because it just clogs up and I don't know what ends where and now we can go ahead and hit deploy once again and when this guy runs through and finishes off oh it's still deploying okay so because it's a task that it actually takes quite a lot of time to deploy so that's completely fine it's running through a bunch of blocks so there's that whenever it's done it's going to say deploy succeeded now you want to scroll up to contract address and this is your contract address so just to double check let's go on to my Safari I'm gonna say girly white girly Dot etherskin.io and that's the official ether scan and there you go now as you can see done I just deployed this contract and if I'm not mistaken that's going to be my wallet address let's see yup that's it that's that there you go now you just deploy it to girly now the next app we're going to deploy it to our ganache as well why it's a pretty valid cat question reason why we deployed the ganache and Gurley as well is because we're not going to be changing anything on the contract so like right now we're just going to deploy it to girly and then we're going to deploy to ganache but we're going to use ganache throughout the build and while we build it because girly is a slow Network compared to ganache when it runs on your local network it's always going to be faster it's always going to be a better developer experience and I want to speed through this build at the end or after the tutorial feel free to go save this somewhere like you want to definitely go ahead and save it in your constants and then be like oh I don't know you want to be export const sport cons contract address or something like that so export comes to dress and then you just want to put it there but I'm just gonna comment it out for now because we're going to once again as I said deploy to ganache and then after the build is done and then you take down ganache you can just swap it swap out the address and then just make sure you connect the girly and you should be good to go switching Networks so once again I'm going to go ahead delete or empty out my output and then go ahead and deploy this guy now I'm going to type in local and it should be good and as you can see and as you can see it is like way faster like it's already done this is why we're gonna use you know so now I'm just going to type in export cause address once again bam and then you can put early after this and oops ganache after this and so that way you're like not gonna mess up let's play now the next thing that we will be doing is you should have already installed with a CLI you didn't have to do anything but you already have access to web 3 from web free you want to go ahead and employ import the ABI from this Json let's do that too so what you will say is contract ABI from ebay.json nice so next up what we will be doing is going to say con consume from window so basically this is just a structures ethereum from window window is literally all the code that's running in your browser and then ethereum is just a part of it so when you destructure it you will have an uh you will have a variable called ethereum all right next you're gonna say if ethereum but not with an exclamation point so if you have ethereum you want to go ahead and say const web 3 equals new web3 and then put in ethereum right there and then you want to return new web3. that exactly this new web3.east.contract and I'm passing the ABI and the address now the one thing sometimes people forget is the ABI file itself has a bunch of things that are going on in there so that's contract name there's the ABI that's exactly what and then like there's all this metadata and the random stuff that's going on yeah like all this stuff that like your app doesn't even need to worry about now option A what you can do is delete all this stuff but I prefer not to do that and instead it's just an easier solution to just contract AP edit API and that literally takes care of the entire thing and and that's it you're good to go so with that said that is basically the deployment and now let's go ahead and create a nice little connect metamask button alright so I was told that this is the time that we go ahead and connect our metamask to this application so to do that you want to go into your app.js file now this is a bunch of things already imported so now we're just going to import a few more things so first of all we're going to be importing is just a Style Style file installing so from rainbow kit you want to go ahead and import styles.css it's their own specific styling and then you want to go ahead and import chain I'm going to import configure chains you also want to import create client create client yup and then wag me config here from black me you thought it was going to be rainbow and then uh that's pretty much it oh wait no there's one more thing so we're gonna be importing get default wallets and Ray bow kit provider and the Dark theme from that rainbow me slash rainbow kid and then you want to import two more things one of them is going to be the infuro provider from wag me slash provider slash infuro and you also want to import the Json RPC Provider from the same place or like almost now that suggestion was not good it's actually Json RPC like that so not Dash RPC okay so once you have these now we're gonna go ahead and set up a bunch of stuff now with that done let's go ahead and configure all the stuff that's going to be allowed as a user so like basically all the chains that the user will be able to connect to and all the providers for those chains we're gonna have chains and we're gonna have Pro VI and this is like not from anymore so we're gonna have configure chains and we are actually going to have two rays in here so in the first array we're just going to say chain dot girly and chain Dot localhost that's where we're gonna be coding and the next stop we're gonna have the inferior provider which is going to have an API key and for a little bit I'm just going to leave it empty but yeah and then we also want to make sure that the priority on this one is the highest so basically there's going to be two providers in here because we imported two there's gonna be inferior provider and there's going to be RPC the Json RPC what we're going to do is whichever chains a user selects you want to make sure we use infuria primarily however if they don't support that specific chain then we're gonna have this Json RPC which is just literally the most custom RPC Rider out there so next up let's configure that secondary provider and it's going to be the Json RPC provider and we're gonna have to put in a few things so first of all priority two that's the secondary provider in this case and then our RPC is going to be we're going to pass the chain and we're gonna go ahead and tie and HTTP and then once again you want to put in this specific RPC address I'm not even gonna say it out because I didn't even want to say it out and that should basically wrap up all the providers that we got out here so these will be used in a little bit now I just want to like jump back right in right here uh to the inferior one if you remember right at the very beginning of this app we actually saved our inferior API key here in the dot EnV so you want to go ahead copy that name and then come back right here and then you want to say cross dot EnV Dot and then just paste whatever name you gave it and um it should be good to go now one more thing you want to always restart the server so you just want to run your end up again and that will that will allow the application to read the envathon it probably already has but just in case it doesn't sometimes it helps and it's just like a safety measure okay so next up what you will want to do is you want to create a new cost which is where we will destructure connectors from like errors and it equals get default wallet like that and now we're going to say app name it's not even Instagram it's eBay and we're gonna say app name eBay and then we're gonna say we're gonna just literally just gonna pass in all the chains we're just gonna pass in all the chains that will be provided here so basically fees are going to be the only change the user will be able to choose from when they are interacting with our app and then next up we're gonna have a whack me config and that'll be a create CL and then we're just gonna go ahead and create the client with this specific function and then we want to pass it autoconnect make it true you want to pass in right after that connectors and then you want to pass in provider and that should pretty much wrap up our setup for this for this metamask connection now there's a couple more things it's not that easy so come here like I'll just command x on it so I can just paste it back and whatever so once again copy that yep and then I'm going to say wag me config and say client and I'm passing Wegman config hey config like that so that closed nice and now I want to say rainbow kit provider and and then theme dark theme that's pretty cool and you can also like you can also enable cool mode now in that case you will probably have to import it yeah so let's import cool mode maybe you don't have to interesting okay we'll see if we have to import cool mode anyways it's just like a nice animation that's always like it's not that important but before everything you want to make sure you pass in like into the chain selector like all the chains that's pretty much how it's supposed to be look like that's pretty much how it's supposed to look like and now in between all this you just paste that component thingy right back and now we should technically have access to all the connection now there's one more thing that we will need to do and that's going to be in our index.js file now in here you want to go ahead and import connect button from pretty look at Rainbow meet alright so we got that copy that guy and then right under here online 30 line 20 30. you want to put in connect button and that should enable yup there you go there is your connect button so that's pretty much that's pretty much the connection I'll show you guys what cool mode is if it enabled itself or if it didn't we'll see hit that that was cool that little animation that was cool man I'll show you once again because it's see and now it won't do it because I canceled it once but there you go that's cool mode hit retry and hit connect and there you go that is your metamask connection you just build it it is done it is so done it couldn't be any more done it is the most done metamask Connection in the done metamask connections history whatever leave it so with that said we're pretty much good to go to get started connecting the actual contract to the front end with that said I'll see you right there okay so it is time to go ahead and start connecting our stuff so we're gonna be doing mainly all kinds of Connections in the context so let's go ahead create a contact stuck folder and then inside there if you want to create a context.js file and uh let's go ahead and start importing stuff so we're in one definitely import create context we want to import you state use effect and use call contactor like that from react all of it and then while you're at it go ahead and import use account from wagme which is just super nice and easy way to get all the Account Details so yeah there's that and then when I import web3 go to capital W from web3 with a not Capital love lead and then you also want to go ahead and import create tracked from utils and constants which is by the way yeah this exact uh function that we created earlier so we already built that so I'm gonna type it you want to go ahead and actually start creating the contract over here no context so you want to say I have context and go ahead hit say create context and then next up export const and it's going to be app pro provider and that will have this children thing in between children that's pretty good and then create the function itself now What's Happening Here I think okay there you go and then that will basically return stuff so let's go ahead and return actually before we return anything let's do the test file or the test variable equals whatever and now we're gonna return stuff and you want to say app context dot not contest geez dot provider yeah and then value it's like interview would say I'm going to say test and close that bad boy and then just pop in Shield right there so that technically should be pretty much good to go in terms of a context thing now what you want to do is just make it like you wanna we're gonna set up one more thing that's gonna make it just as much more easier so you want to say export cons to use uh context just like it suggests right there and uh you just want to return use context and then passing app context basically what that will allow you to do is you will have to import I believe less and it would just make made a hook out of it that's literally what happened okay let's go back to our app.js file and and in our app.js file what we will do next up is go ahead and import the app provider so I'm just going to go up here and make it like separate so there you go app provider and this bad boy I'll just put it like right here like right around the component actually we should be putting it outside of rainbow kit reason is a rainbow can might use stuff that is available in the provider so you want to allow that connection to happen and that's basically what did I do app contest for real okay that should have fixed it nice and just to test out this context thingy you want to open up your console and then inside of index.js you will you can go ahead and import use app contacts from context like and then down here just go ahead and destructure test from the use up context thingy and then you'll just want to go ahead and console.log past and if it says test in here our console as it does and my friends you little just created the perfect context then you graduated to move to the next step of this tutorial so congratulations on that if not just double check that everything that we set up here in the context and in the other JS file is correct and then let's move on I'll before we actually move on I'll just remove all this test related stuff because we don't need any of that you can close the app.js file remove that guy and then for a little bit we're going to be working inside our app provider we're inside our contacts we'll build a couple of functions and it will be done in a matter of no time I'll see you soon time to sell some products and what we're going to be using for that is our context so let's go ahead and get started setting a few things up here so what you're what we're going to do is we're going to create a couple of you States so there's going to be a contract set con track yeah like that and then you stay snow and then we're gonna say we're going to have a user use user address set user address just like that might as well save it from typos and then one more which is going to be prop doc handset products these are all going to be used later on in the app first of all this is going to be used this is where we're going to be storing our contract instance that we are generating with this guy next up we're gonna have a user address which is we are going to be like saving like straight away so let's actually do that like right now so cons address and equals use account that's the structure that bad boy and while we are at it let's go ahead and set up a use effect that'll actually see it so whenever address changes what we're going to do is say set user address to address and uh we just addressed this situation all right now what we're gonna do is before we move any further we should techno we should just go ahead and set up the contract situation as well so set contract open this guy and then create we don't pass in data just because that's not that it is that's a different address we have access to that address so once that once this guy returns its thing it will be set into this contract thingy so basically every time you open up the app you will have access to all the contract connections immediately so that is good that's pretty good we are good there now you want to go ahead and create a function which we'll call sell item now actually let's just go ahead and let's figure out what we're gonna be what are we gonna need for this so they're creative so we will be calling this this new product thing function and we will have to pass the name description category email price email image URL and rating always we'll have to pass them in so we'll have to account for all that I'm just going to leave this on the side just like a little peek like reminds us for that okay let's do this with an async function because this is going to be an acing harness situation and from the front we're gonna pass in name we're gonna pass in description we're gonna fast in cat eye three I'm gonna pass an image URL we're gonna pass in price hand rating so basically everything close that bad boy little arrow thing and open the paren now thank you prettier for making my code look nice now you want to make sure that before any kind of interaction happens with the contract there is a contract actually exists so return it's like card clause and then if that checks out you want to have a try catch functionality which will catch any kind of error that happens and then just console logs it out console error actually let's just put that there and then we can forget about that so error handling nice next up try so what we're going to be doing is immediately because the youth remember what we did with the the contract we expected that it was going to be in ethereum or in ether but that's not reality contract works with way and nobody is going to type up that many serials so we're gonna say price in way and we're just gonna convert it and we're going to be like okay and luckily web3.js has what is built in so we can call that web3. udles the twoway thing function let me just pass it in price and then happen pass in the the currency that we want it back in so in this case it's ether sorry the other way around we pass in the prize in ether and because it's ether we tell them like what's the initial values currency and because it's ether it's gonna be stored in way right here and then I'm gonna go ahead and wait contract methods and this is where we actually go ahead and call the list new product function and so that requires once again name requires description what was that description requires category probably everything that that we have here description like I could type it out once but I can type it out for the second though that's fine name description category image URL price rating let's just double check it here as well I think we should be pretty much good to go here now oh my God copilot is so nice it like added this part as well so I'm just gonna explain it now so far this is how far we went and so because we are creating and adding data onto the blockchain like we want to store something on the blockchain you gotta pay for it all right nothing is freeing the web 3 wood so before we can actually wrap this function up and as copilot was already suggesting we have to send them some ether and it's going to be coming from the user address which we already have saved which we already have saved it in in here and then there's a couple more things like you want to set the gas fees to this this number which is three and then this is basically three million all right and then I'm gonna set guess price to null these are like optimization stuff so it's like the transaction is going to be more optimized nice that's basically what we are cooking with right now and that should technically list every new item that we throw at it let's go ahead and connect this to our create button right here so far actually not even the create button I was wrong this list item thing so if you check this should technically already work because that's how our project comes so you want to go ahead and go into the model file model I'm gonna go ahead and go into the modal file so once you entered your modal file you're going to go ahead and import the use of context thingy and then destructure cell item on it now if you actually have long brain cell like I don't if we don't export this from our contacts we're not going to be able to import it anywhere else so all right we are we are all here to to learn and improve improve myself included so you've got the sell item function oh that's pretty cool here's our handle submit function which is already connected to the button nice and so you want to do is before oops before we move any anywhere any further I'm going to go ahead and say event dot prevent default and what that will do is like it will prevent the website from refreshing whenever you hit that button sometimes you like need it it's like a reacting so I'm gonna be using that and so next up if there is no name if any of these fields that are required basically for this transaction to go through meaning name it the description category price and or rating any of them those are the pipes though all of them say not name or not description like that's how you like read it out if any of them don't exist or return a falsy value which is an empty string is a falsy value then we're gonna display a toast error message which we already set up for you and we're just gonna return it and we don't even want to like continue the process so see how cool is that that's pretty cool if you ask me so that's there's that now if however we're good on that end and that doesn't happen else or you can just say else we can say toast dot promise and the reason why we're doing tools that promise is not like a regular JavaScript promise is because the toasting is going to keep loading as long as our promise is not successful so we're gonna have the toast handle our async function and then our async function as long as it check lasts as soon as it checks out our toast is going to turn a little nice check mark so let's do that so toast I promise and we're going to say sell item and pass in all the stuff that we need to uh need to pass in so name description category image URL and then next up we're gonna pass in a little bit of a function and that'll basically just change the toast message all the time so as long as it's loading we're gonna be like listing in progress please wait and uh maybe an hourglass Emoji or something that like makes it nice and then next up we can just Define the success and then give me like okay item listed successfully and if there's some sort of error and air listing item please try again whatever and with some nice little Emoji play we should be good to go so let's go ahead and try that it should into your work if it doesn't and probably made a mistake somewhere along the way all right so with that being said let's go ahead and search for a rug and let's just grab an image whatever this looks pretty good this is a puffy rug shout out puffy mattresses for providing us with the image this is free marketing for them nice so we're just gonna call it a puffy rug and once again shout out for puffy mattress puffy mattress all right let's go ahead and upload this image right there shout out internet speed nice you can crop it down whatever don't even worry about that okay so it immediately says set image URL is not defined that's interesting okay so that means that for whatever this you state is like not set up interesting okay meaning that some stuff was like hello now there it is what do you mean it's not there and you want to definitely put that guy in there so FD IMG URL doesn't exist that should make it fail too however we are passing it in here yeah this is the like one of the biggest drawbacks of using stuff like copilot because you'll just look over a couple of mistakes that you're making along the way I mean I'm glad we like have this here that's helpful all right all right let's start again puffy rug and Shout Out puffy mattress oh yeah Double T guess who failed their English classes not me though put that guy there shout out internet speed and hit done okay there's no issue there and then let's go type in perfect four rug pulls huh pun intended category rug whatever price this is how when you like literally want to start becoming more and more careful with what you put in as a price and also want to like switch to the localhost networks like ganache nice because otherwise it will try to put them to girly but we're not but this address is not on girly so it wouldn't fail again so once again prize okay actually here you can put like bigger numbers I'm just gonna go with 0.1 and then rating obviously is a 5 out of five go ahead hit confirm on that guy and item successful listed now the only problem is we don't see yet so let's go ahead and do that go ahead and make that happen all right so we got the selling done this is now time we go ahead and display all the items that are like listed for sale so let's go back right here as we can see the product state is like still like empty and if we go back to index we also have this dummy products array so like the app doesn't break so what I'm going to be doing now is I'm going to destructure products from use up contacts and that way I technically change that dummy empty array to the array that we are going to be fetching from and let's get rid of all those runs and stuff like that okay that's fine there so now it says products map it says undefined okay that's because wait oh of course duh once again if you don't export you can't import it's like a pretty good all right there you go now here is a way it's got a little bit has gone away all right and so to get started fetching we are going to be creating a new function that is going to go ahead and get all the items for us so how's it going to look like all right let's let's do it like right under here so it's gonna be get all items and it's gonna be an async function nothing to input and uh yeah so before we do anything yeah if there's no contract that thus far it's correct there's no contract then we should just like return and then like you can add like custom toast messages whatever like error getting items whatever I'm not gonna do it because take up time and I already showed you how to and then next up what you wouldn't do is like before all that like little before anything set products to empty the reason for that is if there is no contract then you want it to one the products to be like a safe empty array that like will not break the map and if the contract changes you want to wipe out all the old stuff from the old contract and then the new stuff can come in and whenever you refresh it we're going to be using the dot push method yeah I believe that's an array method so we're going to be using the dot push method and we don't want to mess our things up and no one are the one that same product to show up twice or three times or whatever okay so with all that out of the way we're gonna have a nice little try catch function next up what we're going to be doing is say cons product count equals old way oh so basically what we're going to be doing just walk you through at a high level let's go to the so far is we're going to go ahead and fetch this that way we are going to know how many products are there and then what we're going to do then is we're gonna have a loop that goes through this mapping and fetches each item one by one so what we're going to do is say contract meth thirds Dot and what was the function name again it was get number of products so that's what we want to call I don't need all that random file so let's just paste that there function thingy call and call it and you sh which should be good so we have a number there the away thing is going to hold back the line until that result itself so we should be good there now what we're going to be doing is we're going to say start with a friend like plain and simple for support loop we're just going to say index equals zero colon no semicolon until index is smaller than product count some icon and index Plus and then open close butter curly braces are there and then it's a const product equals oh wait contract dot methods Dot and which one are we going for I don't know which one are we going for not methods and let's see which one are we getting because we're going to be using the builtin function of this methods thing as if you remember the when we did the ethereum remix stuff let me just show you yeah I connect that guy so if you remember we had this guy this is what we're going to be using all right based on that we're going to say products and then pass in a bunch of things so what we're going to be doing is say product and then pass in index and nonpass and then just call it that should be our product and so now we're going to format this because if you remember we get back like we get back all the data like twice so there's no need for that so we're going to format it a little bit so just it just looks a little nicer actually let me just go ahead and console log the product just so you remember what I was talking about oh if nobody calls this function it's not going to run plastic should set up a other use effect like that paste that bad boy there call it and whenever contract changes we're going to call that now if contract doesn't exist this whole thing is going to kick it off and we won't have any kind of Errors so let's see what we got let's refresh this guy and uh there we go there is our item so this is what we are going to make a ton nicer like it just looks nasty how there's like zero one two three four whatever nah this is not good so we just want to strip out this piece of the object and then just like make a nice looking array out of that so let's do that now and that's why we are creating this formatted product thingy so we're going to create a new object which will have an ID which is going to be a product ID we're gonna have a buyer I said buyer which is going to be a product a buyer fire like that and then the seller product seller name description we're gonna have category image URL and price now remember in the solidity contract we are only working with way numbers so there's a final there are like multiple ways you can convert Bitcoin way and if ether I just prefer doing it on the front end just because like the audience and ethereum and Soldier is like soup like in the early days the baby steps is the dawn of web3 so let's just stay where we are like more comfortable with stuff and so we're going to convert everything on the front and plus web 3.js is like making it like way too easy like it should be like almost illegal at this point anyways we're getting back the price in way and we want to convert it into ethers or ether so that's what we're doing here and so that's pretty good and then we have one more thing which is the grading now let me actually console lock the actually because I'm lazy I don't want to type all that formatted formatted product nice let's see the difference between the two so here's the ugly Bond we don't like that and then number two ah so much nicer there you go so you're welcome that's why you're using random stuff random like formatted formatting things in the middle of our context and then um yeah once that's good to go what you want to do is say set products and my assistant Mr copilot is helping me with this basically what you want to do is get these set products function from this use state that keeps track of the previous actually it shouldn't be previous product I don't like when it like calls it like that so we should just call it previous state all right it should be previous state there you go that in theory show us all the stuff we got now one interesting thing though why does it say item but I haven't even bought it what do you mean I bought it it's probably just hooked up to a template function so don't even worry about it okay so you might be wondering David what is going on here in the first place why am I not seeing all my images like I literally uploaded them and if you still have the console lock turned on yeah this is undefined but actually I just spend a little bit of a time and traced it back and we are doing everything correctly except for one thing now if you look at it like how are we even save saving this stuff or how is it even being saved it is imgurl and we are trying to destructure image URL once again we looked it over or like I personally looked it over because I'm using copilot so again there's a lot of negatives to it it's not gonna put uh put us out of our job I'm pretty sure after these two I'm pretty I'm feeling pretty safe let's refresh let's see what do we got now we have the image URL now the only question is why do we not see it it's probably because we should be saving it like that all right there you go so with that little two literal two changes that we just did from image to IMG which is a story for image once you change that it apparently starts working so that's how we set up the template I completely forgot about it and we also are using copilot to help me out with typing so there's that now with that all said and done it is time we go ahead and purchase these items and we're technically done with the build see there all right we actually got to the very final part of this build which is purchasing these items so before we actually get into that I just want to clear out all the console logs if you've watched any of my other videos you know that um I don't like them like it's good as long as we're building stuff but then like gets annoying and clogs up my consoles I like to keep that clean I'm a clean dude we are going to be creating a new function down below here which we're gonna call by product which is the byproduct of me being funny hey anyways we're gonna pass in this ID which is going to be the product ID that's going to be coming from the front end so let's uh let's do that oh why is it oh there's the error okay so with that said now we also want to have we want to get the usual card Clause so if there's no contract then we just want to return with all the toasting stuff so again a usual try catch and then let's catch the error and then console.air.air I hope that made sense that was like a pretty good son pretty good sentence if we have the contract we are going to go ahead and try to get the prize so what we're going to be doing is here at what the price is we need to know how much the product costs all right and we don't really trust the friend to tell us what it costs because that could be manipulated pretty easily so instead what we're going to do is we're just gonna go ahead and fetch the fetch the contract again for it so we're going to say contract dot methods dot product yeah product ID and then we're just going to call it and then once we call that we will as technically isn't the price but original you know what let's just actually name it so product so that will be the product and then we will use that to get the price all right so what is going to happen now is we're going to say oh wait and then we're just like straight into calling the purchase Method and so let's see how we actually named it here so it's going it is called purchase item now purchase item and then we will have to just pass in the ID that's all we need to pass in however when we send it in this is where we need to specify the actual purchase price of the product that we are sending in so this is where we're going to be using this line of code now open close paren open this new object and we're going to say from in a user address which we already have access to you know what while we're at it even though it's like unlikely that it will ever happen that this doesn't exist and the contract doesn't exist because somewhere I believe oh wait hold on whenever here actually never mind you know what let's just put it in the guard cause it's not gonna hurt there it's fine so we're gonna be like okay contract address or user address so whoever is used whoever is logged in that's the person that will have to pay for the product we're gonna give it a like the general three million gas which is like three million way I believe and then we're gonna say gas price null and then we're gonna say value because in this case we have to press specify the value and out here we actually got the price of that product like we we got the product so and we just want to get the price of that specific product and that will be the value so it's like way harder for any kind of like malicious intense like any kind of person with malicious intent to like tamper with this with this specific transaction and that should be pretty much it now Luna it's sport it because I've messed it up and forgot to export it twice and what we're going to be doing is I believe so it's in product JS where we'll be calling it so what we're gonna do here is we're going to go ahead and import use uh context and then uh yeah I have all this uh template function there but we don't need this anymore instead we are just going to destructure this and right here the toast is ready to handle everything and it should be good to go let's see what we got so on click whenever we click one of these products and I don't know why it does that I think it's like I save it it like doubles It Anyways when you refresh it it only shows up once so that's pretty good and then it says item bod so that's interesting because reading length Okay that's weird why do we what are we dealing with all right oh hold on and once you actually do that type my playlist should be working so let's go ahead and test this out so if I refresh I'm going to say all right my mono mask is popping up it's zero dollars like that that detail looks a little fishy to me okay so there is this error and it says the value doesn't seem to be checking out I believe invalid amount sent for a product Oh interesting and so the reason why the price like wasn't really working is if you think about it like this is these are all async functions if we are waiting here for we literally have waited everywhere I think I just forgot to put the weight there let's see if that helped and let's see if that worked wait there's like a lot of transactions clogged up here all right let's go ahead and refresh click that and there you go there you go now you can see that the Price Is Right There 0.1 each and then I'm gonna confirm it however it literally just says the seller cannot buy their own product so what I'm gonna do is I'm going to refresh here and then swap over to my other account like that come there and that has like 69 nice Ethan there and let's hit the second one confirm there's the price and item bot now this one is successful so that pretty much revs up this entire build you are able to Now list and sell items using the blockchain using the ethereum blockchain and then once again if you want to send this to your friends deploy it to you anywhere you can just comment that line out and comment this line like back out so that's going to be the valid line and now this application is living on the girly Network so with that being said thank you so much for watching and I'll see you in the next one in this video we're going to be building The Tick Tock web 3.0 adapt with an xjs and inferior you're going to be able to upload your videos to the blockchain so that they are available forever and other users will be able to come over and read videos videos and even give a thumbs up to them like you should to this video so with that said smash that like button and subscribe to the channel let's just jump straight into all right so before we actually get started let's just go ahead and spin up this app because we haven't seen how it looks like so what I'm going to do is just type in yarn Dev in the terminal and that should pretty much get started with a that should pretty much like get our server up and running I'm just gonna go ahead and get started with the Chrome and it's only because for whatever reason Safari isn't supporting any kind of wallets that's weird all right so let's see what we got um we have this nice beautiful design that um that we got here so we got this nice beautiful design and this is what we're going to be working with so there's a bunch of like preadded data and then there's gonna be this guy with the upload um what's that with the upload thing upload modal and then we will have a light button which uh yeah it's not defined so it doesn't work yet so that's fine but this record is spinning so we're good to go camera rolling all right wow there's a bunch of console a lot going on for no apparent reason that's actually got rid of those because you know how we roll we don't do unreasonable console logging there you go all right now with that said I think what we're gonna be getting started with is just um the contract so what I like to do initially is um use truffle to create a contract so that's literally what we're gonna type in truffle create a contract and it's going to be called foreign and before we actually forget about it because that's a tendency I like for whatever reason I do is go into your migrations folder and create a new file but the title of zero one deploy the JS and not KS that doesn't exist there you go and what we're going to be doing in here is actually I'll just make this nice I'll make I'll make the text bigger and make things bigger that's what she said all right you should see it now right I just get up get a magnifying glass all right so cons Tick Tock equals our teeth facts dot require Tick Tock other basically we'll do is when you go into your Tick Tock dot Soul file um it'll look for this thing so and then just import it and the next up module whoa I don't know what that is module dot exports and we're going to explain function it's going to be it's going to have an input of deployer and then deploy that deploy Tick Tock that's literally what we're gonna like that that's all we need and then um it's going to be only used when when we try to like deploy the contract so it's not necessary now but I keep forgetting so let's just get over with it let's go into the contract huh all right so the version that we're going to be using is the zero point 8.16 I kind of forgot the numbers here and um let's just get started um so there's no need to have a Constructor in this case but there's a couple things that we're gonna do so I just want to like set up all the structs mappings all that kind of stuff ahead of time so let's just get started with a struct and and that's going to be um I'm sorry it's going to be a video it's like a video object this is how it's going to look like these are the props that each video object will have so we're gonna have a caption um and then you want to put this semicolons at the end because if you don't it's going to be issues um and we're going to have likes we're gonna have um there's likes we're gonna have likes we're gonna have dislikes and we're gonna have an address which is basically going to be the owner or the person who like uploaded the video itself and we're gonna have an array of addresses that will contain basically the likers um actually I can just put that like right there so all right so now we're gonna do some uh relatively Advanced life we're gonna have a mapping and this mapping will map addresses to another mapping which will be which will map a uint wow a uword to a bull huh let's it's gonna be interesting and it's going to be a public and it's going to be a light users so we're going to be mapping each user's address who's using this app to whether they like this specific post or not so what let's what this will mean is we'll have my address my wallet address and I'm going to go in and see if and like start watching video number zero and then decide to like it it's going to be my address mapped to another mapping which is like zero true and so that basically all that means is I like the first video or like zeroth video but I'm talking like human language now so basically that's what it will mean uh we'll get turned in a second kind of try to understand what it means uh but you'll understand it later on we're going to have another mapping in the meantime which will be a number mapped to a video right and that will be another public one and that will be the videos themselves so this is where we are going to map the IDS to the videos themselves um you could have we could have just created an ID here but we are trying to show like different ways of building contracts so we're gonna go this way now what happened there and we're gonna create yet another mapping and it's going to be another number and this is gonna be another number in here and this is going to be public again and this will call lights so we are going to keep track of each like for each video ID so you will have a video ID and then you will be able to map like we're going to mat we're going to use a bunch of mappings here all right so video number zero this is how much likes it has these are the users that actually liked uh that actually liked it and then like when you pass in an address you're going to be able to figure out whether like which videos did that specific person like so there's a lot of like weird connections but um this is an advanced tutorial bro all right and uh we're gonna have one more variable which is going to be a uint it's going to be public and we're just gonna call it video count oops and let's just do it that way that's going to be initialized at zero obviously and then we're just going to keep incrementing it now whenever you create a new video you want to have an event that you're going to like Emit and this is some blockchain stuff we haven't really done this um before but basically what this will do is it's like kind of like console logging but onto the blockchain it's like battery so you don't have to like worry about it much you can completely leave it out but it's just like adds that one level of extra little video so keep it I think anyways video created and we'll have a normal regular stuff like that like a regular circular what is it like a Paran so we're gonna have an ID we're gonna have a string that will be basically catch we're gonna have a URL number of likes dislikes and the owner that's pretty good oh and that crazy thing is going on because I have to like close it like that and that should have saved all these solves all the issues so that's good I'm gonna have two more events uh one of them is video liked and we're gonna have a number a u in it's going to be an ID and we're going to have the lights basically a number of likes passed in here and another event this video is like so like I said you just want to like console log everything it's going to be the same input so there's your like basic setup um and now it's actually a time to go ahead and create a new video so we're gonna have to have a new function in here without all the like random stuff so function and we will call it create video all right now we're gonna have a couple things that we'll have to pass in here so we're going to pass in the caption whenever it would call this function and a URL so the URL basically is just like a TickTock link or some sort of like video link that we're going to store on the blockchain and before we even do anything it's like video count plus plus so you want to increment that immediately and videos.video count or I mean like video count yep um so what is videos before we go any further there's your videos all right so the ID that we just incremented we're going to use that immediately to store our first video and map the first video to that specific counter all right and we're going to create a new video using the structure.v that that we created up here so there's that um let's go ahead and start passing caption URL and we're gonna have zero likes zero dislikes and message sender is going to be the owner and we're going to create a new array of addresses that like doesn't have anything in there oh I forgot a comma there so there's that well that's interesting oh it's because I changed up the order so let's go ahead and swap them around and we should be good to go okay so yeah basically you want to match these items to each of these elements so you want to take these and match these items to these elements that you're passing in so first obvious is caption URL likes to selection so you want to make sure that the order is specific now once like now once you're done with that and your team uh no events I think that's how we're I'm gonna call All of You Slackers um you can basically skip anything that's uh happening after I type emit um but for those that are like Elite and actually doing events we're going to emit a new event which we're gonna call which is uh like something we already prepped here so we're gonna pass in the ID which is video count we're going to pass in the caption we're going to pass an URL zero zero and message dot sender so once again you want to map everything 2DS and I'm like when I say map it's kind of like that mapping but it's like your brain does the mapping so get it right all right now if you haven't heard of it before um or if you haven't watched any of my previous videos I like to use something called the remix IDE extension inside of vs code so this is that guy now go ahead install it there's no setup needed at all once you're done it's the icon that you want to click um takes a little bit of a time to load up but once it's done you want to select the correct corresponding version so if it's 0 8 16 I'm going to go with that specific version and I'll just hit run and deploy and hit activate on the popup window and once you're there uh notice that you're going to have the output coming up and could not detect not work whatever or you might have something else there now there are two options that you can do right now one is go to your inferior account and select girly which is going to be the network we're going to be using to have this tutorial when we deploy the contract now you can pick this and uh get this RPC URL is what it's called paste it here however I don't recommend it because uh Tesla Works a little slower than your local so what you can do instead is go to trufflesweed.com and then select that bad boy download it install it and this is how it's going to look like there you go there's your ganache now what you will not see is this it's obviously not my ganache that's on your machine so completely forget about that but if you hit a quick start bringing in the exact same thing now if you come in here you want to go ahead and copy this RPC server type thing copy that guy go over and then paste it here if you can see that that's literally the exact same link and once you hit connect it's going to connect so that's cool now I'm going to open up a secondary uh sidebar and then just pull output there it's because I prefer it showing up there so I can hide that bottom thingy because it's a better use of space in my opinion and notice there's a couple of things that you will be able to do obviously disconnect your account and then there's going to be all these and then there you will have a bunch access to a bunch of these wallets now these wallets are exactly these wallets so what ganache does is it gives you a hundred each and it's like a local lead locally running uh blockchain server type thing on your machine so you don't have to use test nuts which are like kind of slow sometimes but there you go and what you can do is if you have a contract opened it's going to give you the option to compile that so let's do that let's see what that does like you can see it says please wait and compilation compilation finished and there you go now you can now go ahead and deploy this contract let's see what that does and there you go that's what happened there so if you open this it's literally the exact same thing that we just created right so there's like all kinds of stuff like you can hold a video account which will literally like all this will do when you create a variable is under under the hood it creates like a call function to it like what is a call function it's basically if you're familiar with apis it's like a get method function but for the blockchain so there's that you can read data from the blockchain for my beginners out there all right and then there's like this transact thingy um that's like posting post calls and if you're like super beginner it's like adding data to the blockchain but get familiar with transactions and calls and also get familiar with get and post because if you're not gonna get left behind all right so when you call that video count it's going to return zero which is pretty cool because we don't have to give it any kind of value and the uh and the initial value that solidity gives it is zero by itself so that's pretty cool some languages don't know that that's why we use consolidity and then there's like a bunch of things so like we don't even have to worry about these but there is this uh let's just go through like what these mappings are so you see the first mapping it's like the pretty crazy one but initially let's go through the second one so videos what you can do is pass in a uwind which is just a number like uh an integer and what I'm going to do is just pass in zero and see what happens and uh literally nothing happens it like sends me back all the all the basic default stuff it's not valid basically what that means is there's no videos created or no videos added to that specific ID there's no video with the ID of zero that's what I'm trying to say and then you can do the exact same thing for like likes there you go it like gave you back at zero so it's like not even valid at all oh yeah it's like it gave me back a zero because once again as the the initial value well what happened there and then here you can put in an address so I'm just going to go ahead copy of my addresses paste that guy there and then video ID is going to be zero in this case call that and like see like like there's no data that would exist there so like how would it know if it's a true or false you know what I'm saying see what I'm saying it's like a lot of undefined stuff now with that fiddling but that that's basically how it works and it will eventually we're gonna use all this stuff so don't worry about it we're just gonna like populate it with data all right video create like create video what do we have to do we gotta put in a caption and we're gonna put in a URL now because those are strings I'm just gonna go with like dummy data so I'll put in a caption and I'll put in a totally URL because that's totally URL hit transact and uh there's some things happening here gas is being used some kind of gaslighting so there's like all kinds of stuff happening here and then random gas lighting and things I think things of that nature but we don't really know what is really happening in the background unless we are able to call it so let's try to call video count and now as you can see it says one so that's helpful let's see if we got um let's see if we got back the data that we just added and there you go it sent back all the data we wanted all right so it's a weird data structure that you're we're gonna have to get used to it but basically let me just copy it and we'll run through it so I just created attempt.json file you don't have to follow but I just wanted to show you what's happening here to basically get the exact same data wise now this is just the basic this is how soluted it does it by itself and then this is this is the data structure that you gave it to it so just something to uh to get used to but honestly it doesn't really matter it's going to be easier to just refer to these uh things and then later in the video you'll realize that we're going to be using this stuff all right now you're literally getting back every single data piece that you just passed in so that's pretty cool let's move on now a few things that we're going to be needing in this contract and I'm not going to go through all the testing uh just I'm gonna do an overall testing session and be very and I'm not even recording okay there oh my God all right so a few other functions that we're going to be needing is first one is going to be this function get number of videos and it's just gonna be like a regular public function that returns a number oops like that and all it will do is just say return video account that's it done we're going to be needing this in the on the front end don't worry about it for now uh let's just move on there's going to be two more functions one of them is going to be like video and I'm just gonna like make it as simple as possible and let's just initialize another one which is going to be you guessed it dislike video all right we're gonna get started with like video but it's gonna be almost the exact same thing in a dislike one so you will have an opportunity to like test out your solidity skills after this one all right like video what are we gonna do um we're gonna create an instance of the specific video uh that we're trying to like so we're gonna need to pass in a uend which is going to be your ID and if you see all these like underscores in here and up here basically all that means is that we're only using those variables Within These functions and there's no like they have no business out of outside of those functions it's like internal use only easy that's it all right so let's go ahead and create a storage let's go ahead and create a instance of the video that we're trying to like here so we're gonna have a video and then we're gonna grab these specific video from using the ID that we just passed in all right now once we got that we also have to make sure that the light users for that specific video all right select users it's like users who like the post but that would be a way too long variable names comment down below like what would be a better name there but anyways you gotta pass in there's a couple things that we need to pass in remember we gotta pass in an address we're going to pass in the ID and that will return a Boolean all right I'm going to pass in message sender the person who is trying to like that specific video oops and we're going to need to pass in the ID all right so we need to make sure all right so we need to make sure that the person who's trying the video trying to like the video hasn't haven't liked this video before all right and if they have this let's just like gently remind them that you have already liked this video all right that's it um and I keep forgetting the summer I call them but you shouldn't all right moving on uh likes we're gonna update all these mappings all right so we're gonna update all these mappings all right so we're going to have likes and we're gonna go ahead and update update the value of it so we can you can just go plus plus or if you're if you're not that familiar with that you just go likes underscore ID plus one basically take the value of this add one to it and then just like give that value to this specific mapping item thing and then same thing is going to have um underscore video then we just like basically do all the admin admin work around uh the like so we're gonna have to grab the video instance that we just created and push the message sender to the like users uh array and actually I'm gonna say push and push in message that's thunder so that's just going to like again all right and like literally let's just finish all the administrative work around this like functionality so underscore video which is the video instance you just created um and let's just update the liker's array by pushing yeah push my pushing message sender in there what does this do again grab the video that we just created up here it's like the video that we're trying to like right and then there is this array called the likers uh Lakers haha and then pushing the message center meaning the person who actually liked that video pushed them in there so we can keep track of them and now we gotta update all the mappings so this here that we require it to be false we're going to make sure that now this is going to be true so we do it with one equal sign and then we just update it to true and instead of column we're going to have a semicolon and now we're going to update the actual um array of videos that we created somewhere here and now we're actually going to go ahead and update this mapping by by saying that videos ID in Kohl's video so there's a couple of things happening here once again let's just run through it so we create a local instance like just for this specific function outside of this this guy is not even going to exist so create an instance using the mapping that we originally have what you want to do is work on only one object and then just like update that and then push it right back to its place and then get rid of the old value so that's what we're doing we're going to pick that out and then we're going to do stuff with it all right now we're going to need this to determine whether the person who is trying to like this video has already liked it or not if they did if they haven't let's just get them through it which is uh this this stuff and if they have then we get like send this error message back and not don't let the process go through now we're going to increase increase the the amount of likes this video has on it so up that a number swap that by one basically and we're going to also store the person who liked the video in an array and then uh also update the mapping for the specific user whether they like the video or not and uh finally whatever modifications with it on that local instance of that video just put it back get rid of the old value and that's pretty much it now for my rich people who commit events we're going to keep we're going to uh amid the video like the event passing the ID and then the amount of likes and that's basically pretty much the like functionality now I want you to go ahead pause this video and try to figure out the dislike functionality by yourself if you're in and if you're for whatever reason you couldn't figure it out it's okay completely because we're here to learn let's go ahead and do that now so just like last time we're gonna have to pass in an ID and we're gonna go ahead create just like last time actually I'm not even going to type all that you can literally copy this guy and then put this right there that capital V right there new requirement and now in this case we want to check that the person like let's make sure that the person has actually liked the video so instead of false we're going to require that this is true I'm going to update the message and we can be like hey you you like the video first and now once you want to go go ahead and do is decrease the number of likes just like that and then update the mapping to be false and so the person can like it again and then update the modified value and then again for my rich people video dislike pass in the ID and passing the number of likes and that is pretty much our contract so and that is pretty much your contract actually there's one more function that we're going to be doing we're going to make which is going to be get the videos like that and it's going to be a public function which will return a video view returns which will basically return all the videos that we have on stored on the contract so we're going to create a new array we're going to create a new array which will uh which will just populate with all the all the stored videos from the chain so you're just gonna like Define the structure of it and all that kind of stuff and you're going to make sure that this is not going to be longer like there cannot be more items in that specific rate than video than the number of videos we already stored on the on the blockchain and so once you're done with that you want to map through you want to literally Loop through all the all the videos that we have uploaded with the regular boring old for Loop and then one by one push them into the array that we just created now you might notice that I'm doing some wizard right here and actually that's some weird stuff going on there but basically what's happening is that the number of videos the video IDs are starting by what with one that's because we are incrementing the video count over here now this guy is starting from zero so like there's a couple of things that we can do here there's a couple of things that we can do here we can make this make this start at one and then add the equal sign there but it's not like no one really does less than equal to unless I'm just not aware of it so I we just uh opted for going this way and then um they're not but then obviously the video why these have to match the video ideas have to keep up with this so you gotta add one to it and that way you're gonna be fine now once you're done with that let's return that array and you're good to go all right now let's go ahead and actually test this out as it is I'm just gonna add a couple of video a couple of stuff in here and before we test out you want to make sure that everything you had here is get rid of it all no need for that I'm gonna recompile everything that you have and should be good to go now empty out the output because oh wait clear that because there's no reason for you to see all that stuff deploy that bad boy and you're good to go all right new video capturing caption and then put in the URL totally URL number two transact that all right gas burning is there all right let's get the number of videos there's one video get videos get all of the videos all right there you go there's uh literally every kind of every information that you will you need to do you need to know there's your there's your caption there's your url number of likes dislikes the array of likers which is currently an empty array because nobody likes this video and then the owner which is Me Myself and I let's see a number of likes one uh you're gonna pass in the ID all right zero perfect video count oh I think we tested that already um and then videos let's get back to data uh ID is going to be one pass it in you got back all the data that's pretty good uh by my standards all right let's go ahead and like that video there you go all right well there's all the gaslighting going on and let's check the number of likes once again so call that and it says one so we're pretty much good to go for this that is your contract let's go ahead and deploy it now all right let's go ahead and deploy this contract that we have right over here so I'm gonna go ahead and open up that thing down there pull my output back there because uh that's something we're going to be using in a little bit and what you want to do is go into your extensions and now install truffle and the good thing about truffle is it's pretty well integrated with ganache and inferior so it's going to be helpful by the way this is the one that you want to download truffle or vs code by consensus software and they have the check mark so that's cool all right all right this is the thing that you will see this little like truffle looking thingy and you will have two networks over here ganache and infuro and if you don't have them you can literally just click connect not work and then connect it so what you can do once you're done is go into like right click on that Tick Tock dot Soul file and hit build now you can also hide the secondary window or the secondary sidebar and let's just like compile it so build it and there you go everything is up to date nothing to compile that's pretty cool and let's go ahead and deploy now wait I'm clicking the wrong phone and if again if you don't have the deployed file it's not going to work so make sure you have it all right now if you right click on tiktok.sol and then hit deploy and you have ganache connected which once again super easy uh let me just show you real quick so I'm just gonna say connect select ganache and then you're gonna put in a port now how you get the port that's your Port right there 75.45 paste that in there and you're good to go uh and that will connect automatically so I'm gonna clear the output and go back here and deploy to ganache first so this is going to be my local and hit that let's see what happens and if you get the contract address and successful deployment and you're basically good to go now what you want to do is go ahead copy this guy close that and then go into your utils file and contract.js now here it was a little fast Euros contract.js all right that's where you want to go once you copy the contract address create a new variable called um I don't know contract contract like dress or something like that and then just pop that in there or actually we can literally just call oops we're gonna literally just call it a dress no need to go too fancy on it but what that does is uh we're just gonna save it for uh there for now don't worry about it um and then the one more thing you want to make sure is uh go into your artifacts and then there is this Tick Tock that Json file all right that's something called the ABI now this isn't a different format uh but here's the API that we're going to be using so you can either copy that or just copy this entire file and paste it right into your deals folder all right and then what you can do is go ahead and import contract import that as contract API or something like that and we're just gonna Tick Tock the Json and there you have it now you have access to it now with these two things we can create a brand new uh function which will be create contract whoops what happened to my keyboard oh create a contract and there's no input here there's like little thing to input um now what you want to do is store the restructure the ethereum object from your window from the window so what that what's that like that doesn't make sense window if you don't know it that's the like all the code that is running in your browser and then ethereum is the specific code that metamask injects into your browser whenever it's running so uh there you go I'm just going to go ahead and unlock it and there's like all kinds of code going on in the background in metamax metamask injects some into it and that'll make it easy to interact with the contract now if this ethereum um ethereum object exists in my window and what I want to do is generate a create a new instance of web3 um by using the web3 JS Library so let's go ahead and import that just like that and that should be good to go for now and then we're going to return a new web3 is contract using the contract ABI hey and the address now once once again as I said it earlier you want to go for the ABI itself all right so there's a bunch of random code in here which we're not really going to need so just use that and then you can just refer to that and then that basically takes care of all the contract interface or interaction uh type of stuff all right now that we're done with our ganache uh our ganache deployment what you want to do is once again hit Deploy on that bad boy but this time I'm going to select girly and leave the leave the gas gas price empty and then here if you haven't worked with uh this extension before you will only have paste mnemonic and generate mnemonic I because I have worked with it I already have this uh thing uh there and that's just that means that I already have a wallet set up with my with my truffle so what you can do if you don't have it is go into your meta mask and then click that three thing no actually click that guy click settings I don't even know where to go hit uh privacy security whatever and then secret recovery phrase and then just pop in your password now do not share this with anybody and just like keep it separate from where your money is at like just just think basically all right like whenever someone has access to your secret recovery phrase uh phrase that basically means they have full control over your wallet so and then like if you think that oh your wallet might be at risk just generating a new one put your funds somewhere safe just like use your brain all right but in this video and I want to like emphasize this we at cover program will never ask for your private key or any kind of private stuff we don't even ask for your public Keys all right we don't ask for anything so if anybody in the comments pretends to be us it's not us be smart save your money all right so there you have it uh grab that and once you paste it there it's gonna be something oops Yeah paste and then you paste something in there and then this window will pop up now you can save it somewhere and then uh this extension will remember it just like it remembers for me so I'm just gonna pop up early there and again and then you can just use it like that so there you go now it's going to take a little extra time because once again it's a test nut it takes longer so I'm just gonna fast forward there and then show you what the result is um by the way if you're a deployment is uh stuck um there's gonna be that little thing going down there uh what you want to make sure is that you have your notifications on but mines are off because I like to focus just click that install button and then you're gonna be basically good to go and this is going to take a little extra time and there are like all kinds of random things going on here so I'm just going to remove that um and then it failed for whatever reason let's check it out now let's go ahead try again I don't really understand what's happening oh I think it just timed out because it oh wait all right so if that issue happens to you you might want to go ahead and create a separate folder for your next app that's great folder it's called maxed app put your pages uh and then like leave everything contract related out here so you're going to need your contacts your components uh not build the next folder Pages public Styles and your your next config package.json and and I think those are the only ones oh yes Lind and the dot EnV file so once you have all these go ahead grab them and then just throw them in there in the next step folder so that should pre that's your Technique to take care of a lot of things so go into your terminal then we're gonna reset that and then you're gonna have to CB into our next app folder and then just run the yarn in there let's see if that uh figures itself out and in the meantime um so there the reason we're doing that is there's some uh peer dependency issues there so that's that's fine we'll figure it out um now you also want to make sure you update your getting more and remove all these folder things um because otherwise like otherwise it will only look in this very specific folder however I need it to look in all other folders and now you can see your like uh get thing is only recognizing 55 changes not 200 5 000 whatever so we'll not need that and let's try deploying this guy again girly um open that bad boy install it npmi and then that should technically generate a new uh package Json file soon I think it did it already I just don't see where it's at oh there you go there it is and that should be the only file that is out there uh where that should be the only dependency that the outer project has this is once again this is like these are like things that will come with experience don't worry about it if you didn't figure it out by yourself like there's nothing shameful about it all right so once you've done all of that um there's still going to be a couple of Errors if uh if you're like me however it might have solve it so there's a few things just to wrap it up again what you wanna what you need to do so create a next Dash app folder and you will need to pass in all these files uh and then just remove any like everything like all of these stuff have to come in here in your git ignore September step number one step number two in the get ignore file all these uh files will have a slash in front of them just like this one and I forgot about it remove all the slashes literally you can come in uh to command nav click that uh thing and then just print put a slash in there and then put nothing there and just like one by one remove all this lashes so removed it from the comments but it doesn't really matter there so you don't want to see any kind of slashes in here because that will like that will only that will make this follow look for those folders in here and not one or two levels deeper once that's done remove all the node modules so remove your node modules from there remove your node modules from out here and that should put you in a pretty good place now these are the only files that you should be seeing in fact you shouldn't even be seeing this this is just one of my functions I'm just going to remove it you're not going to have that file see these are the files that you should see here everything else that is basically has anything to do with your frontend application has to be put in here all right so this is something that all right now you're going to learn and actually I'm pretty glad we made this mistake this is a mistake on RN uh however if you happen to ever do this now you're going to be prepared for that so everything bad has something good in it look at the positive end of stuff all right so now you just learned that scale and then once you're done and removed everything open up your terminal I said terminal so stop everything and then you will have to run reset a couple of times I'm just gonna restart both of my terminals here and then one folder what you want to do is CD and turn that app folder and then just throw in the yarn and let it do its thing that will ensure that your next app is ready to go and then we'll restart it in just a second and this other one is only going to be used for for like installing stuff all right just type in your knob once that's done and then your next stop should be pretty much good to go all right they're like stuff that that are not working perfectly so let's see oh apparently okay so I forgot my utils folder to put that there too it's gonna be that's gonna need to be there all right there you go now it's working there we go we're good there all right so that should be good and now what you're going to do is now you will be able to deploy the contract all right it might still give an error but there should be no other kind of error the reason that other error was happening is because deployment need this deployment contract deployment needs a specific version of react but uh or like a specific dependency however the next app requires a different version of that and that conflicts and then it just like throws all kinds of Errors so figure it out good to go all right now it failed again so as and that's because we just like didn't install anything there so let's run yarn there and when it comes to like blockchain sometimes yarn doesn't seem to work sometimes uh npm doesn't work so what I like to do is just run both of them and then usually that saves me a lot of headache so once my yarn finish running I'm just gonna go ahead and run uh npm install as well just for good measure totally no need to do that but I'll just do it anyways and then let's see what do we got now reset that terminal that one is running so that's good head my contracts Tick Tock Soul deploy that bad boy and then just select girly all right now it's waiting and now it's throwing me a different error so it says use error user project is inactive all right that's fine that that error I'm pretty familiar with and that's fine so in your truffle what you want to do is check if you're in for a service is connected to the right project all right obviously like if the project is not existing in my account out here in on infuro it's obviously not going to work so you got your um Tick Tock right but it says eBay there that's fine I can just right click on that guy so that guy and then disconnected cool now you might be using the Truffle extension for the very first time and in that case when you connect to the inferior service it will pop open a little window here that will just force you to sign in all right once you sign in that guy will come up and then you can pick it up where I'm at so once you sign in Easy just pops up in your browser hit authorize and you're good to go then you can just select the project you want to connect to okay and we should be good to go pretty much now all right let's go back and for the fifth time at this point it's like girly inferior Tick Tock clone girly zero grass lowest price and create that guy or use that guy there's another uh user project as an athlete okay well if that happens let's go into our truffle config so here you can just clearly like take this entire networks thing and just get rid of the entire thing like you don't need any of that it will be regenerated so let's go that's fine all right hit deploy again girly no gas prices paste that let's see if it like go through this done so far so good because it takes longer times and it's like deploying and raw all right let's see like the other ones were like way faster at throwing the air and there you go I think this is this is already good to go it's like there's a bunch of steps and there's a bunch of places where it can go wrong this was a good debugging session where you will be able to uh face a ton of errors that uh all of us face on a daily basis and if you miss like one step this is where you can come back to figure out all the errors that you might have made somewhere so there it is and then when you see all these blocks like that's when actually it's like verifying that it is being deployed and the transaction hash that you see here uh those are that's being verified on these blocks so let's wait for it and whenever you see our contract address that's when you know you're good and it also says like deploy succeeded and it also says deploy succeeded so that's pretty much it now you want to go ahead and copy this number too or like this address as well and then go back to your utils so now inside of next step and then hit the contract file and then after here you can go ahead and put in the I don't know just like say something like okay this is ganache and then let's put export cons to contrast again and then say girly and then just like comment on this entire line and whenever we are ready you can literally just change it to this specific address and then this will be available for anybody out there you can share it with your friends family whatever um and they will be able to use your app it's that sad that was a pretty rough deployment but we made it um and if you made it this far and you have that same error I usually just get rid of that yes then file and it usually goes away in a little bit but if you made it as far you're a champ let's keep on going all right now with the deployment done let's go ahead and start connecting our wallets to this bad boy so there's a few things that we're gonna need to do so go into your applejs file and then here we're going to import a couple of things we already have our contacts set up so don't have to worry about that that's pretty cool thanks Kevin shout out all right so we're going to import the CSS file of rainbowkid alright so Rainbow Kids that's CSS and then we're gonna import a couple few a couple more things so there's chain singular there's configure chains and then there is create client and then there is uh wag me config and all this comes from wagme now I don't know what's good there it got imported a couple times well there you go all right now that should that should look way better all right then we're going to go ahead and import a couple more things because we're not done yet we're gonna get default default two walnuts and Rainbow kit provider and you also need Dark theme because we want to make it look cool and all this is coming from that rainbow okay where rainbow me slash rainbow okay whatever you can read and then two more things you got we got we got anything for your provider uh we're gonna need the providers so we're gonna need infuria Pro divider from wag me slash providers slash in fira like that and then I'm just gonna duplicate that line and change that to Json our PC like that and I'm gonna import Json RPC Provider from there pretty good and just like in a couple previous videos that you might have seen or I haven't if not what are you doing this like put it on your watch later watch after this one all right const you want to destructure chains and provider from whoops um configure chains like that and then we're gonna have two arrays in here all right so the first one is going to be the chain so we're gonna have chain dot girly and now we're gonna have James not Json chain the low Focus perfect our chains are ready to go and then next up we're gonna create the providers so we're gonna have two we're gonna have the inferior provider which will need the API key all right so let's put that guy there and then we're gonna say process the environment Dot uh let's go to the dnv file all right so that's the that's the key that we'll need put that there and that will basically look important and then you also want to up the priority so the priority is going to be one meaning any kind of change that change that we're gonna uh connect to with this app um first we're gonna look for it on infuria if inferior doesn't have to if your uh happens do not support that specific chain and we're gonna need to uh add the Json RPC provider so Json RPC provider like that open Paran open that squiggly new line set the priority number two meaning it's going to be coming after the Imperial one and then just put in the RPC link chain and then in the shade a function which will return this HTTP object which is going to be uh once again seven five four to five this is coming from ganache so where's my gun Rush there it is once again this is your link with the there and you should be good to go actually what I want to do is just copy this whole entire thing just in case there is some weird stuff that should be that should be coming back to low holes but like weird things happen sometimes let's just make sure that everything is identical all right let's go ahead and create some connectors here the default wallets and then pass in a few things you're gonna pass in app name is going to be what is this Tick Tock just like that perfect and then you want to pass some chains nice you got the connectors there and then last but not least you want to create a wag me config so let me config equals um create client and you want to enable auto connect it's going to be true the new one in a you want to pass in connectors and you want to pass in provider and now it should be good to go all right now we want to wrap this around our application so we're gonna need the wag make config and then you wanna pass in the variable that you just created as your client hey there you go all right close that bad boy wrap it around bam air is gone cool all right now you're gonna need rain bokeh provider theme dark theme but make it a function enable cool mode because that's pretty cool and then uh a little similar passing chains uh and that should be that guy so yeah once you put that there you're good all right close that and after that provider that should be ready to go too all right that should be pretty much enabled you to do it all right there's some hydration error going on let's refresh let's see if it's still there no it's not that's pretty good all right now we're gonna add the connect button and the um conditional rendering all right so for that you want to go into our index.js file and then we're gonna import a couple of things here so first of all we're gonna need um use account all right from wag me because wag me is cool and they take care of all the account related stuff and the all the wallet connection related stuff all right so you wanna have a use effect I don't know if we imported that or not yup we haven't um see we're gonna need that soon and then one of our address changes and by the way what is the address you get out you want to go ahead and destruct your address from a user account first like that so whenever that changes you want to update a state which we have to find here it's a user account and you will have some user account like that which will be a used State bam it's like that and I like to put that stuff up there nice so one whenever the uh connected wallet changes you will basically update the use date so just like that and then I'm gonna go grab this guy this actually should be user account wow whenever that that guy is actually true meaning that there is a value you want to render out this whole thing let's see what do we got there okay so that's interesting that's probably because I still have it connected to my wallet is still connected so let's see if I disconnect this and then this all right there you go so now it seems like it's a completely empty thing that's that's fine that's fine so now what we're gonna do is go ahead and import a connect button so it's going to be connect button from Rainbow me slash rainbow kick and then grab that guy and that guy will basically take care of our entire wallet popup and things like that so thank you Rambo kit let's see what do we got bam connect bam cool mode um let's go with the second one next connect bam okay so this wrong Network that's fine no issues actually it's not the wrong Network it might be oh so there's some sort of issues uh there's some sort of issue with the chains right now let's figure what's uh what's happening there okay so I think I figured out what the issue is if you go back into your app.js file um we gotta put in these chains all right and yeah plural and singular sometimes gets messed up so you want to just make sure that these are the chains that you're passing in there that should yeah there you go it literally just fixed it in real time you don't even have to worry about it and now it gives you this nice little connect disconnect and then Network switcher thing so that said while the connection is ready let's go ahead and connect the functionality to this app and we should be good to go let's go ahead and get started connecting all the features so our boy Kevin kevs has already set up our contacts so that's pretty good now I don't have to worry about that so go into your contacts file that's where we're going to be work I thought it was just open it and then close the trailer that was done all right let's go into context and here's gonna be a few things that we're going to be setting up uh straight away so we're gonna have to import a couple things uh just like with it it on the index file we're gonna need the use account from wagme and we're gonna need to import hello I'm gonna need to import create contract hey create contract help if I could like type without typos apparently all right next up we're going to create a couple of these states in here and so we're gonna need a user account and a set user account use stage which will start off as empty uh or like empty strings then you're gonna need a um contract instance basically and that that's what we're going to be using to interact with the uh smart contract itself and then we're going to store the video data somewhere so we're gonna have videos uh and set videos and that's going to start off as a empty array and so with that said let's go ahead and destructure address from our user account and let's fix the typo again and we're gonna get started with and we're gonna go we're just gonna like jump straight into it so we're gonna need a use effect all right so we're just gonna initialize everything so whenever the address changes and if you don't know what use effect is it's basically just a piece of code that runs once when you fire out the application and if you pass in any kind of variables here it's just going to keep on running whenever that thing changes and that's what we want to do because if you change the wallet that's being that's connected to your app you want everything to refresh all right because like imagine you log in with your wallet and the next user comes in logs in with their wallet but they start spending your money all right pretty easy to understand why it's important all right now you obviously want to go ahead and update the contract instance as well and we don't need to pass in that it actually doesn't really change but uh just in case there is some sort of there is a network change or something like that the wallet address might change and that's the easiest way to like kick things off all right and there's going to be a couple of functions that we're going to implement here so first of all I'm just gonna like lay out everything and then we're gonna go one by one all right we're going to start with create video and it's going to be an async function with a caption and a URL input leave it right there next up we're gonna have a call get all videos which will uh again the amazing function with no inputs and then just close it right there and then um I mean that's something we want to definitely run every single time with the application starts or the contract is being updated so whenever the contract is updated we want to run this get all videos function like that and then there's going to be a couple more so obviously you want to go ahead and like a video so there's gonna be another racing function and by the way everybody everything is going to be async in here and if you like a video if you also want to dislike a video like that and then you want to know whether a video is liked or not and you also want to be able to get the number of likes on a specific video just like that and actually I kind of want to put these at like right after all all this get function and so this will create a video this will get get all the videos this will get for one specific video like this is a Creator function these are like uh this is get everything function this is get one specific videos stuff and then this is interacting with one specific uh or these are interacting with one specific video so I just like to like kind of like group these based on these uh parameters you can switch on them around like have whatever order in there it doesn't really matter it's just for my personal taste and I prefer them like that now you want to export a couple of things so you definitely want to in sport create video because you will use it in other components and then you want to export like video because you want to use it in other components that you want to export dislike video because you want to use it in other components and then you want to export videos as in the state because you want to use it in other components there's light once again because you want to use it in other components a and then get number of likes because you guessed it when I use it in other components nice uh there is some sort of error going on there maybe that's because I should be exporting videos instead of video well that would be helpful if I try to export something that actually doesn't does exist all right let's hook all of these up with all of their uh respective let's hook all these functions up to all the components somewhere else in the app and then we're just gonna like go through them fill them out and we're done so once again what's happening is we are connecting all the functions before we even type them out because it's just all kinds of like random setup stuff it doesn't like it breaks the flow so I just want to like get them over with real fast and then we just like get to the meaty stuff fast all right so export your create uh import your create video destructure it and then uh and then down here in your handles instead of normal like regular way of doing things we're going to toast dot promise I'm gonna say toast dot promptness which what it will do it will give us a nice little animation that will wait for the function to resolve itself and if it resolves you're gonna get a jack Mark and if it doesn't then you're gonna get an X and so it's like super Visual and it also like uh it's also really good for the user experience it's a little weird when it comes to uh the code itself because it has this react hot toast um library that we're gonna need to use but that's the tradeoff for it some nice little animations all right so you're gonna uh pass the create video function in here where you're going to pass in uh the caption and the video URL which are by the way um all these states that we order this set up here so that's completely ready and waiting for you and then there's a few things that you can pop in here these are basically all the messages that uh the toast message will give you so if it's still being it's loading and it's gonna say uploading video this can take a moment with a little nice animation once it's succeeded that's what it's going to say and there is an error message just so we handled that too so you're gonna know if something went wrong there are these two lines commented out so we're just going to comment them back in and that function should technically be pretty good to go let's go back to our context and just console log those things out whenever this function runs just like that and that should be that should be let's see what have we got let's see if it's working if we need to do anything so press that type in caption and then URL and then just hit create new there you go it's ready to go and you also saw there's there's a toast message so that's pretty good all right let's move on with our next one all right so let's go into our sidebar.js file and this is actually just this there's like a lot of things going on there so there you go let's go ahead and figure out what is happening here so there's a few things that we're going to be destructuring here like hang on there so we're gonna need light video we're gonna need this like video we're gonna need um get number of videos all right and what you need is like up like that got this so let's just double check yeah that circuits okay so there's no typos there so that's pretty good now now we're gonna be updating a few things here whoa my copilot is going hard so we're gonna need a use effect in here and I believe we have that imported and then if not it's gonna be an epic fail foreign all right we're gonna need to just create a function in here because that's one thing that um use effect doesn't really let us do so if you want to do wait check if light if you're going to do any kind of async stuff in uh inside of this effect you will need an internal function for that so that's exactly what we're making and then like straight away right after that just call it and then you should be good to go or you can also create a something called a selfexecuting function or a selfinvoking function not entirely sure um of the name I like I love them a lot I usually use them at this time though but it's whatever all right so here we're gonna create a comp light variable which is literally just gonna invoke the is light function and pass in ID now after that we're gonna also create a likes variable which is going to wait for the get number of likes function to return a value and then we're just gonna update all the states that we have here so set number of likes that's pretty easy and then right above that select light light to all of these we will be writing them in just a second these will return uh I already have that I don't know how did I have it anyways these functions will return like obviously satellite will return a Boolean and get number of or Set uh or is like this going to return a Boolean and get number of likes is going to return a numbered uh number itself but we're gonna need that we're gonna need that to update all the stuff that we have here and there's a use effect issue that we have that's completely fine because we can just copy that and there was probably a typo there you go that will update update the value there so let's see uh if we go into context and we just say that it should return uh return false but I wanna I want it to return true like that and then get a number of likes is going to return some weird number like put something there some very weird Let It Go like it's it's working perfectly now which is like after actually populate like real data to it and there you go now it's light and then if you want to change it to false it's going to be false and there you go you can also update that number yeah 55.55 there you go it's working perfectly now we're just gonna get all the functionality behind it that is actually going to make this app work and then there's one more file where we're going to be needing uh functions from the context is it's going to be the main view.js now here uh as you can see there's this dummy uh Tick Tock I'm just going to remove it we don't we don't need that now what we do need though is oh we actually have the destructuring ready for us uh we need the videos and here we're just gonna have another use effect empty this out and put that out and we only we need to fire this up every single time whenever a video is change so we want to update the the tick tocks use of uh the tick tocks use tape so we're just going to come in here and then set tick tocks and then videos so what this does is from here we'll populate all the video data into this uh use State and then inside of main view we're going to use that and we're going to use that to populate this data right now because there's like no videos in there it's just going to say no video that's completely fine we're gonna get to it in a minute and then uh and then it's going to have our videos all right with that said let's uh we're pretty much we're good to go on hooking up all the all the functionality to all the other uh components now it's actually just time to write all these functions and we're going to be done with this project in no time all right now that we are able to get videos or like with that error but we're gonna fix that in a little bit um that's cool hat and actually implement the create videos function and by the way this is going to be like almost scary easy now one more thing that you're gonna make sure here is that well one more thing you want to make sure here is that you're checking for the uh address as well so if there's no user logged in this function doesn't run and it's not supposed to run all right so this guy what what this is gonna do is we're just gonna wait uh and we're gonna grab the contract and then once again methods so that's what I was saying look out for all the patterns that you can recognize and just like memorize them all right all right let's see what do we got in the contract itself we have create video okay so let's put that guy there and then we're gonna pass in a bunch of things but this is what I was talking about in the previous section that you know normally you would you would just hit the transact button uh but in this case we're actually going to be saying send and what that will like make our like what that will do is pop open your meta mask and then um do some do the kind of transactions that you saw on other websites you want to make sure the sender of the money is going to be the address meaning the person that is actually locked in all right and that's what we're uh searching for it now I just want to like put that there instead and we can also put that guy there as well so if the state is not updated the app is not gonna load so that's perfect if if we're checking for that all right so from so from user account so the person who is logged in is going to be paying for this transaction basically all they got to pay for is the gas fees which is not that crazy high especially now that uh there was this East merch all right I'm gonna specify the gas and in this case we're just gonna go with one million and remember this is in way so this is like not eth all right so if you like chill out and then you want to set the guest prize to be null so basically what this is is you're setting the max gas to be spent is going to be 1 million way which is like fraction of an ethereum and then you also want to set the gas price less than like the minimum or like whatever money to be like burnt or like whatever it used to be burned is gonna be no and that should technically be pretty much good to go now one more thing you want to add is you want to pass in the caption and you want to pass in the URL that you are getting from this function all right so let's see how that works it's about a week out this guy let's open that and then this is my first video and I got this video URL on my clipboard so I'm just gonna put that and I'll hit create new let's see what that does hit confirm it says video uploaded all right let's see what we got um so it still says the get videos is not a function that's a little interesting to me let's double check the log here so as it blocks into as blocks seem to be working so that's pretty good and the contract address that we interacted with is the B9 so that should be good too and I think I oh and I mean obviously I was talking about how like pattern recognition but I'm not recognizing the pattern itself either so like when you got contract there's a lot of things you can do with it so when you want to call a method inside of a contract you want to like specify that it's like expecting someone to listen to you when you're not even calling them right oh boy and again as usual um methods all right don't make these silly mistakes that I do like I literally had a mistake in these zigzag exact same row twice all right don't don't mess it up like same line to it to the same errors J's all right let's update let's see what's happening here all right cannot read properties of undefined address all right let's see that's uh there's gonna be a few different wait what's happening there all right let's restart this guy all right refresh well that guy never had an issue or just that's pretty good all right there you go that's your uh First Tech talk I don't know why it's not showing up though so that's interesting let's figure that part out so we've got the URL oh that should technically work all right so as you can see there is my uh link however to go ahead copy that let's just animate that's not gonna work all right let's go ahead and create a new Ted Talk post I'm just gonna go ahead and grab a new link all right so finally I got a correct link let's just put this guy in here and let's is my first video that actually works let's see how that goes all right create new yup go in front of that guy and there you go video uploaded all right let's refresh and if I scroll down there you go there is your first Tick Tock that you just uploaded this uh yeah this will be this will need to be redeployed this is for a tutorial yeah I put an image here that's fine that's fine anyways now it's time we go ahead and actually like this video pretty good one you should watch it the cover programmer on tick tock all right that being said let's go ahead and let's move on to the other function so there's a few more as is like and there's get number of likes so let's actually get those done first because those are going to be the easiest ones all right so get number of likes we got all the uh guard Clauses and everything set up so we're just gonna wait and we're gonna say contract dot methods finally didn't mess it up let's go to our solidity file and then get number contract methods okay so we're going to say oh wait contract Dot methods and we're gonna have a little bit of a Twist here so think that yeah whatever uh copilot things that's that's fine that's fine so let's go into our solidity file so if you think about it we haven't really created any kind of good number of likes function in here so instead we are going to use this mapping so let's see how we can call this activate that um that guy there and then just close the output we're not going to need it just open this and then uh here you see if you passing the the ID of the video all right if you're passing the idea of the video that's where uh that's how you're gonna get that number of likes back all right so that's the one we're gonna call so we're gonna say all right so wherever we're at oh yeah here likes and we're gonna pass an ID which we got from the front we're gonna go ahead and call that and let's just cancel log before we do anything and so for that it is helpful if we put it in a variable so it's going to be likes of course likes equals that I'm just passing lights there and let's see what we got there you go there's four zeros that means like okay it was console locked twice but that's completely fine now we're just gonna like pass it to pass it back to the uh to the front end actually it's kind of cool that I have this black thing here because it's like way easier to see it than here that's actually that was actually a power move yes all right well what we're gonna do now is is actually just go ahead and say return likes remove the console a lot because we don't need that and let's see there you go it says zero now I could like it but I mean it doesn't go through yet and it's just like random stuff happening don't worry about it all right obviously we haven't even defined this so uh next up we're gonna look for is light and so once again we're going to be using the solidity file here and we're gonna go for the liked users then we're gonna go for this like complicated mapping so let's just go ahead and grab like users and then uh wait where is this light here is his light all right there you go so let's go ahead and type in weight contract dot methods and then pass in that guy and then if you remember it needs two inputs so one of them is going to be the user address because we are interested in whether the user is currently using the app hat has liked this video or not and then we're going to pass in the ID which we're getting from the front end and then just call that and then once again you want to save it user liked in a separate variable and then just return it and let's see how that works out okay so it says user address is not defined that's interesting because I clearly remember defining it oh it's a user account that would be helpful if everything was the same all right let's see and there you go now that part works okay so there's literally the only thing that's left is liking and disliking a video so let's go ahead and implant those right now both of them are going to be almost the exact same so I'm just going to type it out once and then copy paste and then we're good to go so what we're gonna do here is we're gonna call another function from the contract so we got methods and then how do we even call this so come back here let's see it was like video and it needed the ID all right so paste that and then we're going to pass in the ID that we got from the front end nice and then uh we're gonna need to pass in a few things but that's literally the same thing that we are passing in when we're creating it so I'm just gonna once again for Leicester just copy it and then see how that works out now the same thing can be said about this like video the only thing is you're gonna change the method that we're using and that's going to be this live video Let's place that there and I'm just gonna refresh so everything is good to go and hit that okay my metamask is popping up there's nothing no fees to pay no fees to pay and if I refresh my video is like then there is one more lot there is one like so that my friends is literally the entire build now you can go ahead and go customize this build show it to your friends family whatever but this is pretty much this build and this is a wrap I think this is a pretty good way this was a pretty good video to understand a bunch of errors that you could be making while you are working on these projects and I hope you get some value out of it and if you did let me know Down Below in the comments that's it see you next time peace in this video we're going to be building the open C clone but with a little bit of a Twist because this time we will actually watch Chad GP to build it using infuria to connect to the ethereum blockchain so with that being said let's go ahead and get started all right now ai is smart and all but it's not as smart as everybody thinks it is it still cannot set up the project for you so while it can write the code for you it can't set it up so still we're gonna need to run the cpcli so we just run it that will get everything started put in your name email and then openc chat GPT the project we're going to be running now it opens inferior for you again you are still in control so if you don't have a infuro account already just go ahead make one and let's actually set it up but before that the terminal will finish running and it will open vs code for you that's where we're going to be putting everything Che GPD spits at us so you can go ahead spin up the app and in the meantime just create a new API key we're going to be using the web3 API and then putting the name however you want to make sure that you are not putting any spaces in that project name it could cause problems later and it's also just good practice not to do it all right let's go create that so that's nice over there we're gonna get back to that in a little bit there's your API key there is your and there are your endpoints and this is your app currently so it already has connect metamask wallet and all that functionality included so don't worry about that we're just going to be specifically focusing on the contract part with Chad GPT so let's move on to actually writing the contract all right this is going to be interesting this is gonna be a new one so here's my chat GPT and however it's still like you gotta be like super specific so let me just show you an example I just want to give you an idea of what kind of commands you can give to chegebt and as you can see I'm using gpd4 that's like a little fast a little smarter actually that's slower however it's a 20 upgrade but gpd3 which is free and available for everybody at no charge you can still do this exact same thing now what you might experience is if you're using chechi pt3 is that you want to have like tiny bite size prompt rather than longer prompts because that can only process so much text however this app can be completely and 100 built with that I just wanted to show it with this one this fits better on a screen and I can explain it better so let me just show you so here's what we're going to do you want to type in something along the lines of create a solidity smart that uses ERC 729 for an open zaplin name it nft collection like you got to be specific with it give it a name what exactly do you want it to have so the URI storage ownable you still have to understand the fundamentals of solidity encoding in order to be able to use it now we want to be using the counters as well and we want the library that keeps track of the token IDs and let me just freeze it here here we have 12 very specific commands that we want from this app so again if you're using gpt3 you can just break it down to 12 separate prompts it will be way faster you can just do it that way so we want to have a price of the of this NFD you have to specify you have to call it a constant otherwise it will not know what you want to do you want to have a struct so you still have to understand what's happening like you have to know almost if you were writing it so you need we need this truck that will contain all the data that will have two un256 holes ID and price you want to map the map that nft data right I'm sorry you want to map a number to the nft data meaning the ID to the NFC data itself we will need the Constructor that will set the name and symbol and you have to give it the values and if the collection and FTC respectively so basically the name will be an ft collection and then FTC will be the symbol but again it understands if you say respectively then we will need a function set price that will receive the token ID and will receive the prices to arguments and then we'll check whether that token exists or not and then we'll set the price and we're going to have an add nft which will increase in the counter and then create the NFC data object and then I mean the token so it will basically generate all the right it will basically do all the maintenance around me then we're going to have a total Supply that Returns the number of minted tokens purchase nft which will complete a purchase transaction get all token Uris return all token URLs and you name it and then we will have the burn function from the inherited contract overridden in a token URI as well so let's see what GPD says and it actually gave a a pretty long contract so I'm not going to just go through it right now let's just put it into our vs code so I'm going to go ahead go into contract and create a nft collection.sol file and then just paste it there so what I recommend you do is whatever it gives you just start pasting it back into your vs code and then just keep compiling the code that way you don't have to do any of the understanding and obviously there's a bug you obviously have to understand what's happening but you don't have to do all the thinking and everything that is involved with coding itself so what you can do is you just paste it and then just type in your terminal truffle compile and that will check it for you it will obviously compile it for you and it will spit any kind of errors or anything that you have and that's when you start debugging so there you go this one was compiled perfectly we don't even have to go through it we just know it works we know it has all the functionality however if you were a beginner in solidity I still recommend you go through the contract and try to understand what's what pick it apart because that will serve you well all right let's move on to the next step all right so now let's deploy the contract if you don't know how you can ask kgbt or if you already know you can just do it so what we always do in the Truffle extension if you don't have it free from the vs code extension Library just go in there you can disconnect all previous projects or just connect it as new ones this is an inferior service and it's so good how they are integrated because it just pops up all your projects you can just connect to open openc and now you can go ahead just click deploy and it will do everything for you so there are all your networks use the mnemonic and there you go now it's deploying so everything should be fun and it looks like we are getting some positive results there you go deploy succeeded so that looks good we can now copy the contract address and actually let's paste it into our listings JS it will be useful later so let's move on all right so in this one we're going to be setting up the contract instance so that the app can work an interface with the contract so let's go ahead and do that so we're going to be using the listings JS file and we're actually going to be needing it but let's just put it there in line 20. that that's where we're going to set up the contract instance this will help check GPT just kind of like work its way through this file because we're gonna be giving it the entire thing so here's what we're gonna do put it there set up contract instance and then just highlight everything copy it and let's go over to Chrome now what we want to do is we want to set up a contract instance for our contract state in the use effect and then just paste it there so basically just tell it that hey there's this use effect I want to interface with the contract and then we'll just figure out the rest you can specify oh this is where I want it to be or you want to be you can also just say that hey I want to interface with a ethereum contract give me the code for it something along those lines I want you to try it multiple ways so you just have a muscle memory like what to all right just paste the file there good to go and let's see what it says all right so that looks good now we also have to make sure that we're importing the ABI and that obviously it doesn't know where it's absolutely will have to figure that out but just you can paste that line there and then just update where the API is at so now you obviously want to make sure that the location is correct so for me it's in the build slash contracts of nft collection Json and now it also gay also made this address constant so that's nice we can just replace our comment with that so that's actually helpful that it did that and now this is where this is the Moment of Truth this is where we're going to be copying over the use effect that it actually built for us so that first use effect is ladies and gentlemen that is where everything happens that's what we came here so just go ahead copy that entire thing and if you can see over there we just had an empty use effect so I figured it all out it put it there that is perfect and that should in theory work let's check it out I want to make sure that down there everything is console logging all the errors otherwise we're never going to figure out what the issue is and it looks like there's already an error and it looks like that it cannot find the map part in the ABI the so that looks interesting and that's very likely because these ABI files usually have an ABI object in them so I use that instead of the regular API file and it looks like that just saved this whole thing there you have it all right so now we're going to make Chad GPT build the add nft function so let's ask it to make it so you can just say okay now let's do the Advent ft function or something along those lines normally remembers if you gave it a bunch of things and it should in theory remember the conversation you guys had before okay that was weird to say but in case it doesn't you can also just again give it to the entire file again and be like hey that is the add NFD function make it so that it does this and so sometimes you need to refresh its memory all right let's see what it says so that looks good now let's go ahead and replace everything so we have something to put it put to the add nft function and we also have to replace the handle submit so it actually gave us two functions so that's nice now let's copy over the add nft to collection function so that's already there you can just replace it with whatever it gave you don't even worry about it we'll check it in a little bit whether it work works or not and now let's check the handle submit function and just replace it there let's see what's happening so open up the app and now if everything goes well technically we should be able to amend the nft so just paste your nft URI we already gave you all these things so just from the metadata let's copy that paste it there and then that and then just the price so remember because we asked Chad GPT to set a price for the minting which is 0.001 eth you will have to pass in that value there so just make sure what the value is you can go back to your contract file and double check so there's the metamask popup so that looks good and it's actually pending and there's the snft function going through and it looks like it was actually successful so let's search the nfts all right so far it's been pretty smooth let's see if fetching these nfts are going to confuse it so let's just say okay now let's do the fetch nft metadata function and let's see what it says so that looks interesting it looks like it cut in half so sometimes it happens so you can just say something along the lines okay continue or whatever carry on and it will just continue or regenerate response or whatever and even apologizes so that's nice okay so that's looking good let's copy this code over to our vs code and replace the fetch nft metadata function so let's see if it works and it looks like the image is missing the source property okay now we're laying like some deep trouble let's see what's happening and it also looks like that we are fetching the token URI which is not necessarily the good thing to do we should like extract the data out of it that's the issue it's not the token URI that we're looking for so we should be fetching not the object we should be fetching the you the image URI and all these things from that object so let's take a look at that and by the way we can just give it that hey this is how you build up the URL that will work for the image so let's see okay so that looks much better if you take a look at it in the previous response in the previous response we only had this stuff so basically we just had the token URI and then it just passed it back here and now that was pretty much it now in this one what it does is it actually uses that same token URI right here as we gave it to it and it actually fetches the metadata itself and there you go now we have the metadata and we actually can do something with it so like we can get so we can get pretty lazy with this stuff and we can just make it do a lot of things so we can just copy this over and you want to make sure that you highlight the entire thing and then just paste the new stuff there you can just paste in the metadata fetching itself so there's the metadata that looks good however we're looking for the image URL and you can see how it like starts to poop out it's not that smart but it's pretty impressive that this is the first time that we are actually coding something and we have to use our brains so that's pretty nuts now we have to like make sure it knows everything instead of metadata when I have an image that we'll need to fact we'll need to get the image property from the metadata and same goes for the name because right now it doesn't show up but there you have it the image is there so that looks good so far but as I said the name is not there so we're going to extract that too and now it shows up and that's as much as fetching goes all right so the last tap is that we will enable the user to purchase these nfts so let's take a look at that let's make do the work for us so you can just say all right now build the nft or the purchase nft function it will spit an answer back at you that looks good let's copy it over and then you can just paste it to the appropriate place that looks promising let's let's see what's up and by the way this app is built so that when you click the image it will run that purchase nft function so let's click it and it looks like to be an error and something along the lines of the value must be string and it got a big number let's just make the listing price a string usually that's the listing price because way is a big number so you just want to convert it to a string that might not have been added there but it's fine and we can also remove that line from there that's not really useful we are not doing yeah it literally parses the price to Ether and we don't want to work with that we want to work with a weight that's how solid it works okay so that looks good okay that looks way better and now they are over there on line 53 just make sure the value is price not price in way otherwise you're going to have another error so now that we've cleared it up and fixed everything and again this is where it comes in that human power is still required and necessary more than ever so let's check it out and now I'm gonna hit it and then metamask popped up so that looks good and purchase is pending and it looks like it just went through and now we can just go ahead meet new nfts purchase those nfts so that is pretty much the build you can just repeat this as much as you want to that's pretty much the build thank you so much for watching and now you should go ahead and practice learning you chat GPT this is a tool this is not there to replace you but you have to be able to use it you have to be able to increase your output using tools like chat GPT whether you use the model 3 or the model 4 it will just make you faster so with that said thank you so much for watching and I'll see you in the next one peace