(bell dings) Here are the four things I wish I knew when I started programming. So, without any further adieu, let's jump right into it. Hey, what's up? This is Qazi from cleverprogrammer.com, also known as Papa Python. Now that you're here and I have your attention, this video is gonna be awesome and you're gonna love it. So let's jump right into it my friend. Here are the four things I wish I knew when I started programming. Number 1, programming is thinking. Programming is thinking. Now this is something I did not know and did not understand for a long time. How I got into programming was my brother called me up. He's like, "Yo, Hadoop, developers make $200,000 a year." I'm like, "Cool, I'm in." I started learning Hadoop, then I realized there's a prerequisite to Hadoop called programming. That's how I got into programming, but once I discovered programming, I thought it was super fascinating and it was amazing because what it actually is is your thought. Whatever you conjure up here, you can actually turn into some kind of reality, virtual reality. For example, the thing that I think is really cool is when you enter Facebook, you're essentially entering the brain of Mark Zuckerberg, or whoever was creating it, and the same thing that happens with Twitter or any other platform you go to write, Instagram, whatever it may be, you're entering the brain of the human person who created it, which is really fascinating. So you can take anything you have here, and turn it into this tangible thing. So I wish I knew that, and I'll explain why I wish I knew that, okay? And then, the second thing is that what programming is is thinking, and then all you have to do is computer code or Python, right? What is that? Or JavaScript, what are these? How I think about it is the computer is this ultimately powerful genie that can grant you any wish you want as long as you can speak to it in its own language. So, what is the computer's language? Well, the computer has a few different languages. You have C, C++, C#, you have JavaScript, Java, Python, and that's what languages are. It's this way to speak to the ultimate, most powerful genie that we know, ya know, that actually exists on this planet, and then you tell that genie to do whatever you want it to do, and then it does it but it all starts in thought. Now let's get a little bit deeper into that, so for those of you who are programming, you can actually get some benefit out of it. Now how this would actually help you if you knew this is because when people are coding, they spend too much time on syntax and not enough time on actual thinking, alright? They don't spend a lot of time on thinking and problem solving. So in the start, once you get past very few basic things, such as, you have to learn how if statement works, you have to learn how for loop works, you have to learn how a while loop statement is written, but once you learn a few of those things, realize that the overall program that you're gonna build is gonna be built up here and is gonna be a lot of thought. So what does that mean? That means that most of my time is actually not spent actually coding. My time is spent actually thinking a lot, so for example it might look like, "Okay I have to make a Django app so I'm gonna be using the Django framework." Or, if I need a database, right? I'm like, "Oh I'm gonna have a database and this database is gonna be hosted somewhere." But let's say you're doing something simple, right? I'm imagining that most of you watching this video are probably more beginners than more advanced so this database stuff might not make sense. But even if you're writing like, a game or you're writing a simple program, you need to be thinking about it more so. In one of my earlier videos where I talk about I'm gonna pop it up right here, how to think and problem solve in coding. In that video, I talk about how you take a big problem and you break it down into different structures, right? You break it's layers apart, so for example, if you have a TicTacToe game, or a Rock, Paper, Scissors games, it's just different problems all put together, so for Rock, Paper, Scissors, you have the problem of first determining between rock and scissor, who wins? Then you have a problem determining between scissor and scissor, who wins? And between, you know, paper and scissors, who wins? And all of those combinations, alright? So once you define all of those combinations and rules, they you have a different subset of problems. How do you make the game keep running? How do you make two players play? It's all different types of different problems. What you should be doing when you're starting coding, and here's a really, really big tip, is spending a lot of time problem solving. Once you understand the problem is thinking, you need to learn that you're not gonna improve in coding by learning new frameworks. You're not gonna improve in coding by learning new languages. You're not gonna improve in coding by constantly taking new courses and copying things and building them up. In the start, you're gonna improve in coding if you actually spend time learning how to problem solve. If you can start solving problems, you're now fixing the part of thinking, how to think logically. Then you can take that and bring it to any project you're doing and crush that project. So for example, you should use resources like HackerRank or Project Euler, and go there and actually solve coding challenges and coding problems. So that's why I emphasize programming is thinking. It's not syntax. It's not memorization. If you ever feel like you can't remember stuff, it's because you didn't understand it well enough. Also, this is day eight of the 30 day video challenge that I'm doing, so if you want to be doing the coding challenge with me every day until the 30 days, then join me on this journey and you can follow me @cleverqazi where I'm gonna be documenting all of this journey ya know, behind the scenes, so add me @cleverqazi, send me a little message, and you and I can hold each other accountable and hopefully it will help you build that habit of, let's say coding 10 minutes, 20 minutes, 30 minutes a day. Alright, so with that said, let's move on to point number two. Number two, pick one language and stick with it. Let's talk about this. Pick one language and stick with it. Alright, so if it is the case that programming is thought and it is the case that if you improve your ability to think by problem solving, you are going to be becoming a better programmer. Programmer. Well then, what that means is that you need to focus a lot less on syntax and a lot more on problem solving. What is an example of a syntax? The programming language, the structure of the programming language itself. If you spend a lot of time on syntax, meaning you spend a lot of time learning new languages, like JavaScript, Java, Python, and then, you know, like, something else, are you gonna improve more that way or if you picked one language, let's say Python, and just spent a lot of time in problem solving. Which way will you improve the most? This is my question to you. Take three seconds to answer it. Three, two, one. Alright, so you probably got it right and I hope that you did, and if you didn't, you need to rewatch this video again. You will improve if you go the problem solving route and you stick with one programming language. Guaranteed, you will improve beyond measure compared with this person who's like, going crazy learning these different languages. What's cool about this person is he'll come up to you and be like, "Hey, I know so many different languages. How many different languages do you know?" But then, you go, "Well I only know one language." But what's cool about you is that you can actually do shit. This person will keep going through tutorial purgatory, will be stuck, will not know why his or her skill is not improving, and why you can build projects that are actually useful, and he or she is like, "What the hell's going on here?" So please understand this concept. Okay, so if syntax is weak and problem solving is what's gonna help you, then in that case, what I'm gonna say is you should pick one language, and stick with that programming language, okay? So if you're on this channel, I always talk about Python and I love Python and I think it's an awesome programming language, and the best programming language to start off with. With that said if you want to pick some other language, you want to learn C++, or C# or JavaScript, maybe you have your own reasons to learn this, right? You want to do something with Unreal Engine or Unity, you want to do something with web development, you can choose different languages, but once you pick one language, if you want to truly, deeply improve, then you need to improve your ability to think deeply, and you need to do that by sticking with one language, so then you're not constantly changing your focus from syntax. You're actually just working on one language, and you're able to focus on the real thing which is problem solving. Once you understand problem solving, then all it is is any one big project, is a bunch of problems put together. Once you improve at problem solving, here's what's taking place, okay? So problem solving, here's how it works. It has you do one challenge at a time, so it will be like, "Hey, convert the date and timestamp of this thing to this other thing." "Hey, turn this thing into this other thing." Now you're doing multiple problems, but now when you have a project, you can see the project. You can deconstruct it into it's subproblems and then you can go, "Oh! I know how to problem solve so each of these functions or each of these little things, I can just solve on its own, and once that's done, I can just put it together and that's just this one big project." So that's why the ability to problem solve is the ultimate ability. Then you can build anything. Let's move on from two and let's move to the third thing. Number three, always have a passion project. So what does that mean, always have a passion project? That means that you have a project that you are excited about building. You're excited about this project and that you've either started it or you're very actively always thinking about it. So for example, your passion project could be making an Instagram clone. Now, you understand that Instagram is not something so easy that you can make, but you also understand that it's made up of different things and different abilities that you need to have. So now, this will help you go from being a passive learner into an active learner, because now you can go, "Okay, I have an IG clone that I want to build." So you just start trying to build it, and let's say you get to the part where you can create a user, but then you're like, "How do I store this user in a database?" Well, that's a fantastic question, because you'll go, "Okay, how can I store this user so that I can come back and have access to this user?" Well, for that, you're gonna need a datebase, so now, you go and learn about databases. So now you go and learn about, let's say databases right? Then you come back after you learn about your databases then you go and just insert it into your project. So you go, "Okay, I've learned about databases." Now you go apply it to your project. This way, you have internalized your learning and your understanding by actually applying the concept. If you learn the concept and you don't apply it, there's a 90 percent chance you truly don't understand it, and that you will fail to actually apply it to one of your projects. So it's much better to actually learn slowly but deeply where you're applying this, so that your overall speed is gonna be slower but your application and understanding is gonna be way more superior and way, way more permanent. So, okay, you learn about databases, then the next thing you need to know is like, how can you filter from different users? So let's say you lean how to do like, a filter function in Python and this allows you to filter. Well now you take that thing and you insert it into your IG clone project. As you learn each new thing, you have this project in the back of your mind that you're gonna go and apply it to. Now you are learning very purposefully, very intentionally, and that will allow you to speed up your learning progress and each concept will be internalized forever, okay? This will actually make you a great programmer and it's these big projects that you do and you have this one longterm project. You keep going and adding stuff to it. That's what the recruiters would want to see. That's another one of the things that I wish I knew when I started coding. So instead of building like, 100 different projects, I could just have one or two projects where I just kept adding more and more and more things, and then maintain them for a long time. Now, let's move on. Number four, programming is just like how they show it in a Hollywood movie. That's completely wrong. Programming is not I'm just gonna write Hollywood, okay? Because I don't have much space. But programming is nothing like they show it in Hollywood movies, okay? I don't know if you watched Mr. Robot, but it's like some dude sitting and doing crazy shit and then things work. That's not how it is. This is why everybody always feels like they have this imposter syndrome where they never feel like they know how do code, even though they've been programming for a long time, for a few months, for a few years. That's why you will always feel and think that the other person knows more programming than you do. It's because of the way that it's portrayed in the media, okay? And how they show it online when somebody is doing programming. They're just like, going crazy. Their eyes are like, up here and then they're just keep going insane and writing code and things just working and they're doing it nonstop. That's not how it works. It's complete bullshit. It's a lot, a lot of googling, and it's a lot of stack overflowing. That's not all it is, but this is one of the best abilities you can have. The ability to Google, the ability to stack overflow. Most people, when they run into a problem, their first thing is just like, they just give up. This is something I've noticed so much. They'll either just ask somebody for an answer, or just give up and then they'll go, "Okay, this project is too hard. I can't do it." No, you need to Google the shit out of it. I promise you an answer is somewhere lurking, on GitHub, on Stack Overflow, in a YouTube tutorial, you can watch the tutorial and see how they implemented this one feature in their own project. You can take it and then try to implement it into your own project, alright? And yeah, so let me write that as well. Okay, Youtube. And countless other resources, but a lot of programming, it is you looking up stuff that works online or works for somebody else and then morphing it and taking it and using it for yourself, but you have to be intelligent enough how to actually copy paste it, right? There's this quote or something on Stack Overflow which is, you know, um, what makes a programmer? And the joke is something, I'm completely butchering it, but the joke is something along the lines of there's a guy who just knows how to copy and paste and then there's a guy who knows where to copy and paste. So basically it's saying a programmer knows where to kind of copy and paste, so if you copy something from Stack Overflow, a piece of code, you will know where to put it in your code to make it work, and you will know what changes you need to make to make it work. It's a very incredible ability to have and the way you develop it is by persevering through a problem, and then sticking through it and going online a lot, and if you're a beginner and you're stuck a lot, I would even suggest you post your questions on Stack Overflow. In the start, you're gonna feel like crap because they're gonna shut you down, shut your little newb face down. They're gonna be like, "Haha! You suck." and they're gonna like, shut down your question, but then you're gonna learn how to actually post a question, and it's gonna make you a lot more thoughtful with how you do it, because often times when you're even posting the question, trying to be as specific as possible, you'll discover what the solution to the problem actually is. Definitely take advantage of Stack Overflow, even posting your own questions when you're stuck. Very, very helpful. And definitely abuse things like Google, Stack Overflow and Youtube, and use it to improve, but please do not neglect thinking, okay? You need to think really hard. Your brain should most of the time be hurting, but in a fun way so you're still having fun. You're not just going crazy, but then if you're completely stuck, right, then go on and look for solutions, look for a guidance. That's what lot of programming is. If you see me code a project, it's not gonna be as exciting as you think it is. I'm not just gonna be sitting there just like, coding it from scratch. I'll be looking up stuff. I'll be pulling pieces of code. I'll be trying to think of things. I'll think of ideas and I'll like, keep moving on. So these are my four tips that I wish I knew when I started learning how to program, and I hope that these were helpful to you. So if any of these tips was helpful for you, please put in the comments below which tip was the most valuable for you and how are you going to implement it in your own life? With that said, thank you so much for watching, and as always, I love your face and I'll see you in the next video. (trap music)