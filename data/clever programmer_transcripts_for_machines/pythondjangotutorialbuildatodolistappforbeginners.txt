how's it going everybody hope you guys are doing amazing my name is Ari and I am a fullstack developer who's been working with Django for quite a while now and today I am here to teach you how to build a jingle to do and if you're interested in learning how to become a freelance developer we have a three part master class for free but you can sign up using the link in the description below you'll sign up we'll send you the videos and you'll be able to learn a lot and take your coding journey to the next level we learned today we will learn how to create a jingle todo app that contains the back in the front end and the database all working together we will also learn how to use bootstrap and its basic structure to create beautiful looking applications and we will then we will learn how to create a jingle model a jingle view where all your program logic will live and then finally we will learn how to use the jingle RAM to manipulate the database and I think overall you will learn how to take an idea that's in your mind they'll bite it up into pieces and put it into reality because that is a very important part now the best way to learn this tutorial is to code along with me that is very important you guys now if you run into any problems I linked the code below and you can just kind of use it to compare the contrast and see where you were wrong now if you are really stuck you can either comment on youtube or you can direct message me on instagram and Nas dumansky and i'll be happy to answer any of your questions now that let's get started guys alright so before starting any new project I like to write out a very simple requirements document like this okay so let's take a look at first things first is the goal what are we trying to achieve with this app right so we want to allow users or customers to keep track of things they would need to do on a daily basis so that's the goal the user story is what can users do on the application functionalitywise the first thing they can do a user can view his or her list of todo items so that's number one number two is a user can create a new todo item it's number two and a third one is a user can delete a current todo item and so these three personalities will tell us what we have to write in terms of codewise right and so after that I like to do a simple flow diagram because I'm more of a visual person and this helps me a lot trust me so as you can see we started with a stickfigure which is a user it's a very nicely drawn stick figure a user will load the web page what's gonna happen next we're going to get to do items of cause I'm guessing we will have them stored somewhere in the database and then we will show todo items somewhere in a template page so that covers our first user story the second user story is again we start with a stick figure and what they can do is they can input in your todo item because we'll probably have an input box they will click Submit we will add that item to a database and we will reload and we used to pursue when you reload you see that kind of traces back to the beginning through here but we will get to do items and show the items and so that covers those two user stories now my challenge to you is to create a third flow diagram for the third user story because you will see just how useful this is now with this out of the way let's go ahead and get into the coding I'll see you guys there let's take a look at what we're actually going to make now here's the application obviously it's cold let's do app and it's pretty simple as a customer or as a user let's say I let's say I want to add a few todo items that I want to do for the day so I want to read it my Python what a onebook which is very important obviously right I need to go for a run right and then I'm gonna take the jingle toriel take the jingle tutorial to tour tutorial perfect and as I do these things right I just simply click delete delete delete and that's it and I'm done and as you can see that's pretty much the whole app it's very simple but very functional and looks good as well but the important thing to understand here is the core concepts behind building application like this right because now you get to learn things like back in and how the back interacts with the front end and how now the back interacts with a database all those things are very important for not just building applications like these but building much bigger applications like Instagram Facebook Twitter or anything like that so what that being said lets us take a look at how we build this because I'm really excited for part one of building this application let's go to install and actually go to rappelled dot it this is basically an environment that's going to allow us to easily put this app without having to install anything or anything going on along the lines of that so just go and wrap at it and click sign up and once you've clicked sign up you should see a dashboard kind of like this and you should actually have zero obviously applications but I have my todo app because I already built it so just click plus near Apple that's the first thing select Django let's name it to do that to do a simple career Apple so what it's going to do now is obviously it's going to install the Django environment it's gonna install the server it's going to install all the necessary files for making any things very simple for us click start it's creating my gracious I will talk about these things a little later there you go hello Rapala or hello world alright let's take a look at creating a model now what's a model a model in Django is something that represents a database table that's how Django translate said okay so I'm going to copy a few lines of code here right here I'll copy these lines of code just for times sake okay I want to paste it here so what do we have here okay we've got a class called to do that represents a database table we also have something called at a date and text and these are attributes of a database table right so we have an add a date that's a date/time field and we have a text that's a char field obviously we have those at a date is simply when did we add it to do item and the text field is there because obviously we need to save the text or the todo item that makes sense and what's Jane going to do is Jenko is actually going to translate these these models and these attributes to database sequel injections in searches and update and so forth so go ahead and click restart just to see what I'm talking about you can see that what's going on is it's creating a model to do interesting right okay okay so with that actually go ahead and click restart again just trust me do it click restart and what's going to happen is you have this migration file right and this is what gingka uses to keep track of the database right it says here create a model with an ID that's an auto field that's a primary key right with an added date as a datum field and text of the chart field and that's pretty much it right now else it gets a lot more complicated on this but I just want to show you because it's very interesting to me that's very important to understand how these things happen on the backend as well okay now we're gonna make this application just a little bit more stylish we're gonna use something called bootstrap which is just like if framework that allows you to make beautiful sites in a much faster pace okay so go ahead and go to bootstrap just type in bootstrap into Google or go to get bootstrap comm you will present it with this beautiful site go to that they come with documentation and we need to install the following okay we need to install the CSS and we test all the GS so go ahead and copy CSS first okay all right now the question is where do we and add these all right so we have the base HTML and we have an index that HTML in a base HTML this is where you have your base structure of the site and now I said that's where you would add it okay so go ahead and just add that to here and let's go ahead and copy the jas files the JavaScript files to here as well once you've done that just click restart and and voila you got a little more stylish hello ripple dot it next we want to create a base layout for an application that does not include any of the logic so far so our goal is to basically create HTML like this without any of the fancy logic just yet okay so let's go to it and do that so what do we need first okay with first we need to create this navigation bar the way we're gonna do that is go to bootstrap and that's let's actually type it in this is literally the process to I do with anything that I do with mousse chaps just type in nav ok and we see we have a navigation bar looks just like this but we're not looking for that we're looking we're looking we're looking no no no no no no no navbar there we go that's the one now bar and we really need a simple nav bar that is of black color let's see let's see so kind of like this you can see right there we have a nav bar okay so we can just copy that in here and the reason we're putting it into the body section the base that hTML is because that's where the whole application inherits the whole HTML right so the legation is something that's gonna stand throughout the whole app okay and that's or we're putting in here so well why you so much like yes but I don't want to copy all this so just copy this part I guess copy that and voila alright refresh so be I mean we have just a black bar nothing fancy now we need the actual wording to do app ok and if you look a little bit more down we can see that in order to get that wording there's something cool a nav bar brand ok so just copy that right there refresh and voila obviously now this is actually call it todo app todo app refresh that and that's it right so you've got navigation bar just like you have it in the application that I showed you pretty simple the way we just got that now I'm going to look at how to add all the other parts of the HTML into the application ok the first thing obviously what we need to add here no here we to add like things like at the add item the input box the form and always see the list of todo items right so let's try this at first we're gonna be working with the NSA HTML because that's the thing that contained s HTML page that contains the container underneath the navigation bar alright so preface ok the way bootstrap works is divided into rows and columns think of it as you just have a lot of rows and within rows you can have a max of 12 columns all right so we're gonna do create a row that will contain this know yes contain the add item and this form alright so that's the first part let's do that so div class equals row right I'm going to close that out cool and then the second one is gonna be div whoops no not this one yeah div class class equals column column column wait no I just need to I don't know why I'm doing this again anyways great so now if we refresh this out in obviously nothing is going to happen but at this point now we know we need to add this add item h1 tag or no h2 attack in this case we're going to H H add item h2 all right all right it's there but you can see there's no padding right it's just all the way up to the box one thing you forgot to do is to add a container with bootstrap everything kind of has a parent container a big container that contains the whole plication so when we go to base HTML you can see underneath the navigation bar we have all the blog content this is the blog content that is inherited from here right you see this extends to HTML so what we are going to do is we're gonna add a container a class container class equals a container and then we're gonna obviously close this out I like to add my spacing I'm very particular about that great now we have a container okay we've got that part now let's go ahead and add the info box and I'm gonna show you how I go about finding or just adding an info box from bootstrap so go back to bootstrap alright type in forms right perfect and we're just gonna simply scroll and see what we can add that's similar that's similar okay so I'm gonna scroll now I know at this point I do know where I want to go because I've done this previously but if we just keep going keep going for example we don't anything too complicated I'm just kind of browsing that's good I kind of want to add this as well yeah that looks good that looks good but I think I'm gonna just do like an inline form here so first things first we want to add an input box like this and that's represented by this fancy mommy not fancy just this this line of code I guess I don't know I said fancy anyway so it we're gonna copy that and then put type stack copy that and paste it okay so we have type text' class form control margin bottom to margin right all right so we don't need the ID there's no need for it for the placeholder we're just gonna do type here and the placeholder is what's gonna be seen inside the input box right next me to add a button actually not refresh this first right there perfect we've got herself an input type next add a button we're gonna just gonna do there's a button right there there's some really cool button submit button copy that paste it here voila you got a button now we want to do is you want to add a list of items right so go ahead and let's look for a list of items list group or something like a list group perfect there you go now you have a list group we know it's going to look like this let's just add it we don't want to however however we don't want to just add it at the bottom of this section I want to create a separate row forward because I had a separate distinction and so I that's how I like to divide things up so I'm gonna do class class equals row right I remember in Bush room you can have as many rows as you want the only the only restriction is you can have only 12 columns div class equals column who Dave no why do I keep do this alright perfect and we now need to you literally just copy this for the sake of seeing how it looks like we're gonna we're gonna format this a little bit nicely okay you can just select it and just click for well or not or just do it by yourself right refresh it there you go now it has the active on but we don't need that just from we can remove the active portion perfect you can see that's we have now a list of items just what we want to do which is what we want so I just took a second to see how we can move the submit button to the top so it's in line with this input input type right and one thing I missed is that if you want to have a inline form you just have to create a form container with a form online class okay and we're gonna do that so create a form class equals form in line and then in here form just like that well need to close this out obviously hmm I really don't like how this just for a minute okay and if you refresh it's completely gone that's where did it go why did I just disappear oh there it is this is so funny anyways yeah so now you got the form now I do want to add something to the top so with the what you do with my for example I'm gonna add some penny here right there so I'm gonna do something called a margin top four so we're doing MT 4 which stands for margin top 4 all right so we added some penny over there and we're also gonna add some up heading to this row as well margin top 4 perfect all right so it's some good that's a little better formatting now I know what you're saying you're saying Nazari why are we learning all this HTML where is the jingle stuff okay so hold on it's coming now now we're going to get into the Jingu stuff what do you want to do first initially what we want to do is we want to be able to add an item through this input box correct so let's see how we do that now what happens is when you add an item we need somewhere to catch that data and save it and database correct so let's take a look at this use the py file here we have this function called definition home right and this definition home actually really nicely definition it's a function it renders the in XHTML so probably makes sense that some were in here we probably do create a function to capture the data from this form correct so let's do it we're going to create a function called add to do right we're gonna have the same parameter request and we're going to print this request for now all right perfect now you're saying okay well how does jingle know to call this function what we're gonna find out so go to your Elza py file and you can see it this year as a py file has has all the URLs that contribute to a certain view we said we have this called views and you see this views that home that's being cold that calls this so we simply need to call views that add to do to trigger the function let's do that so we are going to trick the URL I know if I type correctly all right no not know what I said we're going to now URL but this time we're gonna say URL add to do right what to do and that triggers a function called views dot add to do so create that comma great so we have your else in place right we have the logic we all have the logic a but we have the function in place now we need to actually we now we need now we need to have this form call that URL so a form has something called an action action and that action is this URL right we need to tell it to go to this URL so go here I shouldn't have to do and the method we're gonna pass in the data through a post method there's a get there's a post is actually a multiple one but post means we're posting something think of it like that okay we also need to change no this is fine type submit that's fine and that's pretty much let's see what happens okay it's broken great they include your and does not appear to have any patterns in it no well it does you have URL oh oh I know why because it probably got stuck so if we just simply restart restart restart restart restart restart restart yes please start alright there you can now it's working let's type this in the room yeah it's broken is there something coolest CSRF token well what do we know now we know that it's hitting this URL because when we hit this URL it broke which is great now we just solve this issue right Deena breath is just a way for us to protect the form to make sure that there's no spam form submissions that's why that's what jingle has for to protect its form okay for the purpose of this video we're going to unprotect it I guess you can say because I've tried it with trying to protect the CSRF in here in Rapada in for some reason I've always have not been able to and I think it's due to a virtual machine issue but in order to for us to be able to go through and not have it be cos or F protected I guess here's all we need to do so we've got to use up UI file and so I'm gonna search in CSRF exempt CSRF exam there we go there are this so we're gonna copy this paste in here and now we do CSRF exempt exempt and that gives us an exemption that way if we go ahead and simply just type in here anything submit what didn't return a race race all right yeah in this case we are going to redirect back to the home page okay we can literally just simply do like this for now return and render the same home page that's it and if we refresh that okay buhbah but you see now with nothing is saved but all we have done is we look here we have printed this request right we now have this request great now I want to print a little that one take a little bit deeper this request okay if I go documentation of Django and I tap and request I request object but inevitably deleted to do HP request object here is what the request object contains it contains things like cookies method right in this case however what we want to look at is this post right so this post is dictionary like object containing all gears should be HTTP POST parameters so if we print that out request dot post right and if we refresh this let's type this in refresh it actually type to send submit you see that's a Nampa dictionary now why is an expedition there you might be saying well okay let's take a look at it in order for it to post something every input has has to have a name write a value to have a value you have to him a name have a name attribute so in this case the name answer will be content okay let's refresh this again type in python 101 book right click Submit and voila you got yourself a dictionary that with the content from the input provided by a user right now we can see and with I mean obviously with this we can actually use it and create a todo item and a database great great great great great that's awesome so let's go back to the views that py file we now know how this request a post works all right know what we do what do we do now we to capture two things we need to capture the add a date and we need to capture the content right so let's do it in order for us to capture that at a date what we're going to use is we're actually going to simply create a add a day to look like the current date there's something called a time zone the Gengo has and so we're gonna import from Django die utils import time zone alright time zone and what we're gonna do is we're going to create add a date date equals time zone dot dot now and that is simply a time zone object of the current literally just the current time that we are creating this alright so that's great now we need to grab the content of the actual this request that post so let's go ahead and do that again we can say content equals request dot post and inside here will say request up post content and that will give us the content of of what we typed in here ok let's now let's try this out so we're gonna print the date okay this is literally the way I'm teaching you guys is there Lea how I how I develop ok I I print things out I test things out because the last thing you want to do is you want to write a bunch of functions and and then you realize that you did it all wrong right because you didn't test it and so as I go along I test things and that's what you should do honestly I'm not the only one who do who does this trust me print content we don't need to print this anymore right so refresh it okay Oh 101 book click Submit let's see what happened here oh well my right so if we I'm gonna highlight this okay this was our request okay here is what got printed this is the date another date it's a time zone day 2000 1908 15 and this is the content oneonone book perfect perfect and then we obviously refreshed okay great great great now with this data in here we've captured this data we need to say to say that somehow so what jingle has is jingle has those memory those class todo items that we're going to use we're going to import from Jenga models from I think it's mainly models from Maine so you see this mean that models import to do we are importing literally this class okay import this class and so let's go ahead and actually create a model right right so jingle create object right in this case crate out of it we're gonna create a model instance and there should be create function all right yes we have that but I want to do is there we go if you look at here what jingle gives us is gives us this you know every class has an instance called object and there's a lot of functions that that class has and one of those is a crate function and that literally creates a creates a date bass actual entry right so if we use this it says my mod F is a crate and for us it's going to be to do right to do to do the objects that create now what are we importing into here okay we up we need put in put a few things if you look at our models we have the add a date if you have a text okay go back to use the add a date equals actually I'm going to change this this date this is current I'm going to changes the current date okay at a date equals current date then the text test another attribute equals content perfect text equals content to the opposite create at a date equals current date text equals content with this when we run this function and we click Submit now it should create a database object or a database entry let's try this Python 101 look submit good why can't you eat you I can figure than good okay let me start this that's why we start this in this happens you just restarted perfect perfect alright so let's try this again 101 book just for manager object has no attribute doc sorry creek obviously I can't spell create perfect so let's try this again 101 book submit great now you're probably like well hold on I didn't see anything how am I supposed to know there has been created well uno momento por favor okay here's what we'll do this is created object and we're going to print quite quite it created we're going to print this created object okay create object to print and we're going to print an another thing I'm going to print create an object that ID because if we know it has an ID that means it's a database instance or not I'm sorry a database entry so oh let's try this again at item 101 book submit there we go to do object to the idea of it is to that means it's created if we want to actually there's another way you can do this is we can also print so list of list of let's say length of dues of traduz I'm doing this as literally I'm trying to get you to understand how this allaround works it's an object relation relationship object object relations relation manager okay so just a good way to for you to understand how these things work so there's a to do object dot all that count that will get you them the count of all todo items in a database and if we know how the object if we know it's increasing in order for we know it's greater than zero that means it's being inserted so it's the objects that all that count I'm gonna print that boom length of dues voila it's doing a lot of its fancy stuff it's always there you go perfect so now go ahead and number two just to try it out so here's what we got this is the object three right because we already had one we had to this is 31 and the length of the whole table I guess I can say is 3 that means this is working right all right so now that we have confirmed it's working let's erase this and the second part is actually going to be listing this now we need to list the actual todo items to list the todo items so we have to do a couple of things first is we need to grab the islands phone database and then second is we need to transfer those todo items to the HTML page and the loop through them okay so let's see how we do that we have this function called home and this function home is what brings us the home page right now through here is where we'll be able to actually take todo items and transfer them to the front end page so let's let's do that okay we're gonna going to grab todo items from the database and again we're going to use the same type of functionality as we did when we added a todo item right or to list a todo item right so here we have to do objects that all right and that will grab us all the todo items in the database the second thing we're going to do is we're going to order the todo items by the add a date so there's a function call order by and this takes in the parameter that you want to order by so the attribute that you can order by like which actually want to order by text you know ordered by the date and so that's what we specify at a date okay all right and within this we need to now transfer these items this this list to the next HTML and so this render function right here has a third parameter to transfer data okay so we will speaking specify an object here and we can tell okay so to do items right and the object to transfer is to do items right so it's gonna take the items that's from here and it's gonna be inside this object okay so we've transferred that great now let's see how we can use it okay we have an XHTML and you can see that we have just a bunch of fake data now we need to replace this fake data with actual looping of the items so jingle has a template language that allows you to use a lot of gingka functionalities within a template in this case we're gonna use a functionality called for so the way you do it is you have a bracket syntax and you do for todo item I don't in todo items and again this name right here is the name that we specified in here so just keep that in mind if you change this you will have to change this name okay after we're done for in order to close this area for loop we have to do and four and four okay and inside here we're gonna lose that this is where we will display the list items so we have this list item and obviously to replace this text here okay great replaces text not what do we replace it with we have to use this todo item right this is it's going to loop through each do item and so this is gonna be an individual todo item there's a syntax where in order to use the object you use a double bracket syntax and then you do to do item to do item dot the attribute you want to use so in this case want to use a text right because that's what we have in the Mazda py so we have text okay so we have that and let's see if that actually brings us something let's remove this okay remove this did it use it to do restart just to restart let's see what happens I hope it doesn't break I really hope it doesn't break I don't see why it won't break alright so this is this is just a random text that we had in side inside the database okay with that in mind we are now looping through to do items right so let's test and see if we add a todo item if that will actually display anything if we go ahead test to submit nope nothing's working now why is it not working let's look at look the views up you I file you see how when we when we added todo item that that takes us this to this function and this function renders again in the next HTML but doesn't pass in the do items so what do we do instead of rendering we can actually direct the page to a to a home page so some there's something called HTTP response redirect so if we go to Google response redirect method no I don't want Microsoft jingo but I think oh there you go let's type in we don't need this just with their response redirect clash spears funds redirect and the way you get you grab that from Genco HTTP right this is ticklish EEP that's a real clever form and then we can redirect it to a certain a certain URL which in this case will be the home URL so let's do that for also from its let's imported first so from Django da HTTP import HTTP response redirect I hope that I spot that correctly no they're not copy this spelling sometimes you guys I swear HTTP response redirect so that shouldn't break I hope let's use this function HT Pyrrhus must be direct we're going to use this function I'm going to redirect it to the home page and if you redirect the home page it is now going to use this function after you add it to do right let's try this again all this is our test too by the way right so we submitted it okay let's try it again test three submit test 3 test 4 submit voila it is working you guys that is awesome now one thing I don't like our is as we are adding these test 1 test 2 test 3 test you see how they're going or going over to the bottom we want to reverse that right because obviously we want to have the newest item to display first so no do that we simply have to put a minus that's it that's literally it because this takes us from the newest date to the oldest date if we did it like this without the it's gonna take us from the oldest date to the newest date that's all where this comes in now let's try this again let's refresh well we need to refresh the actual database or the actual server do that there we go you test for test retest through that's and then it about 80 SDG perfect and now you pretty much have the list of do items and we're getting really close to the end now the only thing left now the only thing left is to you have a dilly functionality in this as well so let's get to this next all right so the final step we need to take is to be able to delete a certain item which as we saw before was to have a delete button here ok first things first we're gonna do is to actually insert our add a delete button to the right side of every todo item so let's go ahead to the index.html and we'll do that here okay we have the text here okay this is the todo item within here however we're going to add a button would you a button that's pretty much the same as here so we can copy this button just like that and we'll paste in this button right here right there perfect now that was not going to work the way you want it first things first is you see how there's a get a bar margin here at the bottom will remove the margin some MB is just margin bottom so we're gonna remove that that's one if we refresh it okay so that kind of remove some of the space there but now we need to do easily to float this button to the right side so if we create a class or div div around this okay close this div oops okay so that's the button and we're actually going to where the class is equal to there is a float right bootstrap class you can do this in CSS as well but if you type in float for example and you do float right okay float right right there now it floats right one other thing I want to do is I'm going to Center this text but we're gonna worry about this a little bit later and I also want to change the button to be button small there's a there's a class in blue shell which is button small which just makes it a small button see there you go we've got a button now literally that that's pretty much it one other thing is one main thing actually is now we have to have this button do something right and obviously it's also going to be delete that's the text for it all right and one other thing we want to do is instead of having it be a primary button so if we go back to buttons just really quickly you see this danger we're gonna use like a danger one because you know we don't want people to delete an accident you want it to be kind of like a warning I guess you can say no a danger so we're gonna make it a button danger instead of a bun primary danger right there perfect awesome awesome awesome awesome last thing okay we need to create a form because we want this button to do something just like it we have here where you have a form action we need to have the same thing for every single button that displays there so create a form okay just for now just as simple form just like that we're going to inside this form we need an action item all right so where is this what does this go to trigger or where is this going to lead or when the button is clicked or is it going to lead we're gonna name a URL just called delete to do and we need to pass something because when you delete a certain item obviously we don't want to delete all of the items so I'd be wonderly a specific one and so as a result we need to pass the ID of every or of an individual item to know which one to delete on the back end right so if we just simply use and we specify okay delete to do and the idea to do is to do item dot ID right and remember that's the unique ID of every single item and a slash and now we know that that's what's going to do action is obviously post just how we had it before perfect and refresh now obviously if you do this it's it's not going to get you any work if you actually need to create the URL and the view for it so let's do that so just refresh it for now perfect we have a delete to do that looks good that looks good now let's go to the URLs file we have this add to do now we need to do the same thing for delete to do all right so delete to do but with this we need to capture one more thing and that thing is the integer or the primary ID of a specific item so what you in in Django which you can specify you can slowly specify a parameter a type parameter and name it so to do ID like this slash and so Django will will actually map this and know that okay so that it should be to do ID here and I'm going to pass this now to a views dot py file no well obviously don't want to pass this to add to do now you want to pass it to delete to do which we haven't created yet but we're going to right now so let's try so let's go to views up your wife I'll and we can create a same function delete No delete to do right I get requests but one other thing is the to do ID because that's the second parameter it's going to be passed in through here it to do ID so we're gonna pass the center here right one other thing I want to mention is just for the sake is we're gonna do this yourself exempt as well for this one because this is a form and just let's take with the video we're gonna put that in and we're going to print it to do ID which ID are we removing and then we can go ahead and return the same HTTP plans to redirect to the home page okay let's try this now refresh this or should it not refresh restart this again if you get that error just restarted and you should be fine perfect let's try this again alright when we click delete nothing happens this error is because of the URLs the URL function right here is actually deprecated one so this one came initially with with kind of the Django setup but it's actually deprecated if we look at the y'all dispatcher you'll see that Django now but the latest version uses path and so if we go had an import for merging URL stop half right and you're gonna run these these problems sometimes so that's okay that's a learning learning opportunity so with a path I can actually just specify a like this path delete to do reusability to do and now this should work so if we take tight take it like this perfect you see that was completely okay and you can probably even do the same thing here so path like that there you go path like that and you can leave this alone for now alright we've got that working it when we click delete this is the ID the ID is for and that's what so if we do it again right there you can see that it printed out four which is the ID of that todo item now what do we do with that todo item once we have that ID we actually need to delete it and we get we're going back now to the Django or M object relational mapping well the way you delete an item within Django is you do to do the objects that get ID equals to do ID dot delete and literally that's it let's test it let's see how this works guys let's restart it because obviously we have we got some error right here all right now let's go ahead delete delete delete and it's delete and you can see it is working guys so let's let's do a test run fully with this let's go ahead and I get B said read Python 101 book go for know for for for go for Iran perfect let's make some lunch make some lunch perfect and that's what you guys got now you have a todo item and todo app with complete submit functionality with complete delete functionality and you have the proper the proper logic behind it and that is awesome you guys have done it if you guys follow along that is amazing I want to congrats to you alright that is it for the tutorial guys I really hope you enjoyed it and that you took away something from it that is the most important part if you have any questions whatsoever or any problems feel free to comment down below or you can message me on my Instagram and Nas dumansky and if you did copy the app I want to see it share with me seriously I'm not kidding other than that I hope you guys have an amazing day and I'll see you later if you're interested in learning how to become a freelance developer we have a three part master class for free that you can sign up using the link in the description below you'll sign up we'll send you the videos and you'll be able to learn a lot and take your coding journey to the next level