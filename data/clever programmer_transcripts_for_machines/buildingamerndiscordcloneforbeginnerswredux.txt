up everybody how's it going welcome everybody and thank you for joining us to another mirn build and today i'm here with rishi guys this is rishi from player programmer and i'm super pumped to go live with david and build a discord clone in mon i don't think david needs his introduction but yeah so david i'm david what is up go ahead yeah so as you already know i am dr mirn uh from clever programmer and today we will be building the discord mirn clone all right who is excited guys who is pumped about this build today rishi are you pumped everyone drop down yes man i'm super pumped to build this discard clone in one and guys if you are excited drop down in the comments some fire emojis and some comments that you are excited we want to see who is excited to build this clone because this is going to be exciting you are building a discord clone uh a messaging discord clone and we're gonna be giving you the back end for that let's go exactly exactly i think i'll quickly show you guys how it actually looks like at the end but i mean you pretty much saw it when uh sunny made it so uh yeah so this is pretty much the build that we will be doing it's real time it is using mongodb it is using pusher as always and it is based on the build that uh sunny sunny did last thursday so if you guys don't have it already uh another problem i have it linked down below uh so you can go ahead and grab it from my github uh let me know if that actually if that links actually works it should be but let me know if there is some if there is something wrong and so this is literally the exact same build um okay only difference is i've i use the different logo but other than that it's uh pretty much the same and i will just gonna go ahead and sign in with one of my google accounts okay yeah this is pusher and i'm just gonna drop it let's actually first create a channel which is uh i think discord live how does that sound awesome as you already as you could see this is real time so this is as real what as it gets it just popped in there didn't touch any refresh buttons or anything and now i'm gonna go into that uh channel and drop in some fire emoji okay so nothing super fancy just a fire emoji and here we go all right so that was quickly the demo are you guys pumped who is pumped about this build who is pumped to put this on their portfolio and get a job in 2020 and be one of the 5 000 people that we at cleverprogrammer help to get a job as a developer let me know guys if you are excited about that drop it in the comments drop some fire and yep and oh drop it down in the comments guys you're excited let us know that you're excited if you guys are excited we are gonna be super pumped to guide you through the whole clone step by step and i think david is the right person to do that before we continue david i think uh this is an important question that you can answer so conor bailey asked that are you going to be using socket.io for the chat functionality so go ahead and answer that okay so i'm not going to use socket.io at all um i was thinking of doing something with that just so just to show you guys the comparison uh but not this time maybe uh maybe next time i will be working with sakuraio for now we will be using pusher and mongodb chainstream and mongodb of course so let's go and yeah so bonjour tech asks uh if i'm using butcher yes i am and yeah is this including the back end uh yes this is just the back end so today we are not going to talk front end uh we would just be talking back end all right so today back end only uh and and yeah i think with that said we can jump straight into building it all right are you pumped richie yeah okay i'm super pumped man awesome awesome all right so then what is the first step they have to do to clone the repo exactly so you guys uh you probably are watching this on youtube right now um first i need to find the stream where we are where we actually are i think this is the link and yeah here we go okay with some commercial and stuff um yeah so uh as you can see we have a 170 concurrent youtube viewers and all together okay that's all uh yeah so down below in the description i will zoom in a bit so you guys can actually see it better uh so if you guys go to this link this will actually uh put you towards to the um get repo that you want to go ahead and clone so let's actually do that together all right so i'm going in here just hit that button uh you guys should be able to see this and yeah uh i thought of us says two massive news right now our contact papers are whoa nice so as you guys you probably already know because probably you're following qazi on instagram we started dropping medium articles and they are actually doing pretty well so guys if you haven't already check those out as well okay yes okay for sure because we were creating this amazing video clones for you guys we're creating this i mean guys to build the school but i know and david know as a beginner it is so hard to follow up with that video and that is the reason why we are doing a written clone that you can follow take your time take it at your own pace and uh create that whole clone so check that out on medium as well exactly and i just want to address this question what is the difference when sony used firebase as backend so firebase is actually a platform as a service so you basically don't program down the back end yourself instead you're using a service uh which will be your back end all right so right now we will be writing the software uh that firebase actually uses and now you might be asking why what's the point so a lot of the times firebase is just simply not enough or the company you will be working for requires you to build a standalone backend project that's when this knowledge will uh will be super helpful all right exactly and sometimes when you're building those big projects firebase might be costly it's free for someone at up to some limits but when you're building those big projects it's gonna be costly for you exactly one more question and then we will be jumping straight into it and guys let's actually come let's actually share this video out to everybody we posted it a bit late because we had a couple of technical issues but now we are live and let's actually drop some fire and let your friends know that we are back with another mern build another massive moon build and we are ready to crush it so uh before we go any further thoughts on bean vs mirn so mean is if you don't if you guys don't know it mean is actually uh the same as mirn just no react instead they are using angular now as far as i know um angular is a pain in the neck when you are learning it so i highly not recommend going for mern if you uh mean if you are a beginner definitely put all your efforts into mern if you're a beginner but if you have already coded with mean that's perfect take it to the next level by learning express and node alright so with that there is another comment boom okay uh just rushing through the comments rishi feel free to stop me at any time if you see any good comments or something that we should be answering okay so sure i'm gonna be zooming in a bit so guys you can see uh better but uh so the link i've posted down below uh what does this stand for mern it's express js i'll be explaining everything a bit later so go to that link uh hit that big green button and inside of here there is this link that you want to go ahead and copy um and once you're done with that oh my god i have all this stuff going on in here don't worry about these uh create a folder and go into that folder and inside of there you will need two more folders uh where all your order all the project is gonna go or actually you don't really need this one instead you can open up a terminal and say git clone and then just oh i'll zoom in here again okay you guys should be able to see it uh pretty perfectly now so you can just literally type in a git clone yesterday with amanath we dropped some value on what is git and how to get started uh with git so if you have windows you need to install it let's go back and and pause this video come back later when you've installed it so you will need to clone this project by typing in git clone and then just pasting it right in here or you can do it with github desktop as well whichever you think is better for you okay so i just uh cloned this project and i think if i do an ls in here yeah there we go so i already have this starter project going on um now i can't oh hold on so because i'm using all my zetta sage i don't need to type in cd but i just will because that's easier for everybody else so here we go uh we got uh we are on the main branch of this uh discord mern uh starter project and let's actually install all the dependencies right so you're gonna need to type in npm ei and that will essentially download everything that you will need to be able to run this project right uh i see a question yeah what's up sorry didn't mean to cut you off i was just gonna say that yeah no no worries i was just gonna i was gonna ask you to explain what is npmi to all the beginner people who are just joining right now why do we do that yeah so uh mpm is that essentially it's node it it stands for node package manager um and it's basically just initial uh it's just insta installing all the dependencies that we will be using for our react app so pretty much react uh and all the dependencies that sony added right quickly and what i will be doing now is i'm gonna go ahead create another directory so i would say make there yeah ah damn and i will call it um this chord backhand i think and i would do it awesome yeah what's up before you put one david i see an important question in the chat that says that it's from one print it he asked that can you quickly explain the difference between the earlier discord app by sunny and the month stack discord so the difference is that the sun the one sunny build it's just the front end of that application and now we are going to be building in mon we are going to be using mongodb we are going to be using express we are going to be using react and we are going to be using node.js exactly that is the difference yes that is right okay uh all right and so now i created a new folder for my backhand uh let's put it away for a sec and let's actually set up all all the front and stuff so that we have a running project so uh what you want to do is essentially open up a terminal on the uh or in the folder which uh which contains both of your projects and then just type in code space dot that will essentially go ahead and open up a vs code for you which i of course i need to zoom in again okay i think now should be good i think it's a bit too much okay so inside of here we have the starter project uh it has it's actually cleaned up and all the work is done for us one thing though that you need to um focus on is the firebase.js file which i just can't seem to find uh here it is okay so i actually commented out this part uh so this is where your firebase config will go um so let's actually go ahead and set up our firebase stuff uh in case we need in case we want to work with it uh yeah so let's quickly say uh firebase.google.com and what firebase is is it's actually suite of tools uh by google and it's pretty much just switching your backend but today we are just going to be using it uh for deployment all right so if you go into console and if you go ahead and create a new project and you can name it however you want to so i will name it discord uh clone live because we are live now uh i don't need google analytics so i'm just going to go ahead and create the new project actually takes a little time uh yep so guys while that that process is happening i just want to mention that if you guys want a complete free training on the netflix clone the link is in the description go and register for that link and you will get the complete netflix clone how you can build a netflix clone from scratch so the link is in the description go and get it it's completely free exactly that is so right okay so while that happened uh while everybody signed up for the free netflix clone uh training all right uh our firebase just set up so what you need to do is go to this web icon just hit that quickly and go in here say type in your project again so it's going to be discord live it's gonna be good make sure to check the firebase hosting as well as you will need it uh and go ahead and register the app and just click next next next next and don't even worry about anything else so next next continue perfect awesome okay now what you need to do is uh hit the settings button and go go into project settings go down here hit config and literally just copy copy whatever is inside of the brackets so anything else outside is not uh something that we want to copy just those stuff so and with that let's go back in here delete the comment and just paste it in here and we actually have the uh uh the mur um the react discord tone sorry all right so now what we will be doing is essentially go ahead set up first our backend project create a mongodb database then we will be adding the functionality afterwards we will be connecting the front end and the back end and then last but not least we will make the whole thing real time are you excited rishi sounds i am excited man i'm super excited to do this all right let's go nice let's go people seems to love your background hmm sounds weird people seems to love your background oh yeah oh thank you we have some nice stuff going on in here if we face a bug who knows what happens all right with that said let's jump straight now everybody's gonna be like oh my god just fail him or just get him a buck okay so we will not worry about the front end project for now i'll just lower my volume a bit because i'm actually entering the orange zone all right i'm peaking so uh as i'm in the back end project at the moment uh i want to just go ahead and create the or initialize the git version control which i was talking about uh yesterday with amano so let's go ahead and type in git init and quickly here we go now that we got that uh you want to go ahead and essentially create your note package and you can do that by typing in npm init uh it will throw a couple of questions that you don't worry about any of them this is pretty much just setting up everything uh that you will that you will later on work with and guys if you are uh irrelevant but your hair looks nice david thank you so much so this is actually gonna be like the info sheet of your project pretty much so if somebody looks at this file the package.json file they will mostly they will know the most of the stuff that's going on in there so package name uh version conversion description we will leave it out and the entry point is something that you want to pay attention to and you want to type in server.js inside of there um oh earlier my voice was better so let's actually put it up again okay hey we got frank in the house yo what's up brother let's go okay um so before we continue david i just want to explain what is npm editing so when we are doing npn in the terminal what we are doing uh what we are doing is that we are telling the project that we are going to be using the node package manager in this project we are telling them that we are going to be using this libraries and then these packages so it uh that's all we are doing when we are doing npm minute and then you just fill out the info sheet for your project that you name the project you name the entry point and everything like that exactly and so go ahead david yeah i by the time i just answered another question with some overlays all right so let's go actually back and so now i um changed up to server.js and that's our that will be our entry point so test command you can leave it out get repository leave it out keywords leave it out and i think i will be typing in our names inside of here so authors so we got rishi in the house and of course we got me here we go and the license we can leave it alone and it's gonna ask if it's okay but of course it is so yeah and now you want to go ahead and head into here uh and this is essentially the file that we just created and what you want to do is add a type module inside of there and that will allow us to use es6 functionality inside of our backend project because node.js is actually using the es5 the older uh type of ecmascript but here at cleverprogrammer we are aiming for uh that aiming that you guys will actually know the latest and best uh technologies so we are going to be using es6 anyways and the other thing that we want to go ahead and do is inside of here inside of scripts you want to type in start and you want to type in nodeserver.js and that will essentially allow heroku later on to pretty much start your application by itself now what you want to do is go back to the terminal or you can use the builtin terminal inside of vs gold i just prefer the max built in terminal so i will just use that so what you want to do is pretty much just install all the dependencies uh for now we will only be using um express and mongoose so let's actually use those uh for now um yazid says i am excited for the real time part yes dude this is gonna be a real time this is gonna be awesome all right i'm excited for you bro thyroid says david's hair providing more attraction than the discord clone itself oh my god i gotta cut it then okay so i will be typing in mpmi express and mongoose and this will actually go ahead and install the dependencies that we will need for now uh so let's actually go ahead and create a new file which we will call server.js yes and this is going to be the file that will uh contain every single stuff that we will be uh using i will make our image a bit bigger yeah what's up so i was just gonna say that as a beginner a person who is joining the call who have never worked with a lot of stuff why don't you just go ahead and take a minute to explain what exactly is express uh yeah so express is actually the server side javascript super simply yeah so yeah let's actually do a quick technology rundown um so all the technologies that we will be using so we would do backend stuff hold on otherwise it will go away so we will be using backend stuff um yeah this is gonna be backend nice and we will be using mongodb nice we will also use node.js which is actually a javascript runtime and inside of there we will be using express.js i think that that's how uh that's how how you laid out correctly and these will actually have a connection made possible with mongoose which is another thing that we will be using and we will also use pusher which is some kind of third party stuff and on the front end we will have the react and the redux so this is where react and redux are okay now guys who is pumped about this build let me know in the comment section down below if you guys guys are pumped about this build oh my god i might have not shared anything oh damn yes that's what i was gonna say oh my god let's do it again go ahead and explain again yeah okay sorry guys so this is gonna be the back end stuff uh inside of here we will have mongodb right we will also have uh the node.js going on which is the back end runtime and inside of there we will have the express nice and that's gonna be essentially the back end and we also use pusher and we also will have the front end which will have react and redux but it's already built so guys if you don't have that make sure to go ahead check those links in the description down below and yeah that's pretty much pretty much just go ahead and download it and if you are interested in the front end development i highly recommend going back to last thursday and check out sunny's video on that and we will be using apis to connect the between uh front end and back end and we will also use mangoes to connect between mongodb and our backend software okay with that said let's go ahead and start building this stuff yeah i see everybody's going ham on like oh my god i'm not showing my screen sorry guys draw it up again all right so what we will be doing here is pretty much just importing all the stuff that we will be using so first let's go ahead and import express because without that it's just not going to work and the other thing that you want to go ahead and import is mongoose and that would is pretty much uh the importation for now later on we will be importing a lot more stuff and what i like to do and i actually highly recommend everybody goes ahead and does this with me is pretty much just outlining the the application itself and let's actually check out the comment section all right okay cool and with that said let's actually do the uh outlining part so first we will have some kind of app config going on then oops uh not help then we will have some middlewares uh yeah then we will have some db config we will also have api routes and we will also have the listening part so this is pretty much just exactly uh sure yanch says uh express is a framework of node.js that is correct uh and another one mongoose is technically and oh mongoose is technically an orm it can be used as an orm as well all right so this is pretty much how our back end up will look like um and yeah let's actually start by just mocking out some stuff and have our very first api route uh done today so let's do it by creating an app instance which is const app equals express and boom there we go we will also want to have some port going on which will be process the environment port and otherwise let's use 8002 and the other thing we want to go ahead and do is say app.get and just do use the root and we will have a request and a response as well and once we are getting a get request on the uh root folder or the root endpoint or the base url we will essentially want to go ahead and do uh we would just pretty much just uh say hello world back and nothing super fancy going on at that uh point of the program because this is pretty much just gonna allow us to have like a health check set off right do you want to actually add anything rishi everything cool we might have lost rishi um okay let's continue and i hope rishi will be back with us soon okay so uh and next okay let's finish up the first api and inside of there what you want to do is pretty much just say response.status equals is going to be 200 and let's go ahead and send back uh pretty much just hello world and guys this uh this essentially is gonna be like um so when you're when you're uh engaging on the um on the on the base url of the uh application you will pretty much just see a hello world as a response and you also might be asking what oh you might also be asking what the heck is going on with that 200 that's essentially in server language it means okay so that's pretty much it and let's actually now go ahead and make our app listen yeah papa marin in their house hey what's up dude here comes the correction all right um i don't know where she went by the way uh can you hear me david yeah i can uh what what what happened to your video dude i swear man my internet just crashed oh but i'm not sure like why it's my video not working oh okay i think it should be working okay all right bro uh whenever you can just turn it on and until we have this we'll have this nice little um oh okay there you are bro all right so let's get back into coding and let's actually add the listener part and we will be saying just about listen and we want to add the port in here should have a fi uh callback function and just pretty much uh console log that we are working and we are listening on on localhost and we wanna string concatenate the actual port or concatenate the actual port that we will be uh using so with that said let's actually start up not here let's actually start up our back end all right so let's hit uh nodemon in here and we should be seeing that we are listening on locals 802 here we go guys let's actually give yourself a round of applause if you guys are with me and or with us uh this far and you have a working api uh which is ready for all the requests coming in so this is your applause great job guys if you're with us all right now what you guys want to do is have a postman open in the background somewhere here nice and what you want to do is pretty much just go ahead zoom in of course and inside of there you want you just want to go ahead and test this out of course if i showed the uh showed my screen that would be much much better so here we go what's up zabiola nice to have you here in the house and guys who actually knows what postman is who has you who have already used it let me know in the um chat down below if you need a little bit of a training on how to use postman and some kind of like api crash course because we can actually make that uh real we are happy to provide you guys as much value as possible and even if it's not like actual coding we are super pumped to give you guys other type of values just like yesterday the git uh version control yes uh the apis index is very simple yeah uh all right so with that said let's jump straight back into it and if you go ahead and if we send this we will see a hello world as well uh again here we go now with that said let's actually jump into the jacked part uh because this was just the beginning all right this is when i usually say um we are gonna get real okay before we move on david yeah why don't you take a minute and explain them what exactly is postman oh what happened hold on hold on hmm something is okay something happened to my okay here we go but we're back we're back okay nice so um we need postman bootcamp yes okay perfect uh all right we can make that a reality if you need that okay so with that uh what do i need to explain can you can you can you take a minute and explain what exactly is postman oh yeah uh postman is yeah as everybody says it's very easy it's pretty much just uh allows you to call apis and test them out if you're a backend developer you can test out your uh your whatever you have just created and if you're a frontend developer you definitely want to have it as well because then you can check how the apis will actually respond to your requests all right you can you can make your app a lot better okay now uh what we want to do is say inside of here you guys wanna go ahead and let's actually go ahead and quickly set up our um mongodb so let's go to uh mongodb.com and if you haven't if you are new to mongodb.com you can go ahead and sign up by hitting that start free button but i have an account so i'm going to just go ahead and sign in now um here we go okay what is that okay here we go i'm gonna go ahead and hit new project and let's go ahead and say this chord live nice um because i'm working okay let's actually add you rishi so rishi clever programmer dot com nice so you can add your uh buddies you are working with your coding buddies nice and with that said let's go ahead and create a cluster what's up so i was just gonna say that what are we exactly doing while going to mongodb.com what are we doing like are we setting up a project on mongodb.com so that we can use that backend in our project so currently we are just setting up a database nothing else so we are we are riding with our hands the whole back end project and only the database is what we are you uh what we will be using mongodb for nothing else just the database and right now our cluster is being created which means we are provisioning uh sources from mongodb servers and we will be running our own database on their servers okay awesome perfect song yeah uh so with that let's go back in here and let's actually prepare our application for uh being able to handle json files and these request response so middle awares we will be using con uh we will we will need to add the express the json um so that we are go oh typo so that we will be able to handle json files and send and receive requests another thing which we need to install to our project and what i forgot is hold on oh damn nah it's abdo i use why const okay sometimes i make make these stupid mistakes so here you want to type in app that i use yeah um so another thing you want to definitely go ahead and do is installing the course headers uh so you will be typing an npm iii course that would essentially go ahead and just quickly uh install the course for you and now you can go ahead and type in a course twice so that you have the package imported and you want to go ahead and say app.use and course as well okay so what is a middleware middleware is pretty much just helping out the backhand it's gonna be like in between it's like a mediator between front and back and it's like middleware right so software hardware i think you can okay um but yeah yeah that was a good explanation yeah yeah like it's literally just mediating between the front end and the back end uh yeah okay i i just wanted to um like visualize how the name actually explains itself but i mean it's definitely an awesome question and and it's actually great to ask okay so uh dbconfig let's actually prepare that as well and we will be just inserting our uri inside of there okay so let's say uh const mango uri and we will be just inserting the string in in there and for now uh let's actually just add um the connection uh connection string and what we will be doing in here is pretty much just say mongoose.connect we want to connect that uri and add all these use create index news newer url parser and unified topology and these are actually needed because uh because mongoose is still in the um still in under development and it's always gonna be and right now they just need these uh to function perfectly and isn't middleware also used uh with redux or somewhere in the front end i think you can use it in the front end as well but as as far as i know um mostly it's used in the back end projects or a completely different project and like it like in huge corporate environment uh they will literally have like middleware projects right so in like let's say in a bank um there are lots of frontend softwares and lots of backend software and there is usually one one huge microservice layer where all the data processing and all those stuff go on and those are uh uh happening in there i hope this actually answered your question and let's jump back in so with that said let's go back to our mongodb and hopefully it is done by now and what you want to go ahead and do is hit database access or network access we will start with network access and just add uh the ip address and what you want to go ahead and do now is say allow access from anywhere but and this is a huge bot what you definitely want to know is that this like it's actually a huge disclaimer do not do this in production environment guys if you are working with a client or somebody you don't want to allow access from anywhere the reason being is that this will literally let anybody go ahead and write into your database or your client's database and that's actually a that can actually lead a lot uh lots of money loss so this is just for uh educational purposes i think we can actually do a live on how to secure your apis and database and all those stuff for beginners of course um and you just want to go ahead and and watch that later on so if you guys are pumped about that let me know in the chat because if you're not interested in that we will just not do a video on that but if you are we will okay yeah it and guys like is there any specific topics that really interest you drop down in the comments that the topics you want us to cover in the live stream so that we can prepare a better live stream for you guys and we can be uh provide uh all the values that you guys need so drop down in the comments whatever the topics that interest you and what are the live streams that you guys want us to do for you guys so drop down in the comments and also make sure that uh you subscribe to the netflix clone free training just go for that get your free training put that on your resume and get the job exactly that is correct all right now with that said so for developing we we use what you use but for production uh change that yes um so right now because we are here um between friends we don't wanna hassle with the security stuff but when you are working in production you will know uh what the backend server uh ip address will be and you can just insert that in there it's super easy you can just swap that and there we go okay um with that said let's actually edit for now and what you want to also do is add a new database user i will just call it admin auto generate oops how to generate a secure password for it and let's go ahead and add the user and with that done let's go back to our clusters hit connect hit the middle button which says connect your application and you want to go ahead and copy that but guys don't forget to save that password somewhere safe okay let's go back to our code and let's go ahead and paste the uri in here you want to change out the db name which we will call uh discord db or you can call it whatever you want to if you want to call it small.go you can do that too but just be aware that that's how your database will be named and next up you can go ahead and delete that password and add your password inside of there and we should be done uh with the connection for now now what you want to go now uh so you might be thinking what is the next uh step now my friends we will start creating our api endpoints and super fast we will be just connecting the application and we will we will be done in like less than an hour all right so all we did here are davids sorry to interrupt you but all we did till now is just setting up the environment for the back end right uh yes that is correct uh all we did now is pretty much just set up every everything so now we can work smoothly and super fast yeah so awesome let's go exactly there we go all right let's go and let's start with our first um api endpoint and i think so guys if you remember uh how the netflix clone is actually built up uh we will actually have uh two different uh type uh type of data that we wanna go ahead and store one of them is uh the channels and the other one is the actual conversation now what you want to do is pretty much how we will lay out all the data that we will be using is is going to be something like this so imagine that this is gonna be our database am i sharing my no i'm not sharing my screen not making the same mistake again okay hopefully now i'm gonna be sharing my screen so what you wanna do uh so what so this is how how to understand quickly this is gonna be our database inside of here we will have uh several collections right no actually one collection sorry so we will have one collection that will store everything now one document will actually have uh the name the channel name and it will also store all the messages okay these are the messages these small uh stuff and we will also have several other uh channels and all of them will contain all these messages all right so i hope this actually made it clear i tried to make it super visual so that you can you guys can easily understand what is actually going on yeah i hope it actually made it clear so uh yeah let me know guys if you need more explanation on that okay so what we will be doing is um d'angelo we love you too brother awesome uh yeah okay so what you want to do now what we want to do now is pretty much just uh first let's actually create our database uh structure and what we want to do is let's go ahead and create a new file which we will call data dot js and inside of that what you want to do is import um oh man you want to import the monk you want to import mongoose then you want to define a schema which will be a variable and you want to name you want to give the type of mango schema and this will essentially store uh one conversation so one of these stuff is going to be storing one actual full channel so here is the uh channel name inside of there there is the conversation and each and every single message has the message of course a timestamp and a user which we already set up in uh in the front end and we would just be passing in one um one simple user file uh user thing yep so the conversation is gonna be an object because it consists of names messages photos and url and stuff like that and that is the reason it is an object that we need to make sure here exactly also i'm just uh answering a question as i know with an overlay amazon clone with mern is possible right hundred percent my man hundred percent it's completely possible and if you guys are actually interested in building the amazon clone with the mirn stack drop some fire in the chat because then we will literally go ahead and build it so guys if you're pumped up from pump for that let me know in the chat down below and also guys if you are finding uh this or any of clever programmers videos valuable what should they do rishi so that this video goes out to everybody out there and we can provide so much more value what can they do so guys if you like this kind of videos and if you want go and like the video go and like the video comment down in the videos any questions you have any solutions you have for someone video it will reach out to as many people as they need to have we need to help a lot of people and a lot of people so just like the video and then that way you are helping another developer as well to grow so please just like the video so that you can reach out to hundreds of people like literally smash that like button all right with that said let's go back in here so this is the structure that actually is already set up in our front end project so we don't have to worry about that however it is a nice thing that we define it and then of course you need to export default the mangos model uh and you want to make the collection name plural that's the that's the collection name and you wanna make sure that it's plural otherwise mongodb will pluralize it anyway so don't worry about that uh but just make sure it's plural because you can go back to whatsapp clone and see what happens if if you're not pluralizing it okay i'll just leave it leave it to you okay and let's actually add the discord schema as well okay now with that said let's actually go ahead and import this file okay what's happening with my mouse oh yeah here we go so let's actually go ahead and import this uh file oh and what you want to do is just type in yeah so you want to go ahead and just type in here this line of code and you will have it imported now with that said what you want to do is pretty much let's first actually add a new channel and what we will be doing here is pretty much just set up a post endpoint um so let's actually say app.post and the endpoint what that we will be using is going to be new slash uh channel oops and we will have a request and a oh hold on we will have a callback which will have a request and the response and then we will uh literally go ahead and save everything inside of our database so first we will pass in the new db name inside of the request body and then what we want to do is go ahead and create a new uh document with this data and if there is an error handle it otherwise let's just uh send back a response so let's go ahead and go ahead and test this thing out so what i what i want you to want you guys to do is actually remember that we have uh so you need to name the field you are sending it as channel name otherwise it's not gonna be accepted now what i will name it is i think i think i think i'll name it youtube okay so now we should be able to send this and there we go guys we just saved our first uh channel inside of our database who is from now guys who is pum who is enjoying this who is finding this valuable let me know by just uh sending a message inside of the chat or smashing that like button and get this video out as many people as possible so that you guys can actually help us help 5 000 people get jobs as developers in 2020 right awesome i'm super excited nice yeah go on go on sorry sorry didn't you interrupt you no no i was no no no i was just gonna say that the thing we did right now is just that the reason why we are using postman is that before we go into coding and before we check that if we are able to post that uh channel's name into our database we are using postman to post that to send that name into the database instead of doing that from coding and that is the reason we use postman just to test the api exactly that's right also thank you so much thank you so much efren i really appreciate you brother i actually saw you earlier and a couple of days back as well you are around here we appreciate your brother and smash the like button okay so next up what you want to do is set up a new uh endpoint and what we will do is literally that's first you're not chatting your screen oh yeah uh sorry guys this is this kind of thing i always forget too yeah okay let's not do it again so what you want to do is set up a new endpoint and that will essentially just retrieve the channel list so what you want to type in here is say app.get and inside of there the endpoint is going to be get slash uh channel list nice and it will of also do the usual um callback functions and what you want to do is say uh mango beta dot find and you literally don't want to add any filters in there we will have um hey nice lovely comment thank you so much nice okay so what you want to do is not add any uh filter in there uh we will be filtering today uh i will teach you actually it's a new thing uh that we uh do some kind of filtering with mongoose but for now uh this is not the time we will be doing that with the conversation retrieving all right so who is from about that guys who actually knows who has actually filtered with a uh mongoose fine let me know in the chat all right okay so now what you want to go ahead and do is pretty much uh handle the errors [Laughter] you keep on doing that but this is the only day this is literally the only day i've always always changed everything and just yeah ah let's not talk about it okay so let's actually handle the errors as we uh yeah uh okay and so if there is an error we want to show the error otherwise let's just send back the response and what we want to do is you can literally go ahead and copy this uh line of these lines of code and you want to set the 201 to 200 right other than that we are cool now what you want to do is to make your life easier is to refactor the data that you're actually sending back uh from the back end even on the backhand side so let's actually add this stuff so uh let's actually refactor that so what i like to do is say create a lut uh and that's gonna be channels and it's actually gonna be an array and inside of there you wanna push all the array names and the ids because those are the two properties that we will be uh using on the front and if you guys remember if you don't uh make sure to check out sunny's video from last thursday when he is building the whole um um discord front and build nathan shoot your question in the uh chat and rishi please let me know when nathan asks this question right uh so next up what we will be doing is pretty much map through the whole data and every single piece is going to be a channel data and yeah so we will create a channel info which will contain the id which is going to be the channel data id and we will also have a name property which will contain the channel data that channel name and then you want to go ahead and push that channel info into channels and inside instead of data you want to go ahead and send back uh the channels right i hope this is actually clear let's actually demo it and let's see how it actually will work now what we want to go ahead and do oh yeah this is the this is what i've what i prepared with so let's go ahead and test this out and with that we literally have a working another working api endpoint and we are getting back the youtube channel name nice job guys if you are this far with us this is a roundabout applause for you guys okay now let's get into the juicy part okay so next up what we will be doing yeah go on go on sorry sorry to interrupt before before we move on uh can you just show the visual studio code just i i just want to explain what we just did so here we go so guys what we did over here is what we are just getting the data that are already stored in the database by using the dot get method and we are from that endpoint we are just getting the data and we are displaying into different forms that is the channel uh the name of the id the channel id and the name so that that is what all we are doing from line 38 to line 56 we are the we are getting the data from that end point and we are just displaying that right now we are just seeing that in the postman so that's what we are checking that if we are getting the proper data from our database exactly so guys this is the data that we stored in here and we just want to see this and that conversation don't care about it for now we just want to see the channel list and the version again it's not important for us okay uh let's actu i think yeah here we go okay so next up what we want to do is literally save a new message inside of uh our backend and or inside of our database and guys this is gonna be tough um oh i think i can you guys hear me oh yeah you can okay so this is gonna be tough uh because this is when we are we're gonna be doing some nice little uh stuff in mangoes so next up what we wanna do is say app.post and you want to go ahead and create a new endpoint which will say uh slash news message is or slash message and let's fire off another uh callback and let's say const oh then let's say const uh id equals request dot query the id i will explain everything in just a second okay don't freak out just copy paste copy copy copy and i will explain everything that's going on in here uh oops okay and yeah and next up what we want to do ahead is go ahead and say const new message new map sage and say request body okay so these are gonna be the properties that we will be uh using uh the id is gonna be this id so that we know which channel do we uh do we do we want to add this message to so let's say if i'm sending this id back i want to save it to youtube but if i go ahead and create an other channel uh i'm not gonna be able i'm gonna be able to demo oh yeah i will so if i say uh this q or cp this chord whoops this discord nice and go ahead and retrieve everything back so if i want to say save uh it into youtube channel i will say uh add this to the query and if i want to go ahead and save to the cp discord or if i want to send it there i will add this one okay rishigan again hopefully he will be back soon all right we still have 120 people guys let's smash the like button if you guys are enjoying it this is a hardcore uh build i know because there is not too much people around here but actually 120 people is pretty a good amount so with that said let's actually continue and say mango data the update and what you want to do now this is where we will be going ahead and filtering out stuff so we will be updating stuff uh and we will be pushing new messages into uh arrays so just bear with me okay so let's first actually find which uh which field which conversation do we want to add the message to and let's say that this is actually gonna be the request square uh we don't even need this one why did i write it okay um so inside of here you just want to go ahead and say say that uh so that's the id that you want to find and that's the conversation that you want to add a new message into and you will literally just go ahead and inject the new message into the conversation so next up with when we found the conversation we want to go ahead and say uh whoops uh let's push something in there a papa react in the house what is up sunny how's it going my man hey smash the like button okay hey sunny yo so next up yeah sunny in the house everybody's going crazy like hey sorry let's screw the mirror and build sonny is in the house let's give him a round of applause what is up uh so does query id come from the url uh asked as by silicon tv yes it is um let me actually quickly show you how it is built up so if you go if we go in here uh now i actually add a edit as a comment so if i gonna go ahead and say uh local host oops localhost 802 and hey exactly he said it not me all right so if we say like new message and let's say the id so you we will need to add a question mark right we will need to add a question mark that's how we will know that this is the query part and not the end point right so that's when the uh query starts and we will just add an id field and say equals whatever we want to want it to equal to you right i hope this actually answered your question let me know in the uh chat down below okay so next up what we want to do is say uh we want to in inject into the conversation right conversation which is the um which is going to be this array right that is where we want to inject a new message uh that's where we want to go ahead and say request.body so what happens here because this is like mind blown so so what happens here is that we define which conversation do we want to inject the new message into and we also send a new message as well the new message is going to be sent in the request body and the conversation id is going to be sent in as a query right um i hope this actually uh getting clear and i'm able to clear all the clouds but let me know in the chat if i nee if you guys need a little bit more explanation we are here for you guys okay yeah before we move on david there's a good question in the chat that uh no i think uh a wait for mongo's where is it i think it's like pretty it's it's at 425 so it's pretty up okay so uh what what was the question again so the question was why are we not using i think and await for like mongoose uh this is already uh so it's already getting handled by express right so this is a server between a server conversation and this is actually getting handled by that uh you want to use acing more on the front end like that's how i use it i haven't really used it in back end to be honest all right next up what we want to do is so we we already pushed the new uh converse the new message into the conversation let's handle the errors and let's see if everything is going cool and so are not shutting your screen um man why is it happening today okay so what i just did i added a comma at the end of the line and don't forget that and i started the error handling so we will either receive an error or we will receive the data that we just saved and if you guys are ready let's actually add the uh error handling and say boom so if there is an error let's say uh let's cancel log error saving message and let's add a console log and then send back the error of course and if everything's going cool let's just send back the data now what we want to do is go ahead and check this out how it actually works so let's go into the parameters and from here let's actually add it to youtube and let's actually like delete this and say oops something is not going well hold on unexpected token oh this is when the buck happens oh my hello all right let's debug so let's see what didn't work out well and what didn't work out the way we wanted this to happen so we see that okay i think i added the express let's see so we have the express added jason um oh so it's actually a pretty easy error um i made a mistake in the json i don't even know what happened here but let's actually set the background color back all right now we are back on track uh so let's actually add a message that actually is good uh here so what we need to type in here is going to be like okay so first let's say message and the message will be yo yo guys who is pumped and let's actually add a rocket emoji nice uh carry goes in the comment lol [Laughter] yeah all right next up uh we will also need to add a timestamp which will be just a dummy one for now and let's actually just say time stamp for now and don't worry about anything else we will also have a user next up uh i think i just copy paste this part uh boom and now let's handle all these errors and so the display name i think it's gonna be your name for now rishi how do you like the idea and yeah perfect okay so the display name is gonna be rishi email is gonna be a at b com simple photo url is gonna be this is a photo nice and we will have a user id as well and that's just gonna be like something like this cool uh now i think we should be good to go and let's see how it goes there we go if we receive that response then you guys we know that we are on track now uh let's actually create another endpoint that will just retrieve everything so that we can actually see the whole data in one piece that's not gonna be uh anything uh special it's just gonna be retrieving everything we are not even gonna be using this it's uh more like for uh demonstrational purposes uh today we're not even gonna be needing this so uh we will be saying data i think this is the one yeah here we go and 802 nice and inside of here or what we see is that we got the youtube channel there speaking of youtube channel subscribe to it if you find this video valuable uh we got this message inside of here by rishi he says yo what's up yo guys who's pumped and we also have a discord uh channel which is totally empty now with that done uh we actually inspected our data but now what we want to do is uh retrieve the conversation that we are actually on and the current one that we actually want to see now i think uh that is going to be the last one and i'm sharing my screen because i don't forget it popup i should get more more of these sound effects right uh let's go ahead and paste a new one inside of here so it's gonna be get conversation and there we go so pretty much we are hitting uh so we are actually gonna be querying again with an id i'm gonna scroll a bit down so that you guys can have a better uh better uh uh you can see it better and next up uh we will be filtering on that conversation and we will be just retrieving everything as the usual uh as usual we would do hey rishi welcome back so um i think with that said with that said uh i think we are done for the back end part i think we are done guys make sure if you guys are with us uh let us know in the comment section down below and actually great job and awesome with us let us know if you are here with us and it is working uh as i just showed you guys all right so next up what we will be doing is pretty much just go ahead and connect it to uh our front end let's show the screen uh and what we will be doing is first let's actually identify where we need to work and i think we will be working in the chat.js file yes and the other one is going to be either message not not message uh the sidebar.js yes that's correct so let's go into the starter project and say let's open up the chat.js file as well as the sidebar.js let's start with the sidebar.js file because that is uh that is gonna that is going to shoot into the redux the data layer and it's going to set the channel id and then we will be able to go ahead and fetch everything uh based on that all right nice um boom let's go back to our screen and what we will be doing in here is pretty much just get rid of all the firebase stuff we will not use it anymore and inside of there what you guys want to do is first actually add the um let's actually im install the axios all right so how to do that pretty much npm install and axios now axios is actually a tool that will um it's pretty much the coded version of postman if it makes sense you will be able to go ahead and make uh rest make requests to http requests to rest apis right nice uh with that said let's go in here add a new file oh man add a new file inside of source nice which we will call axios.js and what we want to do in here is pretty much just uh set everything up so we will be importing axios from axios then we will create a new instance and we will be just going ahead and exporting it the base url will be our server's url right now with that done uh let's go let's actually close these stuff up uh we will be oh i close the chat okay so let's go into the sidebar.js and let's import um the axios from the instance that we just created nice so next up what we will be doing is let's go ahead and create a new uh function which will go ahead and and uh download all the data from our database so that will be pretty much just a get channels named uh function and we want to go ahead and call it inside of this um use effect right so when the application has loaded you want to go ahead and fetch all the channel names and you want to render them out in order nice so what you guys want to want to do is yeah here we go and we should be able to open up this app and you guys can actually see that here we go right that is actually the channel that we just created all right it it still has the old uh messages because it's actually i literally named it the same way but don't worry about that we will get into it very soon all right once we once we remove all these uh db stuff is it actually running hold on no it's not not it's not even running hold up it's not even running okay npm start okay um here we go let's actually run this and this is gonna be the one that we just built okay that's that's what i was guessing yeah that was the demo one i'm like hmm okay so now that we are actually setting this up and we are uh firing the uh server up let's go ahead and sign in it's going to be half the old oh what i forgot let's go back to firebase and let's actually set up our authentication right so you want to go ahead and hit the authentication button in there otherwise it's not going to uh allow you to sign in but with that done uh let's actually go in here to authentication uh say google enable it and add an email and just go ahead and hit save now with that you literally enabled authentication and it's super easy now let's go ahead and refresh this and now it's actually working so i'm gonna go ahead sign in here and now we should be able to oh my god so we are facing a little bit of bug i think i already know what we didn't set up just yet uh so what we need to do is pretty much just um set up the way we are rendering everything out all right so inside of sidebar.js we have our data uh added to uh to the channel's uh use state so that's cool but down here where we actually go ahead and literally render it out and need to find that part rishi speak up says sunny speak up my man i know yeah i'm just letting the david do all the stuff [Laughter] all right so what we will be doing down here is where we uh where we render all these stuff out uh we need to change a little bit of stuff so we need to get rid of all these uh thank you sunny it's an awesome code but we're just not going to use everything out of it so we will whenever we are mapping through the channels we will receive uh single channels right so there's gonna be like one channel okay now what we want to pass through uh or actually send through as a prop is going to be the uh channel dot id inside of id again so channel dot id right oops id and channel that channel instead of channel that channel name we will have channel that name and that i think should actually work pretty perfectly let's go ahead and hello here we go we are working we are live we just fixed another bug right we just fixed another bug so guys this round of applause is goes out for you guys okay now with that oh that he goes witness sad emoji sorry man yeah okay thank you so much learn from the best all right so and yeah oh my god we are close to 300 likes guys literally let's everybody smash that like button we are at 273 likes guys i think we can reach that number we are here a hundred and fifteen uh each and every one of us if you guys just go ahead and smack like button we will reach that very soon okay hit that like button if you found this uh useful and let's carry on with that okay yeah and before we move on guys if you need a complete free training on a netflix clone the link is in the subscription go and register for that it's a completely free netflix loan you will go from scratch to learn how you build a netflix clone very similar to netflix so go and subscribe to that exactly that is correct okay uh boom sharing my screen nice so we have all our uh channels shown in here right cp discord and youtube now let's actually connect uh oh my god let's actually connect the messages inside of here so that we will have everything up and running now with that said well next up what we need to do is go into i think we are done for now with the sidebar.js next up we need to go into chat.js and and uh let's actually get rid of the firebase stuff here as well we are not going to be using firebase for storing all the data what we will be doing is pretty much just uh use firebase for hosting now uh i will leave uh the uh firebase code here as a reference but what we will be doing now is pretty much just create a new uh function and that will actually get all the conversation that we need uh it will get it for us now what is happening here yeah what's up sorry i didn't mean to cut you off no i was just no no i i just uh i was just gonna explain that what's happening here i was just gonna say that we are fetching the conversations from that exactly so that we can display all the messages exactly that is what is happening so what we will be doing is pretty much have a separate function which will have channel iv as their input parameter and we will literally go ahead and switch this line of code to oh hold on uh we will literally go ahead and switch these uh lines of code to this and this will essentially go ahead and once the application is loaded and everything is up and running it will fire this uh function off and this will get everything back for us right so we are literally going to go ahead and get the conversation and the id is going to be the channel id which we already uh set uh which we already set up and sonic goes mongodb trying to hold up firebase [Laughter] mongodb is cool stuff all right okay let's get back to it okay so lo sonic aims comes in here and we are up with 10 more viewers stay here sonic please all right so next up what we will be doing is uh we will switch out the uh send message function and what we will be doing is pretty much just go ahead and delete the db collection and all that stuff and let's just paste this uh nice tiny little code so much simpler than uh firebase isn't it like literally so much simpler hey we got frankina is being a savage yes all right actually we are we're having more fun than coding all right so with that we pretty much have the sand and the retrieve uh functionality and woof we don't have the axios define what are we gonna be doing of course we know what we're gonna be doing we're just gonna go ahead and import it nothing super fancy going on in here but let's import axios from excels there we go and it actually should fix it here we go guys we have it now let's go into youtube okay so now it's freaking out again but the only problem that we have now is that it cannot take in the timestamp that we are added this is not a huge problem however it now causes the app to freak out instead we would just go into mongodb hit uh clusters and we will literally just uh go ahead and delete that uh that piece of comment um if i can hold on okay yeah there we go and we're just gonna go ahead and update it and that is now it yeah now it's gone so it now it shouldn't cause any other problems now what we will be doing is going back in here let's refresh and we should be able to see the app working now if i go into youtube channel of course there is no more um no more message um yeah and next up 13 likes to go yes guys literally go ahead and smash that like button we uh we only need 13 more that's not a lot let's go sunday goes i need those lights we can hop on a call after and talk tech all right okay uh yeah and what we now we will do is so here it actually is going to save a timestamp which is going to be a date dot now which is going to be um a super simple uh timestamp right it's going to be a timestamp yeah what's up guys when we used it script and build functionality that provides us timestamps that every time a new conversation or new message is generated it's gonna have a different unique id and we need to separate those messages that is the reason we are using the timestamp exactly that's right all right um so what we will do is go into messages and inside of here we will change a little bit of code uh and that's pretty much just gonna be just gonna make our life so much easier so we sorry sonny again we will get rid of another code of yours uh so what we will be doing instead of this ones we are not going to display the utc string and all those stuff instead we will be transforming the app uh well instead we will be transforming it to a simple timestamp string all right so with that said let's actually go ahead and try this application out with the send message functionality and the retrieving uh retrieving uh functionality so who is pumped about that smash the like button let's hit that subscribe yes let's go guys let's actually check this app working all right now um okay i'm showing my screen hey linkedin on the way soon that's gonna be some let's go stuff yeah okay let's check this out so i am going to be adding a message inside of the youtube channel and we just got 10 dollar nice donation by frank thank you so much brother uh he says clever programmer rishi and david dropping so much knowledge right now let's go let's go frank i'm super pumped to have you here uh thank you so much roger and we are super pumped for you all right thank you so much frank for the super chat thank you so much thank you really appreciate that exactly all right uh and we had a christmas app as a recommendation guys i actually have it in on my computer we are gonna drop it soon okay so let's test this thing out so who is pumped who's bummed guys let's answer in the uh chat down below i'm gonna add a rocket and they fire because we are on fire right let's hit this and nothing happens but it's not a bug because it's just not real time just yet let's refresh let's go into youtube hey there we go there we go guys working it is working now only thing we need to do now is literally make the app real time and then guys we are gonna be done with today's build okay who's pumped guys let me know in the chat if you guys are pumped and if you guys are ready to make this app real time all right uh yeah next up what we will be doing is go to pusher.com the good old pushrod you're nurturing your screen i always do that seventh time seventh time and you're counting it dude i'm making a count yes i'm counting okay guys i'm gonna stop here for a sec um we need four more likes before reaching 300. that's everybody smash that like button i think um i think everybody who who got value out of this video or or any of clever programmers builds can go ahead and smash that like button like literally go ahead and destroy it and let's reach that 300 because yeah let's just go ahead and do that let's everybody do that until then i'm gonna be staying here and talk to you guys we are at 299. nice there we go and three thousand and three hundred and one let's go let's go all right thank you so much guys for liking this video when you're liking this video you're helping you're also helping other developers so that they can reach this video and they can make this clone and they can put it on your resume and they can lend their job so your part is just to like that video so that it can reach out to millions of people thank you so much guys for liking this video exactly we really really appreciate you guys for being here and smashing that like button all right next up let's go and make our application real time now i'm gonna go ahead sign in but you guys can go ahead sign up if you guys haven't used pusher before but yeah because i have and hopefully you guys have too let me know in the description down below not description chat uh if you have used it or if you're completely new to it next up i will hit the manage button what's up sorry no i was just gonna say that uh can you please explain what exactly is pusher and why are we using it sure i know we are just using it to make it a real time but what exactly is pusher and what are the other ways we can use pusher sure the people can know more about that sure so first up i want to add sony's command so pusher implementation is clean exactly uh but what we will be using this for is pretty much uh it's going to be listening so we will be using two different technologies one of them is going to be change stream by mongodb it is going to be watching the uh it's going to be watching the collection where we save all our messages right it's going to be watching and it's going to be triggering off a function uh that will alert pusher that hey there is some there is something happening in the database right so because it is not a realtime database we need to do this manually now uh and that's actually a huge plus uh or a huge win uh for firebase because that is a realtime database exactly by design but we will need we will make mongodb realtime with it so change stream is watching our database something's happening triggers of a function which goes ahead kicks pusher and pusher be like oh there is some kind of change in the back end okay i will let the front end know so it tells the front end and the front end goes ahead and refreshes everything and then we will have everything real time all right we will be just going with the very basic way of implementing it we could be like optimizing it to the like and lastly but for now we will be just refreshing the whole page uh but we we can actually drop a video on how to optimize all your applications and how to make it like super efficient but for now uh for the sake of results over perfection we will be just going ahead and refresh everything okay with that said yep so the role for the pusher in our project is just gonna be it's gonna be checking that if there's if there's a change even a little change in the back end it's gonna tell the front end that there's a change and it's gonna refresh so that we can see all those changes instead of manually the page uh middling the uh manually refreshing the page okay right now let's focus on the value and let's actually make it real time now what we will be doing is gonna go ahead and hit create app and let's go on and say this is going to be a discord uh mirn build or live oops uh live yeah there we go and we can actually choose our front end which is react there we go and we can choose our backend which is node.js and with cr uh hitting the create app button we will essentially be given a couple of starter codes that we can go ahead and use let's actually make our back end connected to pusher so let's go ahead and copy this code to the terminal and so i'm selecting the back end and i will be installing uh with the node package manager and and i will be just installing pusher right so that goes ahead downloads the dependency and here we go with a snap here we go so let's go back to our server.js file and let's actually go up here and inside of app config you just want to go ahead and uh paste this you want to change the bar to const always and use const always until you need let and you also want to go ahead and import pusher with a capital p from pusher right make sure make sure guys to import everything you install if you don't import it it's gonna throw an error of undefined so make sure to import every library or every third party you install in your project do not ever forget that that's correct all right now we just created our uh pusher instance and with that done let's go down here to db config here we go and what you want to go ahead and do is say mango oops angus the connection and once open fire off a function which will go ahead and console.log that db is connected now what this does essentially is pretty much once the mongoose connection is open it will fire this uh console log off right this is how how to easily translate it okay let's go and say uh so inside of here this is where the other part will come so pusher.trigger is actually going to be coming a bit later let's first create our change stream which is going to be a const change stream equals mongoose yeah mongoose the connection the collection and let's see how we named our uh file or our collection it's going to be conversations so let's go back to uh server.js and boom let's paste it in there and let's say watch so that we'll pretty much go ahead and watch all the way uh into our collection and it will alert us every single time when something is going on or something is happening in the uh database next up what we want to do is say so whenever something happens and whenever some whenever this change stream gets fired off that is so let's say so chain stream on change you want to go ahead fire off this function which will be a couple of if uh if statement statements right so there is three possibilities one of them is going to be a new channel second is going to be a new message and the third if is something else which is just um messing the whole thing up that's when we want to handle the error and just throw the whole thing away now uh so when there is a new uh channel then the operation type is going to be insert because we are inserting a new uh document right so all the conversations are stored in one document okay so one channel one document when we are creating a new channel it's a new document right so the operation type is going to be insert and then we trigger off pusher uh we will create a pusher channel and we will give this a give this an event which is going to be new channel and we're just going to go ahead and upload the change and just don't worry about it we just let's focus for on the value and we will actually drop a video on how to set it up properly this is a good a working mvp solution and you can actually use this in production environment next up you want to go and say else if the uh as if the operation type is update then you want to uh trigger the conversations uh pusher channel with a new message event then uh also upload the whole upload the whole change and if something else happens then just error triggering pusher and there we go now that was uh that was it for the background basically yes sorry sorry to interrupt that so we are just checking for all the cases which might make changes into our database that's it what that's all we are doing we have three cases the first cases checks that if we are adding a new channel and if you are adding a new channel that's gonna be a change in your backend the second thing is gonna be what else we can do is we can uh text a new message so that's what we are checking at the in the second condition the third condition is just if something goes wrong and it does it does uh crash or something like that in the application and if see if we see that uh if there are different kinds of changes that are happening in database and if we make sure about all the changes that can happen then we can tell the pusher to update and to refresh the page so that we can see the changes in real time that's what we are doing right now that is correct all right let's go back and finish this up hard we are done with the back end let's go to our front end and we will need to subscribe to this uh pusher channel in the sidebar.js as well as the chat.js files now what you guys want to do is come up here first you will need to install the pusher uh as a dependency on the back end as well uh sorry front end so what you want to do is type in here mpmi pusher dash js so on front end it's pusher.js on backend is just simply pusher next up uh it's going to run through quickly hopefully and make sure to install pusher in backend and front end both of them it's not just in back end you have to install it you have to install in front and as well because it's going to be connecting the backend and the front end in real time that is cool so make sure to install it that's right all right now what you want to do on the front end is pretty much uh just go ahead and copy uh the this code and we will do it actually twice uh so let's actually first import the dependency right and so import uh cap pusher with a capital so pusher um equals oh no no from pusher it has js yeah there we go and next up you want to paste this code here uh change the word const here we go oops here we go and now what you want to do is copy literally that line of code go into that one use effect and come inside of here uh yeah and what you want to do is literally just paste this in here say uh const instead of war and let me quickly get this snippet of code yeah nice uh so what you want to do is you want to fire this off once and in instead of alerting you want to go ahead and say the uh you want to go ahead and get the channels again that will pretty much uh make the channel creation in real time let's go ahead and test this out so i go into youtube nice okay i hit the plus button and it should actually be working real time so let's actually say uh real time fans hmm sounds cool boom and nothing happened something's not cool i love that song okay let's see what's going on so let's go ahead and say okay so this is gonna be a test no yeah it's gonna be a test and on the pusher debug console it doesn't even show up for some reason so there is some kind of issue in the back end so let's say we got the change stream set up all good uh let's see if there is a change so lights and this sounds yeah dude so let's add a console log in here let's debug this stuff and okay so some change and whenever we are inserting we want to go ahead and say console.log it's going to be a new channel and if we are inserting a message we are going to be typing console logging new message okay so let's see it on the back end nice so we go back here and say another test and say okay let's go to our back end and nothing is happening that's crazy so the database is connected we can see that so before that it wasn't connecting so it's actually something that i just added that's good uh next up i think there is something going on in with um within our chain stream because that doesn't even fire off so let me quickly check it out so are we actually watching the good uh yeah you're not using the demo link right what's up you're not using the demo link right well no no no no no it actually should be all perfect yeah okay so we got the database nice let's actually see if it uh goes down into the database refresh it actually should be oh hold on so there is some other stuff not going to the database yeah it's not even going to the database so it's actually a step behind before that let's see what is going on in here oh my god i forgot to change that that part of the code when we are creating a new channel guys this is as real world as it gets um people are forgetful things happen usually you're gonna go ahead and debug it and um here we go what's up and if you are running into an error if you are running into errors guys i think that's a good thing you are going to learn a lot of this that's not going to work for you so you won't make that mistake again so don't don't worry if you run into errors exactly exactly all you need to do if you run into an error is go ahead debug it and then you will essentially find out what's up so now that i actually added this uh axios post new channel with the channel name uh we should be good to go so let's change back the background and now hopefully hopefully let's see how we go so let's say real time fans boom and again hold on okay debug console okay uh new channel created um yeah real time fans that's cool so there is some kind of issue going on in the front end now let's go back to debug mode all right let's go back all right okay so what i forgot to do is the uh channel subscription of course yeah it's a forgetful day i forgot to change the screens i forgot to add end points it happens guys it is it because of me it could be it actually could be so what we will have instead of uh instead of the my event and my channel you literally have to go ahead and uh subscribe to the channel's channel that uh push your channel and the new channel uh evened now it really should be working okay exactly yeah it is working it should yeah that way better okay you youtube live okay that's it okay and there we go finally all right let's not make these mistakes again let's go ahead and make the chat real time as well and now we should be finishing up the project in like less than 10 minutes okay guys bear with me we are close to the end all right so next up what we will be doing is going to chat.js let's first check the endpoints and the api requests so we have we changed the uh get conversation and the save new message that's a good that's good sign next up what we want to do is go to pusher uh and grab the code grab the code from here and you wanna go ahead i'm not chatting ah eight times you want to go to pusher.com and grab this part this code and go up here import pusher import pusher from pusher.js add this here change the word const nice and last but not least grab this part of the code and go to the use effect say we added here change the vortice const again and let's not forget about the uh pusher channel and the pusher event so the pusher channel is conversation and the event is going to be new message so now it really should be real time and the whole thing should be working so let's go ahead create the last and the master channel or or the main one or actually let's call it general yeah here we go let's select that there is no uh conversation going on in here and just say hey guys who enjoyed today's build oops and add some fire emojis what is happening here oh because i the alert nice okay i'm a bit forgetful today let's go ahead test this again general there we go another one yo boom there we go it is working here's real time guys um yeah this is as real word as it gets we are human as well as you guys are so this is just actually it's a good demonstration that we are making mistakes as well even with a prepare even after a preparation a whole day long preparation we are making mistakes so guys if you are running into bugs there is a no way that you should uh give up no reason for that completely no reason for that um what you always want to do is try to debug it add as much console logs as possible so that you know where your process actually stops and where you should start looking for the the issue right that's what i did uh i went back i tried to debug it step by step backwards right so i i tested if the change stream actually gets uh fired off if it goes to pusher if it if the pusher actually gets triggered or something then i actually figured out that it's not even on pusher it's not even on the back end it's actually a step before the first step uh so this is actually on the front end it's not even getting saved into the database right so i actually i want this to be as a key takeaway for you guys if you are uh go uh if you're failing to compile the application for the 700th time it's completely fine okay i want you want everybody to know that it's completely fine just go ahead debug it try to figure how uh things work and if and let's actually get on calls with others because usually what happens is that i'm coding with rishi a lot uh like pair programming and i'm like making a mistake and i just can't debug what what the hell is going on and he just comes in here and just like yo that's the issue all right exactly so that's literally how it uh how it happens all right yeah as lucy i think debugging is one of the most important part of coding that you really want to master exactly that is right so as lucy says always happens in the real life that is right okay um i think that will be it uh for today's build uh guys if you enjoy enjoyed it smash the like button hit the subscribe button click the bell uh next to it and rishi do you got anything else to add uh no thank you so much guys for staying tuned and let us know in the comments if you guys have any questions and we will try to and if you wanna if you want us to build some amazing streams let us know in the comments what kind of streams you want to build and we will work on that and we will build that for you guys exactly so that was an amazing session from david thank you so much david for your time and guys if you have any special requests for building this is my instagram tag and oh sorry that is rishi's yeah so that that is rishi's and let's actually go ahead and hit us up send us messages what you guys want us to build for you so that you can get the most value out of it so send us dms let's hop on uh cause and let's talk and yeah amazon clone please there you go brother we will have it soon okay with that said thank you so much guys for joining today and we will see you in the next video in the next video alright