in this video we're going to be building The Tick Tock web 3.0 adapt with an xjs and interior you're going to be able to upload your videos to the blockchain so that they are available forever and other users will be able to come over and review those videos and even give a thumbs up to them like you shared to this video so with that said smash that like button and subscribe to the channel let's just jump straight into all right so before we actually get started let's just go ahead and spin up this app because we haven't seen how it looks like so what I'm going to do is just type in yarn Dev in the terminal and that should pretty much get started with a that should pretty much like get our server up and running and we're gonna go ahead and get started with the Chrome and it's only because for whatever reason Safari isn't supporting any kind of wallets that's weird all right so let's see what we've got um we have this nice beautiful design that um that we got here so we got this nice beautiful design and this is what we're going to be working with so there's a bunch of like preadded data and then there's gonna be this guy with the upload um what's that with the upload thing upload modal and then we will have a light button which uh yeah it's not defined so it doesn't work yet so that's fine but this record is spinning so we're good to go camera rolling all right wow there's a bunch of console a lot going on for no apparent reason let's actually get rid of those because you know how we roll we don't do unreasonable console logging there you go all right now with that said I think what we're going to be getting started with is just uh the contract so what I like to do initially is um use truffle to create a contract so that's literally what we're gonna type in truffle create a contract and it's gonna be called magically tick tock and before we actually forget about it because that's a tendency I like for whatever reason I do is go into your migrations folder and create a new file with the title of zero one deploy.js and not K ask if that doesn't exist there you go apples and what we're going to be doing in here is actually I'll just make this nice I'll make I'll make the text bigger and make things bigger that's what she said all right you should see it now right I just get up get a magnifying glass all right so cons Tick Tock these holes our teeth facts dot require Tick Tock what they basically we'll do is when you go into your Tick Tock dot Soul file um it'll look for this thing so and then just import it in the next stop module whoa I don't know what that is module dot exports um and we're going to explain function it's going to be it's going to have an input of deployer and then deploy the deploy Tick Tock that's literally what we're gonna look that's all we need and then um it's going to be only used when when we try to like deploy the contract so it's not necessary now but I keep forgetting so let's just get over with it and let's go into the contract huh all right so the version that we're going to be using is the zero point 8.16 I kind of forgot the numbers here and um let's just get started um so there's no need to have a Constructor in this case but there's a couple things that we're gonna do so I just want to like set up all the structs mappings all that kind of stuff ahead of time so let's just get started with a struct and and that's going to be um I'm sorry if it's going to be a video it's like a video object this is how it's going to look like these are the props that each video object will have so we're gonna have a caption um and then you want to put this semicolons at the end because if you don't it's going to be issues um and we're gonna have likes we're gonna have um there's likes gonna have likes we're gonna have dislikes and we're gonna have an address which is basically going to be the owner or the person who like uploaded the video itself and we're gonna have an array of addresses that will contain basically the likers um actually I can just put that like right there so there's that all right so now we're gonna do some uh relatively Advanced life we're gonna have a mapping and this mapping will map addresses to another mapping which will be which will map a uint wow a uint to a pool huh that's it's gonna be interesting and it's going to be a public and it's going to be liked users so we're going to be mapping each user's address who's using this app to whether they like this specific post or not so what let's what this will mean is we'll have my address my wallet address and I'm gonna go in and see if and like start watching video number zero and then decide to like it it's gonna be my address mapped to another mapping which is like zero true and so that basically all that means is I like the first video or like zeroth video but I'm talking like human language now so basically that's what it will mean uh we'll get turned in a second kind of try to understand what it means uh but you'll understand it later on we're going to have another mapping in the meantime which will be a number mapped to a video right and that will be another public one and that will be the videos themselves so this is where we are going to map the IDS to the videos themselves um you could have we could have just created an ID here but we are trying to show like different ways of building contracts so we're going to go this way now what happened there and we're going to create yet another mapping and it's going to be another number and this is going to be another number in here and this is going to be public again and this will call lights so we are going to keep track of each like for each video ID so you'll have a video ID and then you will be able to map like we're going to mat we're going to use a bunch of mappings here all right so video number zero this is how much likes it has these are the users that actually liked uh that actually liked it and then like when you pass in an address you're going to be able to figure out whether like which videos did that specific person like so there's a lot of like weird connections but um this is an advanced tutorial bro all right and uh we're gonna have one more variable which is going to be a uint it's going to be public and we're just gonna call it video count oops and let's just do it that way that's going to be initialized at zero obviously and then we're just going to keep incrementing it now whenever you create a new video you want to have an event that you're going to like Emit and this is some blockchain stuff we haven't really done this um before but basically what this will do is it's like kind of like console logging but onto the blockchain it's like battery so you don't have to like worry about it much you can completely leave it out but it's just like adds that one level of extra did a video so keep it I think anyways video created and we'll have a normal regular stuff like that like a regular circular what is it like a Paran so we're gonna have an ID we're gonna have a string that will be basically caption we're gonna have a URL number of likes dislikes and the owner that's pretty good oh and that crazy thing is going on because I have to like close it like that and that should have saved a leash solved all the issues so that's good I'm gonna have two more events and one of them is video liked and we're gonna have a number a u in it's going to be an ID and we're going to have the lights basically a number of likes passed in here and another event which video is like so like I said I just want to like console like everything it's going to be the same input so there's your like basic setup um and now it's actually a time to go ahead and create a new video so we're gonna have to have a new function in here you know all the like random stuff so function and we'll call it create video all right now we're going to have a couple of things that we'll have to pass in here so we're going to pass in the caption whenever it would call this function and a URL so the URL basically is just like a TickTock link or some sort of like video link that we're going to store on the blockchain and before we even do anything it's like video count plus plus so you want to increment that immediately and videos.video count or I mean like video count yep um so what is videos before we go any further there's your videos all right so the ID that we just incremented we're gonna use that immediately to store our first video and map the first video to that specific counter all right and we're going to create a new video using the structure.v that that we created up here so there's that um let's go ahead and start passing caption URL and we're gonna have zero likes zero dislikes and message sender is going to be the owner and we're going to create a new array of addresses that like doesn't have anything in there oh I forgot a comma there so there's that well that's interesting oh it's because I changed up the order so let's go ahead and swap them around and we should be good to go okay so yeah basically we want to match these items to each of these elements so you want to take these and match these items to these elements that you're passing in so first obvious is caption URL Lexus likes so you want to make sure that the order is specific now once like now once you're done with that and your team uh no events I think that's how we're I'm gonna call All of You Slackers um you can basically skip anything that's uh happening after I type emit um but for those that are like Elite and actually doing events we're going to commit a new event which we want to call which is uh like something we already prepped here so we're gonna pass in the ID which is video count we're going to pass in the caption we're going to pass in url00 and message dot sander so once again you want to map everything to these and I'm like when I say map it's kind of like that mapping but it's like your brain does the mapping so get it right all right now if you haven't heard of it before um or if you haven't watched any of my previous videos I like to use something called the remix IDE extension inside of vs code so this is that guy now go ahead install it there's no setup needed at all once you're done that's the icon that you want to click um takes a little bit of a time to load up but once it's done you want to select the correct corresponding version so if it's 0 8 16 you want to go with that specific version and I'll just hit run and deploy and hit activate on the popup window and once you're there um notice that you're gonna have the output coming up and could not detect not work whatever or you might have something else there now there are two options that you can do right now one is go to your inferior account and select Gurley which is going to be the network we're going to be using to have this tutorial when we deploy the contract now you can pick this and uh get this RPC URL is what it's called paste it here however I don't recommend it because uh Tesla Works a little slower than your local so what you can do instead is go to trufflesweet.com and then select that bad boy download it install it and this is how it's going to look like there you go there's our ganache now what you will not see is this it's obviously not my ganache that's on your machine so completely forget about that but if you hit a quick start bringing in the exact same thing now if you come in here you want to go ahead and copy this RPC server type of thing copy that guy go over and then paste it here if you can see that that's literally the exact same link and once you hit connect it's going to connect so that's cool now I'm going to open up a secondary uh sidebar and then just pull output there because I prefer it showing up there so I can hide that bottom thingy because it's a better use of space in my opinion and notice there's a couple of things that you will be able to do obviously disconnect your account and then there's going to be all these and then there you will have a bunch access to a bunch of these wallets now these wallets are exactly these wallets so what ganache does is it gives you a hundred each and it's like a local lead locally running uh blockchain server type thing on your machine so you don't have to use test nuts which are like kind of slow sometimes but there you go and what you can do is if you have a contract opened it's going to give you the option to compile that so let's do that let's see what that does like you can see it says please wait and compilation compilation finished and there you go now you can now go ahead and deploy this contract let's see what that does and there you go that's what happened there so if you open this it's literally the exact same thing that we just created right so there's like all kinds of stuff like you can hold it video account which will literally like all this will do when you create a variable is under under the hood it creates like a call function to it like what is a call function it's basically if you're familiar with apis it's like a get method function but for the blockchain so there's that you can read data from the blockchain for my beginners out there all right and then there's like this transact thingy um that's like posting post calls and if you're like super beginner it's like adding data to the blockchain but get familiar with transactions and calls and also get familiar with get and post because if you're not gonna get left behind all right so when you call that video count it's going to return zero which is pretty cool because we don't have to give it any kind of value and the uh and the initial value that solidity gives it is zero by itself so that's pretty cool some languages don't know that that's why we use consolidity and then there's like a bunch of things so like we don't even have to worry about this but there is this uh let's just go through like what these mappings are so you see the first mapping it's like the pretty crazy one but initially let's go through the second one so videos what you can do is pass in a uwind which is just a number like a an integer and what I'm going to do is just pass in zero and see what happens and uh literally nothing happens so it like sends me back all the all the basic default stuff it's not valid basically what that means is there's no videos created or no videos added to that specific ID there's no video with the ID of the zero that's what I'm trying to say and then you can do the exact same thing for like likes there you go it like gave you back at zero so it's like not even valid at all oh yeah it's like it gave me back a zero because once again as the the initial value well what happened there and then here you can put in an address so I'm just gonna go ahead copy my addresses paste that guy there and then video ID is going to be zero in this case call that and like see like like there's no data that would exist there so like how would it know if it's a true or false you know what I'm saying see what I'm saying it's like a lot of undefined stuff now with that fiddling but that that's basically how it works and it will eventually we're going to use all this stuff so don't worry about it I'm just gonna like populate it with data all right video create like create video what do we have to do we gotta put in a caption and we're gonna put in a URL now because those are strings I'm just gonna go with like dummy data so I'll put in a caption and I'll put in a totally URL because that's totally everywhere out hit transact and there's some things happening here gas is being used some kind of gaslighting so there's like all kinds of stuff happening here and then random gas lighting and things things of that nature but we don't really know what is really happening in the background unless we are able to call it so let's try to call video account and now as you can see it says one so that's helpful let's see if we got um let's see if we got back the data that we just added and there you go it sent back all the data we wanted all right so it's a weird data structure that you're we're gonna have to get used to it but basically let me just copy it and we'll run through it so I just created temp.json file you don't have to follow but I just wanted to show you what's happening here to basically get the exact same data twice now this is just the basic this is how soluted it does it by itself and then this is this is a data structure that you gave it to it so just something to uh to get used to but honestly it doesn't really matter it's going to be easier to just refer to these uh things and then later in the video you'll realize that we're going to be using this stuff all right now you're literally getting back every single data piece that you just passed in so that's pretty cool let's move on now a few things that we're going to be needing in this contract and I'm not going to go through all the testing uh just I'm gonna do an overall testing session and be very and I'm not even recording okay there oh my God all right so a few other functions that we're going to be needing is first one is going to be this function get number of videos and it's just gonna be like a regular public uh function that returns a number oops like that and all it will do is just say return video account that's it done we're going to be needing this in the on the front end don't worry about it for now uh let's just move on there's gonna be two more functions one of them is going to be like video and I'm just gonna like make it as simple as possible and let's just initialize another one which is going to be you guessed it dislike video all right we're gonna get started with like video but it's gonna be almost the exact same thing in a dislike one so you will have an opportunity to like test out your solidity skills after this one all right like video what are we gonna do um we're gonna create an instance of the specific video uh that we're trying to like so we're gonna need to pass in a uend which is going to be Ivy and if you see all these like underscores in here and up here basically all that means is that we're only using those variables Within These functions and there's no like they have no business out of outside of those functions it's like internal use only easy that's it all right so let's go ahead and create a storage let's go ahead and create a instance of the video that we're trying to like here so we're gonna add a video and then we're gonna grab these specific video from using the ID that we just passed in all right now once we got that we also have to make sure that the light users for that specific video all right select users it's like users who like the post but that would be a way too long variable names comment down below like what would be a better name there but anyways you gotta pass in there's a couple things that we need to pass in remember we're going to pass in an address we're going to pass in the ID and that will return a Boolean all right I'm going to pass in message sender the person who is trying to like that specific video oops and we're going to need to pass in the ID all right so we need to make sure all right so we need to make sure that the person who's trying the video trying to like the video hasn't haven't liked this video before all right and if they have this let's just like gently remind them that you have already liked this video all right that's it um and I keep forgetting the semi column but you shouldn't all right moving on uh likes we're gonna update all these mappings all right so we're gonna update all these mappings all right so we're going to have likes and we're gonna go ahead and update update the value of it so we can you can just go plus plus or if you're if you're not that familiar with that you just go likes on this variety plus one basically take the value of this add one to it and then just like give that value to this specific mapping item thing and then same thing is going to have um underscore video then we just like basically do all the admin admin work around uh the like so we're gonna have to grab the video instance that we just created and push the message sender to the like users array and I'm actually going to say push and push in message that's thunder so that's just going to like again all right and like literally let's just finish all the administrative work around that's like functionality so underscore video which is the video instance you just created um and let's just update the likers array by pushing yeah push we're pushing massive Center in there what does this do again grab the video which is created up here it's like the video that we're trying to like right and then there is this array called the likers uh Lakers haha and then pushing the message center meaning the person who actually liked that video pushed them in there so we can keep track of them and now we gotta update all the mappings so this here that we require it to be false we're gonna make sure that now this is going to be true so we do it with one equal sign and then we just update it to true and instead of column we're going to have a semicolon and now we're going to update the actual array of videos that we created somewhere here and now we're actually going to go ahead and update this mapping by by saying that videos ID in Kohl's video so there's a couple of things happening here once again let's just run through it so we create a local instance like just for this specific function outside of this this guy is not even going to exist so create an instance using the mapping that we originally have what you want to do is work on only one object and then just like update that and then push it right back to its place and then get rid of the old value so that's what we're doing we're going to pick that out and then we're going to do stuff with it all right now we're going to need this to determine whether the person who is trying to like this video has already liked it or not if they did if they haven't let's just get them through which is uh this this stuff and if they have then we'll get like send this error message back and not don't let the process go through now we're going to increase increase the the amount of likes this video has on it so up that a number solve that by one basically and we're going to also store the person who liked the video in an array and then uh also update the mapping for the specific user whether they like the video or not and uh finally whatever modifications with it on that local instance of that video just put it back get rid of the old value and that's pretty much it now for my rich people who commit events we're going to uh amid the video like the event passing the ID and then the amount of likes and that's basically pretty much the like functionality now I want you to go ahead pause this video and try to figure out the dislike functionality by yourself if you're in and if you're for whatever reason you couldn't figure it out it's okay completely because we're here to learn let's go ahead and do that now so just like last time we're gonna have to pass in an ID and then we're gonna go ahead create just like last time actually I'm not even going to type all that you can literally copy this guy and then put this right there that capital V right there new requirement and now in this case we want to check that the person like let's make sure that the person has actually liked the video so instead of false we're going to require that this is true I'm going to update the message and we can be like hey you you like the video first and now once you want to go go ahead and do is decrease the number of likes just like that and then update the mapping to be false and so the person can like it again and then update the modified value and then again for my rich people video dislike passing the ID and passing the number of likes and that is pretty much your contract so and that is pretty much your contract actually there's one more function that we're going to be doing we're going to make which is going to be get vid videos like that and it's going to be a public function which will return a video view returns which will basically return all the videos that we have on stored on the contract so we're going to create a new array we're going to create a new array which will uh which will just populate with all the all the stored videos from the chain so you're just going to like Define the structure of it and all that kind of stuff and you're going to make sure that this is not going to be longer like there cannot be more items in that specific array than video than the number of videos we've already stored on the on the blockchain and so once you're done with that you want to map through you want to literally Loop through all the all the videos that we have uploaded with the regular boring old for Loop and then one by one push them into the array that we just created now you might notice that I'm doing some wizard right here and actually that's some weird stuff going on there but basically what's happening is that the number of videos it the the video IDs are starting by what with one and that's because we are incrementing the video count over here now this guy is starting from zero so like there is a couple of things that we can do here there's a couple of things that we can do here we can make this make this charge at one and then add the equal sign there but it's not like no one really does less than equal to unless I'm just not aware of it so I we just uh opted for going this way and then um obviously the video why these have to match the video ideas have to keep up with this so you gotta add one to it and that way you're gonna be fine now once you're done with that just return that array and you're good to go all right now let's go ahead and actually test this out as it is I'm just gonna add a couple of video a couple of stuff in here and before we test out you want to make sure that everything you had here get rid of it all no need for that I'm going to recompile everything that you have and should be good to go now empty out the output because oh wait clear that because there's no reason for you to see all that stuff deploy that bad boy and you're good to go all right new video caption and then put in a URL totally URL number two transact that all right gas burning is there all right let's get the number of videos there's one video get videos get all of the videos all right there you go there's uh literally every kind of every information that you will you need to do you need to know there's your there's your caption there's your url number of likes dislikes the array of likers which is currently an empty array because nobody likes this video and then the owner which is Me Myself and I all right let's see number of likes one uh you're gonna pass in the ID all right zero perfect video count oh I think we tested that already um and then videos let's get back to data uh ID is going to be one pass it in you got back all the data that's pretty good uh by my standards all right let's go ahead and like that video there you go all right well there's all the gaslighting going on and let's check the number of likes once again so call that and it says one so we're pretty much good to go for this that is your contract let's go ahead and deploy it now all right let's go ahead and deploy this contract that we have right over here so I'm gonna go ahead and open up that thing down there pull my output back there because uh that's something we're going to be using in a little bit and what you want to do is go into your extensions and now install truffle and the good thing about truffle is it's pretty well integrated with ganache and inferior so it's going to be helpful by the way this is the one that you want to download truffle or vs code buy consensus software and they have the check mark so that's cool all right all right this is the thing that you will see this little like truffle looking thingy and you will have two networks over here ganache and infuro and if you don't have them you can literally just click connect not work and then connect it so what you can do once you're done is go into like right click on that Tick Tock dot Soul file and hit build now you can also hide the secondary window or the secondary sidebar and let's just like compile it so build it and there you go everything is up today nothing to compile that's pretty cool and let's go ahead and deploy now wait I'm clicking the wrong phone and if again if you don't have the deploy file it's not going to work so make sure you have it all right now if you right click on tiktok.sol and then hit deploy and you have ganache connected which once again super easy uh let me just show you real quick so I'm just like gonna say uh connect select ganache and then you're gonna put in a port now how you get the port that's your Port right there 75.45 paste that in there and you're good to go uh and that will connect automatically so I'm gonna clear the output and go back here and deploy to ganache first so that's going to be my local and hit that let's see what happens and if you get the contract address and successful deployment and you're basically good to go now what you want to do is go ahead copy this guy close that and then go into your utils file and contract.js now here it was a little fast Euros contract.js all right that's where you want to go once you copy the contract address create a new variable called um I don't know contract contract or dress or something like that and then just pop that in there or actually we can literally just call oops what they're literally just call it a dress no need to go too fancy on it but what that does is uh we're just gonna save it for uh there for now don't worry about it um and then the one more thing you want to make sure is uh go into your artifacts and then there's this Tick Tock that Json file all right that's something called the ABI now this isn't a different format uh but here's the API that we're going to be using so you can either copy that or just copy this entire file and paste it right into your utils folder all right and then what you can do is go ahead and import contract import that as contract API or something like that and we're just gonna tick tock.json and there you have it now you have access to it now with these two things we can create a brand new uh function which will be create contract oops what happened to my keyboard oh create contract and there's no input here there's like little thing to input um now what you want to do is store and restructure the ethereum object from your window from window so what that what's that like that doesn't make sense window if you don't know it that's the like all the code that is running in your browser and then ethereum is the specific code that metamask injects into your browser whenever it's running so uh there you go I'm just going to go ahead and unlock it and there's like all kinds of code going on in the background in metamax metamask injects some into it and that'll make it easy to interact with the contract now if this ethereum um uh ethereum object exists in my window and what I want to do is generate a create a new instance of web3 um by using the web3 JS Library so let's go ahead and import that just like that and that should be good to go for now and then we're going to return a new web free these contract using the contract ABI hey and the address now once once again as I said it earlier you want to go for the ABI itself all right so there's a bunch of random code in here which we're not really going to need so just use that uh and then you can just refer to that and then that basically takes care of all the contract interface or interaction uh type of stuff all right now that we're done with our uh ganache uh up uh our ganache deployment what you want to do is once again hit Deploy on that bad boy but this time I'm going to select girly and leave the leave the gas gas price empty and then here if you haven't worked with uh this extension before you will only have paste mnemonic and generate mnemonic I because I have worked with it I already have this uh thing uh there and that's just that means that I already have a wallet set up with my with my truffle so what you can do if you don't have it is go into your meta mask and then click that three thing no actually click that guy click settings I don't even know where to go hit uh privacy security whatever and then secret recovery phrase and then just pop in your password now do not share this with anybody and just like keep it separate from where your money is at like just just think basically all right like whenever someone has access to your secret recovery uh phrase that basically means they have full control over your wallet so and then like if you think that oh your wallet might be at risk just generate a new one put your funds somewhere safe just like use your brain all right but in this video and I want to like emphasize this we at cover program will never ask for your private key or any kind of private stuff we don't even ask for your public Keys all right we don't ask for anything so if anybody in the comments pretends to be us it's not us be smart save your money all right so there you have it uh grab that and once you paste it there it's gonna be something oops Yeah paste and then you paste something in there and then this window will pop up now you can save it somewhere and then uh this extension will remember it just like it remembers for me so I'm just gonna pop curly there and again and then you can just use it like that so there you go now it's going to take a little extra time because once again it's a test nut it takes longer so I'm just gonna fast forward there and then show you what the result is um by the way if you're a deployment is uh stuck um there's going to be that little thing going down there uh what you want to make sure is that you have your notifications on but mines are off because I like to focus just click that install button and then you're gonna be basically good to go and this is going to take a little extra time and there are like all kinds of random things going on here so I'm just going to remove that um and then it failed for whatever reason let's check it out now let's go ahead try again I don't really understand what's happening oh I think it just timed out because it oh wait all right so if that issue happens to you you might want to go ahead and create a separate folder for your next app so you can just create a folder it's called maxed app put your pages uh and then like leave everything contract related out here so you're going to need your contacts your components uh not build the next folder Pages public Styles and your your next config package Json and I think those are the only ones oh yes Lind and the dot EnV file so once you have all these go ahead grab them and then just throw them in there in the next step folder so that should pretty that's your Technique to take care of a lot of things so go into your terminal then we're gonna reset that and then you're gonna have to CB into your next app folder and then just run the yarn in there let's see if that uh figures itself out and in the meantime um so there the reason we're doing that is there's some uh peer dependency issues there so that's that's fine we'll figure it out um now you also want to make sure you update your git ignore and remove all these folder things um because otherwise like otherwise it will only look in this very specific folder however I need it to look in all other folders and now you can see your like uh get thing is only recognizing 55 changes not 200 5 000 whatever so we'll not need that and let's try deploying this guy again girly um open that bad boy install it npmi and then that should technically generate a new uh package Json file soon I think it did it already I just don't see where it's at oh there you go there it is and that should be the only file that is out there uh where that should be the only dependency that the outer project has this is once again this is like these are like things that will come with experience don't worry about it if you can figure it out by yourself like there's nothing shameful about it all right so once you've done all of that um there's still going to be a couple of Errors if uh if you're like me however it might have solved it so there's a few things just to wrap it up again what you wanna what you need to do so create a next Dash app folder and you will need to pass in all these files uh and then just remove any like everything like all of these stuff have to come in here in your git ignore this December step number one step number two in the get ignore file all these uh files will have a slash in front of them just like this one and I forgot about it remove all the slashes literally you can come in uh to command F click that uh thing and then just print uh put a slash in there and then put nothing there I'm just like one by one remove all the slashes start removed it from the comments but it doesn't any matter there so you don't want to see any kind of slashes in here because that will like that will only that will make this follow and look for those folders in here and not one or two levels deeper once that's done remove all the node modules so remove your node modules from there remove your node modules from out here and that should put you in a pretty good place now these are the only files that you should be seeing in fact you shouldn't even be seeing this this is just one of my functions so I'm just going to remove it you're not going to have that file so these are the files that you should see here everything else that is basically has anything to do with your frontend application has to be put in here all right so this is something that all right now you're going to learn and actually I'm pretty glad we made this mistake this is a mistake on RN uh however if you happen to ever do this now you're going to be prepared for that so everything bad has something good in it look at the positive end of stuff all right so now you just learned that scale and then once you're done and remove everything open up your terminal and subterminal stop everything and then you will have to run reset a couple times uh I'm just gonna restart both of my terminals here and then one folder what you want to do is CD and turn next app folder and then just throw in the yarn and let it do its thing that will ensure that your next app is ready to go and then we'll restart it in just a second and this other one is only going to be used for for uh like installing stuff all right just type in your nub once that's done and then your next stop should be pretty much good to go all right they're like stuff that that are not working perfectly so let's see oh apparently okay so I forgot my utils folder to put that there too that's gonna be that's gonna need to be there all right there you go now it's working there we go we're good there all right so that should be good and now what you're going to do is now you will be able to deploy the contract all right it might still give an error but there should be no other kind of error the reason that other error was happening is because deployment need this deployment contract deployment needs a specific version of react but uh or like a specific dependency however the next app requires a different version of that and that conflicts and then it just like throws all kinds of Errors so figure it out good to go all right now it failed again so that's and that's because we just like didn't install anything there so let's run yarn there and when it comes to like blockchain sometimes yarn doesn't seem to work sometimes uh npm doesn't work so what I like to do is just run both of them and then usually that saves me a lot of headache so once my yarn finished running I'm just gonna go ahead and run uh yeah I'm installed as well just for good measure totally no need to do that but I'll just do it anyways and then let's see what do we got now reset that terminal that one is running so that's good hid my contracts Tick Tock Soul deploy that bad boy and then just select girly all right now it's waiting and now it's throwing me a different error so it says use error user project is inactive all right that's fine that that error I'm pretty familiar with and that's fine so in your truffle what you want to do is check if you're if you're a service is connected to the right project all right obviously like if the project is not existing in my account out here in front of infuro it's obviously not going to work so you got your um Tick Tock right but it says eBay there that's fine I can just right click on that guy all right so that guy and then disconnected cool now you might be using the Truffle extension for the very first time and in that case when you connect to the inferior service it will pop open a little window here that will just force you to sign in all right once you sign in that guy will come up and then you can pick it up where I'm at so once you signed in Easy just pops up in your browser hit authorize and you're good to go then you can just select the project you want to connect to okay and we should be good to go pretty much now all right let's go back and for the fifth time at this point select girly inferior Tick Tock clone girly zero glass us price and create that guy or use that guy there's another uh user project is an epic okay well if that happens let's go into our truffle config so here you can just clearly like take this entire networks thing and just get rid of the entire thing like you don't need any of that it will be regenerated so let's go that's fine all right hit deploy again girly no gas Burns paste that let's see if it like go through this done so far so good because it takes longer times and it's like deploying and raw all right let's see like the other ones were like way faster at throwing the air and there you go I think this is this is already good to go it's like there's a bunch of steps and there's a bunch of places where it can go wrong this was a good debugging session where you will be able to uh face a ton of errors that uh all of us face on a daily basis and if you miss like one step this is where you can come back to figure out all the errors that you might have made somewhere so there it is and then when you see all these blocks like that's when actually it's like verifying that it is being deployed and the transaction hash that you see here uh those are that's being verified on these blocks so let's wait for it and whenever you see our contract address that's when you know you're good and it also says like deploy succeeded and it also says deploy succeeded so that's pretty much it now you want to go ahead copy this number too or like this address as well and then go back to your utils so now inside of next up and then hit the contract file and then after here you can go ahead and put in the I don't know just like say something like okay this is ganache and then export cons to contrast again and then say girly and then just like comment on this entire line and whenever we are ready you can literally just change it to this specific address and then this will be available for anybody out there you can share it with your friends family whatever um and they will be able to use your app it's that sad that was a pretty rough deployment but we made it um and if you made it this far and you have that same error I usually just get rid of that yes then Fallen usually goes away in a little bit but if you made it as far you're a champ let's keep on going all right now with the deployment done let's go ahead and start connecting our wallets to this bad boy so there's a few things that we're gonna need to do so go into your app.js file and in here we're gonna import a couple of things we already have our contacts set up so don't have to worry about that that's pretty cool thanks Kevin shout out all right so we're going to import the CSS file of rainbowkid all right so Rainbow Kids that's CSS and then we're gonna import a couple few couple more things so there's chain ular there's configure chains and then there is create client and then there is uh wag me config and all this comes from wagme now I don't know what's good there ain't got imported a couple of times oh there you go all right now that should that should look way better all right now we're gonna go ahead and import a couple more things because we're not done yet we're gonna get default default wallets and Rainbow kit provider and you also need Dark theme because we want to make it look cool and all this is coming from that rainbow okay where rainbow me slash rainbow okay whatever you can read and then two more things you got ah we got we got anything for your provider uh we're gonna need the providers so we're gonna need infuria support provider from wag me slash providers slash in fura like that and then I'm just going to duplicate that line and change that to Json RPC like that and I'm gonna import Json RPC Provider from there pretty good and just like in a couple previous videos that you might have seen or I haven't if not what are you doing this like put it on your watch later watch after this one all right const you want to destructure chains and provider from whoops um configure chains like that and then we're gonna have two arrays in here all right so the first one is going to be the chain so we're going to have chained the girly and now we're gonna have James not Json chain Dot localhost perfect our chains are ready to go and then next up we're gonna create the providers so we're gonna have two we're gonna have the inferior provider which will need the API key all right so let's put that guy there and then we're gonna say process the environment Dot let's go to the dnv file all right so that's the that's the key that we'll need put that there and that will basically work important and then you also want to uh up the priority so the priority is going to be one meaning any kind of change that change that we're gonna uh connect to with this app um first we're gonna look for it on inferior if inferior doesn't have to if your uh happens do not support that specific chain and we're gonna need to uh add the Json RPC provider so Json RPC provider like that open paren open that squiggly new line set the priority number two meaning it's going to be coming after the intro one and then just put in the RPC link chain and then in the shade a function which will return this HTTP object which is going to be uh once again seven five four to five this is coming from ganache so where's my garage there it is once again this is your link with the bear and you should be good to go actually what I want to do is just copy this whole entire thing just in case there's some weird stuff that should be I should be coming back to no hold but like weird things happen sometimes let's just make sure that everything is identical all right let's go ahead and create some connectors here the default wallets and I'm passing a few things you're gonna pass in app name is going to be what is this Tick Tock just like that perfect and then you want to pass some chains nice you got the connectors there and then last but not least you want to create a wag me config so let me config equals um create client foreign auto connect it's going to be true and you want to make you want to pass in connectors and you want to pass in provider and now it should be good to go all right now we want to wrap this around our application so we're going to need the wag me config and then you wanna pass in the variable that you just created as your client hey there you go all right close that bad boy wrap it around bam air is gone cool all right now you're gonna need rain bokeh provider theme dark theme but make it a function enable cool mode because that's pretty cool and then uh rule some on a passing chains uh and it should be that guy so yeah once you put that there you're good all right close that and after that provider that should be ready to go too all right that should be pretty much enabled you to do it all right there's some hydration error going on let's refresh let's see if it's still there no it's not that's pretty good all right now we're gonna add the connect button and the um conditional rendering all right so for that you want to go into our index.js file and then we're going to import a couple of things here so first of all we're going to need um use count all right from lag me because wag me is cool and they take care of all the account related stuff and the all the wallet connection related stuff all right so you want to have a use effect I don't know if you imported that or not yup we haven't um see we're gonna need that soon and then one of our address changes and by the way what a subtracts you get out you want to go ahead and destruct your address from a use account first like that so whatever that changes you want to update a state which we have to I don't know Define here it's a user account and you will have some user account like that which will be a used State bam like that and I like to put that stuff up there nice so one whenever the uh connected wallet changes you will basically update the use date so just like that and then I'm gonna go grab this guy this actually should be user account wow whenever uh that that guy is actually true meaning that there is a value you want to render out this whole thing let's see what we've got there okay so that's interesting that's probably because I still have it connected to my wallet is still connected so let's see if I disconnect this and then this all right there you go so now it seems like it's a completely empty thing that's that's fine that's fine so now what we're gonna do is go ahead and import a connect button so it's gonna be connect button from Rainbow me slash rainbow kick and then grab that guy and that guy will basically take care of our entire wallet popup and things like that so thank you rainbow kit let's see what we got bam connect bam cool mode um let's go with the second one next connect bam okay it says wrong Network that's fine no issues actually it's not the wrong Network it might be oh so there's some sort of issues uh there's some sort of issue with the chains right now let's figure what's uh what's happening there okay so I think I figured out what the issue is if you go back into your app.js file um we gotta put in these chains all right and yeah plural and singular sometimes gets messed up so you want to just make sure that these are the chains that you're passing in there that should yeah there you go they literally just fixed it in real time you don't even have to worry about it and now it gives you this nice little connect disconnect and then Network switcher thing so that said while the connection is ready let's go ahead and connect the functionality to this app and we should be good to go let's go ahead and get started connecting all the features so our boy Kevin kevs has already set up our contacts so that's pretty good now we don't have to worry about that so go into your contact spot that's where we're going to be work I thought it was just opening up and close it straight away that was done all right let's go into context and here's gonna be a few things that we're gonna be setting up uh straight away so we're gonna have to import a couple things uh just like we did it on the index file we're gonna need the use account from wag me and we're gonna need to import hello I'm gonna need to import create contract okay create contract it would help if I could like type without typos apparently all right next up we're going to create a couple of these dates in here and so we're gonna need a user account and a set user account use stage which will start off as empty or like empty strings then you're going to need a contract instance basically and that that's what we're going to be using to interact with the uh smart contract itself and then we're going to store the video data somewhere so we're going to have videos uh and set videos and that's going to start off as a empty array and so with that said let's go ahead and destructure address from our user account and let's fix the typo again and we're gonna get started with and we're gonna go we're just gonna like jump straight into it so we're gonna need a use effect all right so we're just gonna initialize everything so whenever the address changes and if you don't know what use effect is it's basically just a piece of code that runs once when you fire out the application and if you pass in any kind of variables here it's just going to keep on running whenever that thing changes and that's what we want to do because if you change the wallet that's being that's connected to your app you want everything to refresh all right because like imagine you log in with your wallet and the next user comes in logs in with their wallet but they start spending your money all right pretty easy to understand why it's important all right now you obviously want to go ahead and update the contract instance as well and we don't need to pass in that it actually doesn't really change but just in case there is some sort of there is a network change or something like that the wallet address might change and that's the easiest way to like kick things off all right and there's going to be a couple of functions that we're going to implement here so first of all I'm just going to like lay out everything and then we're gonna go one by one all right we're going to start with create video and it's going to be an async function with a caption and a URL input leave it right there next up we're gonna have a call get all videos which will uh again be a basic function with no inputs and then just close it right there and then um I mean that's something we want to definitely run every single time with the application starts or the contract is being updated so whenever the contract is updated we want to run this get all videos function like that and then there's going to be a couple more so obviously you want to go ahead and like a video so there's gonna be another racing function and by the way everybody everything is going to be async in here and if you like a video if you also want to dislike a video like that and then you want to know whether a video is like or not and you also want to be able to get the number of likes on a specific video just like that and actually I kind of want to put these at like right after all all this get function and so this will create a video this will get get all the videos this will get for one specific video like this is a Creator function these are like uh this is get everything function this is get one specific videos stuff and then this is interacting with one specific uh or these are interacting with one specific video so I just like to like kind of like group these based on these uh parameters you can switch them around like have whatever order in there it doesn't really matter it's just for my personal taste and I prefer them like that now you want to export a couple of things so you definitely want to in sport create video because you will use it in other components and then you want to explore it like the video because you want to use it in other components that you want to export dislike video because you want to use it in other components and then you want to export videos as in the state because you want to use it in other components there's light it's again because you want to use it in other components a and then get number of likes because you guessed it when I use it another components nice uh there is some sort of error going on there maybe that's because I should be exporting videos instead of video well that would be helpful if I try to export something that actually does it does exist all right let's hook all of these up with all of their uh respective let's hook all these functions up to all the components somewhere else in the app and then we're just gonna like go through them fill them out and we're done so once again what's happening is we are connecting all the functions before we even type them out because it's just all kinds of like random setup stuff it doesn't like it breaks the flow so I just want to like get them over with real fast and then we just like get to the meaty stuff fast all right so export your create uh import your create video destructure it and then uh and then down here in your handles instead of normal like regular way of doing things we're going to toast dot promise I'm going to say toast dot promptness which what I will do it will give us a nice little animation that will wait for the function to resolve itself and if it resolves you're going to get a jack Mark and if it doesn't then you're gonna get an X and so it's like super Visual and it also like a uh it's also really good for the user experience it's a little weird when it comes to the code itself because it has this react hot toast um library that we're going to need to use but that's the tradeoff for it some nice little animations all right so you're gonna uh pass the create video function in here where you're gonna pass in uh the caption and the video URL which are by the way um all these states that we already set up here so that's completely ready and waiting for you and then there's a few things that you can pop in here these are basically all the messages that uh the toast message will give you so if it's still being it's loading and it's gonna say uploading video this can take a moment with a little nice animation once it's succeeded that's what it's gonna say and there is an error message just so we handled that too so you're gonna know if something went wrong there are these two lines commented out so we're just going to comment them back in and that function should technically be pretty good to go let's go back to our context and just console log those things out whenever this function runs just like that and that should be that should be it let's see what have we got let's see if it's working if we need to do anything so press that type in caption and then URL and then just hit create new there you go it's ready to go and you also saw there's there's the toast message so that's pretty good all right let's move on with our next one all right so let's go into our sideboard.js file and this is actually just this there's like a lot of things going on there so there you go let's go ahead and figure out what is happening here so there's a few things that we're going to be destructuring here like hang on there so we're gonna need light video we're gonna need dislike video we're gonna need um get number of videos right and what you need is light up like that got this so let's just double check yeah that circuits okay so there's no typos there so that's pretty good now now we're gonna be updating a few things here whoa my copilot is going hard so we're gonna need a use effect in here and I believe we have that imported and then if not it's going to be an epic fail hmm all right we're gonna need to just create a function in here because that's one thing that um use effect doesn't really let us do so if you want to do wait check if liked if you're going to do any kind of async stuff in uh inside of this effect you will need an internal function for that so that's exactly what we're making and then like straight away right after that just call it and then you should be good to go or you can also create a something called a selfexecuting function or selfinvoking function not entirely sure um of the name I like I love them a lot I usually use them not this time though but it's whatever all right so here we're going to create a comp light variable which is literally just gonna in both feet is light function and pass in ID now after that we're gonna also create a likes variable which is going to await for the get number of likes function to return a value and then we're just going to update all the states that we have here so set number of likes that's pretty easy and then right above that select light so all of these we will be writing them in just a second these will return uh I already have that I don't know how did I have it anyways these functions will return like obviously set light will return a Boolean and get number of or Set uh or is like this going to return a Boolean and get number of likes is going to return a number it's uh number itself but we're gonna need that we're going to need that to update all the stuff that we have here and there's a use effect issue that we have that's completely fine because we can just copy that and there was probably a typo there you go that will update update the value there so let's see uh if we go into context and we just say that it should return uh could turn false but I wanna I wanted to ah return true like that and then get a number of likes is going to return some weird number like put something there some very weird Let It Go like it's it's working perfectly now which is like after actually populate like real data to it and there you go now it's light and if you want to change it to false it's going to be false and there you go you can also update that number yeah 55.55 there you go it's working perfectly now we're just gonna get all the functionality behind it that is actually going to make this app work and then there's one more file where we're going to be needing uh functions from the context is it's going to be the main view.js now here uh as you can see there's this dummy uh Tick Tock I'm just going to remove it we don't we don't need that now what we do need though is oh we actually have the destructuring ready for us uh we need the videos and here we're just going to have another use effect empty this out and put that out and we only we need to fire this up every single time whenever a video is change so we want to update the the tick tocks use of uh the tick tocks use tape so we're just going to come in here and then set Tech talks and then videos so what this does is from here we'll populate all the video data into this uh use State and then inside of main view we're going to use that and we're going to use that to populate this data right now because there's like no videos in there it's just going to say no video that's completely fine we're going to get to it in a minute and then uh and then it's going to have our videos all right with that said let's uh we're pretty much we're good to go on hooking up all the all the functionality to all the other uh components now it's actually just time to write all these functions and we're going to be done with this project in no time all right now that we're able to get videos or like with that error but I'm gonna fix that in a little bit um that's cool hat and actually implement the create videos function and by the way this is going to be like almost scary easy now one more thing that we're gonna make sure here is that well one more thing you want to make sure here is that you're checking for the uh address as well so if there's no user logged in this function doesn't run and it's not supposed to run all right so this guy what what this is going to do is we're just gonna wait uh and we're going to grab the contract and then once again methods so that's what I was saying look out for all the patterns that you can recognize and just like memorize them all right all right let's see what do we got in the contract itself we have create video okay so let's put that guy there and then we're gonna pass in a bunch of things but this is what I was talking about in the previous section that you know normally you would you would just hit the transact button uh but in this case we're actually going to be saying send and what that will like make our like what that will do is pop open your metamask and then um do some do the kind of transactions that you saw on other websites you want to make sure the sender of the money is going to be the address meaning the person that is actually locked in all right and that's what we're uh searching for it now I just want to like put that there instead and we can also put that guy there as well so if the state is not updated the app is not going to load so that's perfect if if we're checking for that all right so from so from user account so the person who is logged in is going to be paying for this transaction basically all they got to pay for is the gas fees which is not that crazy high especially now that uh there was this East merch all right I'm going to specify the gas and in this case we're just gonna go with one million and remember this is in ways so this is like not beef all right so like chill out and then you want to set the gas price to be null so basically what this is is you're setting the max gas to be spent is going to be one million way which is like fraction of an ethereum and then you also want to set the gas price less than like the minimum or like whatever money to be like burnt or like whatever it used to be burned is gonna be no and that should technically be pretty much good to go now one more thing you want to add is you want to pass in the caption and you want to pass in the URL that you are getting from this function all right so let's see how that works so now that we got this guy let's open that and then this is my first video and I got this video URL on my clipboard so I'm just going to put that and I hit create new let's see what that does hit confirm says video uploaded all right let's see what we got um so it still says the get videos is not a function that's a little interesting to me let's double check the log here so as blocks into this block seem to be working so that's pretty good and the contract address that we interacted with is the B9 so that should be good too and I think I oh and I mean obviously I was talking about how like pattern recognition but I'm not recognizing the pattern itself either so like when you got contract there's a lot of things you can do with it so when you want to call a method inside of a contract you want to like specify that it's like expecting someone to listen to you when you're not even calling them right oh boy and again as usual um methods all right don't make these silly mistakes that I do like I literally had a mistake in these zigzag exact same row twice all right don't don't mess it up like same line two it's the same errors J's all right let's update let's see what's happening here all right cannot read properties of undefined address all right let's see that's uh there's gonna be a few different wait what's happening there all right let's restart this guy all right refresh well that guy never had an issue or just that's pretty good all right there you go that's your uh First Tech talk I don't know why it's not showing up though so that's interesting let's figure that part out so we've got the URL oh that should technically work all right so as you can see there is my uh link however to go ahead and copy that that's just innovate that's not gonna work all right let's go ahead and create a new Ted Talk post so I'm just gonna go ahead and grab a new link all right so finally I got a correct link let's just put this guy in here and let's this is my first video okay actually works let's see how that goes all right create new yup coming from that guy and there you go video uploaded all right let's refresh and if I scroll down there you go there is your first tech talk that you just uploaded this uh yeah this will be this will need to be redeployed this for a tutorial yeah I put an image here that's fine that's fine anyways now it's time to go ahead and actually like this video pretty good one you should watch it the clever programmer on tick tock all right that being said let's go ahead and let's move on to the other function so there's a few more as is like and there's get number of likes let's actually get those done first those are gonna be the easiest ones all right so get number of likes we got all the uh guard Clauses and everything set up so we're just gonna wait and we're gonna say contract dot methods fine enough didn't mess it up let's go to our solidity file and then get number contract up methods okay so we're gonna say oh wait contract dot methods and we're gonna have a little bit of a Twist here so I think that yeah whatever uh copilot thinks that's that's fine that's fine so let's go into our solidity file so if you think about it we haven't really created any kind of good number of likes function in here so instead we are going to use this mapping so let's see how we can call this activate that um that guy there and then just close the output we're not going to need it just open this and then uh here you see if you passing the the ID of the video all right if you're passing the ID of the video that's where uh that's how you're gonna get that number of likes back all right so that's the one we're gonna call so we're gonna say we're gonna say wherever we're at oh yeah here likes and we're gonna press an ID which we get from the front we're gonna go ahead and call that and let's just cancel log before we do anything and so for that it is helpful if we put it in a variable so it's going to be likes of course likes equals that and we'll just passing lights there and let's see what we got there you go there's four zeros that means like okay it was console locked twice but that's completely fine now we're just gonna like pass it to pass it back to the uh to the front actually it's kind of cool that I have this black thing here because it's like way easier to see it than here that's actually that was actually a power move yes all right well what we're gonna do now is is actually just go ahead and say return likes remove the console lock because we don't need that and let's see there you go it says zero now I could like it but I mean it doesn't go through yet and it's just like random stuff happening don't worry about it all right obviously we haven't even defined this so uh next up we're gonna look for is light and so once again we're going to be using the solidity file here and we're gonna go for the liked users and we're gonna go for this like complicated mapping so let's just go ahead and grab like users and then uh wait where is his light here is his light all right there you go so let's go ahead and type in a weight contract dot methods and then pass in that guy and then if you remember it needs two inputs so one of them is going to be the user address because we are interested in whether the user is currently using that has liked this video or not and we're going to pass in the ID which we are getting from the front end and then just call that and then once again you want to save it user liked in a separate variable and then just return it and let's see how that works out okay so it says user address is not defined that's interesting because I clearly remember defining it oh it's a user account that would be helpful if uh everything was the same all right let's see and there you go now that part works okay so there's literally the only thing that's left is liking and disliking a video so let's go ahead and implant those right now both of them are going to be almost the exact same so I'm just going to type it out once and then copy paste and we're good to go so what we're gonna do here is we're gonna call another function from the contract so we got methods and then how do we even call this so come back here let's see it was like video and it needed the ID all right so paste that and then we're going to pass in the ID that we got from the front end nice and then uh we're gonna need to pass in a few things but that's literally the same thing that we are passing in when we're creating it so I'm just gonna once again for Leicester just copy it and then see how that works out now the same thing can be said about this like video the only thing is you're gonna change the method that we're using and that's going to be this live video Let's place that there and I'm just gonna refresh so everything is good to go and hit that okay my metamaskas popping up there's nothing no fees to pay no fees to pay and if I refresh my video was like then there is one more line there is one like so that my friends is literally the entire build now you can go ahead and go customize this build show it to your friends family whatever but this is pretty much this build and this is a wrap I think this is a pretty good weight this was a pretty good video to understand a bunch of errors that you could be making while you are working on these projects and I hope you get some value out of it and if you did let me know Down Below in the comments that's it see you next time peace