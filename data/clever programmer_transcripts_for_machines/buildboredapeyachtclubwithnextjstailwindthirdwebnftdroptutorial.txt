board a fiat club clone that is what you're going to be building in this video you're going to learn how to drop your own nfts using the third web sdk i hope you're excited we'll build a front end to interact with a smart contract using nexjs you're gonna style it with tailwind css you'll also learn how to white list wallet addresses using third web sdk this is a very popular feature that a lot of drops that we know about use and this way they can actually white list which addresses are allowed to actually meant you'll also learn how to separate claim phases using third web and finally we'll show you how you can set up delayed reveal for your nft collection this is a very highly requested feature which is how do you actually delay the reveal of a certain nft drop or nft collection this is something that we see a lot of big nft drops do for example like the nike one we saw you initially get this vial and then when it reveals itself boom you actually see the actual nft so there you have it if you want to actually learn how to build this make sure you smash that like button and as a gift here is a picture of a cute baby panda there you go so thanks for doing that this is the channel where you will become the best web3 developer in the world i'm your host rafikaze and i will be sending you off to sarah who will be your instructor for the remainder of this tutorial she's phenomenal she has her own youtube channel that will pop up right over here and you should definitely follow her but for the rest of this video she'll be your instructor and i hope you're excited sarah take it away hey everyone sarah here welcome to the tutorial we're going to be building this project right here an nft drop like board ape yacht club we can connect our wallet to log in join the allow list to gain access to mint and then actually be able to mint our nfts right from the site so let's go ahead and get into it we're going to be using third web for this which is a powerful developer tool for web3 developers so we'll go ahead and start building and we'll connect our wallet and we're going to choose releasing a drop and we do have our wallet connected here with the rinkeby test network so we're going to choose release a drop and then we'll choose nft drop right here so like we were saying we are connected with the rinkeby test network so make sure that your metamask wallet in the drop down the networks drop down that you have rinkaby selected that's going to allow us to not have to pay ethereum main net gas fees for this tutorial so if you need some rinkaby test ether you can head over to faucets.chain.link slash rinkaby and paste in your wallet address and actually you can go ahead and uncheck the test link here because you just need the test eth and you'll be able to request that and get some sent directly to your wallet so here in our contract on third web we're going to go ahead and choose a name for our collection so let's just say basic tutorial drop and we're gonna pick a symbol here you can pick any symbol you want i'm just gonna say btd and we'll just put in a little description here we'll just say my basey clone nft drop project cool and then we'll go ahead and upload a photo uh as the cover picture for this collection so i have a little board ape logo um saved here so we'll just use that for now down here we're going to configure any payout settings that we want to have for our nft drop so we're going to put our addresses here in the recipient inputs because we're going to get paid whenever our nfts sell and this uh percentage option down here is for royalties from secondary sales you can put however much you want to receive in there and it will go to your wallet every time someone repurchases your nft in a secondary market so we'll go ahead and confirm the transaction to save these settings and we'll wait for a minute for this all right and now we've successfully got the contract here so now we're going to need to create a claim phase in order for people to actually be able to claim these nfts so we'll go ahead and set a claim phase so we'll go ahead and add an initial claim phase you can choose when you want the date and time when you want the phase to start how many nfts are going to drop in each phase you can add as many different phases as you want we'll leave this stuff as it is since we're using rinkeby we'll leave ethereum for the network um and for now we're going to leave any wallet can claim nfts we're going to add our own checks for this later so we'll go ahead and leave all of this stuff for now and we are ready to save this claim phase all right and we'll go ahead and confirm the transaction and now we wait all right success we have saved this claim phase configuration so we're going to go ahead and batch upload our actual nfts now so for this you're going to have to have files that contains either a cvs or json file with the metadata and you're going to have to have the images named in sequential numbering for the file name so we do have a json file here with some metadata for our nfts different attributes and names and all that stuff that's set up right here so we will just go ahead and upload the folder containing that json file and our png images of our different nft artwork and here we are so we can see here our import was successful we've got all of our metadata and we've got our images for our five nfts that we want to put in this collection you could do this with a much larger set however large you want but we're just going to do this for an example today so we'll click next we have a couple options here if we want to reveal the artwork uh on a delay or upon mint for now we're just going to go ahead and select the first option and we will upload these nfts all right and then once again we're going to go ahead and confirm the transaction here all right so that was successful now if we go over to the overview for our contract we can see we have a total supply of five none of them are claimed yet and we can see all of the content that we just uploaded is present right here and if you want to check out some more info on this you can look at the third web docs on their nft drop contract all right let's head over and get into some code so i'm going to pull up a terminal here and just go into my projects folder and then i'm going to run the command npx create next app and this is going to somewhere it's like create react app this script is going to generate a readymade next js project so i'm just going to name this like nft maybe like bassy nft drop tutorial and maybe if i spelled it right that would also be nice all right we'll let that run okay when that finishes um we're gonna go ahead and cd into the project and then we're going to install a couple packages that we're definitely going to need for this build so we're going to install third web dev sdk ethers and air table as well as tailwind css so that's probably going to take a second so i will see you in one moment oh and we're actually going to realize that i misspelled air table again so if we fix that and run this command um now i'll actually see you in a second okay now that that's done i'm going to go ahead and just say code space dot and that's going to open up a vs code window for us with this project so i'll just move these around a little bit so we can see everything a little bit better we can see it's generated our project files here for us and there actually are a couple of other packages that we're going to need to install really quick for the tailwind configuration so we'll just do npmi post css auto prefix and then we will run the tailwind init command and we will see that that has generated a couple of tailwind configuration files for us over here in our project so in the tailwind config file we'll go ahead and just paste in the file path that we need there in the content array in the config and save that so now we're ready to go with tailwind and we can go ahead and add these tags to the global css file so now we can use tailwind throughout our app which is going to make styling so much easier so let's move this stuff again so we can see it a little bit better and in fact i'm going to go ahead and just open up a terminal here in vs code so we can just see that on one side of the screen so now we'll just run npm run dev to go ahead and run this project so we'll wait for that for a second and then we can go ahead and open up a browser window here and we'll just go to localhost there we are and we can see we have a working next.js project uh here in our browser ready to build so let's check out some of these files we'll head over to index.js this is kind of the main page that we're seeing displayed here and we're going to go ahead and make some changes in this file to start with so let's create a variable to store our edemast address because the first thing we're going to need to do is be able to log in with our metamask wallet like we saw in the demo so we're actually going to need to go ahead also and install another uh package to be able to do this so we'll just install that really quick okay and then we will import this use address from the package that we just installed third web dev react and we're also going to implement connect with metamask from this package use metamask and just go ahead and add that up here to the import all right and then we're also going to use this connect as well disconnect equals and then we'll need to import this also from third web dev use disconnect all right now if we come down to our main component area here we're going to go ahead and wrap all of this in jsx fragments so we'll just do like that and move this one down so that we can go ahead and conditionally render this content here so we want to say if there's an address connected then you'll be able to see this main page content if not then you're gonna see our little login button here which we're going to create in the second part of this block else button and we'll just say login all right cool so we're going to notice that we get an error when we save these files because we have not wrapped our app in a third web provider so we need to come over here to our app.js file and open this up and here we are going to wrap the main component in the third web provider so up here at the top we're going to start by importing the chain id as well as the third web provider and that's going to come from our third web dev package as well and then inside this function here let's just convert that real quick there we go we're going to wrap the component in the third web provider and we're going to pass it our desired chain id which in this case we are using the rink b network as we recall so it's dot rinkaby there we go and then we're going to also pass in the chain rpc which is required for our chosen network so we'll chain our pc equals and then we're going to say chain id dot rinkeby again okay b and then we're going to give this the string of the infura url which you will need to sign up for infuria and get an api key for this if you do not have one already and make sure that that is with the rinkeby network url now when we save this all right and we get an error use disconnect is not defined ah okay come over to our index file here and i misspelled disconnect so that's definitely not going to help all right so now we can see we are seeing the login uh option rendered here because we have not connected our wallet yet now right now this is looking pretty ugly so we're going to come over here to the styles we'll delete the default one and the places where that's imported and we're going to just see if we can make this look a little bit better so we'll paste in some other styling that we have already premade and ready to go here and then we're going to go ahead and create a components folder and create a new component called login and this is just going to help to make the styling a little bit cleaner and make the code easier to read so we're going to break this out into its own component and use tailwind to give it a class name wrapped in a styles object that we can access inside the component and it's going to pass on click login function as props all right so coming back over to our index.js file now we're going to go ahead and use that component right here and we're going to import that up at the top all right let's take a look at this well first let's also add in our login on click prop here and we're going to call connect with metamask when the button is clicked in the component so let's save this and there we go already looking a little bit better at this point and actually let's just go ahead and go over here in index and let's just get rid of all this uh default boilerplate stuff that's in here so we can see this a little bit easier so we'll just delete that and we'll put home page in here so we can just kind of have better view of this all right so let's come back over here i'll move this so it's easier to see and here we go all right so if we click connect with metamask we'll see our metamask wallet pops up and we can go ahead and connect our wallet and once it's connected we are taken to the home page view so we can see that that's working the conditional rendering works but it still looks pretty ugly so i have a few uh styling things that i'm just gonna paste in here really quick to use google fonts throughout the app and start making this look a little better um and then some other tailwind fonts that i'm going to put in a styling object here in index and start laying out a little bit of kind of the the overall look of the different sections that we're going to have for this app so we can start getting some things in place here okay so we're going to have some claim faces we're going to display our nfts and let's go ahead and make a header really quick so we can start building in some of the actual functionality that we need so i'm going to use a logo which i have again a nice board ape yacht club logo that i'm just gonna put here um in this image that i'm gonna be using from the next js builtin ui components some different menu options for the header all right so this is starting to look a little bit better a little bit more on theme we've got some header options we've got the logo we know that we're going to have some different components in here so let's start building those out i'm going to go ahead and just comment this claim phases component or claim phases div out for now and we're going to break out a hero component here real quick because i do have a description and some stuff about the project to paste in here we'll just import that again looking much better all right so now we're going to create i'm going to grab another terminal here and we're just going to import another npm package that we're going to use for some ui stuff the headless ui react package and this is going to give us some handy little items that we can use for the drop down menu here in the header so we're gonna import menu and transition from this package and then we're going to go ahead and add some more styling and we will put these menu item components down here in the header and all of our transition styling all right so now we're going to add a menu item option for a disconnect button so we'll just put the active equals button disconnect and then for the styling on this one um we're gonna pass in the uh prop it's gonna be on click it's going to trigger the log out function and the parent component so we're gonna pass that in here and then for the styling we're gonna have a dynamic class name that we're going to toggle between the active state so we'll put that in here and then to make that work let's see it'll be button inactive and then this is also going to use another package called hero icons react for this ui so i'm just going to npm install that really quick as well all right so now we're going to go ahead and create a utils folder so that we can add a helper that's going to help toggle between these dynamic class names for the styling we just made so we'll create a file in there we will call it classnames.js and i'm just going to paste in what we need here to make that toggle happen so now if we click this drop down oh we get an error let's see class names is not defined all right okay we need to import this helper right we didn't do our import yet so here in the header component here up at the top we're just going to go ahead and import class names from utils all right so now if we click on this we see it's kind of wonky styling but we are getting a disconnect option um here in the drop down that is functional all right so coming back to our index.js file let's work on this nft display section a little bit here so we're going to create another component for this and break this part out a little bit and then just create const display create a little component in here and then i'm gonna go ahead and drag in our nft artwork our five images so if we take a look at those here we can see we have our five apes so i'm gonna go ahead and just make a nfts array here in this component so we can just map over these and display them a little carousel on our landing page here so we've got the path to each one of these images slash vasey two all right and then we'll just add some more styling and then since this is gonna be a carousel here we're actually going to use the tailwind snap x css property to enable horizontal scrolling here which is kind of nice to have so we're going to set that up overflow x scroll and give it a little bit of padding so now we're going to map over our nft pictures and for each one we're going to display the image put a little bit of styling on there as well and we're going to use that image component from next js once again and give it the source of each one of those urls for the images and some styling there as well okay and we have to import that at the top so now we'll come back to index.js and we are going to replace the existing nft display text with this component that we just created so now taking a look at this we have a nice carousel component we can scroll through our different images here and this page is starting to take shape a little bit so we're going to take a break from this and we're going to go over to airtable.com if you don't have an account you'll need to create one and i have a little workspace created here for the basi nft drop tutorial that we're doing right now so i'm just going to go into that but you can create your own error table is just a cloud spreadsheet database that we can use for keeping track of our allow list here so if we go over to our account this is where you're going to need to generate an api key for airtable so let's come back over to our code here for a second and we're going to um actually let me maybe close some of these out here real quick just to get these out of the way all right then we're going to go to the root of our project and we're going to also close these up and we'll create a new file called env and in here is where we're going to store our api keys and important environment variables that we can reuse so we're going to say error table api key we're also going to need a base id and the table name and we can store all those here in the env file and reuse them throughout the app so generate your api key paste in there don't share it with anyone then we're going to go to this neat help tab right here and go down to api documentation at the bottom and right here it's going to show the id of this base you're also going to need to paste that into your emv file as well so we're going to come back over to the header file and we want to create a way to actually join this allow list and add a record to the air table that we just set up so we're going to come to where we have this disconnect button and i'm just going to copy that and create another menu item in this drop down just like this but this time this one is going to be for the join allow list so we're going to make the button join allow list and it's going to trigger the function join allow list on click so this component is now going to expect also a join allow list prop and then over in index.js we're going to pass that into the header component join allow list and then we're going to need to actually write that function here in this component in the parent so we're going to say const join allow list async arrow and we're going to set loading state in here since this is an async function so we're going to say set loading true which means that we're going to need to hook into the react use state hook to set this loading state so const loading set loading equals use state and we'll default to false and then up here we're just going to need to go ahead and import that use date hook from react okay back in our function let's add a console log in here just to make sure that the click is making it um all the way up to where it needs to be in this function in the flow so let's test this here if we open up our browser console and go to the console all right and open this up need a little more styling work still there but if we click join allow list we can see it there in the browser console so we know everything is working so far i'll pull this down a little bit so we can see everything a bit better okay so in order for this to actually work we're going to need access to the actual error table that we just created so let's go down to utils and i'm going to make a file called airtable.js and i'm just going to import the import airtable from the airtable package that we installed at the beginning from air table and then i will set up the error table configuration so we're going to be pulling in values from the env file that we had just pasted in there our api key process dot enb dot air table api key and air table dot base base id and process.enb.airtable table name and we'll export this now let's come up to the api folder and we can go ahead and delete the default hello.js file that was already in there and we're going to create a new file called add allow list dot js inside this file we're going to set up our api handlers so i'll import the table from the utils where we just made it and then export default and we'll make a handler function and inside the try block we are going to await the results from table dot create and we are going to give it the field address that we'll be passing in so and the response dot status 200 success json true and we'll put a message that says user added to allow list okay so we have a handler for this let's come back down to utils let's create a file called allowlist.js and in here we're going to set up our actual fetch call so we'll make a large function called export const use allow list that's going to contain the different ways we can interact with the allow list so we're going to do cons join allow list and this is going to be a call to the add allow list endpoint that we just set up it's going to be a post request that's going to pass along the address and the success is going to await response and return true and right up above this i'm just going to paste in a comment that tells us we're taking in the current connected wallet address as a parameter adding it to the user allow list and returning true if it's successful so now we can access this in index.js so let's say const allow list equals use allow list this doing this tutorial has really shown me how bad i actually am at typing okay so now we're going to import that up at top use allow list wow list from that utils folder allow list now we can continue with actually making this join allow list function work so we'll go ahead and make it try catch down here we're going to await allow list dot join if success set allows true and catch error log error so when we save this it looks like we have an error allow list use allow list is not a function uh let's see here lawless okay well first of all i put a capital letter in here um but second of all i did not return anything from this use allow list function so let's add that uh return block and we're gonna be able to access it through join it's gonna call join allow us okay let's say that and see what happens here actually there's one more thing we need to do to make this work we need to update an air table the name field to address since that's what it's going to be expecting in our handler all right so now let's click on this drop down click join allow list and if we check over an air table there's our address updated right there so going back here we now want to store the fact that we are in the allow list in state so we're going to say const in allow list set and allow list equals use state and default to an empty array now actually since we have a loading state now that we've done this function let's just go ahead and add that in our main component too so we'll just say loading and actually let's create a little loading component here really quick so we'll come over to the components folder and create a new file um oops there we go loading dot js and i'm just going to paste in a component that i have for a load spinner so we don't have to sit here and watch me type out this entire load spinning component so now that we have that we'll go back over to the index file and we'll just go ahead and put that here inside our little loading block and import that now we're going to start making some changes in the hero component so we're going to put some options down here where we can start actually interacting with the nft drop contract that we set up with third web so to be able to access that we're going to need to set that up so let's go down to utils and create another file in here and we will call it nft drop dot js and in here we are going to need to import the third web sdk and get a new instance of the third web sck we're using the brinkman network and we want to access our nft drop through the sdk so we're going to pass in once again a value from the env file public nft drop address and we're going to export the nft drop contract that we now have access to and to get this public nft drop address you're just going to go back over to your third web dashboard and the the contract address is right there you can just copy it paste that into your env file and pass it into the third web sdk so we can now interact with this nft drop contract all right so back in index.js we're now going to get an instance of this set up so we're going to say const nft drop equals use nft drop and we're gonna again pass in our nft contract address and that use nft drop function can just be imported here from the third web dev package okay in the api folder we're going to need another new file get nftdrop.js and here we're going to set up a handler function for interacting with the contract so we'll import nft drop again and just create export a handler function here and then we're just basically going to get all the metadata about this nft drop that we need to display so we're going to say const claimed equals a weight and a t drop dot get all claimed and we're just going to grab the total the claim conditions the claim supply the total supply we can just grab all this stuff off the contract that we want to display the price the phases that we've set up we can map through those right in here and then we're going to return all of that in our success response now back in index.js we're going to set up a use effect hook so that we can actually get these values and pass them into our hero component so first we're going to make sure that there's an address return and then we'll say const get nft drop details and we're gonna need a try catch in here and we're going to use destructuring to assign each one of these variables for our nft drop details wait fetch fit oh hold on fetch i don't think we've set up our our http requests yet so we need to create a file called fetch.js and we're just going to go ahead and set up these we'll do a post and a get because we know we're going to need these and i'll add some comments on the parameters and we'll return get and post from use fetcher now in index.js we can set up a variable for this const fetcher equals use fetcher and import that now in this function we can actually await the response from api get nft drop that we just built and then i'll just wrap up the rest of this function and we're going to go ahead and store all of these variables in state so i'll go ahead and set that stuff up too so we can pass this into our hero component so let's just quickly put a console log in here we've done quite a bit of stuff i'm just going to paste these variables here and let's make sure we're getting values back for this stuff so if we come over to the browser console and there we go we see we're getting value back for the price the claim supply the the claim phase start time so now we can still go ahead and start passing these props into our hero component so we can display them if we come here into hero js close some of these extra windows here and now we're going to be expecting these props to be passed in total supply allow list price claim phases all right so let's set up a section here at the bottom and if the wallet is in the allow list then we want them to be able to see a button to mint so we'll say mint your nft and it'll display the nft price and we're going to work on that conditional rendering um here in a second and then we also want to show the whether or not there's a wallet connected we want to show the claim supply and total supply of this nft collection so a little bit more styling here too just to make this mint button look a little bit better as well all right let's see how this is looking okay so we have a button and we can see it's coming back the correct price 0.0 each and we can see that it's getting data for 0 out of 5 um pieces of artwork claimed so this is getting closer now we actually want to be checking over here an air table to make sure that our wallet address is there before we're able to access the mint so we need to set up in allowlist.js we need to set up a check allow list function that we can also access through use allow lists to make sure that our address is in fact in the allow list on air table so we'll set that up and we will add check as one of the options in the return block let's not forget that this time and then in the api folder we'll create a new file called check allow list dot js and we need to set up a handler for this request too it's going to return true if the records.length is greater than zero for this wallet in the allow list error table back in index.js we're going to add another use effect to handle this check in allow list function and we're going to save that in state as well now we're getting close there's one more piece of this we need in order for this to work so we need to actually go back over to air table here in this handler function we have minted as one of the field names it's looking for so back over an air table we need to go ahead and change that name to mint it now if i remove my address from error table we go back we see that i no longer see the mint button because i'm not part of the allow list if i join now the mint button is there back in air table there's my address so we're getting close things are starting to we're starting to see things working so next we need to go ahead and implement this for the header the same allow list check because if we're already in the allow list we don't really need to see the join allow list option in the header so we can just quickly use that same conditional rendering and now we see if we join the allow list and go back up that option no longer appears for us in the drop down now what's left is mint so i'll close out some of these extra windows and we'll go over to our hero component and we're going to start actually making our mint function work so we'll start kind of from the bottom up for this one and we'll pass we'll say we want the on click to trigger the mint nft function that's going to be in the parent so then that means we need to go up and add that to our props mint nft back over in index.js now the hero component is going to expect mint nft and it's going to call a mint nft function that we're going to create here in index.js constant nft nft drop and a try catch inside of here we are going to set the value of quantity to one so we're going to min one nft and the transaction is going to access the nft drop contract and it's going to access the claim function on that contract the claim to and we're going to pass in our address in the quantity of one or i should say the logged in address and the quantity of one and then we will create const claimed nft is the nft that we just claimed which will be the first in the response array back from that transaction value if claimed nft we await allow list dot update we will need to update that this nft has now been minted so we need to implement this update functionality let's come back down to allow list and you guessed it we're going to create another updated allow list function here return update in the return block we need to make an api file for this update allow list and we will add a handler for this one as well all right so if we try this out nothing happens all right let's take a look here um mint nft ah so we passed the mint nft into the function into the header component instead of the hero component so that's obviously not going to work so we'll just go ahead and move that down and save that all right let's give this a try now if we mint we're going to be able to see our metamask wallet pop up and we will just go ahead and confirm and we will wait for that and there we go we can see it updated one of five has been claimed if we go up to our wallet and we just check our transactions we can see the claim that we just made right there zero eth because we made the price zero each if we go to our third web dashboard and refresh that we can also see claimed supply of one and there's our wallet address right there as the owner of this first nft so at this point this is most of the functionality we're able to join the allow list and mint and we don't have those options if we're not on the allow list so as a quick bonus we'll go ahead and make it so that we can actually download the allow list if we wanted to we'll have an admin address with that capability so in the header js component we'll just go ahead and copy another menu item and paste it and make this the download button download allow list this is going to follow pretty much the same pattern as these other options have followed so we'll just go then into list js we're going to need to add a download allow list i'll just paste it in so that we can see it there add that to the return and then of course we're going to need to follow the pattern make the handler get allowlist.js and i'll paste that one in as well and over here we get an error is admin is not defined so we need to actually set up the ourselves as the admin here so we'll have the option to download the allow list as a csv so we need to pass his admin as a prop into the header as well so we're going to have that download button option and let's see in the header.js file we also need to be expecting that prop here all right so now if we click here we do see the download allow list option and if we click that button we are going to see a csv download if i open that up sure enough there's our wallet address which is the one address in the air table so that's pretty much it for this tutorial i hope you're ready to go build your own nft drop using third web and we'll see you in another video