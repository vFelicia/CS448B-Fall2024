in this video we are going to be building a fully crowd functional todo list app to demonstrate how redis can be used as a primary database let's talk about redis for a quick second we all know that it used to be an inmemory only database that was used to just cache data from other databases like mongodb or whatever however redis recently decided to level up and now you can use them as a primary database alongside with it they release the redis om library which is super convenient with that said i just want to stop for a quick second and thank for ready for standing behind this video and sponsoring it which is good because when you use the link down in the description to sign up not only you are getting 200 worth of credit on the radius cloud but you are entering to win a tesla all right enough talking let's get into the code all right cool so we're going to go ahead and get started by typing in the art in it and that is going to go ahead and take care of our note package and basically every question that is going to pop at you you can just quickly hit a return because it doesn't really matter default name is perfect and we're pretty much good to go now after that typing in code space period will go ahead and open up vs code for you which i zoomed in real quick for and right after i'm just going to go back into our terminal and install every single dependency that we are going to have throughout this application that is express that is of course and redis dash om which is by the way this video is all about so next up once those are installed i'm going to go into my vs code create a new folder which i'm going to call source or for short src and inside there i'm going to go ahead and create my index.js and going into my package.json i'm going to want to make sure that when i type in yarnstart it my application starts correctly so that's why i'm giving this script tag and inside there i'm going to give it the starts tag and i'll just target the index file that i'll just created now you can see that i typed nodemon instead of node that was originally suggested by copilot but that's just an extension that i have and by the way you should install it too it just enables you to run node apps node.js apps real smoothly and so with that next up i'm going to type in type and i'm going to make sure it is module and the reason for that is i don't really like using the cons something equals require whatever instead i prefer importing all the packages so that's why i'm gonna use the module type here and with that done i'm gonna go into my index.js and get started working so first up i'm going to go ahead and import express from express course from cores and i'm going to go ahead create my application instance which is going to be const app equals express give it a default port which is given by the server or if there is no port given i'm going to go with 9000 and i'm just going to go ahead and make sure our my application is going to be ready to handle json and the course is not going to be an issue later on so first up just give it a route and it's going to be an async and all that's going to do is return hello if you call the base url and so with that i'm just going to go ahead add the listener and let's test it out if it works so i'm just going to type in yarn start and yeah exactly my application is console logging the example app is listening on porn 9000 so that's good and so with that let's just test it out in postman and if it gives back hello like you can see over there you are good to move forward next up we are going to go ahead and clone the front end entire project i'm giving it to you just go ahead hit the link down below the github link download the package extract it and then just copy it into the folder where you want to use it later on and just run a yarn install on it because it has a bunch of different dependencies that you will be needing in order to have the application running once that is done you can basically look around this is how the application looks like but that's pretty much what we got on the front end going and you can just go ahead and close it we're not really going to mess with that just uh spin it up with the yarn start and you will see this application going you can go ahead obviously change my name to your user and same goes for the photo on the top right corner so with that what you want to do is right now this to do application is not functional at all so introducing redis redis as i said usually was used as a in memory cache database but now we're going to be using it as a primary database so this is how it's going to look like once you log in with your preferred account and now is the time to go into billing and payments add the credits and uh use the code clever 200 to get 200 off and with that you can go ahead and get started with a baller subscription and go for like a 500 megabyte one that's my personal recommendation and once you set it up and once you're done with that you're ready to go to set up your database same goes for the database select the module or release json and then just give it whatever name you now this in and out of itself is not going to be sufficient for your application to be able to connect to this database so you will have to go into data access control give it a new role which i just conveniently called admin give access to all the subscription all the databases give full access to it and then just hit check save roll and wait for it to wait for it to process go back to your users given you create a new user call it admin give it whatever password you want to as long as it is alphanumerical there is a capital letter noncapital numbers and there's a special correct character you should be good to go now once that is done hit check wait for it to finish and we are going to go back to the database copy the public endpoint link as you can see go back to your application import client and repository from the radius om package go down under where you initiated all the middlewares and then start and then just create a new client using the given function with that you're going to go ahead and open a connection and you're going to have to pass in a link which has the following pattern so you're going to want to type redis column username column password at and the link that you just copied so i'm just going to paste it in here so it's going to be calling admin 1234 with the dash yeah that's pretty much a perfect password right there and at and i'm just going to go ahead paste the link that i just copied with that my application technically is connected to redis but it's not not enough yet so we're gonna go ahead create a schema folder in the root folder of the project and just create it to do that schema.js file in there now you're gonna go ahead and import entity and schema on the top from the library and then you're gonna go ahead create a class that we will name to do which will extend entity and we're just gonna pass in the following so you're going to create a todo a status and then most importantly an id which will be the entity id next up you're going to go ahead and create the actual schema for the class that you just created and the tutorial will be a string and the status will be a boolean so with all that done you're gonna go ahead and grab the todo schema which you wanna make sure that you export and then go ahead and import it in from that same file now you're to go ahead and use that throughout this application throughout the rest of this application so let's go ahead and remove our dummy end point and get started with adding a todo let's go ahead and add some add some stuff in there so first off you're gonna have to create a new repository which i just conveniently called to do repo pass in the schema and the client and then drop the index and then create a new index so that just stops every connection that we had previously going on and creates a new one so technically nothing is going to mess up that's what it that's what it's for so as you can see if you check out the front end there is literally nothing happening there but that's the perfect time to get started and add a new item into our database so we're going to go ahead and create a new route which is going to be a post route on the slash add to do slug which is going to be which is going to fire off an async function that is going to go ahead create a new todo item which will be a new entity inside of our todo repository now we're going to give it a couple of traits this is going to be the todo and obviously the status that we we're normally giving with it a todo list app or a todo item or whatever and then don't forget the id which will be created once you save once you save the item into the repository once that's done you're just gonna go ahead respond back okay and you should technically be good to go so as you can see i just go and i went ahead and tested it out technically that item should be already in in my database however you cannot see anything showing up and that's because we're not fetching anything so let's go ahead and fix that now next up i'm going to go ahead and create a get method endpoint which once again is going to be an async function and with that i'm just going to wait for the repo to search and return every single item that i have in there technically i want my todo list to show me every single item that i have in there so it's pretty pretty logical right so as you can see i tested it out and it worked both of my items that i uh throw in there is showing up perfectly and so time to get rid of some of those we're going to go ahead and create a delete route on the slash delete to do slash call an id that means that in the url parameter i'm going to be passing in the actual id that i want to delete and that's what actually i'm going to be using to remove the specific item from my repository and once it's done i'm just gonna go ahead and respond back okay and so that's well that's how my front end will know that it's time to refetch my todo list now let's say you want to check check off one of your todo's or you made a typo or whatever and you cannot fix it now that's not really good so let's go ahead and fix that and so what we're going to do is create a put route on the update to do slash id id route and once again fire off an async function and it's going to be really close to what we had when we added a new item the only difference is is in this case we are not creating a new entity we are just going to fetch our existing entities and see if we find one if by the way if your database doesn't find a matching item it's not going to really think a lot about it this is going to go ahead and create a new one so you could technically use this function to create the item and to update it as well but you don't want to do that obviously so we're just going to pass in whatever items just changed and then save the save the to do and then just go ahead hit okay send okay back and that way our front end is going to know that something has changed time to refetch our todo list so with that said we actually made it uh completely functional there you go there you have it this is a fully crud functional todo list app using redis as its primary database as you can see i'm typing a couple of examples to just show off the functionality of the application once again thank you so much redis for sponsoring this video with that said you guys thank you so much for watching hit that like button and the subscribe button and i'll see you in the next video