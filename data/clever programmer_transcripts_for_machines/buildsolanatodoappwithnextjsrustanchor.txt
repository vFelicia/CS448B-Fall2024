solana to do app you'll build a to do web 3.0 adapt with nextgs on the solana blockchain after you'll learn how to create your program on the solana blockchain using the anchor framework called rust we'll then show you how you can store the data on chain basically you'll be making a fully decentralized database that'll be verified by solana we're going to be using quick node as our rpc node provider to access the blockchain you'll use the solana playground to compile and deploy your smart contract we'll use phantom wallet to authenticate our users that sign in we'll use the salon a web 3 package to interact with our smart contract in the blockchain it'll make your life a lot easier okay you'll be able to view and confirm these transactions over the solana explorer to verify that they are indeed 100 real now before we get started make sure you smash that like button turn it blue turn it white whatever you want to do with that's fun but just make sure you smash it we're going to provide you with our own cli tool okay and what that's going to do is going to give you all the front end fully built so before you even actually write a line of code okay all of that is going to be given up front to you so that way you can focus only on the smart contract and the blockchain part with that said i'm gonna hand you over to your instructor lance for the rest of this video who is phenomenal and he's gonna help you build this project on solana get ready to have your mind blown take it away lance what is up youtube it's lance again i know it's been a while but i've been working on this very special app just for you guys so as you can see this is a simple to do app but guess what it's using the solana blockchain like kazi said so let's just do a quick demo we already have a deployed app on netlify and as you can see i'm logged in with phantom what happens if i'm not logged in though let me disconnect and let's hit refresh boom if you're not connected at all you won't see an input format here like you saw an input field it's not going to be there anymore this button is going to be there instead and another thing is if you want to initialize a user you won't be able to until you connect your wallet so let's say i have a new wallet so let's go to wallet number one and let's select the wallet and log in it's gonna ask if this is okay we're gonna hit connect and as you can see there's no todo's right because i just connected my wallet it then checks on the smart contract if there's any to do accounts with that and since there's not any even users it's not going to get anything all right let's see if we're on our console if we see anything it's going to say account does not exist all right there's no account with this right here so we need to do is initialize an account so when we initialize the account we always have whenever we're writing to the blockchain it's going to take some of our solana let's go ahead and hit approve and you saw it for a second inched out a bit but there we go right now we can see the input field so now we have a user we should be able to make to do so let's do our first to do and hit enter all right again whenever we're writing we're making a todo account on chain let's hit approve and bam there we go there's our first to do but that's not all this can do it's all managed on the back end and by back end solano blockchain let's hit approve to change this to completed there you go and we can also delete it another cool part guys is when you delete it we actually get some solana back the solana you spent to store that to do account on chain is now going to get refunded when you close that account we're not deleting we're closing that account so let's hit approve and bam it's gone so that's the demo i can't wait to get in on all the cool things that i've learned so let's see and get started coding all right guys so let's get started with the build the first thing i want you guys to do is open up your terminal and go into the folder that you want to create this project in once you're there all you have to do is type in npx clever programmer at latest what this does is let you use our powerful cli tool that's going to get you guys the starter files that you need to start this project so let's go ahead and hit enter and as you can see all you have to do to use our cli to is put in your email so i'll put landsat clever programmer i'm going to put in my name lance and then select the project you want to start and obviously we did spotify and tictac together let's go ahead and click solana to do and all you have to do now is wait and you'll see vs code automatically open up through our cli tool so i'll check back in when it's done all right so as you can see it's ready to go and it opened up vs code for me so if you look this is our solana to do app it's just a next.js project with a bunch of components the index and styling already done for you guys the main reason you clicked on this video is because you want to learn how to create on the solana blockchain so we're not going to focus too much on the next js part you guys know how to build this video app but if you do want to learn how to build a regular nexus 2 app come check out our other videos on that topic here we're just going to show you what this todo app looks like with nextgs and how to implement a solana backend and when i say backend the salon of blockchain okay so let's take a look around if you don't have any node modules for whatever reason you can go ahead and open your terminal and type in cd into the app and type in yarn to install all those modules as you can see i have them so i'm good to go another thing that you could do while you're here is go ahead and type in the command yarndev if you want to run the project locally so i'm going to write yarndev and let me just set up my windows real quick all right so all i did was move my code to the side and put my window here and i can just type in localhost 3000 and let's see the app voila beautiful nothing app like i said it just contains the starter files but if you did want to see it we're going to have this initialize button right here so let's take a look see you have this initialize button when we first open up the app you don't have an account just yet you have a fan you'll have a phantom which i'll talk about later but you won't have an account just yet i demoed this earlier but for now it has a static initialize you can see there's already to do items we can mark the todo we can delete that to do and just like the demo previously if you notice though if i refresh that whole thing gets reset right because again this is static data there is no back end to this so with that said you guys are all set up with the starter files like i said we want to take our regular app and implement a solana backend to it before we get to that we should understand how our app works so when i change stuff you're not completely lost you with me cool so if you guys have experience with any react app or nextjs app let's understand the parent and child relationship of the components okay so if you look under the pages folder of your app and you see something that says underscore this is what i'll call the top level component as you can see i already have some notes here this is where we're going to connect our phantom wallet to our app and we're gonna put it and wrap it around this component here because this component right here is the html of our entire app okay so if the app is the top level component let's draw that out ready so if i'm gonna make a little square here this is our app all right app okay so if that's the top level component what is the child of app can you guys tell me you got it it would be component but we're not going to say we're not going to draw a child and we're not going to call it component technically this component is index.js you could view it as this index.js what does this index.js have so if app is the top level component and we're putting our entire app in here inside this app lives oh there's an arrow on this so let me draw an arrow right inside this app his child let's undo that it's right right here index dot js so then you might be asking yourself lance what's in the index.js let's take a look right if the index.js is this whole entire app should i be able to see the input in the app yes or no yes should i be able to see this to do item yes should i be able to save this whole section yes that's all in this index.js can i prove it to you let me show you so i'm just going to go it's that let's take a look all right so let's look for this input field that i see if you look there it is on line 20 there's the input field if i were to erase this save it's gone right just the css on the background is there okay but now if i ask you guys where in the code can you find me this guy learn front end let's find that piece of code all right so i'm scrolling i'm scrolling i'm scrolling and i reach the end i don't see it but what's this do you have loading right which is another component i made and within that it's wrapped around to do section what's to do section what do you guys think let's take a look see this is how you can read and understand somebody else's code so to do section is a component that lives inside index but what does it do okay so these are called props i'm passing it to do's prop and i'm passing incomplete todo's and completed todo's if the developer has good naming convention it should be easier to understand so it says incomplete and completed which of these is the incomplete which of these is the completed right so this is the incomplete oh that's big let's go undo that's incomplete and this is the completed right so how many to do sections do we have yes you got it there's two to do sections so let me prove it to you guys look at that there's one to do section and there's two to do sections did i make two separate ones that create two components no i reused the components that's kind of the power with react here i was able to reuse one component and pass it two different props alright you see that and completed cool so let's illustrate that relationship right here so let's draw another rectangle we'll actually just use our arrows first i like the arrows let's start right here boom and boom right one is to do section and the other is also a to do section right okay to do section and let's move it to do section can i paste it nope awesome let's do another one to do section okay this one though has completed and this one has incomplete and we're passing it as to do so does everyone understand this relationship so far the top level app contains the index component and the index contains to two to do sections one with incomplete to do's one with completed two so then let's figure out what's inside this to do section and just to show you guys what does this todo section mean i'm gonna switch around my windows real quick all right so i just switched the windows around let me draw out for you guys what is to do section so this ink to do section right here the incomplete one is literally this section right here all right what about this one the completed one it's this right here they have similar css i'm just using it for two different purposes one holds incomplete one holds completed got it but there's components that live inside here there's one more component in here so let's take a look at that so to take a look at what components are in there we can go to our vs code this is called to do section right we can do go into the components folder go into to do and let's click to do section and as you can see it's kind of hard to see because of my little drawing but in to do section there is to do list has is gonna pass down the incomplete or the completed to do's so let me draw you that up for you okay so you can see the h1 right here kinda hard to see but that's the tasks here that's the completed here okay but to do list what's to do list i scroll down so you don't hurt your eyes anymore to do list let's change it to this color right here to do list is just these guys right there's another component that holds the list of to do's right and i'm going to draw the outline on this too okay cool and if you already understand all these react concepts go ahead skip the video to when i start connecting the phantom wallet okay so every todo section will have a todo list that's essentially what i'm saying so this has to do list this has a todo list okay i'm going to draw that out now boom and boom okay let's add some text to do list and also a todo list these are both one component but they're holding different things this is holding incomplete still completed right nothing not confused yet so that's the todo list okay without going into my code if this blue here is todo list is there any components inside of this box right here can you see one all right you got it if you said this right here this to do item you freaking got it that is another component and again we're reusing that component right here same component i didn't make a whole new html and css just for that so essentially for every incomplete to do that we passed down here for every to do create one to do item so in other words if there's four incomplete to do's guys how many to do items are we making four exactly so you can look at it like this within this todo list if i draw where's my arrow there's going to be four to do items how many completed todo's are in this todo list do you write it there's two this one will have two right and then i'll just draw the squares it's gonna look like this one two three four one two and that right there is the parent and child relationship of the component right so if i got my in where did i get my incomplete to do's from so this guy right here oops let me get my pencil so if i ask you guys this right you have the visual save this picture if you're going to get confused later but if i ask you guys where did this incomplete to do's come from do you think i'm did i make it in todo list no did i make that incomplete todo in my todo item no i didn't make it there it didn't just appear here it actually came from index so if i asked you how can i change the incomplete do's where are we looking we're looking right in here if i want to change the incomplete to do's and that's why i made you go through this i know that was a lot but if you survive and you understand everything i'm saying we are in great shape guys and if you didn't get it don't worry just rewind play it again maybe draw it out yourself but this is a relationship save this and i'm not gonna i'm gonna be referring to this relationship later in the video cool so if you got that let's get started with the web3 awesome so another question that you guys might have is where did those incomplete to do's come from as you can see we passed in those two those incomplete and complete to do's as the word to do but if we go up a level if you remember that's a do section right there was index i believe so let's go here and on index we passed those todo's at with the incompleted ones and the completed ones but where the hell lands did these come from i asked you guys it says it comes from index so let's scroll to the top of index and let's look at line nine and if you look at all these things add static input initialize static user you'll see completed todo's and incompleted i don't know why it keeps doing that sorry guys and completed to do's and in complete todo's but where do those come from so if you keep scrolling to the right you're gonna see that it's gonna be equal to use to do right used to do is our custom hook that we also gave you guys and that is where a lot of the logic of connecting our app is going to go so where does used to do come from as you can see it's highlighted in line 2. import that hook from our hooks folder and get the 2.js so let's figure out what that is so if we go to our hooks folder click to do.js here you can see right a lot of code right but this is where a lot of the logic lives so this is where our states live this is where our data lives our static data this is where our use effect lives and we can just store it here and only import what we need to our main app you with me awesome so if you look at line 13 this is where our static data do static data lives and it mocks how the solana blockchain data is stored right so it's an array of objects right and this first object is a to do item right so there's going to be an account and that account has an object that has the index the content and the marked so if i wanted to change learn front end to something else let's say i don't like it all i have to do is change this right here right now to learn salon all right let's save it there boom it changed it's not learn front anymore awesome let's say i change the mark to true let's change it to true look at that learn solana is down here and complete it how does it do that automatically lance that's magic all right luckily for you we already set that up so if you scroll all the way to the bottom as you can see there's all the states there's our use effect there's the functions that we're gonna make for the blockchain later but i want you to look at this line 146 the incomplete to do's is a variable where i'm gonna filter our static data and if it's incomplete make a new array of to do's with only the incomplete same thing with the completed here all right this time the filter is for the completed ones right and that's why right if you take those variables come to 149 return anything you want to bring outside of this js file so i want to bring all of these things including the incomplete oops the completed and the incomplete to do's and that's where they're coming from so if that's a question you might have that's right there you go if you want to add more functions to bring out we're going to add them to this line right here so we're going to change these static to do functions into normal functions okay to deal with the data that we're going to put on the salon chain cool so now that's out of the way i want to set up some things that we're going to need to talk to the blockchain and one of those things it's called an endpoint so if i get to draw this visually we have our app this is this square and then we have let's draw a different color we have the solana blockchain right here all right so let's draw it up the solana blockchain and we have let's bring it back to this color our app so if this is where it is how can we talk to the solana blockchain how can we even get data from here all right we're going to need something called an endpoint right so we need an endpoint right an endpoint is basically a node that lives on the blockchain that we can connect to and retrieve any data from it so our end point of today we're going to be using quick node all right if you guys haven't used heard quick no before if you remember our spotify video to get started with quick node go ahead and click the link in description so that you can sign up and start using their endpoint and the cool thing about quicknote is that they just released a free tier so no need to put in your credit card all you have to do is sign up by putting in your name so i'm just go ahead and do that and i'm gonna hit create account there you go so i successfully create an account and all you have to do is resend your verification email so that you can create your endpoint and that's one of the awesome things about quicknow they make it nice and easy for you to connect to the chain and they provide support for solana because only a few endpoints provide solana at this current point in time so i'm going to verify my email real quick and i'll jump right back in nice so now that i'm all verified with my email make sure you create an endpoint and click solana and as you can see quicknote provides support for a lot of different change you can see ethereum binance even bitcoin at the moment so let's go ahead and click solana because that's what we're working on and the main thing here is that we're working on the devnet if you're not sure what the devnet is it's exactly what it sounds like it's a playground for anyone who wants to test stuff or learn stuff and it says it right here you can test users token holders app developers or validators so let's hit that one and hit continue and bam configure any addons right quicknote also has an nft fetch tool we don't need that for this specific project let's just go ahead and hit continue and as you can see there's different plans right we can just go ahead and click continue all right and if you ever wanted to make even bigger projects if you're a company a startup out there and you want to need and you know you need to make more calls or you want even faster performance they have other plans out there that might be best suited for you for us beginners though we're going to be using their free plan and let's go ahead and go to endpoint and there we go we have it so the http provider and the wss provider is what we're going to be using for later so keep that tab open we're gonna we're set up for a quick note the next thing we're gonna need that to use to set up is something called phantom wallet if you guys are coming from solidity or ethereum this is your version sauna's version of metamask so if you go to phantom.com extension you're going to be taken to this google chrome store go ahead and install it from chrome awesome once you're done you can go ahead and click phantom and then create your wallet you can name it whatever you want but the main thing is click on the settings right here and make sure right you can see currently connected on devnet it's not going to be that by default so what you're going to need to do is change your network and make sure you're on devnet if you put devnet for quick node you should put devnet for phantom right because that's what you want to connect to so i'm on devnet my phantom download i have the extension and now let's get to coding so now that we're going to get started with coding let's say you're coding this project up and you made a mistake and you want to revert back to an old version that's where version control comes in so if you realize with our cli tool you actually just get cloned automatically so if you look at my app let's press ctrl j or command j and let's just kill the terminal and then let's try to get push right if i get push it's going to say everything up to date for me because i have permission on this repo but if you guys did a good push you're gonna notice it's gonna fail because you don't have access to push to our repo so what you guys should do is let's show you guys how to make your very own repo with these files that way you can save your any version that you make and revert back if you need to all right this is good good practice if you want to become a developer so i'm going to do is get over to github and let's go ahead and create a repo there's multiple ways to create your own repo you can do it within the command line you can even use get kraken if you have it right but for my beginners out there all you have to do is create a new repository like this okay so for this pository name i'm going to say solana to do dap right cool and after that's done you don't have to put a description you can make it public and you don't have to put in this stuff because if you don't put any of those things you click create repository and you ever get lost github is nice enough to tell you how to make a new people on the command line vice versa what i'm going to show you though is how to take this current repo right from our vs code this one right here and push it to this repo to make it your own okay so to do that it's very simple let's go ahead and make this guy bigger now and within here we're just gonna write simple command git remote dash set oh sorry get remote space set dash url origin all right i'm creating a new origin to push these changes too so i'll have to do after the word origin is click space and then i will need the link from this one click copy this link right here copy it and then you go you can go back to your command line and right click and i'm gonna hit enter and there we go so if i say git status now right you're gonna see that the package json change and the hooks change because i remember i modified that hook so all you have to do is do these simple commands to get add dot alright and if you do get status again you'll see that those files changes have been added but you still have to commit them so i can say updated static data right now we can do a git push okay now if i refresh here look at that this is my own repo right this should have worked for you and don't worry you didn't steal code you can see over here our boy david one of our developers is one of the contributor is because he set up this nice project for us and you can see our comment here at updated static data is within that app and you can see it's within the hooks right with that you have your own repo you don't have to be scared about losing code or messing it up you can always revert and do some version control with github so that's my quick lesson on github another reason we set this up is because we can actually deploy our projects right away as you saw in the demo okay to do that we're going to be using netlify so i'm going to go ahead and click the netlify link in description where it's going to be ntl.fyi clever and it'll lead you to this page and if you don't have an account go ahead and sign up now using this link and after that i'll meet back up with you awesome so i'm all logged in and everything while you're here make sure you connect to github with your netlife account because it's gonna make this next step a lot easier what i'm about to do is make it so that i'm going to deploy our project right here right now and every time we push a change to github the live site will also update so we don't have to redeploy or anything like that netlify takes care of it so what you need to do is make sure you install netlify right by saying npm install netlify g what this does is in installs the netlife cli tool globally so that you can use their commands so i already have it but i want to install it with you guys just because i want to be a part of it all right once that's done you can go ahead and type in the word netlify in your command line all right if you type this you can see all the different commands that you have access to now that you have this installed all right the one that we want to look at is this one login we're logged in here but you want to log in through here just in case and instead of writing netlife there's actually a cool shortcut you could do you can just write n t l and then all of a sudden you can just type in the command you want so i want login right this will make sure that i'm logged in through the cli right so already logged in and if you're not go ahead and do that now awesome so i'm already logged in the next thing you need to do is to initialize it so let's do ntl init hey there we go so you see these options what would you like to do we want to create and configure a brand new site so let's hit enter okay let me bring this up right it's going to ask you about the team right i only have my own team all right and here is where you put the site name so i'll call it solana dash to do all right keeping it the same naming convention hit enter boom and now it's going to say what's the base directory right you're going to see projects front end you're going to see projects funnel make sure this is at the app to enter right your build command it's a next app so it's going to be next build all right directory to deploy and it should be the current directory that are on so make sure you're doing this in the app folder okay i'm going to enter here and there's an essential next.js plugin we can just hit y and hit enter okay cool so now the next steps is what to do is write in a git push okay oh and yeah every time like i said every time we push new changes then it will redeploy it live so let's just make a change here a quick one we're going to go into todo.js and add a space and that's considered a change so we can do a get status and you'll see right well one the git ignores change but also the to do.js let's hit save get status again there you go to do js so we'll just add those changes commit those changes right and for this commit message we can say add netlify see all right and then we do a good push awesome so now it's pushed it should trigger the deployment of our site so let's hit refresh here and we can see solana to do dap right and we'll take a look and now we will wait for it to deploy alrighty so it looks like after some time the deployment is done and if you see this link right here you can literally send this link and put it on your portfolio and it will show you the app live all right so if i hit initialize bam right this is a live link every time i push my changes this will also get updated so that is awesome all right so we don't need to worry about any other setup we can now worry about setting up the solana part of this now all right so let's clean up a little bit over here this is our live link that's not reflective of our current changes at the moment so i'm just going to x out all the tabs we won't need you can x this out we'll save this for later but here we go so if we do yarn dev again right we can refresh this now and bam so one thing that this app is currently missing is that phantom wallet connection that i was talking about earlier the idea is that we want to connect our phantom all there should be a button right over here that's going to show what phantom while it's connected and it's going to ask us to connect in the first place okay so that's what we're going to set up now so let's go ahead and do that one of the first things that we're going to need to do is make this smaller and extend our code because we're going to be focused on the code now and let's go ahead and press command b or control b and go to your components and in your components folder we're going to make a new file and we're going to call this wallet connect provider dot js okay cool so again we're not going to focus too much on the react part what we want to do is import a couple different things we're going to import wallet adapter network right from solana wall adapter base right what these next couple imports are all essential so that we can connect any solana wallet to our app specifically we're going to be using phantom okay from there we're going to import and destructure we're going to get connection provider i'm not going to hit tab yet because there's another thing i want to import and wallet provider okay those are the two things we're going to need and this is going to come from solana at solana wallet adapter base oh i'd have to react actually there's a couple different ones wallet adapter and then react okay the next one is going to be import wallet modal provider right this is how we get the modal from solana uh wallet react ui i believe yep there you go next one this one's kind of a beefy one this one's gonna be import glow wallet adapter we also got phantom wallet adapter and we're going to use slope wallet adapter so these are the other wallets but again just in case you guys want to use a different one but i just want these three and i'll stop right there wallet adapter now we have so we're only we're not going to use all of these we're just going to use one we're going to do from at solana wallet adapter wallets all right so these are all the wallets right if you wanted to use a different one you could but we're pretty much going to use this one only okay and let's see if there's anything else there is import oh yeah cluster api url from solana web 3.js awesome there we go cool so to get started with this oh and also there's a one react hook we'll need and if you're familiar with it it's going to be that use memo again okay from react let's go all right so we got all the imports out of the way now for the actual code what we're going to do is write export const export const and we're going to write wallet connection provider right while connect provider if you remember this is what we're gonna wrap around the app the whole app so that we can use all these imports and make it really easy i don't have to write any login logic at all we're just importing everything we need and it's gonna do it all for us you're gonna see it's pretty awesome so while the connect provider that's what i'm going to call it and it's going to take in a function with the argument of children and we're going to do an arrow function and there we go all right there's our wallet connect provider and from here we can say const network and it's going to equal wallet adapter network right so now we're making use of that first this is where we define what network can we on and by network i mean testnet devnet mainnet so if you remember from earlier we're on the devnet and that's our network right this next point all right we're going to say cons endpoint equals use memo all right and then inside this memo it takes an arrow function boom and then say if network right is equal to walletadapternetwork.devnet what is this saying i'm just saying if my network is devnet right then we should return our endpoint and here is where we can actually use that quick note endpoint oh we gotta make this bigger you can actually see it there you go we can copy this and that's it right that's where quick note comes in clutch we can just put in a string here and paste that in there that is our network right it's called cold weathered layer yours might be different right but this is how we can connect to the chain all right amazing so now that quick notes are already set up and ready to go all we have to do is go below here in between this curly bracket and parenthesis we're going to put actually no we have to return something first we have to return that cluster api url and pass in network because that's the devnet all right and over here let's see am i missing something nope comma and then we can say bracket network there we go awesome so there it is conditional statement if it's devnet we'll use this endpoint that's all it is okay and then return this and there we go okay cool so this is still with all in the connection provider we want to make a variable here called wallets right and we say equals use memo and again memo takes in that anonymous function and all we have to write in here is just new phantom wallet adapter and then put this right here so let's say you don't want to use phantom you want to use give people options right this is also a cool thing if you want to give them options that have glow you can say new glow wallet adapter like here and then don't forget the parentheses okay so that's what you have to do if you want to do that but i don't have to because i'm just using phantom and this actually should all be an array now that i'm thinking about it so put all the wallets you want to put in that array and you should be good to go okay i'm trying to see if there's anything else oh yeah we do need this comma network okay cool and i know i'm writing a lot of code but we're going to see if this works or if this is causing any errors once i set it up yep so for example wallets was spelled wrong wallets there you go cool all right still within this curly bracket we want to return something we're going to return and here is where all the other imports are going to come into play right we want to make it so if i click this button a moda will pop up with the wallets and then i can click on phantom to connect to it to set up all of that we don't have to write anything necessarily besides just using it so let's set up our connection provider here's where we put it in our endpoint we can say endpoint pass that in as a prop then we can get our wallet provider yep just like that and if you type in wallets pass in all the wallets that we're using only using one and this another cool thing you can also write here is auto connect so if it's already connected like it's already established that you connected it before it will automatically connect it which is pretty sick so now we can do a wallet modal provider right so this is the modal part of our wallet and we can pass in the children yes okay and that's it i believe that's everything we'll need and if there's anything that comes up error wise we'll see it when i try to set this up all right so we're not completely done we set up the component but it's not being in use just yet so like i said we want to wrap this whole provider around in our entire app so if you remember our little tree that we drew it's going to be under pages and underscore app is where we want to do all the magic so the first thing that was needed is we need to import that wallet connection or connect provider right from that components slash wallet connect provider i'm pretty sure it's the same name if there is an error it's probably going to be a spelling one and another thing that we're going to need is the solana wallet css that we need to import so that is going to be import at solana wallet adapter react it's not this it's ui to get the ui and then you need the styles.css without it it's gonna look really funny it's just a button so let's hit save all right yep and we're not using we're not wrapping it just yet so let's wrap it let's say wallet connect provider and let's wrap the entire thing okay cool and if i hit save look at that so something popped up when i hit save my phantom wallet automatically is asking me to log in saying enter my password the cool thing is it's doing this but we don't have an actual button associated with it just yet so let's add that button now and to add that button if you remember if that button is not an app or should it be it should be next to this initialize button and the input so if you don't know it's actually going to be an index right if we take a look at the code if you want to understand it if there's somebody initialized then load that input that you saw if initialized is false it's a state then you should see the initialize button and then to the next initialize button right where the exact spot where i want it to be right here is this right here wallet multi button okay what is a wallet multi button lance i'm glad you asked well it's something we imported from solana wallet adapter which is essentially what's allowing us to have a button right there so let's save this right here hey there we go you see it select wallet right so this is possible because of that provider so if we go back to app.js real quickly guys and we remove the solana wallet css for example look at that it's ugly but since we imported the css it's nice and all of that wallet connect provider code that we selected or set up is connected to this button i didn't have to write no logic i just had to set up some boilerplate code isn't that awesome so if i click connect wallet here is the detected wallets right just the phantom one connect should ask me to log in actually so let's put test one two three four and bam so it's connecting let's see if it refreshes there you go so now i'm connected right so this wallet is officially connected to the app right if i were to disconnect it and i switched my wallet the cool thing about phantom you can actually have multiple wallets if i go to wad3 right this is chc 3k select wallet boom ch3k so now i'm connected to wallet number two all right so whatever wallet you want to log in with go ahead and do that i'm gonna stick with four since that was the one we were using before no pun intend so connect and bam there we go we have a phantom login button alright so now that phantom is connected to our app we have the ability to run transactions using our wallet as you can see i can actually spend my for solana with our app now so later in the video i want to show you how to get more teslan up but for now let me show you the latest technology right here and it's called solana playground so if i make this a little smaller you can see this is what you'll call the smart contract for the people coming from solidity this is like remix you can write your smart contract here and deploy it to the blockchain and then later in the video i'll show you guys how to connect it with our frontend app got it cool so typically with a smart contract you wouldn't make a todo app as the contract but we're going to use that for my beginners out there to understand how the smart contract works okay so what i'll hear let me just give you a quick tour this is going to be the idea of our program and here is the actual program itself right and solana they're called programs so here this is the hello anchor the default program and has one function and it's called initialize okay and every function usually comes with a struct so this is the initialize function and here's the initialize struct right and this is what this contains right a new account a sign in system program don't worry we'll go into more detail later but what i want you guys to do right now is let's select all of it and let's go ahead and click delete because we're going to do this from scratch let's hit delete and there we go cool so another thing that i'm going to do is i'm going to create a couple different files and you don't have to understand what they do just yet these are what i'll call given files so let's get started all right so i added the given files that we'll need so i'll make this smaller because we can full screen this now because we're not going to write any code with our next app like i said that's done we just got to set up the back end so you can make this smaller for now let's take a little bit of a tour so if i open this up you're going to see three extra files on top of the lib.rs lib.rs think of this as the main file all the smart contract logic goes here think of the rest of these files right like constant error and states think of these as modules that i'm going to import to the lib.rs so if you think about it that way then you can let's take a look at them so if you look at constants.rs you can see there's some code in there same thing with error same thing with states right you what you need to know is understand what they're for so the easiest one to understand is error.rs right error is a file that holds all the error messages how do i know it's because right here it says message already marked and that's the error name right that's all it's doing for example if i were to do as completed right initialize mark this as completed can i mark this as completed again no so we should get an error message that says already marked and that's what this is doing it's holding all those types of errors we could run into if you have more you can add one right here just copy this same format okay another thing that's easy to understand is something called states.rs the name of this file doesn't matter that much you can change this to extra structs more.rs and you understand is what the hell is a user profile and what the hell is a to do account again if you want to learn how to read someone else's code if you look at to do count here it has a type of u8 right when you're working with rust or anchor if you're familiar with typescript at all it shows you the type of this what i'll call key for now so u8 means unsigned integer of eight bytes right so it's a small for you to understand what this is think of to do count what is to do count if there's a user with to do count what does that mean so if my user has a todo count of zero how many todos does it have it has zero todo's right so this is just a number that shows how many todo's does this user have what was their last todo count like number and what's their authority and i'll dive into more on authority later but that's what user profile think of it as the user that's logged in because if i connect my wallet should i see causes to do or should i see my todo's my todo's right so we have to generate a unique user profile on the back end you with me so far so with that logic what's to do account right so if you look at the naming here content is similar to our static data right content was like the learn solana all right what is the task idx is the index and marked it's a boolean so if it's a boolean that means it could be true or false so now do you see where the static data helps us now so this represents one to do right for every to do item we want to make an account on the blockchain right so we can have several to do accounts and each to do account is going to hold this information and there's also several user profiles that can generate their todo accounts they have the authority so the authority of this account is going to be depend on the author we're going to store who made that to do as well okay user profile struct to do a construct okay next thing is the constants.rs you don't need to worry too much about this but we're going to use this later when it comes to seeds so just remember user state and to do state for testing purposes later cool so with that out of the way that's the introduction the cool part about solano playground is that you don't have to install anchor to your vs code you can build and deploy it from here you can also test your functions and that's what's super powerful i actually know the lead developer for this his name is acharon and he has helped me and walked me through how to use this okay cool so shout out to acheron main thing that i want to get over with you now is let's start coding the contract all right so if you want to get started writing up your smart contract the first thing you got to write in line one is something called use anchor lang clint colon prelude so let's break this down so far i'm not going to go over every single thing because sometimes you need to understand russ to fully understand it but what you can understand about anchor lang is that it's a library right i want to use this library and when i do call in it's basically saying give me everything in anchor lang and get me prelude this could be different things you could this could be signer there's different things that you can get from anchor lang but prelude is going to give you a lot of different things that we can use all at once so then if i do colon colon star i'm saying give me everything from prelude all right that's all it is don't look too much into it usually if you see the other files it's using that same library you with me cool so next thing you want to do is as you can see we have error we have constants you have states but do they exist in the lib.rs just right now they don't so how do we bring them into the lib.rs i'm glad you asked because it's going to be pub mod for module constant and one thing i'll say this right now is with rust and anchor which is the language that the solana runs in natively you've had to put these semicolons right we got away with these in javascript where we don't have to put them but with some languages you need to put a semicolon to indicate that it's the end of the coding line so if you don't have this you'll get an error so go ahead and add pub mod constant and then to get the rest of them i'm going to type them in okay then pop them on states cool so we have these three files but one thing if you want to use something from constants let's say for example i want to get this variable user in order to use it in lib.rs i would have to say constant colon user tag to use it get me user tag from constant but that could be annoying because especially if i write some long piece of code it could look really hard to read the readability goes down but if you don't want to do it there's a nice thing called use crate right it's basically you can look like it look at this as destructuring if that makes sense to you we can say use create colon constant colon colon star all right we can get everything from constant and then we can say comma error right column colon star same thing with states colon colon star perfect and semicolon right there so basically when you use crate crate if you don't know if you guys know what package json is right crate is essentially your npm packages right so this is the modules that i want to use get me everything from those modules so instead of writing constant colon colon user tag i can just say user tag underscore tag and it knows what i'm talking about that's all that's happening from lines 1 through six right use crate puts these guys into this scope awesome another standard thing that it has is a declare underscore id and then a bang here here you're gonna put in whatever program id this comes with i have the finish code right over here i saved the id if you want to use my program id you'd put this but you should generate your own program id right so if i were to go to build go to extra right go to uh program you can get a new one by clicking new here right but there's nothing there's nothing in the smart contract yet so let's not build anything so for now we can leave this blank okay this is just going to tell us hey what's the id of this program awesome so now let's get to the actual smart contract itself we can call it we can do hashtag square like brackets program right every time you see like a hashtag brackets and then something in here that's what you call a macro all right a macro it's just something that's rust specific and underneath this there's a bunch of under the hood code that makes things a lot easier for us it's pretty powerful think of it like a black box and if you look into that black box it does a bunch of different things right we can spend a whole lesson on the different macros but i would refer to the anchor docs if you want to understand more about this i'm only going to tell you what you need to know so what you need to know about program is that everything underneath this right here is related to this program so we can say pub mod and then the name of your program i'll call it clever to do and then put curly brackets right there and everything within this scope is part of our smart contract you could say okay so what do you want to do with this smart contract let's do some pseudocode guys right so in our front end what are we doing that's what a good question asks if you want to make it all backend specific and by backing i mean blockchain what kind of features do we need so let's hit refresh right so one thing i'll notice is that we'll need this button right here on the blockchain as well in our contract we need to be able to initialize the user all right so we need to be able to initialize the user so let's write that initialize a user all right what should that initialize user do it should add a user profile right remember what a user profile is right it's something we keep track of to the blockchain right and right we don't want to just add a user profile because if you look at our states is there a number associated with to do count no it just says it has a type of u8 but it does it could start at five it could start at zero we can say add values right for the default data you know what i mean by that for the default data the to do count when i first initialize the user should be zero right last to do zero authority that's going to be your wallet address so if i click this select wallet it's going to be this that's our authority cool so we want to initialize that in our function what else do we want to do with this smart contract you want to let's take a look be able to add a todo add what to do right now it's done statically you want to be able to add it to do but where are we adding a todo towards we want to add a todo to the blockchain do we have any structure that represents a to do we do it's going to be in states so right we want to add a todo and we'll flash all of these out later on we want to add a todo can you think of anything else we want to be able to market to do as completed attitude is done right market to do and this is something cool right there's actually a way to remove a todo from the blockchain if you know anything about blockchain at all you can't actually delete data like remove data from the blockchain but there is a workaround to remove the to do so you don't see it anymore right you can close the pda the profile derive account right you're going to see me hear me say pda a couple times all right so these are the three main functions that we want to create and like you saw earlier we want to create structs for each of these functions okay so the process that we're going to do is create the function create the struct and then test that's how you should be making and crafting these contracts okay so cool so let's talk about initializing a user so one of the first things we can do i can delete all this for now all right just so we don't get lost in the sauce so we have all the logic within the scope can i use anything from these libraries in this scope all right if you said no you're correct why can't i use a user tag in here for example that's because use crate brings it to this scope everything up here if you want to bring it into this scope you're going to do something called use super right and then do colon colon star and then semicolon right use crate brings everything to this scope usual lets you bring everything into this scope so now you can say user tag here and it knows what it's doing if you don't have this let's say it's gone you'd have to do the constant clone thing again then it knows what it's talking about all right it's just a way to import them into the scope and another thing i want to point out you don't have to make separate files you can technically put everything in line like this so constant and then say user tag const constant user and basically this is how we did spotify and tech talk we're getting better we're improving so we don't need to do this in line but you could if you want to okay awesome so we have use super we're good to go on that right hit enter here and to make a function on anchor you can say pub fn this represents a function right and say initialize underscore user right the naming doesn't matter you can call it whatever but it's just like any other function so this is an argument here or you can put arguments here so i'm just going to format it like so and what does this take in it's going to take in context right and because we're specifying the type the context is what the context that it's expecting is something called initialize user right there's usually a struct associated with the function not every time this could actually be blank but this time we want to give context on what initializing a user is okay so it's going to take in some context and then from there you want to do dash arrow then result right what do we get from this the result is written like this and here we define what this function does so other than this result here or putting the type it's just like a function in javascript right here is where we write the logic right so it'd be like write logic here you with me i hope it's not too bad guys all right so what we want to do here is initially let me play space initialize user profile with default data okay you guys know what this means this means put the to do get the user profile and mark it as zero so if i were to do pseudocode do i have access to user profile here you might say yes because we're importing states but i'd say not yet because i need to do something with our argument our context but and does initialize user exist nah it doesn't exist yet so let's make it exist so right now we have what i'll call the skeleton of the function it's all set up we just have to write the logic but before we write the logic we want to do something with this struct so let's define a struct right now so i'm going to wait a second okay and now let's make a stroke and to make a struct you want to have this right here so you want to derive parentheses accounts right and again this is a macro and you don't have to entirely fully understand what this does yet if you did want to learn more you can search up this macro on anchor documents but i'm only going to tell you what you need to know and what i need to know is that you also want another one here called instruction parentheses all right everything that comes from this macro is going to be related to what you put under it so underneath these two things i'm going to put pub struct or this is how you create a struct public structure and it's going to be called the same name as this so now it'll exist initialize all right and another thing you want to put here is apostrophe info right i ask developers anchor developers what this means and from what they tell me it's very rust specific it's called a lifetime variable with rust it's not like javascript if i were to create a array in memory right let's say let's make this text let array equals one two three right if i were to make that state of code this array will live on forever until i do something with it with rust you need to let us the memory know when does this array exist otherwise it's just going to just take up space and there's a lot of data can make performance a lot worse with rust but since it's a lower level language you can put a lifetime variable with the struct and only exist as long as it needs to that's all you need to know that's the basis you don't have to go into the technicality of it just know that info is important for this okay hope i didn't lose you with that there's initialize user that's done cool so within these two curly brackets is the scope of the struct let's define what the hell this structure is we're going to put another macro here we're going to call it count mute right anytime you see mute this means immutable and that it can change so what can change here it's going to be the authority all right who has the authority to initialize the user and if you ask them if you ask me or mr b colon the authority is going to be whatever wallet is connected that guy is in charge of the user profile or that user account okay so the type that we're expecting for the authority is gonna be signer and then the lifetime variable info again okay and then you're gonna put a comma awesome so let's break down what we have so far where the hell does designer come from lance you're probably like i'm so lost lance i'm overwhelmed don't worry about it let's break it down designer doesn't exist but do i have to make that i'll let you know you don't have to make it right where is designer coming from it's actually coming from anchor lane right it's not it's got prelude but you can also get signer from here it's built in so that's why the libraries and the macros makes it easier we can just say signer here signer just represents who's approving these transactions who's approving initialize user the signer is okay cool now we need to create we need to be able to generate what the user profile is so to do that we need to define this right here hashtag brackets account and parentheses right similar to this but we're not going to put mute here there's actually actually some things that we need to initialize right you're going to see this with a lot of different structs so you're going to see init almost every single time you're going to see seeds and this is going to equal an array right so let's just break down what seeds is there's a whole algorithm to generate a unique seed the easiest way for me to visualize this is simple to visualize this what i like to do is do you guys remember dice bear we might have used this in an earlier video to generate a random profile picture right so let's say i type the letter l this is my input for the seed and that will generate a random picture based on what i inputted here so if i put the word lance that's the picture that lance comes up with right if i put lance 1 2 3 that's the profile picture that i create with seeds here we want to generate a unique oh you want to take the seat put the c's in here and it will generate a random string of like random letters and numbers based on what you put here okay so what we want to put for the seeds is user tag right so now we're using that constant from here right and we can use it because of use create and use super all right so we got user tag another thing that we're going to use to generate a unique uh i'll call profile picture or string is going to be and the authority so what it'll generate from these seeds is it's going to take a user tag it's going to take the authority right but we can't just write authority we just have to write authority.key builtin method dot as ref boom okay all you need to know is that this will generate a new thing so you can look at this it's like me writing user state right and you're wondering why i'm using user state if you look at constant here user tag hold user state that's string and it's going to come into play later for testing then you want to put in the authority the authority key and that's going to be like a random set of letters and numbers right it's going to be your public key so let's just say it's 1 2 3 and this would be the unique string that it generates for the user profile okay this is what it's going to create if you understand that we can keep going so after you put what you're going to put as the seeds put a comma and then put this magic word called bump the cool thing about bump is that it's going to generate the user profile in this case our user account and based on that it's going to check does this account exist does this profile picture exist if it does exist already bump will bump it up one be like does this one exist what if it does it's say let's say it does all right okay one two four exists what about one two that exists let's say one two six if that doesn't exist that's what it's going to use so that's what bump is for so you don't have any duplicates okay you can also code up your own bump by the way if you don't code up your own bump then it's gonna do it there's like a default bump here okay cool and next we can set specific attributes we can say that the payer of this who's gonna pay for this is the authority right is the authority and another thing that's very rust specific is that you need to tell your code how much space does this take up with javascript i can put any size array any size data right with rust you have to say how much space is this going to cost so that russ knows exactly what's going on when you have errors so rust is a lot better for error handling let's put space and it's going to be 8 plus td all right mem size underscore of colon and then you know again you don't have to don't get lost or scared by this it's basically just getting the size of right the user profile hey where does user profile come from guys user profile is coming from the states so however big user profile is wait where am i however big user profile is that's the space it takes eight plus the size of whatever user profile is okay so that's that was all set up the next thing we're gonna need is pub user profile all right all that information it's related to whatever is underneath it so the user profile that you get is gonna be stored in something called a box right it's just a place to store memory store a place in memory that russ can point to and what you need to worry about is that it's going to have be an account the lifetime variable of info and the user profile struct okay i know that was a mouthful this is a lot but basically there's a box in memory that holds an account and in that account holds our user profile that's what this is expecting that's the type it's expecting i didn't say equals keep in mind it didn't say equals i said that's what to expect from this user profile so if i get anything other than this that's going to generate an error but it won't so other than that let's put some space here and then say pub system underscore program and that's simple you're just going to use this program struct again given to us you don't have to create it and it's going to take in this system cool this one is not as important but um it's it's needed so system program is program info system and there we go that's the struct for initialize user it's all done right our goal now is to use that information right of this struct and add this logic to it so our internet initialize user is related to our user profile so if i say it's something like ctx if i were to print this i would get the this struct so let's do something with it so the first thing i want to do right is say ctx right dot accounts right this is how we get it ctx is the initialize user dot account is what guys what do you think accounts is right you see that there's accounts right here so if i wanted the authority how would i get the authority we could say dot authority all right and if i wanted the key like the number specifically you can say dot key and there you go all right so that's an example of how to use stuff within the struct right we don't we can use this for later all right so the first thing i'll do in this function is let user profile okay this is not new we're creating a variable right not bad and i'm setting this variable equal to and mute all right this is new all right and mute is letting russ know that this variable can change if you don't put mute here and you try to change it later russ will panic it's called and he'll be like hey what you doing with that variable we don't want that we're like yo yo yo i will let you know that n mute this can change right so if this can change uh we want to set this variable user profile to the user profile so how do we get these protocol we can get it from our context we can get it from the struct to get into inside like another layer inside of it we can do accounts right and then we can do dot let's take a look user profile right because it's going to generate a user profile for us so the user profile is getting stored in that variable i hope you're following along guys so there we go make a variable called user profile get me that user profile and store it in there the powerful thing about this and now it's easier to read all right if i say user profile profile dot to do count right where have you seen this before getting user profile dot to do count i'm getting it i have access now that's the keyword to this right so if we're initializing if we're initializing the to do count what should it be what should this be equal to zero is it clicking now all right let's say you every time you initialize zero you want to do count to start at five how would we do that you'd say equals five right but that doesn't make sense with our app they should all start with zero there you go and we just gotta do this for the rest of the data so if we look we should initialize the last to do and we should also listen to uh initialize who the authority is so let's do that i'm gonna scroll down so right if i go here ah we can just put it all together we can say uh user profile right that's the variable name and how do i get the last to do last underscore to do you guys are getting it and what should this be it should be defaulted to zero let's put our semicolons and then there's one more at the top was user profile dot authority what's the authority of this user profile account and you actually know the answer to this one i showed it i gave you a preview so i'm gonna give you guys one three seconds one two three if you got the answer you're a freaking pro all i have to do is say context all right got accounts and then dot authority so you can say dot authority and if you want the actual key you can say dot t wham bam there we go so now we successfully initialize the user profile with default data and it's reusable to any account right that's the power and then afterwards we need uh some sort of like return and you can use something called okay it's gonna return either if this all works or not so if it's all good this logic is all sound right you can just say okay here one small thing is like if you wanted to return like 5 or 10 from this function you can just put that here and that's what you get back but we're not really necessarily returning anything we just need to initialize these values with me so far awesome but guess what guys that's it that's our first function right that's the initialize user and that's the struct we should be able to test it now so let's go ahead and do that now to get started with testing there's a couple things you need to do like you saw we don't have a new program id and we haven't even built or deployed this contract to even test it so if you see program is not built one of the first things you have to do is see this not connected if it says not connected click on it and make sure you have a playground wallet playground there's a playground wallet that lives in salona playground that you can use you can't do anything locally but it's good to save it so let's hit save just in case but you can also hit continue i'm not going to do anything with that key pair but you can see connected to playground wallet and this is the website's wallet address that i'm connected to that's my wallet address right now it's not phantom it's the builtin salon playground all right so now that we're connected i have two solana right if i want to get more the cool thing is i can do solana airdrop two it's gonna retract request some solana and there you go now i have four solana as you can see right there so that's awesome it's all built in and another thing you wanna make sure is that you're in devnet right because that's the network we're working on and then from there go to here and let's go to extra program credentials and let's say you want to make a new id or new program and you already have an existing one you just have to click new and it's going to generate a new program id for you all right it's right here okay you need to have the authority yep let's go ahead we can copy it here or you don't have to it's going to put it automatically that's our new address and what we need to do now is let's hit build and when we hit build this is where all the errors are going to come up and if there's no errors it's going to say build successful i wouldn't be surprised if there's any errors mostly because i often forget the semicolons that's me being a javascript nude so there we go so a method not found in initialize user let's go ahead and try to troubleshoot this okay a couple different things unused imports oh i see on resort import crate got it all right so we got a couple errors and again that's usually if because i missed a semicolon or spelled something wrong so let me just double check my code oh yeah so it told me that i need to add another semicolon here and i'm getting a lot of errors and that's because oh yeah so you add a colon here if you copied everything like i did i was missing a colon here it's colon and i got a lot of errors because there's a semicolon missing ah so there's a semicolon here it said error let's go ahead and hit bill let's see if it's successful now hey look at that build successful right there's only one warning and that's because it's saying hey uh you imported this error but you're not using it and that makes sense because i haven't got to the error handling yet but that's just a warning so we can just deploy this as is right and we have our new program id let's go ahead and hit deploy let's see if we can deploy it awesome so it just told us we're poor because the deployment cost 4.86 and i only have four salon so if you remember you can use this cli right here and say solana airdrop 2. and this is how we can give our playground wallet some solana right when it comes to our phantom wallet i'll show you a different way how to do that later okay cool so it's using our salon player i have six sold now now let's hit deploy and let's watch the magic happen yep so this could take a couple minutes depending on the size and you know the network at the moment and i'll check back when it's done all righty so it's almost done now and let's give it a second bam deployment's successful as you can see it took my solana and it refunded it it was saw two and then it became four cool the cool thing about solana and the difference between this and solidity is that usually with solidity when you deploy a smart contract you can't change it anymore you can't change what it does with solana you have an ability to upgrade it right so that's like redeploying it with changes so we're going to do upgrading later for now we're just going to test the initialize user so how do we do tests with salon right it's good to test you know the functions that you create so you know if it works so we go in and test now we can talk right because you can see the instructions is initialize a user and the accounts that this can create is a user profile yeah and it's a do account right and we know what these are right so if the test is what helps me understand the code so if you're watching this right now and you're like lance i am so lost the test is what can really help you understand what the hell is going on so if you do fetch all user profiles or user accounts from that are created from this contract let's fetch them should there be any let's find out let's do fetch all and look at that there are no users that were created with this contract okay but what about todo's are there any todo's that live on this contract just yet you tell me right let's see if you're correct bam there's no todo so if i want to create a user profile like you saw there was none how do we get them that's where this function comes in we got to initialize a user so let's go ahead and test it all right so we're going to go ahead and test initialize the user we know what it does because we made it together and it's going to take in an authority right so what is an authority the authority is who's ever the address the wallet address whoever is logged in so we can put my address right if you're talking about phantom it would be this address is the authority that's initializing right and for the user profile where does this user profile that's where this host section is we generate a unique user profile based on these seeds right the user tag seed and the authority key all right remember we're going to generate a unique profile or in this case a unique user profile okay so we connect that now that you know what it means and we want to do from seed so seed one is what it's user tag but that's a variable what is user tech all right what's what's the type is it a string a number let's check our constant it is a string and we don't want to write user tag we want to write user state so that's why i wrote it on dispair we want the string user state here and then we want to add another seed right because it takes two it takes in the authority key so this add seed what do you think is the type of the second seed is our authority a string number bytes right it's going to be pub and for pub key i'm going to copy authority right here because it's going to be the same and paste it so there we have our program id that's the that's the next thing it takes in but it's not part of the seeds then we hit generate and there you go it generated a unique public key for our user profile this is the address of our user profile on the blockchain and we can reference it later all right so now all i have to do is hit test and hopefully it passes if we did everything right so let's test if our function works let's go it says initialize user passed right so what does that mean what does that mean for us guys it means we successfully create a user profile where's the proof lance i don't understand let's go to user profile and now let's fetch all the accounts that we created with the contract there we go do you see it guys we have one one entry one user this is his public key all right that's his this is the account this is his authority and the last to do and it's to do count is zero we successfully initialized a user so if you understood at least half of that or this helped you right we're gonna rinse and repeat this process for the next two functions so i hope you're ready let's get started all right so with that out of the way let's get on to the next function right so with initialize user not only did we like we initialized the user but we also added a user account to our contract right so fetch all again we have one user the next thing we want to do is how do we add a todo item right so the next function we're going to write it down here we're going to say pub fn add underscore to do right so there we go cool so we add function we take parentheses that's the function name and again this function what is it supposed to do it's supposed to add a todo count to our smart contract or to the blockchain rather okay so what we should should happen after we run this test we should see uh one to do item for every single to do okay cool so let's get started building the skeleton of this function as you know i'm gonna hit enter here and say context all right it's gonna take in context right and context is gonna be what right so based on this last one should this be blank no there should be a struct associated with it right and it's going to be add to do that's the context of this right next is going to be a comma right so it's going to take in another one we're going to say underscore content right is going to be a what what's the type of content right if you're not sure if you remember our states here content is what type string all right so when we add it to do we should also be able to input the string all right i want to say yeah there you go so it's going to take into context and it's also going to be like hey what is the actual to todo you want to add all right so if it's learn solana this is where it'll go underneath content cool after that we can add the arrow and then we can say our result again right do you see how there's a lot of like boilerplate code because that's why i don't want to focus too much on the little stuff right you'll understand them as we keep testing and practicing together okay so there was a result and what do we want to do here right we want to fill the todo struct with the proper values right so what does that mean right so if we go to to do account what should be content content should be whatever we passed in as the string all right we should initially figure out the index all right so we need a way to uh keep track of the index right index is zero index is one and we also need to initialize if it's completed or not right so what should be the default boolean for marked right if you said false you got it right because if the default was true we'd only have completed ones at the start right if you want to only see uncompleted ones you want to initialize them as false alright so that's the pseudo code of the function you with me so you want to fill the destruct with the proper values and i will say to do a count right with the proper values okay so this is the skeleton of the app the next thing we did was we created the struct so we can understand what we can play with okay so i'm going to scroll down we're going to create the add to do struct so i'm going to do kind of something similar we're going to make that macro we're going to say derive let's get accounts into here and we also want to get instruction right instruction okay and underneath this is important so we'll say pub struct and what's the name of this struct right it's going to be add to do so we're going to call this one add to do right that's why i was very like slow with this struct because it's essentially the same thing just whatever's relevant to do account now instead of user profile okay so this is what i had to do let's make the scope of it which is right here and we can do another account right this time right we're going to have a couple different things right so okay initialize it automatically but we want to play enter and we want to make this mutable because it could be a different um user profile that's controlling this ad to do right we want to give it some seeds all right remember this and the seeds this is all this stuff is for the user profile associated with this to do which is going to be the same as before so it's going to be add user tag onto here and the authority dot key remember this one needs a dot as ref as well with parentheses okay so so far this is similar to this right now right and then we want to add our bump and then we want a has one equals authority okay awesome there you go and underneath this right we did all of this just to say uh that's related to the user profile which again expects a type of a box that holds an account that holds what what does this guy hold it holds a user profile okay cool all right so now we have the user profile associated with the to do next thing we're going to need is the actual to do account itself right so where this one generated a user profile we want to generate a todo account right so to generate that one we're going to take an account again parentheses this is going to be similar here we want all of these the init and stuff like that so hit enter why does it look like this should be a different color strange but we'll figure it out later let's do just hashtag account oh i see it's because we never closed this properly there you go that looks better cool so thank god for color coding we're going to do this we're going to hit enter this one's going to have in it because we want to initialize it seeds equal to and this time it's different all right we're not going to put user tag here we're going to look at constants we want the to do tag and to do tag when we test it we're going to write to do state instead okay so let's go down inside these seeds we want to do tag which holds the string all right we want the authority dot key hold on the authority dot key parentheses and remember there's that dot as underscore ref that we need and then there's one more thing we need we're also going to need and right here the user profile right this is why we have to set it up earlier dot last to do all right what was the last index of that user right last to do index of that user right and then we want to store that as a u8 an integer and dot as underscore right so this all this information just to generate the next todo account all right so don't forget to put end user underscore profile dot last to do as you ate as ref and at the very end there's the squeeze in this little comma here that's easy to miss hit enter cool all right so i'm gonna look to you guys what do we usually put after seeds you got it john it's gonna be bump and i hope all the giants that watch this are like huh and so there's a bump in here and another unique thing is we're gonna put payer is equal to authority all right there's specific like um i don't want to call it traits but specific things that you want to put in here that specify what it is so has one right is equal to authority right the payer is going to be the authority right there's different special cases here they all do different things i don't want to focus too much on what they do but it adds specific properties essentially all right so remember we have to find the space on this one how much space is to do a count take well to get the size of something we need to do all of this stuff this is how you can easily get the size of something with rust and anchor so you can say whatever the size of to do account is and then call it and then we also need that plus 8. i forgot that all right it's the same thing as last time step i put the plus a first doesn't really matter still adds up to the same thing so that's the space and all of this right underneath that should put the todo account so we can reference it later and just like before it's going to be in a box right it's going to take in info that's how long it lives for and account holds the todo account beautiful awesome now let me just look up here to reference what else do i need i need uh oh i need the authority yeah the authority and i also need the system program so let's add those next and again or it doesn't necessarily matter here what matters is if you put these on top of it so this we do need the mute one and then we can put pub authority is just like before just look up for reference signer signer uh info there we go cool so that's the authority set up let's also set up the system program and that simply is just going to be program info and voila okay i think that's it for the ad to do struct now we're gonna use all this information here to make the logic of our function and our function is to fill a todo account with the proper values kind of like initialize user right so we gotta essentially create oh and fill up the todo account with values right so we'll put in what the authority is for this to do item fill in the index fill in what's the string and initialize this to false okay you still that's that was me checking if you're still with me all right cool so we're gonna add it to do here and here we go so essentially the same thing let's write it up so first just like before we want to get a variable that holds the todo account and the user profile right so let's say let to do underscore account that's our variable is equal to right and how do we get the todo account all right that's our context you remember it's going to be ctx right and the cool part is um that can to do account be unique and can it change yeah all right we can have multiple todo accounts so you want to make sure you add and mute or else we're gonna run into some errors so i'll just say context.accounts right and then how do we get to do account scroll scroll we can just say dot to do account dot to do underscore and there we go so we got that we also need access to user profile so just like before we can store that in a variable so let's do that say let user underscore profile is equal to and mute because it's mutable let's get it from our context right how come i can get user profile from add to do that's weird right i thought i'd have to get you know initialize user well if you look at add to do we set up user profile too right we didn't initialize it right there's no init here right we're just getting it right getting that user profile we're referencing it so all we have to do is say user profile contacts accounts and then we labeled it the same way user profile right so that's a cool way to get user profile without you know referencing this struct okay and now uh now that we have initial we'll just put this comment and put it here we can say uh initialize variables right so now we can take these variables and do stuff with it right so if if i were to print out to do account i would see an object with all these things but do these have any values no so we can give it values all right so let's start with the easy one you guys should be able to do this to do account dot content all right what should that equal all right it should equal whatever you want to do so if i put a string here that says learn solana right every time i added to do what to do items would i have right every single time i had to do i'll have learn salon learn salon right so if you want a visual representation of what this does if i ran this function and tested it i would have a to do item with learn solana learn oh it's not text with learn salon right if i ran that code again would i get a unique one yes or no no i would get another one that's learned salon if i do this again learn salon they're all the same i don't want them to be the same how do i make them different right we want to make this dynamic so instead of learn solana we should write underscore content where am i getting underscore content lengths i'm getting it as an argument from our function right if this is looking scary to you right we can look at it like this all right how many parameters does this function take right it's taking you know just two parameters context and content and we're using that content here right that's not too bad yeah so if the content is that let's initialize the rest of the things here okay i'm gonna put it the order that we listed so it looks nice so the first thing is the authority so let's do to do all right account how do i get the authority now you're catching on it's dot authority what what should we put as the authority we can say context that accounts right just like before dot authority dot key authority okay don't forget the semicolons i always forget those bam okay after we got the authority the next thing we want is to do account we want the index right the index is equal to right the user profile dot last to do right so i'm making use of something here right i'm using the user profile that last to do all right last to do is something again comes from the user profile and it's interesting because i'm not using to do count right the reason why i'm using last to do because i want to store the latest number because when we go when it comes to count that's going to change right the account is going to change so this is for the account one is just saying the number that it is okay so all you need to know is that it's helpful if you do it this way you don't have to but you can't okay so then content is next we did that and now you want the to do underscore count dot marked and remember i said what do we want do we want a dynamic value or do we want a static value for this so if you said static ding ding ding you got it it's going to be false all right because every todo i create is going to be dynamic but will always be incomplete until i mark it as completed right so it's a lot of like being able to visualize the logic within your app okay so we're not done quite yet right we want to be able to increase to do index for the pda and remember pda is the account the profile derived account right so we want to say that user right let's say if there's two accounts there's the lance account there's a kazi account right if i'm on lance and i added to do should causey's profile be incremented should his to do count increase no only lance's so to increase the 2d to do idx for the pda we can say user profile underscore last to do is equal to right the user underscore profile type last to do but we're not done we want to do dot here all right dot checked underscore add one and dot right we can press enter unwrap all right looks scary but all it's doing is check if i can increment the to do right because remember it's only up to uh on u8 right which means on inside integer uh eight right so check if i can add increment it and if it's true we're gonna increment by one and then unwrap is essentially just unwrapping it you don't need to understand that just yet just know that it's helpful to add right here okay so this is how you can increment really easily with rust i'm saying that the user profile to do is going to be whatever it is plus one if i can do it yeah cool we want to do the same thing right to increase the total to do count right cool so we can say user underscore profile dot to do underscore account is equal to user underscore profile dot to do underscore all right so i updated the last to do let's also update the to do count right there's two things keeping track of the number i'll use them for different things all right so we're going to say dot checked add one same thing oh and also don't put a semicolon here because they're going to end up the whole line this dot unwrap is chained onto this so essentially you can do it like this but since there's no semicolon right this will work the same so you can say dot unwrap again make that blank and you want to make sure you close it here don't close it here okay so we increase the index right and we also increase the total count right so this last to do is for the index to increment the index this is just saying how many it is right because the index can be different from the total amount right you can have seven to do's but the last index could be six depending on what we delete right i could delete this one and mark this one and we'd have random indexes okay you follow them cool so what's the last thing i'll need it's going to be the ok right and i don't want to necessarily return anything there you go that's add to do i don't think i need anything else see this string and here perfect okay now the moment of truth guys let's go ahead and build to see if we get any errors and we might you know me there we go uh we have one error instruction in this scope okay let's see it might be a spelling error this time actually based on that so we have instruction and instructon right there you go so maybe if i fix that that would help let's hit build again a build successful so if you look over here in our test you'll see add to do right uh but you'll see that it's not deployed just yet right we didn't upgrade and if we upgrade we're gonna get some some more salon all right but i believe we can still test this so let's go ahead and test that all right so let's go ahead and upgrade our contract because we did make some upgrades we added to do struct and we added a add to do function so if we hit upgrade you might not be able to afford it might cost more than it's a bigger size file as you can see deploying okay looks like it's going through so i'm going to let it upgrade okay looks like it's almost done okay deployment successful and we got refunded some solana that's awesome cool so now this is live on the blockchain every time you upgrade and deploy your smart contract it's living on the blockchain and it's just waiting for us to call upon it and use any of the functions so let's go over to tests and let's go ahead and try to add a todo right and if you notice there's three accounts this time user profile the todo account and authority right there's three things now for this function and let's see what else now that's pretty much it so all right to do it to test it is just fill in all these things so let's say the to do item is test add to do right for accounts how do we get a user profile okay so we got the content the next thing we have to do is the user profile to do account and authority so this is the tricky part about testing for user profile when i make it do i need to generate a brand new user profile yes or no you tell me okay if you said no you're correct i don't want to generate a new user profile so then if i don't generate a new one what should i put here should i put my wallet address not necessarily what you want to put for user profile is any user that you have right so let's check user profile let's check facial and there you go so for user profile we can use this public key all right you might be asking why do i know it's not my address by the way because this is the wallet address if you're a member of the playground i know because if i were to paste that here my address and click fetch you're gonna see a given account is not a user profile so that doesn't go there if i do fetch all right that was this was my address what we're going to need is this public key this is the user profile how do i know if i were to erase this paste it here and just fetch that only that i'll get just that object so that's the correct user profile right so this is essentially right the initialized user so if i'm already initialized and i'm the lance this is lance using lance to create a todo all right if it was a different if it was like this whatever this is somebody else creating a todo right so you want to put that user profile okay cool so for todo account this one do i need to generate it or is it already given to me the answer is we need to generate it because it's just like before there's a couple different seeds that we need to add so how many seeds do we need to add one two three all right this is a number we have to add a number as a ref okay so for the two account let's do from seed the first one is a string all right so remember before when we went to um what's it which one was it i think it was constant we did user state because that's the string that lives inside user tag what we need now is to do state let's get to do statement open here to do underscore state that's the string all right we need to add another seed and the next one we need to add is where is he where is he right here the authority so remember which type was authority it was pub key and now what's the authority of this all right if you don't know if you don't remember what authority we're using let's take this and let's go to fetch right we fetched it the authority of this specific user profile is this a z thing which is actually your wallet address anyway so you could copy it or you could just put your wallet address in there right boom all right that's in there we need to add one more seed right and that's going to be what this user profile lasts to do like what was the number of their last to do that's why it's important to update it and if you remember it does lance have any to do's after we initialized it that's the steps no so let's add one more seed this is a number and we're gonna put zero so if i set everything correctly we can hit generate right so there's a todo account and the last but not least is the authority so the authority right is going to be essentially the same thing as my address all right we can check that right here authorities that and if this works this should pass let's hit test hey let's go i'm so excited i love seeing tests pass i also like seeing tests fail because then you can like understand it a little bit better but if yours passed should we have a todo account let's find out let's do fetch all this was blank before give it a couple seconds nope just an error look at that guys we have successfully one to do account right one to do item what's the content of this to do it's test ad to do is it completed guys it's not completed and there you go we us doing this fetch all is how we fetch all of them in here every time we connect our user and we initialize it we'll always fetch the todo's automatically that's why in our solana playground we don't need a fetch to do function that's the awesome part about this it's done in a super smart way so there we go we just tested the test we just tested the ad to do it works we have one to do with an index of zero amazing okay so now that add to do is working we only have two more functions left to go guys you guys are doing so good so far all right so the next thing let's work on let's go back here let's make this smaller again the next thing i want to work on is marking the todo right so if we go here underneath this function perfect we want to create the mark to do function so how do we market to do all i have to do to get started is type in pub fn mark to do so let's write pub and fn for function mark underscore to do this is just the name and it's going to take in what right i think you guys know the answer it's going to take in context what is context right is this gonna matter right the context that we're taking in is a struct mark to do does the struct exist yet not yet it will right what else does it take in it's gonna take in the to do index right this is not referencing the struct of the to do account this is just a parameter that's labeled to do index all right what's the type that we're expecting guys let's see if you know this one right if you said you ate you're freaking genius so this mark to do takes two things the context and the index okay it's good to know next thing result result oh this thing parentheses bam then curly brackets this is the skeleton of the function okay the next thing we got to do though is before we write any logic is let's figure out what this struct is okay so we want to create a mark to do struct so it's going to go all the way down here and i'm going to put move a little bit faster guys because at this point you guys should be recognizing the pattern so to get started off we're going to derive what we're going to derive accounts now what else we're going to do we're going to get the instruction all right what's our instruction going to take in i'm taking to do idx what's the type of it ua okay what is needs what needs to go under here destruct what's the name of our strength mark to do how long does our struct live info right that's the lifetime okay there we go these curly brackets represents what is this truck made out of awesome so we need to do here is we want to get that uh user reference to user profile again right so if you remember how do we get a reference to user profile from ad to do it's going to be literally the same thing i think you can literally copy paste this but i'll just write it out okay so let's do account parentheses uh there's like the suggestion there we don't need it we can say mute because it could be mutable all right we can say seeds all right what are the seeds for user profile you guys know user tag right and what else authority cool awesome and that's it don't forget the comma here uh after seeds what do we usually write here we have bump okay and then another thing that's important the unique thing here is that has one there should only be one authority that can work with this user profile and you can set it to authority okay cool who is gaining like who where is this all for i mean it's going to be for pub user profile all right and there you go and what is the type that it's expecting uh it's going to be in a box it's going to hold in a box is holding an account and that account has info and inside that account is user profile boom boom okay cool yep it's exactly the same as before okay so we have user profile the next thing we want is actually just a reference to the to do account as well right because for this truck we need to know who is the user profile associated and what is the todo account that we want to mark all right to get a reference to that we're going to do an account here right and uh it's going to be similar i don't want that default one let me mute seeds equal to so do we use user tag nope we'll use to do tag and this is the same though it's going to take an authority dot key dot as underscore ref right parentheses it's also going to take the to do uh index yeah to do index right and then we need a dot as ref that's that's gonna be how i can read it boom so that's all the seeds that we're gonna need for that comma right what do we need here bump okay and again uh for this to do account should only be one authority so has one and the target of this has one is gonna be authority okay uh and again authority doesn't really exist just yet we're gonna make it in a second cool all of this is associated with this to do account which again lives which is expecting a type which is a box that's holding an account that is info and specifically that account is the to do account okay and now we can do the default stuff which i could copy paste again if you want to guys i'll just write it out so you can catch up account mute because it can change authority is the signer which comes from anchor lang remember right and we also have the pub system program all right cool so i'm just typing it all out info comma system just like before and comma i don't think i need to put a comma here as well all right so let me just double check that this is the same yes sir okay cool and there we go that is the mark to do struct right we have a reference we have user profile we have a todo account the authority the system program all within the struct so now time for the fun part using that in here so this is one of our simpler functions right because what's the goal of mark to do right we want to change uh marked to true right or in other words mark to do as completed yeah is that making sense okay so usually what i like to do is like to make a variable that holds a reference to it and say that is equal to and mute tx right that's the context all right how do i get into the actual to do account you can do without accounts dot to do account and we can do that because that's within the struct all right to do accounts in there okay semicolon and let's see uh oh remember our errors we're finally can use our error right our error.rs we want to use already marked right cool so we can say require bang right if the to do count dot marked right is already marked we can say to do error and from to do error which error do we want let's see our error we want already marked right so i'm saying from the todo error object get me already marked all right so it's going to run it's going to check that and if that's true then it's going to say it's already marked okay uh here we can just mark the todo which should be pretty simple mark to do how do i get the marked key right how do i get marked pretty simple we can say to do a count right because we have a variable dot marked and what should this be it should always be true right because we can only mark them as completed we can't mark it to do as uncompleted if you wanted to mark it as like you want to be able to toggle then you can do something like this to do account.marked right this is a not which makes it the opposite all right and i'm telling you these things because the whole point of this video is to show you how it works right you don't need to know all the complicated algorithms and deserialization that happens with anchor right what you should know though is what you need to change to get your result right if you don't want an index which you put instead right if you want to make it so that you can toggle and to do instead of mark to do or you can do this right for me i don't want to make it simple let's just say when i mark it to do we're just going to switch it to true okay and when we're done what do we put here okay okeydokey guess what guys that's it that's mark to do all right pretty simple all i have to do now is let's test if it works so one of the first tests i do is let's run build all right build i got an error c to do account marked true okay so it's unexpected token i see it's telling me that in mark to do they should have a semicolon essentially and now let's see if that fixes it build build successful all right so our build is successful one thing we want to do is also upgrade our contract right and deploy it so that it lives on the blockchain all right you don't have to do this but when you're whenever you want to make a change you added a change to your smart contract and you want to redeploy it click upgrade cool so we'll wait for this and let's go ahead and test it all right so let's go ahead and test our mark to do deployment was successful let's go to test you can see mark to do is there and now this is the argument so if remember what mark to do takes in it takes in the index of the one you want to mark so you need to know what to do you want to mark and it also takes in the accounts right so what accounts do you need to know it's going to be the user the todo account and who's the authority right so we have access to all of these if you forget oh you can go to do account and do a fetch all right so there we go this is the authority all right this is the to do account and the user associated with we can do a fetch all for the user all right that's going to be this this is the user profile so let's put in some things here we're again for the arguments zero right because we only have one to do pretty simple user profile i want to generate a new user profile i already have one user and that user profile was this pub key right here it should be this okay and we can paste that in there cool what's the todo account what's the todo address right so if you remember the todo address if you go under to do account you do the fetch all this right here is the to do account that was generated from last time all right we could put that there and who's the authority who has it the authority to do all this that should be my address because if you look under to do account who's the authority az3x if i go to this right here oops if you go to authority right here do my address az3x okay so that's everything you need i don't need to generate any fancy seed stuff i already have all that information let's go ahead to test and mark to do is completed and just to double check if you look what's the status of this to do false currently all right let's hit test okay it passed awesome so now we can do a fetch all and look at that it's true so we successfully marked the to do on the blockchain as true right and another cool thing is if you know the public key or the todo account address you can just paste it here and hit fetch and it'll just fetch you just the todo account all right just the authority just the idx content marked awesome so hope that makes sense to you we got one more function let's go ahead and keep crushing it all right are you guys ready for the last function on the smart contract i know i am let's go ahead to our lib again put this down and let's go so we have mark to do the last function is let's remove the todo or delete the todo right this one function is kind of special right it's special because the name is very misleading right this is going to be called remove to do right but what this actually does is decrement the to do count right that's the logic of this function right but how do we delete it to do right there's a workaround like i said in the blockchain you can't really delete anything you store on there that's the whole point it's persistent right but there is ways to uh get around that and close the account right so that's what we're going to show you how to do now so for remove to do it takes in a context just like before right and you guys are familiar with the format it's going to take in the context of a struct do we have a struct that we want to you know use with this not exactly yet it's going to be called remove to do though and it's also going to take in an index if i ask you guys why is this remove to do going to take an index of u8 why do you think it's because we want to know what exactly which to do you want to make if i had five to do is how would you know you gotta pass in the index okay so then it's going to take in result boom boom and curly brackets here that's the skeleton of the function and like i said uh what we want to do with this logic is decrement the total to do count right so it's not really deleting there's no deleting in this function itself the closing of the account right is going to happen elsewhere it's going to happen all within the struct 2 which is the cool part let's go ahead and make the struct so to make the struck we'll scroll all the way to the bottom here and what we want to do is the same old same one we want to derive the accounts right we want to get instruction instruction i hope i spelled it right and the instruction is going to take an index again so let's put idx expect a u8 an unsigned integer and the important part is what you put under here so that's all going to be related to remove to do and then we can say info all right and then put these curly brackets and anything within these curved brackets is the scope of the structure okay so what do we need in this struct we want to get accounts again all right we're not count account parentheses and let's set it up so we want to get what we want to get user profile and to do account again we didn't use user profile last time but it's good to have you know referenced all of these so we have mute here the seeds what sees does user profile take in do you remember all right at this point it should be obvious it's user tag and authority dot key dot as ref okay so we have seeds and then we got to bump right next available and there's only should have one authority so we could say has one authority okay and then underneath this is where we put user profile the type you guys should know the type by now okay info and it's going to take user profile and let's close it off awesome so that's the user profile we also want the to do to do accounting associated so we have this nope this mute and this is the key part right here right so remember this has all this stuff has to do with the user profile right this specifically has to do with the todo account itself and the remove function right if i scroll back up like i said it's not actually deleting anything in here the deleting or the removing is coming from it's going to be closed within the context and by context i mean this struct all right if you're with me so far this is where we can close the todo account right we opened its todo account we put one on there on the blockchain there's only one right now to close it right we can do that through here so we can say close it's a special property right just like has one and the close the target right of this close is the authority who can close it uh another thing cool about closing a todo account is that you actually get refunded your solana this is new like that's awesome so if you you're gonna spend solana to store stuff on the chain or that's how you're able to store stuff you spend stuff you spend a small fee right when you close the account solana will give it back to you because you're no longer using their space okay so we can do seeds all right so now that's able to close when this context is run now it's able to close we need the seeds for it and the seeds for a to do account is to do tag the authority dot key dot as underscore ref and the to do idx i believe as ref okay so we and uh brackets to do underscore idx dot add underscore to ref parenthesis then don't forget that comma there cool so again after the siege what do we usually have underneath there guys bump okay and again has one we need that right here because it shouldn't be one authority the target of has one is authority just like this cool awesome all right so now we have a closable to do account right so if we do box because it's the type that's expecting info comma and this you're right to do count close close boom okay last thing we'll need right here is the authority and the system program you guys know this one now let's account make it mutable and you can say pub authority signer info okay cool now let's get the system program one system underscore program say program info system okay cool all righty so that is it that's the remove to do struct right we're able to close the account and get some solana back right we'll see that later on when we hook it up to the front end right so i'm excited about that and then we can go ahead and write the logic for the remove to do function all right so for the remove to do function there's no deleting like i said i keep saying it over and over so you guys remember we're really just decrementing the total to do count so in order to do that do we need to get the todo account or should we work with the user profile right which one has the to do count and the answer is user profile that's the one we really need so let's go back to the function let's get user profile usually i store it in a variable and set this equal to and how do we get it all right try to pause the video and do it yourself if you understand if not don't worry it's andymu.ctx for the contacts write the remove to do context and within that context we have a user profile all right so let's look at that then so accounts dot user underscore profile boom all right so now that we have that stored in the variable we can edit it and i don't have to put space here actually say user underscore profile dot how do we get to do count to do underscore count you with me so user uh so user profile dot to do count is equal to all right you're gonna see it's similar to before user profile dot to do count right and then we can do a dot checked here all right remember we did dot checked add well there's actually a dot check sub there's actually multiple checks right that's built into anchor all right and then you also want to do on wrap and then semicolon here right and notice something i'm only decrementing the to do count and not the last todo right last todo like i said is really just last todo index right we can preserve the the latest index number in last to do and to do count is how many total to do's currently i hope that's clear now okay and i just want to put a comment here right no need to decrease last to do index right because that doesn't make sense all right this should even though the count can be different from how many indexes are where that existed right and also the to do pda is already closed in context all right so what's actually removing to do is like i said down here this close all right then it's a unique part of this macro okay and if you want to learn more about it search up close on anchor docs and you can read about more about what it does and what other properties you can do like has one enclosed okay for now this is all you need to know and what's the last thing i'm missing guys yes you guys know it's okay cool amazing guess what guys we're done with the smart contract right we just need to test if remove to do works and then we just have to hook it up to the front end and we're done so let's go ahead and test remove to do so part of testing is being able to build successfully so let's go ahead and build and see if we can run into any errors all right build successful that's what you'd like to see and again we're seeing a warning to do index because in that function mark to do and remove to do we're not actually using to do index but it's needed when we pass it in in the front end so don't worry about those warnings as long as you see build successful we're good to go and if we're okay with everything we need to upgrade and redeploy our smart contract like before luckily this might be the last time we upgrade our contract because after this we just need to hook it up to the front end so i'm gonna let this deploy and i'll check in with you guys in a bit all right deployment successful we go over to our test feature and we have removed to do and remove to do takes an argument what is the index of our to do zero right because only have one at the moment with this smart contract what is the user profile do i need to generate a new one i do not we can figure that all out here so let's go let's do a fetch at all so we can remember fetch all cool awesome so the user profile that's generated right is gonna be this the h6 right here i'm gonna hit copy and you can hit paste right here what's the todo account i already have a todo account that we want to delete it's just this one to do and that's gonna be this public key right here and if you doubleclick it actually just highlights it for you it's a cool feature on solano playground and if we hit paste there you go the authority if you remember we can double check this with the address who has the authority with this it's the wallet address right that was initialized okay so for authority we can just put my address okay and i want to make sure this is testing remove to do so let's go ahead and close this and if you look if i fetched all the studios i only have one if i remove this to do and close it how much should i have so let's go ahead and hit test let's go remove to do passed so it should close this to do account and we if i fetch all now nothing it's gone we successfully removed to do our contract is all done and since we deployed this and upgraded it it lives on the blockchain so what we need to do now is we need to go right back into vs code right and hook it up with our front end so you guys ready for the last stretch give yourself a pat on the back if you made it this far i want you guys to comment atron or i we love atron it's going to be like this let me show you guys if you guys comment this text we love atron i know you made it this far in the video atron is the lead one of the lead developers who made this wonderful tool solana playground right and i've been talking with him constantly and he's been helping me figure out how this works so shout outs to the developer for that it was a big help so now let's get coding and connect our front end okay so here we are back on vs code and all we need to do now is hook up our smart contract to our front end and what you need to know is this folder right here so let's take a look we need to take a look at this constants folder and input all the information you need like again this constant folder is given right but to set it up it's pretty simple here we're just importing pub key from solano web 3 and we're exporting all right this looks this should look familiar this is the address of your smart contract that you want to grab from the blockchain so we're going to change this and another one is this two dot json it's this one was given we want to change this to our idl from the smart contract so let's go ahead and do that right now so what i'm going to do is i'm going to get back our app right here and i'll make this smaller so we can see both and then we could do something like this bam okay cool so let's get the id and let's insert that let's double click this copy and now we're going to grab this program delete that paste there you go so constants is good we're using and now i know we're using this specific program right another thing that we're going to need to do is get the idea so how do we get the idea we're going to need to pull this by back in go into this toolbar right here click extra and idl right so you need to export this or you'll get this idl.json and if you double click it it should open it in vs code and it should look like this all right so we can make this a little bit smaller if you do alt z and take a look at this you don't have to understand what it is but if you take a look this is like essentially all the information about the program if you're coming from solidity think of this as the abi yeah so go ahead and control a right and then we're going to press command b and make sure you copy this and then your todo.js json well your 2.json right you want to control a this delete it and paste what you copied from that idea anytime you change up your program or your smart contract you always have to update it with the matching idl this is how you do it okay so now we can minimize this and go ahead and open it cool and now let's see perfect so we have our constants updated and the code that we're going to be using is going to be all in this to do.js the majority of the logic of connecting our app to the blockchain is going to be in to do.js so one of the first things that we're going to do is just take a look at the imports right we're getting anchor we're using a use effect use memory state this is our solana program right that's from constance here's our rdl it's called to do idl toast helps with success messages right it gives us little notifications system program youtube8 we're all going to be using that later okay awesome so this is our dummy todo's one of the first things that i want to start working on is this use effect right here so let's go ahead and work on that all right so we're in our to do js hook and with this use effect we're going to set up the logic about finding the user profiles and the to do accounts if you remember on the solano playground we were able to fetch all of those by clicking fetch all right here we're going to use our front end to fetch them and see if a profile exists a user profile and if a user profile exists then let's get all the to do accounts associated with that profile right that's essentially a mouthful but essentially let's write it in comments fetch user a user profile if there is a profile then get its todo accounts right that's the first step of this and if there is no user profile then you should just have the initialize state to false and we should be able to initialize user so we can be able to initialize user later right now we're just fetching stuff okay so we can remove this static thing right for now let's go ahead and start coding so the first thing i want to do is use effect if you don't know what use effect is it's a react hook that essentially when you load the page this is the code that's going to run what i want to run when i load up the page or my app i'm going to run a function called find profile accounts right this is finding user profiles it's going to make asynchronous cool and essentially we're going to say if program right so if if program if you're wondering what the hell is program let's scroll up to the top and let's see okay it's not the top here it's actually should be down here program is this right we're using memo to get anchor right to and this anchor wallet is essentially just getting the program all right and this says anchor wallet but this is just wallet okay it could just be wallet here we are passing in the program id the idl and storing all that information within program so if that exists if there is a program with all those information it all matches up and we have a public key all right so if that program exists and we are connected with our wallet address and transaction is not pending right there's no ongoing transactions and transaction pending is just a state don't need to worry about it we want to do something so if we have if the smart contract exists if there is a public key that exists and if there's nothing pending right now let's go ahead and do a try catch okay so the catch if there's an error right we just for now let's just console.log error what's the error okay cool awesome for the try though what we want to try is for one set loading to true okay so if you remember in our index we have this loading and this loading is a component and the loading js it basically just says loading right when there's a transaction happening we have some reusable ui that just indicates hey something is loading so something's loading and while something is loading here is the fun part we're going to say const profile pda and profile bump all right now this is called destructuring and we're going to structure find program address sync and that is a function and it's going to take in an array of utf8 dot encode user state right where have we seen that before all right user state all right and then from there we want public key dot to buffer and we also want to close this bracket right here and then comma program dot program id okay cool so that's that all right from there let's say const profile account right is equal to await again program.account.user profile dot fetch right and here's where we're gonna put the profile pda okay you guys got that cool so essentially we're gonna get pda and bump from our program and then from there we're going to get the profile account is going to be equal to what we get back from fetching it so this is our fetch right here so we're fetching to see if that user is initialized if not right it's not going to go through so if they were able to get data right remember when we did fetch we saw nothing sometimes because there was no user but when there was a user we were able to see one object so essentially if there is a profile account all right we're going to set the last to do remember what last to do is right and if profile account holds the pro the user profile how do i get the last to do of the user profile it's going to be profile.account dot last to do right so if you understood the structures before uh we're kind of taking what we know about the structures and getting what we need so i'm saying the last to do in my state and then you want to set initialize to true because if there is an account that means they're already initialized we can set that to true and then after that we can say so we have the account initialized we now want to get all the to do's with that account so let's say constitute equals await program right our program dot account dot to do account right it should probably be dot to do account yep that's what it's called dot oh right this is like the fetch all button that you saw and now we're gonna implement something called an author filter all right that's given you don't have to worry too much about what it does at the moment all right if you look under i believe utils off uh index yeah there's the author filter all right we're using that here that's just gonna help us get what we need and within alt author filter pass in the public key dot to string it just helps us get what we need okay okay so if this works we should have all the to do's associated with our authority and if we do have those we want to set our state to to do accounts right i don't know if you remember earlier this use effect it had set to do is two dummy to do's right that was the static data right that's what we were setting to use for now now that we have actual data that we can look at we can set this to to do accounts there we go all right and then we can have an else statement here if there is no profile account let's set initialized to false that means hey you connected your phantom wallet but you never initialized the user just yet all right so this is all setup stuff okay so then the error cancel log catch error you also can set initialize to false here and we can set the todo's right if there's a failure should we pass in to do accounts no we should pass in empty array now there's also a finally here and when it's all said and done set loading to false right because we're downloading something awesome and then when that's done it's the if statement um this is the function all right all we did was write the function find profile accounts we haven't exactly called it so let's call it here find profile accounts and from here we can say uh public key right this is called the dependency module and whatever changes if this changes use effect will run again so if we change wallets it's gonna fetch for us all right if the smart contract program changes it's gonna fetch the to do's if for whatever reason a transaction is pending it will change the todo's all right i'll fetch the todo's again all right so this is how it's going to automatically load it without us refreshing every single time so that's the reason for this use effect let's go ahead and hit save and the last thing we're going to need is to bring find profile accounts all the way to the bottom actually i take that back we actually don't need to bring it the use effect is just going to run because we're running used to do so this should be fine another thing that i want to do is if it's initialized right then let's show the array right else console.log not yet initialize so we should see this if the use effect is running properly so what i'm going to do is i'm going to open up solana playground and let's see if it works okay so if you want to run your program we can use darndev but since we also installed 905 we can also do mtl dev oops and tl dev cool awesome it's going to open up for us when you use ntl div it's on 888. there we go so let's select the wallet let's click phantom that's going to ask me for my password connect there we go okay cool so let's inspect element here let's see if the use effect is running properly account does not exist that makes sense well that's actually good it's actually true there is no error this is coming from our console log okay awesome and as you can see at the moment if i click initialize it doesn't actually use our selena playground initialize user it's using the static one which is going to load to do's but we removed the dummy to do so that's why we don't see anything here so let's set up initialize user function now all right so before we get started let's quickly understand how this works so what i'm going to do is let's make the code bigger and we want to initialize user so what function initializes the user well we have one here initialize static user right so this is what's happening in our code i hit refresh i can hit initialize and this is what happens just set initialize to true that's not really helpful when we're going to connect our code to the blockchain but we do want right let's get rid of this guy and we can't get rid of this guy just yet we got to make a new function we're going to say const initialize not stat not static user just initialize user itself okay and this function is going to be asynchronous because we're going to need to make a function call to the blockchain right we gotta wait for a response okay so in this function the first thing you want to do is check if you know the program exists program exists and wallet is connected like there is a public key connected right then right we want to run initialize user from smart contract all right this is the one that we made on solana playground we run this initialize user this frontend function calls the backend function does that make sense cool it's not going to look exactly like this but that's the gist of it okay so let's go ahead and do that the first thing we're going to do is if program and public key so both have to exist we're going to do a try catch all right error awesome so we have a try catch just like that and for the error for now let's just console.log the error okay and then for the try what we want to do is one set transaction pending to true right because now there's a transaction pending and while the transaction is pending we need to do the fine program addressing thing again so let's do cons let's get the profile pda again so to do that we need profile pda comma profile bump then we can say equals find program address sync and this is where we add the utf encode stuff so we can do the brackets all this is is lets us let our front end understand what's coming through so we're going to encode the user state comma and then we're going to public key dot to buffer okay close the bracket program.program id that's it cool so now we have that done here is where we're going to start making that transaction so to do that we can say const tx is equal to ntx stands for the transaction transaction we want is to await program and remember when i say program what does that mean that means the program that i wrote right the one that i wrote in constant all right program dot methods this is how we can get access to our smart contract functions yeah so dot methods right and from here we can do any method we want so we can do initialize uh user for example right and call it like this all right you can even format it like this just like how we did in our smart contract same thing initialize user right so we're calling the initialize user function here we put any arguments does it take in remember the arguments that it takes in it doesn't take any besides context here's our context we're going to do accounts right object here user profile is equal to the profile pda the authority is going to be a public key and the system program is going to be the system program dot program id okay so essentially this is our context and then from there we want to do our pc all right all this just to connect to the blockchain so this is our back end stuff this is us interacting with the backend you got it so after that's all said and done all right we can go ahead and we can go set initialized to true right because if this is successful right we're waiting for this to run if it's successful then that means we successfully created a user this is us like running the test except for you know real life and then we have toast here remember it gives helps us give messages we can say success fully initialized okay and that's it for the try for the error we can add that toast now toast.error error dot to string whatever the error is and then stringify it and then there is a finally that we can add here we can set transaction pending to false okay and that should be it for initialize user now here's the next part it's important to understand this because we're going to repeat this process for the rest of our smart contract functions for initialize user right it's you can see it's grayed out right we defined what the function is but we haven't passed it down right so if i go down here this is where we're going to return everything i want to bring out of this file so as you can see right initialize static user was passed down and that's why i can use it on my app so if i want to add a new thing in here i can put comma initialize user all right save that boom now my question is to you guys can i initialize the user now using the smart contract let's click on it nothing right why though why is it still doing the static initialize well that's because if you guys go over to your index.js not this one the page index you'll see something right when i click initialize on click what happens let's find that button the button should be right here all right here's the initialize button and let's look at the on click the on click is initialize oh it's glitching out initialize static user that's why it's not running a solana transaction and so how can i make it turn into the regular one can i just do this right not quite because it's gonna say give us an error it's gonna be like initialize user is undefined unless i defined it earlier all right that's fine oh okay cool so initialize static user is grayed out but we still have where is it initialize user oh it's both wrong yeah it doesn't exist right so if i click it yeah initialize user is not defined how can i bring initialize user here do you remember our custom hook used to do everything we returned is up here just add it onto here so just say initialize user hit save now let's make this bigger all right so let's just do the whole process again i refresh right the first thing our app does it checks if a wallet is connected and if it is it's going to get the todo's if it's initialized all right so let's connect our wallet okay we're connected right but there's no user associated if i untick inspect element i hit console not sources console there's no account that exists with this right so if i hit initialize oh initialize user is not a function that's not good so that's our first error let's go ahead and take a look at that initialize user is not a function let's go back here yep spelled it wrong here that would help initialize initialize okay now let's save it right that's why spelling is important guys let's hit initialize and we should get a different error now program methods initialize you see look the spelling on my code is wrong too so let's go back there let's go to to do's yeah so i'm trying to call a method called int intel right so it needs i all right because in our salon playground everything is spelled correctly so let's hit save all right this got bigger let's try this one more time all right so after i fix all the spelling click this button hey okay look this this is our transaction right here it's asking us to sign and approve that we want to initialize the user let's hit approve okay let's hit refresh hey okay it was supposed to refresh it on its own but sometimes the state glitches right but as you can see we don't have the initialize button anymore why not because if the user exists we don't see initialize button that's it right if i refresh this now no initialize button right you saw it for a second but then it updated if i disconnect my wallet and refresh there's an initialize button but i can't initialize right unless i'm connected right so that's all we did that's the setup we did right it's already initialized when i connect my wallet we're good to go all right so we can successfully initialize our user with our front end you know cool part about what we just did is that we just have to repeat that process for all the other methods right so we successfully are able to initialize a user right but if i do something like this and hit enter right this isn't going to work anymore now we can't add it to do anymore because we're not working with static data we're working with the blockchain all right so let's go ahead and do that so what we can do we can make this guy smaller again and we can actually just make this completely smaller and just work with the code okay cool so we initialized the user let's go ahead and add a todo let's add that functionality in all right so above add static to do we're going to make another function called i had to do right so add to do is our frontend function that's going to call our method on the blockchain all right so it's asynchronous and again same checks here if there's a program if there's a wallet all right let's do something and what we want to do is a try catch with an error and with that error we can just console log it and i can set up the next thing we're going to use toast toast dot error is whatever the error is dot 2 string okay awesome so what do we want to try with add to do if you take a look at initialize user what do we do after in this try catch all right it's going to be a lot of the same thing so what we need to do in this try is just set transaction pending to true all right did i send it to false later initialize user set transaction oh yeah to false okay for now it's true right because we're running a transaction okay and then after that we need the pda stuff right for the we need to get the user profile so let's get cons profile pda and the bump profile bump and this is going to equal the same thing as before find program address this long thing let's just paste it okay okay and then we also want to get all the to do accounts so in this next line we're going to say const oops const to do pda to do bump right and this is going to be equal to the same thing i'm going to just paste it because it's pretty long oops it's going to be this right here i'm going to just paste it because it's going to be pretty long but i'll just explain to you it's find program address sync again we're going to encode it to get something understandable this time we want to do state right because it's to do account still buffer the public key and we just need to get the un8 array oops from last to do right so don't need to worry about it we're just getting the last to do for later and awesome another thing that we're going to need is the const content right well actually no we don't even need content anymore we want to get the input from that form that we had to remember that input field and i wrote like learn solana on it we want to get that input and attach it to our add to do method call you understand what i said let's see if you do all right so if you remember let's bring back our front end if you remember this input field right if i write something like uh finish connecting front end right whatever i just wrote is stored in a state called input right so that means there's a string out there called finish connecting front end in a state called input and that state is also existing here there's an input state all right so theoretically if i were to console log input you'd see the finish hooking up front end or whatever right so that's that's what we need to know so let's take what we know with that and what we want to say is here if there is an input right if there's no text in there right this isn't going to run but if there is text in there what we want to do now is set oops actually no if there's an input right we should be able to just call the method so let's just say um await program dot methods all right and then we can do dot add to do right i think i have to make this uh asynchronous no okay cool dot add to do right because that's what it's called uh let's put a capital here i'm gonna put parentheses and it's gonna take in oops it's going to take in one parameter do you remember what parameter add to do takes all right it's going to take in content so what we're going to put is content then input all right because we're going to add it to do so if there is something in that input field take what's ever in there and run it as content for the ad to do all right that's all it is so then we can just do dot accounts right so here's our context and we can say the user profile is profile pda right just like before this time it's different because we have a todo account now so to do account is whatever we grabbed here right to do pda to do pda and the authority is still our public key so we can still write public key here and the system program oops not that system program system program is system program dot program id awesome okay uh last thing we need to do our pc here okay that's necessary and after that we can do toast.success successfully add it to do hey all right let's put a period here okay i think that's it for that uh now it's just up to the input okay cool so if if there's an input run the add to do put pass in the input here's the context rpc success okay that should work looks good to me toast error and then just to finally here let's do finally and let's do set transaction pending to false right because there shouldn't be a transaction pending anymore awesome so we have the ad to do but you see it's grayed out why is it greyed out right why is it grayed out that's because we need to return it so next to initialize user let's add to do all right if you return it here right back in your index page guys at the top make sure add to do exist here as well so let's check we have add to do right we have mark to do and we have removed to do already set up for you guys all right we just as you can see they're still grayed out so how can we implement it all you need to do is find where add static to do is okay let's find it should be in the form there it is so add static to do we don't need this anymore we want add to do we want to run that function instead it makes sense okay let's just test out our app all right let's do this awesome and let's just run through the whole process right so let's disconnect real quick refresh boom we can't initialize because our wallet's not connected click next select wallet select phantom and let's say uh my first to do let's hit enter what just happened right so that's our first error you saw that it refreshed why did it refresh though why do you think it refreshed right it refreshed because if you look on index let me make it easier for you guys to see if you look at index there's a form here and it's on submit every time we submit something with the form it's going to automatically refresh that's the behavior of submitting right but we don't want that behavior so we can actually do something pretty cool so if you notice on the static version of this function there's we're passing in an e for event and doing something called e dot prevent default all right it's going to prevent the default action of that function so for the default action of a form is refreshing so we need to add that here as well so let's add e and then from there we can do e dot prevent default save right and that should carry over right since we passed it all down and now let's hit refresh just to make sure and let's do create to do let's just do create to do for simplicity let's hit enter now hey our transaction is there we're going to spend this much solana it's not a lot at all right so that we can store this to do on chain right it's actually connected to a backend sick so let's hit approve and now let's see if it works that was interesting right you saw a little something happen over there right and we also saw that the create to do is still here right this is all part of the learning experience but as you can see create to do is there now and when i refresh that disappears uh we can make this more smoother right by playing with our states so let's go back to add to do real quick all right add static notice how we set input to clear right so if it's successful we can set transaction to false and set input to clear right it's going to clear that input for us all right so now that that's there let's see let's add another one let's say master solano hit enter and approve hey look at that right it cleared our input because that's what the line that we just added and it set transaction pending to true and now it's automatically updated right we can add to do's this is awesome right can we mark to do's though well we can but this is only on the front end if i were to you know figure fetch this to do account it's still going to say uh you know false right when i refresh you can see that it's not actually completing them does that make sense so that means we have to update it on the back end alright so luckily we have a function that we created already that's going to do just that so let's go ahead and do that alright let's go ahead and do the next function i'm going to make this bigger perfect so we had to do now we want to mark be able to mark it to do on the back end right because we can only change it on the front end so let's go ahead const mark to do is equal to an asynchronous function like so one thing that we will need to pass in for mark to do is the to do pda all right we need to know what the todo account associated right what to do account or essentially what to do and what to do index this is just parameters they don't mean anything just yet okay cool the rest is pretty standard we're gonna do the if program thing again and public key okay then we do a try catch the error is gonna be the same as the other ones we're going to do the console.log error and we're also going to run toast dot error is going to be yeah error going to be error dot to string like that okay awesome and then for the try we have to get the profile pda again and we don't necessarily need the to do pda this time so let's go ahead and do that so we're gonna do what i do again let me see set transaction pending okay cool i remember now you want to set transaction pending again to true you want to set loading right because we want to this might take a while so let's set loading to true and let's get our const profile pda again and profile i mean we're not if you notice i'm not really using bump it's just there in case we need it so you can remove it if you want so find program address sync it's going to be the same thing as previously all right we're going to get user state public key to buffer and program id awesome let me just double check to make sure that's correct find program just sync okay that looks right to me awesome so remember after we usually do this here is where we're going to call our method from our smart contract so to do that let's do an awake here wait program is the program to get all the functions in that program you say that methods right then you can hit enter here and then you can say the method that you want to call which was mark to do okay and mark to do is going to take in what do you remember and think back to our solana playground what did it take in it took in to do idx all right cool and for the accounts right it's just gonna be the user profile pda cool part is to do account it's just going to take in the to do pda parameter there you go now it's not granting okay and then for the authority all right it's going to be public key and for the system program system program dot program id alrighty so that is it is there anything else we need to do guys yes you didn't let me down mark it's going to be dot rpc all right shout out to all the monks we do toast dot success and then we can do here string successfully marked to do exclamation point because i'm excited so let's hit save and oh yeah we need the final here because finally when it's done we're going to set loading to false and we're gonna set transaction pending to false as well okay now we wrote the instructions for this function but it's still great because we're not using it anywhere how do we use it add it to the return or add it to the tele all right so add it to the tele mark to do hit save and if every time you return something here you have to pull it out to where you want to use it so are we saying mark to do here and i think we are yes we are oops sorry guys yes we are mark to do right there all right it's grayed out because i haven't used it in my code so let's figure out where were you saying mark to do so think back to our parent child relationship all right can i find mark to do an index do you want a reference to the app let's take a look right like can i find this mark to do button in my index no i can't because there's a to do section here alright so let's go to do section there so let's go to to do section right the child of index is to do section okay and notice how it's passing in an action the action is going to be marked to do how do i know go back to index all right look look at this first to do section i'm passing the incomplete todo's and the action that i'm passing is mark static to do for the completed to do section i'm passing remove static to do so this is the one i'm working on so the first thing i want to do is take out this static to do and now put mark to do and that's our action now right so when i go to this component underneath like if you open this action up you'd see that it actually says mark to do right so we're taking that mark to do and passing it into todo list follow that graph if you have it handy go ahead and open it up so it's going to do list right notice how it's still action so underneath action if you open it up it's still marked to do and let's see where is the action and it's going to go into todo item and we're passing that action so we passed down props like three times right so that means all the way at the bottom of to do item is right here cool and if you remember here's a memory test mark to do takes in how many parameters or arguments takes in two right we wrote it as to do pda right or in other words we can just write public key here okay we can say public key because we're also passing that down all right and just for the sake of simplicity we also want that public key for removing it to do so for mark to do it's going to be this a public key it's going to be this okay awesome okay so now we're talking right we're passing in two things mark to do is set up now it's the moment of truth okay let's go ahead and bring this guy in let's do something like this cool so which one you want to mark guys you want to master solana all right let's see if that works let's click on this hey so that's see this loading right here that's our loading state component loading in and here right we can store or not store but we're going to mark that to do item as true so if it's true it should move down that proof let's go master solana is completed and remember that problem when i refreshed it goes back i said it again refresh it's still completed because our back end our todo account on the blockchain is telling us that it's still completed it's persisting so that's awesome and i'm not going to be able to delete it to do because it's not set up yet so that's the last function are you guys ready for the last hook after this we're pretty much done all right everyone we're in the end game now so i moved back to our to do.js right i'm above remove stack to do in line 245 for me and all we need to do is say const remove to do right we don't want the static one this time and say async it's going to take two parameters again to do pda is what we'll call it and to do idx all right from there we're just going to set up the skeleton of the function like this and let's write the logic all right as you can see all the heavy lifting is on the smart contract itself so all we need to do is hook it up so if you say if program again and the usual if public key as well what do we do next set transaction pending to true what else do we do guys what else do we need any states that we need to update while we're here yes set loading a lot of coding is actually patterns all right so if you follow this pattern what should come next exactly you want the profile pda so i'm just going to paste that here because it's the same thing i wrote every single time const profile pda and bump and then just do find program address sync and get all of this stuff good to go awesome so if we have those we can say await program what's program alright it's the solana program we wrote together if i want to get the functions from that program since it's public we can do dot methods and here we can do dot remove to do and this is going to take in a parameter if you remember think back to solana playground all right takes in but to do idx all right so this is not grayed out anymore cool and for the accounts right we're going to do a dot accounts here this is essentially the context if we say user profile is the profile pda the to do account is going to be the to do pda that we pass in all right it's not going to be called to do pa it's going to be called the public key later on you'll see the authority colon public key and we just need system program i believe so let's do system program like so and capital s system program dot program id and voila okay so after that accounts there's one more thing we do dot rpc and we just use toast toast dot success i can say successfully removed to do okay and after that oh i forgot guys why don't you say something this should all be under a try all right so all that code we just wrote copy it all the way up from toast to set transaction cut go over here paste that's all in a try right and we want to catch an error if there's an error we're just going to console.log it it's all same stuff as before toast.error and we can say error.tostring and yeah cool so then we have finally again we can say set loading is what guys is it false or true all right false you got it i almost tricked myself set transaction pending though is false or true false hey okay that's it that's it for remove to do it's grayed out because we didn't use it anywhere else we just wrote the instructions we want to go over here but comma remove to do okay okay after that where do we need to go all right we are exporting it on our hook now we need to place it where it's relevant and remember i already set it up for you remove to do is right here still grayed out though where do we need to replace it where do we need to replace it you see it over here so it's very similar in terms of passing it down just like mark to do we want to put remove to do right here so remove the static word this is our new function our bigger and more awesome function remove to do okay are we done yes or no all right if you said yes you got it why are we done though because the way we set it up to pass it down it's still consistent it's reusable it's nice and dynamic let's prove it so i'm passing an action prop called remove remove to do as an action prop and it's going to go into do section to remember that for later remove to do has a new name it's called action so we go to let's do component go to do section and now we're getting that action right and we're taking it and passing it down to its child to do list and we're going to call it action action still action okay so to do list so in to do list take that action pass it to to do item as action keeping the same name okay and then from the list we got to do item the action is gonna run handle remove to do a different one and this is the actual function itself okay this is the remove to do just renamed all right has two names and pass in public key and idx that's still the same so this is essentially the same thing except here we can identify if it's removed to do right the trash icon should remove it to do and the other button should add a to do i'm going to add it to mark it to do right handle mark to do right here okay if you notice i didn't add any new code here right i just walked you through how it's getting passed down so let's bring back our front end or our local host it's going to say remove to do is not defined that's fine it might be because of spelling let's go back to index remove to do is it on here i could just warn was on here remove to do is that the same oh yeah it should be defined so that must mean in our to do just oh removed to do there we go let's save that and that would definitely help and now no more errors all right so what we need to do now is let's refresh this just for safety and if this works we're done let's click the trash icon approve transaction and look at this we get the solana back we used to store that account because remember we're closing the account right so we're gonna get some background approve and there you go we only have one to do item let's freaking go guys we finished the todo app you made it this far into the video all we have to do left is let's celebrate by pushing our changes to your repo right so we don't lose anything let's go ahead and do that now let's do this and let's go ahead and say get status all right you can see all the things we changed we added a lot and it's been a while since we did this hit add hit commit and we can just it only has one commit message finished to do app hopefully you guys stopped and pushed your changes while i was teaching so let's do git push now awesome and since we pushed to our repo guess what when you go back to here go to your netlify let's go to netlify let's log in let's go with github our solana to do app should be building now see how it's automatically building our live site is updating to the latest version of our repo and once that's done you have your live to do app and it should work just like this and again quick demo if i disconnect you'll go back to the normal page oops oh yeah that's right we got to make sure we're still running let's go back real quick let's do a uh ntl dev okay ntl dev open this up for us okay and you can see it's nothing and if i connect my wallet that's wallet number four but what if i used a different wallet let's try it wallet number three i have less solana here let's refresh just in case select wallet and let's put in the password for wallet number three and let's prove this connect and bam if you remember we only had one to do in wallet number four but as you can see there's no to do's right because every wallet that connects to our app is going to have their own set of todo accounts how awesome is that we did that using the solana blockchain so let's approve right there we go and let's see unique to do and let's hit approve unique to do all right let's disconnect all right let's switch to wallet number four again let's see if we see that cool connect wallet bam no you need to do that's it guys you made a successful solana to do dap all in one go so i hope you guys enjoyed the video my goal with these is if you learn anything at all even if it's just a little bit i'm happy so stay tuned for our next salon video and see you guys in the next one peace