okay so now we're going to go ahead and try to implement our first function the main thing that you need to know here are how to construct a list and basically add values to it so in R it's called a vector and we want to create an vector and start adding more and more values to it so we're going to learn that first because that's going to be one very important part of our pollutant mean. R function so let's go ahead and try that out so let's say I have some vector and it's just called nums and it it contains some random numbers okay it doesn't matter what numbers it has but I'm just going to put in a few numbers here now I want to construct a duplicate Vector but what I want to do is I want to pull out one value from nums at a time and by pulling out one value at a time I want to then add that value to dupe so I want to do a loop and I want to pull one value at a time and put it into a vector called dupe so I'm going to construct an empty Vector this is how you construct a numerical empty vector currently this is what nums look like and if I showed you dupe this is what dupe would look like so as you can see nums contains the numbers 26 3256 dupe contains nothing it's just an empty array or an empty Vector now I want to go through nums and pull out one value at a time and add it to dupe so how do I do that I'm going to say for I in nums so this is going to go over each value in nums so here a better variable would be for Num in nums and what I'm going to do is I'm going to add that variable so here let's open a new line and I'm going to say create a new variable called dupe and what the new variable dupe will be is actually a concatenation of the already constructed array dupe so already what dupe previously was except we're going to add one more value to it this time which is going to be numb okay so what we're doing here we're saying dupe is now just itself plus a new value so this is how we pretty much add values at the end of the vector so once I run this and this finishes running you're going to see that dupe is going to now be an identical Vector um just like nums it's going to look just like that I'm going to run it and I have to close my squiggly brackets here now let's take a look at what dupe is and you can see it's 263 256 that's the first very important part in writing our function so I'm going to leave this one here and I'm going to start now trying to write the function and as we go along I'm going to try to pretty much quiz you on it so feel free to pause your video and implement the functions by yourself as we go on but okay so the last thing that you need to know about here is how to access one of the columns so let's say that I have already have one of the CSV files stored in the variable data so I'm going to do head data okay and this is going to show you the top few lines now one way to get access to the columns is this way and I think you know about this way if I do sulfate but here's one really big problem that occurs here so let's say that I make some variable like y equal to sulfate okay and now if I do data and I do the dollar sign and I do why it has no idea what that is I have to literally type in dollar sign sulfate every time for that to work meaning in fact that if if I use some variable it's not going to work so from now on what I'm going to advise you to do is forget about the dollar sign and just avoid it the best you can instead use the two bracket indexing so here if you want to get the sulfate what I would say is do two brackets and do sulfate this is going to get the sulfate column and that pretty much got you the same thing so here you can also do mean data Sul uh you have to make sure you put quotes around it sulfate and what we can say is n. RM equal true and this is one way to get the mean this is one thing that was throwing our function off and made our function incorrect last time and we need to use the double bracket here okay now we're pretty much ready to put this all together and finish our first function okay so now we are ready to write our function from scratch so let's get started the function is called pollutant mean function the first argument is going to be the directory or the path the second argument is going to be what function you want to pass in uh what what query you want to pass in so are you looking for sulfate are you looking for nitrate or are you looking for sodium pretty much whatever you're looking for that's going to be your pollutant ID is going to be the file names so here we're going to say the optional argument is going to be all of them all 332 unless the user specifies their desired range so let's create a variable called file list and we've done this before but we're going to basically list all the files path is going to equal to directory so whatever we pass it in the directory pattern remember is going to be your all extensions are ending as CSV so that's going to be your pattern that you're looking for cuz it's the files are called 00 1.csv 002 CSV and so on full name full names we want the full path of the file so we don't just want 001 CSV 002 we want downloads slpc data sl001 that CSV that's a lot more useful for us now I'm going to create that empty Vector like we talked about in the previous video and the Constructor is and the Constructor here is going to be just called numer so the Constructor here is called uh numeric we are calling it values and it's just an empty Vector right now so we're going to say for I in ID so this is just any number in one and 332 unless user specifies then it'll be something like 2 through 10 or 1 through 10 whatnot we're going to create something data which is just just going to be your file list and that number I think you get that part and now remember the trick we want to do is we want to go through each file and every time we calculate the mean from a file we need to save that mean then we need to go through another file calculate the mean save that mean the reason why we created this Vector in line three is is for that exact reason so we can go through multiple files and store all our values in here before we iterate to the next Loop because every time you loop again you're losing your previous information so the reason why we're using a vector is so it can retain the information for a longer period of time so here what we're doing is we're saying hey the new Vector values is just going to be the previous Vector values concatenated with now the new piece of information we have which is data so the new file and we just pretty much append one mean value to values so here remember to instead of using the dollar sign and saying pollutant you're going to get an error because remember here you would have to only say sulfate otherwise you get an error or you have to say nitrate otherwise you get an error so here the variable pollutant would mean nothing so we're actually going to have to use this index with the double brackets and pass in pollutant and remember pollutant is going to be something like sulfate or nitrate it's going to be like a string and we're going to close this and now all we do at the end is we just get the mean and pretty much remove our nonusable values or our nonavailable values rather na okay so this is working correctly now to test that this is working correctly let's just do a test case here and let's say pollutant mean and I'm going to put in the location of where this is at so let's do that drop box GitHub Cera okay so that's the path and we want to look for sulfate and if I run this we should get back 3189 followed by a few numbers so let's try to run this and see what we get back okay so I'm going to oh whoops it should be called pollutant meat save and now let's run it so it's taking a second and you can't see out of the screen but this is the result that I got in this case because that part is out of the screencast video scope but this is the main result that I got so if you run this code and you run it on spec data you're going to get the same result that's how you code the pollutant mean function from scratch in the next video we're going to code the second function okay