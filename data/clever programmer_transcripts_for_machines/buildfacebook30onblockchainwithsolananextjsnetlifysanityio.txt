in this video you'll build the facebook web 3.0 dap with nexjs you'll style this app using kelman css so why i'm so excited about this particular project specifically is because we've been doing all of our projects on the ethereum network this is going to be our first project on the solana network why i like solana a lot is because they have the fastest user experience their user experience is phenomenal the transactions are super cheap i mean something that'll cost you 100 or 200 in ethereum on solano will cost you one cent or two cents so it's literally the cheapest network and then it's very very fast and recently i even had justin khan on who was the founder of twitch he built his own gaming marketplace using solana because it has a wonderful user experience why this is one of my favorite builds is your data is actually going to be stored on chain so we're not going to need a back end for this we're going to be storing data on the blockchain you'll learn how to create your own program on the solana blockchain using rus framework called anchor so in other words basically you'll be building a fully decentralized database using solana you'll be using cargo to compile and deploy your smart contract think of cargo like hard hat we'll use phantom wallet to authenticate the users that actually sign up onto this app we'll use the solana web3 package to interact with our smart contract and the blockchain we'll use the context api inside of react.js to store and manage our state at any given point we'll use sanity as our database to store our users and their profiles you'll be able to view and confirm these transactions over on the solana explorer to verify that they are indeed 100 percent real will then deploy this app using netlify and host your facebook web 3.0 blockchain app onto the internet with that said i hope you are excited this is going to be one of the best blockchain apps that are out there on the internet right before we continue please do me a huge favor smash that like button turn it blue or white or whatever youtube color it turns into we want to break a thousand likes so that i could keep my job and lance who is going to also help you out as one of the instructors of this build he gets to keep his job with that said let's get right into it right before we get started and start coding i just want to let you know that we're doing a collab with buildspace which is one of the best website education platforms in the world and you guys are going to be getting nft that proves you completed this project and it's going to be in collab with bill space and clever programmer it's gonna look sick build space also has an incredible community of web three developers who you can learn together with in their discord and they're very active last but not least build space is also helping new web3 developers like yourself get matched up with top tier companies like adidas or alchemy for premium high contracts and i'm talking about ten to twenty thousand dollars a month contracts and their vision is amazing i even met their ceo farza and he's just an incredible amazing human being so i'm really excited about this collab and the best part for you guys it's completely free all you have to do is just go down below click the link in the description it's going to take you to a landing page and it's going to ask you to connect your wallet and once you connect your wallet you're good to go and then when you do this build and you complete it that wallet will be able to verify you did it you'll get your own nft and you'll get the entire community and everything that goes with it okay so again it's completely free go ahead sign up for that right now and with that said let's just jump right into the video all right so let's just demo this app right now so i hope it blows your mind so over here i can see that i'm on my facebook page boom that's all good i can also go ahead and connect my wallet so i'm gonna go ahead click that and connect it with my phantom wallet boom okay beautiful now that my wallet is connected i'm logged in and now i'm actually inside of the app so now you can see it has given me image at the top and i have a username and i can go ahead and write a post on the solana blockchain app okay i'm just gonna go ahead and type that in beautiful it's posting so let's give it a few seconds because remember this is being stored on the blockchain so it can take a little bit of time for it to show up so we'll just wait for a couple of seconds boom looks like it's good to go it's showing up that's awesome why this is so freaking crazy is that is on the blockchain that is not a database that is on the decentralized blockchain that's freaking insane you can even reply to that comment so let's go ahead click reply so click reply let's add in a reply boom let's hit enter let's wait for that reply to go through boom look at that that reply just went through that reply is also stored onto the blockchain there's no server side there are no databases that's the freaking crazy part all of this information is stored on decentralized nodes it's literally stored on the solana blockchain that's just to me one of the coolest freaking things and it can't be deleted or removed it's permanently out there so you know be careful what you post on there because it won't ever go away you won't be able to delete it but that said that's the demo of the app i think this would be great for your portfolio and for your resume so when you build this out definitely put it on there you know if you go especially try to apply to solana jobs or rush jobs and they're looking for a lot of solana engineers this would definitely help you a lot with that said we're now going to start coding it up let's go all right let's start coding this up i'm going to open up my command line whoops it looks a little bit too big so we're going to make it a little bit smaller that's what she said just kidding here we go so i'm going to go npx create next and i'm going to pass it this e flag and i'm going to say with tailwind css and the project we're going to name it facebook solana let's hit enter and let's wait for this project to completely install okay and then once this project is installed what i can do is i can go ahead and open this project up all right so let's do ls i'm going to cd into this project so i'm just going to say cd facebook solana just like this now i'm here and i'm just going to go ahead and do code and do period okay and that's going to open this up in visual studio code if you don't have this code period functionality just open up your visual studio code and you can open it up manually as well and i'll show you that in just a second so my visual studio code has opened up right here okay so what you could do is if you couldn't open it up in that cool way you could just hit open and then find where you put this file all right and then you can just so see in here rafikaze facebook solana and you can just hit open so that's another way of doing it now what we're going to do is just we're just going to make sure our app and everything is running so i'm going to go ahead to my index file here and hit command j and i will simply just do yarn dev here and that will start up the server and then we're just going to go ahead on the right hand side open up chrome so we can see it okay and let's go to our local host 3000 and boom there you go our server and our app is up and running i'm going to make this onethird and make this twothird of the screen so you guys can see the code and the app better so this is our just basic setup to just get started and see the app running now we're going to start setting up all of the things that we need like sanity netlify solana and then once we're done setting up that whole thing we're then going to start jumping in coding and hacking this app up so i'm excited i'll see you there in a second all right so let's go ahead and install phantom wallet this is going to be very important we're going to need that for the rest of the build any solana related thing that you're going to need to do you're going to need to use phantom so let's just install it okay and get it over with all right phantom wallet it's the most beautiful the ui ux of this is like 100 times better than anything i've seen um i personally like this a lot more than a meta mask and yeah just a wonderful experience and then their app is phenomenal too as you can see here so just go here and install their chrome app and you can also download this on your on your ios device as well so let's hit download and then we'll scroll down here it says phantom for desktop and since i'm on chrome i'm going to go ahead and hit chrome here install okay so this came up we're going to hit add to chrome and we're going to say add extension all right here we go crypto wallet reimagined let's assume you don't have a wallet yet so let's just hit create new wallet we're gonna set our password we're gonna say i agree to the terms and service uh here's our secret recovery phrase which you should not show to anybody because then anybody can get your wallet so really bad do not show it to anybody keep it safe okay put it in a dashlane type of app or put it in a notes app and lock that notes um so you can always recover your wallet i'm gonna show it because i'm just making a dummy wallet here so it doesn't matter and then just go ahead and say i saved my secret recovery phrase hit continue okay and then you can open it up with this keyboard shortcut option shift p okay so we're done that's it now we should have a phantom wallet where is it it's in our extensions right there we're gonna pin it so it's top here so now i can actually just click this phantom wallet here and it should basically show that you have zero dollars worth of anything in here and your wallet is up and running you can send this wallet address to somebody you can actually send solana to this you know receive solana or whatever you want here you can also buy things like usdc uh if you buy nfts they're gonna go in your collectibles here so it's pretty freaking awesome wallet and you can create new wallets too and name them but for now we're just going to leave this as is this is just part of the setup and congratulations you've installed phantom all right so one more thing we're going to do here with our wallet is uh settings at the bottom right so right there hit settings and scroll down we're going to go over change network so let's click that and we're going to choose devnet here so let's go ahead and select devnet so we're going to be kind of in developer mode okay so just make sure you're on devnet and then you should be good alright and the next thing we're going to do so on devnet you you're not going to be dealing with real money you're going to be dealing with fake money okay and that's perfect for when you're developing in test mode because you don't want to be using real money yet we're also going to go to soulfaucet.com here and uh here we're gonna get our wallet address so i'm gonna go ahead uh copy this wallet address i'm gonna paste it and basically let's just say i want like i don't know 12 sold to my devnet so i'm going to say 12 and i'm going to choose devnet here oh it says too large no problem let's go ahead pick nine go ahead and hit devnet successful airdrop successfully dropped and was it so i'm imagining that we'll soon see it here okay so it's probably gonna take like between 10 to 20 seconds and then it should pop up and we should have it okay so let's keep an eye out on that you know what while i'm here i might as well just send one more and view this transaction on solana just to see on soul explorer takes for this so the second one was apparently successful perfect do we have it yet so while i was waiting um because it was taking too long i just decided to go ahead send myself like two airdrop and then hit devnet and then that actually came to my wallet pretty quickly so now i have uh two and now i have four so like when i was sending myself the big chunks it wasn't coming through but when i sent myself like small amounts it actually comes through like almost instantaneously which is kind of nuts but yeah so now we have four sole 534 just more than enough to do what we need to do we're not going to need that much really but uh this should be a good start now we're up to six soul so just keep sending yourself twos if the nines and the tens or the sevens are not working for you okay with that said now your phantom wallet is set up it's on the devnet and you have money to play with so this is great our wallet is not set up let's move on all right now what we're gonna get ready to do is we're gonna get ready to deploy this app and we're going to deploy it with netlify so we're just going to set that up even though we're going to deploy it later we're just going to finish doing the setup right now so what i want you to do is click the link in the description below that we have for netlify okay we'll pop up the link on the screen here as well so you could see it so basically just go to ntl dot fyi slash clever hit enter okay now i'll bring you to this page which is netlify's landing page okay and then what i want you to do is just simply go ahead and hit get started for free and then just sign up okay so if you have github i like to just sign up with github you can also sign up with email and it'll ask you for your username and password put that in you can use this method for future logins so you can click that and for me because i have a mobile app on github it sent me a request a notification on my phone so i'm gonna go ahead and authorize the app with two factor authentication with the github app on my mobile phone now i'm simply just going to choose approve here on my app and look at that boom i am absolutely invisible and blurred out of my freaking mind i apologize about that and we're logged in to netlify right so i'm on the netlify homepage everything looks beautiful and ready to go i am completely set up to rock and roll so this will come back to later so in terms of the basic bare bones set up for netlify we are done right now what's up guys lance from the future here and i wanted to walk you guys through on how to set up and install sanity so you guys just finished installing phantom what you guys need to do next after you have your whole next app and tailwind installed you want to also make sure you make a new folder oops you also want to make sure you make a new folder within your project and you want to studio the studio folder is where sanity where our sanity is going to be initialized so what you want to do next is cd into the studio and head over to sanity.io cleverprogrammer so that you can use their nice code so i have that over here head over to this website what you'll see is these two instructions to get the free boosted plan and all you have to do is just copy this so for me i already have extended the sanity cli tool installed all we need to do now is just copy this coupon send it the init coupon clever programmer if you do that you get the free boosted plan okay awesome so i'm gonna put that into the terminal hit enter awesome i already have a sanity account and i'm going to call my project amazon clone blockchain i'm sorry not amazon i'm going to call my project facebook clone blockchain go ahead and hit enter we can use the default data that's our project output and we can select clean project with no predefined all right there we go it looks like it's done it's done initializing i think if i log in to log in real quick there it is you can see the facebook clone blockchain because we have sanity setup and we're good to go all you need to do now is to run our studio you can just say sanity start okay so now it's done every time you want to look at your sanity studio all you have to do is go to localhost and go instead of 3000 it's going to be 333. this is the port that they use and if you connect to it google awesome cool and it's empty which makes sense so let's actually take this moment to set up those schemas so i'm gonna go into the studio folder as you can see we have all the files now that it's initialized what we need to do is go into your schemas.js if you look here we let's go ahead and clean a lot of these comments out cool so now it's cleaned out the idea here is to create the actual user schema and then add it in this array so what does that mean we're gonna have to make a new file in this folder and say user scheme dot js yeah user schema.js okay cool and to set up your own schema you can say export const the name of it and set it equal to an object and remember this is the schema file for a user so that means the name of this will be users the type will be just document title can be users that will be and here are the fields or essentially the what we'll call like the keys of the object or the document so i'll save fields here and the first one the first thing that we want to keep track of when we're talking about a user document is going to be the name what is that user's name so i want to say name the name of the name will be name and then for the type it will be a string and then the title be capital cool so we have another another field that we care about and this one will be that person's wallet address remember we're going to be using phantom later on in this project you guys just installed this is where we also need to store their wallet address and that will be stored as a string so make sure you specify the type okay and the title is usually just the same thing as name but just with the capital letter that's more for our studio i'll say wallet okay and last but not least i want to be able to save the image url with the user so i'll do that by saying name is profile image and the title will be capital file okay cool go ahead and hit save and make sure you're doing export cons because what you can do now is when you go to your schema.js we can do an import user schema from user schema so if we save our studio shouldn't be empty now it should actually show up the users rebuild bundle see where we're able to add it oh that's right we also have to make sure in order to do that we have to put a user scheme in here and since there's one i'll just format it like that nope not all caps there we go now that should do it we're importing user schema and passing it in here someone with this load i'll be right back hey there we go guys so now we have user obviously we don't have any users yet but later on in this video i'm going to show you guys how to set up those routes and create a user for each one that logs in sounds good we have the user schemas done last thing for this setup we're just gonna need to create a new folder this is what we usually call our lib folder and within that lib folder we're gonna have our sanity yep and our other sanity.js this is where we're going to import that client import sanity client from at sanity client if you don't see that you just make sure you have to ins at sanity and you might be missing a package but if you do you're good to go and now that i'm thinking about it while we're here you guys might have done this with kazi but for me i have to set up a dot env so in my.emv this is where in my.vnb this is where i'm going to put my project id and sanity token so that's what i'll call it sandy sanity project underscore id and set it equal to whatever it is then we do sanity underscore token and to get these two things all to do is go to your sanity you can click that project which is facebook blockchain and look at that project id is already there so i'm gonna click paste there's the project id to get the token you actually need to go to api and add an api token you can name this whatever you want you just name it token make sure you click editor hit save boom it's gonna generate a unique api token yours will look completely different from but just go ahead and paste it on there save and go back to your standard insanity.js let's finish building this up so to finish building it out you just say export const client we're going to be using this client later on in the video to set up our to create a user and get a user but for now what we want to do here is set up the client so we say the project of id is going to be the process dot env dot sanity project underscore id cool the data set we said we'll set it to production and the api version you can set that to b1 okay from there we can just set up the token which will be similar process.enb dot sanity believe it's underscore token okay last but not least use cdn this will be set to false cool make sure you're exporting the con and we are good to go with sanity i'll be sending it back to qazi and i'll see you guys later for the next part all right so now we're gonna install solana and russ on our computer and get that whole thing set up so here's what i'm going to just let's just go to google we're just going to type in install solana anchor okay and anchor is something i'll talk about in a second but basically it think of think of javascript and react and how react makes javascript easier when you're writing solana code you have to write in a language called rust rust is pretty painful to write in so it's better to actually use a framework called anchor anchor will make writing rust easier okay and don't worry we'll learn this together and do this all together okay so don't freak out yes it's a new language but it's very popular and why we're choosing the solana chain for this project is solana chain is the fastest experience if we did this on solidity good luck you'd be waiting like five minutes for each comment to show up with solana it shows up fast it's the fastest chain and i think it's the best user experience by far so here we go now we gotta install rust so i'm gonna go ahead i'm going to copy this and i'm just going to open up my command line okay so let's open up command line and i'm just going to go back to like my home page okay and we're going to start installing all right now we're just basically going to write these lines that we see here on the right hand side and we're going to write them one by one so we're gonna start off with this curl one okay so uh let's go ahead highlight it and i'm gonna copy it do not hit the copy button just copy it manually or right click and copy whichever one you want and then we're gonna go to my command line and i'm just gonna hit paste and let's hit end okay so that should be downloading it now let's make this a little bit smaller all right we're gonna go ahead and choose the first one so we're gonna proceed with installation which is gonna be the default installation okay so let's go ahead and hit one on this and hit enter okay it's installing it make this a little bit smaller okay so this installation is gonna take some time but once this is done the next commands that we're gonna be looking at are our source and then rust up component okay so perfect so to configure your current shell run this so just copy this exact thing oh actually copy this entire thing right here and we're just gonna hit enter okay so perfect then the last line we're going to write is that one rest up component addressed fmt and hit enter perfect so it says component russ smt for target blah blah is up to so this means we're done installing rust on our computer all right now so to prove that we have rust installed and it's working here's what we want to do essentially we want to be able to write the simplest hello world program in rust then we're just going to try running it okay so i'm going to just do vi main.rs okay you could also just make a new file called main.rs from your visual studio code if you feel more comfortable i feel comfortable being able to do it from vim so i'm gonna do that but if that's annoying for you and you don't know how to use them it's okay just literally make this file with visual studio code and you should be fine i'm gonna go in here i'm just gonna write this okay we're gonna say print line and we're gonna say hello youtube instead of hello world okay and that's i'm going to close it out and i'm going to exit with shift zz and then um then the next step next thing that i need to do is uh write this command here rust main.rs rustymain.rs actually compile it i'm going to go russcmain.rs and i compile this file that i created now it's compiled and now i can actually just do dot slash main and actually just run it and say hello youtube perfect if you've gone this far great job that means you have rust actually installed on your computer and it's fully working fantastic with that said we're gonna keep going so now we're gonna go back and we're gonna go ahead and actually install solana here so i'm just going to copy this you can hit that copy clipboard button too here that's fine line over there and i'm simply going to paste it and let's hit enter this will install solana on mac os and linux okay look at the instructions on how to do it for windows as well but i believe that you should be able to do it in a similar similar way okay it's installing here it's extracting everything once we have salon installed we're gonna start working and to get our anchor and everything installed because we're going to need that for our project okay there we go alana is called adding export path users okay great close and reopen your terminal so basically what we're going to do is instructions it says run the following in your existing shell so i'm going to go ahead copy this paste it and i'm going to hit enter now it's added the things that it needed to add to the path that way whenever run these files or i need to look for these files my terminal and my command line tools are able to find it because it's in my path and it's a known path now what we're going to do is we're going to go ahead and install anchor so let's go ahead copy this line here go over to my command line paste it hit enter run the same command but just add the word sudo at the start type in your computer password and just try installing it again boom this time it looks like it installed without a problem so that's a great sign thing we're gonna need is we're gonna now add a cargo let's go ahead copy this here paste and hit enter and it should work installing this if you're on you're gonna also need to add and run this command next okay um anything else you don't need to run this command okay this is just for linux for us if you're on a mac like after this you're going to be done and pretty much ready to rock and roll look at that serum decks auction house metaplex and all kinds of useful stuff here with anchor that's going to make our development much much much easier and really the purpose behind the anchor is it makes your development a lot simpler so there's a bunch of stuff with solana and rust that worry about especially with native rust like serialization and deserialization of your code that's not fun a lot of them in the solana community call it like eating class but if you do it with anchor it's going to simplify and handle a lot of that for you so basically it's going to make your life a heck of a lot easier so you're not going to really need to worry about all of that stuff so art is compiling and our installation is done here so let's wait for that looks like that was installed perfectly now all we need to do is just go ahead check out which version of anchor we have and that will verify if we have installed this properly it looks like the anchor cli is indeed installed correctly okay so we have verified that and that is perfect let's also go ahead and verify that we have installed solana the exact same way and we have installed it correctly so let's take a look i'm just going to do solana version here boom looks like solana and anchor were both actually installed completely correctly but that's a great sign all right so now what we want to do after we have everything installed with solana is we need to go ahead and set up our own wallet so what i'm going to do in order to do this is we're just going to go ahead say solana and i'm going to say kegen new and what this will do is actually generate a new wallet for me and uh let's see what it says here this wallet by the way we're making because we're going to need this to sign off our contracts like for example when somebody's making a facebook post so this is for a coding side okay so i'm gonna just leave this empty and i'm gonna hit enter cool so boom it just gave me a public key which you can copy if you want all right save this seed phrase and your to recover your new key pair you can also save this here as well okay so i'm just going to go ahead copy this you could put it wherever you want okay i'm just going to kind of do it in a really stupid way right now and i'm just going to put it in my coding file right here okay but please do not do that do not put this in your code file put this somewhere safe okay so let's go here boom and i'm going to put that right there just so i have it so keep these safe next thing that we want to do is we want to connect this wallet that we created to the devnet okay because we don't want right now this one is not going to be on the main net this one needs to be on the devnet what i want to do here is i'm just a solana config and it says set url and here's https api.devnet.solana.com make sure you have the https colon slash uh written out correctly here and then just hit enter boom there we go just gave us our pc url a websocket url and it says commitment level confirmed so it's confirmed that this happened and it actually even gave me a key pair path which is in my config solana id.json so this is actually stored on my local computer perfect config file it tells me where it's at it's a yaml file uh yml at the end all right now you can actually do look at this solana makes it so freaking clean look at this i can actually check my balance by doing salona balance look at that i get zero soul it's telling me exactly what i have and then i can also do solana address and this will actually tell me uh what my wallet address is right so boom this is my public address of the wallet what's so nice about this is whenever i'm working with any other tool or whatever their command line tools are really bad or you have to pass some weird flags and things like that this is just so clean so on a balance salon address and boom it just shows you everything so far from a developer experience perspective i mean i'm really enjoying it i hope that you are as well from watching this let's keep going now the last thing i need to do is i need to like airdrop some amount of soul so i want to airdrop some fake soul into this okay and just so you guys don't know clearly what solana is solana offers a really beautiful user experience and it's really fast it's one of the fastest blockchains in the world that's why we're using solana just because it makes a really seamless amazing experience and if you were to go on coin market cap or something like that you'll see it's one of the top 10 coins it has been for a while now and it's one of the fastest growing i think right now in the developer world it's probably right behind ethereum and maybe one day who knows it might catch up and actually win so we'll see um let's go ahead and get some fake soul air dropped so i'm gonna go ahead and say solana airdrop one and let's hit enter requesting airdrop of one sole finalizing and so beautiful right with the solidity you have to do all kinds of weird stuff to create a wallet to airdrop it here so nice and easy with two lines of code we have it we have this air drop so i'm gonna say solana balance and uh it actually does tell me that i have one balance and if i wanted more i can just air drop it again i wish i could do this on the main net that would be nice i'd become very rich very very quickly so there we go we have to sold whoops what the heck did i just do there we got two sole so we're good our wallet is ready to go uh and now we're gonna go ahead from here all right now what we're gonna do is we're actually gonna initialize this project using anchor so we're ready to rock and roll okay so going over i'm going to create a new folder i'm going to call it call it whatever you want like for solidity normally we would call it like smart contract you could still kind of call it here i'm just going to call it programs because in solana that's kind of how they name things now what i'm going to do for my command line is i'm going to cd into programs and then in here i'm just going to say anchor init and then do period because i want to be initializing that anchor right here so just hit enter now we're going to start the installation process so we got this error let's fix this real quick all right actually so with anchor you actually have to give it a project name you can't just say period here so what i'm going to do is i'm going to go ahead delete this folder i just created in programs and we'll back out or oops that's annoying okay so i'm just going to go to facebook solana all right the main folder that the project is in and then here i'm just going to say anchor in it and we're just going to say programs and hit enter all right so if it was giving you errors like it was giving me apparently my command line that i installed with here was detecting when i wrote solana but when i was writing solana in my vs code command line it was not detecting it i tried restarting and opening up visual studio code again it still didn't work so what i decided to do is in my visual studio code command line i just went ahead and installed rust from scratch then copied and pasted this command source then the rest up command but then that installed rust for me then i installed solana by copying this command pasting it in and writing it here that installs solana so now when i write solana it does pull it up perfect and now solana is working solana balance is working and now we're good to go so what we're gonna do now is we're gonna just go ahead and say inet and i'm just gonna say programs basically it just created this folder right here if you can see it boom it's called programs it's initializing it with anchor and now when i go inside look at that how nice that is anchor just made all of these nice things for us so that was super easy all right now that installed everything let's click programs here and inside of programs you'll see i have a folder called programs go inside there inside there's another program and then click source and go to lib.rs okay this is where we're going to be writing our smart contract so think of it like this the entire thing is your app okay or at least this is your front end and then this program thing that's your smart contract portion now that we're inside of this lib.rs we're going to go ahead and make a structure for our app okay but here's what i'm going to do i'm going to create a post account structure okay and we're going to be using something called struct which is just like think of it kind of like you're defining the shape of an object in javascript you have these objects right things go inside of them so this here is you're just defining the shape of it what that object would look like so now i'm going to do account and whenever you're trying to store data or information on chain on solana do something like this where you're gonna do hashtag this weird bracket thing and then account you're just letting it know this is an account okay cool let's go down and let's write our our code oh wow that is super cool that github autopilot can even understand rust code and solana code which is super nice but um yeah we're not going to be making this but this is what ours will kind of look like what we're about to do so we're going to say pub struct and we're going to say post account all right and then the first thing is going to be our signer address so i'm going to say we're just going to call it authority so who has authority of this post we're going to say pub key so just to understand what a post account would be is hey what is the account that made this post on facebook who made this post this is what this is gonna uh host and again what's so freaking cool about this you know we haven't talked about this but this is the first freaking project where we're gonna store the data on a blockchain so literally you don't even have a back end anymore you don't have a database yet you can store all your information that is freaking cool right you have to pay for anything you have to sign up for anything you can store this data on this worldwide ledger all right next thing we're going to need is we're going to need text so i'm going to say text and this is going to be of type string so the first thing is type hub key which is your public key next up we're going to have poster name and then we're also going to have a poster url this is going to be a string and we're going to go ahead and go comment count and i'm gonna go use six four on this right we're gonna need a post index and i'm gonna need a post time so when the post happens we're gonna say i six four when it comes to the post accounts truck that's all this is the information that's going to be stored so we're just kind of defining a data structure here next up what we're going to be building is one more after this okay so let's go ahead and work on that all right now what we're going to do guys is i'm going to go ahead delete this right now okay we're going to write this from scratch so remember when i'm making something like this right so i'm gonna have this like this is just a struct simple stuff so i'm literally just going to say account up here when i have something more complicated that i need to do i'm actually gonna say derive accounts like this okay and then now underneath here i'm gonna make a struct and i'm gonna create state i'm gonna pass an info here and then we're gonna do the following so i need to create count block okay and this account block is gonna have init i will give it a couple of things so let's go here let's go like this i'll give it i'll initialize it i'm going to give it certain seeds so the seeds that i'm going to give it i'm going to put it in bytes so i'm going to say state and then i'm just going to say turn that to ref like this okay but there we go so that's gonna automatically generate a random seed every time like this state variable is created so imagine like i want to create a state that's unique every single time well if for whatever reason my state ends up being the same as your state bump is this algorithm that'll just like uh make it unique when it matches the same it'll just go nope this is the same one so give me just another number or another code so that it doesn't match the previous one so essentially it'll allow me to always have a unique id okay kind of like in databases i also need to give it a pair and so for pair i'm just gonna say it's gonna be the authority okay and then we'll go here and space is going to be we're gonna use size of okay for this and we're going to say it's going to be the size of the state account so we haven't made the state account yet but we will make it soon so we have a post account but we'll also make a state account soon and i'm just going to say plus 8. going underneath here this is gonna be the state variable and this is gonna have the special thing called account which is gonna have info and then we're gonna say state account if some of this stuff doesn't make sense to you right now just totally okay this has to do with lifetimes inside of russ and anchor this will make more sense as we go along for now just trust me and just go along these things will get clear as we move on this whole account thing i'm just going to move it to one line just to show you something for now this entire account thing right here is just for this specific variable state here i'm giving i'm saying initialize the state this state should have the specific seed here the state should have this bump algorithm and a pair so that's where that's being used okay so i just wanted to clarify that this block of code goes along with this so we got our state now let's go down the other thing that we're going to need is the authority okay so the authority this is the signer who has actually paid the transaction fee so let's move this let's go down here let's move this back i'm going to say account okay we're going to go mute here and then i'm going to go authority like that and the signer is a special reserved word that we have and that allows us to get access to the signer and info is the lifetime thing that i mentioned okay so we're just gonna pass that right there so this is the authority variable that we're using here as well okay and this mute here that i wrote that just means this is immutable meaning that we can change authority authority can be me and then next time it could be somebody else and next time it could be somebody else so it's it's something that's mutable it's some it's something that's changeable all right let's put a comma here let's go down now we're gonna make our system program so don't really need to have this comment here that's just for for you we're gonna say system program things need to be snake cased in when you're writing in rust in an anchor so we're gonna do system underscore program and uh here for system program i'm just gonna say unchecked account and leave that as this now i do know that unchecked accounts can be a security risk but this is where just doing this as a demo educational purpose is building this so for one of your first solana apps it should be fine when you want to move it to production you need to make it more secure and then we'll have our token program portion okay so basically here i'm going to make our token program and we're just going to be a program take an info and it's going to be of type token and right above this i'm going to say this is going to be an account it's going to have a constraint and that constraint is going to be the token program where the token program key is this token this token's id so i've put this constraint and now i have my token program set up is uh now done and we just got to make a couple of more things and then we should be done with this entire slana or this rust smart contract and this is really going to be one of the most difficult and kind of confusing parts but just hang in there with me we're going to build it out step by step and once you're done with this the rest of the project's going to be smooth sailing from there all right so now we're just going to make the state account that we created over here so i'm going to just scroll down right over here we're gonna go and say this is gonna be an account block gonna be simple so i'm just gonna do my hashtag bracket and then i'm gonna have a pub struct and we're gonna say it's gonna be a state account just like this and i'm gonna say that first this is gonna be the signer address so we're gonna just say authority i'm gonna give it a pub key so that's great and then we're gonna also have our post account so how many posts are here so i'm gonna say post count and it's gonna be a u64 and for those of you who are nerdy and want to know exactly what this is this is just an unsigned integer that's 64bit so basically you're just gonna store numbers in here and we're just creating the struct um we're defining state account here okay and we're sorry we're using state account here but we're defining this struct right there all right guys so we just finished up our create state our state account let's go ahead and build our create post so this one is gonna also have some more complicated functions inside of it so we're going to basically say this is going to be a derived accounts block and uh here i'm going to create it as a struct i'm going to do create post so i'm going to create my state variable here and it's going to be account info and then it'll be state account so i'm basically telling my account that you're going to be of the state account type okay so this struct that we created here is going to be of the same type here i'm going to say accounts will go and this is going to be our standard stuff so this is going to be of type account the state and it's going to be the same as the one that we did before already so it's going to be mute it's going to mutable seeds is going to be bytes of state i'm going to say as ref and then let's get out of this right there i'm going to get out of the seeds and then we're going to pass in bump okay no need to add pair for this and we also don't need to initialize this so our state is good to go this will authent this here will authenticate our state account the next thing that we actually need to do is we need to authenticate the post account okay so how we're going to actually do that oops let's bring that in here so how we're going to do that is we're going to say it's going to be an account we'll initialize this break it up onto new lines i will say seeds and we're going to do post as ref and we're going to do state and just before we continue on this guys but i want you to understand is uh we're just gonna be using seeds is always used to create a unique seed okay so it's like think of it like a unique id in a database so we're basically using anchors like builtin mechanisms to create a unique seed for us and the logic that we're using behind this specific seed is um we're going to be using um the post okay so we're going to be using the post as a seed and index of post as seed okay so all that basically means is we're using the specific post and where that post happens as a seed and this will just give us something unique every single day perfect so i'm just gonna go ahead write that out we're going to go post count say 2 b bytes and then we're just going to go ahead and say as ref just like that and put a comma here at the end so that should handle our seeds for this one we're also going to do bump pair is going to be the authority so it's the actual user so whenever you're initializing you're always going to need to pay we're going to create the space so for this space what i'm going to be doing is i'm going to be using size of i'm gonna be saying hey uh it's gonna be of type post account but instead of plus eight on this what we're gonna be doing is um we wanna give this post a specific size so this space here i want you to kind of imagine it like this okay kind of like imagine it's like la okay and uh you have you have these blocks that you can purchase where you're gonna build all right so whatever thing you're building you're building literally imagine it like a real estate except this is like digital real estate on the blockchain so you're going to be finding the specific block that you want to build on and you get to choose the size is it like a tiny block that you want a big one and the bigger that block is right the more it's going to cost you so that's why you want to actually that's the benefit of lower level uh programming languages unlike javascript you know programming languages like rust you can define the size of the block that you want that way your code will be more efficient you'll also be paying much less prices than anybody else so we're gonna go ahead and uh come up with the size of our hours okay and uh how we're gonna come up with the size is in the following manner okay so let's go all the way to the top i'm just going to declare a couple of things okay i'm going to say my text length and we can just make it uppercase like this and i'm going to give it 1024. okay so the text length would mean hey if i'm making a post on facebook how many characters can i have so this is like 1024 bytes and that roughly translates to about 1024 you know you can make you can make a post that has maybe a thousand 24 characters the next thing i need is what should be the length of the username right because everybody who's making a post is also going to have a username so for example that might be clever programmer or rafikaze making a post on facebook so what's the size of this i'm going to say the size of this uh we're going to go length u size and for this we're just going to go and say 100 and then we're going to make the last one which is going to be the url for my image and we will say use size of this is gonna be 255. so these are the three variables we're gonna use to uh define our size right over here we're basically gonna go user url length plus text length plus user not user url length but name length okay this is going to basically ensure that that block of land we're purchasing will always have enough space for one post okay and that within that post you'll be able to store the user's username the actual you know text body of that post and the url image so if it says this post was made by clever programmer then i need to actually be able to store the space of the url that represents my my profile image my post body and my username length of clever programmer so we're purchasing that small land on the blockchain that's what space is for going down i'm gonna basically say this is post uh we're gonna pass info and we're gonna say it's gonna be of type post account all of this here applies to the specific variable post it's just for post so we're initializing our post we're buying a piece of land for that specific post that post will have a pair okay and that post will have this seed right here so a lot going on here but i hope that this is beginning to make somewhat sense and you know at least there's some pattern recognition stuff involved here i'll definitely say that so some of this stuff you're new to solana it's going to look kind of confusing but the more and more we do this we're gonna start building some pattern recognition here and hopefully it's gonna start making some more sense uh next up we're just gonna need a signer so for designer i'm gonna do essentially the same thing that i did above so i'll just pretty much copy that code come down here and i can paste that right there so i need a mutable authority here and that's going to be signer okay i also i'm going to do the same thing with my system program i can just copy this right here let's go down and let's paste it perfect uh program and then for my token program i'm gonna do the same uh thing as well you can just copy that from the top come down and paste it and just to explain a tiny bit more about this constraint is um we're basically saying hey if we make this facebook app and let's say we initialize it with uh solana solana usdc the person that has to uh make their post has to also pay in solana usdc to actually put their posts on this chain if we in turn make this solana sole when the user has to pay they have to pay in seoul if you wanted to make it let's say johnny token you could initialize your app with johnny token and the person who's using your app would literally need to have the johnny token in order to be able to make posts and if they don't they can't make any posts on your app super cool um i i feel like a lot of creators can use this right if mayweather had an app or mcgregor had an app like you would need the mcgregor token in order to be able to post on that app so there's a lot of if garyvee had an app you could only post on it maybe with garyvee tokens um v friends or whatever all right perfect so that's just this is that part cons regarding the constraint and last thing that we actually need to finish up or create post is gonna be a time or just timestamp okay so we're just going to go ahead and say clock and we're going to get our cis var okay and oh it's going to be of type clock perfect so that's this this far is kind of built in and this over here is going to be our timestamp all right guys so now we're going to make our first function inside of rust and anchor so i hope that you're excited now we're getting the fun parts because up until now we're just defining the data structures kind of doing some of the boring parts but that are important so let's go ahead and do this so i'm going to come inside of my programs uh that that i have written here okay and what we're going to do here is i'm going to leave the super the super is basically just saying hey like the scope is everything okay so i don't want you to limit the scope um i'm going to come here okay and this is going to be my first function it's a public function and in instead of calling this function initialize what i'm going to say is create state so this is going to be our initialization for the ctx part i'm going to say context and i'm going to give it a specific context so i'm going to give it the create state one let's go ahead where we created the create state perfect let's copy that we're going to paste that right there okay so that's going to be the context here let's put it on its own line let's go boom boom right we're gonna say comma cool and there are no more arguments that we have here okay and then we're just gonna basically return a result and you could leave these here or you could leave it just like this totally up to you okay whatever we're returning we're gonna return we're gonna just name this as a result perfect this is the most basic function you can kind of have in rust because this function will run and it will just basically say okay like this function ran and it was okay there were no problems there were no errors if there are errors then it's not going to run this um okay line right there so let's go down and we're going to make this a little bit more complicated and add more things to it so i'm going to say let's state equals and state is going to be our accounts okay so this function here is going to be passed in from our front end all right we're going to basically be able to create a state at any given time and then we're going to be able to access that specific states or that specific context accounts and the state okay so now what i want to do is i want to make sure that i can actually mutate this so i'm going to pass basically say this here amp percent and mute which means whatever a state that i pull from here i want it to be mutatable okay something i could change i could change its values and now we're going to go ahead and do just that so let's put a semicolon here and let's go down now we're going to save the authority to the state so i'm going to say i'm going to grab the authority here and i will just say make it the authority of whoever is currently the authority the current person who's like let's say logged in with their wallet so that's who the state's authority is going to be set to okay and because we allow this mutation here now we can do something like state that authority and change its value so the other thing that we're gonna do is we're gonna set the post count to zero because we're literally just starting and creating our post for the very first time okay so let's go ahead and do state.postcount and we're gonna set that to zero and then we're just gonna simply pass okay so this is our create state function and we're done with that the next function we're gonna need is going to be our um create post function wow look at that my github autopilot already putting in work so let's go create post right there and i'm gonna do ctx context so every time i'm making these functions i'm just gonna pass in my ctx okay every time you make a function you say ctx and then you give it the data type that you want it to kind of uh be serialized here so i'm going to just say create post um this struck we made it earlier so let's go ahead and look boom right there i have create post okay so it's the type create post let's go down i'm going to give this text text is going to be of type string whoa strum what the heck is that string poster name is going to be of type string as well and poster url poster url is going to be string as well perfect and then last thing we want to do here is of course just say hey this is going to be program result or result whatever you want to call this all right and then let's go down and now we'll start setting up our state and we'll say hey this state is uh mutatable we're going to say ctx.accounts.state just like this so first we're going to get the state so this is allowing us to get the current state next up what we're going to do is we're going to get the get the post post equals this is going to be also mutatable or mutable nonmutatable mutable post then we're going to set the authority and that's going to be the key of whoever's currently in then we're going to set the text to whatever the text that was passed in uh poster name is going to be the poster name that was passed in then the poster url is going to poster url those passed in um and then we're going to set the comments comment count and index and then let's go ahead and do our post time so when was this post made so we're going to go post.clock so we're going to grab it from the clock and we're going to perfect and then last thing that we're going to do is we're going to increment the post count by one okay so every single time that we create a post we're gonna increment the post count by one hopefully that makes sense and then that way we can keep track of that post so again this is so freaking cool right because where all of this data is actually being stored on the blockchain and we don't need a database and we can actually increment and we can retrieve this information just pretty cool because you know we don't have a back end here we're just storing all of this on the blockchain web 3 is our backend so super cool perfect and then last thing we're going to do here is we're just going to say okay and it's double open parentheses and then double close parentheses perfect all right that was a lot of smart contract work we're going to be doing some more of it but i'm going to be passing it over to lance in just a second who's our amazing instructor he's done some of the previous bills like robin hood and tinder that you guys have enjoyed so freaking much he's our frontend master so he's gonna be bringing in some of the frontend side but here's what i want to leave you with a lot of this stuff is new so it can be challenging it can feel intimidating it can feel scary like oh my god what is going on trust me this i'm like new to rust and solana and anchor as well so like for me this was it felt kind of intimidating but once you get used to it and you start doing this it will start becoming easier and easier like we were joking right before this with uh david who's on our team and uh some of you guys know him from a lot of the bills like the mern bills and you guys call him dr mert and uh you know he was like oh this is starting to make sense now you know and i think it's just because he was looking at the rust code for so long started making sense and initially to me this looked like complete egyptian right gibberish and i'm like what the hell is going on i don't understand but hang in there this will start making sense we're going to be moving to the javascript portion now which lance is going to be jumping into and building out the front end and once the front end starts getting put together you're going to start going ah the pieces are making more and more sense okay and then in the future we're going to have some more hopefully salon ups coming through so it's going to make even more sense then so i hope you're excited i'm gonna be switching it over to lance lance go ahead take it over and crush it what's up guys it's lance here again so what we're gonna need to do before we get started with the front end i need to walk you guys through a couple things one of the first things is head over to your cargo tunnel and double check that you have the same version that i have if you're watching this from a future there might be a newer version that's out like for example 0.23 is out and if you do update to that you might run into some bugs with this build so if you want to make sure you're doing the same thing that we're doing make sure you have the same version so once that's done you can go ahead and you see your target folder go ahead and delete it but don't worry it's going to come back and i'll show you i'll show you guys how to get it back so hop over to your terminal and just write anchor build as you're running anchor build you're gonna notice that it's compiling because that's exactly what's happening here so with solana we don't really call them smart contracts we call them programs and when you do anchor build it's gonna compile your program and then the next step would be to deploy it and after you deploy it you should get back a program id i'll let this thing build and i'll show you guys how to deploy your program awesome so it looks like it finished compiling and look at that our target folder is back and like i said the next step in your terminal is to say anchor deploy this step will also take a couple minutes and at the end of it all you should see your program id all right let's go do you see that that's your program id you can look at it like a contract address if you're coming from solidity so go ahead and copy that and remember where it says declare id in your lib.rs we want to replace it with our new so i'll go ahead and hit paste and that's not the only place we want to the only place where you want to update the id go ahead and go to your anchor.tamul and copy this and paste your new id oops take your new id and paste it there we go cool so now that we've updated our rust folder our rust file and our tamil file let's go ahead and run an anchor build again and this time we won't delete the target cool so it's finished compiling now and we just have to deploy it one more time with our updated program id so let's do anchor deploy awesome so the deployment is successful and you should see we didn't get a new program id everything's all good let's move on to the next section all right everybody we're gonna get started with the front end i already started up i'm using netlify dev that's why we're on localhost8888 and head over to your index.js so again this is the the reason why you see all this stuff is because it's the starter next js code so we don't need a lot of it so what i'm going to do is erase everything within that dit you can also go ahead and erase all of these stuff right here and from here we're going to be building it up so instead of styles.container we're going to do styles.wrap okay so i'm going to build out the divs first then we can make our styles object with tailwind to get everything set up so the first div is going to be the styles.wrapper from there we're going to have a component that doesn't exist yet but i like to set it up so we have an idea of what we're building so i'm going to call it header okay so keep it in mind after that i know i'm going to need to do some conditional rendering here so if the user is registered so we don't have this variable yet so i'm going to put it in for now registered question mark okay cool and if registered is true we're going to make this div we're just going to have the class name style dot wait sorry that styles that wrapper it's going to be home right because it's going to have the two of the same okay of course we need the closing div to this the important part is what goes in between which is another component that we're going to be making later on which is the sidebar very nice so in the next line within that home wrapper make another div and this one's going to be called style dot me inside that main div we're gonna have a feed component and there's gonna be a bunch of heavy things in here so i'm gonna comment it out because it doesn't exist just yet so going outside of the main div but still in the home wrapper we're gonna need a right sidebar component okay so i'm just gonna be setting up that component and then copying it out again let's see i'm missing something all right okay and just to close off the register thing if the user is not registered we're gonna load up the sign up component so i'm going to put that whole component in div and all i have to do is call that div with the class name of sign up okay from there we're going to have a sign up component so typically this is how we can see it be planned out and let's see what else am i missing so typically this is how i like to have it planned out and just to keep it consistent with my other names i'm going to keep call this dial down wrapper and to get started using tailwind until you stop seeing this annoying all you have to do is come to the top here and let's make a variable called style and this is how we can set up tailwind i'm calling that wrapper class and from here you can give it the css that you want so for me i'm just going to call the background and give it this color then i'm going to say min height screen and duration of it will be 0.5 next let's start styling the home div the home wrapper div the only thing that this the only thing that this is going to have is a flex property from there we're going to target the center and we'll say flex dash one okay next let's do the main which is going to be similar flex dash one flex and give it a justify center okay then we have sign of container oh then we got flex give it an items center as well as a justify content center or justify center and tailwind with screen height of 70 ph cool so that should cover everything oh and that's right because we don't have registered yet we can just hard code it for now and replace it later registered is equal to false awesome cool and if you don't see any errors we're good to go but if you wanted to see how this conditional rendering works you can say you can type in something like sign up now see if that shows up yep sign up now and if there is a registered we can have this is the home feed right because if registered is false we should see sign up now and if i set registered equal to true we shouldn't see sign up now we should see this is the home feed and that's the same idea that's why i structured it this way if registered is false we should see the signup component and a user should be able to sign up if registered is true the user is already logged in they should just see the home feed that's all we're doing here next thing we should do is let's set up the signup component cool so to get started with the sign up part of this i'm gonna go ahead and uncomment it we're gonna be passing a couple things to sign up so what we can do is format it like so come underneath sign up and a couple things that we're gonna pass into sign up is for one set third equals set register and if it doesn't make much sense to you why i'm writing stuff registered that's because that doesn't exist just yet it will in a moment so for name it's gonna equal name which will just be the name of the user then we'll have set name so that people can set up their name okay second why is this not going back so set name equal set name url equals url and set url equals set up cool and what we can do is we can create variables for these and pass those down but i think it would be smarter to put all of these as a state what we're going to need to do is come to the top here and let's import the use state hook and since we're here let's also get use effect because we're going to need to add that in later cool and we can only use hooks within the function component itself so i'll set that up here instead of having that registered variable i'm going to put that registered variable in a state and this is where the set register comes from it makes sense so let me say equals use state and if i want to set it by default false we can by saying false if i want it to be defaulted to true i can put it to true so since i want to play with sign up next we should have this as false so we can take that out let's set the next state which is going to be const name and the standard convention is if you name it something you should say set the name that you just created state quotes const url set the url is mostly for the images that the use that the user wants for their picture okay and we also have cons users later on we're gonna make a query to get the list of users on our app so for now we can just add an empty one and just do an empty array as the initial state cool go ahead and hit save oh yeah because you see sign up is not defined because you haven't created that component in it like i mentioned before let's go ahead and make a components folder so i want to make a save new file then we'll say signup.js don't forget to make a camel case and now we're good awesome all right so now it's set up i have an extension called react code snippets where you can just do something like that hold on let me redo this part again because it's glitching out cool so after we make our components folder let's make the actual component itself so we can say sign up camelcase.js and do raf there we go and if you're still seeing the error that's because whenever you create a component you must also export and then import it so what i'll do here is import a sign up from components and this actually should be capital u don't know what's lowercase u probably because my component itself that i wrote is lowercase and let's make everything match amazing cool so that means you also don't need this text sign up now because the sign up component is while we're here let's also make the feed component okay so we got sign up and we also have feed you can auto import it cool so as you can see if i initialize my state with false we should see the up but if whatever reason our register is true we should see this is the home feed and also feed because the component is loaded which means they're logged in so we'll head back to false since we're working on sign up now and let's head over to sign up dot js awesome so we're in sign up now the first thing i'll do is let's set up the jsx for it so i'm going to quickly format it and we're good to go as you notice with a lot of our video the convention of the outer div is usually the same which is just going to be style dot wrapper hope not style sheet style then within style.wrapper we're going to have another div with the class name style dot logo and all right because this div is gonna hold that facebook logo and i guess technically it's also called meta right now but we're making facebook okay and we're gonna have we're gonna import image from next.js so i did an auto import which will add this import state and then i'm gonna close it like so then we can add all the other properties so i can say source equals and i have the url i want to use which is this which is just a facebook logo just the facebook logo and then the next thing you need to do is just give it some attributes of a height you can just say 40 and the width will be the exact same to make it a nice square like thing so it's like the similar and then for the alt just call it facebook look amazing there we go that's the image all right and that's the logo container so outside the logo and container but still inside the wrapper div but still inside the wrapper div we want to make another one this one i'll call style dot type and for this div style the title actually don't need to format what i can do is a please sign up to us sign up to use facebook okay from there i'm going to be creating a form this is where the user will be able to sign up by passing in all the input and we're going to put up in a function for this later we don't have to worry about that for now so i'm going to say style. okay next i want to start working on the field so i'm going to give this div class name style dot field contain which will then have another which is just going to have name as the text but for the name oops but for the name i'll have class name style dot input okay then another div this one's going to be called style dot input container because just like the how the name sounds this is going to contain the actual input field so if i write input here make it self closing and for the attributes we can say the value is equal to the name and if you remember name is some is a state that we created that we passed in so we need to bring that in our parameters then there's going to be an on change here or we can say event or sometimes we can say e set name oops which again is a function that we're bringing in as a prop that's not what i want set name event dot target value and what we can do is add a required here and last but not least let's give our input field a class name call mind style dot input field all right so closing div but still in our form we want to make the rest of these things all right so what i'm going to do is actually copy it one more time but the difference we want to make here is instead of name this should actually be profile image url and instead of set name it will be set ur also within here there's also going to be a div oops also within here there's there's going to be a div it's going to have class name random url which is the random url that it's going to generate we're going to have a function for that but i'm gonna make it a little bit later for now we can just add a text field of random so we have div closing div closing div it's the field container next we'll have a button because in our form we should have a submit button that will help the user sign up passing down all the fields that they wrote submit button and then you can get out of there and just do it equals from there all you gotta do is write sign up and if i hit save we should see an error because of all the styles so let's set that up next i'm gonna say it up here con style object and i'll be going through these very quickly but the wrapper is just going to have flex with flex direction of column write p4 here oops justify center items center h w and let's see what did i have again w dash it's gonna have a background of hashtag two five two five two six with minimum width i'm in height h min rounded dash two awesome cool so again at any point you guys need the css go ahead and pause the video so you don't miss out on typing if i'm moving too fast so from there the title is just gonna have the text of this font semibullet text large for the form it's just going to have flex property flex column hide up center all my field containers in here will have my four input title has this text and the font semi bolt input container will have flex item center i hit save accidentally still going to be a problem we got the input field the random url is going to have all of this height full background this color hover background will look like that text white px2 py hover and last but not least we have the submit button which will just have this hit save and that should be all of that oh you might see an error for undefined that's because we also need to destructures those props that we're passing in here which if i remember correctly should be reset registered name set name url and set invalid source prop oh because we have to go to our next config and we have to make sure that it has the hostname of this so i forgot to do that so let's go to our next.config and we're going to add an images key which also which has the value of an object which has a domains key which will then be an array of all the links that we're using to speed up process it should look a little something like this so these are all the urls that we're going to be using for our images so take a moment pause the video make sure you have a cool so now that you have all this we should be able to go back to sign up hit save let's see if it works now oh oh we might have to restart a terminal that's not a terminal okay netflix let's see if this works so it looks like it's running servers ready piling let's go there it is that's our sign up she's beautiful but don't worry she'll have a prettier face as we keep working on it so that's going to be the front end for the sign up for now let's see let me do that part again norman or david who was ever editing but if you hit no we did notify dev there she is awesome there she is she's beautiful she can be way more beautiful and that's because we need to set up tailwind i have all the css it's not really showing up because we need to do just that so to help one thing you'll see me do a lot is tailwind make made some really nice documentation on how to set it up with next js so all we need to do is do an npm install like this okay and for us we're actually gonna do a yarn add instead of npm install add there you go and notice how we're getting three things we're getting tailwind css post css and auto prefixing all right let that install and i'll walk you guys to the next step okay cool so it looks like it's done installing oh nevermind it's not done still let it keep installing no it's not lagging all right beautiful it says it's done so what we need to do is this step which is to initialize tailwind npx tailwind css init p all this does is initializes tailwind and it also creates the tailwind css config file and the post css config file what we care about at the moment is the tailwind.config and what we need to do is add to the content array these two things okay i'm gonna go in the content array paste save so we should be good to go with that the next thing we need to do is go to our tailwind css go to the global globals what you can do is copy all those three things you can actually delete everything in here because it's just boilerplate code and you just have the three tailwind direct save that do a nice dev again and we should see a beautiful transformation the glow up of our facebook page because now we got tailwind involved damn this is slow and that's crazy oh there we go it's compiling hey look at that that's starting to look a little bit better this is the sign up component doesn't look like a very old website anymore let's go okay and start it from here norman all right did netlify dev and let's go there she is she looks way better now it doesn't look like uh 90s websites anymore and there you go that's the sign of components front end let's move on to the next part all right cool so like i said we have our beautiful sign up page and just to double check uh i to get it fully looking like this make sure you have the same css as i do i might have had some spelling errors if it doesn't look like this so double check your index and your sign up so with that said going to the fjs there's a couple things we need to set up here the first thing that we need to do is install a couple different packages so what i'll do is temporarily stop my terminal and let's see what we need to install so what we need to install we're going to do a yarn and i'm going to do something like this we're going to get at project serum slash anchor and because we can get multiple things let's just do that i'll get at solana slash spl token and space at actually not doing the next set so let's get these two first the serum and the spl token all right cool so we got those two installed let's do the next set which is just going to be yarn add at slash wallet slash adapter oops dash react okay i'm going to speed run the next few which is going to be next one is going to be selena slash wallet dash adapter to react dash ui and the last one for this set is going to be the solana slash wallet adapter dash wallets so these are the three for now hit enter all right that batch is done and there only should be one more for now which is just going to be a yarn add atlanta slash web3.js oh and i forgot one more we also need react hot there you go we're going to be adding more packages as we go but these are the ones that we're going to need for these js so let's get them right in let's go we're all set so come back to your pjs and let's import everything we're going to need at the top here i'm going to do an import toast comma toaster from react toast this is going to let us make little notifications let's say like the form was submitted so i want to set it up like that next thing i want to do is import token program id from solana spl token which is just one of the packages that we installed so that's where it's coming from okay and next we're gonna do import use wallet and you'll see like a suggestion here that's where we're getting it from the wallet adapter dash react cool and this is just standard things at the top here where we have the import react from react we can just get our usual states our usual hooks i mean which is just use state and use effect okay next thing i want to do is import solana and this one is actually going to come from utils folder which is going to get a const.js file which doesn't exist yet but i'm going to set it up and then we're going to make it right away so i'm going to hit save and let's go ahead now and make a utils folder and inside that utils folder we are going to have a constant beautiful so now we're working on the cons.js we got to set up a couple things in here as well which is going to be an import statement that's going to grab the cluster api url from the solana web3.js which we added with yarn then we also want to get the public key from there cool from there we want to import facebook underscore solana from the next thing you want to import before we do that we actually need to go into our target folder which is inside my facebook dashlana and look under idl we're going to need this idl so i'm going to click on it copy it and copy it into your utils folder so going into my utils i'm gonna go ahead and hit paste oh so we have the facebook underscore soul dot json in there so going to your cons.js let's import that we can say import facebook underscore solana or soul quotes dot forward slash facebook sold touches awesome all right so let's set up our cluster so what we could do for our cluster is export cons and then this should be capital actually cluster set that equal to the devnet because that's what we're going to be working on and then in the next line we're going to do an export const salana underscore host equals solana host equals this httpsapi.devnet.celana.com i'm just getting this from my facebook soulful cool and i think that's actually should be we should label this alana host underscore so solana host equals this next thing let's do is let's set up the stable pool program underscore id right i remember that public key that we imported from solana web 3 we're going to create a new public key you're going to put quotes here and remember that program id that we got at the very beginning when you saw me let's go ahead and grab that so that like that should be in my facebook soul under programs anchor we need to grab this little thing copy that add back to your const and that should go inside the public key from there we're just gonna do an export const and say that the stable pool idl is going to be equal to the facebook because that is the json file that we imported that's going to be equal to stable pool idl cool so that's our cons folder now we can head back to feed.js and now the solana host is going to make sense all right solano host is essentially this right here okay we're going to be using it soon so the next thing i want to do is the get program instance and this is going to come from something that doesn't exist just yet but we'll make so i'm gonna do from dot dot util slash get dash pro so like i said this doesn't exist yet but what we could do is go into our utils and let's get that set up all right so going to my utils i'm gonna make a new file and i'm gonna call it get program it's gonna do exactly what it sounds like and from here we can do an import star as anchor from the at project serum that we had cool there we're going to get a connection and we're going to get this from solano web 3 then we're going to import the wallet not connected error got a spell wallet now connected error from ad solana wallet adapter cool so like i said this should be salon adsolana wallet actually adapter dash base oh yeah there's a suggestion and it should be wallet not connected error cool all right remember the stuff we set up in cons let's import some of that today in here so sable pool idl from const and while we're here we should also get this stable underscore pool underscore program let me just go ahead you guys got that cool so let me just double check that's what i wrote yep stable pool program underscore id awesome next we're gonna set up a function i'm gonna say export function get program instance and it's gonna take two parameters connection wallet and we're just gonna set up a nice condition here that says if there is no wallet dot pub key i'm gonna throw a new wallet not connected error and then parentheses to call it cool awesome after that if statement we're going to do a const provider and set this equal to oops and set this equal to new right which we're getting from my provider inside the curly brackets of this provider we need to pass in connection wallet and anchor provider dot default options mate okay what's this oh and this actually shouldn't be curly bracket this should be parentheses there you go that's a lot better and put up one more comma here and then underneath that let's set up the idl and that's just going to be equal to what we set up at the const which is the stable pool ideal which i know is just the facebook underscore so jason awesome then let's set up the program id as well which is essentially just the address of the deployed program that we set up way in the beginning which is a stable pool program id okay then let's do a const program equal to new anchor dot dot program idl program id comma okay from there let's do a return program and hit save cool and with that get program is actually feed is more now i can go back into feed but that should be it for the initial setup all right continuing on with the feed.js go ahead and in your components folder let's create two new components that would be the create post.js as well as another file called justpost.js awesome so i'm just going to set up the component really quickly using rafs okay going back to feed now that they exist we can import them by saying import create post from create post and then import post from post i want to come down and skip a line and then go ahead and write a variable called anchor so equal to require project serum slash anchor and then from that anchor variable we're going to deconstruct it by getting the bn from there and web3 from anchor okay next we're going to make a variable called utf8 and i'm going to say anchor dot utils bytes.3tf8 cool next thing i'm going to do is i want to destructure web3 and i want to get the system program okay and the last thing we'll do at the top will be make a variable called default accounts and set it equal to token program set it equal to an object with the key of token program and the value of token program id which we got from solana spl token next i want to set up this clock here which is going to be anchor dot web3 dot sis bar clock pub key awesome last key that i'm going to make here is a system program which has the value of system program which we're getting from web3 dot program id amazing so like i said feed is going to be a very dense component there's going to be a couple different functions on here that we're going to need to set up because it holds a lot of the logic we're gonna do today so one of the first ones one of the first functions i want to make is a function called get all posts so this function like i said it's called get all posts it does exactly what it sounds like when in facebook we want to be able to grab all the posts we made and remember all these are going to be and if you remember in our lib.rs we have a function that creates posts what we need to do now after we create them is to get all of them so that's the job of this function so we're going to make it a synchronous and we're going to do a try catch and we're going to have a try here catch which will just be error console.error actually and then pass in cool but in the try that's going to be the important part here we're going to do a cons post data because every post that i get i want to store it in a variable and i want to say await program count program.account.postcount.org essentially we're going to go into the program and get all we're going to go into the program access the account and then access the post account the post accounts which essentially just getting all the posts so that's what we're going to do with that from there i want to take my variable posts data and do a dot sort okay inside of that sort we'll have an arrow function which is going to have a b so that we can sort all the posts by time and to do that i need to access the post time turn that to a number that we can easily use and then put minus a dot account.post time to number amazing all right so setting up the sort like this we'll sort it by the post time okay cool it's over so now that then we just need to do a set posts and pass in that post data which will be the sorted post cool save that and that's the get all posts awesome next function we're going to make let's make the saved post function so coming down to line 38 i'm going to say const save post equal to an asynchronous function once again and inside so if you think about it when you're on facebook you're writing up your post you're gonna need to save the post to the actual app itself this function is going to handle that so one of the first things that we need to do is get the program the program address all right so to do that i want to set up a let state sign that's essentially what we want to get so that's what i'm going to call it so i'm going to say await anchor dot three dot public oops public key dot find program address like i said we want to forget the program address of the state parentheses here and i'm just going to do i'm just going to encode it with utf8 code state because that's what we're looking for go ahead and do a comma and you also want to get dot program id okay underneath that closing parenthesis let's set up a variable called state info which i'm going to use in a second and all this is doing is getting the state address from our program this is just a variable that i'm going to use and i'm going to use it in this try catch that i'm going to set up and in this try catch i'm going to do i'm going to take my state info variant and set it equal to an await program.account.statecount.fetch state signing let's go cool all this is doing is fetching the state and storing it in a variable state info from there in the catch let's do a program.rpc.createstate so if you remember what you guys did with kazi if you look at lib.rs we are going to call that create state function and that makes sense because if if we're doing this and we don't have a state we should create one so we're going to do rpc.createstate and pass in these parameters which is just going to be key accounts it's going to be have the value of an object so the state is going to be the state signer that we set up before and the authority is going to be the wallet dot public key not the anchor wallet dot public key just the wallet the public key okay this should actually be lowercase as well cool and we also want to spread out the rest of the default accounts okay and let's do a return awesome cool so now we're out of that try catch block in the next line but still in the save post function we want to do a let post signer all right it's going to be similar to what we did with the state signer this time we're going to be getting the posts so we're going to set that equal to await anchor dot web 3 publicly then this one is the web 3. public key dot find program address and again very similar to the last time which is just utf8 dot code uh this time we're looking for a post oops in code this time we want to put post here comma state info post dot to array buffer be comma then there's a comma here enter and we also want to do something similar like program dot program so that's the post signer set up another try catch block okay so now that we have the post signer we can actually fetch the state that we want so we can do await that program dot account dot post dot fetch and then yeah so what we're going to be fetching is what we got with the post sign cool then in the catch this is going to update the state which is thisprogram.rpc.com text name url and also pass in the object of the account which has a value object which has the state signer post post and again this isn't making any sense to you that's okay as we keep doing this over and over you're going to notice start to notice patterns and it's going to start to click real soon so authority is going to be the same as before which is wallet.publicky hit comma and then we do that default cool so now let's update our local posts so i'm going to say set posts comma weight program count dot post count dot all to grab all of those post accounts cool and that should be the save post cool so if you're still watching this that was the fun amazing solana stuff time to go to our usual bread and butter of the jsx of the feed component and just to remind you this is the feed of the facebook right all the posts that you see so in this return i'm just going to clean it up a bit and for the div let's give it our classic name of style awesome all right so that's the outer div we want to do next is remember the toast that we imported we can get toaster now and this is selfclosing and the attributes that it has is position bottom left that's where i want it and then we want the reverse equal to false okay so now that our toaster is set up now that those are set up next line we want to set up another div this one doesn't need a class name because we're gonna do some conditional rendering here so i'm gonna make my curly black brackets and i'm gonna say again this variable doesn't exist yet but if loading is true what we want to happen is we should have a div and we should have this little like loading text that comes up say if loading is true we should see the loading text okay i'm going to do the colon here because if loading is false then there's nothing loading we should just see you should just see a div that has the create post component so i'm just going to set it up and we're actually importing it i believe we're already importing it so it does exist we're just going to be passing down a couple of things as props so we want to do save post equals save post all posts equals equals get all post and remember the name and you also want the url right because there should be a name and the picture url associated with the post that's not all we should also be able to map through posts do a post map and for every single post in that array we should make a post component which we also set up okay and each post component is gonna have these props passed in which is gonna be post equals post.account post equals post.account view detail equal to get comments on post we need a create comment equals save comment and key equals post countdown index and of course color pause the index then again we also want to pass every single name so we can associate it with the post then we're going to do url equals eu okay closing div parentheses closing bracket dip cool so that should be it for the front and that should be it for the jsx next let's do the styling and the styling is going to be all the way at the top here okay and the styling for this isn't intensive at all it's just gonna be our wrapper which will have a flex one oops flex one nope not that with two one dash one cool and again loading doesn't exist yet so let's set up our states so what we can do is take advantage of our use date and at the top underneath our style we can do a cons loading and set loading is equal to use state true then we can do a const posts comma set post and set that equal to use state all right cool all right so that is the styling and the jsx and we also set up the use date cool so let's hop into the create post component that we made and one thing we actually need to do is stop your terminal and let's just get yarn let's just add another package which is just gonna be a yarn add react dash icons all right because for the create post we're gonna be using a couple icons from there cool once that's done we have react icons now so what we can do is come to the top here and let's get started so the first thing we can do is set up our hook which is just going to be just use state for a create post nice and let's also import image from next image and let's import all the icons that i want to use which is just the bs file image fill comma bs fill camera video react icons slash bs cool then there's another react icon not from bs but fi which is just fi refresh cw this little refresh symbol that we're going to use to refresh our posts so we can see the updated comments so we can do quotes react icons slash fi all right so that's going to be all the imports that we're going to need for create post i'm going to go ahead and hit and let's work out the jsx so cleaning up the div can you guys guess what would be the class name for this you guys got it right exactly it is style.wrapper awesome after style that wrapper i don't think you guys will be able to guess it but we should have a some sort of form container because this is the component that's gonna let a user create a post so it should be a form but the first thing we need to do first is get the image let's get the image good thing we already imported it because the next step is just to add the source which is going to equal the url and we can add the prop which is just quotes profile okay from there we have class name of this image is style dot profile image let's give it a height width kind of similar what we did before with the last image which is just height of 40 with the four all right so we got the form let's give the form a class name the forms class name is gonna be style.style.form and the very first thing in this form is an input what's going to be selfclosing let's work on the attributes which will just be value equals input which doesn't exist just yet then we have and change equal to event set input event dot dot value basically whatever i type in the input field is going to then update the input state so if i type h updating the state unchanged e updating the input state now it says a g all right and so forth cool so now the function's set up then we can have the class name for this input field which will be style.input it'll be a good idea to put it in the bracket so let's do style.input and there's a placeholder which you know what if you guys use facebook at all it's that little cute message that says what's on your mind what's on your mind hassam so if some there's assam's watching this what's on your mind okay cool so that's the input field the only thing we need now is a button which is essentially just submitting the post and this can actually just be self closing style dot hidden submit submit and we're going to have an on click and it's going to run a function called handle submit which we're going to be making soon cool cool i'm going to take a moment to stop right here because i want to set up the state as well as the function that we're going to be making so let's just set up the state really quickly so come down at the top here and i'll just say const array input comma set input now it exists so we can say equals use state quotes and then you can also set the function which is the handle submit one this should be asynchronous with the event and we want to do an event.prevent default because anytime we submit a form it's actually going to refresh the page and you don't want to do that when working with states because it's going to clear them so we don't want the refresh so we do prevent default and anytime we press submit we should clear the input field so we have to do a set input 2 and then we're going to do an await save post cool amazing and now that i'm looking at this i think i'm forgetting one thing which is actually a form container so in between the wrapper and the image let's make another div here and this is our should be our form container that should be its own form container and don't forget to put styled up container if you want to have your tailwind working and we can take this little guy and put it right here okay which means we can actually shift it over one nice okay cool this is making more sense now and underneath this div we want to make an actions container right so the actions would be that little part of facebook where it says live video photos video or a refresh post button so we want to set that up by making a div and i said earlier it's going to be class name style dot actions contain okay we have a div class name do a style dot action and here we go let's start using our react icons in here we're going to do the bs fill camera video that's a mouthful then do a class name of style dot video cam icon and so nice okay and then in the very next line we want actually another div here and that div is responsible for being the title so give it the appropriate name style dot action button title okay you essentially want to just repeat this process but have different things so i'm going to copy this and paste it twice okay but let's make sure let's be sure to you know mess me around with the content here instead of having bs video camera fill what we want to have is bss file image fill and this instead of video cam icon let's do photo icon and instead of live video this should actually say photo slash video well i'm happy with that going on to the next and final action button this should just be the fi one which is fi refresh cw change the name of the icon to refresh icon fresh icon and then we have a style the action button title with refresh posts nice okay and then it should be closing div closing div closing okay cool all that's left now is to do a bunch of the styling this one has a lot more styling than the previous ones so bear with me so coming at the top here i'm gonna say const style equals object and let's define all the styles that we need all right first one start from top down which is just a wrapper i'm gonna move through these fairly quickly it's going to be with 100 flex and then we do mt dash 1 rem and if you're ever confused at all about what i'm writing here there is actually documentation on a conversion of what tailwind css is to regular css and that definitely helped me a lot when i first started doing tailwind so be sure to check that out so there's flex column i want to do a rounded dash let's see let's do 0.6 on the m and pg dash let me see what the color is for this again it's going to be hashtag two five two five two six again like three did before p two p t four p b zero and shadow dash zero pixels five pixels seven pixels negative seven tools and an rgb a oh zero zero zero zero point seventy five cool told you there's gonna be a lot so this is just the wrapper i'm gonna hit comma and now i'm gonna select moving through these faster be sure to pause the video if you ever need to stop so i'm also going to do an alt c here so you can see it on my screen so next thing i'm going to do is the form container which is just going to be flex pb3 and b2 border dash b the border of this color okay profile image rounded full object cover for the image for the form itself flex1 and you want to do a item center on that followed by the input which would be something like this okay we then have a hidden submit class and that one's actually pretty easy it's just going to be invisible okay now let's dial our actions container which looks just like that yep actions container followed by the actions button which has a lot more why is it the whole thing oh i think i highlighted again followed by the actions button which contains a lot more css this we got the action button title and the all the icons are going to have very similar styling they're just going to have a text read text green text blue for the respective ones so hold on cool and that should be it for the style and that's the create post component awesome all right so one of the things that we need to do still is accept the props that we're passing down and destructure them so if you remember going back to our feed scrolling all the way down we have save posts get out posts name and url so that's what we're gonna do structure so i'm gonna get save post get all posts i think it's like that yep name and url awesome we'll go ahead and hit save and let's just actually take a look what this would look like so to do that we want to go back to feed and remember how we have sorry go back to index and remember how we have the register to false let's go see what it looks like when i set it to true but of course don't forget to magnify that compiling there is an error okay it looks like we got an error oh yeah so going in my const it's actually going to be curly bracket should be just regular parentheses so let's see if it likes that okay i'm going to try it again okay compiling and see if there's any errors with the code we have so far it doesn't like the solana web3.js of course we've got another error expected from god string literal let's take a look it's in get program okay it's right here you just have to add it from here why don't you guys tell me about it it's gonna be a front let's save this can you compile again okay this one is it coming from the same spot acquire stack from facebook okay this looks like something we already fixed so let's see if i refresh it there we go beautiful cool so like i was saying earlier going back to the index.js remember that if we are registered and it's false we see this beautiful sign up screen but if it's true we should see field so let's we haven't got take a chance to look at all the code we've written so let's see if this breaks our code so i'm gonna hit save what does our app have to say okay looks like nothing which is interesting let's take a look let's do a quick inspect element let's see what's going on in here oh it's right here this is the home feed and it's loading okay i'm going to the feed.js this is all the style for it i guess in the meantime guys let's take out the this is the home feed and i believe we're seeing loading because we're setting loading to true but if it was false let's see what happens now there we go something url equals url it's undefined yep that would be smart we should actually go to the feed and accept those props and destruction cool so let's actually get the name and url that we're passing in name url restructure them first name url and i believe we should be passing one more thing in here let's see we should be passing name that's gonna equal name and is going to equal url still url is not defined let's see should be i'll figure that in a second one thing that we also need to add is a connected prop so going to feed i'm going to add connected equals wallet.connected all right and it's not capital w lowercase and then if you're wondering where wallet is coming from we need to go up under our states and let's use oh and if you're wondering where wallet is coming from we also need to import a couple more things in the index now that i remember it let's do that cool and i added this by accident when i wrote capital wallet we don't need this what we do need though is to import use wallet and we want to get it from solano wallet adapter react and once we do get that this is where wallet is coming from we can say const wallet is equal to use awesome so now while it exists if we scroll down it makes more sense and we're going to get url is undefined let's just temporarily put a variable here or actually it's going to say url is undefined let's go to feed it's also passed down connected okay this is good because now we're getting rid of all the bugs before we move forward image is missing a source property now where's this image coming from nope not that one where's this coming from well that's typo over there okay saving it says image is missing source property it's probably because there is no url so let's just get a temporary one i have one in my notes it's just gonna be this make sure it's in quotes i'm gonna hit save there we go awesome so it works this is exactly what we should see and there's this nice hover effect to it too cool all right guys so now we had our little bug fix break let's work on the post component so the first thing i want to do is at the top here where it says import react from react we can just say use state comma use effect and let's also import the image from next image and there's also a couple of react icons that i'd like to get that i have ready for you guys it's going to be the bi like for reg common alt ri share forward line and fi refresh cw awesome okay cool then there's also going to be a comment section import oh sorry then there's going to be a component called comment section which doesn't exist yet so let's go ahead and just make it blank for now i'm going to say new file say comment section js okay there it is rfac okay so we have the comments section now i can import it okay there it is cool all right and then before we go forward we also have to download javascript time go it's another package that we're gonna need so that's going to be an error because i'm stopping the terminal i'm going to do a yarn add javascript dash time dash or go yep so i'm going to wait for this to install and we'll be right back cool so now we have that package installed we need to what we need to do next is import i'll go from javascript time ago then we also want to import en from same place but this time forward slash local slash pn.json cool and if you miss our beautiful page you can just go into terminal and just say netlifedev again all right while that's loading add default locale and then within here you can just type en to pass in pass it in there we go next we can make a variable call it const time go and then set it equal to a new instance of time and inside the parentheses here we want to say en us awesome okay we should be able to refresh our page now there you go cool so remember how we imported you state go into your function based component here and let's just set up our use states which is going to simply just be these two the first one is going to be is the comments section opened and set is common section open the default will be set to false and the next one is going to be clients comments and then set comments because we want to be updating the comments of each post okay we will be adding use effect much later but for now it's not nearly necessary what i do want to do next is create a function and that's going to be called clock to date string and it's going to take oops and it's going to be a function that takes in a timestamp as the parameter and here we can play with this variable that we made and we can say time ago dot format new date and then we can pass in their timestamp dot to number times 1000 quotes twitter twitter dash now okay and then within the same function you want to do cons post detail it's a variable that's gonna lead kant's postdetail which is going to be an asynchronous function and con's result equals wait post index post and then we want to do a set comments it's gonna just wait that result cool okay and if you remember inside feed we have a post component that's going to be created every for every single post and we're passing in post equals post dot account so we need to be do it this is in line 24 post that index comma post we need to be accepting all these props so that's going to be post detail create comment so i'm going to start accepting those props and destructuring them it's going to be post view detail let's see what else great comment key name url create comment key name and i believe that's all it's looking good awesome so there's also more functions for this but i think this is good for now we have our function to convert our timestamp and format it all right i guess the next thing we should do is let's work on the front end of the post component so i'm gonna clean it up and the class name is going to be style dot okay there we're gonna have another div within that which is just gonna be the post publisher so it's gonna have that name style dot post publisher and inside it's going to contain an image which will be selfclosing inside that image it's going to have a source property post dot poster url okay then we have the class name which will be styled at avatar that's what this image is supposed to be every time you comment on a post you should see your avatar right on the left side of it and that's what we're setting up right now and the height of it is going to be 44 with the width equaling to 44 as well last but not least we need an alt which is just going to be publishers profile makes sense cool directly following the image in the next line we have another div this one's going to be called the publisher details this is going to include who's ever leaving the comment and the time that they left it so that's why it's going to have a class name of style dot publish your details publisher okay and it's just going to attain all the dips for each one which is going to be class style dot name which will contain you guessed it the posts poster name all right next line what we need here is the timestamp style.timestamp which will make use of that function that we just created which is the clock to date string and we pass in the post time cool which will format it to how we want it to look on the comments nice all right so after you do that we have closing div closing div closing div then in here in between these two we're gonna have another div no class name but with the div inside of this though we'll have a class name which is just gonna be style dot text all right and within it it's gonna be the post doc yeah now i was saying comments earlier all this stuff should be the posters details not the commenter so like when you make a post which will show up on the feed right here let's be a nice square you should see a little profile picture with whoever made that post and the time set of when it happened as well as their name so that's what we're setting up now this right here div is controlling what the content of said post cool and then from there we'll have a div which is in charge of holding the reactions so it's going to be div class name style dot reactions cool these are where all our icons are going to come in we're going to have another div that's going to hold the reaction item itself style dot reaction i know and this one's going to have the by like with some text that accompanies it which will be class name style dot reactions sex and we like inside so it's gonna be a similar pattern with the other reaction so i'm just gonna fast forward get all the reaction items to typing them all out so make sure you go out of this div and still inside reactions container and then you can add everything else okay the key point that i want to drive home is that this specific has it has the on click of is comment section opened and whatever it is before if it's true it will switch it to the opposite which is false if it's false this knot will switch it to true okay that's all that's happening there and it's gonna have the five reg common alt icon as well as the comment from there we also have the another reaction item of the fi refresh cw which is to refresh the post itself so it will refresh the comments itself on the post cool and then the last thing here in between these two divs the last thing we need to write is some conditional rendering of is comment section open if that is true we should see the comments section which is again the component that we set up earlier and the comment section all it is if you remember the posts on facebook there's gonna be a little box underneath it which is gonna hold all the comments we're gonna make a component for that and pass in certain props which is just gonna be the actual comments that we have itself okay so after write comments equals comments next thing we can do is set up the view detail that also function nope the view detail is going to equal the view detail okay then we have the name is going to be the name and the url is going to be the url awesome all right view detail is something that we're getting from post and the create comment and key haven't been sorry not key i actually don't need key here now i'm thinking about it but as i was saying the create comment hasn't been set up yet okay with that said that should be the post front end and one of the functions cool all right guys now that we have our post component done i want to start being able to test all this functionality but before we do that we're going to need to set up our contacts folder so what i'll do is i'm going to make a new folder and i'll just call it context all right because we're going to be using the context api of react so that any variable or function that we're creating there can be used anywhere in my app because it's global so in the context folder let's make a new file and let's say it is the use wallet balance js okay from there there is a couple imports that we have to do which is going to be import use wallet from at salon wallet adapter react hope these aren't the suggestions adapter react boom cool next line import we're going to import something from solana web 3.js which is just going to be lan ports per soul and it's going to be from solano web 3.js next step let's import all the react hooks that we're going to use for this file which is going to be create context use the context we create and use effect and use state and it's all going to be from react cool and we also need a t for create context nice okay we're going to do another import which is import star as anchor from at project serum slash anchor import solana underscore post from the utils slash cons cool from here let's do a cons balance context equals create context and we'll pass in no cool from there let's do a cons connection and the connection is going to equal new anchor dot web3.connection so lana underscore host okay then we can do an export default function use wallet balance all right and again before i continue on this function this is getting the connection of the devnet and storing into the variable and then on this next line here we're actually creating a function called use wallet balance which believe is going to make a variable balance and we're going to set that equal to our use context we're going to be using this function later on in our front end of the header so that we can see that while that user's wallets balance you can pass in balance contacts within here cool all right now that's done we're just going to return the balance and the set balance itself okay cool now for the important part this one is for actually connecting the user's wallet i'm going to say the const wallet balance provider which is an important part of the constant the context it's going to equal arrow function and inside the parentheses here object and put in children cool so that's the provider next thing you want to do is return return the balance context dot provider and in between it's actually going to take in children and within the opening tag and let me just fix this up real quick and then with the opening tag of the first provider we're gonna put value equals curly bracket and then square bracket anything i put in between these curly brackets is going to be global throughout my whole app so what i want to do is put balance and sit down let me explain that again so everything that i put in between these curly brackets is going to be global anywhere inside my application okay so now we set up the provider one important step that we have to do is go into your pages and then go into underscoreapp.js and let's actually set up our provider and wrap it around our app okay let's import it first and say import wallet balance provider from dot context forward slash use wallet balance so now we imported the provider all we have to do now is wrap it around our app so i'm just going to format it like so enter tab put this guy down here and let's format this so what i want to do is call that wallet balance provider and in between simply place the app cool so now that you wrap the provider around our app anything we put in value becomes global so going back into our context let's set up the rest of the wall the balance provider which at the top here we can say const const wallet is going to equal use wallet and use while all it does is uses the user's wall and sets it in a variable then we're going to balance set balance equals use state because remember this is for the wallet connection the other one is for the front end so you got to spell balance correctly all right we're almost done with this guys let's do a simple use effect which again takes an arrow function and within that function you're just going to do a semicolon async semicolon parentheses async arrow function if wallet question mark dot public key i'm going to do a const balanced equals await connection dot get balance parentheses wallet dot public key again it's coming from this variable we're grabbing the publicly from there and setting it equal to getting the we're getting the wallets public key getting the balance of that and setting it equal to our balance variable which we can then do set balance pass in balance the variable then do this four slash and do the lamb parts per sole okay once that's done i'm gonna put parentheses here then do a comma and let's set up the dependency module and put pass in the wallet and the connection because that's the dependencies that i want to look out for because if the wallet changes or if the connection changes at all then we should run the use effect once again okay that said whole thing you need to do now is pass in the balance so now it's not grayed out anymore comma set balance and make those two things global okay cool now that's done that should be the use wallet balance all right so now that our user's wallet balance is done i set this up because it's going to help us create our next component so our next component is going to be the header component so let's go ahead in their components folder new file header.js cool test audio all right we're good cool header.js inside header it's pretty standard rf rafce boom and if you remember where's header located in terms of our app you have to look no further than the feed.js sorry not the feed.js look no further than the index.js so coming up here we have the header we are safe to import it now so we can say import header from components header cool so now we have the header component in there as well and you can see it's over here so going to the header.js let's set up all the imports that we're going to need one thing i know for sure is that we're going to need our assets folder which we can also provide to you you guys won't have this but these are the images that we're going to be using for i'm going to copy it into here okay cool and at the top here let's at the top here let's get our react hooks that we'll need which is just going to be used for this component and in the next line let's import image from next okay okay next up we have a couple different react icons we're going to use i'm just going to speed through them it's just going to be these over here from here i'm going to do another import and let's get the wallet multi button right and that's going to come from slash wallet slash oops forward dash dash ui cool that's the wallet multi button i think i spelled it right and then if we do that we're also going to need to require we're going to need to require at solana wallet adapter react ui flash styles that's css cool okay from there let's get the solana logo from our assets folder excellent logo from assets slash soul png okay from there we could do import use wallet balance and this is actually what we set up literally a couple minutes ago which is just the context slash use while of balance this is our custom hook that we set up inside our contacts here so that we don't have to import use context to use it in our header js all right cool at the top here i'm going to say balance equals use wallet balance because i'm going to get i'm just destructuring balance from use while balance and then from there let's set up some front end setting it up i'm going to do a class name and i feel like i can hear you guys predicting on what the name of this class is it's going to be style.wrapper yes you're right okay inside that div i want to have a header remember the header is this top part of facebook there's like a left side and then there's the right side left side should have the logo so what i'll do is i'll call it style.headerleft and then inside that div we'll have the image that we're getting from next.js which is going to let us use which we can name it classname style.facebook.com okay and the source it's gonna be this link and remember we set that up in the next js config it's gonna be this long one right here which essentially it's just the facebook logo it's gonna equal fb logo height is just going to be 30 and typically the width will be the same so it will also be 30. cool so that's the image in the next line we need another div in the next line we're going to need another div because in the middle of the header you should have some sort of search container so that's exactly what i'll call it style dots search container okay let's use one of our icons which is the little search magnifying thing and it will have input field where the type is going to equal text oops text and the class name is going to equal style dot search input with placeholder going to be search facebook okay cool that's the input closing closing div and here we're gonna have a couple other things which is gonna be the div for the header center part so i'm gonna give it a class name of style dot header center container style dot header center wrapper style dot center icon empty cool and inside here it's going to be an ai fill home and this one will actually have a class name of its own oops this one will have a class name of its own which is going to be class name style dot center nab icon amazing so it should be a closing div there and now we have to make the rest of the icon which is going to be very similar so i'm going to copy this and paste it a couple times i think we need to do this three times so that's one two three we do got to change is the type of icon that we're seeing so instead of a i feel home it should actually be bs display for this and the class name should be the same next is going to be the group two line and this one's gonna be the s i facebook gaming okay closing div closing with cool and since we did the header left the headers let's finally do the header right so class name style.header right so this header right it's gonna have some conditional rendering as well i'm just gonna be named and parentheses if name exists then we wanna do a d that shows that user's name if you log in it would be nice to see the user that's logged in if you're not logged in you shouldn't see it at all so div class name it's going to be oops div class name this one's a little special it's going to have backticks in it with a dollar sign a template literal which is style dot user info and another dollar sign here for the template literal again and then we're gonna do style dot header right okay cool looks good so far let's add an image and this image should contain our profile picture that we've been using this whole time and don't worry about godzilla because it wants a source property for the source all we need to do is use that url again nonempty expression oh no it's fine cool so it's fine source equals url we're good to go and let's just give that image a nice height of 20 pixels and a width of the same length cool give it a nice class name of style user image and for the alt give it the same name of user space image cool and we're not done yet because along with the image we also want to have the user's name which should be dynamic so in between these divs we can put class name oops not like that in between these divs we can give it a class name of style.username and in between it just pass in name and that should actually be in curly brackets cool and yeah so if the user has a name then we're gonna render this div with the user's image and their name that they have all right so after that we can use that wallet multi button we passed in then we're going to have a div with the class name of balance container and this one's special too because it has backticks because we're going to have a template literal and it's going to be style dot balance container and then also another template liberal style dot header but i believe yeah awesome and then when in this div it should also have an image and it's just going to contain a nice solana logo because i want a salon logo and then how much solano we have and then how much soul we have so let's give this image class name of style dot balance icon nsrc equal to solana logo which i set up in the import statements up above height 20 pixels with 20. okay then i'm going to say alt and it's just solana very cool that's the image lastly we just need to have this div here which is going to show us how much of soul how much soul do we actually have so i'll call this style balanced text which will contain curly brac curly brackets let's use that balance that we got from our custom hook balance dot to fit two and whatever that amount comes out to and then let's put soul here so it would say oh you have two point three three three so for example okay and it should be closing dave closing awesome so that's the header and we should get error because there's no styles yet so let's set up the styles yep there's the error but your hero is coming i'm gonna make the style object cool and there's a lot of css for this so i'm going to be moving fairly quickly feel free to pause the video to not miss a thing for the wrapper i'm going to have some flex properties item center with full height with 4 rem justify around px1 rem and all of this stuff i can't read out all the css or this video will be 10 hours long so let's keep on right next css header left which is that main div that holds all the stuff that we need on the left side of the header which is pretty much just the logo this is what we want to add to it some flex with the justify center and a gap of 0.6 rem okay next up we're actually styling that facebook logo giving it item center and object contain i'm going to do a two for one next which is going to be the search container and the search input okay cool then we got a header center container which has just these three flex one flex item center justify center h full and head center wrapper which has pretty much similar things except for the py dash 2. another two it's gonna be center nav icon has a cursor pointer to it so that whenever we hover over it it's gonna have a different background and it's gonna have a rounded of 10 pixels here's the center nav icon those are the all the icons inside that container it's gonna be all of these guys cool from there we're gonna do the header and the header right button this is for all the user info which is pretty selfexplanatory this is the background when i hover over it this will be the new background this has a bold font text color black format the image like and the rest of the css is for the balance which is just going to be bounce container bounce icon balance text so i've hit save let's hope it all matches up even if it doesn't check render method of header that's interesting oh because name is not defined we can't forget to pass that in so i'm going to take name and url and if we do that we also have to go to index and pass it in as well just double check real quick and if we pass that down we have to pass it down in index as well so i'm going to go to name going to equal name and url simply cool okay and let's go back to that component which was and save this expected a string let's take a look this is a capital u that might not fix it and might but that definitely shouldn't be a capital e let's hit save and there it is there is our wonderful header with how much soul which should just be zero by default and then we can select the wallet too awesome that looks good to me okay cool so that's the header.js is there anything else i need no i think we're good that's the mediaheader.js all right guys this would be a good point to create the rest of our contacts what we're going to need is a wallet connection provider so we can start selecting the wallet that we want so go to your contacts folder i'm going to say new file and i'll literally call this one wallet connection provide.js cool now that you're in here let's import a couple things like the connection provider and we also need a wallet provider as well let's do it from solana slash wallet adapter dash cool so we want the connection provider and the wallet provider from the cell now wallet adapter react from there there's a couple other providers that we need well just one more really which is just the wallet model provider and that's going to come from the solana wall adapter react ui and let's also import the phantom wallet adapter because i'm going to be using my phantom wallet for this project at salona slash wallet adapter dash wallets finally using that package and we're actually gonna use a used memory let's actually use the use memo hook from react awesome so that's pretty much all the imports let's actually set up the provider itself which is going to be const wallet connection provider equal to children oops not capital c children and inside the provider we're going to need to have a return and remember all those providers that we did import wrap them up in here so the first one is the connection provider this one actually has a attribute of an endpoint which is just going to equal endpoint and then within that provider we have the wallet and inside of that we have wallets equals wallets and auto then let's set up our modal so let's do the wallet modal provider which in between them it's going to take children and we can't forget to do an export connection provider hit save don't forget to do an export default wallet connection provider so at the top here let's set up where endpoint is so it's going to be variable that's going to equal that use memo that we were to use use memo we're going to have an arrow function we're going to have an anonymous function that just has quotes to the https colon slash api dot deb and solana.com and comma array cool that's the end point next we gotta set up the wallets that we will use which will again equal use memo another anonymous function here and inside is an array with new phantom wallet adapter so that's where that comes in open the parentheses outside that array you need the comma and then another one cool this is looking good i think that's it for the wallet connection provider of course if we're going to set up a provider like this we need to wrap our app around it so going back to the underscore app js one thing i want to do is at the top import dynamic from next slash dynamic oops it would help to spell this correctly there you go and essentially i'm getting dynamics so that i can split my code into dynamic chunks let's do a const wallet connection pro 5 equals that dynamic parentheses and inside those parentheses we have functioning with an import parenthesis of dot dot four slash contacts slash wallet connection provider cool and just take out that little c that i have there wallet connection provider equals this we're importing that context from the provider and i want to do is wrap this whole thing in that so enter let's type it in wallet connection provider okay copying everything inside here pasting it save refresh all right let's see what's going on so it's back in here let's do an inspect element see what's going everything seems to be fine so far camera just died again all right so it's loaded in it looks like there's no real errors let me just make this bigger inspect element all right yeah no big errors which means if we did everything right i should be able to click select wallet and there it is phantom is detected i do have phantom installed that's the wallet that we're going to be using and if i hit click enter my password new wallet pads activity request proof of direction sure hey there we go nice this is super cool because before we were just using metamask authentication to log in and we just started using morales now we're experimenting we're working on rust and we have phantom wallets set setup too which is cool so now just to move forward let's update our signup.js let's update our signup.js and let's make a function called create user okay const create user is going to be an asynchronous type of function and it's going to take an event and all it's going to do for now is going to be a set registered to true right because after we sign up we should be able to create a user and once we do create that user we should see the feed instead of the signup page okay and what we want to do with this function is put it onto the so going back to the form we should have an on submit here on submit equals create user all right so it's going to equal that function it's going to call it that hit save and we should also go back to the index because remember how we set a default to true we can set this back to false hitting refresh here after setting this to false so it should lead me to the sign up page cool and it's wanting me it wants me to sign up with it wants me to sign in with my phantom wallet again so let's just unlock it cool so let's test out if the sign up works and if this works we should get to the feed so i'm going to say the name is lance and the profile image url oh don't know what happened one second again so we're back in the sign up page and i just want to double check something before moving on going to sign up again i do remember for there's two input fields this one was named and yes this one should be url so i'm gonna hit save which will probably reload this once that's done i think we're good to go to actually sign up and see if this works there it is there's the url that was passed down and for the name it's just going to be lance so i'm going to click sign up which will take us to this point because of the conditional rendering and now what we need to do is make a post we did all this code to create a post let's see if it works so i'm going to say hello world and be very basic ah okay so we have a uft8 is not defined i just remembered i think it's because i spelled it wrong try this again i'm gonna say hello world hit enter oh now it says program is not defined all right yep this is why we test stuff running into some bugs saying that program is not defined that's probably because if you go to my feed there's a couple of things we can set up now so i can say cons wallet is going to equal use and that's just coming from an import at the top and then i'm going to do a const connection equal new anchor dot web three dot connection and this makes more sense why this was grayed out we also i forgot to do this we're gonna do okay and then from there now we can define program by saying khan's program tools get program instance connection comma wallet cool so we're gonna get the actual rpc and set that equal to a variable called program cool so there you go program is now defined we shouldn't see that error again let's see what other bugs there are hello world take two or take three ah default accounts is not defined that's why this should be default accounts with s awesome let's try this again lens sign up let's make a post hello world oh it's gonna have to ask me to sign which is pretty cool okay so we want to improve the transaction because oh all right i'm an idiot guys i forgot i'm trying to create a post without any solana myself so let's have actually go to the faucet and get some salon we can actually get solana from going into solana faucet.com so i'm gonna go into there so this is the solana faucet where we can actually get tests uh it's a lot like tests alana for our apps that we can use so we're gonna need to enter our salad account address and one cool way to get your account address is remember those providers that we set up you can go ahead and click this and you can actually copy the address isn't that awesome so go to self faucet in the end fill just paste it in there and i'll just airdrop myself so let's see how much salon i have now we got eight you know what i think i'll be cool with eight and go back on to here and let me just refresh this to make sure i have the right solana right oops click disconnect cool so now we refreshed it and you can see it's updated it's accurate i have a solana i have eight soul so i'm gonna go put in my name again to sign up and then let's try this bad boy out okay that's a good sign we want to approve transaction i'm going to hit approve nothing immediate so i just want to double check that so if you click refresh post it should actually refresh it and get all posts again so coming down to refresh post oh that makes a lot of sense we also need to have an on click here we got something program the rpc.createpost is not a function oh i see i think i know the issue let's send feed in line 82 and we can fix it by putting a lowercase up nice alright so we just recently passed in the get all posts because i want to see and i want to get this button working so that i can just constantly click this button instead of refreshing the whole thing and signing up so what i'm going to have to do is go into here and do an on click and it's going to run the get all posts function once it's clicked so i'm gonna do this and do a get all posts i'm gonna hit save and just to double check is there anything going on at the moment okay no errors yet so i know that if i do this and i do get an error we're going to run it through so i'm going to say world you got the transaction ah get comments on post is not defined so let's double check what that is get comments on post this doesn't exist yet i haven't made this so for now let's just take it out i'll hit save cool let's just try this one more time and do again with plants so none of the common stuff should be working so that's why we're getting all these errors that's line 114 yeah this also doesn't exist yet we have we've only worked on the post things and that's what we want to test right now so i'll just comment that out as well am i using it nope cool nothing immediate is popping up that's from before save comment errors from before oh let's go there's an array okay we got accounts this is coming from my console and line 46 all right so just to make sure this these arrays are coming from my console of the posts in line 37 and i believe we have three posts we have three hello world so what i'll do next is let's close this console i'm gonna make this bigger let's see if a fresh post works and if not we're just gonna have to refresh the page okay i clicked it it wasn't doing anything so let's just refresh it so this is progress guys we're able to actually see the post in our console the next step is let's see if it can actually get populated now okay and nada refreshed it so i want to just see my console still empty oh it's empty again interesting right it's empty shot refresh post fresh post isn't running let's see if this on click is even working let me just do that now so let's see the refresh post should come from here but i'll post a console.log all right guys i want to check if this function is even running oh i got it so i refreshed it and it got the array with an extra hello world now interesting okay so it looks like we're actually getting the posts but there's nothing rendering we just need to add a return here because if we're gonna put curly brackets you're gonna need to have a return if we didn't have the curly brackets we can make it a nice oneliner and that doesn't need to return so if i said save how to compile this might take a second and we should get something new style is undefined all right so let's just do that really quick and let's work on the style for the post alright so that's going to be an important issue we just need to add the styling to our posts so what we can do is come to this line right here and let's just do a constant style equals that and the wrapper the most outer div is going to have all of this let me do a whole z cool yep with 100 mt one rem rounded 0.6 with this background color and a white text and p 0.4 am so that's the wrapper the next part and again i'm going to move in very this next part is the post publisher div which is going to be the next day inside it's just going to have a flex position relative and up center i'm going to do two for one and this one which is just the avatar it just has rounded full for the css and publish detail publisher details it will just have a flex on flex column and ml 0.5 rem next thing i want to do is let's set up the name and time stamp which is just going to be these two text small text small and text with that color speaking of text there should be css for it which is just going to be those two properties these two are pretty long it's going to be the reactions container and the reactions item which just has a border like so text that is 18 pixels flex justify evenly text of this color and a cursor pointer pin py1 here's the reaction item which is going to be we're just going to have flex proper flex of one atom center justify center and rounded 0.4 bm along with a nice hover effect with that background color cool last two are pretty simple and it's just gonna be the reactions text and the refresh icon so that looks a lot better we actually have some css for the post itself and after all that our phantom wants me to reconnect don't worry fandom i'll reconnect with you cool let's hit lance sign up okay getting post hey let's go finally look at that all my hello worlds that i set up they're finally showing up okay cool i think it's because i wasn't directly clicking the icon that might have been it or either the page was still loading but there we go we're able to get posts now now the real thing that we need to start working on is how can i start adding comments creating them and then getting all the comments right so i think that's the next thing i'm going to tackle but this is cool guys we can actually make posts for facebook and all these posts are being stored on the blockchain amazing cool so before i move on to creating comments one thing i'm noticing is there's no timestamp so i just want to double check that in my post component so scrolling down we're getting the timestamp from clock to date string but am i calling it yes i am so it's not returning anything let me just double check this function the first thing is the post detail it shouldn't actually be in the clock to date string should be its own thing and now that i'm seeing it i could make this a oneliner that's probably why it's not returning anything so if i hit save now hey there we go so 32 minutes ago 33 minutes go to 35 42 nice so we got the timestamps for it let's go ahead and start making the create comments functionality cool so one of the first things we have to do is hop into your facebook soul and go into your programs and go into your source in your source you're going to do a lib.rs before we can even create the function to create comments let's create the context and the structure of what a comment might look like so here we have the create state struct the struct for create post let's do one for comments and it's going to be this what kaz explained earlier is all going to apply for this one as well so at the bottom here first thing i'm going to do to start creating the create comment context we need to do a hashtag derive accounts just like what we did earlier and then from there we can do the pub struck now obstruct create comment and we're going to do this okay and then we're going to do info here then we can put the cool so now to carry on we need to authenticate the post account so to do that we're going to do a hashtag brackets account mutable say that it's mutable and for the seeds it's going to equal this array so i'm going to type this carefully it's going to be b post as ref then it's going to be comma post dot indexed dot sub b bytes dot as underscore ref parentheses and then the square bracket and then all i have to do next is a comma and bump awesome and then in the next line we have to do a pub post and set the value of that to be a count with the info comma post count comma there we go okay that's the first part of that from there we're gonna need to authenticate the comment account so to do that we must set it up like this again which will be the account parentheses here and there's going to be a couple of things in here which is going to be init let's get the seeds the common dot as ref comma and it's going to be similar to what we had set up over here so we're just gonna put the same thing which is just post dot indexed dot two underscore b square bytes parenthesis dot as underscore ref then we're gonna do a comma here's where it gets a little bit different this one should speed post dot comment underscore count dot 2 b bytes and then this should be inside the brackets of that as underscore wrap now what does it do so let's go here let's see if you can see the whole thing then it should be payer equals authority and space we have to determine the exact space in rest so it's going to be space is equal to the size of the comment account and then we also have to add the other stuff because i'm literally telling him that the space of the comment will be however long the text is so it's that length we could pull that here over along the username link plus the user url down which we set up at the top of this okay and then under this we have to do the pub comment there we go next i want to set up the authority which the authority this is the signer who paid the church the transaction fee so that's going to be set up hashtag count mute and next line that's all we're gonna need for the authority so we're gonna do pub authority signer okay let's do one for the system program so i'm gonna say pub system underscore program it's gonna be the unchecked account info okay then we have count this is for the token program so i'm going to do count this one will be constrained it's going to equal the token underscore program equal to end token it's essentially a check to make sure that the key of the program is the same and we have the id here just need to add the pub token program which will have the value of program info i believe token makes sense cool last one we just need to get set up the clock to save time which is going to be pub clock sis bar info cool and again if this is still not making sense to you don't worry we're going to have more and more videos in the future which will go more to each aspect of the programs in salon okay awesome but for now bear with me we're almost there so this is the structure for the comments all right so i'm gonna hit save all right so we finished the context and you're gonna see a couple errors because we need to create the structure of the comment okay and if you're wondering what that is you can think of it as an object with keys and values describing what in a comment account would have so that's going to be the commenter's name his url which is his profile picture and his public key these are all information that so let's create that comment account structure so to do that you can just say hashtag account bracket account and then from there we can say pub and let's define the structure so comments count cool so i'm basically saying every comment account will have a key of authority so i can say pub authority which is just the assigner address okay and it's going to have colon here it will also have a text key and here is going to have the value of whatever text we pass in in the create comment function which i'm going to do next okay then i need to know who is the commentary what is his name that's going to be important information commenter name string comma okay the commenter's url so we can get the nice profile picture along with the comment which i'll say string as well then from there we need let's get an index property in there and the type of that will be a u64 nope not u128 u64 okay and i would also like a post time because i need to keep track of that so this one's actually going to be i64 cost so that's the structure of the comment account okay hitting save and just gotta add comma here see let's say boom so no more squiggly lines pro comment account is in the scope now we so just to recap we created the context we have the structure of our comment account now we just need a function that's gonna create the comment itself okay so it's gonna go all the way to the top here where before we started creating structs to these functions these are all the functions should go i'm going to make another one so i'll say pub fn for function and this one will be create underscore comment now putting parentheses here because these are all the parameters that i want for this create comment and what we're going to pass in is the context that we to let them know you guys are going to be getting a comment so i'll say context create comment cool and now we also have to pass in the parameters because when you create a comment you're going to need to pass in a couple things and then add it to the structure itself so what i mean is for the text we're going to get text as a parameter we also have to define the type here so it's going to be a string we're also going to pass in the name of the person that is creating the comment so i'll say string as well commenters url their profile picture essentially and i think that's it for now and of course we're going to do this arrow here and let's talk about what the result of this function would look like so program result i believe it's like that so let's do it that post is going to be go to and mute ctx.accounts.post so if you're so this is what we need to do let the post be equal to this context.accounts.post if you're panicking about this little variable here you're gonna need to have the okay which we have and all the other functions and then i'll go away cool awesome so i'll just leave that for the very bottom but let's set up the rest of these variables so i want to say let comment equals and mute this one will be the ctx dot accounts dot comment okay and of course you're gonna need to have a semicolon on this okay cool hitting save that all goes away cool so remember how we made the comment account data structure of what it would look like now we're just going to add values to each of those things so if that makes sense to you you can move right along so down below here let's talk about the comment dot authority so what we want to do when we create a comment is for the value of the authority it should be the actual authority of the account that's leaving the comments so that to get that we can do ctx.accounts.authority and we'll pass in the key by doing dot key parentheses okay cool so now we need to set the text of the comment and the text will be whatever is passed in for the text so you can just say comment dot text equals text all right this isn't scary you guys have been following us this should be a piece of cake commenter underscore name we can do equals commenter underscore name all right so then we're gonna do a comment dot com enter underscore url because i believe that's how i named it equals common url right this is just the parameter that's best so then you do a comment dot index and the index is going to be based off the posts comment count smart how we do this because indexes start from zero onwards but the count starts from one so there'll be one ahead and we can use that as the index okay from there we can do a comment.post underscore time and that's just gonna be the ctx.accounts clock to get the time that unix underscore timestamp okay cool and of course if we're going to be using that index and then last but not least we also need to increase the post.comment count over here because otherwise every comment going forward would be at the same index right this fancy little trick is not going to work so we're going to do a not comment actually it should be a post all right that's why we set it up earlier post dot comment underscore count we're grabbing the count and let's just increment it by we can just simply do a plus equals one semicolon beautiful and there you go that should be all the common stuff for this program there's a triple equals here this should just be double equals save i should be fine for now the important thing to note is that we just created a new function that set up context and created a new struct we're gonna have to redeploy the program again so that was the step that you guys did with me at the beginning let's go ahead and get that done all right so in this section we're gonna be redeploying our program because we just updated it with all the functionality of creating comments so to get started you gotta make sure you have some solana inside your terminal so just to make sure i'm gonna do a salon airdrop okay so make sure you have enough i have about nine i'll just do one more and you can do this if you have the solana cli tool downloaded cool it looks like we have enough that should be fine and again when we transitioned we're gonna do those same steps we're coming full circle guys so going into facebook soul go ahead and delete the target folder because we need to generate a new program id so i'm going to delete target folder all right all right there we go target folders deleted let's go ahead and do an anchor build to compile our updated program okay and you guys know this process takes a couple minutes so we finally deleted the target folder make sure you see the facebook and then from here we want to do the anchor build to compile our updated program all right we're getting an error from our anchor build something and create comment program there you go that was it cool yes just double check the spelling is good if you have that end in there that's probably why so let's try this again anchor awesome that's what we like to see a successful compiling of our anchor build next let's just deploy okay so i'm gonna do anchor deploy and this should generate us a new id that we're gonna update our build with all right guys we're two for two we got a new program id which means we can finally replace it so copy that new program id it's going to be different from then what i have so just take yours and your declare id here because now this is reflective of our updated program and you want to take that same id head over to your anchor tamil and change this as well but you guys need that at this point we are deep in so let's save and if we do this we have to do an anchor build and anchor deploy again so anchor build first but remember this time you don't have to delete the target folder we have to do an anchor build all right anchor builds done just do an anchor deploy and if this and this should spit out the same program id because we didn't delete the target folder and once that's done beautiful okay now that it's deployed let's move on to the next step all right so now that we updated our program with all the comments functionality let's start working on the front end so just a quick recap this comment section component is coming from the post one because for every post they're gonna have a little comment section makes sense so going into the comment section the first thing i'll have you do is let's import our hooks that we'll use we're going to use date from react and there's going to be two components that we're going to get from here they don't exist yet but we can create them so in this comment section there lives a comment.js which i'll set up real quick as well as the actual create comment component okay oops too fast boom great comment awesome so now those components exist we're free to import them so i'll say import comment from comment let's also get the create comment cool that's done that's all the imports we're actually going to need for now so let's accept those props that we are passing which for now is just comments view detail and name and url yep cool and then from there we can set up the rest of our dibs now so let's get started okay so first div style.wrapper not stashy after that we want to take the comments that we are passing down and then map through them so i'm gonna do common staff map and we want function within here and we want to say for every comment we'll also get index involved in here and pass that as the key and then we want to do next is something like this where we can say comment comment and pass down those props so the comment will be comment the key will be just index cool then we can close it also awesome so for every comment we're going to create a comment passing in what that comment is as long as along with a key with an index that just gets generated and increments for every comment makes sense cool so from there we also have the create comment component so i'll say create comment nope it is actually self closing and within here we also need to pass in a couple of things which will just be the rest of the name equal name of the name and the url being the url cool and that should be it now think about it we're not really using view detail here so we can actually remove it which means we can go back to post and remove your detail here because we're gonna be using it for something else okay awesome that is the create comment i think the next step that i'll do is let's set up the comment component itself so i'll be going into here and for the comment section this is just gonna control the quite literally the comments underneath there will be a common component for that so the first thing we should do is import image from next image okay we also want to use time ago because along with the the common component we should see a little image of the person leaving the comment as well as a little time stamp of when they so we say time ago from javascript time ago import n from javascript time go slash local slash okay cool then we want to do a time go dot we did add default locale and that gave us an error let's just do an add loco and pass an en then we're going to do the exact same thing as last time which is make a variable called const time go equals new time go say n e u s cool and what did we pass down into comment probably just comment just comment so we can say we'll take that comment and now we can set up and we'll come back for the style in the comment section in a bit so coming down below here all that we're gonna need to do for this is let's actually set up an empty fragment empty fragment and then we can put our comment wrapper it's not just wrapper anymore style dot comment wrapper dave class name this one i'll call it the profile image container and judging on the name you guys could probably tell that we're going to have an image here all right i'm going to give my little image a name as well which will just be style.profile the src will be equal to the comma dot commenter url so i'm just taking advantage of the value of the comment i'm taking advantage of one of the keys inside the comments which will have the url in it already so i can say height equals 240 the width equals 240 as well cool and then they're going to be a sibling div to that which is going to have its own class name as well which will be the actual comment container itself so there was a container for the image making a container for the comment let's say style dot comment okay awesome so let's make another div within the comment container and this one is simply going to be called style.name because it's just going to contain the commenter's name so we can just pass down the comment object with the and get the commenter's name using the key there we go that would make it dynamic from here we just have a normal div no class name we can just say comment dot text okay closing div closing div and then there's like a little section here which is something of the common wrapper which is why we're using a fragment because it needs all these guys need at least one parent this one this one is going to be style dot comment actions container right because in the comments itself there's going to be a couple actions that you can take or it looks like that you can take and reply that's exactly the that's the actions that i'm talking about the like and reply so make a div for that and let's set up those action items so i'm going to say div class name style dot action and we do a like and we need two of these because there's n reply one all right be sure to change the text inside the second one but it will have the same div cool and the last one here is going to be a div for the time stamp so i'm gonna say div class name time stamp okay time go format let's get a new date object date will be comment dot post time and we gotta convert it to number times a thousand we did this similar it's similar to what we did before you then have to do a comma and the format of this one is going to be twitter now okay cool and that's actually just the comment section so what i'm going to do is now add all the styling on top of it so since we're already in comment let's add the style so coming at the top over here i'm gonna say const style equals here we go so styling the wrapper first and it's not called wrapper i've been saying we've been using wrapper so much guys let's do a comment wrapper and let's give it a flex property cool so next i'll have a profile image container this one will have an object cover or of two okay file image uh i wanted it to be rounded and i'll say full rounded dash full there we go we have the comment container then we have common contain which will just be a background of i have here hashtag three a three b c let me see cool then we have rounded two x one handed text white p y dash two and a p x okay that looks good to me common container and like i said i want to start moving a lot more faster with the css because there is a lot of it so i'm going to quickly go through the next ones so this is the remaining css it's going to be the name with this text color it's going to be going to the text is going to be small with the semibold font and for the common action center we'll have the flex item center a gap of 1 rem ml 3.4 rem and b1 rem mt1 and here is the action item which has a cursor pointer effect that's the only notable thing and a time stamp with this format alright now let's do the styling for the comment section itself and it's gonna be super intense it's just gonna be one thing just the wrapper so let's do let's make this style object and do con style equals and our really intensive styling will be just wrapper and it's just going to be with full rounded oops rounded dash beat large then space p dash 5 pixels flex justify center and just five center you want flux direction column border t border gray give it that gray color of 300 and the border itself will have this three a three b three e cool and last one is pt awesome so that's it for the wrapper and let's see the create comments next okay so now i'm in the create comment section to set it up let's get any hooks that we're going to use which is just going to be the use date use state and it shouldn't be that should be a comma there we go that's also good let's also get the image from next from next image and there's a couple of react icons that i have for you guys which is all of these and we're just passing in name and url for now so let's set that up name comma url yeah so this is the create comment field so there's gonna be a little input field where we can type in our comment and then we should be able to hit enter so let's make a state that keeps track of the input variable and we can come down below and start making the jsx so to get start with the jsx i just quickly formatted it and let's just give this a class name so i'll do div class name equals style.wrap from here we're going to have a div and that's just going to hold the image i want to give my image a name of style.profile image the source will be the url that i passed in height will be 44 and with b also 44 okay and the equal the profile image all right so let's get to the fun stuff which is going to be the input container itself so that's exactly what i'm going to call this one so i'll say div class name style input and inside this input container we first need to set up the form so i'll say form the form has a couple things inside of it which is going to be class name of style.form and we'll also have a on submit but i'll set that up in a bit i will just finish the rest of the gsx let's say so for the input field the type will be text the placeholder will be right comment and the class name will be style oops no quotes style input and the value will be input okay and there's like a function on here but i'm going to set it up there's also a function on here which will be an on change because every time we write on the input there's a change we want to update our input state so i'm going to say e set input and then we do like e dot target dot value nice cool that's the form underneath there's these input icons i'll call them so we'll do a div class name and call this one actually input icons all right so from there this is where we're going to insert all of the react icons which i already have prepped out which are just going to be these all right let me climb them up so it looks nicer there we go cool all right and as you saw we're going to have uh on change but we also have an unsubmit for the form which is going to have a post comment okay and let's create that post comment function which will be at the top here above the return let's go so to make the function you're going to say cons post comment equals async and we'll do an event with an arrow and we want to make sure we do event that prevent default because when you're working with the form every time you press or submit the form it actually refreshes the page we don't want to do that for our app because that would reset a lot of our states and it would make you have to import input a lot of the information so we want to do it wait create comment for post one second all right cool yeah so we want it inside the post comment after we event that prevent default we want to do this function create comment for post and if you guys are unfamiliar of what this is it's essentially a function that we were supposed to make earlier and we're going to pass it all the way down we haven't made it yet because it didn't make much sense so for now i'll actually just comment it and we'll work on the full common functionality in the next part so comment that up clear the input after we type it in there you go so that is all the front end portions of this but before we finish off actually we should do some of the styling cool so coming at the top above this function let's do a cons style equals and do a wrapper with the flex items okay then we're going to do a profile image rounded dash and the there's the input to container this one's a bit of a long one it's going to be flex 1 h10 this background color round and full px of 1 are you cool the rest aren't too bad it's just going to be a flux give it a flex 1 items center and let's style the input now so we're just going to give it with full make the background of it transparent by saying bg transparent and give the outline none and for the input icons let's do a flex and item center as well and let's give it a nice gap of 0.4 are you okay icon which will then be cursor dash pointer text will then be hashtag 9689ae this is all the frontend styling for each component for the comments let's work on the functionality now okay in this section we'll be updating our feed with all of the comment functionality for our app itself okay so the first thing we're going to need to do is go back to your feed and let's make a function and it's going to be called a get comments on post so coming down here and a new line one second let's make that function so i'll say cons get comments on post it does exactly what it sounds like which is fetching all the associated with that post so we're gonna do something like this there you go and make sure it's asynchronous let's insert a try catch block and for the catch it's just going to be an error and a console.error and pass in the air cool so now for the fun part when they get comments in this try block let's get the postages so let's say let the post address equals await anchor web3 dot key this is the capital one public key dot find program address and then from there we're gonna do the utf8 code this time i'm gonna make sure it's spelled it correctly utf8 yep and we'll do a post index dot 2 array and we'll do a buffer oops for e and just do an 8 here awesome and we also want program dot program id because the first step to getting all the comments we also need to get the post and get i'll then get the comments within that post so there you go then we can say khan's post equals await program dot count dot post got and we'll say post address so just like before i was explaining this like a signer this is really just the address of the post so we're going to do a let comment addresses right because there will be multiple comments associated to it with the post and all of this is stored on the chain at different spots common addresses let's initialize an empty array and we're going to populate it with all the comments so in here we're going to make a for loop so say for the i equals zero i is less than post dot comment count alright because if you remember when you're the post structure it keeps track of how many comments there are so we want to take use of that and do a nice two number here and so essentially for every comment we want to loop through each so if there's three we're gonna loop through all three and make it to number two i plus awesome and then we wanna read the state on chain so let's also get the comment addresses by saying comment signer equals await anchor dot web dot public key and then we want to find program address put the parentheses and again put in that array where we do the utf8 code again this time we put in comment and we say new b with the index dot two already like i'm gonna do a buffer e okay i'm gonna do a new bn i dot two hurray like and the same thing we're gonna do a buffer again be in an a yeah bn is just a serialized big number that's all you need to know don't worry about too much and then after that we can just do the comma program.program id again okay and for every comment that we do get and in code we want to be pushing so we want to do a comment addresses which is that empty array that we set up and we'll do a push method here and comment signer all right so essentially we're just pushing all the common addresses that we get into this array okay and that's it for the for loop but there's still a couple more pieces of code i want to make a variable called const common equals and wait for the programs count because for every program there's like an account storage i want to get the comment count and fetch multiple and then you can put a comment addresses in here and it's all going to be put into that variable we can do from there is similar what we did when we grabbed all the posts is actually sort all of them and we want to sort it in order so a dot post time dot number minus b the same thing b dot post time to number and after it's sorted we can just return comment the sorted comments and it should just be the catch and there we go oh yeah this is spelling an error nice and that is the get comments on post function awesome so the next thing i want to do is another function called save comment all right so this one's going to be asynchronous as well and it's going to take in a couple parameters which is going to be the text the index and the count we'll just do an equals arrow and let's get the post addressed again so i'll call post assigner equals wait anchor with public key find program address okay here we're going to do the utf8 code again and we want post i want to put post there we do the indexed to array like again with the same parameters of buffer be and eight then outside the bracket comma program.program id from here we can do the try catch block catch we'll do error and then console.error again amazing now in the try block the purpose of this function is to save the comment so let's first get the comment address so i'll say comment signer is equal to await anchor dot web three dot public dots find the program address okay this is very similar to literally to what we just did and it's a post we want comment here then do the index dot to array like the three parameters eight comma here and we want to count that two and eight then a comma and program dot program id okay there we go next thing we want to do inside this try block is let's have in the weight take that program then do a rpc dot create comment so we're actually talking to the function we made which is to create a comment now okay it's to create a comment right so if you remember that function that we made earlier it's going to take three parameters text the url and then there is the context part of it that's what this is and that's why i'm going to say an object comma object and for the first key it's account and for post we do the post signer or post address comment which is the comment signer that we got and for the authority that could just be while it's public key so we can actually write a wallet.public key then comma and then you want to just spread out default accounts cool after that you want to do an awaitprogram.account.commentcommentacount.fetch and get that comment okay and after that's pretty much it so that's all the functions that we're going to need for the feed one thing i would like to do now that we have everything is set up all my use effects so if you remember use effect is a hook from react that's going to run different side effects at different stages of the component's life cycle so what we want to do here is set up the first one which is going to be a use effect and the use effect takes two parameters the side effect that you want to perform as well as the dependency module which i'll just initialize is empty for now and within the use effect let's set up an interval all right this is just that interval to constantly get all the posts because if you remember before when i made the post it's not actually getting them until i clicked the refresh post button this user effect is going to get it i'm just going to make another call to get a post after the certain time of the interval so let's do a set interval here and it's doing async and we're gonna do an await get all posts all right so now we don't always have to click the button and let's give it two thousand four that's how long it will go for and then get all posts just to get the initial get all posts out the way then we can do a return to clean up the interval that we set up to clear the interval and pass in that variable cool but our dependency module we want to we care if the connected state has changed and if the get all posts is run okay so those are the two things you want to put for the dependency module so with that in my get all posts there should be a set loading here and turn that to false alright because once we get the post it shouldn't be loading anymore all right so then when you set this set loading defaults after we get all posts and we're about to set our data we'll set the loading to false so that we won't see this like loading div that we have set up in our conditional rendering we would see the posts that are there and the create component awesome all right cool so that's that first use effect i think there is one more and that's going to be ah yeah the use effect for the actual toast itself so coming to over here let's make another use effect and here we'll get toast and what we want to say is post refreshed and and then for the icon it's actually going to be an emoji so i have that over here and for the style it will something like this where we have a border radius 10 pixels background hashtag two five two five two six and the color is going to be hashtag fffcf okay cool and like i said use effect takes two parameters second one being the dependency module and this is gonna run when post style length is updated or changed okay and it's not posted to posts with an s hit save there you go so that's all the functionality for the feed only thing that's left now is to actually pass everything down so if we come here we can comment these out now so we have get comments on post function that we made at the top here and we're passing it as view detail for the save common function we created we're passing that as create comment okay cool so if we're passing this down into post we should head there so i'm gonna do this and let's get to the post and then in post let's come up to the top we have the view detail and create comment and the create comment okay it looks like we're not using the create comment yet in the post so that's set up that means we have to set up a couple things in the post component now so we have something called clock to date string that's good we have the post detail and we also need to make another function here so let's do a cons create comment for post that's what this function is and it's going to be asynchronous i'll have text and this is where we're going to call the create comment and we're going to say text post dot index and post a comment account okay cool so that's the function for there and while we're here let's also do the use effects which is going to be a use effect over here and for this use effect all i'm going to do is just call post detail because we weren't calling it yet that's calling post detail and for the dependency module it's just post detail right that's important so now this function is actually running and we're actually using view detail here as well okay let's use effect is done second one that i want to do is if the comments dot length is greater than zero so if what i want to do if the comments that length is greater than zero is user make use of our state which is comment section opened set that to true okay and we're going to constantly check that depending on how many comments there so if the comments state is updated or changed it will then run the check to see how many comments there are and the length of it cool so that's the use effects then we have a create comment for post this is going to come down to the comment section and this will be the last thing we passed down comments for post set that equal to the same thing now it should start to make sense with what i did earlier when i didn't await create comments for posts so i'm gonna hit save and let's head over to the comment section i think i see it right here let's accept the create comments for post create comment or post you can say create comment for post equal to create comment post then let's head over there to the create comment aha there we go it came it's all coming together now create comment or cool so this shouldn't be grayed out anymore we did a create comment for post let's see there it is awesome all right so i'm noticing we're not using name so i think it's safe to just get rid of it cool and then if we go back outer component we don't need to pass down name we just need the url and create comment for post awesome all right with that said i think that is all the functionality for the comments we updated a lot of our components with their use effects and we should be good to go all right so the only thing left to do now is to test out the comments so which means we're gonna have to start our server up again okay i just did an ntl dev where it looks like we're already getting an error in my feed i think i know what it is already we should have a comma there so line one six okay oh that's the same error as before let's just hit a refresh there you go it's all loaded now no errors and phantom wants me to log in again so there you go nice and updated for name lance sign up so let's go to that use effect and that's in post all right so it's saying doesn't know what comments dot length is this shouldn't be square brackets guys it should be curly brackets okay now let's see if that's good could still be reading the length because we initialized it with an empty array see what we got there we go awesome so now let's take a look stu lance sign up and again cannot read properties of define reading length let me just comment this out then and let's just count to log what comment should be an empty array and we should be able to see the length of that so now let's try this again as i was saying we need to get to our utils folder and if you remember in our const this is why this is the old program id so let's give it the new one and if i remember correctly you can find that in the anchor here's the new program id copy back to my utils and if you do this make sure you update the facebook underscore soul.json because this is from the old one so what we're going to need to do is get into programs go to target yep literally go in the idl folder and let's copy that guy and what we're going to do is paste it into oh we can delete this one the old one delete that one paste in the new one and i also want to just reset my terminal all right mix these guys up yeah there we go so we updated our idl we also updated our constant js we just got to hit save and now when we log in we shouldn't see the hello world post that i set up because this is a whole new program so in this program they don't have any posts or comments stored on chain so there you go so if you ever wondered how to reset your post because you can't delete them you'd have to just redeploy your program now let's do a netlifedev and let's try this again all right here we go it's loaded back up again let's make this bigger we can actually select our wallet there we go connected our wallet lance and let's see what happens click sign up post refresh there should be nothing nice let me just check my console if there's anything that's not showing up let's go we have a brand new app right new app because there's no post from left over so let's just take this time to use a checkpoint if you guys are still watching the video you guys are crushing it so leave a comment down below something like this let's say let's say golden whatever you say golden i know you're watching this if i don't see golden i know you haven't made it this far so i'm actually gonna make that a post as well so let's hit enter right we got the phantom wall because we're gonna be storing that post on chain this is the network be super cheap since it's so let's approve and let's wait oh there we go let's go this is actually really cool guys like we're actually writing to the solana blockchain and storing our posts on there so now the fun part let's do a comment let's see if this works now oh cool so yeah it popped up let's see where is my post it's right there so let's hit enter we see errors because that means we just have to fix it all right create comment for post is not a function because i'm taking it as a lower case you create comment four post become four post yup it's really case sensitive awesome so i hit save here so i did some testing it looks like it's a function here and that's because this is also lowercase f okay that saved me the headache let's go with that i'm logged in as kevin it's right there enter nice okay that's that makes me happy we're actually seeing an approved transaction sign to let this load i'll hit approve and see if anything comes up so it seems when i refresh the page it works and i was wrong before this actually isn't set up yet so i think what we'll do next is let's set this up that's going to be inside post there's a refresh comments button here i just need to add an on click to it okay yeah so i want it so that if i click the refresh comments it should be able to refresh and i pointed out that it actually doesn't because there's no on click setup to it so we're gonna add the on click of post detail here okay remember post detail was up here and it's gonna set the comment state awesome so i'm gonna hit save and let's just do some more testing so i'm gonna hit refresh all right let's make this one fun i'm just gonna do i'll be causing for this one and let's change this from lance to causal quasi i know there you go we're a different person now and all rights right if you go into the use effect i commented out so we should bring this back in there you go so now with this commented back in it should load the comments if there are one just for fun let's make a post let's do shout out build space so they do a bunch of cool stuff there as well as we are partnering with them to make these cool builds together with you guys so let's see if kazi can make this post let's do a fresh post there you go there it is shout out build space awesome so as quasi i'm going to put some comments to continue testing this let's see hey i think i approved and usually takes a couple minutes as well but this is so far so good let's hit refresh comments see what's going on so this is just the first two comments still there it is just took a second there's the hey we got the comments and we got the post functions working this is super exciting guys there's not much more left so if you made it this far you have an amazing app on your hands all we have to do now is let's work on the right sidebar and the sidebar itself all right guys i'm getting super excited we have the functionality the core functionality of our app working we can make it look even better because the reason why it's all stretched out is because we should have these sidebars in here so if you remember long long time ago we made that in the index so let's go ahead and work on so temporarily i'm going to make this smaller and this one bigger so that we can work on it so in the index we have this sidebar here let's create that component say sidebar.js this is the sidebar for the left we can say rafce and while we're here let's also get the right sidebar right sidewalk.js okay then we can do an rafce cool okay now that we have that done going back to index we can start importing them so i'm gonna comment this guy back out you can actually get an auto import by doing something like this okay and i can also do the auto import for this if you delete the first two type in the r and there's a suggestion i hit tab go close it and if you look it's all imported it's nice cool and you can see that it is taking up space here with the right sidebar on the left sidebar let's go ahead and code this out now so going to the components let's do just the sidebar and let's get set up all right for the sidebar it's actually not much it's literally just front end all the imports that we're going to use is the next image as well as the stuff from the assets folder so this is everything right here so it's just image from next image all these icons that i have set up and there we go okay another thing i'm gonna do here is const sidebar data equal to an array and it's going to be an array of objects which is going to have each one is going to have an icon that holds one of the icons like icon as well as a title for friends okay the idea here is that we're gonna map through this data and for every single object in this data generate a component for it sorry not generate a component we're gonna generate some jsx for it there it is that is the friends one and it's not title's not friends icon it actually should just be friends with quotes nice okay so that's it for the first object same thing for the rest so let me include a comment here and we'll copy this about five times one two three four five and be sure to change each one don't leave them in there so let's do a friends let's do eight groups and this one is called groups then we have the marketplace icon marketplace icon and this one is just place we got the watch icon which will just be watch you got memories memories and we have the drop down icon with the see more and this is just completely static data awesome so we're using all of this now just to come down here okay let's set up our jsx div class name style.wrapper div class name and in here we'll have the image style.profile for the src it's going to equal you and the height will give it 30. 30 for 30. and for the all it's just simply profile image again if you're wondering where this url is coming from we're going to be passing it down with the class name of sidebar item style dot sidebar item with okay and my voice had saved it's because there's no style property that makes sense i'm gonna just quickly put this in here before i forget the structure name and url and i have to pass that down later all right so this is the fun part we're gonna go to we're gonna do a sidebar data right that's the variable we created earlier yeah sidebar data and like i said previously we need to map through and then let's put parentheses here and for every sidebar data item and we also want to do a comment we want to generate some jsx for so actually don't need curly brackets you can do something like this and here we can put the div that we want to generate just going to be class name style dot sidebar bro with the key of index because each generated item from here should have its own unique key prop okay and then inside this div i want an image and that image should contain the image of the object that we passed in so class name is simply just going to be style.sidebar icon src will just be the sidebar data item icon and height 30 and width 30 as well okay all is just sidebar awesome last but not least we have another div here this one's going to be class name style there you go so much the one that's literally the same as the one before except the what goes in here is going to be the sidebar data item dot title so that's the friends the groups the memories the cmore that's what it is and so we can stop seeing this error we just have to add our style object and just to go through it really quickly this will be the css for it since the fun functionality is mostly done let's do an alt b and c and there you go so this is the wrapper the sidebar row it's really long we have the profile image sidebar item nice okay we can't really see the sidebar one thing that would help it is to actually pass down the name and url so here student name equals name and url equals you there you go let that compile and let's see if we can make this bigger oh it's asking me to connect my wallet again and then like i said let's be causey again and i think i put that here as well oh sidebar it's not defined let's see style yeah i just forgot to put style in front of that there you go hey okay so again quasi i am using this dice bear thing and all i have to do is just change this and you can get a different profile picture hey that's nice okay now i think it's just the text color that i need white that's not the right color see what's going on okay and then it should be white is it even there i'm highlighting it oh so it's not even there that's because this should be sidebar data item dot title and now it should work there we go now it's looking amazing so this is the sidebar we hover over it has this nice effect cool so now i just need the right sidebar and that's going to be all the frontend functionality so let's work on that all right so we'll be working on the right sidebar now and one of the first things that i'll do is get my import stuff ready so i'm going to import image next image import so there's going to be another component here and it's going to be called contact and before i can actually import it i need to create it so i'm just going to go components new file contact dot js rafc did it too fast there you go there's the contact now i can import it so let's do import contact from contact and that should be it from now what i want to do next is set up the jsx and for this one i will have the use which is just style okay div class name oops this one will be called title and it'll be the title will be sponsored style dot ads container this will be the actual ad itself so you'll say styled ad then for the class name will be a style dot and then within the add div we also want to have the add image container which will host our image and the image just to keep with the theme this all right excited for you guys to see that one so you'll see it in a second so that's the source and just format it so it looks nicer there you go yeah for you it could be whatever you want i'm going to do a height 100 a width of 100 okay and then for the class name i'll call it add image and you're going to guess what it is from the alt that i'm gonna write it is good old cp logo okay cool all right so that's the image for our cp logo we got closing div here close off that image container but we still have to do the rest of the and my quick ad for you today is going to be we are the number one channel for blockchain development let's go yeah where else are you going to see a huge project like this where we get on chain comments on the solana blockchain so shout out to solana and thank you to the cp team that worked really hard on this project so let's do a class name for style and if you're interested in more of our stuff head over to cleverprogrammer.com just did an ad while i was coding so that's two closing divs and then we also have another one here alright so we're gonna have another ad and it's gonna be pretty much the same convention so i'm gonna go down below here and hit paste the only thing that's different is the image and the little description that i have so let me get the image for you guys okay this is the image awesome and the alt is not the cp logo because this ad is brought to you by salon and then for solana they have this little nice tagline that is awesome which is going to be powerful for developers and fast for everyone password and we just put for their link it's solano.com okay cool those are the ads closing day of closing so those are the ads that we have the next thing that i want to do is set up this really cool thing so the first thing i'll make is this selfclosing div called and i'll call it and i'm just using this div essentially as a divider so that's what i'll call it style dot divider cool okay let's do another one with the class name this one will just be the title and it's going to say context all right because we can do this cool thing where we can set up sanity to grab all the users and those will display as our contacts on the right sidebar okay so let's make a container for those contacts call it class name contacts okay and here we're gonna have to stop for a second because we're gonna need to create a user's object let's make a static set for now so i'm gonna make a variable top here say const users equals and let's set up that array of users so it's an array with an object and each object will have a their wallet address and it will be just the user which should just be their name let's put we got kevin we got kazi get david in here we're all gonna have the same user let me just double check real quick okay so like i said we're gonna make a static object of users which will just be an array objects and we can give the same keys and values for all of them so for the wallet address you can give that the value mine they're all going to have the same wallet address okay and then there's just the url right so what's their profile picture i'm going to make it nice i have a random one that i could use and this guy just have a name one second i'm actually going to call this profile image and keep that his name and the name i did kevin and the kazi we also should get david in here and we can't forget about mana and cool but they're all going to have the same picture i won't go that that far for them so let's go yeah so now that's done we just got to set up the users and map through it so i'm going to do users dot map user ray and we'll do a return contact with the key equal to that user's wallet address we set that up and we can pass in the actual object itself because we're going to be mapping it out later cool so that is that mapping through the users don't hit save yet because we'll get ugly error what you want to do now is set up the styles so again i'm starting to go through all the styles fast so let's do a con style and these are all the css that we're gonna need for the right sidebar this is the wrapper the title the ads the ad the image container and everything else cool so from there let's just work out the contact and we'll be all done with the right sidebar okay for the contact let's import image because for every contact i want to use the image so let's do from next there we go and import image from next image i'm going to destructure the user from it and just to set up the jsx and do one of these the first div will be called contact nope style dot contact inside that div this is where the image will go the source will equal the user and i believe i called it profile image then we did a height 40 and a width 40. then we got class name equals style.contact image okay and then last but not least the last thing inside this contact div will be another div which is just going to hold the username so i'll call this contact user or contact name for short and it'll just hold user done all right cool so we can save this and we just need to get the styles and again here you go this one's short again feel free to pause the video if you need to catch up on the styles here's the one for contact don't worry i'm going back here's the one for the right sidebar got it cool so once you got it let's hit save should be no errors but of course there is one and it's because it's on the right sidebar we just need to close this off save let's make this bigger for the presentation while it's connected let's go as quasi again and again this is the default profile useful a url that i set up i'm just going to change it hey there we go the whole team is in the app garkaze lance kevin and david monathan frankie and there's our two ads it looks like just like the real thing shout out to solana and shout out to the team so there you go that is all the front frontend functionality of our app the only thing left to do is to connect sanity to the whole thing which we installed earlier so let's do that all right so now that we're almost done let's finally go and set up our sanity routes and make calls to that database because we had it set up way back but now we're going to come back to it so what we want to do is go to our pages folder and under api we have a hello.js here we don't need that we're going to be setting up new ones so delete hello.js let's make a new file and let's call it create user.js because this should actually create a user on sanity when we set it up so first thing we have to do is on the way back when we set up the client let's actually set it up so import client from that dot forward slash dot dot forward slash lib slash there you go so we're importing the client then we're gonna do a const the name of this is gonna be create user on sandy equals async do a wreck res and then from there we can do a try catch okay try catch is gonna have and if there is an error we're gonna do a res.status of 500 which means internal server error then we can send them a message with an object as a parameter and the message key with the value error comma and the data value will be error dot message now for the try if we're going to be creating a user on sanity we want to be creating a user document so let's set up that user document by saying const user doc actually because we can call it that and put in the keys and values we need which is the type of document this is a users i want to talk to that part and the id we just have to get the user's wallet address for the id okay and then now we can actually fill out the fields or the field the fields of the user which was believe name the name we can just do rec body.name and do a wallet address user wallet smaller you can do a wreck body that user wallet address same as the id then we can do the profile image of that user and let's just grab that person's profile so recta body profile cool and that's not all in the next line so we want to have an await so that is initializing the user doc here we're actually going to create that doc so we'll say create if not exist sanity has this cool method that if the document does not exist it will create that document it automatically checks for us and if it doesn't exist create it if it does just leave it alone cool and last but not least we have to do the res.status here so that we can send a status of 200 which is okay and for the message and just say success cool so let's create user pretty standard stuff next thing you want to do is make an api route to fetch the users right after a while we want to be fetching every user in our database and then in our context that's how we have this static david mona frankie so you can visualize it so in the api folder i'm gonna make a new file and say fetch users yes same procedure as the create one we're gonna import the client so we got the client next we're going to do const get user info and that make that into an asynchronous function and then make that one secret yes i did this one will be rick and rez just like the last and we have to catch is literally the same as the one before so i'll just type it out cool that's the catch for the try to get all the users in our database we need to query for them so we can say const query equals something like this and what we want to put in here i have the query saved up in my it's going to look something like this yep this is what we're going for we want the users and their names well addresses and profile image cool that said that is the query now let's put these into use because this is just the api we need at some point in our components we're going to be using all right so now that we made that let's actually start using them oh so now we made it don't forget to actually export them that's what i was thinking if you had to export default get user info so we can actually use them in other places and same thing with the create user we want to do a export default create user on sanity awesome yep cool so make sure you export them and then to actually start using them we're going gonna head to the sign up component believe this is where it was yes cool so we have this create user function that we set up a while back and all it does is set register is true but what it really should do is make a fetch call to the api we said what we need to do is make a variable called resp and it's going to equal late window dot solana connect solana.connect that's what we want all right so yeah if you're wondering what this is doing we're making we're getting a response from phantom so that in this next line we can say const wallet address and use that response dot public key to string so this is how we can get access to our phantom wallets address so i'm gonna store it in a very because we're going to be using it later we're going to be using it to create a user so from there you want to do a try catch and the error i'll just make it now it's just going to be console. pass in here okay and for the try this is where it will fetch that api route so what i'm going to do is do an await fetch and let's call it and say api slash create user yep it should be the same name that we called it there you go awesome just wanted to double check now we're good to keep on coding and before that closing parentheses put these curly brackets because now we need to put the method which will be post some of the headers content type and application slash json it's pretty standard and there we go that's the headers next part we want the body json dot cool and here this is where in our create user on sandy we had the rec.body and we got the user wallet address the name and the profile image we're going to set that up here so we're going to say user wallet address this has the value of wallet address name his name profile image is going to be event.target.url.value that's how you get the image amazing cool so whenever now when we sign up it's going to create a user on sanity okay and while we're here let's go to our index so let's do one of these awesome and for our index we should actually have a use effect setup okay and yeah like i was saying we're gonna have to use effect here but before we can make the use effect we should make request users data this is going to be and this is going to be an asynchronous function with active account as a parameter because we want to grab all the users but we don't want to grab the user that's currently active if lance is logged in we shouldn't see lance in the contacts so then if you watched our tinder app we did something similar to that as well so let's do a try catch i'll finish out the catch first which is just error and the usual okay but in the try though we want to do a constant response equals the weight fetch and then the api wrap okay and the const data is going to equal a weight response.js and we're finally going to be able to use our user state to say set users as data then console.log users and then show me the data that data just so i can see it and that's it request users data from there we just need to set up the user effect now that we have the function it's pretty small it just looks like this it's a use effect that has an asynchronous function inside and in that by synchronous function it's an await to request users data and it's only going to one just one that's interesting okay one of the last things i want to do too is oops one of the last things i want to do too is create our function which is the general which is the something's happening oh it's the api to fetch you oh i see it's because if i go to control p and then do fetch users let's see yep forgot the arrow function here go hit save and one thing i wanted to do here okay and as that's loading one thing i want to do that or just remembered underneath create user underneath create user i want to be able to generate a random url that's how this random button works do it it's pretty simple i have the code snippet for it it's just this it's just generate random image raw and you just want to set the url to be just a random avatar from dice bear right and we're making it random by just using math.random we can add on click into here let's do on click equals and then we'll say the general profile image so i'm just going to refresh this one more time and also i think i can actually make my url blank now so as i was saying now that we have the generate random profile image we can probably make this url blank again so go to your index and make it blank and before i hit save what i want to do next is pass down request user data all the way down to my right sidebar so let's go down to right sidebar so then for the right side we can finally pass down stuff into it and what i want to pass down is just get users and that's going to be equal to request users data function we also want to be passing down the list of users and then we also want to pass down set users okay there we go and that means we can go into the right sidebar and pause it for a second okay cool so now i'm in right sidebar and let's actually accept the props that we're passing down which is now get users and users and i had set users but now i'm thinking about it we don't need to pass that down so i'm gonna go here we can take it out just two things for the right side bar and going to here now that we have get user which is really just request users data what i want to do is set up a nice use effect underneath my style and we're going to call that function so i'm going to say use effect and did i import you because i did i didn't import it like that though so i could just do this there you go that's the use effect inside we can make an arrow function and i want to run an asynchronous one and all we're going to do within here is just use the get all users make sure you have get and a way to get all users cool this little guy right here put a dependency module cool and then we have users we are now passing them down and if i save this and go to i believe contact oh no it wasn't contact i remember making a list of users we actually don't need that anymore now that we are passing it down and we're getting them straight from sanity let's see so saving all that now it's just left to test it let's test up all our routes and see if they work so another thing that i'm going to need to do go into my terminal and if you guys remember we have the cd to studio and then we can do a sanity start okay let's compile cut the camera that oh one second all right so it looks like it finished loading up sandy's started so we can go to localhost and instead of 3000 3833 and we haven't made any new users because we just set up those reps so if we sign in or sign up this should get populated with a user cool so let's give this a try i'm going to say lance already in there image with the missing source property one second all right we're getting this error when i start typing it in my guess would be that it has something to do with the header and if we scroll yep i think it has something to do with this because if name exists which there was when i press l there should be a url and remember we remove the initial one so we want to say or and hold on what was i saying again oh yeah so saying this is trying to generate url that doesn't exist so what we can do is url or put a default one like this okay let's hit save frame time is asking me to connect they're all connected if i type in something here with die nope cool so it just generated the random image that i have there that's what the or is doing but what we can do is put in my name right now we have a different logo just a random logo and you can just cycle through them and change it if you don't like it let's just pick this one i can't really see it i'm gonna pick sign up now is our wrap broken probably oh now time for the debugging part undefined reading map sidebar okay oh so in the right sidebar there's no users yet so i guess what i want to do is take this list of users and go to where i got this from which is index and i can actually make that the default list of users so if i put this in here i don't have to say const anymore this is the default list of users that will load okay i just finished refresh refreshing we set up the default users let's try this again lance random picture sign up users.map so we're passing it to the sidebar in the sidebar we're getting the users i guess before we map stuff out let's console.log what users okay hit refresh i commented out the map for now let's just see if we can get a user created let's just do lance random site amazing okay so that works let's go that's a really funny picture let's go to see what is loaded if i press refresh there's a new user created no no new user created which is weird api resolve without sending a response this may result install request oh that's for fetch users but where is my create user let me just double check my create user i believe that's in sign up i'll be smart to probably call create user so let me just do that let's do okay let's try something i just want to make sure it's grown in create user when we do on submit create user yep okay so it's running on submit what i want to know is if it's actually running this what we could do is go to the api route console.log in console.log here creating and i can also do this one also.log signing up this one will be lowercase signing up so if i see this one that means the create user is running if i see the other one that means this means we're actually creating one so let's see if that works i'll just refresh this one more time try again random sign up did we create a user i don't know let me check my console okay we got signing up we got two undefined cannot read properties of reading value let's go check out what this means we didn't see our console up for creating a user so maybe there's something here cannot read property or reading value is there any about there's no value here so it's probably within this so we have this value here but this should be coming from the event okay maybe as a temporary solution we should put this as just url because we have access to it so i'll just hit save and let's try this again all right so one more time let's random sign up let's take a look okay we got didn't see my console log again failed with the status of internal server error that's interesting so we weren't able to create a user for some reason all right so i'll just double check the spelling and make sure that the schema is the same i put this back to event target url that value let me just try one more time so let me hit refresh okay so it's asking me to log in once again plants here random sign up oh oh might know the id i might see the problem now whoops we have a content type here let's see if that fixes it okay did that do that somewhere else no but that will definitely help our issue so let's try that let's give that a try and i think one more thing that i wanted to do in the api route itself we have the signing up touch user create user let's put a console log right here okay cool one more time let's do lance random sign up inspect element shift of those from before or after but we can just always check here nope no documents of this type all right back to the drawing board all right so after a couple of testing i console logged url and that's known to be working so i don't see why not this shouldn't be working because when i console.log the event.target.url.value i got undefined so let's just try url save that i'll save it like this take out the console.log and now let's try this again and while i'm here i think what i want to do too is let's find that index so i'm going to do index and the reason why user is undefined is because this doesn't have an s so there we go that's another thing all right let's try it so i want to do lance signup inspect element fail to load okay so there's no value error anymore but we're still seeing a status of 500 which means we have to go to create user and let's just see what's going on here all right so i took this some time to just read every line and fix up any typos so if i refresh this we should be good to go now so let's just do this for old time sake profile image random sign up crossing my fingers let's take a look okay no 500 error so far fetch users isn't working because i took that out okay hey there we go finally so we have the users and let's see that's me yep my wall address and my profile picture very nice cool so it looks like our routes are finally starting to work guys all i need to do now is go into i believe it's the right side yep so i'm going to be right sidebar we're console logging users and we're getting three users that's the default we need to be running get users and i'm actually going to go back what was i saying right sidebar get users all right so to get started with this go into the right sidebar and i think i took out the map i did and if i were to bring this back out and then save there we go so there's that's our static one but we should see something for this so it says api resolved without sending a response for api fetch users so let's take a look at that oh that makes a lot of sense i need to set up the status for this i got too excited guys so what we're going to do is after the query we want to store this sanity you want to store this in a variable i'm going to call it sanity response equals await client dot fetch query okay let's put this over here and essentially we made the query variable and what i want to query but i didn't fetch the actual query itself so let's do that let's do res.status 200 dot send then do a message of success and for data we put the sanity response in there cool all right i think that should be it we actually have a response now so let's try this setup again let's make another user test one two three four let's do lance again and it shouldn't actually make another user because it's gonna depend on my wallet account and there's my contacts there we go so the context is working we're actually querying all the users as our contacts there's me nice all right guys how do you like that all of our sanity database is up and running we're able to generate new users we can pull all the users in your contacts you can even set up a query if you don't want to see your to not get yourself and get everybody else but other than that this is the full app like you're able to create posts and comments on chain and we are in one thing that's left to do now is i'm gonna show you guys how to deploy to netlify so let's open up our terminal and what we can do here is do a netlify init give this a couple seconds all right and we want to create and configure a new site i'm going to do that site name facebook hands do dash so is that available nice cool and we should do a yarn run build because we are using yarn and the current directory is the local one okay press enter yep we have to install the next js plugin and let's say yes to this cool so we got our deploy key i already linked to my netlify to github right before now we can just do a git push so we can get trigger the new site build okay what we can do now is actually go on to netlify there's our facebook soul deployed see it's building and let's just take a look i'm let this build out and i'll show you guys what's up and the cool thing about notify you can also preview your deployments but it looks like it's already live so what we can do scroll to the top click on the site overview and you're done look at this we got the facebook it's all there and deployed you can literally send this link to your friends and they can create users and they can create posts and leave comments as long as they have a phantom wallet and some solana you can do it and store those posts on chain so that's gonna be it for this video hope you guys enjoy and be sure to be on the lookout for more solana videos and more ethereum videos and click on that build space link and claim your nft to prove that you completed your project with us and build space and if you guys are wondering how to do that when you click the link you're going to sign up with their email and go ahead and connect your metamask account and make sure it's connected to the polygon mainnet once you do just hit the mid button sign that transaction and there you go so that's gonna be it for this video i'll see you guys in the next one bye