hey guys what is up this is kazy from clever program.com and you are watching code academy part 15 I'm running out of creative things to do so I'm just now calling it as it is part 15 um yeah so today has been a pretty good day it's been pretty productive it's a nice Sunday morning hopefully you are having a good time as well wherever you are in the world and watching this I hope you're just relaxed and focused and you can enjoy this as well as learn enjoyment and learning at the same time right that's what a university Professor would say but not me I think those two things go hand in hand and I think it's almost impossible to truly learn something without actually enjoying it because when you enjoy it you experiment on all of the wise and all of the fundamental basic understanding of a certain concept and until you question the basics of something you won't truly understand it and the only way you'll question those things is if you like it so much that you are playing around with it your brain will wander and you'll naturally ask those questions right and then you pick up those Concepts and learn those things so while you're watching these videos you guys are actually getting a lot better than 99.9% of the people who are taking this course kind of just brain dead and following the instructions on the left hand side because trust me that doesn't help you and almost everybody that I know personally who's taken this they just go for some reason I just took this code academy course and I don't remember any of it well that's cuz you were working on muscle memory then you're actual memory and understanding okay so true memory the reason why you won't forget these things is if you truly understand them cool let's just take a look at where we are and where we need to go so I'm going to going to go back to course page and we are at 50% completion good job if you made it this far like actually go and pat yourself on the back you know just breathe in and breathe out and relax yeah just relax cuz we're doing amazing and we are making a lot of progress so we're more than halfway done on unit 7 list and functions and then we're going to go on to Battleship that's going to be a really fun part so let's get to it all right let's continue moving on printing out a item by item in a function or sorry printing out a list item by item in a function so what does this mean let's give it a try what they're saying is we're going through each item and printing out that item now I'm going to show you a simple way and then I'm going to show you the way they're doing it okay so let's do it the simple way first I will say for item in an print item right so n is this list right here and item first time going through is going to be three is going to be three right here it's going to print three and spit it out to the screen right so I think you already know that then item is going to be five then item is going to be seven you got that part of the loop right that's the easier and much nicer way to do it but the way they're going to show you is more computer sciency and it applies to other languages than just python so it's a very common way to do it in Java and C C++ that's how they do loops there most of the times okay so that's how they're showing you okay so what they're doing is I'll actually call this index instead of I and then we'll abbreviate to it later to I so it makes more sense so here's how this Loop Works let's break it down step by step so first of all I'm going to comment out these lines and I'm going to go here okay what is this part and what does that mean and what the heck is range right range essentially creates a list on the fly so let me show you in Python 2 okay uh you can use the terminal or you can use your idle so let's use the idle because if you installed python you might have this idle right here so I'm going to create you can also just do it on this website that I have up there reel.it okay you can do it anywhere you want I'm just showing you in multiple places so you know that you have different options range of five let's see what that gives us it basically created a list on the fly so instead of having to do creating a list like 0 1 2 3 4 You can just say range of five how will you create a list of 10 elements you would say it range of 10 but quick quiz of your understanding of range if I do range of 10 will 10 exist in the list or not if you said no good job it'll actually be from z0 to 9 so what you give range is up to but not including that point that's how a lot of the things work in Python but how are they passing this function range to arguments they're passing this function to arguments you see that comma so they're passing it two arguments so here's how it actually works range takes in a start argument and a stop argument okay and so I can say start at one and and go up to 11 which means go up to but not including 11 this part one it says include one okay so start from one and go up to 10 is how I would rate it so here we start from one go up to 10 so if I wanted to make a loop that ran 11 or however many times that is right I can say for I in range um right for item in range 1 through 11 print item you see that it goes 1 2 3 4 5 6 7 8 and same way I can do five through 11 if I wanted okay so pretty simple you saw it looping through and goes 5 6 7 8 9 10 and done essentially what it really is is is that range is nothing really that special this part just evaluates to an actual list 5 6 7 8 9 and 10 okay that's the part I want you to understand it's not some magical thing that part actually evaluates to a known data structure called a list and then item just keeps becoming each item in that list range all it does is creates a list on the Fly okay so here's how they're looping for index in range so let's create some list like how they have it n is equal to 3 comma 5 comma 7 right and now I say for index in range 0 comma Len of n Len of n is just a cool way of saying three but we don't want to hard code three because what if it was a list of a different size so we're going to use the Len function on n lens short for length actually tells you how long the list n is and here it will count all the elements in the list n well how many elements does the list n have three so this part effectively just evaluates to three okay so for index in range 0 to three in your head imagine this part uh turns into 0 1 2 got it that's what that part actually turns into okay so actually I'm going to just write the loop with that 01 and two and I'm going to say print n of index and you'll see what happens so what did it do let's apply this code right here 012 okay and let's do this and let's run it let's see what it actually does it prints out 357 it printed out each item in the list right what we wrote is the equivalent of for item in N print item both of those are equivalent you'll see 357 and then 357 being printed again 357 that's our first for Loop this one here and our second for Loop gives us 357 as well so they're both equivalent just going to leave that here for notes and I'm going to come down here so what is this part actually doing well index the first time is zero what's n of zero the zeroth element of n that's three so this part actually evaluates to a three okay what's uh next time we Loop through n of one n of one is just a second element so it's five and then that's why you have three and five and then at the end you have seven and so n of two right CU this is a two n of two evaluates to a seven and then you get back seven out right there okay so this is just you're looping and you're getting access to that element in the list by using its index so you're using its position to access that element rather than access that element directly right in our loop from Line 6 to 7 item is directly the element three and it's directly the element five but index is actually the position so if I did range how they wrote it was range Len of um n right this whole part in our case evaluates to 0a 1 comma 2 but now I'm going to leave it like this and you'll see that it actually just prints out what we said earlier 357 cuz it's actually zero it's a list 012 right it starts from zero and goes up to three and then same thing so here we're in using index to get access to the element here we're getting access to the element access to the element directly okay so just in case sometimes you want to know the position this is a better way and if you just want access to the element directly without having to know what position it's at just do uh you know get access to that item directly rather than doing range okay hopefully that makes sense and let's move on and so instead of the whole variable index they're just using I so that's what you're going to see that's why there's an i a lot of people just go some mysterious ey you know you can call it whatever you want it's an arbitrary looping variable however by convention if you're getting the index you just say by I because it's such a common operation so we have to create a function called print list now so we're going to define a function called print list and it's going to take in some list so I'm just going to say LST and for um um I in range zero through and you don't have to say zero because it starts from zero so I'm just going to say range of n print or I'm sorry not n cuz in this function I I'm defining a list here LST of I and that should be good if I give this function a list it'll figure out what to do so let's try it here now I'm going to run this and you're going to see it's not going to do anything cuz we're defining a function and we're not calling it so I'm going to call Print list and I'm going to give it that list n that we created at the top and let's see what happens and it just did that 357 now if I changed n to anything else it's going to figure out what to do and it's going to print out line by line every element in that list okay so it's a smart function let's hit save and submit the body of your function should not contain any references to n so I think I have to delete this it looks like you either didn't call Print okay I should just read the instructions right I'm trying to get a ahead of myself here Define a function called print list that has one argument X okay so they want me to call it X terrible variable naming but that's okay inside that function print out each element one by one use the existing code as a scaffold then call your function with the argument n so what we did in the reppel pretty much print list and I'm going to pass It Or List n right and how it works is 357 gets passed here for n it goes to the definition of function passes 357 right there this x turns into 357 Len of 357 turns to three range of three turns into 0 comma 1 comma 2 I the first time you're looping is zero and X of zero um X is that list so zeroth element of that list is three and then it Loops again and we have uh and we have one so you get X of one well X is simply that list three five and 7 so X of one is actually five right it's this list right here and it prints out five and then the same way and it works for seven as well okay just want to give you an idea of what's happening let's go next list modifying each element in a list in a function so here they're taking each element and just modifying it modifying each element okay so what they're effectively doing and this is a nice reason to use it is they're just doubling each element by two so I will get the index right so if the list has 10 elements this range is going to turn into 0 through 9 giving you the position of each of those elements it's going to be 0 1 2 3 4 five n that's going to give you the position of each element then you can keep pulling out each element like that and then on line four what you're saying is hey the new value of that element should be what that element was times 2 so you're doubling you're looping through and getting access to each element and then doubling it okay so let's run it on the thing 357 print double list so I have to put parentheses here Python 3 double list is not defined okay don't forget to return your new list return n and and this function should be called double list okay so I'm going to say Define double list it takes in nope right here let's see if that works inconsistent use of tabs and spaces so sometimes tabs and spaces act funny it's better to use spaces rather than tabs so four spaces is a convention and it just doubl that list you see this list was 357 and now 3 * 2 gave you 6 5 * 2 gave you 10 and 7 * 2 give you 14 so that list effectively has been doubled let's just go through that algorithm and how it works uh we gave 357 to the function double list it put 357 right up here uh it did Len of 357 it parentheses right so you got to go inner and outer so the first thing that happens is the Len of 357 well the L of 357 is three so now this range goes from 0 to three that just means 0 1 and two it goes zero up to but not including three so you get 0 1 and two the first time this eye Loops through it's actually zero zero reality like Gary vaynerchuck you have the new end of zero so it's saying the new this guy right here right it's in the process of being find the new guy in the zeroth position of that list or this list right here is actually what that guy was so 3 * 2 so now this guy is actually six so this part effectively changes to a six oh I'm sorry then it goes or sorry not the outer part okay the inner part that's important to remember cuz this is different than theone function argument so uh six then it goes through the loop again it goes one now it's everywhere it goes n of one n of 1 * 2 so n of one well that's five in our case and 5 * 2 gives us a 10 so now it turns this guy into a 10 right that's 10 and then it goes for the second position and it goes n of two is n of 2 * 2 N of 2 evaluates to 7 and 7 * 2 gives you 14 so this part turns to 14 and we have created the list the loop goes and sees that it it went through 0 1 and two so this Loop has ended now it goes to the next statement which is return n and n is 6 10 and 14 at this point it returns that so this call gets evaluated to 610 and 4 and then it gets sent to the print function and print function simply spits it out to the screen which is why you see it right here if you didn't use the print function it wouldn't get printed out to the screen cool okay let's move on or sorry let's see actually what they're telling us to do so they want us to create a function uh Define double list it takes in a single argument X multiplies each other by two and returns that list use the existing code as a scaffold so they're saying use this existing code as a scaffold um meaning as an example or building blocks so I'm going to say um X of I * 2 oh I'm being cool right instead of using the long hand notation and doing X is equal to X of I * 2 I'm going to be I'm going to choose to be a cool guy and I'm just going to say x of I * equal 2 that's Shand for increment me right if you do this that's not going to do anything so you got to make sure that you put the equal sign there as well and then I'm going to return the actual list X so let's give this bad boy a try list index out of range why did okay obviously for I in range I will say 0 to L of Len of X okay that should be good yeah there you go the reason why I got that list index out of Ranger instead of I is undefined is actually a complicated thing it has to do with with how closures work so I'm not going to get into that but you know look into that if you're interested start next lesson passing a range into a function so you can also pass a range into a function that just means passing a list into the function okay effectively you're telling it maybe how many times to run so range works like this if you give it one argument that just means stop at this point and by default stop start at zero if you give it this argum if you give it two arguments it automatically assumes the first argument is a start and the second argument is a stop if you give it three arguments it assumes the first is a start second is a stop up to but not including type of stop and then it assumes that the last part is step so I can say range range of 0 through 100 or let's say 101 that means that that's going to go up like including 100 uh but not 101 obviously and I'm going to say step by one and I'm going to print this out to the screen well now you get okay this is Python 3 so I have to call a list function on this so I'm not going to do it here it's going to make things slightly more okay you know what I'm just going to do it there just to show you guys but I'm going to do it in idle to keep things simple and how python 2 works so I'm going to call range of 0 comma 101 comma 1 and you can see that it's created a list from 0 to 100 that's a total of 101 elements and um it steps by one so if I do step by two now you get all the even numbers for pretty cool right so you get all the evid numbers and you can if you're if you're thinking like you're like feeling kind of like Aristotle you can go hm what is the sum of all the even numbers from 0 to 100 well how can you do that simple just call the sum function on that range and that gives you the sum of all the even numbers from 0 to 100 right isn't that cool okay if you did three you get the idea right now you get every third number okay so it's kind of nice how it works and if you wanted to get the odd numbers well you can says start from one and then step by two and now you'll get all the odd numbers so 1 3 5 7 9 11 all up to 99 and if you wanted to get their sum you could do the same trick so effectively all range does is create a list the first argument is start the second one is stop and the third one is Step you can also step by um well in this case you can't step by a negative number but I'll show you guys certain things you can do uh let's see if we can create it backwards what do you think will happen if I actually change the numbers right what happens then right so here if I go go from 101 all the way to two but step backwards by two that's what you get so it steps backwards and it goes 101 99 97 so on and so forth okay so if you're a if you're younger or you get in punishment midieval style and they go right from 0 to 100 simply open up python do this and then send it in not like it's a thing anymore but hey back in the day would have helped you cool in all cases the range function Returns the list this is the most important part to remember guys it returns a list okay just understand whenever you see range don't leave it like that in your mind because it's going to complicate you understand that it turns into a list which is a very familiar data structure in our in our minds right we've worked with it quite a bit each item increases by step if emitted start def Falls to zero and step defaults to one okay on line six uh yeah step defaults to one because it steps by one element by default remember when we weren't passing in the step argument it was just going up by one every time so if we said range of 0 through 11 it would go 0 1 2 3 4 5 6 7 8 9 10 but if we pass in Step then it will change the amount of steps it takes all right on line six replace the blank with the range that returns a list containing 012 so I'm going to pass in range 0 to three right this evaluates to 0 1 and 2 it's the same thing as putting that in but it's just in a cooler way so now we're passing it in a list of three elements first being zero second being one third being two and then what it does is it passes that in right here right so it goes Z one and two and everywhere it sees X it's essentially 0 one and two Len of 0 1 and two will give us three 0 to three will give us again 0 1 and two x of for I right I is first time Z that's zero that's zero that says make the first element in the list x equal to what it was and then times two so here our list originally was actually just 0 0 * 2 this gives you zero so that stays at zero but one will become two and two will become four so at the end will return a list like this okay make make sure to keep uh making it a habit of stepping through algorithms kind of like I'm doing here trust me it make you so much better and the reason why you should do this practice over and over again is your brain doesn't have to think of really menial tasks like these small tasks and spend uh time processing it because it'll stop you from thinking about bigger ideas right if you're trying to develop an app or you're trying to build something bigger you you don't want to get bogged down by very simple things like computational algorithmic basic steps oh X goes into the x of second X of two will give me the third Element no it'll give me the second element you don't want to be confused by such basic things so practice this so much that your brain gets these instantly so you can focus on HM should I use a recursive algorithm here or should I use this what arguments is my function going to depend on you want to be able to to think at you want to relieve your brain to think at a higher level that's the reason why you should practice it Okay and that's why you shouldn't take pride in oh I'm just getting to 100% completion yes you should take pride in um really churning this out and really learning the fundamentals okay cool start next lesson iterating over a list in a function um okay so I think this is video has uh went on for a little bit so I'm going to stop right here I keep forgetting to uh say it but I'm going to say it I I find those YouTubers annoying but I think I'm going to say it cuz it helps me reach more people so please if you guys like the video you know just give it a little thumbs up takes two seconds and if you uh really enjoyed and you want to see future videos please subscribe down there somewhere other than that this was kazy from clever program.com and and I will see you in code academy part 15 okay so see you there