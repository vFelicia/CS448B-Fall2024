Hey you guys, Aaron from Clever Programmer here. And today we're going to be going over a special data type, not a primitive data type called lists in Python. (r&b instrumental music) Alright, so I'm in Replit here, okay. And all a list is is just a thing that can hold a bunch of objects in it a bunch of things in it, okay. So, what it looks like, let's start there, is this. Let's just put a list of numbers, okay. One, two, three, very simple. So this here is a list, if it's enclosed in brackets and everything is on, and there's things in here separated by commas, then this is considered a list. Actually, this is also considered a list if it just has one element with no commas but usually when you have a list you're gonna have more than one. That's the whole point. So a list is just a collection of things in order, okay. That's pretty much it, if you want to group a bunch of things together, like you wanna have a bunch of, just a bunch of numbers together a bunch of names together, whatever it is then the list is what you wanna be using. So let's just see what you can do with lists. First of all, we have list L here. Nothings happening, list L here. First of all you can print out a list and just spit out all its contents. Just like this, it prints out nicely with the brackets. But also a list, oh I forgot to mention it is not limited to just having numbers inside of it. You can really have anything you want in here. So you could have a number here you could have a string here, sting (laughs). You could have a another string here with a different kind of quotes and then you could have a float and then you could have a bullion. So we have all the primitive data types here represented, we have an integer, we have a float. And you could even have another list in here as one of the elements of the list. So in here we could just put one, two, three. And this here, this complicated list here this list that doesn't know what it is (laughs) it's trying to get its life together or something it doesn't know what it wants to be has a bunch of different things inside here compared to this list, which is very nice and clean. Okay, very nice and clean where usually usually when you're using lists it'll be nice and clean like this. It'll all be the same data type because you have a bunch of things together, you wouldn't have it messy like this. But you can do this is you want if you want to have a bunch of different data types. These are both equally valid lists in Python, okay. So let's just print out L2 to see what that looks like. Put that there, lists list one and list two. I'm very bad at naming things Qazi's probably gonna hate me for this. But, but as you can see the list printed out here just fine. So this list here is exactly the same as this list that I wrote out including the sublist, okay. So, also what you can do with lists is lets just go back to list one. List one here, yeah. You can index into them just like you can index into a string. You can almost think of a string as a list of letters and symbols and characters kind of, but not really, but you can when it comes to indexing, you can. Like a list, any string are very similar because it's the same syntax. The same, you'd be typing in the same thing into your computer to index into this list. So just like strings if you go if you index at zero on the list since this list, actually let's use list two. Okay, and actually this is a little bit confusing let's just change this. So list, list two, okay. List two (chuckles). List two, just like that. Now that's a lot clearer for you guys to understand. So this here and this here is the same thing. So if I want to index into this list here I would put a zero and this would actually spit out this one here, because this is the first element. So let's run this. And as you can see, the one prints out. Now let me just copy and paste this so you can see what's going on with all the other elements. So if I wanted to print out element the second element, the third element the fourth element or the fifth element and I run this, you're gonna see all of these print out on separate lines because I'm printing them out each separately. Okay, so you can see, oh I guess I missed this last one here. Let me just pop that in there so you can see what that looks like. And I run this, then this is then it's indexing into each element of this list two list individually and printing out each one. So lists is very useful for holding things together but sometimes you need to actually do operations on list, lists. So that's also something you can do in Python. There's a lot of functions or methods that you can, that you can run on lists to do different things in them. Like you can add to lists, you can take things away from lists, you can insert into to a one spot in the list. You can sort a list if its a list of numbers or something. You can even reverse a list so that it goes in the reverse order. And I'm actually going to be going over a lot of these functions right now. So just stay tuned for a couple seconds and I'll get to it. Alright, so we talked about indexing into a list. Let's talk about the most common one actually is adding an element to the end of a list. So, like if you had a list of names let's just put in here. Actually, let's get rid of all this so it's nice and clean. If we just had names, okay. A bunch of names, let's just say Joe, John, James okay, James. So this is a list of three strings, three names. Alright, and let's say I wanted to add one more name to this list. Like, let's say this was like this list was actually a team. So we had like a team member of three people and we wanted to add one more person to the team. Then we, we could just type it in here but I mean, that's not really, that's kinda cheating. That's not really coding. So how you'd actually make the computer do it is you would call this function called append. I don't really know what this word means I didn't know what it meant too before I started coding, but append it's not app end, it's actually append. Append just means add something to the end. It's just a word in the English language apparently, and that's what it means. But if you don't know what it means like I didn't, then that's what it means. So you can actually just add another name here. So let's just say Gary, okay. Let's, let's add some print statements here so you can see kinda the flow that's happening. Names, yep print names, and then I'll append something to it and then print it out a second time. So what we should see here is this list print out once and then right below that is this print this list print out with Gary also attached to it. So a list will be one length, one element longer. Let's run this and yep, as you can see that's exactly what happens. So we printed out the list originally of names and then we appended Gary to the end of this list. Alright, so that's what append is append is very useful because sometimes you don't care about the order of the list. You actually can, I could have inserted Gary at the beginning of the list or somewhere in the middle, I'm gonna talk about that next. But usually if you're just putting a bunch of stuff together and you don't really care about the order then yeah, you can just use append. Very common. So let's, now let's try insert. So if I wanted to insert Gary let's say, at the beginning of the list instead of calling append I'd actually call insert. Okay, not with two r's, inserrt (chuckles). Insert with one r, alright. And the difference between this and append is that if you're gonna insert something into a list, then you need to know where in the list it's going to be entered. So actually this function is going to be taking one extra parameter that tells us where we wanna put it into the list. So if we put zero comma Gary, then it's gonna put Gary in the first spot here, before Joe and then it's gonna shift everything over to the right. You don't have to think about it you don't have to think about it as shifting just think about it as just sticking it in the front and then everything else just does what you assume it would do. It would just shift over. So let's run this and see what happens. As you can see Gary here got stuck in the first the first position there. Also if you put in one then the same kinda deal happens. Gary's actually gonna pop up here instead and it's just gonna like split the other parts of the list there. So that's insert, I'm not gonna go through the other two ones, you understand how it works. Doing this, putting the very last one is gonna be the, do the exact same thing as append, pretty much. So you might be wondering, okay why does append exist if insert exists? It's just append is used to quicker way to append something to the end of the list. Sometimes that a common thing you do. So, yeah they achieve the same thing but they're distinct functions. So some other cool things you can do with lists is you can also remove elements. So if I wanted to remove Gary actually no, Gary's not even here. So if we have this list of names here again Joe, John, James, and then we print it and then I want to remove something from there then what you have to do is actually put in the name. So this would actually remove Joe from the list, okay. Or if I put this then this would actually remove John from the list. This is case sensitive I believe so if I put a capital John then this John would actually stay in. But if I, if I ran this code then you'll actually see that John is deleted from the list. Let's try that. Yeah, you see John has disappeared from the list now. Okay. Some other things you can do are sort sort lists and even reverse lists. So let's do reverse because sorting sorting a list of names, I guess that would make sense. You could probably alphabetize it. I dunno if there's a function for alphabetizing that. But for like a list of numbers, for sure you could actually sort it, and I'll demo that real quick. Let's just look at reverse, okay. Reverse. So as you can see I said that a list is ordered, right. So a list has a very specific order so that we know which element we're talking about when we index into it. It doesn't like have a random order or anything. Names at zero is always gonna be Joe. Names at one are always gonna be John. Names at two are always gonna be James, it never changes. So sometimes because the order matters if you wanna reverse the order which could be useful for something like let's say you wanted to have your names alphabetized, and then you wanted to reverse it and then have your names in reverse alphabetical order then you could do that as well. So all this will do is just flip this around so that James comes first and then Joe comes last. And as you can see this list got reversed got flipped around pretty much. Okay, so let's just, actually let's do sort right now, okay. So let's just have a bunch of numbers one, two, three, four, five well that's already sorted, stupid me. Let's put in a bunch of random numbers six, four, two, nine, twelve, okay. And then, actually we don't need any of this let's get rid of this. If we have a bunch of numbers here a bunch of numbers here and then I'm gonna print it out before we sort it, numbers. But if I wanted to sort this then I can just call this function sort, okay. And what this will do is it'll actually sort the numbers array into ascending order by default. If you wanted to get it in decreasing order you could sort it and then reverse it. So you can actually chain these functions together to do cool things like that. What am I printing out, numbers printing out that's what I was doing. So let's run this and as you can see the list six, four, two, nine, twelve has been sorted from the lowest number to the highest number, two, four, six, nine, twelve. So these are just some really common functions you can use on lists. The main thing I wanna point out here is yeah, lists are just a group of things you put together, and there's a specific order and you can index into the lists wherever you want to read from it. And you can also add things, you can remove elements they can get longer and shorter. It's a very, very flexible, changeable kind of data structure. And very useful for keeping things together. So those are pretty much lists. One very common thing to do with lists though the last thing I'm gonna talk about is iterating over a list. So I think we already had a video about for loops, about for, on for loops but you can iterate over a list using a for loop by just using this syntax. So for number in numbers and then you can just print the number, okay. So you guys probably already know what this is you've seen this, but as you can see the whole list got printed from this for loop here. The reason I'm doing this is I wanna point out that in a for loop whatever is here needs to be an iterable. That's just a fancy word that says you can iterate over it. So a list is iterable because you can iterate through every element one by one and do something with each one of those. So in this case we're just printing it out to the screen, okay. So a list is an iterable it's the simplest iterable I believe. And, yeah it just holds a bunch of things in it together as a group. And that's pretty much all you guys have to know for that. That is it for this video, thank you guys for watching and I will see you guys next time. (r&b instrumental music)