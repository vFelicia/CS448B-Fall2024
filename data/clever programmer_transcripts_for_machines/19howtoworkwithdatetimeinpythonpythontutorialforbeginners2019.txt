[Instructor] So in this video, you're gonna be able to, if you watch this, you're gonna learn things like how do you work with datetimes, how do you work with datetime objects. How can you take a string and turn it into a datetime. The benefits overall of this like you're like, what the hell is this? If you're a complete beginner and you're like I'm just totally lost. What the fuck are you talking about Qazi? If you wanna be able to calculate the difference between today and your birthday, you'll be able to do that. If you wanna make an app, that can send an email to somebody after two days after they sign up automatically, you need to know how datetimes work. If you wanna be able to make an Instagram clone and you wanna do things like when somebody makes a post and time stamps it in their time zone and shows the time in their time zone, when they log into the app, then you need to know how to use datetimes. So without any further ado, let's jump right into it. (peppy music) Alright so we're gonna import datetime. This you don't have to PIP install this package. It comes built in with Python and it allows you to do fancy stuff with dates. So for example, I can do, let's say if I wanted to get today's date, I will do today and I will do datetime.date, and I can put in year, so you can see my Python is telling me what arguments it takes, so it can year as an integer. It can take month as an integer and day as an integer. So remember it takes it as an integer. Actually for today, I should probably just leave it blank even and say today. And if I print out today, let's run this guy. It will give me the date of today. So that's how you will deal with today. If I want to do birthday, my birthday, I'll do datetime.date and now I'll pass in what I actually want to pass in. So I'll pass in let's say the year 1994, the month seven, make sure you don't do 07, because 07 is not an integer. So it'll give you an error. You can't start an integer with a zero that's leading it. So we'll say 7 July 14th is my birthday, and then we will go like okay like print birthday. Let's see what that looks like, cool. So it's printing it out and showing it to you as a string but it's actually not a string. Birthday is really an object here, because if I call the wrapper method, it will show you that it is indeed a datetime object and not just a string like it shows you in the terminal. So do not get confused by that. So we're gonna create something called since birth. I want to see how many days have I been alive? Very important. So I'll say days since birth, and what we'll do is we'll say today minus birthday. And then let's do days since births. Let's print this bad boy out. It says 9004 days. Now if I really want to make sure that I'm getting back days is I should do this, and then I should do dot days. This will make sure that I get back days and I don't get a datetime object back. So this is telling me days since birth, which is kind of useful I guess. Pretty useful important and that's how you can, you can subtract dates, you can add dates and all that. If I create a timedelta, so let's say I'll do timedelta, I'll create datetime.timedelta and I will say days equal 10. And now I'll say to today, to the date of today, which is March 9th, just add ten days to that. That's it, so I'll just do plus timedelta. Now when I run it what I get back as you can see right here is March 9th has 10 days added to it. And what do you get when you add 10 days to March 9th. That's right, you guessed it correctly, you get back March 19th. So this way you can add to dates, you can subtract from dates, if you do minus here. Let's do minus like that and we can run it and boom, we have subtracted ten days from that. Now the reason why you want to use libraries is because otherwise this stuff can get very confusing, very, very quickly, because like for example February only has 28 days. And sometimes it has 29 days and some months have 30 days and 31 days and then you got to take leap years into account, and you got to take all this other crap into account. So that's why you don't want to create your own functions for this. You want to just use something that somebody's made called datetime. Makes your life a lot easier. Alright so I've shown you how to add and subtract time using timedelta. I've shown you how to create datetime objects. And I've shown you how to like pull out the current days. You can pull out the current month too. So like for example I can do today that month. And if I run it, it'll give us that it's the third month because it's March. I can do today.day, and if I run it, it'll tell me that. I can also do today.weekday. So this will tell me what weekday is it. So right now it's telling me yo this is the fifth day of the week and let's check. Sorry this is the sixth day of the week, because it says, Monday is equal to zero, and Sunday is equal to six. Okay so computers mostly start at zero and go up to six. So that's why if you do week day, that's why it gives you five. And it is the fifth day indeed because it's Saturday today. It's all right here. Saturday is equal to five. So there are many methods like that that are very useful. Now something else that's useful when it comes to datetimes is we've covered datetimes. We have covered deltas, but what now we want to know is okay how do we deal with hours, minutes, and seconds. So let's do that. We will do something that will show us, will do datetime.time and essentially when you pass time, you can pass in hour, minutes, second and microseconds. So we will pass in our seven minute to seconds 20 and microseconds 15. And then we can also pass in time zone info, and what we want the time zone to be, but for now we'll just leave it blank, and let's print this out and let's see what that says. So that essentially just gave us a datetime.timeob. So give us a datetime object, where it's giving us the hours, minutes, and seconds. But again I also, Cori I was watching his video and he says that he uses primarily datetime, and I agree with that because I used to use time but then I realized that there, so there is three different ones. There's datetime.date. Then there is datetime.time, and then there's datetime.datetime, and this is sometimes confusing but here's what it really is. So datetime.date is just year, month, and day. Datetime.time is just hours, minutes, seconds and microseconds. And datetime.datetime is this, year, month, day and hours, minutes, seconds and milliseconds. That's essentially what you need access to because this has access to everything. So most of the time you should really be working with datetime.datetime. All right now when we're working with these well we can do the same thing of timedelta. All right so if you have a datetime object like datetime.datetime thing, you can still do timedelta, and it'll automatically do all the math for you, including the hours math as well. So you see how we created, we did days, if you add 10 days, well you can also create let's say we create an hour delta and we do datetime.timedelta and instead we pass in hours, and we say so right now it's almost 6 p.m. So if I add 10 hours to today. So if I add 10 hours to right now right. So for example if I do datetime.datetime.now, first of all let's print that out. So I'll do print and I'll run it. So it's telling you that yo look, it's essentially 6 p.m. That's in military time 17th hour. Now if I add the timedelta to this and I do hour delta and I run this, well you'll see it'll say March 10th, which is the next day, because it makes sense right? It's 3 AM into the next day. So you can also do timedelta just like that. Let's move on. I'll write little notes here for you. So I'll say that this is 10 hours, add 10 hours to current day. That's what this part of the code is doing. This part of the code is adding 10 days to current day. Find days since birth, is that what's that piece of code doing? Okay so we have covered quite a bit. Now let's move on to a few more things when it comes to datetime. What you want your datetime to do is be aware of the time zones. Oftentimes the day time object by default is called naïve. So it's not aware of time zones, meaning that it doesn't understand what is Mountain Time versus Pacific time versus some other time. So in different countries you have different time zones. But it won't know the difference. You have to tell it to be time zone aware AKA not naïve. So let's go ahead and do that. We will take a datetime object like today. So I'm just gonna do datetime.datetime.now, and what I'll do is we're gonna use a package called pytz. PYTZ. So you have to install it. What I'm gonna do is I will simply install that package using my PIP install. So I'll go to the terminal here and I will do PIP install pytz. And if you don't already have it, go ahead and install it. It looks like I already have it, so that's good. Let's go back to running this code, cool. And I will import pytz at the top. Now that I have that what I can do is I can say time zone is equal to pytz.utc. So now let's print that out and what you'll see is that not only does this datetime object give me the year, the month, the day, the hour, the minutes, the seconds, and the microseconds but it also gives me, it also has made it UTC enabled, but right now it's at plus zero zero. So now because it's aware, we can give it a different time zone. So let's try that. So this is datetime today. And what we'll do is we'll go datetime.pacific. And I will do datetimetoday.astimezone, and I will pass in the pytz time zone, except I will pass in US/Pacific, because I'm in LA and we are on the Pacific time zone and let's print that out. Okay so minus eight. That's what I wanted and that's what Pacific time zone is. So that's how you can make it time zone aware and pass time zones. There's a list of all the time zones. So again this is also from Cori Schaeffer's tutorial, and he just loops through it, which I thought is really cool for a time zone in, for a time zone in oh, yeah it was just called, let's just do that, because there's already a time zone here, so you don't want to create any confusion. Pytz.timezones.pytz.alltimezones, let's print time zone. And when I run it you'll see that it shows all these time zones like US Pacific, US Mountain, US Central, US/Alaska, Pacific, Indian and Europe, pretty much all of the time zones in the world. That's where that I got the list from. That's where I figured out where this came from. If you look it up online, it'll probably be even easier because then you don't have to scroll through your command line. It'll be in a nice little table for you. Alright so now what we want to do is we want to be able to take that time and format it. So we're gonna do something called string formatting. So we're gonna do string formatting with dates. So all that means is we'll take some uglylooking date, that it shows and maybe in this format, where it goes 2019 03 March and 09, and essentially we want to be able to show it such as March 3rd like that, and then it should say 2019. Okay so let's make it look a little pretty. How do we do that? Well let's take our Pacific time, datetime Pacific that we had here, and simply we'll do string formatting. That's what this F is for. So we're essentially string formatting time. That's what we're doing here. Capital B is for the month. Don't ask why, it just is. Small D is for the day and then percent capital y is for the year. Let's print this bad boy and run it and you see the date looking really nice. Oh sorry today is not March 3rd. It's March 9th, my bad. So we wanted to look like this and that's what it did. It made it look nice. Now how do we go the other way? Let's say that we have this thing. We have March 09 2019 and maybe this is you pull it from a website somewhere right? So on some website somewhere, this is how dates are written. Well how do you take that written date and turn it into a datetime object, so then you can do some manipulation on it? How do we go from essentially this to like a datetime object? Kind of like that. How do we do that? How do we go from this guy to then getting that guy? Well for this we use a method called SGRP time. I need to turn off, disable inspection. There we go. So here we use the method strftime. Here we're going to use strptime. P is equal to parsing, and the F in this is equal to formatting. So that's one way to remember all this. Now what we'll do is I'll say take a datetime string. So what I'll do is this. I'll go like this. We'll say boom datetime.datetime.strptime and I'll give it a string. So let's say I give it March 09, 2019, and you have to teach it how it's written. So I'm gonna say because it says the month here, I'll put capital B like that. Because it says the day here, I'll put %D like this and then because there's a comma, I'll put the comma, and then year is here. So I'll do this like that alright. And we will call this datetime thing, and then we'll print it out datetime thing. Just run it and boom, this is what it, if I actually put a wrapper around it. You can see that it's actually now a datetimedatetime object rather than just being a March 9th string. We took it from the string and by using this and telling it how its formatted, we turned it into an actual object and now that it's an object, you can add this, you can subtract this. You could do all kinds of stuff. Now this is all great. This pretty much covers almost everything that we wanted to touch base on. Like the most common problems that people have with datetimes, adding and subtracting datetimes, timedeltas which is very common and then people want to also know how to format it and show it, print out a date in a regular way, and then you also want to be able to go from a regular date into a datetime object. So we've done all of that. We've also done some time zone stuff, but what I want to show you now is if you have the opportunity to work with a different module, different thing instead of datetime, your life will be a lot easier. So what I recommend that you use is something called Maya. Alright Maya which is we'll put the link in the description of this YouTube video. So please Frankie when you're editing, just remember to pop this into the youtube description. And essentially Maya is considered datetime for humans, and all it does is it just makes it a lot easier. Kenneth Reitz says, he wrote this and he made it. So it's simpler to deal with things. So for example when you want to do when is tomorrow, like when you want to do set something to tomorrow right, like look at hour, even hour today. It's kind of confusing. It's kind of funny. If we want to add a tomorrow here, what we would have to do is add this delta. We would have to add a one day delta and then it would give us tomorrow whereas for Maya you can literally just say Maya.when tomorrow. So you can give it a little datetime object Maya and when you do Maya.when and you write tomorrow, it'll figure out when tomorrow is. It can also automatically do slang for you, which is pretty cool. 23 three hours from now or 10 hours from now instead of writing another way, it's these builtin methods but what's really cool to me is how it can automatically parse datetime strings and generate naive or not naive datetimes. So you can give it a datetime string and call this parse method on it and literally right then and there you can also give it a timezone, and it will automatically figure it all out. It will take it from this string and turn it into US Eastern time zone. It's that easy. And also how it prints things out, it makes it really easy for you. So instead of them looking really funny, the print methods of this also looks really nice. When you print something out, it tells you Wednesday September 20th, 2017, and so when you're working on things that's also easier. Another thing that I like about this is to add delta. All you got to do is just do .add alright and then it will automatically add things essentially for you. So you don't have to like worry about or do kind of anything on your own. It will just add it. So you just do dot add then do days.equalten.days, so it goes from seven to seventeen just like that. And I like how it says always here because what it does is whenever you run dot timezone, it's always in UTC. So it's time zone aware at all times by default, unlike the datetime objects, which are not aware by default. And the advanced usage is really cool too. So if you're building an app which has to do with a lot of calendar type of things, and you want to create an event that is an hour long that starts now. Well it's super easy. Events start which is just Maya.now so time.now or datetime.now if you were using datetime. So just Maya.now and to the now, the event, end is just the Maya.now.addhours equal one so you just added that one hour delta to it in a very easy way by just saying dot add hours equal one. And then you can use this thing called Maya interval class. So it's a really powerful class and you can give it a start date of event start and you can give it an end date of event end, and it automatically can create that event for you. Now there are other modules as well such as Delorean, Arrow, and Pendulum. So Arrow is something I've used in the past and Arrow is something that Cori in his video recommends, but I believe that Maya is gonna get, is a little bit more sane and will get most of the job done. Arrow can do more but I do believe that Maya does things a lot better. And if Kenneth Reitz is doing it, then you know that it's gonna be right. So I would stick with Maya, and you can still use these together with it. It complements them. He even says that here that it complements them. All right so that's really what I wanted to cover in this video. It's super easy to install it. Just pip install Maya and you'll be good to go. So yeah that's the main things I wanted to cover. I hope that you enjoyed this video. I hope it was informative. You've learned something new, and that you go now and create maybe even some project with datetimes. That's how you'll improve in it. That's how you'll become better. With that said we do have a new program that's gonna be coming out we're working hard at it with our entire team, and this is a program that's whether you're a beginner or a professional developer, is gonna help you take your skills to the next level. So whether your goal is to land your first job or your goal is to get a promotion at your current job or maybe you want to just become a much better freelancer and crush it at freelancing, well then we will have a new program for you called how to automate stuff with Python. It will give you all the essential trainings you need to technically become an incredible developer, and we will dive deep into Python into programming, and we will create many different projects. You will go much deeper into concepts like web scraping, data mining and just overall to handle really big projects, and take your skills to the next level. With that said, all you need to do to join the wait list for this course 'cos it's gonna be coming out hopefully sometime soon, but we're working on it really hard. So just in the description below, click the link. It's gonna take you to a page where it says how to automate stuff with Python. Pop in your email and your name and I will send you a free gift once you do this. We'll send you a threepart epic training master class perhaps, and also when the course opens up, you will be the first to know that way you won't miss out. With that said, thank you so much for watching. If you like the video go ahead and please give it a like. If you haven't subscribed to the channel go ahead and subscribe to the channel and as always I love your face. This is Qazi and I'll see you in the next video. (rap song playing)