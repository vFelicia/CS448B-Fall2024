yo where we are gonna be building a realtime ai smile detection app in python i am sunny and today i am here with aaron what's up guys remember me the python guy apparently super pumped guys super super pumped for today aaron what are we building today uh all right can they see my screen right now uh coming through now yeah let me pause this like mute this all right guys so this is what we're building i got my little app here and i got a little space detection app let me go ahead and share the screen one sec all right let's go yep they can see you all right here's my face and when i smile it should be able to notify uh detect that i'm smiling and then it displays i mean it's bugging out a little bit right now so go ahead and froze my hey look at that there we go guys and what we do how are we getting that to work right now uh this is the code bro that's how this stuff works what are we using that's pretty much so that's we're using ai right and we're using what what in particular to get that working uh opencv so we're gonna be using the open computer vision library um as usual if you guys are watching the other couple streams in similar but uh this one has some cool some cool optimizations in uh in the code so it's pretty short so it's pretty powerful library i mean what 50 lines of code with comments and spaces so yeah pretty bitesized but you can do some cool stuff with it awesome dude okay so let's go back to us guys there we go nice so let's go ahead and see where everyone's at nice we've already got 250 people in here that's dope hope you guys okay okay this is the first time guys me and aaron are going live together so this would be exciting yeah first time very first time exactly and also guys i'm not actually a python developer so many of you guys know me for react so this will be cool for me as well so i've never done machine learning with python so i'm excited for today um yeah let's go sunny let's do it so aaron let's go ahead and like let's just jump straight in i think yeah all right yeah let's get straight to the to the project okay so uh here's the stream all right got a little presentation here for you guys let's just start off to get a little bit of context um so smile detection with python all right uh first of all you just wanna you know pay uh pay respects to the joker himself the the infinite smiler i mean he's always smiling but really not the legend heath ledger residents rest in peace bro but uh yeah guys just make sure you're spying a lot because it's important it's good for your mental health and people will probably like you more or just think you're freaking crazy so how are we going to do this uh sunny smiles a lot i've noticed so you can be blessed with his super white teeth it's a british thing now you guys just misspelled words that's all it is the spelled word all right so how are we gonna do this so you guys guessed it it's all um all things go to machine learning okay all thanks go to machine learning so we're gonna be doing that we're not gonna be training anything but we're gonna be doing some pretty crafty stuff uh in the app with some pretrained models this time it gets a little bit fancy here and there but um i'll explain how it's how it's happening so here's a quick code breakdown of our app i just kind of want to give like the overall idea of the code logic just so that people um have some context going before we start coding because i don't like when they just jump in they're like oh what are we doing but this kind of gives you a holistic view so uh so step one the very first thing we gotta do is uh find faces in our photo in our case it's gonna be a frame from the webcam that's what i'm gonna be using an app but here awesome uh the first thing you want to do is find yeah you want to find faces and that's using the heart algorithm what is the algorithm yeah so i'm not actually going to be explaining the algorithm in this video but if you want to know how the algorithm actually works in depth you can watch the uh our face detection video for our car and pedestrian tracking video uh from a week or a couple weeks back and in those two videos i explained them in depth uh different explanations in both at the face detection it's at the end um and then the other video it's at the beginning but if you want to actually see how it works you can go watch those videos those are cool but this app's a little bit longer the more complicated so i'm just glossing over it okay awesome also i just want to say so step one is find the faces so at this point we're literally just finding the face right so we're not actually finding that yeah no smiles yet so so you want to find just the face like that yep step one that step find the face very simple yep and then we also want to crop it out just so we're dealing with this okay okay uh step two we want to find smiles within those faces because i mean it's pretty rare you have a smile outside of the face i mean maybe if you had like some dentures lying around or like a weird piece of art on the wall but i mean nine times out of ten a smile is always going to be within a face yeah okay again this is the heart algorithm so again if you want to see how it works it's uh it can it's just generic object detection um but we can detect smiles on the faces okay so we just detect the smile there then then step three all we need to do is just put the rest of the image back get rid of that bounding box and give it a nice little label on the bottom because this makes more sense you know i mean you could have a box around the mouth i guess that's kind of cool but this is cooler because then you just kind of want to know if the face is smiling or not it just seems more more human so that was the design choice there for the app nice and that's really it guys so yeah i noticed you basically you found the face first and then what then we found the smile within that box right yep and then why did why do we do that instead of just doing the whole um you'll actually see uh once we get to there okay uh a lot of a lot of yeah a lot of ai stuff you kind of need to get clever with the optimizing and um layering different layers because if we did smile detection just everywhere the performance is actually really really terrible okay so i'll show you guys that i'll show you guys that uh once we're coding and then you'll see because it's actually pretty accurate like when i'm running the code yeah well here so i actually ran it here on the i mean here it's a little bit bad because it's blurry the lighting's bad but i just wanted to run it on this gift before to show you that it's kind of working like when he's smiling you can kind of see it picking it up a little bit here and there um but on the webcam it's pretty accurate so yeah you'll see you'll see how ass though how ask the performance is if you run it on the whole thing but there's there's a little trick to make it like really really accurate so guys let's get to the code yeah so guys for this just all we ask is that before we get started just smash the thumbs up button what we got here what was that yeah i had the i have the other from the car and pedestrian tracking i just forgot to delete it anyways um yeah so let's get to the code okay uh real quick guys before we start though just got a donation dude from tushar near us he says character doing a shackle sign with his hand saying cool oh okay no he actually sent in something uh we can't actually see it properly on the super chat guys but it's some guy waving cool so thank you for that cheers all right uh real quick sonny um you want to show them the stream about the the free training yeah real quick yes let's do it guys so we have a free python masterclass that i recommend everyone goes ahead and signs up to you uh i haven't actually got the link aaron uh i've got the i've got profit with one second let me go ahead and show this so guys let me go do you mind just slacking me the link for the where's it yeah or i can do it you just share my screen and then i can go through it let's do it yeah yep there we go there we go can they see my screen they got you yeah what's up guys so uh so if you guys are interested in learning how to actually make a um make a living from python then we have a free python training here that teaches you the three secrets of how to become a python freelancer so link is in description you can click down there to check it out um or if you just want to jump straight to our python course and we also have a course which teaches you how to do that as well this is a paid course though so if you're interested in that there's also the link in description okay a lot of cool stuff in here free trainings uh private communities weekly live calls um with a couple instructors and yeah feel free to check it out but other than that let's just get to the code okay guys also guys just want to point out one thing with that said the something that i really want to point out that i think is always cool is that we actually offer weekly live training calls in that program so if you do want to go ahead and like and you get a bit bored of the sort of udemy courses that you see online then make sure you go and check it out but before any of that be sure to sign up to that free training guys because it's completely free so you have nothing to lose go ahead and check it out if you enjoy the video awesome all right let's do it dude all right man is the focus back on my screen the focus is back on your screen let's go guys okay so uh let's just jump right in all right so remember we're going to be finding faces first and then from there finding smiles and layering it over so this is the full app again opencv very powerful uh we can do some stuff in a pretty short app um so first thing is you're gonna need to download um a couple files these are in the in the description down below so just go to those web pages and download these two xml files to start out i'll explain this in a second and once you've done that uh you just need to make a python file so start with a small detector.pi yep um and actually i think i'll just i'll just code in here yeah let's do that it's always nice to see a bit of fresh code yeah oh yeah of course but i was gonna make a new file but i and i'm not feeling it so we'll just pretend this is a new file okay so just make it make a new file in a new directory um we just got another donation as well we got vishal s dropped a 20 rupees superchat thank you very much dude and dropped another one thank you guys sure thanks to sure thank you everyone appreciate that much appreciated man yeah all right so let's get started okay so first thing we're gonna need to do is install opencv if you don't already have that so i think that is through the command well let me quit out of this there we are hey get out of that um you're gonna need to install it from pip install opencv dash python okay i'm new to python so what is pip firstly like for for those that don't know uh python uh i forget what it stands for but it's it's a package oh package installer python or something okay so it's like it's a bit like npm then right yeah yeah so it just allows you to install um a bunch of libraries that are for python so there's pip there's anaconda um there's homebrew there's a there's a few you can use to download different things but we're just using pip it's the it's the simplest one in my opinion so yep just run pip and then this is a command install and then we're going to be installing opencv dash python it might be python opencv just try both and the one that works works and if you're having issues with that then adding headless at the end um can sometimes fix stuff but yeah just do that or do a google search if you really can't figure it out once you have opencv installed then um then we can start coding okay yep so um you can we can just import cb2 so that's the very first step it's just importing um opencvs this two is uh the second version there's the second version of cv2 i actually don't know why it's like that but cv2 is the library for opencv okay and let's just start with uh this just to make sure that our code is running correctly so open cv2 yeah i mean import cv2 and then it's big enough yeah and that's how we run our python very right script we write python with the file name dot pi and that's it right yep just make sure you're in the same directory so in my case i'm actually um in a folder but and then make sure you're in a folder here if you guys don't know how to do that then um i mean yeah i don't want to make this too much of a command line thing but cd is change directory yep yeah so actually let me just go back here so see i'm on the desktop here you probably um will actually you'll probably be here when you open your terminal it might look different but you'll probably want above the desktop you're going to want to put cd and then just type in desktop to go to your desktop i'm in the desktop and then from there you're going to want a cd to open cv well this is the name of my folder it's opencv default uh smile detection and then from there now i'm in this folder and then i can run this command okay because the file is located okay yeah i don't know so smart detector dot pi yep and if we run this it should just print what's up because that's all we have in here okay so it's working correctly um that also means this is working correctly it'll pop an error for you if you don't actually have it installed correctly but this one it just doesn't say anything if it says nothing you mean you got it installed correctly if it says something you gotta install it correctly go ahead all right so let's just move on okay let's do it let me pull some of these code from down here so first thing i said is we're gonna actually start with just the face section so let me copy the comments as well just so like we have a nice um nice app with comments and everything nice so face classifier all right so here this is a pretrained model for detect faces like all the fancy machine learning stuff happens in here it's just a bunch of numbers that the image gets passed through and then it tells you face or not that's all it is you pop in an image to this and then it says yes or no and it gives you an answer right again if you want to see how this is actually made the whole algorithm step by step without everything that's happening inside the computer then you can go watch one of the other face detection or car and pedestrian tracking videos yeah i think it's worth saying let's just start with just just like uh from my understanding all right like a classifier is something where we have like some kind of input right and then we have this model so in this case we have the har cascade frontal face so some kind of like model is is inside of that classifier and then so let me go ahead and i'm just dropping on the screen so we have some kind of model and then from that so we have some kind of input right then we have a model and then we have a sec and then we have some kind of output and what would that output say whether like a certain value which says if you're smiling or not right yeah literally just a one or a zero yeah it'll just say yeah one or yes or no but yeah but well technically it'll give you coordinates on your image of where the box is around the face in practice but i mean basically it just kind of says yes or no okay um kinda i mean it the implementation is different but the idea is it'll just say smile or not smile that's all it'll say right so we have some kind of input a classifier which is what we're using here which is our cascade and then some kind of output which is whether it's telling us if it's smiling or not or some kind of coordinate but that's that's how it roughly works guys so as aaron said you pretty much this is the line of code to go ahead and get that working nice yep carry on yeah actually i guess i can explain a little tiny bit technically if you have a whole entire image or a frame from the video then it will look over every little box inside that and then it'll tell you if each boxes of different sizes if that's a face or not or if that's a smile or not no so that's what it's actually saying if it's a yes it sends you the coordinates within the whole image of the little box and then that's how we draw the little box because we have the coordinate and we can just draw a box at that coordinate so that's actually what's happening so it's the whole image and then you just go over the whole thing and then choose it like no no no no no no oh found a face that's a yes give me the coordinate and then no no no again so if there's multiple faces it'll find multiple faces as well awesome okay so it's not just one phase we can support mobile faces are nice so yeah we just dropped a 100 rupee donation says thank you so much for sharing awesome thank you dude let's carry on thank you yeah here actually let's uh let's run the code really quick yep um i want to show it with two faces i didn't show with two oh nice yeah i should have shown it with you real quick i can just use my phone there we go well i mean hopefully it works it might bug out because one of them is an image yeah but we'll see oh nice that's dope dude this is smiling yeah and it's real time and it's quite performant like that's that's pretty like fast like it's as you move your phone around if you try and move it around fast yeah look at that that's just smooth nice okay and so there's some kind of loop i'm guessing this running or like some kind of thing that's going to happen there yeah yeah we're just pulling out the let me clear this we're just pulling out the the webcam footage okay webcam it's the easiest way to get some realtime footage yeah i mean this could be a security camera could be a whatever but in our case we're just gonna be using the webcam go ahead nice all right so let's do that next let's just pull out the webcam and show you how to get the webcam with opencv if you guys are watching the other streams you guys know how to do this you'd be very comfortable by now it's the third time we're doing it but let's just do this right there and this is the best way to do it because then there's no typos and i don't embarrass myself all right sonny that's true i'm sure that happens a lot yeah anyways so this is how you want to grab your webcam um we just call it webcam with variable you need to have a variable for that because this is how we access all the webcam stream footage uh but really it's just video capture so um you just call the opencv library dot video capture and if you put zero this is the webcam but you could actually also put like something like whatever dot mp4 okay you could also get video files and run it on there um like that joker like the joker one that i had yeah over here this is how i did that i just imported this file and then i ran it through and then i recorded it and put it back here but for us zero is webcam nice go ahead so it's popping zero and let's just uh i think you see that m show okay no no no not dim show uh what is it i always get confused between between uh footage and yeah it is m show okay i always get confused between um images so yeah show the current frame so let's just pop in a quick loop and just show the webcam live to the screen okay so and from here then it should be uh we should clean up i think it's destroy all windows yeah cv2 and and uh oh okay you have to release the webcam as well yes yeah i just clean i mean you technically don't have to but i mean it's just like good practice so this here is what's actually going to show so while true um we're just going to be uh showing the frame oh i forgot another line of code we're actually going to need um one more this is actually a big chunk side let me go line by line let me just get this last one here yep get it here it is i read the current frame all right nice let me go line by line because this this kind of was a big chunk so what's happening here is after we get the webcam the webcam variable um uh how we how we get a frame is we actually uh actually let me just show this real quick so let me comment out all this just so that we can go step by step it's a better way doing this on the fly guys yeah so here here we go look at this single line here ignore everything after that okay okay um we can okay we'll do this why the way i like to do it code completed so if this prints yeah it means if it prints then there's no errors because it's at the end but so this is how we actually read the webcam so you call dot read on the webcam and what this returns is a tuple so this is actually a two a two tuple so this is the first one first element this is the second element okay and oops what this is this is just a boolean of if it was a successful frame read or not and the second one is uh the actual frame so this is like an image that we can actually um run things on so let's actually just show that okay now i can grab the cv2.imageshow but right there and this is the name of the window so i just put y so serious but you can put smile detector if you want yup okay and let's go back to the terminal oops what did i do there we go small detector yep and there's oh i forgot one more so after this you're going to need to run cv2.weight key okay and what does this do let's what this does is so what happens is we get the webcam okay and then we call webcam.read which is just reading from the webcam stream and it'll get the first frame the very first frame of the webcam video yeah and then if it succeeded now but ignore this for now it'll get the first frame then from here it'll say cv2.imageshow image show means it'll show that image to the screen we're going to show frame what the and then the window name will have small detector like up here at the top of the window will be small detector nice the thing is this shows only for a split second as long as it needs to and then it quits out right what this does is it says let's wait for a key before we continue to the end of the program so it'll stay open till we press a key okay this basically means display right okay so this is so this means that without this line of code it pretty much hides it super quick so now we're saying wait until wait until you press a key on your keyboard to hide it right yeah pretty much and this is here because once we're going frame by frame you don't want to be pressing a key every time the frame changes it's going to automatically change in real time okay so we really only need this for uh this case of doing just the the first frame of the image so let's run this and see what happens there we go so that's the first frame okay so like it's not an actual video it's just one frame okay um but we're gonna wrap this in a loop and then we'll see it in real time okay oh i see okay so you just got a single frame okay i got you i'm with you yep yep yep because dot read will read a single frame okay and then it keeps track of where it is so every time it calls dot read it'll read the next frame next next frame so we just wrap this in a loop and that's how we can get the real time webcam footage right so i'm just going right reads a single frame right read single frame oops yeah nice okay you're taking notes for them yeah there we go awesome nice bro i'm running out of coffee this is uh this is a disaster so this makes sense yeah we're going to read a single frame and then we're going to wrap it in some kind of loop so we get that realtime functionality exactly which is what we're going to do down here uh so let's get back to here now but i'm just going to plug in things one by one so like i said uh just a webcam and then read a single frame display that frame and then display that frame like wait until a key is pressed before you hide before you hide the frame okay so now all we want to do is just pop this in a loop okay so we got the webcam here now um the loop is going to be here because once we have the webcam we want to keep calling.read on each frame over and over again yeah okay so we will just want to run this forever and that's why it's a while true loopy it's going to run forever until we're done um so let's pop all of this into there and uh from here i'll let me get the clean up code okay so this here at the end let me let me show you guys this real quick this here is just some cleanup okay so it's not super important it's kind of boring code but i'm just going to say at the end of the whole app you want to make sure you have a webcam dot release it's just letting the operating system know that hey this app is done using the webcam free up all resources so that something else can use like zoom or skype can now use the webcam without any uh memory issues go ahead and then and then the last thing is uh cv2 to destroy all windows so this just kind of closes all windows to make sure nothing's still open okay because sometimes that happens yeah this is a cool little thing i forgot about what i found recently so very handy yeah um okay so after this then we get a webcam we have a while loop and same exact thing so this should work the only caveat is uh if this is empty it's gonna keep waiting for a key press so let's let's run this and then i'll show you how that works so here we go it's a frozen frame but as i press a key it keeps going to different iterations of loops so it keeps running it keeps yeah and each time i hit it it gets the current frame because it's calling dot read all right so calls.read on the frame yep dot free and if i spam it and then kind of like real time but that's annoying so what we actually want to do is yeah what we actually want to do is dot weight key actually just waits until the key is pressed uh forever but if we put something in here this is how many milliseconds it'll wait before it automatically goes by right so if we put one it'll automatically spam a key every one millisecond and that's kind of like the behavior if i put like a million then it would just wait a million that'd be too long would be like 10 minutes yeah but if i just put one millisecond now when i run this this should be updating every millisecond by itself and i should be in real time so let's give it a shot nice well let me quit out let me quit out of the old one oh wait i gotta i gotta kill it one second how do you kill it in uh uh it should be as h it should be ctrl c yeah so if you just spam ctrl c sometimes it takes a little bit uh oh it's not working i'll just force quit yeah also guys you just want to drop in before wiring sorting now we have one comment over there there's one jazz says bernard you people are really amazing awesome i have no words to express my feelings it's only because of you people today i got a job at google at google he got a job at google did that's insane damn like seeing that holy crap i couldn't even get a job of google what is bro bro get this guy on the stream he should be teaching not me i know yeah we love that guys and we also got another donation from tech programmer thank you very much dude we massively appreciate that and also yeah it's amazing guys drop us questions in the chat and we'll literally we'll be happy to answer it as the stream goes on we really love when you guys engage with us and let us know yeah yeah hey whoever landed the job at google send uh send me and send me a dm on instagram and then uh we want to hear a little about your story that's awesome oh yeah that's exciting yeah what was his name sunny what did he say he said yeah let me go ahead and find it again so what is his name i don't have it on i don't think so i've just popped it open it says well meek ajax got it all right we'll meet yeah we'll be expecting you to dm us okay yeah awesome yeah i'm the google guy yeah i'm the google guy that's insane dude we love that nice kind of jealous actually yeah you soured my mood [Laughter] that's amazing great that's exciting we have another awesome comment by she goes you guys are just amazing i've learned a lot from this live stream your work is very inspiring thank you so much that's awesome dude thank you for watching all right let's go all right let's go yeah yeah it did the control c didn't work so i don't know what's happening but i just killed it manually yeah um so where were we before i got distracted oh i was running uh the frames yeah so when i run this again it should actually refresh every millisecond by itself okay so that's how we fetch this let's run this and go back here and there we go so i'm feeding the webcam footage i mean opencv is getting the webcam footage the webcam stream and it's just displaying it in this window and then i called it smile detector right okay so so that that by putting one inside of the weight key that's pretty much saying every second every second like go to the next frame right yeah like it says only wait for one second it says wait for one second then press it press a key like like a fake key like a pretend key and then it presses a key every one second okay so this waits one this way it's one millisecond yeah but nothing waits infinitely nice that's the difference awesome or ten we could do ten ten milliseconds is fast so this would still work but it doesn't really matter awesome all right yep nice and okay let's see if it'll kill okay so now control c is working nice i don't know what this red thing means sunny sunny had me installed this weird shelting zsh i've only used it like once but i ran away but he says it's colorful yeah usually i think that's when your branch is dirty i think so i mean that's usually something like that yeah yeah yeah i changed the i probably changed the code in here and then it changed but no big deal just ignore this like the color of the arrow but yeah let's just move on okay so i can actually get rid of this stuff because it actually pulled everything out so now we're back to the code ran without errors nice okay uh here let me just pop in some comments we have 350 people watching right now so thank you so much for watching and yeah if you're enjoying what you what you're seeing right now um with the face detection you think it's pretty cool all we ask is that you just smash the thumbs up button and that will help this video get out to more people nice yeah yeah like smash the track pad like slam your mouse just hit it as hard as you can domestic violence and domestic pilots in the software program that's a terrible joke but uh so yeah this is step one all right so we go we got the webcam footage in here all right you guys should be comfortable with this if you guys done this before pretty straightforward now uh one sec one check we want to put in though is actually this so i mean it wasn't it wasn't breaking before but we do want to put in a check here right here so after we read the the frame okay the first frame with the dot read method the first variable or i mean the first element is actually a boolean of if the read was successful or not okay so all i want to do is put yeah because sometimes it might bug out um what the webcam is usually fine but for a video file if you're reading in an mp4 or something like you put a video file in here like sometimes if one of the frames is corrupted or whatever then um it'll not work so just kind of put a safe check in here so if it wasn't a successful successful frame rate just break out of this while loop and just like abort the program and it'll go down to here and close everything so that it doesn't break it just kind of quits so yep that's that's all that is just a quick quick little aaron somebody asked a decent question they said how can i install the face xml file so the one that we used at the top where did you actually get that from again uh the opencv github document uh github repo so they they provide all of that the link is in the description so you can just go down and scroll to the bottom and just download this uh the face xml file there's also a smile one but we haven't gotten there yet we're going to be using both we need both to make this work um you'll see you guys will see later why that is yeah but yeah let's just continue let's do it uhhuh so after we get the frame read and we have this little check here then uh let's actually start detecting faces okay so if you guys watch the face detection video you guys already know how to do this pretty straightforward it's a very similar but there's a little trick here that you guys are probably going to blow your minds at some point hopefully but but maybe not okay so after we got the frame to actually run face detection on the current frame using this xml we need to use i mean we're using opencv of course it's a very simple code it's just like detects faces pretty much but we do need to yeah we do need to change the frame to black and white though this is just an optimization because um in a black and white image you can still you can still tell what a face is you know if a human can can still tell then the computer can still tell and then there's less data to deal with but the actual like you know recognition ability of a face isn't hindered by it being black and white so we just converted to black and white to greatly optimize it it increases it by a lot actually because rgb has three channels black and white only has one channel that's super interesting i had no idea that that would be an optimization so we're making a grayscale so that it actually reduces like the sort of not that the amount of processing they have to do on the the video yeah because you're kind of just like jumbling rgmb together into one number you know red green and blue because then you can just kind of be like oh then you can just play with brightness you can be like okay um somebody's eyes look a little bit darker than their bright cheeks something like that nice or somebody's eyebrows are darker than the forehead you can just you just want to see the relationship of brightness between different areas on the thing and those all added together if you do it enough you'll eventually define a face like okay eyebrows darker than forehead eyebrows darker than nose lips a little bit darker than cheeks eyes a little bit darker than cheeks stuff like that like hairline a little bit darker than um if you have dark hair so like it's just those kinds of things over and over um you eventually can can um explain to a computer what a face looks like after thousands of those little relationships or car or pedestrian or anything or a smile in this case also like teeth you know yeah teeth are lighter than your lips so like it would understand what a smile is nice okay that's awesome i would never have thought i'd be optimizations that's that's cool also just to jump in chin moy khalia says again because of you i'm able to make my college fees by freelancing just want to throw that in i love stuff like that thank you dude i feel like these people are making making more money than us like kind of kind of upset helping a guy make money so he can go to school to learn from people that are not us is that is that actually a win for us sonny is that actually a win for us let's think about this for a second i think we should come to the stream abort yeah nice cut off signals oh got it what i love though anyways is that is this like literally so few lines of code to get this all working yeah that's what i love about it too and then if you if you optimize everything under the hood which is how you should be doing stuff like if you use like c or c plus plus under the hood um then it's still pretty fast but you can be very expressive with your stuff i think that's why they choose it for machine learning because there's a lot of weird yeah there's a lot of weird nasty stuff and you actually see the power of python here later on if this was written in javascript it'd probably be like two or three times as long you know like yeah maybe not yeah i could vouch for that yeah of course this is this is nice and clean compared to javascript all right let's carry on yeah i don't like javascript yeah yeah i know no javascript is amazing sonny i don't want to hurt your feelings i know it's gonna make me hook out guys you might you just see a video yeah reconnecting it nice all right let's go sunday sonny's the hulk that's his nickname um but yeah let's continue on so once it's gray once it's gray okay this is actually a requirement like opencv you have to take it um and so oh i should explain all this so what this is is opencv has a function called convert color which just allows you to convert the color of an image um to to black and white or back and forth or just the red channel or just a blue channel you can do all different kinds of things but in our case we just want to change something from a color image to um gray okay well this is a bgr which is rgb backwards and then two gray so that's all this means there's like different encodings we can use so we're gonna be using this one to convert this from a color image to gray so let's actually run this now go ahead and actually what we need to display the actual black and white frame i feel like i've done this a bajillion times because i actually have it might be boring some people who've seen the other streams but whatever and there we go black and white webcam yep so you can still tell that this is a face you can still tell but my mouth is smiling so we don't need color to be already stuff it actually looks like it's smoother it actually looks a bit smoother when it is yeah because there's there's only a third of the data you know with color you have three channels or four channels actually there's a brightness channel as well yeah um but on this one it's just the brightness channel that's nice that's it so it's actually four times as fast because there's one channel versus four channels awesome and let me just quit out on the terminal control c and let's just clear this up because it's getting messy nice all right so there we go black and white frame now it's literally as simple as popping this grayscale frame into our um classifier for faces yeah and it'll spit out the coordinates of where my face is and then we can just draw a rectangular on my face and bada bing bada boom that's a face detector um that's the first and then we gotta do smiles you have to like overlap them in some weird way and there's some cool little there's a little trick i'll show you guys later that is critical for this to work and then some tuning you have to tune some variables at the end too which actually make it work properly but i love how simple you make it like yeah you know we just gotta use this machine learning classifier and then you know we're gonna get some coordinates back and then we just gotta draw a box around the face you gotta do that you've gotta have an infinite loop i mean i'm explaining every line so i feel like people can follow along if they know python if not then uh you know i'll fire myself yeah donald trump nice yeah so let's go down here and actually just detect faces okay let's do that here i might go a little bit faster because i'm just kind of this this is like repeating the face detection stream yeah we haven't even gotten to the smile stuff yet but here here's the line for detecting the actual faces okay so yep so how this is going to work is we have our classifier up here okay face detection face detector which we created from this xml file which has like all the data about like what a face actually looks like depending on the brightness relationships like we talked about okay um like and then from there so we have this the space detector now with this face detector okay with this face detector we can call a function called detect multiscale okay okay and then it just takes in an image and then um so what this will do it will uh tell us where all the faces are in this image okay it'll say oh there's a face here there's a face here there's a face here and that's what it'll do so is it retaining an array yes an array of points okay an array of rectangles so the reason it's called detect multiscale is because you just want to detect uh faces of any scale so if there's a small face you want to detect a small face if there's a big face you want to take the big big face and you want to detect multiples of them so you detect all of them that's why it's called detect multiscale because we can really pop in we can use i mean we can use any detector like we have a dog detector or a cat detector we could also detect multiscale of cats or dogs okay so that's why it's called that nice okay so it takes in a frame a black and white frame and then uh it'll say okay at these at these places there are faces in this image and that's what this is so this is just an array of points yeah uh in my case there's it's going to be array of length one because there's only one face but when i had the joker on the face um when i had joker on my on the screen too yeah and look let me pull real quick then there would actually be so when there was both of us yeah then there would be these faces would be a length two because there's two faces in the the in the video go ahead it makes sense okay yep so from there uh let's just print out actually uh faces okay so this is just gonna be a list let's just show this and it's going to spam the terminal here over and over again because we're in an infinite loop remember so as i'm here oh nice you can see the you can see the location of my face is being detected and then it's just being spit out here okay so like x y coordinates you know like blah blah blah yeah and then from this we can just draw a rectangle on the face that's it that's clean man i was expecting like some really intense stuff for that that's super clean how it comes back like yeah yeah that's it so it's it's uh it's a list of lists so if there's two faces so actually watch this now there's two faces hey look at that see how there's two faces on the screen yeah and then when i get rid of it we're back to one phase the list is length one now the list of of length two and that's nice okay quiet and if there's three then you know three if there's a bajillion yeah we're in the matrix you know mr anderson agents going i think it's what i'm saying guys like just from like that classifier you're able to do all of this so this is just the power of machine learning like and like this is a face detector a human face detector but you could easily go and pick up like a dog detector put that here and i guess it would do the same thing right you can detect anything so a hard cascade is a single algorithm that can detect any arbitrary object so basically we're you're like if the computer was a person we're literally downloading this is what a face looks like into its brain that's literally what this is doing you just have to teach this before we give it to it so this was a result of machine learning with a bunch of face images that somebody created and it takes probably like a few hours or a few days to create it but then once it's created then anybody can use it so that's kind of the power of it awesome got you yep and of course heart cascade is just one algorithm for for object detection whether whatever object happens to be in our case of face or smile yeah there's many algorithms but this is the simplest and oldest one it's actually based on viola jones um these names probably mean nothing but if you don't look it up look up viola jones algorithm yeah and then um our cascade so these are just names of people who came up with them back in like the 70s or 60s or whatever nice but awesome smart smart people yeah very smart people so okay so that's the face so uh from here we just want to draw those rectangles back on the image here and then when we show it then it'll actually have the rectangles drawn on this as well instead of just showing just the raw frame okay so that's really all we're doing uh then from there then we can get to the smile stuff so at this point we probably should just at the beginning oh if you want to get to the smile part just skip ahead but it's too late this is a stream yeah for anybody watching the replay but i mean i guess it is what it is yeah yeah we got 45 at 0.45 45 minutes or so like that's when we start the smart stuff so yeah we can add that in the comments afterwards uh yeah let's put the timestamps and then you know like the youtube has that nice that thing now or like where the play bar is like segmented that thing might blow exactly yeah that's insane bro you should do that that would be a cool clone to do you should be like youtube you know segmentation clone like you scrape out like the the stuff and you segment the video or something i don't know would it be cool yeah all right stay tuned tomorrow for that because sonny's a beast can code things in five minutes guys just as another reminder we actually have quite a few people on this live stream right now tomorrow if you're excited we are building a whatsapp clone so we are building a whatsapp phone tomorrow it's going to use firebase it's going to have a realtime chat functionality so if you're excited about that smash the thumbs up and make sure you set a reminder have you quoted imessages yet in the imessage clone no that's a good idea yeah we'll do that as well yeah you should do that because either facebook messenger but you should do imessage too instead of whatsapp you know what i mean what's happening more internationally yeah yeah forget the android people all right okay so now what we want to do is we just want to run um we just want to draw some rectangles on the frame so i'm going to kind of go over this quickly if you're getting confused then um again there the other videos go a little bit uh slower to explain this in detail but i'm just going to go a little bit faster okay because we're going a little longer longer than i thought it's already been an hour bro yeah but uh so are we going to do like i said faces is a list of points so we just want to iterate over all of the points so although the faces that the the algorithm found it's just kind of list let's just iterate over all of them and pull out those points so like i said there's four points here for each face so um we're just gonna iterate over all of them okay so uh the first point is x the x coordinate the second point is the y coordinate this is the top left point of the face yep and then this is the width and this is the height of how big that uh square a rectangle should be so for a face it's squares by default but for smiles it can be any shape rectangle so it just gives us like the width and height of the rectangle so we're given a point and a height from that from there that's all we need to actually draw it because we can say at this point go this far and then go down and you can just you can you can figure out the rest with math which is what we're going to do here go ahead okay nice so here uh cv2 allows you to draw stuff on frames so like like this we can draw rectangles we can also put text on the screen which is how i put the smiling little thing uh when it says smiling so you can also put text we'll do that later but for now we're just going to draw a rectangle okay so the way this works is you just give it the image you want to pop it on so in our case we want to we want to draw the rectangle back on the colored frame not the grayscale frame but the colored frame oh let's see okay because we're only doing the calculations on the grayscale on the grayscale frame because the coordinates and everything is exactly the same but once we have the data of where the face is we can just use the color again so it's an optimization yep because you're doing the calculations on the black and white image but then we're actually still only seeing the color image which is what you want okay and for rectangle all you need is the top left point and bottom right point of the rectangle for it to draw because those two points it makes it easy to draw the rectangle so the top left point like we mentioned is x y that's what we have here then the bottom right point is just going to be x y but you add the width and the height to the correct coordinate so uh x you want to go an extra width because that's the width of the rectangle just go you just add w to it okay and then why you just want to add the height to it and those two together will be the bottom right point of the rectangle okay if you guys don't know this then just like look at your geometry yeah brush up a little bit x plus width and then y plus the height and that will give us the square right like the rectangle sorry yep yep go ahead yup square right in our case it'll be a square but uh any rectangle you can draw any rectangle go ahead and what's the numbers on the right so what are these this so this is rgb the color of the rectangle okay um well technically bgr because it's backwards and opencv uh this is just a random color you can put whatever you want you can play these can go from zero to 255. okay uh you can use whatever color you want but i just chose this as a nice green color okay because like it kind of like it matched nicely with the joker the joker screenshot so this is just a random green color you can use use this if you want but um you use whatever color you want then this is just the thickness of the rectangle okay nice so four pixels thick that's all so this is just like customization stuff this one line is going to draw the rectangle on that on that frame yep yep i'm just gonna draw on that frame well a single face on that single frame yeah so we're gonna draw all the faces on the frame then we're gonna display that frame nice and then on the second frame it'll detect all the faces in the second frame and then show all the faces in the second frame and then again third frame because we're in remember we're in another loop so this is a nested loop yeah and then there's going to be another nested loop within this one which is going to be crazy later on but yeah okay let's go ahead and run this to see if we can actually see the the rectangles that you just you just talked about yeah definitely so um displaying the colored frame here which is what we drew the rectangles on colored frame yeah and let's just run this as you can see here um this is the x point this is the y point yep this is the width this is the height nice and faces are always squares by default because that's just the parameter they set so you can see the width and height is always the same with height is always the same but different sizes sometimes because detect multiscale it can be smaller or bigger okay awesome let's run this and there we go magic oh snap dude that's insane in javascript that would be like 30 lines of code you know just yeah yeah i know yeah it'd be something you know yeah like i really do come back to python a bit like whoa yeah man you know you can do web development with python too you know you don't actually need javascript you know you just do use django i'll fight you and i'll fight you and nas both yeah you might have a green circle around your face but you took it to the hook [Laughter] yeah with no legs right there's an enjoying goat guys i think we should just tell the community like sunny's good is so much stuff so when he joined the team a few months back um i was like one day we're on a team meeting i was like yo sonny you're so good at everything there has to be something effed up about you but he lives in uk we're all in los angeles so kazi was like hmm you know we've never seen sonny's legs and we're like he must be in a wheelchair or something like there's something there every everyone thinks i don't have legs but that's just a joke because he never seen his legs so he's always insecure and showing his legs in the in the video chats like yeah but guys at least at least today i i'm not the only one wearing a black shirt so you know is that is that a thing are you always wearing a black shirt that's always a thing dude everyone's always like yes and he's awesome he doesn't have any other shirts besides black tshirt he's like he's like steve jobs wears a whole um uh you know what's it called um yeah right yeah roll neck and then they're like sonny wears a black tshirt every single time wears a blue tshirt right yeah like a gray tshirt it saves you time in the morning guys so that's why technically this is dark gray it's not black so you're still by yourself sonny oh but uh anyways let's get back to this so that's the face detection app basically you just repeated the face detection video but whatever so now um that's pretty good so like wouldn't wouldn't a small sector be as simple as just changing this out for a smile and writing the same thing well yeah let's try it i mean you would you would think so you would think so but you guys about to see some really really weird crap and then really really cool trick to fix that weird crap which is interesting it's a smart thing to do so let's create our smile detector okay yep so they smoke all correctly yeah there we go smile detect so same exact thing uh we're gonna be using hard cascade and um to detect faces but we can also use you use it to detect smiles so in this case there's another file in description it's just called the hard dot smile i think let me double check down here yeah our cascade underscores smile yeah and we just use this pretrained classifier instead so this took a bunch of images of people smiling with their teeth showing it doesn't it doesn't detect like regular smells that good it's mostly like teeth smiles um from the training data but you can teach you to do both but in our case you kind of have to show your teeth for it to work like really well but that's there so why don't we just use this instead of the face like because it's detecting the face so well right like it was tracking my face perfectly and if there's multiple faces yeah shouldn't be able to detect miles too yeah supposedly supposedly so let's go down this code and make the changes okay so we have to we we get the webcam uh we would iterate over every frame we want to read every frame in each iteration and then a little check and then frame grayscale uh so we get the current frame you change the grayscale now instead of detecting faces let's actually detect oops smiles okay nice okay like smiles and instead of on face detector let's call smile detector and we want to call it on this on the same frame so grayscale frame yeah and then again let's just copy this exact code but instead of um and we can use the same variables because this and this loop will never overlap like this loop will completely finish before this loop starts so we can we can use the same variables which is fine okay keep it nice and clean looking yup there's no if it was nested we cannot because then they would get um they'd fight over the variables but loop completes before this even starts so it's okay to use the same variables here right um but instead of faces let's draw smiles okay so now this is going to be so this is what it's doing the same exact thing it's going to find all the smiles in the image and then return a list of points the exact same thing upper left hand point um upper left hand point here and then the width and height of the smile in this case it's going to be like a horizontal rectangle instead of a square okay so it's returning the same thing right the same coordinates uh the same form yeah it's going to look just like this but instead of giving us the coordinates of faces it's going to give us the coordinates of smiles it's like just a different rectangle on the image it's smaller around the mouth and it's like horizontal looking right uh let's change the color though i had a pre uh this color okay that's the color i chose this is like a nice red color yeah and because right now it's the same color as the face but i want to change it to this red color go ahead uh like i said bgr so r is at the end that's why it's so high so it looks more red because the r channel is the highest right okay red so let's run this and let's um let's actually not draw the sm the faces let's just get rid of the faces so i'm not even going to draw the faces okay so we're just going to we should just see okay yeah so not even faces it should just have things of smiles on my face right okay i mean they just have rectangles around the smile on my face yeah so let's run this and whoa voila as you can see it's working perfectly holy crap okay so this is what this one okay this is what you meant by it's just a lot it doesn't work for yeah yeah it doesn't it does not work but it does uh and i'll explain that in a second and how that actually works but as you can see right now the default it's like this isn't even working properly like what the hell like how like okay it is it's actually getting my smile look at my smile i was actually getting the smile yeah it's actually getting it so it's smart enough to find it but there's a lot of false positives like it thinks this stuff over here like this little window sill is there because it probably thinks this white is like teeth and this is my lip or something but i mean there's also getting things here on the freaking freaking curtain which makes no sense you know like like what i mean this may be a little bit too like it looks like the upper teeth and the lower teeth and the little gray line is like maybe the gap between the teeth a little bit and you kind of understand maybe we just built a ghost detector or some yeah that's what they said in the face detection video or the pedestrian tracking but yeah the point is this is working like ass okay yeah uh so how do we fix this it's like this isn't even working um first let me explain why this is happening so there's a there's probably a couple reasons why i saw it this is happening and i'm gonna explain both okay uh first thing is so let's just quit out of this first so why is this performing so yeah i realize it's fine it's fine first reason is to be honest uh faces are one of the very first things that people detected from the beginning um that's like the very like that it's like the coolest thing to detect to start with and it's very has like a very defining feature like detecting squares or detecting a soccer ball is kind of like okay it's kind of cool i guess um i think a face is like pretty cool right so there is a lot more data in this trained algorithm than there is anything else so there was actually just more phase data and this was just trained better than smile was to begin with so that's the first reason why face detection was working so well because it ran out more data for longer while this one probably didn't get much data nice okay just because yeah it's like okay if you want to have like a left finger fingernail detector like there's not going to be as much data as faces just because pieces are cooler or like a blade of grass detector like who codes that yeah you don't want to take vigilance and also bleeding guys like if you think about it a face has so many features you have like you have your eyes you have loads of things which which basically are going to tell that model that okay we can be sure that that's a face whereas a smile has a lot less to look for like you just have pretty much like the curvature of your smile that's why it kind of it can easily get confused like the lamp behind aaron has like a little curvature to it so it could get confusing nasa smile whereas a face has several different reference points so it will look for in terms of features so just something to bear in mind as to why you would get that that was the second point i was gonna make you stole it out of my mouth but that was absolutely correct guys yeah exactly what i was gonna say is yeah there's less features like detecting a tooth is much harder than detecting a face because how do you detect the tooth it's just like a it's just a flat white thing with like a specific shape but it's harder to detect yeah like it might get it might get a tooth and a marshmallow mixed up but it wouldn't get a face in a marshmallow mixed up unless you're the michelin man but uh or the or the or the pillberry tilbury uh guy you know the little little bakery guy but but yeah that's the point that sunny made right that's the second point so first one is face probably just has more data overall just because it's a more defining object and it has more emotional cache to humans so it's like cool let's detect faces but also it just has more data that i can go by to determine hey is this a face or not versus a smile you're kind of limited nice go ahead so that is absolutely correct so that's why it's performing like ass i mean it could be better it could be better if they trained it better with more data yeah but even then it's still hard harder to detect than a face right so how do we get around this well um first of all there's different parameters we can do so you can actually be like hey if uh something only counts as a smile if there's like two or three things around it that are also a smile because then it kind of thinks okay if this area kind of has like four smiles detected then it's a smile but if it's just one random thing that might kind of be a smile but there's only one instead of like four yeah then um you can go okay that's not small enough so like there's kind of like a redundancy okay code one more time explain that visually right so like here we're just getting a bunch of stuff okay yep um so but you can see like this random one over here just getting they're blipping up every now and then yep so so are you used to trying to say that you can get rid of those right so in a simple sort of like in a one sentence sort of answer like rather than checking the entire sort of webcam view we kind of want to narrow down that that sort of selection down to just your face right um not quite there that's the other optimization i'm gonna show but what i'm saying is um see how there's like random boxes showing up over here yeah like by themselves we can kind of get rid of all the standalone ones that just kind of flash really quick okay but if there's a big group yeah if there's a big group of boxes overlaid on top of each other though we can kind of say the chances of that actually being a smile is a little bit higher like up here we could maybe boil this down to like one smile we'd be like okay there's freaking seven boxes here this is probably a smile there's seven here this is probably a smile there's a bunch here there's probably a smile um but these little ones on the sides that are flashing randomly you can say now we don't want those right and we can actually get rid of that is there some kind of sensitivity or or yep that's all it is it's just a sensitivity number and you have to tune it to faces so you find the perfect number which i'll show you guys in a little bit um but we can actually do that so let's add that in and you won't see that much of an improvement here on this but i'll show you guys um the second optimization which is going to clean everything up and make it go from complete ass to super super accurate which is pretty impressive nice so um detect so this happens in the detect multiscale okay so there's two different things called or two different parameters you can use called min neighbors and scale factor okay okay so let's get these yep up here here we go so this let me actually type it out so this is going to be uh scale factor okay i think i might have spelled it and then this is going to be min neighbors okay i'm it might be the wrong spelling so it might not work but let's just try it so what this is gonna do is it says skill factor this is an optimization to how much you want to blur the image because if you blurred this image you can still kind of tell it's a face if you don't blur it too much okay and then if you blur it that's another optimization on top of the black and white okay you can kind of like generalize and then you can kind of compare the the data a little bit more um because there's less data but you can still kind of tell it's a face so you want to kind of optimize this basically this scale factor is blur like how much do you want to blur the image to make it easier to detect faces and kind of like um get the defining features in brightness um or or not so the higher this number then the more it'll get blurred so i found the 1.7 is the best right so just just to be clear there so you're saying essentially to blur the the the sort of the entire frame so that way it will be easier to detect facial features as opposed to like a curtain or like a lampshade yeah because you get a lot of rid of a lot of the details which are unimportant so like if there was like a 4k image and there's a lot of details then it can get very confused with the data but if you blur it enough you can kind of if you blur it like a crapload you can kind of be like okay um there's kind of a blurry face in the middle and then everything else is just like a blurred mess in the background so it actually kind of like contrasts like the objects you're gonna be like okay there's a face and then there's a bunch of blurred background you can't even tell if it's curtain or wall or whatever but you can kind of be like okay there's a face here go ahead okay nice so that's the idea if you can blur it down more you can actually detect faces even better yeah then mid neighbors is what i was just talking about um there has to be 20 neighboring rectangles in total in that little area for it to actually count as a smile okay so this would if this was one then literally just everything would be passed through but if you make this higher then it's like okay there needs to be a lot of redundant rectangles on this one little area for this to actually be a smile so it's like i found 20 smiles in this little region of the image because they're all overlapping it has 20 neighbors the minimum minimum amount of neighbors of a rectangle needs to be 20 for it to actually be counted as a smile so this will help a little bit yeah let me show you guys and then um well actually not even at all like well actually it helps a lot oh one sec one more than two more all right so there we go right yep right back there you go so as you can see okay it's actually it's actually better a lot better but i mean yeah there's still a few things so here yeah i don't know why it's so fixated on this light it's probably thinking that this is teeth it's probably looking for like a yeah a horizontal line of white so it's thinking this is t okay that way i mean like you can see why the lamb i mean the top left is a bit of a weird one yeah but i mean you can kind of see like this little white oval and my teeth look similar yeah yeah yeah so it's probably trying to find like teeth and then the curvature of your mouth okay yeah so something like that uh so that works really really well so like a lot of fine tuning needs to be done for things to work properly so just that little change there that worked way better than when i was testing it but uh i mean that's amazing so um tuning tuning different numbers can actually play a big big role in that so like maybe like in a real world application if you're detecting smiles you would want to save these numbers okay and be like okay for smiles always use these parameters this is like additional machine learning on top of all the the crazy numbers machine learning that's in here you have this plus a little bit more so this is kind of like this is kind of like manual machine learning you manually went through and tested a bunch of different sensitivities and you used your eyes to be like okay this is actually machine learning so that you actually taught the computer that these two numbers are closer to a smile than anything else so this is like manual machine learning that that you're doing okay pretty cool yeah nice um okay now going forward uh another optimization that we can do is actually get rid of uh these these errors because like sunny said and what i said in the slides is smiles only show up in faces yeah so why don't we instead of trying to get it across the entire frame just find a face and then only run small detection within that face yeah because we already already did the work of the face detection so why don't we do that that's awesome and that's what we can do next because it makes it faster and more accurate yeah when i first thought about i kind of thought that like oh we're just going to slap a model on the entire webcam and they'll figure it out but guys you have to be prepared like take it in mind that you you there's a lot to processing remember in the beginning we said like you pretty much have some kind of input your model and then some kind of output so if you can reduce the amount of input going into the model you can actually speed up the entire thing a lot more like and it's drastically going to be faster and it's also going to be like more reliable in terms of we're only going to select aaron's face and then find the smile inside there so something yeah yeah yeah on the selfdriving car live stream we did the car and pedestrian tracking one you can see a really good example of this in real time when we're doing it because there's so many cars on a highway so some highway footage there are so many cars and a lot of pedestrians because because here you're only detecting like two or three yeah but in those there's like 10 cars and 20 pedestrians so it was going crazy um when you when you do that one when you um scale it down so if you blur the image more it's faster if you make it black and white it's faster and then some other optimizations you can actually see the footage gets played back really really fast so that's a good visualization if you go check it out go watch that stream too it's nice it's badass as well yeah go check that one out guys i'm gonna watch out now as well after this somebody's not watching my content i know i do i do i'm the guy smashing the smashing the dislike i'm joking wow okay go up this morning he was like aaron i'm really grumpy i don't want to do the stream and i was like bro i need you i don't have my internet stuck i need you man and then uh then he's like now now he's all in a better mood because he's been hanging out with me it's fun we'll definitely do some more streams yeah this will be cool we can even probably do some kind of python react you know like yeah let's do that we could like tie it together like do like a cool front end app with uh javascript and we can have some cool like backend python stuff like happening like this you know yeah like a frontend thing where you click like smile detector face detector you know like car pedestrian detector and have like different you pick different files and it feeds it in yeah something some people like that exactly that was awesome uh aaron quick question here from shantao he says is it beginner friendly so just maybe a quick answer to that is this video beginner friendly or is the other ones yeah like just for anyone that's new to the video who might have joined afterwards is this video beginner friendly like do you need to know python before you do this yes you need to know python but if you know like for loops and all the basic python stuff and how to like call functions then no you know i teach you the rest from there but you do need i don't teach the basics here so you gotta learn the basics then you can come back if you're if you're a complete from zero beginner no if you're just a beginner who knows python but you haven't coded much then yes you can go through this yeah and also just worth mentioning guys i don't code much python but i know javascript so coming to this is actually super super simple in terms of how aaron's broken it down so if you have any coding experience then yeah you can do this so definitely go ahead and do it yeah very straight awesome so i popped back in the faces so let's do this now okay yep let's go back to the terminal and run it again and now we should have uh error oh because i commented out faces so it's giving me an error because i'm trying to use faces here yeah when i commented it out let's just get rid of that and run it again so there we go so we got the faces here and the smiles nice hey look at that yep awesome but i mean it's still getting this you want to get rid of all these random ones yeah so what we can do like i said is we can actually just run small detection within this window instead of the whole frame which is a smart optimization because i mean in the real world you wouldn't see a smile out in the middle of nowhere unless it was like a piece of art or like dentures or something you know but generally smiles only show up within a face so that's why um we can do this nice okay yep and then i actually showed the effect effectiveness of that too i'll get rid of these tuned parameters and actually show you how well that works okay um yeah i mean it kind of works well but those like these scaling factors the sensitivity plus the that little trick together makes it super accurate from what we had before just like freaking right all over the frame just a single smile like like we tune that down from just two little things so that's it's like really smart clever things to to make your code work using something that doesn't work and making it work yeah with a few numbers awesome yeah so let's continue okay so how do we actually make it so that we only check within a face if there's a smile okay so like like we said we're in the the global loop here that is looping over the entire frame we read the frame so from here we keep going down blah blah and then we get to faces okay okay oops run small detection within each of the faces uh run face detection so some of these comments might have not made sense the entire time because i kept popping them so this is what i had before run face detection but now we want to actually do this within each of those faces this is what we're currently going to be installing so how do we do that okay let's look at it just from here so we we we're in the frame and then we find all the faces and we have all the boxes of frames so we have the box of of a face so we have the box of what a face is yeah we draw that box right okay but we have this box so this is actually the box we want to look at this is actually the sub image of the whole image that we want to find smiles we're actually giving it right here but so we can actually just be like okay instead of looking at the whole frame just look at this rectangle for the smiles instead okay and that's what we're gonna do so how do we do that there could be multiple smiles within a face though right if i mean not technically but if there's errors like it might detect like a little just before your mouth so you just want to make sure you find all of them so what we're going to do is we're actually going to have another loop in here is be nested because within a face you have to find all the smiles okay so we're actually going to need to um find the x y um width height of each smile within the face so same thing we're just nesting it okay does that make sense so far yeah quick thing is though because yeah quick right this is a python question so you have uh are your variable names not going to clash here or is it going to be in a scope they will okay no they will they will right um i believe i'm 99 sure i didn't even try because i thought they would uh but i'm pretty sure they will so what you can do is you could use like capital letters or something i believe it's case sensitive yeah but you probably don't want to do that what i did is just a little sloppy but i just did this okay just so they don't contend but it keeps it simpler because if you start doing stuff like this the codes start looking really hard on the eyes yeah um because this is so so clean you know x y x plus w y plus h yeah keep it nice and clear but if we started doing this then it would look like you know over again x smile plus y smart like yeah it starts looking like that yeah so yeah so i just did this just uh it's a little bit messier but it's it's still easy to understand i just added an underscore to the end okay okay um so we're going to need to look over uh the face okay okay um i mean i should probably talk about getting the subset first uh let me go over the logic first so what we want to do is you want to find uh in the face okay so you want to find all the smiles in the face okay so uh find all smiles in the face okay so we're gonna do this doesn't exist yet but i'm just using this as a placeholder thing for right now this code will not work because it's currently broken yeah and then just draw um draw all the rectangles around the smile okay or the rectangles just like that oh shut up dude must be an american thing okay yeah let's just do this so it doesn't break uh oh yeah i was making fun of your spelling before right yeah oh god that's hilarious that backfired didn't it anyways so this is the kind of idea we're going to iterate over um all the faces and then with each of all within each of those faces we're going to find all the smiles okay and then we just want to draw the rectangle in there so kind of slimmer to what we did here actually okay the only caveat is you have to change the the names here yeah um so why don't we do that actually let me just uh copy this down here so this is the same exact code as we had before we just want to draw a rectangle around the smile okay okay and then instead of x y uh w and h it's just gonna be this okay just add the underscores to the end okay it's kind of hard on the eyes but if you space it out like this it's not too bad so so just to bring everyone to speed right now we had a an initial loop which was going through all of the faces and then so that was the first one on line 28 so i was going through all the faces and then on line 34 we're going through the individual face that it detects because you might have more than one place and then we're doing a rectangle around that individual face right uh no uh within each of those faces you want to find all the smiles and draw a rectangle around all those smiles so what we're going to want to do is um we're going to want to actually not run this here we're going to want to run this oops we're going to want to run this here okay okay yep well actually not here uh that's incorrect um but i need to explain something else first where do we get actually where do we get the face from is that like placeholder for now or that's yeah i'm about to explain that this is the tricky part and this is the really cool part so let's just pretend that the face equals this for now okay this code doesn't actually work but this is what it is in flavor okay yeah just pretend this code does not work this code does not work but this is the idea we want the face to be this little mini sub image within the whole image because this is the current face like the little square that surrounds the face so you want this to be like a little image but the thing is um you can't just pass in like these uh detect multiscale and get the get the smiles out of this we have to do some crafty stuff here with the array and and slicing but just this is the idea is that clear sunny yep yep oh yeah if it makes sense to you then hopefully it's kind of putting into an object right kind of well what we're going to do is we're just going to slice into into the image and get like a sub image in some cool way i'll show in a bit but i just want to show the overall logic first before you do that yeah yep so let's walk through this again so yeah we have all the faces here then we draw the rectangle around the face then we say okay get this little square image instead of the whole frame just get this little square now within this little square use that to detect multiscale so we want instead of looking at frame grayscale we want to actually look at the face okay so let's um uh of course we have to go to grayscale again though for for the same reason we have to convert this face because if this was if this was a color image then we would need to change the face to a black and white color image like actually let me show you here this is actually a good uh thing so i said step one okay we want to find faces in our image yep okay then step two get just this so that we don't we don't have to search we don't have to search the whole image instead of searching the whole image we're only going to search within this face so now this is we're doing that because we were getting like random sort of findings outside the face yeah okay yeah we're kind of just eliminating everything outside of the face as automatically no even if it says yes it's going to say no because we know that smiles only show up on faces right okay then step two we find smiles within those faces so we're only going to search within these bounds and then at the end we'll do a nice little labeling that we haven't gotten to yet go ahead okay but yeah so the idea is the face this is going to be this okay okay so this is so this is frame this is the whole frame this is the face okay so we need to get it but it's still color so we need to make this black and white as well just the same as the other image yeah so let's go back and um call or is it let me just copy paste this and change it to face grayscale okay so phase grayscale uh is going to be the face so same idea here we have the face the colored face but now we want to change the black and white so we use the convert color function again okay and we pass in the face the color face we say change it from color to gray okay and save it as face grayscale right okay then now in the small detector now instead of detecting it on the whole grayscale frame let's only run it on the grayscale face go ahead okay yep right there and now now this should be working but the only caveat is this doesn't exist yet properly this doesn't actually work but this is the general idea so once we have um this then we can run the smile detector only on the face there okay and then uh then then we can draw all the rectangles um around the smiles within that face after we find the coordinates of smiles so it's actually going to be smiles right i'm with you now they should be a little more clear yeah awesome great so yep find faces draw the rectangles get the little face change the little face to grayscale run smile detector on that little face then draw all the rectangles on that little face go ahead and then and that's how we're gonna get uh this kind of behavior okay awesome so you can see how there's no no red boxes outside of the face it's only within the face yep yep you you said yep like a bajillion times on the stream bro yep all right yep i was gonna say but the one thing i'm kind of confused on so we have the oh okay no i see now because you're doing it on face grayscale and then that's where smiles comes from okay no that makes sense cool got you yeah so you're writing smiles on the face you're not running smiles on the whole frame yeah that's why i was a bit lost yeah so that's there um so this should work in theory right but the thing is uh this doesn't work so how do we do this one little line of code so this is a little tricky i'm gonna have to explain it but it actually is just a one liner can we can actually achieve this but i need to explain how it's done and there's some weird um details that i'm gonna explain um so let's get rid of this okay run smaller sizes with each of those faces because we actually just copied that from over here we just added the underscores at the end so we don't overlap with the variable names this remains unchanged we still want to still want to display the current frame and the weight key of one millisecond and then release everything at the end of the auto but how do we do this okay so um we have the frame right we have the overall frame but uh and then we also have the face xywh so how do we get a sub image of um this whole image like if you have a big image like right here you have a big image how do we find this sub image how do i cut out just that image right yeah cut out that image right um there's there might be like a sub image function opencv but i didn't want to do it that way because i wanted to show you guys this smarter way of doing it or maybe more efficient way it's it's a little bit different so uh do you are you guys familiar with slicing in python i mean if you know the basics of python okay i mean i'm new to python so i even even if you run through that it'd be kind of cool to see you got it yeah okay so let's look at this little environment here let me open up a python environment completely separate you start python and this is python2 it's fine though python 2 is fine okay it's the same thing so let's say we have a list okay yep and let's just call it um list let's just call it l okay whatever so we have a list let's call it color of colors uh i'm trying to think well people yeah yeah yeah yeah colors let's do colors let's just do red blue oh yeah blue green yellow black white that's good okay so we have six six colors here okay this is a good length list okay and let's hit enter uh red oh because it needs to be strings i was just wondering i was like can you do that in python i want to see if you could do that yeah nice okay one second yeah little mistake there there we go okay now we have a list of strings colors plural got it yep colors okay there we go so now we have our list okay we have a list called colors and it has all these in here now as you know we can index in two colors with a zero and we would get what sunny you'd get the red absolutely yeah and we can index that one blue get blue and two to get green so on and so forth okay so you can index pretty straightforward in python you can also slice okay so you can get instead of just indexing at the first one or just the second one you can actually get a subset of it you can get like the first three so you could say like from point zero for two points forward from point zero get me like red blue green or something like that exactly we could get like just these two or we could get just these three or we could get just these four um it's called slicing because you can slice up the list into like some some um you can trim it to whatever you want okay so the way you do that is you use a colon okay you put a colon here and then you just put the first and the last so very simple it's so nice and hyphen dude i know man that's why javascript sucks slicing in javascript a little bit more confusing but yeah that makes sense for you yeah that's all it is so what this is saying is for in colors give me the sub list from zero to three so it'll have red which is zero it'll have blue which is one it'll have green which is two and it won't have yellow which is three so it includes the first one but does not include the last one right so it's gonna give us element zero element one and element two but not a limit three so zero one and two it should give us this as a list when i hit enter okay red blue green i'm gonna hit it that's exactly what you get okay nice that's how you slice um of course if i what is this so zero one two three four five if i put five it would ignore white so let's try that that would give us everything except for the white but if i put six okay then it would actually which doesn't exist then it should give us all of it or it might break let me see if it breaks no it doesn't so there's a safe check so 6 goes past here and it'll give you everything up to 6 because this is 5. nice um alternatively because this is the maximum list you can just not give it and it'll just say 0 to the end of the list oh nice okay and vice versa you could even be like beginning of the list up to four i've seen that in a tutorial somewhere that's nice yeah awesome yep you can just do that so this is like zero this is the same as saying zero to four yep um it's cool stuff like that uh one more cool thing i want to teach you guys is you can actually be like from zero to six and you can actually add another colon okay and what this is is the stride so if you put two it's going to skip every two so this one this this would actually give us red stride of two instead of if it was a stride of one it would give us every one but straight up two will give us red and then skip one then green skip one black so this should give us red green black okay there you go that's insane dude i love that right right yeah that's nice um yeah it's cool so red green black and again if i put a stride of three it would jump in groups of three so it would go red skip skip yellow skip skip nothing it would just be red yellow so let's try this there you go and then again if you did if you did straddle four it would go red skip skip skip black skip and then nothing else so this would just be red black nice boom but guys that's how you do that that's something new even for me like slicing in python so if you guys found that useful what can they do aaron um they can uh send a money request to my uh request to my paypal yeah spend the money request so much now you guys can smash the like button uh show us if you guys if your minds are blown just show us um tell us in the comments or if i'm being boring and going over basics but oh yeah guys i think that's awesome honestly because like i didn't actually know that you could do that in python so awesome to see how you do that nice and we're not even done yet bro we're only halfway there look at this watch this so this is called striding this is called slicing the first colon is slicing the second colon is called striding because you wanted to define your stride okay you can be like if a strata one is the same as not having a stride at all yep and if you delete it like having like we said it's like having nothing there okay one by default the cool thing is you can also reverse a list by using negative numbers so now instead of going from zero to six you'll go from six to zero and this will actually reverse the whole list no way wait oops um let's try this there we go so now it's reversed what uh here let me actually explain that so yeah um actually this didn't work i made a mistake there so zero to six yeah um this determines the direction of this of the stride so it's still gonna go from index zero which is red to index six or five which is white but it's going in the right direction should you have done you're starting zero zero exactly bro exactly should done six zero because negative means you wanna go in the left direction so you want to start from index six um which is really well actually that's incorrect you want to start from index five because remember the first one is inclusive yeah so you want to start from index five it'll include it and it'll exclude this last one code kodi joshi actually pointed out in the comments nice he goes also that reverses the list nice yeah awesome yep so if you did that then um it'll go through the reason um this isn't going the first one red at the beginning is getting deleted remember blue there's supposed to be a red at the end but it's getting deleted because it doesn't include zero so you could technically put negative one okay and then um okay it doesn't work but i mean i thought it would but if you just like if you just omit it and don't have it there at all then it kind of says like um to go from the beginning all the beginning but don't stop at zero go like one further okay so this is kind of similar to like not like when you omit it you just kind of like go to the end when there's not a number there nice so this would be reversing the lip reversing the list i've been talking too much one second that's really powerful that's massively powerful because even in javascript like to reverse a list you can do i mean there are tricks around it but it's not as clean as that like that's that's really nice yeah yeah so python makes it nice for like dealing with complex problems which happens a lot in machine learning you want to be able to express these ideas really simply so this looks simple but when you have to do like crazy slicing and like like seven dimensional arrays on like different images of like think think things this adds up quickly so it's difficult in python and impossible in javascript so that's why python is the best sunny crossover if we do a collab with like a reaction it's gonna be bickering the whole time this fight like es6 is better than this slicing that's what's not a beach but yeah so that's that's slicing and striding and using negative strides okay so very very cool there nice um so we can do that and then of course we can omit uh omit both of them and by default because it's negative it'll just start because it's negative it'll start from the right most spot and go to the left because negative means going to the left so this will also work for reversing a list so this is how you can reverse any list in python with one little line so you have colors yeah and then you have colors at negative one so this and this are reversed got you cool stuff awesome now i'm gonna talk about slicing multidimensional arrays which is what an image is you can actually slice an image by using the same thing and just get a sub multidimensional array from that big array by using the same thing okay so that's why this is relevant so let's say you had um a multichannel ray because this this can be kind of hard to explain visually with this example uh okay let's clear let's quit out of this okay clear seller clear and then let's go back into python let's have a multidimensional array okay yup and let's have one two three four okay yup five six seven eight because this is and one array with three arrays inside of it so far and four okay we've got four right 14 16. so this should be like a um it might be it's going to be kind of hard to do it in here can i can you have like a new line on here i mean if you log in now if you do mra actually let me let me um i kind of want to explain this uh i don't want to i don't want to dirty i don't want to start editing stuff in here because it might get confusing yeah also guys i just wanted to say we just are nearly about to hit 800 likes so massive thank you guys and if you haven't already smash the thumbs up because aaron's about to drop some knowledge on python tricks and tips nice holy crap uh actually let's just try to jump into the code i feel like people probably understand slicing enough at this point to like like translate over the ideas like i don't want to drag on too long because i spent 20 minutes explaining slicing yeah so this is this is the goal we have a frame we have a face in that frame with our coordinates how do we get this as an image of here as a sub image well we can just use slicing with these numbers to slice a portion of this frame which is just a multidimensional array okay and that will actually give us an image instead of just this point because all we have is points and then we're actually drawing a rectangle on it ourself uh up here we're just drawing a rectangle around it but we actually want to get like the full image like all the pixel data of this bounding box okay so the way we do that is instead of doing it this way we actually want to have the face be um a slice so what you want to do is you want to take the frame okay and for a multidimensional array you can actually slice in both dimensions so what we could do is we could be like okay from zero to the end in the x dimension and from zero to the end in the y dimension remember how to slice okay so this will just this will just say get the whole frame this is actually the same thing as representing the whole frame because from zero you're getting every single um you're getting every single uh column and every single row and every single column i'm getting the x and y confused i gotta double check which one is which but we'll try both we'll learn together we're fresh together but uh one is x and one is y and um of course if you had like a 3d three dimensional thing then you could even slice it in three dimensions like if you had a cube and then you want to like find like some subset some cube in there or some rectangle inside there you could also slice that way okay the idea is this zero to the end and zero to the end this will give us the full frame um so you can probably see where i'm going with this uh all we need to do is just utilize these four numbers to actually define the exact frame the exact subframe of the full frame that we want okay yep and so that's really simple i mean all you want to do is just slice so um where do we want to start so from the beginning the top left corner of it is going to be uh x okay and then x plus width okay that's it and then in the y direction we're going to have y and y plus height that's that's literally it okay so we're going to slice this whole frame and get the sub frame of x x plus w and y y plus h but i'm pretty sure this is backwards i think y needs to come first um i think i just eliminate something so i'm pretty sure y has to come first and then of course if we had a z coordinate as well you would want to do like uh z and then z plus depth or something but we don't have this we're not doing crazy like 3d modeling here we're just doing images but i mean i'm just showing here um that you can do this one thing i do need to point out very very very important is this does actually not work this does not work in vanilla python the reason this does work is because opencv is built on numpy and numpy this works this works in numpy numpy is a library for dealing with numbers and matrices um in python very powerful and it allows you to do cool stuff like this but this is not in vanilla python so that's why in this terminal it wasn't going to work and i didn't want to explain it here because this wouldn't actually work you need to import numpy which is just um numpy like that okay i mean i guess i could have uh defined it here so let me actually show this a little bit uh yeah cause i'm i kinda get it and then there's a little bit of a gap so yeah it'll be handy to go through this yeah yeah um but i think i think it's like a pretty print in in numpy i think it's isn't it oh print f is variables yeah what is it what is the numpy nice print uh how to pretty print a numpy array without scientific notation asking if this live will be saved yes this will be available afterwards all of the live streams are available afterwards guys yeah format i mean there might not be a pretty way to print it that's the thing i didn't think there was that's why i can't remember uh i don't need this let's try bigger matrix yeah i gotta do some some crazy um stuff yeah actually let me just have like is there like a grade of numbers and maybe uh what are we trying to show right now um you wanted to see how how this is getting sliced right yep i think i think maybe we could do it here i think it might be clear on just on the terminal okay the thing is i don't know how to print um okay or let's just try it yeah let's just try it yeah from here so you guys can kind of see like it's not nice and formatted like vertically i was hoping we could like ver because this is a four by four four by four uh um twodimensional matrices yeah because we have a list of length four and each of those there's a list of length fourth in those so it's like a four by four box actually if we layer these on top of each other okay but we can actually slice like i said using the comma and colons somebody said np dot array i'm not sure if np dot array that's what it is you just print um np dot l so thank you cody joshi for that so he says np dot uh array and then open parentheses and then square brackets inside uh wait what no i know i know i know what he's saying it's coming back to me because i haven't used numpy in a few weeks so i kind of forget it can you type it uh is it in the comments you could do four line in array ah i don't know i don't iterate over it you know yeah i think it's um array.l or something yeah numpy pretty print array i mean we're back here what did he say mp first and then so then you would end up doing numpy dot array so you could do numpy.org would you numpy the ori oh yeah because yeah you import numpy so remember or just or just uh no no i think you do numpy dot array and then open parentheses l ah there we go thank you guys that's awesome i thought it was pretty print but i mean that's that's the normal yeah all right there we go so this was talking about we have a double double uh twodimensional array here yeah uh four by four so this is easier to visualize what i was trying to do from the beginning yeah oh god guys i think i think he deserves a thumbs up for that terrible oh we'll hire him have him teach it yeah number three nice um i don't know it wasn't popping up because yeah remember it was something simple with the array but they're like iterating through all the crap i'm like okay i don't want to have to do all that again but anyways uh so here the way we can slice this is you can go by the y dimension then the x dimension so um let's just slice this so let's start with the y dimension let's just get the first two okay okay um so this is the first dimension so what we're doing here is we're getting the first element and the second element so in this over array we're getting the first element which is this list and the second element which is this list okay is that clear yep and now so we we're getting this now what if we wanted to get like this three four and the seven eight as like the the sub sub array of the whole thing then all we wanna do is just pop in a um i don't know oh i think we are no is it element two oh wait we want to go from element two we're back okay we're back i think i lost you for a second aaron you'll be drunk we lost the stream for a sec uh i don't know if it was i think it was skype i think it might have just been skype oh it just broke down for a sec yeah all right we're good anyways um so if we have uh the first two elements here um slicing from zero to two one two three four and five six seven eight we're essentially getting these first two the first is like elements because zero up to two but not including two yeah uh now if we wanna get this sub array three four seven eight then we're going to need to further uh well actually let's do this sub array two three six seven okay how would we get this out of this whole thing okay well again it's just gonna be a simple slice um but within each of these arrays this is element zero and this is element one so we wanna go from element one to element uh two but this isn't included so element three um will give us these two if we say element three right yeah it makes sense sunny yep we're good and this but i think it might be backwards yeah it's backwards so um when you're adding when you're adding uh dimensions to the array you need to actually go in reverse order so it's going to be like this okay so this will give us from these two to these two and then also of these first two rays okay i believe yeah i mean it might might break uh indices do you have questions huh do you have to use the opencv opencv is built on nonpart number i mean will they utilize numpy opencv is but you're inside of um you're inside of it yeah that's what screw me up yeah because i need to call the numpy stuff yes there might be some numpy dot um everybody yeah numpy dot array l and then you do what you did l yeah because it's a numpy getting turned around over and over still not working um i should have brushed up on my numpy syntax before this i wasn't expecting to show it in here i was just gonna show the opencv part uh but all right okay guys let's investigate together so whenever you forget code just you know go to google and and figure it out um how to display numpy uh i mean subreddit should work i just i don't know why it's not working because it was working in the uh open cv here oh maybe you gotta do uh frank face numpy ray well let's let's display the type so this should be a numpy array so let's print the type just make sure that typing is all correct so when we actually somebody said store that in a variable and then use that so i think what we need to do is memory thing yeah how about even you see have it as you had it before it's a number array but have the square brackets outside the parentheses the score back it's outside the parenthesis uh no so you know you've got um nump.ral yeah yeah do that and then have the square brackets outside the parentheses outside the parentheses what do you mean the score brackets like so did you numpy them right yeah l and then and then out so outside that bracket so i have l inside the brackets yeah outside the brackets have square brackets so so now on the right right so on the right uh put the square brackets and do one three zero two well that one no that's outside the parentheses outside the parentheses yeah oh just index like this directly i think this might actually work no no i was saying so so i have numpy.a l yeah and then and then change them print yeah and then get rid of the parentheses just make square brackets there oh dang coding in this terminal is terrible yeah no yeah like that maybe that will work yeah hey there we go okay because then you then you're doing it on the object yeah you're getting back yeah but i mean this is also wrong this is uh index you get raw yeah you get all turned around with these numbers um okay let's let's try the other way around zero and two one and three two three six seven let's see there we go nice all right we finally got it guys so the ordering is um if you wanted to get this sub array then in numpy using raw numpy if you're to do it then you need to use the numpy dot array um get the list so this is um because l is just what is l l l yeah l is just a raw python list okay so we have to convert it to an array here yeah you have to explicitly convert it to an array by using numpy.array change this and then once it's in numpy form then you can index it like i was saying you can't actually do this on vanilla python yeah so that's where not enough coffee man i run out of coffee and now and and what we're doing with that indexing is we're saying get the first and second array inside of the the sort uh overall array and then we're saying slice it to get the the the first and second uh first and second in the um y direction so in the y direction you know going top and bottom then we want to get the first and second and then in the x direction you want to go from index one to three so we're getting these two and then from one to three it's going to be these two sunny is also becoming pro in python hey let's go yeah but not not as pro as the guy that was helping me out because i'm just here forgetting about numpy it's been a bit but oh i think we lost aaron again but just treat him he's back this three i think i lost you for a second aaron we're back we're back oh my god this internet man also just yeah just want to add a comment here so sarah rajput says hello there i recently joined pwj community it's awesome and i'm really excited welcome dude i love seeing our own students on the on the streams we can see here so here um this is a casting list this python list okay aaron's internet is being a little janky or is it me i'm not sure if it is connecting uh all right now we have it did it cut the stream no no i don't think it's kind of the stream i think it's uh it's okay good yeah just lagging don't worry let's go let's carry on yeah we'll carry on sunny yep okay okay got it i think it's the shoddy yeah i i can't hear you man you can't hear me okay cool so like the lag i think there's a huge lag okay oh we've lost we've lost aaron on the stream okay so aaron do you want to share your screen yeah can you hear yeah uh bear with us guys a little bit of an internet moment i'm not sure if phil or aaron okay i think we're back yeah i've got you now i've got you can you back sonny yeah all right good good yeah i think there's a internet hiccup there can you hear me oh dude before yeah so can you hear me now yep what's happening what's happening yeah we just got a 50 i think it's mexican dollars super chat from jessica apollina saying i love your streaming i don't have lots of professional experience in python although i'm fond of learning and build my personal projects huge huge thank you jessica that's that's insane we massively appreciate you watching this and yeah like hope keep on enjoying the content that's that's insane i love that especially when we just had some some streaming difficulties but we're back we're back nice let's go and coding difficulties yeah like i'm running on three hours of sleep bro this is not yeah why did i do this uh but um what was that saying so yeah here in the numpy i ironed this out so the issue was making was this is a python list but you got to make sure i'm pilot so you gotta pop into the right function and then from there you can slice in this manner so what i want to make that that parallel here an opencv it's much easier because everything is a numpy array by default like the frame here is this is a numpy array so you can just slice it normally um instead of having to do the whole the whole numpy you have to actually make a numpy right yourself okay um but i'll try not to forget that again um but yeah so this numpy array and then we slice it like this and again so we're going to do the y direction first and x direction second so this is actually the correct way of doing this back coming back to our application okay so let's delete this out and the sub frame using high uh n dimensional slicing nice okay all right that might be kind of big but there we go yep so opencv built a numpy superpower and uh going forward this should work so let's walk through this again just to touch base again because that was a long ass tangent these streams go on way too long just want some breakfast don't worry everybody get all the faces within the frame yeah i can't even see the stream because i'm just in my code but i'm trusting you there's we have like two viewers right two no no no we're good we got we got about 250 people doing dude watching dope yeah lag is super bad like you reply like six seconds yeah i know but it's okay so just keep going keep going keep going we're good um all right sonny i don't know if it's a holy crap this internet man really killing that uh any anyways so let me i'm just gonna keep talking and that way it's like an on so we get the faces we find the the frame we use numpy slicing to get just the face and then we convert just the face to grayscale yeah and then once we have just the face of grayscale then we can run the small detector on that little face and then print all the rectangles around those smiles and this out of here god damn it there we go yep we we we're there yep we're there that's sunny awesome so quit out let's run this one more time and see if it works hey dude there we go got it something something's uh yeah i think the x and y yeah so this is the one last thing i want to say um the area that's happening here is um so we're finding the faces right in front of the faces we're drawing the face uh we're drawing the rectangle around the face okay we're drawing a rectangle around my face that's the first step yep second step is we're getting the face here so we're creating the subarray and then we are searching for the um i mean we're making a grayscale and then we're searching for the smiles within that face once we get those coordinates those are correct the issue is we're actually drawing the rectangle on the frame instead of on the little face so um the reason reason here is we're getting coordinates so within the face it's a little square right it's a little tiny square yep um when we run smiles on this little tiny square we're getting some coordinates back um in of like from for those smiles does that make sense sunny yep that makes sense so like actually it might be easier to explain here on the uh here so here holy crap here uh we're getting getting the face first and then get the sub image and then and then we want to find the smiles in here so the thing is because this is the sub image the xy point is actually pretty small it's starting from here and we're gonna say okay go down this much y and go across this much x this is the top left point and this is the bottom right point and we can draw this the thing the problem is i was actually drawing this rectangle based on these coordinates so this was offset way up here in the left so it was actually taking this um y and this x and drawing it on the big big frame oh actually yeah we actually want to draw it within the little face so how we fix that i mean this actually doesn't matter too much because we're going to get rid of it and show small anyways but it's just for additional purposes yeah and so i think it is a game of mine i think it is important some people might want to show that that rectangle you know yeah yeah yeah so we need to do is in smiles when we draw the rectangle instead of drawing it on frame right we actually want to draw it on the face so we take this sub image and we draw it on the face because before here oops when i smile see it's dry like if you took this if you took this green square and put it in the top left you can kind of see that that's where my face would be my smile go ahead you see yeah yeah so we're just drawing it on the wrong frame right now if we go back here and we quit out uh if we quit out just interrupt that then we can actually draw it on the face instead so this is another thing i want to say so the face is actually just a subarray of frame like i said okay but the thing is when you slice like this i believe you're actually just accessing the actual memory of this full frame so you're not making a copy you're not like saying oh this uh this is a new subarray that's equivalent to like this little range but you're actually saying just get me this portion of memory in this weird slice because you have direct access to the memory like that with numpy okay so if i change this data within here if i change the data of the frame within here then it'll actually change it on the mainframe as well because we're just saying okay this little slice of the whole frame um this editing this in here will also edit this which means editing the face will still edit the frame so we can still we can draw on the face which will work uh if you draw on the face then it'll actually also draw on the on the the master frame okay even though we're not drawing on the frame so that's that's how that works there because when you when opencv draws a rectangle it's actually just going into the the memory and just like changing the memory there right here yep so now let's try one more time and oh hey hey with that said guys we just hit over 850 likes just push that to 900 and if you found that cool and aaron and aaron guys aaron just debugged everything in front of you so i think he deserves a smasher thumbs up one and just some just some numpy nightmare man yeah syntax numpy nightmare exactly that's the one thing i hate about numpy i wish they had i wish they had some nice like easier syntax to but it's all like function based that's the one downside but i know i mean numpy is awesome yeah you fixed it exactly so that's the main thing thanks thanks uh with help from the community yeah shout out shout out to whoever that was i couldn't find it on google and i was like i give up not important but anyways uh from here um now though but i mean this is cool but i mean this is kind of just like the same as face detection or car pedestrian tracking but it's like outlining it but i think it'd be more cool if it like just detected that i was smiling and put the word smiling underneath because you're only concerned with smiles if it's like a face you're like oh this face is smiling or this face is not smiling yeah so i think it's cool to um do that instead so let's do that next nice let's quit out of here and the very last thing we're going to do is instead of drawing this okay instead of drawing the rectangles around the smiles at all we're not even going to do that we're just going to completely ignore drawing the rectangles um i mean it was relevant because i want to show you the cool little like offset thing how the memory is actually being being saved here when you slice it's the same exact memory so it goes into the same memory and changes it um but i do want to show you how to put some text so i don't i want to avoid another syntax mistake the i'm the master copy paster uh yeah i think it was massively valuable to show them how to draw the actual smile because then it gives them context as to what we're gonna do next yeah yeah so i got rid of drawing the smile because i don't want that there but now i pasted this ugly looking thing here so what this is is now instead of drawing the rectangle around the smile i want to actually draw the word smile uh i mean write the word smile smiling okay i have it right here smiling underneath the little um portion so like when i go here you can see smiling pops up for a few seconds that's that's what we're gonna be doing now instead of having the right i think you're gonna have an error because you said if smile length if length of smile so go back to the code is it meant to be plural if length of smiles because you've done smiles array um yeah i think so yes so length of smiles is greater than zero yeah nice yeah because uh let me just double check yeah because down here i think i used um yeah yeah you smiled singular yeah so yeah uh so yep so pretty much all i'm gonna say is if length of smiles is greater than zero because remember smiles is a list of all smiles it found within the face if it's greater than zero which means there's one or more smiles then we're just gonna put some text on the screen so this is very simple this whole thing here is just displaying the word smile at some coordinate so similar to a rectangle it's cv opencv.put text we're going to put text on the frame okay and that's the first thing the image the second argument is going to be the words you actually want to put so i'm going to just going to put smiling yeah or you can put like why so serious or something okay and then next is next is the location the top left point of where you want to display the text so in my case since i want to put the word smiling just outside the the green box of the whole face i'm going to use the green box coordinates okay okay so i want to put it below it so the x coordinate will be the same um but the y coordinate will be y coordinate plus the height right so i'm just going to actually draw this as you do it on the screen yeah because i think it might be handy so carry on talking over and i'll draw like as we do it i have it here if you want to yeah we can use and explain it here yeah let's do that yeah yeah so um we have the coordinates so we know this this picture is smiling but we also but we want to put the word smiling down here instead of having this we want to have this yep so if we have um we know this is a yes so we know to display smiling then but how do we get the coordinates of this so we have the coordinates of the whole face which is what we want so why don't we just have the use this top lift point to figure out how to get down here so we have the top left point which is x so we can just say at x is where you want the top left point of the text to start at x yep but then the y point we don't want it to start here because it would say smiling up here so we add um y this is y yeah plus h plus the height right so y and then we're saying plus the height which is this so like y which is going to be right here yeah and then i added and then i added 40 just to have a little bit so it's not touching the box i just added a little bit and then that's it so this is this point is going to be x and then y plus h plus a little bit more right so you guys exactly we have x and y in the corner uh just go back to that that side for a second uh so we've got x and y in the corner and then we go we've got we're doing y plus the height and that gets us to the bottom of the box and then you see aaron's got smiling exactly but if he didn't add the 40 it would be sitting on top of the green right now or like oh yeah pretty much on top of it so it would just be touching yeah so we want to add 40 to basically get push it past that little bit extra so yeah awesome nice yup and that's really it guys so as you can see that's going to be the x is the same and then y plus h plus 40 is right there so that's the top left point where the text is going to start then from there font scale is just the size of the font so size three um and then the font face is just the font you want to use so um opencv has different fonts so uh that font is called font underscore hershey underscore plain uh it's the one that looked the nicest you're kind of limited on the fonts but i mean it gets the job done and then last is the color so bgr again but all three are maxed out so this will be white because if all three channels are at maximum brightness 255 then it'll just be white nice so if we run this hopefully with no hiccups before you run it before you run it we actually just got a superchat from velocity trading he says my girlfriend introduced me to your videos she is a data scientist in nvidia and she loves your content on react yeah shout out to her princy thing that's amazing thanks sonny yeah thank you yeah and look at that how crazy is that it's like two worlds came together react yes now we're talking about data scientists where the majority of data scientists code with python so yeah this is this is dope it's awesome yeah you should do a collab with her like a react data science project yeah but nice awesome awesome people are showing sonny the love the hulk you get a you should like you should demand people in the comments call you the hulk anybody who wants to call sonny by the hulk i'll pop that in the comments right now going forward we'll legally change his name to the hulk because he can handle anything except standing we have papa react we have was it the react god now we have the hulk the react called yeah god yeah it's just hulk just talk the british proper hulk um where were we so yeah so we're gonna we're gonna draw smiles underneath the face instead of actually drawing the box well let's put both for now just for demonstration purposes nice let's run this there we go hey ah nice that's awesome dude yeah it looks a bit like that horror game you know that that slender man that's what the text looks like yeah yeah oh the slenderman text yeah the smiling i mean that's awesome dude and then now if we just get rid of the if we get rid of the um drawing on the rectangles then it should work nice guys if you find that cool because it is it's like look at this look if now we should see no rectangle but we should see the smiling which means that we have that finished sort of hey look at that that's that's that's nice dude that's awesome and even if we have two faces on there because we have that loop it will actually go ahead and do it for a second face as well right i will yeah so let's uh let me just get and guys i wish there was a way to get your face on the screen too but the stream tech kind of limits that but yeah let's go ahead and see it wait look at that nice that is awesome guys if you think that's cool smash the thumbs up man that is awesome and if you haven't already and you are following me and aaron on instagram go ahead and shoot us a story right now so this is my tag and this is aaron's tag right over here so my tags over here aaron you just point somewhere down there you'll see it uh yeah so go ahead and shoot a story and um yeah tag us in there and let us know that you're watching and yeah you guys can we can have a chat with you guys if you found that cool i think that yeah like it's so impressive like how many lines of code was it in total oh even when you zoom in look at that and guys that's a really good example bro because they're showing the actual dynamic width and height changing yeah yeah that's awesome all right the wheel man cool 900 likes as well guys that is insane thank you guys but yeah guys that's pretty much the completed app um and there's other things you could probably do to clean up the code you could probably pop some of this stuff in a function you know i just kind of blobbed it all in one go um so not very good code design here uh but other than that yeah i mean we went over the using the face detectors and small detectors using xml files which are pretrained if you learn how these actually work then you can go watch the other streams for the actual algorithm um of how that works uh we captured the the webcam footage we're iterating um forever until we're done with the webcam footage we're reading every frame one by one and then for the current frame we are doing a quick check to make sure the frame is good to go then from the frame we're creating the green the frame grayscale so that we can optimize it and we can um speed up the process and the calculations uh once we have a grayscale frame then we find faces within that frame then from all the faces we want to actually draw the rectangle around each face nice and then from each face you want to create the subarray using the numpy slicing here the the um which is numpy under the hood so we got the little sub right here which is the same um data in memory as the regular frame so when we edit this little sub ray it's still going to edit the mainframe yep the main frame then then we change the face to grayscale um so we can run small detection on the face and then from there um uh once we have that then we can just label it as hey we found a smile instead of drawing the rectangles right so remember guys what we did that nested approach for when we were drawing uh where did that happen again aaron so where we avoided doing it for everything we did it for just the smiles it was line 38 right yeah yeah nice that's so cool and then we put the text there and then um at the end then once we have once we have the once we found the face drew the rectangle found the smiles wrote the word smiling once we've done all that and we've edited the complete frame and all the the correct rectangles and words are on the frame at the right locations at the very end of all that at the end of the end of the detection we uh use cv2.imageshow just to show the frame and then we wait for one millisecond and then we repeat to the second frame so all of that's happening every single frame all of this code dude it's insane like if you actually think about it like let's say we went ahead and got rid of the comments and we got rid of everything that's so little code to get that powerful functionality happening all right so let's actually do that yeah so let's make this super optimal nice yeah guys drop in the comments how many lines of code you think this might be if we can if we can do that before aaron gets to the top i'm gonna say maybe like 30 i'd say maybe i think it'll be that around there this is insane that like if you used to do this kind of thing in like javascript you would have to write more and i'm a big fan of javascript but i will say it first time like in python you can get a lot of power out of this uh we're just having small amount of code so that's that's still oh again okay anybody anybody want to put money down yeah just do it dude 22 bro i mean this doesn't even count this doesn't even count holy crap that's insane and actually this because it's just a break statement you could probably get away with doing this i mean probably not good but i'm cheating because i just fell off that's insane we have machine learning ai everything involved in that at like 22 21 lines of code so yeah oh man shaw was close he said that 25 abbas abdelius of 32 young ipsec guys it's less than we all thought like somebody wrote one i don't think we could do one i mean just pop this in a function you know just oh yeah that's insane i love that dude that's so so cool man like um yeah that's awesome and guys i think this also goes to show you how yeah there you go that's the hack to everything guys one line nice i'm doing it bro i'm doing it one second just for that guy because i got nothing better to do with my life i see a lot of people saying like this is like calling uh the ha cascade ai isn't really ai guys anything you have when you have a classification model that is kind of that comes under ai and trusted take it from a guy who's done a masters in this stuff like you it is a like that is that is what we classify yeah yeah if you wanna if you wanna go see how these are actually generated because we did just download this and just used it but if you want to actually see how you create this like how you can train anything to like like recognize what pepsi cans recognize uh coffee mugs whatever you want then i explained that in the face detection video this is like an extension using smiles but i explained that in face detection and the car and pedestrian tracking of like actually how the algorithm actually how the computer actually learns this like how the hell does the computer take an image and know how does the brain like how does it use its brain to figure out what it is so i i explained that there um but it is ai because this is how computers can learn it's not just random stuff yeah and that's the powerful thing guys like once you have trained models and like a lot of people i think even in firebase there's a bunch of like uh trained models that you just have access to which i'll be dropping some videos on so thumbs up if you if you're excited for that but um yeah like you can pretty much go ahead and use pre guys to train a model from by yourself you need to take a long time yeah you need a massive amount of data that's why things like tesla everything gets better over time because you get more data over time which means the model can get more accurate yeah so like it's not super feasible for us to train our own um if you understand how the algorithm works and then you utilize it that's really all you need to know to innovate we could technically i could technically go and take fake like get faces from the internet a bunch of different faces a bunch of different smiles and find those pictures and trim them all myself get the data set and then run it through some some training software to do it but then even that that's just an extra step of just taking images plugging into this this thing and then going up if you actually want to code up this algorithm that gets pretty deep and nasty i did it i did that at my schooling at georgia tech um it's interesting and fascinating but it's a big headache so like why reinvent the wheel so we're doing that here but if you want to get down in the nittygritty then uh by all means go through it there's a there's a free computer vision course from georgia tech on udacity you can look it up it's called computer vision they talk about all this stuff in complete detail they talk about other object tracking like common filters and uh cnns which are convolutional neural networks which is another way to do like tracking and object detection um but her cascade is just the simplest way that i'm showing you because you just download this one file and then you pop it into opencv and it's all nice and free and easy to use but yeah if you do want to get deep in you don't do like legit ai this is just this is like baby stuff compared to real stuff like even me i haven't done too much i haven't worked at tesla on selfdriving cars unfortunately i wish i have but um you can get some you can get go pretty deep so if you want to check that out then by all means go check out opencv the opencv course and uh feel free to just go ham yeah for those of you who are javascript developers you can use something like tensorflow tensorflow is pretty much a very similar thing to what we used here but it's not cv2 it'll be tensorflow and then you can actually go ahead and get models just like the hard cascade and you pretty much plug them into your tensorflow and do the same thing as what we did today so why challenge everyone on this stream right now to go and do is actually go ahead and like follow along this tutorial build your get it working on yourself but go ahead and swap the um the hard cascade one that you're using and try and detect like an i or something like that that'd be kind of cool yeah yeah yeah there's there's literally an i one like if you just google it the opencv documentation or the gitpo github repo there's the i1 where you can detect eyes as well um we could even do it really quickly why don't we just do it on the fly really quick as a bonus i'm supposed to be done here but let's uh let's do it i did i'm because i actually have because i have it downloaded already the eye because i was going to do that but i was like ah it's not important for small detection but let's do it really quick okay what time is it it's 41 okay i'm gonna how fast can we do this let's do it all right boom i dot xml uh let's get him in that flow state uh eye detector so we're going to want to get is okay so the face we have the face face grayscale smiles smile detector eyes is going to be um eyes will be eye detector dot detect multi scale face gray scale and uh skill factor i don't i didn't tune the eyes so like it might not work but um yeah we'll just we'll see how it goes so eyes equals that yep then we're going to want to draw the smiles and then also we're going to want to draw the eyes and eyes yeah and why don't we just go double this is very sloppy but i mean i just well actually i can just use this because the for loops aren't overlapping so let's just leave it like this yeah and then um the i okay and let's just change this to 255 25 and 255 in eyes grayscale so this should work nice i mean it should let's see if it works guys if it works destroy that thumbs up button because aaron just done that on the fly like oh the eye is not defined i have a typo somewhere oh i was going to say that yeah because you have the eye but we need to splice it um slice it sorry right oh oh um no i mean the face okay that's what it takes oh snap dude eyes look kind of similar sometimes you know you can kind of see yeah let's try to tune it we gotta tune it a little bit let's tune the variables a little bit and see if we can get it working better so that's what that's where these two things come in handy scale factor and mid neighbors so i'm there's probably some ideal number let's just try like i don't know 1.3 and 10 and see what happens okay like some iron man video okay okay not quite not quite let's try 1.1 and 10. oh again that dude so what what what was the phone i just need to i just because i'm asian but if i open my eyes big it works it's not creepy as hell but like big eyes big smile then it can get it it can get it nicely that is awesome the greatest ever let's get this to 1k likes everyone i think we do yeah this this kind of stuff this kind of stuff is what snapchat and instagram use on their filters you know like when you like vomit the rainbow and stuff they're like ah and then when they see it they can locate it and have it like drip down stuff like that so this is actually what's going on behind the scenes when using a snapchat filter like the selfie camera and you have like the crazy filters over your face this is what it's doing behind the scenes it might be using convolutional neural networks instead of hard cascades but this is similar principles yeah they would have a model that's already sitting there that's already ready and it's just the input would be the camera that you're seeing output being that little tongue emoji or like the dog thing whatever you're using yeah nice yep that's it and about what that took four minutes to get the eye up and running so it's the power of python and having pretrained of course if you train yourself it's going to take hours or days or weeks if you have to get your own data it depends where you did if you're taking your own photos with your own phone you gotta it's gonna take forever or you can just what people have done you got some you got some good comments coming in and says aaron you are awesome aaron apparently not at numpy whoever in the comments i don't know who you were but dave's man you saved you saved my ass man or man or woman whoever that was much appreciated i could stop embarrassing myself the greatest ever says that's amazing information i'm gonna squeeze that in when i'm being interviewed that's that's awesome dude that would impress them yeah we'll impress them this is the real smile look look at that it's so funny that's nice we could we could even be like we could even like have a diamond changing like smiling and wideeyed like or unasianified or something you know it could be like smiling and have like another piece of text like unasianified underneath let's do that dude you know what you could do i reckon there's probably some kind of model there which tells you the ethnicity of someone and then you have the sensitivities based on ethnicity oh that would be it'll be hilarious but let's just here let's just look at this code if length of eyes i mean is that racial profiling is that like racist no i mean i mean we've got one we've got one asian we've got one brown asian applied let's just do so literally the greatest never just said unagi unified there we go here let's try this right aaron you're a good teacher i like it nice oh wait uh i think we need to tune this a little bit better to eyes needs to be maybe 20. let's try this and this is way too much let's try 90 and quit this out here [Laughter] i love that that's i think that tune a little bit more let's try uh let's try 30. bro i'm still there i'm supposed to go work out with my friend but that's what i supposed to leave 20 minutes ago but this the numpy thing you know i really put a cog but whatever oh man oh wow tyler shaw says that's the most amazing live video of programming ever we love that dude that's insane that's furious with my eyes bro and look at the light on my face better so funny i'm having so much fun with this man i wish i could uh send it to you but yeah i do got to get going no oh dude you've crushed that and you we didn't even plan on getting the eyes done so we got the eyes in there i mean yeah that's the power of pretrained models they also have like dog and cat let me just pull up the open cv real quick where did my chrome go oh it's in full screen so if you just go to opencv um har github then you go here hard cascades they have all these pretrained opencv is like open source so it's free and low weight uh the algorithms and stuff they use at facebook and snapchat like in instagram for real like they're trained even better than these are that's why they're so much more accurate these are just kind of like halfway there but they're also like pretty old but here here's the i um i tree eyeglasses i don't even know what this is uh this is the frontal face default we're using for frontal face there's other frontal faces see how much is frontal cat face uh full body this is what used for the pedestrian tracking um for cars i had to download a har xml file from somebody else it wasn't provided by opencv but you can go you can find other trained models too like is once an xml file is created from any object section then you can just download and use it for yourself so like here uh like this is literally what i typed in there har car has hard cascade xml fire i went here i clicked on it and then i um i literally just downloaded the xml file uh from some it's somewhere linked in here but you can find the xml file once you find it so like literally it could be anything it could be like like what else what else besides car is cool to identify um um our cascade file uh i mean that one might not exist but i mean here soccer ball cascade so use yeah there soccer ball cascade.xml and then so this could probably detect soccer balls in a video without a video or something like that so like it's generic object detection you can you can detect any object um any arbitrary pattern yeah in a in a frame so that's the power of that using using what aaron just showed you that you can easily detect like some balls you know like are your your balls round like a soccer ball or are they are they excited like a rugby or football yeah but here there's hard cascades there's also some here there's hog cascades so hog stands for hog is like another way to do it it's like optimization for horror or some something i forget what it stands for but it's another augmentation algorithm thing that you can use um but here we have all these and then there's cats and uh or if you go into hog what is in here pedestrians okay but yeah guys that's that's it smile detection and asian detection asian asian person detection in um in python awesome guys if you guys enjoyed that let's give aaron a massive thank you because i think he crushed it today with that and even i learned so much with this uh tutorial today so like i thought it was cool thank you aaron that was amazing dude welcome sunny thanks for streaming for me because my computer is a computer is a rock sorab singh says aaron and sunny looking for some more in the future cheers yeah we will definitely be doing more that was fun definitely yeah i am planning on doing some tensorflow because i've kind of exhausted this opencv stuff we got three streams on it but i do want to get into tensorflow maybe even pi torch yeah um like you mentioned so maybe in the next few weeks stay tuned for that i might have like a tensorflow like crash course stream or something like that yeah they will actually train a model ourself with uh with somebody else's picture data i'm not gonna do it myself yeah but i'll find some online data set of a bunch of images and we can maybe train something and you can watch the neural net get created and then we could do something like this again that would be dope dude that would be awesome yeah i think um also worth mentioning guys for anyone who joined and maybe missed this in the beginning um aaron what what's in what's what's lingering in the description right now uh yeah so yeah yeah if you guys like coding in python if you enjoyed this and want to do this for a living then that's what we do a clever programmer so we teach people how to take their coding skills and make money from it as uh web developers with javascript as python developers python freelancers whatever it is you want like automating stuff with python or whatever then go check the link in the description there's a free training that teaches you how to do that and then there's also a fullblown course that you can join if you want to invest some money into that in time and actually pursue becoming a python developer as your career choice if not then feel free to enjoy your free content that's what this is here for you know make asian stupid stupid ass apps like this yes [Laughter] my mom would smack me yo respect your culture okay i love you mom you eaten the whole race yes yes you get a plus a minus means death yes yes and then i dropped out of school and she killed me [Laughter] that's that's truly unanimous then ah yeah that's the truth isn't it yeah we're all dropouts here aren't we that's awesome dude i think if there's aaron got any last few things you want to add oh we also got a donation thank you saurabh singh just dropped a nice little donation there appreciate that dude and lots of wicked comments coming in yeah nice i think the last thing with hilarious would be uh actually get rid of the boxes what was that and then um it would be hilarious to get rid of the boxes and just have like the full clean app let's do this last demo because i'm i'm all hyped what's that hey let me go ahead and try it on that there we go i think i think it's okay when you when you're you're the same race it's all good have if i'd uh anyways okay i'm going to stop goofing around because now we're just wasting time all right yeah so if you guys want to check out the the free training or the course then it's in the description um if not then keep watching our daily streams i think we've been going for what like four weeks now straight i think it's longer dude i think we've gone over a month and a half now yeah how have you not run out of like project ideas dude we have so many project ideas now still to come like tomorrow's a big build another massive build coming up so we'll be amazing what's that yeah yeah we have what's up tomorrow stay tuned guys go ahead and literally set a reminder on your phone right now for that and we're doing that was it in i think it's 10 9 15 est and 6 15 bst that's my time yeah uh yeah so awesome guys hope you guys enjoyed that and with that said uh make sure if you're not following us already go ahead and check us out we're always posting some content so you've got me and aaron over there we'd love to have a chat with you guys but yeah i think i think aaron needs to go and hit uh hit a workout yeah eat some food more coffee totally sleep deprived but yeah guys thanks for joining me in sunny and coating this up there's a lot of fun and uh we'll do it again featuring some time right hulk that's it dude we'll do it again samurai yeah yeah yeah what time alright guys peace out peace out guys thank you bye