What's up guys. This is Qazi from cleverprogrammer.com. Today. I want to talk about the react native authentication workflow that I implemented in my new app that we're building. I took a poll a few days ago and I asked you guys, which app did you guys want to see us build next? And at the end, Instagram destroyed everything else. So I started working with my team and we started whipping up the Instagram clone. First of all, get excited. Cause that's going to be the next fricking build. The thing that's really exciting to me has been this authentication workflow. I was trying to figure out how to make this authentication really fricking clean and how can we make it really good? So there were multiple ways we could have. So, for example, we conditionally render that home screen based on if you're logged in or not conditionally rendering, basically, you know, what does that mean? It's basically like I will check on the home screen if the user is logged in and then show him all the, or her, all this stuff. If they're not logged in, then either say, please log in or. Navigate them back to the login screen. And that's, to my knowledge, a pretty normal way of doing it. A lot of developers, I do do it that way. Right. Then this is what we started realizing. If we're going to do it, this conditional rendering, where then we're going to have to manually do it and every single screen. So wherever we want it to essentially show stuff who would need this conditional rendering. And we're like, man, this seems like it's not following the dry principle. Right? Like, don't repeat yourself, don't repeat yourselves. So I thought, how could we make this authentication work flow better? And so I started scouring the internet. And, um, I wasn't able to really find super helpful stuff. A lot of people would just doing conditional rendering on each of the screens. And then nobody was really showing how to wrap the entire app inside of authentication. And then I came across this amazing article and he was talking about how you can implement authentication workflow, where essentially at the global level, where you put your route navigation in react native, at that point, you want to wrap it right? And you want to add a Firebase authentication listener to it at the global level. And then what he was doing, he was building a sign in stack and then he was building essentially a signed out stack. And I was like, oh, this is genius. So we took that idea and we're like, that is such a clean way of doing it. Essentially. It's going to be. If you're logged in, you will be given the sign and stock at the global level, meaning that like your stack won't even contain the login and registered screen. So there's a possible for you to have access to them. Just to describe to you what signin stack is, right? Scion stack has access to all the screens the users should have when they're signing. The signed out stack has two screens, the login screen, and you register screen. So you create these two. Because the other way of doing the conditional rendering or some security issues too, or some weird bugs can happen. Right. But at this level, they won't even have access into our screen stack who these screens at all. And I thought this was such a genius way of doing it. Another benefit to this was I was running into this other problem, right? The older way of doing it, how we were doing it earlier, if you log in the problem was that if you refresh your app, it would like start you back from the login. Right. And so the other solutions would be, oh, because you just use local storage. Oh yeah. React native just has async storage. It just, is this, just use that It's not necessarily, if you do it the right way, the right way is so fricking clean that none of this crap is necessary at all. Firebase has this really nice listener. You know, you basically do like Firebase.auth() and then you want to do .onAuthStateChanged(). And this is a listener that Firebase gives you and it's detecting any time your authentication changes, meaning anytime the user logs in or signs out and it's listening. So if we wrap the entire app at a global level in this listener, it'll always be listening no matter what screen they're on. And then here's what. If a user is locked in, give me the sign. Did stack. Otherwise give me the signed out stack. It is so freaking beautiful. It was so fun writing this if, and then statement, because it's literally like you created two universes. If you're signed in stack and you're signed out stack create these whole two worlds. And depending on if this or that you put them in a whole new world, right. If the user is signed in, put them in this signed. And that's all they have access to. Or if they're side out, put them into science, out stack world, and that's a whole universe in itself that they're in and then they can't get out of it. Right. So, so secure. And then here's the other benefits of it. And this is what I love the most. So usually in react native, when you do navigation dot, navigate, or whatever, you'd navigate to a screen, you're able to like swipe back. To the previous screen, but that's not what I wanted my app. I don't want my app to have that experience. Right. It wouldn't be so annoying if you actually logged into Instagram or you swipe left. And instead of taking you to like, you know, stories or something, it took you back to the login. Like how would that make sense? You just logged in. It shouldn't even let you go back to it. And so with this new way of doing it, you don't even have access to the login or register screen anymore. So as soon as you log in, boom, now you're just in this whole new. And if you try to swipe back, you can't experience a, so much smoother. These are the security so much smoother, man. It is so freaking nice, but that was such a clean thing. I'm really excited about showing guys this build when we drop it soon. I think that for a lot of people they'll have the super clean. Of wrapping their entire up in this type of authentication. And I really hope it provides a lot of you guys with a lot of value. So that's it guys hope you enjoyed this video smash that like button scrapped to this channel. You know, if you want to watch it incredible build. I did Uber eats clones while you're waiting, but other than that, love your face and I'll see you then.