what's the place developers go to when they have a problem and they need other people to sympathize you thought stack overflow think again we go to reddit that's a place where we go and console with others learn about life and a lot of us use reddit on a regular basis now in this video we're going to be building reddit by ourselves with our own bare hands and building it from scratch this reddit is going to be probably the best reddit that exists on the internet first of all the front end is absolutely immaculate it's beautiful and you also have a lot of functionality for example you can log in with google authentication inside of this reddit you'll be able to create a new post you'll be able to see all the posts that are already there you'll be able to comment on a post you'll be able to upvote or down vote a post all right and all of this we're also going to be using a really nice tech stack so the tech stack for this build is going to be next.js we're going to be using tailwind css for styling and we're going to be actually using super bass for the back end this was something that was actually really interesting to me this tech stack especially like using super bass for the back end that's something i wanted to do for a while and in this video we'll get to do that and build it now if you're ready to start coding this bad boy up make sure to smash that like button so this video just goes out to as many people as possible by the way if you don't know me i'm rafa qazi the ceo and founder of clever programmer i've been coding for nearly a decade and i've helped millions of people learn how to code with that said let's jump right into it all right let's go ahead and demo this app now so i'm gonna go ahead and hit sign in with google i'm gonna choose my email and once i'm in look at this how beautiful this is i have my header when i hover over all of these icons in my header they look absolutely gorgeous i can go into the search and type and then when i scroll down here i have all of my posts and i can go into any of them or if i want i can actually create a new post as well so let's say we're going to dispose this is a new post you know our free javascript course so let's go into this post right here and you can see we even have a thread comments so i could actually say this is awesome okay let's hit comment you get a nice little loading screen and now this is awesome is there so this is actually being stored in our back end and then showing up on our front end and it's super fast as you can see so now let's go ahead and go back to the home page or you can just hit the reddit logo that will bring you back and here i'm gonna go ahead and let's say i really like a post right one of these posts right here how to build a reddit clone with nexus i can go ahead and upvote it and uh you saw that it upvoted it and let's say replit is cool let's upvote it or maybe best dev community let's down vote and boom look at that and there's something really freaking cool that's happening that i really want to show you and we're using something called swr hooks in react and they are so powerful than just the regular way you fetch data and i'll show you them if you've never experienced them before but what's amazing is like we're pulling all of this from supabase and we're not using its realtime functionality so think about it how come when i hit up after a second or two it automatically turns it to a three how's that happening it's like almost doing it real time however it's a postgres database on superbase and we're almost getting this realtime experience of when i down vote or upvote things change things change dynamically so there's some magic that we're doing on client side that i'm really excited for you to see and how we're doing like revalidation and caching and it's all happening with one line of code so it's nothing actually complicated either and just so you can have a roadmap for this build and how we're gonna go through this is the header and banner this stuff we make so much at clever programmer and if you ever watch any of my videos that we're not going to be making the header together the banner or this guy or this guy we're going to be doing the interesting parts together in this build so i'm going to be just giving you giving away the header i'm going to be giving you the about you know component the banner component i'll just be giving away all of these components to you and then we're going to actually start from the more interesting parts of getting this set up and then getting the database to start working and then being able to add comments and liking posts and disliking posts and authenticating and all of that good stuff okay so we're going to start from there now if you want to actually follow along and you want access to the code and to build on top of it you're going to need to fork this reple and it's going to be at the link join.replay.com cp dash reddit okay so make sure you click that once you go to that link it'll bring you to this page essentially which is going to be a reddit starter right here okay so i'm going to be sending you to the reddit starter why because the registrar will have the header component the banner component the about js component yeah it'll essentially have all of the components that you need and all of the styling it'll have nexjs template already ready to go it'll also have tailwind temp ready to go and it'll have typescript enabled even though we won't really be using typescript but like all of that will come out of the box and be ready to go if we just fork this and build on top of this that's what's really nice about repple and replit because it allows you to do that now if you want to do this why i say fork this in all caps is make sure you fork it otherwise you won't be able to run your own code or make your own changes so just make sure you go ahead and say fork rupple and once you fork it you can actually then get started coating on it now that you fork this i am going to simply walk you through what you're basically looking at here here's what i want you to do on the right hand side choose shell and all i want you to do right now is just do yarn dev so this is going to be really cool because a bunch of the app is already up and running and then hit that button right there so it opens your app up in a whole new tab so i'm going to hit that and let's wait for this to render and reload there we go so this should already be up and running for you just like i said we've already given you the header we have given you the banner we've given you the banners like this whole thing we're giving you this about component and then this create a new post component okay so if we go to our app right now and basically what i'm going to do is i'm just going to close this for now and i just opened up a new chrome tab here like literally a new chrome window so i could just put that here so i could see my app the entire time i'm working on it okay and let's just take a look at what you've been provided with already okay so on the left hand side i have components and in components you're given a couple of components so for example you're given a header component and that's that guy right there okay you're given a feed component which essentially will show this gives you the ability to actually create a new post and when we retrieve the post from our database in the feed is where all of the other posts will also show up okay so that's what's this one is called the feed the community component page that you have this has a couple of components like the about component so the about component is this guy right over here on the right hand side right with the join button at the bottom and then of course in the community is also the banner which is that guy right there okay so now just to play around with these and just to get comfortable in this new project i'm going to show you where you can go and change things so in pages just go into index.tsx and by the way don't let tsx freak you out it's this app is typescript enabled however you can literally just write regular javascript code and it works totally fine so we're not really going to be using it like a typescript file we're essentially just going to be using javascript code in here okay but i'll explain why we chose a typescript template as well so give me one second but if you're in here you have header just go ahead and comment it out okay or just delete it and watch what happens if i delete header just so you can get a feel for the app look at that that is gone completely okay now bring it back and it's placed there beautifully okay when you hover it highlights all of that functionality if you're like hey what's the banner exactly we'll just comment it out or delete it and watch what happens the whole banner is gone okay if you're like hey what's this create post component i imagine you you might have a feeling that it's this just go ahead and test it out delete this and watch what happens and when i delete it it's gone all right so those are the components if i remove about component and i go full screen you'll see this about component will vanish okay let's hit command z and bring that back or control z for on windows to undo and there we go our about component is back so that's a little bit about how the app is structured right now we've given you some of the front end that way we can get to the more interesting parts of the code and i just want to familiarize you with everything you have so you have the down vote icon the upvote icon so that's going to be in the comment why it's in the comment is because it's being used in a lot of different pages and places so you'll use upvote and download pretty much throughout the entire app whereas the banner is really only used on the front page whoops okay didn't mean to move community we just moved community back in these are really the four folders but really they're like think of it like three or four components that we've given you so that's already there in assets you have some icons and some loading animations so those are also handed over to you and let me see the other things that you have to know about are just a few other things so for example in styles for tailwind css we've given you this we've made all of the text white for you already because every place you're going to type we need you to type white text so boom like that that's white text so that's already white we have set up tailwind tailwind is already installed as well so if you actually look inside of your package.json it already has all the tailwind stuff you need like tailwind css post css and the auto prefixer okay so let's go back so tailwind is installed we have the tailwind config file for you ready to go the post css file ready to go and then typescript is enabled right so this is the ts config and typescript is ready to go so if you wanted to code it up in typescript you can if you don't want to that's totally okay again like i told you we're not really using a lot of the typescript functionality which is typecasting or type checking and all of that but here's where it could be helpful so let's go to index.tsx so in index.tsx page right if you can change it to essentially index.js and your code should pretty much still run fine but the cool thing about typescript that i really like so here's just one typescript thing that you have to know you might be wondering hey what's this home component like why is it why am i why i have to write this this is weird this is the same thing as writing this but in typescript we're just saying that the type of this component is this is a next page and so we can actually import that and say that here so if somebody looks at it who's never really written typescript next code or whatever they could look at it and go oh the type of home is not a regular function home is a next page component like this is something special so they would know right away so it makes your life easier so yeah you can just leave that here you don't really need to remove that okay and then the other benefit of typescript is when you have errors and you're defining something that doesn't really exist it will catch it for you ahead of time what that basically means is you won't have to really worry about running your code and then waiting for the command line to crash and then you finding out what the error is typescript oftentimes will test everything for you already and tell you the errors before runtime that way you can catch the errors a lot faster and then debug them a lot faster so that's another thing that i really like about typescript so that's why we've enabled it in this project okay so that's the overall project those are all the things that you need to know before we continue okay and by this point you should have this much of reddit up and running already which is pretty exciting right because you have a bunch of stuff functioning already next up what we're going to be working on is building out our post component and building out a feed component that can show all of our posts so i'm excited to work with you on that alright so the component now we're gonna work on is our post component and let me tell you what posts will actually look like so this is the final version of the app okay let's actually open it up right here and i'll close it from this okay so this is currently what the post component looks like okay this one right here this is going to be our post js component oops let's make a little error and we'll say post js and this component has a couple of different parts like for example we have our votes we have the info part about the author and everything okay and then we have our actions right here actions right actions this is going to be the info and then this part is like vote so those are going to be kind those are going to be like the sub components so think of these each like a component actions as a component votes as a sub component okay so those are gonna be the sub components of like post now we're gonna make these ones though the ones i'm gonna make myself a little bit smaller so i don't get in the way of anything all right so we're gonna basically make the post component without info actions and vote first so we're gonna not have this first and then we're gonna go ahead and add the sub components and it's gonna look just like this it's gonna look super nice okay so let's get started on that so first things first what i need to do is in my common i need to have a new file and this file over here is going to be called post dot js okay and i'll put myself bottom for now all right so post.js now inside of this file we're gonna start making this post component so let's go ahead and go const post and for now we'll just say a return an h1 that says post export default post and then we need this to show up so the question is where do we have it show up now what we want to do is inside of our feed we want to create a new file this will be index.js and this will be the feed file okay you'll be able to import it by just saying you know slash feed so this is going to be the main file basically and how you should read this so for example like if you're in header right and you're like in header and you're like yeah i see these four components what the hell's going on the way i read this is i go this is actually the header component this is the main header imagine this says header.js this is the actual header component and then these are actually the sub components that are required to finish building this header okay that's really what's happening and i promise you if you go in index you'll see that all of those are being somehow or another used all right so inside of feed this is the actual feed component this is the main component this is a subcomponent of feed and you could probably tell that already right because this is just one part of the feed but another part of the feed is going to be all the other posts that are going to be underneath this for example if i go to the final working version of the app and let's hit refresh boom these this is the feed right all of these other posts okay so inside of my index of my feed i need to just make sure that create post and everything is showing up and i want to make sure that my post is showing up the post component i just made so the post component is inside of common why is it inside of comment because there's going to be multiple pages where that post component is shown for example if i go to the final version of the app the post component is showing up here but when i click and go completely inside the post component is also showing up over here so that's why it's we call it uh we put it in common so let's go ahead and import our post component from common post and then the next thing we're going to do is going to be the feed component and we're just going to go ahead and say return post okay so now feed should show essentially one post and now we want to make sure that the feed is showing up on our home page so let's go to pages let's go to indexes.tsx or main main and right underneath create post i want feed to show up it's going to error out obviously because we haven't imported it yet so we're going to say import feed from and we're going to say components slash feed that is it you don't have to say you don't have to even say slash index.js okay that's the cool part about naming it like this we're just getting feed from this right here okay so it reads reads really nicely too let's refresh okay maybe we forgot to export this is a really helpful error message that is showing up here and it says it's possible that you might have mixed up default and named imports or you likely forgot to export your component and that's actually what happened so that's very nice error message so let's go back to our feed index.js and let's go ahead and say export default feed let's refresh and see it now and there we go our post component is showing up now we just got to go ahead and knock it out so i'm going to command click into the post component and if it's ever being buggy or anything you can just kill this right over here and uh you can also actually in here right if you're if it ever dies or crashes you could kill it in the shell and then just like npm dev it again or yarndevit again and it'll start okay cool so now let's go inside of our post component inside of common right we have our post component and we'll actually start building out our post component now so my post component needs a couple of things first of all we need to wrap it in a parent div so then we can actually add multiple now for h1 really h1 is gonna be my where my title for the post is gonna go so let's go ahead and you know how to build that let's grab that title let's go back and i'm gonna boom how to build a reddit clone with next.js okay so that's gonna be the title part so we're good there let me make this a little bit bigger and i'll make this a little bit smaller great so we're good with this first title okay so this is gonna be our title and i'll let's give it a class name afterwards okay so title then like the next thing we're going to have is our content so this is where our content is going to go so this is let's see if we have some content here we do this pa i'm going to copy this content and i'm going to paste it there we go that's our content and then we need yeah i mean that's pretty much in terms of like what it will be without any of our other components sub components like the info component i was talking about earlier the action component actions component of the vote component this is pretty much all it's really going to be like now to design it we need to make it look better right so what we need to do is we need to actually add a wrapper around this entire thing okay and we need to actually create a styling for post so let's go ahead and create a styling for post so let's turn it into a div and we'll say div right here okay and the class name we'll give it will be style.post okay and now what we'll have to do is we'll have to actually create that style so we're going to say con style okay and then in here i'm going to create a style for post and so the styling we're going to have for this is going to we're going to make it flex enabled in column will give it a little space and a cursor pointer when you hover over it all right so if i full screen this now starting to look a lot more like an actual post okay now the next thing we need to do is i need to actually add this in a wrapper so i'm going to go ahead and say style.wrapper and let's end this div right here okay and basically what i'm going to do and by the way if it ever is slowing down on you or crashing on you or whatever just wait all right or if you're ever about to refresh and this thing pops up that says changes uh you made may not be saved in that case either wait for that or just command a command c ctrl a ctrl c if you're on windows copy everything that you have in this file then refresh now if you lose any data or anything goes missing you can just command a command v over that meaning like you could just select everything and paste whatever you had copied earlier that way you don't like lose anything so just keep copying once in a while it's a good idea that way you have everything saved okay so i'm gonna go here and i just need to add a wrapper now and create the styling for it so let's go ahead and create the styling for my wrapper and we're going to make it flex enabled we're going to add a little spacing horizontally we're going to make it rounded okay so let's take a look what it looks like right now we're not able to really see it too much let's give a background color okay and we're going to give a background color of like that grayish color so let's go ahead and do that be okay there we go so now we have the little grayish color in the back the next thing i'm gonna do here is we're gonna add a padding to this okay so the padding makes it look a little bit better and then outside of the padding what i want to do is give it a border and then we're going to give it a specific border color and it's going to be three four three five three six for the border color okay so now that's done okay this is how our posts should look like so that part is done now we need to style the title so our title should be highlighted and look different than it is right now so we need to create styling for our title i want to say style dot or sorry class name and we're going to say style.title or you can say post title okay and then we're going to go here i'm going to say post title and for post title what i want to do is go hey give me make sure the text is large so you should see the text become a lot bigger now i want to go font medium and then for the text color i want it to be the specific color over here it says dad love that okay so now our text is there it's popping out a little bit it's a little bit bigger okay and for post content we're gonna give it pretty similar styling to this so i'm gonna say post content for text dom and it says small font will go light and then for color we're going to actually give it the same color except here's what we're going to do i'm going to say slash 80 on this now let's go ahead and add that for post content so we're going to say class name style top post content we'll add that style style oh yeah just kill that bracket because i added a bracket there by mistake and there we go okay so now posts are looking very good but they don't look like posts completely right now the reason for that is because you don't have the vote buttons right you don't have the action buttons at the bottom that show how many comments there are and you don't have this info this was posted by david blah blah so now we're gonna go ahead and make the sub components that are required for this now we're going to go ahead and make the post sub components action info and vote let's start off with vote so i'm going to go ahead inside of my feed folder and inside of the feed we're going to create a new file and it's going to be called vote.js now obviously since this is going to be that i'm going to say vote const and we're going to say return and i'll make an empty let's just make a div here because we know we're going to need a div at some point and then i'm going to go here and just say vote and say export default vote go back to index here import it in here so i'm going to say import vote from vote and then just wrap it in an empty div for now okay and actually maybe instead of feed we should actually give vote to post not feed be just fine for now so let's go inside of our post component inside of common and let's give this guy a vote so let's go import vote from and we'll go out we'll go into feed and we'll go and grab vote import vote from feed vote perfect and then we'll see we'll have vote show up right above the post so let's go right here and i'll go ahead and say vote just leave it like this for now okay so this is what you should be seeing on your screen you should have the word vote pop up let me leave the code like that here for now zoom out just a little bit so it looks more normal perfect now let's go back to vote inside of feed and let's remove this h1 we're gonna replace this with a button instead and in this button we're actually going to put an upvote icon so i'm going to say not that but up vote icon all right so that means we have to import upvote icon from common upvote icon.js so i'm going to say from it will backup we'll go inside of comment and we'll say upvote icon just like that okay so now we have access to it okay and now it's saying hey inside of somewhere you likely forgot to hit export it was possible in our upvote ah okay so it's a name component so see the error also says you might have mixed up defaulted named imports so this is a named import and not a default import what basically means is you have to just put these squigglies around it you're destructuring it from it there we go and now you can actually see the upvote icon is showing up right over here now all we need is another button that just has a down vote icon so i'm going to go copy this let's paste it and let's replace this with down right that's down vote icon let's copy this line here let's paste it and let's change this word as well to down okay and uh let's rename this to downvote icon as well and there you have it we now have upvote icon and we have a downvote icon now the next thing we need is if we go to the final version of the app you can see that each vote that you see here has a number in between the buttons so in between the buttons i need to have my number so i'm going to say i'm going to create a p tag here this p tag will be the number of votes so for now we'll just say 10 minus five let's just write some javascript here and we'll say 10 minus five votes okay uh and this why i'm writing this here and leaving it like this is um because in future this will be upvotes minus down votes and you'll have that number now the five is looking a little bit crooked doesn't look right so we're gonna go ahead and create a styling for for this so let's go ahead and say con style and this style is going to be called votes just like this and for this styling what i'm going to say is hey give me padding from the top so let's see that beautiful make the text extra small okay and uh let's add the styling so we can actually see it as it's happening real time so i'm going to say class name styles dot style dot votes so you can see the text just turned like super small let's make the font bold and the text white great now the next styling we're going to need is a wrapper because right now these things aren't like aligned the right way and they should be in a flex box in a flex column because they're going up and down like this right that's where you need a column and uh they should also everything should also be in the center so we're going to create a wrapper we're going to wrap create a wrapper here so i'm going to say class name style.wrapper and for the wrapper i'm going to make it flex column and let's go item center and there you have it now the 5 shows up right in the middle exactly like how we want it to show up okay and we can even make it like a add a little bit more dummy data and we could say up votes equals 10 cons down votes equals five and uh we could just say up upvotes minus down down votes okay and there you go so posts can have negative votes as well so that's why we're not doing a negative check it's totally fine to have negative votes so there you go so now our vote sub component is completely done now we're gonna work on our next sub component which is gonna be the action sub component so let's go ahead and do that so first step is gonna be what you tell me okay let's do this together so what's the first step going to be if i have this feed over here yes inside of this folder i need to create a new file right and that file is going to be called actions.js what's the first thing i'm going to do here you know i want you to start getting some practice mentally as you do this with me the first thing we're gonna do here well we're gonna write the component so i'm gonna say const actions and then we'll just return something so we'll make a div we'll just add an h1 in there that says actions and then we'll hit export default actions now the next thing we need to do is make sure it shows up inside of our index.js okay aka our feed compo or sorry in our post component actually we need to make sure it's showing up in our post component so let's go to our post component in common i'll just open up a new tab here and we need to just import it so i'll copy this paste change this to actions and change this to actions so now we're importing it and now where will actions go is is my question to you will actions go at the top in the middle at the bottom right actions just so you're you're clear actions are these guys right over here the comments all of that so where will they go exactly they're going to go at the bottom so if they're going to go at the bottom then pretty much all the way at the bottom right here is where we need to add our actions as a selfclosing tag okay and our actions are actually showing up so that is wonderful let's go back to our actions and finish out building this okay first let's take a look at actions and just see and we can understand right so we have these three things right here now first things i see is to me this is a flex this is not a flex column right this is a straight up flex row so i see that we have flexbox enabled the next thing i see is i'm sure we're gonna need to work with the text color so we're probably gonna have to do something with the text color at some point and that's the next thing i notice the other thing i notice is the font size is kind of either regular or small so that's another thing we have three icons here so there's probably going to be some importing icon action happening okay and uh you know the left icon is called the annotation icon then we have the gift icon and then we have that share looking icon so those are going to be the three icons that we're going to be using here and so i feel like we should have a pretty good grasp of what's happening now this is usually pulling data dynamically but for now ours will just be pulling data in a dummy way okay so let's go back now that we have the lay of the land and what we're doing i'm going to start off with importing the icons first just because i know that that's something we're going to have to do so let's start off with that all right so let's go over here and i'm going to import all these icons we're going to say import annotation icon close this tab right here icon gift icon and share icon and we will get this from hero icons react dash outline now if we don't have hero icons installed here's what i want you to do just copy from here from the at sign to the word react where it ends copy it let's go to our shell and simply let's do yarn add and we'll paste that at hero icons slash react and that should install those icons so that we have access to them okay now let's continue working on our app while that's installing so the next thing i have to do is actually just get those icons to show up all right so let's put an annotation icon right here so i'll say annotation icon okay uh the next icon that i need to show is gift icon and then the next icon that i need to show is share icon all right let's see where our install is at our installing install is almost completed it's 281 out of 283 it's like more than 99.9 completed okay and uh now if we go back to our app yay look at that our icons are showing up let's go baby now the our icons are showing up and that's great but what's the problem here the problem that we're actually having here is these icons are massive so we need to actually make sure that these icons are short small so we can see them which is why we'll need styling so let's style the icons i'm going to give this icon a style of icon and we'll just do the same thing for all the other ones and then let's create the styling so we'll say con style and i'll say icon and the icon styling i want is height is four and width is four so just hey chill them out make them small so they're not massive there we go so our icons are now added perfect very good now remember i said we need them to be in some kind of flex well we need a icon container that can do that so let's create another div here and this div will serve as so we'll call this div and we'll say class name is style dot icon container okay and i'll just tab these bad boys right here and we'll say div class sorry we'll just end this okay so now icon container has three icons and we're just going to style our icon container with obviously a flex so flex and alone should help it a lot now we want to make sure everything is nicely and center aligned and it looks normal very good we want to give everything some breathing room on the xaxis so let's give it a little bit of spacing in between and remember what we said text color is going gonna be a thing right so let's give it a text color of eight one eight three eight four so it's gonna be like this grayish darkish color okay what we're gonna do is put actually every single icon in an icon container instead of the whole thing in an icon container so let's go ahead and do that put this in an icon container okay let's put that guy in an icon container and this guy in a nikon container and then let's just go ahead and close out these divs boom okay so now all of them are an icon container okay and now what we want to do is what this will allow us to do is now i can actually add text over here okay and in the span tag i can just put say hey 19 comments okay so now you'll see it'll say 19 comments let's add a span tag here for all of them so the next one will say just word awards words and then this one at the end here will simply say shares or share there we go all right and now we're going to add a wrapper around everything and that will be flex enabled as well so let's go ahead and do that so i'm going to give it a class name style dot wrapper and up here i'm going to say wrapper let's make it flex enabled so that alone will solve a lot of problems we'll center everything so now things are looking really good as you can see right boom and uh after item center i'm going to say space x sorry spacex four so let's give a quite a bit of space in between each single item and then we're gonna give a padding of two perfect and now for all of these span text that we have let's make them like really small text okay so we can actually just go ahead and say class name and for these we can just inline style this so i can say text s that's just saying hey make the text extra small right and then i can just grab that we can do that here as well and do that here as well so now all of those texts will just be extra small and there we have it awesome now if i look at this our component is looking beautiful right there's only really just one part left let's take a look at like look at that that is looking gorgeous that component right there there's only one part left which is the author part if i go to our app right here you can see it says posted by david riccosi all right so that info is the part that we're now going to actually create and finish so i'm going to create a new component it's going to be called info.js and if we try to understand info.js and i look at this here i have a few things right posted by who the date so when we're creating the raw dummy data for this that should honestly be pretty simple and then of course we have the author here with the logo of the author so let's just go here and let's fully try to understand this so here's the component info here are the elements we have so that way we don't get surprised we need a image okay this is going to be the logo so we know we're gonna be using an image component in here then we have text that's maybe bold maybe i think it's bold okay or maybe just really white text and then we have just more text that says the name of the person who posted it and then we have a date but from a frontend perspective right now with no data like it's just this is just text and this is just text too so this part over here is should be really straightforward to work on so let's go ahead and do that i'm going to say const info also return will create a div and inside of this div i'm going to go ahead and just say h1 hello or info rather and we'll say export default info now info should go kind of at the top so if i go to our post component we're gonna put info a little bit higher than where we put actions in our case we'll put it right above this h1 here so i'm going to say info close it and then let's import it here so let's go info let's go info and let's go back to our app and there we go info is now showing up now inside of info smaller okay now let's go inside of info so i'm going to close this and info is open as a tab here let's just bring in the logo right away so i'm gonna use a image tag okay and let's make it self closing source is gonna be the source that i'm actually gonna paste you can actually just pause the screen and try to copy it or just post a different logo you don't need to post my you know you don't need to post clever programmer logo and then all we need to do is we just need to style this so that will actually make it smaller so let's go ahead and create a styling for this now i'll say con style and then we'll say styling for our profile pic and we'll just make height 4 h4 and width 4 and then we're going to make it rounded full so it's going to be a rounded photo and let's give it the class name as well so let's go class name and i'll say style.profile pic okay and now it should become tiny and already look at like our post component is looking so beautiful already so that's exciting now the next thing we need after this let's go to our main app and let's see what uh what what do we need after is the name the author name so we just say r slash whatever the author name is so let's go ahead and do that so i got my image part done that's very good now i'm gonna get outside of my image part okay and the next thing i need is the author name so i'm going to say div and inside of this div we'll put our author name so actually i can probably just put that on one line and we can say r clever programmer in this case okay there we go we got our slash clever programmer what's the next thing that we need well the next thing that we need is the date the title and then the date okay so i'm gonna have a div that's just gonna have that dot in so if you wanna do this dot i believe it's option eight on mac and then on windows i'm not sure how to do the dots just copy the dot from somewhere or google it and then copy it from there and then we're gonna have a another and then but basically all i want to basically say here is i'm going to have a span tag and i'm going to say posted bot rafikaze okay or clever programmer or whatever say posted by clever programmer now let's just wrap this whole thing in a flex like we can see it the right way going in a row rather than how it is right now so yeah so let's go ahead and put a wrapper around it so let's go and say class name style.wrapper and i'll go here and for the wrapper what i want is something simple i wanna of course just make it flex enabled for now there we go and uh let's center align everything okay let's give some proper spacing between everything and make the text size extra small there okay and there we go all right and then let's go ahead and give it a grayish color so i'm gonna go ahead here and say eight one eight three eight four okay now one bug you might have noticed already is why how come i changed the color of this to gray but no it didn't change actually what's happening is if we go to our tailwind or global style file which is our tillman.css that has where it says hey make the color white for all text so we should just go ahead and remove that and once you remove it you're going to notice that this is going to turn gray which actually it should because this is like too bright white this stuff will turn gray and then this stuff will turn grey like i was supposed to the vote icons will also turn gray so let's get rid of this here let's hit save and there you go now things are how they're supposed to be and how they're supposed to look okay so everything just chilled out a little bit because i feel like it was too strong white and that didn't look good as a design so i'm glad that we've solved that problem so let's go back to info we've added our wrapper and we got our posted by author now the the only thing left is the date so we'll make another span tag because we need everything to be in the same line and this will just be a dot okay we'll put that and then the thing that we need after that is the date okay so we're gonna create another span tag and this will just be june 15 or yeah june 15th something like that three letters of the month and then the day and there you go so let's go back to ours yep like july 13th june 15th uh and it was my birthday yesterday july 14th actually let's just put that as the date there we go july 14. all right so now the post component is looking very very good we just have to make sure that we have some styling here handled and let's just create certain containers so we make sure that the styling doesn't get out of whack so for this image let's make a container okay so we're going to go ahead and say let's put it wrap it up in a div and i'll say class name it'll be style up profile pick container okay and then i'll simply say profile pic container all right and we will say here make it flex item center and then we'll give it some space between so there's some breathing room okay that should be that profile pick container great that matches so now our image is in a nice little container so that part is done and we're good with that the next thing that we need to make sure that we're good on is for the clever programmer that needs to be white that needs to have a certain styling so let's put a class name and we'll just say style.tag okay and then we'll create that so we'll say tag tag will be hey it's going to be a cursor pointer when you hover over it text is going to be extra small font is going to be semibold okay and then we're going to give it a specific text color so we're going to say okay and then we're going to also give it is a certain underline on hover so hover underline so now when you hover over it it has an underline just like how reddit has it so that just makes it pop and look really nice and then the last styling we're going to need is posted by and this one is going to be fairly simple we'll just flex everything center align it and then give a little bit of spacing in between everything so let's go to this part we're just going to wrap this part in a div and let's go ahead and wrap it boom right there and we'll say class name style.posted bye okay perfect and now it looks beautiful i mean like yeah this is this is gorgeous this is gorgeous this is very very nice and like it's completely mobile friendly as well look at how everything just resizes the about component shows up or it vanishes depending on the size so this is beautiful i mean it's fully mobile responsive okay great so with that said now our post component has all of the sub components and they're already made the vote component subcomponent action sub component infosub component and post at this point from a frontend perspective is completely done i'm excited let's move on now we're going to work on the feed component which is essentially already made there's not really not much to do so let's go inside of our feed folder and in here let's go to index.js all feed is gonna do is it's gonna loop through and just show multiple posts okay so right now we don't really have that many posts but we'll actually just create a dummy variable here called posts and i'm just really not even going to put much in it okay post would obviously look like an object with an id i guess let's just put it here so you could visualize what post will look like once we start storing it in the database post will have an id posts will have what else will post have posts will have a title build reddit or something post will have an author it's a quasi okay and then i'm just gonna go ahead and repeat that a few times okay let's go zero one zero two that build medium build facebook okay and maybe the author for this one is david okay so this is gonna look like now post is gonna have more information in there but that's roughly what it's going to look like so what we can do here is we can replicate that and let's just loop through so i'm going to say post.map and let's go like this right there and i'll open parentheses here and open close boom okay and then for now let's just pop that in so since there are three posts it should create this post component about three times and let's see if it does that so refresh see if we're still running into an error okay we're still running into an error so what's the problem here let's wrap it inside of a parent so let's put a div here and here okay and let's make it pretty and let's give this a try and there we go now we can actually see that because we have three posts in here three posts are showing up right boom one two three okay so now what we can actually do here is we can give this entire post we can destructure this entire post right inside of post so what does that mean that basically means that we're going to have a post where each thing is going to have an id we're going to destructure when we pass it with the the title and the author so everything is going to be destructured and then we'll have access to all of that later okay and we'll be actually destructuring is each post okay so that's what i meant to do each post is what we'll be destructuring because here we're mapping through posts so let's get access to a post okay and so what will happen is when we're passing the post component that specific post will basically have that specific post id that specific post title specific post author so writing this here is the same thing as essentially doing title is post.title author is post.author okay so you could write all of that or you could just write this and this just destructures the entire post so it's a really clean way of doing it now i can go inside of my post component and i can actually destructure the id i could destructure the title and the author for example and now here i can replace this with title and let's say i can replace we'll do the author parts actually where's author part author will be an info so our info will actually need access to the author okay so author and then we can go inside of info i can go down here where it says posted by clever programmer instead i can actually say posted by author so now if we save this let's see if we have any errors posted by author so we need to destructure author here and there we go now you can actually see the the posts are showing up like you could see the titles right build reddit build medium build facebook let's go inside of common and i'm just going to open up posts in a new tab so we can see posts very clearly so there we have it we are passing it all this information it's showing all of that information and i think this looks pretty good right now let's go and check where we have the post showing up so i'll open up index here as well let's open up the index and in my index i have all my posts now later these posts will come from a database okay so i'm just going to leave a comment here these will come from a database okay for we're just hard coding it right now passing it to our post component and then our post component has access to all of these properties and then it's showing all of these properties okay so obviously we don't have all the properties in here right now but content will be one of the properties too and that's something that we might as well actually just go ahead and actually write it right now so we can actually set content let's i'm sorry let's leave it for now just because it's going to be a lot of like manual work and let's just do all of this when we actually get the data from a database i think that'll be better that's better let's do that way so there you go there's your feed component and now it's working only problem is styling wise so if you look at this there's some room to there's some breathing room right here right when we look at ours look at the difference there's breathing room here there's no breathing room there's no breathing room here in ours in the final version there is some breathing room right here okay so it's gonna be some simple styling that we'll do so let's just take this div and let's add it in a class name and we'll say style.wrapper and then let's go ahead and create styles here so con style will create a wrapper style and the wrapper style will just say hey put a space in the y margins and the y axis and then we're just going to make the cursor pointer when you hover over any of these things and we'll wrap and we don't actually even need to use this honestly we don't even need to use this because posts should already have those things all right so now when i hover over it looks like that and there's spacing in between each so it looks a lot more breathable and then for post let's give it the id as well so i'll just do comma id and we'll just do key is id okay so with that said our feed component let's just full screen and let's like really soak it in and look at that that looks nice let's make it a little bit bigger yeah that's looking stunning so our post component and our feed component are now complete front end wise and now we'll get to the really exciting part and add a database and start adding the back end and a lot of functionality to the app so i'm excited let's do it together now we're going to go ahead and set up supabase and pull the post from there and you'll see how easy it is to actually do that so let's open up a new tab and let's go to supabase.com and hit enter okay now i am here very simple so you can just sign in or start your project so if you've never stored your project or you never created anything just click start i there's not really much to talk about it it's a firebase alternative but you have postgres and everything so pretty easy let's hit start your project i've already created an account so just brings me right here you can you know you obviously will have to create an account from scratch all right so let's go ahead and i'm going to make a new project here and you could choose whatever pricing plan you want i just want it to be free so the project name i'm gonna choose here is going to be let's just say reddit with next all right next chess now just put in a password you won't really need to use it later but this will be for your postgres database so we can generate a password okay or we can just write one whatever we want to do in this case i'm just going to generate i don't really care what it is you could copy it and save it if you need to but i know i'm not gonna really use it in this one later so it's fine just hit create new project and we're done with all of this okay all right now in the next step what we need access to are a couple of config things we're gonna need access to one our project api key and to our url right here project url right here okay these are very important i'm just gonna go ahead and copy because i have a clipboard so i can store multiple things but you can just hit copy here now that i've copied them here's what we're going to do we're going to go ahead and create a new folder at the global level so just click the get ignore it literally anything else click folders and this will be called services and inside of my services folder we're gonna go ahead and do supa base client.js okay and then we're gonna go ahead and say import create client from supabase supabase dash js okay now we're importing something that we've never really seen before so usually what does that mean what that basically means usually when i see something like that is i have to actually install that library so let's go ahead to supabase and look at their installing instructions how to install superbase it's very simple we have a yarn command here that we're we're just going to use okay i can copy it like that yarn add super bass dash js so let's go ahead and open this guy go to our shell and we're just going to go ahead and paste this command and now it's going to install superbase so we're all good there and let's set up the config here so i'm going to say supabase url is going to be process.n next public superbase url and if you're wondering hey where the hell are these variables coming from don't worry we're going to set up our own end file and then we'll store our keys there okay and then we'll do con super bass anonymous key next public super bass and on key face and these aren't like really private keys right because that's why we're saying publix we're making it very obvious that these are actually like public keys just know that these are going to be publicly exposed to whoever's on the client side create client and we're going to go ahead and say pass create crown line the superbase url and we'll pass it to superbase anonymous key great uh not irl not in real life but a url okay just make sure you spell everything correctly so we have we're done setting up the config file but well all we have to do now is just in our end just make sure we have these variables so at the global level we'll create our end file okay so right here just simply click get ignore or any of these other ones hit add a file and we're going to call it dot n dot local okay this file usually in git ignore is ignored so let's look for a dot and yep so dot m.local is ignored great and inside of our end file we're gonna go ahead and say next public super base url okay and then just paste that url so i'm gonna paste this and then we're gonna do next public super base anonymous key and then just paste your anonymous key okay so we're done pasting those and what this basically means is now our services supabase client actually has access to those keys okay now that we've set up this relationship let's go and add some dummy data to our database so let's go ahead and click this table editor and you can see i'm in that project they should really improve their url names like what is that so weird all right let's go to here and um we'll create a new table so just click that i'll zoom in a lot so you can see everything and uh this new table we're gonna create we'll just call it feed okay and the feed will have so in feed we'll have created at and this will just timestamp to now so whenever you add a new post to it it will by default value will just be that same second that you made the post so that makes sense so we'll leave that essentially as is we'll add a new column and this will be the author okay and the author will be of type text so i'm just gonna type in text until i find it great default value will be null then we'll have title title will also be a text then we'll have content which will also be a text boom and then we'll have upvote which will be an int 8 okay so that just means it's going to be a integer and then we'll have a down vote and that's also going to be an integer beautiful so when it comes to feed that's really all we're gonna have so let's hit save okay adding seven columns to the feed and we should be up and running now let's go ahead and add a post in here simply okay so i'm gonna hit insert row and for the post let's say the author is rafae kazi for title i'm going to say it's going to be like how to build reddit with next.js and superbase rocket emoji and then content will be this tutorial will show you step by step on how to become a developer and build an app okay it will have eight upvotes and three down votes and let's hit save so this is one post now it's created and what's nice about this is we'll be able to uh create a new uh we'll be able to retrieve this post you know from this table that we've created so that's what we're going to be working on and that will finish our setting up of the supa base now the next thing i want to do is i want to go into authentication and also just set up the authentication because we're going to need it for later but we can just go ahead and set up the auth some of this auth now so just go ahead to authentication all the way down to google and we're going to click it and just do google enabled now the last thing but one of the most important things we need is we need a we need to go here we need to add a redirect url so let's go to the top of the app and where it says user sessions site urls we need to go ahead and add our replit url right here for our app so we're gonna go and grab this okay whatever your url is called mine is called this you could change yours you could go here and like change the name of this because you've already forked this so you could call this let's say you know whatever you want you could change the name of this and then just make sure you put that same one okay so let's say reddit clone reddit build uh for youtube okay so i'll hit enter and once i do that my url of the replit changes okay and then this url will also change so we'll yeah it's saying uh working so simply go ahead and okay now it's changed here as well and in my console maybe it's working maybe it's not let's hit run again let's see if it works it should be able to change it and run everything correctly so the replay is waking up you got to just sometimes give it some time and then once it's loaded you'll be good to go and there we go so sometimes it can take some time just be patient wait because it is deploying it to a whole new it's like doing a whole new build a whole new url it has to deploy it online so just give it a second and then it'll be up and running so right now it is up and running and we're good so this is the url that i'm going to take and i'll head over to supabase here i don't need that tab okay open it up and instead of this site url right here for user sessions we'll just paste this redirect url okay let's hit save okay great in terms of the setup we are essentially done with the super bass setup now all we have to do is actually retrieve a post from super bass and then actually show it inside of our feed so let's make sure that we finish doing that okay because that to me that's really finishing the setup because then you know everything is plugged in connected working how it's supposed to be working okay so let's go ahead into our pages okay let's go alright so now what we want to do is in our pages we need to actually create our own back end real quick so instead of api i'm just gonna go ahead and create a new one we'll call it get posts dot js and we don't need this hello ts so we can just go ahead and remove this okay so inside of get posts uh this is gonna be our back end or we're gonna retrieve basically do our cure queries to the database uh and retrieve the data from here okay and then from the front end we'll call this endpoint and get the data that we need all right so we're going to go ahead and say import we need access to supa base and we'll say from services supabase client okay and then we're going to go ahead and say export default it's going to be an async function okay we're going to take in a request and a response even though we're really not going to do anything with the request in this one and then we want to do is we want to destructure the response that we get from superbase i will await superbase okay and and this is a really nice part because this is like sql right from feed so we're gonna get the data from that table feed that we created so if i go in here and we're going to tables right this is the table feed from feed and we'll say dot select and we can select something specific like a specific column but in this case we'll say give us all of the columns and then we'll order it by id which in this case will be kind of ordered and we can just do ascending false this will also show us the most recent post first and then the last thing we want to do here is let's just go ahead and say status is 200 and then we will sorry whoops status of 200 and then we're gonna call the json method on that okay and we'll just return the data so we'll grab that data and we'll return that data okay so in other words just think about it like this when this query happens it goes to the table gets that entire feed table and then just sends it back and then we have access to it inside of our javascript code okay all right now from the front end we need to go ahead and retrieve this as well so let's go to our index which is going to be our index.ttsx so let's go to pages let's go to our index okay and here we'll get access to our posts now we're going to use something called the swr hook i love this and just to show you a little bit about it swr hooks are phenomenal you should be using them all the time so wherever you use you know use effect and then you do an api request just replace that with swr and uh lee robb from versailles also told me about this and there you know recell created next and so he's telling me he use this all the time so what i love about this is this works with ssr okay server side rendering it works with typescript and it's real time so it fetches the data in real time and it can actually keep refreshing that specific component for you over and over again so if we're pulling data from a database remember that's not gonna if it's not firebase or if it's not a realtime database it's not gonna render in real time but using swr we can actually keep refreshing that specific component and so that way if it gets new data or gets changed it will refresh and just update with the new change without needing to refresh the entire page so that's beautiful it basically will mimic a realtime functionality and also what i like about it is that you don't need to when you start using swr you don't need to write all those like use effects and then keep track of state variables and create your fetch requests and do all of that stuff it can kind of just do that all in one go okay so that's why we're going to be using this and we're going to go ahead and install this first obviously so let's click get started and it just says yarn add swr and that's how we install it so let's go ahead and install this now so i'm gonna go in here and let's open up this and i'm gonna end my kill my server here and we're just gonna do yarn add swr and once that installs i'm gonna yarn dev again and then i'm going to start running my server so my app starts running but in the meantime while that's installing let's go ahead and say import use swr because that's the hook that we're getting from swr and then inside of our home component what i want to do is set a state variable called my posts set my posts okay and um for these posts we need to import use date if we didn't yet so let's go ahead and do that import use state from react let's see if the install happened already no it's still installing so let's let that just keep running all right and then the next thing that i want to do is my s i want to write my swr hook so i'm going to say const let's destructure the data and the error from it and we'll use our swr hook we'll hit our endpoint get posts so we are going to hit essentially this endpoint right here and what's nice about next is that this right here guys is our back end and it's a serverless function so it's a serverless backend which is absolutely beautiful and we didn't even need to necessarily create a full back end and a full front end it just all comes together once you do serverless so i really enjoy the experience you get from with serverless functions so this will hit our back end point and then we need to give it a fetcher and then we need to just track you know whether it's loading or not because if it is loading then we need to show a loader otherwise we don't need to show a loader oh actually no i'm sorry ignore completely what i just said ignore that okay so swr is gonna need this and the fetcher needs to tell it how you want it to fetch stuff so the fetcher is gonna be simple we'll just write our own fetcher here and it's this fetcher right here and it's just a wrapper on the native fetch so you can literally copy this and we can paste this fetcher okay that's it that's our fetcher we don't really need to even understand what the heck it's doing but what it's doing is it's we're gonna hit this end point and then we're just gonna retrieve its result as a json okay and then that result is just gonna be named data and then we can console.log data obviously after we retrieve it all right so now let's go ahead and run our app and see what happens so i'm going to do yarn dev okay let's make it a little bit bigger here let's open up our app okay and i just console logged that data and uh let's see what happens so let's go ahead and inspect element and we will go and go to console okay and wow this is too huge so i'll make this a little bit smaller okay so we're now right now not console logging anything so let's try putting a emoji here so maybe i can see that emoji let's refresh our home page and see if we see any emojis or anything like that yes we actually do and look at that we got back our data look at that wow and we're getting back our post this tutorial will be we'll show you step by step blah blah it actually shows you the author content created at down vote shows you everything right and we're getting that data back and because we're using swr it actually does caching for us and it does validation for us and it really will also revalidate everything so that is a beautiful experience because if i run this boom everything just happens so fast and instantly and then the more i run this the faster it is because just retrieving that same cached post okay now i'm going to tell it how when to refresh so i can actually give it a object here and say hey the refresh interval interval for this is going to be like 200 milliseconds so every 200 milliseconds just go ahead and refresh for me okay and what we want to do is we want to have a use effect hook okay let's write use effect and i'll just make the dependency a dummy dependent data will be our dependency so that's an important thing that we need to remember okay and let's open and close that cool and make sure to import use effect as well okay import it great and inside of this use effect what we'll say is hey if we don't have data then just return because other like it's a guard clauses don't do anything if there's no data otherwise i want you to set my posts data.data okay so set my post to whatever they were and that'll be set up and now my posts we have access to them i can pass my posts to feed for example we can go here and say posts is equal to my posts okay and now we can go inside of feed so i'm gonna command click it or just go manually and you can go components you can go feed and you can go index okay and now i'll destructure posts from here okay and we don't need these posts anymore the dummy data that we had we don't need that anymore so now pulse will know already what to do we're already retrieving the data from our back end we're passing it to our front end now and let's see if our post already knows what to do with it yes it does that was such a smooth transition baby look at that we got five votes and how is that happening remember how we did up votes minus down votes so it's already doing the subtraction for us too because we had eight upvotes and three down votes so that's already happening and we're getting back five now let's go ahead and change up votes to let's say 20 upvotes okay so i just changed it in the database directly and let's go ahead and refresh our page okay so let's actually first of all go into our index again so i'll get out of post here let's go to our pages and let's go to our index.tsx okay perfect and now let's go ahead and refresh and see if it can retrieve that data oh so we probably actually did not make our uploads and down votes dynamic right now i think we had it hard coded to be something dummy i remember that you probably remember that too so let's actually go ahead and fix that i believe where was that in votes i believe let's go feed vote up votes minus downvotes and we're getting dummy data right here right so we want to destructure upvotes and we want to destructure down votes and remove these two guys and then where are we calling vote i think we're calling it in post and we're calling vote right here so we need to actually give it up votes and then we need to give it down votes down votes and then we need to destructure that how do votes get to here post post post should have access to upvotes and down votes actually yeah okay it's saying nan interesting feed index we're getting posts we're passing the post straight up we're then going into our post right here let's just console log this here and see what the heck is happening so console log up i will do it as an object and i'll just say up votes and let's refresh let's see what it says so it says upvotes is undefined interesting okay so we know that whatever we're getting for upvotes is actually not defined ah the error is actually a user error so it's actually my mistake okay so the error is this we need to go to our superbase and we called it upvote here singular but it's actually up votes so we need to go ahead and hit edit on this and change that name to upvotes and this to down votes okay and hit save all right now let's go back and look at that it already updated and we didn't even refresh how freaking cool is that okay let's try making down votes zero now so it should just straight up say 20 so i made them zero and look at that it's 20 again you saw that right i did not do a refresh and this isn't even like some real time uh subscription or any any of that this is just because i'm using swr right so actually let me let me make it so it's side by side so you can see it because this is pretty cool it's exciting so let's go ahead put this bad boy side by side and we will change the down vote so let's say 20 so it should go down to zero oh look at that that was slick and now let's go ahead and do down vote zero let's do up votes 2000 slick that is so slick and how quickly it happens and everything that is absolutely beautiful wow that is awesome honestly this was actually one of my first times personally using swr because like we never used that hook but like lee did tell me to use it and i didn't really think much of it i'm like oh just a more convenient way to write your own hook and write your own fetch but no it's just a million times better and now i understand why everybody and their mother uses swr and it's one of the most downloaded packages so that's just an awesome experience and i'm just really happy that we got to see that together so there you go now we're actually retrieving the data and we're able to show it so with that said we're fully done setting up supabase we've verified that we've set it up we're able to pull posts we're able to get posts and we're able to show them and now we're gonna actually go ahead and start implementing that all of that data and adding it to our front end all right so just to make post look a little bit fuller kind of like uh you know making you get a food plate and you want to make it look nicer right let's do that here so i want to add a few more posts because i have one post right here that's great but let's just add a few more posts how are we going to do that let's just add it straight to our database or our super base let's just go here and um i will copy some of this text and then we'll hit insert another row okay and we will say david riccosi title is build medium with typescript uh content is gonna be that's up votes gonna be 653 down votes are gonna be 225. let's hit save and look at that man that is cool wow that is awesome that just happened without refreshing and this is not a realtime database which is why it's so cool like swr is king swr is detected data changed and then it just refreshed everything on the fly and that's component specific that's using it and showing it right here so now we got two posts right here so if you add more posts it'll show more posts so we're good on that okay now next up what we're gonna actually work on is going to be the ability to create a new post meaning that if i go to this version of my app i can actually go ahead and hit create a post and i can write a new post i wonder how you are doing today i am doing wonderful by kevin o'leary okay cool mr wonderful right there so we added that and that's how we add new posts so there you go okay i should be able to go to this page so this is the page we're gonna create we're not gonna create the functionality right now okay so right now when you hit post really nothing is going to happen but we should be able to go to this new page now what here are a few things i notice right away so a few things i notice is my url route has changed and it says slash new so when that happens i'm already thinking that i'm actually going to be creating a new page inside of pages in react in my next app and that new page that i'm going to create is going to be called new and then in that that will allow me to actually come to this page right over here so what that looks like is in my pages i'm simply going to hit add file and i'm just going to do new.js so this is going to allow me to create essentially a new post okay that's what it is and we're going to say const new return let's just go div here slash div and i'll just put h1 that says new post export default new so we're just gonna have this be our page and it's gonna be pretty simple so that's all we're gonna render we should be able to go here by clicking the create a post button so i'm going to go into my components and inside of our components we have this create post button inside of our feed so we have next link here which is useful and when i go to create post you'll notice that we already have that added for you where it routes to slash new so when you route to slash new what next is gonna do is it's going to bring you to this page okay so basically this component right here let's go here this component right over here already has that functionality where when i click it it'll add slash new to my route so let's go ahead and click okay and let's see what's happening nothing is happening yet let's refresh and try again oh sorry i was clicking the wrong wrong wrong wrong wrong one that's not that's not what i meant to click this right here when we click this it will route us to slash new so let's click it and boom there we go we're on the new post page right boom right there the routing is already done which is really nice and react you don't have to worry too much about routers and routing and on this page we'll have a couple of things on our post page so one thing i definitely want to have here if i go look at this and click create post my header actually remains there my header never goes away and my about is actually there as well so those are a few components i'm definitely going to need to import so i'm going to say import header from we'll do components slash and i'll say header and i'll also do import about from component slash community ship out okay and so we're gonna show header okay let's go header like this and then we'll also have about like that so we'll definitely have these so let's see if it shows up in our app so it says it can't resolve header and it's having trouble resolving about uh so about is actually with the capital a so let's do it like that okay now i believe we should be good there we go let's make this full screen right here and we can see our about component is showing up and we can see our header is showing up too so both of our components are showing up now let's add a wrapper around it and style it so i'm going to just go ahead and say class name also flex min height of the green and then we'll put it in flex column give it a background of black and then give it a text of d7 dc okay great so my styling for the header part is done or sorry for the entire like as a wrapper is done and now we're gonna go ahead and style our wrapper as well or about as well sorry so let's go ahead and wrap it here and i'm gonna go ahead and say class name we'll say hidden okay so now it's only going to show up when it's onethird of the screen and otherwise it's gonna stay hidden all right so up until twothirds of the screen essentially it's not gonna show up so that's that's kind of what we want because if we're in this mode we don't want about showing up and taking up the whole screen okay so that right there just adds that little mobile responsiveness touch which is really nice okay and then we need to actually work on a new component it's going to be called post form and this will allow us to add a post or create a post so let's go ahead and add that component in now so we're i'm just going to go ahead and do my import statement already i'm going to say import post form from opponents slash new slash post form okay that already tells me what type of route i need to create here so let's make this a little bit bigger okay so i need to go inside of my components create a new folder it'll be called new and inside of that folder i will create a new file it'll be called post form all right and for now what i'll do is i'll just say const post form turn and we'll just make it div this div will have an h1 in there that says post form and we'll go here and we'll just say export default post form okay and then let's go back to our pages and new.js and then here we'll have that post form show up now the question is where do we have that post form show up let's just pop that here for now and let's just see what happens i'm gonna put post form right there for now let's go to our app and let's refresh and see if post form is actually showing up anywhere so post form currently is not really showing up anywhere let's see i'll go to post form okay interesting there we go so it was hiding behind the header okay now it's showing up you can see post form is showing up right i just have to paste it a couple of times and so yeah so basically this component is showing up it's connected and now we can actually start working on our post form component and so for our post form component let's just do obviously this will be a form in here so but we'll start this here with saying create a post create a post okay and then since it's a form we're probably going to have like two input fields this is going to be input field this is probably going to be a text area because this is a big text and i can also change its sizing i imagine there's going to be some a wrapper that's going to have a border radius and a gray color so i can already kind of imagine a bunch of things let's make our input fields so i'm going to say input and then make it selfclosing and then for this input i'm going to say class name is going to be style dot input we'll create the styling for it soon enough and then type is going to be text placeholder okay so let's go back and let's create style objects we're gonna say style and we will just leave it empty for now okay uh just gonna paste this a couple of times so we can see this so now you can see input is showing up now let's make our text area okay and that'll also be selfclosing so i'll say text area and for class name we'll also do style as input and the name of this will be content the id of this will be content for column we'll make it 30 columns and for rows it's calls plural and for rows we'll make it 10 and then we'll add a placeholder that says text required like that there we go so we got an input and we got a text area so so far so good now obviously this looks horrendous so what we need to do is we need to actually add a wrapper around everything so we'll say class name style.wrapper all right so let's create the styling for that so i'm going to say wrapper and we'll say flex flex column space y6 okay so now we have some spacing in between on the yaxis some spacing in between these two we made a flex column so that looks better okay so that yeah it looks significantly better now let's go ahead and get rid of all of these h1s and let's see if this still shows up postal shows up yeah kind of still shows up here let's go back inside of new.js and make it so we can actually see post form because right now it just keeps getting hidden and that's kind of annoying so let's go div wrap it around this and i'm going to say class name and we're going to make the width full okay then we're just going to do that okay so this will take on a large screen it'll take two thirds of the screen okay otherwise it's gonna be like width full that's what we're saying here okay so see two thirds if i get rid of this then it'll just keep taking the full screen and that's not what we want okay we want it to be like twothirds right here okay and then we want to wrap this inside of a main so we want to wrap everything inside of a main so i'm gonna make main let's finish wrapping it up until here and i will grab this and indent that in there and so for main i'm going to say class name we'll go mx auto okay margin top 16 so now we're going to give it margin top that allows you to actually see the damn thing right otherwise it's so hard to freaking see where it is okay and mx auto just gives it margin horizontal margin in the center so then it can actually center it okay and then we'll go flex on this we'll go with full and then we'll say max width is going to be 5 xl i'll flex 1 to it i'll give it a space and of 6 in between each on the xaxis we'll give a padding of 5 and then a padding of six horizontal okay that's main so there you go look at that that is absolutely gorgeous now everything is showing up in its right place where it's supposed to show up okay now what we have to do is inside of our post form we have to style our input so let's create the styling for that so i'm going to say input and for the styling of input we're going to say give me a background color first of all so let's start with that 1a b okay so already looks way way way better but i don't like when i click it it shows those things so we'll fix we'll fix all of that okay we'll give it a border as well and we'll give it a border of a specific color so i'm going to set 3 4 3 5 3 6 here so now the borders will just look a little bit tad bit cleaner we'll give it a padding on the xaxis of 4. there we go so now it doesn't really look like i'm writing super close to the edge we'll give a padding on the yaxis of two so it doesn't look like we're writing super close to the top so it looks way nicer now and then we'll add some text we'll text left it we'll tack make the text small we'll make the text white and we'll just say hey outline should be none when we focus on it okay there you go so now focus on this no outline and when i write it's white okay so input is looking really good now now what we have left besides the input is uh are really just a couple of things i mean we have most of the styling here done we just need to make sure that we also style the title so when we're writing in there that looks like an actual title and not like a measly little text so for our title input where we're gonna actually add the style is right here where we're actually doing the title oh we got rid of the title so let's go here and actually create our own title whoops my bad class name okay we'll do style.title and then we'll write create a post just like that okay now let's take a look boom create a post is here so we'll style that bad boy alright so for the styling of this i'm gonna say title and we'll do border we'll give it a border at the bottom we'll give it a border of a specific color and then i'll give a padding on the bot a padding bottom of three will make the text very very large okay and then i want to make the font medium there we go so now create a post looks very clean okay so we're good on that and then all we want now is we want to add a post button as well so right underneath all of this we'll go ahead and create a button that button will say post and we'll say class name for this is going to be style post button okay so the button is right there i can click it won't be doing anything won't be doing much right now and then we need to style that button so let's go here and i'll say post button okay and then for the styling of this button we want to give it a background color so background gray 200 okay so now we we see that there's something there behind it we'll give it a padding of four padding at the top of 1.5 we'll make the text of this extra small we'll make the font semi bold we'll give a specific text color one a one b and we'll make it rounded full there we go so now boom look at that it's nice right it just says post and we can create our post okay and now what we need is we need a post button container actually and so let's go right here let's wrap this up in a div say div close the div right here this is going to be class name is going to be style.post button container post button container like that and let's go ahead and style this bad boy we're going to give it a flex justify it everything to the end and then give it a padding top of two so now it looks much nicer but if we look at the final version see in the final version we actually have a padding around the whole a background around the whole thing a wrapper which we don't hear so let's go ahead and add that styling to this now so basically we need to go and wrap our entire input okay so essentially it's our form like think of this input here and that text there and that button as a form and so we're gonna wrap that entire thing in there that's interesting all right so let's go here and i'm gonna say div take it all the way down to the button and post it okay and then the styling that we're going to give it is we're just going to say class name of this is going to be flex i'm going to make a flex column space we're going to go y2 on this rounded and then we're gonna give it a background color this background color right here and then we're gonna give it a padding of four okay so now you can see the whole thing is nice and together and the post button shows up right there right so now that they're looking a lot more similar now the front end for our create a new post is completed because i can write here and i can hit post but the part that's not completed is the ability to actually write to the database meaning when i actually make a post here it should get stored right over here so that's the functionality we're gonna work on and finish right now all right now inside of our post form we're going to create a new function that's going to allow us to write to the database and store stuff so we're going to say const create post that's going to be async and we're going to take in an event as an argument and we're just going to prevent default on that okay so that's just so saying that's we're just basically saying hey don't refresh the page okay that's it all right now what we're gonna do is we are gonna this is gonna be really simple honestly we're going to go ahead and await super bass okay and um we're going to go into the from feed and and into the feed okay and into the feed table we're just going to insert an object okay and that's gonna be author let's do it like this author we're only just gonna insert one object okay we could probably insert multiple but she's gonna do one author is gonna be let's say lever programmer comma title is going to be writing to this from my front end meaning i'm not you know literally writing from the database i'm writing this from the front end okay and then the content will be did this work i believe it worked okay put a comma here and a comma here great and that's essentially it's that's that easy to actually write to the database but lastly what we're going to do is we're going to wrap it in a track catch block so here's what we're going to do okay so we'll we'll wrap this whole bad boy in a try catch block put that here okay boom like that okay so we're going to try this and then if it doesn't work we're going to catch the error and then we'll simply just console.log console error the error so it just pops up like an error okay and then we're gonna say finally okay we're gonna router.push you to the home page so once the post actually succeeds we'll just take you back to the new homepage because you don't need to be on the new page anymore okay so for that we're gonna need some routing so let's just bring in import use router from next slash router all right and then what we wanna do is get access to that router so we're going to say router use router okay so there we go so now to that router we're just going to push okay and then we're also going to just keep track of a loading state and that's going to be helpful later when we actually add a loader for now it's just going to help us have a state variable okay so boom i'm just going to say loading and we're going to say set loading okay i'm going to say use state is false you can you can even call it is loading everywhere s is loading set is loading okay so we can actually just go ahead and set is loading to be false here because well it's done being loaded and it's done and then here we can set is loading to be true because the loading has just begun here and then once you're done finally boom done okay so that is great okay even if we have an error right we want to do a finally and then just go back and say loading is done so this should help us write to the database now there's just a few things we have to take care of here in our post form we do need to actually track what the user is typing and where they're typing it so let's first of all import use date and things like that since we need access to them so let's go use state from react so the user is going to be typing data here we need to keep track of this state this state and the state of the button being pressed okay or just a button being pressed having an on click method okay so let's go ahead and go title set title and initial stay is going to be empty and the next state we need to keep track of is the content so it's a content set content and i'm going to make use state is going to be empty for this okay so i have loading title content and router those are these three are the main states that i need to keep track of now we need to keep track of it here as well so for this input i'm going to say the value of this is title and then on change i need to grab the event and i need to say set title to whatever is being written in there okay just like that we're gonna do on change and then we're gonna do a similar thing for text area okay so just copy paste that except for value we're gonna say content right and then for the rest of this we're gonna say set content to be whatever the user is typing in at that time okay so that means we're good and we're tracking that and then we just need to add a on click method onto the button so let's go ahead and do that now so we're going to say on click and we're going to give it this method create function that we created create post so on click run this okay so let's see if we're actually able to write to our database we have to probably import supabase as well because we don't have access to it here so i'm going to say import supabase from and we're gonna say services slash supabase clients okay great and now let's go ahead and write something and let's see if it pops up here so i'm gonna say test one and let's hit post let's see if anything happens something happened okay let's refresh and see did a new post get added that would be really cool if it did maybe it didn't oh it worked that was so nice and easy look at that and it says clever programmer writing the writing to this from my front end okay that was incredibly easy to do right writing this from a front end boom boom oh our post actually needs to read the content so it's not reading the content so let's make sure let's just see what's happening with our post component because that's not correct so i'm going to go into our post component feed slash index.js yeah now let's go inside of our post component so let's go to common let's go to post and inside of here ah yeah so this is going to be content content okay because i had it hard coded to something else okay let's destructure content as well because we're past that down and that should work there we go nice look at that did this work can't believe it worked right into this from my front end this tutorial will show you step by step on how to become a developer perfect okay this is really really solid so let's try adding a new post let's go here new post wow this is incredible like this let's hit post and let's see if it happened let's refresh oh it did not happen maybe we hardcoded some stuff so let's see what seems like we did something a little bit funny ah yes we've hardcoded data so for example author title and content we've hardcoded it so we need to not hardcode it okay so author will leave hardcoded because we'll be able to once we add authentication we will to keep track of the logged in user but title we can actually certainly change so title is going to be this because it's going to be the title so i can actually just go ahead and replace that with title and then put a comma so just so you know something saying title is the same thing as saying title comma title title colon title so you just say title here and then for content you can just do the same trick all right so there you go and now let's make a new post let's go ahead test two let's write it boom there you go look at how fast this is right fast fast boom post boom and it all feels like it's happening real time even though we're not doing real time this is so exciting so there you go now everything is working everything is working dynamically the only thing that's not necessarily dynamic is the author and we'll get to that by adding authentication next right before we do that let's just actually add a loader so we can see a nice little loading screen as our post is getting added so let's create loading and where we're going to create it is we can actually just create it inside of components so let's go to components and hit a new file and we will just say loading.js so it's going to be a component and inside of loading.js we'll try to go through this one kind of fast so we'll import loading animation okay from and we have this it's inside of assets so if you fork this then you should have access to loading animation as well okay so we're going to say loading animation from oops we'll go into assets and we'll say loading animation just like that and then we'll say const cons let's go loading first all right and i'll say return we'll create a div and it's going to be our wrapper so i'll say class name name is going to be style.wrapper and then we'll plug in our loading animation and we'll say style is and then we're given an h2 i will say class name is style.loading text we'll say loading dot dot dot okay and then we'll just wrap up the styling for this so for the wrapper we need it to be fixed inside of zero z index of 50 because we wanted to take over the whole screen because what we wanted to look like is if i was to make a new post here it takes over the whole screen right and it has a background gray overlay and then you saw that it has the loading screen pop up and it and it dominates the rest of the screen right so that's why z 50 here is important and then we're gonna say take the entire height of the screen the entire width of the screen flex column item center it will justify center we'll give a gap of six uh overflow hidden and then background black but not completely black so we'll give a slash 80 right here perfect so that's our wrapper loading icon will be margin right of 2 height of 20 width of 20. we'll animate a spin in there add fill white and then let's do text gray 600 for this and then we'll do loading text and for this i'm going to say text center we'll make the text large let's make the font semi bold and then we'll make the text also white okay so that's our loading that's really it let's go back to our post form let's make sure we're exporting this let's export default loading okay now let's go to post form so i'll go to new post form let's import that so let's go ahead and say import loading from and i believe it's loading close by to us right it's just one folder behind let's just double check i'm in new yeah i get that one folder and then i have access to loading okay great so we have access to loading here and now we want to show the loader pretty much all over the screen so let's go here and the loader is gonna be right over here and we're gonna basically say if the state is loading in that case show loading okay so show the loader or loading okay and you can do is loading so if this loading is true then show loading otherwise don't show loading okay so we'll just do is loading is false show loading so that way when i click into create a post it should be showing loading the whole time there we go so it's working right and now i'll change the state true okay and now stop let's make a new post and see the loading came up so beautiful the loader is locked and loaded and it's no pun intended and it's working perfectly as expected now let's go on to the next step and add authentication so now we're going to go ahead and create this login page right over here so if i log out of this and i go here this is a page that will bring me to so this is the page that we're trying to make now okay that right there so let's get to work all right so first things first this is going to be a component rather than a page and we'll just add it to our components without putting it in any subfolders let's just add it here right next to loading so click components click a new file and then we're going to go ahead and say login.js okay now since the component we know the drill okay return let's do div let's say that div returns and h1 log in and we'll say const export or sorry export default log in all right so when we think about our home page let's take a look at this if i if i look at this i need just this image right here and probably this image right here so it's probably only two images that i really need okay and you can copy the link from mine or you could just find them on your own and paste them here so there's two images other things i noticed is everything is center aligned right everything is in the center vertically horizontally so i know i'll need to center everything this is a button i can also see that it has rounded corners so i know there's something border radius action happening i also know there's a border happening and i know it's a white color border it's a border white this most likely is a button okay so there's a couple of things that i'm noticing already off the bat which is going to make my job of doing the front end work a little bit easier now we need to just make sure that we can actually render this component so let's go back to our index so we're gonna go to index.tsx and let's just make sure that we're rendering this and how we're gonna rendering how we're gonna render this is inside of this wrapper okay we're gonna say we're gonna check if the current user is logged in and if they are then we're gonna show them all of this and if they aren't then we're gonna show them something else we're gonna show them the login page it's like hey are you gonna see the login page or are you gonna see the home page which page are you gonna see so let's add that right here okay so is user logged in if so in this case this is a ternary operator so let's put a question mark here because user logged in question mark if they're logged in then what we want to do is show them let's just say the home page otherwise we want to show them let's just say the login page okay so that's effectively what we're doing okay so i'm gonna put parentheses around here and we're gonna take all of this code right here and i'm just gonna go ahead and cut it and we're just gonna paste it right here because that's the definition of home essentially and then for this login boom okay we can just put that right there so we can see there's a very clear divide this or that okay let's see is there anything crashing yet not crashing yet so that's a good sign let's go hello okay let's refresh okay let's just double check that everything hasn't crashed so it looks like it has so let's just go yarndev and let's restart our server and then just wait a couple of seconds until this is ready to go let's just actually um have an empty fragment right here okay and uh empty fragments for now it's just that empty fragments instead of that hello okay so let's make sure that that probably works better and then we'll also need probably some kind of fragment action here so there is a div if there's a current you ah actually let's do it this way let's grab this wrapper and let's put that wrapper here and let's end that div here instead let's grab this div and let's end that um okay so everything is in the wrapper and push this here okay so there we go and then this entire thing will wrap this in an empty gsx fragment so there we go mtgs6 fragment wrap this entire thing up in a div so show this right or show this these are the two things that we're gonna show okay so now it should be working let's refresh and there we go okay so right now we're basically saying hey is the user logged in the true the value of this is true so since that's true it's going to show the home page but if we say the user is not logged in so i'll just put a boolean false here i'll just say not logged in then it'll show this okay so that's working now i need to just replace this guy here with just a login component so i'm going to go ahead and say login like that okay and then we'll import login so i'll say import login from import login from and we'll say components and we'll say login there we go so now our login component is connected and is showing up okay now if you want to make this nicer what you could do is you could just create a sub component i love to actually do this and you could create this here you can just say const home page okay and you say return and you could pop that in there so now you have this component called home page and so what you could do is you could just replace all of this with home page and now it's a component and so like look at that it already looks so much cleaner as code if i get rid of it it will bring you to the home page oh now it says my post is not defined so let's see my posts okay home page we will give it my posts is equal to my posts and um it will destructure my posts okay so now it has access to my posts perfect and we can so look at that already it's clean and we can just make it even cleaner by it's up here right and if you think about it if i don't have the wrap on and i just go full screen mode for a second you don't need these parentheses anymore either okay we can bring this on the same line you don't need these parentheses anymore okay look at that isn't this way easier to read than what we were reading earlier right so if the user is is user logged in if they are then show them the home page otherwise show them the login page so this is like way cleaner to read so that's why i like to do it like this it's a really nice way and you know in my opinion honestly it's like this is great okay so we're good on this side now we just have to make sure everything's actually showing up the way we expect it to so we're having some kind of error here oh let's refresh they're still there let's see save okay so i don't know how this happened but i removed the equal sign in my post so there you go my post is equal to my post so that was causing a syntax error and causing it to break so let's go ahead and refresh now and it should be fixed okay so we're just going to give it some time to compile and boom there we go we're back in business baby okay so now this is a nice little one liner and then we just wrap it in a gsx fragment obviously so this is good okay homepage and login now for our login the logic is we created a different component for login obviously so let's go back to that component it's in slash login okay and then in our login remember we wanted to have that image so let's go ahead and go let's first of all put the code in the state so we could see this the whole time so let's go ahead and say that the user is not logged in so let's just go hard coded now the login page should be showing up the entire time as we're editing it and working on it okay and now this is going to be an image okay and this image is going to have a class name and we'll give it a height so it's not like too massive and then for source i'm going to copy paste this but you can definitely you know either copy what i've written or just copy a different reddit image and pop it in so we'll have this okay and that's it as far as the image is concerned so we got that image and then we're going to need another image which is going to be our google image right so let's go ahead and grab that so we're going to source and i'll copy and paste this here and once again you can feel free to find a google image or just write this one so i have two images and now i have them both here great now i need to control the size of this so i need to do class name and we'll give it a height of 6 and a width of six that'll make it instantly smaller and now what i need to do is i wanna center align everything so let's go ahead and say class name style.wrapper and let's go at the top and we'll say style and wrapper and then for wrapper the styling that i want to do here mainly is flex give me a min height of this entire screen give me flex column give me items in the center and then also justify it in the center too and then give it some spacing on the y okay so there we go let's go const style keep saying style is not defined but it is now there we go okay so now it's in the center now the google one remember is going to be a button so let's wrap this in a button okay and this button is going to have a styling so we're going to say class name for this going to be style.login button let's go ahead and create that styling here so i'm going to say login button and for the login button we're going to create some simple styling so we're going to say go ahead and let's actually add the text in too so you could see everything happening all at once so inside of this button right underneath this image we're gonna have a span tag okay we'll give it a class name of style.loginbuttontext and it'll say sign in with google like this so now let's create a styling for the login button so we'll say group okay and then we're going to go ahead and say flex item center sp center we'll give it some horizontal space okay we'll give it a border gray of 300 and it borders you could see it a padding of four and it should hover white when i hover over it there we go boom great so now when i hover over it it hovers white okay so the login button is good now let's create styling for login button text and i'm going to make font bold and i'm going to say hover and we'll say text black there we go look at that that's super clean so right when we hover the text on that becomes black and the text on the other one becomes white and with using tailwind what's really nice is we don't even necessarily have to mess around with using a react here because before if you remember if you ever built the ubereats clone with me or something like that we would have to do react to keep track of the state of the color of each text and then flip it this is just way nicer of a of a way of doing it so just to show you what this group thing is kind of nice so if i actually get rid of this group over here and get this get rid of this group over here now when i hover over when i hover over the button container the whole thing is white right and only when i hover over the text it becomes black but when we group them together like this we have button text and button login button when we group them together like this now when i actually hover over both of them at the same time automatically alternate color so that's the with the group okay so all of our styling for this page is done if i look at this page this is exactly what i want it to be now all we have to do is make sure that our sign in with google actually works all right so let's go ahead and import superbase so we have access to that so we're going to import a couple of things we're going to import supabase from services slash supa base client we're also going to get loading but that is for now we'll get it we'll yeah we can just get it now that's fine because we're already we've already built it we're going to go ahead and import use date because we need to keep track of certain states all right all right so as we continue working on this authentication just make sure that you have done this part earlier when i showed it to you going authentication settings and uh just make sure that scroll down to google that you have google enabled okay this is going to be a really important part that you have to have right because if you don't have google enabled you will not be able to do the login with google okay so go to google hit enable and then hit save okay okay so now it should bring you to this page over here right and we don't have a client id and we don't have a client secret so we're going to set that up together first just click google enabled and now we're going to create a client id and a client secret the way to do that is we're going to go to console cloud google okay go ahead and click and then you can just change to your whatever email okay and uh then what you're going to go ahead and do is you can create a new project okay if you don't have one so let's just say you create a new project and you can call it supermass super pass base okay um reddits and then you can go inside of that project once it's done being made so i'm going to click here it's taking a second so it'll get made soon and then once it's done just go inside of it cool and now that we're inside of it let's go credentials and here we'll create credentials and we're gonna do we're gonna choose oauth client id so let's choose that the first thing it's gonna ask us to do is create a consent screen so we'll hit external we'll hit create and then here app name reddit supabase we'll pop in the email we will pop in my email right here developer email hit save and continue so that's it for the consent screen we're done and now let's go on the left hand side and choose credentials again okay so now we can actually create credentials because we are done creating our consent screen so hit create credentials try oauth client id again application type choose web application we'll say reddit superbase and authorized redirect uris here's what we're going to need to do go inside of your super base okay go inside of settings all right let's go to settings and then inside of settings go to api copy this url right here the project url go back and paste that but you're going to need to add something here so if you look at superbase's instructions for how to set this up what they want you to do is add this to that url it says auth v1 callback and that slash let's copy let's go back here and let's paste it so you should have that url plus it should say odd slash v1 slash callback okay let's go ahead and create this and now it's going to give you a client id and your client secret so copy this go back to superbase and paste the client id copy this client secret go back to super base and paste this let's paste it so our client secret is here our client id is here and now we have that redirect url it's fully made okay ready to go let's go ahead and hit save great so now we successfully have google authentication enabled and now we can finish up writing the rest of the code for this okay so let's go here i'm going to say const sign in with google we'll say async okay and then we're gonna say hit try this and so for try we're gonna grab the error and the user destructure the error in the user where we honestly don't even really need to worry about error right now let's just destructure the user from supabase dot auth dot sign in okay and then the provider is going to be google and then once this happens let's just console log user okay and let's connect this to that button so i'm just gonna add a on click property for this button we'll say on click and we'll just say run sign in with google when we do it let's just make sure we don't have any errors here so okay try maybe you have to have catch error and we can just say console.error error okay there we go now i'm gonna click sign in with google let's see if anything happens boom it actually does take me here let's go kazuya cleverprogrammer.com nice that was clean let's hit console and let's see if anything got back to us in the meantime okay so we're gonna we'll make it um let's add some confetti here maybe so we can see it okay so let's try it again let's hit sign in with google so right now we got null that's fine okay did the confetti happen now no confetti interesting so maybe let's see all right so now we're gonna just try to get access to this user over here okay it's a little bit tricky to get access to the user okay so like we actually don't even need this we could just do this await superbase and log in okay and delete that because that's not actually even gonna give you anything okay so that's really it when it comes to logging in and then if you want to find out whether you logged in or not what you want to do is we want to use a use effect hook here and for now let's just say that this use effect hook fires off every time the page refreshes and we'll just say cons will destructure the user and we'll say superbase superbase.auth.session and that's the user and if that's not the case or just make the user null okay so let's do that um yeah and then let's just console.log and we'll say user okay so let's go ahead and refresh this page and then we're gonna once it reloads we're gonna go ahead and click sign use effect is not defined obviously so let's go ahead and import that all right now it's gonna say use effect it's not gonna say use effect is defined but there we go so currently there is a user as you can see actually do i even need to i don't need to do that i could actually just pop in user here and we should be no no i like the way that i had it i like the way that i had it okay cool now sign in it's because i had already signed in i paused the video signed in but let's sign in okay for you it wouldn't say there's a user let's do kazu cleverprogrammer.com and now i go here and the user right now is null okay but watch what happens when i actually hit refresh so refresh on this page and watch what happens okay boom this piece of code fired off after the refresh it saw that there was an active session and now you do have an active user right over here okay i don't need this object anymore let's go ahead and hit refresh again and this is our user right this is the user this is all of their data and we have access to the email the set the session id this is this user is authenticated we have a confirmation for when the email was confirmed so this is a good and their last signin was detected on july 15th which is today a day after my birthday and so there you have it you have authentication essentially working but what we want to do is authentic this authentication is we don't want to like sign in and sign out here we want to do this kind of at a global level in context and then pass that context around everywhere okay so i'm going to go ahead and just cut this get rid of that and we're going to go and create our context file so let's go here i'm going to create a new folder it's going to be called context okay ah don't put it in don't put it there let's get it out okay so it should be at the global level you should have context inside of context we'll have a new file and we'll call it reddit context.js okay and then in this context file i'm going to paste that because i'll probably i'll need access to that piece of code at some point and we want to do okay export const reddit contacts okay and we're gonna say create context here we'll need to import let's do a lowercase here we're gonna import it we're gonna say import create context use state use effect because we're going to need access to all of those as well from react okay and now we're going to create a function called reddit providers i'm going to say export const reddit provider okay and it's going to have children so children is going to be we're going to wrap our entire app inside of here children and then we can pop that use effect in there actually so there we go and then a couple of other things we can do here as well so let's go const current user set current user let's say and we'll say use state null okay and then here once the user actually exists i'm going to say set current user to be the active user okay and we'll import superbase here as well so i'm gonna say supabase from and let's go services slash clients okay and here i want to do superbase.auth.and we're going to add a listener as well here odd stage change so meaning if you log in or you log out or it's a different user that logs in you wanna track that right away so this is gonna be a actual listener and listen for the event and the auth session and then when that changes we're going to set the current user to whoever is the current user of the auth session so there we have an active listener this will pretty much fire off in real time so this is a good use effect hook to wrap the entire app in so now the entire app will essentially be listening to who the user is okay and now we want to give access to the entire app for this user so i'm going to say return and then instead of this return we're going to say reddit context context.provider okay write a contextual provider and i'm going to go like this pass in children here and here i'm going to say value and we're going to send off the current user okay so this should send off the current user to our entire app all right now so if you're on this page we're going to wrap the entire app in the authentication and we want to do here in order to actually make that happen is we just gotta import reddit provider from contact slash reddit context so once this is imported now we begin the wrapping of the entire app so take this component pop this bad boy right here reddit provider okay and then wrap up that inside of this reddit provider right here now it's going to be like hey it needs a closing tag no problem or sorry let's actually put parentheses here because we need to wrap this up in parentheses okay great and then we can just add a little bit of seo so our tab and everything looks clean because right now it just says reddit dash bill dash blah blah that does not look that clean so let's go ahead and fix that what's this error saying didn't we build context am i misspelling anything reddit context.js did i forget to export i have exports here export cons reddit context okay let's go back to pages app tsx from context let's hit refresh let's actually hit yarn dev because my app might have crashed yep it did so let's hit yarn dev and then let's sit here and refresh we'll give it a second for it to wake up once it's awake we should be we should be good to go that that should be enough for this okay while this is loading okay do we still have an error actually reddit provider give it a component pages boom boom i thought it looks pretty good to me uh the error is happening inside of the context ah okay okay okay okay got it got it god i just wasn't reading the error it's being silly so in my context i'm gonna open a new tab here in context i'm doing something silly so i need to be doing reddit contact dot provider i believe so it's the same tag that opens it and then the same tag that closes it i think that's the problem and then our entire app we're giving it access to the current user or the logged in user or whatever okay ah set current is not defined okay so that is happening in context let's go back and it's set current user not set current so let's go set current user just like that okay let's refresh all right so now we're good okay so now it's doing the thing that it's supposed to be doing in context our app is wrapped in that let's say we'll say user and then we'll say hi so this will tell us that we're coming from the context file let's go ahead to console and we can see if i sign in let's sign in with google boom let's choose this and then our context file right now is null obviously but let's refresh and you'll see that it'll have a user on it boom we have a user okay and when i look at this user i have all that all of that users data right here and so you can see that now the user is actually being passed around and con our entire app has access to context now because the entire app is essentially wrapped in context so that's why the whole app has access to it okay so this is really nice we have this now we need to make conditional rendering happen so that when the user is actually logged in it immediately brings them to the home page rather than the log in page see what i'm saying so let's go to our index dot tsx so pages index.tsx i'll just open a new tab here and in here what i would like to do okay this is a typescript error message which is just it has an implicit type any you could do this and the error would go away but the app will still work this is just a warning okay so this will still work i can just leave that that's fine if they have any types you can give the menu or you can just leave them as this now here we're gonna get our user from our from our context that we've just created okay so let's go ahead and import our contacts so i'm gonna say import a reddit context and we're going to say context slash reddit context and now what i want to do is i want to actually get access to our current user okay and we'll get it from context reddit context just like that okay use context okay so let's get the use context hook as well from react so we'll say use context we can get that from react i believe yep got that hook perfect so now we're using the contacts we're getting the current user from the context and now we can just set the conditional rendering right here and i can actually just say i can remove all of this and i can say is current user if the current user is logged in you see how it brought me to this page right over here but say i was not logged in so i'll do no i'm not current user is not logged in it will bring me to this page right over here so this is now working perfectly right hey you're logged in cool send them to the home page hey you're not logged in send them to the login page now i mean this is smooth as butter okay so we have access a user overall we're passing them around we're very happy with this okay now this fetcher here we can actually put this in context as well and then get it from context i'll actually just get it from context already and then grab this let's go to our context create this and pass it because we'll need access to it actually in a few different places so i'll just go ahead and do fetcher just like that okay so current user fetcher and we're destructuring the fetcher here and then we're just using that fetcher okay so everything should be working as expected if i go in if i click or refresh or whatever everything should be fine okay all right great it's detecting i'm logged in so it's bringing me to the right page that's great as well just leave it like this now really the last thing i want to do here is save and update the user so what do i mean by that if i go to my database and we go into table you'll see we don't have a table called users and we have no users in here but there's a user that's logged in so we want to actually build a database of everybody that's logging in so what we want to do here is i want to create a function that does that for me so we'll call it save and update user okay and what this function will do is we'll update or insert a new user okay so it's going to be a very simple function and this is very cool part about superbase that i really love where you can actually add in a new user in a really cool way and i'll show you that method so first we're just going to add a guard clause and hey if there's no current user just return like just end the end it okay don't even do anything else just end the app and the function and don't run this function all right otherwise what we're gonna do is we're gonna go into superbase and we're gonna go into the users table okay and we're gonna up cert and this means update or insert so it's beautiful because if you have an existing user that just logged in it's not gonna bug you and crash but if that user doesn't exist in your database it's going to create that user and add that user to your database it's not going to create a whole new user it's going to simply go to that user and update that particular user's profile picture i love that about this right that makes it so much nicer and cleaner okay so upset is a function it'll take in an object of what you're trying to create so we're trying to create here is a current user we're gonna get their metadata and grab their meta data.email okay we'll grab their name okay and then oh sorry let's go ahead and do full underscore name and then we'll grab their profile image and let's go all the way to the end and we're going to say avatar url and look at typescript being super helpful right it's saying hey it cannot find name superbase so we already know we didn't import it we don't have to sit here and wait for a crash to happen so i'll say import supa base from what is it services supabase clients i believe okay slash services let's see here yep slash services slash superbase client perfect we got that okay so that's what this does save and update user and now we just want to actually call it we're gonna have a use effect hook here and another use effect hook and we're simply going to basically save and update user okay and then basically run whenever the current user changes okay so let's hit refresh and let's see if there's anything happening here and if there isn't then we can simply go ahead and create a new user or even log out and try to create a new user let's put a console log statement here that tells us whether this line is running or not console.log save user okay so let's refresh here and see what's happening refresh okay so the save user looks like it ran okay let's see if anything happened here if this ever happens where it goes loopdedoop d in in circles like that just end the server and just start it again but end it here and also stop it here and at both places and then just go ahead and do yarn dev again and you should be good okay now let's wait for it to load hope it loads perfectly save user fired let's see if anything happens i'll refresh here we'll refresh all tables as well still nothing so the problem we're actually facing here is since it's from right it's trying to pull an existing table so it's not actually going to create the table for us so we're going to need to actually create a table so we'll create a users table and it'll have email and name and profile image so i imagine this could be text this could be text and this could be text as well because it's a url all right so we'll hit create new table i'm going to call it users and then we're going to say created we could have a created now on this i guess that's fine that shouldn't hurt and then here we're gonna say name and this is going to be text and then we're gonna go ahead and add another column and then we will say profile image okay and this will also be text with a capital i by the way and then we will add we can actually yeah that's fine that's fine profile image is fine and then we'll say email okay and this will also be text okay great now go ahead and save let's try to run this now so i'm going to refresh here and let's see if it fires off and it registers a new user so let's refresh save user did fire off let's say let's refresh our whole page let's see if it works boom there we go we just got a new user and now watch this what we can also do is we can have it fix on a specific conflict okay let's give upsert another object here so let's give it a second argument and this argument is going to be based on how it's going to resolve the conflict and we'll say on conflict email okay so when it's time to resolve the conflict resolve it on email so there's two arguments that we've given it one is this okay second one is that got it so now it's gonna once it sees the email that's what's gonna use to resolve the conflict and let's give it a try so let's try changing the name to mahatma gandhi hit save hit refresh here let's go to super bass let's refresh and since it has caused a clever program or email it should only update the user okay so let's refresh here and let's see if it has updated the user or not so the reason why we have two of these here right now is because we didn't add on conflict right away so that's why we have it but if we go and right click and we delete this row right now and now if you refresh or you refresh your app as well so it fires off the save user function it's not going to duplicate just make sure your save user fired off and it did and you can see it didn't duplicate the user if i refresh you still won't see any kind of duplication hopefully there we go perfect okay now why mahatma gandhi isn't getting updated in here is because i have this function to only fire off when the current user changes and the current user isn't changing because the current user is still me and it's been me the entire freaking time so let's remove that for just a second and let's say there's no dependency and it should fire off every single time we refresh the page so let's go ahead and save this let's go ahead and refresh this let's go back to our superbase let's hit this nice little refresh here so we don't have to refresh the whole page let's refresh and refresh again let's go into email and what we need to do is we need to actually enable is unique because once you do that upsert actually starts working so let's go and enable because we want to make sure that the values are unique if they're not it wouldn't make sense let's go ahead and save it alright so let's go ahead and save this and let's restart and we should have a user with gandhi gmail.com inside of our supa base with this name and there you go the first user is rafikaze which is perfectly fine this is exactly expected because i logged in and then i changed it to mahatma gandhi and i can see gandhi at gmail.com let's try to keep the email the same so we're gonna go ahead and do this whole thing right here and we're just gonna say dot email and let's see if it can update my name so i'm giving it my exact email address and let's see if it knows how to update there we go so upsert work right boom it's updating my name over here um based on just matching the email so that was super cool or it updated it right here cause you cleverprogrammer.com so upstart is working perfectly normally that was a check okay now let's go ahead and just do this and let's change that to full underscore name okay and now it should be good if i go ahead and refresh here it should update mahatma gandhi from whatever it is right now to the current user which is rafikaze and that perfectly over here rafikaze smooth like butter and there you have it we can now add users when they log in we can update add and update a user inside of our database based on logging in so our authentication and our user tracking is working perfectly now we need to start moving on to being able to add comments but first we need to work on being able to show the post detail page so for example when i go to this app right here and if i click into a certain post i can go inside of a post right so this is a detailed view of a post so that's what we're going to build so now let's go ahead work on making that post detail page so what i'm going to do is go ahead inside of my pages we will go inside of i will create a new folder here and this will be called let's create a folder this will be called post so this will be a page for a post okay and then we're going to create a new file here okay and this file we're just going to call it id okay dot js just like that because that id is going to be pretty much dynamic every single time we come to this page okay so this page is going to be a fairly simple page let's go ahead and just create the front end for this so we're going to say post view and we'll say return and in my return i'm let's just return a div for now and in this div we will add a h1 that just says post view okay or post detail or whatever let's go ahead and say export default post view and um yeah there that's it so now let's see if we can actually route to this page okay so we're gonna we're gonna try that so let's see if i can go to this url here and add a slash post slash one okay and let's see if it actually routes us to it boom there you go we're getting post detail so the routing is working excellently so now we can actually start styling it and showing everything here so first of all we're gonna have the post actually show up so we're gonna import the post component so import post from and we'll import the post from i believe common so let's go back to components let's go to common and let's go post so the first thing obviously it should show is the post so there we go so now it's showing us the post now how which post is it going to show we need to actually give it the selected post let's destructure this and give it the selected post now where selected posts coming from so the selected post can actually come from the reddit context okay so we can actually add that in there so let's go to context okay and then in context we're gonna go ahead and say selected posts set selected posts just like this and we're gonna set it to null and the start because there's gonna be no selected posts in the store obviously okay and current user yep this is fine so now how are we going to that what the selected post is first we're just gonna pass that information around so we're gonna pass this through our app selected post and this hook for set selected post now let's go ahead to our post component so let's go components comment post and inside of this component we're now going to get access to some of the posts okay so we're going to go ahead import a few things that we'll need access to i'm going to import use context from react let's import reddit context oh wow it actually can pull it up that's cool okay import reddit contacts from right there and then let's do reddit spider import reddit spider let's see if it does it boom it does okay so we're gonna actually we don't need we don't need the provider we just need the context so entire app is already wrapped in the provider so we don't need we don't need access to that and then we just need to get the use router so we're going to say from next slash router okay great so we have access to all of this stuff well now what now what we're going to do is let's get access to the router we're going to say use router and then we're going to grab our selected post so we're going to say const selected set selected post we're going to grab that hook so we can actually set which post is the selected one okay don't need to see the upvotes anymore set selected post okay and now we're going to create a little function it's going to do this for us so i'm going to say navigate to post and we'll call our hook set selected post and it will destructure the id title content author created ads upvote down vote okay and then it'll push us to post slash the id okay wherever whatever the id of that specific post is okay and then when we want to call this is we just want to call this on click so if we go down we have so this is a specific post right so since it's a specific post we already have access to that id we already have access to that title we already have access to that author so we already have access to all the information about that selected post okay we can even like just destructure the selected posts if we wanted to okay or destructure this but we don't have a name for it so that's why we're manually writing it here so it says selected post and then we're just gonna have an on click here so what we want to wrap the on click to is right above the author okay we can add we this positive this is what we're gonna add the on click to so we can say on click and then just navigate to post okay so let's give this a try and let's see if this works so we're having an error which sets a selected post so we're having this error in the id page right so now we we will need context here obviously because that's where it is so let's go ahead and get import use context from react and then here we're going to say we're going to go ahead and say const set selected post is from use context reddit context okay we got to get the redis reddit context as well so we're going to have go ahead and import it so i'm going to say import reddit context from context reddit context okay so now we have access to set selected post and now it'll actually be able to pull it up in here so let's go ahead and refresh this see if you have any problems set selected oh sorry selected post is what we want to do selected post so we're pulling that out and we're setting that over here okay so let's go back to our home page and now let's pick up post build medium with typescript so let's give that a try i'll click into it and now it says created at is not defined and the error is happening in postpost.js so let's go to post and it says create it add is not defined simple we just have to destructure it here because we already have access to it from the database okay so let's go build medium with typescript now it says upvote is not defined so it's because of votes and down votes will plural pluralize it let's click now there we go now we can actually navigate to this new page and you see it's even pulling that specific post id so if i go here to another post see it says post three pull another post you can see it says post one right so we can see that it's working exactly how we want it to we are now able to navigate to that post pass that data through the route router and then the router pushes us and takes us to that page with that specific post okay so let's go ahead to our id page and let's keep working on it let's go ahead create a little bit of styling here okay so let's go to this page let's get a little bit of styling so it's not just touching the top so much so let's go ahead and import header okay so we're gonna say import header from and we'll get the header from our components slash header so now at the top we can actually just put our header so let's go right here and i'll say header great our header is showing up now at the top that's perfect okay so we now want to also create a wrapper around this entire thing so inside of this div i'm going to say class name i will do style.wrapper okay and it's gonna error out because it doesn't know what style is so let's create a style and this is going to be the wrapper okay we're gonna make it background black give it a text white just so it has just so it has like some breathing room okay and then the post we're actually gonna put the post inside of a container wrapper so let's put a container first let's go to div and we'll go class name and we'll say style dot container and we'll add this post inside of here i'll format it a little bit okay so let's go ahead and create styling for our container so we'll do mx auto flex give it a full width let's go like this flex 1 and then give it some spacing and then we'll give it padding on the yaxis so of 5 ram about and then padding of 6 on the xaxis okay there we go so that looks better and now we're going to have a container wrapper underneath this i'm going to say div say class name style container wrapper let's wrap this bad boy in there okay and let's create the styling for this now container wrapper and this is gonna be just full width space and then we're gonna say large what's happening here okay now it's looking great okay so now our post is coming through we're getting all that post data and we're able to show it so let's go back home let's go ahead and click this and there we go we can actually see everything passing through okay through the url parameters so this is the selected post essentially that's what's happening here okay now in the post view we wanna do a couple of more things so we're gonna go ahead and add a router say router use router obviously so let's import router if we don't have it import use router right from next slash router so there we go and now we're going to create a use effect hook and this use effect hook is going to say hey if the selected post is i want you to just push me back to the home page because if there's no nothing then push me back to the home page don't keep me on that page because otherwise they're going to show me like a post with an n or something like that and that just looks ugly we don't want that okay use effect great let's go here okay so yeah whenever it's a whenever it's like and or is broken it just takes us back to the home page so for error purposes it makes our apps makes our app just like a little bit cleaner so we got the styling for our post done and now inside of the content wrapper we want to have posts we also want to have i'm going to just create a comment here we also want to have save comment okay so it's gonna be or like basically new comment okay so we'll just call it save comment okay this will give you the ability to add new comment so that component will need and then this another component we'll need will be called comments and this will just show all of the existing comments we're going to need both of these components right here so first let's go ahead and create the ability to read comments and let's go ahead and do that now now let's add the ability to retrieve comments so we'll create a new folder inside of components and this folder will be called comments comment section and then inside of this folder i'm gonna create comments as a component okay so that's thing number one let's do const comment comments and we'll say return and we'll say div and then just like the usual we will actually put a h1 here i'll say comments let's export this as default comments and then the next thing we want to do is we want to create an api back end like back end api request endpoint for this okay so inside of pages go to api okay and then inside of api what you want to do is create a new file and say get comments dot js okay so what we'll do here is it'll look very similar to our get posts we'll just have a few different changes okay so let's import super bass first i'm going to say soup from and we'll say services super base client and then we'll export default async we don't even need to like this function and then here's what we'll do we'll try the following and we'll catch the error and we'll just if there's an error it's a serverside error so we'll return error code 500 and then we'll just send the error saying hey error fetching comments okay and this is an object all right so we've error handled and now we'll say hey get me the query okay we can console logger just so you could see it and then we're gonna get the data and we'll await superbase.com.from comments okay we need to create this table so let's just do that now before we forget let's go ahead into let's say new table okay so i just clicked right there new table and then let's go ahead and say comments and comments will have a couple of columns here so we'll have created at obviously we'll have author author is just going to be text in this case we will have we will have text so like what you want to actually write that'll obviously be text then we will have post id okay and then we'll just leave that to be integer eight and then we'll have user email okay and this will also be type text okay great so let's go ahead and hit save here save awesome so now we have comments saved let's just add a comment so we'll say author is rafikaze wow this post is absolutely unbelievable okay and we'll say that this is for post id 2. so we'll say this is for the build medium with typescript post and if i actually look at the url if i full screen this you could see that id is two there so i'm gonna attach it to this one manually so i'll say post id two and user email i'll just write this manually as well later obviously we will code it up so it's all dynamic and all that good stuff so we've added a comment okay and then let's go and select all comments we will inner interjoin the comments with users so it will interjoin it on probably email or whatever actually we'll here here's what we will enter join it on we'll interjoin this on post id okay and we'll give it the post id from our query parameters so from our front end we'll hit our back and we'll hit this end point at api slash get comments we'll hit this endpoint and then we'll actually pass it in the require parameters what that posts id is from here so we'll pass it down into requests and then we'll grab it from our request and we'll just say hey enter join these and match it on post id okay and then so this will grab all the comments and then we'll just say res status 200 and we'll send okay beautiful so our endpoint is now done now let's go ahead and retrieve these comments so now let's go inside of our comments function so let's go here into components comment section comments and we're gonna retrieve it here we're gonna use swr here as well so let's go ahead and import it so we're gonna say use swr from swr okay we're gonna also import a few things like use of state and use effect from react and then inside the comments what i want to do is i want to basically follow their state so i'm going to track their state here with this and it'll be an empty array at the start okay and let's also get our fetcher from our contacts so we'll say this reddit context and let's go ahead and import reddit contacts okay from let's see where it's at reddit contacts from context reddit context there we go so we're getting our fetcher and now we can actually just do this so data and we'll say use swr and we'll hit our api endpoint so we'll say api slash get comments question mark post id give it the actual post id let's make it template literal so give a little back tick here and then we will use swr let's hit enter here let's give a comma let's give it a fetcher and then let's give it a refresh interval of 200. okay so what this will basically do is we'll pull the all of our comments through this and then now we wanna call our use effect hook and inside of our use effect hook we're gonna say hey if there's no data just return because there's literally nothing to do otherwise set comments to whatever is inside of data and run this only when the data changes because you don't need to keep running it again and again so if a new comment gets added to the database then run it if a comment gets edited then run it otherwise don't run it okay and now we should have actually access to all of our comments and should be able to show the comments at this point okay let's just double check everything comments will also need access to post id that's an important part that's how we're giving this post id right over here right there it's coming from here and then we can just loop through the comments or do whatever we want or show the comments so let's go ahead and console log and we'll say comments okay and let's see if anything shows up here so let's look inside a console okay and let's hit refresh and see if anything shows up in the console at all let's put a little emoji here i'll say cookie let's refresh let's go ahead let's make sure that the comment section is actually like available and showing up because that's one thing that we might not have done so we have this commons component now we have to just make sure that we're actually running this so let's go to our id so let's go to pages let's go to post pages and let's go to id okay and there we go this is our comments component right here we can just now call it okay and then what we want to do is import it import comments from component slash okay and another dot dot components slash comment section and then we're going to say comments the capital c and then we want to pass our comments the post id so let's go ahead and give it the post id and we'll say selected post dot id okay that should do the trick so now let's click into this boom use context is not defined but we didn't get any errors before that so let's go back into comments and let's import use context so we're gonna say import use contacts from react actually we can just do it right there let's get rid of this here let's hit save and refresh okay let's go back to our home page all right let's click build medium with typescript and there we go okay we are getting we're getting something something is happening now at least comments is now showing up here so that's a good start and we should soon be getting our actual comments as well and then we should be able to show them too eventually all right to debug this issue let's just go to get dash comments here and let's also console log data and we're only going to see this inside of our console right here so keep an eye out on your shell okay and let's go home page and then let's click build medium with typescript right because this is the one that has id of two and you can actually see that we're getting back null so on our back end we're actually getting back now so the problem is happening somewhere on the server side and we have to debug we're going wrong somewhere right here because we're getting the post id 2 and that's correct but we're going some wrong somewhere all right so if we try to actually debug this one step at a time like what this error is let's comment out this eq line and let's also comment out this let's not let's let's oh let's not do any inner joins and let's just select from the comments and let's see if we're getting back data from the comments and it actually looks like we are so we are getting back comments is the inner join and this eq is not working let me remove this here we don't need to parse in the reason why this is happening is that we need to actually create a relationship between these databases so go ahead go to comments go to user email hit edit column and then once you're inside of here hit add foreign key relation and then what we can actually do is let's add this to user's email one second yep so let's create that relationship between the user email to the actual users that are that is in authentication their authenticated users and their email okay let's hit save and that's the relationship we want to have there boom now once that relationship is created if you come back like magic it's already working super beautiful so we're getting back the actual comments that are for this specific post because we just had to create that relationship between them now that we're good with that let's see i can actually see if i show you this cookie over here i'm like printing that comment it's actually getting printed out just fine so let's go back to post id okay and when we call comments here seems like the comments are showing up in the console log but what we want to do is we obviously want comments to actually show up on the screen right so let's go ahead and style comments now in a way where we can actually see it on the screen so i'm going to go com components comment section let's go to comments and let's continue styling it now how do we actually show it on the screen let's essentially build a comment component that's going to allow us to see it on the screen let's just build it raw just pop it in here and then go from there so if i look at the final app and we go inside of a post here you can see that i have some kind of wrapper right inside of that i have information about the author i have an image i have the date i have these up and down votes and i have these actions right there and then this thing right over here this thing here almost imagine like this is a component this is like one comment okay and then that one comment just keeps repeating over and over again for however many comments there are and then outside of that entire thing we just have a wrapper okay so let's go ahead and create our loop already so i'm gonna say if there are comments then make this otherwise don't make this right so let's go ahead and do comments and i'll say comments comma id and i'll do this and we'll open this bad boy up actually we'll have to close it too so boom right there okay and then we write whatever code we want inside of here so let's start off with an image and let's import next image if we don't have it yet to import image from next image and then we're gonna give it comment.user's profile image so we have access to that comment so let's grab that comment users because we have that reverse relationship now and grab that user's profile image and then class name will do style.profile image and then layout will be fill okay just like that okay great we do need this okay so we're closing this paren here what's the error all right let's close the image tag here so we're gonna go boom now the image tag is closed now there should be no more errors let's hit refresh and let's see if any image shows up here okay and just in case if our entire thing crashed you can always kill it and come back and yarn dev it as well and that should get it back up and running all right now we're getting a new error it says style is not defined not a problem just go ahead here let's go ahead con style okay and now that style is defined that error should go away swiftly and then we're going to create styling for this in a second so let's take a look at this page that doesn't look like the right page okay let's go back to our home page and then go to build medium with typescript i'm gonna click into it now we're getting an error that this image right here is not configured in our next.js so let's go ahead and do that so let's go into next config and right here simply add that in and hit save and that error should go away so whenever you update the config you'll have to kill the file and then you'll have to yarndev again okay so that's something you always have to do whenever you update next config that's the only way it's going to show changes sometimes you have to do that when you're updating and environment variables as well okay so let's go back to the home page and then once we go back to the home page then we're gonna go ahead to build medium with typescript let's click it and there you go now it's showing the data and it's showing the image granted that image is a little bit bigger than what we're going for so let's go ahead to our comments and we see that the image is filled now let's style the image so let's go ahead and go profile image and the styling that we're going to have for a profile image is just going to be object contain okay and the main thing we want to do around this image is we want to add wrapper for all of this so we're going to add a wrapper right around this and i'm going to say class name it's going to be style.profile image container okay and we'll wrap this in that way and then let's go ahead and style profile image container so let's go back up boom and the profile image container the styling we're going to have here is height small height we're going to give it a small specific width we're going to make the overflow hidden rounded is going to be full and we're going to make it relative i just had to restart my server and we have our comment and our image showing up okay the styling is showing up it's a small little circle so that's great now i want to actually create a post info container so we're going to create a div and this div is actually going to wrap up this entire bad boy right over here let's go and boom like that okay we're going to give it a class name style.postinfo container and then let's go ahead and just style this so we'll add it here and then post info container is going to be flex we're going to give a gap and we'll do a point for rem on this so we got our info container now inside of our info container we want to add everything else like the author author name all of that stuff so let's go get outside of this div and we're going to add a span tag span tag and in this we're going to go comment dot author and then we'll put a dot here like that okay boom we got comment.author rafikaze we got a little dot we'll do another span tag and then this one is going to be for the date so we're going to dynamically pull dates instead of hardcoded dates so we're going to use time ago and we'll need to import time ago so we're gonna go ahead and say import time ago from javascript time ago okay and it's time ago with a capital a and we'll need to install this because it doesn't know what this is right now javascript time ago so in order to install this let's just do javascript let's go to packages on the left hand side and just do javascript time ago and let's see if it comes up yes it does so let's install it and then that error should go away soon okay now that error went away let's go back a page let's go to the home page of the app and then let's go ahead to build medium with typescript okay now it says time ago is not defined so we're gonna do we're gonna do the following we're gonna say const time ago add default locale okay and we're gonna make it en and let's also import this i'll say import en from javascript time ago slash locale slash en okay so i've set the default locale to en and then we'll say time ago new time ago and we'll give it in us okay all right no locale data has been registered for any of the locales so if again if you're having errors just go ahead you can restart your rapple you should be good now it's saying hey these can't be objects they're not valid so let's just say let's just say hi here and let's see if that works okay and let's go back to our home page and then let's click it there we go our high's showing up very good now what we want to do here is instead of hi obviously i want to show the time so we're going to go ahead and say time ago.format and we'll say new date comment dot created at and let's give that a try let's go back to make sure you click home page first go to home page first and then click build medium with typescript okay now it says invalid number all right so we want to do is we want to pass in now and i'll give it a twitter like styling for the time okay and then let's go back to home page and then click build medium with whatever now it's saying a different error it's saying invalid time value so we said format new dates common.created at and we said twitter now invalid time value all right so in order to not get just stuck on this what we're going to do is let's just comment this out for a second so we're going to go ahead and i'm just going to comment this out so let's go like this and then let's go here let's end the comments and we'll set that so let's comment this out for now and let's just keep making progress okay so let's go to build medium with typescript okay we see rafikaze i'm just gonna say june 15th for now that should show up right there okay great so we have that now the next thing we want to do is we're done with the span tag this this is also in a span tag so we're out of that okay so we could go span wrap the june 15th and span remove the span from here we're essentially just commenting out that time ago thing okay but keeping everything in nice in a nice little span tag okay okay and next up what i want to do is i'm going to create a new div here okay let's see we're closing all the span text all right let's just stay inside of this div because otherwise we're going to have an error so let's create a div here and this is going to be comment text so it's whatever the text of that comment is so you can see wow this post is absolutely unbelievable so that's showing up now that's very good let's create another div here and we'll give it a class name of style.icons okay we'll give let's go in here and we'll say span and i'll say class name style that icon okay and then we'll give it an upvote icon here we'll go up vote icon okay and we'll have to obviously import this so let's go ahead and import our upload icon and download icon so let's just get them both boom get access to upload icon and down vote icon okay and now let's if that ever happens where it says hey i don't know the ideas just go back to the home page and then click back in you should be there okay so we got the vote icon now let's get our down vote icon to show up as well so we'll do span here i will say zero we will do another span tag here and then we'll say oh this is class name style dot icon okay and then inside of this span tag i'm gonna say down votes icon just like that so now that should show up as well okay so boom we're done with the with that part of the downvote icon okay let's create another span here span tag and then inside of the span tag we will have a class name we'll say style.reply okay and then in here i'm going to have a chat alt icon and i'll give it a small height so it's not too big and a small width okay and then we'll end this and then we're going to go ahead and add another span here and we're going to say reply and for chat alt icon we need to obviously import that so import from and i think this one comes from hero icons if i'm not mistaken but let's just double check yep it does hero icon slash react slash outline okay so now okay again get this error no worries go back to the home page and then click build medium with typescript and there you go okay now all of this is showing up now what we have to do soon is styling but for now let's just keep going let's finish this part up okay let's create a few more span tags here and we're gonna say class name is style.icon and this one is going to be give the next one is going to be share the next one after that is going to be save and then we'll have follow okay so that and now let's create styling for icon because we're seeing that in too many places and we haven't styled it yet so let's go ahead and style it and all we're gonna do here is really just give it a color of a little darker gray so let's do that for this and then so that should style it and then we're going to also style icons we'll say flex gap of 0.4 ram there we go so that's looking better now we want to obviously wrap the entire thing as well pretty soon and make sure that's that's all good so we have our post info container and then we want to wrap the entire thing inside of a commons container so we're going to go ahead and go to div say class name and i'll say style.comment container all right and we'll take this whole thing for the common container and just go ahead and wrap it okay now let's go ahead and style our comment container so let's go here comment container and for the comment container we're gonna go ahead and add a little margin at the top like on the yaxis we'll give it one rem we'll give it flex and flex column and a gap of one rem here as well okay and now that sign if you ever see that sign that usually means the rebel is dead so let's just simply kill it and let's go yarn dev again okay and then we will wait for it to come back to life then we should be good okay let's just hit let's just go to the home page this okay great so i have all of these things here common container the styling is not showing up right now which basically means that it's most likely that the rebel replit is down i'm gonna give it a background of black or white rather and nope it's not showing up so that just means the replit is down so we got to get the replit back up all right so when the replit sometimes goes down make sure you hit stop right here as well okay go ahead and hit stop because now it's creating these different ports and whenever it does that just means something bad's about to happen okay so kill it here hit stop here and if none of that is happening just hit refresh as well so it's just a clean slate you're restarting it from scratch and now it says connected at the bottom which was a good sign okay and i copy every time before i refresh i copy my files that way if something happened i can just select everything and paste everything directly from my clipboard all right so the post info container actually ends right underneath right underneath the span tag right here with the date okay so let's go ahead and end that real quick so we're going to go ahead and just cut one of these divs because we don't those don't need to be there and we're gonna paste it right here because that's where it belongs okay and now boom look at that the whole thing is just looking already way better okay now all the styling everything is making sense now all we need to do is add this entire thing inside of a wrapper okay and we don't need this h1 here anymore okay let's go ahead and add this inside of a wrapper so i'm going to say div okay and end the div outside of that for loop so let's end that right there actually it was already ended wait now i'm just being silly hold on sorry this is the div that's gonna be the wrapper and this div can just pretty much be empty so it doesn't even need to be called the div just go ahead and make it empty here okay this div is the more important one and this one is going to be called class name style.wrapper and then we're going to go ahead and style this so go ahead and say wrapper okay and the styling for the wrapper is gonna be we're gonna give it a background and then a padding of four okay there we go so now the comment is showing up beautifully okay and so if we have multiple comments they're all going to show up just like this okay if we look at our final version of our app the final version of our app looks very similar besides that this is gray here and this isn't and then reply is also incorrect so let's see what's happening here we probably need to just style a couple of more things so we styled icon icons and now we'll need to style reply because we didn't style that yet so let's go reply and we'll say flex item center gap of 0.2 rem text and we'll say 818384 a little gray color and there we go now reply and everything is looking great that's awesome okay now our comments are looking really nice okay is there any styling left for it that we have to do we have profile image we have profile image container profile info post info container icon icons profile image wrapper reply so styling wise we're all good here and now if we have multiple comments this should show up very nicely so let's insert a new row let's go ahead and say author is david riccosi we will say this is my fight song let's put a glove here and then post id will be two so it'll be associated with the medium with typescript post and the user email will be david cleverprogrammer.com we will hit save and there's an error ah because we probably don't have david inside of our database so let's go here to our tables and let's go look at our users who do we have we have gandhi at gmail.com so let's go ahead and copy that email and let's we can actually even view data which is really cool so let's go ahead and paste this let's hit save okay that worked beautiful and look at this it's showing up this is my fight song that is great that looks really freaking cool too and it's pulling the data from our database and we figured out the error with the time ago saying the error that was happening actually is it's created there's no such field as created at like this there is a field created underscore at and now what we can do is i can go ahead and un comment this bad boy right here and it should work okay boom there we go so now it's twitter style so it's like this comment was posted one minute ago this comment was posted 58 minutes ago so that looks very nice so now that problem is completely solved as well and there you go the now we have the ability to get the comments of any given post beautiful now pretty much one of the last things that we're gonna add is the ability to actually add a new comment let's go ahead and do that all right so now the last thing we're gonna work on is the ability to save a comment aka write a comment so this component right over here okay so you could call it new comment you could call it write comment save comment whatever you want okay so this is what we're going to be making right here so when i'm thinking that i'm immediately thinking we're going to be creating a new component so let's go inside of our components here and let's go inside a comment section let's create a new thing new file and we'll call it save comment dot js okay and now inside of save comments obviously we're going to do save comment okay and we're going to destructure post id here and let's go ahead and do div div let's go ahead and do h1 save comment and let's go ahead and export default save comments okay so now we have this let's make sure that save comment is actually showing up where it needs to so save comment shows up in our id page okay so basically let's go ahead to our pages and let's go ahead to our post pages and let's go ahead into our id page i'm going to open a new tab right here and let's import save comment from and we're going to say components slash comment section slash save comment and then we just got to render the save comment component out right over here like we added that little note for ourselves earlier and raise is going to go ahead and say save comment and let's render that out and hopefully we should see something along the lines of save comment okay and this should show up on the post detail page so let's see do we see it save comment anywhere no we don't okay let's go back to the home page let's click back into this okay so i don't see save comment anywhere so let's go check why that's happening so let's go to save comment i clearly have an h1 that says ah because i'm not actually returning this as a component so it's not returning it that's the problem so there we go now save comment is showing up okay so let's go back to id okay or sorry let's go back to save comment now and let's actually make this a pretty component all right so i'm going to remove all of this here okay so we're going to have a div and the div is going to have a very simple styling here so we'll say class name and text small so it's just going to have small text i'll say comment as and we'll put an empty space here okay comment as and then we'll have a span tag and we'll make it we'll make this gray or some color here 4 2 9 6 ca and we're going to say if the current user get get the current users full name here okay and this is just optional chaining so our app doesn't crash just in case we don't have access to our current user remember whenever this error happens go back to the home page and then simply go ahead go down and click the user okay so not a big deal if that happens okay so go ahead home page and then go from there okay so now we're getting this error that says current user is not defined so that's not a problem we just have to get access to the current user okay so how we're going to get access to current user is we can actually get it from our contacts so let's go ahead here we're going to say const and we'll just get access to our current user we don't need is loading okay so let's go ahead and import this guy as well so our current user we need to import context right so let's go ahead and import context we have access to it we need to import use state and use context from react so let's get those because we need to get this use context here right now we'll have access to current user that's not a problem let's simply go back again to our home page then i'll go back to that specific post and click it and we should be able to see our current user so let's go ahead refresh okay there we go so now we can actually see our current user full name right so we're able to actually get access to that thanks to medium context now let's go ahead we're going to need to keep track of a certain state which is going to be our input state so let's go right there and in order to keep track of it obviously we're going to need to go inside of our text we need to have a text area for this so we can actually show the text so let's create our text area so let's go down inside of our inside of our text small and then we're going to create a wrapper first actually let's go ahead and create a wrapper for this entire div and yeah let's wrap it in that okay let's go ahead and style that and i'll say class name and we'll say style.wrapper okay and then we'll create style con style is equal to and then for wrapper this is the styling that we're going to do here i just want to speed it up a little bit guys honestly because it's quite a long tutorial right so i want to just fly through the styling because there's nothing new at this point but we just need to cut the finishing touches so we can get this app rock solid okay now let's go ahead and style this wrapper so we have this style so you can see it says comment as rafikaze and it looks really clean and then we're gonna need the text area box inside of here as well so i'm going to take that text area box and i'll explain this code to you as well but i'm just going to speed up a little bit so boom let's put text area right there this is just following what we're typing in the text input so that's it this is giving it a style we're setting the columns and rows to a certain size and then we're just saying hey placeholder what are your thoughts this can be a selfclosing component so we can just put that slash right over here and there you go okay we have this guy text is white so we can't see this so obviously we need to style this so let's go ahead style input and the input styling actually is going to be the following so i'm going to go here we're going to go there paste okay so input styling is going to be rounded we're going to have borders around it so you could see those like borders right there's obviously border radius action going on as well that's why we have rounded right there we have a color for the borders it's just like a not a white border but like a grayish we have a background color for the border as well so that's why you see this in a grayish background gray dark black whatever and then we have padding padding left and then we have small text white now when we write in here we can see everything so now it looks a lot nicer so that's what we have for the text area that's happening okay and then what we need to actually do is just go ahead and create a comment button that when you click it actually saves the comment so i can actually go ahead and just do save comments let's make sure we're importing save comment as well so we have access to it so let's go at the top and oh no actually we're in the safe common file so obviously we have access to it right so on click so save comment guys is going to be a database function that we're going to have here okay and so let's go ahead and create that and i'll just walk you through what it does here so again nothing new so that's why i'm just going through this faster so we don't need to care about loading nobody cares okay you could have loading here but you honestly don't really need to okay and what this does is it will go into the comments database it will insert the comment based on the author the text the post id and the user email and then we'll set the input to empty once we're done so that's what this function does and then we run this function when you actually click the comment button so let's go back to our home page here and then let's go to build medium with typescript we could see all the comments related to it we can see the comment button let's go ahead and style this because it looks not doesn't look very pleasant right now so let's go ahead and style comment button give it a rounded full certain gray color font is bold right so there we go now comment looks better and let's just say yo does this work okay let's go hit comments and then let's see if something happened so i'm going to go ahead and try to refresh this page and fingers crossed let's see if it works if it doesn't then all good we'll see if we can make it work okay so let's go back to our home and then once we're on our homepage let's click build medium with typescript okay so that did not actually work and add our comment so let's let's see what went wrong here okay so save comments input set inputs okay we have our current user let's go there so on click we're gonna run the save comment function that's interesting let's go take a look at our database let's see if there's any comments added okay no comments were added interestingly enough so i have let's just walk through the logic of this i have my post id from the route i pass my post id in to my comments i have a table called comments so that's good i'm inserting the author name the author full name the text is the input that i'm typing in here so what's actually happening let's just go ahead and inspect and see if it's giving us see if we're getting any errors here so let's go ahead and write test by comment it looks like we're getting some errors ah it's a super bass is not defined so i haven't i need to actually import super bass okay so there we go super bass let's try it now okay let's go ahead and say does this work and let's go ahead and comment that looked a lot more like it actually let's refresh yes the comment came in does this work okay let's go ahead to the home page again let's come back to this and let's now add test and let's go comment okay and then let's go in our super base let's refresh and see if test came through all right so apparently post id is blank so it doesn't yet know what the post id actually is so let's see why that is happening and why it doesn't know about the post id so i will console log here and we'll console.log post id okay and then let's go to the home page let's go here and let's see if post id it says it's undefined interesting so where we need to probably pass at the post id so let's go here and we'll say post id selected post dot id so let's just make sure we're passing save comment that from our id dot js okay let's go ahead and say now the post id is two very good let's say test let's add the comment actually let's say cookie eater and let's add the comment nice look at that you guys if i go back to my database and refresh this you'll see that i have cookie eater post id is actually two and it's showing up how beautiful is that so we can go to another post here i can say hi let's hit comment and look at that it's showing up wow let's hit it there we go guys this was absolutely phenomenal if you've made it this far you're an absolute champ i just want to say that i appreciate you and your beautiful face so much make sure to smash that like button so this video goes out to everybody and i'll leave it to you as a challenge to see if you could add the upvote and down vote functionality and yeah see if you can actually make that work okay that's gonna be a challenge for you and that'll let you take your game up to the next level but all of the concepts have been explained everything and how it works has been already explained so i will turn that over to you with that said i love your beautiful face thank you so much for watching and following along as always i love your beautiful face this is qazi and i'll see you in the next video