in this video you'll build the discord web 3.0 blockchain app using next.js you'll learn how to set up and run a decentralized database node with gun.js we'll use the context api to manage the state inside of react.js you're also going to add authentication to this app just like all the other apps using metamask of course we're gonna be using sanity as our backend database you're also gonna be using grok to query in this database and lastly we're gonna deploy this app to the web you know it using versailles with that said if you're excited i'm excited now before we get into it go ahead and smash that like button and if you do here is a picture of a panda i always got to give you guys something special okay turn that thing blue let's keep going all right now let's go ahead and demo the discord app so check it out look at this it looks just like discord and now if i go ahead and change my channels on the side look at that little nice little transition and that bubble effect that that happens it's a nice frontend effect now i can go to different channels also it requires me to log in and authenticate myself with uh metamask so let me actually go ahead and log in cool now that it's allowed me to get in let me go ahead and start clicking the different channels that are available to me so i can actually click the build space channel or any other channel that i want let's go ahead and send a message so i can just send a message there you go i just said hello all right let's say hey what's going on this is qazi boom so you can see i can actually send messages i can send messages inside of different channels all of this is actually being run on decentralized node using gun.js which is super freaking cool so we are back and it's kind of happening in the blockchain and then we have also our own backend with sanity storing our users and the channels on there as well with that said if you're excited here's one cool thing i'm gonna tell you for this video your instructor is gonna be a worldclass instructor his name is lance and he's one of our boot camp instructors at clever programmer teaching the front end mastery boot camp and um you know what if this video doesn't get a thousand likes we might go ahead and fire lance he might not make it okay so his job depends in your hands this is for lance guys this is not for me anymore this is for him with that said i'm going to send it over to him and you are going to start building this app right now all right lance here let's go ahead and get started i'm going to be coding this project today so what we're going to do first and let's create our project folder and let's call it discord clone blockchain once that's done let's head over inside that folder and let's set up a couple things here so real quick i'm gonna set up three folders the first one is gonna be our client folder which is where which is where our next js app will live then i'm gonna be setting up our server folder followed by that let's set up the studio folder beautiful once that's done i'm gonna head over to my vs code beautiful so once i have all that set up i'm gonna go ahead go into the client folder and let's create our next js app so i'm gonna do npx create next app at latest just like this hit enter boom all right once that's loading i'm gonna head over into i'm gonna leave the clan folder and head into the studio folder let's go ahead and set up sanity right so just like before if you guys watched our twitter clone video we're gonna go ahead and go to cindy.io cleverprogrammer and here are the instructions to set up sanity right it's important that you guys make sure you have the cli tool as well as when you do send the init what make sure you put the code coupon clever programmer because you're gonna get a bunch of free stuff provided by sanity so make sure you do that thank you sanity so i'm gonna go ahead and since i already installed sandy i'm gonna do sanity init boom all right we're setting up a new project i'm already logged in so i'm gonna keep the project name the same i'm going to say discord clone blockchain now it's going to ask you what kind of project this is so i'm just going to say clean project with no predefined schema we're going to be making our own all right next thing let's head over to our server folder in the terminal and let's just set up our server with yarn you guys remember this is a decentralized chat app right it's a discord clone we're going to be making a decentralized discord app right so what does that mean that means all the data from our app is not going to be stored in one centralized place right it's going to be set up on an ecosystem of nodes okay and these nodes are going to be talking to each other and constantly syncing up data right this can model what you guys know as a relational database this server utilizes gun.js i want you to think of gunjs as a open source firebase or we can even call it like a decentralized dropbox right so each node is going to hold a user it's going to point to another user if we're going to have conversations with them then we're going to set up one of the servers here we're going to set up qazi's node here this is going to be our node i'm going to be calling it the qazi gun node let's go we're just going to set a couple things just like so so i'm just going to be doing this and once that's done our server folder set up for now we'll get back to it the next thing i want you guys to do with me is let's set up first cell okay once that's done if it asks you where what directory is your code located your next app lives in the client so make sure it points to the client folder all right so i'm just going to do a couple things just like this do burst cell dev boom so now it's available and ready to go let's head over to our local host 3000 what you're going to see here is a starter next js app along with all the pages and everything set up right here just like so let's go over and set up sanity now let's head over to our studio folder you're going to notice the schema.js right here let's just remove all these comments here and clean it up so let's create our own schemas the first thing i'm going to create is this user schema right i'm just going to paste this right here boom so right here we have the name the wallet address and the profile image all of these are the properties of the user that we need to keep track of all right and every time we make a schema i'm going to go ahead and import that user schema right here and every time you guys make a schema go ahead and put the name of that schema right here let's create one more i want to make the conversations schema right so keep in mind that another thing we got to keep track of in store is any of the conversations you have with users if it's a personal message like a direct message or if it's just a group chat so we'll go ahead and set it up right here like this as you can see the important ones about conversations is the room name the room id the image and if the conversation is a direct message or if it's not just like before add that schema to our schema js and there you go sanity set up to start sanity just do settings start and if you guys head over to localhost 3333 you're going to see this nice tool right here to see all the schemas we set up right so if i click into users obviously there's no users yet so i can go ahead and create one and all the properties that i set up are here as well the name the wallet address that we're gonna tie to a user to log in and then a nice beautiful profile image right here let's go and with that sandy's all set up next thing guys let's go ahead and set up our gun node server right so i'm going to make a server.js i'm going to add type module and from there let's go ahead and add express cores and obviously gun.js once you added those i'm gonna go import them just like so now i'm gonna set up express just like this okay cool now express is all set up now that express is set up let's go get our gun node up and running i'm gonna be using heroku to run our gun server as you can see i've made one before let's go make one together you can call it discord gun node like so right so create app this is simple guys let's just follow the instructions here for heroku install the cli tool log into heroku alright once that's done i'm gonna go ahead and create a new git repository within this folder and run these next few commands one really important step guys right here let's add a git ignore file and let's just ignore all the node modules we're installed here because you know if we were to push all those node modules it's going to be the end of the world if we were to install all those node modules right this project is literally going to be full to the brim with all the modules we installed so let's not do that let's ignore all the node module files in the get ignore once that's done we're going to add all the files commit them and then push to heroku cool now that i'm done with that i'm just going to double check and make sure it's deployed with heroku logs right here looks like we're all set up let's go one more thing by the way we can go over to settings on roku node and we're gonna see this link here in our discord gun settings you're gonna see this url here by the section that says domains copy this link we're gonna be using it for later all right so once you deployed your gun server onto heroku let's hop into our next js app and go into the index.js right here right as you can see with nextjs it uses modules for css right instead of the traditional.css file we do module.css right and that's why you see stuff like styles.you know class name for us in home we're going to create a styles.wrapper div right and here this is going to contain a couple things essentially it's going to contain our whole app so after you set up your wrapper dip i'm going to be making a main div within the main div there's going to be a couple things here too one thing i want to stress is that in the wrapper div this is where the sidebar component is going to go and within the main div which is inside the wrapper that's where the conversations list and the chat view component is going to go all right obviously we don't have those components just yet so let's focus on one of them the first one i'm going to focus in right now is let's add that sidebar component so i'm going to be making a components folder and let's just set up sidebar within that so sidebar dot js component so there's our sidebar js component not head over to index right because every time you make a component you have to import it right here so i'm gonna say sidebar and just place it like so okay really quick back in our sidebar js i'm going to import anything i might need so i'm going to import the styles here any react hooks that i'm going to use later on and after that let's go ahead up and set up the css module for this sidebar now the css for the sidebar is just going to be this right here it's going to be the wrapper and of course if you're going to make a css for the wrapper you have to label the div name styles.wrapper there you go and if you save this you can see there's our component right it's kind of cut off but it says sidebar so after you set up the styling for the sidebar let's go back into our index.js and write something on our main i'm just going to say conversation list chat view just uncomment that you'll see this is kind of like the format of it the sidebar has its own spot and conversation list chat view is on the top right there and that's because of the css right here uh really quickly i'm gonna hop into my global css and just insert here this is gonna give us the body background color and you're gonna see it's gonna look just like discord if you were to open up discord right now you'd see that it has this light gray for the conversation list to chat view and on the left where the sidebar is that's gonna be like a darker gray which is all the css you need is going to be right here feel free to pause the video if you need to but let's move forward so let's just travel with me over to here on the sidebar and once you're on the sidebar i'm going to go ahead and set up my react hooks right so really quickly that's just going to be my use router and my use state so really quickly if you don't know if you're not familiar with use router all that is it's just a hook from next js right you can see it's from next router all it does is help guide and direct the user to the different pages on our app right so if i were to click on my conversation with kazi for example it's gonna click into the url the page that holds our chat messages right cool so i'm gonna set up the hooks just like so and after that let's create an object for now i'll call it dummy channels and as you can see it's gonna be an array of objects the idea with the array of objects here is that each object is going to represent a channel right if you guys are familiar discord if you look over onto discord you see those circles on the sidebar that is what our dummy channels quote unquote are so i'm going to go ahead and import all the assets i have right for each channel right i call them avatar one through four and of course once you put it into your folder we gotta import each image so i'm gonna import each image right now okay once that's done each object in this gonna array is gonna represent that channel so that's why they have an id a name and the avatar that corresponds with it so let's go ahead and make four since i have four images all right and i'm gonna go fix up the properties of each all right so for this last one i'm gonna call it build space shout out build space if you're watching this you can name these channels whatever you want guys right if you want to pretend that you're talking to elon musk on discord or pretending that you're selling a bunch of entities go for it it's your project right i encourage you guys to customize this make it your own and show us all right send it over to clever program right so i'm going to name this chill random in general and that should be good for now obviously just fix these avatars right here and let's go we're going to take that array and set it up and initialize our use state so that when you write the word channels after this point it's going to be that array of objects with me so far awesome so what i want to do next is basically map through that array of objects and for each channel i want to create a room avatar component right obviously i don't have the room avatar component yet but let's just go ahead and set up some things first before i make okay for each room avatar i'm gonna be passing down these props right here which is just gonna correspond to you know the object of the channel right i'm gonna be passing down the key the id the avatar and name all right let's go ahead and make that room avatar component now should look a little something like this and of course import that component onto our sidebar js so if you see on my window right here for every single object in my array i'm making a room avatar component and that's why you see room avatar i have a tub avatar avatar on the sidebar right this isn't very pretty right now but let's go ahead and use those props that we're passing down so to do let's go over to my room avatar component also don't forget to make a room avatar css file right and this is the styling that you're going to need from it the wrapper the room avatar before the room avatar after right when we hover over it the image itself when you hover over the image all these things all right feel free to pause the video and make sure you have all of that css if you want to look just like ours and from there once we create the room avatar css module i'm going to go back into avatar and in the parenthesis let's go ahead and destructure those props if you look these are the props that i have here and those are the keys that i want to be destructuring from the props object so let's get the id avatar the name boom so now when i'm in room avatar i can reference that and get each value of the object that i want right and i'm going to be adding the div wrapper that we need right here if you notice there's on click right here and with the function of change url right we don't have that function just yet but the idea is that if i click on the profile picture of build space right here what's going to happen is that it's going to go and open up the chat that i have with build space right and not only that it's going to change the url up at the top right here to say something along the lines of you know channel slash load space right you're gonna see it in a second but let's just set that up right there right and within this wrapper div right and you're gonna see it just in seconds so real quick i'm just gonna make the change url function up at the top right here on line six and then from there within the wrapper div let's put all the necessary things we need i'm gonna place those props where i want the first thing is going to make a div called room avatar which is going to hold the image of each channel and there we go so once that's done let's go ahead and work on the change url function and remember the use router hook that i talked about earlier let's go ahead and utilize it right so if you look at the top i am importing use router here as well and from here you want to do router.push right and something along the lines of this right what this does essentially is that like i said when i click we are going to direct the user right with the id the channel id that it has along with name right of the channel right so if you take a look save this hop on back to my web page and you're going to see a bunch of images now all right so let me refresh this real quick so once i load up my page now you can see all the images are loaded up on the sidebar it's looking a lot more closer to this score isn't this exciting right so like i said if i click one of these right for example chill alright it's the channel it has the id and the name right i'm doing this by passing down each prop and making each of these room avatar components diamond and over here this is the example with build space it says channel 4 name build space on my url nice after the sidebar let's work on the next component guys so the next component i want to make is the conversation list component so i'm going to write conversation list js okay after that's done let's go ahead and make a conversation list css module okay and in the conversation list css module you're just going to copy all the css that i have here this is going to have the styling for each conversation list right all the elements within again feel free to pause the video if you want to have the same styling as we do okay once you guys set up the conversation let's hop back over to the component itself and let's get ready the imports that we are going to use all right like i said we're going to be adding the imports that we're going to need later just like before right which is going to be the styles and any hooks i'm going to use and then the next thing i'm going to do is import all the assets that i'm going to use as well all right and the assets i'm going to use are these icons over here so i'm going to make an icons folder and and put all those icons in that folder next thing i want to do is import those assets into our component and then i'm going to hop over into line eight and add all the necessary dibs that i need right so as you can see i'm gonna add a conversations div and within that div i'm gonna make conversations list top okay once that's done go back into your index.js and let's just quickly import that conversation list and bam right you can see that i have an input right here that says a placeholder that says find or start a conversation and that's going to show up right here to the right of your sidebar right there it looks just like discord they have this little like another sidebar technically with that's going to have the friends the nitro and it's going to hold all your direct messages all right that's what we're going to be doing right now let's make a conversations container and this container is going to hold all those assets that are talking about right so it's going to be that friends image svg and also that nistro svg so i'm going to insert those images right here and i'm going to set up my image with these properties that i have here give it this height and width there you go all right when i hit save you look over here i'm just going to draw it over here you can see those two images there's the right here and there's the natural one right over here boom so one thing that's left now is to add a little text that mentions those things friends nitro okay after that let's go ahead and work on the direct messages section so to do that let's make a div let's write direct messages and the idea with this div it's going to contain any of the direct messages that i have ongoing right so the idea here is remember the dummies channel the array of objects that i made we're going to do something super similar right you can essentially just copy it over right and instead of channels right i'm going to call this dms dummy dms right and instead of room ids right since this is dms you can just leave it this as id and obviously we're not going to change the room name to just name because this is a personal message between two users right and go ahead and change the actual values of those names so i'm gonna put my team we got kazi we got david and of course we got frankie so shout out to team cp okay cool so once you guys set up that object i'm gonna go ahead and come down here and i'm gonna map through that array of objects once again all right and the idea here is for for every dm we're gonna make a dm card component oh and really quickly one thing i forgot to do was hdm is gonna have an avatar associated with it so let's just use the same avatar as imported from the sidebar and i'm just gonna paste them onto here nice okay cool so now the images should work one more thing i have to do is set up my use state hook right and again with the u state hook go ahead and inside the parenthesis of the use state put dummy dms okay once you do that every time i see the word dms that's gonna dms that's gonna hold the array of objects so now we can actually map through that array since it's an array method and from there you can set it up just like so so for every dm like i said before let's make adm which i'm going to set up real quick right here and bam there we go all right and for every dm card let's put in these props all right it's going to have passed out name the id of the avatar and one thing i want to point out real quick is that each time you map through an array of objects be sure to include this index parameter that i have right and that's going to be the key right in react each of these elements here need a key to go along with it so that's going to help react render all those components all right so i'm just going to set it up key equals index okay cool now that's done let's just set up the styling for our dm card and it should look something like this all right it's going to be the class dm card status when you nice some some nice styling to when you hover over it the container write some opacity for the name a status all that nice stuff go ahead and copy it like so all right now that we got this down let's go ahead and set up the divs that we need for the dm card cool so this dm card it's gonna have the same thing as before when we click it direct us to a unique dynamic page route with you know the user's id and the name in the url basically the same thing as the sidebar it's going to be a lot of the same code guys so i'm just going to do that right now don't forget to put any of the inputs you need like the styles and of course destructure the props that you passed down from dm card so what that looks like is name status avatar and id awesome all right the image component right here is just gonna take all the destructure props that i need right the height 48 and the width of 40. cool and if i save you can see it right there on direct messages right so the next thing i need to do is we need the names to associate with these direct messages so i'm just gonna put another div or the status and another p tag right here to put the names so there it is there's my team they're right there in my direct messages i can send them a message right now if i wanted to all right cool let's move forward to the next thing okay guys before i move on i want to just fix up a couple of styling things right here so you see over here in my conversation list i have some css variables all right i kind of want to change them to the color right here so what i want to do is really quickly fix up some things so i want to head over to conversation list css module and just change the background color of the conversations div and the conversation list top to this one right here awesome next thing i want to do is i want to grab the cover color from here and just copy that and change that variable of the elements container hover to this one beautiful next thing you want to do is grab this color this nice deep gray and change the background of the body to that deep right and the font size the ones over here basically i'm going to be copying a lot of things from the root and changing a lot of the css variables back to this awesome so that looks like it's done no more css variables right there and we should be good to go so let's move on to the next part cool so the next thing we want to do is create this final component in index right i have it set up before it was the chat view so let's write chat view dot js set it up real quick like so i'm gonna go ahead and create a chat view css file and i'm just gonna include these styles right here i just chat view and message container cool now that i have those styles we can go back into the chat view component and actually add those divs okay awesome one thing i want to do is set up another component here actually called chat header right if you look at the discord app that i have right there's going to be well there should be a header up here that's going to hold all of those other icons that we added to our assets folder as well as the connect our wallet which is essentially going to be how we're going to authenticate our user so i'm going to quickly import all those assets and icons into my chat header and then i'm just going to include the chat header css file now for the chat header there's a couple things i want to put here this is going to be a bunch of styling like so awesome right we have the header itself the room name container the styling of the svg's title the button styling and much more so be sure to take a look at all of this pause the video if you need to let's just jump right into the next part okay so of course we made the chat header component but let's also not forget to import this chat header right into chat view back over to chat header component and i'm just going to add the room name div right in here it's going to include an image along with this h3 that's going to tell us the room name right for now we're going to make it static i'm just going to call it room name eventually we'll make this a little bit more dynamic to the user that we clicked look at that there's our room name like i said before it's going to be static for now but depending on who i click that room name should change to the person i click so if i click go ahead and click david right that room name if i point an error right here should now be david but for now let's leave it stacked and let's work on the rest of this component right so right now you guys remember we're going to be using metamask to connect our wallet to this discord clone right that's essentially what we're going to use to authenticate the user make this feel really web point web 3.0 first thing we want to do is set up the div 4 the wallet button create the you know the button styling itself right and when i click it it should run a connect wallet function which i'll set up much later and if you see what i wrote here i wrote khan's dummy account as well as i imported the eth logo right so the idea here is when i make this variable called dummy account the equivalent of me logging in and that's my wall address for now we have a static one right and what i want to do in this line right here is essentially set up some conditional rendering that if i have an account right then we can load and change the html to show wallet address with that logo that i imported right and it should look a little something like this all right but real quick let me just fix up the name of dummy account back into current account to keep it the same const current account change both of these right here and now take a look at that wow all right so whenever i do connect my wallet the html and css will change to this specific thing right here so it looks like we log it's looking good so far so what i'm going to do is add the rest of the icons by putting it into images don't forget to also input this nice search bar right right next to the add friend and dm button there will be this input for the search bar and what i'm gonna do is hop over to globals and include this css for the so once that's done i hit save and look at it it's gonna go from that white to this color right here nice are you guys excited because this is essentially the front end of the discord clone let's go ahead and work on a couple more functionality with that done i'm gonna go ahead and go to our chat view and remember the messages container that we made we're gonna add stuff to our messages container div right what i'm gonna add there is this component i'm gonna make i'm gonna call it message form okay after creating that message form i'm gonna go make the message form css and add the following styles all of these styles here are divs that i'm gonna be making later inside my message form but for now i'm just gonna import that css file moving on in the message form div here line five let's create the form now so i'm just gonna be writing form here and the idea with this component this is where on the discord app where you see that little box at the bottom where you're going to type in all your beautiful messages to your friends right and obviously around that form is going to be a bunch of different icons which i'm going to be setting up okay and i'm going to call that for in that form i'm going to give it a class name of chat input container cool let's import the rest of the icons that i need as well as the image from next where i can place the image from there i'm going to make another div within the form called chat input and then within that div let's make the svg container this is where all those images are going to go inside okay and in that container what i'm going to do is create that input box and i'm going to call that styles.chat input all right after adding the input tag i'm going to go ahead and add a bunch of divs with all the rest of the icons all in svg containers right we have like the gif the gif icon the sticker icon and the smiley icon all right here all right and if i hit save it looks like i have an error i forgot when i imported the styles i called it message from this just should be message form bam so now if i save this this should work and let me just full screen this wow look at that it's the exact chat box from and you're free to type stuff but at the moment we can't still send any messages to anyone all right so let's move on cool so once you guys made the message form the next part is we want to be to do some user authentication using metamask right so right now we want to do user authentication using metamask so in order to do that we need to use context right what context does it essentially lets us keep track of state throughout our app right what this does is let's say oh you're not logged in and you're trying to get to a certain channel or chat you won't be able to access it because it's gonna check if you're logged in all right and if you're not logged in i'm gonna have to kick you out i'm sorry but that's what's gonna have to happen and that's just best practice so let's go ahead and in my client folder let's set up a context folder okay so in that context folder let's make a context.js after making the context.js i'm just gonna import all the necessary hooks that i'm going to use for react okay and that and those hooks include create context use state use effect and use reducer right so if you didn't know use reducer stores and updates the state kind of like you state does except that the parameters it takes in is a reducer function as well as the initial all right this is what's going to help us update our context another thing i'm going to do is import our use router as well as importing gun js all right so gun js is not installed currently into our next app so what i'm going to do is hop over to my terminal and just add that with yarn so i'm gonna do yarn add gun and there we go all right so now that that's installed we can import gun safely knowing that we have it and it's all good okay cool so once you import all of those things i'm gonna go ahead and create our discord contacts right so i'm going to say export cons discord context equals create context so that's our discord context and remember that heroku url i told you guys to save well we're going to use it now so paste it and put it into a string and i'm going to just wrap it into an array just like so and then let's put parentheses around that as well right the idea here is i'm going to make a variable called gun so constant equals gun parentheses and it's the url that i'm passing right so it looks it should look something like this and you should be good to go after that i'm going to be setting up the reducer just like this and one thing to note about the reducer is that it's going to take in an initial state and a couple of actions so if you look here in that first if statement i have an action in my try block called clear and if you look at the return basically clearing out my messages making sure that the messages array our state that'll keep track of is back to empty all right if you look at the next if statement if the action that i'm trying to execute is add right let's return the messages whatever we currently have and add that new message onto that array right so what that should look like visually is if you see on my discord app if someone says hey what's up and then i say not much how's it going right that's me adding a message to the messages already alright and that's what that action is going to do right there and obviously this catch block right here is if there's any at all errors right it's just going to console log the error for me right so that's me defining the actions right over my reduce okay next i'm going to set up the discord provider and it's going to take in children right it's also going to return the discord context provider and put the children in between that all right so i'm going to write children like this and cool and if you notice the value over here is empty we're going to leave that empty for now but just know that whatever i pass into value it's going to be what i have access to globally right for example it would be the room name the current user right any functions that i want access to right that's the whole point of us using context so that i can access state anywhere in my app because it's global so for now let's see that empty and let's move on all right so inside just discord provider at the top here i'm just going to add a bunch of state like this all right and what you'll notice is these are all the things that i want to keep track of using state so you'll see like current account the room name that we're in the message text itself all right and obviously the current user okay once that's done i'm gonna go back down here above the return and i'm just gonna make a check if wallet is connected this function is gonna be asynchronous and all it does is literally checks if our wallet is connected all right right you can verify it and set the current account to that and if it's not you know make sure it's an error right maybe put like please sign in or anything something like that but for now we'll just console log error all right so now i'm going to finally use that use effect hook and essentially what this use effect hook is doing is that whenever that component loads right it's going to immediately run check if wallet is connected right what that means is if i go to a different page we're going to check if the wallet is connected if i go to this page i want to check if the wallet is connected that way is if you log out and then you go into a different page you shouldn't see the stuff if as if you were logged in all right we're going to constantly check and validate the wallet right so i'm going to make another function here and it's just going to be called create user account this also is going to be an asynchronous function and it's just going to do exactly what it says if we do not have an account right this should help create the account and store it into sandy and you're gonna notice something here too within line 42 you'll see create user account and then we're putting in the wallet address that's what's running right that's not a hook that's just the check create user account that i just made right because if the wallet is correct is connected you want to set that current account and if it doesn't have an account already we're going to create that user account so i just pasted this in this is the connect wallet function right it's also asynchronous and essentially this is me if i click that button this is what's going to help me connect that wallet all right so in the try block it's going to get the address and then if that addre if that address array is the length of it is greater than zero we're just going to set the current user to the address that i picked awesome so that should be it for now all right we'll get back to this i want to quickly go over to my api folder right here and we don't need this hello js that i have here and boom so once i delete that let's make a new file in the api folder and let's call this the create user.js file right what we want to do here is basically talk to sandy like you know if i create a user right i want to be able to add that user document into sanity right with all the information passed in right so again we also have to set up sanity into our client so on my terminal i'm just gonna add at yarn add at sanity client amazing cool so once that's installed hopping over back to create user.js what we want to do in this create user.js file is that when i create a user by connecting my wallet for the first time i want to make sure that a user doc is created right and that document that i created is just added into sanity all right the cool thing about sand is once we create this user doc if we were to run this function again it's not going to make a new one because it automatically checks if it's already exist right but first we have to set it up so what i'm going to do is create this anonymous function set up the user address like this and over here i'm going to write cons userdoc equals this object alright so this is me in line 4 that's basically me creating the user document object right and passing in the user address as the id now i'm just gonna make a lib folder in this folder i'm gonna put client.js and this is where my sanity client is essentially going to live and in my client.js i'm gonna import the sanity client that we and set up the object like so one thing that to note here is that we're going to need our project id and as well as an access token right and it's best practice to not just put your access tokens and ids or anything sensitive information that's unique to you onto the javascript folder itself what you're going to need to do is make an env file so let's go ahead and make that our env file alright so once i import sanity client i'm going to hop over to center.io so log into sandy right here and you're going to click on the project we created and hop on over to project id do you see this right here it says project id copy the clipboard and in our env file i'm just gonna type out sanity underscore project id underscore equals the project id that i write so let's go ahead and get our api token go ahead and check editor and for name we can just put client go ahead and hit save alright as you save it's going to generate this token here this is what you want to add to your env file as well so what i'm going to call this one is sanity token and set it equal to the token itself awesome one last thing i want to do real quick is add the course origin right basically this everything here are hosts that can connect to the project api so that's going to include versailles right so i'm going to write for sell that app like this and one more thing is we should also add a local host here localhost should also be able to connect to our project api let's go so now that set it up it's looking good so far so hopping over this okay so now that we stored everything we need to in our env file let's hop over back into our sanity client object and let's call the things we need so if you look over here i just pasted it in right we're gonna need in our sanity client object we need to have a key or project id and here this process that enb that's where we're just going to call anything i need so what i'm calling from the env file is the right if you look down below for the key of token that's where i'm going to call it the token that i need all right so i'm just going to set that up now back to our create u.js let's import that very same client at the top beautiful so import client from the library all right so within our anonymous function underneath the user doc let's add a nice catch block and basically let's wait and see and use that client so if the user does not exist we're going to create the user doc or what essentially whatever we passed in and what we're passing in as you can see is user doc all right and then we're going to just send the status of successful and of course if there's an error for any sort we're just going to console log the error and just send that error as well so this is what i mean all right if the user doesn't exist let's create the user doc if not carry on okay and that's for creating a user the other schema if you remember the other document that we're probably gonna have to create is the conversation one right and there's a little note here about whether the conversation is a dm or if it's like a group chat or something so in our api folder i'm gonna go ahead and create a new file i'm gonna call that the create dm dot js okay so just like with the create user here we're gonna be creating the conversation document right so again we need to import the let's go ahead and make this anonymous anonymous function grabbing the user address and then in line six i'm going to set up our conversation document that i'm creating right with the type obviously going to be conversations the id is the user address that i got awesome and there we go cool if the conversation doc doesn't already exist it's going to create it if not carry on cool so we created the dmjs so here i'm going to be setting up a query i'm going to import the client at the top here and my idea with this is that i want to query for all conversations that aren't dm so what does that mean it's going to mean any channels that are like group messages any let's call like servers on discord that we're going to get and it's going to fetch all of those conversations associated with that user and so that's why inside this async function if it's successful if the promise is successful we're going to fetch all of those conversations that aren't dms right and when we query them we'll also get the room id the room name and their avatar okay after that i'm also going to get dm so i'm going to create a file called get dms.js and this is going to be different than channels because i want in this one i'm going to be querying for all the conversations that are dms right these are the personal messages right my direct messages with cards and my direct messages with david right so that's what i'm going to set up here and again set up that same anonymous asynchronous function all right it's going to have the same try catch block right if successful get me all those direct messages and if not send me an error one more thing i want to add to this file because one thing to note is that if it's a conversation one thing to note that if it's a channel that i clicked into the properties of that will be different if it's a channel the properties of that document our avatar name and id right if it's just if it's just a conversation like a personal message between users right i don't want to have the properties of avatar name and id what i'm going to do in line 15 is get that response map through that response and for every item in that response let's convert avatar to just image name to name and id to wallet address and specifically i think i mean room name to name okay and once that's successful we'll just send a status of 200 and that's the only difference with that and we should be good to go cool one of the last things i'm going to do is just make another file called get current user this one is going to get the current user from sanity and i'm going to set it up just like how we did with get channels all right so that means importing the client once again making this asynchronous function and inside the in synchronous function setting up a query that's gonna look for users right and the wallet address awesome so that's it so there we go i set up that don't forget to add the catch block to fetch that user if it's and also the catch with them okay so looks like that's all the functions we have for sanity now that that's set up we can finally get back to our context.js and if you're still watching this video go ahead and drop a like down below right you made it this far so i'm gonna be hopping over back to context.js and let's go finish out our create user function so in my create user function if i'm not logged in i'm just gonna i'm gonna set the edge case right there if that doesn't exist we're just gonna return and after that i'm gonna go set up this try catch right and if the promise is successful right we're gonna set up the user address to be the user address that we have okay and here i'm actually gonna have another try catch within the first all right this time if you look i'm gonna be making a fetch call to where right i'm going to be making a fetch call to the next public api url right and that's going to be coming from my env file which isn't really set up yet so let's just do that so in my emv file i'm going to write next next public api url and let's just set this to localhost 3000 api awesome right so what essentially this is doing is letting us create the user right and posting it right posting it to where to sanity right we set up that function earlier to create the user under our api folder once we create a user account what this is going to do is post that user document into sanity as well all right and then again right underneath that nested try i'm going to add another child but this is also going to post all of the dm so it's going to create the dm document for us and that's gonna go into sanity as well okay just so to quickly recap so now that that's all set up when we log into metamask for the first time a user is created right once that user is created it's gonna create a document with all the information passed in it's gonna post that document onto our sanity database okay and the next thing we have to do is remember that value remember in our discord context provider where i said we're gonna leave the value empty for now we're gonna add stuff to it i'm gonna add all these values into here right we have the current account the room name the message text the state the gun the connect wallet user and the current user many more everything i put here is going to be accessible to me globally anywhere in my app all right so let's take advantage of that that's exactly why we use context here so let's go ahead and do that so let's get back to our chat header right and above our chat header let's import anything we need to use context which is just going to be import use context and actually our discord context itself cool so let's utilize use contacts in line 17 and i'm just going to take these states that i want to keep track of right now which is just the room name the current account and the connect wallet function okay i'm going to pass in the room name so in line 22. and you're going to see something here connected wallet is actually great even though it says over here if i highlight styles that connected wallet because that's because it's a different thing right the styles that connect while it or styles that connected wallet is just that is what it is it's just a css class name right the connect wallet that i'm getting from use context this is the state that i passed in is the function that's going to actually connect my wallet to the account so what i'm going to do is in that same div let's add an on click right that's going to run the connect wallet when i click this button all right so let's demo that right now of course it doesn't work the first time all right we got an error of cannot destructure property room name and let's take a look oh i see okay i'm just taking a look at context my room name is set up over there okay i think one thing i need to do is go to your underscore app.js and let's just wrap the main component around with our discord provider all right so i'm going to import that discord provider and import use router like okay i'm just going to clean this up a bit and there we go so now if i hit save let's take a look now okay now just says initial state is not defined and if i look at the error there oh my bad guys let me just insert the initial state so i forgot in my context.js right we also have to define the initial state which was i had this right it's that messages array so up over here i'm just going to say the const initial state equals the object messages and it's just going to be the value of an empty array so now when i save let's go right cool so it's going to prompt me to connect my wallet and go ahead and click it i click next and voila i am logged in right and my wallet address is up there we don't need to use the static dummy address any longer all right cool this is looking good guys i'm excited let's move on now that we set up user authentication all of our contacts we can go ahead and let's just go ahead and get the convo lists from standard right so whenever you log in with your account you should have your own unique conversations going on right your own unique channels your own unique personal messages your own unique yeah right so right now if you look at the app we just have the static ones that we made you know i have my team and my direct messages and just like random stuff here in the channel so let's actually make my dynamic unique conversations list but before we get into that let's just go set up a couple things over here let's finish out the create user account and in the parameters let's just write this user address equals current account awesome and then after we look into our sanity once we finally log in with our wallet you're gonna see something called unnamed as the user document right this unnamed thing here is what we created when we first connected our wallet right over here is the wallet address that i have and again just no profile image set up so we can actually set that up all through sanity which is nice so and here i'm just gonna name this all right i'm impersonating qazi today just like how i'm taking over his youtube channel awesome right there's the profile image it pops up nicely over there so now this user is named quasi with this wallet address and this nice profile picture okay cool let's hop back over to here and in our conversations if you remember we also created a conversations document when we connected our wallet right and for this time this one's going to be called untitled right and in here we don't have any like rooms or conversations associated with the user just yet but we can now set it up right here so here this is also the user reference that i was talking about earlier and that's where we can reference any of the users involved right so right now the only user we have is qazi and that's okay okay hopping back into the code here we're gonna be working on the sidebar so if you remember we have a bunch of dummy channels like so we have the general the random the chill and build space right these are static right this is going to show up regardless of who logs in all right and one of the first things i'm going to do is in the sidebar component itself in here in line 38 i'm going to be making a used effect in that use effect i'm going to set up a try catch block and in that try block i'm going to be making an api call right that's going to get all the channels okay and once i get that response.json data back and i store it in a variable called data here i'm going to set my state and set channels to that array of objects yeah of course i'm going to be making that api call but there's no real conversations going on so once i have my data and i set channels with it there's not going to be any conversations going so let's create them just like we created just like we set up causes let's create a conversation right now i'm going to be calling this one build space okay and the room id i'm going to call it b space and just drag this image i have of their very nice unicorn logo all right once that's done document is published let's also set up another really cool organization let's call them cover programmer and just write cp as the room id and we'll have our cp logo with kazi's beautiful face there it is and of course we don't check that this is a dm because this is a channel all right because remember the way we handle the state it's going to be a little different cool so we're going to get this error real quick because of the invalid source prop let's just take a look in order to fix this area i'm going to go ahead and go to next.config.js just like so add in this images and add this domain here and also of course add in the cd cdn sanity.io all right these are all the things that you need so just copy that like what i have here and i'm just going to restart my server all right now that my server is hey let's go right i can see everything up here as i draw this arrow now i can click on cp the url is still dynamic because i set that up before right and i can also talk to build space right here so what's up build space cool so yeah you can just click around all the css and songs working you can hover over it looks really nice right and now let's head over to our conversations list and i essentially want to do the same thing with our direct messages right so as before we have dummy channels right if i highlight this this is dummy channels we don't need that anymore we're going to be just pulling from our sanity database awesome so i'm just going to erase that you know our use date to an empty array so that even if we don't have anything we are still able to map it we're not going to get any reading map of undefined errors cool so literally just copy paste that same use effect except this time it should be get dms all right and if you're going to see the dms is going to get pulled quasi because that's the only user involved right now awesome so if you ever want to populate your direct messages just create a bunch of users a bunch of user documents with different people and that's what's going to populate in your direct messages so that's how you pull the convo list from sanity don't forget guys this is an amazing sick project feel free to customize it make it feel like your own add the people your favorite people add me add frankie qazi let's go oh and one for one more thing i forgot to do was actually fill in that change url function inside dm card so that when i do click quasi it has that custom url link here with this arrow it says nice so i can click on build space cloud programmer quasi and the url the page itself is gonna change all right so after you're done being able to pull the convo list from sanity let's go dive into our message form and in the message form component i'm gonna import our contacts here so i'm going to import use contacts and import discord contacts as well now i'll actually use that hook here and set it up so in line 12 i'm going to be pulling a bunch of different variables from our discord contacts that being this message placeholder and among other things cool so now that my contacts is set up i'm going to write a function called send message this function is going to run every time i hit enter i should send the message that i typed in so what i want to do is add this event prevent default and if the message text is empty or just return and do nothing okay once that's done go down into the input here and let's add a couple more attributes to this such as giving it a value equal to the message text attribute call disabled and set it to current account.name and this on change right here so that every time i make a change to the input we're going to be updating our set message text state to be what i typed and of course we'll have the placeholder cool so go back to your send message function and here i'm going to make a variable called messagesref all this does is gets a reference to the room name using gun.js right and room name being the conversation that i clicked okay so next i'm gonna make an object called new message and that new message object is gonna have a couple things like sender which is gonna be set to the current user.name avatar which is gonna have the avatar of the current user and of course if if there is no avatar we're just going to set it to this random one here okay the most important thing that we need from this new message is actually in the content key we want the message text right and we want to use dot trim because we want to remove the white spaces at the beginning and end of it so we can clean it up a bit and just some bonus keys right here for created that which is going to keep track of when the message was created cool okay moving into context.js what i want to do is just add another use effect into my context.js file so in this use effect if there is no current user we're just going to return if there is i want to do this try catch block right essentially with this try catch block i'm going to be making a fetch call to our api and i'm going to be getting the current user's data right and if it's successful i want to set that into this data variable and once that's successful i'm going to get the response.json and wait for that to return and set it equal to data and update my set current user state with that data of course when i'm working on functions we have to make sure that the function itself is asynchronous so i'm going to add the async at the top of this anonymous function and we should be good to go okay then i'm going to add the current account into the dependency module down here at 47 and if you didn't know if you put anything to this dependency module what it's going to do is if the current account changes we're going to run the use effect all over again right so if for whatever reason the current account changed it's going to run the if statement it's going to check if there is a current account if it's an actual truthy value and if it does exist right we're going to do the try catch block that we have set up here so essentially every time i change the current account it's going to run and get that user data okay i'm going to add another use effect over here and in this use effect i'm going to set it in the dependency to router.query okay and in here i'm going to set up a couple things and set a bunch of state essentially what we want to do this is that we're going to query the room that is clicked and set that as the room name after that we're going to use dispatch to run the clear action which is going to clear the current data and after we clear the current data we'll set the placeholder in the input to say message you know whoever we clicked all right and of course whenever you're switching messages that input box should be empty right if i type hello and i'm messaging clever programmer and i switch to build space that input should be empty it shouldn't be a hello on there still so i'm going to set the message to empty as well cool so over here in line 56 i'm going to be creating another function i want to create a function called get message right it's going to do exactly what it sounds like in the get messages function i'm going to be querying for three things and storing them into the variables right i'm gonna be querying the name and the room id i'm also setting up my messages ref again and getting all the messages in reference to okay after i set up those variables i'm actually gonna map through the messages and i'm going to add all this data onto here all right i'm going to add where the sender is the content the avatar the created and message id okay once i set up those variables i want to go down in line 61 and just type in once messagesref.map.once this is going to do is essentially just map through the messages ref and after it maps to the messages ref what i'm going to do is run the dispatch and run the add action which is going to add this data down right it's going to add who the sender is what the message content is set the message avatar that created that and the message id so i'm just going to write test oh look at that all right it actually just that's not supposed to happen right when i wrote test and i press send and actually just reset the page so i'm just going to go ahead and check my message form and this event prevent default should be stopping that refresh oh there we go i forgot there we go so what i need to do to fix that error of sending a message and the whole thing refreshing itself we need to remember to put an on submit onto the form why because whenever you press enter with a form it's actually going to refresh your whole page and when you're using a bunch of state like that you don't necessarily want to do that because it's going to reset so what we're going to do here is set up so that on submit we're going to send the message all right and we're going to be passing in the event right and this is where the event is coming from so now with that set up right when we pass down the event we can the event.preventdefault will actually just prevent the default action which is the refresh of the page so understanding what line 23 does is going to be really helpful okay so i'll hit save and type it in i wrote hi cool so it's not refreshing but i'm also just not seeing any of the messages just yet but it is going somewhere but it does look like it's going somewhere all right so i'm just going to take a look at the chat view component and in the chat view component let's just finally add our context so again use context and discord context and in line eight i'm just going to be grabbing the state from our discord context here after that i'm going to be creating a function called formatted messages right essentially what this function is going to do it's going to get all the messages from the state it's going to filter them right using dot filter and within that filter only bring back the ones that belong and i want to use that filter and based on where they belong let's just return the ones that are in the selected channel right because there's going to be a bunch of messages in our state i only want the messages let's say of build space if i click build space and i only want the messages of the ones from clever programmer if i click clever programmer all right and what that would look like is something like this okay and i'm not realizing we also still need to work on the messages container all right so let's hop over to the chat view you want to start working on this all right so in the messages container here we're going to take the formatted messages array function and then that's going to return and after it returns that array we want to map through it right so it's only going to contain the messages that are relevant to the room okay and for each message in that array i want to create a message card in your components folder let's just create a new file called messagecard.js okay set up the message card component and in the chat view let's just import the component here okay and i'm just gonna paste that message card component like so right and within for every message card component that we make i want to pass down key and the rest of these props like the avatar the sender a timestamp and the content okay next step i'm going to add the message card css and it's going to include the styles right here awesome and moving on for the message card let's add those divs with the styles that we set up so i'm going to make a div called message card and within that message avatar container if you guys could imagine the code really quickly when you write into discord every time you send a message on discord your profile pictures should appear to the left of what you wrote and if someone replies to you their profile picture should appear to the left of what they wrote so this is how the divs are going to be set up in the message card component all right so let's just use the next image and insert that inside the container and up here you'll notice i added the image the next image up here the import statement for the next image and then let's just destructure those props that we passed down so that we can use them and then in between our message avatar container let's actually insert that image and pass in the avatar and the sender has the alt okay cool and then in another div still inside the message card i wanted these this div for the message details right information for the sender small timestamp as well and the most important part the content of the message itself okay one thing i forgot to do is really quick let's go over to our context.js and add the slash gun once the slash gun is there we can go ahead and erase this message ref after you add the slash gun in this use effect here in context.js we also need to be able to get message all right we need to put get messages into that use effect so that it runs when the component mounts awesome right so the only error i'm gonna should see now is that styles is not defined in my message card so if i look at my message card really quickly ah i see we don't we forgot to import the styles for the message card so i'm gonna quickly do that import styles from message card module boom and i hit save and there we go there it is and there we go there's all the messages that i wrote earlier hi hello message hello all of that stuff all right let me just go ahead and full screen this app i'm gonna click on clever programmer what's up cp fam is this working let's go there it is right i can head over to a different conversation i can head over to my direct messages i can say hello decentralized app are you with me right and there it is folks our decentralized chat app our discord clone i hope you guys enjoyed this is sick isn't this awesome cool so hopefully you guys made it to the end of the video and if you did leave a comment down below and send us your projects i'd love to see what you guys made if you were able to make it peace all right and the only thing we have to do now guys is let's deploy this project to first cell so what i'm gonna do right now is go to my terminal and type in vercell and would you look at that it's building it's just a couple more seconds until we have a full project and bam do you see that link to deploy to production let's copy this link and i'm gonna hop back into my window and paste it right here oh let's go good morning test test i'm about to say yo we are live boys and that's it now that you deployed the app this app is online you guys have your very own decentralized discord clone and not only that you guys learned a little bit about gun js as well as practicing using sanity so a lot of valuable skills here i encourage you guys to make it your own you know talk to whoever you want customize it this this is your app so if you guys made it to the end of this video don't forget to drop a like you know what help me save my job if you liked me explaining this code and be sure to watch our twitter clone it's gonna be up here right here watch our twitter clone add this to portfolio i'll see you guys next time