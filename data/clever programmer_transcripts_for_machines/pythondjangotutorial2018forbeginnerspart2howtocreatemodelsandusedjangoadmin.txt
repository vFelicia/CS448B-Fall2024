hey you welcome back in this video we're gonna do part two of the official Django tutorial we have already done quite a bit of stuff right we've gone our local servers started but what we want to do now is in this video we're gonna actually cover our admin interface and we're gonna actually start playing around with it so it's gonna be pretty exciting I hope you're willing and excited to see how that works okay and we're gonna go through this one a little bit faster so okay so first thing we want to do is like look at the database setup which you can frankly ignore if you're new but later on like this is something that you should read but for now we're only gonna focus on this command it says python manage that py migrate okay so this is a complete continuation from the last video okay so make sure you're caught up on everything from part one I'm gonna open up Adam and I'm gonna break out of this by doing ctrl C and I will do Python manage that py migrate and it should give you a bunch of okay's and what that did is created these tables that weren't created before okay so they're all created like stuff with user names and emails and permissions and all the stuff that it has to do on the back end okay alright and from here we're gonna go on and we're gonna try to now create models alright so well define your models essentially your database layout with some additional metadata how django models work is their philosophy follows the DRI principle which stands for do not repeat yourself which is a really common commonly used acronym in the programming world and it emphasizes using logic that helps you never really repeat yourself right so for example just to give you a simple example imagine if you have to print out a letter or print out the word boom 100 times you could keep writing print boom boom print boom or you could do it in the dry way which is write a for loop that prints it out 100 times okay so that way it allows you to stop yourself from repeating and just helps you do it at once now when you start abstracting it and taking it to a higher level that might mean taking your code from basic basic code and modularizing it into a function or into a class or into a package things of that nature okay and that's the same philosophy Django goes off on so instead of like repeating yourself over and over again it lets you create a class which it then creates models out of and handles a lot of that stuff for you okay so we're gonna create this these models okay and basically what we're gonna be working on in our simple poll app we're gonna create two models question and a choice a question has a question and a publication date so I'll almost imagine like a spreadsheet let's say you create a new sheet in the spreadsheet and you call the sheet question you have column one that says question text column two that has a publication date so question text on your first row might be what the hell is going on and the publication date may be like February whatever and your next question might be like when is Kazi gonna make the next piece of content stop making all these crazy videos where he's outside talking to the camera and then your publication date next to it right so that's how I want you to picture when we create these models all right with that said let's move on a choice is gonna be its own spreadsheet or its own sheet okay and basically what it does is a choice has two fields the text is a choice and a vote tally okay so the check text and the vote tally and then the question that you get to choose it is actually referenced from the question model okay so let's actually now write this code out so let's go to our polls and I'm just gonna copy pasted it I recommend that you actually write it out because it's really helpful exercise for you but just for a time I'm gonna go through it faster so we're gonna put it I'm gonna paste it right here okay I'm gonna say it all right now we have to activate our models okay so I'm going to go into my settings my side slash settings and inside of here I want to tell Django that we actually have this app installed okay so what I want to do is pulls dot apps dot I think it's polls config like that okay and make sure to put a comma after it because after all it is a list with one two three four five six seven elements okay so now Django knows to include the polls app let's run another command so up until now Django had no idea what this thing that you created this pulls app but now that you went in my site and added this under settings and added to your installed apps now it knows that it's actually there okay it's equivalent of kind of like let's say you downloaded an app on your Mac or your windows but you never installed it right like downloaded a game but you never installed it's kind of like that so we just installed it by doing this okay and now what we want to do is let's run another command Python manage that py make migrations polls okay so I'm gonna come into my command line and again to activate your virtual environment you'll do source activate followed by the name of your virtual environment and to deactivate your virtual environment you will do source deactivate if you're on a Mac if you're on Windows then all you need to do is activate followed by the name of your virtual environment so in this case it'll be my site ok so um since I'm already activated on my virtual environment I'm just gonna do Python and manage that py make migrations polls and now you see that it says create model choice create model question add field question to choice okay alright by running make migrations are telling Jango that you've made some changes to your models in this case you've made new ones and that you'd like the changes to be stored as a migration cool and this is effectively what the sequel will look like for this so this is not something you have to worry about if you're a beginner and you don't even know its sequel is totally fine but if you have a little bit of experience check it out what's really cool is like bunch of this code that you would normally add like generally anything to do with databases requires you to know sequel or write sequel okay SQL and queue for you to write raw SQL it looks pretty complicated right like for example if you go here there's a lot going on if you write sequel every day may not be that big of a deal but it's a lot going on whereas Django it's automatically generating all this code for you and you don't actually even have to worry about it I just showed it to you so you can see what it actually looks like on the back end so that's what they're showing here and we're not just gonna we're not gonna worry about that and since we made the migrations we're gonna commit those migrations to our database by doing Python manage py and typing in migrate okay so now that says applying pols initial and it says okay if I go to my migrations I can also see this specific migration that I made okay and I can read this migration whenever I want do not mess around with this file too much unless you know exactly what you're doing oh okay okay cool and now we're gonna play with the API another thing about migrations when you get a little bit more advanced it allows you to update your database without ever losing track of it so flask has kind of a weird migration thing going on whereas Django kind of comes with it and so it's database is a lot easier to play around with like it says migrations are very powerful let you choose your models over time as you develop your project without the need to delete your database or tables and make new ones that's generally what you have to do if you're working with you know like just kind of working from scratch it specializes in upgrading your database live without losing data so again there's gonna be really powerful and helpful as you get more advanced and as you do more things with models so now let's play around with the API that actually Django gives to us for free alright so we don't actually have to write it it just kind of comes with it so I'm gonna go and instead of just typing in Python I'm gonna do Python manage dot py shell okay and here I will do from pulls on models import question comma choice and then now we can play around with it so since we don't have any questions in our system yet when we actually look up questions and the objects for it it should show us empty right because we didn't create any thing from in the question model okay so if I do this at all it should show us none and that's exactly what it's showing us like hey the query set is actually empty now what we want to do is create a new question alright Django expects a time date use times under now instead of this and it'll do the right thing okay so we're gonna go from Django dot utils import timezone okay and what is our question take remember if we look in our questions model it takes two things it takes a question text and a publication date and that's what we want to give it to create a new question object okay so pretty much type that in and what is it saying it's saying hey I'm creating a question object this question class essentially takes in a few things question text and publication date and I'm using keyword arguments so I'm put in question underscore text equals so for the question text it takes in a car field so let's go actually here in models and you can see that it takes in a character field right here and that's why I'm actually passing it in as a string and then publication date takes in date time field and that's why I'm passing in the timezone dot now object okay and just gonna hit enter here and now queue is created so I should be able to do something like well let's follow along with their documentation is saying but if we actually do this now right question not objects dot all let's see if it shows us so that's because we haven't saved this yet so once we save it is gonna show up in our as one of our created objects for a question so let's follow along so now that says save the object into the database you have to call save explicitly so we're gonna do that I'm gonna say Q dot save and let's try it again and now look it shows us that there is indeed one question and it even has a number an extra at one okay but it's not very helpful because it's not showing us what that question is or it's not giving us a very easily readable name when we actually use this API so I'll show you guys how to overcome that too alright so now it has an ID if you do queue that ID it'll show you its ID it says access model field values via Python attributes so I could do Q dot question text so that question text right there and it'll show us like what's new and I can do Q dot publication date and it'll show me the date as a day time object 2018 which is February 19th and let's go down here and we can even change the values by changing the attributes and then calling save on it okay so for example before we had the question that's what's new we can now save that question is what's up okay so for example I can do queued question underscore text is equal to what's up okay so that how yep and I can do Q dot save and now if I do Q dot question text you'll see that it actually says what's up right displays all the questions in the database so now if I again do this which you've seen it'll show me all of the questions right now we only have one question okay so if I wanted to add multiple questions I could do that you know let's say that we add q2 and then I do q3 and then I go right over here instead of saying what's new say what's popping like that hit enter and now if I do question dot objects dot all you can see that it shows me oh sorry I have to save Q 2 dot save Q 3 dot save and now if I do this you'll see that it shows me I have one question two questions three questions and I can even say for a question and questioned objects dot all I can loop through it print question dot question underscore text like that and if I run that I loop through all of these and then they'll print out the question text okay so you can do it this is just like playing around with its API and kind of getting comfortable with it okay and it's close wait a minute question isn't a helpful representation of this object so let's fix that by editing the question model in the thing so that's what I was talking about right like they're saying it in their technical terms basically what they're saying is like hey look this looks ugly as hell and doesn't give us any information like what this is about so let's make it into something that a human can read and be like okay I get what this question is and it's readable right so that's what we want to do all we need to do is add a string method okay so we're gonna add string representation to it you'll see what I mean in just a second so right now it just shows us like blob like whatever right well we're gonna do is under the class question we're gonna add a string method like that okay and it's gonna take in self and then we're gonna say a return solve that question or score tax like that okay so instead of showing us this wouldn't it be nicer if it showed us that question because that's a much easier way of identifying what that question is when you're just looking at the list it's just more readable that way okay and we're gonna do the same thing with choice we're just gonna go here create a function or create a method because we're inside of a class and I will say self and I'm gonna say return salt self dot what do I want to do here choice underscore text all right and I don't think I have to suit here let's try it okay cool so now it's important to add string methods to your models not only for your convenience when dealing with interactive prompt but also because object representations are used throughout Django's automatically generated admin so later when we go and I show you the admin this is actually gonna be helpful there because then when we're reading these names the admin is gonna be using it all the however we're showing it in the console right now is gonna be showing it on our admin interface right so like imagine if you created an app and you gave it to your client where it's like a blogging app right or if it's ecommerce app you don't want them to go to the store and when there's aren't differentiate between items it just says item one item two item three item four it'd be much nicer if it says like bicycle or watch or iPhone X or whatever they're selling right it'll be easier for them to identify that's essentially what we're doing right here note that these are normal Python methods let's add a custom method just for demonstration so they're adding a new a method here so we're gonna do that I'm gonna go into my models and we will import date/time at the top and then we're also going to import timezone oops right underneath this guy and we will add this method under a question okay okay so what's published recently is a method in the question class so you can do like Q dot was published recently and it'll tell you it what it's gonna do is gonna basically tell you true or false okay so I think what it's checking for is like if it was published within one day or later than 24 hours let's see what this say no the edition of import and to and from Django does import time zone to reference pythons standard date/time module on Django's time zone related utilities respectively save these changes and start a new Python interactive shell by running Python manage that py shell again now because we didn't make any changes to the models we just added new methods we don't have to migrate this to our database all we need to do is just like exit out of this shell and just like come to it again I'm gonna do exit open closed paren and I'm just gonna do Python manage that py shell again and then let's see if we can get that command yeah front pulls out models so basically from this file pulls dot models I'm importing this class question and this this model choice model both our models classes whatever and make sure our string our addition is working ok so now what we're gonna try to do is do the same thing except this time it's not gonna show us question whatever is gonna actually show us the text of each question so there you go what's up what's new what's poppin ok much easier for us to see this okay so again think of it like if you had a fighter database instead of it saying fighter one fight or two fight or three it show it to you as can Ryu and like Sagat Gengo provides a rich database lookup API is entirely driven by keyword arguments okay so you can do something like hey I want you to filter by where the ID is one so it'll give me that specific question only or I can say filter by ID and it'll give me the question that has idea of okay or I can filter by question text that says new inside of it or what's new inside of it just like it's showing me here like if so let's try this one okay so question text starts with what okay so let's see so far all of these start with the what so it's gonna show us all three but what if I do instead of starts with I say contains and I say open okay there's only one question that's a that contains that okay then later we can provide a frontend to our client where you can links in the search bar type it in but on the back end we're using this contains method to find the exact thing that you need and then return there's a response from our HTML file get the question that was published this year okay so let's get the question I was published this year we're gonna do this we're gonna say current year is timezone now that year so that's gonna get basically 2018 right if I do current year it'll say 2018 and question that objects that get where the publication date year is the current year okay so let's do that get returned more than one question it returned three so because we have multiple questions instead of one ours is gonna be different than theirs very slightly okay so four hours since it matches all of them and gets like yo what's going on I'm matching all of them so but nothing to worry about it's still working for us if you request an ID that doesn't doesn't exist it will raise an exception so for us we do have ID too so it won't raise an exception but like let's say that we try to find something with an ID of four or five sorry we have to do get it's gonna raise an exception okay also for this let's try so what would happen if instead of that get we use filter would we get an error or would we get something in return we would get something in return which is like all of these that match it okay so the difference between filter is like return everything that matches and get is like get one and if more than one matched and like throw an error or something like that okay so look up by a primary keys the most common use case so Django provides a shortcut for a primary key lookups a falling question the falling is identical to questions that objects that get ID so PK which is a primary key okay so every model will have a primary key so for example question will have a primary key choice will have a primary key and think about this is like let's say you have a database with people in it right or employee names well what if you have two john smith employees right out of a hundred employees or but if you have two apple watches in your ecommerce store that you're selling that have the same name or the two people that have the same name how are you gonna differentiate what if they have the same email address or whatever right so you need one thing that's always always always always unique so if you can't rely on their first name last name or email address or whatever else one thing you can always rely on is a primary key it could be a automatically generated key from Python and could be like random words or whatever right Django will handle the primary keys for you everything will have a primary key even if it doesn't show it to you on the back end this way you can always find you know the unique way of referring to something okay all right so let's go here saying that make sure our custom method worked so it says cute objects I got peak it one okay so basically what I'm gonna do is go here and say hey get me the object where the primary key is one and save it as cue and now I'm gonna ask if q was published recently okay and it says true okay cool so that's the result we got give the question question a couple of choices the create call constructs a new choice object does insert statement as the choice is set available choice and returns a new choice object Jango creates a set to hold other side of foreign key relation question show between we access via the API alright so we're gonna do this guy again if you haven't done so already display any choices from the related objects set so we don't have any choices so far okay we're right now basically voting for questions kind of like you can upvote comments on YouTube so now we're gonna create three choices so queue that choice set dot create so we're gonna take a question which is our first question which was like what's up and we're gonna create choice text is equal to not much with zero votes okay and you can see choice has a field called votes and then it has choice texts so our first answer to that question what's up it is not much but we're saying like look it only has 0 votes okay okay and now we're gonna create another choice but called the sky what's up the sky I mean guess that's kind of funny I say the ceiling and then here's another one that is and we're gonna restore this one actually SC oh okay there we go okay so now choice objects have API access to their related question objects okay so now if I do see dot question so even though I've created this model from choice you know you'd be looking at it be like hey how does it have access to the specific question like how did it access this field here's how I did it because we're saying in this question go to the foreign key and the foreign key is this model over here when I do choice that question it'll go and get the question from up there that's essentially what it's doing okay so that's what when I do see that question that's what's happening it's referencing and getting me back this object okay and vice versa so you can also reference from question you could reference choice question objects get access to choice objects okay so they both have access to each other kind of like you can have a book and you know like who was the author of this book so that relation goes to the author and then you can say like this author has which books and it can relate back to the books alright so now we're gonna see how many choices we have and so we have not much is one choice the other one we have is the sky and then the other choice that we have is just hacking again all of these have zero votes as we see right here and we're gonna say Q dot choice underscore set dot counts so this is just a count that there are actually three choices the API automatically follows relationships as far as you need use double underscores to separate relationships this works as many levels deep as you want there's no limit find all choices for any questions whose publication date is in this year reusing the current year variable we created above okay so I can say choice that objects are filter question double underscore means like you are kind of going backwards so we're saying question and then we're going publication date okay so actually we're going this question here and then we're going to publication date and then checking the getting the year of that publication date okay so let's try that right over here so it's gonna get us all the questions that are from this current year so it should get us all three of these let's delete one of the choices use delete for that so now what I can say is I can get the question that starts with just hacking right and how do I do that I say cute a choice set da filter by we're choice text starts with just hacking okay so it's only gonna get one question that has just hacking in there and if I do see you'll show you which one it is and now to delete it all I do is C dot Tooley again I'm copy pasting copying and pasting for time purposes saving time but for yourself like take the time to actually write all of this out okay this is very very helpful for you so now that I deleted it showed me that it's deleted and if we actually check again right it'll only show us these two choices right here okay now we're gonna get into a pretty exciting part which is introducing the Django admin and we're actually gonna just touch on it a little bit and let's get started this is a super cool part philosophy for generating admin sites for your staff or clients to add change and delete content is tedious work that doesn't require much creativity okay it's usually like a pretty rinse and repeat process it's frustrating it's boring you can make mistakes it takes a lot of time and development and which means like ill cost your client a lot and it slows down your development speed for that reason Django entirely automates creation of admin interfaces for models okay so let's check it out the admin isn't intended intended to be used by site visitors it's for site managers okay so now we're gonna create an admin user I'm gonna do Python manage that py create so we're gonna exit out of this I'm gonna do Python and use that py create super user and I'll leave this blank I'll use this email and even though it's not gonna show you anything here it's still typing in your password so don't worry about that okay so you can put in whatever as your email whatever as your username and now the final step is to answer your entry your password I have and now lets us start the development server so we're gonna do just that I'm gonna start the development server we're gonna go to Chrome we're gonna go to our local app on 127 0.01 colon 8000 port instead of polls I'm actually gonna go to admin and when I go to admin look it brought up this nice interface that you and I did not make we didn't make this beautiful looking form where when you hover over login it like turns dark and looks good and we didn't add functionality that adds security right we didn't add this thing where passwords automatically looks like dots so nobody can see it all of this keep in mind is just automatically generated when I click login boom here's the administrator interface okay so as the admin you can change your password you can log out you can check who are the users so here's one user you can like go into this user and like delete this user or change the permissions of this user right so you can go and be like boom it's not a super user anymore or it's not a staff anymore it's not active anymore or you can go in here and like change all kinds of permissions like can delete choice can add a question but cannot like delete a question can change a session but cannot delete a content type you know you can get like as specific with it as you want and this is just for the model that we have registered users but imagine later when if we register our choice model and whatever those will all show up right over here and any in recent actions that you do actually show up on the right hand side so imagine like somebody deleted something you're like what the hell happened like one part of our app or this website is now broken well if you go into recent actions you'll see what took place and exactly who did it and who'd hold responsible for that I think that's pretty cool right and it comes builtin right out of the gate that's one of the reasons why Django is such a powerful tool and it fosters productivity and effectiveness I believe over any other framework right and that their tagline which is awesome its Django is for perfectionists with deadlines and that's what I believe in like if I have to put a project together and I'm doing something solo I'm going Django all day baby but you know if you're working on some longterm project you know you're gonna be doing for a long time and nothing else really matters then yeah you can choose whatever you want but I like speed I like productivity I like to take my ideas from my head and launch them online fast alright with that said let's go back and see what they're saying so we go to our admin enter the admin site and now it says make the pull app modifiable in the admin how do we do that we're gonna take these three lines of code so I'm gonna go into my pull slash admin and this line is already added so I'm not gonna add it in from dot models import question okay so basically what I'm saying is from this directory get the models so right here and import the class question from the models okay so import the question model and then I'm gonna say register that model inside of admin so check out what happens okay this is super super cool check it out I'm gonna hit save and let's go back to our app and let's hit refresh and look at that it's here so that questions model is the one we made it shows under polls questions and you can see all of those questions what's poppin what new you can go in and you can change the text I can change it to like what's cracking right I can hit save and now it's changed and if I go to my if I start Python manage that py shell from polls dot models import question question dot objects all right look it says what's cracking so what we actually changed from the GUI interface with our mouse and our keyboard is now showing up in our database in our local database the sequel Lite database actually being stored on our computer this database is not online yet so pretty freakin cool right how quickly and how effectively it works so I'm going to exit out of this I'm gonna run my server again and we're gonna go back to the app refresh cool and like let's see what they're saying now that we have registered question Django knows that it should be displayed on the admin index page and it is right and I showed it to you and we went inside of it and we saw question text and we saw a date published and we can actually change the date published and everything now things to note here the form is automatically generated from the question model so this form is automatically generated we didn't eat generate anything the different model fuel types daytime filled and car filled so remember we had one of the models as a date time filled and the other one is car filled and you can see where it says date published look date field right and for question text is just a straightup character field or what you know in Python to be as a string these correspond to the appropriate HTML input widget each type of field knows how to display itself in the Django admin pretty cool each date/time field gets free Java Script shortcuts woohoo free Java Script shortcuts that's awesome to normally you'd have to write javascript for all this stuff but like look at this okay so let's say I go to what's cracking and I click here boom look at this beautiful day time picker thing opens up and you could pick today or you could pick another date and like automatically pick it and you could pick the time and that's cool this is this is something you'd have to write a lot of manual JavaScript for that's automatically written for you dates get a today shortcut and calendar popup and times get a now shortcut and convenient popup that lists commonly entered times the bottom part of the page gives you a couple of options right so save saves changes and return so the change list page for this type of object so you can do save or you can do save and continue editing so continue editing the same page or you can do save and add another so add a new question and go write or you can do delete which displays a delete confirmation page so check this out okay normally when you hit you have to add all this functionality plus when you hit delete you have to then remember to add a confirmation thing to it and they have it automatically so if I had delete it'll be like are you sure you want to delete the question what's cracking all of the following or related items will be deleted questions one so only one question and objects what's cracking you can say yes I'm sure or no take me back now notice it's showing the question as what's cracking that's because of your string method that you added your STR method if you did not have that it would not show like what's cracking it was show like question one and you would just have to use your memory to remember that I'm gonna say no take me back and it'll take me back okay cool oh let's go back let's see what they're saying here and then if the value of the date publish doesn't match the time you created it probably means you forgot to set the time we can also set the current time zone right so it's not a big deal if I go in history here it says I changed at 300 a.m. it's not 300 a.m. right now so that means like I need to go inside of my settings and in my time zone and change what my time zone is so for example I think there's like America / Los Angeles something like that Oh actually work sweet for yourself just look up like time zone Django time zone settings and then find yours and put that in for me I put this in and it fixed my time instantly right okay so yeah essentially that's it for part two I hope you thought it was phenomenal I mean this this is so cool you guys and Django is just so powerful so that's it for this part guys I really hope you're excited about this thing we're gonna go on to part three but before I end this I do gotta let you know that if you are serious about web development becoming a web developer that gets paid whathe's does what he deserves you want to learn more in depth about Django and take your game to the next level I have my new course coming out it's called the profitable programmer I only open it up a couple of times in a year okay so it's a pretty exclusive course if you want to join it go to this link or I'll have it below in the description as well and join the VIP waitlist which is free to join you'll be the first one to know when the course opens up and plus as my gift to you I'll give you the top resources I use to become a software developer in less than three months okay and you're gonna have access to that for free okay all of that I'm gonna give it to you as a gift to join the VIP waitlist that's it for this video and I'll see you in the next video for those of you guys wondering what the hell is this choice top set thing it actually comes builtin and you can actually change that by passing in a related name keyword argument when you're creating the question attribute and you could give it whatever name you want