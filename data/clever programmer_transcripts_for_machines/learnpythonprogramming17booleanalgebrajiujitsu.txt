hey guys what's up this is Kazi this is my third time making this video last two recordings got deleted and they were really long I'm gonna try to make it short and sweet right it only lets me make him better so that's what I'm actually excited for anyways in this video we're going to talk about boolean algebra jujitsu okay before we get to that I wanna just take a second to show you guys check it up the official clever programmer premium short sleeve tshirt custom designed let me know what you guys think and I'll put in the link for you guys below so if you guys want to actually get it you can order it um some feedback would be great if you think it sucks or if you think it's good let me know I would love to know that let's get on with what we are trying to cover for today okay so I want to talk about pulling algebra alright so what is it and how does it work and why do we need to know it it's one of the most important things in programming that's a period in all of computer programming languages anything that you use even in electricity it's super important at the end of the day everything turns to zero one or true or false okay so we have false or true notice how their special statements in Python which is why they highlight into the color orange and pipe and then it doesn't give you an error Python like understands what true and false is for example if you do true like this or false like this it's going to give you back an error saying I have no idea what you're talking about so they're like preexisting things that are built into Python now why would we need to ever use this right why would we need to use this well let me show you guys something that foreshadows a little bit into maybe are one of our next few videos like condition the control flow where I'm going to talk more about if statements but let me just for shout out that and show you guys so you guys can see from a bigger picture perspective how it works and in turn that would make you want to learn what it is and then we can get down into the nittygritty details cool so for example an if statement works like this you have an if statement followed by some condition which does not need to be in parenthesis but I'm just putting in parentheses and that condition evaluates to a true or a false statement okay and based on that right based on this then this so it's like if that then this okay so if Johnny made more if Johnny worked overtime and he worked more than 40 hours then I want to pay him overtime okay so for example the only time this block of code runs is if Johnny made more than 40 hours which means it needs to value it to true you need to have a true here okay so let's say if true print hello okay and notice that this block of code runs because this statement is true and then this block of code runs right this is the if condition it's not very smart what I'm doing here is kind of stupid I'm just hard coding true right in there which is not what you're going to be doing most at times but I'm just doing this to like illustrate how it breaks in it's a bare bones skeleton so to speak and let me show you if false and then see what happens print hi and you can see that this part of the code did not run because it goes Oh false it's false so I'm not going to run it not going to do this right it falls and you know don't pay him overtime or whatever right I could have anything else here I just have print hello but the implications of this are far more than printing stuff it's doing actual software right now another reason why this is very important for you guys to learn is imagine if you were hired you're working in a company and you had to design a system for paying employees well if you do your logic wrong then you might be paying every employee overtime which means that the company is paying way more money to its employees like for example you might write the logic wrong and employee that works three hours might be getting paid overtime for all of those the hours the company has to pay a lot more money and then the company has to fire a lot of people because they're like well there's a lot of money going out of our pockets right on the other hand you could have the case where no employees getting paid overtime even though they worked overtime over 40 hours so with the great power right as being a programmer comes great responsibility so that's why you want to learn this stuff really really well so you don't make these MIT big mistakes and you can help out companies and you can help clients or whoever right so we have this case false print hi that's what happens but now let's do something more interesting so I'm going to introduce you guys is something called comparison operators okay so you guys might know the equal equal sign it compares two things together not one equal sign that makes something something two equal signs check if one thing is equal to another thing okay so I have two equal signs I have less than or less than I have a greater than sign I have a less than or equal to sign have a greater than or equal to sign a but does not equal sign okay these are your comparison operators so what do I mean five is equal to five it's going to give me back a true right five is five how about if I said five does not equal five what do you think is going to give me false right that doesn't make any sense how about five is greater than five does that make sense no it's not five is less than five nope five is less than or equal to five it should give me back a true five is greater than or equal to five and it also gives me back a true because it's not greater than but it is certain twofive okay so that's how this works and look at the bottom it breaks down into truefalse truefalse right now let's say we wanted to pay Johnny more if you worked going back to our original example let's say we want to pick Johnny more if you work extra hours right if you work 40 hours or something so how would we check that condition if you work more than 40 hours how would we check that we have to make that condition we have to check that condition so these are all called conditions because at the end of the day they evaluate to a true or false okay so this is a condition and then evaluates to false here so let's make a variable called Johnny hours work and let's set that equal to 40 and now let's check it Johnny hours work is greater than 40 so I'm like asking my computer question and it'll say false okay so I know I shouldn't pay him overtime then write because I got back a false what if I did is he making is he doing more hours than 30 okay good so at least he's working right he's not just not doing anything okay so he's worth more than 30 hours but he has not worked greater than 40 hours okay has he worked greater than or equal to 40 hours mmm it says true since I know he hasn't worked greater than 40 hours then in this statement greater than or equal to 40 I know that he's worked equal to 40 but let's just double check and say equal equal 40 okay cool so we now know that Johnny has worked exactly 40 hours so we can't pay him over time in this case but let's just try it out anyways let's do if Johnny let's turn it into like uh like a conditional statement which again we're going to get more into later is greater than 40 right then friend pay him overtime Oh looks like we're not going to pay him overtime because he has worked exactly 40 hours now let's make Johnny two hours 41 hours let's say he's worked 41 hours right so overtime now let's run this and you can see that it says pay over time so how could this translate for you Oh first of all let's just break down exactly what this turns into right so we have this statement if Johnny were greater than 40 hours how does this actually work well what is the variable Johnny hours work we made it 41 right 41 is greater than 40 is that true it certainly is 41 is greater than 40 and we get true and then we get into its most barebone skeleton structure which I showed you guys up at the top right here and it's simple it's simply just a true at the end of the day and then this block of code runs okay and if the same way the reason why this line of code for example like let's say I do this right if you were greater than 42 hours why does this line of code not work well again Johnny hoursworked is 41 is 41 more than 42 of course not so this turns to false and when this turns to false we get back we actually get back nothing because this line of code does not run okay that's a bare bone like that's the main reason why we use boolean operators there are lots of other reasons that you'll see as well in the next video we're gonna get down more into how boolean logic works so for now showed you guys comparison operators in the next video we're going to talk about boolean logical operators okay so for example we're going to talk about and and we're going to talk about or and we're going to talk about not all right and how all of those things work in sync with each other that's it for this video I'll see you guys in the next video