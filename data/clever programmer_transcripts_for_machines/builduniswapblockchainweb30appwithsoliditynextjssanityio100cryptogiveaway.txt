you'll build a unesco blockchain web 3.0 app with next.js you'll style it using tailwind css in this app i'll also show you how to create your own smart contracts using solidity with the smart contract that you will create you will send your own token to any wallet that you want we'll add authentication to the app using metamask and we will use sanity ios or database to store all the users and all of their transactions you'll be able to view and confirm all of these transactions over on etherscan to confirm that they are 100 real you'll also learn how to use grok and sanity's api to actually retrieve your data we'll be using the rankib test network which is built on the ethereum blockchain will then deploy this app using versailles and host your uniswap web 3.0 blockchain app on the internet by the way i just adopted two new kit and if you smash the like button and turn it blue i'll show them to you i'm waiting i'm waiting ah now that you smash the like button and turn it blue here are my beautiful kittens with that said let's just go right ahead and demo this app all right so i just got to this app you can see that i'm on the deployed link this is not the actual unit swap app right this is ours now i'm going to hit connect wallet over here now that i'm here i can choose whichever wallet i want so i'm going to connect with this wallet right now here i'm going to hit next i'm going to hit connect so now my app is connected to that wallet and you can see it's actually telling me it that right over there at the top okay boom right there now at the bottom you can actually see it's showing me my history of transactions that i've done so it's like hey you did a transaction at 1 56 p.m and another one at 1 36 p.m i can go and verify these two but let's just go ahead here and now send i'm going to send about 0.1 eth and i'll send it to my other wallet i'll go and grab the url or the code the address for that wallet paste it here and i'll say confirm boom look at that the metamask pops up asks for a confirmation let's hit confirm it opens up again just to confirm the gas fee let's hit confirm we now have a modal that shows us visually that we're waiting for this progress to be completed and i'll show you how to do all of this right how to put the model how to add a loader in this app as well and then as soon as that transaction transaction's done what you're gonna see is at the bottom it'll actually pop up boom look at that as soon as it got done over here we see 2 28 p.m the transaction got done and now that it got done i can also confirm with my own database that i got done so for example let's look at this address here 0x8 if i go to my database here you can see that a new user was created inside of my database and i clicked that user here is the wallet address of that user and it can show me that it that user has three transactions if i go back boom i can see those three three transactions right there and if i click into these transactions you can see that it's saying there was a transaction made at 14 28 which is essentially 2 28 pm currently my time is 2 29 pm and it was for 0.01 so our app is up and running showing the history of the transactions i can send money around it looks exactly like the unit swap app but that said if you're excited i'm excited let's just jump and start coding this thing up now one last thing i do want to say which is super cool is i'm doing a crypto giveaway so i'm gonna be giving away a hundred dollars worth of ethereum to one of you but here's what you have to do if you want to actually participate in that so first of all i want you to commit that you're going to be building this app if you commit you're way more likely to actually get done and actually do it instead of most of the people who just say they're going to build the app never really do it if you want to come in is what i need you to do go to twitter screenshot this current page right now okay with my face and the app and the code right there go to twitter and i want you to write down that you are committing so literally say i'm committing to building the uniswap clone with clever causey okay i want you to say that tag me in it so do at clever quasi and i want you to tag our sponsor at sanity and tag uh next js or versailles because that's where we're going to be deploying it to so make sure that you tag all of those and then just put your wallet address underneath there so for those of you who do that you're not only showing that you're committing not only like more likely to succeed and build this app out but three uh one of you is gonna get a hundred dollars uh worth of ethereum sent to you to that address so let's freaking do it guys it's going to be awesome i'm super excited and with that said no more talking let's just start coding all right so the first thing we're going to do is i'm just going to go into my github folder and i'm going to create a new folder for this so let's just call it uniswap clone i'm going to go inside of my unit swap clone and now i'm just going to say yarn create create next app and i'm going to do with tailwind css i want to essentially create a folder for this so we're just going to call it our client so the architecture that i'm using and a huge shout out to javascript mastery and in the video where he goes that goes ahead and creates his project called crypt that was really awesome so in terms of the solidity contract a lot of that is inspired by javascript mastery so again huge shout out we'll link his github repo and also his youtube channel you can check it out he makes great content on there and so the folder structure i'm using is also similar to javascript mastery because it just makes so much sense so again now we have this installed now let's go ahead inside of this so let's actually look so we're going to have one folder for our client we're going to have another one and this is going to be our studio folder so i'm just going to go ahead and make that now we're going to need that for later and then we're going to need one for our smart contract all right so let's go ahead ls and i have these three folders and the folder that we're going to open up inside of our visual studio code will be this one right here the unit swap clone so let's go ahead and do code period so i open this up in my visual studio code and once this opens up i'll bring that over so let's go right there cool as you can see i have three folders right here right our next.js app is going to go in there the smart contract will hold everything about solidity and then our studio will be everything about sanity so let's go inside of our client and i'm going to go inside of pages and here's our index file and let's just basically open this up let's cd into our client here and then we're going to say yarndev so this will open up on localhost 3000 right there and there we go you can see that it's now open on our localhost and we can see it all right so now that we have this app up and running on our local host the next thing i want you to do is these folders right so if you haven't created these folders from the command line go ahead and create them now okay this is where your app is going to go this is where your database stuff is going to go and this is where the rest of it is going to go so now what i want to do is i want to go inside of my studio and i want to actually install my sanity client now this is a very important part so what we're going to do if you don't have sanity installed what you're going to do is you're going to do npm install sanity cli just like this so you're gonna make sure you hit that and run it now i already have standard install so i don't need to hit enter but you might need to hit enter so go ahead and install that now here's the next really important command you're gonna need to write so you're gonna need to do sanity init dash dash coupon clever programmer this is very important that you actually do that because it's going to set you up with sandy's best setup that's completely free so make sure you hit enter on this and install it so it should say something along the lines of coupon clever programmer validated and that means you're good to go now notice that for me here it says you looks like you already have a sanity account suite so you might not have a sanity account so make sure that you go ahead and create a sanity account there will be a link in the description below of this youtube video the link you the sanity url simply go ahead to this link over here and click it and once you're on here look it'll show you that this plan includes 200 000 api requests 1 million api cdn requests and 20 gigabytes of bandwidth and all of this is actually free so this is especially for you if you're a clever programmer subscriber these are the commands that you're going to need to do to install the things that we've just shown you and then hit get started and basically just create an account again all of that is going to be completely free oh and one other really important part of the tutorial you see that button right there yeah just go ahead and turn that white and now your app will work perfectly all right now let's do our entire sanity setup so it's asking what do you want to name this project we're going to say uniswap blockchain app so let's just hit enter and let's see what happens use the default data set configuration yes and now it's creating a data set for you and for the output path yes this is the path that we want it to be in so i'm already in my studio folder so make sure you're in your studio folder here and this is the path that it should be showing you let's hit enter and then for the schema we're actually going to choose the clean project with no predefined schemas let's hit enter on this and then it should basically tell you that it's actually resolving all of this and then once this is installed then all we have to do is just set up our schemas and then we will be done with our sanity setup of this app and then we're ready to kind of get started coding and building this thing up all right so you should see success now what and that means you are good to go so once i click inside of my studio here i'll be able to see you should see all of these files in there that's what we just installed the things that we're going to need to update here are our schemas and these schemas are going to keep track of the user transactions and as well as the user schema here is what this basically means inside of our this is my deployed app so if you look in here i have transactions that's just a history of every single transaction that ever took place i also have my users table over here and this has all of my users now all of these all of these transactions here are associated with with users like so and so for example you can see that this user has three transactions right so this is connected to that table so to sh basically have a schema like that this that's interrelated we're going to need to create our schemas insanity that represents this structure so we're going to create a new file and it's going to be called transaction schema.js and then we'll create another file and this one is going to be called user schema.js just like that and let's build out what one transaction looks like all right so the first thing i'm going to build is the transaction schema so what does one transaction actually look like so it holds information about your from wallet address which wallet you're sending to the amount that you're sending the time that you've made that transaction happened the transaction hash which is the proof verifiable proof from the blockchain that actually took place and then which user is that particular transaction referencing so let's go ahead and get started on it so let's create our transaction schema we're going to call it transactions the title will be transactions for the capital t that's why you're getting a capital t right there it'll be of type document and then inside of it we'll create fields so fields are everything that's right there inside of these fields we're gonna have name which is gonna be a transaction hash and the title is gonna be transaction hash just like this so that's this field right over here it's of type string let's create another field this one is gonna be our from address and again this is going to be a type string as well so title is going to be from wallet address and the type is string now let's create another field now you're starting to get the idea of how we're creating these fields it's going to be to address but the name of it is going to be two parentheses wallet address just like this type a string let's create another field amount title is amount with a capital a and this one is going to be like a number right it's a type number because this is not necessarily a string and then we'll create timestamp titleist time stamp and type of this is going to be date time because here you have date and here you have time and then the last one is also going to be a string so boom this is all done here and now we're gonna move on to creating our user schema actually all right now the schema we're gonna create is for our users right here so let's go in here and uh this is the schema that we're gonna create so users but what does one user represent and what are all the fields they have so here a user has how many fields one two three so i got three fields right there type string string and then this is actually not type string this is actually a type reference so we need to create this structure here so let's define our user schema name of it is users and we'll title the users and it's a type document because this is an entire document here are the fields that it's going to have the first field is going to be addressed it's going to be titled wallet address of type string then we have our user name it's going to be called username and it's going to be of type string and then lastly we're going to have our transactions title is going to be transactions and the last part is actually the most interesting part because it's a reference you're going to say type of it is array and we're going to say of we're going to create an array and then it's going to be an array of objects okay so array of one object in this case now type of it is gonna be reference and then we're gonna say two what is it related to and it's gonna be related to type transactions doing that just created a relationship between users and transactions and basically it's saying that inside of users this transaction right here is actually part of the transactions table in there so super interesting actually how that works now let's go into our schema and all we need to do is actually connect these two tables that we've created so i'm going to go inside in line 14 i'm going to hit enter and we're going to concat with the following two so we're going to say user schema and transaction schema and make sure that from the top you import both user schema and transaction schema and we're using them right over here simply hit save and now in order to be able to see this you can actually whip up your own sanity studio locally and take a look at this so let's try it let's try doing sanity start inside of my studio folder right here and let's see what happens so what it's going to do is it's going to compile these files that it's seeing here and and build out the schema and once it builds out the schema it's gonna let you go to a local host and take a look at it so localhost is http localhost colon3333 let's go to it and i'm gonna sign in with my github you can sign in with whatever you want you could sign in with your google account as well that's totally fine and i have my schema actually so i can see users right there and i can see transactions right here let's go inside and nothing is there yet let's go in transactions nothing is there yet however if i go into transactions right let's go inside of my transactions and hit edit watch this i have all of these fields right here so my database part is very very quickly actually done thanks to sanity if i go to this here and let's say i change this transaction hash to transaction potatoes and let's put an emoji of a potato i actually don't know if emojis will work or not but here you go you have transaction potatoes so you can see that it's super simple how it works and if i go into my users and i hit click here right on the one on one of these documents and hit edit you can see i have my wallet address my username and interestingly enough right for transactions type of transactions boom and now i can just hit item and then reference a particular transaction item here so and then vice versa if i go to my transactions and click here by the way this field here is not necessary even in my deployed version so i'm just going to go ahead and remove this from my actual deployed version and in the version that we're building on our localhost 3333 yeah you shouldn't even have the user reference so you should be good to go and there i just removed it from my deployed version too so it shouldn't be there anymore all right so now let's go ahead and start working on the front end of our app temporarily we're done with our studio insanity stuff let's go to our client and i'm going to go inside of pages we'll click index dot tsx and don't let this phrase tsx freak you out it is just javascript types it's typescript but with typescript includes javascript inside of it so even if you literally just wrote regular javascript it'll run like like a regular javascript file you'll be fine and if you want to literally change that to a dot js you can but as we go on i might show you some typescript as well so you can leave it like this that's fine all right so what i'm going to do now is we're going to basically remove everything inside of this div so you should just have this div let's go to our local host so it should look your app should be looking like this right now right with nothing there just empty and then what we're going to do is so we're going to add some styling here and for this styling i'm going to create a wrapper and inside of this wrapper we're going to give it a screen height a max height a min height and then a wide screen or you know a horizontal width right width and height so that will give it a background color which is kind of like this dark color that unit swap will have we'll make the text white we'll make the select none and we'll make it flex box enabled make the flexbox go in a column so flex column and then justify in between so that's what my wrapper is now i'm going to replace all of this here but the following now i can simply just do class name equals style style dot wrapper okay so i'm pulling it from here this is something i've i've been recently liking doing styling like this it kind of reminds me of react native but then combining tailwind with it so it's kind of a really nice touch and i have kind of stopped using styled components i don't like them i for a couple of reasons and i'll if you want i'll make a video on it at some point but yeah there you go so i think this should be good for now so inside of here let's go ahead and make a h2 and say hello and let's do one that says buy all right and check it out and boom there you go right you can see that my hello is showing up here and my buy is showing up right there if i added a third thing that would show up right in the middle so this is kind of how i want it because if i look at my uniswap app you know it has like nice distancing from everything so that's how i want this app to be so this first h2 this is gonna be like my header all right in here i'm gonna have my main and then in here i'm going to have my transaction history so we'll work on these components the first component we're going to work on is going to be our header component so let's get to work on that so inside of my client i'm going to create a new folder we're going to call it components just like this and then inside of my components i will go ahead and create a new file it'll be called header header.js alright so let's work on the header now so i'll do r a f c e hit tab it'll auto complete and give me this stuff this is helpful all right now before we continue we're gonna need a couple of logos so for example we're gonna need this logo and this uniswap logo right over here i'm going to create a assets folder at the client level so i'm just going to say assets and inside of my assets i'm just going to put three things in there so those three things are going to be these my eth png my eighth currency and then my unit swap we will link you guys all of these in the description below you should be able to go and get them let's go ahead and just get this to show up so i'm gonna say yo i'm gonna say header let's go to our index and replace this here with our component header let's go back to our app here export default that's perfect i just had to replace this index tsx with js so it could like read these other files and now when i do r it gives me the ability to auto import and there we go i did header header at the top and boom let's go back inside of our header and i will say header all caps and it did indeed change so this component is now showing up perfect all right and now while we're at it let's go ahead and let's also install react icons i'm going to say yarn add react dash icons like this because we're going to need these whoops we actually installed them in the wrong folder so let's get outside of studio let's go inside of our client and this is where we need to install it so let's go yarn add react dash icons just like that hit enter and let the installation finish all right so we're gonna build this header component from scratch just so you can see how it gets built out okay at the top we're going to import react use date and use effect because you're going to need access to these you're going to need access to image let's get all of our icons we will get all of our assets from the assets folder like the eth logo and the uniswap logo because you're going to need that and then i'm going to create this style component i'll keep it empty for now we'll do our styling at the end so you can see what all of the styling does and we're going to need to keep track of one of the states so for example when i go here this is my built app right so when i click pool or vote you see how it changes with vote and pool and swap so we're gonna need to keep track of that state so let's go ahead and keep track of it so we're gonna say selected nav and then we're gonna say set selected nav and in the start is just gonna be the swap it's gonna just be this guy right over here okay that's gonna be the default all right and then we're gonna return so this is what we'll do so right now this is all you should be seeing on your app your app should be kind of working and all these wrappers and everything here we're going to style that in a second so i'm going to create a div inside of that i'm going to have my header logo and i'm going to put my logo in there so now you should be seeing this logo right there all right height of 40 with the 40. then we're gonna have our nav and then inside of that we're gonna have nav items container all right we're gonna have another div and we're gonna have just we're gonna put swap there so this is now we're creating the container for this and then on click it'll allow you to change which one you're selecting so that's what that's doing and here's how we're going to be doing it so our class name is going to be a template literal and it's going to be style nav item and then this class name that it chooses here is gonna be based on which one we've selected all right then we're gonna have pool so what happens if you click on for example pool or vote so that's what we're doing here so now i'm gonna have one for pool and we're gonna have similar logic in there and then we're gonna have one for vote with similar logic in there and then we're gonna have one for the final one which is this charts and it's a tag because when i click charts it actually pops open a new page and takes me to this right over here so let's go back and for this we're gonna have a nav item and it's going to have an arrow pointing up so it's going to be this guy right there and it's just going to say the word charts now if i click it it's a link see already taking me somewhere else now we're going to have a buttons container and this buttons container is going to be for all of these guys right there all right so in here i'm going to have a button with the button padding and then we're going to have a button icon container so it's going to we're going to put the icon in there so here we're going to have the eth logo inside of this so for example it's going to be this guy right there and then it's going to say ethereum inside of that button then we're going to have another button and it's going to have this pointing down arrow so if i go here see this pointing down error right there so i have this one big button eth logo goes in there that arrow goes in there and then i'm going to need another button this one right here and then another button to put the three dots in there so i'm going to need my connect wallet button so for example when i go here and if let's say i'm not connected right so let's log out here let's go to the one that's connected and then i'm going to go to connected sites and disconnect here so now when i refresh watch what happens boom it says connect wallet so by default that connect wallet should be there so on click it should run a connect wallet function which we have not created yet but we will it's going to have the connect wallet styling and we're going to give it this accent okay so it's going to have that like a little blue accent and it's going to say connect wallet so right now when i ran it of course it doesn't work it breaks for now we're gonna need another button and this is gonna be the three dots just like we had talked about right i got my three dots right there since in terms of the buttons now we're good with the buttons all right so now let's go ahead and let's get to styling this thing all right so let's do this let's add some styling now so let's add a wrapper around all of this and we'll give it padding in every direction we'll make the screen wide we'll make it flexbox enabled so it's in a row instead of like columns because that's what we want here let's justify in between so now we have spacing going around which is super nice we will and then make them a center aligned so then everything is nice and center aligned so our wrapper is great now let's just fix our logo here a little bit so basically we're pushing everything away from the logo let's go ahead and start working on our nav now so we'll make it flex one so it takes up all of this space here we'll make it flex box so it's going in a row and then we'll justify and center align everything okay let's put a container around our nav items so here now swap pool vote charts has a nice container and then between each of these items we're going to go ahead and put distance in between each now if you're wondering where all the rounded 3xls are coming from or like this rounded thing right here right this is where it's coming from now we're going to need to make sure that each of them has a active color so what i'm going to do is we're going to add in an active nav item so now take a look swap has that active color and in tailwind if you want to give a specific color this is how you can do it we're going to put a buttons container around it we're going to put all the buttons in a container so these guys right here all right and then we're going to style our buttons to be a specific way so now they're looking much nicer let's give buttons some padding let's add in a text container for these buttons all right and then let's add in a button icon container so now the buttons look even better and now they have icons inside and last but not least let's add an accent so our connect wallet is looking good so if you want to see all my styling here you go i'll zoom out as well so you can see it all on the same screen if you want to pause it and you want to copy it go ahead you can do that not a problem but that's all the styling for this page all in one place that's why i kind of like this tailwind and then tail and css and then just using style like this and then the rest of it you should have it just like this with that said we are currently done with the header let's move on to our main section and work on adding this form right here that we have in the middle let's go all right now let's go ahead and work on main which is going to be right there the form looking thing cool so inside of my components i'm going to create a new file it's going to be called main.js now before i start writing too much in here let's go back to our header or sorry actually let's go back to our index all right and in our index i'm going to replace this here with main and let's go ahead and import main so i'm going to say main from main just like that so now it's going to error out but that is that is totally all right so let's get to work on making our main page so let's get our image from next let's get a couple of icons that we're going to need let's get our eth logo i'm going to get all of our styling in here so i will zoom out so if you want to screenshot this you can goes on forever kind of but again i don't want to spend too much time on the styling guys because then we're never going to get to the solidity parts and we're never gonna get to building this app out let's uh export our main function and let's create our main function okay and then inside of here we're gonna create a wrapper let's go like this so we can see it and then inside of that wrapper i'm going to have my content this is where all of my content will go so you can already start to see this form right there inside of that i'm going to have my form header we're going to write the word swap in there just like this and then we're going to have another div inside of it that's going to basically contain this cog wheel right here then we need our prop container so let's put our input in there so boom our input looks real nice here if you're wondering what this pattern is if you go on w3schools the pattern attribute specifies a regular expression that the input element's value is checked against on form submission all right so cool little hack that you can do to before the form submits it just checks if this pattern matches aka if this in here is actually in number and this handle change function don't worry we will work on that next let's just keep building this out for now all right then i'm going to need my currency selector div inside of it it's going to have currency selector content and currency selector icon and boom there we go so that's what that looks like all right and inside of that i'm going to have my currency selector ticker so i have my eth right there and then we're going to put a drop down arrow next to it to show that you could click it and kind of draw do go through a drop down all right so let's keep going on this i'm going to need another container inside of it i'm going to put another input just like this one and you can see my placeholder is basically telling you that it expects some type of address right and then we're gonna do add a button that's gonna say confirm and then the styling is coming from our confirm button so when you hit confirm on this we're going to handle submit so these handle change and handle submit functions we're going to work on and make sure we have them completed so instead of in in terms of making our main here we're done so now we have our header completed and we have our main completed next thing we're going to do is now we're going to try to make our wallet work so let's go ahead and do that shortly all right so now to make the wallet work we have to start doing some big boy and big girl javascript stuff so let's get into that what we're going to do is at the global level the client level we're going to create a new folder and it's going to be called context because we're going to use the context library to essentially lift the state up because in react right you have all these components so let's say you have your main.js here you have your like header right there and then you have the your actual app right here you know if you put your component inside of your main.js right there well your app does not have access to it and neither does this guy doesn't have access to it either so you can only pass this component down but you can't pass it this way and you can't pass it up so that's a problem so normally what you have to do is go okay we're going to put all of our state in our index or app folder like our main folder and then everything will have access to it but that's kind of like clunky and weird and you got to put all the state in this one file and that one file becomes massive and still not the right way to do it because then you got a prop drill so if there's like multiple components here you got to keep prop drilling so instead what people use is something called like redux and why they use it is because you essentially get this global container global bucket you keep throwing all the crap in here and then whenever anybody needs the crap they just put their hands in there and pick it up just like that so super easy but instead of using redux because it's weird and complicated we're gonna use the context api make sense all right let's go boom so i created my context folder inside of here we're going to create transaction context again shout out to javascript mastery for this way of using context and then using contracts in there as well so you know a bunch of it was inspired by him he crushed it again so i'm going to give him a shout out let's now start working on this all right so the first thing i'm going to import react and we're going to get use state and use effect because well we'll need access to both of these let's go ahead and export a const which is going to be our transaction context and we're going to do react.create context just like this so this is a thing we're exporting and this is what's actually going to be creating the context that we need essentially creating that little bucket that i was talking about the global level bucket and then the whole app can have access to the state all right so one interesting thing i want to show you here is let's go inspect right because we're going to work on our wallet soon so in here if i hit console now let's go window.ethereum and it's pulling all of this information this it only does that if you have meta mask installed so make sure you have metamask and the chrome extension for it installed so it's already pulling this if i didn't have it it would not work so now i can ask it questions like is that metamask and it can actually tell you if that's true or not so window.ethereum is an interesting one so we're going to use that so what i'm going to do is i'm just going to say i'm going to create this i'm going to say let eth and then what i'm going to say is i'm going to say if type of window is not undefined so this is going to be a not undefined then we're going to just say let eath be window.ethereum so then we're just going to pass around eth and that's going to essentially represent window.e now we're going to create a function that allows you to connect your metamask so let's go ahead and do that so i'm going to go const connect wallet and then i'm going to basically say metamask and by default let's have it be eth and then we're basically going to say try the following if there is no meta mask then return alert please install metamask just like that otherwise we're going to do the following we're going to say await metamask.request and then we're going to pass it in a method and that method is going to be eth underscore request accounts so this is going to do that little popup thing that happens when you click connect wallet and this popup thing happens this is when you call the method request accounts and then we're basically going to say set current account to be a count of zero now you might be wondering hey where's the set current accounts thing we're doing not a problem you just simply go ahead at the top and we'll create this state so we can keep track of it so at the global level the main component that we want to extract from here is actually our provider that's what we're doing this whole thing for here's what we want to do let's go up at the top and you could even put it all the way at the top or you could put it right here that's totally fine but basically we're going to say const transaction provider and it's going to take in children and then in here i'm basically going to go so current account set current account and in the start we'll just have it be empty just like this nothing and then i'm going to take this set connect wallet function i'm going to put it let's go right there i'm going to put this inside of my transaction provider just like that current account set current account and then what we want to do we want to catch so i'll say catch and pass it the error whatever error that i i get and we'll just log basically say console.error error will log the error and then we'll throw a new exception so we'll say error no ethereum object now here let's go ahead and say export const because we we want to export this so we can actually use it inside of our entire app all right so at the end we want to return our provider so i'm going to say return and we want to actually go transaction contacts dot provider so this is coming from our contacts that we created right up here so transaction contact style provider that's what we're going to return and let's go ahead like this and then in between this we want to say is valid and then we want to say what we want to actually return so we'll return our current account that's fine and then the next thing we'll return is our connect wallet function all right now this let's remove this angle bracket right there and what we'll do is we'll put that here right so just like that all right and in between this we're going to pass in the children just like this so this is what your transaction contacts that provider will look like value children make sure that you close you open and close the angle brackets so at a high level what you've done what this is doing here is it create it's creating that global bucket and throwing current account in there and connect wallet in there so then the rest of our app and any of our components can have access to those those functions or those state variables now what we need to do is let's go to our underscore app file and i'll call this dot js and in here we need to wrap our entire app so i don't need this props here and i don't need to say props right there let's just go like this and i'm gonna say import transaction provider from contact slash transaction context so there we go and now we're going to wrap this thing inside of that so i'm going to go right there and we'll go transaction provider and boom and now there's there's this error that's happening so we're just gonna do this and remove that semicolon boom there we go and so this now becomes the children and all of these children's will get access to the transaction provider the global store that has methods like methods like current account and connect wallet now in order to use this let's go to our header component all right and we're gonna basically bring in our transaction contacts from context transaction context so basically we're bringing this from right there inside of our header component now right over here we're just gonna destructure that from the context that we created so i'm basically going to say const connect wallet and current account and we're going to say use context and we're going to say transaction context now use context is a react hook and we need to actually bring that from react so let's go up top and let's also import use context just like this there we go so now we got access to okay let's go back current account yes and current account yes perfect now just to see we have access to these let's just go ahead and say console log and i'll just say connect wallet and we'll say current account so let's just go ahead and try that let's see what we get all right so now that i'm i'll refresh here on my localhost 3000 and at the bottom what you should see is something called an object or you should see this thing here and look at this right it says current account is undefined and connect wallet is a function and that makes sense because connect wallet indeed is a function that i created so that's perfect and current account that we have right here is undefined so that makes sense so that means all the global stuff that we created we're actually getting access to it so let's just say i wanted to create a random thing right funny message and instead of saying you suck we just created this funny message i could just pass that down right here funny message and then i can like destructure it from here and say funny message and then we can go right there and say funny message and now let's refresh and you can see i'm getting the funny message you suck so whatever is inside of my contacts now is coming into my header and everywhere else that i want to go so you can see how context api is so easy and so much nicer to use honestly than any of that redux garbage so just use context api it's way better for most things so i'm gonna obviously go ahead and undo all these funny messages because you know we don't need that anymore so remove it from this file as well remove funny message boom back to our normal state now that we got access to our connect wallet let's actually see if our connect wallet function works meaning if i go down here i'm already on line 85 i'm already calling my connect wallet function meaning that when i click that button my connect wallet function should work so let's go ahead and see what the heck happens alright so i'm going to go ahead and click connect wallet boom look at that and metamask just popped up you guys beautiful all right and let's go ahead and choose next here and hit connect and boom look at that it says current account and it's pulling the right account it knows when it's connecting it knows exactly how to connect how to pull that data from there that's absolutely perfect right that's exactly where we're looking all right we're going to create another function that's essentially just going to check if an account is connected if a wallet is connected that's all it's going to do cool so let's start building this out now so i'm going to check if wallet is connected it's going to be an async function and it's going to take in a meta mask if it already exists and by default we're going to make it our eth whatever we made our ether at the top and then i'm gonna do a try catch block and i'm gonna say if the metamask doesn't exist just stop and return please install metamask otherwise what i want you to do is go ahead and get the do a metamask request and get the account using the method eth underscore accounts and then just get the account link so if the account length exists then basically set the current account to the initial account that we just got so if we got an array of accounts we just send it to the first account that we got it returns it always as an array cool and then we will catch the error and just show the error and throw a exception if we got an error that's it that's this function check if wallet is connected and how we're going to use it is right at the top we'll write a use effect hook here so the use effect hook will write it right over here right and it will have no dependencies it will basically run every time the app refreshes or it starts and all we're going to do is just run this function check if wallet is connected that's it so this will run every time we refresh so let's go ahead and and also write a console log here and we're just gonna say wallet is already connected all right this is just for fun and we're gonna write that now so let's go ahead and refresh here and you will see it says wallet is already connected all right now and why does it say that well it's because we've connected our wallet right there right so let's go right here and let's check connected sites let's remove this localhost right and refresh refresh boom now we don't get that anymore it doesn't say wallet is already connected anymore so that's gone now and what this will do is also check if meta mask is installed or not so meaning if i ran this somewhere where metamask is not installed so let's go right here see it will say immediately right at the top please install metamask so it will catch that error right away and throw through an error now one thing i want to do is i want to do some conditional rendering over here because i don't want to be connected and for it to still say connect right so for example let's say i go here and i hit connect look it still shows up there so we're going to do some conditional rendering all right so to make this a conditional render i'm basically going to say does the current account exist and if it does the following should happen so basically this or that should happen so in this case over here if the account exists you know show essentially show user name and if it doesn't exist then show the connect button that's effectively what we're doing here so what we need to do is just plug those in so basically what i want to do is wrap this wrap both of these in parens and then what i want to do is this is the code for my connect wallet button right so i want to take that i want to cut that so i'll cut it and i'll go right here put parentheses and paste it boom so i'm done with the use case of if the current account is not showing up but what do i do when the current account is logged in so currently just showing username right if i change this with clever causey it's working and if i log out it'll break out but i still need to add the styling and everything so let's go ahead and do that so let's go ahead and remove clever quasi and we're gonna do the following let's add in a button with a padding and inside of here let's add in a button text container and instead of saying username here i'll simply just say not even that will actually just like make it look like a wallet and let's go here and boom you can actually see it's showing up so now that i'm logged in it shows this and actually if i log out watch what will happen connected sites log out disconnect right and let's refresh and boom look at that so that's exactly the feel that we're after right now let's connect again and boom there we go address so perfect the conditional rendering is working really well all right now that we're done with our functionality of adding in a wallet let's get to work on actually getting our solidity environment set up getting hard hat set up and uh getting our contract deployed so it's gonna be some awesome stuff get pumped and i'll see you in a second all right so now what we're actually to do is we're going to set up hard hat and we're going to basically go ahead and do this here so get out of your client in your smart contract we're going to create a new not not a new file but basically we're going to go inside of your smart contractor so let's back out here let's go cd smart contract just like that and now here we're going to do is we're going to try to use this command that says so on the hardhat.org getting started page right here i see their command npx hard hat so let's see if we can run that and if that works so let's go ahead and try that npx hard hat yes install the packages so it looks like it's installing and it's getting stuff up and running once that's done you're gonna see that in your smart contract folder it's actually going to become pretty awesome so now when you're here go ahead and choose create a basic simple project hit enter for the root this is the root so just hit enter that's all you got to do all right do you want to add a git ignore sure why not hit enter sure hit enter sure hit enter and it will install and add all the dependencies so for example hard hat waffle ethereum waffle chai hard at hard hat ethers all of that so let's go ahead and zoom out now and once this installation is done we can actually get started working on our smart contract so you can see that now my folder has my smart contract is starting to have a bunch of things installed here right that's what we're installing right now now that we're done beautiful inside here of our contracts you can see that we have greeter.sol we're going to rename this contract to be transactions.sol all right and because i want to visually syntactically highlight and use uh solidity i'm just going to go ahead to my extensions by doing command shift x or just clicking extensions over here typed in solidity and let's go ahead and install solidity so that way for writing solidity code it can actually like syntax highlight it and make it look real nice so that's installed let's take a look yep now we're getting some styling at our transactions.sol we're gonna basically make this entire contract empty all right and then we're gonna start from here let's also actually get rid of this as well and the last bit right over here so we start off with just pragma solidity so this is just telling it which solidity version to use all right so let's start making our transactions contracts i'm just going to do command b and kind of hide that and so you can see full screen so let's get started on our transactions contract the event is going to be transfer it's going to take in an address type which is going to be sender another address will be receiver so where are you sending it from and who you're sending it to it's going to take an integer or a uint amount string message so the message will just be a string and then we'll have a you in 256 which will be a timestamp and then we will have a string keyword so this is just going to be whatever the keyword is cool now here's what the function is going to be so the function is going to be called publish transaction it's going to take in an address payable so this is where so it's going to take in an address it's going to be type payable and then receiver we're going to have a uint amount payable means you're paying it to the receiver that's who's going to get paid we're going to store the message in memory and we're going to store the keyword in memory as well and this is going to be a public function and the event that we're going to emit is transfer and so we're going to omit the sender the receiver amount message the timestamp of the block and then whatever keyword was passed so in terms of our contract our solidity part of it we're almost done honestly it's yeah it's honestly that's simple we're pretty close to being done but our contract here is done now we're gonna work on our deploy script so let's go here create a new file we'll call deploy.js and we'll work on this script together all right so let's get started making this function so i'm going to make a function called main and then we're going to have transaction factory this transaction factor is going to await hre.ethers and it's going to get the transactions from the factory so basically you know the transaction contract we deploy it and this allows us to actually like pull it from there and then what we'll do is we're going to go ahead and deploy that contract we're going to await the deployed response that we get back and then we're essentially going to say the transaction that that contract right was deployed to this address this is this will be the contract address all right and then we're going to create a iife which is a immediately invoked functional expression so this is going to be an async here an anonymous function we're calling it immediately and then it's going to be wrapped in a try catch block and i'm going to await the main function and once it returns simply just exit without any errors and if it does return an error then basically exits with an error we're going to tell the system something is broken so in terms of our deployment contract that is essentially it and we're done all right so now let's go ahead and actually deploy this contract so what we're going to do is and by the way if this code is like where the heck is this coming from this code is right there and we're just using a async await function to to return it you can just copy and paste this as well like that should work too both work now what we want to do is we want to run this command here npx hard hat run scripts so let's go ahead and zoom in here so you can see it and we're going to go npx hard hat run script slash and then we want to give it which scripts we're going to say deploy.js and then the last thing we actually want to say is and this is an important bit we want to actually give it the network flag and here's the network we want to deploy this to it's rinkaby oh one thing i actually did not do for this is let's actually make sure that we compile this so let's go ahead and let's do npx hard hat compile so let's do that first all right one other thing we have to do is inside of our hard hat config file oops sorry let's zoom out here inside of our hard hat config file right there we're gonna go ahead and just set up a couple of things so we don't need any of this don't need any of this there so this solidity contract solidity over here yep okay cool now in here what i want to do is i'm going to have networks like so uh and here's what networks is going to be so it's going to be the rinkybee network and the url is going to be this long alchemy string i'll show you exactly where i got this alchemy url from and then i'm going to also need an account and the account is going to be this long uh private key so this is my private key from my metamask so i'll show you first where i got this from so if i click over here and i go right there so let's go to my one of my burner accounts that i don't care about and in here let's click account details right there and here and if i click export private key and i type in my password here as soon as i'm done typing in my password it'll give me the key so that's kind of where i'm getting this from now this is another burner wallet that i'm using so that's where i'm getting the key from and then this alchemy url right here this i'm getting it from the alchemy website so if we go alchemy api and we hit alchemy you can hit get started for free and you can create an account with them so i'll go ahead hit create an app and i'll call this the uniswap blockchain app and we'll go development and ethereum is fine and then we will say ring create app here we have our unit swap blockchain app so we can go inside of here all right and then where i click to view key and it just gave me my url so i'm going to copy that and right here i'm going to go ahead and paste that url so that's all you need to do right there all right so now let's go ahead and try that command where we try to deploy to the rinkeby network and let's see what happens so npx hard hat run script slash deploy.js and we're going to pass it the rinkyp network and look at that now i'm not getting an error anymore it means it knows which network we're deploying it to so that's a really really good sign and congratulations it looks like the contract was deployed it is the transactions contract so here is the transactions you know dot sold contract was deployed to the following address so let's go ahead and deploy it again and now you're gonna see that it's gonna send and and show us a different little message on our console log just just one that's i think a little bit nicer right transactions.sold contract deployed to the following address and if you actually go to that address you'll be able to see that yes indeed that contract is deployed all right with that said our contract your very first solidity contract is now deployed congratulations smash that like button if you're pumped about that and now we're ready to get back and this contract that we have now deployed we're going to interweave it into our next app coming right up all right now we're going to add the functionality to be able to send the money so sending the money let's go ahead and start working on that now all right so let's start working on sending transactions so let's create a function called send transaction it's going to be an asynchronous function and what we're going to do is we're going to give it the argument meta mask which will default to eth because we're already kind of grabbing that from the global scope of our chrome right window.eth let's also get the connected account or default to the current account and then we're going to make a try catch block like this so just a try block through a try and let's start filling this out so basically if the metamask doesn't exist just return and then i'm going to destructure address to an amount from the form data so if you're like hey what the heck is this form data we're going to create this inside of our transaction context as a matter of fact let's just go ahead and create that actually once we're done with this we're going to go ahead and create the form data so we'll we'll we'll take care of this right away all right the next up i want to actually get my transaction contract so i'm going to call my function get a theorem contract we're going to create this function as well so we're going to create this and this function as well let's keep going in the meantime and i'm going to say the parsed amount is whatever i'm getting from ethers and i'm going to parse the ether i'm going to give it the amount so what is what does this mean in big picture view well here's what that means so this is going to be the address to and this is going to be the amount and we're going to be pulling this is going to be the form data we're going to pull that form data and destructure it okay so that's kind of what's happening then we're going to await the meta mask request so metamask is going to pop up and the method that we're going to ask it to use is the send transaction and the parameters is going to take are the following so it's going to be array of objects from is going to be the current or the connected account 2 is going to be who are we sending this money to gas this is just going to be 52 000 way gas fees and then value is going to be whatever the parse amount we got and then we're going to turn it into hex cool that's going to be the value great then we're going to wait for the transaction hash and i'm going to call my transaction contract dot publish transaction this is the contract that i've created don't worry all of this we're going to get access to it from when we do get ethereum contract okay so we're going to create that function but remember our solidity contract had a dot publish transaction method and then we're just going to need to pass it the address the parsed amount a message so transferring e from in this much east and sending it over to this account and then we're going to say that the message the keyword is transfer in this case so if you're wondering what is this keyword thing well if i take you to my transaction soul you can see that i have keyword right there let's go back and uh let's keep on working on this next up we're gonna await this so we're gonna wait for this entire transaction to actually finish and what we're gonna get back is a you know this is gonna once this finishes this will this whole thing will return to us a hash a hash is just this long string that will encapsulate this entire information so we're going to await that hash and then we're going to save that transaction okay so we're going to call our save transaction function and we're going to pass it all of this information we're going to catch and console log the error and then we're going to set his loading to true while we're waiting and we're going to set his loading to false once we're done waiting for the transaction and we have actually saved it cool let's say now there are a couple of things that we're going to be doing in here so i'm going to comment this out because save transaction this is going to be something we're going to be doing with our database so let's just leave this leave this here for now and the set is loading this is going to allow us to put a nice little loader while the transaction is loading so let's go ahead and make a couple of state variables all the way at the top so i'm going to go right over here and let's go ahead and create a few new state variables i'm going to say const is loading and set is loading and we're going to set this to false by default and then we're going to get the form data as well so i'm going to say const form data set form data and we're going to say address to blank in the start and amount is going to be blank as well just like this let's go ahead and make sure that we actually pass this down here so i'm going to go ahead and say we're going to pass or send transaction function so we're going to be passing this function and we'll now have access to this function inside of our main if we wanted to now one last thing i want to do is handle the change of this form so what happens when i change things on this form let's go ahead and work on that so i'll create a new function and we'll call it const handle change and it will take in an event and whatever name you give it the name is like the attribute that you give it and what we're going to say is we're going to say set form data and then it's going to take the previous state this is some advanced confusing javascript but you'll be fine just like this so this is going to be the key this is a dynamic key that's being created on the fly and this is basically getting whatever the previous state was so there's something really weird that most people don't know but whenever you call these set hooks by default you have access to something called previous previous state or prefs date and it's a really clean way of doing it and it's like the most robust way of doing it so look at it kind of at your own risk but it was a rabbit hole i fell down into and i was like oh my god this is so cool but uh honestly you don't need to worry too much about it if you just use it just get it to work and you should be good and i'm going to pass this handle change a function as well actually so let's go inside of our main and in my main what i want to do is actually destructure some of this i'm going to say const form data also destructure handle change and send transaction function and i want you to destructure this from let's use the use context hook and we're going to say transaction context let's hit and let's go ahead at the top and make sure we import this so boom transaction context from dot dot slash context slash transaction context just like that so that will ensure that we're getting access to the form data the send transaction and now we simply just have to use these before we use them let's create one more important function so this is going to be our handle submit function so handle submit function it's going to take in an event we're going to destructure our address to an amount from the form data let's prevent the default and if the address doesn't exist then stop or the amount doesn't exist then stop so if either of these don't exist just return and don't do anything otherwise send the transaction so run our function send transaction and that's it so that's essentially it when it comes to the form because we have the handle change and that's happening right over here as i'm typing in the amount it's filling out our address to our amount that we're destructing from form data and then simply just send the transaction so let's give it a try and let's see if anything at all happens so let's keep an eye out on our console and let's keep an eye out on our wallet as well okay let's go here our local host and refresh oh it says use context is not defined so let's go ahead import use context from react let's refresh there we go all right we're currently logged in so our wallet address is right there and now let's go ahead and try sending some eth so here's what i'm going to do which is which account is a 0 8 it this one right is 0 x8 so i'm going to not wait this isn't connected um let's refresh oh the 0x8 is hard coded so let's go ahead and update that so that's not hard coded anymore let's go to header and we're going to update this real quick so inside of header what i want to do is create a username state and then all i'm going to do is create a use effect hook just like this for essentially whenever the current account updates and then i'm just gonna say set user name to and then we're gonna do this which essentially basically means so let's go right there let's close it out and this piece of code here essentially means um give me the first seven strings give me the first seven letters of that long wallet address then put dot dot dot and then give me from 35 continuing all the way until the end that's all this means and then that username will actually just show that wherever i hardcoded it right so let's look for 0x and i hardcoded it right here so we're going to replace this and we're going to do username and let's close that out just like this let's close this guy out right there and boom look at that our wallet address is now showing up so now i can see which wallet is connected so it's not this one it is this one indeed so i'm gonna send money over to this one okay the react.js blah blah blah so i'm gonna copy this and we'll we'll do let's just check so if i do 0.1 eth this should go from 0.7 to 0.6 so let's go 0.1 eth we'll send it to this address and let's hit confirm so now we got an error cannot read properties of undefined address to so let's go ahead and handle this error now oh i just realized okay so let's go back into my transaction context and let's go all the way down so let's look for form data right we're creating it here but i'm actually never sending that through so let's go ahead and send that through let's go forum data so let's try this again now one more time let's just take a look at our meta mask here and make sure it's 0.7 so just go to this should go to 0.643 paste in our address let's hit confirm and i don't know if anything is happening or not get ethereum contract is not defined so let's go ahead and fix that so remember when we said we created get ethereum contract yep it's time to go ahead and define that now so let's go all the way to the top level kind of right here this is where we're going to start working on it all right now right here we got to do some interesting monkey magical so let's go ahead and put in this contract address contract api and signer these are the three things the transaction contract will take and then we're just going to return the transaction contract so we're done with this function however you're probably like what the heck is contract address and contract api let's go and get them and this is where we're going to have to become monkeys and do some weird stuff but it's not going to be too bad i promise so here's what we're going to do in client create a new folder called lib now let's go inside of our smart contracts and in artifacts you're going to see we have contracts slash transactions so open that up there's going to be this transactions.json so we're going to basically copy this file come back to our client and come back to our lib and you're going to paste that exact file right there so now that we have this file on hand this is what we're actually going to use in just a second so inside of lib we're going to create a new file it's going to be called constants dot js cons tense.js and in here i'm going to say import abi from transactions.json and if you're wondering what api is abi is this whole thing it's uh like a almost like a api but it's like the the contract interface and how the contract works so we know for example the contract has you know function function and it has inputs like sender and receiver and amount which are all int 256 message which is a string un256 which is a timestamp keyword which is a string it has a transfer event and then it has another function which has these types of inputs so that's this is just like telling you what the underlying interface of your entire app is so in contacts constants we're going to get access to that and we're going to say export const contract abi is equal to abi dot abi just like that and then we're just gonna paste the contract address as well all right now for the contract address here's what we're gonna do so we're gonna say export cons contract address and this is going to be the one that you deployed so that's this one at the bottom right here so go ahead and copy that you're going to need it and um we're going to go ahead and make a string and paste that right there so that's the contract address we're going to need so now we're done with our constants file all right so now all the way at the top of this file our transaction context what we're going to do is i'm going to say import contract abi comma contract address we're going to destructure this from i'm going to say lib we don't need this period period slash right there so it's going to be from go back a directory and then into lib and into constants okay and we're gonna get our contract api and we're gonna get our contract address the next thing we're gonna do is import ethers from ethers just like so we're gonna import our client so i'll show you how to get our client let's actually leave that empty for now and then that's it let's go ahead and hit refresh on this thing and it can't resolve ethers no worries all you got to do is uh kill your in your client just do yarn add ethers so go ahead and install this package and once it's installed then go ahead and do yarn dev again so let's use yarn dev and we'll hit refresh and that error should go away pretty soon cool so now we're getting a different type of error and we're going to go ahead and fix that so that error is coming from our use effect hook where we're doing set user names so let's go to our header and we're basically going to just say if you know current account does not exist so let's just do if current account does not exist then just return let's refresh and there we go and then once it does exist then we use this guy right here so that that'll take care of that little bug that we were having all right let's go back to our transaction context contract api contract address right we're pulling that from from that constants file and now when we go down okay let's go and look here we're actually getting our contract so this is a get ethereum contract and how it basically works is we call our provider this provider is just basically giving us a provider and then we will get the signer so the signer in this case will be you the person who's signing that contract and then what we're going to do is get our transaction contract so we're going to create a new ethers contract we're going to pass these arguments we're going to say hey this is the specific contract that i want you to get this one right here and the contract api i want you to use that pulled out from the constants that we're giving you then signer is going to be you the signer so that's like when that modal thing opens up and you click it and sign it it's going to be pulling that information from you it's going to be using your private wallet key or something along those lines and once you sign it it gives you read or write access so the right access in this case might be like sending a transaction so now that we're good with that let's go ahead and give it a try now and let's see if anything breaks so fingers crossed let's go full screen here let's take a look at our wallet we're currently at 0.7 if i send 0.1 ether we should drop down to 0.6 let's go and find the address we want to send it to so this one right here copy the address paste all the way back hit confirm oh look at that meta mask just popped up it says sending 0.1 eth and the estimated gas fee is the following okay let's hit confirm and a second one pops pops up just to confirm that you're good to go let's hit confirm and let's see it's going to take a second but then once it's done it's going to be done so let's go here look at that i'm at 0.6 but currently it's at pending it just went through successfully right it was pending now it says it's done let's go to our other one this one i believe is up to 0.48 or weight let's give it a second because i don't see a 0.1 eth here yet it says that there was a contract interaction right but the money has not been sent just yet this one was eight hours ago actually so this is an old one all right but it looks like from this account the money was sent into the other account so it did happen it's probably just not showing up in the activity for whatever reason okay and the amount is might not be showing up correctly for whatever reason but it looks like it did our account was at 0.7 now it is at 0.6 so let's just double check so this one is 0.4 right now right so if i send it it should go up to 0.5 so let's go ahead and check so let's send another 0.18 hit confirm confirm and then we'll hit confirm again confirm and let's sit here it says send pending let's look at other one it's currently at 0.4 right so let's see if it goes up to 0.5 sending now it says sent and indeed it has gone up to 0.5 there we go so now the receive is showing up just took a second for it to show up and if you look on the block explorer you can see that the transaction one of the transactions happened two minutes ago here is our transaction hash and it was confirmed and it's on the blockchain and anybody in the world can actually verify this okay you just put in this transaction hash hit search and it will bring you to this exact transaction wow wasn't that nice so now you are able to actually send money send ethereum from your unit swap app that you just built how amazing is that put that on your portfolio put that on portfolio because it's going to help you get a job that's my goal that's our goal to help all of you get a job from just all this amazing free content so take advantage of that and if you like that go ahead smash that like button right that was so freaking cool we made it happen smash that like button and let's keep rocking and rolling all right now let's get to work on our sanity back end our database because when people come in here we want to sign them up and have them in our database when people come in here because like you don't want to be pulling all this information from blockchain it's slow as right it's super slow and it's like terrible so you you would want to have essentially your own backend pull data from there record transactions there and then we want to use that to show the history so let's get set up with our sanity database now it's a pretty simple process let's walk through it so inside of lib i'm going to create a new file we're going to go ahead and call it a sanity client.js just like this and i'm going to need access to few pieces of information so for example so here's what we're going to do we're going to go into sanit and then we're just going to create a new project and if you've done so you should have this project already in here you don't need to actually even do this since we did it from the command line a lot earlier you should have this let's go into unit swap blockchain app and let's just go into settings a few things i want to make sure we're good to go in settings are let's go to api actually and for cores let's just add a localhost and allow credentials and hit save so this is basically just like any local host is now part of the you know course so you don't have to get that weird course error and inside of here we're gonna do the following let's go all the way down to where it says tokens hit add api token and you can hit editor or you could even do this but editor is fine and here we're just going to call it our uniswap blockchain app chian chain app save all right now i'm going to copy this because i'm going to need that so ignore that code that you just saw we're going to write that from scratch but copy this and just put it somewhere for now we're going to need this token the second thing we're going to need is this project id so copy that so just copy both of these things all right so now let's get to work with our sanity right so here let's import sanity client from sanity client if you're wondering hey what the heck is going on here just make sure you go to your command line right here and install sanity clients we're going to say yarn add at sign sanity slash client just like that so go ahead and install sanity client once that's installed let's continue we're going to go ahead and export our client sanity client and it's going to take in an object just like this project id is going to be the project id that you copied from here the data set is going to be production api version is one and then for token you're going to use the token that we copied from here okay so go ahead and do that and then cdn just make it false with that said in terms of the client side or the setup of sanity you should be good now let's go inside of our transaction context that's we're going to create a function that adds our database so remember the save transaction function this is our sanity function that allows us to write to the database so we're going to now work on this function all right so let's create this function now so it's going to be called save transaction it's going to be an async function and then it's going to basically have a couple of arguments that we're going to put right over here and then this is going to be our block where we're going to write all of the code for it okay so it's going to take in a transaction hash it's going to take in an amount it's going to take in a from address which by default is going to be the current account and it's going to take in a 2 address where are you sending this money to and then we're going to do the following all right so we are going to create a constant it's going to be called transaction doc okay it's going to take it's going to have the type of transactions the id of it is going to be the transaction hash because remember each transaction hash is going to be absolutely unique it's going to have a from address and a to address and then the timestamp is going to be the current time and it's going to need to be an iso string transaction hash is going to be whatever the transaction hash is and then the amount we're going to just call parse float on that and pass in the amount and then what we're going to do is we're going to create this transaction if it does not exist what does that mean so if i take you to our sanity account here if that transaction does not exist it's going to create it here do i have one rep so this is a good one to use so the transactions does not exist it's going to create it here so that's what uh that's what this line is gonna do and it's it's a really nice way that it does it because it can look for any duplicates and honestly it's even easier than firebase in my opinion and then what we're gonna do is basically we're going to await the client and we're going to say hey patch we want you to patch this so what we're doing now is we want to link so whatever this transaction is we want to go go to the user now and link that particular transaction to a given user in this case my xerox eight eight user right because that's the i believe that's the wallet no i'm using the zero x22 so we wanna link it to this user right here so then you should be able to go into user and see per a bunch of the transactions so we're going to patch we're going to give it the current account because patch is looking for an id and in this case the id is just the account address and if missing we're going to just set the transactions to kind of this empty array and then what we're going to do is we're going to insert after so this is essentially append to the array of transactions and the last argument is going to be an array of object and for the key we're going to give it the transaction hash for reference we're going to give it the transaction hash and the type is going to be reference what does that mean well when i go in here right this field right here is a reference field because i can click it and it references a particular transact so that's why this is a string field this is a string field this is a transaction sorry this is a reference field last but not least we're going to then call dot commit and then just return out of the function so dot commit meaning that yes i want to write all of this and then i want to commit this to the database aka update the database with this info let's go ahead and open up our i'm gonna go back and i'm gonna go cd into studio i'm just gonna say studio start or sorry let's go sanity start just like that so then our localhost 3000 should be up and running pretty soon as a result of that or sorry let's go right here our localhost 3000 3333 will start running with our sanity database so let's hit enter and now this should be up and running so if we create any transactions they will pop up here last but not least we just need to go to our function right here and uncomment out this chunk of code right there this is our send transaction function so we wanted to not only send the transaction but also save the transaction inside of our database so let's go ahead and make a transaction now we'll make it pretty small like 0.01 eth and we will hit confirm and let's hit confirm on this and let's see how quickly it actually shows up in our sanity database so let's go right there and let's also check if it's sent out of our account so let's go here interaction 2257 so this is indeed the one that we're looking at so it looks like it took place let's refresh nothing in here yet interesting so let's keep an eye out for this oh wow i'm not very smart why that did not work is actually i never started my server i didn't do yarn dev i was here debugging like what the heck just happened okay cool got it so basically don't be an idiot like me and you won't run into any problems so wallet is connected now let's go ahead and try it so let's go 0.01 paste the wallet address so let's go i'll grab this wallet address and this should go up to five eight let's confirm this transaction sending looks like it's sent this went up to five eight did we run into any errors client is not defined i know what that error is about i never imported client from the top so let's go ahead and do that now so we're going to say import client from lib sanity client that's it let's try one more time 0.01 paste confirm confirm and now let's wait hopefully this time it'll work so waiting waiting waiting let's take a look here i didn't get any errors yet we did go down by one we had a course blocked interesting so even though i said don't block this but it looks like it blocked it so let's go here and let's add origin and let's just put http localhost like that let's hit save interesting because this is not https http so just make sure that in your sanity personal projects under api you go right here and add it in course now let's try this again let's try this again let's hit confirm confirm so this is how you debug you know this is real life like you get an error debug it look at the error message debug it and then you just keep doing i know it didn't get in because there's an error on the post method so we automatically know what happened there now let's go ahead and look here now we're at five zero and we just got a message oh this time we got an error message from sanity so let's go ahead and look and there is a transaction the transaction hash and let's see how much was sent from wallet address looks correct right two wallet address looks correct the amount looks correct and guess what it's right now where i'm located 11 12 and this is 11 12 pm 23 on the 24 hour clock it's 23 12. so fantastic all right we were able to actually add it correctly and now let's see are there any users there are no users so now what we're going to need to do is go ahead and make a way where sanity actually stores our users upon login so let's work on that now all right so let's go inside of our transaction context and i'm going to create another use effect hook and basically what i'm gonna i'm gonna make a function that essentially creates a user profile insanity if it doesn't exist and so basically here's how we're gonna do this let's create a use effect hook and it will update and fire off whenever the current account is detected or updated or changed or whatever and basically here's what we're going to do if the account doesn't exist then just return and then otherwise what we're going to do is we're going to just run a immediately invoked functional expression and there's going to be an async function and here's what it's going to do so this over here means it's going to call itself immediately and so we're going to create a user doc it's going to have type of users the id is going to be the current account so meaning the wallet address is going to be the id username is just going to be unnamed by default and then the address is going to be the current account and then all we're going to do is we're just going to create if the user does not exist that is it that is it so with that maybe in my senate if i go into users i should have pretty soon unnamed user and there you go right if i go into users i already have a user that says 0x22 it just got created right now and when i go into it it says the username is unnamed right if i wanted to name this something else it could do that but it will only work if the user does not exist so if i go in from a new user account let's log out of here actually so i'm going to click here and connected sites and we will disconnect and we will connect with our react.js december 11th one so i will go and refresh the connect wallet button should pop up let's go ahead hit next and connect and when we go inside of our sanity we now have a new user in real time you guys saw how quickly that updated i don't have to refresh or anything and here we go 0x88 unnamed and when i go back here 0x8 okay so now users are being created so when we go to the save transaction part or code now this patch thing will actually work why because there are actual users now we act we have actual account valid account addresses we didn't have them before so now i'll be able to go into this or 0x88 and update it so let's check it out let's see if it's working or not so now i'm going to send this to my cp admin one so i'm going to copy the wallet address we'll say send 0.01 eth to this address let's hit confirm and this will show up insanity very very quickly said confirm now let's go inside of our sanity and just wait for one of these transactions to pop up it should pop up fairly quickly here let's just look inside of our meta mask oh it was waiting for one more confirmation so let's go ahead and confirm that as well confirm let's check our yep it's it just went up let's refresh here it'll probably take a second for the transaction to fully show up there we go it showed up in real time zero x one one five i can click inside of here and go and i can see it was sent from this wallet address to this wallet address 0.1 and this was the timestamp let's go inside of users now and here's the interesting part so we should be able to go inside of this user and see that they have sent other transactions let's go 0x88 and indeed they are linked to this transaction if this user sends another transaction so let's do confirm again you will now have two transactions popping up for this user let's hit confirm here so we've double confirmed and now you'll see two transactions pop up for this user here let's just make sure that the it has gone through successfully and tada right there in real freaking time it updated right how cool was that so if you thought that was cool smash that freaking like button we got sanity to work we got our database working and now with our database working we're pretty much done with majority of the functionality all we got to do now is kind of the last piece of the puzzle which is we want our transaction history to actually pop up and so it's the history that shows up at the bottom when i was demoing the app earlier so there you go this history right there all of the transactions and you can even click them and it can show you it can allow you to view it on ether scan so let's go ahead and make that component work now all right so now we're going to create a new component and we're going to call this transaction history so let's go ahead and do that transaction history.js all right let's just get set up with the all the boilerplate stuff we're going to need so let's get use effect and use state from react let's get our client from sanity client let's get our cont use context from react as well let's get our transaction context from our context library or our context file that we created let's get our image and our eth logo we're gonna get a icon from our react icons and then we're just gonna boom get updated with all of the styling so again i'll go right there so you can kind of see all of the styling if you want to pause it you can but this is all of the styling for this page and we'll go through the styling afterwards as well all right so let's build out our transaction history function and basically we're gonna destructure is loading and current account from the transaction context in order to do that let's just go to transaction context and let's just pass through is loading so now it's gonna be just global state that we're going to see throughout the entire app let's go back to transaction history and let's keep working on this so i'm going to make a transaction history state variable set transaction history and then we're going to use a use effect and again let's call it iife immediately invoked functional expression okay and then we're going to say if it's not loading okay then now and we have the current account so if both of these are true then i want you to create the following query if the type of the document is users and the id is the current address which means this literally just means get that that specific user or that specific user based on whatever the wallet is that's all that means so this means go inside of users type and then for id matching this it means go get this guy or that guy what i want to do is return to me the transaction list and only return to me amount to address timestamp and transaction hash i don't want you to return anything else and i want you to order these by timestamp descending and then just get me the last four we're going to await that query that we just created this query right here that we just created we're gonna await and get that back and store it in client res client response and then we're just going to set our transaction history to the zeroth item that we get back from it and then we're going to zeroth item dot transaction list so what does this mean this means that it's going to get me this person's entire transaction list this entire thing but ordered by descending so their most recent ones are going to be all the way at the top and don't forget to call that function so we created this immediately invoked functional expressions you do have to put that semicolon there it's actually important and then just call this function and then we're going to have is loading and current account so whenever these change this should fire off and then here's the following that we want to return so we're going to create a wrapper inside of that wrapper we're going to create a div and we're going to say if the transaction history exists then show it okay that's all and here's how we're going to show it we're going to go through the transaction history and map through it and i want you to put the logo so just so you can see and follow along what's happening here is let's go to our finished one that's this logo right there the eth logo this over here is the same thing as that amount plus that space right over there okay these are equivalent then we're going to create a span tag for the address because remember we want to style it in line but make it orange like this so we're going to say transaction.2 address substring and then we're going to go 0 to 6 that means just get me a few and then put 3 dots there we're going to put a space after it and then we're going to say on and then put another space after that we're going to get our timestamp and we're going to say basically get us a new date which is going to be the transaction timestamp put it in locale string so in we want to turn it into february we're going to take that ugly date and time stamp that we get and we want to turn into this beautiful thing that says february 8 2022 at 2 28 p.m so how do we do that well to this locale string just pass in an object and in that object pass it time zone pst hour 12 true instead of hour 24 time style short and date style long okay beautiful and then we're going to pass it our ether scan link so how we're going to pass it is we're going to create the a tag and it's going to be a template string of rinkeby dot ether scan dot io slash tx slash give it the hash so when you click and open that it'll just take you to that exact transaction hash target is going to be blank that way and no refer so it actually takes you to a new tab and that tab has no refer class name is go you know this is going to be the styling we're pulling from the ether scan link it's going to say view on ether scan and it's going to give you an error up just like that and last but not least we're going to export this transaction history function or this transaction history component so that's it now all we got to do is just show this transaction history and where we can do that is let's go to our not app but let's go to our index and here instead of h2 transaction history we're going to say transaction history just like this as you saw it did not auto complete transaction history from component slash transaction history now it has auto completed let's go to our app and set up look at that all of them are showing up just like we expected right let's go inside of our transaction history and let's say we want to change something right so let's go ahead and mess with the styling so let's go ahead and remove the styling for this and you can see that now it's not blue anymore so flex item center text blue right there if i remove this this removes the margin so those get too close to each other for the two address i remove this notice that the true address isn't that like orange color or that gold color anymore for details if i remove this you can see how that messes it up right transaction history item if i remove this it completely messes up all right and this gives me the background color this rounded lg gives me my rounded corners that look nice these are my padding horizontal and verticals if i remove this there's no padding anymore it looks way too squished this is my margin on the yaxis all right so i recommend you play along with it like that too and see what does what you'll start getting what the styling is doing so with that said i can see all of these transactions now let's go ahead and send 0.1 eth to this address and let's hit confirm and let's actually see if it shows up or not so i'll hit confirm and i'm sure it'll take a second but once it's done it should actually show up at the bottom because once this transaction goes through here it uploads that to our sanity and then from sanity i'll pull it down here i think it went through boom look at that it's updated in real time and it shows up right away i didn't refresh i did not do anything and you saw that it updated and showed up in real time so freaking beautiful says it happened at 11 43 p.m look at my exact time it's 11 43 p.m and if i view this on ether scan it says it's indexing so pretty soon it will say success just like if i look at any of these old ones it says success so this will only say success once it um you know goes through and mines this block beautiful all right so we are done with our transaction history now next up we're gonna be working on adding our modal so when we're waiting for our transaction we can see a nice model that's spinning in a circle that tells us that our transaction is taking place so let's go ahead and work on that all right so when it comes to the modal what we want to do is when the loading is happening that's when we want to trigger it so let's do this let's go to our transaction context file and inside of our transaction context let's actually start working on the modal so here we go so this is a function that's going to trigger the loading modal it's going to be a use effect hook the dependency is going to be is loading and if the loading is true then what i want you to do is uh push this to the url so basically change the url to something like a question mark and we'll say loading and then we'll say equals to whatever the current account addresses so 000x8 b84 blah blah blah blah blah whatever right so just do that to the url please otherwise just push the home address and yeah that's totally fine now we don't know what the router is so let's go ahead and use the router so we're going to have to go all the way to the top and import a router and then we're gonna have to make sure that we use the router so inside of our component transaction provider let's go ahead and use the router so we're gonna go like this router use router so while the transaction is happening simply change this url and then once the transaction is done so if loading is completed then we're going to go ahead and push this meaning that we're going to push it to the home page so we're going to remove that url so this url is a hack that you have to do with next.js in order to pop up a modal now let's go to main i believe and let's add in our modal or action yeah yeah all right so we're going to import modal from react modal so let's go down here and paste it and let's go out let's go into our client and we're going to go ahead and install that so we're just going to say yarn add react dash modal that should have installed our modal that's all so react modal should be good to go we are going to also import use router because we're going to need to do that and here's a little reacting we're going to next thing that we're gonna do which is we're gonna set we're gonna grab the modal and set app element to hashtag underscore underscore underscore underscore next just like that then let's go ahead and right above main we're gonna start adding our custom styles for the modal so basically it's going to be an object we're going to give it content as one of the keys and that's also going to be an object and we're going to center the modal so it opens up in the middle of the screen we're going to give it a background color that's going to be dark padding of zero and no borders and then overlay meaning what the background is going to be is we're going to give the background a dark color so that way the modal kind of pops out over everything else we're going to go all the way to the bottom and right before this closes we're going to actually add in our modal all right so basically let's create our modal and for is open we're basically going to say is open is going to take in true or false and we're going to just basically say hey check if we have loading in our url parameters and if we do then what i want you to do is just show it right like open it open the model based on that and then for style we're going to give it custom styles and then we're going to add in this loader so this loader i'm going to comment it out for now by doing command slash now it's saying hey i don't know what this uh router thing is no worries so we're gonna go up to the top of our main function and right underneath here we're gonna create our router we're gonna just use the router so once i click once i make a transaction once my transaction starts it will pop up my modal let's hit confirm confirm so once is loading is set to true you're going to see the modal is going to pop up hopefully it works fingers crossed there we go the modal is there you see the background is now like this dark color so the modal is there we need to actually like style it more so we can we can show it up on the screen but you can see the screen is dark once the transaction is complete you'll see the screen won't be dark anymore and boom we just got the transaction to show up right there so it is working now we just need to make the transaction loader work all right so here's what we're going to do i'm just going to add in my import statement right now i know it's going to break the app but that's and i'm going to uncomment this out let's go into and create a new component here and i'm going to call that transactionloader.js just like this and let's go ahead and start working on it now all right so inside of our transaction loader i'm going to import css from emotion slash react and i'm going to import moon loader from react spinners so we have to actually install both of these libraries okay so make sure you're in your client folder and let's do yarn add emotion slash react and then once that's installed we're gonna do yarn add react spinners now let's zoom out and let's get to work so we're going to create a style for this i'll full screen this you can see my style and copy it so we got a style for our wrapper and for our title we're going to do a little css override so display block margin 0 auto and then border color white and then here now we're going to work on our transaction loader component let's also export it at the bottom here and then let's return the following so i'm going to return a div that div is gonna contain this title which is gonna say transaction in progress and then we're just gonna have the moon loader show up we're gonna have it as a color white loading state is gonna be true and then css override we're going to pass in our css override size 50. so let's go ahead and do a refresh and let's check it out now so i'm going to send over 0.01 eth let's just do 0 2 let's hit confirm confirm here let's hit confirm again boom look at that our modal is now popping up and this transaction will show up at the bottom guys if you think this is freaking cool break that like button smash that like button let's get this video past 3 000 likes on opencr last build we broke 3000 likes let's do that here too here we go 0.02 let's go to our sanity let's check if this is showing up if this user has five transactions yes this user indeed does have five transactions and you can see it's for 0.02 eth wow fantastic let's check it on etherscan it's currently indexing let's look at the last one that one is success beautiful so we are done with the transaction loader now guys we just have one last thing left which is we just got to go ahead and deploy this app so let's get to work on deploying this app right now all right so let's deploy the heck out of this app let's go at this point all we need to do is actually just deploy our client so make sure that you're inside of the client okay that's what we need to deploy client already has access to the smart contract inside of the lib and also has access to sanity client so everything we need should already be in this client folder so now inside of this client i'm just going to type in and just do versailles usually that's the only command you need and we're going to say setup and deploy i'll hit enter do it to clever programmer link to an existing project nope what's your project name project name is uniswap blockchain chain youtube why not where's your code located it's located right here it's setting up the project i don't need to override anything and let's just go through this so we'll now wait and see if actually the deployment takes fingers crossed boom look at that our deployment just got completed over here it says production link is there so let's check it out if it's working yo what the heck look at that it is deployed you can see the url right here guys if you're watching this right now smash that like button drop some love drop it in the comments take a screenshot share it on twitter tag me guys let's get this freaking hyped up because this is crazy we did three builds in three weeks i mean we're on fire and this is a url so unless something is broken you should be able to type in that url and go and check out this app now here's one last piece of the puzzle when i go through this transaction it will not save inside of sanity so we need to get past the course error so let's go ahead inside of sanity here let's go in the personal project add cores paste in that url hit allow credentials hit save so now we should be safe with the course error and i'm going to go ahead and do let's connect wallet let's see if that works popped up that's a good sign let's go here let's hit connect ooh very good sign looks like it connected properly let's get the address of the other wallet we want to send stuff to so this one here grab the address and we will send over 0.1 eth let's put in the address let's hit confirm all right and let's see what the heck happens metamask popped up hey that's good news okay this popped up let's hit confirm yo the loader popped up waiting if it succeeds is the transaction history at the bottom gonna pop up let's let's look out let's see moment of truth oh snap son it popped up this is beautiful and you can view it on ether scan guys if you thought that was freaking awesome show some love you know drop some fire let me know you enjoyed it i mean we just grinded it through and worked right through it worked our faces off but it is done the app is completed and we did everything right i can click pool i can click swap and click everything it changes it right i can log in i can log out i can send however much that i want the front end looks beautiful we have a transaction history here it's connecting to my sanity so if i go inside here i can see that i just made this transaction and this transaction was made at 12 17 am as i can see here for the amount of 0.1 and that you know on my deployed version it's showing up right there if for whatever reason in my database i change this to 0.2 you know that's what would show up here so if i refresh this just changed to 0.2 so we know that it's working with our back end our blockchain part is working our front end with next gs is looking beautiful guys that's it i hope you enjoyed it this was unit swap blockchain web 3.0 app if you enjoyed it smash that like button subscribe to the channel because this is the channel where we're going to show you how to become an amazing frontend backend and blockchain developer so that's it you know show some love share it with every single person you know this takes so much freaking time and effort tag me on twitter and you know let me know it was the maybe the biggest lesson you learned and make sure to put your real wallet address because i'll be sending one of you a hundred dollars to ethereum so don't miss out on that tag me free money and follow me on twitter it's a lot of fun it's exciting there we did it we did it all right now with that said if you want to see how i built open c because that was amazing it was absolutely mindblowing how i did that it's one of the sexiest bills go ahead it's right here go ahead and watch that right now before you sign out before you do anything else click that go watch open c have fun and i'll see you in the next video watch open c go go do it go do it right now you