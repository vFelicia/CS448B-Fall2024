hey what's up you guys aaron here from clever programmer calm and welcome to the flask crash course alright so this is a great tutorial we're gonna be going over a lot of stuff in the flash framework that allows us to build websites cleanly and efficiently without having any extra clutter so flask is a great framework we're gonna be going over the file structure so that we know how to organize our website and how all the different files interact the syntax of being frameworks so that we can put everything correctly we're gonna learn how to create blast bottles so that we can model real world objects in our code flask view so we can house all of our programming logic so that we know a code to run when a certain things on the website happened flask templates so that we know how it displays the whole front in and everything and also hook it all up to a database so we can have full crud functionality on our website we're gonna start with a very basic class cap it's probably like six or seven lines of code and from there we're gonna build our way up slowly learning all these different parts that I just mentioned and eventually we're gonna get to a fullblown blogging app with the bootstrap enable so that looks very nice with a pretty frontend I'm probably gonna be showing some stuff from the screen right now with what its gonna look like so you kind of have a preview of what we're gonna be making it'll be a lot of fun stay tuned we're gonna get to that very shortly subscribe to the channel don't forget that click the notification bill whatever people still do that comment ask questions Oh while we're going through this course you guys I have the code in the description if you want to compare your code at the end so definitely check it out if you want to download it and just compare your own code if you're following along so definitely do that you should definitely follow along and cool along with me during this project I mean you can still watch it but the code is in the description so check it out hey guys so real quick before we start I want to tell you that we have a really really cool 1 hour plus webinar that goes over the three secrets of how you can become a Python freelancer in 2019 2020 and beyond and it tells you how to start making an income even if you're a complete beginner if you've never written a lot of code before if you don't even know what code is or any of that stuff and how you can go from that to having a sixfigure income as a freelancer or even as a software developer at a company if you want to do that it's still relevant so definitely check that out it's completely free just click the link in the description and you can put in your name in your email there and you'll be sent a link to get started the team worked really hard on it this guy this guy me other people so I just wanted to put as much value as we could it's one for you guys we shot it and we edit it and now it's free for all you guys watch so just go check it out we really appreciate it I think you'll really enjoy hey what's up you guys so now let's get started with the flask crash course okay but before we get into the code I want to actually go over what flask is if you guys don't already know that so all flask is is a web framework and all the web framework is is just a way to structure a website so like when you go to a certain URL then a certain web page pops up and then you could organize all these web pages together into website and you can kind of define how they're all named and all the names and stuff and how its laid out and structured how its framed I guess that's why it's called a framework maybe a double meaning there but that's pretty much it I mean you know you do need to know see HTML and CSS to actually design the web pages but then and then you use that within flask so if you don't know already know that please go do that first learn HTML and CSS first and then come back to this and then this will be useful and Python as well okay flask is written in Python if you didn't know that so we're gonna be doing all that meaning Python HTML CSS and then you can come to flask okay but that's pretty much it it's web framework one thing I need to point out though is that is it it is a micro web framework all right and all that really means is it is super lightweight and barebones so it kind of doesn't come prepackaged with anything at all it's like super super lightweight like you can get a web a very simple website web page up and running in about six lines of code five lines of code and it takes about 60 seconds to code up and we're actually gonna do that in a couple of minutes when we get to the code port on part after we install it but yeah it third align the line design philosophy is to just kind of import things as you need them so there's no database there's no form validation you guys know what the things are um database just like allows you to house data then you can like edit that data or retrieve it or or create things like crud operations and then form validation is whenever you're doing like API HTTP requests and stuff like to make sure that the request is valid or if you're like submitting any kind of form then just making sure it's valid before you send it so doesn't break the server and stuff though flash doesn't have any of that okay you actually need to import those things as you need them as you want them which is nice because it's very clean and minimalistic which I like unlike Django which has like everything bunched into together I has a database and backend and all these everything just has everything in one it's like one juicy package which is cool but flask you just like more I guess you have a little more maneuverability oh yeah I guess they have a tag on here it says web development one drop at a time I never noticed that before but that goes along with their minimalistic import as you need design philosophy so that's cool so this is it apparently Pinterest and LinkedIn are built on flask I didn't know that and learning everyday cool and yeah let's just jump into the code let's get started so I'm in my IDE here I'm using vs code this is my idea of choice it's pretty nice but you just use whatever you prefer okay first I created a directory called flask up I'm just gonna be working in here and how about my files in here but yeah let's go down to the terminal let's start by installing flask okay so you can do it here you can just open up into the terminal if you don't know what a terminal is just open up the tournament here same thing but I'm just gonna use this integrated one because it looks nicer makes for a nice for video you know but I'm just gonna want to run pip install flask okay and that should run if you're getting some error um like permission errors you could have just run sudo pip install flask that just stands for Super User do okay they just kind of like overrides any permission errors you might have but we need to do that okay because we've already installed it so after you have flask installed you could type in flask version just make sure that you have it installed and as you can see we have flask installed the flash version 1.1.1 okay and yeah let's just get started so let's go into here and flask app and create a new file alright and I'm just gonna call it app dot PI all right don't need that and now we can start putting up our first flask app okay so I said earlier is gonna take about 60 seconds might take a little bit longer but it's really short it's just a few lines of code so the first line is of course from flask import flask we're just going to be importing the flask liber that we just downloaded okay that's how you do that there and afterward after we've done that we import this flask object okay now we just want to create in a flask using that flask object so that's how you do this okay you just call the flask constructor here and then we just create a app I mean I just called it app but you do need to pop in name here okay this is just like this just references this file this is a Python thing if you're curious you can look into it but you just have to do it so just follow it and if you're if you want to learn more about it you can look at you can google it or something but it just references this file it's not super important right now alright and now we can start getting into our flask stuff okay so flasks web frameworks so we're gonna be creating websites which is just a bunch of URLs that that lead to web pages so how do we define a URL okay well we do that by routing so it's called a route it's just like a URL route so we'll just do this little thing here this it's called a decorator in Python if you start a line with a ampersand like not a person at sign like that and flask uses this to define all of its URLs so this is the base URL if there's absolutely nothing so like your domain would be here so like www.yourdearbaby.com show you that later but just know this means if it's just your domain with nothing after it okay like WW gel calm or something that would be that there's nothing that coming after so if the base URL of our website is that then we can just have a function right below it and this will this code is what will run whenever we get to this URL pretty simple so we'll just say let's just do a simple hello world okay and you're just gonna return hello world okay and that's pretty much it there's one more thing we have to do down here just for good practice sake we always doing this in Python you know so if you just want to make sure if we are running this direct from the command line in which case the name will be main if we're in this file directly then we actually want to turn on debug mode or which is pretty much developer mode okay which just like allows us to have it shows us actual errors whenever an error pops up and just sitting instead of just saying oh four four arrow blah blah and I should give this the full breakdown so we can actually figure out what's wrong and then also it allows us to update our server and our website on the fly so we're not this keep like stopping and restarting a server okay I'll demonstrate all this in a second but this here is pretty much the most basic flask app you can write okay you have like we import the library we create a flask app we define a route and the custom code to run and then just some practice developer stuff so yeah let's just get this running and see what happens okay go down here and we're gonna type Python app PI and and there we go so now it says debug mode is on it says the server flask app app we named it app write is running and it's running on this localhost okay so 120 7.0 point oh point one is actually gives you your localhost so instead we don't have an online domain right now like I said like www.google.com/mapmaker we're just using the localhost right now but it's gonna be on port 5,000 so that's important so let's just go back to our browser and paste this in okay and as you can see let me zoom in here a bit that hello world that we typed in is displayed here okay so this is the website this is our web page we can I change it to localhost okay instead and it'll it'll bring us the same page but yeah that's pretty much how flask works okay let's go back here one other thing I want to mention really quick is actually if you want to handle multiple things with one I mean multiple routes with one method or one function I mean then you can you can do that pretty much whenever you see route whatever mith function is like closest that comes next linearly in the code is the code that'll get right okay so if we see this we can actually put multiple ones here and let's just say we have home alright and so now if the base index and home slash home we'll both go to hello world like this so we save it and because debug mode is on then it automatically updates our server will go here and refresh this and no changes that worked or let's hello world to cool just so we can see some changes make them taking place there we go hello world too but also we said if we wanted at home to go to the same method then we can do that Aiki probably method functions are home alright and home will also bring us the same thing however if we go to some bogus URL like this and I hit enter then you're just gonna get a not found error okay so that's because this path wasn't defined if we actually defined slash bogus like change this to bogus or something then it would work alright so pretty straightforward should make sense up to this point but that's pretty much the basics and the most basic app we could make with flask and now we're going to start getting into a little bit more advanced stuff all right so I'll see you soon all right welcome back you guys so now we're gonna go into a little bit of advanced routing just like pretty much playing around a little bit with this app grout line up here and different things you can do with it so let's get rid of this to keep it simple almost go back to the base index or actually I'll leave it as home okay so let's just leave it like this and hello let's just go back here and run this it's still working a slash home is still working alright so what I want to show you guys actually how you can get parameters from the URL into our code okay so whatever we show URL right um and we get and then we run this function and this this uh this text is returned to the web page for the web page to display whether it's HTML or tech raw text like it is here whatever it is maybe there's some stuff in here that we want to change based on what was given the URL so like maybe like we want to actually like greet somebody in their name so let's just go through it and I'll show you what I mean so maybe a path like you want to actually be like slash home slash Aaron my name or a slash home slash kasi or something like that and depending on that you want to say like hello Aaron or hello Kazi instead so how like using pretty much like using variables in URL so how you do that is you use your little brackets here and then you define the data type and then the variable name so just like that so there's gonna be a string called name and then you can actually just pop a name here and this name here and this name needs to be the same and now we have access to this in our code okay so whatever pops up here in the URL whether it be Aaron or Kazi or any other string then now we have access to it here so now we can actually go here like this and actually add in something like that okay so whatever is in the URL is now gonna be displayed in the web page so that's how you get stuff from the URL like like parameters and variables into our code so let's some refresh this and we get a not found error because we didn't I should put a name forgot to put a name so now let's put name Aaron there and as you can see it says hello Aaron okay and we can put anything once there Kazi will also work or hello stupid but yeah so that's how you get variables from the URL into here so this might seem a little bit redundant I mean like like why would you need to do this but um one very useful thing that this allows us to do is pretty much um for dynamic URLs and um dynamic URLs are like when you have like maybe if your website where you have a bunch of different profiles a different bunch of bunch of blog posts or images or something and each one has an ID and the URL just keeps changing and then you might have like int okay and then you could have like ID like this or something like image image ID or something or just ID in general and then as this thing keeps changing then you could like have like some code here it's like Oh display image with this ID okay and it makes it very simple to handle all of the these URLs in one so you don't have to like have like um each one individually you don't to be like Oh a Prout one right display image one and then a Prout to have a separate function display image two and so on so forth you can just have this up here and then just pop in ID of course you have to change this ID and then you can just say okay based on ID well this is an int so you have to cast to a string before I print it but you need to what's going oh I have an extra parenthesis here but you need to I lost my train of thought that's okay but pretty much yeah it just allows you to have dynamic URL so that you can handle multiple URLs with one function okay and then of course you can have multiple ones of these so you could have like home slash users slash string well let me let me show you this first before I get exact so let's just do this and show you the string as well oops that's not right because usually home slash needs to be an int not a string so let's just put 10 okay so hello 10 cool but you can also have multiple ones in here so maybe like users slash string name slash posts slash ID okay so now we have name and we have ID so like okay let's should we have like website of some users and then you have the user name and then you have all their posts and you have an ID of one of their posts so it could be like hello name your ID is something like that and pop name back in here and let's run this okay and refresh this oops so we need to go to Aaron slash posts was it home slash users home slash users is what we said slash the name slash posts slash the ID so let's put five and let's hit enter and there we go it says hello Aaron your ID is five based on all the stuff in the URL okay and as this changes we can easily just keep updating this okay and then if we actually had like images and stuff we could like okay fetch this and I should return an image instead of just text you could be like image eight image blah blah blah and as we change the URL different images will be popping up okay so that's kind of the idea of dynamic URLs and routing with variables using this bracket notation here okay pretty cool and one other thing I want to go over now is actually limiting your webpages to specific request methods okay so let's just add another one here just for simplicity say because I don't to get too fancy on one and let's just call this only get there real that might not make sense right now would just just bear with me for a second so get get request and you can only get this web page okay so I saw this little thing out here and or actually get only or yeah whatever it doesn't really matter okay I'm getting nitpicky here but pretty much what I'm gonna do here is I want this web page to only allow get um get requests so you can only get get and like it doesn't it doesn't allow post or put or anything else at all alright only get and you can actually specify which methods you want to be allowed but let's just run this to see what happens okay only get like that okay so you can only get this webpage so that's actually not true because this is just a normal app route and everything but what you can do in this route method is after after the this little string here you can actually declare I think it's methods with an S yeah methods like this and then you can specify all of the pretty much the HTTP requests that you will accept on this webpage so if you only want to get get then it would be like that if you only want post then it would be like that okay if you want to get and post then it would be like this very simple it's just a list of all the allowed methods okay but since we're only allowing get here then why me this will still work because the get is still there so let's just give this a shot and run this okay and as you can see it still works and let's just pop it to and here to prove that it's still changing so it still works only get and also if we have only just get it all that's what all the intent I intended originally to only be able to get this webpage then changes to three just to demonstrate that it's continued to work three works but if we put post in here all right it's only allowing posts but it's gonna try to get so we're probably gonna get an error see method not allowed so this method is not allowed for the request the URL because you're trying to get this um you're trying to get this code whatever you request a web page you're trying to get it but it's only allowing to post and post would be like okay like like sending something to URL for them to save it to a database but yeah that's how you define your allowed request methods and then you can limit it to certain things okay so that's some fancy advanced routing stuff you can do and now we're gonna get into templating and actually doing some of the front and work like with HTML and CSS and static files like images involve a lot in our flask website framework hey what's up you guys so now we're gonna go over templates okay templates are just pretty much the front end of flask a way to organize all of our HTML and CSS and like those kind of frontend things and make them clean and stuff I make it not cluttered and very easy like just make our website easily manageable but it's been mainly for the for the frontend okay this is where our HTML code is gonna be going so I'm just gonna leave these two things here since we code them up but I'm just gonna go back to something simple I'm just gonna actually just pop back in a the base directory okay just keep things simple for now and let's call this index and very simple return home page okay like that nothing nothing scary okay let's just save this and go back to our browser here and go to the home page and as you can see home page pops up right there okay I'm zoomed in that's why it's so big but this is just regular bra text okay now I think I mentioned earlier that whenever we have a function here or a route and then a function it executed on that route whatever is returned back it's just spit into the browser so the browser can interpret anything it can interpret raw text like it is right now or it could even interpret HTML just raw HTML so we can actually do this okay we can actually just pop in some h1 tags like this and we'll go back here and when we refresh we'll see that it changed to an h1 tag all right so this is HTML code I mean it's not legal because it's just like a single tag it doesn't have all the right like protocol um all the other stuff well if the HTML needs all those other tags and stuff but this is just like a raw tag like it takes it XML or something whatever you want to call it but yeah pretty much you can put in everything you want in here you could even do like a we could do a triple um a multiline string here like this and then actually put in your entire HTML webpage in here but I mean that gets really messy so that's this is word templates come in so because we have the ability to return anything here that we want it would be nice to put this all this stuff into a separate file okay and in this case we're gonna be putting it into a template file which was just an HTML file but they they're called templates so let's make a new folder in our flask app okay and call it templates alright it has to be called templates and then inside here let's just put index dot HTML all right index.html and then let's just paste all this into there copy and paste cool so just that for now and home page and back here okay so now now what we're gonna do is we're gonna learn how to actually get this HTML file in here we're just gonna render this as a template okay so first of all we need to import render template it autocompleted for me that's nice and then here instead of just returning a string we're going to be returning a function call I mean it's still a string but we're just gonna be calling this render template function and this is going to just take the name of the template that we are getting okay and it's in a template so it has to be in a directory called templates okay in order for it to find it so it's assumed that it's within templates parallel to our app and then index.html is inside there okay so let's run this now again well it should go to be running let's just refresh the page and nothing happened as figured but let's just put a two in here to signify any differences and boom as you can see our template is being rendered correctly okay so now let's actually fill this out to be proper HTML code I think HTML yeah looks like we can autocomplete with some some code or some boilerplate code thanks vs code alright so um I mean this is gonna look exactly the same let's just put it as three and go back here and boom okay but there's a little bit of formatting up there some a something up here happen I think content yeah all this stuff but yeah that's how you get that's how you render a template into your flask function okay so you're just like rendering this HTML file which is nice but as you can see all this stuff up here there's a bunch of other stuff from the HTML so there's actually something we can do called template inheritance which is kind of just like taking all the stuff that's common in all the web pages and putting it all into one file okay so let's let's actually do that now let's call this base HTML all right and let's copy all of this into there because every every web page needs like the doctype HTML needs this and eats the head and needs the body tags and all that so why don't we just like put that all on to one place okay like this and now now on what we can do is we can actually signify blocks in here that we want to be able to plug into so the only things that are relevant here that we are gonna be changed from web page to a web page are probably the name like the title here and the content in here so what we can do is we can actually just get rid of this okay and then we can use something called Jinja to which comes with flask if you know Django then you probably look it looks kind of familiar but we have this ability to code in things and put blocks and actually use like for loops and cool stuff in here thanks to ginger but this is how you do it so you can actually define blocks and then give them names so I'm just gonna call this title or not title maybe I get call it head whatever and then you can actually signify a block like this so make sure that you open and close with this bracket and parentheses I mean bracket and % notation and right here this signifies a block so now we can actually access this block wherever and um input content into their ourselves whenever with whatever content we want if we extend from base that HTML so let's do the same thing let's just copy this and paste it down here but call this body instead alright just like that now let's go back to index.html and they should all start making sense if you if you got lost or if I wasn't making any sense well let's just delete all this and now what we can say is instead of having all the HTML code we can simply say extend is extends with an S that's right extends base HTML all right so now now this using the Jinja syntax which is this fancy stuff here that comes packaged with flask when you download it then it hurts all of this stuff everything in here including these little body things these two blocks and now within here we have access to those blocks so we can actually say what we want to plug into those blocks which will automatically be plugged into here so that it's like a fullblown HTML page all right so let's just actually let's go here and copy this that's a little bit faster copy paste paste make sure this is body instead of head all right and boom just like that now this is actually just inheriting from our base which has all of this HTML stuff but now we have the ability to just plug in the stuff to these two blocks so very simple so here now we're gonna do this again we're gonna have title alright oops there we go title and then we're going to call it home page or just home again alright and then the body again we're gonna have each header tags and then just gonna call it home page and save that ok and now let's go back here and refresh it and as you can see it changed to home page again and up here the title has to home all right so that is how templates work at a very basic level we're gonna be going into some other things to just I just want to introduce you guys mainly to putting HTML code into other files which is templates and then this little Jinja syntax and we're actually gonna be getting into more into this stuff into syntax in the next segment we talked about sending variables around from from our code to templates and whatnot in case we have like maybe we have some data in in here and then we want to send it to the HTML so the HTML can display that data in some way something like that okay I always see you guys soon all right it is now officially soon so let's get started so we just learned about the Jinja syntax and stuff right in and rendering templates so using templates and inheriting templates and being able to signify blocks and whatnot using this syntax like extending HTML pretty much to be able to play around with it a little bit more now we're gonna talk about how to actually pass data from here to HTML in case you want to display it or something all right so let's actually create another route another web page and I'm just gonna call this slash posts okay like we're gonna have some blog posts or image posts or something maybe maybe we can make an Instagram clone or something like that but just posts for now okay and then I'm gonna call it posts define posts and then return render template alright and then I'm going to want to make a file called postage do and then I here almond boob that we can inherit everything so I'm just going to copy this over and to here nice get rid of all this stuff I'll actually maybe I'll just leave it in I'll change this to posts okay and then this I'll change to all posts cool and here render template and then we got to fill out the posts HTML unless you see if this is running okay so now that we're here let's just go to posts alright and as you can see all post pops up so it looks like it's working alright so let's go back here and now now let's actually create some dummy data so that we can actually send data from here to the HTML to see how we would do that okay so this is just dummy data you might actually have real data from a real database later on but for now we're just going to imitate it and use dummy data okay let's just go up here and we're just gonna call it posts all right or all posts yeah all posts will work and let's just make this a list okay and it's going to be a list of dictionaries so dictionaries are the way that you want to structure your databases in your your data here because it it's it allows you to easily access all the data in Jinja I'll show you how in just a second so let's just say okay if you have some blog posts we'll just call have like the title of the blog post or the name or whatever and then we'll just say this is post one all right comma and then we can say something like content yeah content and be like this is the content of post lalalalala cool and then let's just copy this so that we have two posts do just like that change is supposed to and post two and call that good all right so we have some dummy data here it's a list of dictionaries and dictionaries is the way we want to structure our data so we have this data called all posts so let's go to where's Ariel posts and now all we're going to do is we are going to define a variable okay let's just call it posts and um we want so we have it's called posts and then we want to pass in data to this so we're just gonna call it all posts you can call us whatever you want but that makes sense so all posts is our data and then now we have a have a variable called posts here okay so um note note this this blue posts right here now will be go to post at HTML we are actually going to have access to all of this data in here by using this name posts so let's go do that and I'll show you how that's done all right so let's go down here and it says all posts but for now I'm just gonna print out one thing first so we have access to posts so we can actually well let me show you this um Jinja to is actually very powerful you can you can um signal you can signify the blocks like this but you can also do other things you can actually have like loops and stuff to loop over data and whatnot so just like just like in Django okay and it's that it's templating engine so we can just say for posts in posts because remember posts is what we call this over here so whatever we call this we have to call that but now we can just um loop over it just like a Python loop alright and all we need to do is close it off just like a well every loop should be closed off and now we have access to each of these posts individually okay so we could actually go in here and do something like h2 you know and then go like Oh posts Oh another thing that I'll show you guys I guess I'll show you right now I might be going a little bit too fast but just follow along so this allows us to do like syntax things like define like blocks and do things like control flow kind of things like Oh like move this chunk of text over here and plug this into here or loop over this this many times in yadda yadda but the if you use double braces like this this is actually printing out something so what I mean by that is the post our dummy data the each post has a title right and it has content so we can actually just go in here and just go like this and use dot notation just like that oops post that title okay and using this double braces like this and post dot title and this will just print out the string of this post one so it'll just print out post one here it'll plug it into this thing here which is very nice so we can do that and then also we have our content that we want to put in so I guess I'll put that in a pete tag yeah that makes the most sense and then same deal we just want to use this and then instead of that it's gonna be post I mean instead of title is gonna be post content all right so let's just see how this goes so I came in here and then we're looping over a variable that we passed in posts and then for each one of those posts that were looping over we're just pulling out some data and then we're printing it okay within a valid HTML tag so let's go back to our page share and refresh it and as you can see these post pop up so it says post one this is the content of post one and post two this is the content of post two because I use h2 tags and P tags so it looks like the formatting is all correct here I'm just really zoomed in still so yeah that's pretty nice and clean another thing you can do is you can use if statements okay so I want to show you guys that let's go I think if I uh yeah yeah I think we can do this so let's say our data might have an author for the blog post but only but it's optional like maybe the author isn't available or something so for here we'll put Erin that's me and then for a post there will be no author okay this just doesn't exist so let's go to posts and now we can say if there's a post here then we also want to print out the title alright so we could just do this and then just try to print it out there it is so post dot author alright just like that and why don't we just give that give this try and see what happens oops what so it's complaining about something one second I think yeah I didn't add a comma here because I added this thing to the dictionary let's try again let's restart the server and now let's go back to here and refresh it now so it worked it just it just ignored the data that wasn't there so it didn't break anything which is cool but what if we wanted to actually like pick out if there's a author or not then it's probably good to check and then you can say like oh it's by this person by this author or by author unknown or something like that so let's just put a check in there for demonstration purposes to show you how it's done so we're just gonna say if oops if something exists so if post dot author exists all right if that exists then you want to put this here and actually we're gonna go like this then um display by author otherwise the way you do that is just else big surprise then maybe we can do something like this by ah na or the author unknown is actually better now let's just put na not available because it's literally not available cool and then to close off a if statement then you just put and if just like that okay so this is a little statement here checking if there's an author and then displaying it and then if not then just displaying na and let's just run this and see what happens go over here refresh this page and as you can see I made updated and since there's the the first blog post have been off has an author then it displays it out and the second one because it doesn't it just displays na alright so this is cool this is very very elementary rudimentary kind of blog web page right now oh we have our posts just two posts right now but we can really clean this up with CSS and stuff in bootstrap later on um when we actually do a project but all right now I'm just showing you these syntax and how all this stuff works okay and there's ginger stuff so that is pretty much it for getting sending variables from our flask app to our front in using templates and stuff and utilizing those ginger control flow statements to get crafty with displaying that data so like actually let's go back here really quick and go to inspect so we can actually see the HTML code so if you look here this is the HTML code that was generated here on this web page and if you look back this is all we actually have in the file so remember we had the extends based on HTML so we have all this HTML so there's like doctype HTML let's make sure that's there yep there's doctype there's all this stuff there's all this crazy head stuff but the title is posts which is what we added in here from the block and then block body is all down here and then let's see if we can find post one yup post one is here with the author and stuff and then post two is right here so pretty cool this all this HTML was generated from all of our ginger with the loops like it was looping over and generating HTML on the fly and the blocks were all being plugged into our basic HTML so that's pretty much how templating works in flask okay there's more you can do even but those are the basics and most important things that you need to know first and yeah I think we should start getting into databases or something next or form submission or something like that but some more interesting more interesting things okay that kind of wraps up templates for now and I'll see you guys in a bit all right welcome back so we just went over templates in flask and how to get your HTML files into your flask program alright and we also went over a little bit of Jinja to using these percent braces and these double braces to be able to import variables into our frontend HTML so that we can have a dynamic frontend pretty much okay dynamically generated and now we're going to be moving on to how to get your static files into your flask program as well okay so static files are basically your styling sheets and your JavaScript so your CSS and your JavaScript these are static just because we're statically loaded every time they don't change dynamically like the HTML files might want in yada yada so let's just create a new folder in here okay called static and then within here let's create a folder called CSS and then with an earless code create a file called main CSS okay so you need this directory structure static and then CSS and they mean that CSS to keep it organized and here you we're just confusing a example styling sheet so it's not gonna be crazy we're just gonna very very simple just change the font so font family mol changes to Helvetica okay I saved that that's good enough for now instead of this Times New Roman font I'm just gonna change it but let's say we want to apply this CSS to everything on our web page okay so since everything is inheriting from based on HTML we can I just go into here and pop in the static file linking here so we just put in a link tag and I'm gonna say it's a stylesheet alright and then the file location will just be static slash CSS slash main dot CSS just like that so now this is going to be applied everywhere since we're changing the body tag this is just gonna change the font of everything in the body on every web page I think I saved it so it should be running cuz we're in debug mode it automatically updated let's go back here let's hit refresh and as you can see it changed to Helvetica okay from whatever Times New Roman font we had before and if we go into inspect and we go down to here then we can see the font family is Helvetica and you can toggle on and off here pretty much our change so that's pretty much it on how to link in your CSS files it'll be exactly the same for JavaScript okay you would just create a oops nope you would just create a new folder in here called j/s and then again new file main J s and then yada yada type out your JavaScript link it in here just like you did the CSS and that's how you do your static linking however there is one thing oh we do we can link it like this as you saw like it's working but a better way a better practice of doing it is to use a method called URL for so this will just more robust in the getting the static file location and it's just gonna be like this okay URL for so instead of writing out the entire static the URL path like word like character for character we're gonna be using this ginger syntax again so to get the gist syntax in here it's just going to plug in something so we're gonna call some code and then whatever this code returns we're going to plug into here that's what ginger does alright so URL 4 is actually gonna return the location of a static file and then it's just going to print it out as a string or I plug it in as a string into our HTML here so the way we do that is we define the the toplevel directory since this is a static file just gonna be static and then within here and then you can actually define the file name further okay so the way we do this oops don't use double quotes because we're gonna use them it then we're just going to put CSS slash main CSS all right and now when you run this this is going to autocomplete or it's going to evaluate to the actual complete path of this and then it's just going to be plugged in via Jinja so when we go back here back to our webpage then we can see that when we refresh it that um it stays the same well just to prove it to you let me just I'll comment this out so you can see that it's actually being read so when we comment this out okay and then we refresh this it goes back to what it was before but then when we put it back in okay with this new format let me save it and we go back here we can see that the font change still takes place okay so that's how you should link things your static files in in flask using URL for and this Jinja syntax thing okay so that's how you link your static files I'll see you guys soon to go over databases all right you guys so now we're gonna go over to databases alright so I said earlier that flax doesn't actually come with a database all included with it when you download it which is true because they want to keep a lightweight so if you want a database then we have to actually use an external thirdparty one so there's a school little library that has interoperability with flask called SQL alchemy you never heard of it is just kind of like a um interface to allow us to interact with databases like sequel Lite or my sequel or Postgres or something from application like flask so let's just get into it and I'll show you how it works okay so first you're gonna need to actually install it so go don't go down to your terminal alright and then just run pip install flask dot SQL alchemy just like that just spell it right yeah so run that and it should download I'll already have it downloaded so it didn't actually download it'll take like 10 seconds having issues again you could use again you could use oops sudo just run sudo before the whole command and then all that might fix it all but now that it's installed let's just get into the code okay so the first thing you're gonna have to do is obviously import it so we're just going to run umm what is it called from flask sq alchemy import SQL alchemy alright yeah it should be import SQL alchemy just like that so now that we have that now we actually just start setting up our database okay so the first thing we're gonna do is we need to actually tell us or tell flask our flask app where our database is going to be stored okay so that's done through a configuration so we actually just call config on our scout okay and then there is a field in that configuration file called SQL alchemy underscore database underscore URI which is just a path to where the database is stored okay so we're gonna be using SQLite because it's just easy for the when we're in development mode and then if you actually in production mode then you can use a different database if you want but the really nice thing about SQL like alchemy is that it allows us to use any database we like and um it's as simple as just changing the route to a different database and then pretty much all of the query and stuff to our database is the same so SQL alchemy is like a nice interface and it allows us to use the same code pretty much but we can actually hotswap in my sequel or Postgres later when we're act in actual production mode but we're just gonna use SQLite for now just because it's simple and it's easy and SQL Lite stores the database locally in a file so we're actually gonna have our database stored in here in a file right down here umm we'll do that in a few seconds you'll see but that's why we're gonna use SQLite okay so once you have your database chosen okay oops let me disable this the emoji thing but once you have your database chosen then you just need to define the path of where it's going to be stored okay so you can use three slashes or four slashes on the actually two different things this means it's gonna be a relative path so wherever we put it it's gonna be relative to this current file app dot pi or if I put four slashes then this is a absolute path and I can go from the root directory or something but we're just gonna do relative that's what you should be doing it's it's a it's better in cleaner but we're just gonna call this post's dot DB okay so we're gonna create a file a database file called posts and this is actually just going to pop up right parallel to this file so it's going to be right down here okay so that's how you do that now now that we have that now we can actually our database so deep or I'm just gonna call it DB equals SQL alchemy alright and then we just pop an app like that so now we have a database and SQL alchemy took our app our flask app and is now linked them together okay so that's pretty much all of the setup for the database now we can actually get into designing the database okay so if you guys are familiar with modelviewcontroller stuff the structure for web development pretty much then then we're gonna be doing our models right now if you don't know models are pretty much it's just a way to structure the data in your database so it's like okay if if we're in a database and we're making a blog then each blog is gonna have a title and then it's gonna have an author and it's gonna have some text that is actually in the blog post and that's how those are the kind of things you'd need so like in your database you're gonna need a title field a content field in an author field so we're gonna model that in code so if you're coming from Django then this should be very straightforward but yeah let's just create some models okay so the one we're gonna do or you create with classes by the way you you kinda just define a class and then each each class variable is considered like a piece of data in your database so I'm just gonna call this class blog post okay and it needs to inherit from model all right our database model because making the model and now we just need to go through all the different things that a blog post might have okay so the first thing that many most models have or pretty much all models should have is an ID okay and um oh we have to create columns okay so the way we do it in SQ alchemy is we create columns in the table so a database is really just like a big table okay and then each column is like the one of the different attributes and then each row is like another each row is a separate is a separate blog post and each column is a different class variable so after you redefine a column then you have to give the data type so this is going to be an integer alright and then we're gonna set this to primary key to be true alright and what that means is prime he is just it just means that this ID is going to be the main distinguisher between different blog posts because this ID will always be unique even if you have duplicate blog on blog posts and blah blah blah this will always be the distinguishing factor so that's what we call the primary key it's like an in dictionary like the key needs to be unique so this idea will always be unique all right what else we need we need a title okay so I'm just gonna go through these pretty quickly it's pretty much the same thing it's just we change the data type so for title then we want this to be string okay and we can actually limit this to a certain amount of characters so I'm just gonna put a hundred what first ring you actually have to I believe I don't know what the default is but I think you need to put a number in here so we're just gonna say title can be up to 100 characters and then I'm gonna set this um nullable equal to false all this means is that this field is required okay this field cannot be null cannot be like nothing so we're setting this to false which means this has to be here okay what else we need we need content okay so the content of the blog post is going to be column again if I can type it correctly and this time it's not gonna be string but it's just gonna be text okay and this has no length to it it just goes for as long as it once and then this is also gonna be required for a blog post okay cuz you don't an empty blog post next we're gonna have author all right we're just creating a model here for a blog post you guys haven't caught on to that yet column again for like the third fourth time and then string and let's just limit it to 20 because I don't think most people's names are longer than 20 characters so that should be good enough and then nullable equals false like there always needs to be um some kind of author listed however if there's no author actually written down like we had before and our dummy data like this if there's nothing there then I want I want it to autocomplete oops then I wanted to autocomplete to n/a okay so all we can do I mean all we need to do to do that is you can actually just set a fault so a default value for that would just be an a and so this is saying that our author is required but if it isn't actually there just set it to the default so that's handy okay and last thing I think we'll do date post it okay or date created or whatever and again DB dot column and DB dot date time so actually this this is a different data type this is a date time because it needs to be a date obviously and nullable equals false and again we're gonna set the default to the current time okay so UTC now you to see is just the time zone you should be using because I believe it's just a standard so always UTC now but we actually do need to import date time so let's go up here and say import or from date time import date time god and default and I think that's it for the model oh we need to actually do one more thing before we do that I just want to point out that what we're doing is we're creating a real database now okay versus using this dummy data which we did earlier but we're gonna be um having it look the same so I'm have title that's where I got all this model stuff from okay I have a title I have content and I have author and pretty much raised can be using this database to replace this dummy data and do the same exact thing of going through here sending the sending all the posts to our frontend and then printing out on our web page like this okay so very last thing we're gonna do in our model is we want to define a method here okay and it is actually called um underscore underscore that's two underscores our epr underscore underscore I don't actually know what that stands for okay I may be like reprint or something but pretty much what this this function is going to do is or method I always get those mixed up but what this this function here it's going to print out whenever we create a new blog post okay and it's kind of like tabs it like a it gives it like a just something the display to the screen after we created so that we can recognize it so we're just gonna pop in this very simple thing I'm just going to say blog post and then I'm just going to add the ID I'm assuming you guys know object or any programming okay you need to know that if you don't then please go learn that and come back okay and oh I believe in the cast this to a string yeah cuz that's an int so it's just gonna say blog post and then the ID because that's this is always unique so when we create it then in our database whenever we're looking at it then we'll be able to see the ID and that it was created but that's pretty much it for setting up a database I mean we just like downloaded it and created the model and got it all set up and that's pretty much all the backend stuff and then next what we're gonna go over is actually hooking this up to our frontend so that we can input date it to our database input data to our database and have it display on our web page like on the fly whenever we add new stuff in refresh the page we want the the data in the database to be reflected on the web page so we're gonna be hooking up to our front end alright so I'll see you guys soon we're actually I forgot real quick before we go to the front end we actually need to create our database so we designed it and everything like we have it set up and we defined where you want it to be and then we have our whole model on everything and blah blah was gonna print out when we create stuff but now we actually want to build this database and generate this file okay this posts that database file so that's um as simple as just going down to our terminal okay and then let's just start a Python environment and navigate to this directory the same one here but it should be there by default alright and then all we need to do is say from app from our app you want to import the database that we just created okay this database up here the SQL I'll come you up and yes some of this stuff will print out this is not important it always prints out pretty much and then once they're here you just want to print DB dot create all alright and what this does is is going to go through our model on everything and then go through here in the configuration and it's going to create this database with this model in mind okay with all this code this class in mind and you're actually gonna see this database post database pop up down here so let's run this and as you can see it created our post that database file in the same directory because remember we're making we want our days to be relative to this and in the same directory as our flask app ok so now now we'll be going on to the frontend actually I changed my mind surprise right before we go to the frontend stuff I do want to just demo this a little bit so we built the database and it got built over here but now in this little environment let's actually just add a couple things to the database and then um see if they were input in okay so after we create the database here I'm sorry created we can go ahead and actually add some entries to it but before we do that we have to import the models okay so the our model is blog post so we're gonna have to say from app again import blog post this time already have we already have the database imported here so once we have both of these then we're good to go so we have our database and we have the model that we want to be able to input so after you've done that I'm gonna show you guys how to print out all blog posts or or of any model in the database so in a database can have mini models inside and ours we only have one just blog post but you might have like blog post you might have like authors you might have like images and a bunch of other things but you can call this thing called query so we're just gonna query it and then say all so this this is just saying spit all of the blog posts back to me all of them in a list so when I run that you can see that it's an empty list because we haven't added anything to the database yet oh we haven't added any blog post to the database so adding to the databases as simple as pretty much just doing this okay so database dot session so our current session and then just calling add alright and then in here all we need to put is a new model type so a new blog post or whatever other model we have when our case is blog post so we're just going to put a blog post and now we need to create the blog post so let's look at our model here up here so there's a title alright title is let's just say log post oops that's wrong blog post one alright second would be content alright and we'll just say content of blog post one again same thing and then after that then we need author alright equals Aaron and date posted we'll we'll just let the default happen okay so as soon as it's created it is when it is considered posted so let's hit that and didn't complain it all cool so now let's go back up to here and say a blog post query all and as you can see blog post one pops up okay and it says blog post one because whenever we create a new blog post we said we want to print blog post and then have the idea after so the idea is one in this case and then if you run this command again and make another another blog post in the database then I can change let me just change the numbers quick like that and then print them all out again and as you can see now there's two in the database okay and these changes are actually happening in this database file so like if I completely like completely restart my entire computer and close all this and have different terminal sessions and stuff these changes and this data will be preserved in this file no matter what even if I like move this file to a different computer okay that's why it's a database so it's it's pretty cool now let me just because this is kind of cryptic it doesn't really give us much information let's dig into each one a little bit okay so I can say blog posts that query dot all right but it's a list so if I do this then I'll just get logged post one and from here then I can actually just get the different fields just by calling dot here okay so let's just put title alright title will be blog post one and maybe let's put content let's see the content content blog post one lalalalala and the author okay would be me and let's see date posted all right date time oh we could clean up that formatting but point is that the date time object is in there correctly okay well we can clean it up long later if we're actually doing the front end stuff but as long as the date is in there that's what you want you have all the data on here that you need year month day hour minute second millisecond and yeah let's just check the second one as well they posted a little bit later that's right and then I just want to check the author to make sure it's in a to make sure the default is working and it's working correctly okay so that's just a little demo of our database now all now that you see a little bit of how the code works we're actually gonna be using this kind of code these query things and all these and these uh the ad ad and all that stuff into our code all right into our actual code up here and then have it running and then we'll connect our frontend okay I'm done lying now so we're gonna go to the frontend now alright so now we're gonna hook up this database to our frontend if you remember from earlier we this was the the web page that how it has a lot of our posts on it and we have two of these posts in here but from our dummy data right our dummy duty here what we want this to do is you want all the data here to reflect whatever is in our database so like it goes into the database and reads it all and then displays it all here and then also I want to have a little section here at the top where you can put in a new title like like to make a new blog post you can input a title you can put in put some text and then like click like a submit or a post button and then have that added to the database and then automatically added to the end of this list I already have this list ordered in um order of date posted okay so let's get started alright um so the first thing we're gonna need to do is like I said before if we want to be able to add things to this webpage like be able to post something um if we're gonna fill out a form and then send it to the database then we need to actually allow post requests on this web page okay so if we go here and I believe it is slash posts here at slash posts if nothing is listed then the only request that is allowed is get by default so it would look like this methods equals get that's by default but we also want to allow post okay so now I can have get and post and now we can actually have a forum that we can fill out and post to our database from that web page so now this is allowed alright so that's the first step short but very crucial and now now we're gonna want to some loud stuff going on outside now we're now we want to actually go to the front end and actually add in this form okay so let's just go to let's just add it right after all posts and before all the posts are listed let's just go right here cool let's just add a couple nice line breaks to keep it by itself these are just horizontal lines across the whole webpage it's just gonna keep it nice and it'll look nicer alright so let's add in a header okay so this will be create new blog posts and capitalize this correctly all right and then now now we're just gonna have a forum all right so the action which is just the URL that we want to be at is gonna be posts okay so that's where it's gonna be posted from and the method is going to be post all right and you can close off this tag and now we can put all this stuff we want inside of our forum so this forum whatever we put in here when we when we hit the submit button then everything in this forum is going to be sent to our database all right so let's have a title all right and this will be input and the type will be 'text just putting in text dang it text and then also the name and the ID will both be title okay so this is just so we can refer to this input thing as title and then we know in the database like what like worth to put from where to put it in database from each form so like from this in books inbox thing I mean from this input thing then we're gonna have we know we're gonna put this into the title part of the database that's why we need these here okay let's just put a line break and then let's put post so that's where the post text is gonna go and again input type equals text and name equals content and ID equals content all right same deal now the line break and last one input input type equals submit button so this is how we're gonna submit our form you guys should know this oops if you know HTML equals post so that's the what's gonna be displayed on the button and that should be the entire form okay that's just plugging that into the front end so let's get this running again let's quit out of this there we go out of that Python environment get the flash server up and running again come back here Oh was why is it not working well I find out why it's not working oh I should put this in the wrong spot silly me so let's just copy cut that out and actually put it in here okay it was supposed to be within the body block here okay I put it between the two blocks in here it's supposed to go inside this block right after all posts okay so let's I copied all that and let's indent it save it server should update automatically come back here now I want to refresh boom there we go that's better so here's the little lines that I was talking about we have the title and then we have like very simple text and some input fields and post okay I'm gonna hit this nothing happens okay because we haven't decided what to do when we submit the form so just I'll redirect here by default okay to itself so now that we have the form completed now all we need to do is hook up the form so when we fill it out and hit submit that it actually goes to the database and it's saved to the database and then when it um when it saves the database then it is automatically on this entire list is automatically reread from the database and repopulated to to show the new blog post that we just created so let's go to our code again come down to posts all right and then we are going to want to add in a little check here within this function here and we basically just want to say if requests dot method equals post all right then add it to the database we're actually gonna need to include requests okay up here so from flask import flask we're in a template and request alright here we are so if the method is post then what we want to do is actually read all the data from the form and then send all that data to the database okay and then save it to the database before redirecting redirecting back to itself and showing the new blog post in that entire list okay so this is just gonna be pretty simple there's gonna be a title right because there's a title field so we need title and post I mean in content so it's post title will just be be request read from the form and this will just be title okay and the content will be request a form and this will be content all right and then we'll just create a new post from these two things okay a new blog post object and the title will be the post title okay and content will be the post content and author will be Erin okay and the date created would just be autogenerated by default all right so now that we have oops needs to be equals there so now that we have our new post object okay our new blog post object we can now add this to the database okay very very simple so we did this before in the down here when we were playing on the database it's gonna be the exact the same we're just gonna call DB dot session dot add new post okay and what that's gonna do is it's going to add this to the database okay in this current session one thing I think I forgot to actually show down there when we were playing with the database is after you add something to the database it's actually only added in the current set in the current session I said if you like move this database to like a different file or you restart your computer and this and that that the change would still be there that is not true because you only added to it um in this session well you actually have to do is you also have to take whatever's in this session currently and commit it to the database completely so only after you call commit will it actually be saved here permanently and then when you move the database to a different computer or restart or blah blah blah then it'll still be there but if you add so if you add it it'll be there only for like this current runtime but then in the committed to make a permit alright so after we create this stuff by getting the content from the form the data from the form and then creating it and then committee and then all we have to do is a simple redirect okay redirect and we just want to redirect back to the same page so that it goes there and then it just gets it and then since it's in the database and it's gonna be read from the database and then new the new post will be there alright and else if we are not posting which means the only other option is we're getting then we just want to display the blog posts as normal okay without adding anything so the way you can do this if you actually want to read from the database remember before we're using dummy data um all posts we are actually getting this from this dictionary up here I called all posts um I can actually just delete this but I'll just collapse it for now all posts we're just gonna overwrite this so that would actually have to change anything okay so all posts I'm just going to overwrite this and then what we're gonna be doing here is actually getting all of the blog posts from the database so I'm that's just query and then we can just call all okay and that would actually work but one other little thing I want to do instead of just calling all is you can actually what we can leave that there you can actually just pop in another call here called I believe order by okay and then we can decide what you want to order all your blog post by and what we're gonna board or ours by is the date created okay so you can just call it or the date posted I think yeah date posted so we're just gonna be getting all of the blog posts reading all of them from the database ordering them by the date they were posted and then simply sending that to our front end like we were before all right so let's refresh this or I might break actually so this is I think it's actually ready to go so let's let's just try to go here refresh this click continue oh yeah the server isn't running why isn't it running I knew something was off all right let's try it again global name blog posts is not defined it looks like a quick bug let me let me fix this all posts equal blog post there's no s at the end all right now let's try it there we go so as you can see it the changes took place because this is all here and our database is currently empty so there are no blog posts here okay but if we type in I suppose actually we should have put a third one called author so like you could put like title and then post and then have author I just hardcoded in an errand for now but you guys get the idea okay this is Flast not a HTML crash course so title would you say first blog post and the post would be hey you guys I just wrote my first blog post thanks for reading cool and then let's hit post redirect okay again I did not include redirect okay so you need to import that as well along with request now let's try again and post and there we go so it worked um oh and it looks like the forum was saved even though it didn't send through it actually sent twice so maybe we could fix that but point is it seems like it's working okay let's add a second one so second blog post this is my second one and hit post again and there we go it just added to the end there okay second blog post by author this is my second one yadda yadda yadda and so yeah so we have our database hooked up to our front end now and that's the basic framework of course we can use CSS to clean this up make it better and have a lot better website design and all that but the back end and the the backbone of all this stuff is is working alright so that is it for databases for now we'll also go over like deleting deleting blog posts and updating blog posts um a little bit later because we already um for a further for a crud application I'll create read update delete we've already done create and read here but yeah we'll go over that later and then there's actually a lot of different other things you can do to read from your database like there's other ways you can order it you can filter it you can get all of them you can get like the first one and all that stuff so we'll go over all of that shortly but all you guys get the basics for now alright nothing is going according to plan I'm just gonna go over them right now actually so I'm gonna go over all the different kinds you can read from the database which is querying and then also we'll go over the how to delete things from your database and also how to update elements and only like certain parts of like certain parts of blog post like updating the author or updating the title or updating the whole post to finish off the crud stuff in flask okay so we're gonna do all that down here in a Python environment and then we'll go ahead and then implement it in our code right after okay so let's just get python up and running again oops Python alright and then again from app we have to import our database and also our model we only have one blog post all right so this information is pop prints out all the time you can know that again let's put some space and now if we go back to our web site remember we're here to our blog with all this here let's let me just show you how to read like all the different reads and stuff I mentioned you can filter by things I mentioned you can there's different kinds of ways you can read from v database let's just go over that so remember to get any of the blog post she's called query and you guys are familiar with already okay there's blog post one two and three blog post one two and three all right and then if I add one why don't we just add another one title a fourth one yoyoyo hihihi cool post there we go fourth one you yoyoyo haha hi by Aaron and then I'll run this again then the blog post pops up right there cool on the fly what else is there you can actually just call first okay and this would just give us the first one because this is an entire list you know so this is just a shortcut to get the first one but of course we can also just index into it like this one two three four blah blah blah oh you can't you can't index out of it though you're gonna get an error as you can see okay what else can you do you can I said you can filter right so let's go back to the one that's not breaking right up here okay and you can actually call something called filter by and here you can actually specify what you want to filter by so for us if we filter by maybe author if we filter by author then it'll only spit out all the ones where the author matches so actually so I guess this will actually come in handy over here since these two have the same title let's just filter by this title okay which and which means that only these two will show up all right when we filter by that so what's going to here and let's just say title equals oops no that's not there we go title equals first blog post so let's just copy this pop that in there dang it okay pop that in there and oh and when you do this this actually alters the query so this is uh this isn't actually gonna pop up we need we actually took all all again okay so when we when we query blog post it just automatically gets all of it and then we have to call all to actually show all of it because this is just like a query object so but this filter by actually just edits this query object and then we have to call all again to actually show it so as you can see only blog post one a blog post to show up because those are the only ones that have a title that match um first blog post like that okay this would be a lot more useful if there's like different authors or something but when we do update in a few seconds I'll show you how to do that and then we'll do another filter okay besides tilter you can also do order by which we already did up in the code remember you can order by instead of filtering by something then you would just order by it which means you'll get everything but then you'll order it you'll sort it by that order based on that thing the date posted in this case oh and lastly the very very important one okay I'm just going over them all the most important different kinds of reads okay you can go look at the documentation if you want to see everything else there's also cute query dot get okay so what this does is this actually gets whichever model object has their ID okay so if you put you so you see how there's like blog post one blog post two if I put one it would automatically just get blog post one for me so as you can see it works like that and if I do but um get two then I get blog post two and so on and so forth again if I go out of range nothing breaks but if you actually print this out this is returning a blog post object right here but what this is returning is actually none okay so if I actually type print blog post query dot get five okay it's none it's just an empty thing so it's it's empty it's null and so if you try to do anything with it it's gonna break there's actually another method called get or 404 which we're actually using our code a little bit later but don't worry about that for now just know what that get using calling a get function just requires the ID okay the primary care primary key ID that's pretty much it for reading though I mean that's those are all the different things you can do to query like all the main things you can do to query a database and now let's go over delete alright so if we go up here I had my I guess duplicate here let's just delete one of these duplicates okay or let's delete the last one that I just leave it okay because it's kind of whatever the way you delete in flask is you have to from the databases you have to call the database object and then the session again okay and then instead of ad which we had before we just have delete alright very straightforward and on what we need in here is actually the the object of the model in this case our blog post so we have to actually get a blog post object in there so how do we do that well we can use the get so if we just um copy this and paste that in there and go like this and we want to delete the fourth one right go like that and then we hit enter then it'll actually delete this fourth one it's not gonna work i believe if i refresh it yeah because we um haven't committed those changes alright so you have to DVD session dot commit as well alright and it should work now there we go it is gone the reason it's working is because I actually have a terminal running in the background just to have the server up and running because I'm in the Python environment down here this would have crashed but I started writing this ahead of time okay so this terminal is exactly the same let me just I guess you don't even need to see this it's just the terminal running but that's pretty much it for delete okay you just need to have the ID the primary key because if you're deleting something then if two blog posts are completely identical then you still need to distinguish between those two to know which one to delete so you have to delete by the primary key okay and that's ID lastly we have update which is pretty cool so remember how we were able to go into different fields of a model of a blog post so we can like go get the title we can go with the content we can go with the author by simply going like this blog post dot query dot get one dot title or something okay and we do that then we get first blog post okay which is the title of the very first one now what's cool about this is we can actually just set this equal to something else so if we let's change the author of the second one okay dot author this should be Aaron okay that is right Bayern and what we can do now is actually just change this by because this is a variable okay we have direct access to this we can just assign to something else to Kazi okay so the second one is Aaron right now let's run this no errors it's not gonna work because we didn't commit yet but as soon as we commit all of our changes boom and we go back here and refresh boom it changes a Kazi okay and same thing again we can change it right back alright and commit again boom refresh back to Aaron all right but actually let's change it back to cause it real quick and then I want to show you filter again cause II commit and now that we have refresh this now that we have a different author here I'm going to actually filter by Aaron and then it should ignore the second one okay just to demonstrate that last part so DB query dot filter by that's what it's called not guilty Gilmore Girls I never even watched that show but also doing filtering by author that's right equals Aaron okay and dot all remember we have to because this just edits the query now that we have dot all we can just run this oops sorry not DB query to filter a blog post out query to filter there we go so you can see that we get blog post one and blog post three okay and that makes sense because we're filtering by the Thai Tom by the author of Aaron and it ignores this one alright and again because this is adding the query we can actually just you first something like this alright and or just index into it like this and boom we can get exactly one so now we know how to read we know how to update you can update any other the any other of these sorry assuming we have the right data type so like if I wanted to change the date posted then you just have to like a date/time whatever object and blah blah blah but you probably be getting all these things from like HTML frontend form which is what we gonna be doing we implemented implement this in code in just a second okay so I'll see you guys in just a second to do that alright you guys right before we do that though I realized that I how I was hard coding in the author here to Aaron let's change it really quick okay so when we create a new blog post we can I should specify the author all right and then if it's not provided then it'll it'll automatically put in not available and /a okay let's do that really quick let's get rid of this dummy data we don't need this anymore all posts because we're using a database now so I'm just gonna simply delete that all right now all this you have to do is a pretty straightforward let's just go to post HTML because that's what's here and then go to our form which is right here and then we have title and post so let's just add one that is called author and we'll call this author and call this author all right save those um that should be good let's just refresh this there you go change was made cool but now we also need to go into our code and whenever we generate the slash posts web page whenever we're here or like we refresh this page and all this is generated we need to make sure that this author reflects whatever was typed in here is in the database so when we get here when we post a new blog post then we were only getting title and content but now we also need to get author post author and call it author because that's what we gave the name and ID all right and then one last thing is when we're creating the post we have to specify that the author is post author and not Aaron okay and that Aaron by hardcoded okay that's cool if there's no author then I believe it'll still just display n/a because down here we say if there's an author then this way the author but if the author if there is no author if it's null then we're just gonna display n/a okay I could have saved n/a in the author but I think this is just better because you don't want to like like weird n/a things floating around in your database for authors okay it's just a display thing we're just like making it easy clean for the front end so it's better to do it like this okay let's just refresh this really quick okay let's create a new post awesome blog post cool author is me and post is post post post and we can hit enter and that should work so awesome blog post and by me and post post post all right so now let's get into let's get into the delete and update all right so deleting so I think on our website we should just have a delete button okay after the entire post so that we can delete it and then we'll also have an edit button later when we're doing update okay we'll have like a cleat and an edit button we can just click and then it'll either delete it or then we can edit it okay and then when we save it then it should just be reflected here the change should be reflected let's go back here let's just go to post HTML and let's add in that button okay so after the content I think we can put at the very end so just enter the content well two buttons so very simple let's just put in some simple links here all right href would just leave an empty for a second um each ref and just call this delete okay and I'll just leave it like that let's just save it refresh there we go so we have to delete there it looks like it's working let's add a nice line fighter that looks better okay and now let's actually put the href in so the URL um then I'm going to use is just posts slash I think delete slash and then we're also gonna need the post of the the ID of the of the post let's let's do this later actually let's leave this blank for now let me go back to our code over here and let's start implementing the URL first and that makes it more sensitive within this order so um let's define a new route for delete all right we don't need these methods like that and let's make it delete and then in here we are going to need to specify which blog posts we're gonna delete so that's just gonna be from the ID okay so when we go to that URL if we go to the slash posts / delete / i D like if it was this / delete / 1 then this one will get deleted okay oops let's just define delete here okay and that should be ID in here the variable that we just made up there and from the URL and then once we're in here all we need to do is just fetch the unique blog post using the ID that's why we need the ID because that's the primary key if you guys remember that's the distinguishing field and we're just going to say blog post doc query dot get or 404 because if it doesn't exist then we don't want it to break and the Rio so we have our post and now it's as simple as just deleting delete post all right and then commit little DB that session commit and then after this then we just have to redirect to the back to the post page okay just like that pretty straightforward so we're just um but if we go to this URL with the ID the distinguishing factor then we get that post then we just call delete on the database we commit the change and then we just redirect back to this mean um list of posts okay the global list so let's save this let's let's go back here let's refresh it and oh yeah we didn't we didn't I undid undid that change let's go back and make that change now let's go to post the HTML and if you see down here we are passing in the post when we delete it so when we're here we can actually just call slash posts slash the delete leave right that's what I called ya and then just use some Jinja to syntax here but you just called post ID all right why is it red or is it giving me an issue there Oh href equals okay that was throwing me off earlier got it but now um so all this is doing is when we're generating all of the posts it's just getting the ID of the post okay and then it's fetching that and then it's going to this URL okay so when we click on the delete button it's going to take us to this URL all right down here so clicking here will take us to the / delete / ID URL for this one and then it'll delete it so I already saved it let's refresh this and as you can see now there's delete buttons and if we hover over it you can see on the bottom right and right below where my clicker is it might be a little bit small well if I remember to edit this in then I can zoom in so you can see it clear but it was it says local host on port 5000 slash posts / delete / 4 because this is the fourth blog post okay 4 so it'll delete this one if I click it and then same thing here it's slash 3 and so on and so forth so let's just give it a try delete and will be the last one and it's gone okay so pretty straightforward for delete now let's add in an edit button so let's add in the edit button now ok so we have a delete button and then let's just follow it up with our edit button right after it very simple we'll just copy and paste this and the URL that I want to use is exactly the same except it's gonna be post / edit / the ID because again we can only edit one blog post at a time so you want to distinguish it and instead of delete if you want to have the habit say edit okay very straightforward so we just added this button in and it's going to link to this specific URL so after I show you this then all you need to do is go into our app dot PI and then define this route now and then whenever we stumble upon this URL then we need to go to a separate new page that allows us to update everything in there and then save it back to the database okay so let's go over here let's just refresh this to show that it's popping up as you can see the let me go back I guess I can't undo it yeah just remind the video you should have seen just this edit at the bottom popup okay right here there before Ellen if we click it then it says not found because see we're actually at the slash edit / one URL okay but we haven't defined that route yet so that's why it's giving us a not found error okay so let's go back to here all right and now let's go to app dot PI and let's simply define a new route okay app dot route we've done this before so you guys should be getting familiar with it posts I said we want to do edit instead of delete and we're gonna need an ID let me turn off rocket again and I lost my train of thought and all we're all thinking also gonna need to define that we can do get or post requests okay dang it okay because if we're editing if we're editing a post then we need to be posting to the database we need to be updating the bit database so that's post a post request okay so we have that and now we're just going to define the code okay so for edit very straightforward all we're gonna have to do is get the post again very similar so actually you just copy your pace copy and paste this cool and then now now it's very simple it's if we're posting we need to treat differently if we're posting or if we are just getting this URL okay so what I want this to look like is when you when you click Edit here on this post okay I want a separate page to pop up that just has this form with different text it'll say like editing post and then this will just say edit or something okay and then it'll be here it'll be in here and then I want the title to auto um fill in with whatever the title is the author to auto fill in with whatever the author is and the content to fill in with with whatever the content is and then for this to say save instead of posts okay I want just that and then you can change make your changes and then hit save and then um and then when you hit save a should come back to this one and your change reflected all right so that's kind of like the goal and we're gonna do that right now so once we get to there um all we're gonna need to do is just get all of the data from the form so we're gonna be just copying over this form pretty much we're just gonna copy the code over to a new web page called edit dot HTML okay we're actually create a new HTML file but then once all the data is in here we can make whatever changes we want on the front end but then we hit save all the new new data in this form needs to be saved to the database so that's what we're gonna do here so it's literally as simple as just saying post title now equals request dot form title just like that okay so this is getting the the data that was in the title field whatever we changed it to and then it's just saving it to this it's just overwriting whatever was used to be there okay and then surprise we do the same exact thing for author and for content and that will pretty much do it no spelling mistakes cool and then of course the very end we need to commit these changes all right DB session I always forget that session and then we just want to redirect after we save um oh of course I need to put this in a if request dot method equals post yeah and all this needs to be indented so if we're posting to this to this which means when we're on the new web page and this all pops up in just this and then we click this which means we're posting something then do that um then then do all this stuff then we're gonna have to define also what to get when we just let me just arrive on that page we're just you just want to display what the empty fields there well not empty but whatever it is supposed to be full in here by default from the database so this is going to be a simple redirect after we submit the form we're just gonna go back to posts okay like that and then else for here we're going to return we just want to render the new HTML template okay oops no render template and then we're just gonna call it edit HTML all right so now let's create edit HTML okay this might've been a little bit of a big chunk to bite off but it was either this or the HTML first might even better the HTML first but you guys should be able to follow along at this point so let's just create a new file in here okay and call edit HTML cool and then let's just drag it over here and let's just copy all of this from post HTML or actual I don't need all of it um we definitely need the extends we let's just do a piece by piece so we need the extends because you want to extend the template again oh we're gonna need a title so let's just paste these in okay but instead of post it's going to be edit post alright save this go back to posts we're also getting in a block body alright so that's good and then in here we wanted to copy over this form remember in this form only we don't actually want the for loop that generates all this stuff so let's just go to here and I just get all posts and here and the whole form and stop right there okay because we don't want to generate all the blog posts here in this for loop so let's just stop oops this way paste that in and then we're gonna need to skip that and then end the block so copy and in block alright that should do it let's save it and let's just see if it broke so I oh whoa what happened did my oh it broke it uh the server stopped there we go we just started it up again go here refresh it cool so now when we hit edit alright cool it looks like we are at the post / post / edit / one URL and only the form was generated okay with all Dilla here so that's good it seems to be working let's go over here change the edit post this changes from all post to editing post alright let's change this to create new blog posts who simply edit and then we'll keep those three there and then instead of a post button I want to have this say save so we can just save our changes so let's delete that and just put this in here like this save it again come here because they're in debug mode it's automatically updating the server and as you can see now we are on editing post and then edit and title author post and safe okay I'm gonna hit save remember I said there is going to be a redirect back to the main post page that has all the posts there because we hit the post when we hit the post button the Save button then we're doing a post request and then it's gonna go back so let's hit save and it should go back cool but when we hit edit we want these changes to be reflected okay so we're missing that bit of the code so let's go to our edit HTML alright and now in here we're just gonna have to oops we're gonna have to make some changes mainly we're just going to have to change the URL here first of all so the form the action is the the form that were I mean that URL that we're submitting on so um since we said we were going to handle post requests on this URL okay let's copy that then we need to we need to have the form be submitted on this URL okay but of course it's not going to be in Eydie is just going to be simply post that ID all right oh I think we forgot to UM send in post here okay post equals post because we need to send the post that we are editing over to have access to all of its data so we can auto so we can auto fill in these fields here okay so we have the post and then now let's go over and then we send the post data over and now that we're in here we also have access to the post ID so we know the ID here and then then we're pretty much almost done the pretty much the only change we have to make here is add on something here to issue these fields and that is a default value so we can by default this empty that's why these are empty but we can actually say to input some data in there something anything we want really so actually I'll just show you if you put Cal say this go over and refresh post reference before assignment one second guys post equals post over here post equals post ah I see because this needs to be outside of the statement little bug here so we get the post for this method and then then we go into the if statement and then this will be available in here so let's save this and try this again there we go so you see that cow is auto completed in the field there so let's go back to edit HTML change this and simply all we need to do is just get the title right get the title from the post that we have so that's just gonna be post title okay pretty straightforward we'll save this we'll hit this button first blog post which is what the title should be and then just repeat this process for the other two and we will be done so post that author all right and post dot content and that should be good to go so we have the save let's go back here let's refresh it and as you can see all of these changes have taken effect these fields are auto completed and if we change the author we can say Tony Stark and hit save as you can see the author was changed Tony Stark okay and we can edit again first blog post and add some more exclamation points hit save we redirect back to the page we made um we changed the stuff in the database with the commit and then when we auto generate this stuff again then all the changes are made okay and of course we can go down here we can delete posts we can add we can add new posts let's add a new one new post again author me or you and post let's just say 1 2 3 4 5 enter there we go new post again edit 2 3 4 5 6 7 8 9 10 and let's delete this so let's empty hit save and because it's empty you can see that the author was completed to an a all right let's let this cuz this makes no sense and that pretty much completes all of the crud functionality for this flask app ok we're able to create new posts ok we can read posts in all different ways we know how to read all we not a filter by we know how to order by we know how to use the get method we know how to update posts we know how to delete posts and that pretty much completes it so now we're going to go on and make this look a lot nicer ok probably gonna use some bootstrap and stuff they clean this up and maybe add in some other nice features but this is the basics of flask pretty much done so if that's all you needed umm you just wanna learn like some basic basic class stuff then you're good to go but I encourage you to keep watching because we'll be getting some more some more fun stuff in just a little bit alright see you guys all right you guys so now it's time to get some bootstrap in this project okay so we finished all the flat stuff we have our whole crud up our whole credit application and now let's just all get some boots trip in so let's go to bootstrap comm or or to the website I mean and let's just go to the introduction okay this is where we can get the code to get started so bootstrap is just a collection of CSS files and JavaScript files and HTML files that allows us to plug and play things easily that I'll make it look nicer so we don't have to code everything from scratch okay it's just like a building blocks it's like Legos or something but it's very useful for speeding things up and whatnot so let's just go through the QuickStart here so pretty much all we have to do is just copy a stylesheet okay so this is gonna be CSS and then also some JavaScript from them and then everything will be ready to go pretty much so let's just take this alright copy the CSS and paste this into our base HTML because we want this to be applied to every web page and since everything inherits from our base to HTML then we can just paste it in here pretty much okay so literally just paste it we can get rid of this other stylesheet we don't need it okay boom like that and let's save it alright and the server is running and let's go back to our our website and when we refresh it you can see that all of the fonts updated okay so now everything is a little bit different um that's good because that means that bootstrap the bootstrap fonts have been inherited so we also need some of the JavaScript like they sit down here so let's just copy this as well go back here and then it says paste it at the bottom of the body tag okay so we're just gonna paste it right down there just like that and fix the formatting alright save it and that should do it um it's not gonna make any changes we're just gonna have a little bit JavaScript in a bit but that's where it supposed to go okay at the end of the body tag um one last thing now the last step that we want to do to get a few more formatting things in is in our base again um in the body we just want to sandwich this okay in a div called container all right so class is going to be container and all this is is just a special bootstrap class bootstrap specifies this class container and CSS and what its gonna do is just give us some nice formatting things like some padding and margin so why not so and i refresh this you're gonna see everything is gonna be centered and as you can see now you have some nice margins at the edge and when we zoom um close the make the window small what not or if we're going on mobile then everything will be accounted for it's not gonna be any weird like clipping issues and stuff like that bootstrap takes care of all of that which is great okay so we finally have a little bit of a nice front end going but now we're gonna make it a lot nicer okay I'll stay tuned all right so we got bootstrap installed and things are looking a bit nicer so let's continue okay so now that we have all this here I want to add a nav bar all right so it's very easy um thanks to bootstrap we can just go into bootstrap and plug in the navbar pretty much so let's just go to the website again go to examples here and you can scroll down you can pretty much go to any of these websites and just been just like inspect the source code and paste things into your own project as needed so let's scroll down here to nav bars okay and then they have a bunch of nav bars here just in code and let's just take this first one okay this little one that has this nice little collapsible menu and blah blah blah and maybe we'll take another thing from here later so let's just go here right click and click on View page source alright and then just gonna do command F the find function and just put in any eight nav four nav and let's just find the first nav bar so it looks like this is the first nav bar here from nav to nav so let's just take this okay boom just like that copy and let's just paste it right at the top of our body okay just like they did here so we'll go here at the top of our body paste in this nav bar alright right click and let's say format document so everything is nice and formatted for us let's save it alright servers running because the debug mode is on let's go back to posts refresh and voila the navbar is installed just like a Lego easy so we have a collapsible menu here all this text is wrong but about to change that and then we can also link these two linked to the right web pages and whatnot so let's go back into the code and do that now okay so if we go into here we can see never expand so never expand was this text here so let's just change this to clever programmer block cool save and then let's just change this to the root directory okay what else do we need let's just refresh this as we go okay cool it up updated if we click it then it'll just take us to the home page again but let's go back to posts what else we need to change home yeah let's change all these so link home is okay but I have this also linked to the home index let's change that there cool link instead of link let's have posts okay save this and then have this link to slash posts alright what else is there disabled let's change this to about okay we don't have an about page but let's change that for now maybe we can we can add one later let's refresh this check out the menu see if it changed yup we have home we have posts click on home it take you to the home page and if we click on if we click on posts it should take us to the posts page perfect alright and then we have the about of course and then our drop down here is another thing uh let's keep going okay so um drop down menu here maybe we can just add a contact us kind of thing here alright and we could add maybe a like link to our website we could link to our YouTube we could link to our Facebook maybe I'll actually paste links in here later and then we can just copy this and Twitter or Instagram wrong one and Instagram okay so we could actually link to these things and why don't we actually do that okay so really quick our website is going to be HTTP slash slash on wwl ever program or calm alright and let's just pop in our clever programmer Facebook cool boom here let's grab this URL here's our Facebook page its cause II I'll go here and paste that into Facebook cool there's a double are here I think it's a typo I don't know but that's actually the page but anyways I mean maybe we'll fix that later our YouTube channel you guys are probably familiar with clever program or YouTube boom little load just do this for completeness sake get the there we go get the channel here pause that video pop this into here alright save and Instagram last one so that's gonna be cause ease clever Kazi Instagram but boom boom get the one here and the URL last one and cool so now we have a fully fledged contact us so let's go back here let's quit out of this because we don't eat anymore now guard we'll leave this here cuz we're gonna grab some more stuff in there probably let's refresh this go back down here click we can see that it changed to contact us and now all of these should actually be linking to the correct places so website if you wanna go to our website here we also have our YouTube channel as you can see loads up there just fine and the Facebook and Instagram I'm sure you guys believe me that they work ok oh right so now we got our navbar in our app ok we have up here so what else can we do I was thinking our homepage is looking kind of lackluster ok it looks like that so let's uh beef it up a little bit ok I was looking at the nav bar and if you we grabbed this top top one already this nav bar but if you go all the way to the bottom you can see this nice grey rectangle with a little bit of text and like a little button here to like launch something or whatever let's put this on the home page ok and just have like a little welcome thing some little text to explain what it is and then have this link to our our main web page that has all of our posts ok so let's go back to the inspect source code here I didn't close this so this is just if you remember if you just rightclick this and you go to view page source and you can get all the source code of this web page go down here and I believe this thing down here is called a Jumbotron okay and bootstrap that's what these uh big rectangles are called so if you can see it says Jumbotron right here alright and let's just copy this main tag and this all this here should be this rectangle here ok so our home page is empty let's go to here let's go to our index which is our home page and right under home page let's just paste in this main thing and we can form a document a little bit let's just say this suit it looks like alright refresh this boom that was easy let's add in some line breaks here because it looks a little bit crunched a little crowded ok so just a little break here BR and you want underneath it to be our cool and let's just see what it looks like that looks better alright so let's continue instead of navbar examples let's write welcome cool and then let's I'll change this text a little bit ok let's get one of these a ref tags off and let's just paste this down here it's for this later I'm gonna have a link later on this P tag let's get this sorry guys let's just say welcome to the clever pro grammar blog cool here we'll be talking about everything computer science cool basics frameworks you know what I'm just leaving typos cuz it doesn't matter frames works machine learning other data science stuff any new tech or findings and more ok or and pretty much anything computer science related cool uh let's see what it looks like to make it consistent that looks better alright and on the second one let's just say go visit us at our website and let's just have this anchor tag in here HTTP buh buh buh www dot clever programmer calm trying to talk too fast again and say clever programmer calm all right to check out more cool stuff beyond just blocks done all right so that that settles it for that we have our home page it's all nice now we have this giant jumbo Tron's at least welcome people to our blog with a little bit of a introduction here briefing people in what's about to happen very good nice website design and we have a link to our website here if people want to learn more okay so we have like a free three part masterclass blah blah blah go back to our website and oh I forgot the button of course so down here we want this button dang what is going on here I don't like this formatting okay so we have here and then we'll just say go to posts all right so go to blog posts awesome and instead of this we don't a link to the docs of bootstrap you just want to go to posts okay now let's go back here refresh boom this change to go to post and when we click this it brings us to all of our posts awesome so we have our navbar plugged in we have a nice little Jumbotron welcome pay you plugged in all thanks to bootstrap that was pretty fast I don't know five minutes ten minutes wouldn't what was that you guys aren't on depends on how fast edit it or how sure to edit it down to but yeah let's move on alright so that does it for our home page we just finished it up let's go to our posts okay and now let's start cleaning this up okay so it looks okay but I could look a lot nicer right so let's start with um making these blog posts look a little better okay each one of these little blog posts let's just clean this up and make it look mmm more blogging all right so let's go to posts and we generate all these on our template in the loop remember we generate each blog post in a loop so our loop is down here and let's change this so I think if we instead of using the hair tag here if we actually changes completely to using small tags this just gonna look nicer it will make a big difference let's just pop this in here like this all right and then let's just write written by author and then also let's add in the date okay the date that it was created so remember we have post author we also have post dot I believe it is author and date posted okay so let's copy this go back to our posts and post dot date posted and that should do it okay so I want to change this format and then again let's just copy this in case there is no author what are we gonna do we just paste it's down here and we can say written by well there is no author so we're just gonna write unknown alright and then the date is required because when the post is created it's autogenerated so that'll always be there and let's just format this and let's check it out okay so let's go back here and let's refresh it and as you can see this looks a lot nicer okay let me zoom in a little bit the website starts looking a little funky when i zoom in too far but just to show you so it's bigger you can see that this was changed okay so it says written by the author on the time exactly which looks a lot nicer a little bit more clear um and it looks more like other blogs I looked at some other blogs and they tend to have this really small so like New York Times or whatever but yeah let's change fix some of this spacing maybe I think this could probably use a break here or fish this or whatever and let's change some of these buttons now okay so let's zoom back out oops let's zoom back out alright and let's go to the buttons all right so bootstrap is nice because it gives us a lot of like free little or I shouldn't show you so bootstrap buttons if you guys didn't know there are a lot of different buttons that allows us to make and there's a nice image here I just go to the this image is good all right so you see this we can add all these different buttons so instead of just having these little blue link things with the little underline we can actually have buttons that look like this okay so all it is is we just inherit a class and the class specifies all the stuff so we have different colors if we call it a danger button then it'll be red if you call it a primary button it'll be blue and if you call it a success button it'll be green so let's just go into our code all right and go down to the buttons here and all we have to do here is pretty much just add in a class all right and this is all specified by bootstrap and we just wanted to say it's a button and this one it's a delete button so we want it to be danger okay because I wanted to be red and I'll be delete and then also down here I want this button to be a primary I want to be blue okay because it's an edit button so it's kind of a neutral color so let's go over here back to our website and refresh this and as you can see Kabam these buttons are a lot nicer okay so delete and edit that has the same exact function functionality we hit edit we go back here and we can edit our post let's go back but that's pretty much it let me just clean up clean up a little bit of the spacing with a couple more line breaks above the header and then below the time so let's add another break here just like that and above the header let's just added break as well it's a little sloppy but I just want to make it look nice okay that's better so we have some spacing here and spacing at the top so each of them looks like they're a little bit detached and actually let's add one right before the buttons to Oh oops I don't know what it clicked but whatever and uh her library okay this is actually really bad but it's fine as long as it looks I screwed that up ding ding I meant down here like that and yeah that'll do so let's continue alright now that we got these buttons done let's clean this up next okay so this looks a little bit like old and antiquated outdated so let's just update these input fields okay so this is in the posts we have this hardcoded at the top I believe up here that's right so let's actually change these inputs to better inputs okay so let's and we're gonna change you some real labels too cuz we just have these labels just hardcoded in there so for now let's just put these on new lines alright save that and if we go back to here and we go down here as you can see there's a search bar here with a input field I actually want to use this input field here instead of these weird rectangular ones these ones are from bootstrap so I'm just gonna go into the code and paste this one and then paste them in here and kind of like Jake it together to get it working so let's go to where is this this is in the nav bar so this will be in base HTML and then we'll go to or it'll be uh the nav bar should be top body that's right nav bar here clever programmer blog at the bottom here we go finally found it so this little form here is actually the little search bar as you can see it says placeholder search which means Oh prepopulated with the word search and as you can see there's a little word search here so we know what this textbox is for so let's just take this input okay this input and we're gonna copy this and paste this here and kind of splice these together okay so input we would have typed text we have class form control placeholder search and search and all we need to do is just copy and paste name and title over okay so let's just paste these right here that I'll do or actually let's paste them right after text right there just like that so title title we can completely get rid of this input all right save it go here and placeholder we want to have enter title instead all right and then this will have also enter title enter title save that let's just see if this is working correctly go over here refresh this and as you can see it worked and enter title so this looks better than the author and post do so let's do the same thing for those well actually just for author for posts are actually gonna upgrade it even more but let's just get this line do copy go down here same routine except this is going to be author instead of title alright so form control so text and instead of title it's gonna be author and author and placeholder will be enter author and enter author all right that's nice it's like a 1 done cool and now post so the body of a blog post is usually gonna be a lot longer so I don't want to just use a regular text input anymore I actually want to use a text area which is gonna be a huge block of input text ok so the way we can do that is or the way you could go out about finding it yourself is actually just going to the bootstrap stuff there's a page on bootstrap for forums so let's just write down forums oops right think I opened this in a new window bootstrap forums there we go and just click here forms your bootstrap and here it gives us all of the different possibilities for creating forums using bootstrap all right so let's scroll down this is just regular input text fields blah blah blah if we keep going down then right here text area this is what I want a big text area with this little resizable window thing here so we can have a long long blog post ok so this is here and it should be at the bottom of these four things so it should be right down here I believe it's this div label text area that looks and let's just copy this and go over to our code and place this here alright so this is going to be a div I actually don't think we need the div yeah let's try get rid of the div and just have this here well we got to change the labels to as seen here why don't we do that right now label do that and this is going to be post all right label and it's going to be for content all right just like that and then we'll do the same thing for the other two oh sorry like that and then just repeat this for these other two labels for the click so this is gonna be author instead author and change this to author and same thing for title last one it's going to be title this say for is just linking this name title to this name okay so it's saying this label is for this title done now let's go back to the text area so the ID here is going to be content all right and the name is also going to be content I believe and that should be it let's just delete this fresh the page and as you can see we have a nice big text area here okay cool oh and the labels to the labels changed it only looks a little bit different but these are actual tables okay oh we can also actually add in placeholders here's two placeholder and we'll just type in a content oops not equal signs refresh this and there we go we have a little thing there also we're gonna need this just to stay consistent and we're gonna say well enter content and enter content boom fresh this alright and that should be it so we are good on that let's just double check that this is working title one and author one and yo yo yo hello helloooo post go down here and as you can see it working just fine so title one written by author one at the time and then this and then just delete it and it's gone so cool that cleans that up what else can we do one thing I forgot to mention is when we add something with the different new lines and stuff like multiple lines in the content it's like let's say line 1 and line 2 and line 3 like this and we post it as you can see the whitespace and all of the new lines and stuff are not preserved are not being rendered here so let's go in there and actually fix that okay so let's go to our code here and if we go to posts where that is in the loop where the content is printed out it's right here post content all we can just pop in something here a little bit hacky but that's okay all we're gonna do is type in I believe whitespace okay and then we're gonna say not woke space white space white space and we're gonna say prewrap so this what this means is preserve the wrap the line wrapping okay and let's just save this and go back here and refresh this and as you can see now the the white space and the new lines and stuff are all preserved so now we can actually have multiple paragraphs per blog post and so it's all in just one big blob okay I noticed that that air earlier I just I fixed it so let's delete this okay let's actually paste these in a bunch more times and save it and so that just looks more like a blog a little bit more that's fine and yeah let's move on alright so next let's go here and let's go into edit and as you can see let's just add in a bunch of stuff here to make it nicer but as you can see we're going to edit this is still not the nice new input type so let's all make the changes here as well okay so we're gonna have to go into the edit web page the edit template and then we're just going to copy over the form that we just did here okay but we need to like populate these with the existing content and whatnot so edit we have the form here and this is the old form we don't want that anymore we want the new form that we did just now with the labels and the nice text inputs and the text area and let's just paste this in here okay so now we have the new form but remember the difference with edit is we don't want empty forms you want to actually populate each of the text fields or text areas with whatever data is already in that blog post okay and that's pretty simple it's as simple as instead of having a placeholder okay we're just gonna have value and then this is just going to equal to the what should we call it the previous data so this is going to be post out title so the title of the post and then we just copy and paste this for author as well post dot otter and for this text area actually a little bit different there's no such thing as value there's no value parameter for this tag for a textarea tag so let's delete this placeholder all right and what we need to do is if you notice the input input tags don't have closing tags okay it's just the opening tag but the text area does that's because everything within this text tag is gonna be what's inside the content so instead of using value we actually just paste it straight into here like this okay but um instead of oh we don't need value of course but instead of title it's going to be content all right and we don't need that last parenthesis I mean uh quotation marks and I don't think there are any errors here yep oh but this should be not post should be save because we wanted the button to say save instead of post and let's just let's just see if it worked all right so refresh the page let's hit edit okay and there we go so if we go back we see that this is second blog post written by Aaron and the content is this is my second one we go in here this is my second one written by Aaron second blog post cool so now we can actually copy a bunch of I mean we can edit stuff in here we can go on new lines multiple paragraphs like this cool and hit save and when we come back it's creating a new Obi cuz we didn't we're not updating it oops so we need to change the URL that we are posting to so we were actually posting to the entire post list so we were treating like a treating it like a new post that's why it was adding it like a new post here okay instead of updating an existing one but what we need to do is actually go to edit remember because in our app pie we have the route specified that when we go to edit then to update the database and all this stuff here and then render the template again so we want to actually go to edit but we also need to pass the ID of which blog post in the database to edit if we if you go back in the video the form that was here earlier it actually had this action okay but I deleted the whole thing that's why I forgot to I should have left it and then double check before I ran it just make sure that didn't I was carrying over everything and spicing them together correctly but um yeah so we need to uh I think it's a post that ID I believe so yeah and that should fix it so let's yep so let's delete this okay I'll go here refresh this and go into edit and then do a bunch of changes like that hit save and when we come back it is now edited okay so we edited the content here the title and the author stayed the same but that is the Edit functionality cleaned up as well cool so when we hit again we are back in this nice little area with the nice input fields so now let's actually clean this up too so initially we had the add a create a new blog post functionally here on the same page as all of the existing blog posts the whole list but let's actually detach this and put this in its own web page okay and then add like a little button or something like that says new post that we can click the go there to make a new post and then when we save it then it comes back here and it's added to this list all right so let's start by creating a new file that's the first thing left to do and let's call it new post HTML alright new post HTML so it's gonna look very similar to the Edit that HTML right so just copy everything over from there to start because we want all this inheritance and stuff in the head and blah blah blah let's go through all this we're not editing a post we're gonna say new post instead of an editing post it's gonna say new post and then it's going to say yeah that's fine um well I mean not the idea let's just put a new post again I don't this is gonna look like what we can change it when we get in to the website but this form isn't what we want this form is to edit one that has all the Edit content the form that we actually want already exists it's right here remember so let's go into here and let's just take that and paste this into here like this cool and I think that's pretty much it let's just see if it worked because we didn't delete this yet from here so nothing's changing but also this exists but we're not linking to anywhere so we need to actually create a route first to actually render this template so before we can see if this is correct we need to go into here and create a new route all right so let's just copy this new route and this is going to be posts slash new okay and then we're going to allow get and post and are you just gonna want to populate this alright I mean this this method so we need to we can actually just copy this from edit because it's gonna be very similar um we don't need we don't need a specific idea of a post because we're creating a new one so we can just skip it down to here and we can just paste this down so if we're posting then we actually want to create an entire new post and then push that to the list or to the database push it to the database and then redirect back to the list of all posts we can see the new post that we just created so this is very similar I believe it's exactly the same actually a post title post author so yeah just getting the things from the forum and then oh we actual when we're creating a new blog post we need to create the new blog post after we get the format the current the post and add it to the database before it commits so let's go down here and then add this in here okay so we get though we get the data from the form if we're posting from all that data we create the new blog post and then we add it to the database and then we commit it and then we redirect back to posts okay yeah that looks right and then when we if we're only reading it I mean if we're only doing a get request here then we just want to render the new post dot HTML and we actually don't need this because there's no post being sent in it's just raw so like what this is gonna do is this is just going to render an empty forum for us to fill out and then when we fill it out and hit post and that's when this will fire off okay so that's pretty much it let's see if it's working so we are we are saying it's going to be oh crap I made all these changes on the wrong function let's do it down here oops and then redirect the posts and this needs to go back to edit all right template posts and that is annoying and a new post dot HTML okay let's make sure there is do not show again yeah that looks correct so let's go back here and refresh this and we said it's posts slash new global name post is not defined let's see what is wrong here yeah I forgot to delete this here because we're not passing in a post when we're creating a new post it's not expecting supposed to come through then let's just get rid of that okay and now it should work so let's go back and let's go to new and there we go it is rendering correctly okay so we have new post here this is by itself and now we using to make sure everything is hooked up correctly so let's type in a test title okay and test author and test content and let's just repeat this couple times cool post and it redirects back to our whole list and there we go we put in a test title the test author and all this test content and it's working just fine we can delete it too and it's disappeared awesome now last step is we just gotta get rid of this thing here because we don't need this anymore and then we also need a button to redirect to that new web page from here so we can create a new post all right so let's go into our posts here and then we can pretty much just get rid of this entire form at the top all right just like that and we don't need this HR anymore and save that so what does this look like it is gone cool so we have our list of all of our blog posts here let's change them these titles oops post is undefined ah because I deleted it from edit and here edit we got to put this back in so I think it's post equals posts equals what was it post equals post so let's get rid of that and then paste this into there let's try it again there we go so we'll just say blog post one save and we'll say it change this to blog post to save and change this to blog post three all right this looking a little bit more coherent cool so now let's add in this button next to all posts all right so what I'm thinking is remember those bootstrap buttons there's there is a green one I want to add a little button here right here that says new post plus new post in as a green button and then I just want that to redirect to our new post page so we have some way to get to that web page from here and then we could actually actually add a new post into here too if you want to into the menu but unnecessary I'm sure you guys can figure out a few guys want to do that as an exercise for yourself so let's go to here all posts and then I just want to add in a button so that's going to be I believe posts here I'll post here we go cool so we have a header here but I also want a button so let's add a button it's gonna be a and then it's going to be class equals button and then it's gonna be button success if you remember a success means it's gonna be green that's the style that bootstrap is all making us do and then we're gonna want this to go to slash posts slash new okay because we want this button to go to that URL so we can input a new blog post and then we want and then we just want a new post like that okay I'll let you see what that looks like so let's refresh this page and we can see all posts says new post right there that's cool but I actually want it over here and actually let's make this plus new post all right there we go and then I want this to be right aligned so I believe that is I think it's in the class yeah and bootstrap bootstrap for you can put float right and then it'll float all the way to the right so let's refresh this and there we go I had a new post but this looks a little bit funky so I want this and this to be on the same line in line together so let's pop both of these into a div together all right div and go boom and like that and indent both of these all right and then let's refresh this looking a bit bitter I mean I'm not looking with bitter but they're in a div they're gonna dip together and we actually need to get them in line so we can just do that really quickly by adding a quick style and then all we want to say is display inline okay and pretty much everything that has this style together within the same div is going to be inline together so let's refresh this and now it's inline so all we need to do now is just add in a couple of line breaks to make things a little bit cleaner all right let's go here refresh this and there we go I guess I don't think we need this one down here some quick spacing perfect so we have all posts here and we have a button and as you can see when we click new post it brings us to the new post input area so we can just say machine learning versus web development all right blog posts this can be by Erin Byrne F and we can say what is better to pursue web development or machine learning or data science answer both and post it and let's see if it worked machine learning versus web development written by Aaron Burr Neff at this time what is better to pursue a dormant web development or machine learning answer both so that looks like it is all functioning okay so we we pretty much put in a bunch of bootstrap into this entire thing we have a nav bar here that we chucked in we have a nice homepage remember if we go here we have this Jumbotron rectangle and some welcome text and then a way to get to our post here and from here we have all of our crud functionality with nice buttons and nice padding and nice containers using bootstrap we have the ability to separate white space to display if our texts are have multiple paragraphs in our in our blog posts within these edit fields we have the better input fields we have a giant text area for our editing post and we have this new post button so that there guys pretty much wraps up our flask app and some guys hanging outside that pretty much wraps up our flask app with bootstrap enabled I think this looks a lot nicer than what we had before but this is a nice little project to get you started if you never use flash before from here you can add on a lot of different things you can um you could really like go indepth and get this all going you could add like a sidebar over here and here you could add like a whole editor so you could have like you know how at the top of editing out of text fields I have like the bold button and the italics button and like underlined button and then like the text size and all that you could implement all that and all this stuff but that's getting more and more into frontend development and less flasks so I think this is a good place to end it all right so this is our little flash blogging app there's no login functionality maybe we'll do that some other time but I think this is a perfect amount a bitesized chunk to get you guys started defeat of use flash before so thanks for watching and I will see you guys in a different video good bye hey guys nice job you made it to the end of the flats tutorial very proud of you guys you made it this far you went from completely knowing nothing about flasks and creating your basic app all the way up to having a full blogging app with bootstrap enabled with a beautiful front end and a back end and a database and everything is great and I just want to congratulate you for completing that project so and I have this little thing in your back pocket you can pull it out whenever you need but good job for getting this far now if you're interested in taking things further ok if you like this course then I just wanna remind you that we have a one hour plus webinar called the three secrets to becoming a Python freelancer in 2019 and beyond which basically tells you how to go from not knowing anything encoding at all and whatever the steps you can take to increase your chances maximize your chances to having a sixfigure income as a Python freelancer okay it's not a guarantee you're gonna make it okay but it really really increases your chances to actually get in there making it happen if you put in the work so we're gonna be going over the three secrets yeah it teaches you how to line clients how to reach out I mentioned the technical skills you probably gonna have to learn that's actually the easiest part everybody everybody knows that but how to reach out to clients how to do all the soft skill things how to negotiate and all that stuff and the different opportunities you can pursue and we're to really direct and focus your energy and whatnot to actually start making income with Python and programming in general alright so definitely check it out we all worked really hard on it just reminding you again if you like this video then go check that out and go check out the other videos on our channel and just stick with us and good [ __ ] will happen and thank you for watching this course you