in this video we are going to be building the moon Birds clone with solidity and inferior you will be able to create and mint your own nfts and then using the inferior ipfs you will be able to actually upload them and actually mint them as a proper ERC nft so with that said let's go ahead and jump straight into it so let's get started with the moon Birds clone so we're gonna work with our usual CLI tool so just type in npx clever programmer and it should pull it up immediately so just pop in your email then your name as it prompts you and then select moonbirds now just wait for the script to run and then it will open up infuria for you so just go ahead log in or create an account if you don't have one already and create a new API key a top right select the network which will be ipfs and then just pop in whatever name you want obviously this Moon bird so go figure and then hit create now these will be your project ID and API secrets so just make sure you save them some so just make sure you save them somewhere and then don't share it with anyone and then and by this time your scripts will be done and they will open up vs code for you so moving on let's go ahead and start uploading all these files that we have in the data folder you should already have these files because the CLI tool was nice enough and gave it to you just like this readme.md file so don't freak out you already have all these stuff this stuff and that's just basically a bunch of instructions on what we're actually going to be doing so step one we're going to go ahead and create a CLI variable which will name inferior auth and we'll create it as the following so we're gonna grab the project ID from inferior and then the API key and then put them next to each other and I put a column between them so let's just do that real quick and that's that now step two what we're gonna do is copy that command on the second step and where you see file name you're just gonna put in one of the files one of the PNG files name in there and so just copy all that and so we're gonna go with the 35 74. Eng file and so now that gave us that nasty looking Json and we're gonna go ahead and copy the hash from and before we actually do anything with that hash before we do anything with that hash we should enable dedicated gateways on inferior and just put in clever programmer or your name or whatever you want to and then just save it as a sub domain that will guarantee that like you can access these files through your name.infur and pfs.io this is just a cool feature that inferior has so that's nice all right next up so copy that that hash and wait what oh all right so copy that hash and now the file that we just uploaded we're going to go ahead and pin it so that's just a method on ipfs that you have to do so let's just go ahead and do that copy the command from step three and then just put it there and then put the hash to at the end where it says dot hash and that should be good now your stuff should be pinned all right just for just so I have it saved here I'm just gonna go ahead and put it there this is going to be the jsonpins.txt file next to 3574 I'll just put this cleverprogrammer.infura link and then just put the pinned the pin the hash next to it that's by by the way the link to your image so now what we're going to do is we're going to go ahead and generate the nft metadata so what you want to do is go ahead copy that whole link and then put it to put it next to image URL in the respective Json file and if you actually check it and put it in your browser that should pull up the image you just up so if that's happening that's nice if not just scroll back a little bit and then you'll be able to follow it again and see where where the mistake is at and now what you're gonna do is repeat the same upload and pin steps but instead of instead of put instead of putting the the PNG file there you're gonna put the Json file and so once that's done you should be pretty much good to go now now that you pinned it you're going to go ahead and update the link in your file with the new link containing the Json pinned hash and so that link actually should be able to load the Json file you just upload it if that's the case then you're good to go and we can move forward now I also want to note that you have to do this for all the files I haven't recorded because this video would have been like twice as long because it takes a little bit to upload all these files so just go ahead pause this video and then you can go from there upload all the files so now we're going to go ahead and create and deploy the contract in under 10 minutes or we'll see so first of all what you want to do is go to Google and search for open zaplink contract Wizard and that's exactly what it sounds like we where they used it so we're gonna make sure you want to make sure you select erc721 and then you would rename it to Moon birds and give it whatever symbol you want it to that's not not really important what's really important is that you check mindable Auto increment IDs and URI storage now go ahead and copy this whole code that it gave you and now go back go back to your vs code and open up contracts and then create a new file in there and then just call it moonbirds.p.sol and then just paste the whole thing in there okay now we have this template contract and we're going to make some modifications to it so first of all on line 13 we're going to go ahead and create a string array which is going to be public and this is where we're going to store all the nft Uris that we are uploading downloading whatever pinning to to the ipfs okay now go down to your safe mint and this is where we're gonna make the next set of adjustments first off we're gonna remove the address 2 from the arguments because we don't want the front end to be able to specify which wallet we meant the nft two and then next up you want to change the only owner to payable because this main thing is going to cost eth and so next we're we want to make sure that the message value is greater than 0. just put an amount there basically that's not too much we just put in 0.0001 ether otherwise throw an error that is that says not enough eth and once that's done you want to make sure that the safe mint and will actually mint the nft to the message sender meaning the wallet that executes the command and before you finish this off you just want to push the nft URI you just or the token ID or the nft you just minted to the nft war eyes array that we just created like half a minute ago now next up we're gonna make a new function that will return the same exact array and that's how that looks like and now what you're going to do is go to your migrations folder and create a new file and that will help us deploy this contract just call it 0 1 underscore deploy.js and just create a new moon Birds artifacts variable and then what we're going to do is say module that exports equals deployer and then word that deploy moonbirds nft moombers and so next up just go ahead and hit build track on move bird cp.sol and go into your output menu or you can also press shift command U to open it up and let's see what will happen so it looks like everything is up to date and you just want to make sure that but before we move forward the fact that it says everything is up to date is cool and all but that doesn't mean anything so you just want to make sure that your truffle extension is connected to infuria and obviously you have it installed so you just go ahead and hit create new network and then just type in moonbirds that will create a new inferior project for you just make sure you select public and once you're there you can go ahead and hit deploy select girly and put in whatever gas price you want to and then just select one of your keys that you already have set up if not you can watch one of our previous videos that details it details it all and now the deploy failed because we don't have open Zeppelin contracts installed so that's good that's completely fine we can just go ahead fix it by actually installing it so just hit say yarn add open zaplin slash contracts and wait for it to run once it's done go ahead try again same config and this time it actually should work and you should get the contract address back and if so good job all right so let's go ahead and set up a couple of constants that we are going to be using throughout this build so we're going to be doing is going to build slash contracts and then select moonbird cp.json that that file content file contains our abs and go ahead and copy that file now go back to app under app slash utils and then just paste it there and right in there just create a new file and just name it constants.js and create two constants in there so the first one is going to be contract address and then just paste whatever contract address the output is showing to you so that's going to be the deployed contract address and next up you want to import the ABI you want to make sure it's all capital this is going to be case sensitive so just copy from the screen so import ABI from from the moonbird cpj so that you just pasted there and we wanted to extract the ABI object from that file so just call it contract API or something and that will be abi.abi and now export these two and that's basically it so let's go ahead and set up the contract instance so what we're going to be doing is we're going to go to utils and then create another file and we're going to name it moonbirdscontract.js and we're going to import the two stuff that we just exported from constants and then we're going to create a function which which have with a parameter of web3 instance and it will be moombard's contract and it will just return new web3 instance.eth.tract and then pass in the two stuff that we imported and and then export default that moonbirds con let's go ahead and set up the context so what we're going to do is create a new context folder inside of app and create a context.js file in there now we're going to import a bunch of things on top so create context use State use context and use effect all from react now go ahead and create a app context variable and just use the create context method to create that and it also obviously exported now create a app provider and pass in children and it will just return app context.provider pass in the value and then children in between now you want to go ahead and make sure you export and go into your app.udderscore app.js and import your app provider and wrap it around the component that was already in there and that should be pretty much the setup now if you go back to your contacts we want to make sure it actually works so just put in account and just type in whatever you want we're just going to say hello from App contacts run the app and then in the if you open up your inspector it should say hello from App context on the right hand side if that's the case you're if that's the case good job and let's go to the next one let's go ahead and now connect our metamask wallet from the Chrome browser so what we're going to do is inside of our context we're going to import web3 and moon Birds contracts and then we're going to create an ethereum a variable and that will assign the value in case the window is not undefined and that comes by the way from metamax so if you have it in if you don't have it installed now is the time to go ahead and install it otherwise this app is not going to work for you so basically if you have a window that is valid just save the window.etherium value into your ethereum very so next up inside your app provider just create a use state which will be web3 instance and then with just an empty a starting value and the next one you want to create another you state that will be the current wallet address now that will have an empty string as a starting value and you can remove that console along now it's not important anymore now you want to go ahead and create a connect wallet Handler and before you do anything else you want to make sure that the window and both the window and the ethereum are not on that's how you do it and there was a typo so let's just fix it it's all lowercase when you say type of now you want to create a try catch because we're working with blockchain and so when you catch an error you just want to console log it and if any of those things either way window or the ethereum or undefined you want to pop out and alert and make sure to warn the user to install otherwise again they cannot use this app now in the try part of this statement you want to say oh wait ethereum.request and request all the accounts and then create a web 3 variable a const using the web3 library and just pass in window.etherium and then save that as the web3 instance now next up you want to get all the accounts and you will do that by using the web3 library.eth.getaccounts method and then save that save the first result because it's going to send you back an array so you just want to grab the first element and then save it into your current wallet address you now you want to set the moon bird contract moonbirds tracked instance to be member Moon Birds contract that web3 and then whenever there is an account change or something going on with the your with your meta mask you just want to reset the newest new newest wallet to be the current wallet okay and you want to make sure that you export this connect wallet Handler function and the current wallet address you state from the context so now you want to go into login and index.js and you want to import use app context and from the contacts you want to import connect wallet Handler and where you see there's a button on line 12 you want to pass in there as the unclick parameter and then in your main index file you want to import use app context again and then the you can just remove the current wallet address equals false it was a dummy value that we used just so that the app doesn't break so you can just remove that and then replace it with with the cons and then just destructure current wallet address from usap Context now on line 17 you see how the current wallet address like how the logic works so if the current wallet address is an empty string which is we remember it's the starting value it was just a pass you we'll just give you the login page otherwise it will give you the app itself all right let's go ahead and test it out now let's see what we got and we should be good but for some reason it doesn't seem to be working so there is an error with the get accounts let's see what we've got oh okay so in line 24 in your context make sure when you await web 3 you actually wait with us with a lowercase web 3 not the capital it's not using the library itself all right let's rebuild let's see what we've got hit connect wallet and there you go now you got this whole and now let's just go ahead and disconnect this wallet let's see what happens if you refresh now it gives you the login page and now it gives you the option to log in with your metamask so if that works and it throws you back to the app good job and we can go ahead and move forward connect wallet all right let's go ahead and now connect our metamask wallet from the Chrome browser so what we're going to do is inside of our context we're going to import web3 and moon Birds contracts and then we're going to create an ethereum a variable and that will assign the value in case the window is not undefined and that comes by the way from metamax so if you have it in if you don't have it installed now is the time to go ahead and install it otherwise this app is not going to work for you so basically if you have a window that is valid just save the windowed ethereum value into your ethereum very so next up inside your app provider just create a use state which will be web3 instance and then with with just an empty a starting value and the next one you want to create another you state that will be the current wallet address now that will have an empty string as a starting value and you can remove that console along now it's not important anymore now you want to go ahead and create a connect wallet Handler and before you do anything else you want to make sure that the window and both the window and the ethereum are not on that's how you do it and there was a typo so let's just fix it it's all lowercase when you say type of now you want to create a try catch because we're working with blockchain and so when you catch an error you just want to console log it and if any of those things either the way window or the ethereum or undefined you want to pop out and alert and make sure to warn the user to install otherwise again they cannot use this app now in the try part of this statement you want to say oh wait ethereum.request and request all the accounts and then create a web 3 variable a const using the web3 library and just pass in window.etherium and then save that as the web3 instance now next up you want to get all the accounts and you will do that by using the web3 library.eth.getaccounts method and then save that save the first result because it's going to send you back an array so you just want to grab the first element and then save it into your current wallet address you now you want to set the moon bear contract moonbirds tracked instance to be member Moon Birds contract that web3 and then whenever there is an account change or something going on with the your with your meta mask you just want to reset the newest new newest wallet to be the current wallet okay and you want to make sure that you export this connect wallet Handler function and the current wallet address you state from the context so now you want to go into login and index.js and you want to import use app context and from the contacts you want to import connect wallet Handler and where you see there's a button on line 12 you want to pass in there as the on click parameter and then in your main index file you want to import use app context again and then the you can just remove the current wallet address equals false it was a dummy value that we used just so that the app doesn't break so you can just remove that and then replace it with with the cons and then just tstructure current wallet address from usap Context now on line 17 you see how the current wallet address like how the logic works so if the current wallet address is an empty string which is we remember it's the starting value it was just the past you will just give you the login page otherwise it will give you the app itself all right let's go ahead and test it out now let's see what we got and we should be good but for some reason it doesn't seem to be working so there is an error with the get accounts let's see what we've got oh okay so in line 24 in your context make sure when you await web 3 you actually wait with this with a lowercase web3 not the capital it's not using the library itself all right let's reveal let's see what we've got hit connect wallet and there you go now you got this hold and now let's just go ahead and disconnect this wallet let's see what happens if you refresh now it gives you the login page and and now it gives you the option to log in with your metamask so if that works and it throws you back to the app good job and we can go ahead and move forward let's mean these nfts this is what oh this is what we've been working for this entire time all right let's go to your contacts file yeah contacts file and then at the bottom right above return just create a mint 10ft function that takes that's an async function and it takes in an ipfs URI now in there we're gonna call the moon words contract instance.methods.savement and then pass in the ipfs URI and whatever it spits back we're just going to save it as mint res we're gonna send send this from the current wallet address which is the wallet that's connected to the application the value is going to be web 3 instance utils twoway basically in way 0.0101 you can literally just throw whatever in there just make sure it's more more than what you specified in the contract itself and then just make sure it's in e now gas you just want to put I think it's 3 million and then for a gas price it's null okay don't ask me what it is that's just a lot of specific parameters and you want to make sure now that you export the mint nft and expose it to the app itself now you want to go ahead and import the use up contacts in your mint model index.js and now you also what you want to destructure the mint nft from the contacts and then you want to import the use router from next router and we're going to go ahead and set all that up so we have a function called handled mint click so let's go ahead and make that work so we want to make sure that the ipfsuri exists if it doesn't we're just going to return and not worry about it so first up we're going to say wait mint.ft pass in the ipfs URI and then set the ipfs URI To None or like an empty string and then I just have the router work but okay we got to set it up first so just create the instance and so we're just going to say push and go back to the root or like the slash basically the root of the app itself okay now this just shows you that that's the button that's going to trigger this handle mean click function so let's go ahead and try this out so go into your Json pins and by this time I hope you have all the Json files uploaded to ipfs so just go ahead and grab one of the hashes and then just copy that and then go to your app hit mint your nft and then pop in your hash now hit mint and there is a mirror that says moombers contract instance is not defined in the that's interesting let's see what do we got so going back let's dig deep it's probably in the context and it looks like we haven't defined it so let's go ahead and do that because that's usually helpful so we're just going to go ahead and create a you state and in the use effect we're going to give it a value all right so here we're gonna make sure that if the moombers contract instance doesn't exist we're just going to return on don't worry about it and now we're actually storing whatever we're setting up on line 32 so now we have a use state for that so let's go ahead and try this out again so now it should be good let's see what do we got and the paste that same hash again okay now the meta mask pops up nice there's the price that we just set and hit confirm okay there's Safe main Network that's working perfectly and that's basically it alright so here we're gonna make sure that if the moombers contract instance doesn't exist we're just going to return on don't worry about it and now we're actually storing whatever we're setting up on line 32 so now we have a use date for that so let's go ahead and try this out again so now it should be good let's see what do we got and the pace that same hash again okay now the meta mask pops up nice there's the price that we just set and hit confirm okay there's Safe main Network that's working perfectly and that's basically it all right let's render our nfts and this is the last very last thing that we're gonna be doing in this build and after this you're done what we're gonna do is go into our contacts file and just create a get uri's function which will be async and no inputs or we'll have no inputs and we're gonna reset the set nft data you state that we actually haven't declared yet to an empty array so don't worry about that if you don't have it just just yet and what we're going to do is say cause your eyes and that will just wait a wait for the moon Birds contract instance dot methods dot get URI or get nft or eyes response and then whatever it returns we're going to map through them and we're gonna fetch each Json file itself and that's what we're going to be saving into the nft data what is it you state so once we're done mapping it through and saving it all now we're gonna go ahead and run that function actually and now that use effect makes sense because now the moon Birds contract instead of it doesn't obviously it shouldn't be running that function but now it all came into place and now we also want to make sure that we run that function after we mint and nft so the app feels like real time or near real time at least and once that's done what we also want to make sure is that we we set up the oh we're going to console log the NFD we want to make sure that we finally set up the use day that we've been using this entire time and now we can go ahead and console log it so let's see what do we got in there and if everything's good we should have one item in there however we don't see anything in there but that's interesting let's see what's happening so we're gonna go ahead and just mint another nft let's see if that fixes it okay minting seems to be working nothing is showing up there and there's in there so that's interesting it still shows up and as empty so let's just go back and uh let's do something with a console log yeah let's console log the data out when we map it through okay now there it is now it shows up probably you just need to refresh it I've never did this here but that's fine but as you can see there is the nft data now all we need to do is just remove all these useless console logging that we're not going to be using anymore and going to nft this going to the NFC display index.js file and import contacts and from the context just obviously you want to export the NFC data you state and then restructure it in the nft display file and then replace all the static stuff so as you can see there's an nfts array we're going to replace that with nft data and map through that instead and you see how there is all this static file we're not we don't want to show that anymore as you can see there is that nice little animation and all the images are gone so what we're going to do is we're going to instead set the image source to be nft dot image and now it's gonna complain that the host name is not Define or not configured that's just a security feature in index.js so let's go ahead and fix that real quick and in next config.js just replace the domains with your own custom custom domain so just save that after that you will have to completely restart your app so let's do that real quick and then if you refresh there's your brand new app with everything being rendered and that was the moon birds build guys thank you so much for watching hope you you guys enjoyed it smash the like button and I'll see you in the next one peace