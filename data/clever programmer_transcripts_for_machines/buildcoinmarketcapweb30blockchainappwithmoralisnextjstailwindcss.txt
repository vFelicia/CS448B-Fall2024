in this video you'll build coin market cap web 3.0 dap with nexus we'll be using solidity to write the smart contracts and morales speedy nodes to deploy it we'll use open zeppelin to ensure that our coins are compliant with the erc20 standard we'll use morales to authenticate every single user that actually signs into our app we'll use morales database to also create user profiles on signups we'll also use morales to interact with the smart contract and remember morales makes it incredibly easy to do all this stuff out of the box because otherwise you have to normally do so many things manually and this just saves you hours or maybe even days of development time we'll use context api to manage our react state when we're coding in nexjs you'll learn how to use cloud functions with netlify such as their edge function and you're going to be deploying your coin market cap web 3.0 blockchain app on the internet and we'll also be doing that using netlife because with netlify you get the smoothest most buttery experience so if you're excited smash the like button i'm excited and let's demo the app and after that we'll get in to start building it let's get right into it all right so let's take a look around this is the finished coin market cap this is live as you can see here let me just walk you through a bunch of the features so the main thing is there's a connect wallet connect any of the wallets that you have here let's click meta mask and boom already metamask is letting us know that we want to authenticate with morales boom and we're already logged in i'll show you guys how to use that how to create that login button and all the code that you need for it which isn't a lot so awesome so as you can see we're logged in this is pulling from the coin market cap api if i click bitcoin we have dynamic pages look how this nice graph just generated there's this btc to usd converter and on top of that you can see here but there's also a nice working chat app you can say what's up let's put post and there you go what's up is right there arthur douglas looks good and then if we go back to the main page our api loads in if i click on any of the prices all right we did bitcoin last time let's click ethereum notice how it's the price is for ethereum all these tags are here it looks pretty clean and next the piece of resistance and the awesome part the thing that i like the most is there's actually a way to swap crypto so let me just demo on how this works so let's say you have all of these coins or tokens that you want to trade with let's say i have my eth in order to get these tokens we need to pay with ease so let's say i want some dye let's select it how much do you want guys let me hear you you said 23. awesome i was thinking that too let's go ahead and hit swap beautiful so again here's another metamask notification asking us to sign and notice how it says mint all right because we're taking our eighth and we're minting some new diet tokens so i'm showcasing how to simulate a dex with this the next one is going to be a signature for the contract interaction go ahead and hit confirm with that too nice and then we could do is take a look at metamask awesome so it says transaction confirmed i'm getting all these beautiful sounds and if you look 23 died there we go so we exchanged some of our ethereum i used to have 0.2 now i have 0.18999 4 23 died so now you might ask okay we have die what if i want to change my die for doge right how much diet you want to change for i want to send eight of my die and turn that into dogecoin so let's see if that's possible let's hit swap okay there's the transfer we're transferring a die to the doge contract hit confirm another meta mask notification and when we send our eight die to the doge contract the doge will send us back freshly minted dogecoin all right hit confirm all we must do now is wait let's see it says sending die and also the mint is queued up ready to go usually takes a couple minutes but it doesn't need to take that long there we go as i was speaking it's done there's the sendai there's the mint let's see if it worked eight doge and we got eight let's die look at that we have a fully functional exchange on our hands and if you want more tokens let's say damn outlands i wish you want to have more tokens that we can change with just create more contracts to simulate those tokens with that said that's gonna be the demo i hope you guys are excited to build this and add this to your portfolio let's break and go what is up guys and welcome back to another video it's lance again and just like qazi said we're making coin market cap today so i'm not gonna waste any of your time head over to your terminal here and let's create our project so if you didn't know we're gonna be using next.js again and of course tailwind so we can actually do that with one simple line and i'm gonna show you right now so i'm gonna say npx create dash next dash app at latest and then just insert this e flag by saying dash e and if you want tailwind with your project already installed we can do a with tailwind css and then put space and then we can decide what do you want to name your folder i'm going to name mine coin market cap dash clone dash blockchain i want to get all of these starter files into that folder name cool i'm going to hit enter and i'll have to do is just wait for this install and as you can see it's also installing tailwind so you don't have to install it manually and once that's done you guys can head over and type in code dot which will open up your vs code after you see the into that file or you can open it up manually and i'll show you guys how to do that so you're going to go to your ps code hit open folder and then if you go to your project folder which is for me here coin market cap blockchain i'm going ahead and select it and as you can see tailwind is already installed and if i press something like command j and we do a yarn div you can see that we're going to start off the server and if i go open up my page so let's do local host 3000 and there it is our next dress up is up and ready to go let me show you guys what else we need to install all right so now that we have our next js app set up if you didn't know we're going to be using netlify to deploy our project so one of the first steps is head over into a new tab and go ahead and type this link inside the url it's going to be ntl.fyi clever this is how we're going to be able to sign up for netlify go ahead and sign up using this link and i'm already signed up so i'll hit login once you're here you're going to see all the sites that we have when we deploy them and the next thing we need to do is install the cli tool and if you guys didn't know with that cli tool we can actually run a local development server through our command line so instead of running yarndev we can actually write something like netlifedev the main bonus of this is that we can run continuous deployment from the command line so how cool is that so one way to get started is go ahead and temporarily clear your terminal and what we need to do is to install it is to type in this command npm install netlify.coli the only prerequisite you need is just make sure you have node installed which you should have already i'm going to hit enter and this is how you install the cli tool globally so that no matter what project you have you can run any netlife command inside your terminal awesome so like i mentioned earlier we can actually run a server through netlify's cli tool by writing ntldev which is just for netlify okay and look at that automatically opens up and it runs on localhost 888. cool so now let's do the fun part and let's deploy our project right away by clearing this again and let's just clear this to make it squeaky clean and then we can say ntl init what this does is if you already have a github repo with your project we can connect this to that so whenever you do get push it's gonna rebuild the site and make it live so i already took the liberty of making the repo and before we continue with this let me show you guys what i did paste in in the link of your project so if you haven't uploaded our current project into github this would be a good time to do that so take a moment do that pause the video and i'll be waiting for you awesome so if you have a project up on github already let's connect this directory to an existing netlife site or create and configure a new one so my goal with you guys is to show you how to do it all from the command line because that's the power of this tool so i'm going to hit the down arrow and create and configure a new site okay i don't have any team so i'm just going to hit enter and here we can actually name the site or the url that people can type in so i'm going to call a coin market cap dash clone dash blockchain i'm gonna keep everything the same name so i know exactly what i'm talking about to enter and there you go it's created a site for us and then just have to type in the build command which is yarn build okay hit go ahead and hit enter for the next question and you can go ahead and hit enter for that next question too cool and again if you're making a site with an xjs there's this essential plugin that they ask you to install go ahead and say yes and go ahead and say yes for this one as well cool awesome and you're gonna see these two next steps which is just push to your git repo to trigger new site builds like i mentioned earlier or you can type in netlify open to just open the admin url of your site what we could do instead is remember how we logged in over here if i hit refresh look at that we already have the site made on netlify and i did that all through the command line if you click on it it says site has not yet been deployed let's go ahead and scroll down and you can see that it's currently still building all right so we can actually follow the deploy logs so in any case we get push and it says there's an error here we can help identify what the problem is okay so just checking down below let's wait for this to finish and let's see if our site is already live awesome so i got the very nice message that our site is live and one cool thing about the cli tool or just netlify in general is that we can click this preview button here to preview our site awesome and again of course looks like this we just started but it's live and i could show you guys by coming back to netlify go ahead and click on the main project and now instead of saying in progress or site not deployed this is our live link coin market cap clone blockchain.netblife.app so if you click on it let's go our site is live and you might ask lance the project's not done why would you make it live already like i said anytime we do make a change and do a get push in our with our changes netlify is going to read the repo again and try to redeploy it so that our project is always live and accurate to wherever we're at in our project folder sounds good so that's how we set up netlify let's move on to the next part okay one thing i wanted to talk about is that for this app we're also going to be using morales so if you're not sure what morales is let's go ahead and start by thinking about what we're gonna need for this app so with this app i'm thinking i'm ready we're gonna need to log in a user we're gonna need to fetch a user's balances we're gonna need to fetch transactions fetch our smart contract events how would we do that from scratch it would be something like creating an rpc node and creating all the infrastructure around it which might take some time you might not be sure on how to do that and what process goes into it but what if that was made a lot easier that's exactly why we're using morales today because it does a lot of the heavy lifting if you guys are familiar with firebase is which is backend as a service morales is the firebase of crypto it gives all of that as a service and we can just connect to their server so how do we do that and get started well go ahead to your browser and type in t.morales.io clever that's all you need to do to sign up for me if i put that in that link it already logs me in because i'm already logged in what you should see is a beautiful sign in page go ahead and sign up morales to get started cool so once you sign up let's create a server so that we can connect our application and talk directly to the blockchain of our choice so create a new server i'm gonna do the test net for now and we can name our project so for me i'm gonna call it coin market cap clone blockchain okay and for the region i click new york which is the closest for me make sure you click the one closest to you and like i said you can click on anything you need for this point and i'm gonna just use polygon for now cool thing is morales is crosstrained and it's compatible with all of these and if any time you need to change it we can just select it right here so i'm gonna click add instance and there you go it's all set up if you click this drop down here you can check and click on this dashboard and you can see this is the database that they provide for us which you can utilize so anytime a user logs in it's going to get logged in here and we can actually fetch users and do what we need as well as fetch transactions that come across it so this is the setup from morales there's gonna be more later in our code but that's just the start all right so that's enough setup let's go ahead and start coding so what you want to do to set up your environment you could say ntldf to start running your server awesome and you're gonna see this beautiful page here this is our starter app and if you ever want to make any changes just go to your pages go to index and if you say welcome to coin market cap if i hit save you can see welcome to coin market cap it instantly updates with whatever changes we make that said we can go ahead and erase a lot of this because we're gonna make and set up a bunch of our components now so i'm gonna erase this let's do ctrl b so you can make the code a lot clearer and i'm also going to do an alt c here cool so for now we can just erase the class name and make a div because i'm going to add in a new one later so i've hit save and now it's all blank good so i'm going to use this index to plan out the components i'm going to need and talk about what we want to do next so again what we can do is set up a component the first component that i want to set up is going to be the header component okay it'll look a little something like this if i make this a little bigger and go here i have the finished version you guys take a look right here this is the header component and this is what we're going to be making first followed by something called the trending component like this and then there's going to be a table with a graph that's going to be calling an api which is not showing up yet because it's not set up cool okay so then if i make this smaller we can go ahead and x this out and now you guys have an idea of what the header is going to look like let's set up that next component oops and call it the trending component that was the second thing i showed you guys that i circled and then there's also something that i'll call the cmc or the coin market cap table cool so these are the three main components i might be adding more but for now the main one i want to focus on is the header so before we get to the header let's just set up some css which you can just say min h screen and then for the trending one let's make another div and say class name mt10 oops and then for this one we'll have another one not like that and we'll do a class mt20 cool so those are the divs for this let's go ahead and make the header component so we can erase these two imports because we're not really using it and since these components don't exist yet let's go ahead and make them so what we want to do first is make a new components folder at the root components and then inside the components folder i'm going to start with our header.js cool and then if you guys don't know there's an extension if you do rafce hey click it and there we go it's all set up cool so now that our header component is set up let's head back to our index and now we can import said header so what we can do uncomment this guy out and type in import header and you should see it header from quote dot dot forward slash or sorry dot forward slash components slash header js hit save and there it is if you see it's really tiny but it says header that means our component is all set up and good to go now hopping into the header.js let's go ahead and set this guy up so i'm going to do is set up an import here let's import the next image from next image and let's just set up these divs right here so i'm going to hit backspace enter to format it and then it's going to disappear because there's nothing there and i'm going to give this div a class name styles dot header all right and if you're unfamiliar with what i'm doing we're using tailwind css and what we could do at the top here is set up a styles object which will have all the css within our divs and it's just calling that style's object and passing in that name sounds good so let's continue the next thing i want to do is set up an image okay it's selfclosing and the source is going to be this quote and paste this right here it's going to be this coinmarketcap.com static okay now hopping into header.js you can see that if i take this header out and hit save it's all gone so let's go ahead and start styling it you want to do is put some space in here let's just give this a class name i'm thinking we can call it styles oops not stylesheet.header okay from there what we could do is import image from next image so that we can apply any sort of image we want so let's do that right now by saying image self closing and for the source of this image let's see src equals quotes and place this right here it's going to be this long link s2 dot coinmarketcap.com static slash cloud slash img slash coin market cool then we can hit alt and then let's say logo let's also give it a width of 220 and we can also give it a and that can equal 220 as well one thing i want to talk about is notice how it says styles that header that's because we're going to be using tailwind now if i press save right now you're going to see an error called styles is not defined right because if you want to put styling behind this div we have to do is come up top here and say con styles equals an empty object and then we can write header like so so this is how we can give our div styling we have a styles object and every key will be the div that we have so this is header so let's give it some styling background color of just brackets and give it a color of 1717 one a you can also give it a text white h20 give it a flex property and then a gap of 100 pixels we can say with full here and then p dash bracket 30 pixels so that should be good if i hit save we'll have to put a comma here let's go ahead and hit save awesome now it's invalid source prop oh i see because you have to configure it under images cool so what this tells me is i need to go over here and go to our next config and you see this module that exports let me update it to something like this and let's close it off cool what we want is an images key now with the domains that we're going to use so like you saw it was s2 we're also going to use s3 okay hop over to next.config and what we want to change this to or update it rather is something like this where it says images as the key and then it's going to have the domains that we're going to use so remember the one that i just did was s2 there's also going to be an s3 in there so make sure it has all of this i'm gonna go ahead and hit save and if you look down in our terminal found the change in the config restart the server that's fine i'm gonna hit ctrl c to end that terminal and then let's type in mtl dev once more okay if you look there it is there is our image and now we're getting closer and closer to the header so anytime we make a div we're going to add styling for it so what i'm going to do now is let's create all the divs first and let's go back ahead and do all the styling after okay so continuing on with the header within the header div go right below it and let's make another one i'm going to call this one oops let's give this one a name of wrapper or header wrapper would be better still curly bracket styles dot better wrapper okay then within this div we're going to also have another one which will simply just be styles dot nav and then within this nav it's gonna have a bunch of different items for example like crypto currencies exchanges all the tabs that we see on the regular coin market cap so let's go ahead and start doing that i'm gonna do now another div with class name of nav item actually styles.net right nice and again we're going to be reusing that nav item over and over again because we have a couple different things that need the same styling so within that knive item let's have another one called class name and this will be styles.nav link and let's put the curly brackets in there there we go and like i said this one will be crypto currencies cool last thing we're going to need in here is another one and hands to class name of styles dot badge and actually we can make this one self close cool and if you didn't know the batch here is going to be this nice blue circle around that cryptocurrencies which only some of them will have so with that in mind i'm actually just going to copy this and let's just do this a couple of times oops let's get the whole nap item let's do it once three for now like i said not all of them will have a badge like this next one is gonna be exchanges and this one doesn't have a patch following that is gonna be instead of cryptocurrencies on this one it's gonna be nft which actually will have the badge so we'll keep that there okay next we have something called crypt crib town which does have a badge and then the rest of them i believe aren't gonna have one so i can copy exchanges come down below here and paste for after krypton and then there's gonna be one here and let me see let me think oh yeah there is one more that has a badge so i'll copy this and that should be portfolio and is that it ah okay there's one more it's gonna be learn okay cool and let me just double check that by going on to the other page which i have on localhost 2001. let's see we got exchanges nft krypton portfolio watchlist and products and if you look at guys over here see that little circle right here that's what the badge is and again only one two three four of them have that okay so i'm going to do is make this smaller again cool so let's fill this in we have krypton the next one i said was portfolio then we have watch list then we have products oops products and then we have learn which again doesn't have a badge cool let me see oh and i'm just realizing it doesn't really matter that much but i wanted to label this as nav and that means this should be nav as well cool and just for fun so i can actually see my header up here let's add the rest of that styling which should just be the header wrapper and for the header wrapper the styling for that is going to be this flex property justify something and then page full max believe dash max dash screen dash excel mxauto and a px4 so that's header wrapper put a comma there next we have the nav okay and then in that nav it has flex justify center and then it has an item center and then i believe it's just a gap with let's say 20 pixels awesome let's see what's next we have nav item next okay for nav item all we have to do is have a relative let's also give it a cursor pointer so that if we hover over it we'll see the pointer and then on hover you can add this nice opacity of 60. that looks nice cool okay last but not least let's go ahead and get this badge going and then we can do a rounded dash full background blue dash 600 and we can do it h 1 w 1 this one will have absolute in there bottom dash 5 dash 0 top dash 1 and let's add a nice ring of dash four and let's go ahead and do that and is there any other things we need for now nope looks like we're good let's hit save let's see what we got hey look at that all right so if i go back over here you grab this one there we go so it started coming together it's starting to look like the header of coin market cap but there's a couple of more divs i want to make for the header so let's put that back and let's finish the rest of this alright so let's continue working on the next part after this closing nav tag go ahead and hit enter because there's a couple things we need to do here so one of them is to make a div containing the connect button that we're gonna use from web3 ui kit which is gonna let users be able to log into our application so for now let's just set up the front end for it which is gonna be something like quotes here and just do flex item center there's no need to give this one a name because the css is pretty minimal so then again opening that up here we'll have the connect button which i'll be setting up soon set it up like that so i know where it's going to go and then right underneath that we'll have something like an input container right that's going to have a class name oops class name of styles dot input contain okay and then within that div will have a component that holds an svg and i'll set it up so it's going to be called search which i'll also set up and that search component is essentially going to have this little magnifying glass with 4r search bar cool and then within that you want an input here and then that input will give it a class name of styles dot input then we can do a placeholder of let's say search yeah cool and that should be it for the front end let's go ahead and finish the rest of the styling so let's scroll up to the top and underneath badge we can start writing out input container and if you could see it in the auto suggestions that means you actually typed it correctly so for input container i'll just have a flex property and let's give it an item center and justify center so we can center it and then let's google p two a rounded and do a b g of brackets here and the color that i want for the background is one seven one nine two four okay that's the input container and then for input let's do something like this where it's going to be colon quotes let's make the background transparent and we can do an outline none text white w 70 and ml3 and let's do it as save and we can make this a little bit bigger so we can see it there we go so now we have a nice search bar in there and again we don't see the connect button or the little search icon because we haven't set that up yet so i'm going to make this smaller again and let's go ahead and do that now to get that search button working what you need to do is grab the assets folder and it should be available to you on our repo so i already have access to that what i'll do is come over to our files and i'll hit paste and i should have the assets folder and again you can get this from our github repo that has all the things here and i just want to mention that the assets help all the pngs so for all the coins that we're going to use later for a coin microcap like solana ethereum binance avalanche right all those assets are going to be here as well as our svgs so if you open up this folder you're going to notice that there's some js files so what we're going to need is search.js and it's essentially a component that holds the svg so that we can reuse it anywhere that's one of the main benefits of components it's essentially just reusable ui or functionality that we can use throughout our project so we made it available for you here let us know if you need to get the assets so remember all right it's in the assets under svg so that's how we're actually going to import it so coming up to the top let's import search so to do that we're going to do import it should be search from and then put the path of the file so if you remember it's going to be dot forward slash assets forward slash svg slash and if you scroll down search is where it contains the svg so if i say save we have the search come down below here and now hit save and if i make this by this little bigger there it is we can see it now if you take a look there's a little icon if i circle it beautiful and now the only thing we need to do to make this look a little nicer is if you look there's supposed to be a connect button in between learn and search right here so in that in the next section i'm gonna show you guys how to do just that cool so like i said we're going to be setting up that connect button now before we do that this is the current state of our app as you can see the header is coming along nicely but remember earlier when we deployed our site to netlify and we just saw the next js app what we could do now is something really cool so let's say i kill a server for now and let's just do a good stat so if you look there's a couple changes we made to the assets folder and the components folder what we can do now is do a git add dot to add everything commit right header add header frontend hit enter then we can do a get push all right and check this out i push that go over to the website let's open up netlify again app.net look fine you can go to site overview and if you look i click on the link this is what it looked like before this is the actual live link of our website but if i scroll down look at this production deploys building the second i push to github netlife is recognizing there's a change in the repo and it's rebuilding an app so remember keep an eye on this this is the live link currently let's see what happens when it's building awesome so look at that the site is live and again like i mentioned before you can actually preview this but this site through netlify or what we could do since it's already live is this is a live link i hit refresh hey look this is my latest repo already live so this was really helpful for me and my team when we were developing projects and whenever i made any updates they could take a look at it live on their end instead of downloading the whole repo and pulling it they could just see it right here so i just wanted to showcase that and the next thing let's do is let's set up our morales server with our app so that we can put in that connect button that i've been talking about all right so let's head over to morales.io again make sure you log in which i'm pretty sure i'm logged in already okay there we go and we have our coin and go ahead and go to your morales server and go ahead and do view details and i'm going to show you a really neat trick that you could do with nullify so we have our server url and the application id both of which in order to start using morales and again to start using morales so if i press comma here and i hit paste i actually have right the all the packages that we're gonna need let me just remove next because that's extra but this is it we may not use all of them but we're to use a majority of them for example these come with and what we need to add is the wallet connect the at web3 auth the chart.js for the graphs for gun.js for this cool chat app that we might install magic sdk morales ii react morales which we'll need to set up morales react switch and web3ui kit which is the main focus for this specific section that's the connect button that we're going to use okay so those are the dependencies if i go ahead and hit save let's go ahead and do a command called yarn and what this does is it's going to download all the packages that the dependencies read over here which is everything so give this a couple seconds and we should be good to go all right so it looks like it's done and one thing i want to showcase is in order to start using morales we're going to have to go to our pages and then underscore app and start importing the provider and passing in the server url and the application id usually i like to put those in our env files so what we can do is actually use our netlife cli tool and set it up that way so we need to write is ntl for nullify space e and b and then we can do a colon here and set all right let me just format this so you guys can see it a lot better how's that let's do this set and then you can type in the variable name so what is your environment variable let's do next public underscore server and then you're going to hit space and then the value of that can go right here so if i copy the server url excel come into here right click there we go so this is my variable name next public server this is the value so i'm go ahead and hit enter okay so it's set the environment variable for us we're going to type that again but instead of next public server i'm going to erase all this let's do next public app underscore id space and then let's copy in the app id okay and you can erase this little tilde enter boom cool and then if we do ntl dev to run it locally he's going to load up a new one we can accept the old one awesome and you can see that injected the build setting of the environment variables so now let's go ahead and set up the provider cool to get started with the provider let's go up to the top here and say import and then we can say something like this and then we could do morales provider from react dash morales cool and what we need to do next is come to the return here let's put it in parentheses and let's wrap our main app which is under component with that provider so what we could do is indent it a little bit enter here indent it once more and i'm going to go here type in our route list close it off and then put our app in between that's it right by doing this we're making sure that our app is able to use morales and one thing that we need to do is pass in our server url and our app url as well okay cool and if you see little squigglies that's because we need to pass in an app id in the server url just like i mentioned and one thing that is cool if i do console.log process dot env dot next public underscore server and i hit save if i do inspect element look at that in the console log our server url is there and guess what i didn't have to make any env files which i think is pretty cool it's all connected with our build on netlify and whenever we run our build we can actually pull those environment variables easily so we can just copy this take out the console log and i'll just pass in that url so to do that we're just going to go in here and say server url equals just pass in not the console.log the process dot env dot next public server cool then from there we can do app id is also equal to process dot env dot next public app underscore id and we should be good okay now once that's done let's head over back to our header.js boom and what we can do now is import connect button from web3 ui kit and again if you're not familiar web3 ui kit is essentially a package that morales uses that gives this front end with the functionality of the login so i don't have to write any additional code what do i mean let me just show you so if you come down below and comment this out and let's also save let's make this guy bigger there's going to be a connect wallet button already here and if i click on it look at that literally a model comes up with all the different wallets that you can connect to i personally have meta mask at the moment so if i click meta mask wow there's already metamask notification that pops up when i did it and guess what i didn't write any code of it morales is doing a lot of the heavy lift thing which is pretty much why we're using it to build our applications much faster so here it is here's the signature request with morales authentication saying like i'm signing off saying morales can query any transactions i have and any information for the database which is awesome so i'll hit sign and there we go our app should be connected and that's the connect wallet button okay let's make this bigger let's hit save that's our connect wallet button and what i want to do next is if i click it this beautiful modal appears and i guess what i don't have to write any code for it if i click meta mask you should see it's going to ask us to sign in and besides metamask there's also a bunch of other wallets that this button supports and again i'm using metamask so if i click on it i'll see the connect with metamask option i'm going to do account one i hit connect connecting and here's the signature request with morales authentication and i'll have to do is assign it to confirm that morales can query my account in any transactions and add it to their database so if i hit sign bam look at that it automatically updated this connect button with exactly how much ease i have and my also my wallet address and if we go back to let's go to our dashboard we can look at the morales database and if you look under users you'll see two and you'll see the one that just registered it's going to be my wallet address right ox 1c there you go and that's exactly how much ether i have look at that morales does a lot of the heavy lifting and now we already have a login and logout button cool so that's the connect button if you want to log out there's this little section right here click it and there you go and i can feel free to connect to any other wallet that you have awesome so that's literally the header let's work on the next part okay so for this section let's head over back to our index and if you go to our index the next component that we have to make is the trending component and you might be asking lance what's the trending component don't worry i got you so the trending component i have it running on localhost 301 2001 and if you just take a look at this whole section right here look if this is the this whole section that i'm circling would be the trending component you guys see that cool so if you break this down if whenever you especially if you're starting out with react you want to be able to break things down into components so if i'm looking at this trending component i'm going to notice that this is probably a component as well this is going to be called my trending card and notice how i have more than one so if i made this one copy paste there you go we have three trending cards and i'll probably have another component for trending row okay but we won't get that far let's do it piece by piece so with that let's do the trending part first got it cool so we can go ahead and switch to this exit out go back to our code and we're back at index let's go ahead and make that component so i'm going to go into here new file let's write trending dot js cool and you guys know the drill by now if i do an rafc tab and there we go our component is set up i can hit save go back to our index and let's import said component and also bring it out now so we can do an import trending from that forward slash components trending beautiful now we have trending i hit save and if we look back in our app we can see that's the spot that it takes up which lines up with what we want so let's go over here go to our trending and let's get started cool so to get started i want to go up to the top here and let's import one of our react hooks and that hook that we're going to use for this specific component is use state okay keep that in mind and in the next line let's import something that i'll call import fire from quotes and then we can say dot forward slash assets slash fire.png so remember we set up that assets folder that we get from the repo i'm just getting the picture of the fire from there cool so there's a couple of different assets that i like to import i'm just gonna load them in really quickly okay hit enter there you go so just for you guys to catch up what i'm getting is btc from our assets i'm getting the usd tether from our assets import gainers from our assets and import recent from our assets okay another thing that we're importing that i'll do with you guys is import react switch from react switch you guys remember there's this little highlight button which i'll show you guys when we get to it that's pretty much what this react switch is for okay cool so coming down below here in between these two lines let's set up our use state we're gonna have something called checked and something set checked so that's gonna be equal to our use date and we're gonna pass in false this is going to be used later on for our react switch which again i'll get to in a bit don't worry don't worry i'll get to it thank you guys for patiently watching these tutorials it's been a lot of fun lately so i'm going to do is open up this div you can take out the word trending and we can go ahead and hit save and you're going to see trending is gone cool going back to the code though one of the first things you want to do is for the top div let's just give it a class name and for most of these we're not going to even give it an actual class name we can actually just give it some css already i want this to have the text white okay from there we'll have another dip this one will have a class name so let's set it up and this one will be styles dot oops styles dot trending rapper here we go and then it's gonna have a child for this one we can put flex justify dash between and then within that let's add an h1 of classname styles.h1 cool and for the text we just have to add today's crypto currency prices by market cap right that's what we saw earlier that should be good to go awesome and i'm just going to put a little bit of space here and let's just add another div this one will just have a flex property and within that we'll have a p tag class name text dash gray 400 that's the type of gray that i want to use and this will be the highlights and then you want to do a nbsp here cool here we'll have that nice react switch that i was talking about so to set it up it's selfclosing and we want to have this property called checked and we passed in our check state okay which is by default false and then on change it's going to be listening for a change on change arrow function put these brackets here and then we can do set checked to be the opposite of it to always make it the opposite let's say it's false this not symbol would make it true but let's say it's true now the not symbol would make that false so it's like always to the opposite that's the purpose of why we're doing that there so let me just take a look at it we have the diluting div here we have some styles let's make some styles so that when i save we can take a look at what we have so coming to the top about like right here let's do a cons styles equals object and we just so far we just have trending wrapper and for trending wrapper it's just going to be mx auto max with screen dash 2 xl h1 then we do a text dash 3 xl and a text white for the h1 i believe that should be it for now if i hit save shouldn't run into any errors but look at that we have the highlights okay and there we have the highlights and we still see this thing because i forgot to go over here and put a semicolon now it's gone but if you take a look can you guys see the highlights if i click on it hey look that's how you do that little effect where you have this nice toggle so it's purely aesthetic i just think it looks pretty cool if i have it but now we could do this and it's making use of our use date so there you go that's that cute highlights button what do you think i got awesome so let's go back to our page all right we cannot make this guy a little bit smaller since you guys get the idea or we could just click this and let's continue creating our divs okay what i want to do next is after these two closing divs we can have a line break here and then what we could do is make another div this one was just going to have a flex property and what i want to happen here is just a p tag let me fix that up just a p tag in that p tag you can actually give it some styling already with text dash gray dash 400 oops there we go and what it's going to say is something along the lines of the global crypto market cap is 1.74 t which is trillion which actually is insane we're at a market cap of a trillion dollars all right so if we go a nbsp cool cool so we don't see it awesome from there let's add a span tag and from here i don't actually want to talk about it what i want to happen here within this span is i want to have a component called rate and if you guys are unsure what i mean by what a rate is if you guys look over here let's open up localhost 3001. if you guys look and see this little arrow plus the 53 that is a component that i'm going to call rate and we're just going to pass in the number as well as if it's green or red so if you think about where mouse am i using this component it's actually going to be used here we just got to pass it different props so yeah you got the idea that's all the times we're using right so what we could do now is just set it up for later okay so maxing this out again moving this back down and let's go ahead and set it up so to get started setting it up let's do a ctrl b here and what i want to do is in my components folder i like to keep them organized and later on we're going to be making a cmc table or a coin market cap table and that's going to have a bunch of components so i'm thinking ahead and what i want to do is do a cmc table folder and all of those components will be located in here as well as if i make a new file within that my rate dot js okay cool and then in my rate.js we can do control b so you can see it let's just set it up and what we're going to need to is like i said we're going to pass down props and the props we're going to pass down is something called is increment comma rate all right those are two things we're going to pass down and in terms of the div what i'm going to do is give it a class name let's say styles oops dot rate okay hit enter to line it up cool and we're not done there's a couple things we want to import here so if i import chevron and i think that's polarized ron there you go down and we get this from our assets folder actually so if we go got that again now i see it assets forward slash h3g and it's actually the chevron down cool we get down we also should get up just in case the increment value is uh the opposite which should be just up and instead of chevron down chevron up cool so we have here let's have some curly brackets and is increment right if this value is true this is called conditional rendering or a ternary operator to be more exact if this increment is true we want chevron up and we can do fill equals we don't need the curly brackets here we can actually just do quotes hashtag one seven c eight four okay one seven c seven eight four and if increment is false what we want to load is you guessed it chevron down help cool don't forget to close it there you go chevron down take out this quote close and chevron down is going to have a fill of hashtag four three e3943 that should be the red color and then we can close out that curly bracket like so again ternary operator determining depending on his increment we're gonna load a different svg cool add a p class here class name all right and if the class name is increment you can see we're already stepping up setting up ternary styles green and otherwise we'll do a styles red and then what we're going to do here is make use of that last prop which is what is the number that goes here and depending on the number should also be the same color awesome don't forget we need to set up our styles and for styles it's just rate will be rate flex items dash center red will just be ml2 text and then give it that red color that we had earlier which was hashtag e a nine or three nine four three a three now yep green and for green it's ml dash two again and the text dash bracket hashtag give it that green colors one seven c seven eight four beautiful that's it hit save and now we have the right component so i'm going to do now is hop back over here import rate from cmc oops actually dot dot forward slash components slash cmc table slash straight okay cool let me just double check something cmc table is in components so actually we should do something like this forward slash cmc table then rate there you go that folder path is more simple so less words looks good which means we can come back down below and what i want to do is let's just format this a little bit better bring the rate in bring the span in and for the rate hitting remember it takes props so the ink is increment one is going to be true and the rate that i want for this one or that in other words the number is going to be 0.53 yes it's actually static which is fine and then from there in the next line let's have a p tag and we can have this p tag have the and and b and let's do decrease over the last day which will have a span and in that span it'll have a class name so i have an underline for it and we'll just have a read more so expand the p tag that looks good okay and the very next thing come down below here let's put another break and we need this last div which is going to contain our trending card components which again i didn't make just yet so let's set it up class name i'll give this one a styles dot black center and then let's insert the trending cards which is going to be quotes like this because they're not set up yet i want to have a trending card component and what we want to do is pass in a couple props so for the title i'll have something called trending and i have an icon and it's going to equal that fire one that i set up right and we can actually just clean this up a bit we're doing alt z here oops let's see then we're gonna pass in something called trending data which is gonna be like static data that i'm going to set up later and passing in as trending data cool so that's one of them since they're going to be pretty similar i'm actually just going to copy paste so there's going to be two more cards let's paste them in trending let's see that didn't look right and paste so the thing we got to fix is instead of trending this should actually set biggest gainers and the icon will be gainers that makes sense and trending data is still trending data this one is going to be recently added okay and the icon will be recent and again trending data still trending data cool so our div for flex center is good let's add the rest of the styles object which i believe isn't just much it's just going to be comma flex center and then we can just add like a text message flex and items dash center so if i hit save see if any errors come up and look at that there is our rate and if i pull up this comparison let me make this bigger i pull up its comparison localhost 3001. cool we can see that it's pretty much getting there there should be the rest of the words oh yeah because that's white and i know what to do to fix that one second and if you want to fix this so that it's not this white color we just have to put the styling on there so let's go to control b and i believe it's in global css and what we want to do is come to body let's just do a background color of linear dash gradient and then we can say to bottom put in this value which is hashtag two one two four three zero comma hashtag one seven one seven one a that's our background color and while we're here let's give it a height of 100 ph and a width of 100 vw i'll go ahead and hit save okay hitting save again and looks like there's gonna change and let me just double check there's actually background not background color boom there we go that looks more like it if i look at the previous one we're actually really getting there guys i'm just taking a look at the finished product and the one that we're doing right now i'm noticing that like the nav links are like a little smushed up so what i'm gonna do is like open vs code let's head over to header and let me just see nav link oh that makes a lot of sense i don't have the nav link styling so let me just add that in we can just put it right here keep it organized let's put nav link damn why don't you guys tell me i would have seen it but there you go we're gonna add it now so that it looks a lot closer so let's add text dash white and the thing that we just need is a flex with an mx bracket 10 pixels then if i hit save and now it's more spread out that's more like it we're getting closer and just my fun little highlights button cool there you go so let's continue working on the trending js let's see if there's anything more we need to do let me go back here trending.js and if i look that should be it the next thing we should probably start doing now is setting up for the trending card that's right guys all right so next let's work on the trending card component but again before we do that let's actually set up our data and let's do a cons trending data is equal to an array of objects right so what is trending data if you remember down below where we're setting up our trending card component we're going to be passing something called trending data as trending data and if you look at the actual project the trending card is going to receive data which is like the bitcoin the tether this bitcoin and all of it is if you notice it's actually the same that's what we're setting up over here in our vs code so coming back to the top the trending data is an array of objects and for this first object we can do number one the symbol will be btc which stands for bit name is going to be actually just the bitcoin icon it's going to be btc right where are we getting this btc from it's actually the image okay cool and then from here we're going to have is increment and if you remember that's the one that it's either the chevron up and it's green or the chevron down and it's red so that one will say it's true that will make it green and then the rate which is the number on that is going to be 20 or it's not 22.34 percent okay there we go and we're gonna have about three of these objects so let's just put a comma here and then we're gonna do two and then we're gonna do three right what we need to do now is make sure you change the values otherwise it'll just be the same thing so instead of bsd let's do usd t for usd tether anyone watching this has invested in tether or are you guys more into usdc leave a comment down below okay cool and then we're going to do a usd here as the icon which is what we're importing increments let's make it false sorry it's on a downward trend all right and again it's not actually on a downward trend i'm just putting it so this is nine point two nine point two three percent the number of this should be three and this one can also be bitcoin and it can also be 2.34 if you wanted to customize it you can but for now let's just make sure the static data is like this okay cool so now that we have the trending data we're actually able to pass in all these things so in order to pass them out let's make the component so i'm going to do is head over back to our components folder make a new file and let's just call it trendingcard.js yep there we go do our magic little r a f c e hit save and now what we can do next is uncomment all of these guys out so if i do that hit save again and we're going to see oops it's a little error actually a trending card is not defined and that's because i forgot we need to import it and every time you make a component and you're using it you need to import it so trending card from trending card let's see does that work trending card trending card now let's hit refresh there we go so there it is trending card trending card it looks like that because we haven't set up any of the styling or the jsx what it's supposed to look like again is going to be these right so notice how we made three trending cards so we're gonna see three of them trending data though if you remember it's gonna be this this is our bitcoin on number one or two and it says number one but i really should say number three so i think i fixed that later on but again feel free to customize this make this whatever coin you want put your favorite coin in there and we should we should be good to go this right here is going to be the icon that we pass in this is the and again here is going to be the title and one thing that i wanted to point out is over here there's more with an arrow this is actually a component that we're going to create in just a little bit okay let me move my fancy dancy drawings and let me go ahead and come back here and let's go back to not state.json over here so going into trending card the first thing that you want to do is let's go ahead and set up some of our imports which is just going to be for now image from next image and then from here let's go ahead and set up our jsx so for the trending card we can go ahead and erase that hit enter and then up here let's give it a class name and the class name that i want to give this is styles dot dot trending card okay cool and then from there let's give it another div it has a child if we do a class name styles dot trending card wrapper and make sure it's closed we can put another div within the side that so within that one let's have another div here with no name just flex just flexing out and we should be good to go and now that i'm thinking about it we should also take in the props that we're passing in so if i look at trending what are we passing in icon trending data and i believe title all right so that's what we need to put in here so destructure those props and do title icon and trending data the reason why we're doing this is because if i were to do it the other way what we'd have to do is something like this we'd have to do props and then all of these things that we passed down would be a whole prop object and to get the title i'd have to do something like props.title all right and then if i wanted the icon to do props that icon so instead of writing so much dot notation we can do something called destructuring and get each of those individual keys so here i can just say title icon i believe trending data all right so that is our react basics be sure to look out or look at our other courses like pwr to learn more about that awesome so we're passing in and taking in our props let's actually make some use of it so in this div called flex we can have curly brackets here and say icon and and so essentially if the icon exists what i want to do is have an image in here this is why we imported image in the first place and what i want as the source is the icon right if the icon or nothing no icon gets passed down this image won't even load that's essentially what's happening here for the width we can say it is 27. all right let's make a little closer and let's also do the height while we're here which should be the same also 27. and most images need an alt here i'll just say icon since it's pretty dynamic okay and then let's add and let's add nb sp here and b sp okay from here let's add a p tag class name and it's just gonna have some styling of bold font all right so font bold and then we'll make use of our prop and say title here so this is where it says like gainers or whatever and i think that should be it for this div over here this is where we're going to have that more button right i told you guys what this was a little bit earlier let me just set up the actual component button let's go ahead and set that up since we're here to set up the more button what i want to do is go to our components let's just make a new file let's call it more button.js okay and then from here let's could do our usual thing and let's add import that we need for this if you remember on localhost 2001 the more button has this little arrow right that's actually an image that we have cool and yes i know if i hit save we're gonna see the styles here so i'm gonna bring back the code and let's import the right arrow from forward slash and i see it assets forward slash svg and we already have it set up if you have the assets imported so right arrow hit save and then for the styles i'll set up the styles now since there's only one we're gonna be making a div later on and it's just called button that's just the right arrow button okay cool it's just gonna have a text of dash bracket we can do a hashtag six one eight eight f f and there we go that's the text color give it a flex property i wanna do an item center and if i hover over it we can add a course cursor pointer and for white space do it no wrap justify dash between okay i think i like that that's pretty much it for the styles let me just do an ansi all right can you guys awesome no problem joe i got you now did i scare any joe's watching this cool so what i want to do next is let's set up the div here and you guessed it it's just the class name button or styles that button sorry cool and you want to add a more here luckily that's pretty similar and then we can hide our right arrow right here so if it's safe go to trending card let's actually go back and import the more button so import more button sorry lowercase u from quotes dot forward slash there you go awesome i hit save we'll still get errors and if i unlock this it should be fine we're getting errors again because we don't have our style object yet all right cool so if i go back to here there should be a closing div here and then there should be a line break cool from here we're going to take that trending data and we want to map through it why do i want to map through the trending data well if i ask you guys how much objects are in our array or how many items are right what would you tell me exactly good job you said three you'd be correct so what i want to do is for every object in the array or in other words every item in the array i'm going to create a trending row component so if i go back to here notice how there's three rows because there's three items cool that's actually why i use map a lot of the time so that's a good thing to learn if you're just starting out programming or at least coding with react okay cool going back to trending card we're mapping through and what you can do here is label what that item in the array is and we could just call it i know parentheses first because it takes in an arrow function like and what i want to call each object in the array i'll call it item and the map takes in two parameters the second one is index right whenever you're creating components through map you should each of them should have its own unique key we can actually give it a unique key by adding an index here right so what the index parameter will do is the first index of our component will be zero and then one and then so forth depending on how many items does that make sense to you let's keep on going let's do a return here and this doesn't exist yet right so let's put quotes here trending or actually we'll put it last so i'll just write it out first so what we want to do is for every single item and there's three let's make a trending trending card row that's a component that doesn't exist yet and for every trending card row it's going to have a key and like i said the key will be the index number is going to be the item oops and remember what is item guys item is the actual object itself right so item is going to be this thing that i'm highlighting how would i get the number for example if it's an object exactly dot notation so then we're going to do an item dot number okay and then for symbol we're going to do an item dot symbol all right so you get the idea i'm going to do this for the rest of the properties that the row is going to need which will be name item.name icon item.icon and is increment right for our rate later on and item that is increment and then rate is going to be passed in as item.rate okay cool and again our trending card doesn't exist so what i'll do is going i'm going to do is like comment this out for now or rather yet comment out this whole uh return and save that and i know my computer is yelling at me so let's make our styles objects so we can make them happy so if i do ctrl b a lot better for you guys cool luckily for you there's not much styles on this one so let's do con styles equals object and then one of the first ones that we need to style is trending card and then all that's going to have is a w p 5 a p y 3 a p b 0 a p g bracket 3 2 3 5 4 6 up 3 2 3 5 4 6 yep then we do a rounded x dash xl then we do a text dash white oops mr dash three and then we'll do a trending oops trending card wrapper and if you see the suggestion i typed it right cool and if you do flex items center and at justify dash between awesome if i put a comma here hit save are you going to yell at me no nice look at that guys i'm getting super excited every time i like build and it gets closer and closer to the finished product like it just makes me just really happy to see that and there's our more button looking nice and cute and the reason why we don't see the bitcoin stuff is because we haven't made that component yet so let's go ahead and do that next all right so we're almost done with the trending section let's take a look at the final thing you can see that we just need to do this row all of this stuff it's all set up we just have to execute so going back to here let's go back to our code and if you look we need to make trending card so to make it i'm gonna go open this up again go to components new file let's just write and call it trending card bro and don't forget dot js beautiful guess what do we do next hassam exactly hassan we're gonna do rafce and if i hit save there we go so that's trending card row and what we can do now since we have trending card row is to uncomment this and let's see what comes up i hit save let's hit refresh trending card row is not defined and yes i made the same mistake exactly kasumi now it's okay if i just do import trending card row from top forward slash trending card row save now we should be gucci and there we go beautiful trending card rows and we're done that's the video right of course we're not done let's go ahead and style it so go to trending card row and let's set up a couple imports if you guys can tell we were also using rate so let's get right in here and we're also going to be utilizing image from next image that's pretty much it and we also have our styles objects i want to start it up now because there's only one and the only style object is going to be trending card row that's the div name and it's just gonna have flex items dash center just defy bash between and mb4 and text dash bracket 0.93 rem blah blah blah there you go and again if i'm moving too fast at all free freedom feel free to pause the video this is the only styles that we need yeah cool so i'm hit save that's trending cardroll and what we want to do next is what i'll call like accepting the props that we passed down and i was showing you guys this earlier what pops are you passing down key number symbol name icon is increment rate let's do that so that's what we're gonna write down so it's number icon name symbol is increment which we'll use for rate and again rate which we'll also use for ray so i think that should be it no need to put in the key so let's go ahead and come down here hit save let's start writing out the jsx now so for the div we can erase this guy hit enter and let's give this guy a class name and it's going to be the only one that has a styles which is styles dot trending card row okay and for the row itself it'll have a p tag with the class name opacity dash 40 and we'll here we'll insert the number which is the prop that we are deconstructing or destructuring i mean and then here let's add another dip for the next div we're adding a class name with w full flex and then here we'll add another div of let's see this one should be mx5 cool and then within here we'll have the icon and we'll do something similar that we did last time which was the icon and end if it exists load the image and the image is just going to be source the icon that gets passed yeah and the width of it will be smaller than last time which is 20 and the height will follow suit beauty full and that should be it for this div coming out into the next line but still in this main div we're going to add another p tag and this one is just going to be bold so let's do a font bold and here we'll have the name of that item which is the bitcoin or the usd tether that we have and underneath i want to include the symbol which we also passed down so class name will just be this text gray dash 400 and the span will be symbol okay cool that's looking pretty good so that's closing pizza closing div and then we have last but not least we have the here if you remember what are the props that we passed down for rate it's going to be his increment which is going to take in his increment yep and then the rate which is going to take in rate right now if i hit save what the this looks awesome guys so there we go that is the trending section if you look it's pretty one to one let's go ahead and work on the table and again you don't see anything because the api is not working on this specific build but our job is to get that api working together so let's go ahead and do that all right guys so i cleaned up this browser a little bit so that there's only one tab what we want to do next is set up our table that we get from coin market caps api and i fixed it in my finished version so if you guys take a look 3001 boom so this is what it's supposed to look like it's just like the demo that qazi showed it's supposed to see the top 10 coins and we get this by using an api so i'm going to teach you guys how to get started with this api so the first thing you want to do is type in coin market cap api and after that you should lead you to this page click on this link get your api key now and what it's going to ask you to do is just simply sign up so i'm gonna sign up real quick and once you fill out all the information go ahead and create my account and click i agree awesome and then it's just gonna ask you to verify go ahead and check your email for the verification code after you confirm your account and get that verification if you click on this is your api key so once you get your api key let's head over to the next part all right so what you should do next is head over to your code i'm going to open up my menu and what i want to do next is go to my pages go to your api folder and you're going to see this hello.ts we're not going to need it anymore so i'm going to go ahead and press delete it's just starter files go back into your api open it up and what we want to do is make a new file in here called get top 10.js okay once you do that what we can do is something like this we can make the menu smaller and we can make the code bigger and what we want to do is simply just export default and function and i'll just call it handler and the handler is going to take a request and a response and essentially we're going to use the fetch method to make an api call for the coin market cap so let's press enter here let's say cons get data is equal to async and the getdata function is actually the function that calls the api okay then we can say const response is equal to and await because you want to wait for the fetch to happen first and inside this fetch we're going to put the coin marker cap api link and it's going to look a little something like this now if i press alt c and let's spell response correctly response if you look this is the link i copied it because it's something that it gives you right the only difference is you should have a template literal here that says process dot env cmc underscore api key all right which we'll set up in just a little bit another important thing is inside the parentheses of this fetch there should be a comma because we're not done yet i'll do this part with you guys if you press enter here after this comma after the api key we're gonna need to add this object looking thing because we need to add some methods and the headers and sometimes we even add params but for this one i don't think we'll need params we're just going to do a get to define the method because we're getting the top 10 crypto currencies camera for the headers you want to do accept colon star forward slash star okay then you can put a comma here then you can also put a comma here all right we're almost done all you need to do is a const data equals await response.json which means we gotta wait for the response to come through and gets turned into json and after that if it's successful let's do a res dot status of 200 and that's what 200 means if you do json we're gonna put in here brackets data okay and last but not least inside here let's call getdata okay so far this looks pretty good i'm go ahead and hit save and that's going to be our actual api route let's go ahead and set up our contacts now okay so in this section we're going to be setting up our context file so if you guys didn't know there's a react hook out there called use context and basically it lets us create variables and functions and state that we can use anywhere in our app globally that might not mean anything to you but if you remember if i go over to my trending card let's go trending the only way i was able to give my trending card row the name symbol and icon was because i passed it down as a prop you can't pass down props if they aren't a direct child which eventually imagine if i had trending.js pass that prop to trending card and pass that prop to trending card row and then i had another child pass that to trending card row and another trending card thing so essentially if i was to draw it out there is a component if you want to pass down something like let's say icon all right you can't read it but it says icon you'd have to pass it down to a child which has another component which is another component which is another component that's called prop drilling right eventually that will lead to problems down the line but to make it easier what if let's say i had those of components again and this one had two children in order to get the icon to this specific component what i'd have to do is put that prop all the way down there with our context or use context what we can do is have that icon in a store and then i could just call it anywhere i could get it here i could get it here and i got it here i don't have to pass it down that's the main benefit and usually why we set up context so let me just clear this and let's show you guys how to set that up okay so i do control b and come over here what you want to do is create a folder called context so i'm going to go to the root let's just clean this new folder and let's say this is my contacts folder okay and then within that context folder i should make a new file i'm going to call it context dot js cool so once that's made i can just hit control b again to clear out my window okay cool so now we're inside our context folder the first thing we'll do is let's import anything that we might need so if i do import create context right this is a hook from react that helps us initialize our context that we want to create we also might be using a use state and later on and use effect as well okay and that should be it for now but anymore we're going to come back to our contacts and update it especially if we add all the morales features later on so if i do from react there we go okay next thing i want to do is to actually create the context we need to make use of this hook right here so what i'll do is i'm going to export const and then we'll say market context right i'm going to be naming it because we might have a different kind of context like our gun contacts so if i say create coin market cap context or coin market context it's going to equal our create context hook okay from there we also want to do an export const coin market the name of our context provider okay and let's make the m for both of these capital right so it's camelcase coin market coin market okay so it's the provider it's gonna equal function okay and as its parameters make sure it takes in children awesome all right and they're gonna be putting a lot of stuff in this provider but the main thing at the bottom here we should make it return something and what it's going to return is coin market context dot provider okay this is different from the one above it it's not returning itself it's coin market provider and this is coinmarketcontext.provider and then i'm going to close it off and in between the providers the opening and the closing it's going to also take in that children that we passed down yeah cool the important part though is within the opening tag if i go ahead and hit enter here right and then i could just format it like so boom if i go ahead and hit enter and i go back into here and put some space here if you put something called value here this is how we can make it anything i put here is global for example if i say const word equals hello not con const if i want to make this variable global and i can pull it from anywhere in my app you just pass in word into this value here so this makes it so that i can go in like my trending card row and use that variable hello makes sense cool glad to hear hassan so what we're going to do next is erase word because that's not what we want to make global we're not actually using that let's set up our get top 10 api route and make that global so now that we set up our context.js file we actually got to wrap the provider around our app so that we can pull it from anywhere so that what that tells me is let's go ahead and go to underscore app right and this is where we set up the morales provider so we can use morales in our app you guys do the same thing for our contacts so come to the top here and say all right and then let me just format this because it's starting to bother me but there you go coin market provider i believe that's what we called it let me just double check coin market yes sir that's it cool so then we can say from quote forward slash find the context find the file boom and again i just have to wrap this component here which is our actual app with that provider so again we can put this within the morales one which is fine and let's just say coin market provider open that up hit x here and then what we could do is place that component right here and when we hit save there we go we're able to use our provider or our contacts within our app now cool so then what we can do now is finish setting up the rest of our contacts and get our api call okay cool so we can go ahead and exit out for now and what we want to do is come back to our context which we're already in let's see within this provider we want to start making any functions that we're going to use and one of the main ones is something i'll call const top 10 coins is equal to async and this function right here okay and inside that asynchronous function i'm going to add a try catch i'm going to take an e for error and what we can do is a console.log e dot message if there is an error okay cool and what we want to do next is a const res is equal to an await fetch and then we're going to use our own api route that we set up which is quotes slash api get top 10. all right what is this doing we're basically making a call to the api route which we set up in the folder api and get top 10. it's going to make this call let's get data caller this function call that's what's going to happen right here okay there we go that's what's going to happen right here when i do a fetch that api route what we want to do next is make another variable called const data is equal to 08.rez.json it basically is after we make a call at the api route once that's done we're going to make a variable called data and wait for that response that we get back to turn to readable data for our code which is json okay and funny enough the way that data would get returned to us is return data right which is the variable we created and inside there is a object which is data like a key we want to access that and then we also want to access the data inside that object so it looks really funny but that's how parse that data and go inside and get the top 10 coins that we want cool so i'm go ahead and hit save and that should be good for now and what we want to do next is over here in value just say get top 10 coins right we're making that function to get the api route or the api data global and there you go it all tied in together you with me awesome all right so i'm back in our index right now and as you can see the next component i want to work on is the cmc table and if you didn't know the cmc just means going market cap table so what does that actually look like for us if you go to here and take a look at the finished product this whole section that you see right here and i may have mentioned it a couple times this is the cmc table right and there's a lot of different parts or components that go into it that you're going to notice but the main thing is the main component that holds all of that is cmc table so that's what we're going to tackle in this section let's go ahead and get started okay so coming back to here notice the difference and again all this data is coming from the api okay so come over here let's open up our files and remember how we made a cmc table folder that is where we're going to put everything that has to do with the table including the table itself so within here we have just write js let's make a new file and i'm going to call it cmc or capital cmc table for its camelcase and dot js okay awesome so what we want to do now is the rf rafce okay and from here let's go ahead and go to import react from react and let's get a couple of different hooks that we need so what i need from this guy is going to be our use state right because i'm going to make some state variables here we're going to be using use context because remember in the table we're using that api call so i need to pull that here and then we're also going to be using our use effect because we're going to run the function that we get okay and i'll explain this later but we're also going to be using use callback okay cool so that's good pretty good to me and then in terms of assets let's get btc from here the bitcoin one okay and that one's just gonna be dot dot forward slash and then now we can see the assets go ahead and just type in btc.png because that's in this assets folder okay cool oops that's not what i wanted to do i want to do control b actually and there you go cool and again if you're using the use context hooks that means i'm trying to access that store with all the global variables in order to do so we got to pass in the context in that hook so we're gonna import coin market context from dot dot forward slash dot dot forward slash context slash context okay cool and there's a couple corners that we're going to add later but we don't have to worry about that now so going down below to the cmc table and now i'm thinking about it this should actually be called not header going back to index yeah this is actually capital cmc oops so this should be cmc and in terms of file name this should also be cmc just to make sure it matches up and this can be cmc awesome that's how i know it's like the main table and what i could do is hit save control b and bring this boy out and let's import import cmc table right table from and i'm noticing it yep i know i know should be here from dot dot forward slash components slash let's see if that is there it is there's our cmc table cool all right from here it's going to get less confusing if i go to this part right here what i can do is let object equals use context now use callback use context and in the parentheses we want to do is pass in coin market context all right that's letting you know what context am i using and that's my core market cap and here we can take what we want from the value so if you remember in our context.js we just passed and get top 10 coins if i had multiple things i can literally choose what i want to bring to this specific component and for me it's just get top 10 coins i believe get top 10 coins beautiful so i'm pulling get top 10 coins function from my context and bringing it into this component that's essentially it and what i want to do is set up some state here and say equals use state and this is a react hook that keeps track of data that can change and in the parentheses here the state should start as null so it's basically saying like coin data will start as null and then here we could just do a coin data and then usually the convention is to say set that variable name got it cool so i'm gonna make some space here because i wanna make a function this function i'm gonna call it set data and it's gonna be equal to use callback okay and i'm gonna explain it in just a second and to continue on all we need to do is type in a sync here to create a asynchronous function which we'll just have a try catch oops and it's just going to take an e and then about in console.log e down message and then here we can actually do a comma and do a get top 10 coins all right and for the try we're going to say let api response right is going to be equal a weight get top 10 coins remember we pulled the top 10 coins from our contacts our coin market contact specifically and now we're waiting to call it and then storing that in a variable called api response okay then we're gonna get filtered response why are we doing this it's because when i make that api call i'm not necessarily getting the top 10 coins getting a bunch of coins and i only need the top 10. so here in the next line i want to start filtering for only the top 10 coins whatever they are so to do that we can actually use a basic for loop so if i say four let i equal zero that's the initializer then i'm gonna say the condition which is api response that length and when i say condition basically it's gonna run however long the api response length is so if the response i get back is a hundred items or a hundred coins this will run a hundred times right that's basically what the condition means and the increment part is how we get to the end of this condition so that's the for loop for you so that in the for loop let's say const element is equal to api response bracket right i'm storing the essentially a pointer to what response i'm on by using the index and storing that into a variable and then what we can do is write if statement here if element dot cmc all right coin market cap underscore rank that's the key to get the rank which i want basically number rank 1 through 10 and i can express that by saying less than or equal to 10. so all the numbers that are less than or equal to 10 which exactly is going to be the 1 through 10. yeah and because i'm gonna make this one line we can say filtered response dot push that exact element boom there we go so after that's done outside the for loop i want to take everything that gets added to filter response which should be just 10 things and set that in my set coin data state so i'll say set filtered response awesome okay cool get top 10 coins and again notice how this is grayed out it's because i'm not actually running this set data yet so that's why i'm using my hook use effect which basically if you didn't know use effect is a react hook it lets us perform what i'll call side effects or functions at different points in that component's life cycle and arrow here the side effect that i want to perform is set and if i run comma here and then put an like an array this is called a dependency module which ensures that this only runs once okay i'm essentially using use callback if you guys are familiar with use memo at all to make sure that set data runs exactly how many times i want it to run which is just get when the get top 10 coins run we don't want it to run over and over again i just need to run once all right so use callback can help us ensure it runs exactly how we want it to and then i'm using that in tandem with use effect because when the component loads we should run set data awesome cool and if i save this here this might result in its installed request and oh that actually brings up to my next point if you remember let's go to our let's see get top 10.js awesome we have that api call and it's running this process.env.cmc api key but we haven't actually set up that environment variable so let's go back to coinmarketcap coin market cap api gonna go ahead and log in all right so this key all we have to do is you can insert this here instead of doing a template literal or we can just set up our environment variable or our env variable through our cli tool once again so i'm going to do that real quick that's why we're getting api resolved without sending a response okay so i'm going to temporarily stop this and let's set up our next our cmc api key okay and again we can also set up our environment variables with ntl env colon set right we did this with the morales url you can do this by saying the variable name here which i'll say cmc underscore api underscore key i believe that's what it's called just double checked cmc underscore api underscore key cool you do this and then just have a space and then paste in the value and let me just make sure i have it copied yep and the value is going to be this hit enter cool so the environment variable is set and you can see it's set for the site coin marker cap clone blockchain so that means it would work even in the deployed link so the typical way we do this is we have our emv file but when i deploy that site live we have to go to netlify and then like manually put in that env variable here i'm already setting it up so then we can just do an ntl dev like i said i'm running ntl dev and now let's see if it works and one one way we can test it is if i go over to our cmc table and i do a log coin data we should see about 10 coins so i hit save inspect console hey there it is my array of 10 coins the number one is bitcoin makes sense ethereum ted airbnb usdc so forth there we go it looks like our api is working all we need to do is make the freaking table so let's go ahead now that we have the data we can start moving on okay so i'm gonna make this smaller and we can do a get rid of this console log and let's start making the jsx okay so what i'm gonna do is set this up by erasing this and now let's set up the divs which will have a class name and it's gonna have already some css which text white and see let's make the font bold as well okay from there i also have a div with a class name mx dash auto max dash w dash screen and do a dash 2 xl and here we'll start our table okay so that's our table and then within that table i wanna give it a class name of with full and again like i said we're gonna have some components here that i'm gonna set up this one is the cmc table header okay and then underneath that though we'll have we'll use coins data right because we have it now and if i say and coin data we can set up a q a ternary right if coin data exists what i want to do is comma here a comma parenthesis here and i want to map through it okay and guys i explained map earlier basically for every single coin or item i want to do something with it so point index let's do a function in here it's the other one there we go and what i essentially want to do is return right a cmc table row yeah again this is a component that doesn't exist yet but it's going to take in a lot of props so let's set that up so if you remember the key can be the index which is just the parameter that i set up with the map it's cool function we have a star num that's equal to the coin dot cmc underscore rank then we have the coin name prop which is going to be equal to the coin.name yeah there's going to be a lot of properties guys so bear with me it's all going to be worth it then we're going to be coin symbol which is just coin that symbol coin icon is going to equal that btc we're going to have a show by that's going to equal true then we have h rate and this one's an interesting one it's going to be the coin dot quote dot usd dot percent underscore change underscore 24 hours like the percentage change of that coin and there's also a d rate which is going to be really similar so it's quote dot usd dot percent underscore change and instead of 24 hours it's gonna show us the seven days okay and then we have an h rate is increment prop and that can be equal to true by default then we can have a price equal to coin.quote.usd price right the price in usd then we have the market cap value that's going to be equal to the coin dot quote dot usd dot market underscore and then we have the volume of crypto value volume crypto value that's going to be coin.usd dot volume underscore 24 hours alright the crypto volume traded within 24 hours then we have the just volume value which is the coin total underscore supply yeah and we have circulating supply that's equal to that circulating underscore supply okay cool and then we want to do next is have a parenthesis here have the curly bracket parenthesis here and we want to close off this dot this okay see did i do match this up correctly yep then otherwise we can have a fragment here there you go awesome so if coin did exist let's map through it generate the table row if not just put in an empty fragment okay and taking a look at that just closing table closing div closing div export default to the table and yeah that looks pretty good to me and again this doesn't exist just yet so we can comment it up and we're getting here if i do that so let's comment out the whole thing and if you're wondering where the hell lands are you getting all of these props what i did was if you inspect element and do console and you open up that array and open up one of them you're gonna see everything that i set the cmc rank the total supply the symbol the quote and then if you open that usd and then you open that you get the percent change right all the information is in this array of objects and inside the object is those keys that i'm talking about so that's how i knew what to get i basically just picked what i wanted from the api and what we need is all of this so the next step let's start creating the components i'm going to start with the header all right so to get started i'm going to open up my menu click on this and let's create that new component and remember i'm organizing the components in this cmc table file let's make a new one and call it cmc table header.js all right then we can do an rafce start out the component and let's import that guy inside here so import cmc table header from dot forward slash tipsy tablet all right so once it's here we can actually uncomment this guy save and see if it comes up there it is so this is supposed to represent where our header will go and it kind of lines up this is what the header is the hashtag name price yeah to get started on editing that let's go into the table header so if i press ctrl p or command p if you're on mac click that and now we're in so what we need to do first is let's import anything we're going to need for me i know i'm going to need the chevron down not the chart event chevron import to run down as well as import info and if you're wondering where infos it's coming from our assets that again that you can get from the repo and info is just a component that has an svg in it okay beautiful what we want to do next is coming at the top here since there's not a lot of styling i'm just going to make that cell object now and i'm going to tell you that the div we'll be styling is called text icon so then we're going to do flex items dash center beautiful all right cool so now from there we have our return and what i want to return is to clear this out like so and i'm actually going to change this to t body right that's just what i want to name this tag forward slash tea body okay cool so from there we can do a tr and then we could do a th oops that's hth just for spacing and then what we could do next is another one th this one's gonna have a class name though i want to give it a flex property of items dash center if you're again if you're wondering what this header is what we're making with the header is specifically this area here and it's just going to be static so there's nothing fancy going on here just styling okay cool i'll bring it back to this oops it's not my pen tool okay cool so that's th and then we can do inside this specific tag we want to do a b okay and in this b we have hashtag and this end and bsp for spacing and then within here we can add our chevron down oops there you go hit save there it is as you can see there's the hashtag we're supposed to get this set up awesome now we have another header here which is going to be a name and i want to do this about four times oops two three four all right and instead of name we have price 24 hour percent and we have seven d space percent okay cool and then from here the next thing you want to do is add another th here and that's pretty much the rest of the headers are so let's just do the rest of them which is just this one and this one right the difference with these three is that it actually holds a div so they also hold divs boom boom and this one just says the last seven days okay but inside these divs they all have a class name oops remember the text icon that's the one they have styles styles dot text icon okay cool so what we could do is just copy this over since it's the same one now the difference between them is all of what they say so inside this div is going to be a p right with the class name mr2 and actually all of them have p tags like that boom and the boom beautiful okay so within this p tag let's have market cap then for here we have volume and then we have circulating supply okay last thing we'll need is in between the p tag like the closing p tag and the closing div there should be the info thing that i inserted so just getting that real quick boom boom hit save that should be it for the header let me just take a look okay it's not looking bad let me just make this full screen awesome okay cool and i'm noticing that there's a little bit of css issues with the header so let's just go ahead and fix that real quick all right so looks like it's a little too close over here so to fix that i'm going to go into my code let's go to trending card and it has to do something with this area here if i put a space there you go it's less congested i think that looks a lot better okay and with that the header looks pretty good to me let's start making the rest of that table all right guys so coming back into index let's take a look this was our cmc table that we set up then we made the table we just made the header now if you look the next thing we got to make is the cmc table row and it has a bunch of props that we passed in as you can see right that's all of the api coin data that we're getting from coin market and it's going to be put into all of these components right here so if you see this right that's what we're making here right theory tether that's the idea let's go ahead and start working on that by going back into our code base and let's make that component so if i go to components cmc table folder new file cmc row.js boom save and now what we can do is comment this guy out but also don't forget to import them port cmc table row from there okay so if i hit save this is the complete version look at that it's generating at least 10 of them because that's how many uh items are in our array that we're mapping through and for every item it's making that component which is kind of the idea here next thing i'll do is just format it so it looks like this so we're going to take the info that we passed in so if we look back into the row let's go ahead and destructure all the things that we're going to add and it's going to look something like this we're going to get curly brackets here star num and if you're wondering where am i getting this from just look at cmc table and look at all the things that we passed in that's what we want to destructure here all right because those are the props you want to use killing them otherwise we have to say props.numprops.com icon so this is saving a little bit of typing right there coin symbol and one thing that you could do is you can also set a default prop so a default prop can look something like this if you say equals minus right while it doesn't exist this is what the prop is okay so as it's loading you'll look at it you'll see it like this a trade equals d rate is equal to h rate his increment actually a trace increment can be blank that's to be true or false this needs a comma awesome and then d rate is increment market cap value this one can have defaults prop then there's also volume value volume crypto value cool then there's circulating supply and that's going to be three awesome okay cool so those are all the props we are deconstructing nice and organized let's see next thing you want to do is miss did i import anything yeah so we're passing deconstructing our props the next thing we should do is import any assets that we're going to use at the top which for me is just going to be import image from next image import import more and this is coming from the svg assets folder there's the assets svg and you can say more import star from and star coin name row actually this one doesn't exist yet i'm gonna do import rate all right oh and we're also going to import a react hub and i'll talk about it later on but we're going to be using the use router hook and actually this doesn't come from react so let's do an import router from this one comes actually from nexter there we go so this should be for the most part everything that i'm going to include for now so i'm going ahead and hit save and while we're here let's also just do the styles so if i come to the top here the const styles this one's going to equal just table row that's the only div that we're going to actually create here it's going to have a text white border dash b border dash gray dash 800 and the text is going to have this 0.93 rem okay there you go that's our styles object and the next part i want to do is working with the jsx but before i do that one thing i want to talk about is what goes into this so if you notice in this row there's this little graph here we're actually just hard coding these graphs and we're getting it from coin market so what i'm gonna do is take all those images and put them into the array so you guys see that awesome so going back to the code what i'll do is if i go here and go before the return but after we accept props and if i hit paste here i'm generating all these graph images so if i press ctrl or alt z i mean this will take a moment i'm getting these graphs you guys can use whatever graphs you want but if you want you could pause it and this is the exact one where you can look at the repo and get the assets from there so that's all i'm doing these are all the graph images the way that we can get a random graph to display is we can make a function to get a random one right how would we make a random function you might be asking so to get started doing that come down below here let's say const get random graphics and it's going to equal an arrow function okay and what i want to do is say kant's random integer right a random number and to get a random number in javascript all you have to do is a math.floor or i'm really just a math.random and this method random generates an integer less than or equal to zero by default but if i do times 10 it's gonna be zero through ten let me see my top four times ten and i want to do a plus one here so that when we do a math.floor it doesn't just go to zero or like less than zero i want to make it start there so we don't always round down to zero it can round down to zero or one two three four so now we'll get a random number from zero through ten okay one two three four five six seven eight nine ten all right so then we're gonna do a return graph images and then to get a random number since we're getting a random number through here we're going to pass that as the array index so that means we will generate a random graph from here okay so just pass in random integer and that's our function cool okay and after creating the get random graph function i want to create a couple more functions that this row is going to need and we're going to be making use of the use router hook the use router hook lets us access the router object and it helps us create dynamic pages with query strings in next.js what do i mean by that it's gonna be easier if i could show you guys so the first step let's do another variable let's do const router is equal to use router and we should see the router object when we do that and the idea with the router is if i do const view coin details if i go to here and i click on bitcoin for example it should lead us to a bitcoin page i'm seeing an error because it's not running oh there you go cool we should lead us to this page and if you see above you can see that the btc is the symbol the coin is bitcoin and the price all of that is within the url we can do that by doing a router dot push so going back to the row control b let's set that up so if i say view coin details all right we'll do a router.push and inside this push right we can format it let's so i want to see currencies slash info right this is the page so that means we're going to make have to make the actual page itself currencies and then the info page right then you want to put a question mark symbol and this is how we can make it dynamic by using making use of template literals so for the symbol is going to equal whatever the coin symbol is of what we clicked so with me cool then we're going to and coin is going to equal template literal of the actual coin name right so coin uh name all right so that's how we can see btc and the coin is equal to bitcoin and if i go click on ethereum instead of btc it's e t h for eth right so that's what we want to set up here so i hope that's making sense because the next part is going to be price and it's going to be something super similar dollar sign coin or rather price okay price awesome now you just put a comma here but that's basically it for view coin details it's going to lead us to our info page right there's another function here that's going to be const view price and instead of taking us to the info page we're also going to have another page that's going to just deal with the price i believe by going to here and i go back so if i click the name i get the coin details if i click the price i should see this page the front end of this project is jacked right so there's a lot of front end here let's go ahead and set it up so router.push right and the url is going to be similar it's going to be currencies slash price instead question mark symbol is going to be equal coin symbol and we got and coin is going to equal coin name and price is going to equal price okay cool so as you can see it's pretty much the same thing the difference is that this page leads to a price js and that one leads to info got it cool and one last function is i want to be able to format a number a certain way i'm thinking like two decimal places because if you look the number is actually really long so we do format num we can just call this function to format the number when we need to do return number num to fixed parenthesis two and go out here dot locale string parentheses to call it boom okay awesome so that's pretty much it for the functions now let's work on the jsx of it all we can go down to the return here and we can say erase this we're going to do something similar with the tea body and the tea body is going to have that div class name that we set up which is going to be styles dot table row yup cool and then from here we just do a tr not tr a t r t d and then we have star here cool so t d t d and then within here let's have another td this one can be the star num all right it's the star num prop that we are getting from here nice hit enter and then we have some condition here coin and coin so if there's a coin icon then we can set up a ternary for it where if it exists then we can load the td with the class name cursor pointer cursor dash pointer and then we have coin name row also do you like this style of video guys that it's longer and i'm taking my time with it name equals coin right so again this is a component coin name row and we haven't made it yet but i'm going to be setting up real quick so coin icon then we have clicked equals view coin details so if this coin name row is clicked then we're gonna run view coin details and remember that leads us to the info page and that's how that functionality was working okay cool and then what we could do is after this td we'll have the this opening parenthesis and then this closing parenthesis and then if that coin icon doesn't exist just have a fragment here and we're all good cool and then in the next line but still inside the tr we'll have another t this one will have a class name of cursor pointer as well because if you guys notice the pattern in between here or not in between here after this we'll also have an on click click and guess what it's going to be the view price one v price okay and what we're gonna should be clicking to call that function would be the format num and then plug in the price all right so we're taking the price prop that we're getting formatting it with our function and then putting it in our jsx and we're making it clickable and when we click on it we run view price so see how it all comes together that's the kind of process that you want to be thinking about for your build so when this td will include the rate then this right one is so useful because now i don't have to rewrite and i can just pass in this rate function and it knows to take in certain props and we're going to take in his h rate is increment is going to be template literal of format num again and let's put the atria in there so i also want to format the h rate and we can also include a percent and don't include the spacer also have a space present okay underneath that we have another td with another rate actually but this one is going to control the d rate all right so it still has increment but what we want to put is d rate is increment all right and let's double check that i'm getting that from somewhere yep there it is and then for rate it's going to be the same thing where we do it equals and then we do this with the template literal to format the num and pass in d rate d right cool awesome all right we're almost done guys with this part the reason we want to do is a td inside that we have a div inside that we have a p tag right and we can actually make this one line because all it is going to be is format now right this is the reason why we made it a function because there's a lot of things i want to format like the volume value right you don't always have to take that api data as it is you can reformat it as you want so we're going to do another p tag with the class name text dash gray dash 400 and again guess what we're going to do format number so performance time we're going to do the volume crypto value and another one we also want to put coin symbol in here so coin sim closing p closing div closing td another td with another div with another p tag which has format num this one is going to be the circulating supply all right so closing div closing td then we have another td but this time it's we're making use that image we imported now closing and for the source it's going to be get random graph so this is how we get the random graph onto our page that you saw and i was highlighting earlier so if i double click this make sure it's the same name just sir get random graph right it's going to call get random graph function and return an image as the source that's the whole point then i can say the size of it so once you get me that image how big do you want it i'll say 150 for both actually no 260 for height and then we'll do alt is equal to graph okay closing td and we're almost there i think i want to do another td here where there's gonna be a more be more svg that i brought in so more closing td closing tr and then finally closing t body if i hit save oh that's right because this guy doesn't exist just yet so let's count it up and see what the error is num.2fix is not a function return num.2 fixed that's interesting let me see okay so one thing i'm noticing real quick is the spelling of this should be crypto and then that means the spelling of this should also be the same crypto and let's see market cap value market market cap value is not being used c is increment td oh market cap value is actually supposed to go up here he's gonna have the same deal td div and then ptek with the dollar sign format number format num market cap value save okay now we're using it and right now we're still getting an error that to fix is not a function that's because probably when i'm passing in these numbers i'm not getting them as data just yet so what i'll do for now is comment out format num so we can see something there we go cool so that's okay if it's undefined the basic structure is there though right we have the random graphs that's all loaded awesome okay cool so we're almost there i think to get this format num up and running let's make the coin name row component next okay all right so the next thing i want to work on is the coin name row component so again repeating that cycle inside the cmc table folder new file coin name row.js okay boom rafc e save and coming back to table row let's import him so now this is what i was trying to import earlier coin name row from dot forward slash coin cool then what we can do is uncomment it cool so there it is going name row it's showing up nicely and again we don't see the numbers because we didn't format any of the numbers yet it's not going through so let's finished out corn name row so i go to coin name row the only thing i'm going to need is to import image from next image okay and coin name row can you guess what kind of props it's going to take in if this is coin name row what should be here what should be here really for coin name row or maybe this would be better as the column itself it's going to take in a name and it's going to take in the icon right so if you guessed name an icon you'd be correct okay so what we want to do is coming down in this div let's give it a class name or css property of just flex and if i format it like this should just be an image the image of whatever icon is passed right icon the alt for this we can actually pass in the name and the size of the icon can be with 20 and the height of this can be 20 as well okay cool so if i want to display the name of the coin name that i passed in just add p tag and then just use that prop all right that's why props are awesome so i hit save there we go we got all bitcoin baby so that that means the names that we're passing in isn't exactly right so we got to take a look at that oh it's just all bitcoin for some reason all right when it turn it should be ethereum tether b and b and so forth okay cool okay so yeah that is the coin name row and again we don't see a price or any numbers because if you look but not too trending to our format now we commented out but now that it's all fixed up and ready to go if i hit save hey that's looking a lot cleaner obviously this should be different icons but as we develop this project it will get sorted out okay so that's the coin name row let's go to the next part okay so for this next part let's talk about the view coin details right so if you remember we are pushing to that router object and what i'm doing is creating that route of slash currencies slash info and whatever the symbol and coin is but the truth is it won't work until we set up that page or that route so what we're going to need to do is open up our menu and come over to the pages right here and what we're going to need to do is it's pretty simple underneath pages let's just make a new folder and let's call it currencies in that currencies folder right here we're going to make another file info.js so that's what should load info.js all right so you might be asking why the hell do we make a folder and then a file if i typed in const currencies equals a component and then i have the return here and then we'll have the h1 and if i say hello let's see what happens when i go to localhost slash currencies slash info we have the folder and then the file to see what happens if i hit enter and it says it's not a react component and i think i know why it's because you have to go down before here export default currencies hit save refresh and now when i go to this route highlight this there it is there's the component so that's what we're doing with that router we're making dynamic pages with that query string that we pass in so when i go to here we should go to this url with the symbol being the bitcoin and the coin and then we're gonna grab those uh params those url params within this info does that make sense cool it'll make more sense as i'm coding along but bear with me guys so going to info.js let's get started okay and to get started let's import a couple things what i want to import is our header from our header not that one from dot forward slash dot dot forward slash let's get to components yep components header there we go there's our header let's also get solana from our assets folder so that's a dot forward slash that we'll need here forward slash data forward slash assets it's not an svg it's actually solano.png and then we can import usd or capital usd from let's get to assets and i believe this one's a svg but look ah there it is so forward slash usd and again while we're here let's import the react hooks we might use which is going to be defect and use date hook yep cool all right you guys are going to get really good at react hooks if you keep following this tutorial cool so those are all the imports that we're going to add for now i might be adding more later when it makes more sense but next let's set up the styles object so let's do the first div we're gonna make it's gonna be called active tab and active tab we'll just have a p one then p two all right followed by an mr dash two and then a rounded large and then a background color oh let's see hashtag one seven one nine two four okay then we're gonna have a tab item with px2 then we'll have a tab container and tab container is going to have a flex property with an item center p two and then rounded let's make that extra large and then the background color of hashtag two two two five three one then for border let's give it a border gray you guys spell gray with a or might be different from where you're from right 500 divided by 10. let's do a text small and i think that should be it for tab container okay up next is info which should be just min screen okay and main will be a text dash white mxauto max w screen excel awesome then we do a flex start with a flex item start then we can do a flex between which will have a flex justify between which makes a lot of sense then we have a flex tween center which will just have a flex justify between items all right so there's a tab container wrapper so p 10 oops pl dash 0. oh code's all messed up so we have p 0 or p 10 actually and p l 0 p r 0 and w 2 forward slash 3. boom okay that's the tab container wrapper last one flex center and let's do a flex let's finish strong dash center cool so that's all the styles that we need come down below two currencies and what we'll need to do next is remember how we got the used hook there's a couple of different variables that i want to keep track of on this page and that's gonna be const array equals use state something like this and what i want to keep track of first is the coin name right because when i go to this page i go to this page i click this ethereum it should load the info page with ethereum as the coin name so i need to be able to set that over here so i'm going to set that state as coin name with setcoin not data should be name okay and then the initial stage should just be empty and then let's set up the rest so equals use state the next variable i want to keep track of is the coin symbol so whether that's btc or sol for sole that's what i want to keep track of okay then we can do const price as set price equals use okay then we're going to have a use effect here there's going to be a function that's going to call but it doesn't make much sense for me to use it just yet so let's actually just erase it for now and then you'll see when i'll use it but the function that way i want to use is get url data all right and this should be covered okay and get url data is exactly what it sounds like it's going to be getting the parameters from the url so if we go back to not this code but this code it's gonna be table row if you go back to here if i click a bitcoin the url will have the symbol and the name and the price i want to be grabbing that information from the url so we can actually do that and make use of it by saying const query string is equal to window.location.search that's how we get to that query string and then what we could do is const url params is equal to new url search params right creating a new instance of it and passing in query string and then once we have that what we can do is set coin name is equal to ul params.get and then we get the coin right this is super clever because what we're doing is we're getting the coin right the whatever was passed in this coin and storing it into a variable here okay that's something that's super cool that we're doing so it's kind of like a way to do this without necessarily putting it in our contacts or passing it in as a prop okay so then we do set price same thing guys so that to get that's how if that's how we get coins how are we gonna get the price yep now you guys know it's price and the format we can do two code locale string and then for a set coin symbol we'll do a url params dot get symbol okay cool so that is get url data one thing i want to point out though is when i click for example ethereum this is how it knows that i'm looking at ethereum right that's what's the really smart thing we're doing here like how does know that if i click ethereum that i should see ethereum details right so again that's what we're setting up here this specific page and by us setting all that state it doesn't necessarily have all of this nice stuff here either on top of this nice chat app that we're gonna be setting up in a little bit later and it's a decentralized chat by the way which is a cool feature so get excited for that there's still a lot of awesome features left to go so stay tuned but let's get the rest of this front end done cool so now that we have the get url data now it makes more sense to run this use effect so if i say use effect here remember this is a hook to perform functions at different times in the component so if i put comma right here or in other words put an empty dependency module i only want get data or get url to run once and i don't want that cool i only want this to run once when currencies or the info page loads once we got the url data then we can populate this page with whatever we need okay cool so all that's left is to do the jsx which is not as bad and i have this return here which we do not longer need so if i do div here let's give it the class name and guess what we already did the styling so if i do styles.info we can add the header component here because even though i clicked on this the header should actually still be the same so we can actually just reuse it and place it right there another benefit to components and then if we do main here let's give this a class name of styles domain okay from there we got div i want to name you styles dot flex start and then the div with inside will be class name styles dot tab container wrapper and then div inside that you can be styles dot flex between okay and then within that we'll have the actual tab container itself so this one styles that tab container beautiful then we have a bunch of p tags here so i will guess i'll set it up do p tag so it says one two three four but they're gonna have pretty different differing class names this one is styles.activetab right there's a style for active and then just there's the tab item so price is the active tab this one will just be tab item tab item and we can actually give that styling to the rest of them okay so if that's price this will be market this will be trade being view and this will be history okay and then closing div and then we have another div here now we have another tab container so let's make another tab container here and if you're wondering where am i getting price marked cap and trading view right it's over here notice how the active tab is this right because it's symbolizing that's the price that we're seeing cool so if you wanted to make it uh dynamic you can by just swapping out the class name okay so for this one it's gonna have pretty much something similar right so we have the active tab and i think the tab items on this one is one two three four five six leave six one two three four five six seven all right seven so what i'll do is i'll copy this twice okay so this will give me six and then if i just add one more at seven okay but the thing is this is different so we need a one day and again i'm basing it off this guy right here right one day this guy is two days because you know on coin market cap you can see the graph at different stages this is what we're setting up so 3m three months this is the one year ytd and log okay cool then it's closing div closing div let's have a br here and this doesn't exist just yet but there's gonna be a some sort of graph component here which is essentially what you're seeing here we're using uh chart.js to generate this i'm going to be setting that up a little bit later so that's what the graph is so for now i'm going to comment it out but just give you an idea of where that component will go from there let's add another line break and then we can start writing some more divs so the next thing i want to write is div with the little old name of styles dot flex between center okay this one will have just the class name of flex and then within that we have a div that i'm going to give the flex center too and from here we're gonna have the input and then for this input we can make its closing but for the class name let's just give it an outline of none and then for type let's make it a check box check box okay and then after this we could add nbsp for some spacing and then just do usd cool all right awesome so now that we have that input in the next line i already know i want to add a couple of spacing things here just to make it easy and then after that we could just do div with a class name of styles dot flex center flex center okay all right if you're still following along the next thing we're gonna do is input and input again this one's selfclosing type equals checkbox and we add our little spacing and bsp and btc cool closing div closing div then we have a p tag want more data and then span with the class name of text and give it this color for the text which is just gonna be hashtag six one eight eight fff okay cool let's just say check out our api check out our api all right if you look want more data check out our api that's this little section right here and here's that usd btc thing that we just set up earlier the two check boxes awesome so that's the span then it's closing p closing div and then after that we have two brs here okay and then this doesn't exist yet either okay so taking a look at it now you're gonna see that these three things are grayed out that's because where i'm actually using them i commented out so just to take note of this we have three components to make for our info it's gonna be graph it's going to be cmc price converter and it's gonna be the chat so let's get started on that let's keep on crushing it okay so for this next part let's talk about the view coin details right so if you remember we are pushing to that router object and what i'm doing is creating that route of slash currencies slash info and whatever the symbol and coin is but the truth is it won't work until we set up that page or that route so we're gonna need to do is open up our menu and come over to the pages right here and what we're gonna need to do is it's pretty simple underneath pages let's just make a new folder and let's call it currencies in that currencies folder right here we're going to make another file info.js so that's what should load info.js alright so you might be asking why the hell do we make a folder and then a file if i typed in const currencies equals a component and then i have the return here and then we'll have the h1 and if i say hello let's see what happens when i go to localhost slash currencies slash info we have the folder and then the file to see what happens if i hit enter and it says it's not a react component and i think i know why it's because you have to go down here export default currencies hit save refresh and now when i go to this route highlight this there it is there's the component so that's what we're doing with that router we're making dynamic pages with that query string that we pass in so when i go to here we should go to this url with the symbol being the bitcoin and the coin and then we're gonna grab those uh params those url params within this info does that make sense cool it'll make more sense as i'm coding along but bear with me guys so going to info.js let's get started okay and to get started let's import a couple things what i want to import is our header from our header not that one from dot forward slash dot dot forward slash let's get to components yep components header there we go there's our header let's also get solana from our assets folder so that's a dot forward slash that we'll need here data forward slash data forward slash assets it's not an svg it's actually solano.png and then we can import usd or capital usd from let's get to assets and i believe this one's a svg but look ah there it is so forward slash usd and again while we're here let's import the react hooks we might use which is going to be the effect and use date hook yep cool all right you guys are going to get real good at react hooks if you keep following this tutorial cool so those are all the imports that we're going to add for now i might be adding more later when it makes more sense but next let's set up the styles object so let's do the first div we're gonna make it's gonna be called active tab and active tab we'll just have a p one then p two all right followed by an mr2 and then a rounded large and then a background color oh let's see hashtag one seven one nine two four okay then we're gonna have a tab item with px2 then we'll have a tab container and tab container is going to have a flex property with an item center p 2. and then rounded let's make that extra large and then the background color of 2 2 2 five three one then for border let's give it a border gray you guys spell gray with the a or might be different from where you're from right dash 500 divided by 10 let's do a text small and i think that should be it for tab container okay up next is info which should be just min screen okay and then main will be a text dash white mx auto max w screen excel awesome let me do a flex start with a flex item start then we can do a flex between which will have a flex justify between which makes a lot of sense then we have a flex tween center which will just have a flex justify between items all right so there's a tab container wrapper so p dash 10 oops pl dash zero oh code's all messed up so we have p 0 or p 10 actually and p l 0 p r 0 and w 2 forward slash 3. boom okay that's the tab container wrapper last one flex center and let's do a flex let's finish strong dash center cool so that's all the styles that we need come down below to currencies and what we'll need to do next is remember how we got the use state hook there's a couple of different variables that i want to keep track of on this page and that's going to be const array equals use state something like this and what i want to keep track of first is the coin name right because when i go to this page i go to this page i click this ethereum it should load the info page with ethereum as the coin name so i need to be able to set that over here so i'm going to set that state as coin name with setcoin not data should be name okay and then the initial stage should just be empty and then let's set up the rest so equals use state the next variable i want to track is the coin symbol so whether that's btc or sol for sol that's what i want to keep track of okay then we can do const price as set price equals use okay then we're gonna have a use effect here there's gonna be a function that's gonna call but it doesn't make much sense for me to use it just yet so let's actually just erase it for now and then you'll see when i'll use it but the function that way i want to use is get url data all right this should be capital okay and get url data is exactly what it sounds like it's going to be getting the parameters from the url so if we go back to not this code but this code it's going to be table row if you go back to here if i click a bitcoin the url will have the symbol and the name and the price i want to be grabbing that information from the url so we can actually do that and make use of it by saying const query string is equal to window.loc that's how we get that query string and then what we could do is const url params is equal to new url search params right creating a new instance of it and passing in query string and then once we have that what we can do is set coin name is equal to you all params.get and then we get the coin right this is super clever because what we're doing is we're getting the coin right the whatever was passed in this coin and storing it into a variable here okay that's something that's super cool that we're doing so it's like a way to do this without necessarily putting it in our context or passing it in as a prop okay so then we do set price same thing guys so that to get that's how if that's how we get coins how are we going to get the price yep now you guys know it's price and the format we can do two colocal string and then for a set coin symbol we'll do a url params.get symbol okay cool so that is get url data one thing i want to point out though is when i click for example ethereum this is how it knows that i'm looking at ethereum right that's what's the really smart thing we're doing here like how does know that if i click ethereum that i should see ethereum details right so again that's what we're setting up here this specific page and by us setting all that state it doesn't necessarily have all of this nice stuff here either on top of this nice chat app that we're going to be setting up in a little bit later and it's a decentralized chat by the way which is a cool feature so get excited for that there's still a lot of awesome features left to go so stay tuned but let's get the rest of this front end done cool so now that we have the get url data now it makes more sense to run this use effect so if i say use effect here remember this is a hook to perform functions at different times in the component so if i put comma right here or in other words put an empty dependency module i only want get data or get url to run once and i don't want that cool i only want this to run once when currencies or the info page loads once we got the url data then we can populate this page with whatever we need okay cool so all that's left is to do the jsx which is not as bad and i have this return here which we do not longer need so if i do div here let's give it the class name and guess what we already did the styling so if i do styles.info we can add the header component here because even though i clicked on this the header should actually still be the same so we can actually just reuse it and place it right there another benefit to components and then if we do main here let's give this a class name of styles domain okay from there we got div i want to name you styles dot flex start and then the div with inside will be class name styles dot tab container wrapper and then div inside that you can be styles that flex between okay and then within that we'll have the actual tab container itself so this one styles that tab container beautiful then we have a bunch of p tags here so i will guess i'll set it up do p tag so it has one two three four but they're gonna have pretty different differing class names this one is styles.activetab right there's a style for active and then just there's the tab item so price is the active tab this one will just be tab item tab item and we can actually give that styling to the rest of them okay so if that's price this will be market this will be trading view and this will be history okay and then closing div and then we have another div here now we have another tab container so let's make another tab container here and if you're wondering where am i getting price mark to captain trading view right it's over here notice how the active tab is this right because it's symbolizing that's the price that we're seeing cool so if you wanted to make it uh dynamic you can by just swapping out the class name okay so for this one it's gonna have pretty much something similar right so we have the active tab and i think the tab items on this one is one two three four five six i believe six one two three four five six seven all right seven so what i'll do is i'll copy this twice okay so this will give me six and then if i just add one more at seven okay but the thing is this is different so we need a one day and again i'm basing it off this guy right here right one day this guy is two days because you know on coin market cap you can see the graph at different stages this is what we're setting up so 3m three months this is the one year ytd and log okay cool then it's closing div closing div let's have a br here and this doesn't exist just yet but there's going to be a some sort of graph component here which is essentially what you're seeing here we're using uh chart js to generate this i'm going to be setting that up a little bit later so that's what graph is so for now i'm going to comment it out but just give you an idea of where that component will go okay from there let's add another line break and then we can start writing some more divs so the next thing i want to write is div with the little old name of styles dot flex between center okay this one will have just the class name of flex and then within that we have div that i'm gonna give the flex center to and from here we're gonna have the input and then for this input we can make its closing but for the class name let's just give it an outline of none and then for type let's make it a check box check box okay and then after this we could add nbsp for some spacing and then just do usd cool all right awesome so now that we have that input in the next line i already know i want to add a couple of spacing things here just to make it easy and then after that we could just do div with a class name of styles dot flex center flex center okay all right if you're still following along the next thing we're going to do is input and input again this one's selfclosing type equals checkbox and we add our little spacing and bsp and btc cool closing div closing div then we have a p tag want more data and then we have and then span with the class name of text and give it this color for the text which is just going to be hashtag 6188 fff okay cool and just say check out our api check out our api all right if you look want more data check out our api that's this little section right here and here's that usd btc thing that we just set up earlier the two check boxes awesome so that's the span then it's closing p closing div and then after that we have two brs here okay and then this doesn't exist yet either but taking a look at it now you're gonna see that these three things are grayed out that's because when i'm actually using them i commented out so just to take note of this we have three components to make for our info it's going to be graph it's going to be cmc price converter and it's going to be the chat so let's get started on that let's keep on crushing it all right so the next thing i want to work on is the coin name row component so again repeating that cycle inside the cmc table folder new file coin name row.js okay boom rafc save and coming back to table row let's import him so now this is what i was trying to import earlier coin name row from dot forward slash coin name cool then what we can do is uncomment it cool so there it is going name row it's showing up nicely and again we don't see the numbers because we didn't format any of the numbers yet it's not going through so let's finish that chord name row so i go to coin name row the only thing i'm going to need is to import image from next image okay and coin name row can you guess what kind of props it's going to take in if this is coin name row which should be here what should be here really for coin name row or maybe this would be better as the column itself it's going to take in a name and it's going to take in the icon right so if you guessed name an icon you'd be correct okay so what we want to do is coming down in this div let's give it a class name or css property of just flex and if i format it like this should just be an image the image of whatever icon is passed right icon the alt for this we can actually pass in the name and the size of the icon can be width 20 and the height of this can be 20 as well okay cool so if i want to display the name of the coin name that i passed in just add p tag and then just use that prop all right that's why props are awesome so i hit save there we go we got all bitcoin baby so that means the names that we're passing in isn't exactly right so we got to take a look at that what's just all bitcoin for some reason all right when it turn it should be ethereum tether b and b and so forth okay cool okay so yeah that is the coin name row and again we don't see a price or any numbers because if you look but not too trending to our format now we commented out but now that it's all fixed up and ready to go if i hit save hey that's looking a lot cleaner obviously this should be different icons but as we develop this project it will get sorted out okay so that's the coin name row let's go to the next part okay so what i'm thinking of tackling first is let's work on the price converter which again is just this little guy right here there shouldn't be that much to it and i think we get it out of the way now so to work on the price converter let's head back to the code and let's make that component so i'm just going to do one of these and you don't have to necessarily put it in the cmc table component since it's not really on the table it's on its own page i'm just going to make a new file and call it cmc price converter.js okay cool so let's do it rafce yeah there you go so going into that that should be fine and let me see on the table row or the info it takes in a lot of properties so let's accept those properties in the parameters here and what we're going to get is the from the 2 the from symbol the 2 symbol the from logo 2 logo and the price so those are all the props that we are accepting awesome let's go ahead and import a couple different things there's something called import converter from our assets folder so that's in our assets folder that we got let's do converter.png then let's import btc this is the bitcoin icon if i do assets btc.png cool and we're going to import the rest of the coins in here so basically the 10 coins that we want to use so i'm just going to take some time to do that now feel free to customize this this with the coins that you want to use okay let's do a cc let's do usdt all right this is tether xrp okay and then we got cardano any cardano holders watching this video how you guys doing i said cardano.png and we also got tara which is also looking pretty interesting assets slash terra png okay we got import and then asset solana png then we can import avalanche from same place then we got b and b from assets slash b and b dot png nice okay cool all right so that should be all the imports for now oh and of course we got to import image all right so if you want to read the image you need to import an image from next slash image there you go cool so that should be it for now let's go to the styles object now since there's not that many so say con styles equals and then for the styling the first one is going to be converter and for converter what we'll do is going to be flex items center justify dash between and then we'll have a bg bracket hashtag one seven one nine two four okay then we can do i'll give it a border a nice border gray here i keep doing the eight thing gray or gray five hundred four slash ten and then the pixels px5 py five as well and let's also make it rounded and make it extra large the next one we have to do is the convert button and for the convert button it's going to have a bg of this 1d 4ed8 okay with p 2 p x 5 and i'm going to do w min with rounded excel mt.5 cursor dash pointer and then a hover opacity and then for the opacity you give it a 60. okay comma here and that's going to be it for the styling cool and if i do an altsy that should be easier to see and if i went too fast feel free to pause it i think you guys got it though this is just it for the styling cool so working my way down i'm thinking of making a function here so depending on what is the coin icon i want to load a different kind of image if it's bitcoin right then load the bitcoin image if it's ethereum load the ethereum message right that's why we have all of these guys set up what i'll do at the top here is say const coin icon is boom boom it's gonna be just a bunch of switch statements so the first one is going to be switch from and then the case will be bitcoin okay and if it's bitcoin then return this image oops and return image and self closing and for the source it will be the btc which makes sense if it's bitcoin and the class name is going to be equal to rounded let's make it rounded full okay and the width will be 50 and the height will also be 50. cool and then the alt oh we can just make this blank cool so that's the switch for bitcoin you're gonna do this again for different cases for different coins so with that said there's nine more to do and to make this a little bit faster all we have to do is copy the case and just repeat it nine more times so if i go here that's one i don't know maybe it's either just to write it all out so like i said we're doing one for each coin so this one will be simply just ethereum so ethereum and for the source just gotta put eth all right that's it that's all i have to do to switch it up everything will be pretty much the same the next one is tether and the source is usd t okay after we have b and b and b so yeah just put the corresponding ones where it belongs we have a usd coin which will just be usdc then we have xrp which will have the source xrp cool this is going to be super cool when it's done and we have our cardano then we have terra then we have solana avalanche i know i'm moving fast so the cetera should actually be terra this will be seoul or solana this one will be avax or avalanche and awesome cool so then we just need a default case here so the default will be return image as the default can just be bitcoin so to make a bitcoin we can just say src equals btc do the class name of the drill rounded dash full width 50 height also 50. and for the alt we'll put that cool so that's our switch statement let's actually work on the jsx so to work on the jsx let's come a little bit more down okay all we need to do first is erase this guy and for the div let's just say h2 and let's write from symbol and then two symbol is that how i spelled it this should be symbol oh yeah i see it two sim nimble let's use two symbol all right cool gucci so two symbol converter right this line what this line is actually doing is when i click on ethereum it's the eth to usd converter that's literally what we wrote out so going back to this guy converter that's going to be it for the h2 then we have the br here and we'll have a div with the name styles oops skip partially emitted expression wow styles dot converter which will hold the div which will in turn hold another div with a class name flex which will have another div with the class name avatar dash container okay cool then we have a from logo and from logo with the coin icon right this is where we're calling that function to see what the coin icon we should be displaying is and if the from logo exists run it through the switch statement if it doesn't make this div empty that's what we're doing here with the ternary cool then it should be closing div and our favorite spacing thing and bsp okay awesome so it's closing div and then an opening okay within that we'll have a p tag and this is where we just want to show that symbol so we'll see from symbol followed by h4 that shows the from so i'll be like btc bitcoin okay so it's closing the closing div and then in the next line we'll have another one with the class name of flex with class name text dash three excel and in the p tags that says one and it just says n bsp and another one let's keep the nice spacing consistent okay and that's closing div and before that closing there we just need another one and this will hold the actual image itself the alt source will be the converter and the width will equal 40 okay and then the height will also equal 40. okay closing div and then this guy again and bsp and bsp and then let's have another div here this one will have the class name of flex followed by inside of it we should add the two logo somewhere so let's add that right here to logo and bsp and usb okay cool followed by another div where we have the p tag here with the two symbol two symbol and then another not a p tag but an h4 kind of similar how we did the from we're gonna do that for the two and this will just have two so that's closing div closing div then we'll have a p tag here which just has class name oops class name text 3xl and let's include the price in there that has price okay and that should have closing div in between these guys last one will be div class name the styles dot convert button yep and it will also have an on click not have on click just yet but that's fine it's just to convert so this button doesn't do anything yet but you can add that functionality later on so for now let's leave it save cool so let's just go back to our main page okay and then one thing i want to do next is i'm getting tired of looking at this and seeing just bitcoin let's go ahead and fix that by coming over to our code go to coin name row and let's finally add all the things that we're gonna need so if you remember the what's it called the switch statement that we made if it's bitcoin do this if it's ethereum do this we're gonna do the same thing for coin name row okay so what that means is import all the images from there so if you remember i have it saved i'm just gonna do something similar which is gonna be this import all of these assets for coin name row okay cool and then from here let's give it some styles so i can go to con styles style then i can say the styles equals coin name row coin name row and it's just gonna have a flex of an items dash center and then the buy button is gonna have the css yep it's gonna be bg of this color which is just gonna be hashtag one a one f three okay and then the text will have this color which is just hashtag six one eight eight f and then it's just p one p x dash three the text will be small and then we can say rounded dash l g then we can say cursor dash pointer and then we're gonna add a hover with colon and then the opacity of the hover will be dash fifty okay amazing so after that i think that's pretty much it for styling there's not much we're gonna add i remembered we have to add the buy button that's why it looks a little wonky that's okay and then we also have a property called clicked in here because that's what i had so clicked okay that assets usd let me just check something oh okay because coin name is in cmc table that makes sense this doesn't have to be in cmc table this can just be in components yes update imports so if you remember where we're using coin name row which is going to be in here the path should it should just be dot forward slash coin name row awesome so now if i hit save there we go okay cool and again no css yet because if i go to coin name row i'm not using any of the divs that i set up here so we can actually do that by coming down below here and the main div it's just gonna be a modified version of this so what i'll do is i'll just change it up so this one yeah this was the old one that i made let's update it with styles dot coin name raw okay and let's just erase this we're gonna put it back up starting fresh if i say div give this a class name of mr three and then flex and then the on click of it will be the clicked property that i passed in okay and then cool well then here is another div that's going to have a class name of mr.2 and this is where that coin icon so now it can actually be different because it's going to call a coin icon function that we're going to make in a bit where is this okay coin icon awesome and then over here we just need a name property and that div can be closed there put some space this will be the p tag and for this you can have if the name is equal to bitcoin or the name is ethereum or if the name is tether essentially if it's one of the top three oops to then what i want to happen is it should load a spam okay and this will make more sense in a bit but there's gonna be like a open modal thing here but for now it's just gonna be spam class name styles dot buy button and it's gonna have an on click that i'll set up later but we'll just have buy here cool and if it doesn't then we're just gonna have oh let's change this should actually be here and then we can just have the fragment here there you go that looks good to me go ahead and hit save let me see we are missing one more thing oh i know yep we're not using icon yet because we have to make the function so if i come back to the top here we go above the return here we're gonna set up the coin icon function which is gonna be similar to what we did last time so it's just gonna do cons coin icon equals this okay switch takes in a name and again the case for this will be bitcoin colon and if it is bitcoin what we want to return is the image of the bitcoin right this is how we decide which image to use without making multiple it's got to do it once like this a class name equal to rounded dash full the width equals 20 and the height equals 20. if it looks familiar that's because it is so what i'll do is i'll just copy the coin icon function from the info.js okay so what i ended up doing was copy the coin icon function from the cmc price converter because it's pretty much the same thing and i paste it in there and we should be good to go right bitcoin ethereum now the only thing i would change is the height and width of this it should not be 50. so what you want to do is to change multiple is if i do ctrl delete ctrl d all the way until the last one it's a cool neat trick okay so now i'm on all the 50s so after you use command d or control d just press backspace and then just press 20. boom look at that change multiple 50s at once save you and me the headache so hit save that's looking way better so the only thing i would fix is the formatting of the and the buy it should just be like a one single row so we could fix that let me just go over here and see what's missing okay so i'm taking a look at this i think i see the problem my autocorrect put children when this should be class name oops like this hit save there we go that's more like it and if i go back to here okay and if i go back to cmc table i remember that these are the three things that i'm passing down and this is a clicked property so if i go to coin name row we can now add the on click click and that should link us with our page so let's see if that works okay so if i click on bitcoin will we get bitcoin okay so if i click it i'm able to see the correct url it should say bitcoin and the price and if i click on this it should say ethereum and the price awesome so the url is working but it seems like the page isn't so let me just try something i'm just do ctrl c let's do that like dev again just to restart the server it's going to make a new one for us it's been a while since i did that awesome there's the api call click on bitcoin and we get nothing here so let's see what's going on all right so our console is fine no immediate error blocked by client so let's take a look okay and again we don't see anything here because i just remember we need to import it so let's import the cmc price converter from that components to the cmc price converter so let me just double check if that's right yep we gotta do it one more time and we gotta go to components and we're gonna go here so if i hit save and if you remember let's see this guy right here that's where it's passing all the information if i hit save now let's freaking go that's bitcoin guys awesome that's our price converter in action if i click ethereum eth the number is different let's go this is what it is in usd that's what we set up awesome so it looks like it's dynamic that guys is the cmc price converter component okay up next remember we still have a couple components to make so in info we want to start working on the graph component what's the graph component i'm glad you asked hassam what you're going to do is go to click ethereum and if you notice this little bad boy right here this graph is something that we're getting from chart js and we can set that up in a component and make it reusable it's just a random graph i'm sure if i refresh this will it be the same nope it's different so see how it's generating a random graph it's just for show this is how you can make it look like this don't worry about that so let's go ahead and get it working so to get that graph working it's a component so you know what that means go over to your components folder and let's just make a new file and we can just call it graph js amazing and then in graph.js we can set it up like this ctrl b and let's import the things that we're going to need so what we need is import the line all right we need to get the line from react chart js next we'll need import chart right from react chart js nope we actually want this one from chart js and then slash cool so these are two imports that we need this one doesn't need to be the structured it can just be import chart cool and if you're wondering how i got the random points on the graph right next up the random points to get that i just made a chart or an array of random points an array of arrays if you will so kant's random points is equal to an array and you know it's literally just random numbers that i wrote out which i'll just paste right here so feel free to use random numbers for you or you can pause the video and this is it for the random points all right cool and then now you might ask how do i pick which set of random points do i use right these are the about five possibilities but remember how we generated a random graph image well we can do the same thing here if i say const get random points and that's a function right what did we do well we did cons random integer which will be a random index that we'll use and we want to do is math.random which is just a random number between 0 and 1. if i do a times four here then it's gonna be zero to four the thing is it's gonna be all the numbers between zero two four which is like zero point one one one one one three point seven seven seven six so let's map that floor it to round down and then add a plus one because otherwise we'll never get to the four we want to get to the four this is making sure instead of just math flat fouring it down to three let's say if it's three point nine nine nine nine we wouldn't get to four we would actually just lower it to three this ensures that we get that number as well so there you go get random points that's good with me the next thing we should have a graph called old graph a variable called data which is an object and this is essentially the labels for our chart so if you look at our chart this 604 9 of 1204 that is what data is going to represent so data is an object which has a key of labels which in turn has an array of all the times that you want so again in theory they could be whatever you want what i did was just made like 904 it just feels more realistic if it's not an exact number but this could be whatever you want as as long as the time is incremental so there you go that's the labels awesome so that is the data object well it's the labels part there's another property here i did like a comma right after this array there's also a data set part all data sets okay and this is also an array it's an object as well and basically here you define the properties of your graph for example if there's a fill i want to say false okay so same thing what do you want the line tension to be the custom line tension can be 0.1 and then what do you want the background color to be background color can be red border color can be quotes three seven seven three f five border cap style can be just butt and border dash yeah so these are just all properties of the graph you can feel free to just copy what i have this one is the dash offset which would be 0.0 there's a border join style property and that is uh okay then for point border color there is hashtag seven three f five okay point background color it's going to be three not three actually oh actually it's the same one three seven seven three f five okay then there's gonna be point border width you can make that a one and there's gonna be a point hover radius which can make a five then there's gonna be a point hover background color yeah it's very detailed and this will be the same as well so it's three hashtag three seven seven three f5 and i know what you're saying i see it too thank you nice catch nice catch cody cool i hope that every time i say a name that you guys pay attention more so any codies i'm glad you're watching okay awesome so then we have a point hover border color and again same color keep it consistent three seven seven three f so that's the point hover border color and it's not however it's up okay let's do a point radius which will also be one and there's a point hit radius which is ten and there's the data right what is the data it's basically gonna take an array that we pass in so you can manually put the data and it'll be the same graph throughout or we can do a get random points to generate a random array of data that we have which is one of these cool pass that in just add the commas here just because for formatting and then we need to pass in and const options or create a const options right so then the plugins oops plugins is going to be this the legend is going to be this and display dot false is going to be this okay cool that's looks pretty good to me so far but one thing i want to mention is if you don't have chart js make sure you have it you can check by doing a control p and checking your package.json and just double check if you have chart js if you don't react chart js2 if you don't then you're going to need it in order to get this it's going to say like dependency or module not found okay but we did all that in the beginning together so if you're watching the video awesome you paid attention so you're ready in terms of styling there's no styling all you got to do is make use of that line component right and this line component just pass in the data as data the options as options this is why we made all those variables we're going to just pass it around all in here okay and then the width can be of the table could be our graph would be 400 and the height let's just make 150. okay if i save this what we got to do next is in our info we can bring the graph the graph out and we also should import said graph so import graph from the forward slash components and graph save and if there's any errors at all it'll yell at us but let's see if i refresh this just cuz click on ethereum oh okay we have the graph but it looks like it's not generating anything see the console any errors okay so that's a good sign we see a graph at least uh what that tells me is that there's something wrong with this data okay it's not data's not showing up because we're getting it from here and oh i haven't finished the function so i got the random integer guys but we still need to return the random points bracket random integer and then we should see something beautiful and every time i hit refresh we'll just see a random graph that was the same one there we go cool so that's the graph component in our info page i think i'm pretty satisfied with that let's work on the next one so if we take a look info we can start working on the chat part okay and then for the chat component same deal if i do command b or control b go to components folder let's just make a new file this one will be called chat.js so it's just chat.js fce boom cool so once we're here let's get any imports we might need which is just going to be for now import chevron chevron down from if you guys remember this is one of our assets it's svg and it's the down one cool next we want to just import let's see do i have this in my package.json let me do one of these oh okay yep you can install it later but for now uh we can do a chevron up from assets spg chevron up okay next we can import uh shiba let's get sheba here because we can do slash assets slash sheba.png and i forgot to mention too if you're wondering where of all this is coming from if you look at our finished app oops switch to this one finish that this is this little chat area here we can do a live shiba inu chat you can put whether you're bullish or bearish right and that's your status and then you can put like what's happening on bitcoin cool it's like this little bonus feature that i want to include much later but we can set up the front end at least okay and that's where it should go boom if i click on this as you can see there's like the perfect slot for it right here yes sir awesome so let's erase that and let's get started yeah so we should get the sheba icon since that's the chat and then we do import image from next image next image amazing okay cool while we're here let's just start up the styles sometimes i like to do the divs first and then it makes sense where these styles are coming from but for now let's just do the styles first so the first one is a div called bullish label right that's the little like toggle thing and then you can do a flex cursor dash pointer you can do an active bg green dash 600 and then we could also do an item stash center okay then after the item center what i want to do next is a text green 600 and see we can give it a border let's make it the border also green dash 600 it's the exact green that i want to use h min px2 and then let's do a rounded dash large awesome cool okay if there's a bullish label there's also a bearish label if you're feeling bearish on shiba inu regardless what you have this is if you feeling bearish which will have very similar features except it's going to be mostly red so flex to pointer active bg dash red500 items center text and then we'll do a dash here because what i want next is this gray brackets with because we do we want to do an ea here 3 9 4 3 okay that's the color and for the border give it a border of red and this one will be actually 600 and then it's going to be h dash min and then px2 and then rounded lg okay awesome dash white border border dash green dash 600 and an h dash min and a px2 and a rounded dash lg awesome and then we're just gonna do active bearish it's exactly what it sounds like let's just do the css for that which again literally similar to the other one except different color cursor dash pointer bg dash red dash 500 items center text white border board dash red dash 600 h min px2 rounded lg awesome and save booyah okay looks pretty good to me the next thing i want to do is come down here and i guess i could set up the toggles right now what i want to do later on is get a couple state variables here so let's do import comma and we can say view state and while we're here let's just get the other hooks that i'm using which is use state and use effect which we'll get into later and use context okay again we're only really gonna use use effect at the moment we'll come back to this okay so for the chat there's gonna be something called message that i'll set up now set message equal to use state and the initial state is empty string then we also want to set the state for the bullish value or whether it's bullish or bearish bullish value okay set that equal to you state and the default will be true whether it is or not it's going to toggle so this state is setting up a toggle nothing over here because we're not setting up the functionality just yet but we'll do the front end and for the front end it's going to be a couple things but i want a fragment up here because it needs a parent component and let's see this is going to have a div and now let's insert all the class names so this one will be styles.chat okay styles that chat go inside of that div and the child of the chat will be the flex between the child of the flex between will be these two p tags that i'm thinking of using so let's do class name is styles dot bold text and this is gonna be the live sheba in your chat this is that text that you see if you go over here this is what we're writing right so that's the whole section i'm making and then remember there's also a c more if you saw that let's actually make that here this one actually doesn't need a class name it's per se but it should have a text of dash eight 6188 fff okay well then there's a c amazing then after that closing div let's have a break here and let's put the rest of the divs so the rest of the divs it's all part of the chat and this div is going to be the chat container itself so what do we do to get it to be the track container is styles.chat container okay within that same div let's do a class name this one will be the styles dot flex between once more and in the flex between right we'll have this div which should be flex container styles dot flex or netflix container flex center and flux center is going to have a div no name needed with containing the image of the sheba beautiful shiba inu so the source is going to be shiva and again something i just want to start doing now is i want to see proof that you guys are actually watching the whole thing and not skipping around so if you're watching to this part of the video congratulations you made it this far we only have the smart contract functionality a little bit of front end and then we're done so if you're watching this you're at this point with me right now and you're almost done go ahead and comment down below okay so if you comment shiva down below i know you finished it so that's gonna be our little secret so let's see how many people come in chiba after that image what we can do is it's going to be closing div and then after that closing div there's another one and then it's class name text left okay and text left and let me just add this a margin right ten cool and there's going to be this little b here which is just track if you want you can put this make this your own this can be like your name so this would be lance for me or kazi or if there's any um ables watching right this is how you this is where you can put your name so i'll put lance why not david already put his name so i'm going to put my name so let's put lent and let's go underneath here we'll have a p tag with the class name of text dash gray dash 400 and here for the p tag you could put your at and if you guys want to know it's all it's just wants that's my tag will be to put your own then it's going to be closing div closing div all right and then within here okay closing div closing div within here let's do a class name flex center oops let's flex it in the center and let's add another div here this div is going to have a class name and this one's a little tricky all right essentially if the class name is not bullish value the opposite then i want the styles let me put this here and let's just format it so you can see it a little better okay cool so not bullish value then the styles dot bullish label and then here we'll have the or then we can do styles dot active bullish label okay cool and after we do that we can add on click this is still part of that opening div by the way and what we want is that function i think i made it earlier yep set bullish value this is where it's gonna go so here we can price set or make it like this so it doesn't run right away except bullish value and you want to set it to true okay so when i click bullish value setting you set the bullish value to true constant so then it's just the closing like carrot for the opening div and what you want to add here now is the chevron up so add the chevron up here because we're bullish and we think everything is going to the moon and for the fill we can just do a hashtag one seven c seven eight okay for this we're gonna have small the class name will be ml1 and then we're going to have bullish here okay then we're going to do end nbsp and bsp cool and then after that another div if you guessed it this is gonna be similar to the one we just did but for the bearish one so i'm gonna add space here class name is curly brackets so if it is bullish value right not the other way where it's not then i wanna load styles.bearishlabel and if not then i want to do act styles that active bearish label right so this is how we do it so we can make conditional class names right before it was like condition and conditional rendering of components this is how we can make the class names conditional okay and then after the class name let's add our on click right if the last one we set to false what should this one be exactly you got it this one's gonna be sket bullish value of two false you guys are crushing it yeah if you understood what i'm saying we speak the same language so this should be instead of chevron up chevron down with a fill and the fill of this one is going to be not that quotes hashtag a5 to be to be yeah all right now cool and then we'll add another class here small with the class name of ml1 and we can just do a bearish here awesome then it should be closing div closing div closing div holding down close and dip and then awesome here a couple more things to do we're gonna have another div class name let's just flex on them and after we flex on them let's make a div within that let's make a div within there and let's just do a class name flex items dash center text make the text green oh it's because of the quotes isn't it green dash 600 okay and then let's add a chevron up here with the same fill as before all right which same fill is before actually no the fill is actually different now that i'm looking at it should be hashtag 22 bc 64. okay that's the fill and then we have another small here small and the class name of the small is ml1 and we could say bullish yeah so for this part we want to do if it's chevron up it should be bullish right closing div and then we're going to add another and here and nba and bsp perfect cool so the next thing i want to do after that is another div here let's put the class name of flex items items dash center text dash red and the red color should be 500 okay and then that we have the chevron down the fill for this one is gonna be an a five to b to b just like before cool and then we're going to add that small class again yep of the ml1 yes sir and then we're going to have a bearish small here yep cool closing div closing div here we'll have the input which is selfclosing and i'll just have a class name of styles.input and then you can put a placeholder in here and the placeholder should just indicate what you should put in the input which is always going to be what's happening on btc or whatever the value is always going to be message and what we want with this input is every time we type the input field we should be recording or capturing that input in a state which we're setting up earlier so we can put e here for event and set the message to e.target.value all right just to visualize it if i were to type hello h the on change is triggering and i'm setting the state so the state of message is going to be what guys yes it's just going to be h if i press e again on change triggers it's going to grab e to target that value which is h e setting updating the state of message to h e alright so the idea is when i post i just have to take whatever the state is for this and then post that all right so that's what we're setting up here e.target.value is how we can get it okay then it's the closing tag for the input now let's make the button or at least the container for the button for it so that's why i'll say styles.postbuttoncontainer and here again we're making the button so it's up close and we're going to have label equals post all right and this actually doesn't have to be capital and then we have on press all right that's an interesting one i'm going to send message and if you notice guys this is actually a component that doesn't exist with a function that doesn't exist yet remember we're not doing functionality just the front end so don't worry about that cool so over here um make a comment here and i'll say basically the chat format the messages and also we want to insert the chat card component so there's a chat card component that goes into this okay so if i hit save there you go so this should be it for the chat let's see if we can it's not going to be working but it should see some front end for it so i'm gonna go back to info comment this guy up let's actually get the chat in place by importing it import chat from there hit save voila there she is and there is your handle that you imported bullish or bears hey it's working nice the arrow though is a little funny so i think i have to go back and fix that okay yeah so there's that funny little error thing but it's fixed when i click on it that's probably because if i go to bearish label the item center i see okay cool save that bam and now we're good to go we're gucci another thing that just happened is when i have a message there's some ui elements over here that should pop up it should you should see the chat and that's what the chat card is over here and there's also the button that we need to work on next all right cool so we're gonna do the button and the check card in one go so for the button super simple just gonna make another component and literally call it button.js cool and button.js all you gotta do is come over here rafce and the button what all it is doing is this post button right here notice how we don't have that well we're going to include it in this one so the post button is just going to be this with const styles the styling for this is super minimal just the button and we can just say bg dash this and the point of us making this into component is if i ever make a post or just a button anywhere else i can just use this button component and just pass in the name especially if you know that the styling is going to be consistent so that's what i'm doing and showing you guys right here so that's the background px5 and py dash and we'll do a rounded dash launch oh that's it that's not so bad then for the button if you remember it takes in two things it took in the label of the button which we know is post you see that and this on press it's not actually an event that's just still the prop name passing down a function that doesn't exist yet okay so let's take that into account and the structure the props that we're getting and that's label and on press this way i don't have to say post or prop that label you with me cool so then for the return oliver returning is literally a button right and that button is just gonna have a class name of the styles that button and it's gonna have the on click right now that event is happening on click of the on press or whatever i passed down and the label for the button is simply just going to be like a label like this okay all right so that's the button let's go ahead to my chat do one of these bring that guy out there's no on press yet so let's just make an empty one so if i go up to here and say const send message all right we'll make on this we'll make this functionality later on but for now we can just leave the plane alright and just to not confuse you guys it's not there yet actually no we should keep it there also be undefined awesome cool so we got this guy out what we need to do next is import that button import button not from web3 ui kit but from forward slash but okay cool now going back to this hey there she is there's the post i'm liking this a lot better now that there's a post button okay let's go i'm excited guys we're almost done and the last thing is the chat card which is gonna be a little bit more styling okay and then for the chat card let's just make that component as well new file chat stamp there's a lot of components here it's gonna be chat card chat card.js okay rafc oops not rfce boom there we go now it's there i think for the button i didn't fully finish it out before i press tab so this is our afc this is rafc if you want to know the difference the export is in line here this one is export default cool doesn't really matter as long as you're importing it correctly okay cool so what we want to do is import a couple of svgs from here let's get the comment so that should be the assets slash svg comment yep we have that and let's import the heart from same place dot forward slash assets svg heart okay i don't need a comma here import more horizontal more har santo from forward slash assets forward slash svg slash more horizontal we got it we got a share one oops we got share we also got bearish oops sorry now remove that part so we also got share from assets slash svg and we also have import image from next image there you go okay cool that's gonna be it for now there is two more things you should import but i'll talk about it when we get there what i'm going to do next is set up the styling and for the styles let's do post action that's a div that i'm going to make later which is going to have properties of flex items center then we have check now that check card this check card and that's gonna have border with dash b border dash gray dash s700 pdb dash and then mb6 all right cool chat card wrapper was next okay all that's gonna have is flex items dash center justify dash between all right and then after that it will have a flex center which will be a flex items dash center and gray text text gray 400 and we'll do an ml2 and we'll do a 400 and text gray 400 flex between flex justify between then we're going to do a message content which will just be my four empty sorry guys i didn't notice that menu was up there how's that better cool then we'll do a labels container and we'll do a flex w dash full with an ml3 awesome labels contain i think that's it yep that's going to be it for the styling if i go save here we didn't see this but later on we're going to be passing props to this chat card based on the formatted messages so what i want to do is just set a lot of that up right now so to set that up let's destructure it go over here and we'll do like a content by default is going to be empty string time stamp oops empty string the timestamp that we passed down sender we're passing down we're going to pass down that's bullish state whether that's true or not the sender avatar the likes and the comments all right so cool there you go from there let's start working on the return so let's set it up so the parent div that i want to put here is going to be a styles chat card all right that which should be pretty obvious from here we can set up the wrapper chat card wrapper and then within that div it's always happens within that div we're gonna have the styles.flex center yep and then in here div with no name okay and within that div we'll have the image that we imported and the image will just have the person's avatar which will be 40 and height equals 40 and the source is equal to sender avatar and when we do this it's gonna be no picture because sender avatar is currently undefined we're not actually passing down anything but when we do it's gonna make more sense okay we're almost done with this part class name it's just gonna be uh this rounded fold to get a nice rounded image and the alt can just be uh avatar okay cool next just be closing div that's it for that okay coming back below here if i do an alt c you guys should be able to see a little bit better and now if i do a div with the class name styles dot labels container this will have the sender like whoever sent that message again will be undefined because it's not there so this will have some nice spacing and i want to put this nice dot with the space here cool all right and yeah let me see ready oh no it should be center and then it should be space and then dot and then another one there that makes more sense cool after that we'll have a span tag here give me one line class name of this will be the gray one specifically styles dot gray 400 and then that's where you put the time stamp so when we pull all the images each card should have the timestamp of when that image was sent so that's something to keep in mind for later and we're gonna do the same thing here cool and we're gonna pass in if they were bullish or not so if they are there's these two buttons that i want to set up they don't exist yet so we're gonna have to make it later so if they're bullish there's gonna be like a bullish filled button and if they're not bullish then they're gonna be bearish so there's a bearish filled button again these two things don't exist yet so i'm gonna comment them out okay dave closing div then we can do a more horizontal here and then closing div and then the important part is this p tag because now we're getting into the like the message content and that's why this div is actually called uh styles styles dot message content all right do i have message content i do all right that's good to know and the content of it will just be the content that i pass in which by default i put as quotes if there's none cool leo so that's the p tag we got div here and for the div this will be the flex between and within that flex between div i want to put another one with the class name of post action so styles dot post action and there's gonna be something called commenting which is something that we're going to have to set up as well again doesn't exist yet then it's going to be a p tag class name styles.great text then great text will just have the comments of that post cool and let's do another div here this is another uh style step class styles that post action okay p tag class name styles dot gray text and the gray text will just have the likes all right oh actually do i have a comment oh i do i do have a svg comment i don't it does exist i just started thinking wait we do have comment we have heart we're good and there's like one more post action that's going to be that share icon so here we just have to do a share yep and instead of likes this can just be share yay cool then it's going to be closing div close div close div and that is the chat card so really we just have to make two things the bullish button and the bearish field button so let's just do that real quick so to get started making this bullish bearish and bullish field button what i'll do is go to components and you can organize this you don't have to but keep it clean we can just do and inside the buttons folder we'll have all our button component which will be bearish filled dot js you know what to do here yep exactly and let's just import the chevron down which i've run down from i love that it suggests that now that's awesome cool in terms of like divs what we could do is something like this cool class name who shall be just a flex property here with an item center want to center it horizontally we'll have the chevron down and that fill color that we used which is a 2 or 92 a5 2 b2b business to business cool and uh stop closing awesome all right from here let's do a small and this is where we do that class name thing with the ml and the text color which should just be something we've done before which was the i believe was hashtag e a three nine four three a sports three nine or three cool small bearish this is the bearish one right yeah closing div that's good to go so it's the same thing for bullish so what we're gonna have to do is this okay so in buttons new file bullish build.js cool and instead of chevron down let's do chevron up and for this guy race enter class name same thing flex property with an item center and within here chevron up with the fill attribute of hashtag one seven c seven eight four that's it and then oops i just want the closing div and then small with the empty stuff or the ml i mean ml with the text of the same color oh it's gonna be hashtag one seven c seven and we say bullish okay save that now what we can do is comment this bad boy out import those two things import bearish field from bearish field and import bullish as well so i'll hit save see this is not coming out to failed oh triple l there we go save that in there and if we go to chat if i comment chat card out oops that's not it gotta fix this guy then insert check card for message all right so we're probably gonna map through something or format something so keep that in mind we'll just have one check card here to test it out let's do import chat card save see any issues oh there's no source property oh yeah no source property required that's right so for source it's the sender avatar but none of that exists yet so i guess what we could do is this we can make it so temporarily source is equal to quotes and uh put this guy in there what is it like that can i parse this cool so we just need a sender avatar quote here actually don't even need to do that all right let's just try that again okay cool so if i said save it should be like a image is required to source property that's fine what we could do is go to unsplash i already have it saved there's a dog which one do you want to be let's be this guy oh wow copy image dress it's going to have a lot of stock photos in it that's totally fine what we really want is just to go to chat card where is our image instead we can just say quotes oh not a valid host name oh man i forgot that we have to update our next config let's see is there an image i can use s2 coinmarketcap.com let's go to here okay let's just use something that i already know should work which is just the assets does that work failed to parse what if i just import shiba from that same file let's go to the assets oh no that should work shibo png png and then we can say shiba there we go awesome there it is and notice how there's nothing over here because it doesn't know how many comments there are and it doesn't know how many likes there are and there's no message but if we did have message content it's here right hello world there it is so now you can see hello world what needs to be here is the sender but as you can see if i had multiple chat cards look what happens guys going to chat try to imagine if i had multiple of these so let's do check card save boom so now i can have a whole chat different people different likes and comments on each post and there we have the front end of our chat app awesome so i'm gonna do is just erase this hit save and let's move on to the next thing okay next thing you gotta think about is if you remember it on the finished version that's what happened when i click the coin itself but if i go and hover over the price there's also this price section here that we should set up so to get that going what we need to do is go to our menu and remember how we set up currencies and we got info it's gonna be literally very similar so if you look at the url for this it's currency price so that what that tells me is that we need to make the price js and get everything we need so let's make price.js and price.js if i just do like a const price equals something like this and we can just add the export default price now we're good to go all right so if this exists which means we can go to slash currencies slash price all right test this by having a return here and the return can say hello save now if i go to slash price hit enter or will i see oh hello is not defined oops let's put it into a div now we can say hello because it thinks it's a variable and there you go so now we loaded that page that's all you have to do to make another page on next js which is beautiful what we'll do next is literally set up the price page so what we need to set this up it's essentially the same thing and what i mean by that is there should be an import here and let's import the hooks that we'll need which was use state and use effect from react and what we need also is import let's see import header oops header from here because it's going to also use a header there it is components dance find it header cool all right once that's done i think we can save here and there's actually no styling we need to do but we do need to use this use effect and set up the states so to set the states literally the same as info so if i do uh control p go to info click on it this is everything we're going to need same thing and also the get url data is literally the same okay let me just copy this real quick and as i'm about to copy it one thing i noticed is the price for this one should just be number just to get the formatting of it correct number there you go that looks way better to me and the number should actually end here yep there you go this should be a number get the price format it to local string nice cool so we can get that and all of this because price is going to be very similar it is looking at the programs of the url but we clicked which we're making dynamic we're creating a dynamic page getting all this information and all we need to do now is set up the divs or the jsx rather and what we need to do for that is just include it's actually less than the info page it's just the header with a component that's called coin details right again doesn't exist just yet coin name will be coin name uh price will be price the coin symbol will end up being coin okay and is that everything we'll need i think so cool so again this doesn't exist yet so let's go ahead and make it components okay and then to make it what i'm gonna do is in the components folder new file and it's called a coin details i believe yeah coindetails.js okay coindetails.js the drill awesome hit save then we can also hit save over here and what we could do next is for the coin detail let's import everything we'll need which i'll tell you is just import image from next image okay and then we'll import rates look how much you're used to we're getting out of rate from dot forward slash cmc table i believe oh okay i see it cmc table oops cmc table let's get the rate cool next we can get import the coins remember that view coin details or not view coin details the coin icon we're going to make that literally again so we're going to do a from btc or import btc from forward slash assets slash btc.png literally if you want to make this process faster we can take from here so what we want from this is not info but i think it should be the price converter yes this is what we need so we need to copy all of this and then if i go to price what did i just do okay i'm doing coin details though so go in details it's the same path yeah so this is the same so with this we can erase yep cool we already have next image as well boom and another thing we can import see another thing we can import is the coin icon function which is going to be the same as info as well i mean the price converter as well so let's import the coin icon function copy all right and the size of this is going to be the same so that's good so coin details paste there we go we're using all of it except for rate that's fine and while we're here that's the function that we're going to be using to get the image let's do the styling next so click on styles equals object the first div that we're going to label is coin details coin details just has a minimum height screen and the text of that's white okay next is the coin details link coin details links which will just have a flex property mt3 collect stash wrap gray button mr3 and bbgslate d800 px3 pyone and the rounded dash excel all right this is a great project for those guys practicing front end this is very front end heavy border left ml10 dash pl5 border dash one and a border or gray and eight hundred okay then we have a title one the title is just gonna have gray text and it's gonna be 400 with the white space of no wrap margin of two boom all right so then there's also coin details wrapper right that one is just going to have coin dash details flex max with w with screen excel that's the size that we'll use then we want a margin auto and a pt of 20 okay then we got coin symbol this one we can size it like this g slate as the background and we have the flex property so that we can give it an item center and a px2 and a rounded dash excel okay after the coin symbol let's style the coin info and that will also have a flex property so that we can give it a justify between and mt10 p4 a border dash t or border dash gray actually 800 as well and then we can do a coin rates with uh w dash full flex property so that we can do an item start justify between and then we can do a flex between okay so it's flex justify dash between awesome so that's all the styling feel free to pause it if you just missed any steps or if you're not sure where your styling is wrong make sure it's all spelled correctly and then the coin details if you notice it takes in a couple properties so if i go back to price it takes in these three props let's destructure those three over here and it was just a coin name coin symbol and not coin price just price awesome and then it's just this function right here pretty long main thing now is just the jsx which we can set up now cool so funny enough there's actually a main div here main tag i want to decide to use that instead okay and then there's a div that has no name which then has the class name of the coin details wrapper so this is styles oops styles dot coin details wrapper and if this is the wrapper that's the wrapper this is the main so styles dot coin details cool okay and then within the coin details wrapper we have this div which will just have a flex property and we could do it column that's the direction and w fit okay and there's a div class name of flex items dash center here we can insert that coin icon function because depending on the dynamic url that comes up like whatever i clicked that should be the corresponding icon so let's actually get it by calling the function okay then we can add a anonymous div here and with the class name of justflex and we can have a p tag with the textthree excel and the coin name cool and there's a couple of spacing things here so i'm just going to paste that in there we go okay then there's another ptype p tag here this one i have the styles.coin symbol one and here is where the coin symbol will actually go so if it's bitcoin it's gonna be btc that makes sense closing div closing div and then we have a couple of breaks here br for spacing so copy this and it should be two three four five about five is good cool that way i can just get pretty precise by just adding that okay then we can do a class name of styles dot coin details and for here this we're gonna have a bunch of buttons so let's do a div class name styles dot gray button and we can do a solana.com okay and i wanted this a couple of times and it's not all gonna be solano.com but the div that we use is the same so it's gonna be two three four five two four five six okay cool these are all gray buttons the content within them is different it says explorers community chat source code or it doesn't have to be camel case so it's good and the last one is the white paper okay again these don't actually click into anything but if you wanted to make them work you can then we can do br here and we can add uh topics just the word topics here oops topics cool so that was like the coin details uh this actually bitcoin links cool and now we could just copy this because i'm going to do it again here okay and this is coin details links and topics all right so it has like two css things so we can give it an array so it's not going to yell at me so there's two class names style.com details links and topics and there's only four buttons here so one two three four on the topic section and the content of each div is going to be different it's not solano.com it's going to be mineable and then pow 256 with a store of value okay cool then for the div here we'll do a class name of ml ml16 then we'll have another div here with the class name of let's see this one actually should be a class name so this would be styles.coinright coinrights oopscoin rights okay there's a div and inside of that div we have a p type class name text dash gray dash 400 and it can just have the coin name and parentheses coin symbol anywhere you can reuse it go ahead and reuse it so after that closing p another div this one flex property my three and that will have an h1 text of dash for xl and the h1 here we'll just say price okay and i also want my rate filled here right so rate filled and again this might not exist so common to that i don't think i have that asset yet yeah so there's going to be some things that don't exist yet that i'm going to import later so it's rate filled closing div and then another div here okay yeah and then for this div the class name will just be flex items start which will have a p type and this one will have class name text grade 400 as well okay but then in this p tag it's just gonna have the static code of 5.26 static not dynamic put space here uh some and we got to put these boys and let's make use of our rate finally and if you remember how rate works we got to pass in if it's increment or not and this one will be false it's pretty static and the number also static 0.53 percent end quote okay cool closing div is fine then we'll do a div here class name flex items dash start p tag with a class name of text gray 400 and again it's the more static stuff here just for show btc add in those guys again and we can have the rate this one will make the s increment to be true so it's going to go up and the rate of this one is going to be equal to 0.99 percent end quote and that should just be a closing div after cool closing div closing div boom another div here with the class name flex and then we'll have the drop down button right there's going to be something called trap down button and again it doesn't exist yet and the label for it is going to be by so that means we're making a couple other buttons here or components that we are going to set up to reuse later okay so i want a button for buy i want another button that i can use for exchange gaming and then something for earn crypto so exchange gaming earn crypto these are all buttons and since just to market for myself to make it later so closing div closing div and let's add another one this one will be the info one styles that or actually i didn't think are called info let me just double check coin yeah coin info which will take a div which will take another div and we'll have a small with class name styles.title and we'll say market cap all right cool and then market cap closing div then another small okay and then here i have a number you can actually put this number as much as you want but it's just supposed to represent the market cap and this is what i have here it's religious for aesthetic but then there's a rate with an increment and that looks pretty good to me so let's make it true let's do a rate equals quotes of 0.53 percent okay closing div and now let's add a couple borders here so this one will be the styles that border left small which will have a class name of the title so let's use the title here styles titleherestyles.title that exists and we can type in fully diluted market cap awesome so closing small tag closing div and then let's add another small and for this small it's another big number to represent the fully diluted market cap which i have right there feel free to copy it or just put in whatever number for now and the rate component again and this increment will say true and for the rate it's also the same again this is all just custom data that you could do to put your to make your app look really nice okay so that's the right clothing div and let's add another one this one will also be a styles that border left so styles dots border left okay which takes div which takes another div which takes a small okay small again just takes styles that title okay and for the style of the title it's just going to be volume here with some spacing and another small class name of the coin symbol that's the key here point and now we can close it off let's put btc here so it should be btc closing small closing div all right and then after that very closing div there should be another small here and this one again is just a big number that represents the title here so there you go that's the random big number that i have let's put a rate is increment in there for true rate is equal to quotes it's going to be the 0.92 percent one okay so close div then br then it's going to be after the break we should have another div here actually okay so after that div another div and that will be the small lot of jsx on this one and it's all just for styling just like coin market cap so styles dot title and then we can do a volume slash market cap okay cool and let us know what you prefer like do you prefer for me to go through all the front end or do you just care about doing the smart contracts i personally like to go through the whole thing so you have a full project we're open to feedback as well so here we go small 0.03315 closing div closing div couple more some space here so i can differentiate it let's do class name again styles that border left if you're wondering again just take a little quick break there is all of this stuff right here this is literally what we're setting up right the volume market cap the max supply the total supply so that's what we have to work on next okay all these things so on this border left let's see where we're at the pattern is dave and another small that has the class name of title yep and the next one i want to write is the circulating supply so that is small that is div and then there's a small that wasn't very small and the number that i have for this one is another big number which really doesn't matter but this is what i have for the number and then put btc after it then there's a closing div then there's a break okay cool and after that break there is div with div but this inner div has the class name of the flex between all right something different from breaking that pattern wake up guys there's a new pattern styles that flex between which has a div which has a small okay cool at any point i'm going too fast remember feel free to pause the video or you can just scream on your computer lance slow down and i guess i'll hear you styles that title styles dot type okay and the title of this i can actually make it one line to just make the code a little bit smaller which will be max supply all right so that's the max supply closing div after that which will lead to opening div which will lead to small which will lead to number and the number that i have is just 21 021 million actually there you go easy millie and after the easy melee it's closing div closing and then opened it all right this one i'm gonna give this one a name this one should actually be styles flex between all right so scrolling down does that flex between should have a empty which will have a small which will have the name of title yeah i bet you guys can predict it now then it's gonna be total supply okay then after that closing div there's gonna be another small here and the number is really big again it's 18 million 983 000 are not period actually comma 983 000 and 912 and that's it small and then after that it's closing div because they're closing day closing there cool finally all right that's all the jsx for the styles i think i got everything now we just got to have the rate filled and the i believe drop down button so let's work on the rate filled and to do that let's just go to my buttons new file rate build easy peasy or it's not just to say chicapi so from here let's import chevron up and for styles it's pretty simple con styles it's equal to rate filled oops rates filled and for rate fill it's a background green 600 flex items centa px3 and ml3 as well with the rounded of exo all right cool and the div here this can just be class name of that same dip there's only one it's gonna be styles dot right field cool this is just gonna have the chevron up and the small class here or tag on me with the class name of p one and we can put twenty three point thirty two percent so it's hardcore numbers in the rate field cool so rate field is done awesome now we wanna work on the drop down button so in here new file drop down btn.js all right fce cool this one will have import chevron down awesome styles pretty simple styles equals drop down oops drop down actually keep it all lowercase drop down btn and we'll do a flex items dash center mr two or margin right to rounded md px2 let's make the background blue 700 cursor cursor dash pointer and that's it cool all right and all we want to return is the div with the class name of the drop down button and after that we have a p tag here we can give it a margin right or two and whatever we get from labels remember we're passing down a prop called label and it's just gonna be the name of the button essentially and we can just destructure that here all right because if you go to uh coin detail if you look the label is by exchange gaming that's what we're setting up over here followed by a chevron down cool so we hit save go back to coin detail take this guy out uncomment this one and uncomment this one and let's import those buttons now we can import rate filled and then we could also import drop down button cool so if i hit save why isn't this highlighted drop down button dropped oh i see yep i labeled this component so yeah i gave it a capital d so let's keep it consistent to that boom now if it's safe let's go back to localhost and now the moment of truth if i hit bitcoin i see the info page and if i click price i should see coindetails is not defined ah i see so this one is should be called the coin detail and how did i import it yep import coin detail should be details but forgot the s what if i go back okay now i click on price and yes it says from is not defined all right okay chrome is not defined and i think i know why it's because we just copied to send it over but if you go to coin icon here we're not using this from what we're really checking for is coin name all right so basically depending on the coin name so we go back now hit refresh now let's hit the price look at that let's freaking go it is literally identical to this one right here just has different numbers that looks good to me so now we have the price page the info page and the main page wow that was a lot of front end we're pretty much done with all of the front end the only thing that's left is let's get to the fun stuff the web 3.0 stuff how can we make a smart contract and trade our tokens so i'll see you guys in that section okay so in this section i'm gonna be showing you guys how to create your very own smart contract and deploy it straight to the blockchain and we're also gonna be using morales to help communicate and pull from the users and just set up the database so if you want to think about this we made the pretty face of the fernand let's bring that front end to life with some functionality so to get started what i want you guys to do to go to the root of your folder and let's make a folder called smart contract boo so now we have the folder called smart contract let's just bring up our terminal a little bit and what we can do notice the path this is the root of our project what we want to do is cd into smart dash contract okay from here what we want to do is we want to install hard hat if you didn't know hard hat is an environment that helps us compile create and deploy our own smart contracts so to get started all we have to do is just say npf hard hat okay and make sure you're in the smart contract folder okay do you want to install the following project packages say yes and when it asks you to create something you want to just say basic sample project how to ignore y for yes and now the project's created so if i open my smart contract hard hat gives you all the things you need to get started which is wonderful one issue that i ran into and some people do is that if you look over here there is no dependencies sometimes it installs it sometimes it doesn't lucky for you i have the things that we need so all you need to do is paste this all right i'll put a comma over here and this is all the things that we're using it should have the hard hat stuff chai ethers and also install open zeppelin which i'm going to explain in a bit and dotep okay so if you want to get this done make sure the path that you're in so if i do clear is the smart contract folder and then we can just do an npm install all right because this is using just npm awesome all right we're up to date cool so after doing the npm we should be fine what i'm going to do is type in clear to clear my terminal oops something terminals funky open it up cool so now we're good to go okay so the next thing i want you to do is you can actually bring down your terminal take a look at the hardhat.config and as you can see we also have this configure our hard hat and set it up so let's clean up a couple of the comments we can also get rid of this tasks account we're just going to need require the nomic labs and this module that exports and what we want to fix is this stuff right here okay so save this let's also save your package.json and that remind me if i didn't save this we have to do an npmi cool so now we have everything just to make sure make sure it's saved awesome so back to this what we want to do is set up our hard hat with the network that we're connecting to so how do i know what network we're connecting to what i'm going to do is open up our browser again and what we can do is head over back to morales.io and hopefully you already signed up let's hit login and go to your project and if you remember let's see view details go to emv configuration and we set polygon last time what we really want to do is make sure it's ring compete you can actually set it up for multiple things so if you want to work with the avalanche block chain you can actually connect it there as well but i know that i'm just going to use rinka b so you don't take out the polygon just do a rinkeby hit save configuration awesome so now it's configured to rinkaby the main thing is there's something called speedy nodes right if you think about it what we're gonna do is create a smart contract that helps us exchange our teeth for tokens right it's to simulate what's called a dex or a decentralized exchange it's not actually a dex we're simulating that type of thing by trading and swapping tokens the first step would be to take the smart contract we make and deploy it to the blockchain how do we do that we have to connect to the blockchain and if you didn't know the blockchain is made up of different nodes and what you'd supposed to do as a developer is you can create your own rpc node set up your computer to become a node on the blockchain or what a cool thing that morales does is we can just directly connect to a node that they have and use that to talk to the blockchain so if you go to speedy nodes click endpoints go ahead and go to the rinkaby one and you can just click copy here to copy that speedy node and what we're going to need to do is set up some enb variables okay cool so since this is its own configuration the smart contract folder we can make a new file here and just call it enb okay all right so there's two things that i want to set up here one i'm going to call speedy node right and then set it equal to that morales speedy node link it's going to be different for you guys it's not going to be exactly the same as mine and there's another thing that we need to keep track of which is just the account or the private key so i'll just call it account so the account is going to be your wallet private key so what do i mean by that if you go to the browser and if you look think about what wallet you're using if you're using meta mask which i'm using as well you need to put in something for your account right and for the accounts array you want to put in your private key and one thing to note is that your private key should not be shared with anyone because your private key can give somebody access to your actual account so again my advice is this is just a burner account where i have just some play eath and make sure you connect your metamask to the right test network okay all right so if you're looking at the top here and it doesn't say rinka b test network that means you should change it otherwise this wouldn't really work so to see or connect to the rest ring could be test network click on your profile right here you can see all my different burner accounts i'll go to settings click advanced scroll to the bottom and you're gonna see this toggle that says show test networks make sure you click it and it says when that's on if you click this drop down then you should see all the test networks click ring could be awesome cool so now connect to the rinkeby test net make sure you have meta mask installed also if you don't have it already and what you want to do next is get that private key so what we should do to get that head over to this three dots right here click account details and here it is export private key again be careful putting your private key out anywhere and i would i wouldn't use your real metamask account if you're just testing things out i'm just going to do an export private key that's asking for a password because it says never disclose this key and you want your private key can steal assets held in your account see so if you don't listen to me listen to metamask i'm gonna hit confirm so here's my private key it's for my burner account it should be fine so i'm gonna paste that right here oops i didn't actually okay and we'll hit copy done cool so then we put this as a count and now our env is good to go what we should do next is set up our config now so to set up our config all we need to write is what solidity version that we're using and if you didn't know that's the language that your smart contract is going to be coded in when you're working with ethereum or rinkeby after you specify what version you're looking at it might be outdated by the time you're watching this if you're watching this in the future but i'm just doing 0.84 you can also do something like greater than so you can say it's compatible with this version and greater than but i'm going to leave it like this so if i do networks it's a key that's going to have an object and here type in the networks that you want to connect to so for me that's ring could be and it's going to be the url which is going to be process dot env dot speedy node and then for accounts it's going to be process dot env your account okay hit save and that is the hard hack config awesome so after that's done make sure in your package json you have something called open zeppelin if you don't see this what you could do is just npm install at open slash contracts if you don't know what open zeppelin is it's essentially a library that has standardized contracts right if you're ever making a smart contract there's like some sort of standard that you're gonna follow so if you look for our contract it's gonna be about tokens so we're creating tokens that you can mint and that is going to be the erc20 standard so if i was going to make this from scratch without open zeppelin i would have to make sure that my contract is exactly like the standard with open zeppelin though i can just import it it's a lot like if you guys remember with object oriented programming if i have a class called car you can build on top of it so if i make a class called ferrari extends car i'm building off top of a car class but specifying what a ferrari is it makes more sense when i use it but you can think of openzplin as a way to build on top of a standard cool so what we want to do next is if you go over here to your browser let me show you how to get started with opensup alright cool and before we get started on working with opens up lynn to create a contract we should brainstorm of what should our contract be so if you look this is a greeter dot sol so if i clean this up a bit this is our solid example solidity contract that heart hat provides it's always the same greater but you want to think about what we want to do with this smart contract i've mentioned before in previous videos a smart contract is like a vending machine you put in money you select what soda you want and that vending machine directly gives you that soda with this smart contract what we want to happen is i get my eath i send each to the smart contract into the vending machine and what i should get back is tokens oh that i want so what does that mean if i send an eth i should get back usdc right so for this contract the first one i'm gonna make i'm gonna send eth to get back usdc tokens so let's set that up cool so to set it up go to docs.openzeplun.com contract slash 4.x wizard all this does is help you create each smart contract so if i name my contract all right so i'm naming my contract here look what happens under name if i call this usdc it automatically updated the smart contract to what it should look like for the symbol what i want to do is the symbol for the coin which will be usdc and one thing to note again this is not me actually creating the coin this is me creating a token that represents the coin and that's what we're trading keep an eye out for future videos where we'll actually implement and coin the coin swapping and as well as fiat to coin swapping as well all right there's a lot of big things in the works but this is how you can set up the contract notice how it says usdc for the symbol that's how you set it up and the only other thing we need to do is click mintable here and then it's going to input import the mintable or ownable contract awesome and we also add the property ownable so this contract will be able to mint dc tokens so let's copy that let's go to our greeter soul what we can do is rename it instead of deleting it we'll just call it usdc dot so yeah and what i could do now is click all here and click delete and then i'm gonna hit paste all right so i just copied and pasted the contract template that i got from opens up and pretty much we're almost there what we do need to change now is instead of only owner make this payable so that we can actually send tokens to it and another thing we can do is underneath this function we can have a receive external payable so receive external payable basically it's just going to be able to accept eth and you just need this here to get this swap working cool all right i think this looks pretty good but make sure and keep in mind that this is only to exchange my heat for usdc you want to make as much smart contracts depending on how many coins that you want to establish so for me i'm going to make a couple more let's take a look what i want to make is new file let's say die dot sol let's also make another file call it dogecoin and also just get some dojin here and we also should make a link that's all right cool awesome and guess what the contract is going to be pretty much the same so we could do is copy that paste it copy that paste it copy that paste it important part you're copying and pasting it's like la dee da but what the main thing is the contract name and the name should go here and the abbreviation so for example if i click link right now it's still the contract name is usdc that doesn't make sense so double check for me that your contract name isn't usdc all the time and that it's consistent and the name abbreviation for this is just link awesome save for dogecoin it should be not usdc it should be doge coin and let's just actually make it dogecoin and then keep this the same as you wrote the contract name dogecoin this will be the symbol doge and again that's the only difference okay so that's dogecoin then we're to work on die and for die it's just going to be the same thing of not usdc die ownable same as the contract name and then the symbol right here cool awesome cool so if you look double check that it doesn't say usdc for all of them and now you have four unique contracts that will make four unique tokens right so make as much as you want or as little as you want i'll just make four i think that's a good size one thing i wanted to point out about each contract is that if you look over here this tells you what version of solidity that you're looking for and again if you're watching this from the future it might be a little bit different this just says any version that's this one and up would be compatible obviously unless there's differences and if you see this little scribbly thing that says import not found i have a fix for that one note if you want to start coding in cnvs code you might know about this but if you go click extensions and search up solidity or juan blanco you want to have this installed right this basically provides solidity support within vs code if you see the squiggly lines like this that's because with the newest version of this one blanco solidity doesn't really work but if i install another version and go to let's do version i think it's 0.134 it's going to install it an older version cool reload required awesome so now if you look there's no more squiggly lines on it and we're good to go cool so if you wanted that issue that's the quick fix for it so now with that we created the smart contracts the next step is to deploy them to the blockchain which is the fun part and i'll actually make sure it's solidity i'm gonna go back you want version one three five there you go so now there's no more squigglies we should be good to go now so like i was saying now that we created our smart contracts we need to put them and deploy them to the blockchain so that's where this folder scripts comes in handy and we're gonna use this file to deploy said contract onto the blockchain and that's how we can make it permanent so that you can't edit the contract and we're good to go all right so let's work on deploying our smart contract like i said we need to set up the script for it so what i'm going to do is rename the samplescript.js to deploy.js because that's going to make a little bit more sense so what we can do next is let's clean this up let's see you know what i'm actually going to just highlight everything on here and let's just erase it i'll just make it from scratch so now we have an empty deploy.js the first thing that usually goes here is a main function and it typically is a synchronous asynchronous cool and the important part here is to grab the name of each contract so let's say constog that's the variable name and it's going to be equal to a weight hre.ethers right not hero hre dot ethers take this guy out don't need it cool hre.ethers dot get contract factor so this is going to get the contract by its name and remember we named it doge capital c coin right and then after that we can make another variable called doge contract this variable is going to get the await the doge factory which is gonna be us getting the contract this one is actually gonna deploy that to the blockchain we're gonna make use of the hardhat config use the speedy node to connect to the blockchain as a node and deploy it using that so it's going to be deployed here we're going to wait for that to finish and store that into a variable called dogecontract and then another one another thing we need to do is await dogecontract.deployed this makes sure that after it's done deploying make sure that it's already deployed okay cool and then after that's done we're actually free to console.log dogecoin deployed to or deployed to that makes more sense space comma doge contract right dot address right now this is how we get the contract address and we're gonna need to save it for later so keep in mind we're gonna get it by console logging it after it's uploaded or deployed to the blockchain cool so within this main function you want to do the same thing for every single contract that you want to deploy so we have link factory is equal away to hre.ethers.contract factory and that should be link next step you can make a variable called contract now which is going to be await link factory.deploy and after that we have to await the contract dot deployed okay cool and then this is pretty much the same this console log which will be uh link token deployed to this address because when this is actually deployed if you do a data address that should hold the actual contract address where it lives basically where it lives on the blockchain okay same thing here die factor equals await dot get contract factory die and you say cons die contract equals weight die factory dot deploy then we can do a const or nikon sorry await.contract.deployed then we have the console.log again die token deployed to die contract address okay last one it's actually the first one i made which was the usdc factory all right await hre.ethers.getcontract factory parentheses us const usdc contract new variable it's going to be await usdc factory dot deploy block scope that's interesting usdc factory usdc factory oh i put a wit wait there you go awesome so i'm gonna do an await usdcontract.deployed right after it's already deployed and we just do a console.log usdc token deployed to and actually don't need the space to be honest and then we can just do usdc contract dot address of course awesome all right cool we're almost done this is the main function but then we have this semicolon async one as well all right this is where we can do a try catch and reawait the main function so if this is successful and it's finished we're gonna do a process that exit with the zero okay and then the thing we're missing here is the catch with is just error and we can do a console.error actually and then just type in air and if that happens we can do a process that exhibit with one okay cool and the last thing it needs is something like this this is because i need to put like an opening parenthesis there and there we go cool and that's the deploy.js that's how we can use this script to send it to the blockchain the only thing that we have to do now is open this up again and let's go to cd smart contract okay so now we're in the smart contract what we can do next is actually to deploy it and run deploy.js we have to do npx hard hat run scripts slash deploy dot js and then type in the network you want to use which should be net uh rinky b that should be good oops i put npx hard hard hard hard let's do a hard hat so this should work let's see error 404 all right so let's just try that one more time npx harsh hat run scripts deploy.js and it looks like okay yeah so it looks like there's something going on with hard hat i'm gonna guess has something to do with the dependencies so i'm just gonna run an npm install all this guys and hopefully that fixes the issue because it's not working as it should so what i'm going to do is npm installed and make sure you have all of these packages nomiclabs hard hat waffle ethereum one full chai nomiklabs so forth so pause it to get all the names but this is essentially what it should have came with when you install hard hat and i thought by doing this it would have it but it didn't there you go so now we actually see node modules so that's a good sign okay now let's try to run the npx hard hat invalid undefined config all right so looks like it says undefined hard hat config what i did was i looked at our hard hit the config and we're using the environment variables here but it's not recognizing it and that's because i forgot to just do a require d dot env and do a dot config here hit save and now if i do the npx hard hat run and see if it works let's go compile nine selected files successfully and all of these guys is the contract addresses go ahead and save them somewhere because we're gonna be using them but other than that our contracts are live and on the blockchain which is awesome okay so like i said the next step is to save all of these contract addresses because we're going to be calling them when we want to swap tokens and mint them so to save this what i'm going to do is come over to the sidebar over here and let's create a folder the folder is going to be called lib and inside this lib folder we're going to have a file called constants.js which we're going to be referring to later so in constance.js the most important things is by doing an export cons doge address and you want to set that equal to the contract that it's part of so this one is this right here paste it there then do the same thing for the rest of the contract so this will be the link address all right set that equal to this and make sure you copy the right one this is oxe right then we want to do an export const die address equal to the die token one which will just be all this cool then last but not least it's the export const usdc token and that's going to be equal to oh it doesn't have to be usdc address usdc address let's keep it simple cool and this one will be the oxc alright so paste that on there and bam we have all the addresses but this is not the only thing that we want to do if you hit save and open up your smart contract folder you're going to notice something called artifact right it gets generated along with a cache folder when we deploy it to the blockchain click on contracts and click on the die dot soul and if you look there's something called die dot json right we want to get the dot json of every contract so we can do this by copying it and paste it into your lib folder it's gonna make sense in a bit so there's the die one make sure you get the json and not the dot dbg or else it's not going to work so this one dot json copy all right cool so that's the doge let's do link dot json copy paste okay that's a link last one usdc dot json copy and paste cool so all four json files are there go back to your constants we can push these guys down and let's import all of those json files so you can say import doge alright that's the name of it from the dogecoin json and then from there we can do import die from json import link from link.js and then import usdc usd from usdc awesome okay cool so then we're not done yet we imported the json into our constants but what we really want is the abi from the dot json so if you look there's an abi attribute to it and that's what we need to basically get our to communicate with our smart contracts so if i do export doge api set that equal to doge.api same process throughout the whole thing just give it the name that it should so this is the dai abi and rhymes die die all right cool that important export const link avi link diabetes okay and then export const usd c api equals usdc cool so once that's done this is your constants folder our constants file next thing let's start filling out our context okay so now that all the setup is done let's move on to our context and make use of our constants so what i'm going to do ctrl b you can actually bring this down and if you do control p we can type in context and head over there cool so this is the current state of our context all it has is to get top 10 coins but it should do a lot more we need to tell our code when to run the mint function for each of our contracts so to get started let's do some imports here so i'm going to import use morales right because we're going to be using morales to help us out we're going to do react morales and then we also want to do import use morales query right we're going to be adding to the database soon we're going to be using moralesquery because eventually we're going to i want to show you guys how to utilize the morales database to store what tokens that were used and then call them so we're going to get morris query from react morales as well and here's the important part if i do an import here we can actually import the doge api and all the others through our constants folder so i'm gonna get the die one i'm gonna get to the link i'm going to get usdc and along with the abis we should also get the addresses so i'll get doge address link address die address and usdc address awesome and all this will come from constance there you go cool so that's why we set it up so now this makes a lot more sense okay if i hit save cool and we're going to take a couple of things from morales so we're going to destructure use morales and what we're going to get from it is this so we say object use morales and then you tell morales what you want to use from them i want is authenticated and user and morales from used morales okay cool there's also another cons tier this i'm going to add this later but we're going to use muse moron's query here so let's say use morales query let's query and i'm going to comment it out because i'm going to add to it later when it makes more sense but next point is the states so if you saw i imported the eustate hook because there's a couple of things that i want to keep track of so i'll say const equals you state and you want to do this about a couple of times so you want to do this one two three four five okay each one is going to be different though this one is going to be current count and then we're going to do we're going to do a set current account and the initial state for that will be empty string this one is going to be open by crypto model so what this tells me is that we're going to be making a modal so when i click on it we're able to swap tokens all right so you set up by model and the use date of that should be false set open by crypto mode yep then there's also going to be a from token and it's set from token if you guys watch the robinhood clone this is gonna look a little familiar okay so then this from token then we have to do a two token and a set to token and then for this we'll do an amount and a set amount okay cool all right and what i can do here is make a use effect because we also imported that hook okay apparel function here and we can use is if the user is authenticated this is going to be true or false if they're logged in or not if they are logged in let's do this variable called account and let's do a user which we're getting from morales.get and then we can get the ethe address so i'm getting the users that the user that's logged in his address and what i'm going to do is set that to our state so current account right to be account the variable cool and then i only want this to run once and when is authenticated is changed so once the user is logged in run it and if it's he logs in if that changes at all then we run the use effect awesome cool so now i'm going to make a couple more functions underneath that use effect to get the contract address if you remember the robinhood clone we had a modal that had two drop down menus so the first one is the first one you can select what coin you want the second one is what do you want to exchange it for so to do that we need a function called get contract address okay and that's going to be equal to this right here and if from token is equal to die then we should return which address exactly the diagram okay so you want to do the same thing for everything else so if from token is equally equivalent to dogecoin well this is not the big capital just says as long as it's dogecoin we can return doge address okay if prom token is equal to link return link address okay and then if from token you will equal equal to usdc return usdc address all right so this makes sense right this is how we get the contract address this also should be a function called get the to address like what are we switching the token to or four right so it's gonna be the same thing except this time it's if two token is equal to the string okay and then we want to return that address i'm just gonna do the same thing for the rest of them usdc usdc cool so we're getting we're able to get the contract addresses but we also need to be able to get the abis so we're not making use of that we can also make a function to get the corresponding one so get to abi right there's not really going to be from abi or just get abi is only going to use this one and then this one it's going to be the same thing if the token is any of these but the difference is the word address so again let me show you guys that quick shortcut troll the race and just do an api here cool perfect so that is the get to abi function and now for the fun part let's actually make the mint function all right so the idea is if i click the modal i should pick the two coins that i want to swap from and then when i click swap or buy it should run the min function which is going to tell the smart contract hey we need to swap this and get the tokens that we need the function name of that is going to be called the mint so i will say cons mint it's going to be asynchronous okay hey try catch let's just set up the catch part since it's easier ever and we just do console.error error.message okay cool so if i hit save cool so this mint function is basically what we're gonna use to swap tokens like i said if you want a visual to actually really grasp what i'm saying if you do a local host 3000 i'm running the finish build this is not ours that we were building together this is the finished product if i click any of these buy buttons it's gonna open up the modal right so this is a component that we're gonna be setting up but here this is the from eath all right this is the options that we have the two when i click swap well after i put the amount right when i click swap it's going to run this mid function so that's the goal so to get the functionality for it this is how we want to code it up this is the logic so if the from token is equal to e so what does that mean if i open this up if the from is eth right this is the function that should run all right so if it's eth i also want to check if the user is authenticated right because if the user is not authenticated then we shouldn't be even we shouldn't be able to do anything so just return but they if they are authenticated or logged in we just do this await morales.enable web3 right and then let's get the contact the contract address so cons contract address remember how do we get the contract address we just say get to address right there you go okay and notice how it says get to address because we if we're sending eth i want to be getting the address of what i want to swap to so if i click link we should be getting the link address if i click dogecoin it should be getting the dogecoin address die die address so that's what get two addresses for all right notice how it's not get contract address okay so that's the variable we also want to get the abi how do i get the abi of what i'm switching to you say get to avi all right and i think i just imported something by accident don't need this guy right here so save come all the way down to mint there you go so we get use the get to abi function because it's going to return one of the apis that we have so that's good cool and then we also need to pass in some params well not params actually we're going to get two api and then we can pass in the options right because when we do morales.execute function we pass in this object and the parameters so for the options the contract address is just going to be literally contract address and the function is going function name is going to be mint right just to quickly explain this line right here after i put this comma is i'm specifying that at that contract run the mint function right so if you remember smart contract contracts die i'm one i'm i'm literally saying run this mint function of the contract and they all have that so that's why this is still dynamic so i'll run the min function pass in the abi as api and the params for the function right so if you're wondering where these params are coming from this is us passing in the address to and the amount right so the params will be the two of the current account and the amount is going to be morales oops morales.units.token and then pass in the amount okay so that's it for params another thing that we need to do is the send eth function all right so this send each function doesn't exist yet so let's make it so it makes more sense so coming down below here let's do a const if so i'm pausing the mint function to make this an eat function so this is cons send eat equals async okay i'm going to do if is authenticated just return if it's not if they're not logged in just return okay next is a const contract address and it's going to be get to address okay all this function is doing is making sure that i'm sending ethereum to whatever token contract that i want to send so that's why we made this payable i'm sending eth here to this address okay if if i'm sending if i'm swapping for doge i'm going to send it to the doge contract so this is literally the senate function so we got the contract address we don't need the abi let's just do let options equals this and the type is going to be native because we're sending eth then the amount is just going to be morales dot units dot this is how much ether will cost to swap no matter what the amount is which is fine receiver and we'll do contract address cool so i'm saying that whatever contract address that we get that's who's receiving that all right that's the options now we're going to do a const transaction variable and we're going to set it to an await.morales.transfer this is how we can transfer that so transfer and pass in options okay then we're gonna wait for the receipt so let's make a variable for it and say await transaction dot wait so the dot wait here the weight we know is waiting in terms of like web 2. this.wait is waiting for the transaction to be completed on the blockchain basically it's making sure that it's verified by miners so that it's true and it's done and afterwards we can console log it to prove that it is verified so that's our receipt okay cool so send each function that's done let's come back here and continue on this mint function so once we create our options send that eth to the contract then we want to type in a variable for transaction again but this time it's for morales.execute function so this is how we execute that mint function with the parameters that we're passing in so that's why we made options here okay then let's get a receipt for it so again we can do an await transaction.wait so again we're waiting for it to be verified by miners if i put four here this is how many blocks that i want verified before it's completed because the way it works on the blockchain once the block is finished and the miners have verified it the longest chain is the truth so it can branch off this one will ensure that it's more accurate if i wait for four okay so then we'll do a console log receipt and then afterwards this was a whole if let's actually make the else for it so if we're not minting tokens with our ethereum that means we're swapping tokens instead so that means for the else statement we'll run the swap tokens function so this one think of it as east token transfer this one is the token to token transfer okay and again this doesn't exist so let's make it so in between here let's do a const swap tokens is equal to async like this try okay and if is authenticated we're going to hit return then we're going to do an await morales that enable web3 okay and after that we have an edge case here so if we say if from token is equal equal to token then we should just return an alert and we can just say you cannot swap the same token all right this is if i was trying to do doge for doge that doesn't make sense so that's what it's going to do otherwise we can just do cons from options right we're gonna need to if we're doing token to token we need to make two options so the type is erc20 right and the amount is going to be morales oops morales units dot token and pass in the amount put 18 here and there we go and the receiver is going to be the get contract address right if you think about it if we're swapping tokens what should happen is let's say let me give you a visual let's go to the browser let's say i want to do dogecoin for usdc all right what should happen is if i have dogecoin and i want to get usdc i should send my toke my dogecoin tokens to the usdc contract and then that usdc contract should mint me some usd tokens back send doge to usdc get usdc back that's the swap tokens function right for my vending machine i give in dogecoins and when i get back from my vending machine i get usdc that's how the smart contract works so there you go so the receiver should be the get contract address and then for the contract or address itself all right it's also going to be the same person so get contract address get contract address cool so that's the from options now i want to like i said we need to mint the tokens that we're getting it to so let's do two mint options to make it more clear so the contract address is going to be the get to address this time and i remember i want to call that function name of mint all right so i'm calling the mint function at that contract yes sir and then we do a bi get two abi and we're gonna do a params and we'll do a two current account and the amount that we send back should be the amount that we requested so if i do units.token here we'll put the amount which is again the state that it's going to get updated 18 comma here and cool so that's it for the option let's see what am i missing oh yeah the reason why i see squigglies is because we made the try but we haven't made the cash so let's make the catch pretty quickly console.message yes okay cool all right so now that we set up the options come below here we got to set up all our transactions and their receipts so if i say let from transaction are we going to be calling morales.transfer or morales.execute function for this one okay take a guess let's see if you're right what i'm gonna do is await morales.transfer all right because i want to transfer that token and send it to the contract that i'm sending it to so that's why i put it i passed in from options and then the next variable if i do two mint transaction i'm going to do now i'm not going to do transfer i want to execute the mint function like i said with the example i want to transfer my doge to this contract address and this contract should mint me usd cd token so bring it back to me and then let's set up our receipts which is going to be from receipt is equal to a weight from transaction.weight and that to receipt is equal to a weight to mint transaction that would be amazing right so this is making sure i send the tokens first and then i get minted the new ones that i wanted to swap too cool and just to be safe we can just console log the from receipt and con then console log the to receipt okay cool hit save and all we got to do now let's see is set all the states yeah i think i'm going to do now is actually just pass down a lot of things from value so get 10 coins open by crypto model the set opened by crypto model the coins right oops sorry not the coins the from token the two token the set from token set to token the amount set amount the mint function oops mint and the open mode cool yeah so open model is a function we haven't created that that's why we don't see it yet so let's go ahead and work on that open more all right the open modal function you can just put it down here it's pretty simple const open model it's basically a function that controls the toggle of the open model so what we could do to do that is set open pi crypto model to set it to true awesome that's all we need to do for openmodel and let's see this open by crypto model why is that squiggly open by crypto model oh this needs a comma that's why okay cool and that should be it for now uh we didn't set up the query yet but i can do that what i can do next is set up the database to do just that okay cool one thing i'm excited to show you guys is that morales actually has a database that we could use and for that database i want to be storing my coins in there okay so what i want to do head over to morales.org login already logged in and head over to your server minus coinmarketcap we can head over to the dashboard and this is literally our database as you can see remember when we logged in for the first time and stored the users what we need to do next is if you do this plus right here we can add a new class so the class that i want to add is just coins and let's just create the class like i said we're storing all the coins in here what i want to do is add a column called name right it's a string we're going to keep track of that coin's name cool all right so after you make that name column let's add a row and here we could just define all of our coins so i'll just do it real quick and just die yep so let's die just hit add now we have a die coin all right i'm gonna hit plus again and for the name we can put dogecoin be wary of how you're naming this and keep it consistent throughout so then this one will be usdc usdc and i think the last one was link so i just want to keep it like this and after that we have all the coin so we set up our database we manually put coins that we wanted to store now the question is how can we access this database that's what use morale's query is for so coming back to the top seeds right here we can actually comment back out to the query and what we're going to do is just a little bit of destructuring so what you want to do is a const object equals use moralesquery and what we want to do after this point is let morales know what do you want to query from them i want to query points and it should be exactly how you spot the class and the next thing is the data is going to be passed in as coins all right then there's going to be an error here in case there's an error and ross has this is loading state that you can define as loading points okay cool i'm gonna hit save and now that we added coins and loading coins also make those two things global so now i can add coins and now i can have loading coins okay and that's how easy it is to query with the morales database and we can make use of it now so that's pretty awesome they just did a lot of the heavy lifting there so now we passed a lot more things to the provider to make them global now it's about taking those global variables and functions and making use of them inside our app all right so if you look when did this model come up it's going to come up when i press this buy button and you can see the component loads but where would this buy button come into play if you go into here it's gonna be in the coin name row so go to coin name row and let's make a couple of updates and one of the updates i want to make is come to the top over here and let's import a hook it's going to be the use context hook and if we import the use context we got to specify what context are we getting i want to say it's the coin market context context folder context file nice cool so once you get that though go inside the function component and what we want from here is the open modal function right and it's going to equal use context right i'm pulling open modal from coin market context what is openmodel it is just a function to set this to true and we also passed it down here yeah cool so now it's a question of when do we use it the only thing i'm going to add though is scroll down to the bottom and when it's closed over here in the span tag just add the on click on click arrow function so it doesn't run right away and let's do open mode okay yep and now we're making use of it hit save and we're good to go once you update that we now need to make the actual component itself this thing right how do we make that and where do we make it you're going to want to go back to your index again so head back to your index and go to underneath this header there should actually be another component here called swap crypto model we're making our own custom one as opposed to last time where we had to import it a react library so again this doesn't exist so let's make it so in components new file swap crypto modal.js and rafce there we go and now that we made the component let's go ahead and start finishing it out this is going to take in a hook it's going to be used context okay after we use context let's import coin market context from the context slash context cool so import the hook import the context you want to use and after that let's start with the styles and for the styles we could do a modal with w screen h screen pg gray dash 900 then we do a z index of 10 make it fixed with a top 0 left zero flex property and then we can do an items dash center and a justify dash center okay comma here and let's go to the next one which is just going to be modal content div which will have a background of white let's make it a little rounded large p dash three w max and w dash one divided by three cool next let's style the input which will be with dash full p 2 border rounded dash lg mb5 border dash gray 600 slash 50 and outline dash okay from there we could add a button there we're going to add a button of bg bracket hashtag six one eight eight fff p two px dash five let's do a rounded dash lg text being white hover or pass city dash fifty and for the label i want a font bold text dash 3 xl close modal button is hover text red dash 300 that's the type of red then for the text it's going to be gray 600 and cursor dash pointer awesome all right so for here let's talk about what we're getting from the context which is actually getting a lot of things so it's cons object equals use context all right pass in what you want to use coin market contacts and now let's get what we want from our contacts which will be the open by crypto model the set open by crypto model the mint the coins loading coins amount the set amount the from token the set from token the two token and the set to token that was a lot but all the functionality lives in this component and that's why there's so much cool and there's some conditional rendering here you can just make it from scratch if opened by crypto model if that's true if it is true then let's return the actual modal itself so div that class name is styles model then there's div class name styles dot model content which will have a div oops that doesn't have a name it actually just has flex items dash center and a justify between okay for the p the class name oops class name of this one will be the label so styles.label and it's going to be swap your crypto and from there it's going to be a p tag again which will have a couple of different things first one being the class name of the close mode or sorry styles dot close motor button okay styles that close mode button and then there's gonna be on click which is just gonna have a function that sets up the set open by to false this is how we close the modal we're just messing around with state and whenever we close it let's set the amount to zero and then clear out any of these other states so that way when we open it it's like fresh okay cool then uh there should it just say close end times and i'm seeing squiggly because this shouldn't be here this is extra one and also because this close end times should be in between the p like so there you go awesome all right so closing p closing div then opening div this one just has mb five okay this will have a label tag which will have a html from token and the class name of block and b2 and then ml2 and here we have a select and the select has a couple properties too select has name as from token class name as the input the placeholder as token to swap and on change is going to be e set from token to be the e dot target dot back okay basically set the token to be one of the options all right and the options are going to be based off the conditions in context yeah if die if eth if usdc cool so going back to this need to target that value and the value can be from token from awesome and i think we're importing yep we're importing the coins that we get so what we could do is in between the selects we can do a coins.map this is pretty cool here so for every coin i want to map through it and if loading coins all right all right if it doesn't exist yet return all right if it's not loading and it already exists then we can return the option with the key of the coin id basically it's a dynamic way to get all the coins and pass it in as the option i think it's pretty smart so if you do a coin dot attributes dot name that's how you grab the names and put it as the value and then you can actually put the text itself attributes that you know oh next close off the option here and put it in between that looks good to me no more squiggly errors we're good to go okay and then now there's another option that we're not going to be getting this is this the one the value is equal to eth and then eighth option just to show you guys real quick this is how we're getting all of these guys right here and that's why eth is the last one that's what we're setting up because we didn't make an eth uh coin inside our database okay select label and this is the html4 from token it's equal to block and b two and then oops dash two ml of dash two as well and there's a two then there is a select all right the job of this select is to get all the two tokens where we did the from let's do the two so name equal to to token class name styles.input placeholder the token you want to swap to okay then on change it's going to be an e that's set to token with the target value and the value equaling the two token okay and we can do the same thing we can get a dynamic way to get all the coins if we do a coins.map you do a coin here if the coins are not loading meaning that it's already loaded then we can return did i do return the last one yes i did then we can return the options or option and for the key coin the id value will be coin.attributes.name and what we'll see as text though will be the same thing coin.attributes.com okay all this stuff select let's put label this will be amount oops amount the class name will also be a block and b dash 2 ml2 and there's going to be and there's going to be an amount here as the label and after we put that label we need to make the input field so that we can insert the amount of tokens that you want to get one of these the name of this will be amount the class name though will also be styles.input placeholder token to swap value is amount and on change all right we should be updating the state of set amount and e.target dot five okay closing then now i just need the button and then we do click this will be mint click run the mint function from our context which is going to handle the swapping of tokens all right it all comes together here and here we can just say swap you can name the button anything this is just the label for it hit save otherwise i'll just return oh wait a second this is the swap model now okay and i just realized this if statement doesn't need these curly brackets so it's still good the main thing though is putting on return this because if open modal is not true then it should just be empty so nothing all right so now for the moment of truth let's also save our index but before we can save index let's import the swap crypto from save this isn't the actual one okay what we want is uh our netlify dip which will open a localhost 888. oops not found that's interesting let's try that one more time ntldf keep saying not found let's try it again localhost 888 so strange oh i think i know why it's not found if you look at the terminal i'm still in the smart contract folder so of course there's nothing in there if i just do a control b real quick and i'm looking smart contracts yeah there shouldn't be a netlify here so i'm just going to let the netlife functions folder from my contracts there you go so let's make sure the cd out of this make sure you're at the main root of your folder and then we could do the fun stuff then we could do entl that makes a lot more sense yes beautiful click bitcoin the price the info page works if i click the price the prices work if i click buy the swap crypto model works let's freaking go the front end is aokay now let me show you guys how to actually use it so now the question is lance how do i actually start swapping tokens the answer is go to your metamask and make sure you have some ethereum if you don't have any ethereum or test ethereum go watch our previous video watch the robin hood clone and i'll show you guys exactly how to use the faucet to get more okay cool but if you already do have ethereum and you want to start swapping tokens one of the things that you're going to do is go over to your code head over to your context in context your constants and remember all those addresses i told you to save we're going to be needing those so if i make this a little bit smaller and do like an alt z let's see awesome cool so click import tokens and the main thing is you want to be able to copy each address look what happens if i copy over that address okay and we actually should see the contract address which tells me that i did something wrong i might know the issue i haven't showed you set up here already but this is what we did last time like we did an npx hard hat run scripts we're supposed to add something onto that so let's cd back to the smart contract do the npx hard cat command and we want to do network search network and then we say rink b like so awesome so this is the step that i might have forgotten let me hit enter and if the contract addresses are different we might have to update some things that's why i was so fast last time so now it's taking a little bit of a second i see so that's the new address okay so link tokens done let's update these addresses as they come so doge is now uxd link is now ox7 die is now oxe and usd is gonna be this cool all right and let's do that paste so oxp is for usdc awesome so again whenever we deploy our artifacts get recreated and we have to update our lib folder so all of these json files go ahead and delete cool so now we have to put them back now that we have new ones so this is the die one copy paste let's die let's do doge remember get the json not the dbg paste that's doge let's get the link and i'll just get usdc based and we don't need to write anything else because it still should be the same so there we go all right so now let's try this if i get the dojo address now and take this out replace it hey so now it should automatically populate right because it's what's at that address so it's reading doge token decimal 18. so now we add that custom token and do import tokens and now when i get doge tokens i'll actually see a balance of it so let's do the same for the rest take this this is for the link address yep so it's automatically says link i don't have to write anything at all cool let's do die add custom token import cool and look how automatic says ustc awesome so now we have all these tokens we have ethereum to spend we're on the rinkeby test net let's see if this actually works so i'm gonna hit buy and the first thing we're gonna need to do is make sure that we switch to eth and then we do one of the tokens that we want so let's say i want to get die for eth the amount that i want let's do all right so if i say swap let's see if anything happens crossing my fingers and nothing ah websocket connection failed yep so if you see websock connection probably be a good idea for me to actually run the server because i forgot i stopped it so cd dot dot let's try ntl dev it's gonna make a new local host boom there we go and of course we can't forget it's not even gonna work if i don't connect to my wallet so let's click this log in so crazy that this is just a button but other than that let's click the let's get eth let's get die and let's make sure that it's 50 i said swap ah still not working cannot read properties of undefined reading filter and then there's a one in uncop promise receiver is required interesting okay so it can't read properties of undefined but my guess is because i switched this to ether and i didn't really switch this so maybe if i click usdc oh nice okay so the swap works when i click usdc but that makes me realize there's some sort of bug here if i don't swap this anything it's thinking that the two address is undefined so what we could do to fix that is by going back into the code and if we go to our states we can actually make the from token default to eth unless we switch it because it's where it should be i think let me see if i click oh yeah it's like die to die so that just tells me the default from should be empty but really the two one is what matters if i don't change it at all it should just stay as die yes okay so now if i hit save let's hit refresh and now i don't even have to change the state i believe cool api thank you eath swap swap interesting okay so i just hit refresh let me just do more and i think now if i hit eth i put 50 i click swap there we go so i just made the initial state die so that i don't even have to change it otherwise this would be undefined cool i'll hit confirm and see if this goes this is the contract interaction i might have done something twice but now i just open metamask and just let it pinned yeah this could take a couple minutes depending on the no oh look at that 50 die let's go so the contract interaction went through and now i got 50 tokens so what i can do next all right is go to die and let's get some usd and i want to change like 13 of my die to ustc swap confirm right confirm okay open menu mask and just wait for this mint function to process and what you just see is i lose 13 dive but gain 13 usdc okay hey there it is it went through so now we have token to token functionality which is amazing so that's it guys that's the web 3.0 part the smart contract section the only thing that you guys are need to do next is if i click this page right here let's get this chat app up and running but so far you guys are crushing it let's go to the next part so like i said i want to get this chat app working and if you guys didn't know this chat app is going to be utilizing something called gun js what is going.js basically it's a decentralized graph database right the best way i can describe it to you guys is if you think about a centralized database think of something like facebook when you make an account where does that data get stored it gets stored with facebook when you send messages where is that data facebook so what if facebook went down one day right where is your information it's gone right because it's all in one place the difference with a decentralized database is that there's a bunch of something called nodes so if i draw like a circle here can you guys picture that as a node think of a decentralized database as something made up of nodes so here's one node and this node can represent like a user and this node can be connected to another node right let's draw this one this is another user and the connection goes both ways but essentially what happens is that the decentralized database is split up into multiple different nodes which each node contains a piece of data so this is a piece of user this is a piece of a user and this is a piece of a user they all communicate with each other and interact and have a reference to each other it's called a node relay so this is how they all are up to date with each other's information and all of these nodes are part of a giant ecosystem that makes up the gun js ecosystem so to get started with gun js and to send messages to different users or just to have a whole chat app we have to set up one of these nodes we can actually set up a node by using something called heroku and one thing to note if you guys watch the discord clone my previous video where i show you how to set up a node we're going to use that exact same node there so if you want to learn how to set up a node go ahead watch that video watch the first 10 minutes and i'll show you guys how to set up the node what i'm going to be showing you guys is what to do after you set up okay so let's head to our code and get it set up so what we're gonna need to do is make a new file and let's call it gun context so i'll say gun context dot js and what we're gonna need to do here is control b and we can make this bigger let's add an import create context right because we want to create a context we also want to use state let's also use reducer and we got this from react awesome okay and after that's done what i need to do is import gun from gun right like i said we're using gun js to make sure if you have gunjs if you go to package.json just double check you have it yeah we're good cool so now that you have a gun let's import it and what you want to do here is const gun is equal to gun and then pass in the array of your node we use the discord one from our youtube and it's gonna be something like this right taking this straight from the discord clone if you wanna know how to do that just watch the video let me show you guys what to do with said note right so after you set up the gun node what we're going to do is set up the context so let's do export cons gun context is equal to create context okay and then from there we can set up the reducer so what i want to do is set up some initial state i say const initial state set that equal to messages right so this is the state i want to keep track of if there's any messages around here if right now at the very beginning there should be none and that's why it's the initial statement cool next is i want to set up a reducer here const reducer and it's going to take in the initial state and an action and what we could do is add a try catch okay then we can console.error for error and usually with reducers you want to check for the action types so if the action that type is equal to clear then that means i'm trying to clear my messages so if i want to clear my messages what i want to return is the state with messages that make sense that's what the action should be if the action that type is to add what does that mean we're adding a message to that array so to do that what we want to do is curly bracket here since there's a return and what we want to do is messages and we can use a spread operator for the state that's passed in got messages so basically whatever message are already is there if there is any and then add action.data okay cool so those are reducers awesome and then what's next is after the reducer let's set up the provider so export const gun provider is equal to arrow function and in the parentheses it's going to take in children this is pretty standard stuff just like last time and then over here it's gonna return the gun context provider okay and in between it also takes children and the key thing here is in the opening tag it should have value equals and then you want to pass in whatever you want to make global which will be the get messages function which i haven't created yet and the state okay cool so we have those things passed in children gone context provider okay and while we're here let's go ahead and create get message so in the gun provider let's make use of use date and set it up sorry not use state use reducer actually use reducer and we want to pass in the reducer and the initial state okay and then we want to pass in state and dispatch awesome then we can do a const get messages here okay so if we do get messages and that's an equal function and we can pass in underscore name and essentially what we do is cons messages ref is equal to gun dot get the name okay and then after that we can do messages ref dot map dot once and then do a message here okay cool and then now we're actually going to use dispatch here to run a specific action so if this is get messages the type of this action will be add and the data that i want as the payload which will be sender will be the message.sender the content will be the message dot content okay the avatar will be message avatar created app will be message dot created at the message id will be the message.message id and the is bullish will be message that is bullish cool so if all of these properties are looking familiar to you that's because this is something that we're going to be passing in inside our chat component soon all right so now that's set up i think that should be it for the gun content awesome okay and then after we complete the contacts if you remember we need to wrap our app with that same provider so what we want to do is i think it's called gun provider yep there we go let's import that same provider gun provider and let's get it from the context from that context slash gun context there we go and now that we got the gun provider let's wrap it around our app so here gun provider take whatever was in there just wrap that whole thing boom so inside we have the morales provider which has the gun provider which has the coin market which has our app so that's good to go so now the app is done remember we have to update our chat component with the contacts now so what i want to do is control p let's go to chat and let's take a look at what we need to add so if i'm looking one thing that i forgot to mention there's a package called faker so let's import faker from at faker js slash faker so what that means is we also need to install that so if i do a yarn ad at baker js faker okay then you can install with npm or yarn depending on what you use i just installed it so now i have faker.js so that looks good and now let's get the context right so i'm using use context here and use effect but i haven't used it yet let's also import the gun context done context and we can get con contacts from cool so once we import it let's also destructure what we want from it so it's const object use context let's do let's get the gun let's get messages and let's do state okay one of the first things that i want to do is come down here and let's start writing our use effect our use effect it's pretty simple all it's going to do is run get messages i think it's get messages right so i want to check get messages and it should be get messages so run get messages and what we could pass is the reference to our gun which will be gun ref seven okay and then from there we could do a comma bracket awesome and next i want to make a function and i'm gonna call it const formatted messages array and basically what happens is gun stores messages in a really weird way i want to use this function to convert those messages into an array so that we can render it with the ui this is the function let's say a variable cons unique array equals to dot state.messages.filter that value index okay and then here we could say const underscore value is equal to json.stringify okay and we can do a return and for the index make sure it's equal to the state and when you get the state you want to access the messages that's what it's called state.messages and then find index so we're finding the index in that state and we want to make sure it matches so if it does match we're going to return json.string json.stringify object check it against the value and it should return true if it is if there is a message and it matches all right that's the key here and then once we're done we should have a unique array with the messages that our ui can understand that's the point of formatted messages all right and we have this lonely send message function that i set up a while back but now it makes more sense basically we want to just trim the message like the space in front of it or the space behind it and if it equals empty then just return okay otherwise we can say const messages ref is equal to gun dot get the same thing which was the gun ref seven cool then we can say const new message so we're about to set up the variable that has the new message the sender whoever created that message we don't have any users attached to it so we're going to generate a random name using faker.js so we can get a random name by doing faker.name.finding okay comma and then the avatar remember i set it to the little sheba thing we don't need to anymore because i have the link to it okay and the avatar we use is this one it's pretty much a default avatar if you want to pause the video to copy this exactly you can i suggest just putting your own image that you want that every person should be so that's the avatar then the content here will just be the message and then trim it and then the is bullish value will be bullish value oh don't forget to put the comma here then we can do a created at with a date dot sub string 4 11 and a message id of date dot net that's how we can get like the current time stamp cool so this is all the data for the new message then we can just do a message messages ref dot set and then set that new message inside there cool and then cool then we can do a set message here right back to empty right whatever you put an input set it back to empty after we set it so it's cleared out awesome so is there anything i'm missing or con took out set bullish true awesome ah yes this whole chat card thing so remember formatted messages array is going to give back to us an array so what we want to do is call it here right and after we get the array back let's slice it zero then reverse it and then map through it so then do that and then when we map through it let's do a message and pass an index so we can give it a key then we can do one of these and basically for every single message that is there we want to generate a chat card and we can actually make this a oneliner by removing the curly brackets because all we want to do is return chat card and then for this part remember all the stuff that we passed down it's going to be the key will be the index the sender will be the message.sender the sender username this one is lowercase equals message dot username sender avatar will equal the encrypted thing that i have it's the avatar whoa so after the center avatar we're gonna have the bullish property which will be message dot is bullish and the timestamp will be the message that created that it's basically what we set up earlier i'm just passing it down as a prop the content will equal message.content the likes this one's going to be static it'll always be 2.7 you can make this random using math.random and then concatenating a k if you want for an extra detail but i'm going to keep it static for now comments like so cool forgot to put the opening parenthesis and just another closing one here perfect and since we updated these parameters i just want to make sure chat card is updated as well so chat card so let's go to chat card real quick and for chat card we don't need some of the default props the content can just be empty string by default and i believe the sender avatar can be here instead of sheba okay cool i hit save oops i saw an error somewhere let me just check that oh yeah yeah that's because not running the server duh so let's run the server install div and we should be pushing soon so that we can make this live again let's connect my wallet just because it's really cool it's a sign okay now i refresh and i'm getting this error i just have to make sure to run the server and now we're all good now i'm logged in login log back out there you go that's what's supposed to happen the main thing that i want to check is if i click bitcoin what happens messages.ref is not defined so if messages.ref is not defined let's go check out the context message ah duh it's saved let's try that again ghost bitcoin hey okay we're good so now let's see if this works moment of truth hello post got it so reading properties of undefined reading filter that's fine so this is under chat.js i still got that error let me just show you guys again it is the messages.filter reading on the filter so if that's a case getting on context using the contacts get messages okay so the next step is to console.log state.messages let's see what it is i don't even have to console over here console here uh let's just take out this array bitcoin okay formatted array is fine but if i check the console.log will it show okay so we're getting array zero that's a good sign but whenever i put the filter now it just keeps rebuilding interesting cool okay all right let's try this again and click bitcoin and it says cannot read messages dot filter all right let's go back to here and let me just go back to the gun context and for the context what i want to see is cons oh i see initial state should have an i and that should also have an i but the real problem is the messages ah this should be messages so i hit save okay now let's see i click bitcoin hey let's go we got hi we got hello and let's frickin oh awesome look at that there's our chat app working notice how it's all bearish and let's go it's lit now it's bearish awesome so look at that guys we have a amazing app on our hands we can swap tokens we have smart contracts and we have a decentralized chat app on the side so this is awesome this has been a lot of fun my friends if you want to see your github live all you have to do now is just go to your terminal and just type in git status because remember with netlify if we do a good status all right and do a get add dot get commit finished app and get push what this is going to do is deploy and redeploy your live link on netlify if i go to app.netlafy.com you go to coinmarketcap i showed you earlier look it's building and pretty soon your site will be live and once it's done you'll have a live link that looks exactly like this with the table and everything and all you got to do is send it to your friends and you'll be good to go all right guys this has been it if you like more videos like this be sure to look out for the next one and it says now localhost not running on my local host anymore but once this is done we should be good then that failed because again i'm not like hosting my server locally right now i'm not focused on deploying it live so let's just wait for this to finish deploy site come on uploading all the functions the fun part post processing done site is live let's go so our deploy preview is up or we could just go to the top and just look at it and admire mirror from afar so if i click on this ay there it is and sometimes it's a weird bug but the connect wall button loses its styling but everything should work okay if i click this sign in next sign boom we're in boys this is our app and it is freaking live with all the functionality all the pages involved with it if i click on bitcoin we see this as well there's our chat app amazing so then if i go back to the main screen this is the app so i hope you guys enjoyed it's been a pleasure for me there's a lot of front end on this one as well as a lot of functionality too not only are we swapping tokens but we also have a chat app installed with this so be sure to modify this learn a lot from this watch it over again and claim your nft from build space after you complete this project be sure to watch our last video on facebook and if you want to see videos on blockchain be on the lookout i'll see you guys next time it's been lance and it's been a pleasure peace