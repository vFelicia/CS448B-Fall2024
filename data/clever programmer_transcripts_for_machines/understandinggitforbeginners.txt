how you guys doing let me know in the comments who excite who is excited and who like the new intro that we got what's up amanoth how's it going dude hey what's up guys how's it going this is amanda so nice to see y'all what is up everybody let's drop it in the comment section how you guys feeling where is everybody coming in from and yeah hey we got a thorough in the house pummed super fun the intro was cool nice thank you so much bro and yeah we go yeah we got lots of improvements for you guys okay we got good stuff yeah cool nice okay so what are we gonna be talking about amanot what's up so today we're gonna be talking about git 101 so what is good why we should use git and how we're gonna install git and also some nitty gritty of gate so without further ado let's dive right into it exactly okay uh let me quickly get our presentation that we prepared for you guys so i think we should be good with this one yes okay amanda this is your uh your end of the presentation let's go and yeah i think i'll just turn turn this okay so because we we mac users don't really have to worry about installing git on our computers because it's actually preinstalled out of the box uh that's actually a nice thing but for windows users it's not the exact case amano do you want to tell a bit more exactly so david uh you can drop the link in the chat so people who don't have git installed can install it so the thing is yeah go on go on get installed on their computers automatically but windows that's not the same so if you don't have get installed as a developer then you are losing out a lot of stuff so you got to get get installed so go check out that link in the uh chats and install git so it's quite simple just download git and pretty much the same thing that you do to other software that you install on windows just click install click yes when they prompt with the credentials and all those stuff and you're good to go okay let me quickly pull up that page you just uh told me and okay so quickly now you guys should be seeing what i'm seeing it's actually the official way to download git the version control so it's not github we want to clarify that that git is actually the version control uh which you can go ahead and download so get is kind of like the local stuff like it's it's inside your computer and github is a place where you host your code online so you just get to host your code online on github so git is something that's local and installed on your computer exactly that that is correct uh i'm just gonna drop it in the comment section uh where where to download this and oh my god we have 440 concur concurrent viewers guys yeah exactly thank you so much guys for sticking here with us uh i just dropped in the link by the way thank you so much guys uh for staying here with us and if you guys find value out of this one smash that like button right smash it exactly just break it guys exactly okay um so um on downloading and installing git for windows there's this 32bit and 64bit setup so if you're using a 32bit windows so you can check it out and if you go to system info you'll be and scroll down you'll be able to find if your machine is 32bit or 64bit and if it's a 32bit download the 32bit for kit for windows setup and if it's a 64bit download the 64bit setup exactly i'm pretty much it yeah that's right that's right okay uh i just heard i just saw a couple of notifications that uh my audio is not good i think i raised my volume and now it should be good okay so because i'm using a mac i'm not gonna download it but you guys can go ahead and just pretty much like hit one of these buttons and then just go ahead and download uh get version control for yourselves um now that we have our git installed on our computer uh next thing what is actually good can you can you drive us into what it actually get so get is called a version control system so get buzz i don't need to go deep into the history but it was developed by linux to also the creator of linux so what you do with kit is not so you don't use git for version control with code but you can also use it for files and almost anything like that changes a lot in your computer like you might have a word document that changes a lot so you can use git to you know check the versions of your so most of the but you don't choose it with word documents but most of the time you use it with code so why do you use it like suppose me and david are working on a team together and we are working on different parts suppose he's working on the header component and i'm working on the footer component and now we gotta have a repository so what we do we host our code online and then what we do we have our own local repositories on computer to collaborate and work together with the same code so we don't clash or you know get crashed with each other on the code that's the main reason we use git and also another reason we use gate is suppose this is something that happens a lot of time and also has happened to me that is like you spend hours and hours and even days and weeks on a project and you don't have a git repository for that project and what you do you ultimately keep on working every day and what happens after a month or two your code breaks some at some point and you get so frustrated you think of breaking your computer okay so git is a life saver so what you can do is suppose your code breaks at a point what you can do you can use gate and reverse back that error and go back like it's kind of like doctor strange it's kind of like a time machine yeah exactly okay so lucy has asked the question and do you execute code on git um nope you are you're tracking the versions and the changes of your code in git uh i hope this answered your question if not uh ammanat's uh instagram is over there um somewhere yeah and mine should be here and then you can go ahead and hit us up and we are happy to help you with more questions all right um okay awesome okay so let's actually dive into how to actually use gin and and how to work with it and i think the best way to understand what this version control is and how to use it is with a app called github desktop now from the name it already shows that it's actually uh coded into github so pretty much it's integrated with github and by default you need to uh sign into github with this one but then you can just click through uh the whole thing and you can upload your code to github super easily and track your changes super easily and change branches and all that stuff now i actually prepared with this folder now it's actually a completely empty folder nothing inside of here and i'm just going to go go ahead open up a new terminal and what i'm going to do is type in get oh first i'll zoom in so that you guys can actually see it and then change the screen so that you can actually see so uh this is the empty folder i was talking about and so this folder is just for the sake of today's tutorial i'm not going to put inside of here anything i'm not going to put anything inside of there but i'm just going to show some stuff okay so this is how github does also another thing yeah windows developers i mean windows users is sometimes they think like the code that we use i mean like the commands and all are different from mac to windows but the kit commands are pretty much the same for windows and also mac so you guys don't have to worry but you can use the same commands on windows 2. yeah yeah yeah um okay so um with that said so how you actually initialize get version control so what i you usually talk about is uh on my builds i say something like get in it and then this happens so basically what happens is it adds this git and master after uh the project name and that's pretty much initializing the git repository on my computer at this time because right now it's local it's not uploaded to github and also it's showing because you have oma is it as such that is correct so guys if you don't have it i highly recommend everybody goes ahead and downloads it and installs it it makes your terminal life so much easier so now that i have my get version control initialized hey i think we got frankie in a house yo frankie hey what's up frankie hi there bro nice he goes let's go hey what's up okay so because i already initialized git version control i can go ahead hit this button and this is pretty much the repository explorer and i could say add then i can say add existing repository go ahead locate this one so this is in clever programmer youtube live git 101 uh and then because yeah so it actually it cleverly knows which is a repository and which is not and if if it's not a repository it helps you to initialize one so that you don't have to worry about the get in it uh command and all that stuff now uh when i go ahead add this it's currently still shows that that it is only on my computer so if i zoom in a little more uh you you can see that it's only on my computer and with this publish button on the right hand side so publish repository uh i can go ahead and upload it to github guys who actually feels that this can this video can actually give them value because they didn't know how to use git but wanted to learn it and and who actually thinks that this is something that can advance them in in the development world okay let me know in the comments in the chat whoops let me know in the chat uh what you guys think and if this is actually a useful video for you because really we we are working super hard on dropping um so much value yeah exactly value and content every day and we won 5 000 of you guys getting jobs as developers by december 31st okay so if you guys are beginners with git this is the good the best place to be because we are right now helping you guys a lot with we're learning one of the most essential um uh one of the most essential exactly that's right that's right okay so also another thing is uh a really good reason why you should have get and gets github as a developer is because the thing is as a beginner you might think you might not need it and you might not don't need to ever learn that but when you're like applying for jobs or even going to start freelancing people are going to check your project so from where do they check your code or is your code clean do you ever know the code or they just copy paste and stuff they discover i mean like they learn they can learn more about your technical side of you from your github account like they can go to your repositories and check out the projects that you worked on and check out the code is it clean are you using conventions like bam and all this stuff that's exactly yeah exactly okay i actually showed a couple of comments uh who said it's super helpful oh hey we got monika in the house yo uh i'm actually talking to her on instagram yeah uh so uh i'm very glad that we are able to drop you guys super uh uh the these while you draw value bombs and with that said let's actually go back and start learning how to use uh version control so now that i have my repository on github i don't have to worry about um if something breaks in my code because i have a good one on the cloud always now i i'm just going to go ahead and open up a vs code in this project and zoom in first so that you guys can actually see what i'm typing in here and what i will be doing is add a app.js file i'm not going to be doing any coding apart from this this is just demonstration purposes okay so what we will be doing here is pretty much just uh add a console log and just show you guys what is happening so you can already see that there is the letter u which is i think it's an i don't know it's some something something uh something new it already shows that the git version control has um has seen some kind of changes uh yeah and if i go in here into github desktop it shows me what i've changed now what i can do i can go ahead and commit this change but first i need to add a message like a comment message right why should we call it a mount let's say we created uh app.js file okay uh app.js created okay this is pretty much literally the exact same command if somebody is has done it uh with uh the terminal it's pretty much like saying git commit uh and dash am and add.js i think it's just dash m right um could be yeah it's actually am okay so these two are actually the exact same but typing up all this is like super long and especially if you're a beginner and you want to be like like super fast you might actually prefer using um something where you can yeah exactly and and you can just go ahead and click i know that because i learned how to use git using this yes uh get a dot is actually one step before that okay um okay so the thing is the there are different commands like if you are a beginner and like you want to start with git the best place the best way to start with kit is using the github desktop and like once you're advancing your skills and like you go deep and like you know you learn more on you know the technical stuff you can start using the terminal because terminal can sometimes be like too confusing for you guys so the best best way to start with git is with github desktop and then moving on to get terminal yeah okay now let's go ahead and actually do the commit so uh i'm just gonna go ahead and commit this right now i did the commit on my computer okay uh but i of course i need to go ahead and push it up to github so that i have it uh up there as well so let's go ahead and do that and now if i go back to my code once it's finished cool uh if i go back to my code uh it actually git lands all that already shows that uh there is some stuff going on in here so i created this i think you guys can see it yeah up here so the author is me i just committed a few seconds ago all right and also another thing like people might think is like there are three ways you can work around with kit one is the github desktop then you have the git bash the key terminal and then you can work with git inside bs code like the third the thing that like that has that i can uh david yeah what's up uh the vs code kit that's integrated inside yes code here we go yeah exactly this one right yep yeah yeah okay so uh yeah so now i actually added another row which is pretty much just console logging change and let's go ahead and what it does uh yeah so because it actually says that i removed this line so the only thing that i actually removed is the nonenter nonline break end of the line if it makes sense so i remove the no line break so i actually added a line break that's why i get version control thinks it's actually a different one so now i don't have to demonstrate how it looks like when i remove a line because this is how it how it does it and now it actually suggests me that update app.js could be a a good way uh to uh name our next commit and i just saw another um command that i want to address um so deepak asks so no need to download gif if we already have vs code that is not right you need to uh download git because we as code only knows git because you have git installed right is that right am i yeah so i think you yeah yeah in windows you must have to download but i think on maybe what's up sorry you got cut out yeah on if you are on windows you have to download it even though you might have it inside vs code but mac i think it's the opposite yeah so on mac you don't need to have it and hey we got a five dollar donation from frankie thank you so much brother oh thank you thank you so much frankie hey yeah this is 350 people live right now and this is amazing thank you so much we appreciate you man all right let's go let's go forward okay so uh now i committed this new change i uploaded it uh that was pretty much just demonstrating how commit push uh how commit and push works and if actually ammanath was working on the same project at the same time made another change and hey we got nas in the house yo what's up hey what's up naz how's it going bro okay uh i think the whole team cp mansion is inside youtube right now yeah that's right actually everybody who's in the mansion drop a comment okay uh yeah so uh we actually covered commit so amanda if amanot was working on the same project and made a change on this exact same project uh and committed it and pushed it up to github now i had to then then i would have to go ahead and fetch and actually sync my repository from the cloud to down here onto my computer on premise uh so that that's that's another thing i wanted to uh just tell you guys okay so it's kind of like i do a pull request to your repository and then you approve it and then you get the code to yours exactly then i have to pull it down to my computer so yeah use with using github it's actually stored in the cloud so everything everything is centralized up there in the cloud all right now and also people might be like right now people uh have like there's a kind of like a trend that's going on about october 1st and like people are talking about pull requests for you know just changing all the readme files and other stuff yeah yeah exactly exactly all right and we also got god um and we also got another donation from winnesh thank you so much brother uh we highly appreciate you thank you thank you so much for staying here with us and i just got a message that maybe you had some echo but now i don't think so okay um oh okay yeah okay guys let me know in the comments if there is an echo from amanath okay uh let's go forward and now i'm gonna talk about branches and doom here we go uh how you cloned github repository with git version control david mute your system audio i just did oh no i okay now i'm muted it again okay thank you okay um so now oh okay now now it should be fixed okay so uh there is this comment how you clone the github repository with git version control so there is several ways so with github desktop you can actually go ahead and say clone repository and literally just paste the link in here and then hit clone that's one of the most that's one of the easiest way and the other way that you can pull up your terminal uh zoom in a little a little more okay and type in here get clone and then paste the link okay okay now we should be good all right um next up we will be talking branches so what is okay let's okay okay um so branches what is a branch let's actually create a new branch let's create a branch called dev and we just went ahead and checked it out by selecting it so it's super easy uh with the github desktop you don't have to worry about all this checkout and stuff like that you just go ahead select it like a normal user would do it who is actually new to coding and that's actually one of the uh best um best ways to describe um github desktop all right um and now i'm gonna check out dev go ahead and actually down here you guys can see that it is actually selected and if i go ahead and make a change so let's say i delete this line of code and hey we just got another lovely donation thank you so much uh we really appreciate you bro i think it's it's actually your second one oh nice so um oh i'm getting a lot of donations yeah exactly so details regarding git pull and push using a vhc and a bash um what do you mean so using we as code i mean you can do it with vs code uh if you go in inside of here you can do a couple of stuff in here but i'm actually not a master uh over here but you can literally like select all these stuff um it's like i think that and if you are kind of intermediate and advanced go with the terminal exactly yeah yeah okay uh all right now cool and so i i just removed these two lines of code and this is actually currently on dev right so right now uh dev is checked out and i'm just gonna go ahead do uh this under comment and push it up over there and what we will what i'm gonna be showing you guys is how all these branches do work um there's no echo okay i think i think the echo is good now all right perfect so right now i'm on dev but if i go back to master notice that i haven't typed a single line actually let me pull the put these windows side by side so i'm just gonna go to dev boom it disappears and master it goes back there so it's literally um the difference between branches now let me quickly uh pull up a little bit of white board or actual gray board and how i would uh describe this or or show you guys is uh it's pretty much like this is where your okay hold on so this is where your code will start from then you will make uh then you will make some changes and then you make a commit right so now your code is at that stage that is actually master or main branch now you go ahead do and make another branch it's called dev you make a change here and make a commit now you go ahead make another change make another commit so let's say uh we have like uh one console log over here we have uh something import some importing stuff going on here as well as the console log and now we let's say we we import two uh two packages let's import another one just like that okay import and do another console log so that means the dev branch is actually um two commits ahead of uh master right so i hope this actually made sense and now i'm going to merge this yeah go on another thing that we can use uh branches is like suppose uh location that you worked on is already on production and like it's already online and like you want to make some minor changes or there are bugs you know you want to make change you don't pull the website the whole website down and you work on it what you do you make a branch to make the changes and once you make the changes and you're sure you make a pull pull request and make the word like update the master branch we just got another lovely nice donation thank you so much for sticking with us and we actually have 266 uh no 272 concurrent viewers at the moment uh thank you so much everybody for being here with us and especially for all these lovely donations uh so thank you so much guys this actually means a lot to us and it's actually shows that that we are able to provide the value that you guys actually need so this is an awesome feedback thank you so much guys really appreciate it all right um let's go back to our screen so i think we i kind of was able to uh explain how these branches work uh so this is actually the last thing i wanted to uh say here is that this is when i go ahead and merge the code so that literally means that whatever i have on dev i'm gonna go ahead and pull it into um put it into master i'm gonna demonstrate it like super quickly um so let's actually go and do that right now uh yeah um okay i'm just gonna quickly look into the chat nice okay so the other so what i'm gonna do here is that because the master branch already has this line of code and the dev doesn't have it right so it is actually a commit ahead of master what i'm gonna do is uh pretty much just go ahead and in a github desktop this is actually an other nice and super um super cool thing about github desktop then you can go ahead and literally like click which branch do you want to work in uh merge into which one without actually remembering any keywords or terminal commands or anything like that it just makes your life super easy all right now what i will be doing is going to going ahead and choose a branch which i'm gonna merge into master click on quickly going to select dev it says actually it's one commit ahead oh it's not the arrow it's one commit ahead and it shows actually this um what's that called how do we call this i don't even know how do we call this symbol okay so it sold that uh so shows that symbol and i'm just gonna go ahead and merge it now on the master there is no more second line okay so you guys can actually see how it um i disappeared super quickly so yep and that is pretty much the basics uh of of uh git okay one more thing though is that if i go in here into history that's actually a nice other way oh yeah it's a tick a check or a tick okay thank you guys yeah gotta learn the symbols huh so what i can do is go back go into in here into history and what i can do is literally just go ahead and hit revert this commit so with that i just got this line back so let's say i didn't want to actually delete that line of code what i wanted to well i wanted to do something else but i can go ahead and revert that and that is actually the most powerful stuff in git so currently i am working with a client and i actually made a couple of mistakes and i was able to revert back and go back in time into and and roll back my code into a stable version all right so guys i hope everybody loved this video uh i think that was just a pretty much a rough uh overview on how actually everybody could go ahead and get started with git guys smash that like button if you like this video and if you got any value out of it i think we can get this video up to oh my god we are at 342 likes i think we can crush it up to at least three 300 and um 360. let's go guys smash that like button i'm gonna do got anything else to add yep so i wanted to say uh the thing is if you go check out a lot of tutorials and even our tutorials the thing is we use the git terminal a lot right exactly but the thing is if you are a complete beginner and like you want to understand how all this work like when you saw the github desktop you know how the history and all this stuff work but when you're working on the functionalities like you might you can memorize the commands and do those stuff but you won't actually understand because humans like learn a lot visually so when you see stuff visual stuff like you know the github desktop for example you'll understand how the function works so if you're just diving into code and like you're starting to learn start learning uh start working with git repositories on the github desktop like at least for once you start working with it for at least for a month you will understand and you know how all how the git repository works and then you can dive in to the git terminal so that's my advice for you guys exactly and this is not something you want to miss out on and this actually may we may have made it super simple and super basic uh this is actually not something you want to learn later you want to learn it right now because this is actually a nogo for every company if you guys don't know how to use git so everybody uses git and this is something you don't want to miss out on all right with that said guys i hope you guys like this video i hope everybody got well you out of it thank you so much for watching this is daywid and this is amman a little loading time thank you so much guys for sticking here with us and we will see you in the next video all right video peace out peace guys