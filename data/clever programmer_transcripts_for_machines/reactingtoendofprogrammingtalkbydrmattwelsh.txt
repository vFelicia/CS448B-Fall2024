all right folks today we got an exciting video ahead large language models as is the end of programming this is a talk by Dr Matt Welsh that took place at cs50 I've been wanting to watch this video for a while but I was holding myself off from watching it because I want to watch it with you guys and react to it with you guys because I think this is going to be amazing so I'm really excited to watch it so it's going to be real time we're going to watch it together and I'm going to break down my thoughts on whether the end of programming is here or not and what my thoughts are on that so with that said let's just jump right into it and before we begin I do want to let you know that if you want to learn how to build apps with Chad GPT and Ai and learn how to use that to make money in as little as eight weeks with those skills like a bunch of my students have like Naza who's in the course right now that within 30 minutes of joining he actually built his first app so if you want to be able to learn those types of things I put together a free training for you where I'll give you three AI SAS app ideas that you could actually build this week I'll also show you the best ways where you can build an app production ready app that would have taken people months and how you could actually do that within a couple of days all of that stuff and more in the free training that I've put together for you so go ahead click the link below and sign up for that free training with that said let's continue so I'm here to tell you that the field of computer science is doomed that's a banger okay um and and I actually kind of mean this although I'm going to put it in somewhat humorous terms that uh if you think about computer science what is the field about what does it mean where did it before he even continues I just want to add here like let's see where he's going to go with it right but look at that translating ideas into program that's what computer science has always been about and so if you go back in the day before it was playing with logic gates directly then we went to a higher level language which was like assembly and then after assembly we got higher level languages like Java and then we started getting languages like JavaScript and Python and so if you look we kept going higher and higher level than bits and bytes so just just like just pure sheer logic think through that think through the evolution of vehicles and Technology automotive technology you had people walking then you had people probably trying to ride a [ __ ] Turtle realizing you can't ride it [ __ ] somebody's probably tried to ride a cheetah and lions and they died and somebody tried to ride a rhinocerus and died and finally they figured out that horse is the thing that you can ride like how insane do you have to be right to try that like who the [ __ ] was the first person to discover that a horse could be rode and trained like so many people died probably just trying to figure that out and then you had horses and then you had the next level up which ended up becoming like these carriages you could just sit inside the carriage while the horse dragged it and then horsepower and the thought of the carriages and the horses and they're like what if we could just turn it where it doesn't even need a horse and then it turned into Automobiles and then automobiles were like this great thing and then we discovered I don't know what the order of it is right but like we discovered trains at some point and we figured out airplanes at some point and we just figured out faster and faster and better travel before you have to swim and they figured out boats and so I just think about it like that logic gates assembly JavaScript AI right and the idea of AI is turning natural language ideas into programs so that's just what I'm thinking let's keep going come from what is it what's the core idea of it it's the idea of taking an idea an algorithm or a concept or a data structure and translating it into a program that can generally be run by like a Von noyman architecture machine right okay so that's computer science in a nutshell the problem is that um the the goal of Cs has always had this kind of core fundamental assumption or Axiom that is that the programs that we're all talking about here have been implemented maintained and have to be under understood by humans right that if I print out the code for a program a human some human maybe not everyone but at least maybe the person who wrote it if not someone else can understand it now here's humans suck at all three of these things we're terrible at writing programs we're terrible at maintaining them and we're absolutely terrible at understanding them so what does that really mean for the field so I want to make this claim that 50 years of research into programming languages has done effectively nothing to solve this problem we've been at this for a long time now 50 years is a long time and we keep inventing new languages and new programming Concepts and new abstractions and new data types and new proof method methodologies but so what does this mean this means that remember before we had JavaScript we had Java right and we had all these other languages we had assembly and then it was like okay we need to take assembly and make it easier so humans can write a easier if then statement than figuring out where to allocate memory for this if Den statement and so we got higher level and then it became easier and then we went even more higher level right with JavaScript and python Etc but basically his point is that th that 50 years has effectively done nothing we got typescript and we got react to make JavaScript easier and then we got next to even make that easier and then there's a framework for every single thing angular and while these are leaps and incremental improvements and it does make programming easier these are not Quantum leaps I think that's what he's trying to say here particularly right no amount of improvement to type systems debugging static analysis lynches or documentation is going to magically solve this problem is the idea here new solve this problem and I don't think another 50 years is going to solve it I think we've this idea of building automated tools to help humans write better software has played itself out valid now if you disagree with me let's just take a look at kind of the history here so let's rewind the clock all the way back to 1957 this is Conway's Game of Life implemented in Fortran I don't remember which dialect of Fortran this is but you know Fortran came about in about 1957 I I just claim this is really hard to understand I yeah that um let me see if I can try to understand this so do something 200 times between the range of 1 and 10,000 I don't know if that's right or not call off Tech if CD 7. eq. one4 go to 300 holy [ __ ] yeah I'm I'm lost there's something like database type that I see uh here database type yeah I'm kind of lost I mean I I see if and else if and else and then that has a nested if and all that and then continue but yeah it's real real hard to understand what's happening and I imagine it's something you're kind of doing at a pretty low level I I just claim this is really hard to understand I I claim that you can't look at this and unless you had some idea of the intent of the programmer what the hell does this do you could work it out you could spend some time reading it you could probably understand it with some effort but it's not trivial it's not straightforward yeah his point is that regardless of how nicely the code is written it still takes time to understand the logic of it and how it's working so there's still a lot of computational processing required for our brains and our brains aren't very good at that for humans our brain strength is creative thinking computers are really good at that okay so we tried to make program by that I me meant programming and logic programming easier we came up with something called basic in 19 64 this is not the original basic again it's had many dialects because obviously the first one wasn't good enough we had to keep improving the language that [ __ ] looks nasty this is the same program in basic I don't think this is any easier to understand okay I could spend some time reading it and convince myself that it does a certain thing but it's quite challenging to get so that is nasty if I if I had to start programming like that I would be pretty offut by programming then we came up with APL this is Conway's Game of Life and APL I would say raise your hand if you understand this but I know there's probably a few people in the audience who do I don't right this is a programming language so complex you needed a special keyboard to type it okay but this is what we thought was the practice of developing programming languages back in the 60s was this certainly a doesn't do the job all right well I've been talking about stuff that's kind of old fashioned what about the the new hotness let's talk about rust everybody's programming in Rust it's the latest and greatest thing since sliced bread I spent two years running engineering at a startup that was completely rust based I ran a big team full of rust developers I actually learned rust myself kind of this is the same program in Rust I don't make heads or taals yeah so basically he's like I'm not making heads or tails of this so he also has similar problem problem with this and yeah I mean even though you got some functions that make things nicer right you got functional programming you got a filter you're mapping through things and you got something happening here and you got a you know function called generation and you have it returns a colony class type or Colony type something along those lines like this here returns a hashmap and so we have somewhat understanding of this like we're making a new hash M here but do I really know what every single thing is happening and if I try to figure it out it would take a long time you know like the [ __ ] is going on here bro asterisk and sense. entry like what is that um and yeah I mean I have not really played around with rust but like you could there's some Java scriptin to it and a little bit of how it's written or some Ruess into it but ultimately it's still like hard to understand of this it is incredibly hard to write programs that are easy to understand easy to maintain easy to reason about okay so that's the kind of stateoftheart this is where we've gotten in 50 years from Fortran to this and I just want to make the claim that this is not this is not going to work okay we're done game over so what's next I love this guy well this is how I write code today let's go this is a prompt passed to the GPT for I get so much [ __ ] hate if I showed you let's go to my Instagram and I just want to show you the hate I get like look at this this is a post I made where I said programming will be dead soon and I said 2028 now it might be 2032 2035 but the idea is that I do think that coding as we know it is going to be dead and it's going to be something different meaning that it might turn more into prom engineering and idea generation and like you could see the hate that I got right influencers what you influencers get by creating unnecessary chaos among the community you guys are screaming like if you don't know or don't follow this you will be dead this video is a reason to unfollow you let's go look at find all the nasty negative comments God damn this is so untrue and very misleading so true unfollowed with pleasure LOL and the list just goes on right I made another post talking about all the negative comments that we got on this and so much hate and here's what I have to say to that right you can choose to be uh what do they call it you could choose to be um duck and put your head in the sand and just mute everything out and just be like everything is going to be fine but here's the thing all these programmers that are cuddled up in a circle jerk right now crying in my comment section of my posts telling me that they're unfollowing Me by leaving a comment and then and then probably unfollowing or probably not even unfollowing still following so they could just watch from the distance and [ __ ] hate here's the thing that's coping mechanism kicking in hard and I'm not trying to spread my idea isn't to spread chaos and fear so everybody just frightened is like oh [ __ ] I'm just mentioning the reality bro like this is what is happen happening this is how I'm writing my [ __ ] code I me I built a production ready app last month in one month with 100 to 150 hours of coding all by myself and that was something that before I would have had to pay three to six developers to do over 3 months and paid 60 Grand and I know because I've done that if you look at my channel oh the guy doesn't does this guy know really what he's talking talking about this this really know what he's talking about look at this I literally every [ __ ] day would build these apps who else do you know is building these app for 6 hours 8 hours 10 hours in a row we have so many apps that we've built and these were live We Built these live these aren't even all the other recorded videos that we've done so like it's not like I'm I'm building software for the first time and just some random influencer yeah there's ton of [ __ ] random influencers but like bro like look at who's talking to you I've been doing this for 7 to 8 years my first year in coding I learned it started making 100 Grand a year and then I kept scaling it from there so it's like I understand coding I get what you guys are saying I understand now let me address the hate too the the reason why I'm getting that hate is because people are scared and Afraid and maybe I'm leaning into it way too [ __ ] hard and maybe I need to change the tonality and maybe show more compassion but I'm trying to wake you the [ __ ] up because if you are not listening you're going to get wrecked and my point is you need to learn the new technologies and the new way of doing things so if you're not doing this meaning going and talking to Chad GPT to build out your programs and working with it or know how to do that you're [ __ ] behind here's a tweet by amjed mad the founder of repet okay repet just in case you don't know it and in amount of people are using it it's a valuation of this company is at a billion dollars it's a pretty big company and he's a founder of this company and he wrote this tweet on May 18th at a hackathon where a winner and this tweet got 1.2 million views right at hackathon where a winner is non Technic a nontechnical PM product manager and her work powered by repet plus AI is more technically impressive than teams of Engineers was surprised at first but it struck me that PMS must be exceptional prompting after all that is their job so I'm not telling you some random Theory stuff this is happening 9 months ago or eight months ago whatever whenever you're watching this it's January 2024 right now this is happening this is the truth this is the reality the person that won is not technical do you understand that the people that are freaking the [ __ ] out right now all technical people so either you can go into coping mechanism and regress and die off after a couple of years get replaced by these product managers who will output five times you don't need you will do it for sense and you'll be sitting there [ __ ] broke and useless or on the other side you can learn how to use these tools so you can learn to be thise effective she made this happen and made that project happen because she could prompt engineer it and she knew the vision of the project and then she worked with AI to make it a reality and that's where we're headed where ideas are being translated into programs so that's all I'm saying all right let's keep on going model and it's part of a larger program that reads in some text of a transcript that's been derived from a podcast audio feed we're feeding the transcript into the model and we're giving it these instructions we're saying please summarize the following segment of this podcast transcript only use the information in the text do not in caps this is important by the way the all caps is super important do not use any information you know about the world include the title of the podcast the name of the episode and the names of the speakers if known this English statement here encodes an algorithm it describes something that I want to do with an input data and the output data that I want and my expectations about the kind of thing that's in the output data there's a few things to notice about this the first thing to notice about this is I don't think anyone could ever write down the algorithm for what this is supposed to do in any existing programming language or any programming language that we're likely to come up with in the future how do you write this algorithm wait really is that true that's crazy can you not write this hold on let me just think about it okay provide a one or two sentence summary so that we could probably do with an algorithm send it off to an AI and it could summarize text so that's possible only use the information provided in the text huh that's kind of hard I don't know how to do that through coding that's a tough one like to tell it to only use the well well I guess if the program is offline then the only thing it has to go off off is the text I guess do not use any information you know about the world I mean I could scope it to that specific piece of text I'm giving it include the title of the podcast so I I don't I don't really know exactly what he's talking about here but let's keep going you can't right there's no pseudo code there's no proof there's no mathematical symbology here right um the other thing to notice is maybe I'm too dumb for that if you if you know let us know in the comments below at least for me I don't know about any of you do you understand this do you understand what it's saying does it make sense can you read it can you reason about what it's supposed to do yes of course right it's in plain English doesn't have to be English by the way it could be in Mandarin Chinese or espiranto have you all seen the xkcd about the guy who walks into his friend's house and he says okay Alexa order 5 tons of creamed corn okay Alexa confirm order it's how he makes sure that no one's got a speaker listening to him okay so the point being that this is now how I am actually writing code and what's funny about this is a lot of it is trial and error and experimentation by the way that's the same when I'm writing normal computer code and the other thing that's interesting about this is there's a lot so yeah trial and error is there I mean I do that too that's why I'm still spending 150 hours when I was building that app and I couldn't just do it with one prompt there was a ER then I would tell the computer again hey we got an error let's do this let's do this let's do this and I just kept working with it and making progress a lot of subtlety in terms of how you instruct the model and how you know what it's going to do with your instructions you can't write a manual that says well here's the set of words that you need to use to get the model to do X Y or Z you have to just try out certain things in this case I found out the do not in all caps really helped because I really wanted to emphasize that point to the model this reminds me of another programming language that someone came up with a while ago called intercal intercal was meant to be one of these uh kind of obscure or maybe satirical joke programming languages intercal had these interesting features like brain [ __ ] or Whit space such as you had to use the keyword please and if you use the keyword please too often the compiler would reject your program if you didn't use it enough it would also reject your program and it turned out that feature was undoc doed it's exactly like what we're doing today right we have to say please and do not in all caps to get the language models to do what we want so where am I going with all this I think what I'm saying here is we are now in an era where we have machines that can take natural language in and produce results algorithmic results computational results but for which no human has written a program in anything resembling a conventional programming language and I claim that these models are going to get so good at doing this that our whole concept of programming computers is going to get replaced over time with instructing language models to do things for us yes that I 100% agree with that that's I what I see happening right now I just I don't remember a lot of these apps I built over the last couple of months I just don't remember writing code from scratch I just really don't I just tell I'll give you an example it be like hey uh I need to make a button for a modal uh when a user clicks it it should pop this up and let them add a new todo cool and then I just I just look around wait for the chat GPT code to come in grab it put it in there Boom come right back and then just you know see if it works great it worked I have nothing to do I can continue moving if it doesn't work come back didn't work this is the error I'm getting wait for it to give me the code copy paste Works Cool mostly I'm just thinking of what feature to add what's a new thing to add and I'm thinking of the next steps rather than like um do I need to use map for this or what JavaScript algorithm do I need to use to make this more efficient o am I writing it in two for Loops instead of one oh my god did I unsubscribe from my Firebase because I'm going to get a a read of 50,000 plus reads and that's going to blow through my quota and I'm going to get end up getting charged so much I just want to make sure that my unsubscribe is done properly let me just try to remember the documentation of Firebase real quick go to stack Overflow and and look it up by some some passive aggressive nerd that wrote the top comment let me let me copy paste from him like that's where a lot of my time was going whereas like now it's like it just does it for you and it handles it it for you and I love that just makes those things simpler I don't I shouldn't really need to use my brain for like looking up documentation looking up all these things that just are very tedious and it's like I I get the point of what I'm trying to do so let's take a look at the state of programming language technology this is a programmer uh without copilot in around 2020 colorized bro this is exactly what I've been saying that is you that is you no offense if you don't use Ai and Chad GPT to help you so whether that's copilot or Chad GPT or any other tools that exist there's so many other tools that exist GPT pilot exists I was going to do a video on that but that's you this is what I was trying to say you're on feet while I'm in a car you're walking on your feet while I'm in a [ __ ] yacht or on a plane traveling somewhere and then you're trying to race with me so that's why it's so funny like that there's so many amazing parallels he's drawing here okay I think I met that guy out in Central Square this morning um and here's a programmer with copilot in 2021 right so clearly we're evolving very rapidly as a species of programmers unfortunately both of these cases are male I apologize for that so how many people here have used copilot or one of its ilk in terms of he helping you write code don't be shy I know you're Prof you're like who's my professor in here oh [ __ ] all right so copilot if you haven't used it is a complete Game Changer in terms of how real world developers write code okay yes it's also kind of a huge boost for students who want to effectively shortcut their homework speedrun if I don't have copilot I absolutely feel naked I was on the airplane out here I was writing codes yeah I just love when I'm doing copilot I use jbt more than I use copilot but I also love that it can just start to finish up the thing that I'm about to write including documentation right I'll be writing a documentation it'll just autoc complete it or if I'm writing a function it'll just autocomplete it so I really like that the WiFi was not quite fast enough so I would type out you know my half a line of code and just sort of wait for copilot to finish it for me like I always do but normally that happens in about like less than a second and this time it was just taking so long I said ah damn it I guess I have to write this myself just like I used to a year ago copilot is is incredible for a few reasons I think one of the things that people don't fully appreciate is that it keeps you in the zone of writing code it used to be the case that anytime I'd hit a little snag I'd be like oh crap I can't quite remember the Syntax for how I you know reverse a list in whatever language I'm working in yeah crap well I know where to find the answer I'll just Google it it's on stack Overflow somewhere and so I go and I Google it and I find the the thing it's probably not a direct answer so I have to kind of read the article a little bit and kind of piece together oh yeah that's the snippet I was looking for and then 45 minutes later what am I doing I'm on Reddit somewhere you know I've gone down the Rat Hole of surfing the internet I got out of the zone of writing code yeah keep you in the zone I I think people are so much more productive with this to the point where we mandated every developer our company has to use copilot yes if there's somebody not using copilot they're going to be fired well I didn't say that but kind of the idea so a lot of people that should be the idea chastised or criticized copilot for being a little dumb right it's not it's like well it's just trained on stuff it found on the internet on GitHub and homework assignments how good can it be and now I'm going to get more nerds in the comment I don't want to give my data to anybody I don't want to give my data to anybody but like your data is how it's I don't even want to get into that combat but like I remember making a video recently and everybody went and lost their [ __ ] cuz I said I love to give away my data you're like that's how it gets better share your data that's how it get better it's incredibly good it's not just parting back things that it's seen elsewhere it's interpreting your program and your intent it's looking at other parts of your code to understand what you might do next it's um understanding your data structures it's not just looking at a little context window in this current file you're editing it's looking elsewhere in the code to find something that might be relevant and the only thing that is stopping copilot from getting really really really good at this is just more data and more compute and guess what we have both of those in abundance oh yeah right there's nothing that's going to stop this from getting incredibly good overtime um so here's another kind of similar use case this is not uh copilot this is chat GPT which I'm sure we're all familiar with M but if you are trying to figure out how to do something and in this case I was you know using the Deep gram python SD again Shameless plug if you want to learn these exact skills how to build apps fast and use that to make money I will show you I've put together a free training for you I literally show you how to build apps so damn quickly it'll make your head spin and I've had count count students go through it and have that experience so click the link below you have nothing to lose watch that free training because you can gain so much and it can change your life profoundly all right click below I want to see you in that training let's keep rolling okay to transcribe audio files for this podcast thing I mentioned earlier I could have spent 15 20 minutes reading their documentation finding some example code on the internet following a tutorial or dude that's so funny because I was literally working with deep gram deep gram is actually one of the best transcription sources of available deep gram is sick is if any of you is trying to do something with transcriptions look up deep gram it's awesome their API is so good because we're all like you know programmers are incredibly lazy just say hey look I'm trying to do this thing can you just give me the code I need and it does it copilot is not just understanding homework assignments chat gbt is not just understanding homework assignment it like understands other people's apis and sdks and programming libraries and abstractions and best practices and bugs that might occur I mean it's really got a lot of knowledge and so with very little and his his uh his uh GPT here is old right you could see cut off is 2021 now that GPT has been updated cut off is actually 2023 so GPT will know like pretty much everything every programming language and documentation that you're looking up right now effort then I can just cut and paste this code right into my program and get on with my life right shell Silverstein who wrote uh a Light in the Attic this is something a children's book book of children's poetry that I read when I was a kid I saw this on Reddit a couple days ago he completely predicted this right this is 1981 you know the homework machine oh The Homework Machine most perfect Contraption that's ever been seen just put in your homework then drop in a dime snap on the switch and in 10 seconds time your homework comes out quick and clean as can be here it is 9 plus 4 and the answer is three three oh me I guess it's not as perfect as I thought it would be exactly toss a dime takes about 10 seconds it gets the answer wrong this is very much what we're dealing with today I mean with GPT 3.5 yeah GPT 4 it's a little bit better but I think with five and GPT 6 I think it'll start to give you pretty accurate answers right away by the way and this is a complete aside but I can't resist when I mentioned shelf Silverstein if you don't know what he looked like this was the cover uh the the photo on his the dust jacket of one of his first books this guy I love this guy a children's poetry book author from the 70s and that's what he looked like amazing all right so so now I want to talk about well if this AI technology is getting so good then what's going to happen to our industry what does this mean for all of us who might be looking to get jobs in this industry in the future future and expecting to get those you know big fat paychecks and stock option grants and you know buy Teslas or whatever we're expecting to do so how much does it cost to replace one human developer with AI well I did the math so let's say that a typical software engineer salary in Sil Valley oh that's really good this is the juicy part I'm excited let's see it Seattle is around 220,000 a year that's just the base salary doesn't include benefits doesn't include Equity packages doesn't include your free lunch and your bowling alley and all that kind of stuff so let's just assume that that stuff cost you know 92k a year which is again a little conservative so the total cost to your employer is roughly 300 312k for One S many working days are there in a year about 260 and so it costs $1,200 a day to employ you as a s at one of these companies fair enough $1,200 a day think about how much HP cost per day right as many queries as you want maybe $5 maybe $3 $5 think about that $1,200 divided by $5 240 times cheaper so that means for you they could hire 240 developers so I mean like you know what I mean like I hope it's adding up but I hope you're not getting scared I want to empower you that's the idea it's not so you're freaked out and like I should just quit and just do something else to just become a truck driver that's not the idea I'm trying to show you that there is a way let's keep going okay so let's do the math how many lines of code do you think an average developer checks in to the code base every day I mean finalized tested reviewed and approved lines of code most of us who worked in Industry know that the uh the median value is zero because there's so many days that you go by where you're waiting on somebody else or you're in meetings all day you didn't get anything done you didn't check it in but let's just be generous here and say it's about 100 I know 100 doesn't sound like a lot people like but I was programming all day yes but 90% of your code you ended up throwing out or somebody reviewed it and said it was no good you have to rewrite it you were trying to figure out what to do you were revamping it so like the final result of your output is something like a 100 lines of code a day that's the final result how many gpt3 model tokens is that it's about 10 uh tokens per line more or less so and the cost for GPT ooh this is strong logic right let me actually go back out so like the final how many gpt3 and the cost for dpt3 current actually this is probably a little out of date but at the time I made this slide it was 2 cents for a th tokens okay so if you do the math then the total cost for the output of one human software developer on gpt3 is 12 cents this is a factor of 10,000 12 cents I mean like look I know it's hard for maybe you or somebody who's a developer to think like this right but I'm a CEO I run a company so I think like this if I was a developer and my entire life depended on it and it was tied to my identity And if every dollar I made was from development I'd be scared shitless and I would be commenting on people's real telling them that they are scum for talking about the future of future becoming Ai and going away from coding I would be doing the same thing probably I I wouldn't I know myself but let's just say okay in some world I I might be doing something similar or at least I could understand how you would do that and and feel empowered by it in a sense of control cuz you're scared your future is about to get uh erupted right or disrupted but but as a CEO bro like give me this all [ __ ] day I don't have to deal with their headaches I don't have to deal with their emotional problems a lot of a lot of developers have health problems that I have to deal with and then they it [ __ ] up their mental stuff uh they need days off they're like so um a lot of developers they're just terrible at communication I have you you know somebody has to manage them and make sure that they're hit the deadlines and there's just so much crap and I've I've hired so many software developers on my own company and we're a small company at clever program or a tiny company imagine companies where there's hundreds or thousands of developers tens of thousands right for some companies that are big enough but there's just so much other stuff that you have to deal with and so for me it's like [ __ ] no I'm not doing this I'm not hiring the developers and that's exactly what I did when I was building my entire software where I just built it all by myself and most of the apps that we build are built with AI and it costs fraction of the price and it's amazing now I will pay somebody $800 or less and we'll build out a full app together whereas before I would have paid them 10 grand over two months 3 months and it would have taken so much time you know so not to mention like time not to mention time because people are slow and it takes them time you know all so much stuff this thing here never sleeps uh writes better code uh no days off right um like no no problems has no problems right essentially there's no problems um you know you know what I mean so it's just like not only just the cost Factor but the time Factor right does it instantly okay uh Works 24/7 so like if you just think about that it's it should I hope start to make sense where we're headed and what that means is you got to get occupied and you got you got to get equipped with the skills need needed to be in that direction meaning you need to be prompt engineering like a god you need to start developing more product manager skills Vision skills of how what features to build why to build them how they can make money for the company that you're working at no more being protected by Daddy because you're a sweetheart and a company that has a lot of money is going to protect you and provide you with safety right you want to be somebody who's actually valuable and making sure you're doing things that make that company money and so if you constant conly keep thinking like that you're going to be a valuable asset to society forever and you're going to learn these skills like prompt engineering along the way and so then your coding skills will feed into more of the prompt engineering where your coding skills will come into play is when you go get into bugs using your coding skills you'll be able to debug using your coding knowledge of the sphere of which Frameworks to use what technologies to use which apis to potentially use that kind of creative creative thinking is still valid valuble now might some of that might go away in 5 10 years because AI will start to have creative thinking too but that is the valuable asset right now so think more about that factor of 10,000 this should scare us all wow right this suggests potentially a very large shift in our industry I don't think we can ignore this and just write it off and say well the AI is not very good today so therefore it's not going to be good in 5 years right this radically changes how we think about only reason that programmers are paid so much is that it requires years and years and years of Education and Training and knowledge and specialization to be good at it but there's no reason that I need to hire a super smart you know Harvard educated student to do this if I can get chat PT to do most of the work for me and have a human typing it in yes MH there's a lot of other advantages to hiring the robots instead of the humans hey this is already I already covered all that let's go we already covered all that maybe but let's see what he says right robot's not going to take breaks the robot is not today expecting free lunches and you know onsite massage that could change the robot takes the same length of time to generate its code whether it's the rough proof of concept or the final production ready code when you go as a PM to an organization to your engineering team and you you say Okay team there's eight of you here we have to ship the billing page how soon can we do it you're going to spend at least an hour and a half having the conversation well you know like if we do it quick and dirty we can maybe do it in three weeks and if it's got to be production ready give us 12 that's another thing I didn't think about that meetings and the back and forth and all that you can have that with Chad GPT and it's almost instant you don't have to have that either you can save all that time that you normally would be wasting on meetings or you can go to the proverbial Homework Machine push the button and have the code right now right um and the other thing is yes the robot makes mistakes but those mistakes can happen incredibly quickly to the to the level of speed where iterate iterate iterate iterate iterate iterate iterate is perfectly fine you can say to the robot you know what this whole thing 5,000 source files 20,000 lines of code whatever it is blow it away start over boom five seconds later you have a brand new version of it yep try that with a live Human engineer team right so I think this is all like something that we really have to take seriously I don't think that this is just I am exaggerating for effect but the industry is going to change so you know the natural question then is well what what happens when we cut humans out of the loop how do we build software how do we ship product um I found this video on I think it's Microsoft's website and it's titled what do product managers do uh that was a little bit of an unintended joke I think because as an engineer we often go what do product managers do um but if you imagine what the software team of the future might look like well you saw that repet tweet that I showed you on Twitter that PM was killing it at the hackathon and then based on what he's saying yeah like look at that right you got a PM doing everything the this is he's actually kind of talking about that right now right AI robot makes a code which generates a code and then you got the human code reviewer so honestly what will be happening is developers will turn into code reviewers this is why in my course and in my program I'm training people to think like product managers and then use AI to build stuff and be the one to be able to review the code those are the people that are not going to get replaced this is what's happening right your your job as a developer is going to get commoditized and it's going to be down to you being a human code reviewer you understand that you're going to be a [ __ ] spell checker in a few years so if you want to be complacent and sit down on it and just be like this is it I I've made it I'm good I'm a software developer now you're going to be demoted to a spell checker my friend this is the equivalent of a spell checker so just be aware of that approach which is you have a product manager this is probably still a human taking the business and the product requirements the user requirements and translating them into some form probably English maybe a little bit technical English that you then can provide to the AI the army of AI code generators the AI code generators give you a whole bunch of code and probably for a while still we still have humans reading and reviewing the code to make sure that it does what it was supposed to do now that read is a little different than what we have today today when we review code if I have another engineer on my team writing code and I'm reviewing it standard practice in the industry is to do code review for one another we don't just check in code we read each other's code we make detailed comments on it we suggest improvements cleanups clarifications comments documentation in this case it's not absolutely essential that this code be maintainable by a human I think for a while we're going to want that right most people are not going to feel comfortable just letting the robots do all the coding but at some point as long as I can convince myself that the code does what it's supposed to do I mean it's kind of like AI cars cars that drive on autopilot without needing a driver in order for Humanity to get to get used to it I mean it'll take some time it'll be scary you'll sit in an Uber ride and you wouldn't feel comfortable driving to downtown with no driver there and the car driving itself it will freak most people out marz brownley or am I saying his name right or am I just making it up MKBHD okay maybe I'm saying his name wrong but MKBHD he made a video where he was driving a Tesla and it was riding it automatically and his heart rate was like elevated up to 140 beats per minute that is something that clearly shows you he's scared and that's the fear that we're going to have for a while right but just like a child learns to walk and learns to ride a bike the first time you rode a bike your heart was beating and you were scared the first time you were crossing the street you were probably scared just like that you know the first time you go to an interview doesn't mean all those things are bad for you the first time you public speak you're scared the first time you're you raise your hand and answer question or the Teacher Calls on you and you answer it you're scared just like that we're going to be scared initially to give up control for the code to the AI but if you saw your friend ride in a autopilot car now you'll be a little bit less scared now if you saw 10 of your friends do that you'll be a little less scared now if you found out that your entire family and all your friends have been riding in autopilot cars for years you'll be less scared if you found out you know there's millions of people now doing it you'll be less scared if you saw reviews you'll start to be less scared if you watch other people doing it on YouTube you'll be less scared and so the more accepted it gets the more of a social Norm becomes the less scary it becomes so in this case with this situation here the programming being changed and taken over by AI will start to give up more and more control and be less and less scared as it can show us it can do a good job and get us from point A to point B without us getting into a car crash and dying I don't really care how messy it is I don't really care how it's structured I don't really care how reusable it is all of those factors are only because poor humans have to Wrangle with this stuff right oh it needs to be modular we need to have abstraction boundaries right all the things you know sophomore level computer science right why for the sake of poor humans having to deal with this complex code base but if the robots are the ones generating it and we don't really need to maintain it in a conventional way why not just generate the code you need it doesn't really matter if it's duplicative or repetitive or modular or nicely abstracted doesn't matter does the job yeah I agree so one of my hypotheses around why everyone has been freaking out about chat gbt is because unlike other Industries um this revolution seemed to occur overnight unless you that's what I'm talking about this is why I'm getting the [ __ ] hate it's crazy Psychopaths insane insane I've never experienced that before but they're going crazy it's like hoorde mob but come at me I don't give a [ __ ] you know if you if you want to do that I'm happy to have a open discourse and open dialogue that's the beautiful thing about the world and our country we we're allowed to have freedom of speech so I welcome that but yeah it's sudden and happened overnight I want to let him uh speak on this more you're like a AI professor and have really been following the literature for years and years and years to most of us myself included this seemed to just go from you know AI was kind of crappy to AI was amazing literally overnight right so to use an analogy this would be as if the field of computer Graphics went from pong to Red Dead Redemption 2 in the span of about three months yes that is a brilliant analogy right people's heads would explode if that happened right but that's not what happened in graphics right in graphics it took decades to get to this point and everyone could see it gradually getting better and better and better you know I remember when Toy Story came out and that was like the first CG movie people's minds just melted watching that they were like whoa and now we watch it and you just like oh yeah that's cute you know I could render that on my laptop and scratch or whatever right the other thing that's happened I think in this field that's interesting and there's a big societal shift happening is the dialogue around our expectations of what AI can achieve and so in 1972 Hubert draus wrote this book what computers can't do and this was at the dawn of the PC era and there was a lot of popular press and dialogue around this sort of scaremongering around Ai and you know we had movies come out like war games does anybody remember that I think War Games by the way that movie is why I a computer scientist right I was like I want to be Matthew broadrick I got to watch that movie in this room with like all these monitors and my like analog modem and hacking into the school computer like that was me as a kid so at this time I think a lot of people were saying well hold on a minute computers are fundamentally dumb and they can't do these things and they never will and that was the thesis of this book here and I think that that was the sort of consensus view right we we sort of calm down a little bit about the technology we all kind of realize yeah okay visaal is not going to put me out of out of out of a job right but now Fast Forward 2014 I highly recommend this book if you haven't read it by Nick Bostrom called super intelligence this is a book that wrestles in a tremendous amount of detail with the philosophical it's called super intelligence by the I mean yeah okay you could see it my bad the moral questions of how does human society respond to an AI that is more intelligent than humans and I know we've got you know a lot of scifi around that topic but this is a very serious academic work about what does it mean for our society if we have ai that is smarter than us and people are taking that very seriously today so I think my point being that the the dialogue that we've been having in the uh in society at large has shifted away like this stuff I'm a little less you know I'm not like a theoretician I'm a practical Builder and so I am excited about what I can build today with AI and that's what I want to share with you guys right that using these tools you can be building apps today regardless of if you have coding skills or not and you can learn specifically the skills you need on the fly with AI helping you but like today there's no reason that you can't be freaking iron man everybody's an Iron Man today with their Jarvis that's how it feels to me at least when I go into Chad GPT and I start building apps with it so I want to just open your minds to that and I want you to be practical right be a practical Builder I mean all this Theory stuff is cool like what if we have robots everywhere and we feel like slaves and what if the robots kill us sure we're going to die anyways right at some point so I'm much more interested in what we could practically do with the tools that we have today and in the next couple of years what that looks like from AI as a toy to AI might actually destroy Society so let's just talk rap rapidly about the future the evolution of programming as I see it so you know in the dawn of time we had humans directly writing machine instructions and you know inputting him with toggle switches and stuff like that right that was this is exactly what I was talking about earlier in the video that was before programming and theams in higher level languages yep and then he goes then we went higher level languages that's why I'm skipping through a little bit cuz we already kind of talked about this point that he's making right now that's beond St who invented C++ so we went from like toggling switches to now C++ Plus and in modern times we have a world in which humans are writing their code but they're heavily assisted by Ai and they can get away with things like well I'll just write a comment and have the AI write the code for me right yes but my claim is that the future of this really is skipping the programming step entirely think a yeah exactly think of it I love that photo actually because it just sparked an idea in my head but AI is a new child child it's basically just like how you train so for example right I could become a programmer or I could have a child Inspire the child to become a programmer and then he or she becomes a programmer in the next 18 21 years um and then goes on and becomes an epic programmer right but then there's all this time and cost and so much random [ __ ] right where with AI there there isn't that like you teach the AI model how to think or how to solve a and like you could Inspire an AI probably in the future to become a computer scientist and then it goes on to become a computer scientist and then it goes on to become the best computer scientist in the world and it goes on to build the best apps and all of that happens within maybe a couple of minutes maybe within a week you know just like the AI that sat down that taught itself chess and then 24 hours later it beat Magnus Carlson who's the number one chess player in the world a lot of people who've read my article on this topic is in the C misinterpreted it as saying AI is going to write code for us therefore programmers should not exist I'm not saying that that's very important so I'm going to repeat that AI is going to write code for us therefore programmer should not exist okay so this is my point that I've been saying even if traditional speaking programming is going to die right I have to write a headline to get people's attention that's what everybody does but it's not that it's not true it's that programmers role will shift heavily and I want to catch your attention by Shocking you and then I want to show you what's the way that you can go so this is exactly what he's saying where're programmers is isn't that programmer shouldn't exist but programmers are going to evolve to prompt engineering and building apps they're going to get promoted into a product manager role where they're going to be product managers and maybe even human reviewers you know code reviewers or they're going to have human code reviewers underneath them but that's I believe where the shift will be going I'm not saying that I'm actually saying something much worse which is you won't have to have programs at all you just tell the language model what you want and it directly computes the results he went even one step further than me there's no program step and I I think that opens up it is an interesting challenge for our field but I think it opens up a tremendous opportunity because now the question is how do I effectively teach these models what to do coming back to my example earlier of having to use the words do not in all caps what are the best practices and Beyond best practices can we turn this from effectively a dark art into a science into that is actually one of the things that I discovered when I was doing so these are the skills you're going to need to develop and I agree with him where he's going with this but when I was building my own app um a lot of the time that I I I spent was discovering the dark arts of how to coax and chus and guide Chad GPT into the app that I was trying to get it to build and it was me just learning all these tricky prompt engineering hacks the one for example he shared with you where he writes do not ENC caps and that enforces a certain Behavior then you know for example I was teaching it with I was giving it certain examples of things it should be able to do or things it shouldn't be able to do but then what happened was when I was giving it those examples it started adding specific text from those examples and everything that it did so started having a bias because of the example and I was like damn that's also what I didn't want so then I had to like keep tweaking it until I got the answer that I wanted and so there's there's a back and forth dance and that's where I'm saying you need to be spending time in because that's where I was spending time in and it's like it's creativity and science combined on how you can get it to do the thing that you want it to do that's where we're I believe where we're headed and where you're going to get the most value do an engineering discipline and people have talked about prompt engineering as a thing I I think that's meant kind of tongue and cheek it's not really prompt engineering is not really a thing yet but it may well be in the future if we do this right so um one of the things that people often say about these models is that there's no way they can do anything interesting or creative because all they're doing is autoc completing based on large corpor of text that they've seen and been trained on that's [ __ ] I've done like it's true in terms of they've been trained on historical data but I've had it solve a lot of unique problems that have never been solved anywhere before and it was able to put those things things together and so I know firsthand that that's not the case I beg to differ now we obviously don't really know what's going on inside these models but if you ask a large language model to take a complex problem and effectively run a computation that is to manipulate a model of the world in its mind in this case I've come up with a simple problem here I've said I've got three stacks of cards red green and blue cards and they're all shuffled up in the following way please tell me how to lay them out into three stacks one red one green one blue simple problem right a child could do this now the key phrase here was as was discovered not long ago a couple you know few months ago you have to say the words the magic words let's think step by step if you say that to the model that somehow triggers it to go into computation mode now it's no longer just parting back some answer it's actually going to say okay well I have to actually elucidate each of my instructions and so it does it absolutely does it mhm and the fact that it's able to manipulate some kind of internal model of this stack of cards that I described and and and tell me exactly how it's going to work and and it's correct you know is fascinating to me it's not hard to trip it up there's plenty of places you can give it a problem and it's going to immediately fall over and go sorry it's going to give back bogus results so the question is why you know what do we do in this case how do we understand what the limits of this these models are so I do think that over time we're going to get to a place where programming ends up getting replaced by teaching new model uh teaching these models new skills yes so programming would get replaced by teaching these new models new skills and teaching them how to interface to apis and pulling data from databases and transforming data and how to interact with software meant for humans that's going to become an entire discipline right there um and one way of thinking about where this might go is what I like to call the natural language computer like for example I wanted to use v9 of Firebase which is the newest version of Firebase I couldn't do it because Chad GPT had a cut off or something and so Chad GPT didn't know about the newest version of Firebase it knew about the old version of Firebase I believe V8 and I got it to write my code but it wrote it all in V8 the older version and so it kind of threw my entire app off because my app was requiring that I put it into v9 and I tried to look online and there weren't a lot of there wasn't a lot of gr there there was some documentation but I needed Chad GPT how to convert from V8 to v9 I needed to teach it how to convert that and there was a guide by fireship that shows you exactly an example in V8 and then right underneath it an example in v9 for things like adding things to the database deleting things editing things um adding one thing adding multiple things Etc and I took that guide and I gave it to Chad GPT and I'm like these are the instructions on how to go from V8 to v9 and I just then let it run and after it ran it learned v9 how v9 works and that's exactly how you would teach a human that's exactly how I teach myself and ever since then my Chad gbt had learned how v9 works so then anytime I asked it to write code it would just give me in the v9 form that I asked for so it's something new that it learned and that was I thought a very cool application of this exact thing and that's the skill that you will need to start focusing on developing you know skills like that so the the vanoyan architecture has served us well for many decades this is the new architecture and the new architecture you give it a program in natural language you use a language model that then can call out to external systems and software as peripherals it can store results and tasks in its memory assisted by things like vector databases and so forth M and it can run autonomously in a cycle executing this program creating tasks accessing outside data sources generating new knowledge and so forth and tons of people are out there and we are too building things that effectively work this way and I think this is kind of a new computational architecture that we see emerging right now and I don't think anybody we don't have it right nobody has it right but this is we're seeing the inklings of it right what we have today is kind of the you know like the equivalent of I don't know the pdp1 or the apple one of this architecture coming together so um I'm legally mandated to pitch my startup okay so before he goes into his pitch Yeah so basically when I look at this let's go to the actual photo of this so yeah basically large language model will need a way to interface with the outside world and this is where external tools pereral come in so let's say you ask Chad GPT to make an app that can tell user the weather okay what the current weather is in their City chpt doesn't have that data off hand right it won't know the weather today or the weather tomorrow Etc and so Chad GPT the natural language program will go out to an API and then ping that API and that API will get the weather data Etc it'll do all the tasks it need to do to get that and then it'll store it in memory and JP will use something like a vector database you don't have to worry about it basically it gives it like longterm memory so chpt can remember even after a long conversation what the weather was Etc and then chpt will be able to show that back to the user so that's an example of how you could build a program with it but that the coding part right the API part and tasks part all of that will be handled automatically so here's what we're going to do because I have a meeting right now we're going to turn this into part one so said this is part one of end of programming and you know especially with large language models there and if you enjoyed it let me know and comment below asking part two okay if you comment below part two I will drop part two of this because they'll tell me you guys are looking forward to that and outside of that I just want to let you know again if you want to build apps with AI and chat GPT we're doing that okay we have so many students that if I go you the wins they're building their apps we just had a student built his first app 16 hours ago we have all these other students that are building their own apps right we have a huge Community we have students who are not only building their first app but actually even selling their first app and so Kyle actually made his first sale of the app that he built right and we have these students building these apps within minutes at times and the the results of all of them are absolutely incredible and the list just goes on right like Helm goes I finished the first app in about 30 minutes so if you want to get these skills and learn exactly like these students did right Janette goes my dream was to be a programmer I'm 52 and I've not made that dream a reality and one day with this program I built my first app so if you want to learn how to do that I put together a free training for you click the link below and go watch that training absolutely unbelievable it's only 19 minutes long and it has the potential to change your entire life so I recommend go click that watch it I love your beautiful face and I'll see you you you in the next video peace