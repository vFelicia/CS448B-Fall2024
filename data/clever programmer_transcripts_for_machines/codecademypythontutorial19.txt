hey guys what is up this is kazy from clever program.com and welcome to another episode of Code Academy this is code academy Python tutorial part 19 all right so let's get started last time we left off on um let's just double check where we left off so we did um it's not cheating debugging you win danger not again so we have made made it all the way to test run we're almost getting completed with our um game okay so let's go here and run it let's see what happens so it says make sure you play it a couple of times and try different kinds of incorrect guesses this is a great time to stop and do some serious debugging so I encourage you guys to try to debug this on your own as well meaning uh run it and try a bunch of different uh inputs and see what it what it gives you okay in the next step we'll move on and look at how to give the user for guesses to find the battleship thoroughly test your game make sure you try a variety of different guesses and look for any errors in the syntax or logic of your program so what we'll do is we'll copy all this code we'll come over here and we'll run it it tells us that the code is wrong which it is because um in Python 3 you need to put parentheses after print print again another print that's wrong um hopefully every other print is right let's check it out raw input is not defined because in Python 2 again uh it's not raw input it's just input it's easier right you don't have to say raw input every time let's see what other errors are there let's run it okay cool the game ran and it goes you missed my battleship you missed my battleship I don't like this part right it says you missed my battleship twice um however that's good that's right cuz we did miss the battleship the battleship was located in 42 and we took a turn in column four row four and column four which is uh right over here right it's the absolute last one um just to let you know it's row zero Row one row two Row three row four column Zer column 1 column 2 column 3 and column 4 so we have missed the ship what do we do well we simply guess again however it should be reducing the number of guesses So eventually uh you run out of guesses right after four guesses you should should run out so try to go ahead and make that part of the game a hint I'll give you is if things are repeating it sounds like a loop so you may have to put the entire thing in some kind of a loop um one suggestion on how to do that is um indent everything and then like do like a while loop or like a for Loop um okay let's just uh and maybe if while guesses is is less than or equal to four Run the game Run the entire logic of the game and then maybe decrement the number of guesses every single time you run through the loop right so if you haven't guessed correctly it decrements it by one for example it should be like guesses um minus equal 1 or guesses is equal to guesses minus one right this means you're decrementing guesses by one okay so this is the case here but it says you missed my battleship twice and it also marks the spot X which is good which is fine so it either looks like we don't need this or it looks like we don't need this block right there okay so I think I'm going to go ahead and remove this lse statement here um and just move these back and let's check it out and let's see what happens whoops let's see if this logic is correct or if it's false okay we missed a battleship it says you missed a battleship and it gave us an X so we ran the game one time and we guessed something wrong it gave us perfectly the answer that it should give us you missed my battleship and it marked that x uh that spot with an X now let's try guessing something off the board okay we guessed off the board but it gave us an answer that perhaps we did not want which is uh saying list index out of error line 32 gave us the error so this means that when we guess off of the board um that check needs to run before it starts indexing it here online 30 to so what it did is it did five five and it goes there's no such list as uh there's no such row as board five so it just pooped out right over here and gave us an error which means that we should stop the program before it gets to that line so I'm going to put that part here and I'm going to put this part um here okay so check if you guessed correctly and if you did I say congratulations you sank my battleship check if you guess within the boundaries and if you did I said um oops that's not even if you did guess outside of the boundaries then oops that's not even in the ocean uh so I'm going to say elsf okay now check if you've already guessed at that spot and and then uh lastly uh just go you missed my battleship and Mark that spot with an X okay so I'm just going to write little comments above here to help you uh you know a lot of the times don't just think in code because that'll confuse you right you'll be like uh guest row equal equal ship row and guess coal equal equal ship coal and it can get confusing if you have to think like that every single time of course the first few times you have to go through your code you have to like really strain and squint your eyes and see what's actually happening but then make a note for yourself so then when you're thinking about it and you want to go through it quicker you can just really quickly know in English what it's doing so that's what I'm going to do uh this checks if you guessed uh correctly right that if condition this checks if um you guessed within the 5x5 grid um this checks if you have already guessed in that location this um tells you you tells you you missed and it marks that spot as X okay so in English you know what each of these if statements and uh these conditions are doing now let's run our code and let's see what happens 44 it says you missed my battleship which is what it should do let's guess 55 it says oops that's not even in the ocean and this time notice that the entire program did not poop out and gave us a giant red error uh freaking out the users and making them run away making your friends jump off and attack you uh because they saw a lot of red on the screen right sometimes it can make you red is not a pleasant color to look at a lot of the times so uh avoid getting attacked by friends and and um and don't freak out your users okay so that's why we catch that condition on line 35 before it goes to Line 39 and tries to index it and give give an error the program effectively uh tells you this and stops right here okay all right so we have checked it enough times let's simply go next you sunk my battleship play it Sam you can successfully make one guess in Battleship but we'd like our game to allow the player to make up to four guesses before they lose okay so here they are showing you a loop um and add a four Loop that repeats guessing and checking part of your game for four turns like the example above at the beginning of each iteration indent everything that should be repeated okay now the important part is to think about what is something that needs to be repeated so from without thinking about coding and everything just just think about logically what is something that has to be repeated what should the user be allowed to repeat for example do we need to create the board over and over again probably not so this part of the code where you create the board over and over again should not be repeated do you need to uh hide the ship over and over again every return no you just hide the ship once so the part where you set the randomness over here right you figure out randomly where to place that you don't need to uh worry about that part L of board it should be like this actually so this part does not need to be in the loop should the user be allowed to guess over and over again yes they should this print statement should not be here should be above here okay should the user be allowed to guess row and guess column again and again yes they should right um also after every guess should we check if the guess is correct yes we should should we check after every guess that it's within the boundaries yes we should should we check uh every guess that it's that location has already been been guessed at yes we should and should we uh after every guess should we um if if the user missed should we let them know you missed and Mark that spot as X yes we should this means that this entire part of the code needs to be uh uh in a loop because it needs to happen over and over again so what I'll say is for turn in range 4 okay this means and instead of saying four turn in range four I don't like that I think wild Loop is H let me think about this both of them will work but I don't want it to run for four times only even if you guess like I I don't want it to run four times um only for four times even if you guess outside of the boundaries I think that if you guess outside of the boundaries it should just not count it and let you move again so I would like to propose a while loop let's see later how they do it but I would like to propose a while loop so I'll say I'll create a variable called uh guesses and I set it to zero and then I will say that while guesses is less than um four keep playing this game and when should you decrement a guess here the game should just end so I will say break right just break out of the loop the game is over so break is a command that would do it or what I can just do is make guesses is equal to four or something here so that way when the loop happens again uh it'll say four is less than four and this will give you a false and then the loop won't run so those are two ways to do it um I'll put this in comments and I'll just put a break here cuz it's a little easier to read I don't encourage putting breaks a lot in code because usually when you're relying too much on uh this kind of thing like break usually it means that there's something wrong with your logic okay and there is definitely a better way to overcome that so don't use break as a crutch all the time the only reason I'm using using it here is because you guys haven't practiced enough with functions and all of this this game should really be a function so instead of uh us printing this part out we should be returning it and then return automatically ends the program or that function and therefore you don't need to write a break but since we are just printing out congratulations you sank my ship I'm just going to put a break here okay cuz we're not dealing with functions here cuz outside of function return does not work okay just for you curious people if I did return um it would say return outside of a function okay and if I did uh Define sum of a comma b or let's not call function sum cuz sum is a predefined thing so let's say sum of nums uh a comma B return this does not give you an error cuz return um is inside of a function function anyways let's keep going so all right now let's go down here should I should I increase the number of guesses here no because I want the user to just play again without any penalties if they guess outside of the range okay but I do want to let them know oops it's not even in the ocean all right let's go here if you've already guessed in that location should the turn be taken from you no you should just be allowed to guess somewhere else cuz that would be annoying if you've already guessed in that spot and then you guess there again and it takes another turn uh but if you missed a battleship then definitely one turn should be counted that turn should be counted so here I can simply say guesses plus equals 1 which is a shorthand notation for incrementing uh the number of guesses or I can say guesses is equal to guesses + one and if I run this uh you will see um so it says you guess that one already right constantly uh so stopping us we already know the answer so but I won't guess 2 one for now I'll just get guess three and one it says you missed my battleship if I said 31 it says you guessed that one already 31 is right here and if I say 44 it's going to say you've guessed that one already 44 now let's do 43 oh I'm sorry that doesn't even make sense uh it's out of the index so it should have given us an error Okay so R what did we do wrong here this should be an or not an end that's wrong yes um that should definitely be an or because only one of these has to be true uh because what happened here is it went 43 and four um or actually yeah only one of these has to be false okay so let's run it again if I try 43 and four now it should not give me an error okay so um in that one both of them have to be false in this one only one of them has to be false so that's why you have an or which is helpful and then it goes in here and then checks it and prints it out okay okay I'll guess 44 if I guess 44 again it says you guessed that already 44 is right there whoops right there um I can do 4 three I can do 4 two I can do 4 one and you can see that I've guessed four tries and now the program has stopped running automatically so great we are really close now at the end I would just want to say something like hey if guess is you know something like just checks if guesses is four then I want you to say that hey the game is over um and you never guessed anything correctly and you suck no that would be evil I don't want to say that but I can definitely say Hey you guessed it incorrectly um and you've run out of turn something simple right there right if guesses is equal to four uh print uh game is over you have run out of turns okay so if we play this game now and I go oh I'm sorry four so this time it didn't give me an error right it goes oops it's not even in the ocean which means I just get to play again that's nice um four 4 43 42 41 and it goes game is over you have run out of turns I think that's a complete game but let's see what they say add a for Loop um at the beginning of each iteration print turn turn plus one to let the player know what turn they are on okay so they're having us do this in a really um odd way I would say and okay let's keep going through it so let's put it all of this in a loop okay what are the parts that we want in a loop H we definitely don't want it randomized every time we do we don't want it to have print the answer every single time um okay they're also giving you a nice little note everything from here should go on uh in your for Loop right so we should say four turn in range four and effectively what they want to do is just print out the turn you're on that should be the last part of the statement uh the entire code here so wow this is okay U so I should say print what should I say print turn + one okay which means that um the first time it's zero so you don't want it to to see to tell you turn zero that doesn't make sense so it's whatever turn it's on it just should increment it by one as simple as that because this range here right turn is going to be going through this range first time turn is going to be zero then it's going to be one then it's going to be two then it's going to be three what you wanted to say the first time it prints it out is 1 2 3 and then four that's why you're just uh adding that plus one okay um Bueno let's keep going your code looks a bit off check the hint if you need help um invalid literal for INT with base 10 where what line is the code uh error coming from line 31 H what is the oh uh cuz I gave it an empty thing so it gave me an error okay uh 43 44 43 and okay that worked but clearly you can see that the game is flawed it did not stop you and say hey you guessed that one already game over if someone runs out of guesses without winning right now the game just exits it would be nice to let them know why so we'll want to put it under the else that counts for misses so I don't like how their logic is laid out I like my logic much better much much much easier to read it's not like nested El's underneath each other right who who nests an if statement who NE yeah like an if statement under an else which is under an if what the heck yeah this is weird Okay so we'll want to put it under the else that accounts for misses what is the else that accounts for misses so this is the else that I see that accounts for misses right right here uh just in case you guys got confused with this line it just means uh if guest row is between zero and four and then this part means if guest column is between zero and four and or here right which is the same thing as guess Ro not in range five or guess Cole not in range five but my way of writing it is better and more readable and you guys should follow that rather than this weird obsc obscure way okay we'll want to print the message no matter what the cause of the mess we'll want to put it under the else that accounts for misses um since our return variable starts at zero and goes to three we will want to end the game when turn equals three okay that makes sense uh add an if statement that checks if the user is out of guesses um okay so put it under the else that counselor misses put it after the if else uh if L if else statement is to check for the reason the player missed we want game over to print regardless of the reason if turn equals three print game over okay simple enough if turn equal equal 3 print game over right so let's play the game again it's two and four if I guess it obviously the game ends I found it but I won't do that I would say 4 four then I will say 43 and then I will say for two and then I will set for one and it says game over right there okay Simple Start next lesson almost there we can play Battleship but you'll notice that when you win if you haven't already guessed four times the program asks you to enter her another guess what would rather have happen is for the program to end it's no fun guessing if you know you've already sunk the ship so what is happening currently is even if you got it right the program keeps running however in hours you can see that we put a break here so if we guess at 43 the program ends right our ours the one we made together is way more intelligent and more readable okay we' out but what we rather have is okay we can ask we can use a command break to get out of a for Loop you can call me Mystic Mech right um add a break under the wind condition the loop after a wi Okay add a break under the wind condition H what if where's the wind condition wind condition is right here and add a break right break boom done it's just hard to read cuz it's like so congested and they don't let you like what I want to be able to do is squeeze the code and give it more width so you can read the code properly it's kind of annoying how it is because the lines are running across and all kinds of weird stuff okay so now if you guess correctly it says congratulations you sunk my battleship to your Battle Stations congratulations you have finally oh I'm sorry let me read that again I messed it up you have a fully functional Battleship game play it a couple of times and get your friends to try it out two don't forget to go back and remove the debugging output that gives away the location so what that what does that mean where are we printing it out Delete line 23 and 24 right because you don't want them to know where the hidden ship is you may want to take some time to clean up and document your code as well again guys we did it beautifully look at that we documented our code dis checks if you guess correctly this checks blah blah blah this checks blah blah blah and here we can say this checks if you have run out of guesses so this means that you have documented your code and we've cleaned it up so this is a version that you guys should use let's say share um and then let's do I'm going to copy that I'm going to share let's save it I guess you can get it at that link but let me see what happens if I refresh um or I go yeah so I guess if I don't change this exact link you should be able to get access to this very link now let me check if oh whoops let me check if that one too is still a link that's there okay okay beautiful enjoy the full game is right there for your use and you can run it right here in this repol it enjoy kids no Enjoy clever programmers or call you cuz you're one person when you're going to playing it so enjoy clever programmer very smart for using this link it will live on all right when you are done playing Battleship and are ready to move on click save and submit code save and submit code okay we guessed it wrong let's see if we can win against him oh I'm sorry I guessed it wrong uh two it didn't give me an error that's okay no I missed the ship so these are my guesses x x x X but looks like I missed the one fun feature you should add at the end is maybe at the end once the game is over reveal the position where it was stored I think that's uh a little bit more fun to be honest extra credit you can also add on to your battleship program Pro um Battleship program to make it more complex and fun to play here are some ideas for enhancements maybe you can think of some more make multiple battleships you'll need to be careful because you need to make sure that you don't Place battleships on top of each other on the game board you'll also want to make sure that you balance the size of the board with the number of ships so the game is still challenging and fun to play so 0 one multiple battleships what if I can hide three or four battleships right that will be fun so um right now it's a 5x5 grid if you put 25 ships well it's not going to be very hard to play right five where did I get 25 from 5 by five that gives you 25 that means that on the grid there are 25 squares so if you pick 25 ships now the game is going to be really easy cuz every guest is going to guess a ship and sync it down so what they're saying is that hey if you want to pick more ships then maybe have a bigger board so it's still challenging got it cool point two make battleships of different sizes this is trickier than it sounds so maybe a battleship can um you know row column two and two and a row column three or yeah two row two and maybe column um I'm confusing you guys let's just look at a board so you can have a ship hidden here and here you know it can be a ship of length too so it can be in row zero column 2 and Row one column um two okay you can have a vertical uh ship or you can have a horizontal ship that is placed this way maybe it can be of length three uh maybe you can have multiple ships of different sizes in real Battleship one of your ships is pretty long like five or four spaces other ones are three and some are like one so that would make the game more fun but also a lot more challenging right a lot diff more difficult to kind of code um need to be vertically or horizontal touching and you'll need to make sure you don't accidentally place part of a ship off of the side of the board meaning you don't place a ship like here um and then like do one square to the right of it which doesn't exist make your game a twoplayer game so make it a twoplayer game uh that's another thing that you can do and uh so basically both people maybe get to put a ship and then one guy takes a turn and then the other guy takes a turn so on so forth use functions to allow your game to have more features like rematches statistics and more cool so you can allow you can click like rematch and the game starts again and then it prints out statistics like you know Johnny ship uh synced Bobs my names are Terri but okay Johnny synced Bob's ships right Johnny synced three of Bob's ships in like the last two games and Bob ship synced seven of Johnny ships in the last two games or whatever and who won how many games and you know what's the average games that this person has won against him and whatever you you guys get the idea some of these options will be easier after we cover Loops in the next lesson think about coming back to Battleship after a few more less lessons and see what other changes he can make so great job so far everybody I'm going to save and submit we have gotten the badge Battleship let's hit next we' finished this course let's go back to the course page if you guys are interested uh leave in the comments below maybe if you want to see how to make that Battleship game and then we can definitely walk through it and make it but it's extra credit so I'm going to skip it for now and we're going going to go on to loops loops are amazing you guys know I already love them and they allow they want you to do specifically Loops here while Loops for loops and then they're going to give us a lot more practice so that's going to be a tremendous amount of fun great job everybody for making it here so far if you like this video please go like it and otherwise uh and also subscribe to the channel if you haven't already other than that this is code academy python part 19 and I will see you in the next video code academy Python tutorial number 20 all right everybody take care and I'll see you there