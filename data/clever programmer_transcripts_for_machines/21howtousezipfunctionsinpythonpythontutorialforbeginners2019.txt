hey what's up guys this is Ann from clever programmer and today I just want to talk about a cute little function of Python called zip so this isn't the kind of zip that you would see when you are zipping or unzipping a file in Python but it's actually a function that you have in the language that allows you to glue things together to make things easier to deal with that might have made no sense but I'm about to explain it in code right now so let's get right into it alright so go to rep politey ripple it as usual I'll create a new rep will here go down to Python wherever it happens to be in the list create ripple and alright we are ready to go so zip I might give a little bit of an explanation before I start actually so zip what it does is it will take any iterables in python so an iterable is just something you can iterate over in a for loop that'd be a list tuple I believe it can iterate over a dictionary you just can't go in any specific order it's just gonna iterate in any random order and other things like that like iterables or things you can go or but if you have been iterable then you can actually map um I might be wrong there an iterable I think it has to be I know for sure for lists and tuples if it's an in order then what it does is it takes corresponding elements and it will glue them together so the first element from two lists it'll put those together into a two element tuple and put that into the first element of one list and then so on it'll take the second element of both lists and then stick them in a two element tuple and put that in the second element of the list and it'll just keep doing that until everything has been paired up or even if you have three lists then they will keep doing that everything's tripled up it might be easier to understand if it's in code but that's the best I could do verbally let's just get right into it so if we have a list one here which is just going to have very simple numbers like this list I forgot two equal sign um it's better looking nice and clean and then let's just do something like this but onetwothreeandfourandfive cool so now we have our two lists now as you can see both of these lists are the same length which is important not required but very it makes things easier or cleaner I should say it makes things cleaner when you're using zip it's not required but it makes things definitely cleaner so we'll start with this example if we have list one and list two then I'm just going to call this final list we are going to make a new list here called zipped and all it's going to do is it's going to call the function zip which is literally just zip just like that zi p and then all you need to do is just put in the two lists in here just like that so this will actually work in Python this is something I came across um I didn't realize that it didn't work in Python 3 this will work in Python 2 but in Python 3 you actually need to cast this to a list so before I run this just be aware that there's a little change here whenever you're calling zip sometimes if you want to print it out you need to cast it to a list first before you print it out so zipped now is a list but we zipped together list one and list two so remember this is list 1 here the numbers 1 through 5 integers 1 through 5 and list 2 is these five strings 1 through 5 when I run it when you see it you understand exactly what it's doing stupid me I didn't put in the print statement print zipped now let's run it so as you can see here what happened is it took the corresponding elements of each list and it stuck them in pairs and then put each of these pairs in its own list so this list itself is of length 5 just like the original two lists but each element is actually corresponding elements from the other two lists pretty cool right umm one thing I want to point out is that if the lists are not the same length so let's add a six to this list and then try it again then this six seems to be ignored so what what's going on there actually what's going on there is Python will always truncate truncate is just a fancy word we use in the programming community to say cut off just ignore you truncate it off like you're cutting a tree trunk chop it off like a finger if it's there then it'll just truncate anything that that is excessive so the the shorter list will take precedence so the six is ignored but if this was five and then we say we added an element here and we put six here then this six here and the second list will actually be truncated will be cut off of your finger as you can see it's it's ignored both times the the six number pops up but then of course as you guys have probably guessed and expected if I put in a six then voila it pops up there same thing goes if there's three lists if you actually have a third list here and then you have with some other things and these become tuples of length three then whichever one of the three is shortest that will be the one of what determines this final list okay so that's how that works when you have different length lists but we're just gonna stick to same length list because it's just a little bit easier to understand I'm gonna go back to five because I don't want these going off the screen like they are right now I want to fit everything here so you guys can see everything nice and clearly because when people don't do that it pisses me off continuing on I already showed you guys how to zip stuff together that is a very handy now another thing you can do is actually unzip things so okay let's let's say we went from these two lists these two long lists to one long list of little pairs which is another way you can think about it you're going from two long lists to one long list of little pairs or three long lists to one long list of little trios and so on and so forth but if you want to go in the opposite direction you want to go from one long list of little pairs of little trios and then to go back to two long lists or three long lists then that's called unzipping but there isn't a function called unzipped in Python actually what you do is you still use the zip function but you use a little special character before the argument you give to the function to actually reverse the order of the zip so you're zipping and unzipping with this tiny little start asterik I'll show you that now so we have this zipped variable here Zi pped and it is a list it has to be a list I realized in Python 3 you have to make it a list for it to work on there are some weird changes from Python to the Python 3 but in Python 3 you need to make sure it's a list to be able to unzip it so the way you can unzip it is I'm just going to name it unzipped to be very clear this is called selfdocumenting code by the way I may have not mentioned it before but soft documenting code is just using function names and variable names that explain themselves so actually using I and a for loop for I in range 10 or something it's usually not that good you want to not use I and use something else and it's just better to be descript this this list is going to be an unzip list just throw the same way that this is list became a zipless so unzipped is just going to be this zip list but unzipped so literally all we do is just we're gonna have to because of Python 3 you got to put the list in there again that looked like a nipple inappropriate sorry if you're under an appropriate age we're gonna just call zip again here and then originally you might think okay like wouldn't just be like unzip and then you stick zipped in here and it's nice and done but no it's actually the same function zip but all you do is before this thing I mentioned early you put an asterisk a little star just like that almost cstyle like like dereferencing a pointer if you know what the heck that means if you do you're cool if not you can be cool oh well I'm pretty sure we'll get you there well we'll get you there at some point just take a little star there in front of the zipped list here and this will actually unzip this list and give us from this output bring it bring us back to this output so let's just see what the heck happens first let's check if there's any errors no errors and then print this out just like I printed the zipped like that and click run and magic you see I went from this I we went from two separate lists here okay two separate lists and then we got this and zipped it together to get one long list of little pairs and then we went from this long list of little pairs back to two separate lists or actually tuples in this case I mean you can cast them to other things if you like but in this case there are cat Nam putting tuples one list of two long two poles these which is equivalent to these two original lists so that's basically what the zip and inverse of zip the inverse function a functionality of zip can do so it's like a dual function you can kind of do two things with it it's two functions in one kind of cool you can do that with zipped but another thing that I want to mention is the the primary time zip is actually used so though I noticed that whenever I'm using the zip function most often it's to be able to get enough lists or variables in a scope if that made sense to you good if not let me explain if you are inside of an if statement or inside of a for loop you know that the variables you have inside there are actually local to that little that little indented area if you have a chunk of code it's indented out or like if you're in java or c plus plus or something you have brackets anything in that chunk of code it's like one unified whole all the code in there um can share all the variables and anything outside of it but if you had a variable inside the if statement or the for loop and then you tried to read into into the if statement or into the for loop you wouldn't actually be able to read those variables a little bit tricky to understand but it makes sense if you've been coding long enough it it makes sense on the on a on a technological level so it's just something you have to accept um you don't really understand why it works but you understand how it works understanding why is very fascinating you can go into that if you want at some future point there's a lot of resources just google it it's pretty cool but going back to scope using zip is very handy if you want to get a bunch of things into a different scope let's see so for let's just try to have a for loop so let's say I have these two lists up here and then I want to actually iterate over on both of these lists within the for loop so that besides just like having an ugly for I in range I in range five and then indexing list one at AI and indexing list two I actually this might not even be a scope thing I might have had a little brain fart there but that scope thing is still a very relevant piece of information to programming in general so definitely hold on to that but I might have fussed up there a little bit you actually don't need that because you're just trying to read here but if you actually want to get multiple things into a scope without avoiding this gross syntax here um you can actually use the zip function instead so instead of having four I and range of having this index a very C style kind of way of doing it we can get rid of this crap okay and do it the Python way which is the arguably cooler way so you can just say for list one list two in there we go yeah and zip actually we shouldn't call this that let's call it l1 and l2 okay so this is actually tuple let me put it in parenthesis just to be clear cuz it'll make more sense so this is actually a twopart tuple if you know what if you don't know what this is look it up it's it's a way to unpack tuples automatically just google that and then see what that means in Python it's kind of a cool little thing the safe space you can do multiple things on one line so we're just going to zip together these two lists and what happens here is now in this in this loop I now have access to whatever iteration I'm on I have access to both this variable and this variable or this element and this element the same time by using l1 and l2 so let's just do that so I'm gonna print l1 and I'm going to print l2 just like that and print it and as you can see each iteration it actually prints one and then one the number one and then the string one the number two and then the string two in each iteration so this is the first iteration it's the second iteration the third iteration for the dishes so on and so forth however many times you want to go but the point I'm trying to make here is you can actually zip together a bunch of different lists and have access to all of those course elements in each list within the for loop so let's say I had I had 20 lists and I wanted to zip all 20 together and then I had a tuple of length 20 I could actually use all 20 of those variables in the for loop to actually do interesting calculations and whatnot a very cool very handy so now I want to go through an actual example besides this very simplistic one so let's just delete this I have a nice little nice little example printed out for you guys and it's going to be called sentences we're going to be creating sentences from different lists I forgot to actually okay so we're going to have we're gonna be creating sentences from different lists so items what does I put here items equals pool banana and brunch and then also this is a little shopping cart example it's coming back to me now I should have looked at this before I started the video that is a shame on me oops but now I have items we're gonna have different items we're gonna have different counts and then we're going to have different prices so you kind of see how these different elements in each list is going to correspond so if you bought three apples if you bought an apple you bought three of them and then the price was i don't know 99 cents and then bananas are 25 cents and then oranges are 50 cents something like that okay these this is the quart three corresponding lists now we want to access be able to access this first element first element first element all at the same time in the same iteration of a for loop so we can construct the sentence on the sentences I'm gonna try to create our I bought three apples at $0.99 and I bought six bananas I bought six bananas at 25 cents and so on that's kind of the idea that I want to implement here so let's start the for loop up so it's going to be remember you can do those that cool little tuple unpacking thing I'm gonna have item I'm gonna have count and I'm going to have price so that's how I access these so this is an item in the items list so that's going to be put in here this is a count in the counts list so that's gonna be put in here and this is a price this double this floatingpoint number is gonna be the price in this prices list that's going to be stuck in here okay so this is gonna be Apple this is gonna be three and this is gonna be $0.99 in the first iteration and then in the second or third iteration it'll be the same thing for banana and orange okay um you can sold of course we're gonna have to zip these three together so items counts prices I forgot to mention if you are doing this cool little trick with zip here you might have already notice that you might have been injecting objecting earlier like what the heck here and you got you didn't cast it to a list you I thought you said on Python three you always have to cast it to a list that is only if you're trying to print it the thing is this zip object that is returned from this function can actually be put in this for loop like this and you do not need to cast it to a list because we're not actually printing this zip function return data so you can just leave it like that just leave it as zip and it'll actually just automatically zip it together and automatically pick out this nice unpacked triple tuple for you so that's all clean it that is all done in one line and now we have access to these three variables in each iteration these three then those three then these then those three I might as screw that up again but you guys are probably getting used to me screwing up I hope if you're still there so what I want to do here is actually create some sentences so the sentence I wanted to create was um sentences dot append so we're gonna have to add to the sentences list of course we're actually let's make this a little bit cleaner let's put sentence making changes on the fly here so sentence is going to be we're just gonna glue some strings together I bought space count space or a plus space I bought count space I'd Tom no sorry item and then add there if you don't know what's happening here just wait Tom didn't coating this line and I'll explain it real quick if you do know what's going on then just put it on two times and zip through this real quick at there we go I always get confused when I'm concocting these strings like this it's so easy it's so easy to make an error I think I did this right though so what's happening here is you can add strings together right and when you add two strings then they are just added together into one big string so what this should output is I bought for the first iteration it should be I bought three space apples because I added this s here at space $0.99 actually let's go like that since cents each and don't forget the space there okay so that's what's happening there I'm constructing this this this string here and then I want to append this sentence to the list okay that's what's going on however when we get these three elements here this is still a string this is still an integer and this is still a floating point a double a decimal point number okay so what we have to do is is convert all these to two strings by casting them so we could just go like this I stick it in like that which is what you could do on all three but I might do it like this because it just seems a little bit more less messy I think that was a weird contradiction they're a lot more or less messy but but you I'm pretty sure you guys got the point we are going to do this this is another little cool thing you can do with unpacking so as you can see these corresponding elements here are all going to be casted and then put into new new names where the same names whether they're just be overwritten so pretty much what i'm doing here is i'm taking item count in price these three and then i want to make them all string so i just stick them in here and now i don't count in price or all strings technically i don't have to make this item string because it's already a string but just to keep it consistent and make it easier on the eyes i'm gonna leave it like this so let's see what happens when i print out sentences now because we went through it we zipped all these three things together we converted all the items to strings in everything we constructed a sentence using one little element from each of these lists and then we stuck one of the sentences in the sentence list and we did that three times so there should be three sentences in this list that we're about to print out let's print it out right now go over here so you can see it and see what happens perfect oh i thought i i drag this over the perfect amount look at that yeah things work out sometimes don't they right mom so as you can see we have three sentences here it says I bought three apples and ninetynine cents each I bought six bananas at 25 cents each and I bought four oranges at five fifty cents each or point five cents each I guess that that's screwed up I this is probably not right but I mean it the code worked the way it was supposed to I'm pretty sure you guys get the idea if you want to be able to zip together a bunch of things into a forloop word in its statement or I'm not sure if you can to an if statement have to think about it but definitely for a for loop I use it a lot for for loops zipping fuse together into four loops this is a very very handy function um don't forget what the unzip thing the little star thing you can put before if you ever need to do that you can actually get really crafty with these getting zipping a bunch of big tuple lists together and when you're doing data analysis very very useful but that pretty much wraps up the zipped foam function they're one of my favorite functions in Python for sure just because it makes everything so nice and clean but this is very useful for like I said going over a large data doing data analysis and whatnot those kind of statistics things and that actually ties us into something I want to talk about we actually have a brand new course coming out in the next month or two called how to automate stuff with Python that is going to be going over similar things to this how to handle and analyze large amounts of texts large amount of files and all those kind of things in dealing with like really large big data rays and datasets and graphs and all that good technical nerdy crap yeah I guess you can say some people like it some people don't I think it's great but yeah we have that course coming out called how to automate stuff with Python which is gonna be really cool so stay tuned I'm gonna have a bunch of videos coming out that are somewhat related to it some might not be but some will be and then but in that course should be going to a lot of depth about all the different cool things you can do with Python regarding big data analysis analyzing datasets doing web scraping like those kind of things is very very cool even even image manipulation but yeah just a bunch of cool stuff that we're gonna be going over I can't remember all of it just because there's so much but those are just a few things that came to the top of my mind but yeah definitely stay tuned you guys thank you so much for watching that is the end of this long drawnout video as usual that's my signature and um yeah I'll see you guys next time good bye