video we are going to be building this facebook messenger clone let's just jump straight into the demo of it so let's just go yo Sonny what is going on my man John say that what's up cuz he what's up there we go realtime nice this facebook messenger clone just jumps trading nice okay beautiful so this is the demo of the app it is live and working and if you are here right now watching this you can actually go to this link at the top here and be able to jump in with us and use it just please keep it clean because once people start coming in and they don't keep it clean then we have to either ban them or something so we want to make sure that the community stays extremely positive and awesome so I hope you guys are excited if you're watching this video after this has been live just remember this is the app that you're going to be building from complete scratch and we're gonna be showing this in this demonstration just one sitting so buckle up sit down open up your visual studio code and it's gonna be time to get to work soon awesome nice so where should we go with this sunny so this is some strain I think should we get started with creating off first yeah project let's do it so now we're gonna go here let's go live chest up right so you can see what I'm typing right now what's up cause yeah is it looking good on YouTube Frankie nice awesome okay so let's get started guys so the first thing we want to do is use something called crack tapped to sell the whole template for the app so what we're gonna do is cause it you just need to share a terminal with me so if you click over to live share on the Left uhhuh live share yeah and then click on share terminal okay oh actually let me open the terminal fur nice region right read them right and let me actually open the zsh one so you can get access so try getting access of this one okay nice times we have 259 people live that is amazing thank you guys for being here stick around we're gonna be building this app facebook Messenger clone together and we will be taking any questions you have along the way and answering them for you awesome nice 259 people all right so I think I've got access now right no yeah actually just ask for the access I did I think you need to give it again if I go to who's LSH readonly right now so if you go to the lefty service as the as Sh on the half yeah it says readonly yeah make read and write yep there we go there we go so now for the LS so okay so the first step we're gonna do is inside of this photo we're gonna start our a project so we do MPX create react yeah and come on is basically gonna it's something Facebook's bill and it's just a little shortcut to setting everything up for us so what should we call the app let's call it facebook Messenger lounger oh nice done and that will set everything up that we need to get the app installed app running I'm excited this is gonna be the app right here guys this is the app you're building that's it so guys make sure you go over to that link and you can give it a try well it's up yep this is gonna be beginner friendly I mean we're gonna try to break it down as much as we can but just the truth is that these live streams because we have limited time and we're trying to do it all at once you just have to like keep up with us and then you can watch it later as well and then be able to build it yeah nice okay while that's loading Kazi should we set up our five days yeah we can set up our firebase yeah let's do it yeah see if you head over to 5s comm and login so guys firebase is a service provided by Google it's just a bunch of tools so it allows you to host websites it allows you to have a database allows you to do machine learning and a bunch of other cool stuff and it basically strips away all their headache and it allows you to have a really powerful realtime database this whole app is powered by firebase on the backend so all you need to do is have a Google account you just need to go onto firebase and then click on add so Chirag view so Chirag this is so he's saying that we can also make it with node and socket that's so much more complicated than the way we're gonna show you guys because firebase is fire for a reason I mean this thing is it makes it easier you don't have to deal with socket IO and all that other complexity exactly and you guys will see just how simple is when we when we get building all right so let's go facebook messenger clone nice okay and then we can disable that if you want or enable yeah awesome and that should set everything up for our project and let's check on so we can see wow that's loading let's jump back over to the code so let's have a look we've got the code open now and everything's gone well so now what we need to do is go into the folder that was created for us so we just do CD and then we do facebook Messenger clone and then we enter and now we're inside of the react app that was built for us and guys if you've never used react before a super simple oh look we got some people jumping into the messenger app nice if you've never used this before all you need to do to get started on the react app is just do MPM star so have a look at that fuzzy oh nice we have people coming in yeah ready and says what's up good to build us today nice yeah so you guys can actually go to this link maybe Frank you want to drop this link and you can drop it into you have our end Rock link I just dropped in the top nice ago nice yeah actually maybe I have the restream chat and we might be able to drop it there nice also guys let's not spam the chat can we do this with Python we can do it with yeah we yeah these guys want you guys jump into this app just don't spam it just treat it with love and just write a few messages just everybody can get to test it okay this so let's go back to the code and this carrion bird ah so we've got once we've got every app projects out what we need to do is in the terminal we just runs one command with NPM stuff and then we hit enter and that just spins up the app for us and what we're gonna see if everything goes well is it should fire up localhost 3000 it starts the browser for us or a chrome tab and then you should see this yeah that's perfect that's exactly what we want and what I always recommend is we always do a cleanup process so if this go over to our files now in vs code yep files is open and then let's open up Facebook Messenger uhhuh and we'll delete this one too because this is just a dummy file we created yeah okay so the only thing we really care about at this point is everything inside of sauce all right so let's do a few cleanup steps let's delete all the test files okay so I'll go here test delete yup and setup test on Jess we're gonna get rid of that uhhuh logo delete yeah we hear that in app Jess let's go to where it says import logo from racing in that right yeah that's right okay and we'll write a h1 header and here we just call it yeah programmers nice awesome and at the top you see it says file to compile that's because on line two we have this writer so we can get rid of that okay and get rid of it and now we have this hello clever programmers so this is going to be your starting point for the app guys and you want to use this as your sort of base like style area and and if you get to this point well done so the next step I guess is let's get the input that there's just kind of mask out what we're gonna do so we need to have an input field so every sort of basic chat app has a few things it has some kind of input field right and then we have an input button so we're gonna have a button which says send message and then we're also gonna have the messages themselves so we kind of need the messages themselves to be listed out right so I'm gonna have the messages themselves yeah and what I recommend first is pretty much just doing a quick sort of dummy run through this so if we add in a few things aside in our first input so an input here like this and let's add in a bun so we have a button and this bun is just gonna say send message so here we have send message and then we can save the file and we can go and check out the app and see how that looks and you just want to carry on doing these baby steps guys like you never want to overcomplicate or sort of just take small little chunks every time you do this so let's open up the our app here yep nice no so that we have like our input box and then we have send message and what we need to do is obviously we need to connect this right so we need to get this like functionally working right now so there's a few things we need to do right now and the first thing we're gonna do is we're gonna introduce something so we actually we need to do something called state so in react we have two fundamentals we have state and we have props we'll talk about props in a sec but state is basically like a shortterm memory and what we use that for is to keep track of what we're typing when we write stuff inside of input so the way we declare state is we're just gonna do it like this so this is the syntax to initialize a piece of state so we say Const input and then here you have to have a convention so someone said team spirit nice we say set input and that's just a convention guys so usually you have the variable name so the piece of memory in the state and then you have set input and then you have set and whatever the name of the variable is so here the name is input so we just come okay so and then what you want to do is you say you state and then you do open brackets and then you basically put the initial value for what you want the input to be so in our case it's just gonna be an empty string because that's what we want to have in the input flow to begin with and to actually make this work this is gonna error if we save this right now we have to import you state from react just like that and if many of you guys might uh who have touched on react before might have heard of something called react hooks this is an example of a reactor and they're really powerful small snippets of code and you're gonna see the power of it right now really nice cuz you see how many people are actually using the chat right now oh really so yeah it's really going on nice on the end Rock one yeah nice that is so cool they're like this is epic yeah we can see that what's up everyone this app is lit it's a really nice app damn nice we're what put this code up on github actually maybe afterwards we can as a public repo that should be pretty cool yeah yeah nice so what we'll do now is we'll have input set input and what we need to do now is we need to connect this piece of state so the input state to our input field and there's two steps we need to do here right so and what this is going to allow us to do it's gonna allow us to remember everything you type inside of that input field and then use it when we actually sort of trigger the send message function so the first thing we need to do is click on that we need to type in the value and we need to map our state to the input field itself so we've got value equals input and you can see here now if we were to save this and we run this you're gonna pretty much notice that you can type in but there's nothing nothing's gonna happen so I can type I'm trying to type and literally won't let me do anything exactly and the reason why that's happening now is because when we set up that piece of state we gave it an initial value which was an empty string we then mapped it to that input field so we mapped it to the input field and what I actually did was I said permanently stay to that empty string so that means regardless if you're typing it's just gonna get stuck and be stuck in an empty string which is not ideal right you don't really want that to happen so now what we need to do is we actually need it to update this day as we type so we use something called unchanged and unchanged is gonna fire off something called an event so here we're using es6 syntax and here we're saying when the event gets fired off so when you start typing in the keyboard we're gonna say set the input so we're gonna say update the input and you have to use this method whenever you want to change the input so that it's reacts clever way of telling it how when and how to rerender and what we do here is we say event dot target dot value oops that's fun of it wait event so hate when it does that event yeah target yeah I know right I just sometimes has its own mind of its own yes no but then target value and what this will do is it will actually so this captures the exact thing that your type you meant to write value right it's as v/o Minds disconnected what's wrong enough a says Valley right now let's see if I do value so value now it says value just don't hit any autocomplete because I think audio car oh it says Yui right here some weird stuff is happening so I need to I think I need to rejoin the live so at a what let me just quickly grab the link because mine's gonna of sync with yours uhhuh is happen but yeah so I'll just jump by this one give me one sec I'll come back awesome when it's alright so yeah guys right now basically what we're trying to do is make sure when we type stuff here it actually changes and shows us the value and then using that when we hit the send button what we'll be able to do is like start displaying the messages and the styling for this app is quite heavy but because we want to focus on just teaching you firebase and react we're not gonna or kind of go really fast through the CSS portion of the app so just try to keep up there we're even gonna like maybe copy/paste some code just so we keep the speed up but then right after that we're gonna get back into like building the app and explaining all the react and firebase parts exactly it's just thinking of water loadout in the meantime cause see what we can do is while I'm getting this again we can go into firebase so we can set everything up that I need to set up a bunch of things okay cool I'm in firebase the project is ready to go yeah so you want to go over to a fire store so on the oh yeah you can start you can start with that actually yeah okay okay also set up firebase hosting for this app exactly uhhuh register and that's gonna allow us to actually be able to deploy it off to a nicenice this year now I'm in a there we go I think you just went out of sync I'm in a bit with okay there we go firebase tools yo and then firebase login firebase and net so I'm done awesome okay so the next step you want to do is what actually okay we can come back to the code now yeah yeah so what we want to do now is we have remember what we were saying before we mapped it to the input and then we done this set input which is updating as we type right yeah so now we can do is we can actually console.log this to your console log input and what we can do is if we run this and we open up the inspector now we should be able to see as Kazi types into the input field we'll be able to see in real time it would show us the value inside of the state and remember guys state is like a short term piece of memory if your refresh is not going to keep it so if we refresh it gets rid of it so you can see it comes up in causes console right there and now that we have that value we can use it when we click the send message button but before that we couldn't do that because we didn't actually there's no way of remembering what the value was that was that he put inside the input phone yeah nice so the next step is we're gonna create a function called send message so we're gonna do send message and it's going to be fired off from the bun so we have to expect that it's gonna have an event and here what we do is to connect this we do an unclick so here we're gonna say on click and we do send message so what this is gonna do is when Kazi clicks on the send message button it's gonna fire off this function over here and this is es6 function that we're looking at right now and what we need to do here is basically this is where we're gonna say basically like all the logic all the logic to send a message goes here alright goes here now obviously in order to have a list of messages we need to we actually need to have some way of storing those messages so we're gonna actually use another piece of state here so we're gonna have cons and we're gonna call it messages all right and here what we're gonna do is I'm gonna say set messages so this is gonna be instead of a string like we had for input this is gonna be an array and the array is just going to be it's gonna represent so initially we start off with an empty set of messages right and then what we want to do is as we've when we click the send message button we want to push whatever is inside the input so whatever Scaasi is typed in we want to push that into a list list so inside of an array mmhmm so what the way we do that is we say set messages so whenever he takes the send messages we click set messages and here there's a really nice yes six little trick so if you do the square brackets and then you do dot dot dot messages so this is saying spread out whatever is in the current messages so imagine if we had a bunch of things inside of us we had a we had B we had C hold on oMG give me one second I there we go nice oh we have so imagine we had three different things inside of a inside of them hey array right now yeah what this is gonna do is it's actually gonna spread them out so we're gonna go saying is keep all of the current messages but append the input to the end no reason why we're gonna do that because imagine these were tossed it'd be like take dogs out oh so well doing calls for how we're gonna say like messages so and then hi and this one would be like I don't know what's up yep so imagine like cause he typed into the input and then when we can't he hits the send message button is actually going to fire off this and then I'm gonna set the missed whatever it was plus the input exactly you don't want it to replace everything you have you want it to like add it to the end of the array because if you if you don't have this line of code here what it's gonna do is it's gonna just chop this entire thing off exactly and we want to keep it like a Lister and memory of what's going on yeah so what we then want to do is we want to clear the input so that way when he's hit send a message it's actually not gonna show what the previous message was so what we'll do here is we'll say set input to be blank afterwards and this is literally all we kind of needed this point but the thing is right we're not gonna actually see anything on the on the output so what I would recommend is you always console.log your messages so that way you can see exactly just like we did when you typed in we can also see when the messages so let's go take a look okay test nice so now i see when i wrote test i also see the existing list that you had already with hello hi what's up you know and if I add send message it added it to the end of the list so a new message now let's just say the name of some of the people who are here so like Chirag is here so let's write Chirag and Yana is here so let's write yom now and golem is here so let's write go along nice there we go nice all of you guys just got appended to our array and actually Chirag say this like push yes it's like a push but it's this Mona's our Molly what is up bro oh nice nice Nizar molly is the person who landed a hundred and ten cake contract with JavaScript I would love to catch up with you by the way nazar so if you want to hit me up and slack or even send me an email and then I want to actually get on a call with you yeah keep going nice okay so the next step we want to do is so it's working so now in the state we have a list right we have a list of messages so what we want to do at this point is if we go over to line 23 somebody just said that's an amazing explanation of using the state hook awesome nice yeah because this is actually how me and Kazi so I went over this it was so confusing to me to understand how states worked I was like what is going on this thing is mad confusing yeah and a lot of people get caught up on sort of they tend to want to use do something like this right where they say Empire equals like ABC you can't actually change that the value like this you have to use the set input or set messages so that's just something to remember otherwise you will run into issues if you do things like that yeah okay so the next part is obviously we have all the messages inside of the state so if we go to line 24 line 24 yep right here yeah and what we can do is we can get rid of these two markers because we've already done that and now we need to actually just have the messages themselves so what we're gonna do here now is notice how we can have JavaScript inside of this block that's something called JSX so JSX is really cool because it allows you to have HTML and then some JavaScript inside and an embedded inside you know what we do is we have the curly braces so you can see here's some regular HTML stuff and then here's the squiggly and then there's some JavaScript being executed in there exactly so all you need to do is add these little curly braces so these little squiggly brackets and then everything inside will be interpreted as JavaScript so you get some really nice mix of the two things so what we're gonna do now is we're gonna say messages mmhm Matt and math is a really powerful es6 function because what it's gonna do is we're gonna map through everything in every single item inside of the messages array so each item is referred to in this case as a message right yeah I say let's through every single message and then we're gonna put parenthesis so we just open closed brackets and that just means return something yeah and what we're gonna do then is we are going to say so let's just return in this case a P tag so a P tag and for every single message we just put the message like this so what this is gonna do is gonna loop through that array that we saw earlier that the one that was cause II was populating as he hits and this array right here and it's gonna loop through and it's just gonna display each of those messages exactly the map is like a fancy way to loop through instead of writing like a for loop and all that guys you guys should start using map it's super clean yeah and the difference between a map gonna for each is that a map returned something which is what we want to do here we're trying to return some HTML elements nice okay so if we save that and then we should be able to see that on the screen now so nice hold on let's go let's make it half screen like that okay cool oh nice so we now are seeing so once you mapped it out it's basically like looping and then like popping that hello right there and that hi is right here and then this what's up is right there yeah cuz if you just press commandv on your vs code Oh beautiful that's awesome yeah and even come on J to hide the terminal while we could there we go then you should get a little bit more space okay okay nice so if you just type in now so when you type a message you should be able to see it working hey send message yo what is going on nice now all the messages are starting to show up and it's like guys I'm not even refreshing so it looks so clean it's like just all of this is happening without any refresh that's kind of Awesome nice yeah and exactly and the main thing is write react is reactive so that's the way it's easy way to remember it that's why they could ever yeah because it just reacts to the sudden changes in ice we're still getting people messaging here so that's awesome then the next thing we want to do is we want to get rid of that little markdown that we had a little comment that we had and we basically just want to now I guess the next step right is we want to yeah so you might have not noticed that but Carly tried to hit the enter key when he typed in the input field and hitting Enter key it wasn't working right yeah so there's a little trick around that and a lot of people know it I love people don't but it's it for those of you don't know it what we need to do is we just need to do we need to wrap the input and the button inside of a form so we wrap it inside of a form like this so we just grab this we caught a kite we chuck it here and then we just there we go so we've got this and then all we need to do now is once it's inside of a form we just give the the the type right the type of the button we call it something like submit and submit it's basically just gonna be that when he's typing in the input for me hit enter because it's a form it now knows that you're talking about clicking this button so that's what enter is represent so that's why that's how you get that normal behavior that we used to and there's one thing that we do need to do at this point though when we do I'm sorry one second Sonny I'm gonna cut it just for a little bit it's a great question Abdul Basit just asked he said why are we using state instead of a normal variable that was something always also super confusing to me the simplest way I can think about it is the state allows you to change stuff without having to hit the refresh button that's how I thought of it so the simplest I mean before you get into all the complexity just think about it like this variable you would have to refresh for it to make a change but like state changes it on the fly without any refresh so you want to use state to be able to do things where it's fast without refreshing okay so state means no refresh fast exactly yeah and in order to do everything the react way we have to use stay so we just have to follow the rules of react and you stay and also using a hook you have to use those set methods that we showed earlier yep nice so we had we added the type submit' to the button so in order to get the one thing we need to remember is as soon as you wrap something inside of a form naturally a browser tends to refresh so what happens it is now if cause he was to do the end huh yeah so let me actually try it so as soon as I hit enter right if I hit enter you guys see how it refreshes and everything goes away because it's a form and what forms do is they refresh on submit so now what Sonny has to do is stop it from refreshing so he wants it so like the refresh cannot take place when I hit enter on here exactly so the way we do that is remember I said whenever we have like an unchanged or an on click it passes an event in this case the event that we need to sort of attack here is do event to prevent default and that's the one inside of send message and then that's it that will actually just take care of it yeah so as soon as he hits just hit save yep there we go this or not so now if I hit hey enter you guys see how like it did not refresh anything it just happened fast and basically it's this line of code that like actually disabled refresh from actually taking place so preventdefault yeah also I see a lot of people asking if it's gonna be recorded yes these sessions are gonna be recorded so you can watch back and saw play and stop as you need to yeah this will be recorded later and you guys will be able to watch it later this is the question we're getting asked right yeah okay so I guess the next step would be it's yo cool cause each owner should we hook you up to firebase should we put you an idea which we do next I think next let's actually add a frontend to it because people like looking at stuff that looks nice okay nope so what we're gonna use then is something called material UI so let's head over to that website and let's see what material UI is about so it's super easy to install and basically material UI is what you you're pretty much I've guarantee everyone's used material uy without realizing it's all of the google interfaces so it's all the flap clean look that you get when you're using a Google interface yeah so to pull it into the project all you need to do is MPM install so that little come on there you just want to copy that and go to your terminal yep there we go and do an NPM install and that will pull the project pull the modules into your project and what we can do then is I really like so we can start off by styling the button because the buttons naturally an easy thing to change so once that's done okay nice hold on so now what we need to do is if we go over to our button we can actually go up to the top actually let's try that little vs code trick that we like that we always like doing so if we instead so the button in material UI the only difference is it has a capital B so it's it's like that and if we then change the closing print bracket so we have the open and closing and now generally give that tricky little try so you get you go to the button and then hit control and space and what that allows you to do that that allows you to actually import it so let's go to the end of it is that allowing us actually import it hold on maybe the second one is an import yeah it's annoying sometimes it doesn't work yeah and we're not doing a live show yeah so here I'm just gonna copy this import statement and then drop it in right there perfect yeah so there we go that should give us the default style but what happens is is with these sort of design libraries they tend to give you a bunch of attributes that you can use the style style right so the one that we're gonna use is it has variants you can see it's already changed the look and feel of the button yeah the send message right when I go over it's like mmm looks juicy look at that right yeah so there's a really nice variant of this and it's called outlined and if you're wondering how I knew that it was variant and how I knew those outlined it's because in the material UI Doc's you have a bunch of sort of documentation that can sort of tell you so in here if you go to components and then button so inputs button you should be able to see here they've got all the examples all the different styles and use cases you can see this contained there's so actually as a good one to use maybe we should use that on suicide contained and let's say for the color let's do a primary button so you see that little blue color so let's do that one so color we're stealing the word primary from here and writing it in there exactly and that's honestly the easiest way so you can even see this disable elevation there's a bunch of things that you can do that so we've saved that let's give that a look boom look at that looking clean and you even get that little ripple effect which is really cool yeah so if I click it look at that look at that how nicely hey ah hey and now if I just hit enter it works too outofthebox something I just noticed that cause is when you actually hit send message when you had nothing in the input field it was pushing empty strings inside it yeah right so if I'm hitting Enter you guys see that when I'm just hitting Enter and with empty it's still pushing it to the array which is what we don't want yeah we don't want that kind of behavior so it's a very easy way to fix that and all we need to do is on the button and we just say disabled yeah and we basically say if there is no input yeah right like that and then basically it'll disable this button when there's no input so see and now if I so now I cannot hit enter when I try to hit enter it doesn't work when I try to click the button it doesn't work but if I say yo yo what is happening now it works but on empty doesn't work anymore so it's just this right there exactly and that's gonna make a big difference to the whole useful of user experience and it won't look as buggy when you do that so the next one we're gonna do is something called form control so form controls are really nice little addon so it's in material UI so if you go over to the material UI Docs and it's called form control so you can search for it form control up maybe here huh yeah in that one yes if you type in form control this one that's the one so I'm just gonna copy that import so I've already added the import and then you see the example that we have there so it says form control input label in perform helper text so right here yep this is the example uhhuh yeah so you see that example right there all we're gonna do and this is the simplest way guys it's just literally bringing that into your project so bring that into your project and a good place I guess to bring it would be maybe on top of the existing input yeah you know so we could do it maybe that so yeah basically what we're trying to put it is like above this input so right about there yeah and the reason why we're doing that is because we basically just want to replace the stuff that we have at the moment with that instead so to get that going what we're gonna do is we're gonna delete the delete the stuff we don't need so we don't need this html4 we don't need this ID at the moment we don't need this thing so you can actually simplify a lot of this at the moment and then even this ID here you don't actually need that now and even the form helper text we don't want so you see we've actually simplified it a lot so what we can do here is we can just say let's just say enter a message the dot and this input notice is very similar to the button that we had before right so it's literally just as what happens if i refresh right now does it does this stuff show up right now now so we actually need to import the rest of them so okay so let's go here and go in put label yeah with a capital I so capital R then and then we got in input input ok let's save let's hit refresh and it's showing up right here hey and you see you get really nice of cool and even has an animation so the text went up with it oh yeah that's nice when I click it it goes up and what we're trying to do right now is like delete this ugly looking one and I just have this one right with the button next to it or something exactly that yeah okay what we're gonna do now is all of the attributes that we have inside of the input we can just pretty much cut them out and we can put them inside of the new input mmhmm all right so we can do that and then what we can do is I think we might be better for the button to be inside of this form control yeah so we can give that a try and see how that looks so if we save ooh okay right there oh it's already working it seems like yo sunny and then people oh busa boost boost see sunny boo see sunny says you guys are killing it no it's glad you're enjoying it dude yeah pumped so let's send it and like look right there it shows it okay beautiful awesome so now we have a very slick sort of form that this showed to the user so the next step that we want to do is I guess we need to make the messages look a bit nice all right because right now they're a bit ugly yeah they're really ugly because just P tags right so there this is like wrapped in just a P tag exactly what we're gonna do here is actually soup we're gonna use a very powerful part of a react which is components components of a city's reusable link things which we can pretty much we write it once so we're gonna write a message component here and then you can basically pass something called props so it stands for properties and basically you can have like a bunch of messages which is one component reused several times and we can change the message contents through something called props so what we're gonna do here is cause II I just want to create a new file that's it so don't create one new file called let's call it message Jas and and the convention is to keep the capital letters so that it shows that it's a yeah there we go and we actually use this really cool extension guys called es7 snippets it's orange yeah message so singular okay yeah what we're gonna do here is we use a really nice extension called es7 snippets and then you can download from vs code marketplace and all you need to do now is type in type in RFC e so the the extension we have by the way guys as this one's called es7 and this allows you to basically write these snippets and really easy so for example when i now go to the code here and i just type in RFC e it just shows me a way to basically use components you know export my compile because this is something you're constantly having to write and suddenly even when I was learning react I constantly kept having to write this and I would forget the syntax and all of that so by doing this it's just super nice way of doing it exactly and to be honest I've been writing react for a long time and I still use this just because you do you tend to forget a lot of this stuff and you don't really remember writing some things in the same way so it's completely the way to go in terms of saving yourself some time Toni says I love the way you're explaining your code in a simple way getting things I never got at the University for the whole semester thank you for that really appreciate you actually reaching out and saying that that's awesome nice all right let's keep it going right so the next step I guess is we go to app Doge is and what we want to do now is pretty much go over to so after Jace and every press come on B to hide the sidebar what we can do now is we can actually read under that message we can say a message like this and that's how we basically render out the message nice but right now obviously we don't we we don't actually pass through the message that we were just doing clear it's the component that we're building in message KS that's going to be right over here exactly yeah so all of that will live the JSX and logic and everything that's inside that component basically just gets pushed here yeah and it doesn't matter whether you call the file dot GSX or j/s exactly yeah I think that's when you use create reactor yeah then that applies okay yeah so now if we do so this calls the prop texts and then what we're gonna do is as you know we'll just call it message so we'll say inside of message so the problem which really earth call it text it's for simpler yeah and then here we can see a message so we're gonna pass in the message that we get when we loop through the array for Manya we're passing that through as a property called text so this is really important guys so what we're gonna do now is remember all we're doing right now is actually just rendering a P tag so we're gonna delete the P tag that we had mmhmm and we're gonna pause this prop cool text so if we go over to message so what we're doing here is we're taking this text and passing it back into this file over here so we can grab the text and then style it and do whatever the hell we want in the message file separately because we don't want to go crazy styling everything all in one single file yeah and what that allow you to do is is actually manage your code a lot easier especially as your app gets bigger so now what we want to do is that property that we passed through comes here so it basically comes through as a parameter and what we need to do now is if we want to basically do exactly what we were doing before and instead of rendering a div here or we can just play inside you just put it like a net h2 so it's obvious that something has changed yeah let's do that so we could do that h2 and then what we can say is remember JSX or squiggly brackets here we say props and remember we could it text so that was the the name of the property yeah so you save that now mmhmm and we're getting an error saying message is not defined that's because we actually need to employ inside of apt ojs yup so let's see if I can do my trick with controlspace yep it works so now I just clicked it and at the top it says important message from dot slash message so it's actually importing that component from this file over here right there nice ok cool so that's a really handy trick that's actually really handy trick yeah so we need to save the file so uhhuh there we go there we go oh nice so now it's showing up as a h2 tag so yo it's already starting to look nice what is going on also and yeah it's looking great it's actually looking really good nice ok so I guess the next step would be to actually have it so so now this H I feel the styling we're doing it in this completely separate file so okay sorry I keep going yeah yeah so the styling goes into a separate file which means that it's all separate and we can actually have his own separate CSS file and a bunch of stuff like that I guess what we should do now maybe is have a prompt that pops up which says enter your name so that way we can say Kazi said hello Sonny said hi somebody else said what's up yeah because right now I would have to manually type it in like Kazi and like hey what is up and then you would have to write something back so yeah you're right we should make it so it's the other way exactly yeah so it might be a cool thing to do now so if we go over to AB guess what we wanted you yep yes nice what we want to do now is remember guys in order to store anything we always kind of think about state right so in line 8 what we're gonna do is we're gonna just drop a line and we are going to create a new piece of state and this is just gonna be used to remember the user so in this case actually it's call it username so that's gonna be the username that you you pretty much enter when you type in so we're gonna we wanna our goal here is to have a proper popup which pops up saying please enter your name we're gonna store that value inside of username so we're just setting up a hook here so we're using a hook to set up a piece of state so use state and initially it's gonna be a blank string because we're not gonna have any user that starts off when the apps loaded and then what we're gonna do is we can actually get rid of our console logs here to make life a little easier so I do recommend if you do do console logs clean up afterwards so that way it doesn't crowd the console so that way when you do need to use them it doesn't get too crazy the next thing we're gonna do is we're gonna use another hook so just like we use you stay yeah we need a piece of code now and there's a really handy hook called use effect and use effect allows us to run a piece of code once when the component loads in our case it's the app component so what we're gonna do is we one quick question Ali asks why didn't you use Ajax okay so Ajax is pretty much the Java scripts are very fast evolving language so Ajax was first brought into play when they needed to do something called asynchronous JavaScript that's why it's called a Jack's okay and the reason why we don't use that anymore it's because it was the it was a very good way of doing things back before in the traditional approach and then what happened is it those limitations with Ajax you couldn't do things as much as you wanted to do it it was very tricky to write very simple like very simple operations and what they decided to do or the guys over at Facebook said was let's make this super easy and let's just build a library and that allows you as you to build apps in a maintainable scalable way which is why react came along and that's why we have stay that's why we have all these sort of things that we're using right now because this allows you to build scalable apps yeah without dealing with the limitations so overall is just some it's much simpler to do it would react then to do it with Ajax so if you have to choose between the two to just choose react a second important question I think we have by Alexandros thanks for this question and he says what is the difference between use effect and use State that's a really good question Cassandra so basically you stay is essentially going to set up a piece of state right so it's a piece of memory and I like to refer to this as like a shortterm memory so every time you refresh the page the state disappears right so it's essentially the way you set up a variable inside of react okay so this is a simplest way to put it as you state is just setting a variable so like this is actually key for me to like this is awesome to know so you state is basically a variable in react that's how you set up variable like that makes it so stupid simple exactly that yeah okay and use effect is pretty much a case of so use effect this is literally going to be a block of code that gets executed based on a condition that's it so it's just a snippet of code that's gonna get executed based on a condition and that condition we can determine use effect oh wow that's actually another beautiful way to put it that's awesome yeah so that's the and honestly guys these two things so these two hooks are gonna be so fundamentally powerful so I really recommend everyone really practices with these and gets used to understanding how you use a you state hook and I use a user fight took yep so for example like even when I'm typing in my thing like here right I'm saying H ey and you guys see how in the console it's like writing out H ey and whatever I'm kind of saying it's like doing typing that out you see it says hey yo so this variable input is really changing on the fly without even me hitting refresh as I'm typing it in it just keeps updating it so starts off as blank but at this point it's turned into hey yo and it's really the set input that allows you to change it like that on the fly so again you state variables in react exactly exactly and the next one I guess would might actually be easier shown in practice so use affect is this is the way we write use effect so we pretty much do it like this so you have the first part which is just an empty function and the second part so this is basically the first part what we said here run code on a condition so running this is where we run the code so this is what we run yeah so we run some code here and it basically needs to fire off in the condition and then the way we specify can let me just put that as a comment right there so this is going to be the condition right there yep nice and what we have in here is we collect dependencies and a simple way of thinking of a dependency is we basically map this to a variable and the variables we look at are the ones that we talked about earlier the ones in the state right so you can do two things with this which is really cool right so if you leave this blank what this is gonna do is going to run the code one so if it's blank so if it's blank inside the inside the dependencies yeah then this this code runs once when the app component loads got it yep right yep so this yes so this basically means like there are no conditions and by default the only condition it runs on is when the page loads that's it exactly and that's gonna be really fundamental one we connect reacts really yeah okay yeah when we connect it to firebase that's really important that point and then but say for example cause ii was to put input inside of here yep so now what's gonna happen is every single time i literally write something here you guys remember my input variable source changing and every single time my input variable changes the code inside of here runs literally every single time so like because it's watching for this input called input right so every time this changes it will just keep firing again and again and again and again so for now what we want to do is like not really have a condition exactly so right now what we're trying to aim for is we only want it to run once because we only want to prompt the user once right we only want to prompt that user once has something that we can do here is we can say prompt so prompt and then what we can say is please enter your name and what this is going to do is it's actually going to pop up a prompt on the screen and what tradish what we do is we say Const and then what we say is we actually store it here so we say Khan's name and then when that popup comes up and you type in your name it gets stored into this variable but in react what we can do is we actually have the username here and we have this set username so rather than wasting a variable here what we can do is we can actually just do this because before you change that can you undo that real quick because I want to show them literally how it looks written sidebyside because I think that's important because it's sometimes confusing so yeah this is how you would deal with a variable in react like if you want to change it you won't actually do name is equal to something you will do set name is equal to something or as a function almost you're gonna just set user name so let's actually make it so it's extremely clear so user I'm going to do set user name and it's like a function and you call it and then this is like whatever the new user name is so you can continue you can take over from here something that's perfect yeah exactly so that's what we do is so in this case what we this is where we would put the string for the username right yeah but what we can actually is we can replace that with a functional piece of code so we can actually go here and replace out with this piece of code and what this is gonna do is it's gonna pop up a prompt on the user screen so the browser has support for this so it's going to pop up prompt which is gonna say please enter your name and then it's going to set that inside of our inside of this state so let's then oops yeah it does that weird thing sometimes I think we have to manually and if we say I just import it so you guys see so that line of code here the prompt it opens this prompt up and it says please enter your name right over there okay and now once we write the name what's gonna happen is this name this username that I wrote is going to be stored in the variable called username okay so if I write the exact enter boom it just got stored exactly and a really good thing we can do that is to demonstrate that that actually worked is if we go over to a line 27 uhhuh and here what we're gonna do is we're gonna say hello clever programmers and then we're gonna have a h2 underneath it which says welcome and then it's gonna have the name so it's gonna say welcome and in this case it'll be username yep right okay so if we save this I'm put on this so you might need to refresh yeah it's gonna need a refresh there you go let's see cool CP programmer welcome CDC there you go Wow nice right and we can actually use that that now when we so remember when we sent that message what we can actually do now is we can so we can actually pass through so right now we have a very flat structure so remember in online eight we had nice latency forms and thanks to do this so on line eight we had a very flat structure right we had just a bunch of strings together we had hello hi what's up just I'm sorry one one thing I want to say is like guys react is a stupidly simple it's um it's easy to also get confused by it but just if you just understand this you state and use effect which are the things that killed me forever in it there's literally nothing more to it it's so simple once you get this like you will understand almost 95% of whatever is happening in react a hundred percent 100 percent you stay and use effect of the fundamentals and also just practice creating components and then using them in different vowels yeah that's gonna really really help everyone out nice okay so I guess what we want to do that is we want to have it so that it says Kazi said hi Kazi said what's up and so forth so what we can do now is messages we actually need to change the structure a little bit now so each of the messages typically just is a piece of text but we actually want these to be objects instead now so that way they can be they can have a user and they can also have a and a piece of text so if this just changed this structure a little bit so rather than having flat a flat structure we're gonna have objects and several objects inside of here so let's just have three objects inside of here and the first one we're gonna say is the key the keys are gonna be like as such it's gonna have user name and this one can e so let's just have some hardcoded there so user name is going to be sunny and the text for this message is gonna be let's just say hey what's up hey guys yeah and the second one would be username username is let's just say cozy mess it is getting a little long so I'm just gonna break it up a little bit so it's easier to see up what is happening is it what's up there we go so that's how we're basically structuring it now so we're gonna have to change our code up a little bit now let's just keep as two messages and so we have this very simple structure now so now the difference is is that we have these objects instead of just flat strings which means that when we rented it out on line 40 to do that real quick yeah so I know it's not the current job topic but why do you use material UI instead of bootstrap so the reason why we use material UI is because it's one it's very very modern it's very right like so of Cup is it's very at the front of what the design libraries are doing at the moment so previously everything was very rounded you had rounded designs 3d designs and then everything went to a flat consistent design yeah and material you I aced that and it's a Google library yeah so that's why we use it yeah bootstrap is more for responsive design as you know so there's I personally like material UI much more yeah that one's has also cute yeah I know I saw and then we've got let's have a look so we have what's next well we know we were creating the messages with user name and text so we're hard coding it in right now yeah so now if we go to line 42 line 42 you pretty much see so remember guys before message was just a PS string but now it's object so we need to account for that and here what we need to say it's message dot text here and we're also gonna pass in another property now so it's gonna say another prop so here we're gonna say usually use it it's gonna be message dice I see how we're doing this is awesome yeah and this will really fit in nicely when we go into the database side of things so if we save that and then cool I can actually shine a spotlight on what you're talking about that's awesome yeah mark by the way no we're not saying we're gonna kick you out what we're saying is like you can now kick people out that's what we said in the YouTube chat so yeah but okay so this is okay so this is cool now should we go to the messages message okay yep so we go over to message or Jess and now we passed over an extra prop right so we actually need to use that problem so in this case it would be very simple to drop a username right yeah Propst a username so so you want to put everything about effect exactly yes and that's the simple as it is guys to use it so in this case if we save that and we run it we shall good khazi hey yo I'll show you why that happens so did a nice save so what username oh okay that's why it's happening so right now it's working it's working I just didn't save I think okay so we actually forgot to do one more thing so on line 24 in apt ojs aha remember when we were setting the messages we were saying it we were appending a string yeah this needs to be updated to have the new structure that we have so the username would be in this case our username so I'll use the name from state yep and then it should have so this I mean it should this should be an array right instead of just an object yes oh isn't it actually oh I see I see I see got it okay it's just pushing each okay makes sense so now our messages guys are not just like a flat text they are objects and so we're pushing an object now every single time instead of just a string exactly that yeah so we have we keep all the current messages and then we're saying also append this object right and now what should happen is it should say when we save this and we run it now it should be working as it was before okay suspend Kazi yo and oh nice it's me he's right Oh Logan is on nice okay awesome so we got profitable shortcut students coming in too low one of them is Logan and Mark Johnson just joined profit with JavaScript yesterday right he was on our lives yeah yeah that's really cool yeah and if you guys are interested in the course by the way in profit JavaScript it's just in the description so just check it out if you're interested but let's keep going nice so now what we're gonna do is we have the structure that we needed we have a prompt that pops up we can do two things now we can either hook this up to five days or we can star the messages okay let's style the messages first I think okay so what I like to use is in this case we can do it two ways we can either use material you want to just give it a card design or we can actually go ahead and make it look like a bit of a message so mmhmm let's hope that how we do that so let's use this use a bunch of things that we have in material UI so here it's gonna copy a little snippet that we had so material UI has a really handy card element and it has a bunch of things attached to it so it has a card it has a card content and a bunch of other things so in this case I'm just copying a little snippet of code and we're gonna clean this up so this is one of the demo snippets so let's just do this and I'm gonna get rid of a bunch of this stuff so in this case we get rid of this we don't need this uhhuh we don't need this and here there's a bunch of like remember how earlier we had material ui gives us a bunch of things so here's an example where it can be called a right variant component and things like that and then have in this case it will be props text would go here because that's where we want the message to appear yep and we can get rid of this so all we did there as we used it a little demo piece of code from météo UI and now what we can do is we can actually import that so it's important of the missing dependencies yep right there and we have everything pretty much that we need I think actually we just need to have it so that it says it as we were currently saying it before so there we go we should install prettier maybe we are waiting to see Cod content oops card content there we go and this is complaining because we have a div so we can actually get rid of the outside div yeah yeah we just have one yep no one like that and if we save message so I don't think it would have up dead if we save it though nice you can see it's a bit hard to see it but there's like these floating cards you see that here's another good question I think we should answer I Jerry Smith says I don't know if you have already answered this by why are you using react instead of angular is it more powerful or you can do something that angular can't so it's a very good question angular is something that was built by Google Google acquired them see that did the main difference here guys is two things so in terms of popularity react is on fire right now it's a number one most growing library that is being used if the demand is so high right now so it's one massive reason for using react and learning react also it's super super super lightweight guys angular is a framework which means that you and you need to know a bunch of things in order just to get started working but you can see here in less than an unless in half an hour we have the app running we had things working everything was doing it and you can learn things as you need to like you to state use effect angular is a much more heavy framework and to be honest in terms of what you can achieve with both honestly you can do everything you can in react you can everything you can do every single thing that you can do in angular inside of react and big companies use react so Instagram Facebook tinder uber they will have react so here is the best way to basically visualize what Sonny just said so if you look over here we have angular and react right blue is angular gray is react if you look at the current job market and what's going on it looks pretty much the same the demand looks the same right over here in this graph and this is 2018 right the equal amount on LinkedIn equal amount on indeed equal amount and Simply Hired but here is the really interesting one to look at so interest over time and this is in the last 12 months so this the red one is react jobs and the yellow one is angular jobs and if you look over here you can see that react jobs are just demolishing angular jobs and angular jobs are actually steeply going down on a downward trend so if you're learning right now and you want to decide react is the way to go exactly that's actually a really good demonstration of that so you can see especially this year guys there's been a huge separation in terms of react popularity versus angular popularity so that's a really really good diagram to show that so honestly if you're on the fence of which one to learn I definitely choose react it's also much funny to learn it's much more lightweight and you can just learn things as you need to as opposed to learning so much at once so this jump straight back just want to say that this live stream is so freakin awesome like it's unbelievable like all the value and just all the visual aid and like this is this is pretty freakin awesome dude yeah it's crazy and once we hook it up to firebase everyone will really see the power of it and what we can do with that yeah so what we're gonna do now is we're just gonna basically kind of make this look very simple as a message so let's give this card a class of just this to say in this case messy underscore mr. squid mr. slow Cod and what we're gonna do here is we actually we need to create a message dot CSS file so to in order to style this component so let's go ahead and create a message to a CSS file okay so let's go over here I'll go message it should be capitalized or just lowercase capitalized do anything which is talking about a component you know okay and then what we do is be in message J's we just need to employ it so we say import message dot CSS so that's inside of message jeaious uhhuh that's inside a message Jess yeah the top yep there we go and that's how we actually bring it in to the inside of the auto content at all I don't know if it does know oh it should sometimes that's already how did it come there already did you add it in oh I was typing in I see how cows like how does it just show up okay cool yeah so we basically add the impose statement and then we go into our message door CSS and remember guys we gave the message card class here right so we just want to give it a very simple UI for now and what we're gonna do is we're gonna give it a simple you are I'm just gonna quickly find some design for this so we've got final design I will take this question on Chris awesome question so Miguel says what would be the better database to work with react a sequel or a non sequel and I was actually talking with sunny about this yesterday but the great thing about firebase is actually a hybrid between a sequel and no sequel and so it's extremely fast and that's what we would recommend that you stick to when putting together a database is very powerful extremely simple and can scale to you know however much you want to scale it exactly yeah perfect so if we just save message right now I've added a little bit of styling to it and the bits of styling I added was pretty much a little padding around it so in message that CSS and some tiny padding and I the width which basically just fits as much as we need to so you can see now only gonna use much width as it needs to right yeah I see Yeah right there yeah as for the sort of look and feel of it at the moment we can carry on styling it so right now they're all touching each other we don't really want them to be next to each other like that yeah let's give it a little bit of a margin so if we say a 10 pixel margin inside of here what we can then do is if we go back and check it so go back let's move around I just started following you let's have a look see if I go into message now awesome that's really yeah yeah nice yeah so what we can do now is if we are in is go back to the code so back to the demo yep and then see yep there you go lovely so we can see that oh nice Wow there is this like little margin right here exactly yeah okay what we want to do now is we just need to have one little differentiation which is in most of these messenger apps so if we look at the one that we built so if we look at the the angry link inside on the in the tab well you know is oh what's up oh yeah that's our little bit yes if you go to the angry link in react so uh where is the angle Rocklin so that's really why yeah so you notice how the left side is all of the users that aren't cozy right right but whenever Karthi types in so if you type a message in here and now you can see like it comes up slightly different right yeah it comes up and it looks a little bit different because that message is from you so what we need to check is we need to say if the username is the username that you've entered and what we want is we want to style it a little bit different right yeah and the way we do that is if we go over to message J ass yep and what we can do now is we can simply check so props username for the message okay so why do I actually do here is if we go oh yeah you're following me right yeah so what we can do now is is instead of passing in as separate things right why didn't what I like to do at this point is actually pass the message as an overall object so we find I am as an object right yes and we simply passed the username not as the message username but the person who's logged in hmm all right so the person who's logged in and then we have the message because remember a message can be have a user which isn't the user who's logged in so it's kind of you should separate these two things right yeah so now if we go inside of our message component the structures slightly changed so if we can actually do something called es6 D structuring here and you can see it's actually broken the app because we've changed the structure of our props yeah so inside on line five now what we can do is we can D structure our props and we can say we just now pass in a message and we pass in a username yeah right at the top we have the message so previously it was props username so and now it would be message don't username messaged or text yeah but the actual username would be the person who's logged in so in this case we can run a smooth little check which says is this the user has logged in right yep and the way we do that is we say if the username is equivalent so if it equals the message don't username then this would be true okay does that make sense yep yeah and the reason why we do this now is because we can do a really cool little trick here and what we can say is we can say all of the styling that we currently see is here inside of this class name message right yeah what we can do now is we can actually so first is user we could actually use we can actually use a different type of styling right that's what we're trying to get at exactly got it so guys like you know how on your phone when you send somebody a message it might be like green or blue but then when big send your message backs like gray yes exactly that so in this case what we can do is we can have class name and then we basically we wrap it in JSX yeah we give it these curly brackets that these back ticks which of these special brands and waxes we currently we want every card to have the original styling that we gave it what if it's a user then what we do is we put this special syntax here which allows us to have JavaScript inside of our little backticks yeah we say if it's a user so if it's a user then what we want to do is basically add this class in so what we're gonna do is we're gonna say message on this quote under school user so only the person who is logged in is going to get this class I've message only then do they get this class of styling mmhmm right so now if we go to message CSS and hopefully we get this right in the first try yeah what we can do is we can add the a bit of styling here which says message user and we've got margin left which is basically gonna push the margin left is gonna basically notice how in the react app that we built all of the users information is always on the right side so if you're logged in and you send a message it's on the right side and it's gonna be blue right so what we can do now is text the line can should be left to inner city so if we say that so now I called the if you want to just refresh the the app yeah and typing Kazi and if you type in a message saying hello and go down okay so right now it's not actually coming through so we need to go to our message and see what's going on so message gets passed here as message username gets passed as username yeah I think it wasn't saved so I just saved it yeah it's not working awesome right so what I would do here is you're putting Cosima's in with a capital K that you put in okay no so why would you here to check that it works so now if you type in like hey right so we can see that the styling is not actually getting applied so at this point why would you is our debugging so I'd write ticket where are you know I'm one that just talking about the I see okay yeah inspect yep inspect that uhhuh if we just make this a little bit bigger so we can see so right now it's really small because of the yes you only took on elements yep and you should be able to see so right now it's a bit hard to see cuz we're zoomed in but what we can actually do instead maybe is do it as let's say use a card right so I'll tell you what would you let's slightly change it up so let's go back to the code because it's gonna be hard to show for that way so what we do is we're gonna either div instead which is gonna surround so a div is just a container guys right we're gonna chuck all of this stuff inside of that so remember everything we saw previously is now the only differences is it's gonna be inside of a container we're gonna apply those same rules that we just spoke about to that container so we're gonna have those same rules that we spoke about in container and then what we're gonna do is we're gonna say we're gonna do a similar thing we're gonna add some classes here so we're gonna say if it's a user right then we're gonna give it this nice okay I see right yeah what we're gonna do is we're going to say if it's a user to get the user card starting otherwise they get the guest card starting okay right and what we have here is let's have a look if I go to your message don't CSS and we do this and I add it so I didn't starting then I'll use your card okay so now use your card is blue and guest card is gray yep so that should be working though so if we refresh that I say Kazi oh that is clean hey what is going on okay nice so now all my messages are blue okay and if I have your message that's not mine then it's gonna be that okay now yeah awesome so we've actually set up the fundamentals here for the beginning of the app right yeah and what we I guess what we could then do is we could I think this says hook up firebase at this point right yeah so hold on let me just visually show so here's the it's a user card is the blue one right that's right there yeah and then this is the guest card and that's right here okay and this dialing is happening on that ifthen statement so go just go back to your ifthen statement yeah so actually I would have to do it on this computer so message digests so this is where we're deciding if the user is logged in if their user then show the user card otherwise show this styling exactly cool yeah that is that's a really powerful thing what we have here that little if like a little ternary yeah yes the tanneries are extremely powerful and react and you use them all over the place so this is a case of where you have an ifelse yeah and the one above it is a case of if you just want to have if this is true then show it alright so now we're about to do some firebase stuff yeah so let's do stuff first that we're gonna do is if you wanna click on the little bugger icon menu I like that Alexandra asks is this is message underscore underscore user using BEM yes I'm so happy yeah so that's a really good point if I actually completely forgot so if you know it's the way I was styling using a convention known as BEM so it's be e/m and I really recommend everyone goes and lanza and the way we use BAM is we say it so for example here the first part of the the class name is the component and the second part is the sort of the element that we're talking about and the reason why this is really good is because when your app grows and it gets bigger it's a really standardized approach to always knowing where everything is and always knowing that everything is consistent within your app so it's something that I would really recommend that everyone learns when they're using react because it will save you a bunch when somebody introduced them to me the first time I actually didn't like it I thought why am i learning this honestly guys is saved me so much headache and I've done so many professional jobs with that and it saved me a bunch of a bunch of headache yes I would recommend definitely learning and investing some time in BEM dope okay awesome nice such a cool question yeah I know you were gonna be pumped when that's why I've dropped it on the screen yeah awesome nice okay so now what we're gonna do is keep the burger icon on the top left so those three lines uhhuh and we're gonna click on database got it yep and we need to set up the firestore database so here you want to click create database mmhmm and click in start in test mode yep and then you want to just set that so we don't need to know that bit from now so we just think next yeah and then you can just click any card file store location and it should be fine uhhuh and what this is gonna do guys is there's no setup that you would be traditionally used to right this is doing everything right now it's setting up a file store database its handling where all the servers are being deployed you don't have to manage any of that no we need do now is go into our react project so instead of our terminal so while we're over all what we're trying to do right now is host our website so somebody can go to blah blah blah dotcom and use it so your Facebook message of clone com so that's one important thing we're trying to do right now the second important thing that we're trying to do here is now we want to give it a database because up until now when I hit refresh if I type in something and I hit refresh it's gone right and then it has to start all over again I mean this is that's that's fun for now but like it's not gonna be a fun app for anybody to use because all the memory is gonna be deleted so those are the two things we're about to do hosting online and getting a database yeah exactly yeah so now what we want to do is we just created a file stored a base so this is a real time database and it has this sort of collection document collection document structure we won't go into that too much but the point is the collection in our case is going to be messages so let's go ahead and create a collection uhhuh create a collection yep so this is give me messages and imagine a collection is basically like an array just a list of documents so the first document the message is gonna be is for example let's just say like hey what's up there we go and the next one is for self alright the next one is gonna be username coffee puppy this has to be proper you know and then there we go and this add one more so that we can just proof it so we're gonna document and the message so remember the keys are quite important so you need to make sure the message is correct you know what's going on and the next one is gonna be username and that could be actually let's make it somebody from the live stream so Jana yeah nice perfect so there we go so now we have two records so we have two documents inside of this collection so you would think at this point oh I need to make a backend so and have some API and everything like that you don't need any of that all you need to do now is head over to the terminal yep and let's do MPM install firebase and what this is doing is gonna pull in all of the firebase modules into our project and that's pretty much all we need so I have a very handy snippet of code I use and I'm gonna send it to you I'm gonna add it actually so what I want you to do is just create a firebase j/s file mmhmm so I'll create it right over here so we call fire based at j/s yeah and we're gonna consider this to be like a config file right and here what we're gonna do is we are gonna basically let's go over to you where is it I let's see if I can yeah yeah five days yes and writing it right yeah project settings and then oh yes I actually get our config so guys we need to get like some configuration stuff set up so now the way we do that is we go over to that cog that called you into you and then we go to the config toggle and you see this little object right now we just need the inner contents of that right so everything inside of the object we need so you can see yes we can get it to the top and the bottom so nice I just took all the content from there and popped it in here so just to be clear the part that we added in is actually you don't need the first line you can just grab everything from the inner of it and then like pop it in right there that's what I've done and a brief explanation of what this code is doing so at the top we're just importing the firebase module from the one that we installed so we basically put in all the code we said employers so that we can use it then they give us this very handy function could initialize up and all we need to do this past this object which is a convict that car they just grabbed yeah and best and then tell it does all of the work behind the scenes them so it basically at that point gets goes and connects to firebase and pushes everything into this one firebase app so this is like our magic little variable right now then what we do is we initialize it by saying got five store which is the database that we just created and we assign it to this little DB variable and then we just simply export it so instead of doing this actually I'm gonna say Explorer default DB which is a bit easier uhhuh and then now we can use this database variable in any of our files in our app J S or in our message J s anywhere else right yeah exactly and that's like super super simple there's no API request that we need to do or anything like that so now what we want to do is we'll save this file and let's just go over to our app right now you know let's go to our apt ojs well oh yes what you meant so it's just a purchase and then what we need to do now is we need to create a user fact and the reason why we're gonna create another user effect so this is a cool fun fact I didn't actually know you could have several user facts so you can have as many user facts as you want it took me a while to figure that one out but you can have as many as you want for different purposes but with this definition honestly like the way you explained it it makes it easy for me to unbel to understand that right away that like okay if it's just tied to a condition then you can have as many Yousef X that they just run on those given conditions exactly yeah and only see that's if you remember it that way it would always be simple yeah that's why even if you have like five of them you just look for the condition that h1 runs on and it answers a question so in this case what we want to do now is you can see on line nine nine nine and ten we just hard code the values currently right but we want to pull those values from the database so we want some kind of code once when the app loads and it doesn't run off to them basically what we're gonna do here is let's just write the template so here in order to do that we add these square brackets and we have no dependencies and that is pretty much gonna run when so this will run once when the app component is I don't even know if this is helpful or not but what we want to do that it's pretty much of it so that when the app component loads we're gonna do something really really cool right now we're basically gonna say DB doc collection oh I don't know why that DeVito collection and cozy code the collection messages earlier uhhuh that at a file store and then what we want to do is we have this amazing function called on snapshot nice and what this is gonna do is every single time the database changes yeah imagine like a camera takes a picture of the database right and that gets stored into something called a snapshot so for example like if I go to the firebase right and I'm over here so every single time I add in any new record this will detect it and run so on snapshot just says hey any changes I see here I'm running this piece of code exactly yeah exactly that and all the information from that snapshot gets put into that one variable snapshot so from that now oh wait hold on hold on okay so you're telling me oh dude that's actually huge I think even that's clear something up for me so all of these documents are in the snapshot right there exactly whoa that is mindblowing okay so awesome that makes everything really simple cuz then if that's true then I just know this is an array of objects right it's kind of like a JSON structure yeah so the way we get to it is we say snapshot docs and that will give you all of the stuff god its snapshot docs okay because we don't want to do snapshot doc collection right we're gonna do snapshot Doc's exactly oh yeah they give you a bunch of other metadata but with it but the one that we're interested is the docs we're just interested in this right here got it so now what we need to do is basically we're gonna say set messages because we want to set our messages right and this is the part which gets a little intricate so let's do a full screen on this because it might be a little bit of a long line of code so now to do is not only we're gonna do full screen we're gonna even do this no I'm kidding yeah so now we're gonna do is we're gonna say snapshot and what we're saying is dot docx so that lists that cause you showed earlier so I'm sure got Docs and then we're gonna say map so Docs yes my vehicles being weight so I guess I map through every single doc and we're gonna say for every doc right what we're doing is we're going to go ahead and grab the doc dot data right guys what the doctor data is gonna do dr. day here is gonna do is remember when you added stuff to the database hold on before before you go cuz I'm gonna we're gonna start losing people right at the second so just let's just break this down so first this Doc's right here is this entire thing yeah exactly okay then when I'm looping through this doc here is each specific doc right there every single time I loop through so the first loop iteration is gonna be that and the second loop it's gonna be this yeah exactly got it okay and when I said doc dot data what it's really doing is taking this specific doc and then giving me this data right here which has the message and the username yeah and it returns as an object right and every okay so and I get it back as an object so this will just be like one singular like squiggly bracket object exactly remember like because it's mapping through it you're basically getting this structure so if you go to line nine and ten we're basically getting this exact structure that we had earlier so remember like it's not an array of objects yep it's this exact thing yep you're right yeah so that's exactly what's happening with this with this line of code right yeah and what we're doing is we're just saying that just to be brutally brutally clear because this is where oftentimes for me things stop making sense cuz if I ever get like a little loss so this is going to evaluate to literal something like this an object yep and there yeah exactly that each time yep okay I just noticed as well our key that we used over there is text and we in the database we used message so let's go ahead and quickly change that in yes we can yeah so we can change that to message message and then in our code we go ahead into message jas we can change line 17 to be message dot message there we go nice enough yep so in app DOJ's now what we can do is yes so that's it that's this is honestly one of the most powerful lines of code I've ever come across in my life when it comes to you like coding and anything like that guys this literally is we call it a listener and the reason why it's a listener is because it all it's doing is listening for any changes at which point it shoots off a snapshot yes like a realtime capture of the database and then it basically goes through each one so iterates through every single one it creates this structure that we spoke about earlier yeah so it runs so so once again it runs every time so if I hit add new document and there's a new document that gets added here right new as soon as I do that this piece of code is going to run exactly got it okay exactly yeah so this literally will always be listening for for new input so that the only thing I think that sometimes can slightly make it confusing is that use effect as a listener and then this snapshot thing is a listener within it right yes yeah okay so that's a really good point because that's usually where do you know as people get caught up on this yeah so I honestly the one thing I'll just say is just practice this line this line that we had his remember that a user fact just runs code on a condition yep this yeah in this case this use effect is only running when the page loads yeah okay cool exactly so now what we're gonna do is to make sure that it doesn't get interfered with our hardcoded stuff we're gonna get rid of the hardcoded stuff because now we want Oliver wanna hold information this database and actually like put it in the app right yep exactly Scott it so now we're gonna save at this point so we're gonna just kind of save it and then we're gonna go and check and now we should see the data that you and DB is not defined so we just have to make sure that we you know we imported so we just import it right here control space was a shortcut yep and hopefully if everything's gone well we should see what it's all gonna break so let's go cause you nice so now just to show sidebyside so here is the database and in the database we have what is going on Jana and then you can see this actually right here right and then where it says cause II what is up you can see it's in my firebase database right here and that's showing up right there so now we're pulling straight from the database this is not hardcoded anywhere exactly so you've got a real sync to the database right now yep the next step I guess is that when we actually send a message so this people blow your mind as well because this bits actually even simpler so this is the line of dis over here this line of code is what's reading and outputting all of this yeah remember guys that's a real time listener right now so actually you know be cool cause if you put the app on the left uhhuh you get and you put firebase on the right uhhuh and add a new document exactly yeah okay you scroll down so we can see it as it drops in okay so I'll scroll down right there yeah okay so I'll say message is what is up fire and then for username I'll put in no no Amy Ruth okay yep cool and we'll do that and let's hit save boom right there that was real time like a Dasom real time and all it took was that one amazingly powerful life we didn't even hit refresh yeah that's it it's just what I'm saying damn that's six okay beautiful so not only roots actually asked a good question she said can you please tell me about web development course please where can I start yep so web development course the best one on the planet it's called profit with JavaScript if you guys are interested you want to not only learn what we're building here but but but go deep and actually learn how to make an income then you would be very silly to actually not join it because it's the best course on the planet so definitely at the very least just right now like if you are here right now you got value wait till what you see in this course in the description below go and click the link below it's gonna say profit with JavaScript it's gonna take you to the page and that page is gonna have all the information and what you're gonna learn so you have nothing to lose right now definitely just go and check it out and then you can come back here we'll still be livestreaming and remember this is going to be recorded but let's get back exactly awesome yes so what we're doing now is we're actually having it so that when we send a message it's actually gonna push so rather than cause you having to go in and manually add it because that wouldn't be ideal for the user we're gonna do now is we're gonna have it so let's go over to line 27 okay what are we doing right now we're gonna update our send message so that now it actually pushes into the database cool right now we have this which is put which used to push locally and also what we're gonna do is Sam says guys you should use the order by time time and indeed create a time sum in the database because you guys saw what happened when we added Naomi's message right it got added somewhere in the middle when it really should have been added either to the top or all the way to the bottom so we're gonna actually make it so all the most recent messages show up all the way to the top exactly exactly yeah so the way we do that would be it's actually simpler when we push the message in because we can she'd make it use the correct timestamp so what we're gonna do now is we're gonna do something here we're gonna say DB doc collection yep so I'm just talking about is when I hit send message up until now I wasn't sending it to the database so now we're gonna actually send it to our firebase database exactly yeah so the collection that we want to push it into was the one code messages and that's the one that cause he was showing earlier and what we need to do now is we need to actually add is we just need to say literally add and all we do is we push in an object so this object is gonna have the shape that we was adding previously but it's a very good point that was said that is we are gonna add a timestamp in addition to us so here we'll say message and our message would be whatever it was inside of the input that's whatever the user typed in yeah username it's gonna be what was inside of the username state which is what they entered when the prompt popped up and what final one basically because it's very good point because we do need to keep track of where yeah yeah we want to add like a time saying timestamp here at some point and so this for this we will be choosing timestamp and then adding in a time when the message came in so that's the third field we're gonna be adding that we currently don't have yet exactly and the way we do that is we actually need to import firebase at the top so the first thing we're gonna do is we're gonna go to the top of the file and we're gonna say import import firebase from firebase and notice how this one is pulling it from this one right here is pulling it from the actual file base module and this one is pulling it in from our config file that we saw earlier yeah so the reason why we need the actual firebase module here is because we go back to line 34 mmhmm what we're doing here is we're saying firebase dot file store which is the database yeah what we're gonna do here is we access something called filled value and then we say server timestamp and now I would explain what this means so imagine so right now I'm saying Kazi singing in LA we both have different time zones right yep so if he's his time zone it's gonna be different to my time zone yep so the one that we use is the one that's saying on the server like literally where this database is so like wherever firebase is hosting your database you want to use their local time zone exactly that yeah exactly that and now what this would mean is it should at this point be so when we start pushing messages and we can actually get rid of this code here because we're no longer I'm gonna be saying our state we still wanna we still want to clear the input because it's a nice user experience but now if we save this file we should actually see that everything should be working as we expect it to be but I don't think you'll be solving it but it should be pushing it into the database so now if we say hey so you see him right now it pushed that message into the database right but it's not in the my order which is confusing now let's go here and like the good thing that's happening is that now we're getting this timestamp field yeah so now if I go to the new messages that I added here's another one with a timestamp field but it's still not ordering it by it yeah so the problem here is that we had some records I've added before so what we're gonna do just to keep a clean slate is let's go ahead and clear those old records so if we go to the collection and we can actually just any and just for like nerdy satisfaction it by default it actually sorts it by like the alphabetical unique ID right yeah that's exactly why it's sorting it actually like this it's like creating a random ID for that message and then it's sorted alphabetically based on that yeah so that's like a lot of people didn't know if you really even I didn't know that for a very long time and then I was like oh hang on it's using the ID yeah yeah so what we want to do now is let's go ahead and click those three dots all right oh well those three dots and this click delete connection right here delete the entire collection yeah let's just delete the collections that we have a fresh DB so now this will clear all the messages in the every new every new message now that comes through will have a time stamp but we also but now we also need to do something which actually orders things based on based on the data inside the database oh I just added it is it gonna show up or what I just added a new message nice yeah that's it so we just need to add one more thing to get this whole thing working now yeah so inside of the use effect where we mapped the the database to the state so inside of the use effects so if we go over to apt ojs mmm yep and let's go to line 18 what we're gonna do now is we're gonna have a order by so here we're gonna say instead so just before we do on snapshot we're gonna have order by and the record that the field that we're ordering by is time stamp and we're simply gonna add a second argument which is gonna say if it's descending or ascending we want the most recent thing to come at the top so we're gonna say descending nice okay that's simple enough so now let's do less I'm just gonna say I'm Sonny oh and so now the these messages are great to me because that's not me anymore yeah and you see now it's working like an actual chat because it's doing it look at that so nice and it's also showing up at the top hey exactly also I'm just having fun dude this is this is so clean and no matter what imagine once we deploy this if you're not signed in or whoever's sort of signed then you're gonna see your blue messages will only be shown to you and everyone else's messages will be shown with the with the the corresponding grey color yeah yep nice okay also I think maybe we can demonstrate it these are this side by side so like when I type it in guys notice how in real time it's gonna add it to this database that's why this firebase is called a you know what we're doing here is a real time database so exactly test right there right you guys saw that it popped in hey what is happening hello why coffee database realtime holy crap it's fast there we go no all right I love seeing is so satisfying yeah it should be one of those satisfying videos yeah yeah yeah we just break a snippet out of it and like run it as an ad all right so now what we're gonna do is we have everything set up for this I guess the next step would be this is a great point that Logan made this is the main point we we emphasize about firebase as well traditionally you have set up data based on CLI firebase looks unnaturally easy that's the most powerful thing about firebase and like war p9 which is life and he says that there are many similar services on Amazon like Amazon AWS or Microsoft Azure or whatnot but firebase is a lot of powerful features all in one place and the simplicity the simplicity and all of the things in one place that's what makes it take the cake exactly and you know that's a good point cause because you've actually got first experience at using AWI it's a nightmare like I'm using AWS for a bunch of things like the lambda functions the AWS database and it's so complicated like I literally had to learn so much about DevOps just to get basic things up and running like creating security groups where my database is hosted like how do I actually manage my cluster it's so much garbage that and even right now I can't do a 2way database sync like I'm having it's a nightmare and here you have like the simplest twoway database sync that I've ever seen like and it's working and it's realtime and it's fast so exactly yeah also so now is what we're gonna do is a really cool thing that we can actually mess around with now is if we so right now you know it's just sinn right yep so everything every time you push a message in it's just snapping in and which is like it's nice but it would be cool if there was like some kind of animation here right yeah that would be said yes I think what we can do now is we can actually mess around with something called let me find out what it's called spinning this it is a so it's cause is it there's a library called react flip move and what we're gonna do is we're gonna implement that together so if you just go over to your google and type in and react flip me yep we'll do react what flip move flip move okay yep and what we're gonna do now first one second one yeah p.m. just one yeah yeah you can use either one so the first one's good and this is the github page for that and you can see in the little gift that that's the kind of smooth slick behavior we want to get right nice now there's a few things to get this working and this is gonna be this is actually a really good demonstration for those of you who want to know how to like look at the documentation for someone else's code and then get inside of your project yes so what we need to look at is just scrolling down you can see there is a section which says usage with functional components so if you oh so firstly let's do that yeah first let's install this into our app so let's run the MPM I yep there we go and then we can see there's a section which is usage with functional components now because we don't want we that we don't want this one here we want this one right here yeah because what we're doing is guys we're using something called functional components when we're coding in react now many of you won't actually know what those are and there's two things that you should know at this point that you have two kinds of ways of writing a component in react you have classbased components and you have a functional based component functional based components are the new shiny lovely components that we all strive to write but the reality is is classbased components have been around for longer and they've been around for longer because they were built first and then they realized there was a lot of pitfalls so they ended up building functional components inside of react so whenever you come into these sort of documents um I would recommend you would actually always doublecheck to see how you use that stuff inside of a functional component so in this case they've got a really nice section for this and what we need to do here is we first need to see so you know you see at the bottom the the bottom half of the the demo is actually what we want to pay attention to first as you know it's the top box re the contest functional Arkell so all we need to do now is go over to our message Jas and here what we need to do is we need to use something called a ford ref in react now I don't think you've used this either cause this might be my own for you yeah pumped yeah so what we need to do here is the way it's gonna track what's going on and what's changing and what's moving it needs to have some kind of reference to the object that's flipping around and spinning around right yeah no we we use something called a forward birth to keep track of that yeah so the way we do that is it's very simple we don't actually even need to know too much about what's happening so this just changes to an es6 function so there's duke on snap so it looks very similar to what they've done mmhmm and now all you need to do in order to get this working is have a Lestrange once again yeah there we go we need to do now is actually do this we say ford ref so forward ref mmhmm you basically put a bracket around this and then we go to the bottom of the file on line 24 uhhuh put a closing bracket because the entire thing is wrapped in a bracket yeah I don't we do is we go back up to the top so hold on we zoom oh you put the whole oh okay so whenever literally message is changing we're tracking it yep so now what we do is we and then we basically get access to this ref right now what is this this is something called a higher order function message is a function right yeah so message is a function I said then you have something which is essentially wrapping everything go to for dress right I see yeah Woodruff is an example of something called a higherorder function and basically all it doing is it's basically just like wrapping what we already had which we saw on the screen to be a message is wrapping it with some additional functionality so in this case is giving us the reference to the to an object right yeah so here we get this ref so if we look on line five now it's ref right yeah and all we need to you know is attach that ref so here we say for that the div that we want to sort of keep track of we just attach the ref and all this is gonna do we don't need to know too much about what's happening here but all we need to know is that this is basically tightening all of the sort of links so that it knows exactly what element is what and what is moving so that way you can do this clever animation stuff that they've they've set out to do so that's why they've given us this is something that everyone can look into but this is an example of a higherorder component and in things like stripe and things like PayPal all of the API is giving you things like this to actually use sona's nice at an example would be if this was a stripe one it will give you a stripe object here so it's a very cool sort of use case in react and it's like it's supercharged is your component essentially yeah so that's part one now part two is we go back to app dot j s huh and we just need to import the the thing that we actually installed so at the top I'm just gonna do an import flip move from Rihanna fitment yeah and then I'm gonna go back down to where we map out the messages so let's go to line 55 Ghana and all I need to do is basically wrap all of the messages that are being mapped out inside of wrap that move right now we're almost done we're almost done but there's one key component so react it's very in how it rear Enders it rear Enders a list and right now it doesn't actually know what one element is to another one unless we give it something called a key and that key is gonna be crucial and oh I see what you're saying so basically this element and this element right here have no relationship right now yeah so right now react has no idea if when you actually submit a message it's gonna re render the entire list you've write it so oh I see what you're saying so if I reef refresh this or something that's gonna refresh the entire list yeah it's gonna refresh the entire list and that's not efficient when the the list gets really big because imagine you have a thousand messages you only want to really rerender the last one don't add it oh I see so only refresh them like the message like the new message basically that I'm adding but keep everything the same don't refresh it yeah keep everything the same I literally just cleverly push it down okay that's awesome this is how Instagram works right when you comment on somebody's post exactly yes so they use this and it's everyone that uses react should use keys right now a key needs to be a unique identifier so in our case in the database we actually have a unique identifier being poured but we actually need to do something here which makes this a bit more accessible so what we need to do now is if we go to line 23 uhhuh right now we just we're mapping remember here we basically just Matt you love the data in that flat structure right yeah so what I'm gonna do is instead of mapping it to the flat structure I'm just gonna enhance it a little bit so I'm gonna say return an object right so return an object and basically wherever we were previously doing that's just gonna go inside of something called a oh I see right but also gonna get the ID so remember that squiggly ID that you saw earlier in the database yep I'm gonna store that ID inside of a key so just one second just to be clear you're saying that this ID right over here that I have is actually being stored right there right doc that okay okay yeah so that's exactly what it says so that is so that way we've got like a unique identifier so now we need to do is we need to remember so let's go down to line 58 and we need to remember that over here now it's not the same structure that we had before so what I can do here is I can D structure to make things a bit easier in D structure and I can say message is no longer just this message that we saw of earlier actually not our data right yeah and this would be a top message I guess data dot message right yeah but you know that it wouldn't be it would just be yeah it would be data right you know they don't message I think yeah well no in this case it would just be data sorry yeah it would just be there and then we could have caught it at the top message so let's go back up to the top so 23 we can rename that to be message Oh 93 yes this mystery name that's been a message oh yeah just calling him okay but hold on one second when you pull I mean isn't that doc data so isn't that like all three of these things yeah but remember we actually implemented and and on in message digests we had message don't message message don't username so what we want to do is we kind of wedding oh I see I see got it I understand yeah yeah so now if we go back to line 58 we're gonna disrupt your hair's we just pass in message so it's still the same as we done yeah but we also now get the ID nice okay yep so we get the idea and what we need to do here is we basically just say the key is gonna be the ID now so this idea exactly right here is gonna be the key of that yeah so now it's knows that that react element which is rendered on the screen has the unique key of what it is in the database so if ever if somebody ever pushes a new message in now it knows that hang on that one didn't change nothing changed with that so I don't need to rerender that I just need to worry about the ones that were added the unique keys are added in yeah right so if we save this now and everything if if it's all gone well this would actually work really well and I can actually show you a demo of how it would work without the kids as well you'll see so Kazi and now it looked clean how it came up yeah so now if we did oh all right nice so now if i refresh and I go sunny all that information is still gonna be there all that is looking clean it's really nice right look at that and you get this really Slick's or key and this is a really nice way of showing what happens when you don't have keys so you see now it's only rerender in the top one and it's pushing the list on ah yeah I can actually visually just see that yet like not affecting any of the bottom ones it's just only the new one is the one that like has a bubble effect exactly and pushes everything down yeah exactly that so now if we go back and we actually get rid of at 959 let's get rid of the key and you will see a really slick visualization for this so if we go here too and get rid of the key so now a cow strange is gonna look so when you when you actually give this a girl so you say like cozy and then type something in above yep so now when you do this you see how it glitches out of it yeah what does happening let me zoom out a little bit what yep so now if you type in because what's actually happening now is it's freaking out and it thinks it needs to rerender the entire list so it doesn't actually do it in a clean way that we kind of expect it to you yeah you see it kind of like does this weird sort of like and like look it's even it's even like messing up your ordering and it's changing things what it shouldn't be changing right yeah so it completely breaks your entire app so like you need to have keys and that's a really that's I think that's actually the the easiest way I've been able to show how a key visually has an effect yeah I always wanted to see like cuz I always see them having keys everywhere and I'm like that still works I'm like maybe I don't need keys yeah exactly yeah so now you can see like with that key in place react knows that alright as soon as you type in a message and you enter it it's only that one that's gonna actually be pushed in so we don't need to rerender the entire list yeah which is awesome that is sick okay awesome so what are we up to necks on this right so we can do we've actually got the app running pretty nicely now so I guess the only thing so the there's a question of how to deploy there's a question of more styling so it's your core where we go I think let's let's show them how we got the app that we had in the start which has the you know this message thing at the bottom so I think at this point if we can just probably just move the message thing at the bottom and add like a little arrow kind of like how Facebook Messenger has it the other thing then that should be it and we can just call it be done with that you know and add like a messenger logo at the top yeah awesome this actually add the messenger logo right now so I've got the snippet over here okay so that's where I'll be rendering it here so on line 45 I'm just gonna drop the image tag there so this is actually a really cool thing and this is something I want to show to a few people so and some links right you'll notice that they have at the end of the at the end of the URL they have like a few sort of parameters you see that it's got width and height and then hold on I got where right there at the end you know so that's good a dynamic sort of imagery is pulling it from Facebook and we're actually changing the width and height and I'm Europe which is clean right that's clean I love it and there you go so that we've got a nice looking like sort of app already looks pretty fresh looks pretty clean but what we want to do now is actually have it so that that enter a message dropped to the bottom right so always clean it's all about the way and what we're gonna do is let's have a look how we've done that before so what we're gonna do is we need to go to our form control so on line 57 uhhuh okay and what we're gonna do is we are gonna have I'm just pulling up the code so we're gonna have now we need to basically have surround the form so you see this one right here we need to give this a class name yes our class and we're gonna say here this one is just going to be up underscore form so I'm following them yeah yeah banner and let's open up app dot CSS okay so let's go app CSS right here yeah and right now this is all the stuff that was previously in their reaction so we can get rid of most of this let's leave text align in there but this one we set up so form so the app form and what we're gonna do here is we're gonna say let me just pull up my coat a blue CSS and here we have so the one that we're interested in playing here is literally we're gonna add these rules so we're gonna say padding we're gonna add a padding of 20 to make it sort of more padded around so it's got a little bit more space display flex so what is this app form so our form is going to up to jail like what specifically is it is that this thing is they're gonna be which thing is it gonna be but it's gonna be the entire message send the best thing right over here that's how we're trying to style right now right exactly yeah got it okay yeah what we want to do now is we actually want to have it so that we have one second form quad is this one thank you leha appreciate you so now what we want to do is we want to have this form so I'm just trying to find this what's your bad form yeah so what we'll do now is actually is just to get rid let's make this very simple so let's have it so that we have position fixed and what position fixed is gonna do is it's gonna fix it to the screen regardless of how you scroll right yeah and we're gonna give it a bottom so we're saying anchor it to the bottom of the screen so anchor it meaning like move it from here all of it at the bottom which so you guys saw it move so that's what this bottom thing does and then what fix does is so even when I scroll it will stay here so just for example I'm scrolling and you can see that enter a message kind of just stays there I mean it's not usable right now but even if I move it yeah still there cool so notice how it's behind the message oh by the way that is pretty awesome Isaiah earlier asked like have you anybody on this YouTube feed built any projects or done anything and then I think Sam who's in the profit with JavaScript community along with Amana said yeah man me Lafe and Amana and many more in the PWG course and our building amazing stuff and it seems like now what's awesome is like we're gonna be seeing Isaiah in the course he says I think I'm gonna go sign up right now so awesome Isaiah you have no risk and we're gonna be seeing you this week on the life calls that's amazing nice yeah perfect I love it when people sign up on these goes there yeah so let's now check yeah so we've attached it to the bomb but you can see that it gets stuck behind right so we're gonna use something called Zed index and we're gonna say is that index of one so as long as it's over zero it kind of sets a precedent to say this is more important than any element without a Zed index so now if I say this can you see now it's come to the front ah nice okay so that's cool so basically this is giving it a priority because so by default what's Z index of everything is at zero yeah so everything nice so everything is zero but like because you give it a 1 if you give it a 1 or a hundred it would still look the same because just because it has a higher priority right yeah nice okay love that so now it's popping up and I can actually see it and I can actually type and say so cool so it's already somewhat working yeah sameen just asked how he can get the cost so there's a link in the description it's in the description my cousin where yeah the link is in the description below guys so if you're watching this on YouTube or Facebook whatever like it's gonna be in the description just go to that link click it and then it's gonna take you directly to the course yeah and most what language you're using right now we're coding in JavaScript yes yeah so yeah so right now it's really tightly attached to the bottom so rather than anchoring it to a 0 I'm gonna say 20 pixels up from the bottom so it's gonna slightly push you up nice I just saw like it added that little like pushed it up just a little bit when you did this a little bit up and then what we're gonna say is add another background color so now because now I see that little gray nice exactly and what we can do here is we can even say I think we can do it two ways we can say display flex so I'll show you something now so if we say display flex it's shirred so no we won't do that we'll say with a hundred percent so say with 100 percent and what this would do is it should use up the full width of the page you see that let me see that yep I see it okay so beautiful so I see this with being a hundred percent and it moved it so if I change this whit to fifty percent or something it's gonna I see okay cool awesome so you know now it's just taking over the whole screen awesome so yeah regardless of how big the screen is exactly it's kind of like a floating thing right now you know yeah and what we can do now is yes this style is responsive so take a look at this right how much I moved it and the app is still working so it is really really responsive and slick yep and in all messenger app what we had is we had a had like a floating little design to it and the way we achieved that was we pretty much wrapped the app form inside of a card element so material UI element but before we do that what we did what we're gonna do is we're gonna keep it quite simple we're gonna we're just gonna add a simple margin around it so it's gonna be a margin of 20 pixels and then what that's gonna do is that's gonna give us like that sort of floating effect you see yeah and we're gonna anchor it back down to zero because we've got a margin now so it should be flowing so now it's kind of floating over it as opposed to what we had previously so that's a very quick sort of like styling tip on how to do all that stuff and what we're gonna do now to sort of make it look extra sweet is the form control right now we have enter a message and then we have a bunch of stuff there but in our app what we had is we had type a message and press Enter uhhuh it was very slick right and we just wanted it had in facebook Messenger we simply had this sort of little icon instead so what we're gonna do now is we're gonna use rather than having a button let's have a look yeah yeah let me actually even show it to everybody what that icon looks like so if you guys are on Facebook you can see Sonny and I having a great conversation here I asked him if he wants to grab some food at the bar and then at the bottom here if I type you see there is this arrow that shows up so we want to use this like Facebook icon Oh actually my screen I'm blocked we're blocking it right now so I'll actually remove that and now I'll show it so you guys see that arrow so that's the arrow we actually want in our app as well yeah that's it and then that way we'll get that sort of nice Facebook app Phil right yeah so what we're gonna use is a so material UI gives us a really powerful icon library so if we go over to Google and we just type in material UI icons material material you I can't yeah you are icons and then material UI there we go and all we need to do here is firstly we need to install that package so material UI I cons so we need to go over to our terminal and we need to do an NPM write and this is the one we want right yep that's the one that we want so it's got really nice little stretch tool and what is it anything am i what it's at material so it's at material so if you just scroll up a little bit on the right you should be able to see at material and you go up you see at material you are icons down there yeah okay and what this will do guys is it will pull in all of the icons from material you I see now you don't owe me just design library you have every single icon that you could possibly want and don't before you think oh hang on it's not gonna be heavy it cleverly strips out the ones that you don't use so it's actually really efficient in how it does up but it gives you access to this entire library of icons which is gonna save you a bunch of headache when you're looking for things exactly like this yeah and where should we drop that in the import right here yep oh yeah so what we're gonna do exactly yeah so we just need to import that in and then what we're gonna do is there's another things if you go to the search for material you I and type in icon button so in the top search bar tabs so don't want that one yeah so it's actually a component so there we go and what this one does is that's how we need to write the import so we need to just pull that in so the second one so we need to pull that into our code and what this is gonna do is it allows us to wrap the icon and treat it as a button which is really nice nice now what we can do is we go down to 954 uhhuh all right so I'm just gonna I just added this massive gap where we have our button and then we have the input I'm actually gonna copy and paste like the icon bun so this is the actual icon bun yeah so the signal is for now so let's just get rid of this and all I'm gonna do is I'm gonna copy all of our attributes that we have currently and I'm just gonna paste it into that icon bun so okay we just do that and then we pretty much have a space and then all we need to do now is we actually just get rid of our button and we replace it with that one so now instead of our button which we previously had we have this icon button so nice it should be up if we refresh the page now we and the thing is guys this is really nice because we use that disabled look of look and level that might actually have to kind of either hide ourselves or should we put ourselves somewhere else like maybe top right because we're you know I'll put ourselves top right because we're hiding we're gonna hide the icon once it comes up right so now if we refresh that's a good question yeah nice uhhuh refresh okay and a piano art hey Jessica gross how you doing nice they know been a while the OG Amana I was a winner she was one of the winners from the JavaScript challenge we ran which was amazing guys and we will be running more soon as well dude I like how we were like we're not gonna you know those challenges are too exhausting let's like take a break from it but now we're actually doing way more than what we're like [ __ ] we'll just do it every day yeah this started off guys funny little story we start off with a little idea we thought let's try a live training and then we enjoyed it so much we were like you know what screw it let's do it every single day yeah yeah yeah we were actually supposed to we were gonna do it once a month you remember that like I was like oh my knee once a month Sunny's gonna do once a month and we're all gonna do once a month and then we're like what about once a week and then Sonny and I are like how about once a day let's test it let's say defense and we're actually learning a bunch like we're actually putting some pretty cool stuff yeah yeah nice so what do you obviously so now you can see right there yeah and Lucas what's awesome is we actually have the disabled functionality so as soon as you start typing notice how the bottom populates so the color comes in right yeah oh nice that is nice yeah because if I'm not typing that is disabled and then as soon as I start typing hey it becomes enabled again love that exactly so that's really nice also little talk let's just change one little thing now so we're where is that she's from profit JavaScript she says guys Tony went to sleep she goes so much information so cool Thank You avatar for being here appreciate you also love seeing students yeah so when we have our own messages in blue we don't actually want to show the name right like it's a bit weird to see like if I'm sunny and I'm writing on the messenger app I don't really want to see sunny says hey I just want to see hey oh yeah that's true because then messenger it doesn't actually say when I wanted to go grab some food at the bar with you it just yeah yeah you're right yeah exactly so now what we can do is if we go over to the message George is all right okay let's go to message is and what we're gonna do here is right now we currently have this block of this little bit of code right yeah so what we're gonna do here is we're just gonna say if the remember we have this is user which checked at the top of the bar yeah so at the top of our we had is users on line six line six okay yeah remember we had is user and that checked if the message is username so if the message username was equivalent to you who's logged in uhhuh yeah what we're gonna do now is we're gonna basically have it oh I see what you're saying so basic like basically if it's not you then show the name if it is if it is you'd and okay okay so for example I see so for example still show Bob said something and Sonny said something but for all of mine it'll just be blue and let yeah text and not it won't say cause II there okay perfect exactly that and the way we do that is we just simply this one we're saying if it's not the user so if it's not the user his log in then you show message username and then you can show something like this and the way you can actually this is called string interpolation in JavaScript so you can actually do something like this so you can do that and then you can have any string afterwards so you could say say is so like so Sonny says a certain message or if they won this and now when we save this well what this code is doing is it saying if it's not the user then show the next tag otherwise don't show it got it that's beautiful okay so let's see Oh clean but Oh Bob says okay maybe we can put up maybe just put a coal in there yeah yeah okay maybe you know maybe put a space or no after the colon let's see yeah oh no that's great actually it's coming out great because maybe the space you just added might put no it's looking great so here we go so if I say something hey what is up guys oh that's clean because yeah now it doesn't say cause you so that looks really nice and if somebody else is talking I can actually see what they're saying exactly nice nice okay yeah so it's very similar to the app that we built there's a few notes our differences yeah but for the purpose of everything I mean did you wanna change anything here causing okay I think this is looking pretty good in terms of changing anything I mean is this looking very very similar to what we had created before we like the app that we demoed is it is this part now pretty much the same as that one so no so we need to get the the width to be the same space the width to be the same as the sort of rectangular is inside of we need to round the board a little bit and then we need that little arrow to be on the right side so we can run through that now so what we've got here is on Abdo jeaious we've got the form control yeah whose head message so now what we want to do is if we go to app Jess uhhuh app touch yes we're gonna get rid of the input label so a little thing that pops up so it was quite it was cool to show everyone but for now what we want to do is want to keep it clean so we only want to have a placeholder which is so we get rid of the input label so now if we save them check it you can see we've actually got rid of that so it's a bit cleaner now so you just have enter a message and when you do that uhhuh so it doesn't like have that like it doesn't lift up yeah exactly so it doesn't lift up now so it's just a sleek sort of filled as well that's a good question Patrick I was asking sunny debt as well which is like shouldn't the most recent messages be at the bottom so yeah that's how Facebook is and it actually really should be like that but for that we have to add a lot of additional styling and then like change the UI for it a lot and so for simplicity and like showing a tutorial that's why we decided to go this way just because it would add probably a few more hours onto the build yeah it is much more simpler to show the build in this direction but I mean if everyone if we get enough responses we can definitely show in some other source a 100% you know 100% okay nice so now what we want to do is we've simplified that and now you can see that the form control so you see on line 52 the children of form control so you've got input and you've got I combined right now they're in a color like they're sort of stacked on top of each other and the way we get around that is we need to give the form control a class name so we give our class name and here we can say app underscore form control so I'm using them we spoke about before and one way to do is I'm gonna save that and I'm gonna go into my app dot CSS yeah and I'm gonna style that now so I'm gonna say I want the the display type to be something called flex and flex is this as a way of styling children inside of a parent component so if we go to app dot CSS so you can see I've applied display flex and then what I'm gonna do is and that truly that pushes things into a flex row so if we check out how it looks now mmhmm so if we do Kazi you know so it hasn't actually changed it and the reason being is because so actually for this cause did you mind sharing your localhost 3000 with me so if you go to the left the extension so you see on the live share extension I think oh you actually have so I should be able to access the app mmhmm nice cuz I just need I just want to open up my debugger and have a look at that as well because sometimes what happens is material UI I actually overrides a lot of rules which is why you might have seen the the exclamation mark important at certain points when I was coding earlier when we were going through some stuff yeah so let's look I'm just having a check now on my screen so I see any questions that we have did you ever get up I think you know so you know so that's a look next Direction column yeah so exactly so now I want you to cut the ears if you rightclick it's actually a really good demonstration of how the rules get over apply like over and sorry so and if you inspect that the enter a message so you might need to just zoom out a little bit for this one yeah inside the terminals if you hover over that one and then you do it yeah trying to break this down okay so what do you already do yeah so if you click on the inspector so the little inspect thing uhhuh yep click on the input so enter a message yeah and if you just throw up a level so up up up an element yeah and go up again mmmhmm and you see that one that one the right there so app form control so you can see it applied the class that we wanted yeah right but what happened is if you click that now yep so click that and then if you you need to drag up the the thing now so you can even drag up most of this yep so there you go so you see material UI form control route right so that's all the rules of material you I have added but notice how is overwritten r1y add like literally just freaking over it over wrote it yeah just over it because material UI takes precedence when you use it should be right important there and then I'll like move it here yeah so ideally given more time you can use something called material you are theming but in this case for the further sort of if we just want to overwrite it then what we do is I've just added it now so I've added important and now this should override those rules and otech president looks like it did yeah like it actually went from being this this is actually pretty cool it's my first time seeing this overriding clearly like this yeah so that's the first step right and then the second step that we want to do is notice how it has flex direction column in material UI so by the phone typically when you apply flex rules your Direction is row yeah we want we want to go back to a row because we want that the the little arrow icon to be a role as opposed to what it was before so now what we do is i'm going to change up my purse and as what's making a bit clearer so if we refresh now mmhmm so i'm sorry we need to do important as well but i think yeah so there we go and now you can see we've already got it looking somewhat right okay it's almost there but it's not it's not it's not perfect yeah most yeah the experience is becoming actually really nice yes so it's time to it's almost there but we just need to do one more thing now okay and the way we do that what are we trying to do though visually so visually now you see how we have enter a message yeah you have that icon right yeah now what we need to do is play with a flex rule and it's literally called flex but what do we want it to do like do we want this symbol to go to the right like what are we trying to actually do because we're so what we're trying to do now is we're trying to allow the enter a message box to take up as much room as it once uhhuh and push that other icon all the way to the right god I don't want to tell it we don't want to tell it do it by 30 pixels or 40 pixels we want it to figure that out on its own got it all right yeah that way it's always responsive regardless of what the screen size is nice got it okay so now what we're gonna do is if we go to I think let's go to the button so fjs mmhmm and let's go to icon button goddess oh here they give it a class name so a class name and this one we're gonna say is up on the squander score it's just called an icon button and this icon button right now we're gonna go ahead and give that a style in CSS so we're gonna give it a combine and here we are inside apt CSS got it yep so here we're gonna say so for that cost we're gonna say flex zero so this might be enough for it to work but we might actually need to give the input field more precedence oh that looked like it didn't do it so yeah what we need to do now is also we go back to after Jas yeah where we have the input field we need to give that a class name so then you say class name equals app compass ponder score input yep save and go back to our CSS and here we need to say app input flex one and now what this is doing is this saying whenever you have a flex containers oh hey you know right yeah so this is a really good lesson for everyone who's new to flex boss so form control is essentially the what is wrapping the enter a message and that little icon that we had and flex by default is only gonna use up as much space as we want as it needs to and then it sort of doesn't use up the rest of the space but here what we said is we want the input field to take up as much room as it needs to you know on the icon button to only take up the minimal amount of space which is why it figured out on its own the exact amount to sort of work out and and to get itself nice and now it's responsive so if I make it big or if I make the page small it'll work yeah exactly and you get a really really nice consistent UI and everything works really sweet it's really really clean and it gives everything really nice sort of finished yeah that is awesome love that okay okay and also right that's actually a good point so I didn't what happened there is I skipped the name prompt right and it says no so what we're gonna do is we're gonna do one last thing right now we're if and this is actually a common use case whenever you have in no sort of scenario we don't want it to say no we wanted to say something like unknown user I see yep cuz right now it's saying right now it's saying null and we want that to say unknown user right that's all right here that got it okay so the way we do that is we say so here where we have message username right we can add something called a pipe so we pipe it and we say so if it doesn't exist you can actually just use something like this and you can say unknown user nice okay clean easy but and that means that if it's if it's no value we'll go to that one okay and if i refresh and let's say I have no value and I'm just testing this out hello and then I refresh again and now this time I'm a month it should show unknown user to my last messages cuz I didn't set up a name exactly which is really nice right yeah this is awesome nice that's what a moneth actually said yeah we there's a few subtle differences like the typography at the top we have hello clever program that something small that we could implement if you want or it's up to you now what we can do I think let's deploy this cuz this is actually a great experience and I think everybody out here would agree that this is awesome and I think at this point let's just figure out how to deploy it online so now we can actually use it online awesome so this is the really cool part right so what we need to do now is head over to your terminal mmhmm so we need to head up the terminal and we just need to do so for many people that wouldn't have actually set this up before they wouldn't have firebase installed so you'd have to do a global install on firebase tools so I think it's NPM install firebase and then I think it's tools right oh it's like firebase tools so I think it's all one word so firebase tools it's that right there you would have to do that line right there that we just showed you if you don't have firebase installed already yeah so this is gonna install it across every single project on your computer so it means whenever you use firebase CLI you have access to it so you need to do that before we run what we're gonna do now so the next step is you need to do firebase in it right and this will bring up a really beautiful UI and then we need to do here is use the arrow keys to go down to hosting enter and use an existing project and here we just need to find the project that we create so facebook Messenger clone and here is where you need to be careful guys so the first one you need to write build build yeah this is important guys yeah you need to but now let's actually show them yeah so what's gonna happen is right now you guys see this app facebook Messenger clone inside of it you don't see build anywhere yet but once I write this build right there there's actually gonna create a separate folder probably right around here called build and that's what it's gonna store and then we're gonna actually push that and deploy that exactly so build configure as a single page up yes so that's another important one you can't do it by default so make sure you write that why and hit enter yeah exactly build right over here actually and if I look inside of it its we haven't built it yet but once I build it it's gonna have all the stuff inside of this yeah so the first thing we need to do and this is you need to do this before you deploy so a lot of people actually deploy their app and then they're wondering why they get the firebase page that says hey like thank you for pushing something's firebase but nothing actually comes up you need to run NPM run build so let's go ahead and run that now and guys what this does is it strips out all of the sort of developer tools and everything that you don't need in the production environment it so it creates an optimized production but it Chuck's it all inside build now we never actually have to touch that folder it's MPM is gonna do all of that for us but we can't delete that it's something which is very important because that's what's actually get served run real one quick thing guys just would love a just need to ask you for a favor and this would be huge help if you guys did this so this tutorial is a long tutorial and I realized that the tutorials that work the best for me are the ones that actually have timestamps next to them so like specific things that happen and like what period when they happen and then for users to be able to click them in a really easy way so if you guys if any one of you guys would you know just add all the timestamps what we were doing where we would just like upload it to our description and to our comments and they would make it for everyone extremely easy to go back to this tutorial and go through it and go through whichever part they want exactly that'd be awesome I'll actually help a lot well yeah right awesome so build is done yeah so this is where the magic happens right so we're about to run one command and it's about to deploy pop the URL on the screen but before we do that cause II I think we always it's more of a party trick mouths like you know when everyone who's like to have enjoyed this or found some kind value from this too like if you're on Instagram or something like that story it yeah us when you get app launched and you stuck using the app and it's always a fun thing because we get to see you and get to interact with and when you guys take stories please take videos and tag us in their pictures look really lame so it's kind of like and like I every time I'm like I'm gonna repost your picture but like it's not fun take a story maybe even have flipping around show yourself then show us and this code that you're doing so if you even want to do that right now you can do that and my my account is clever cause II and sunny is one more yeah there you go awful username you got which you gotta change at some point for s's yeah but but yeah guys so take the story and then add us on Instagram and we will repost your story and we want to do this every single day so that would be great I mean we could even start some kind of hashtag like hashtag clever programmer just keep it simple yeah but just tag us in the meantime we'll repost your story and respond to you exactly so moment of truth now let's deploy the app and then we'll share the link and then everyone can jump on and see all of this realtime stuff happening nice Serena just said great work just signed up for your J's course awesome so glad to have you nice that's amazing yeah okay so what are we doing now sunny so we are gonna deploy so in the terminal we just need to write firebase deploy well done and now this is it guys there's no crazy stuff that's happening right now it's doing all of the work this blows my mind that this is about to be online right this second this blows my frickin mind playing that is the link that is gonna be live right now with everything that we just built and it's literally deployed and it's in it's up right now which is awesome so let's give that do you just want to drop the URL cuz it wow this is deployed and online the URL and let me see if restream maybe I could drop it in there restream chat and that okay cool dropped it into a restream chat it's literally live guys it's online sunny just says yo what is up guys awesome and they're just showing up everywhere awesome okay go this is so cool this soak yeah your name should actually be Papa react dude no yeah that would be that would be a solid you should Papa react I'll be pop up I thought that would be do that's God's good branding am I not great great point I love that point react I would do that awesome look at that we have people popping in everyone from Dubai we got someone from divine Thank You this awesome ulam they're so sick what's up dude thanks for this Joshua you got it this is awesome this is so cool so sick oh boy this is cool beginner programmer Amanat says wow Fulani says thank you gents this is awesome wow this is so cool guys we built this together this is awesome this blows my mind yeah guys this is this is the idea you know we somebody just said geez guys I love this somebody just said I haven't even gotten a chance to finish the one from the day before and you guys are already here with another banger let's go we're gonna be bringing the heat this month guys we're bringing the heat Sonny and I are just like how can we just push ourselves to the max and one of the years I came up with yeah go ahead we're just saying yeah we would we say to originally do like by twice a week and then we like screw every day it's sort of once a month is what we were gonna do yeah exactly but it's a lot of money but like to be honest guys what makes it fun is if it was just us it would be we would be bored out of our minds and we would probably not do this any more what makes it extremely fun is because you allow us to be on this platform and then you're having this conversation back and forth with us so even when I'm looking in the chat I mean like for example there was somebody named healthy and fit in the chat channel and she was putting so many comments about how she's a beginner she's learning coding in HTML and CSS and then I saw Jana helping her I saw Liv helping her I saw moneth talking to her and Sam and literally all these people who were in profit a JavaScript community just helping her and this YouTube like dad is a solid community so positive so healthy dad is amazing and so when we see that that's what makes us come alive and then actually show up all the time for you guys yeah and I think if it's one thing like the course is amazing in itself guys but the community the community is like it amazes me every day how amazing this community is the support they have for each other the sport that I think honestly like before I even get to answer somebody's question somebody from the community has already done it so like it's like a super jacked up Stack Overflow but it's literally at your fingertips we have a sac community where everyone's talking it's honestly the most friendly welcoming community and it really really does push everyone here we go I just linked the course to so you guys can actually click that link probably it's not a clickable link you can copy it and then paste it we're adding all the tracking in there too actually it's nice actually for this tracking maybe we should have you know this is coming from the what is this FB oh yeah FBI messenger clone yes all right there so yeah guys use that link if you're gonna join the program because we want to see where are you coming from and what made you join exactly yeah we have Joshua saying Thank You kasi of course price has just finished the course beautiful call it's as amazing sergeant thank you cause II love it guys thank you so much I really really appreciate all the love awesome thing is that it's sunny yeah I mean I think we're dumb dude I think that was an amazing session that went much better than I thought yeah that was mine because I yeah we thought it was gonna take forever and we were really never gonna finish on time yeah I was actually a perfectly timed session and I think everyone enjoyed that yeah and a great book end and you know or like everybody got to use it everything that's so sick that's that mehriban says well done Sonny what is that she said III dropped it on the screen dropped it on the screen by the way I found somebody on tiktok who looks a lot like Mara bond and really yeah like and I I looked at her video and then I thought that but I didn't even say it Frankie watch the video he was like without me even saying anything he's like yo she actually looks like marathon and then I showed this video to Amber Lee and never told her anything she was watching she's like is that she looks like Mara bond and I'm really yep I'll show you on tick tock with her name champagne mommy no no no no no it's on tiktok India let me see if I can actually I have her I'm following her let's see I'll pull this up that's so funny tiktok her name is uh take talk brown chick something like that and she's really good I was watching some of her content she's actually like makes really good tick tock content I think this is it yeah but her mmm one if I can pull it up oh I don't think anybody else is seeing this this is the one that's really good so let me see if I can on my ECAM have everybody actually listen to this because that would be cool sounds I have to go into sounds you guys can't you yeah if I played it right this second right you guys are actually not able to hear it until I enable the system sounds I think I think I'll be up to here if it comes true so that you know okay oh no actually you know maybe no because I'm we're doing a different cher ami yeah I'm trying to figure out how to play system sounds in the fastest way possible but having a little bit of difficulty figuring that out let's see here system audio cool and so I'll meet Sonny I'll mute you for a second okay okay oh yeah whoa you have to click the unmute button at the top I see Indian outside a gas station so now you're shaking the head tensing a brow wondering how did she figure this out oh my god those Indians they got me singing yeah now while I'm not trying to go with short a few this is just a little tool go to you and this is a message that every color paints a better view cuz there's a savage and everyone baby even you so good so good dude I was like blown away when I saw that I was like wow that is some funny yeah do you think that looks I've ever that's what I thought yeah yeah yeah I mean it's so funny did ya I mean it could be off it's like you know once you know the person more you know all their how different they are but like when you know them generically like you you haven't met them or talk to them you know there's just like oh this yeah same skin color must be the same person yeah oh [ __ ] you champagne mommy everyone can go and check if she's looked similar yeah that's so funny okay now let me see what am I actually doing because yo Sonny speak real quick you hello hello okay I just want to make sure everybody can see this where did the comments go I hit the comments okay awesome you guys can hear us normally now right thing they can even Amanat even he's like yo she really does the maramon is a lot cooler cuz marivan can actually dance you know sorry when everybody can sing but dancing is a whole nother skill she does tik toks with me and I try and keep up I just can't she's too good it's too much thank you guys so much for coming on really appreciate you guys thank you guys for making it so awesome give us some ideas for what you would want to see tomorrow but I would even recommend is like take your phone out you know an Instagram story just tag us share your story and then maybe even tell us like what challenge you want to see next because if we start hearing it from your voice and in person that is a lot more impactful than like just getting one text message you know out of the many so if we can see why you want some kind of so I'll just give you some ideas right the ecommerce project a somebody dropped in a message earlier with a good project idea and I forgot what it was but yeah but regardless of whatever your ideas are just shoot them to us what type of stuff you would want to see maybe you want to see us build a stripe would react or Instagram yeah somebody said Instagram clone so you want to see Instagram clone so whatever it is just let us know tiktok clone oh there we go that could be fine no guys will love this because I we love building these stuff so like there's no bad ideas for an app like you can just ping them our way and we can literally just start building it yeah yep michael says music somebody said instagram clone somebody said tiktok clone right the one yeah so as of now what time are gonna be the lectures when are we gonna be oh we don't even know guys like we're just kind of offthecuff getting inspired and going because we wanted to do it once a month so if you ask us on a schedule like we'll just say once a month but we're just so inspired and we love the energy so then we're just like let's go let's go like let's just do another one today so we don't know we will try to find out like if since we're gonna be doing this more regularly what I want to do is like just ahead of time put what the project is gonna be so if you guys shoot us an idea and it's overwhelming majority saying that idea then what we want to do is just you know I'll make a thumbnail put up on YouTube and then schedule a live stream and then tomorrow we can all build that app together yeah that'd be fun yep I would love to actually learn that even like Python stuff like this time was sort of me teaching Kazi react like all that going through some react stuff I've never actually coded much Python so it'll be so fun today the other way we can go to some of that stuff you know that could be fun too yeah yeah do some machine learning that's it what is a machine that name we get Jakob on we do some automation oh yeah yeah Jakob you have building frontend and all that but Python and react people are gonna go crazy with that yeah YouTube clone would be fun a YouTube clone would be extremely fun and the reason why that would be fun for me a lot of fun for me is because like I want my own website where I can like show videos you know YouTube videos and so yeah actually look personally it's exciting for me and inspiring because I would want to use that app he's actually yeah that'd be fun okay anything else funny before we sign off no I think like everyone it's just been an amazing like sort of response today it's been awesome totally to come love it I think crazy yeah awesome guys again thank you guys so much for all your love you guys are saying some amazing things like you know it's so [ __ ] response if somebody said script alert hello I'm falling you guys are just amazing build Twitter clone next so awesome guys thank you guys so much for all the love this is the app that we built as a facebook Messenger clone you can see it scales extremely well its online and no matter who's using it like instantly it's scaling right you guys all started using it all at the same time it's not bugging out everybody's has a great user experience with that said thank you guys so much for signing in today we might go live tomorrow actually we will go live tomorrow the goal is to start around 8 a.m. but what keeps happening is that we keep having lots of new ideas and so then the time keeps getting pushed more and more back and then we end up starting a lot later so tomorrow we'll try to go live between 8 a.m. to 10 a.m. somewhere around that time and really push ourselves to be more disciplined and really get around that time but yeah that's the window just be open to YouTube and subscribe to our channel and as soon as you see the notification come through just jump on it that's exactly okay awesome thank you guys love you guys really appreciate you guys hope you enjoy that peace sunny you killed it alright guys take care bye alright see you guys