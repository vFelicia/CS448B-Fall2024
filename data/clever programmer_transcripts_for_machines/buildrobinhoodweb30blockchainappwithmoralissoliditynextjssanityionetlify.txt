in this video you'll build the robinhood web 3.0 dap with nextgs and react i'm going to show you how to create your own smart contract with solidity we'll then use open zeppelin to ensure that your coins are actually compliant with erc20 standard will even build a dex or a decentralized exchange that lets you actually trade tokens within your own app you'll use hard hat to actually compile and deploy your smart contracts we'll use morales to actually authenticate every single user that signs in we'll also use morales to interact with our smart contract and morales is basically a web3 platform that lets you interface with smart contracts and things like solidity in a really easy fashion and pretty much with like one line of code you could have a bunch of your app already working with your authentication already working we'll use the context api to manage our state inside of react we'll use sanity io as our database to store our users information and transactions after they've logged in you'll be able to view and confirm any of these transactions over ether scan to find out that they are 100 real once again we'll be using the rinkybee test network which is built on the ethereum blockchain last but not least we'll then deploy this app using netlify to the interwebs meaning your friends and your buddies can go and actually go to the website blah blah dot com and actually open an interface with your own dap so if you don't know what a dap is dap stands for a decentralized app and it's another way of saying oh app but that's just web three so your very own dab deployed to netlify with all of this so i hope you're excited to get started right before we get started and start coding i just want to let you know that we're doing a collab with buildspace which is one of the best website education platforms in the world and you guys are going to be getting nft that proves you completed this project and it's going to be in collab with bill space and clever programmer it's going to look sick build space also has an incredible community of web3 developers who you can learn together with in their discord and they're very active last but not least build space is also helping new web3 developers like yourself get matched up with top tier companies like adidas or alchemy for premium high contracts and i'm talking about ten to twenty thousand dollars a month contracts and their vision is amazing i even met their ceo farza and he's just an incredible amazing human being so i'm really excited about this collab and the best part for you guys it's completely free all you have to do is just go down below click the link in the description it's gonna take you to a landing page and it's gonna ask you to connect your wallet and once you connect your wallet you're good to go and then when you do this build and you complete it that wallet will be able to verify you did it you'll get your own nft and you'll get the entire community and everything that goes with it okay so again it's completely free go ahead sign up for that right now and with that said let's just jump right into the video what is up guys welcome back to another video lance here again notice anything different i know we got the face cam today i'm not gonna waste any more of your time let's get started with the video the first thing i want you guys to do is to open up your terminal and let's create our project folder so our project folder i'm just going to write it out here let's call it robinhood clone blockchain okay cool once you make that folder cd into it by saying cd folder and if you didn't know we're gonna be making this project using next.js and to make an xjs app all you have to do is write the command and px create next app at latest make sure you put space dot because what this will do is take those starter next.js files and put it into the folder that we just created so i'm going to go ahead and hit enter putting on your computer this may take a couple of minutes to install to install all the dependencies that we need awesome so it looks like it's done installing all its dependencies and since we're here in the terminal let's set up the rest of our folders that we need so for now i want to set up our studio folder so i'm going to say make directory studio and in the studio folder this is where we're going to be setting up our database and of course we're going to be using sanity.io so make the studio folder and let's also make our smart dash contract folder if you guys watched our previous video the tinder clone we saw that in that folder we put all our solidity contracts so we're going to be doing that again today but way more solidity so if you enjoyed that stay tuned for when i code this up i'll teach you guys how to deploy those smart contracts onto the blockchain so i'm making a smart contract folder what we can do next is hop over to vs code and click open folder and make sure you open your project awesome and now by opening this folder you should see on the left hand side bar right here all the next jsf files along with the two folders that we created so next we can hop over to your browser and type this in the url i'm going to write sanity dot io slash clever programmer sanity is the database we're going to use and to get started with sanity they were very nice and gave us a couple commands on how to install it so the first thing you want to do if you don't have sanity installed is type in npm install dash g at sanity cli i already have it installed so what i'll do is i'll do the next line which is going to be this right here so opening your terminal in your vs code cd into your studio folder in your studio folder like i said this is where we're going to be setting it up so type in that command and initialize sanity by saying sanity init coupon space clever programmer by doing that you get the boosted free plan which includes all these nice stuff that sanity provided for us so thank you sandy what we're going to do is hit enter and by hitting enter it's going to recognize that you're going to make a sanity project so for the project name you can keep it the same name as our folder so i'm going to say robinhood clone blockchain awesome next is going to ask you a couple questions you're going to be saying yes to most of these so use the default data set configuration go ahead and say yes this is the project output you can go ahead and confirm and for the select project template make sure you click clean project with no predefined schemas i just want to make sure that it's clean and i can just write whatever schemas that i want to make so it's going to be resolving those dependencies which also might take a second depending on your computer all right so looks like it's done installing its dependencies and it's initialized so what you guys can do is hop over to sanity.io go ahead and log in when you log in you should be able to see the project that you just created and if you put in our coupon code you're gonna notice that it's gonna say boosted free that's how you know it has all the nice stuff so if you click on it here's all the information of that sanity project so last thing i'll do for now is i'm just going to cd back into our main folder and go ahead and type in yarn dev or npm run dev if you're using npm so i'm going to hit enter this is how we're going to run our next js app and usually it's going to be on localhost 3000. so go ahead and type that into your command line or just control click and when it's done compiling we should see our nextjs app and there we go there's our next.js app and of course we can't forget that we're going to be using morales to help build out our app first thing you want to do to start using morales is to head over to this website t dot morales.io slash clever once you're there you'll be greeted with this amazing screen go ahead and sign up to get started i'm just going to log in awesome and once you've logged in you should see a page similar to this and if you're watching this and you're not sure what morales it's actually one of the leading web development platforms that helps developers create decentralized apps really quickly and easily what does that mean if you're going to go about this like a traditional way of making a decentralized app you'll probably connect to some sort of rpc node and create infrastructure on it meaning you'd have to write your own apis you'd have to set up your own queries for the user's transactions for example and depending on how much experience you have that might take you a long time you're essentially just reinventing a wheel that's already there with morales it makes it simplifies that process and makes gives us the tools to set up all those things easily if you guys are familiar with firebase think of morass as the firebase for crypto right so how can i get started the first thing that you're going to probably want to do is create a server so to create a server there's this nice little button right here click that and depending on what whether you're coding on the mainnet or test net or a local dev chain server go ahead and click that option for this project specifically i'm going to click test net server and then here you can write out some the name of your instance i'll just call it test app for demo purposes select the region that's most relevant to you mine's new york and you're going to see a couple different chains here reason for that is because morales is actually cross chain all right a good way to explain it ivan himself said this is think of it think of morales like a window computer that you bought it runs on the windows operating system and let's say a new printer comes out you're not worried that your computer can't use that specific printer that's not compatible right no matter what pc you buy the printer will still work same thing with morales no matter what chain you're working on morales should be working that's their vision and their goal and here are the couple things they have set up right now so we're going to be using the rinkeby test net so let's click on that and there we go we have a server of that and then you'll see your server that you created right here you can click view details and any relevant information you need especially if you're going to use morales you're going to have to put like a little provider around it you'll need to pass in the server url and the app id you'll find it right here cool and speaking of the rpc nodes there's a little section right here on the sidebar that morass has called speedy nodes and depending on what network you need to connect to you can use this as the rpc url so here you go there's the one for winkerby awesome all right coming back to the servers i'm going to take a look at the server that i made previously robinhood cloned blockchain and if you click on the drop down you can click this dashboard menu and look at that right so the moment you set up your server and somebody logs in for example somebody logged into our app we're going to have the etherdress stored onto the morales database and the best part of that database is that we can use that and query it within our own app so you have access to all the users and their contract addresses right you can have access to their balance right we can use morales to authenticate a user so you can see from my project that i was building we have three users registered with it and all of this is accessible and if you're wondering how we can use it for your apps we're going to demo some other features today and morales themselves also have amazing documentation on how to do different things as well as a youtube channel that also talks about this more in depth but if you look a look at for example and an example here's how to integrate morales with metamask all i have to do is call the authenticate function and that's it that's all you have to write isn't that insane so morales also has a database that you can use and it just essentially makes the user experience and the developer experience a lot more simpler and easier so that we can just focus on making our apps the best so it sounds like moroz can do a lot but guess what it can do more you can also use cloud functions that you can set up with the server on top of that mouse also has plugins all right if you go to the plugin store morales is working with a bunch of different companies to give you developers even more tools to make your apps even more amazing for example there's this oneinch morales plugin that basically integrates the fiveslash deck dex aggregator that one inch uses to any project one cool thing i noticed here too there's also pinata ipfs enables interaction with the api from pinada so a bunch of cool things happening at morales and there's more plugins to come so that's my spiel on it let's move on to the next part in this build we'll also be deploying the app to netlify so to do that pop over to this link as well it's going to be ntl.fyi clever hit enter you're going to be sent to this page go ahead and sign up and make an account with mfi okay i already have an account so i'm just going to log in awesome and when you log in you're going to be greeted with this page and you might be asking what is netlify and if you haven't heard of it netlify is a web hosting and automation platform that accelerates development productivity or in short you can take any code that you make such as this and host it on a website that's easily shareable and anybody can see your work they make that process super simple and easy to get started deploying your app to netflix the first step you're going to have to do is make sure you take your next js app and add it to github alright once you've added it to github go over to sites and click add a new site and one of the ways netlify makes this process really easily is that if you already have your project up on github you can click import an existing project right connect it to github click your profile or organization and if i type in robin for robin hood i'll click on this all right make sure that this says yarn run build and all i have to do guys is just click deploy site and it's going to deploy your website for you and soon there's going to be a link that i can click and see the nice work that i made and every time you push to this github repo it's gonna redeploy with those updates so that's amazing let's get to coding next let's install tailwind with next.js luckily tailwind made this super nice documentation on how to get tailwind with nexjs okay so we're going to be using this as a reference but i'll be walking you guys through it as well so the first thing you want is install these three things tailwind css post css and auto prefixer so make sure you stop your terminal temporarily or open another one so you can install it so i'm just going to copy this and if you use npm type npm install and then the rest of the command but i'll be using yarn so i'm going to say yarn add okay so install those three things once that's installed go ahead initialize tailwind by saying npx tailwind init p okay and you're gonna see that it created a tailwind.config.js go ahead and click that file and what we need to copy is these two strings within this array so you can copy that and go into your right here enter paste and then save and the last thing is we need these directives to our css we can also just copy this go into your styles folder click on globals.css here you're going to see some default styling we don't really need those so i'm just going to delete that paste the directives into that file and let's hit save okay once that's done let's run our build process and load up our webpage hey there we go so it looks slightly different that's because i delete the styling but you should know that tailwind is now installed in this section i'm going to be setting up the front end of our robinhood app so what we're going to do hop over to your pages and let's start coding in our index.js you're going to notice all these default things and that's actually why we see all this welcome to next gis documentation stuff like that we can do is let's clean it up by removing everything we can also delete all these imports because i'm going to be adding maya so if you know anything about tailwind at all is that we can style our divs by writing in their class name and we can define those stylings at the top right here so what i want my first div to be we can just change this one i usually do styles dot wrapper okay and usually how it works is at the top here you can say something like cons styles equals and then if i put wrapper here you can now add css to it so that you would see that screen so if i say something like this i'm setting the width and height and adding some flex properties to it i'm not going to explain every single css i do here because then this video would be eight hours long if you do want to learn more about tailwind css go ahead and type in this tailwind cheat sheet and you can basically understand what i'm typing in each time also feel free to pause the video if i move too fast let's move on yeah so if you go to tailwind cheat sheet you should be able to understand how to do different things like for example display flex instead of if you wanted to get the flex property this is how you would write dot flex or you could just write flex let's set up our divs and components inside this wrapper div we're actually going to have a header component and i don't have any of these components set up so what i like to do is start to wireframe and plan it out in my head or write it down so for now we're going to have a header component here and since it doesn't exist leave it commented out okay in the next line we can make another div let's give that one a class name of styles dot main container okay and then within that div we're gonna make a couple more so this one's gonna be called styles.portfolio amount container this div is gonna be holding the amount of eth within it so i'm gonna say div class name and this one's going to be the portfolio amount because in robin hood you're going to see a nice portfolio and a lot of this data is going to be static all right the main point of this functionality is to showcase the trading aspect so that one's going to be static next thing we're going to do is class name your portfolio percent so i'm going to say styles.port folio percent and again start a hard coded value of zero zero zero zero eight and you can do plus here a lot of this styling is based off the actual robin hood so it's gonna look just like that app okay and then underneath that i'm making a span and this band is gonna have a class name as well of styles.past and then you can put past hours and closing openings okay cool and then from here i'm just going to have a regular div no class name it's just used as a container and within that div we're just going to be we're going to make another one called classname dials.chart container so this is going to be where our chart goes okay and like i said since it's going to be where our chart goes i'm going to have another component in here which is going to be portfolio chart okay next i'm going to make another div this div is going to have a class name of buying power container so it's going to be styles dot buying power and just like the name implies you should be able to see the buying power amount so inside that div you can type in the div with the class name of buying power title so we'll say styles that buying power title and in that div you can put the text buying power set up another div this one is going to be called buying power amount so you say styles buying power and again put in this text 12 eth and then the next line outside of the buying power container i want a class name of styles this one this div is going to be called notice this div is going to have two children and we're going to call it notice container inside notice container though it's going to be notice title and within notice titles we can put send nice and in the next line it's going to have a sibling which i'll call the notice message okay and notice message what it's going to say is transfer your funds and then underneath the transfer your funds here as another sibling it's going to be the component where it's going to have a component called by tokens so we're going to put by tokens and this component it's going to have the functionality of actually buying tokens and exchanging and make sure all of these have styles on them otherwise it's gonna say it's not defined okay cool so it looks like that's fine so it's closing div closing the next thing is we're gonna have a notice component here so we can type notice so if you're noticing funny so what i'm doing here is just setting up my components so that for later i can just add that in it also helps me give an idea of what i want to put as a component in here so in this line in line 39 for me i'm going to have another div okay and this div is going to have styles dot write main and within that we're going to have another div and inside the right main div is going to have all the items so i'm going to say styles.right main item and inside the right main item is you guessed it the actual item so i'm going to say styles.ido title and the title will be crypto currencies okay and then what i want to put inside the right main item is a react icon so what we're going to do is actually install react icons so temporarily i'm going to stop right here for a second and be sure to install react icon so i'm going to say yarn add react dash icon then after that's installed we can reset our terminal say yarn div head over to the top and let's import the icons that i want to use which are just going to be these two by dots horizontal rounded and the ai outline plus and like i said the siblings to the item tile is going to be the react icon okay and then this is the closing div for the right main item okay and i'm just gonna make a comment here is this is where we want to map through our coins and when i say coins these are the coins that we currently have and i want to be able to see each asset so map through coins and for every coin make an asset component okay but that's gonna be my little note for later so i'm gonna make another comment here and we'll just have one asset to start with just to give you guys an idea of what we're doing so i'm just gonna say acid like there cool and then over here make another div give it the same class name of styles dot right main item class name item title all right you're gonna notice that's pretty much the same thing and don't forget to put a styles dot item title and the item title of this specific one is gonna be called lists okay and we're going to include that react icon that i was telling you about this one is the ai outline plus awesome so that should be it for maine let me just double check my closing divs i see the problem i actually forgot one more div guys it's actually in between the main container is all this stuff inside main container there should actually be a left one because we've been making the forgot to include this so inside here i'm going to say styles dot left main and hit enter you'll notice this closing div alright so keep track of where that is we're gonna put that somewhere else but for now just to organize ourselves highlight everything up until the notice and hit tab because this closing div should actually belong to the left main one so what i'll do is actually close it right here so now take out that closing div that i told you to keep track of and you'll see that the matching closing div for the left container the left main is right there cool so i'm going to save that and now we're actually missing a div for the main container so that's just going to go in between here so this one should line up with notice and just add another div for the main container and the main div for this one i'm gonna go right here there we go i'm also gonna indent right main to keep it organized nice there we go that's more like it so now everything's good we just have to add the left main container because we forgot to do that side once that's done let's add all the rest of the styling using tailwind and it already has the names you just have to give styling to the names for example this main container you're going to give it the css don't forget to add commas here we go awesome you can see how each time i add css this is what it's doing it's reacting to my page we're going to give the left main some flex properties with three and fourth quarters height full and give it an overflow of scroll and the portfolio mount container it's gonna look like okay and like i said feel free to pause the video if you need to get the actual typing if you want to learn more about tailwind css the best way for you to do it is to study it on the cheat sheet there's no way you can memorize every single property the only way that you can get better is by just writing your own css over so after that with that said i want to be moving a little bit faster let me get the rest of the portfolio mounts in here okay cool see this is what it does okay next the past hour tech scary of 400 the chart container is going to have this text justify content center with full height one third text white and the buying power container is actually going to have a lot of css as well which is going to look like this don't forget to include the quotes and the comma okay looks like we're getting there so that's the buying power container let's start the buying power title and the amount which is going to be simply just the text of white font the font bolder and the text to be large for the buying power amount the text is also going to be white the font will be bolder and the text is going to be extra large okay then we have the notice amount which is going to have this flex and border and the rest of the css next is the notice container with a flex of one then we have the notice title with the gray text white with the font bold so there's notice tca okay and let's do the right main next which is going to have all of this there's a css for the right main and the right main item and two more guys it's gonna be the item title and the more options and that should be all the css for the index if you're wondering why it looks like this that's because in remember in our global css we deleted all the starter files we actually have some styling that we want to include which is going to be all of this so take a moment take a look html padding zero margin zero this is the font family the main thing is the background color black and let's just hit save there it goes now it's looking a lot more like robin hood if i make this just a little bit wider there we go okay it's a start so let's build on from here all right so in this section we're going to be working on the header component if you remember anything about robinhood there's a couple things that go at the top here along with a login or logout button that you should see so to get started working on that let's remember where our header component is all right so going back into the index.js if we look scroll down with all our css and html if you look over here for me line 34 this is where our header component is going to go which makes sense it's going to go above our main container which is all of this so what we need to do is over here let's create a folder called components so not in styles in our main folder let's make a folder called component okay and inside that folder is obviously where all our components go so inside our components folder i'm gonna make a header.js cool so in that header.js let's set up our component and once you make your component we can actually import that in our index so what i'm going to do is comment this out and at the top here i'm going to put it above icons i'm going to say components and say import header from components and you should see it it's going to be somewhere up here but because the text is black it's not going to show up all right there it is if i highlight you can see the header right there awesome it's going to look a lot better when we style it so let's get working on it so head over to header.js next you want to do is import these two things right here for now right which is going to be import image from next image and the react icon that i told you to demo so hit save and let's work on some dibs so for this main div i'm just going to format it real quick and let's change the name i'm going to call this div class name and this one's going to be called container and again if we're using tailwind we have to say styles.container and then within that we're going to make another div this one's going to be class name left header so i'm gonna say styles.left okay inside is where the image goes but right now we haven't fully set that up yet there's gonna that's where the image is gonna go and you're gonna see styles not defined if you save because we haven't made their styles object after the left header we're going to make another div here and this one will be styles.wrapper a style is that search wrapper okay inside that div will be something called styles that search input container input and then within that very div i'm gonna have a react icon of ai outlines with this class name and then we'll have another one it's gonna have a sibling of styles search input wrapper all right so we have a search input container and you guessed it inside that container inside that wrapper will be the input which for now i can put a placeholder of search dot dot dot and i can just extend my code just a little bit search that and let's include a class name for him which will be styles.search input nice and you can actually make input self closing i'm going to do forward slash closing okay cool so that's it for the input wrapper all right so then here in line 19 for me i'm going to make another one this one will be styles and styles header is going to contain everything on the right side which would be like the one the text that says rewards cash i believe portfolio message and as well as the login logout button all right so we're gonna make four divs each with the class name of styles that's something what i'll do is copy that boom that's four this one's gonna be the same one they're actually all gonna be the same i should have done it that way menu item styles that menu item sells that menu item and just one more menu okay and like i mentioned before this one's gonna be rewards we got the portfolio in the house cash money just cash and then just messages oops messages okay cool and then it has one more sibling actually and like i said this is where the login log out button goes and what we'll have here is some conditional rendering all right so i'm gonna type it up and i'll explain it in a second okay so what i did i just inserted this div called another menu item and it's gonna have an on click of connect wallet obviously we don't have the function connect wallet just yet but just know that if i press login that's when we should connect our meta mask into our app all right so let me just play with that for a second hit save on we need to create our styles object so at the top here oops so at the top here in line four for me i'm just going to hit enter a few times and let's make our styles object for tailwind start off with the css for our container which is going to have a flex with screen and that's your height with a black background awesome i'm going to be moving a little quick with the css like i mentioned previously that's going to be the left header with the flex of one logo which will have object cover and a cursor pointer now let's get all the search stuff out the way and all the search stuff oops and now let's get the search stuff out of the way so if i hit paste here you can see this is all the search wrapper css that's included this is the input container you can't see it's going to have a text white item center flex 1 ml64 border gray 400 mr64 this is the hover css when i hover over it and this is the timing of that hover and give it a rounded over there cool then we have just a search icon which is pretty simple to make it gray and the wrapper also grey with this with width search input it's going to have a background that is transparent with no outline and the full width all right last thing it's going to be the right header and the menu item okay there we go and if we look it's looking a lot better and we can also see that the login is also there too okay and like i said we want to make it so that and to talk about what i was saying earlier when i press log in think about what should happen i should log in with metamask and once i do log in should it still say login no it should say log out and if it's cool we could show our information on the side just to indicate that we signed it so what i want to do there there to set it up is actually i want to make some space here just to separate it for you guys all right let's do some conditional rendering i want to have something called is authenticated right if us is authenticated is true so it is authenticated and i said if it's true then i can load all this css here which i'm going to put it like this okay then we're going to have another one is authenticated is not true right if it's a falsie value then what should we load should we load the login button or the log output that's right the log in alright so then i'm going to add the login back in and then i can move this extra one right here i'm just going to format this make it look a little bit pretty put these together save awesome and then we're going to error because there's no such thing as is authenticated so for now let's just make it static here and say conf is authenticated equals false all right and when i say it's false what should load the login because we're not logged in so if i made that bigger there we go now look what happens if i say true you'll get the formatted account it's not defined right because let's also define our formatted account for now to make it static cons formatted account and that's gonna be your meta mask all right so i'm just going to log in real quick and click copy and i can just probably put this in there and hit save and there it is it's super long because that's about how long the wallet address is when we say formatted account we're probably going to do something to give it just a little bit more of a nicer readability which is probably something similar to this and there you go so when we log in we should see the logout button and our account and if authenticated is false right we should see login and we shouldn't be able to see our information okay cool so this is stuff we need to change later so if i make a not make dynamic awesome so the only thing we're missing is we should have actually a little logo here and to do that you're gonna need some assets so the next thing we have to do is let's get our image up and running and what i'm gonna do is utilize my assets folder all right so the only thing i have in my assets folder is just this logo that i pulled from robinhood so all you need to do is just search up the robinhood logo and just insert that logo into our app so i have it in here under my assets folder and again if you want to use images in next.js you have to make sure to import image from next image right the next step would be to actually just import the logo right from that same spot so i'm going to say import logo from and then the path of your assets folder which is going to be dot assets slash logo cool so now it's imported and to use it is to comment out in this area right in line 30 for me i'm just going to say image self closing give it a source and we can give the source the same name as the import and the last thing i want to hear is they can actually define the width and height of the image inline which i'll just say 100 and also the width will be the same 100 and this also has a class name styles dot logo okay go ahead and save and then if we open our app it should look like so amazing there it is should be good to go and that's gonna be the front end for the header we're gonna be hopping back and forth between the header and the index as we go especially after we set up context so let's work on the next thing okay so now that we have that done hop over to your index.js and let's look at the next component we have to make so there is our portfolio chart the next component that we have to make is the buy tokens component so this component right here is going to be the functionality or what token i want to buy and exchange for so it's going to be the same process as we did with the last two which is to go your components folder and literally make that by tokens.js buy tokens.js set up your component hit save and now we can import set component so i'm going to uncomment and this is how you make a component so we can come to the top here be sure to organize it so i'm going to move this import here and i'm going to say import by tokens from this path okay cool all right and if i highlight this we can actually see the buy tokens right here it's not visible because the default color of this is black but once we add styling we should be able to see it here so under transfer funds we should see some options and we can decide what we want so let's get started i'm gonna mix it up this time let's actually make our styles object first so i'm gonna do styles equals like okay and we're going to have a class a div called input amount and it's just going to have this kind of styling so i'm going to make this a little bit bigger so we can see hit alt z how's that so this is the style we're going to put for input amount oops okay there you go so that's the styling for input amount you're going to include all the next thing you want to do is the form container that we're going to have the css for this is pretty simple it's just going to have a flex of item center next is going to be a diff called select which is just going to have this and lastly there's gonna be something called options which is gonna have pretty similar css as well okay now that our css is done once i set up the divs they'll already be styled so now let's set up the divs okay let me just clean up this line right here and the main div that we actually want to put is actually the main div that we want to put is going to be a form and in this form we can do a class name and this is we can call it styles.form container all right so we made that styling over here we are now using that and giving that style over to form container now we can insert a div within that form again and now after you do that we can insert a div in that form this one isn't going to have a specific div name it's going to have just straight up css from tailwind and this div will have this styling all right full width full selects column and item center next we're going to have a select here with the class name styles dot select right so that means it's going to take up all of this styling that we set up okay and we're gonna come back to select but this will be it for now so opening up select inside of it we're gonna have some options in options this is where you can decide what kinds of tokens do you want to trade and of course they're all going to have a styles that and of course they're going to have all have styles of options for the class name so depending on how many options you want you can make a bunch of these so i have about so i'm just going to make sure i'm about to make four three okay and here we can actually define our options so let's say we could have for example bitcoin let me try it again so for this part we can actually define our options i'll say btc for bitcoin i'll say for ethereum we could have some soul for solana and we can have some usdc one thing to note is that we're gonna be building this using solidity which runs on the ethereum blockchain so it's not gonna be the actual tokens but we can simulate an exchange so instead of changing these actual coins we're gonna have tokens with the same name so keep that in mind we're doing that and just to finish this up give it a value equals of the same name so these all should have value which should just be the same ptc and usd after the closing of after the closing date of select we'll have an input right here and input can actually be a selfclosing tag meaning we can just add a forward slash here but in this input i want to give it a couple things so i'm just going to give it a placeholder amount this is the amount that you want to exchange and since it's gonna have a couple of things i'm just gonna make it look nicer like this and it's gonna have a class name of styles dot sorry this is gonna have a class name styles dot input type equals text and like i said we're to be coming back to this section but that's going to be it for now after that we can just have a button here the class name styles that notice cta which we're not going to actually have anywhere but it'll make sense in a second type equals submit and eventually we want to add an on click in here all right so i'll just sign up and the idea is once we click the button we're going to mint those tokens as we send it as we send each so we're purchasing them so we don't have this mid function so we don't have this myth function just yet so i'm just going to comment it up earlier and the last thing we need to and before i continue on this all this should go inside button so let me just clean it up and inside that button after cool i'm just going to clean up like that we'll leave the on click for later actually and in this button it should just say send and all right it's not gonna and also it's gonna think these are undefined so we can actually delete these for now so i'm gonna delete the values because they don't have any meaning to them just yet so go ahead and delete those values and save and this is what you should have look at that nice little chart right here btc and what we're gonna see is the different options once we have the value but if you look for now it's like this now you can see ptc ethol and you can also input the amount that you want so at the moment there is no functionality but we'll work on it cool so for now that's the buy tokens component okay and that is the by tokens component if you notice i'm not seeing the the correct styling that's because these all need to be in wrapped in curly brackets yep so wrap them in curly brackets but also take out the quotes and they should be working just fine okay so i'm just going to clean this up i hit save now there we go that's more like it so there we have it that is the by tokens component the front end part of it that is the buy tokens component it's pretty soon we're going to be working on the functionality of all this so i can switch to eth solana usdc you can put the amount up that you want you can put the amount that you want and there you go that is the buy tokens component and there we go all right so we're almost done coding up the front end we only have a couple more components to go so going to index we're going to see that the notice.js is going to be the next component we'll make so same process go to your components folder type in notice.js set up your component next you want to import that same component at the top here so i'll say import notice from components and if you hit save you're not going to see anything but notice should be at the bottom hit save and if you want to see the notice component just uncomment and if we hit save you're going to notice the notice all right there it is all right it looks like that because there's not any styling on it so let's get started on that so i'm going to start with the styling first since there's not a lot of css so i'm just going to say con styles and the css that's going to have is going to be just this cool all right so it's going to have a notice with the css the notice container of flex 1 the title will have this grey text message will be white with the font of bold and the noted cta will also be bold with green and a cursor pointer so if i hit save it will still look like this because we don't have any of the divs the styles that we set up so i'm going to clean this up just a bit and i'll say div with the class name of you guessed it styles dot notice saving now it's going to make that box right everything we add because it has the tailwind already it'll already have the styling when you see it okay so within that then we have the div with the class name with the class name of styles.notice container and inside of that one this one's going to be called styles.notice title which will just say fund your account okay the sibling to that will be another one called notice styles notice message the message is gonna be this whole sentence which is just your bank account is ready fund your robinhood account to begin trading okay i'm just going to clean it up a bit there we go and then you're going to have a div here that's going to have the class name of the notice cta so it's going to say styles.notice and it's going to just say once cool there we go and one thing we could do is actually copy this css for our styles in by tokens because then you can see the nice send button over there awesome so this is looking a lot better now let's work on the last component all right you guys ready for the last component of the front end let's go so the first thing i'll do is head over to index and notice something that all the asset component is living in the right main what is the right main that's going to be all of this stuff that's just going to show let's say i have funds in bitcoin it's going to show a chart with how well bitcoin is doing okay so what does that tell me it tells me that we're also going to chart js react charts js in here as well so we don't have this component so let's comment it out create the component so assets dot js so save once we comment it out we can import it import assets from here and also it's assets with an s so let me fix that there we go and you can see that the assets component is taking up space here and if you remember the little note we want to map through our coins and our coins is going to be all of these guys and for every asset we have we're going to have a chart over here so we're going to start with one static one so you guys get an idea of how it's supposed to look so let's create start creating our assets component and the first thing we need to do is import that line from react.js as well as the import chart from charges auto from portfolio chart okay cool and again bringing in the styles there isn't much more css it's just going to have all of this a wrapper css like usual the name is going to be bold the chart will have a width of 36 and the height will be full a price and a percent like okay to set up the divs i'm just going to do something like this and this main div here is going to be our wrapper so let's set that up styles.wrapper inside the wrapper is our container styles.container and inside the container and inside the container it's going to be styles.name and here we want the coins so if you remember the coin is supposed to represent whether the component has btc ethol or usdc for now i'm just gonna hard code it like i said i'll just put coin symbol so we're gonna get errors because it's undefined still within the wrapper but as a sibling to the container we'll have the chart so this one's gonna have styles dot chart and in here this is where the line component and the line component is gonna work the same way as it does in portfolio so it's gonna have a data value options a width of 400 oops not a width width of 400 height of 150 there we go and one more thing this actually is supposed to have an empty div wrapped in it for some spacing just to help with the css so so it goes closing opening of the chart line closing of the chart and then the closing of that and then still in the wrapper we'll have another one this one's gonna be the price so i'm gonna say styles.price with the div with the price that we pass in with the class name of the styles that percent okay i'm just gonna clean this up one second because this div will also have some inline styling that says the color some inline styling that says that the color will change from green to this color depending on the price depending on the value of it so if that change is less than zero in the negatives it should be red and if it's not it should be good so i'm just going to say coin dot change and then at the end percent to concatenate a percent to the end of it awesome and if you hit save you're going to get an error because this doesn't have any of the coin properties passed into it another thing we need to do is set up the line data and the options just like we did with the chart in portfolio so to do that i'm going to hop all the way over here since to do that i'm going to make some space in between this two these two lines and before that we can destructure it so that when i pass down stuff it'll be easier i'll say the coin is this then the price is going to be this and then that's how we're going to use all of that all right cool so coming into line 16 for me i want to set up my line so i'm going to say const data equals an object again with the labels and the labels is actually just an array with these empty books okay the next thing is the data sets which is an array that has an object and remember this is going to control the styling of my chart so just to paste that in looks like that awesome and just making the options which is going to be exactly the same as the portfolio chart which is just options which is object plugins legend display false one thing to remember that in the data sets key there should be another key within here that's gonna have an array with the different points like this one that says 40 that's done because i've said 40 here and then the last one is done because i said 70 here so if you want to make different points in the chart you can hard code that value or we can actually give it a random number and we can control the range of that random number what i'm saying is this is going to end up being an array filled with random numbers how can we make that more dynamic you can run this function that i'm gonna set up right now called random number okay again this function does not exist yet so let's create it so i'm gonna make a function which is just gonna look something like this okay and let's set up that data array that i want to end up returning and what i could do is create a simple for loop right with our initializing with that initialize at zero and when i is less than nine keep looping and of course we're going to increment what i want to do is let's make a random number and to get a random number in javascript we can actually use math.random so this will generate a random number actually between 0 and 1. what does that mean it could be 0 0.5 0.66789 what we can do then is this times 100 right so we can get a number between 0 and 100 okay and then what i want to do from there is remember how i said we could get decimals too we can remove each decimal by just getting a math.floor so let's say the answer between 0 to 100 is going to be 7.9999 math.4 we'll just make that seven so no decimals and what we want to do is for every time in the loop we want to essentially destructure data and add that random number to it so how many numbers will we end up with is going to be determined by this condition so if it's i is less than nine this loop will run nine times and each of those nine times add a random number to the data array and once that's done looping we can return set data okay and again if i hit save we're still going to get undefined because we haven't passed down coin or price we've accepted those props we've put those props down somewhere here we never set it to assets so what i'll do is hop over to the index and let's hard code a coin and let's say this is my btc and again that doesn't exist yet so we'll make it the string and the price of this btc which is not reflective of what it is now it's just gonna 0.89 okay for example so let's hit save let's also hit save on assets and we're going to see set graph color is not defined oh that's right because we have to also make a function to set the graph depending on if it's the right one because if i look in my assets mindset graph color the background color is going to depend on the function right so we're calling random number to get that value and we're also calling the graph color just to fix that let's just make that function set graph color equals arrow function okay it's gonna work similar to before we're gonna we care about the change and if it's less than zero you want it to be this color that i have right here if it's anything else which means if it's greater than zero we wanna return this color hey so there you go there's our chart all right so if i make this a little bit bigger you can see our nice chart and this is supposed to represent bitcoin and here are the random numbers that it's generating right we have a 46 a 9 an 81 20. this is just to simulate the fluctuation the volatility of cryptocurrency right and if we had multiple assets we can make a whole bunch let me just showcase what it would look like if i map through four coins so if i do something like this there's four give it different properties just to distinguish them different prices remember what would happen if it's less than zero like we're in the negatives right let's do a whole nine for what that one's booming and there we go and there's our nice chart cool awesome so it looks like that is the front end let's move on to the next section okay we are continuing to work on our back end and let's go ahead and set up our schemas on sanity so to do that we need to head into our studio folder now and click in the folder that says schemas and click schema.js notice how this is the default schema.js which gives you some really helpful comments on what you need to do here what i'm going to do is clean this up and i'll start explaining what we need to do next cool so to clean the first game up we can get rid of all those comments all you need to know is that we need to put whatever schema we create inside this array right here and if you didn't know is a schema is just essentially how you want to structure the data you need to store in your database what does that mean going in this schema folder let's create a file and i'm going to call it user schema.js okay and this user schema.js it's gonna look similar like this as a prototype so i'll walk you guys through first thing you're gonna do is export const user schema all right this is gonna equal into an object and this object is going to represent what we want our user to look like so once you clean out all the comments your schema.js should look something like this all you need to know is that we're going to create a bunch of schema files and we're going to import them into here in this array what you need to start thinking is what kind of things do you want to store in your database so head over to schemas and create new file i want to say it's user schema dot js okay based off the name you can assume that we're going to be storing users based on this schema so what kind of fields and values should we store in the database so as i'm typing it's going to make a little bit more sense so we're going to say export const user schema awesome i'm going to say equals object and what we're going to do is put a key called name and we're just going to say users then there's something called a key for title which is going to be something similar but usually it's followed with a capital say capital letter users and the type of this is going to be a document if you guys don't know what a document is it's essentially a lightweight record with fields and values but you can look at it as an object so here are the fields and let's define the fields of all right we can define each key or each field by an object so this first one the first field that i care about for a user is going to be that user's address or his wallet address so we can say name address title wallet address and remember title should be capital and i'll always include the type so the type the data type of the address is usually going to be in a string so let's define that here okay moving on the next thing that i care about in this user is going to be its user name so for name you simply put user name with title we're going to say user space capital name and for type it's going to be string awesome okay next every time you make an exchange that's considered a transaction so if i'm logged in we want to be able to save each transaction underneath the user there should also be a reference to any of the tracks transactions that user made so what we could do here is have a field literally called transactions transactions and title is gonna be capital okay and the type of this is gonna be array so my idea here is every user is going to have an array that contains each transaction that user made so you can do a comma here and add an of which also has an array 2 type reference okay cool all right so all i'm doing here is making a user schema.js and having a reference to another file that we're going to create called transactions okay so let's go ahead and do that but before we do that don't forget to hop back over into here and import the user schema.js so we're gonna import user schema press tab and it should look something like that and don't forget we need to import it like so awesome so now it's part of our sanity database and now let's make the next one all right so once you add user schema into here let's hit save now let's move on to the next file i'm going to say new file i'm going to call this transaction schema.js okay we're going to store what we're going to set up here is how do we want to store the transactions that we make all the exchanges so similar to what we did before export constraints action schema similar to what we did before export cons transaction schema and then do something like this equals object okay then we're gonna have a name will be transactions title also transactions with a capital t oh make sure that this guy there we go and the type is also gonna be a doc then we're gonna do fields and let's define the keys of the transaction which is going to be tx hash which stands for transaction hash being string okay next is going to be the from address who are we getting the money from and the title is going to say from a wallet that type is going to be a string okay we also want to store the two address and the title is going to be to wallet address with the type of string next we'll have the amount of the transaction title what's the amount number so then we have the amount and then we also have the timestamp which is actually gonna have a type of date cool so that's everything in the transaction schema make sure you have the export cons so that we can import it in our schema.js and it's gonna look like this and you can add that to the concat like so okay and that's it for setting up the schemas what i'll do right now is make another terminal and cd into your studio let's start let's do a sanity start what sanity start does it's gonna set up sanity and you're gonna be able to see your studio on localhost 3333 and when you go over there you're gonna see the desk it's gonna ask you to log in and this is the desk where you can see if i click users we'll see the list of users at the moment there's no documents yet but if you wanted to we can actually create one and test it out that's one thing that's really nice about sanity and their studio here is very easy to use okay cool and with that sanity setup okay after we set up our schemas the next thing we have to do is create a lib folder so what i want to do is click this make sure it's not going into studio actually this should actually be at the root of your folder so i'm right over here write the word lib inside this lib folder we're going to write sanity client dot js the reason we do this is because we have to set up our sanity client here and that's going to help us communicate with our database when we make our api routes so we're going to do import sanity client from at sanity client so i'm going to say import sending client from the client and then we can just do export const client equals sanity client it's going to look like that and to set it up put inside an object and write these keys you're going to say project id with the value of your sanity project id for one second so what you want to do here is actually put in your project id so if you look in our browser click on your project this is what we need to put in here and you can simply just paste it like so but best practice is to actually put your project ids your api tokens or anything like that and a dot env file so let me take this opportunity to create that file so go to the root of your folder here we can write in our env folder we can write sanity underscore project underscore id set it equal to your project id so for me that's going to be this and underneath we also need sanity underscore token to get the api token all you need to do is click this api tab scroll down over here and click add api token and you can just do editor and you can i just usually just write token here go right whatever hit save this long string of text is what we need and you can hit paste on there hit save the reason why we put it in a dot env because if you put it into your github people won't have access to your keys and your tokens so once we have that done we can actually just do process dot env dot sanity under store project id all right make sure it's the same name of what we set up for that environment you can say the data set is production api version will be b1 and this token here is going to be api token which is also just which is simply just process that in b dot sanity underscored okay and then the the end will be false okay go ahead and hit save now we can start using this client for our api right so let's go ahead and set that up you can find the api inside the pages folder so if you look inside the pages folder you'll see this api folder and if you look in the api folder you'll see a hello.js we can actually delete the hello.js because this is just the default one from next remove that and let's make our own so clicking into the app api we can say new file and we can say this api route is going to be create user.js what this does is it's going to let us talk to sanity and help us create a user and store it on our database so the first thing you want to do in order to do that would be to import the client from our lib folder after that we can say we can make an asynchronous function after that we can make an asynchronous function and each of these will have a try catch and for the catch all you have to do is res.stat of 500 which means it's an internal server error if we're in the catch and what we want to do is send a message like so awesome so that's going to be our catch block let's start working on the try block which is going to say const user doc because remember we want to every time we create a user we want to post that user doc into our database so what you need to do is pass in all the correct keys so the type of document that i want to add is the users and the id of that user is we're going to get from the wallet address so we can say rec dot body dot address and the username is going to be unnamed we can later change this in our desk at localhost 3333. and the address of this is just going to be rec.body.wallet okay cool and don't forget at the very bottom here we want to export default create user and every time you make a emv file you have to also reload your project so i'm just going to cancel my terminal and start it up again awesome it's up and running we have our live folder and we started making our api routes next thing i want to do is let's set up our contacts folder after we finish setting up our sani client let's go ahead and set up our context if you're not sure what context is what we're going to do is we're going to utilize the context api from react which lets us take our functions and our variables and lets us access them anywhere into our app so the first thing i want to do is set that up is let's create a new folder at the root and we can call it content inside that context we'll make a new file and let's call that robin hood content to get started using context what we need to do is import create context okay and while we're here we're also going to import use effect and use state from react okay next thing we'll do is let's actually create our context and store that in a variable called robinhood contacts next let's set up our provider which we can do by saying export const robinhood provider and it's going to take in children like so what i want to do next is let's set up our return what this is going to return is the robinhood context dot provider okay and in between the provider it's going to take in children as well the important thing here is actually go inside the opening tag of the provider we're gonna add an attribute called value whatever we pass into value is going to be global and we can access it anywhere in our app so keep that in mind i'm gonna be slowly adding things in here as i fill out the context and when you set up the provider the next step is head over to your pages folder and then head over to underscore app.js and we need to wrap our components with that robinhood context provider so i'll do is i'll set that up right now okay now i clean it up the first step is to import that robinhood contact provider okay so once i clean it up the next step is to import the robinhood provider and you can say from our contacts okay now that it's imported wrap go ahead and wrap your components with the provider by wrapping the provider around our app it's gonna let those variables we pass into value be global so the next section we're gonna be working the login and log out functionality we're going to use for that is something called morales and if you're not sure morales is it's a web development platform think firebase for crypto it's going to allow us to manage our backend and give us tools such as user authentication which we're going to use now so to set up morales head over to your contacts folder and hop over to your browser and go to morales.io right cool and it's going to ask you to sign in if you haven't already make an account and what you want to do is create a new server go ahead and click test nets because if you didn't know we're going to be working on the test net because we need we're going to be working on a test net so that we don't have to use our real money and our real ethereum for our project so i'll go ahead and click rinkeby and you can name your server robinhood clone blockchain the region put the region you're from and again for the network you can click rinkeby i'm gonna go ahead and add instance there it is cool so mouse is really cool because you can have a number of plugins to help you with your app you can also take a look at their awesome dashboard and they support cloud functions all we're going to need for later is under view details we're going to need the url the app id and the master key keep that in mind but for now going back to our context let's go ahead and set up morales okay to set up morales we're going to need to do something we need to add morales to our app so we're going to say yard add react dash morales space all right so we're installing two things react dashboards and morales itself okay once that's done you can start your server up again and what we need to do is in order to use morales is actually import something called use morales from react and now that we imported use morales let's grab a couple of things from use morales okay so what we're going to grab from morales is is authenticated authenticate user logout morales and enable web3 okay morales has this really cool thing that will already check and listen in the backend if a wallet is connected to the app so we want to utilize that for our login and log out button so let's actually make that function and if you remember we called it connect wallet okay and in this connect wallet function we can just use a lot utilize authenticate just like that and now let's work on sign out which will just be con sign out equals arrow function and what we're going to do for sign out is just simply use the log out function for morales look at that so morales makes it super easy to authenticate a user which is super nice and that's all we have to do for that all right coming over to line 11 in my app let's set up a couple use effects because now we want to check if the user is logged in because if the user is not logged in they shouldn't be able to use our app so to check for that i want to have a user effect here in this use effect all we have to do is write an if statement and we can just is authenticate is authenticate is going to be true or false depending on if the user is logged in so if the user is authenticated or logged in we can just get their wallet address so to do that i'm going to make a variable called account equals user.get and you type in eth address and that's how we can get their wallet address we can just store it in the variable here the next step is let's make a variable called formatted account and we want to format that account if you remember what i set up in header we want to see the one x dot dot dot and then the last few letters of your wallet address because we don't want the whole thing we're gonna format that account okay then we wanna set formatted accounts right so we don't have that state yet but remember we imported use state so while we're here we can actually set up those state variables so the state variables we're gonna select for now it's just gonna be kant's current account set current account and format account and set formatted there we go now that after we slice this we can set the formatted account to the format account okay and i don't want to make these the same name that could get a little confusing so i'm going to call this one format account and that's actually what we want to pass in format okay there that's a lot cleaner and not only that we also have to set the current account all right so now after you do this the formatted account will be whatever this is and the current account will be just account which is going to have the wallet address and in the dependency module obviously is authenticated and enable web3 awesome the next thing you want to do is let's have another use effect but the purpose of this one is if that user if this is the first time that user is logging into our app we want to create that user in our sanity database so we're going to make use of that api route we set up earlier with create user so to do so let's set it up so if there is no current account or in other words if current account does not exist you can just return so we're going to make that asynchronous function like so and all it's going to do is create a variable called response and set that equal to a fetch call of our api route that we said okay and it's gonna have a method of post because we're adding a user document to our database you're gonna pass in these headers and for the body we just wanna pass in the current account as the wallet address so we can store it store the value in there cool and then lastly set up your dependency module and this user user effect should run when current account changes okay that seems pretty good for now and remember the value attributes i was telling let's pass in a couple of things to get this log up and login function working so we can type in connect our connect wallet function our sign out function number to put commas you can pass in current account is authenticated formatted account and that should be good for now okay go ahead and hit save and you're gonna notice when you've been saving that there's this little error down here one second oh whoops i'm missing something here i need to have another closing parenthesis to close off my asynchronous function there we go and then in between here it should actually be data equals await response.json because i want to make sure to turn this file into a json file there you go that looks a lot better so now we shouldn't see as quickly here and i hit save yeah as i was saying before you're going to see a little bit of an error here that's because just like the provider in our app.js we need to pass down a morales provider okay so it's going to be a similar process we just have to say import morales provider from react morale okay cool and then i'm just gonna indent this because we're gonna put provider around this whole thing copy it okay amazing and not only that we actually have to pass in a couple things in that provider and remember i told you the details about your robinhood clone we're gonna use some of that now so what we want to do is type in server url and set that equal to your url and we also want to pass down app id set that equal to your app id okay beautiful beautifully okay it's compiling and let's go no more errors that looks good to me so now that we set up our provider let's go ahead and go into our header js and i already started but let's import that use context from react i already started but you want to import use contacts from react so we can utilize the context we adjust another thing that we're going to need to import is let's specifically import robinhood context from our contacts folder and now that we pass those two things underneath the header component we can say something like const object equals muse context hook pass in robin hood context and now whatever we put from value we can actually just pull it straight from our context here so what do we want in the header we want a couple things so i'm going to start formatting it like so i'm going to say get me the connect wallet the sign out function the current account state the is authenticated and the formatted account and i didn't see the popup for current account uh probably because we're not going to use later but let's see if we're going to use that but these are the things we're probably going to use so let's take a look and these aren't these are not highlighted because we're actually already using them if you remember connect wallet comes from this on click for the logo for the login so that's why so now these functions in here already exist right even the sign out for the logout it already exists and is authenticated is not grayed out mostly because we're actually the reason it didn't give us any errors before is because when i put is authenticated i had like a static value but now we don't need that anymore so we can go ahead and delete this and if we hit save should see our app so let's see what's going on do some debugging lock screen ah i put uh s authenticated i use effect so let's go back to our context let me fix my spelling guys if you want to put just either not that compile next up what's our next there oh can't perform on unmounted component hey there we go now we're talking so now let's just see if the login and log out function works if i click login oh nice we got the meta mask in here and i made several accounts if you guys remember watching the tinder clone i made several accounts feel free to choose one i'm going to connect with account one it says sign hey okay look and there it is the log out button the login button is now log out and this is actually my wallet address let me just double check that by clicking nice so we're actually logged in the next thing i want to check is our sanity database so i'm going to go over here and let's just make sure we do sanity start oh sorry i'm going to another terminal and it's actually cd into our studio and then we can do sanity start again if you haven't done so already because if we logged in and this was my first time logging in we should be able to see a user and a user with the username unnamed okay our studio successfully compiled all we need to do is go to localhost 333 so i'm going to click that let's click on users no documents of this type okay that's interesting let's just double check our client yeah so i refresh the page and says module not found oh sanity let me just install that again and let's see what happens all right so that's done installing let's open up the localhost pic3 again let's try this again should log out i gonna make sure my metamask is not okay disconnect this to double check cool and we're not logged in i'm gonna hit refresh and let's try this again so again what should happen is if i log in it should create account insanity so i'm just checking the console anything going on nope okay we hit log in we have a notification from metamask what count i want to connect it let's do the first connect there's the signature request creating user we went to try block and then it didn't finish sending out a response so i think the issue is forgot to put something in here all right we need to write an await actually in a way client dot create if not exist because sandy actually has this really cool function that if the user doesn't exist that's how we can create one okay so let me try that again log out double check behind disconnecting our metamask wallet there you go that's why you always got to double check your code it's not connected let's hit a refresh now let's try this again login hit next connect and this should work oh and a weight isn't allowed in the nonasync function there you go so let's add the async to this and that shouldn't be adding a user let's hit log out again disconnect that meta mask double check all right guys third time's the charm we got this i made sure it's asynchronous we added the away we're using the client or using the method create if not exist passing in the user doc this should work so login connect create a user let me just check my sanity oh it's there let's go let me just open this up loading the document let's go it's there okay cool so we have the wallet address stored the username is unnamed and that's exactly what we should be seeing so now we're able to restore that so i think the only thing i'm missing is probably because i don't have a res dot send so i'm gonna do a res dot send that's that status where is that status of 201 dot send message and we can say it's a big success let's just add that line in there and that's named this user yep and this isn't going to mean much but we can just say lights amazing okay cool you say success spell that right cool and just because i'm excited i want to try out the logging and logging out one more time this time let's do account 2. so it's not connected let's make this nice and big for the demo let's see if account two can log in all right nice and refreshed hit login this time we'll connect account too and what we should see when we log in is this and since he's never logged in before this should actually create an account sign head over to here oh snap we got user two that's his wallet address unnamed because that's the default name we put and we should see that nice over here let's go so now you can log in you can send this to your friends they can log in with their metamask and it will store that user into the data and if you look in our console we used to have the api result without sending a response if we add the out of that line and now it just says create a new user and that's our console log beautiful so that is the login and logout functionality all right in this section i'm gonna be showing you guys how to create a smart contract so all we need to do is hop into your terminal and cd to that smart contract folder we just set up next you just have to write a command called npx hard hat okay and if you don't know hard hat is an ethereum development environment which lets us compile our contracts and helps us deploy them into the blockchain so all to do is write this npx hardhat and you're gonna see this little menu you can create a basic sample project okay make sure that this is the path enter add a git ignore then it's gonna tell us to can install these dependencies right and i'm gonna be using and i usually use yarn so i'm just gonna do a yarn add and we can install this save div need hard hat we need add nominee collapse waffle chai okay this and lastly we need ethics all right so i'm going to hit enter and i'm just going to give this a couple minutes and we'll cut back when it's done hey there we go all right so it looks like it's done you click onto your patchworks json you should see all of these files you should see that nomiklabs we see chai we see waffles ethers and looks like we're missing one more missing one more we need yarn hard hat of course yarn there you go but that looks a lot better you might add one more package but let's move on to the next so this is all the packages that you need for hard hat the next thing that's not included with hard hat is going to be something called open zeppelin open zeppelin is a library that we can use that helps us standardize our contracts and it's going to make it a lot easier to build them so what we need to do is add that as well we're going and it's just going to be at open zeppelin contracts so it's going to be open zeppelin two peas slash contract awesome that should be all the dependencies that we then we should be good to go all right cool so what we can do now is in your smart contracts folder go into contracts and you're going to see this greeter.sol this reader.sol means solidity and this is an example of what a standard contract might look like all right we won't need it because we're going to be building our own let's go ahead and click delete awesome and then in case you guys don't have it be sure you have an extension called solidity by one blanco which provides ethereum facility support for visual studio code so if you get this extension you hop back over to your contracts and let's click new file and here we're going to make a contract that's going to exchange our ethereum for that for example if we have something called a btc.sol that's going to represent us getting uh bitcoin tokens for our ethereum so one thing to keep in mind what we're exchanging here isn't actual bitcoin or solana we're going to be working on what's called the test network of ethereum and it's called b and it didn't know solana and bitcoin are completely different blockchains but what i want to do is simulate what an exchange would look like but all on the wrinklebee test net so i'm going to call this btc dot so and just for better naming i'm just going to make it a capital b tc there you go cool someone called this btc though and if you didn't know in solidity we always have to specify the version absolutely that we're using and we can just say solid pragma solidity and greater than 0.84 so it's compatible with this version enough essentially oops it's safe next thing i want to do is let's import our open zeppelin and we want to import the erc20 and this contracts accessible on a bulldog so right because our contracts are going to be the erc20 standard which usually has to do with money and exchanges all right so to set up a smart contract all to do is simply write contract all right contract and then the name which we put as btc and then you have to say is erc20 all right this just means that this contract is the erc20 standard that we're getting from open zeppelin if you guys are familiar with classbased components it's like uh class ferrari extends car right we're inheriting car class and building on top of it our ferrari but this time we're building a btc contract which is built on top of the erc20 standard makes sense cool so we also want to make an ownable right and we can say constructor because we can own this token and then we can just set it up like this erc20 here we can say quotes the btc and what we want it to look like when we own it is btc like this expected strength input there you go nope we don't need the space here you can just do that that's just setting up our constructor and now we can actually set up our mint function what we want to happen is call and run our contract we want to be able to mint those btc tokens to the user after sending some so we can say address two and another thing about salinity is that you need to specify the type right not like javascript or you can just write let num and it can be a string or a number right here you're saying you're specifying the parameters that this parameter is going to be an address type this amount parameter is going to be an integer that's 256 okay next thing i want to do is make this function public so that we can use it anywhere so that we can call it and then we can do underscore mint two and a month okay and another thing to note about solidity is that they should always be having semicolons when you end it it's a lot more strict notice how we have it here and here all right that's something we should do okay so after we set up our min function we also need to receive let's want to write receive actually oops receive external and payable awesome that's going to be important for later there you go once that's done this is the btc.soul which is essentially just a contract where we can exchange our eth for so whatever coins that you want to exchange or simulate the exchange of you want to create that contract so i'm just going to do the same thing making a new file again and i'm going to call this one i'm going to call this one doge coin that's seoul and essentially it's going to be the same thing so if i paste this i'm pasting the bitcoin contract the only difference that's important is that you have to change this to dogecoin and the abbreviation to the same abbreviation of what you want which is going to be cool so think about what coins do you want to simulate the exchange of or you can just copy and code along with me that's bitcoin it's dogecoin let's simulate solana and just to reiterate this is not actually solana this is going to be a token that represents solana in our exchange and again just going to paste it change the btc to solana change the abbreviation to and just now i'm thinking about it the btc that sold should actually be bitcoin it should be the name of our token okay cool just update it okay cool you can just do one more smart contract and this one will be usdc so i'll make it like this usdc that's all okay cool you can hit paste you can label this as u usdc as usdc save there you go so we have all four smart contracts these are going to represent tokens that we can exchange with our ethereum now that we're done creating our smart contracts let's go over to our scripts folder this is where we can make a script that deploys each contract onto the blockchain so we have a scam a sample script here we can go ahead and delete that we're going to make our own and in the scripts folder i'm going to click new file and i'm going to write deploy.js awesome so now i'm in the deploy.js and since i'm here we're going to need a couple things so the first thing i want to do in the deploy.js is say const ethers equals require hardhat awesome once we do const ethers require hardhat let's go ahead and set up a main function it's going to be asynchronous essentially we want to do is grab each of our smart contracts and deploy them to the blockchain so we have to grab each one so let's start with dogecoin for example so if i say doge factory factory equals and await weight ethers dot get contract factory and then you could just say the name of your contract here so for me i can say awesome so that's the name of our contract i think i really like this actually cool okay that's right constog factory equals weight ethers get contract factory doj amazing but like i said you want to do that for each one what you want to do is then say cons contract equals weight doge factory the variable we set up that's deployed okay from here we can just have a console log that says dogecoin deployed to and then we could say the address that we have which is dogecoin contract because once it gets deployed it's going to point to the address of our contract on the blockchain and we should be able to count to log back and save it because we're going to need it for later okay and like i said we want to do this for every single contract so i'm just going to repeat this process fourth time so i'm going to copy the doge factory as a example and i'm just going to change all the name so this one can be bitcoin factory bitcoin contract this one can be the solana factory alana contract the usdc factory usdc contract and you get the idea so i'm going to quickly change all the names hit save and there you go it's all set up now next thing you want to do is have this async function that it's going to wait for the main function to run and if it's successful we exit with zero and if there's an error at all with this maybe we're gonna exit with one okay that looks good so far gonna hit save so after you finish your deploy script go ahead and open your browser and what we want to do is head over to alchemy if you don't know what alchemy is it essentially gives us developers the tools to communicate to the blockchain think of it as an api to make requests for us to do things and interact with the network so i'm going to head over to alchemy right now and you need to make an account and log in and actually my past projects is over here we're going to make a new app so you can name this the same thing robinhood clone blockchain descriptions you want to make sure that we're the chain is ethereum and that the network is going to be rinkaby like i've mentioned in my past video we're going to be working on the renko beats net because otherwise we'd be using our real money our real ethereum to deploy these contracts because every time we deploy the contract there's something called gas fees which is something we have to pay to use the blockchain right so we want to be using renkobi because we can actually get fake ethereum if you want to see how to get thick ethereum be sure to watch our video on the tinder clone where i show you guys how to get fake ethereum so i'm just going to go ahead and create the app awesome and what we need is to view the right so we need the api key and the http okay so now that you know what that is we can actually go to the root of our smart contract folder now i want to make a file and we're going to have a dot env here as well and if we have an env file here we need to be able to import it to our config.js here so i'll talk about that in a moment but let's just add yarn add this dependency dotend so that we can import environment variables to that config awesome okay cool now that since now this is installed let's work on setting up our config and you're gonna see there's a bunch of starter stuff here we can actually just delete all of this keep the top two all right and here we're gonna import that alchemy alchemy api url okay so let's set up those variables by going into the dot e and b okay so your dnv file next thing you have to do is to get the keys so if you click on the right one so we did robinhood up here you're gonna see the api key the http awesome what we need is the http the alchemy api url so we're just going to write just that alchemy underscore api underscore url equals and then just paste that on there the next thing you'll need is your wallet private key so you'll say wallet underscore private key okay that equals and then to get your private key click your meta mask oops not that you want to click on these three dots click on account details and click export private key it will then ask you to put in your password awesome and you'll get this little thing right make sure you don't share your private key to anybody else because then they can steal assets from your account this is just a burner account so don't really mind much if you guys do anything with that and make sure you don't share your private key to anybody else because they can steal your assets which is why we put it in a dot env file so that when you upload this to github or anywhere else they can't see it so go back to your hardhat.config and what we can do is remember the the dotan nev thing that we installed earlier i'm not sure if we did this already but paste that so we can access the univ file go to your module that exports and then you can write a key called networks okay set that to an object here let's define all the networks we're using which is just rinkaby so i can say rinkaby url and the url is going to be alchemy right api underscore url that's the variable we set up next we're going to just do an account it's going to be an array and this is where you put your wallet so you can say wallet underscore private key okay and while we're here you just want to make sure that everything is correct so what i'm going to do is double check my contracts which is going to be btc.soul and i also took the liberty of deletingthegreeter.sol in between so once you do that i'll double check that the contract says the right name contract btc is erc20 double check with dogecoin after you double checked everything i added this dot deploy to make sure each contract gets deployed i can go down to my terminal now and run this command npx hard hat run script slash deploy.js network ring could be all right what's this going to do is it's going to use hard hat to run our deploy.js script and if we know that in turn this will run each contract and deploy it to the blockchain so i'm going to hit enter and this should work and if it takes a while that's probably because it's communicating with the blockchain because ring coupe is just a little slow when it makes transactions so opening up my metamask this is how much ease i have currently and you could probably speed this up for you guys so you don't have to wait as long as me all right we got bitcoin solana come on one more don't fail me now hey and we got dc let's go so all of our contracts actually live on the blockchain right now isn't that insane and you could tell because this is the actual contract address right we're getting the bitcoin contract address so it's important that you guys actually save all these addresses because that's what we're going to reference later with our robinhood app so what i'm going to do is remember your lip folder let's go to your lip folder this should only be sanityclient.js in there we're gonna add a new file and we're gonna call it constance.js yep sounds about right and what we wanna do now is something like this export const and then say something doge address okay we're going to save each one into a variable all right so write it like that you can go ahead and copy each one so this guy is dogecoin right because we want to reference the right contract with our app so export const bitcoin equals that and i'll just start writing everything out export solana okay cool awesome we're not done just yet the next thing i want to do is we actually need to get the abi from each contract it's going to be important for later and to find that open your smart contracts folder right go into your artifacts and go into the contracts there again in that artifacts folder and if you open up btc.soul we want to copy each.json into our cons into our lib folder so i'm just going to copy each one make sure you get the dot json and not the dot dbg dot json get the dodges okay and paste it cool so now you have those four you don't need the greeter that's all one because that was the default solidity contract from earlier that i deleted in between so what i want to do now is go to your constants we need to actually still get the abi from that dot json so we could do that by saying doge from dot forward slash dogecoin.json import bitcoin from dot forward slash btc btc.json and you get the idea so now that we imported each file let's extract the api from them so you could say export const doj abi equals doge right that's what the import dot api and that's it so do that for each one again so once you have all that while you're exporting all the variables let's move on to the next section all right in this section i'm going to be showing you guys how to do the swap token functionality and how to save our transactions onto sanity so before i do that i actually want to take a look at our code and take a step back and fix up a couple things before moving on sounds good awesome so hop over to with me to swap tokens js if you remember earlier we were using the create user route help with our login and log out functionality but if you look at this file the swap tokens.js in your api folder this controls how we can save a transaction document and store all our transactions now taking a look at it you might notice that we actually need to make this an arrow function and if you were getting any errors up into this point it's probably because we had to finish out finish out our try block you wanted to say await and then use this nifty little method that sanity has called client.create if not exists right and then you want to pass in our text document sanity is super cool because it actually has a method that checks if this document is already is being if this document is already being stored and if it's not being stored already it's just going to make it if it is it's going to ignore it so this is really nice and then we can also have a res.status right 201 send and what it's going to send is an object with a message with a message that says success and just to make sure i like to have this console log and we can just say a string something like swap tokens was a success okay so that make sure you have that it looks exactly like mine so there's no any no errors or anything like that the next thing i want to do is i want to finish out the context okay so hop over to the robin hood context with me and i'm going to make it bigger since this is the main focus at the moment and the first thing you're going to want to do is import all of our smart contracts and their abis so if you remember in your if you remember we find these in our lib folder right everything in our constants.js we're going to need all of this so make sure it says everything properly like dojbi bitcoin abi solana avi usdc and so forth because that's how you're going to be importing these make sense cool so hop over to robinhood again set it up and we can do something like dojbi we can say bitcoin abi solana abi and what else did we have usdc okay and then after that just get all the addresses as well since we're here so doge address bitcoin address barcelona and oops and usdc okay this will only work if you have it the same way you're exporting it so notice how i said bitcoin api instead of btc abia make sure it matches what you wrote in your constants folder okay then you can just say from dot dot forward slash lib slash constants cool so now that's done hop over to line 20 to 21 with me and let's add the rest of our states so what i'm going to add now is const coins coin select and of course set coin select and we can set the default to doge what this is doing it's just a state variable that i'm using to keep track of what coin am i selecting here this is represented by coin select that's why if i click something here i see set coin select is not awesome cool so that's coin select another one we're gonna have is something i'll call two coin i'm gonna make another options menu which i'll explain in a couple minutes but just know that this is also gonna keep track of a coin another coin that i'm selecting and it's gonna be empty okay next we also need to keep track of what our current balance is and we can set that equal to empty a string as well and last but not least we also want to keep track of an amount set amount equals cool when that should be all the states that we need time to work on the rest of the functions all right so that should be all the states for now next thing we should do is let's update our use effect so if you look over here one thing that should be is this should actually be and then come under the setcurrent account now let's just make a variable called current balance okay and then what we're going to do is we're actually going to use morales to get our metamasks current balance so we can do that by doing morales.web3apr.account then from there we could do a get native balance we could see the suggestion right there cool and then we can pass in there's an object it says rinkaby oh sorry it should actually be an object that says chain and then specify ring could be and then the address of that account should just be the current account which should be cool and that's how we make a call with morales to get the meta masks current balance awesome all right cool and after that on line 39 we're gonna make another variable called balance to eth because when we get our native balance with morales it's going to be in a way we also got to confront that back to ether so we can do that by saying morales dot units from way and then we can target our balance by saying current balance okay and after that we're going to make a variable called format balance and that's going to equal our balance to eth and i want to parse float it parse float and since i don't want a lot of decimal places i actually just want the first threes okay that's not too bad so to say dot two fixed okay last but not least set balance to formatted balance awesome and that should be a good use effect okay let me just double check if there's anything here i need no looks pretty good cool all right so let's set up the rest of our functions now so coming above connect wallet let's make a function called the contract address get contract address okay the get contract address is exactly what it sounds like and depending on what coin i select it should grab the corresponding abi and the current corresponding address so if i get bitcoin i should get bitcoin and again it's not going to work because we haven't set it up but like i said we can just express that using conditions so if i say if coin select equals something like btc we should get bitcoin address simple enough so what you could do is simply just copy that and restructure it cool so we should have four btc we also have dosh return doj address okay if any of these are misspelled or typed wrong it's going to cause some issues so if i say seoul say solana address and this one if i say usd usdc address all right yeah so it should return whatever we typed here notice how it's not grayed out we're actually using awesome okay after that i wanted to explain that i'm going to make another drop down here so there should be one drop down right this is going to be the coin or token that i want to change and then there's going to be a second drop down under here which is going to be the token that i just want to swap to so if i were to show that i'd go over to the buy tokens component and you see where it says select here now we can actually just copy that i copy from the opening select to the closing select and in the next line literally just paste it in there so there should be two and here you can actually erase that eth option so we have btc doge soul usdc and this one should have btc east dodge soul and usd okay so save and if you look there we go there should be two here this is gonna be the coin select it's been tracked with the coin select state and this one's gonna be tracked with two coin so what we're gonna need is a function that also gets the two address right because we have a function for get address so going back to our contacts let's make a const get to address all right just gonna do the functionality why it's gonna do the same thing all right which is going to be depending on the coin select get those addresses okay one thing we're missing is we need a const get 2 abi which is going to get the abi of the coin that i want to get from so this one okay equals arrow boom and this should be the same thing right if coincidence all right and if remember this is to get two address this should actually be two coins that's what i'm saying boom one second yeah these shouldn't say coin select it should actually say two coin right we're gonna use that state or keep track of right here and in the get to avi it should be the same thing if the two coin is any of these we should be the addresses boom oops so you can actually fix this really quickly by highlighting address pressing command d or control d and then just moving your cursor like and i can just erase all of it cool so that didn't fix all of them but we can fix i'm gonna try that again so there's a quick way to fix this what you can do is highlight address and press ctrl d or command d press backspace to erase all the addresses that you highlighted and i can just switch all of them to abi and we're good to go hey and we're actually using all the imports amazing cool yeah so these are our helper functions that we're going to need for our mint function so let's actually work on that mint function now so coming down below here i want to say const mint equals async function all right and if you confused right now the min function is going to run right when i press oops and if you're confused at all the mint function is going to run when i press send because the idea is if i want mine because the idea is if i want ethereum it's not going to work the idea is if i want to switch my doge for bitcoin i should be able to send my doge to my dogecoins to the bitcoin contract and then get mint those bitcoin send them over to me okay so in this mint function whenever we do asynchronous functions we usually have a try catch here that i'll set up now it's gonna say error boom and in the catch you can just have console error and say error dot message that's it for the catch the most important part of this is going to be that try block the most important part of this is going to be that try block so coming down to the mint function if the coin select equal to ethereum right because if you remember how our app works we are using ethereum to get these tokens right these we don't have this right at all right away we have to use ethereum and pay with the smart contract to get these tokens minted from there once i do have doge for example i can trade that for any of soul tokens all right then it becomes like a whole token exchange all right so we can do that's why i also have eth here instead of here because we can't switch swap our tokens for east at the moment okay cool so if the coin select is eth right i don't want to swap tokens i actually just want to send ethereum to that contract so i can get tokens so the first thing i'll do is have another if statement if is authenticated if not is authenticated return and that's it this is just checking if the user is not logged in we shouldn't be able to run the min function so that's the edge case there next thing we could do is having to wait for morales.enable web sure we enable web3 and then we can say the contract address right the contract address of what we want is going to be equal to whatever get contract address gets and try that again all right after you do morales.enableweb3 the next thing you want to do is create a variable here and call it contract address because in this variable it's going to be equal to get to address so depending on what's selected here it's going to get that contract so that would be saying if this was ethereum i'm going to be getting doge with that i'm going to be getting doge with that all right so that's why we're setting it equal to get to address and i probably should spell this right get contract address and after that we should also get the avi const api is going to be equal to get to api all right because again if i'm if the second option selected is doge we should get doge's contract address and doge's abi make some space here i want to make a variable called options and this is going to be important because this is what i'm going to be passing in okay so i'm going to be making a variable called option set it equal to an object because we're going to be passing in all of these things here so contract address is just going to be set to contract address and the function name is actually going to be mint okay and the abi will be the abi and the params here you can say two is going to be the current account and the amount you set it to morales units dot token you say 50. cool all right that's the param all right afterwards underneath here in line 101 after the options object we can run a function called send eth at that send and this doesn't exist yet but we're going to make it much later and that's how we're going to send money over okay next thing we want to do const transact transaction noise equals awaits morales dot execute function and this is where we packed in the options okay next we'll have our receipt here equal to weight transaction weight four oops they should say const all right and then lastly we're going to have a save transaction function and again this doesn't exist yet either but it's going to make use of our api route and you want to pass in receipt dot transaction hash the amount and the receipt to cool and that's just the if statement the next thing is if coin select isn't ethereum then we're doing a regular token to token which means we should run the swap tokens function which we have to make ourselves later on and also run the save transaction and it's pretty much the same thing you do receipt transaction hash the amount and receipt cool so notice how we have a couple of helper functions we still have to make so let's work on that now okay coming down here in between connect wallet and the min function i'm gonna make another one called const swap tokens so like i said if the coin select is not ethereum we should just do a token to token swap so what we'll have here is actually make this a synchronous and then try catch it's gonna be error console dot error error message awesome all right cool now working on the try block if again check if they're authenticated return edge case is done now we can just do first thing we want to do is no weight morales.enable web3 after you enable web3 the next thing you want to do is have another edge case here if the coin select is equal to the coin right if both drop downs equal each other like it does nothing should happen we shouldn't be able to swap tokens with the same tokens like the same thing right so here's that edge case if coin select is equal to two point you also just want to return nothing should happen all right so then the last thing that could possibly happen is if the coin select doesn't equal two coin which means we're just doing the swap so we can just say const from options right this is the similar to what we're doing with the mint function mint function we want to make an options object this one's going to be the options object for the from so we can say type erc20 is going to be morales units token the amount and 18. all right this amount is going to be the state that's passed in which is coming from whatever number we put in the amount input field okay cool then we have to put in the receiver so if i say receiver that's going to be the get contract address and the contract address gonna be get contract cool all right so then we need the cons to mint options right because you should look at it like this if i have for example solana it's going to be broken but if i'd salon it to dope i'm going to send my solana tokens to the doge contract address and get and then that contract address mint new doge tokens to send to me that's the goal so we need these two mint options where you say contract address is the get to address the they get two address function name should just be mint because we're running the mint function of that and the avi of this contract is going to be the same as the get 2 api and the params it's just going to be the 2 current account that's who we're sending these tokens to and the amount of tokens is going to be the amount we passed in so that's going to be units again that token amount cool so we got the from options and we got two mint options next we need a couple variables here which is from transaction equals await or alice.transfer and then pass in from options okay cool is that we also need to store the mint transaction and do an await execute function and pass the two mint option okay and then now we need to store the receipt so if i do the from receipt set it equal to wait from transaction and actually do a dot week on a really high level the dot weight is basically an await but for the blockchain i want to wait for it to finish and also wait for it over here okay also do the same thing for the two receipt to mint transaction and then we can also console log the from receipt and to receipt just to see it okay cool so that is the swap tokens all right there's a couple more we need to make the next helper function i want to make it's called the send also asynchronous cool so usual suspects here if not authenticated just and then const contract address equals the get to address right because when we're sending eth the only address that we care about is the address that i want to get tokens of so if i'm using eth i'm going to get dogecoins if i select doge so i need the two address here set up our options again and type is going to be native and the amount this actually controls the amount of ether sending for each token and basically each transaction every token is going to cost every time i make a transaction to mint these tokens it's just going to cost point zero one each you can change this value to whatever you want for the sake of doing this over and over again i make it really cheap so i can do multiple tests so make an amount to 0.01 eth to as the price to mint these tokens and then we could do a receiver it's just going to be the contract address okay next is a const transaction save that transaction with the morales dot transfer options now pass it in there in the transaction variable it's variable and of course we also have to run save transaction okay all right so that's the send eth function last helper function we need to make is the save transaction function yep this is going to be calling our api route so let's make it asynchronous all right we actually don't need to try catch actually what i'll do for this one is the first thing i'm going to write is an await and it should call our api route which is just api swap i believe yep you can add a comma here and pass in a couple of things all right a couple things we need to write is what's our method it should be post because i'm adding uh a transaction document to send headers all right content type this one is pretty standard content type is colon application so that's the headers then there's a body key which we can oops not that should be an object should be body then we want a json.stringify and what we want to stringify is this object so tx hash is going to be just t xhash and then from is going to be current account two is going to be two address nope and amount is going to be parse float and all right and if you remember when we call save transaction it takes in a couple parameters so we have to define those parameters so this is going to be the tx hash of the amount and who we're sending to yup and that's all the things we're going to fill out here in the box cool all right cool so after that's pretty much everything in the context that we need the next thing we have to do is make sure you go into value here and pass it in as value because that's going to make it global to the rest of our account of our app so i'm just going to say set amount mint we need the set coin select we need the point select balance swap tokens amount 2 coin and 2 coins awesome so add all those variables into value to make it global throughout our app and at this point everything should be glowing amazing cool there's not much left guys there's actually almost done with our app so let's move on to the next part all right so after you add all these variables we're actually almost done guys so if you made it this far into the video comment down below something like gorilla so if i see a gorilla in the comments i know that you guys watched the whole way through and you made it this far okay so let's see how many comments we get if i don't see any then i know you guys are not really watching this so let's crush these builds next thing is let's head over to pages and go to your index if you remember in your index we have something called the assets and i'm gonna bring up the browser page again and look something like this so this right here is our assets component right now we have about four static these actually should be a little bit more dynamic in the sense that i want to get the top 15 coins and show a little nice graph on them all right we do that by making an api call to an api call to coin ranking and we got that through rapid api so the first thing you want to do is end your terminal real quick and just do a yarn add axios to make this call okay and while that's installing head over to google and then you can do coin ranking rapid api okay it's going to be loading it's going to ask you to log in and once you log in you should be able to see your api key and we're basically going to use all this to get the coin rankings okay all right looks like axios is done okay it looks like axios is done and the next thing you want to do is go to your emp file and let's add another variable called coin ranking host set that equal to whatever is up here you don't need the quotes you can just get the coin rank and stuff so this is your host then we can do a coin underscore ranking and key set that equal to this whole key right here and again you're not going to see this key until you sign up so go ahead and do that put it into your environment variables hit save and yarn dev again in your terminal so we can load that dot env see loaded env file okay and then what you want to do next is hop over to your index.js we're going to use get static props for this so notice how in the host i'm calling the environment variables host and key and then the important part that you need to know is this return props and then destructure coins if you are familiar with destructuring props it's working the same way i can come up to home right here say coins and cons a lot of coins and you should see what we're getting back from the api call okay cool and another important note is come below here in line 12 for me and let's import axios from axios okay so i'm gonna hit save and hit refresh and we should see about 50 yep and we actually don't need this many coins that would be a lot of assets for our app i only need 15 so while we're here at the top let's do another import and import use state and while we're here let's get use context as well okay cool so once that's done we can also import our robinhood contacts so come below down here and let's set up that state this say my coins and notice how i'm not using my coins because i know i'm not going to need to update my state this is the only time i'm going to do that and the initial state actually is going to be an array which uses the spreader operator to slice it and only get the first 15. so then oops so if you do that and then on the next if i could get to the next line hold on i could do it then on the next line we can console.log my coins to see what we get back oh it should be points inspect and you can see that we actually got 15 points i'll refresh this so it looks a little bit cleaner boom 15 we can use that and that's what we want for this sidebar here so you remember how it works it's using these static assets let's map through my coins instead so my coins dot map and for every coin in my coins i want to set up a couple things so it's gonna look like this let price equals the parse float of the coin dot price it's gonna grab the price value parts float it set its price because what i can do from there is do a price.2 fixed right because it's gonna be some sort of decimal that i want to be reduced to two decimal places and then we can return in assets and the key of this we can actually use the uuid the coin will be exactly the same as and the price will be the same as the price that i just formatted so hit save bam look at that doesn't that look nice guys all right this is feeling a lot more like robin hood right we get the different kinds of graphs the red or the green depending on if it's over under amazing cool so now that we have all these assets here the next thing i'm looking at is if you look it says 23 each this is supposed to represent how much ethereum i have in my portfolio and i wish i had 23 heath but that's not the truth so let's fix that oh we can do this by coming down below remember how we imported context we can actually pull from our context and say let's get the balance from our robinhood context this is how we can do it now that we have the balance variable we can insert that wherever we need so go to where it says 23 and i'll just insert balance there and if i hit save i'm logged in bam that's how much ether i have we're good to go awesome all right and now the only thing is left to do is let's set up the swap tokens feature you ready all right guys we are at the finish line now and i'm going to head over to buy tokens.js and the very first thing i'm going to do is let's get our contacts in here so curly brackets use context and whenever we do that we also need the context that we want to use which is robinhood from here let's take the variables that we'll need which is going to be const and i'm going to take a couple on this one so we can just do equals to use context right so the ones that we're going to take from this is authenticated set amount mint set coin select coin select two coin i believe oh and of course set two coin okay might not need coin and set two coin one set yep so this makes sense coin select it's actually anytime says two coin here this actually should be two coins so this should be two coin and this should be set to yep and this one should be coin select and set coin select there should be coins and two coin now we're using everything looks good okay all right so now that we have all of that i had a bunch of like state variables or default variables here we can take that out now that we're actually importing all that stuff hit save you should get no errors because we're pulling those variables and i want to double check something in my smart contract folder in my scripts deploy make sure that all of this is correct we deployed our contract it has the right names like i'm saying bitcoin solana usdc getting the right ones usdc so on a btc and it's going to be based on what you put here construct solana construct dogecoin construct usdc and some kind of cool so that looks fine the next thing i'm worried about is probably just in our robinhood context okay all right i guess the only thing enough to do is just to test it can we switch to eth yep no errors can i switch to usdc awesome cool let's just run the function so if you look in our metamask currently this is how much ether i have and if you look at my assets we don't see any of the tokens but if you do want to see the tokens are you need to import them so let me show you how to do that so remember our constants folder in our lib folder all right this is why i told you to save all the contract addresses so open it up so let's say i pull this contract address copy import tokens if you paste that contract address notice how it already takes up the symbol and the token decimal right now awesome so if i import tokens i should have zero doge because i actually do have zero doge with this wallet next let's get our bitcoin token and i'm just gonna make this bigger it's easier so now our goal like i said we are getting tokens by sending ethereum to them first that's the first exchange and then once we get the tokens we can simulate a dex by swapping token token so let's do it this way i'm gonna do ethereum and select some solana so i'm gonna give this a try so ethereum to solana let's say 50 and here goes nothing i press send okay cool so the first issue that i have there i'm gonna hit reject because that doesn't that's that shouldn't refresh so you saw that refresh that means every time i press send or submit the form is reloading the page you never want that what we should do is go to buy tokens and i think i know what the issue is yeah so the type equals submit here you could say type equals but and that should prevent the refresh so i'm going to go to eth to solana send 50 percent there we go so no if refresh happened i can make this bigger now yeah we should have two first one if you see a mint here that's a good sign so let's hit confirm all right and then this is a contract interaction which is also a good sign and since we're talking to the blockchain it's going to take a couple minutes to get it oh 15 transactions yeah it's definitely not 15 transactions that we just did let's take a look hey look at that we got solana boys so now that we got solana we can ask ourselves what if we want to take some of our solano and exchange it for bitcoin all right so let's change it to seoul btc and let's just send something weird like 13. let's see if that's possible okay oh look at that transfer that's good 13 soul confirm and then the mint that's also good because like i said when i transfer solana i need to mint 13 bitcoin tokens okay transactions confirmed oh snap there it is there's our exchange guys look at that more transactions confirm but with that everything will work you can get your bitcoin get usdc you can get your usdc traded in for seoul and that's it that's the robin hood app okay all that's left to do now is let's deploy this on to netlify right wasn't this awesome leave a comment down below if you were able to finish it if you love learning about solidity and how to exchange tokens it's only going to get more in depth from here a clever programmer so be on the lookout for those videos let's go on to the next step and deploy this to netlify all right with that said that's the app guys that's it so now that it's done the only thing that's left to do is let's deploy our app using netlify you're not familiar netlify is an amazing website that makes it so simple to take your builds and apply and deploy it online so that you can send it to your friends show your family this really cool thing that you made so let's do that go to add new site and let's import an existing project what's going to make nullify super awesome is that we can use our github to deploy our projects alright so for me i'm going to use my clever programmers and count and i want to get that robin hood clone that we worked on yep cool let's do build command should be yarn run build and let's deploy site okay when you're deploying your site one thing i'm realizing is you actually should set up our environment variables here so when you say edit variables what you want to do is set that up so the only thing that's going to give us a problem is the api calls so to do that i'm going to do coin ranking host and for that you need to put in the host which is just gonna be this um where'd he go ah paste yep new variable coin ranking underscore key it's gonna be the key cool and let's hit save all right now that's done yeah this is what i'm gonna say the deploy block the deploy logs and just wait for this to run oh if i build complete okay i'm just going to tap publish deployed click on this website and we're in let's go what's up awesome look at this our website is up and running and let's say this link right here is the one that you can actually send and people will see this exact page so make sure you deploy your app and if you don't like the name we can actually change it that's another amazing thing about netlify i can go to site overview review go to site settings site details change site name and let's name it we can say robinhood clone blockchain and if i hit save as long as the name is not taken now when you type in this website url this is what you're gonna see you're gonna see my robinhood clone so be sure to use netlify take advantage of it and send us your links put this in your portfolio show it to your coworkers your friends and they'll be pretty impressed that you can exchange so that's going to be it for today's video be sure to keep on a lookout for our upcoming web 3 solidity tutorials and we might be doing some videos on solana as well so be on the lookout for that and i'll catch you guys in the next video peace