in this video we're going to be making Instagram web 3.0 dap on the Solana blockchain I'll be showing you guys how to create your very first Solana smart contract using a program called seahorse which lets you write Solana programs using python which is insane so if you want to learn how to make your very first Solano project using python I'll show you everything you need to know including how to use your Phantom wallet and connect it to your dap as well as connect to the blockchain using an RPC node called quick node you'll be using Soul PG to build deploy and test your program and without further Ado let's just get started okay so before I show you guys how to download all the starter files let's do a quick demo of the app as you can see this is Instagram and the difference is we can connect our Phantom wallet so go ahead and connect your Phantom wall if you already know how to do so right but I'll show you guys down the line on how to do it the next thing about this is that we can upload images with captions so what we have to do is get an image so I have this one it says a man and a woman standing in a room but this this doesn't seem like a woman but I don't want to assume so let's go ahead and copy image address and create this plus icon and you can create a post so it looks like they're working or something so let's put the grind right as you can see and paste that image URL it takes any image URL that you approve with next.js so let's hit create it's only gonna cost less than one Soul so let's hit approve and then boom created post and it's going to take a second but it should pop up somewhere and if we take a look ah there it is see 79 likes and the grind right those likes are random it's not going to generate until we actually put a real like right just for show but if I press that heart icon you can see it's gonna take us some soul to do this action and boom we have one like right we can also unlike this With This Heart icon and we receive soul back right boom and of course there's also an edit post so I'm gonna say nice all right no changes impacting the owner update post successfully and you should be able to see this post with uh nice now right and from there of course you can delete the post so all the functionality of Instagram um the basic functionality is there so there post the deleted successfully and that's it that's the demo so now let's show you how to get all right so how do you start downloading the files to make it easier guys we have our new CLI tool that gets all the starter files that you need to get started so what I'm going to do is go ahead and open up your terminal any way you want and just double check that you're in the folder that you want to put these projects on all right so from there all you have to write is npx cleverprogrammer at latest and you should get the latest version of our CLI tool once you hit enter just put in your email address all right I'm gonna put Lance Toledo gmail.com your name Lance and then you'll see all of the projects we have available to you so there's a lot of projects nowadays and you want to make sure you click Solana Instagram because that's what we're doing right cool so it's going to take a couple minutes to get all the files you need but once it's done it should be good to go all right so now that you've finished initializing your repo let's go ahead and get signed up for quick note so let's go ahead and go here all right so go ahead and click that link in description for quick note if the CLI tool didn't bring you here boom so once you're here go ahead and create your account because you can set up your endpoint for free with quick node uh if you don't know what an endpoint is it lets you have a direct connection from your app to the blockchain right if you remember the picture there's a block this will give us an endpoint to connect to it so go ahead create a free account and get started I already have an account so we're going to use this one so once you've confirmed your email you made an account you'll see uh something that says create endpoint and what I could do is let's go ahead and archive this I understand just copy that paste it boom okay I understand the consequences archive endpoint boom so it's just something like this once you confirm the email you should see something like this go ahead and create an endpoint and click on your network as you can see quick note supports multiple different chains ethereum Bitcoin we're going to be using Solana of course let's click that this is another key thing right the main net is where we use real money Real Solana right there's the test net but what we're going to be using is the devnet so let's go ahead and click devnet continue and there's a bunch of extra tools for nft fetching and cross minting but we're not doing anything like that so let's create just create an endpoint awesome so that's it guys you successfully created an endpoint all you have to do is hit copy right here click copy and let's go back to our app and if you go to utils constant.js go ahead and put our PC endpoint and paste what you copied in quotes do that right we're good to go with quick note next step if you haven't already let's sign up for our Phantom wallet if you guys didn't know this is Phantom all and this is where you're gonna hold your Solana your any nfts you have with Solana right so go ahead and create a wallet if you don't already just gonna put in my password and show you all right this is what it should look like and you can see I have 4.9 Soul how can you get it all you have to do is go to your browser and type in Solana uh not Salon sorry Phantom extension extension boom and if you go here you'll see Chrome and just click add to Chrome and once you get add to Chrome it should add it right here click on the cute little ghost and it should ask you to create a wallet and remember your mnemonic and don't share that with anybody else I have a test wallet so I don't really care but there you go all right so now that we signed up for everything we have everything we need let's go ahead and start our app let's do a yarn Dev and then from here we could go to localhost bam okay cool all right so as you can see uh you saw what it looks like in the demo but this is what we're starting with right nothing actually works if I press this like button right you get an error if I press this x button nothing happens right you just see a nice console log that says uh deleting post right even though there's no post all right connect wallet here all right we signed up for Phantom but we don't have that yet right this model to create a post hey hey huh crate doesn't create anything right so the first thing we need to do right is let's figure out how to get our Phantom wallet connection going so let's go ahead and do that all right so let's go ahead and switch to our code bring this down for a second and let's go to our app so I'm going to pages and let's go to underscore app.js you should see something like this right so here are our starter files we're already importing the hooks we're going to use uh this is for later right and now let's get our Imports in so let's get our wallet Imports so this is our wallet Imports awesome so for our wallet Imports we need to import the connection provider let's go ahead and do that so we'll do like this connection provider and we're also going to get a wallet provider right all of this comes from a Solana package so this should already be in your app if you use npx Club programmer if not make sure you do a yarn add Solana and this is wallet adapter react okay so this is it these are our two providers another thing that we're gonna need is the wallet modal provider so when I click on the Phantom button that nice model asking which wallet that I want to click uh pops up right Solana gives that to us if we say wallet uh model provider from I believe this is from at Solana as well at Solano wallet adapter react uh UI there you go cool so next let's get all the wallets that we want right so we just want Phantom wallet adapter because that's what we signed up for cool and if you have any other wallets that you prefer right you can add them here uh but other than that this is what we want to use so cool there's something weird going on all right uh this has to be from something this has to be from at Solana wallet adapter wallets right this is me pulling from that Library so I lost all the errors um is there anything else we need at the moment yes there's one more thing uh Solana also gives us the styling which is pretty nice of them so if you do import uh what was it called again I think it was at Solana it's not one of these it's like react uy slash um styles dot CSS something like that Solana adapt adapter react Dash UI styles.css so this will give us the styling of the button itself you'll see cool now this is a use state that we need there is an SSR error with next this lets us fix it so make sure you have that we'll use it in a second but what we need to do is let's take our providers and put it into our app this component represents our entire app so if I go in here press enter let's do the connection provider first connection provider uh this can well this can be closed not self closing there you go this is what I want so let's take our app and put it within there press tab to indent it and connection provider is going to take a couple things um see yes so it's going to take the RPC endpoint is equal to and RPC endpoint right this is the quick note endpoint that we got earlier so since we put it in this and we're exporting it it will show up right here okay next there's a config that we need to add to it this is where we have an object with an object and we just say commit oops commitment yep is semicol uh colon confirmed it's like our preflight checks so config boom and the next thing is the wallet provider so let's do the same thing wallet provider not the modal yet put our component in there boom press tab uh okay so what does our wallet provider need right we need to provide our provider with wallet store so let's go ahead and do that so let's just say wallets is yep equal to wallets right so this let me ask you guys a question does wallets exist right this would give us wallets is undefined right so how do we make how do we give the provider wallets we need to create that object so we can do that around here underneath this fuse effect we can say const wallets so now this exists but we have to Define it now is equal to use memo right because we only want this to run once and it takes in an anonymous function and in that we'll take an array comma let's put this right here and inside you can put all the wallets so you say new Phantom wallet adapter right that's the whole reason we have this here this will initialize a new instance of the phantomon and any wallet that you add after this you do the same thing okay but again we like using Phantom here so we're gonna keep going with that um let's see anything else is that a semicolon here for sanity yeah Okay cool so now wallets exists um another thing I would like is you there's an auto connect feature which will if you have if you're logged into your Phantom wallet you have this it'll auto connect it and recognize the wall right away uh cool and then underneath that let's get the modal now boom okay and let's add the component indent it so it looks like this right it's easy to tell who the parent is the child the parent child boom so what's with the model uh wallet model provider doesn't take any children so what we're going to do here is add some conditional rendering right I only want this component to load if mounted is true right so remember we have this to fix the SSR error to ensure that if I say if mountain is true put parentheses here then load the component awesome so let's hit save so that is the app.js so now let's move over to actually putting the wallet button alrighty so next steps right we're in the app.js right if you see this component thing in line 42 for me that is our app right so this is technically your index.js right so what you see here everything you see here is the index right for example if you look at this this is all living with an index so if I were to comment something out let's do comment out uh stories our stories component if I do that save boom we lost the stories right everything lives here right so what we need to identify now is where is this button all right let me do it again where is this wallet button right guys so if you saw that this was stories right where do you think this wallet button here right if you said it should be something like a header then you are correct right so this is stories right there's something called layout right all of this an index is living within something called layout so let's go Ctrl B and let's click on layout so if I open up this components folder you'll see a bunch of different components that makes sense what we want to focus on is this right here layout right so let's click on that and Bam look what look what we see in layout right we see the wrapper and an app container with all the children within Leia right which is why all this stuff is considered children of Leia that's what this is and if I were to comment out header all right let's hit save look what happens we lost the button so that's how we can identify that the header component is where the wallet lives so now move a little bit faster now let's go to the header.js BAM and look line 54 Phantom connect button goes here so how do we get the Phantom connect button guys well the very first thing to do is let's connect it right let's go ahead and connect our wallet by importing the wallet multi button which I did for you right here so you just say import wallet multibutton cool so uh we got the wallet multiblend let's go ahead and take it all right well you can just get rid of this guy and just say oops and just say wallet multibutton self close and save so once we do that look at that and remember autoconnect it's already connected with me so let's go ahead and disconnect right except refresh and cool so you're going to notice if I click select wallet click Phantom bam that's it our user is connected with their wallet look how easy and simple that is so if you wanted to know how to connect your Solana wallet to your app that's how you do it so now that's done uh we can go ahead and x that out for now and let's actually work on the smart contract so you're gonna go to Beta Soul PG dot IO cool all right so we're here in the browser now we are on beta.solpg.io if you didn't know this is a browser where you guys can make and build and deploy your very own Solana smart contracts and if you watch any of my previous videos this might look a little bit familiar to you what's not familiar to you though is look at the code it looks slightly different from what you're used to right um if you didn't know anchor is built on Rust rust is another lowlevel programming language which is often hard for people to get started so that's why seahorse came about so if I look create here you're going to see three Frameworks which is native rust which is Anchor a framework of rust and then we got sea horse right here python right so for my python lovers or for my beginners this might be an easy way for you to get started uh making Salon of smart contracts right python is a lot easier to read than rust it's more beginner friendly uh one thing to note it's also still in early development stages so there are some limitations right you're going to see this later on with strings so you know enough of my Exposition if you already know this feel free to skip a little bit ahead but I'm going to get started talking about uh how this works so far if you've never seen this before so if you've never seen this before feel free to skip ahead and I'll get started but for now for you guys for you beginners out there this is new right so you're gonna notice the first thing right here this is the program ID think of this as the address of where your smart contract lives on the blockchain right I can even draw it for you right here so let's say uh this little square do you guys see that this red square this is the blockchain right and you can put stuff in the blockchain all right so let's draw another rectangle so let's say I make a smart contract which is this rectangle right this this triangle right here right can live on the blockchain it can go right here so let's let's illustrate that right so you want to bring that triangle and it can live right here when you deploy it like so all right you're going to see something called deploy well it says upgrade but after you deploy you'll live on a blockchain and then we can call upon it right so that's the basics of that the very next thing that you're gonna draw your eyes to is something called accounts what the hell is accounts Lane so let me let me get a bigger picture for you guys and again if you already know everything about this you should be fine so let's go and talk about account so like I said before rectangle is the blockchain you can also have a smart contract right and this can live on the blockchain as well right but then there's something called accounts right uh the closest thing for you guys from JavaScript or maybe even python is that you can think of accounts as objects right so notice this class User it's kind of like in JavaScript like what is a class object for create a template for creating objects right so what do you think a user class is like if I ask you guys what is a user right what are some properties of a user right it might be uh his username right and maybe his ID right or maybe how many posts post count right we could use any one of these right so let's see what we used to make that user object right it only has an owner and the last post ID okay so this one doesn't have a username all right so no username it has a a owner right which is essentially its ID right owner and what else last post ID is that correct yes okay so every user is going to have the owner right an ID registered with it and the ID of its last post right so if I were to make just create the users let's say uh every circle is a user so this is a user all right who's the owner it's me I'm lent and what was my last post idea if I just created this guys three two one you said zero nice job okay so if you said zero bam we're in there right so this is a user right technically this is a user account right that's what we can call it so when you when my smart contract right will have a function right here the squiggle is a function right this function creates user accounts right so let's run this function on the chain and when that happens right we will get a user account that lives on the blockchain right and how many user accounts can I create as much as you can right uh the blockchain is not infinite right but it has a lot of space but every time you take up space on the blockchain right let's say I need another user you have to pay for that space it's taking up right so this is why every time you put something on chain like when I deploy this comes my contract or when I add or create this user account it's gonna cost me some soul right it's gonna pay you gotta pay for the space that you're taking up and then let's say I want to delete a user right once that user is deleted right it's it can just even press delete it's gone I'll get my soul refunded to me because I'm not using that space it's kind of like rent right you pay for the rent the space that you take up so that's what that's the concept that I want you guys to understand okay so that was uh programs right that was uh what's called accounts right and by programs I also mean smart contract all right cool so our program is going to create accounts right so other accounts that we need we have users what are accounts do we need for Instagram all right so try to guess it three two one posts right that's the whole point of Instagram right let's make post so you know without looking at my contract what is a post right how would you describe a post are we the user what is a post well posts can have a what an ID yes I know how about what else guys a post can have a caption and I believe I called it title but it can have a caption right what else does it have an image right what kind of if you if your Instagram post doesn't have image it's basically a tweet yeah so uh let's see I do not want to drop an image let's see what's up so we have post we have owner right so we need to know who owns the post that's what we were missing we need who owns the post we need the ID the caption the image and there was one thing we missed it was the likes right so there we go so there's also likes okay so this is an overview of what we're doing in the Solana project uh if you already understood it feel free to skip ahead and just watch the build but hopefully this helps you understand a couple Concepts and I'll be explaining them again as we go but remember our smart contract needs to be able to create a post right that will live in here this is a post account cool so again just to prove it to you this is a smart contract that I use here are our instructions our functions if I do a fetch all which is super cool with Sonic playground by the way I do fetch all this is an array of objects and every object is that Circle that I drew that user account right so this is the owner his last post ID was zero so how many posts do you have zero how about this guy last post I do one he has one post right so that's users and then if I look at posts in fact y'all you can see all the posts so I have one two three posts right you can see the title is the caption the image stores a link and then the cool part is in our vs code in our project we just have to fetch these two right so think of it like a database right there's way a lot more uses for the Solano blockchain but one easy way for new beginners to get started is think of it as a decentralized database all right so that's my little Spiel on uh Solana and this time we're going to be writing it in Python so let's get started alright so let's get started with building this smart contract from scratch so if you never use a Solano playground before go ahead and come to this tab right here you're gonna click this plus icon because you're gonna make your own project so let's give this project a new name let's call it uh IG Dash seahorse right and then you're gonna click sea horse with python in parentheses of course so click that hit create and Bam right Salon playground gives you a brand new project to get started and before we move on notice that it says Fizz Buzz right this is how to make an onchain persistent Fizz buzz but what we're going to do is we're going to build on top of it right so let's take a look at this first you can see that this is how they're importing sea horse dot Prelude import Star which basically just means uh import everything from sea horse dot Prelude all right from there we're going to move over to line 10. if you see this the clarity this is your program's public key you can think of it as the address or the ID of your whole program and with Solana smart contract also means program so you with me cool and then we have to Define our accounts so here it's defining what fizzbuzz is right but what do we want to create we want to create and I'll make this in comments we want uh user account oh wait I think it's actually hashtags now right we want user accounts user account we want a post account and what else do we need for his Instagram guys we need a likes account all right likes account or just like right so we have to Define which each of these are so we can use this as a template so that's why it's nice that they gave this to us so when making an account right you can say class and then the name of the account so which one is this it's user all right we're with you with me cool another thing that you have to do is put parentheses that it is an account all right so from there we can do a colon and here this is where you put the property so remember earlier if you watch that part the zeit board where I'm drawing what the properties of a user are what are the properties of a user and we said we want something called owner and what you saw here where did we see the word bull what does bull mean it means true or false right so this colon after this colon gets to tell our program what type it expects right this is kind of standard with rust and with Solana so uh owner is going to be a public key so you would write Pub Key like so okay so that means when I get the owner property I'm going to expect a public key and a public key is a set of letters and numbers very similar to this because this is our programs publicly so there's a lot of if you're new just try to like get unfamiliar with the terms and how we're using it and then you can dive deep into all what it all means so what else so what else we need is last post ID right because we want to keep track of how many posts does that user have when I was fetching the post earlier or the user account you saw that some posts had zero and some IDs had one because at one post so um what is the type right usually you'd probably think number right but for this you're actually going to say U 64 right which means unsigned integer and 64 bytes right so don't worry about that but just know that this is a number and this is how big the number it gets all right we can expect that that's a simple way of looking at it and that's it that's the user account all right so let's try to make a an account for post all right so pause the video Try it yourself if you think you can do it if you're not too sure you need a little bit more help do it along with me so again you say class and then the name of the account that you want and then Define that it is an account followed by this colon right here from there now we can write the properties right what are some properties of the post three two one you said owner okay yeah you definitely said owner right you didn't say anything else right because you are a genius so uh what type does the owner expect I would say Pub key right so from there what else it's gonna take an ID all right it's gonna take an ID which can also say is u64. right from there we can say likes right every post has likes and that can also be used 64. okay cool and then from there uh let's see what else there is the image of course and the image is very unique because with an image I don't expect a number I don't expect a public key what do you usually use uh when it's image yes a URL you got it but uh more specifically it's a string right so from there we can say image and title uh we could write caption right or we keep a title right you can name us whatever you want but I'll write title because that's how it's set up in the starter files so I'll say title and write Str for string okay so that's our post account now we need a liked account right so for the like account again pause the video or skip ahead if you know how to do this try to do it without me now ready let's go let's erase so you write class like I say account say account colon and then properties of a like which is just going to be the post owner which is going to be Pub Key all right post underscore ID right what's the uh the post ID of the one you're liking right so notice how this like account isn't directly tied to this post it is ref it's going to reference it so from there we can say the Liker is Pub Key cool and with that we got all the accounts up and ready to go so what we can do is we can erase fizzbuzz now all right so the next thing that we need to do is make our instructions so if you don't know what instruction is think about the concept of a function in JavaScript right if I had a function called init for Fizz buzz what do you think it does right it initializes the fizzbuzz program right so fizzbuzz.net even if you don't know exactly what that means it makes sense right it's initializing fizzbuzz right how about something easier right let's say we had a function named do fizzbuzz right what do you think that function does it's literally in the name it's gonna do Fizz but it runs the Fizz Buzz logic as you can see here so we need we need to start thinking about as developers right is what instructions do I need what instructions do I need for my app all right so that's why I opened up localhost in between there as you can see let's think about it right what are the features here right I should be able to create a post right this is how we're creating a post I should be able to click this and edit a post I should be able to like a post on like a post I should be able to click this and delete a post there's a bunch of different features and notice how all of those functionality lives on this Solana program instead of our front end like you usually do when you're making a stack a full stack app right this is so that we can practice getting used to the salon system because the way we're using it it's like a crud app this is a decentralized database right but there's more than uh than just that that you could do with Solana so let's go ahead and think about what instructions we need there's one thing I know is that we need to create a user right a user similar to the owner in this case right we need to Define who the owner is and store that information otherwise if you know ch3k made this post right I'm logged in should I be able to add to rafikaze's post should I be able to delete his own post no I shouldn't have permission to that so that's why we need to create a user right we also need to create a post right we also need to do what guys I want to be able to edit a post right edit post okay sure can we delete all right we should be able to delete post okay so edit it's like update if you think of crud it's update and lastly this is a feature it could be like post all right so we're going to use the accounts we set up and integrate them with our instructions to do what we need them to do okay cool so let's get started with the first instruction so with the first instruction how do we start writing it well the first thing that you're going to need to do is literally write at instruction right that's how you define this is a function or this is my instruction I mean cool underneath then we can say def um the function name right so what's the function's name in this case we want to create a user right so just like any function we have to put parentheses here the difference is instead of doing something like um this right like in JavaScript we will end it off with a column like so okay one thing to note is that a wallet can only initialize One account right so this wallet ch3k can't make 10 accounts right one wallet One account okay so after this colon we can now write the logic of the function right so one of the first things that you want to do is write the logic so here we can say user underscore account all right so this is just oh I think this is like a variable that I'm making or this doesn't exist anywhere else as you can see cool and uh before we even do that let's make our parameters all right what compound parameters will this take in it's going to take in a user colon and then we're going to give it a empty user property right and the owner is just going to be this signer okay so notice how we're still defining the type let's just type empty and it's taking in user and user is this guy right we're taking an empty user account right and we're going to take the owner's signature and fill that in so how can we do that well if this is a variable and this is a variable how can we use that so user account is equal to user dot init right I don't expect it to know that but this is an initialized function you saw it here with fizzbuzz Dot in it and what we want to initialize is the payer who is the owner and where are we getting owner from here so we need to Define okay so if we want to initialize account right we want to take up space on the blockchain we need to pay like I mentioned before and we have to say who's paying well who's ever owns the wallet will pay for it that's what I'm saying here that's what they're also doing here all right the next thing that you're going to notice is we need to um Define what the seeds are right the seeds helps us get that user address so let's just quickly go back to the diagram and you know seeds are a lot more complicated especially and intimidating especially for just starting out but let's go back to our blockchain example so this square is our blockchain uh this red rectangle is our smart contract right and this blue circle is our user account right cool does that make sense to everybody so let's say I want to create a new user account right using a function on my Smart contract so what we're going to do is this is the let's say this is the front end my front end oops my front end is going to call the blockchain with the endpoint RPC endpoint and it's going to get the program and it's going to run this function right here and that function is going to create a user account and that user account is also going to have its own unique public key right which is just a set of numbers and letters kind of like this ch3k right so let's say ch3k is the or just just c a d f s whatever calfs all right this is the public key to get the public key it's address we need to get seats right we need to tell what the seeds are because no matter what you put as the seeds it will always equate to an address so let's say my seeds are Lance and and one right those two this is seed one C2 it will generate will always generate this public key right cool if this not make sense to you it's similar to if you guys ever used dice bear before right this is similar not the same thing right this will generate a profile picture based on what you type here so if I say Lance this is my avatar that I get I get Lance right if I said Lance is the first part of the seed then I said Lance one two three oh Lance one two three this is the Avatar Jets and notice how it's not random I can type Lance one two three I'll still get that I can do one two four one two five one two six one two seven right there's always a predetermined public key based on the seeds that's the concept so the seeds are going to be variables right it's always going to be a string user right and uh whatever the owner is which is going to be a public key so we can write owner okay so this is the equivalent of saying user all right it's describing saying user um ch3k right that's the public key of the new user that we create right this seed will generate a new public key for the user account does that make sense cool and from there we can now uh access these properties and fill them in right because they're just defining them here we can Define who the owner is and Define what the last post ID is so if I do uh user account right this is variable it's initialized with this user account dot owner you can say it's equal to owner dot key right which will take this and put it in a format that'll understand into a public key this part should be pretty easy for you guys right um you could also say something like this print right owner dot key and say created oops created user account comma user oops user account dot key boom okay and guess what that's it what do you think this line is doing it's like console lock but for python it's just gonna print out the owner public key a little nice message that we created a user account and then the user accounts key right which should be the same as the owner okay because we defined it right here cool and that's it for create user all right so what we want to do next is erase anything we don't need because you guys know the basics now so let's get rid of the instructions as well right and what we could do is also hit build when we hit build you'll see any errors come up I'm sure there is some oh okay cool here's the first one Pub Key and not found that's because in line 29 I put a capital K it's not camel case in this case camel case in this case but it's just gonna be Pub Key so go ahead and hit build again it should be build successful cool and another thing is this wallet that you connected with right this is the playground wallet that comes with and this tells you how much Soul you have so you need to deploy the smart contract onto the plug the blockchain so uh basically this is the blockchain again all right so let's write Block Chain right and we want to deploy our smart contract s are program right to the blockchain so when we do this it's going to take some soul so that's what we want to do deploy that program onto here right we can do that from Solano playground which is sick so to do that you might need some soul guys to get you can say uh air drop or Solana air drop 2 in the command line hit enter and requesting airdrop boom so now I have it from four to six right so make sure you do that if you need some Solana but since this is not a lot just yet we can go ahead and click deploy so I'm clicking deploy so take a couple seconds or minutes depending on the size of your program but uh this shouldn't take me much longer all right so the deployment is successful and the only thing we need to do now which is cool if you go to this test tube thing Solana PG lets you test all the functions you've made so this is the one we just made create a user and it's going to create user accounts we can fetch any of them and you see there's no users but let's make a user so this will help you understand how Solano works so play close attention on this one all right so for the users right for the owner is probably the easiest place to start we know to create a user account we need to put in who the payer is which is going to be the owner and the seeds right so the owner is this part right here so who should be the owner me right who's ever signed the signing the transaction and we know that me is this address right here so copy that address and put it here for own for user this is going to generate the public key for your user account like where are we going to put this user right so where are we going to put it you need to pass in some seeds so the first seed is what user I remember dice bear we had the right user all right so let's write user and let's make sure it's a string and add another seat and what's the type of the second what's the type of owner here public key exactly so that means we need to grab our wallet address again so we can click this wallet tab right here and click copy to get the address and then go to seed to paste your public key hit generate and this 4sq is the public key of our user account generated from the C right and if all of that is correct this test should pass so let's go ahead and hit test a create a user pass so that means a function that we wrote together this one right here was able to create a user let's see if we're right fetchall bam right let's go you did it guys you made your first instruction using python right and hopefully all of this makes sense so far right you're literally writing python code on the salon of blockchain and this is brand new technology at this moment of recording this video so I hope you guys are excited as I am because there's a couple more functions we need to do but that's it we have our first user right here and just like I said the public key of this user account is 4S right and in the account itself we have the owner and the last post ID amazing all right let's do the next one so now that you guys made your first instruction I'm going to go a little bit faster and do the tests all in one go alright so if you need to pause the video at any point or go back feel free to do so but now we're gonna get moving so let's create a post how do we create a new instruction you just write at instruction okay how do we Define the instruction we say def for Define and create post all right cool parentheses here to set up the parameters and then the colon is going to Mark uh the next part of the function or the logic of the function but within the parameters what do you think we need to create a post well I know I need a post I need a user I need um the owner that would be nice I need the title the image and the post ID right here so uh the thing that we're missing with this is the types right we need to put the types of all of these things so post it should be an empty post right because when we create a post this post account that we wrote up here should be empty and I'm sorry guys let me put this down for you how's that can you see it so you can see it now a little more clear we want to create post we're getting the empty post account as the type for the user are we when we're creating posts is there going to be an empty user no we have a user now right that user that we pass in is the one creating the post the owner of it is going to be the signer the title uh this is going to be a string that we discussed before and the image is a string and the post ID is usually going to be a number okay cool now time for the logic okay so for the logic of this function we're just going to write assert here right because what we want to do is do a couple checks right we want to check that the user the owner right we can access from here a user account if we do dot owner we're going to get a public key right I know that because of the way we built this if it's equal to the owner Dot key all right if it doesn't uh this isn't true then it's probably the wrong owner right cool another thing you want to check is if the post Hoops assert if post underscore ID is equal to the user dot last underscore post underscore ID plus one comma if it doesn't equal the next post that it should right if it's still post zero and not updating to one then this is probably the incorrect post ID that we're pressing yeah cool so after those checks let's get started right so we have a bunch of variables or parameters to play with um let's go ahead and make this post account not empty so how do we make it not empty I say a variable right here post account and we can say post right how do we make uh how do we initialize the user account guys we said user dot init we can say post dot init as well and we need to Define who's paying for this space the owner is okay how about the C's though okay so for the seeds uh there's some limitations since seahorse is still new so we're going to do is get the string post uh say the owner right just like before and we're also gonna need the post ID right whatever the post ID because if the post ID is zero it'll generate something else so this is like us writing um post uh one two three is already I public key and then I'm gonna give the post ID which is zero all right if the post ID is one it's a completely different number here you see this four five six right so this is why our seeds are going to generate a unique public key right so we'll put post ID um the limitation is it'd be nice to use user.key but at the moment we're unable to do that so I can't use that so from here we need space right so we also need to it'd be nice to write how much space does this post account take up right so basically if I'm going to make a post right the Solana blockchain wants to know how much space will it'll take up and by space it means the size of the post which is gonna factor in the properties right so if I go back to this is going to take into account the space of the signer the space of the title the image the post ID right and that's what all these numbers uh that we're going to put in so usually we put an 8 here this is called the account discriminator I don't need to worry about that too much but just know that's going to be the size of everything plus eight so I'm just going to put in the numbers and you can copy it as well we could do plus 32 plus 8 plus 4 plus 128 plus four plus two fiftysix awesome so the total should add up to 440 and that's how much space this all takes up if you wanna if you're curious how much space each of these things there's some documentation on anchor that will tell you and that's where you can get these numbers cool so this is how much space it can take up to this post account and from here we can write the properties so one thing that we're going to need is the user we need to update the user account from zero to one so we have access keyword access to user from this parameter so we can say user dot last post underscore ID plus equals one this is just basic programming right here cool next thing Lance we got the post stuff so let's fill in those properties of the post so the owner is going to be what owner dot key so you're getting a nice format it's also going to have post count that title is equal to what guys the title that we pass in title and remember title is also caption I'm just using title because that's how we're pulling it on the starter code so from there we also need the image URL right which we can use image and we can also do Post account the ID is equal to the user dot last post underscore ID so notice how this will be different because it adds one to the previous so this if the last post ID was Zero now it's one now that's the post accounts ID make sense cool and after that uh we can do a nice print message which is print f post ID and we're going to do some templates here so we say post ID uh comma title colon and then we can put post Dot or post underscore account.title for the title the image can be this post underscore account Dot check it put uh the quote here okay I think I got it yep and with that that's our instruction so let's go ahead and build and see if I have any errors if I type something wrong so a tip build yes there is an error python parse error so it's confused about this assert equals right here so let's see oh it's not uh one equals it should be two equals so you should see this color let's try that again build so now it's issued with the space I'm guessing it's some sort of comma yep so 961 for me make sure you put a comma that's it build again build successful so I completed all the errors make sure you don't have any errors and type in and make sure it says build successful right here and the cool part about Solana smart contracts is that you can upgrade it I don't know if it's changed with solidity but once you deploy a smart contract you can't update it you can only create read and you can't even delete right you can't delete any programs that you upload but you can update though so you can press this upgrade button and it will redeploy it with the new instruction that we just created so now if this is successful we should be able to create posts so I'll check back in with you guys when it's done upgrading all right so the deployment is successful click on the test tube again and let's see if we can create a post so I'm gonna go ahead and go to unsplash we're not going to be able to see this post actually no we will and let's just get a nice photo from here so let's do let's do this one let's click this one copy image address and let's go in here so the title and remember this is caption is uh new me who this right so let's do the image let's paste that image URL the post ID right it should be the yeah the current post ID I passed in and post ID is user last post ID which is going to be zero for now okay so now for the accounts right for the user account we do have a user account already and we can fetch it right here so this 4S right here double click it to highlight it and hit copy and then we could paste it for the user for the owner this is my wallet so let's do my address and for the post this is the one we generate from the seeds so it's just gonna be uh the string post and then the owner or a public key and then it's going to be your address so we can copy that all right mine63 yours might be something else and there's one more it's going to take a u64 number right because that's what post ID is and I said it was Zero so let's go ahead and generate that so let's hit generate and there you go f p w is my post accounts public key if this works let's see if it does work let's hit test creating post failed to get recent block hash so just failed to fetch so oh see we're getting a connection error so let's this happens to you make sure you try testing out by doing another endpoint in the devnet so we have this genus Cisco right so now we can see there's no fetching errors of our transactions let's hit test again oh with unauthorized signer or writable account okay uh saying we don't have permission all right so here's what we'll do instead we're going to build again using the other RPC endpoint because that one is getting some issues and I'm just going to upgrade again real quick and then we'll just try the test again just to make sure uh it's not the RPC endpoint that's giving us issues that it might just be my code so let's go ahead redeploy and we'll test it again all right so let's try this again let's go ahead and create a post I said it was new me who this right uh image was this nice picture right here pretty cool paste post ID 0 post it's from seed which is post add seed Pub Key which is the owner which is me plus uh q64 which is post ID which we're passing in and it should be the same which is zero so let's go ahead and hit generate and now the user is the user that we fetch from here let's go ahead and do that paste it 4S owner is me and now let's hit test program failed to compile so that's a different issue than we were getting before all right so after some troubleshooting I realized that we forgot one more piece I forgot so we need to establish a post event right so there is accounts there is posts there is instructions and there's also events right so let's go back to right here and we can say something like uh events right cool so events are essentially the event of a new post happening right so to Define an event and again because this is new right I want to put a note here so that we can't we're not able to pass string values in events just yet right because in this current model of seahorse that I'm recording uh that's still being worked on but for now let's go ahead and say class new post event is an event or that's the type and then the owner is Pub key and the ID is u64. okay and uh when we do this we can say it's going to run an instruction called init net and it's going to recall itself the owner which will have a Pub Key and an ID of 64. okay oh it's not just 64. u64 that looks more right cool and then say self dot owner is equal to the owner and self the ID is equal to ID and that's the only thing we can do for that for now and and this should help with our error so it should trigger so I built that no issues with the event itself now let's call that event within this post right here right so underneath this print we need to emit that event new post event so how do we do that in the function well we're going to say uh new post event is equal to new post event right which is going to have all the parameters the post account dot owner and comma the post account dot ID actually cool and then we can just say new post event uh dot emit to emit that new post event so again creating the instance with these parameters and it's going to run this event which is going to run in it we after defining it here we're going to emit it so if I build there shouldn't be any errors cool unnecessary trailing semicolon uh okay so that is a warning so warning if you see anything that's a warning it's not going to break your code it's just letting you know that it's kind of redundant uh okay but you don't have to worry about it so let's go ahead and upgrade now and while it's upgrading let's see if we can create a post cool so deployment's successful um just to be safe we'll check this function and the other ones later with the front end just so we can know exactly what's going on but for now if your code looks like this create post and something like this and it amidst the post event you should be good to go okay so from there let's work on edit post alright so this is edit post or in better words update right it's part of our crud it's update post and from here we can say the instruction so how do we make an instruction instruction then we can say def update post uh and then the parameters and then colon so that's how you set up the function what kind of parameters does it take it takes to post it takes an owner uh it takes a title title now let's define all the types so post is a post account right because when you update a post you're updating the information inside a post account the owner is going to be the signer which we know and the title is going to be Str because the title is the caption that you're updating so when you update a post what are we really doing we're updating the caption or in this case the title so again there's some checks here we could do if the post owner uh equals oops equal equals the owner.key all right if that is not true then it's probably the incorrect owner right and then if it is uh we're gonna put the old title old title is this post that title and that the new title new title is comma this the title that we pass in so we can take our parameters and use them for a function and when we update a post so let me take out the Pringles here and print and we can change the old title post by grabbing this parameter and say post dot title is equal to title and again just like before we need to emit update post event okay so how do we do that let's create a post event for updating so once this is done you can go back to here and say a new class update post event and say event colon and then say owner oops owner Pub Key you can say ID and say u64. nope and we also need this init function again which is underscore underscore net underscore underscore and we need the self the owner which is a Pub Key and the ID which is a u64 so it's pretty much the same thing uh and you're really going to write the same thing actually self.owner is equal to owner and self.id is equal to ID right so you could literally copy and paste the same thing for the init function and uh you should be good to go so for the update post it's pretty much the same thing let's just call it so now we want to emit the update post so to do that we're just going to write under here oops we're just going to write update post event is equal to update post event and put the post out owner and the post.id and then now that we put that information in the variable let's just submit it so let's emit it by saying update post event dot emit bam okay cool all right now we're running the post and let's go ahead and build check for any spelling errors or anything weird that I wrote yep we still get the unnecessarily trailing semicolon which is fine which I don't know where that is but once I do I'll let you guys know and erase it but for now there's no big warnings so we're good to go so that is update post so we have two more delete post and a like post all right so what we want to work on next is deleting a post so let's go ahead and get started all right so by this point you should know how to set it up you say add instruction and then Define the function of delete post all right so what does delete post do if you remember our app if I press this x button it should literally remove um this post from my front end to do that we don't necessarily delete anything off the blockchain we are going to do what's called closing oops we're gonna do what's called a closing closing the account and when we close the account it gets removed right that there's still a public key there but it doesn't hold anything it gets removed and then we get refunded Solana right sole refund because we're not taking up sales anymore so we're gonna refund the space it takes up okay so that's the idea so we're closing the account here uh anchor if you run some like if you just write close uh in the function itself it will close the account for you it's a little bit different on seahorse so I'll show you what I mean so delete the post put parentheses and then colon to write the logic next to it so for delete post what are the variables we need or parameters we need post we need uh owner and guess what that is it so post is type of post and what's the type of owner guys three two one signer I kind of wrote it for you so cheated all right from there let's insert and do some checks asserts that post owner is equal to owner that key again right and it's equals equals okay forgetting owner dot key if it's not we don't have the right owner okay cool so like I said we need to close the post account so let's write that need to close the post close the post account by trans Ferring something we call Lamp ports are you going to hear that term lamp ports is a smaller unit of Soul right so think of it like a dollars dollars in USD and the smaller unit of dollars will be cents right so basically a hundred cents makes up a dollar right so from here we're going to use lamp ports because that's what you do with this so we can say post dot transfer Lan ports right because the post account itself is holding the Lan ports that you're taking up space in right so that's that's your rent oh you can think of it as for that space and we're going to transfer the landports that that post is holding to the owner and we can really write let rent exempt exempt I believe no I think the spelling is exempt uh underscore lamp ports and then 440. that's how much uh the exemption should be so post dot transfer underscore lamp ports owner rent exact landport so make sure the spelling is all correct and from here uh you know what to do here this is just emit the delete post event which guess what it's the same thing pretty much so you can just say uh class here delete post event parentheses event colon and guess what you're writing owner so owner is Pub Key ID is u64 and we need the init function here so we can say def so what I'll do since it's exactly the same I'm pretty sure it's not any different we can just paste it okay I think that's it so yeah that's the delete post event listener and now we need to emit it so to emit it we need two uh we're gonna do again delete post event like so equal to delete post event and then post that owner poster ID and then delete post underscore event dot emit to emit the post event that we stored in this variable and that's it for delete cool so let's see if we get any big errors yep there's one rent exempt Lam ports not found okay it's interesting post.transferlamp ports rent sent Imports okay so after some troubleshooting I realized what's wrong with this because I'm gonna go down here we have to manually calculate rent from the account size because we can't access Lan ports on an account from seahorse so again seahorse is still brand new but there's a workaround right and I forgot that I did this so rent exempt you have to Define what this is so Imports cool like I said in the current version of anchor uh there's ways that they can do this for you but we have to manually calculate this because seahorse is still new so write something like this uh def exempt uh lamports is a u64. and then the calculation is actually 897 uh 840 plus 6 9 60. times size minus one so this is how you manually calculate your Lan ports and that's why we can pass in 440 right that's how much space it takes and then calculate right here so let's hit build and we shouldn't see the unknown error build successful let's go we deleted a post right so cool so on to like post and while I'm at it with like posts it's very similar but we're gonna unlike post which is essentially just closing the like post account all right so moving on to like post right we're gonna do the usual setup of instruction write def like underscore post and then let's put the parameters which is going to take in like a post and a user and you know the Liker who is liking alright so the like all right since this is a new account what do we do empty like account right that's the type it expects for post it's expecting a post and that should Exist by now because we can't like a post that doesn't exist and for the user should also exist should be a user account and the Liker is actually just the signer because who has ever uh connected to our app like right here is going to be the signer or in other words the Liker okay and then the colon here so you could write the logic and let's just verify uh the user account again so if the user.owner is equal to the Liker dot key then we have the wrong licker all right that's not true I got the incorrect like all right so now that we've verified the user we need to initialize the like account so remember how to initialize an account right we say equals like dot init we can do payer is equal to Liker and seeds is going to be like post the owner post ID and the Liker so we're gonna get a very unique seat because of all the seeds that we have to pass in for this okay comma here to end it off and then trying to see something it's gonna put a comment there I don't need that but I just want to make sure seeds parentheses and then let's initialize the rest of the properties so we can say like account dot post underscore owner is equal to post dot owner so we're taking from that post account and grabbing the owner and setting it to the like account post owner yeah so from there let's do another one which is the posts ID which is just literally going to equal the same thing that we passed in the post.id and then the like account dot Liker is going to be the Liker all right cool and again the Liker is the signer so uh again we also have access to posts when we like something we need to do a post that likes plus equals one so make sure you do that otherwise when you like a post like this it's just gonna say zero and don't mind the error but if I like this just should go up to 98. right cool so and then nice message here let's print out post ID comma is post dot ID and then we could say bye owner comma post dot owner then we can do now has and then we can say the likes so it has this many likes comma and then we could write nine so it could be zero one 0 likes one likes two likes three likes all right just a little message cool and then uh we need to emit hashtag emit the like slash dislike post event so notice how it's kind of this post event is going to be a two in one so we can make that pattern below here and say class like this like post event and the type of event and from here let's say owner Pub Key can't exactly copy this one because it's slightly different ID u64 and the reason it's different guys is because it's taking in likes so likes u64 like so and then uh the init similar but we need to add likes in there self owner Pub Key comma I this one is the ID of course 264 and don't forget like I said add the likes so u64 init bam thank you ma'am South down honor is equal to owner self.id is equal to ID boom boom and self dot likes is equal to likes cool and then keep this manually export thing and now let's emit that like to dislike event so I'm thinking back sits like this same thing so it's going to be like like this like post underscore event is equal to like such a long name right like this like post event so it's gonna take in post dot owner post the ID and comma post dot likes which will be updated because we added plus one right before this cool and now let's admit it so we can do like this like post event is equal to or not equal to sorry dot emit boom okay cool and that is the like function say build oh it's the assert thing we're at the Double equals boom and then the seeds comma after pair 108 don't forget that build again uh proton 116. post ID oh the comma should be after the quote so again there's a lot of misspelling it's normal just double check that and we're building now that's a good sign usually let's go build successful let's move on to unliking a post and don't worry we're going to test all of these later on and come back if we need to all right so last but not least we have unlike posts or since I was calling it this like post we'll call it that too so disliking the post now and let's set up the instruction like so so instruction death dislike post okay and what parameters does disliking a post take in it's going to take in the like account right because now we have a like account right we want to close this essentially like uh post which is expecting a post account like what post are you disliking and who is the disliker right the disliker is the signer who's ever logged in at the time and a couple checks here assert like dot Liker is equal to this like or key you want to make sure that they're the same otherwise it's the incorrect this like it's not the same so let's assert like that Liker and then equals equals yeah oops not minus equals equals equals all right another assert here which is a like that post underscore owner right just making sure that the person logged in is the liked the posts that has the like is the same as the owner otherwise it's the wrong one this one's less likely to happen but it's a good check post owner and there's one last one which is just in case the post ID is wrong right because there could be posts with the same ID if we did this wrong say incorrect post ID okay cool so just like with um deleting the post we want to close the like account right so we want to like I said hashtag close the like count by trance firing lamp points to the owner okay and again we have to do this manually but we set that up here manually calculating how much land ports we need to send back and we can do it like that transfer lamp ports the disliker that is the owner that we're going to transfer to right because the disliker if he's closing his like removing it he needs to get his rent money that he paid back so it's exempt uh lamp ports and hit the space of the like is about 80. again we have to manually put this in here and uh what else do we need to do if we dislike something or unlike something we need to post that likes minus equals one right because the count should go from like 10 to 9. right that should make sense to you guys and let's take this similar message here now copy paste to save time because now this post has uh now has because we don't have owner anymore this post ID blank now has blank clicks okay that makes sense cool and now we need to hashtag commit like this like post it right so this is exactly the same has the other one so we can copy it let's copy it and paste it like so got her events here like this like boom so let's take this back let's hit build let's see what errors I got the 124 174 oh don't forget to call in because every function needs this colon right after build okay that's a good sign build successful all right cool all right guys we did it we completed the smart contract right we didn't get to test all the functions we know we can create a user but now let's take this smart contract information and let's finally get back to our app okay so time to get back to the connection of our front end and our Solana program so don't forget to upgrade this and make sure you have enough Solana looks like I do so it's going to deploy awesome alrighty so now it's fully upgraded with all the new information I'm gonna go ahead and clean out um just these two tabs here and going back to our app we can pull up vs code again and actually make this guy a little bit smaller let's do something like this right and we can do something like this cool all right so we have both side by side now and let's talk about a few things so the the key thing to get started all right the key thing is go to your utils and go to constant.js right notice how uh if I do control B here and zoom in a bit notice how we need the program ID here so this is where you come in you're gonna go to salon a playground we're going to take a look at what your post ID is or your program ID is right so your program ID is this right here so copy that and you're going to do something for me you're going to say new public key right because we imported that from Solana parentheses quotes and pass in your program ID oops sounding codes boom okay now we have the program this is us using our RPC endpoint which is this placing it where we need to now storing our program ID in this variable and exporting it so that's one of the first things you guys should do so the next thing you have to do is use this program ID to get that information to get the program right so for now I'll minimize this and then we can make this bigger for now and let's start on working on that so if you press Ctrl b or command B what you want to look at is program.js I also need the idl.json but if you did everything the same as me right it should be a similar idea cool same thing go to program dot Js and this is where the majority of code is going to happen right we need to make a function that's going to grab the program from the blockchain so that we can use it right so look at this code right here import program ID from constants all right so we're grabbing this right here all right so now we need to use it so let's do that we're going to do normal JavaScript functions now so I hope you're ready uh we're gonna say well before we export let's do cons get program right is equal to an arrow function right so we want to get program right and what we want to do with this is we need a connection right and we need a wallet right so anytime I run this function we're getting the program next is const idea is equal to uh parent require parentheses quotes idl.json right so again you can get your new idl.json right by going into your salon playground going into here and do export IDL but if you did everything the same as me it should be very similar okay so that's how you get the idea if there's any errors this might be where it is but I think it should be fine so make sure the you get the idea that Json stored in a variable like so let's get the provider which is provider is equal to new anchor provider right so that's we're going to get this anchor provider and it's going to take in connection and wallet which is the two parameters we passed in and anchor provider uh dot default options okay and that's it for provider and then we can say const program is equal to new program our new instance of a program do IDL program ID for the address and the provider right so then we return program and this is what lets us see into the our Solana program and access the function so it'd be like program dot whatever use it like that so that's get program and what I was racing before is export because we want to export that function and use it in other places all right so that's the first thing that we need to do hit save and now that we can get the program using this function let's actually use it so if I want to use it to control B again and let's go to the state folder and go to global.js right so here we are going to use our context and create a custom hook out of it right so if you don't know uh what context is all right let's bring this guy back spring zeit board back because I actually do need it all right when you have a normal app right this is going to look something like this right so this is the parent and it has two children right so we can say this is the app.js and the apps child is the index and then we have a header and we have like the stories part right so usually if I have uh posts right post data in here in order to get this data to header I have to pass it down as a prop right and that's totally fine to do but if we have a lot of different components for example right I would have to and I want post all the way here I would have to pass in posts like so that's like this is called prop Drilling and that can lead to issues later down the line so an alternative is using something called context right you can look at it like a store so let's say my program is here right I'm getting the program into my state here and then I can just pull it from whenever I want I don't have to pass it down all the way so let's say there's a component here I need to use program I can just call it directly there and it's so nice so context is nice Okay cool so let's bring this guy back and we can minimize him again and let's set it up so to set it up the context you can say import create context okay and while we're here importing stuff from react we can say use callback all right so not to recall a function over and over again use effect and use state okay hit save and from there we can import get program from utils and we're going to get a bunch of other things but this is fine for now okay uh we're also gonna need what else you're gonna need import the lanports poor soul from Solana web3.js we'll use that later and another thing we're going to need is import toast from react hot toast alright so this is that nice notification symbol so we have a nice visual to see if something worked or not okay cool so how do we create this context that I'm talking about Lance I'm glad you asked we're going to say import const Global context is equal to you can connect to these contacts we want to create it first create the context cool in our context is going to be a lot of different things but there's we can just set them all up now there's going to be something called is connected and a lot of these are going to be set to null at first but they will have definitions to them later so just follow along with me next one is wallet next one is has user account right because we want to check if they have user account or not no oops not Jr multimedia no posts no fetch post no I forget the commas uh oh this is pretty much all the functions so create user no we want to create a post that's no uh update post okay comma delete post no and again if I'm going too fast feel free to pause the video and copy along what I have so let's do like post no and dislike post alrighty Okay cool so we created the context right so this is global context create context and now let's set up our state so I export const Global state is equal to whatever children we pass in which will come into play later children and set this to an arrow function let's get started on that so we want to deal with the program right so let's do const uh let's make a state and say const program set program is equal to use state right so this is going to help us what we're going to do is get the program right and then set it in our state so that when I say program this one I can use it anywhere I want right so that's the power of this um cool now how can we do that uh do I need something I'm going to need to import another thing here let's do import we need the connection so we need to use anchor wallet comma use connection so we need a connection and a wallet for the program cool explored Global state and at the end of this all for Global state it will return something and it's going to return oops return a a global Global context dot provider all right where have we seen uh Global well not Global context provider but where have we seen provider before right so that's going to take in a child of a value inside the top one value is equal to Chrome colon oops and anything uh you put in here will be passed will be able to be passed on anywhere so what I mean is if let's go back to here if we had the store all right and I set up program in here I got the program this is where I put it so I put program here for example if I wanted to see a program and for in between these two guys it's going to take in children cool so we set up our Global context we set up a global state will return a provider for our contacts all right now let's actually put this into use yeah so to get this working we can set up a use effect right a use effect we'll run uh when on create on upload and on delete of a component all right so to use this use effect let's go ahead and write in a narrow function Okay so first thing you want to check is if there's a connection so let's get a connection so let's say const uh here you can get a connection from use connection like so okay and if you didn't know we can also get a wallet from use anchor wallet which is why I had those two Imports uh and you have to call them to get that cool so now we have a connection and now we got a wallet to play with and if there is a connection right then we're gonna set the program to be whatever the program is and how can we get the program well you can actually run the function you can say get program because we have access to it from here put parentheses and then say connection wallet Colin colon because there might not be a wallet if there's none we do the empty object here okay else uh set program to know okay and if you can put something called a dependency module in this use effect if I put nothing in here this use effect will run when the page first loads if I put something in that dependency module like connection this will run when the page first loads and when the connection changes so if we get a connection it'll run again all right if we lose our connection for some reason it'll run again and dude and if there's not a connection it will set it to null another thing we can check for is if there's a wallet all right so if there's a connection there's a wallet if that changes at all let's use effect will run once more all right cool so now how do we see this program well we're passing it in we need to be able to see it on our app and one way to do it is come back to uh your app actually so we need to do next like I said is go to the app come to the top here and let's import something new we can import Global State now global not Global context Global state right because State holds that provider between these two guys uh right here let's add global state right so the reason why I'm doing this visually it's kind of like wrapping our whole app with the context so you saw that Circle that represents these the context oops well wrapping it like this and let's say a program exists in the context here I can pull it from anywhere all right so that's why I wrap Global state within our app okay so that said let's take a look at our hooks folder you're going to see something called use Global state right so now we can import our Global contacts right we can uncomment it we're importing it and comment out this return it's save so now let's check if our app still works okay there's destructive property use anchor wallet is not defined okay that's fine so we're gonna go up to here use anchor wall it's not defined okay so there's something wrong with the use anchor wallet and oh yeah I don't need to destruction this this is actually just be a variable because I'm not getting anything out of this so okay hit save and Bam okay we're good to go and again I can still log in cool and what I wanted to point out is this part the hook we take our contacts and turn it into a hook that I could use right so now I can say use Global state so if I go to index all right where's index it's right here and then if I do something like uh import use Global state right and then I can destructure anything from use Global state so let's say all right I can say const object program equals to use Global State and then I can write console log this is my program and then comma space comma program so let's see if it loads so it should get best give us back a program say inspect console this is my program VN okay so you saw that this is my program VN and you can see everything you need to right if I do a program dot instruction so I lost the parentheses and struck shins let's see what we get oh program.instruction not with an s cool so this is my program and we see all our functions create posts create user delete post dislike post like post right everything is there so when I say program dot instruction dot create user now you can see how we get it right so keep that in mind so we can erase this do you guys have an idea of how this hook and context is using together if you do we can move right along so let's do it all right so we can do now is we actually don't need the program here we're only going to be using program uh in this global.js right we're going to do a lot of stuff with the program this is where we'll write all the function calls to our smart contract so that you can have some functionality to this app right so now that we know that works let's go back to our utils and let's go back to program.js right whatever you wrote get program because uh there are functions that we can make that will make our lives easier what do I mean by that let's go back to our Local Host app first just a second and if you see on this side of my screen right we can fetch users right if I do fetch all right I get all the users that are created and there's the second one because I was testing if it still works so with a different account so there's C2 users now right but let's say I wanted to just get get one user's PK and when I say PK that's public key so what if I wanted just this user's PK right well what you're gonna do is take the user uh public key and click Fetch and Bam I only have that user's information that user's PK right so with that said let's move this back here with that said we can link that up let's make a function that does that for us so I don't have to call it over and again so let's say export cons because I want to use it other places all right this will be get user count PK and it's going to be asynchronous right because it's essentially uh communicating with the blockchain it's going to take in an owner so again what does this do this will get us the user accounts public key and how do we get a public key guys think back to what I was talking about with seeds that's right we're going to put in the seeds right so we're going to say return uh return parentheses like so oh wait oh wait uh public key all right so it's using this import now to generate a public key from oops public key dot find program address right so this is a builtin function of public key that's going to find the PK based on seeds and to write out the seeds you need to press this array thing because we gotta say buffer Dot from user right so this is us this is the equivalent of us going on to here and passing in use it like this all right we're passing in this user seat right because the seed should always generate the same paluki so yeah it's going to take a user and what else did it take in if you remember owner and we have to format it the way it wants so do two buffer and comma it also takes the program that I underscore ID which is why we need to get program here and if you do that you can do a zero here this is needed semicolon and that's it that's our that's how we get a user account PK okay we just pass in the seeds pass in the program ID this and we're good to go all right next thing what else do we should we get we should get the post account so let's get post account BK you don't need to do this but um this will save us time in the long run because I can just call this function instead of manually uh putting in the seeds over and over okay so let's say owner and ID right because we need an ID because each post has their own unique ID and asynchronous and we're going to do return I'll wait public key dot find program address and same thing with a pass in the seeds so what are the seeds for a post uh it's going to be buffer Dot from the string post and then the owner which we can do two buffer for and then the new it's the post ID is the third seed right so this is going to be what we call a big number so we say new BN pass in that ID and then if we have to format that to two array like buffer all right and we need in Lan ports e sorry this is just a format that ID to what Solana can read and to get the red seed so you can't just straight up put ID here we need to do this okay comma here comma here and don't forget we need to put in program ID and parentheses after that parentheses and then zero here just like last and then semicolon cool so that's the post account PK and last but not least let's get the like account all right again let's make our lives easier so get like count PK is equal to async Arrow function uh it's gonna take in an owner the ID of the poster liking and um who the Liker is yes who's the Liker and then we're gonna return oh wait public key dot find program address right this is so nice to have this builtin function all you gotta do pass in the seeds so what are the seeds for our like account guys buffer Dot from uh like and owner.2 buffer all right format that and what else I think it's an ID so if you get an ID you have to do a new BN ID dot two array like buffer I know it's intense Ellie eight if you need to pause this video go for it uh and I think there was one more seed it was the Liker which is a public key so we'll do a two buffer all right so if it's a number if it's a u64 format it like so if it's a string as a seed do this and if it's a public key do this it's the general rule so you don't have to memorize this just you can use your old projects as a reference so again after the array comma uh put in the program ID and after the second one right here put zero and you're done cool so we have some helper functions that we're going to use to work on our state so let's go back to not use Global state but to our global.js cool so now we can call all those functions all right so remember how we got the program so let's just bring that down here right here because we're going to get more stuff so instead of saying slash program because that's very specific let's go to just the utils and we can do something like this so we're going to get the program we also want to get a post account PK we want uh get like account we want to get user account cool so now we have access to all those helper functions which is going to be very nice and now we can scroll down and get to work so we need some sort of goal so the first goal that I want to work towards is creating a user one of our first instructions right so the things that we're going to need to create a user right is let's add another user effect because I need to check for a wallet connection right so to do that what we're going to do is scroll up a bit and we need to make another state so we can say const is connected is the state and set is connected is the function we say use state like so and to check the wallet connection it's gonna be pretty simple it's just a use effect okay so I'm setting that up the use effect is what we want to do is set is connected to not not wallet Dot Public key right because this will be this is basically saying if there's a wallet and then just Dot Public key and that's what we're going to set the connection to so this will lead to true or false right because usually wallet.public key is that number that you see but when you do not not it's going to be true it should be true okay so yeah that's it right there and inside the dependency module for it which is just going to be wallet cool so once the wallet is set up we're gonna set check if it's connected while it's connected if it's good we run let's use afflect uh now next step for creating a user we first have to check if there is a user right so uh we need to fetch check for a user account by fetching the user okay so how can we do that well we can make a function say const fetch user count and set this equal to use callback right if you don't know use callback is very similar to use effect but it's not going to rerender the components unless the dependency is changed so again we're going to set the fetch user account function to a sync right and here is where we can write the logic for it cool so here you can say um if there's no program right we can just return all right because we shouldn't be if there's no program to begin with we don't need to fetch the user account or we can't we shouldn't be able to because there's no nothing to fetch um from here we can set up a try catch though try catch and E and again I just do the catch first usually here um If This Were to work we need to save that user account that we fetch so we need to make a state so for that state we can say const ant user account and set user account is equal to you state all right cool so from here if there is no program return nothing just leave and if there is no user right if we fail to you can say set user account to not and even say the console log no user found no user that makes sense right if we can't fetch a user it should be null and no user found all right but what if it does work right so how do we fetch a user right think back to the Solana playground right how did we fetch the user well we need to pass in the seeds right and where have we done that before I'm trying to think all right we can say const user account PK for the user account public key is equal to weight get user Peak all right we don't like if I didn't call mother's helper function I would have to write this whole thing in this line right so that would take up more space but since we don't right we don't have to and what we can do is just say wallet question mark Dot Public key and you might be wondering what the hell is this question mark Lance is uh it's basically if this egg wallet exists right then you can get the Dot Public key because sometimes uh the wallet won't load just yet and it'll be like something like uh undefined reading Dot Public key right because the wild doesn't exist yet but this makes sure that the law does exist first and then it can read that public key that's why I do that just in case sometimes you don't have to but there you go and then we can console log the user account PK if you want to see what it is okay and then we can say the const user account setting this into a variable is equal to a weight because we don't want to set user account right away because that will rerender our component so we'll do that in a second first we have to grab it account dot user so remember if I write program we get access to program let's say dot account we can see all the accounts that it makes so if you think back here we would see user post and like we want user and we can do a DOT fetch here and then fetch it based on the user account PK so now do you see that this is how Solana playground works and fetching an individual PK we just did the same thing but in JavaScript essentially okay so we're gonna wait for this and once this runs all right we'll have the user account then and now that we found it we can say console.log uh user found and then we can say set a user account is the user account right and if that were to fail at any point right then it's going to say uh set users no okay cool so this isn't running that's why it's grayed out so let's make it run so we can do a check for user account cool and then we can say use effect all right a lot of code so if you have basic knowledge of react hooks this might be a little simpler for you if this is overwhelming for you make sure you leave a comment like let's make a react course right so cool so check for user account it's literally just going to run fetch user account dependency module because we only want to run this if we're connected so it all ties back to the connection right so if there's a wall connection this user effect will run next okay so let's hit save and let's go back to our app let's see if anything has happened so it might have our old stuff nope so let's select wallet Phantom let's go right there's a user found right user found public key and that makes sense because this second user all right the owner is b46 and I'm logged in with b46 right here so let me just make this full screen for now what happens if I change my wallet though so how do you change wallet good question just disconnects this click the Phantom icon uh login and just switch to one of your other wallets so if I see a t all right so now I'm using wallet one connect wallet one to your app and now there shouldn't be a user so look at this no user found right when I when there was a user it says user found enter is not a user no user phone right so thinking about the logic if this there's no user found when I connect my wallet I need to be able to create a user so how can we create that user so um yeah if this is a new wall I should be able to see a create user button and if you remember the demo there was a create user button that should show up right here so let's go back to our app next thing we want to go is open up components and head to the header because like I said that's where that button is supposed to be and if you scroll down to um line 49 for me you're going to notice that there's some conditional rendering right it has user account right is false and we're connected show me the create user button so let's do it statically let's make it like this has user account is equal to True let's change it to false let's say there isn't a user account but I'm connected let's see right here oh is connected is not defined all right okay so this isn't true because we don't know what is connected is but do we have is connected it's the question so we're not going to go to program we're going to go to Global and we have is connected right here right and we can Define uh is connected like so say is connected save and now let's go to header and let's import or use Global state which we did for you in line 15. so now that we did that really nice thing for you you can go to here and say const object say is connected is equal to use Global state so now we have that now let's turn this to false cool so now if there is no user account and we're connected uh oh I think it's looking for a create user but there is no create user yet so let's do a fake create user so cons create user this temp okay cool let's see what else it's missing it's expecting oh there we go cool so this is the true example of what we want to see right if if there is no user account this is should be false and we're connected show me the create user but if this is true all right then we won't see that button which means I have a user account right so we need a state that's going to do that for us so the question is how do we make this more Dynamic right so the first step right is going into your global.js and remember how we're going to make use of user account right so remember we have has user account in our Global context we can redefine it from null like so so if I say has user account I can do something like this all right I can say colon and then say user account right the reason why I'm doing this is because we can do some conditional rendering again with the ternary operator so basically if there is a user account it should be true and if there's not it should be false I'm going to come here cool so now has user account will either be true or false depending on if this exists or not does that make sense so if this exists it'll be true if not it'll be false and that's what has user account is right so and that uh the engine of that is going to be based on this function fetch user account so it's all connected right we're setting up our foundation for our app and if you're following along with me you're doing a great job okay seriously you're doing great like this took me a long time to understand and if you don't understand just rewind keep trying so uh heading back to header erase this fake has user account and give me the real one you can say has user account like so all right so moment of truth if I select wallet and I connect it to the 8T wallet wallet one I should see create user so three two one let's go create user exist right well I should see now if I disconnect and let's use a wallet where an account does exist already which was uh wallet five so let's connect that one and I should not see has user account yeah so boom you saw it for a second oops you saw it for a second and then it disappeared right we are able to set up the conditional rendering now what we want to do next right is connect our wallet and actually create a user instead of saying temp right here just says temp we want to actually create a user okay so the cool part is I don't have to make create user from scratch anymore because oops not that because it's already in our Solana code our program we just have to call it right so to call it we need to go here write out that function all right we know global underneath this check for user count let's create user right and we're not going to make the function from scratch we're just going to call it and pass in the parameters we need so let's go ahead and start by saying const create user is equal to use callback right because you want to run up you want to not rerender all our props if we run this so it's asynchronous and again there's this check here if there's no program we shouldn't be able to create the user in the first place all right cool so now we can do our try catch okay and catch will have an e and within there we can do um console.log uh couldn't create user and since we have to set up we can also do a toaster toaster error creating user failed boom and for this one you can say e Dot message to get the exact error in the console okay but for the try though uh we're gonna need to say const transaction for TX hash is equal to a weight and how do we get the methods from the program well you can say program dot methods I know we did dot instructions before but that method is the same thing you can do enter here because it knows that when I say Dot create user dot accounts right so basically I'm calling the create user function from our Solana program on the blockchain and I'm passing in the accounts it needs right and it does need a couple accounts it needs a user and an owner how do I know if you go back to here go to your create user it needs two accounts it needs a user and an owner and for the user it takes seeds so we gotta follow that same process here so we can say user oh wait and pass in get user account PK and say wallet Dot Public key right and if there's any issues with this step this is when you would put the question mark but we should be fine and then from there we can say owner oops whoa owner is wallet Dot Public key cool all right so this will automatically handle the seeds parts for us because we already set it up so you don't have to write that long thing here which you can get it can be sometimes and uh yeah you're pretty much done you've basically got the function all you need to do to actually run it and say dot RPC and confirm this transaction Now by saying oh wait connection dot confirm transaction to pass in our TX hash right this will make sure that it went through and we can just do a toast dot success and say uh created user we can do a weight fetch user account right because I want to make sure that after we create a user we're going to fetch that user again right so that it will update so that means if this runs and is successful select wallet this is successful I press create user it will disappear because we fetch the user account that exists now okay so let's see if that works crossing my fingers create user oh yeah we're probably going to see the temp because we have the fake static one right so no user fan that's because we made this it's grayed out because we're not using it and let's pass in create user come and we can go to header Now erase the fake create user uh I don't even think we're using this used router so let's erase that and let's pass in create user boom and it's already set to the button so don't worry about that let's go back but it looks like wallet fingers crossed create user yes okay so if you see this approved transaction this is a good sign which means uh it means that the function you wrote is asking you to sign that transaction and especially if you see the exact amount of soul that it's going to take from you another good sign so let's hit approve let's see which toast uh notification pops up a created user we're good and look at that the button is gone all right if you want even more proof right come back to your Solana playground there should be three of these guys now and Bam there is nice we created a user right that function you wrote earlier works on front end app and it's awesome it's really great so let's go to the next function all right so the very next thing you want to do is we should be able to create a post so if you don't know if you click that plus button up there it's going to ask you for a caption and then image URL right so after that you can hit create and this create button from the modal is what's going to create the post itself right so right now it doesn't do anything because it's currently static so let's take a look at that so if I go to my code which is this one let's go to header well actually no we need to go to the modal go to create post model and again it's that create button it's going to trigger this on create function and in that on create function we have the create post right but this create post again it's getting passed as a prop right which comes from index I believe this is the create post model and it's passing down static create post right see this line 91 what is static create post it's just a function as a placeholder that signifies create posts what we need to do is go back to our global.js and make a function like create user that calls the function on our Solana program right so if you're with me let's do that it's going to be a very similar process say cons create post is equal to use callback and it's going to be asynchronous so we're going to do async and we're going to do the arrow function for it like so and create post what parameters does create posts take remember you saw the modal takes caption and it takes an image and I'm going to say title because that's what we wrote it with but remember title is the same as caption you can name it whatever name you used please use that and what we want to do is if there is no user account uh it should just return because it's not possible all right and if we set up the try catch so let's set up the try catch try catch parentheses e for the error and here we can write um for the error toast dot error uh creating post failed right and then for the console log we can get the oops the E Dot message right so we can see what's wrong on the console if anything goes wrong and I try but in our try we have to set up the post ID and if you remember the user account it stores the last post ID so right now it's set to zero but our front end doesn't know that so we need to essentially get the user accounts last post ID which we should have thanks to our user effect so if you say user count dot last post ID and it should be capital i and we can do a DOT add n one so this will automatically add one to that user account it's a builtin function cool so now we will go from zero to one and then we have to make our transaction hash so set that equal to a weight program dot methods right again it's like let's check instructions but same thing dot methods and then you can do dot create post and it's going to take in the title that we passed in here the image that we passed in there and the post ID which we didn't pass in but we created in the try right and uh that's not the only thing we also need to do the accounts and this should be an object and what accounts does creating a post need if you're not sure check your Solana program so if I go scroll to the top go to create post you'll see that it the account it needs is post a user and owner okay so we got that post user owner got it so we need the post how do we get the post uh PK well thank God right you're gonna say thank you Lance because I can do a get post account and say wallet Dot Public key comma post ID dot two number boom cool right because these new two numbers because post ID is going to be a BN a big number and that will make it into a format you could read for the user same thing we have our nice helper function get user account PK this just takes in a while at the public key foreign a comma there you go nice comma and uh last but not least it needs the owner which is just you don't need to call a helper function you just need wallets Dot Public key I understand the comma all right um with that said we can just do a DOT RPC to make sure it runs and we can have an oh wait here oh wait connection dot confirm transaction TX hash right we want to confirm our transaction went through and if it went through after that await you can do a toast that's success and I say post created exclamation point cool so that is create post um successful we need to update the user account right oh wait fetch user account boom all right because we also need to fetch the post later but we won't worry about that for now um let's see the next thing we need to do is remember how in our Solana code not that this we need to set up our event listeners because there's a couple events that we need to run by and the first one is the uh creating the post yeah so we need to create that event so what I'm going to do is set up a used effect that's gonna run all of the events so between create user and check for user account to the program events and it's just going to be a use effect so since it's a use effect you put an anonymous function inside that first parameter and basically if oops if there is posts right there's no posts then we need to fetch posts all right so these two things don't exist yet posts and fetch post doesn't exist we need to make those and we're going to do just a second but let's work on this actually I'm gonna save this for later right still need to use effect though so let's do a use effect use effect tab yeah it's a different user effect I was thinking of all right so what we need for the program events though is if uh there's no program if there's no program if that's true then return because we can't do anything but if there is we need a new post event so const new post event listener right we gotta listen for that post event and we could do that by saying program right we're accessing the program dot add event listener right we're just going to take two parameters in this case which is new post event that's the event that we're listening for which does exist in our program and uh an asynchronous function which is post event like this and in that is a try catch all right e boom keep doing that array thing here we go and in this catch we can console log uh couldn't fetch a new post account comma post event e for the error but for the try though we can say const post account PK right because we're gonna get the new post that comes with that event post account PK and we'll use our helper function here and just say post event dot owner and the post event.id and then from here we can say const new post right because now that it's created right that public key we need to fetch it so we can fetch it by calling the program that account that post that Fetch and then pass in that post account PK the public key and then this is the part where that last uh post thing is going to make more sense this is where we're going to set posts all right this state doesn't exist yet but what we want to do is make sure that the new posts from this event gets added to that list of the posts that we had before so we can save that by doing it like this okay so let's define posts const comma set posts now it exists is equal to use State and then we could do empty array for this and remember we added events listeners but we need to remove the event listeners at some point so uh after this parentheses right here we can do a return right this is another part of the use effect and this is how you can remove the event listeners that remove event listener new post event listener so yeah so after this all runs the successful or fails we're going to remove that event listener and we only want this to run once and if the program ever changes all right so it's going to run once if the program changes and it's also going to remove that event listener after this is all done cool so that's that but now we need to set up the fetching of the events or the posts so let's go ahead and do that so check for user account above program events but below check for user account this is where we can write um the const fetched posts and again it's also going to utilize use callback as well which is asynchronous and if how it works is if there's no program well we can't fetch any posts doesn't make any sense okay and then from here we can say cons posts is equal to oh wait uh program dot account dot post dot all so we're basically fetching all the posts that exist from the program right and then from there we can set posts oops set posts and then basically uh map through it so post.map and for every post oops every Post in that map I mean in that array we're gonna get the post dot account because remember it's going to be like this object with a key of account and that key of account has an object with all the information this is how you can just simplify that here instead of nested uh ways of getting it then dependency module had a snap post that's going to be repeating program okay and there is a use effect to run this fetch post so we can say use effect um Arrow function this is what I was trying to write last time if for whatever reason there is no posts then fetch posts yeah so vegetables the posts don't exist that's basically what this means and now this one is going to have a dependency modular posts and fetchbooks this is to ensure that it's always fetching the posts as it comes or if anything changes yep so that looks good now let's go back to our app and see if anything same as errors no okay we can still connect our wallet yep cool so we have a user now let's set up the create post so what I need to do is come down below here and add create post all right and now that I added create post um we can use it so if I go to create post modal I can import my use Global state and I can use my Global State here so I can say const create post equals to use Global State and I'll form it like so just in case I want to get more stuff from here I probably won't and we can delete um or erase this fake create post right here right cool so now I'm just I'm not using the prop that I passed down I'm using the create post from Muse Global state and yeah so now we can find the test if the posts work and troubleshoot from there all right so we did all the setup so let's just test if creating a post will work so let's go ahead and find an image first I don't want any longer I'm just want just like a nice wide one sponsored um Microsoft Edge let's do this one it's a very uh Christmas themed oh no it's unsplash plus no we don't want that are all the wide ones sponsored okay let's do this one all right so let's copy this image let's go to our app let's do it so the caption is going to be um surprise it works okay paste this image URL and let's uh hit create okay first it's telling me to log in that's that's that should be good hey okay Phantom wallets transaction signature but it doesn't tell me how much Solana so that's not a great sign let's hit approve creating a post failed oh no so there's something going on here given publicly does not match the required CIS bar okay that's fine so um that might be because the way we started this connect let's just try one more time so caption oh I don't know what these are but Tokyo and then this image create a post failed Okay cool so that's not necessarily a bad thing because we know that the anchor error oops is the given public key does not match the requireds this far okay that's fine let's take a look okay so what I did was I went back to Salon playground and I just made sure that the spelling was correct I just redeployed it as you can see deployment's successful and now let's hope it works I'm gonna head new post and let's do surprise it works works and I think I spelled surprise wrong there we go and now let's take this image and paste it and hit create okay cool again this is a good sign and we're seeing exactly how much Soul it's gonna take that's also a good sign to prove foreign let's go awesome all right I'm really happy about that um and now if we go here if I fetch the post you should see one if it weren't correctly let's go all right surprise it works and now if I go to users uh fetch all there should be one user with a post ID of one so it incremented that user account got updated as well and uh as you can see we aren't oh yeah we're not doing anything with posts yet so let's see if it's fetching any posts so I'm gonna go back to here okay and where were we global you know what do I need I need fetch post okay if there's no post run fetch posts if there is okay cool and we have posts so what I could do is I can pass in post here all right comma and if I go back to index right you'll notice that it's rendering a static posts so change this back into posts so if there's posts give me post that map and then map through them and it should be the same we don't have to change anything because it's hooked up the similar way but we do need to use is the use Global state so I'll go here const object and here and say posts and set this equal to use Global State parentheses so hit save and let's see if we get any errors let's go we got post boys awesome cool and then we can select wallet uh we can even make another post let's just say rocket ship and the first thing that makes sense uh testing create okay approve post created and boom look at that this is a image from the Airbnb but this is sick we have two posts for this user that's looking nice okay cool so now it's done let's make the lead post okay so let's think about how delete posts works so we have this x button and that's just to indicate X and then delete the post if I hit inspect right here um deleting post blah blah blah with ID of blah blah blah right that's just the static delete function we need to create the real one which is just gonna call the delete post function from here right so that's all good so we can go to vs code and one of the first things that we're going to need to do is add the event listener so this isn't the place where I want to be I want to be in global okay and let's go ahead and add that event listener for a delete post so here I'm just gonna say enter a little comment that says delete post event so we know and then we can get started which is const delete post event listener and that's going to be equal to program dot add event listening right again we're calling our program adding an event listener to it and inside we have to put in what event are we listening for which is the delete post event uh comma here and what else oh yeah we need to find the post that we're going to delete so we can go like this and do an arrow function and in the arrow function pass in the delete event and in the delete event we can do something like this set posts right to posts arrow and then post that filter right we're gonna fill through the posts and what we want to filter out is the posts that we want to delete so it's kind of confusing but we're gonna filter the array of posts and in that filter that we're applying is the post all right that does not equal post owner that equals oh equals delete event dot owner and post dot ID dot EQ for equals delete event dot ID right so basically look through the posts and get the matching post with the correct owner and the correct ID that I'm clicking on so that it deletes the right one so that's essentially all we're doing there and from here we need to add another return and say program Dot uh remove event listener and then you can pass delete post event listener cool so that's that I don't know if it's gonna delete just yet I don't know if double check and test if this works but what I do know is that we need to create that delete function in the first place so let's go ahead scroll all the way down create post and we can go right here you can say const delete post equal to you guessed it use callback which is a sync okay it's asynchronous um it's gonna have an error function and it's going to take an owner and an ID and this can go like this cool so if there is no user account I shouldn't be able to delete anything so that's why we're going to do return and then from there we do our try catch so let me just have catch which is simply just e and then a toast dot error uh failed to delete like something went wrong and we can console log the exact error by saying e Dot message okay and then in the try we're going to make our transaction hash TX hash and set that equal to oh wait program dot methods and the methods that we want is dot delete post all right this is the actual instruction in our program and it's going to take in accounts and if you're not sure what accounts it takes you can go back to our Solana playground and we can actually just look at it so what does delete post take it takes in two accounts post and owner that's it post and owner so we just need the post PK we can get that by saying post oh wait get post account PK passing the owner and the ID from here and guess what for the owner that's just us right so we can just literally pass that so comma here and this is the owner is the same as the owner account which we have access to and our delete post okay and then from there we have to do a DOT RPC so that it runs and then a toast dot success uh to post deleted successfully all right I think that's pretty good run from there oh we need to pass it down so I want to move post just for organization's sake put it right here and then say delete post right here and where does the lead post exist all right let's think about it oh we lost them oh yeah what happened where is my posts okay we somehow lost our posts so let's just double check that I'm gonna go back to my index and let's just erase the static create post and let's just do console.log oh yeah there's a static create post thing here let's erase that okay so our post isn't updating for some reason so that means we're not calling it so where's that use effect or fetching posts it's console log fetching posts okay so it's not running fetch posts but if I go back here it should so if I go back to fetch posts this use effect if there's no post and there's not right now based on the console it should run fetch posts but for some reason it's not um what do we have well post isn't nothing it's not false it's a truthy value so I think I know the problem so go to line 33 on my screen take out the empty array because that's technically a truthy value so that condition will never run and if I remove it we're back we're back with me awesome so yeah that's it so again that's like a small thing that would drive you crazy for days but just know that the way we have it set up is if posts is null or falsy fetch the pose until the post or the fetch posts changes right cool so there we go got that um yes so now what I was doing before was we set up delete post and I was testing this out I don't think you need this here nope you don't need that there we have the lead post now and delete post what I wanted to tell you exists at this X and where does that X live I'll tell you it's going to be in feed and in item right there is going to be the post header right because this lives on a header with the ID and in that post header right we'll find what we need so in the post header you'll see there's a static delete post here we don't need that static delete post we need to use our Global state so let's use our Global State you guys should know how to do this now it's const object equals use Global State and what do we want we want delete to post Comma just in case and instead of static delete post we want to regular delete post and we can delete static so let's hit save any errors nope cool so this wallet should be allowed to delete either of these two posts um let's get rid of this ball one because it's not as cool yeah yes okay we see this approved transaction good sign and we're getting our Solana back right this is what it looks like in Seoul but remember we manually calculated it with lamp ports so if we hit approve uh posted the delted successfully I spelled that wrong but as you can see post is deleted right so now let's work on editing the posts let's change the caption so you want to update a post to update a post you click this as you saw before and all you have to do is you know change it to rocket ship hit confirm so again this confirm button is running the update post function right and I'm going to error here because while it's not defined that's fine right we're supposed to fix this right so this edit model is the key right let's work on the functionality before we talk about that so for the functionality we're going to go back to the global and let's set up the uh update post event you know so let's go here say update post event all right so we can say const update post event listener is equal to the program again right because program has a builtin method that adds event listener and the event that we're waiting for we can say is update post event so if you get any errors here it's because it's not the same name that you wrote this is what I wrote so make sure it's the same so from here we can do um the async async Arrow and let's write the update event as the parameter and let's get to work so we want to do is this try catch catch e boom um yeah console log if anything goes wrong we'll get this catch error and you can say couldn't fetch updated post account and we can put the update event that happened and E for the error but for the try all right we can say const we need the post account to update it so let's grab the post account PK by saying post account PK is equal to oh wait get post no not like post account PK yeah this is gonna take two parameters which is the update event.owner and the update event.id all right cool and then from there we can do a const updated posts right because similar to delete we gotta find the post that we want to delete so it's to program.account.post.fetch and say post account PK that we grabbed and then from here we can do set posts to post similar to last time and we want to do a post dot map right so we're setting set post to an array that we're mapping through to create a new one which will be post yeah yeah there's a lot of nested functions in here but that's okay here with me you can do yeah so accept posts will be a new array of posts and it's going to look into that array of posts and map through it and for every post what we want is if that post dot owner dot equals the updated post the owner and the post.id.eq equals the updated post that ID then that's the post that we want we want that post in the new array and that's what we set posts to okay so if that's true then we can return um the updated post and under that we can return the post array as well and yeah that should be good for updated post now for the function itself all right we have to create that so we're gonna go under create user create post let me go in between these guys so say const update post is what guys use callback you got it and again this is asynchronous so set that up and in the async parameters you say owner ID and it takes in title as well and inside that function we have a check right our Edge case which is if there's no user count don't even run this bro don't sweat it we shouldn't update the post if you don't even have a user account uh if you do though let's try catch something all right E I like to set up my catch first and we can just do a toast.air uh failed to update the post and console log the error.message so I know what's up in the console and now we can do this so for the try well the same thing as usual we do a cons TX hash and equals await program dot methods and let's call it the methods that we want which is update post yep and update post takes in title and we can also dot accounts and again this is where you ask yourself what accounts does update post take if you don't remember check Solana playground uh if you know the top of your head I could tell you it's going to be an object of post and how do we get the PK for this wait get post account PK and that takes an owner and ID which we are passing in anyways then it just needs an owner account which we have access to and then a DOT RPC right and this title would be the new title by the way the new caption right same thing and then we can do a toast.success caption updated uh yeah that's pretty much it you know what you know you can also just console log the TX hash if you want to see the successful TX hash but again optional let's update post see if this gave us any errors no cool so now we need to put that here let's put that in between up date posts so now the question is where now that it's in our context where do we update our post so to update our posts I said that is in the item component yep the item there's action buttons here what are action buttons these are action buttons that's that component so click action buttons and Within action buttons you'll see um this font edit that's the edit icon and it runs toggle edit post model true what does that mean well it's this function that I passed down so let's figure out what this means so let's go up a level which is going to be item and we have toggle edit post model which we get as a prop from feed item which means we go up a level to that parent are you following with me up a level from feed item is index and let's see so an edit post model sorry in feed item we're passing in that toggle edit post model so what is that let's figure it out it is this thing right so it's a function that I pass down as a prop so there is still props that I'm passing down not everything is in my Global context and what it does is sets the current edit post ID and it opens the edit model open so basically it's going to click this and it'll open that model to make sure we see it so that means the functionality really just lives here and at a post model all right and we can tell because in the confirm button we got this on edit and the on edit runs static update post we want the real one so how do we get the real one under Solana stuff uh we can say const object equals use Global State and inside this object we can get update post come and what we could do is literally simply just erase static update post put regular update post you should be good to go to edit everything else is hooked up already for you right that's just basic JavaScript um oh and we can't do this can't reassign update post oh okay because we passed them update post somehow we don't need that okay so it should be good select Phantom and Let's cross our fingers and hopes this works edit so let's change our testing caption to uh another day on Mars and let's just add an emoji for fun let's do rocket boom I'm just gonna copy this in case something goes wrong I'll hit confirm and boom wallet is not defined okay right because this was here before now we need a wallet so do we have access to that in global state so this is troubleshooting in real time right do I have access to wallet here okay there's a wallet right here wallet right it's part of our connection so what we could do is actually just pass down wall like this so wallet and just so we keep everything simple and connected we can pass wallet up here it doesn't matter where you put it I just like to have the functions together and now that that's there let's go back to the edit post model we can get wallet so now we know what it is it's not undefined anymore hit save let's try again so edit post uh another day on Mars confirm failed to update post okay so that's something cannot read properties of to buffer okay so that's 218 and let's go 2 to 18 in global cannot read properties of two buffer okay so there's something with the get post account PK I'm guessing okay so I'm thinking it's just that I forgot to connect my wallet when we did this so let's refresh let's try again I'm just gonna do select wallet boom same wallet as the post so we should have permission to edit this and uh let's do another day on Mars confirm nice okay look at this so we have the signature request we can hit approve caption updated reading and negative oh that's not good if post ID updatable so successful but we have reading negative one through so there is something wrong with that event oh I know because we didn't remove that event listener that would probably help okay so successful let's try again so we're going to log in we're going to say another day on Mars but instead of another day another uh Tuesday on Mars so let's say confirm approve ah still reading negative if ID dot EQ reading negative but the post goes through which is weird now another Tuesday on Mars so strange let's take a look okay see um update post EQ is negative it should be true this post has to be true I'm just gonna rewrite it save let's just try again so let's refresh connect edit and we'll say back to another day on Mars so confirm like it works but there's just that weird error I don't know what's going on improve okay caption updated no weird error anymore I'm just doing more I just had to rewrite this update events which make sure everything's spelled correctly for getting any errors here and it looks like mine and you can refer to the solution if anything goes wrong so there we go we can edit a function we can delete so I added a function edit a post we can delete a post we can create a post now we need to like a post and unlike post alrighty so you want to be able to like a post that means you click this button and that post is liked right so how can we do that let's set up the functionality and what I'd want to do is set up that like dislike post event right because we have one post event for liking and disliking right or rather words like unliking something okay because you can't like something twice and you can't unlike something twice so that's why it's set up this way so we do like this like uh post event listener and just like before for neatness we can write this comment like slash dislike hot post event so we're gonna need to set this up once for the two functions we make later and we can set this equal to program dot event add event listener and we want to set up like this the first parameter is the event itself which is like this like post event and then the second parameter is an arrow function with a parameter is the like this this like event itself and inside is the functionality so inside what we want to do with this event listener is set posts right but uh we want to get posts first look look into that array of posts that we have and essentially oops hit enter here essentially we want to map through it so say post oops posts dot map the current array of set posts and for every post inside of that array now we want to this should actually be double parentheses for every Post in that array we want to check if it matches so if enter post dot owner dot equals so make sure I spell everything right this time like this like event the owner right if the one who owns the post um matches and the post dot ID dot EQ is the like dislike event that ID if that matches right then we can return turn the the all of those posts right this is called a spread operator so it's gonna get each individual post turn into an object and get the likes and the like dislike event that looks right this is gonna get that posts data and modify the likes based on the event okay cool but now the actual functionality of calling it is what we need to do next um there is a couple more things we can also do a return post here okay cool and notice how this one doesn't have a check so now let's just call it that like function so hopefully you wrote that right scroll down to here um oh I did forget a couple things whole point the dependency module one thing that I forgot was this dependency module and this is for program like that's the whole point of the used callback there's a second parameter I also forgot that here I believe uh this should be comma the user account based on the user account and I think that's the same thing for delete post okay cool all right so now we can go into a like post so say const like post is equal to use callback and from here we're going to do async so just like before set up an async arrow function like so and we are going to take in three parameters the owner the ID and what we call the Liker which is essentially the wallet that's connected um what else now now that we're here we have that edge case that we check which is what guys if there's no user account so you can probably guess what the dependency module is going to be for this so return and we do our usual try and catch so I'll set up the catch first you don't have to do this first but I just do toast dot error um failed to like post and console.log E Dot message so that I can see what's wrong and in the try we're gonna do the TX hashing it's equal to a weight program dot methods and what methods do you want to call you want to call Dot like post and it doesn't take any parameters there but it does need all the accounts that's what matters on this one and on the accounts we're going to need the like which is why we made all those error functions which is like oh wait get like account PK owner ID and Liker nice and we need the post which is going to have a way to get post account PK owner ID and we're also going to need the user which is a way to get user account PK which is going to have wallets and I did question mark public key again question mark of it optional uh I just want to ensure that this doesn't get become Dot Public key of undefined right and don't forget the comments cool and the owner is also wallet underscore I mean underscore question mark Dot Public key to ensure that it's not undefined at all and we can do a RPC right here cool and then if it's successful do a toast.uccess you liked a post because you did it you liked it and here comma and user account okay cool now we can add leg posts here and if all goes well we should be able to like post going back to this where can I add that like post button guys come on come on last stretch stay with me shake it off all right like like post is this button and that res resides where and action buttons exactly good job David all right cool so now we have the static leg post as you can see is running right here we don't need that we can just go in here don't need tip on that we need const equals use Global State and what do we want from here we want like post so erase this get this static like post data here and add the like post so let's save that any errors nope and now testing to see if it works if I click this wallet is not defined of course so we also need wallet so let's add a wallet in there so now we have wallet no excuses now code let's hit this oh okay so we're able to like the post uh we're getting a signature request but remember that when you see unable to simulate this it means there's might be something that's going to be wrong let's hit approve failed to like post and let's see why this might be like last time Mitch program ID was not as expected okay so that's that means there's something wrong in the way we wrote the like post so let's go test it out okay so I figured out what was wrong on instead so I figured out what was wrong I told you before that we need to export the idea because this is the way we wrote it right there was some discrepancies that's why we kept finding the program idea didn't match so just Ctrl a the new idea that you just downloaded and replace the current one with that new one and it should work now right as you can see this has one likes now right because it exists so let's just make a new post to change that so let's do Tokyo and I don't know what's going to come up next say create let's hit approve post created boom so there's Tokyo and now if I click like hey finally oh okay so we can see the soul right here to the proof and now it says one like instead of the randomly generated one and that that is done through conditional rendering as well so cool so we got some fire Instagram posts with one like now let's get the dislike button working which is pretty simple last but not least let's go down to here and let's create it okay and while I'm here there was another thing that I realized that we forgot to do and that was use this remove this event listener right here so let's go ahead and do that so we want to basically copy this say program dot remove event listener like this like post that's another thing we forgot and now you can see this isn't grayed out anymore so double check yours if this is not grayed out so here we are the final step boys and girls this is the cons this like post function so just say use callback and the best part is we don't need to make an event listener because we already did with the like dislike post event listener so finally let's just do an async anonymous function right here and it will take in an owner ID and a disliker okay cool well you don't know how long it actually took me to fix that ideal error and that's all you had to do but I'm glad it's working um there's the if check here if user account then you can do return okay and from here let's do a try and say cons TX hash and set that equal to await program dot methods okay so then from here oh let's call the function and say dot this like post and Dot accounts which takes an object of accounts and if you don't know what accounts dislike post instruction takes just look at your playground to remember but I can tell you it takes a like which we can do with weight get like account PK owner ID and this Liker okay and then from there you can do Post and do oh wait get post account PK owner ID um for getting the comma and the owner which is going to be a wallet Dot Public key and again the question mark is optional if this is giving you any errors saying like it's an owner that public key undefined you would just add a question mark here so again from there um yep so underneath that we can do a DOT RPC and underneath the RPC we could do tell us that success you unliked I'll post okay cool after that try we gotta catch just in case anything goes wrong I do a toaster error here and say failed to unlike post and console.log the error.message cool and then comma here dependency module user account help user account oh it didn't like the enter so let's just do it like this no Oh wrong spot let's actually go here there you go so save that let's get this like Post in here dislike post and where do we want it we want it in the action buttons right here so we can go to action buttons and within the action component uh buttons let's get dislike post and let's get rid of the static one get that out of there instead of static dislike post on line 25 for me we just need this leg post and it's already passing in the values that we want all right set up that way all right this was just focused on Salon of code so now let's unlike this Tokyo One boom look at that we're getting refunded Soul let's go and boom it's gonna go back to random likes or zero likes right that's just for aesthetic reasons but this truthfully has zero likes now right so let's do a cool thing just for fun let's like it again boom let's change our wallets so let's disconnect let's go to wallet number five which I know is already registered and look at that so wallet number five he's not allowed to delete this post because he didn't make it right there's no ownership of it but he can like the post so let's approve boom two likes alright let's go so that's awesome anybody can log on and like your posts or dislike your posts and people can't delete your posts and that's it guys we're done right that's it so congratulations you finished the Instagram clone you learned about seahorse and drop a comment below saying that seahorse is awesome and if you did let us know if you want us to do a full stack build right from the front end all the way to the back end and just be on the lookout for more Solana videos see you guys in the next video peace