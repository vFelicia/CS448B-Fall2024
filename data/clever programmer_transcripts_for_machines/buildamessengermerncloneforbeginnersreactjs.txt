let's everybody drop a comment if you're here if everything's going good how's it going good people what's good uh let me know and let me know guys if you're excited um let's start dropping in some comments where you're coming in from um who is excited and who knows what are we gonna be building of course so we are going to be building today the messenger clone with the mern stack now this has nothing to do with the facebook clone which will be at last time we will be actually uh doing another live with frankie on like stabilizing everything and getting everything aligned um in the backend sort of stuff uh this is going to be a completely different stuff this is going to be uh using the uh react build that sony did back in like i don't know a couple of uh months back so right now yo sheila is in a house hey what's up sheila so your gain up by 10 please oh my god that means i gotta speak louder because i don't have gain okay um so let's actually start the build uh i've dropped a link down in the description below um let me actually show it real quick i think yeah here we go so this is the youtube live stream that you're watching i'm right there nice and inside of the description i've put in this little link i uh now i recommend everybody going ahead and going on to this link because this will actually pop up in uh github where is uh which contains this starter project okay i see ho ho hi radu mihai unify hello david bros says techno park um rishi sikh uh where is sony or kazi kazi is lay he's in l.a sun is in london i don't know much more about them bruce bane asks do we build the front end from scratch or just the back end today we are just going to be focusing on the back end and how to connect it to the front end so guys what we were realizing is that full stack builds with front end and backhand actually take up quite a lot of time so we will actually be just focusing on the back end today and yes yeah i will be alone today hi from kyrgyzstan what's up back sultan nice to have you here hi hi man guys actually let's everybody start dropping in if it's the first time that you're building something when the burn stack hey ranyan qazi hi bro uh from bangladesh whoa what's up welcome dude um so yeah let's actually start dropping in uh who is who has actually built something from uh not from with the mern stack and and let's just know how uh how beginner friendly do i need to uh make this live build zimbabwe i would do twitch mirnstack sounds good uh hey from arizona yo what's up hello from morocco um hey david awesome to be tonight watching all the way from uganda nice job bro uh dope hairstyle thanks dude took me i think two years or something to grow this shot hey here from kosovo i'm in csharp but i think that i have the basics of js nice bro nice stuff yeah just started using the marin stack but already understand a lot that's actually awesome nicolas keep up the good work and let's master it together uh we got mexico in a house russian house high bro bangladesh okay nice so uh with that said let's actually go back uh hopefully i can change but yeah this is the way so uh with that said let's everybody uh jump straight into the build uh we will be you uh we will only be building the back end today and we are going to be using the uh react thing that sony and kaze build back in july something uh so in the description i've left a link which it says link to today's starter project this is the link that you want to go ahead and click and i will be actually showing you how to go ahead and download this project and work with it so with that said uh i actually have it open already uh guys actually let me know if this link does work i really hope uh i haven't forgotten make it and get it public but yeah so let's actually go ahead uh and everybody go to uh go and hit this um blue it's actually a green button and copy this link and what we will be doing is we will be cloning this yeah it is working thank you vlad thank you numan awesome stuff so let's actually everybody go ahead and copy this link and inside and and just go ahead and like create a folder so i will actually name it mern uh messenger build okay and i will open up a terminal inside of this folder i will zoom in a little so that you guys can see it better and what i will type in here is get clone and just paste the link inside of there now this should be going ahead and actually download everything from github awesome and we literally have our stuff in here now yo sunny we got sunny in the house how's it going bro um so what we will be doing from now on uh is literally setting up this project to make it work first and then we will be going ahead and add the backend to it uh yeah i'm checking i message sonny okay uh so guys let's actually go ahead and start dropping in if you or uh if you you think this is going to be valuable for you and if you like clever programmers build and if you think this is going to be good for you let's actually smash that like button to get this video out there to everybody uh all over youtube and let's show it to the world how awesome this channel is okay with that said let's go back and install all the dependencies that this react build will require now what i will do is literally just type in ls which will list out all the stuff inside of here and then copy that type in cd and then you will enter into the project nice um what we want to do then is just type in mpmi which will go ahead um and and install all the dependencies as you can already see it's installing uh bono says with that said sounds like listening to sonny nice that's my goal okay so now we are literally just installing all the dependencies and this is going to run for a while now uh during that time let's actually go ahead and start setting up mongodb guys who have used mongodb before drop it in the comments drop it if you know what mongodb is and yep let's just go ahead and start up our mongodb for today so all you need to do up here is literally just sign in if you have an account uh if you don't that's not a problem you can uh hit this start free button and that will uh just get you set up and whoa we just got our first donation by sumit thank you so much dude for this awesome donation uh he says let's keep going yes let's go let's keep it up bro okay yes it is a nosql storage uh uh akshat awesome yeah it it it is okay now let's go ahead and let's sign in let's create our mongodb uh okay so i'm just going to go ahead and sign into mongodb and let's actually create our database instance guys who is excited to hook up the messenger clone that sunny and cozy built back in july to mongodb with the mern stack drop it in the comments and let me know all right so now what i will be doing what i will do oops uh what i will do is go ahead and click there which will open up all my current projects and create a new project love from bangladesh yo and we got another donation by waffy muhammad thank you so much dude really appreciate it okay uh sanjar asks can we use for ecommerce totally a hundred percent yes you can use mongodb for exactly uh for literally anywhere uh for anything okay let's go back to our project name your project uh i will be just name it i will be naming it uh messenger clone live nice this is the place where you can go ahead and add another member but we are not going to do that today so i'm just going to go ahead and create a project um yep and with that we literally created our mongodb database i mean not the database it's just the project so guys if you actually are excited uh let me know in the comments and smash that like button that's all we ask from you okay let's continue now i am actually gonna go ahead and create a cluster and that with that i just need to um hit that javascript button then the continue button might not be showing up for you but for some reason it always asks me now uh here are like three um plans that you can choose from let's go with the free one guys we are here at cleverprogrammer trying to show you as much free stuff that you can go ahead and earn money with as possible okay so we are not trying so we are never ever showing you stuff that actually requires money sometimes we need you to add your credit card but that will never be charged yeah magalita code says sending lump from zimbabwe thank you so much and sending love from clever programmer i guess okay let's go ahead and create our cluster okay now on this screen we literally don't have to do anything let's just go ahead and create our cluster using that button we can leave everything the way it is all right and with the click of a button we just have our uh database storage and cluster built up for you for us which means we have our database guys who's excited who's pumped let me know in the comments hey muhammad another donation dude this is not it's not even the first one thank you so much let's keep coding exactly my point all right so now it's going to take a little time uh but by that time let's go back to our uh react front end which has actually finished up installing okay um i'm just going to go and a folder up inside of my terminal to my whole project folder and then open up vs code uh in that folder nice okay let's actually see by the way how uh how it how the uh how the how our application looks like because that is what we will be using throughout today's build and this is what we will be using to add all the stuff alrighty now uh what i will be typing here is npm start which is literally just going to go ahead and fire up our database uh not database our messenger clone which was built by sony and qazi and let's see if it actually works or if we need to do something about it okay it's taking a little time to load but i think we are actually pretty good and yes project id is not provided in firebase initializer yes that is right because if we check it in our code uh we have a firebase.js which let's actually go ahead and zoom in so that you guys can see let me know if you go if if i need to zoom in more um i think it's good by the way okay so why why it's not working that's a pretty good question um because we don't have firebase hooked up right so now let's go ahead and everybody uh if you guys have already the firebase project let's go ahead there and grab all the config stuff i'm just going to create a new one so guys if it's the first time you're building this thing no problem we got you okay who actually has this uh has built this um this messenger clone drop it in the comment sections let me know guys uh if you already have it yes at config uh that is right that is what's missing okay now i'm going to head over to firebase.com uh go to the console and actually i have it over here so i will be just using this one but let's actually create a new project so okay guys let me know who has this project already uh so i can decide whether to create a new firebase project or go with the one that um that i already have okay dinesh says yes i did okay um yeah uh i think it's better for all the beginners to go with a new one so i will just type in mern messenger nice and i don't need google analytics so i will be just going ahead uh and create the projects uh while it's loading um lavish asks uh can we use firebase for productions yes you can uh with this app is perfectly working with just firebase and no uh martin stuff and all those uh fanciness uh but we guys here just wanna provide you as much value as possible and if you actually agree with that and if you have got value from either this or any of our previous builds let's just smash that like button and get this video out there to everybody all over it's youtube so everybody can start and learning with us okay all right uh i will remove this command nice and matrix asks are you using firebase for authentication uh today we are not going to be authenticate anything we will be just popping up an alert and that is where the person will be able to uh drop their um names and yes we are going to be using pusher for real time okay um nice awesome uh actually i think i can even show you guys this uh this this this project that i've built at fi at my firebase okay so guys actually if you go ahead and go to this link this is the build that we are going to be building today okay so i'm just gonna go ahead and type in david and uh i think we nee okay so my heroku is actually down at the moment because um heroku is always going down after a couple of minutes of inactivity but we will take care of this today we will have a new heroku instance that will be up and running okay nice is firebase easy to set up that's literally the easiest thing to set up simple as that so we literally set up our project so okay let's go and create our project let's hit that web icon uh over there nice and let's actually hit it and now i'm just going to type in mern messenger oops i forgot to hit setup hosting as well uh yeah i will be um i need to i need to go ahead and do it again uh i will just add a new app which will be a web app sumern uh messenger clone so guys this is a super important thing you definitely need to go ahead and check that um check that box that is something that we will be we will need so guys we will actually deploy this application live um so yeah we need to have hosting okay messenger okay uh prashun asks what is the difference between react and mern so react is actually front and right library while mirn stack is a full stack thing so mern actually includes react with the mongodb with node.js and with express.js on the side okay who's excited guys smash the like button let me know inside of the comments if you're excited and let's go and set up our firebase okay let's go to console you can just go oops you can just go ahead and click next on everything exactly react is a frontend framework dhdmat says right um okay so now what i want to do is go to this little icon over there and hit the project settings scroll all the way to the bottom hit config and then grab just the stuff right so notice that this and this is not selected only what is inside of here so only these stuff are selected okay this is very important now with those selected let's actually go back to our code and where i've already put this comment here that your firebase credentials go here that is where you want to paste this stuff now if we check it out it should be uh good at any time so if i go ahead and type in david nice we actually have it working okay and i think everything is covered in here um one thing though we have to uh initialize the database inside of here uh to make that app that you've just downloaded from my github uh working but we are not going to worry about that we are not going to use that at all so hello papamurn thanks dude uh yeah so we are not going to worry about firebase today um we're just gonna strip out all those stuff and we will be building the backend stuff now uh let's actually close it up we are not even going on going to need this this is not even necessary for today's build uh yeah let's actually close these and open up a brand new folder inside of here oh not in there um inside of the project yeah so you want those folders to be completely separate uh because we want that to be the back end right so it's going to be a different project inside of the other project i guess okay messenger back burn this is how i will name it so notice that i have two different uh projects i have the backend and i have this starter project okay so we will be using the starter project as the front end and we will be building the back end just today in this video okay stick to the very end if you want a fully functional mern stack messenger clone now with that done um let's actually open up our terminal inside of there and let's dive in let's just uh go ahead and cd into the back end project right because we definitely want to go ahead and create our project inside of there right now who's excited who is at this part already who's here with me uh on when i've just created the backend project and i'm right in front right before uh creating the whole project right who's here with me let me know in the comment section uh let's actually engage with everybody let's have let's make this like kind of like a conversation or something hello from romania hi radu what's up perhaps i should rename them to just front and back and yes you can definitely do that vlog so guys if you're with me uh and if you're just at the same point where i am let me know inside of the comment section okay are you going to connect to the database do yeah where it's just the client side frontend project yes i am connecting it to mongodb that's why we have already set that thing up yes i'm here uh okay everybody is here with me nice then i will be going ahead so what we need to do now is two things we need to initialize our backend project right and the second one is initialize the back uh git version control we will need them both uh joe says i haven't made the front end but i'm here to learn the back end of the project nice nice stuff uh if somebody is just like joel and haven't made the front end uh you can go ahead and download the uh the frontend stuff from the link inside of our uh inside of today's video's description you can have it and you can work with that but i also highly recommend going back to our uh to the youtube channel and checking out sonny's live build on that video uh on the actual um messenger clone which is somewhere down here uh we actually made quite a lot of builds uh yeah so it's actually it's one of the first builds uh we can see qazi announcing the april winners here and this is the video you want to check out if you haven't built the front end yet now uh you can actually proceed in this video without that so yeah let's actually go back so let's start our git version control uh and i will be just typing in git init and that literally just enabled uh the version control and now i'm going to type in mpm in it not gnome npm in it nice and this will literally just throw a bunch of questions at me nothing super serious stuff we just want to go uh go pass through this stuff and just leave it that way so messenger back end as uh as the package name is a perfect thing version okay description no need for that one thing though uh you need to watch out for is entry point now entry point is a super crucial part uh you want to type in server.js it's more like a naming convention stuff but index.js is just doesn't look good in a backend project right test command don't worry about it get repositioned don't worry about it keywords don't worry about it author i'm gonna type in david close it's my name license don't worry about it and just go ahead and click okay if you check this out and everything matches now i'm just gonna make this terminal a bit shorter and we just have our packet and a backend package initialized with this couple of stuff and now guys you literally have a backend project how awesome is that drop it in the comments let me know if you if you have already got value out of this video let me know and just smash that like button that's all i ask okay let's continue uh inside of package.json we need a couple of modifications to enable es6 because guys we here only work with the newest technologies and esx is one of them so we are actually working on super hard to get 5 thousand developers uh jobs as the uh five thousand people jobs as developers in 2020 you might be thinking that 2020 is is not a good year it actually is for 5000 people because we are helping them get a job as developers and we are actually pretty far in that so we want to teach you the most newest the newest technologies so let's stick with me and let's do the backhand build with es6 okay um i'll just hit a glance on the comment section yes everybody is excited nice okay i want to currently in front of you.js go ahead radu uh literally you can do whatever you want with it you're just gonna learn nice okay let's actually go here and just type in type and select module and this will allow es this will allow you that you write es6 snippets inside of this project and another thing that you want to go do is inside of scripts you want to add the comma after the tests and add a start script which will be node server dot js and what this will do is literally let you and and help uh heroku where we will be deploying this app by the way so it will help heroku start this uh startup server side application up and it will be running so we need this start script going on uh katherine patel asks hey i'm new can i learn everything related coding from this channel yes that is literally our goal with this channel to help you guys learn and help you guys land jobs as developers 5 000 this year and 10 000 next year so all you need to do is put in the hard work and you literally are covered okay um yeah could i start effects you using your videos definitely you can of course you can overshaw okay now uh package.json is essentially done for now uh we don't we are not going to need that anymore but what we will need is a new file oops um called server.js inside of our backend project nice okay so let's add the server.js file inside of here and this will essentially uh help us run every backend stuff going on so uh let's actually mock out how we will be uh working and let's just add the milestones so we will be importing our dependencies dependencies and next up we will configure app so app.config goes here and we will have a couple of middlewares we will have db config because we are hooking it up to mongodb and we are also have a couple of api routes and we will have a listener whoops listen nice oh someone from facebook says david rox thanks dude appreciate it a lot okay you will be using one repository for your project i actually have one project folder set up and inside of the project folder i have two repositories can you send full project here um full frontend project is just under under this video maybe yeah i think that's the direction um just check out the link links inside are there actually there is one free webinar in the description as well as a gift for you guys it's a completely free training it's going to show you lots of stuff so i highly recommend registering for that like literally pause this video register on that webinar and you can you can just watch it right afterwards it's gonna be jampacked with value and you also have the um free uh what's that messenger front and build nice let's go back and okay so what we will be doing is first we need to install a couple of dependencies here uh i will be just typing in a bunch of stuff uh so first we need to uh install express because that's the server side uh javascript that we will be using so let's type in here mpmi which essentially means npm install and npm is node package manager so i think i've said everything nice okay so npm install express and we will be using mongoose to connect to our database and we will be using pusher to make our database real time and we will actually add the course here as well because we don't we we want to uh may be able to connect to our backend like super easily let's actually jot down a couple of stuff and i'm just gonna show you how it all will look like so uh yeah i think okay so the front end is going to be this box uh front end nice and we are actually using react here which is uh built by sony uh built by sunny whoops goodbye sunny and quasi so you guys have that part in the description down below the other part is going to be the back end of course we where we have things like this node.js application um node.js and express js nice and we also have mongodb which is an awesome nosql database so mongodb goes inside of here okay um actually who's excited who's excited to have this project on their portfolio who wants to put this mern build on their portfolio let me know in the uh comment section down below let me know if you're excited about this let me know if you want to get a job as a meringue stack developer i would love to see that i prefer i prefer relational database radio you use whatever you want to use i'm just going to show you a bunch of skills that you you need you actually can learn and and then you can just choose whichever you want to go ahead with yes i see a couple of uh comments coming in here everybody is super uh excited awesome stuff okay let's go back i love node.js yeah i want no sql database to learn both and then you will know which one you would like better okay uh boom and with the whiteboard back nice and between this stuff we will actually ha we will make api calls uh from here to here so this is literally like exchanging data between these stuff okay this is how essentially our application architecture is going to look like and yep that's pretty much it and what we also want to what i also want to let you guys know is that we will be using mongoose to connect to our database oops uh i forgot to yeah okay mongoose we will be using mongodb of course and we will be using pusher and these stuff are actually all together because this is all database and we will also use uh node.js which is a backend javascript runtime and we will be using express.js as as a backend framework right these are the stuff that we will be using on the backend side nice so with all so now i showed you guys told you guys everybody should be able to know uh what we're gonna be doing okay let's actually import all the dependencies first we need to install them and why not why not use django for the api we are going to use javascript today um i think we can actually make a couple of videos in python i'll i'll talk to the guys and we'll figure it out okay express is awesome yes that is correct why not socket io i mean we could use socket i o but that's just too much headache to set up so i think pusher and and mongodb is a lot easier and you will actually see how awesome it is okay um nice okay let's actually go ahead and import all these stuff that we have just uh installed and this is actually i have this snippet of snippets of code um ready so i'm just going to go ahead and copy paste stuff here and then you can watch these videos back on your own page but i will be explaining everything live so currently we are importing express we are importing mongoose we are importing pusher and notice that here i am actually importing it with a capital oh sorry with a capital p and all the others are not capital right i just want you to notice and notice that and make sure that you know uh make sure to know how you will actually uh import these stuff i'm just going to zoom in a bit more so can either guys can see it better and okay i think the video is now better okay awesome uh bd gamer says i'm working in infosys i am using node.js nice dude i love node.js keep it up okay what we will also be doing is create an app config and we will literally just create a variable a const which will be an app and that is going to be an oops and express so this literally creates our app instance okay please explain about pusher i will explain everything about pusher a bit later when we're actually making the whole thing real time but pusher is good to make uh this stuff real time okay and another thing we will be use we will be uh setting up as uh in oops as an app as app.config is the port where our application is going to listen now also we need to define it like this so we will add the process environment port which we will be setting to 9000. can i mix firebase out with backhand side yes i'm sorry i had to uh stop uh explaining because this is such an awesome question yes you can mix firebase authentication that's what we usually do because setting up uh backend authentication is like crazy um so we usually just go ahead with firebase authentication now we actually are going to make a video on normal backend side authentication as just as a comparison we will show you uh the firebase authentication in that same video so you can just have an idea which one to use and when well which one you like better okay um let's go back and let's actually um understand what is going on here so up here i've created an instance for my application which is going to be an express application and the process environment port ooh process environment port is going to be 9 000 um and that will actually that that's the port that we will be using to uh call our application syed muhammad says i'm a beginner would someone suggest me some good morning stack course this youtube channel is your one stop shop uh if you want to learn learn okay and what we will be doing as well is i think we first let's just create a hello world uh api route and what we will be doing is say app.get and on the root if there it's gonna fire off a callback function which will have a request and a response param and if we call this with the get method we will be just setting the response status to 200 and send back hello world now guys what is this doing because there's probably a couple of beginners inside of the comment section i want to actually help you guys understand what's going on here has quite a lot of stuff so app that is the instant that we just created and the get is actually a method that you can use to call an api right i'll be explaining it a bit more and you will see that get is essentially downloading data from the server and we will be using post today and that is uploading data to the server and we also have put which is replacing data on the server and we also have delete which is i don't think i have to uh speak too much about it this is going to be the endpoint so i'll be showing it a little bit later uh what's the purpose of this part uh this is the function that we will be firing off and these are the parameters so there's going to be a request and a response of course and this is what is going to happen if we call with the get method on the route nice and and we will be just setting the result status to 200 which means okay and we will be sending back hello world that's literally what we will be doing here and inside of listen we just say app go ahead and listen on the port and fire off this function which will console log listening on localhost and oh i used the wrong quotation marks so i should have been using backticks here okay let's actually did everything so what you want to do here is literally just give you give yourself a bit of a feedback that you have started your application correctly so this file this will fire off if your application has built and if it's ready to run okay what you want to do here is add a pair of tactics and say listening on localhost oh and add the stuff here and type here port which will just concatenate the string now guys who thinks this application is actually working let me know in the comment section let me know uh or let me know in in the chat if you already got value out of it and smash that like button if you already like it all right and we will be using something called nodemon to fire off this application and we literally have it running so you can already see that listening on localhost 9000 that means we have it running guys this is nice stuff and now let's go ahead and open up an application called postman which is for some reason not open for me uh and what we will be doing is first i'm going to zoom in so that you guys can actually see uh boom these are by the way all the api routes that we will be having so we will have a safe message and a retrieve conversation so let's go this is going to be the health check if it works we have everything good guys actually great job this is actually working i think that deserves an air horn nice job who he who is actually here with me uh with their first api route let me know in the comments let me know if you guys are here with me and if you guys have successfully built your first api route that's actually a great job okay let's go back um okay what we are going to be doing today yes alex says me myself okay myself says let's go yes let's go uh okay how can i speak to you privately uh actually dm me on this instagram link which is over there okay this is where i am yes i'm here says ma doma okay this is awesome nice okay here with you i'm just watching man i have a terrible toothache oh my god get better soon um okay let's go back nice tutorial thank you so much alexandros with the plus signs nice you're you're texting from a terminal right okay greets from israel hey hello um okay now um what we will be doing is going back to our mongodb database this is usually done by now this usually uh takes a couple of time takes like 10 minutes or so to set up what we will be doing is oh this screen brush is actually blocking the view uh hold on in fact no i can't um let me let me go ahead and without toolbar yeah okay so we will be setting up the database access and the network access first let's go with the network access um high screen brush nice uh so we will be going into the network access that's the button that you want to click and we're just gonna add an ip address and we will click allow from anywhere normally and this is a huge disclaimer that i've done last time so this disclaimer do not do this in production environment do not do this when you're working with a client you don't want to allow access to your database from anywhere because that means you could literally let anyone go in there and mess up your application okay but for the sake of this um this tutorial i'm just gonna go with allow access from anywhere okay nice uh i'm just gonna go ahead and hit confirm and let me know if you are with me and if you have your mongodb ready and if you've just set up allow access from anywhere i like so much working on mongodb nice mango db is actually a really powerful stuff okay um okay now let's go back let's go to database access and let's actually add a new database user now guys hear me out this is a super important part uh because now we will be setting up a database user that we will be using to connect to our database okay um there is actually some stuff that you want to make sure of one of them is auto generate password that's actually a good thing to use but if you use that you want to go ahead and show it and save it somewhere safe i am using offred so i have all my all my snippets from my clipboard for the last three months over here so i am safe this way but guys if you're not saving this password you're literally uh not gonna be able to retrieve this password anymore i'm just going to hype and type in admin and there's nothing else to do here you can go ahead and hit add user okay nice um guys who is with me who has done who has set up the network access and the database access if these two are done and you see this blue thing going on up top that we are currently deploying your changes that's actually a really good place to be because now we are able to connect to our database so guys let me know in the comments if you're with me or if i need to go back to something and yeah after completing the studio can you give me a description to download this project uh yeah i think so i think so okay let's go ahead and click connect and it will just prompt you this page and you want to go ahead and use this connect application i see pankaj gupta is just watching that's actually good vlad is uh following me along awesome uh if you guys are just watching that's not a problem it's all good but then make sure to come back here and see it again prashun asks what is mongodb um this is literally just a database so it's uh that's the simplest way to put it uh of course we are not gonna be using on sql here because sql is kind of a headache but we are using a nosql database um and that's just so much nicer and easier to set up and we will be storing our data in there all right with that done let's hit this connect to connect your application button over there okay um we got our uh login or the connection string here the uri you want to go ahead and copy it but notice that the password is not injected in there that's why you had to save it somewhere safe and also the db name is going to be up to us let's copy this and go back to our code now let's go to the db config part and let's say mong uh i've just imported something excellently let's delete that and so on db config what you want to type there is literally just mongoose the connect and and actually let's save it to uh let's save it to another variable let's create a const uri and let's type let's just add it in here so here we essentially have the whole connection string that we just copy pasted from mongodb this is where the password goes so you definitely want to uh replace that and the db name should be i think it could be like i don't know messenger db that's actually a pretty good name and what you want to do inside of here is just type in uri with this your application is almost done i mean no the connection is almost done but let's pass in a couple of couple of years creating next night let's pass in a couple of parameters for this connection and these are just necessary so that your mongoose will will work better okay um i think with this we should have an application we should have the database connected but just to make sure that everything is up and running let's actually type in here mongoose dot connection the ones oh and if it's open you just wanna go ahead and fire off a function which will essentially console log db connected now what this does is this is just going to give you a little feedback that your db is connected like uh i don't know if you guys can see it i hope i hope so um oh no my fl i'm actually blocking okay i'm gonna move myself over there and i just okay so that's the line that you want to see if you see that that means your database is connected so the line that we just added is literally it's like reading english so once the mongoose connection is open console log db connected okay um in vs code you can yes exactly you can use them and reuse them google it um actually googling something in programming is a pretty uh pretty good way to go about and what is this message in the terminal the ems esm module loader is experimental um that's a good question so let me let me just go ahead and show you guys what is he talking about this is the message so this thing means that es6 in node.js is actually in experimental but soon very soon oops very soon it's going to be the trend and that is going to be the requirements for the jobs so we are still using it in the experimental state so that you guys can get the most value out of these tutorials and you can actually be one of those 5 000 people who get jobs as developers in 2020 because 2020 is a good year okay googling is the way to learn something new that's that's literally it let me make it big because that's literally it what's the difference between firebase and mongodb firebase is a hybrid of sql and nosql databases and mongodb is just nosql okay i hope that um answered i really hope actually everybody is getting the most value out of it so if you if you're getting a lot of value of this video please let me know by smashing that like button like literally go ahead and destroy it um and if you guys got value out of this channel and we are actually at 280 286 likes guys make it bump up to 300. let's go and smash everybody um let's put it up to uh 300 nice uh mohit says smashed and subscribed awesome you will not regret it how to use instead of require how to use import instead of require um i mean i've just showed you let me go back to my code and yes we are above 300 thank you guys awesome and how to use import instead of require yes i'm just going to show that um okay boom so guys if you have missed it oh sorry okay here we go um why is my vs code acting up okay we don't need that nice okay so what i've done uh to make it work is i went to the package.json file and added this line of code this enabled es6 and import instead of require and stuff like that and inside of here i just use the used import instead of requiring it okay now uh one thing okay so we have our database connected that's actually awesome what we need to do now is create our um database uh what you call it database model yeah that's the word so uh let's actually add a new file inside of our backend project and we will just call that message model.js oh um i called it jazz that's not working okay so we are going to be building a model for our database this is literally just a schema or structure of the data that we will be adding inside of our database uh vlad says it doesn't work for me um drop me a message on my instagram and i might be able to help you okay um let's actually import mongoose oh yeah mangoes from mongoose and because that's how we will be setting up our schema and what we will be doing here is create a cons oh const message schema and it's going to be a mongoose oh mango mongoose the schema nice finally and inside of here we are just going to have these three parameters which is username message and timestamp and all of these are going to be strings which means these are going to be text um accidentally imported mango again you don't need that we just need mongoose and what we will be doing now is basically export default and we will say mango mongoose the model and now guys this is again a place where you don't want to um what you don't want to mess up here goes the collection name that we will be using now make sure that you write something plural in here because no mongodb is going to actually polarize it no matter what and when you are working with pusher uh it's not going to work and this is going to be the reason you have to put in plural things uh so we would just say messages and messages will be the collection so uh collection in nosql is kinda like table in in sequel so i kind of like to say that these are not equivalents a huge disclaimer again i'm just trying to explain it a bit better so in in in sql you have the big table and inside of there there are records in nosql you have a collection inside of a database and inside of a collection you have documents and the documents have actually fields right so it's kind of it's kind of equivalent but they are actually not um okay now mango is not moto and messages is going to be the um uh collection and we will add the message schema in here uh pankaj gupta says sequel has a structure we have just created a nosql structure my friend so no sql can have the structure as well okay if you're at this point you're good to close this file we will not need this anymore uh that import was a typo i hope it's not on my screen okay um yeah i think yeah so with this done guys actually let me know if you guys are done with the schema if you have a nosql structure in front of you and if we can go ahead okay uh yeah i'm gonna go ahead and go back greetings from peru what's up milton um and let's go back to server.js this is this is gonna be the juicy part so if you guys are still here with me and if you guys enjoy this video uh let's actually everybody go ahead and smash that like button like destroy it like like this is what you get uh like button should see uh like literally destroy that like button because we are trying to give you guys as much value as possible uh so let me know guys if it's actually helpful for you and if you enjoy it and if you're with me um done with the schema let's go back to our server.js and what we have and let's actually import it as well okay let's go up here this is where uh we all this is where we import all our stuff so i'm just going to import it as messages and we will be using the uh messagemodel.js file for it okay um okay let me actually check the comment section my bad no pankaj we are here to learn that's all okay um awesome awesome so guys keep the chat positive we are trying to stay very healthy we are trying to build a very healthy community here um so let's actually let's just we are here to learn we are here to teach each other some new stuff some cool stuff so okay with that done let's go back and let's create our um save messages uh endpoint let's go back to api routes and in the new row we will be saying app.post so you remember post is literally is essentially just uploading data to uh to the backend to the server so yep and this is where we will be defining the endpoint oh josh says i really love this channel thank you no dude thank you and make sure to stick with us stick to the end of this video and hope you will get the most value out of it all right um nice okay um so let's actually create our endpoint and it's going to be safe slash messages because this app is actually able to scale up to save images and to save separate conversation rooms guys if you actually want to go ahead and create separate conversations because this will be just one conversation app let me know in the comments and i can come back with another build where we add all those features so it will have chapter features and uh image sending features let me know guys if you're interested in that and we will be doing that too uh yeah okay let's go and add the callback function which will of course have a request on the response parameter and what we want to do is right away save whatever we got back uh in the request body i will be showing what that is but just let's actually um just go ahead and do it and i'll explain everything a bit later so we will be creating a const which will be a db messages yes everybody yeah replaces yes let's do it uh definitely yes uh i am interested awesome we got facebook user who says yes hey facebook users i'm interested uh okay that sounds cool awesome okay that's cool nice okay okay um yeah so let's go back to our build uh i i saw a zoom please so i will be zooming uh i hope you guys can see it now uh so let's actually without further ado let's go back and save whatever we get from the request body so db message will be request body right that's pretty much it we have just saved new message into a variable now what we need to do is save it into a database and that is going to be super easy because we are just going to say mess oops mango messages if i learn typing that wouldn't that bad okay i've imported it again accidentally and mango messages is actually this thing that we just created as the schema right so this is the thing that we import here and then use it here so mango messages.create and this is where we are gonna just pass in the db message that we just got that's gonna be the new message when you hit send this is gonna be fired off and let's see if we got an error or everything is fine uh as a callback function and if we got an error we will be setting the response status to 500 and send the error back and else we will be sending the response status 201 which means created and everything is good that's kind of like 200 but 201 is used when the method is post and we're just going to go back and send the data okay we got 217 people with us let's go guys awesome robash asks can we add the delete feature today um you can add a delete feature and let me know uh on my instagram which is davidracosi.js send me a message if you've done that and we can do that uh in the next video all right nice and we should be able to save a message let's actually go ahead and test it out boom nice okay uh let's save the message and this is where we will be adding the body and i actually got a yeah um because he says damn nice or actually let's say this is working and kazi loves the rocket uh emoji so we will be using the rocket emoji or uh yeah and let's hit send and for some reason there is an error and it says save message oh because i've used plural plural here let's remove the s or add the s there and okay something is still not going well oh my god there is a bug let's fix it okay um let's see what we got uh this is when the debugging starts so i will be zooming out a bit and what we will be doing is let's actually console.log the db message so that we see everything going on message model says username message and timestamp that's good we are importing it okay okay i just found out what i've meant uh what i forgot guys middlewares it's a super important thing middlewares if somebody has watched i feel that energy let's go exactly actually sunny and i are planning actually everybody else who's coming live on this channel we are planning to add more like features like that whenever like if there is a bug like boom let's turn everything into red so guys if you're excited about that let me know um so what we forgot is literally the middlewares and these these are literally like two lines of code one of them is app.use expressjson and that will allow us to process json stuff and the other one is app.use course which will be just adding the course headers so everything is going to be smooth and all good okay um yes uh replace with uh rookia asks um we use postman just to test the apis right that is correct and to fetch the data in our project we use to replace with axios yes we will be using axios um but just later on when we connect it to our front end okay boom um let's go back and let's test it out again okay now that we got it working that's the thing that i also always forget boom there we go uh now we will actually need to go ahead and remove that um empty stuff from our database because this is going to be just there and be like rubbish and let's now actually create the api endpoint that will retrieve the data we don't need this console log anymore because i've just debugged it so the other thing that we will be doing is say app.get and retrieve and it's going to be conversation we are literally retrieving the whole conversation using this api endpoint whoa windows 40 96 is here hi love from canada yo hey canada what's up um from croatia what's up croatia and is this nodejs or express um actually node.js is a runtime an express is a framework so it's actually both okay um did anyone format the api response um api response is kind of like set by the data and the data is kind of is set with within here so you will be getting back this data structure that's how you can customize it okay awesome so we have the retrieve conversation which will fire off the usual request response parameter parameter callback function i think that's the correct terminology um yes thank you for the typo uh we're responding to right typo retrieve i think it's good now let me know if if it's good now um i think it's good uh thank you for spotting the typo by the way uh okay and let's actually say messages dot find and inside of here you could literally like search for um search for stuff like search for specific conversation parts uh but we are just gonna retrieve the whole thing guys as i've said earlier i'm actually planning to um make another video on this and yes we will be using react uh so i'm planning to make another video on this with adding chat room support and attachment support okay so inside of here we will have just the error and the data and i'm going to just literally copy paste this part of the code and set it to 200 because that's literally how that's literally all we need okay muhammad ahmad says good vibes exactly we are trying to keep up the energy guys if you're still here still here with me smash the like button and wake up and let's actually stretch because this is where like the juicy part is gonna come we have just created our um database stuff and the backend stuff is essentially almost done we will be coming back in a bit but let's just take it away uh take it away uh for a bit and let's test it the retrieving function out and yes that is there we go this is working now guys we can literally go ahead and let's set up the uh connection between the front and the back end who's excited who is here with me who has their backhand done let me know guys if you're here with me and if you have done your back end okay um boom uh where is my code there we go lots of likes i like that yes me boom there we go um is next yes hard to learn if you know react no it's not that much hard to learn uh actually ask sonny as well oh yeah okay um so what we will be doing here is let's actually close out all these two stuff and let's go to our front end and inside of app.js we have all these stuff going on but what we definitely need to do is uh is install axios so we will be using axios to access our database and access our back end right and we still have 200 people with us that's good okay so let's go ahead and install axios first and then we will be moving forward from there um okay let's open up the terminal let's create a new one and let's actually go into the starter project that i've gave you guys and i'm just gonna go in and type in mpmi um we will be typing in axios and that's just literally going to go ahead and install it and in the meantime we will be creating an axios dot js file to set everything up and running and execute the js file is kind of we will be just creating an instance uh to retrieve all the data and to actually shoot inside of our backend right okay let's close it up we're not going to need the terminal for a while and let's say import axios from axios okay nice and now we are gonna go ahead and create our instance so const instance equals axios dot create oh create and inside of here we're just gonna pass in the base url which is essentially because we are only have it in our local environment for now we will be deploying it in just a bit stay here with me if you want to have it deployed so in the base url we're just going to say http column slash local host and 9000 is the port where we have our server running right okay and of course we need to export default uh as a default the instance here we go we just created an axios uh instance guys who has an axios instance drop axios and the fire emoji in the comment section if you have a um if you have an axios instance let me know i'll be waiting here for a bit uh and yep that's pretty much pretty much about the axials and whoa we are at 364 likes guys if you find this valuable and if you're with me with an axios instance ready smash the like button like literally destroy it and we can spread this video out to literally anybody all over youtube because the algorithm is gonna know that this is some good stuff so if you think this is some good stuff smash the like button so that other people will be able to see it nice awesome okay let's actually go back to our code here we go and what we will be doing is essentially just uh removing all these firebase stuff first because we're not going to use that anymore uh so let's actually start here up here uh from the importing section so notice that uh line five and six are not needed because we are importing them from firebase no need for those stuff um by the way in the back end if you have your front end running it's going to freak out for a while um but it's it's all good uh we will make it work okay um how do you get how do i get those techie emojis next to the next to the file okay um i think it's it's an extension it's one of one of my extensions oh i think it's some icon stuff material icon yeah i i think it's this one and it's just going to go ahead and yeah this is the one the material icon theme okay let's go let's continue with the build so we will just go ahead and create a function which will be responsible so let's actually get rid of this use effect we're not going to use that anymore um and let's actually create a sync function which we will be using to retrieve the whole conversation and what happens here is that whenever this it's actually going to be an async function by the way so whenever this sync function is fired off it will be waiting until it gets a response from the retrieve conversation uh endpoint from this uh axios instance right so the full link that we will be fetching is going to be a local host 9000 slash rate retrieve slash convertation i forgot the time uh rahul asked i hope this would be available to watch later yes it will if you cannot keep up with me all good uh you will be able to watch it later and i think i'm gonna speed up a little uh so you guys if you cannot follow up with me not a problem you will be able to watch it so we have this sync functionality uh sync function going on which fetches the data then console logs the response which probably we don't need but it's nice to have and we have a set messages hook that we are passing and mapping through here and that's what we will be using to like decide which message goes where which language am i using uh javascript um yep and okay so we have it ready so the messages are set nice and next thing we will be doing is add a use effect that we that just fires off uh when the app is loaded so normally not normally in a classbased um in a classbased uh component you would have componented mount or something like that but this is actually a lot more powerful because we could add um dependencies in here so that's actually a good thing and we will be actually doing that okay so what we are doing here is we created this part nice uh this is going to be fired off when the application is loaded and when it's up and running now the other thing we need to change is going down here is get rid of this part and we will just say message and we will have all this stuff ready so we will be retrieving uh all these boom hold on okay all this stuff and this is going to be one message so it will include a username a message a timestamp and all the mongodb stuff that we could see here so there's going to be this id and there's going to be this wii version i think we are not going to worry about those we just will use this id because that's what we will be passing inside of here as a key uh and the key is actually going to let react know uh what's going where and it's just helping react a lot so here let's add message oh message.key no this underscore id uh for the message we will be leaving it on the message and for username we will be leaving it on user name uh yeah there we go and i think we should be able to test it out something is not working okay so axios is not defined all good um db is not defined in firebase is not defined of course they are not defined i've just deleted them so i think i've forgotten yeah uh let's actually comment this part out or you can actually delete it uh this is again firebase stuff we're not using this for now what i forgot to import and i've seen a couple of reminders in the comment section and thank you guys for that i forgot to import the axios instance that we've just created so let's import axios and notice that i'm not importing the module or the package that we've just installed instead i'm importing this instance which i'm exporting here right so let's go here and say the axios.js file is the one that i'm importing and now we should be almost good to go yeah let's see i'm gonna type in my name if i can okay notice that we have this message which essentially doesn't have a username and somewhere in i think in message.js if the message that username doesn't exist uh we are just saying unknown user so that's here we have no message and this is working set by kazi we just added that a couple of minutes back so guys who's excited who's bumped who has it ready um who who who has an a messenger clone that is almost working and have all these stuff ready let me know guys in the comments section um i want to be proud of everybody and i'm i really hope it is working for everyone all right uh so retrieving the message and adding and rendering it out on the screen is actually working uh shuri says yes great murad says i'm ready awesome uh we got st stealth destroy i'm ready okay nice um we are actually not going to use the message.js file okay um awesome so what we will be doing now uh i'm ready let's go so what we will be doing now is essentially add the uh save message um functionality so notice that i've only deleted uh the on about the line 30. uh all the db add db collection messages i think it started something like that um and that's the part that i've deleted uh milton asks will we have subtitles in spanish uh lociento me amigo no hablamos en espanol no we sadly will not have subtitles in spanish but this is where another um api call is going to go ahead in and it's going to be axios.post and we will be using um save message endpoint which we have already created inside of server.js and we will be adding these two stuff and the timestamp inside of here now um okay let's see if it actually does work so if it does break we should be able to send a message let's say hey guys how's it going okay nothing happens oh my god what is happening okay so what's happening is excellent espanola thank you um oh my god i forgot huh wishes guys yes that's it um so what happened here is that since it's not real time just yet um it's not rendering it out but if we refresh it and i say dave oh my god i mistyped my name let's david okay so because the application knows that i have sent it and i have logged in that this is a message on my side right so that it it went clear blue and we are actually retrieving the messages from the database and we are saving them to the database it's almost like the correct functionality we i think we we still miss two letters though so we are literally uploading and downloading data from the database that's that's actually pretty good guys if you're excited about that and and if if you like it uh let me know in the comment section down below and please actually clean the um clean plea please keep cleaning the uh comment section down there so guys if you're pumped about it and if you have it uh by this far let me know and let me know if you were actually willing to put this on your portfolio and so that you can get a job nice so with that all we need to do is make it real time right that's the only thing left and if we are done with that we should be good to go i think let me let me quickly check it though okay one thing that we are not going to be we are not going to worry about is so we are going to reverse the whole thing because it would actually take quite a lot of time if we left it like um like having them like having the most recent message down there so instead we will have it uh in a reverse order and for that let's actually go back to server.js and we will be sorting the data when we are retrieving it uh and just pass in this sort method so this goes into server.js it's just data sort b a and return and this is why we have the timestamp saved instead uh so that's how we will be uh managing this this time but guys if you're bummed about a newer oh my god oh because it doesn't have a timestamp that goes up there we're just gonna go ahead and delete that um so guys if you were pumped to have like separate chat rooms and like making it a bit more nicer and with um and like have the messages on the other way around uh let me know and we can do another session on that let's go to mango db or i actually need to go there and select collections because i have that unknown user over there i'm just going to manually delete that so it doesn't block everything and that actually happens to be on the top because it just doesn't have a timestamp i'm gonna go ahead in here hit this delete and we should be good to go yes now okay boom there we go uh okay awesome stuff okay so the only thing left is making it real time we will be using pusher for that uh guys okay let's stop here for a minute who knows what pusher is let me know drop it in the comments if you know what pusher is let me know if you like pusher if you have used pusher if if this is the first time because that way i will know um how how do how to explain it and if i need to go very deep down into the um deep down into the details also we are at 391 likes guys we just need nine likes to cross 400 let's go ahead and do it let's actually go ahead and like if you found this uh video valuable smash that like button okay yes we're crawling up to 393 awesome awesome let's go everybody let's smash that like button nice okay uh pusher can make mongodb real time exactly that's what we will be doing now okay we are three and we are at 396. guys smash that like button it's 397. let's make it let's get it up to 400. let's get it okay i'm not going to move any forward uh any any further before we reach 400 likes literally everybody go ahead smash it okay 3.99 awesome um yeah let's hit that let's hit it okay i will be here and stay here okay no i'm kidding um let's actually uh go ahead and set up pusher okay i click the wrong button uh let's create let's go to pusher.com and by the way how are the likes 401 nice good job guy guys okay uh let's sign in if you haven't done that already um if you don't have an account you can go ahead and like literally create a new one it's completely free and what i will be doing is just sign in with my github that's the easiest method uh it's gonna circle a bit but there we go i'm in uh notice that i already have a messenger clone facebook loan instagram whatsapp all this stuff for actually real time and i also tested it out once but if you have a couple of projects already uh you can go into manage and hit create app and i will say messenger live burn okay awesome and for front end i will be choosing where is react okay oh there's the react nice and for backend i will be choosing node.js nice and let's go and create the app now so pusher is a pretty nice service because it gives you all these uh code that you can go ahead and work with but before we go any further uh let's actually open up the terminal and install these dependencies so for the front end because you know the project the starter project is actually the front end uh we will be installing pusher dash js now pusher.js is the front end thing and for backhand we are just going to install pusher so these are two different stuff for front end pusher js hit return and i'm going to go in here stop my date back end for a little bit and type in mpmi pusher okay or we may have done that at the beginning okay let's do it again that's not gonna hurt anybody okay updated one package so we have done it okay uh awesome and let's actually start this app again by typing in no mon awesome let's go back to the front end we have the pusher done here as well now what i like to do it says actually the front end should be step one and the back end should be step two but i just like the other way around oh it also gives you um which one to install so npm pusher awesome and you want to go ahead and copy this line of code go back to server.js up top we have already imported it nice go to app.config and what you definitely need to know is that encrypted is the encrypted method is deprecated so it's going to cry about that so you want to go ahead and type in use tls instead of that it's just saving yourself from a couple of error messages inside of the terminal nice okay um awesome and with that done let's go back to the db config and let's create a change stream so a change stream is essentially a service that will watch our collections and database if there is any changes in there like it's literally that and we will say mongoose mongoose.connection doc collection because we are actually watching one collection this is where the plural thing uh is really crucial and you have to know it and let's type in here which is our collection and its messages because that's what we said in message model so that's the thing that you want to grab and let's copy that and let's go back in here um and let's add it inside of it nice awesome and we are going to watch this collection so what happens is whenever something changes in the messages collection this thing will be this thing will know about it and what we want to do is say change stream uh on oh okay dot on and change of course on change we want to fire off something right so whenever something happens inside of that collection we want to fire up this function which has a change change parameter and we just want to go ahead and trigger the pusher right then we're gonna go ahead and trigger uh we're gonna go and say oops say pusher.trigger messages and because we have a new message that's what we wanted so we create a pusher channel it's going to be messages and a new event with uh on my event it's going to be my new message and inside of there we want to add a change which is of course going to be the change because the change is always a change okay too much change nice uh let's open up the terminal and see if the back end is running yes db is connected so we are good let's actually go inside of debug console and this is literally gonna give you an idea of how it works so i'm gonna go to postman so save message and let's say sunny is saying some stuff um he's always about react so react react is fire okay that's probably something that sonny would said uh but would say uh let's send it okay so we have that message over there let's go back to pusher now what we see is that we have an api message which has all this stuff inside of here okay so that that that is literally the change guys if you have set it up and if you see it in the debug console of pusher and if it's working let me know in the comments drop a comment drop a fire emoji or jump drop something that i uh so that i know um we are teaching in a way that you can actually understand and get the value out of it okay um so guys let me know if it's uh if it's a good explanation and if you understand it good uh drop it inside of the comment section okay um boom yes how did you how did you insert pusher um so i actually added the instance uh i actually added the instance in here um i mean in here yes that's where i added the instance then created the change stream and whenever something changes i just fire off the pusher trigger function okay with that done we are done with the back end completely we are not going to touch that uh today anymore one thing though we need to deploy it we will be doing it a bit later but let's go back to our front end make that uh real time as well and what you guys want to do is go back to the getting started and let's actually subscribe so right now so what we create what we are doing with pusher is basically creating a tunnel between the front end and the back end now we have already created the back end part of the tunnel but we need to uh create the front end part of the tunnel so we literally need to subscribe as you can see it over here we literally need to subscribe to uh pusher okay now um hopefully you already have pusher.js pusher js installed on the front end um the one that we just did by the way and what you need to do is go up here and say import pusher right so you literally need only need to save this line of code i will make it like i will add the line break in there and this is literally the two lines of code that we added today uh so you're going to go ahead and import pusher from pusher js and what you need to do is go in here and there is these two uh thing we we are just going to first go with this one and go back in here uh and what we will do is say it's just paste it inside of there don't worry about it this is literally just grading the instance right so const uh actually we may want to put it outside of the app so it doesn't always rerender and the other thing we want to do is create a use effect which we will be adding here so we will create a use effect which create uh in which we fire off and create a channel and subscribe to pusher messages uh ev um event no messages channel right so nowadays we are creating a channel in here and that is what we subscribe to and we bind all the stuff whenever the event we created which is new message so whenever the new message even fires off on pusher we want to go ahead and sync the uh front end i hope you guys uh understood it and it's kind of hard to understand for the first time but if you watch this back a couple of times i am sure that you will understand and as a dependency we want to add the username so it doesn't re render all the time nice okay let's go to the uh react app refresh a couple of times and type in david nice and let's say yo just as a test and here we go guys we literally made our app real time it actually deserves a second air horn nice with that done uh i think we are ready to deploy this application live and we are below the two hour check mark awesome guys if you actually found this uh video valuable and if you found this tutorial valuable or if you've got value out of this channel smash that like button and just destroy it so we can get this video out there and we can okay let's create a let's do a third air horn as well so smash that like button so the algorithm knows that this is some good stuff and we can and and we can help 5 000 people get jobs as developers in 2020 okay that's our goal at clever programmer we want to help you guys get jobs as developers so help us help you does it make sense i hope so okay so we are at 422 likes let's get it up to actually 450. we still have 140 people watching us live actually no actually i'm 150 so 140 on youtube 150 people with us awesome stuff guys smash the like button if you liked it and let's carry on and go ahead and deploy this app uh i'm just pushing buttons all around okay here we go so now we did we really need to uh separate the front and the backhand let's actually close up all these files um why is beckham so boring dude backhand is actually good thing it's not boring i mean try to understand it try the reverse engineer what we have done and it's actually it's a good thing uh but if you're a motor like a frontend person that's all good um you can still find people who do the backend for you and then you can work on the front end as you wish okay uh everybody goes great stuff great job thanks dude um smash the like button if you liked it awesome and really glad you're uh here with me and here with us really appreciate it dude okay uh i'm gonna open up my terminal and one thing we we i'm gonna be doing is in the messenger starter project uh we need to set up um the firebase hosting let's go to the firebase and inside here hosting awesome and because we have added this app as a hosting stuff okay i'm just gonna need to check because at the beginning i have i've messed some stuff up and i may be adding it to the wrong application okay let me go ahead and delete all these two apps so remove just yeah guys you don't have to do it i just made a couple of mistakes at the beginning um so i'm just going to fix that before i mess something up and and yeah so in the project overview mirn messenger awesome uh i'm gonna go ahead at the app guys we have done this don't worry about it um i just messed up some stuff so i'm gonna need to reinitialize the firebase so mern singer um learn nice okay also set up firebase hosting boom register um when are you going to work with firebase functions actually we can do that like pretty soon okay next next console okay we should be good uh okay and now what we will be doing is say firebase in it but guys this is in the front end we are going to uh host the front end on firebase and we are going to host the backend on heroku um i forgot some stuff so let's actually deploy the back end first um and let's go to heroku.com to do that sorry guys um i forgot this we need to deploy the backend first so that we can change uh change the link inside of the front end axios instance okay so uh mirn messenger live that's what i'm gonna call it on heroku this is actually again a free tool that you can go ahead and use as your backend hosting service um yeah and what we need to do here is because we have initialized the get get version control at the beginning and we are already in the project folder we can continue by copy pasting all the stuff into our in into our terminal and it will essentially go ahead and i think it will go ahead and do the work for us okay let's go back at this line of uh terminal command here this will just uh set like connect the heroku git to the um actual build that we just done uh and let's actually do a commit so we will say get a dot as a dot the microphone and next up we want to actually commit it so let's say the git status oh my god okay um let's add a get ignore file because otherwise you will have so much stuff and you don't want to do that so get ignore and you want to say node modules in here okay nice so good let's get a dot again oh damn um okay hi hold on um yeah exactly the getting getting known node modules that's definitely uh something you need to do because otherwise it will it will be like this so i actually like to uh show this uh meme i will be showing it uh to you guys as well so there is a meme uh which is github node modules um so if you forget to add the uh getting your file this is what is going to happen literally the whole node module stuff which could grow to 12 gb as well it will be pushed up to github and that's something that you don't want to do so watch it so keep it in mind and let's reset our get uh so good state this let's see okay awesome now i'm gonna add the get a dot exactly yeah um actually thanks guys for all the um git commands thank you so much i appreciate it uh let's check it again okay this is something that you want to see if you have if you don't have all those stuff in here and now with that let's do the commit so get commit dash am and up done that's not the best uh commit message you could do but it will just do for do it for us and what you want to do is say get push heroku master and this guys is the last way uh last thing to do before deploying uh the applications essentially this is going to go ahead and push it up to um heroku and we will have our app live our backend live okay let's wait until it finishes nice uh it does all the stuff that we need now it's compressing so we are very close to the end now we're launching it and we just got the link back which we can go ahead and try it out so if it works if we are now getting back hello world which we are there we go guys we literally have a working backhand nice uh what we want to do is go to axios.js on the front end comment this line out say base url again and place it in place this stuff in here that way we will be using the diploid back end okay let's save it exactly axios js base url that is correct now uh let's go and close this and go to the other terminal where we will initialize the firebase hosting so firebase init let's wait there we go um if you haven't logged into firebase cli you that you need to start with firebase login um which will essentially give you a link to go to in your browser uh you you log in with your google account and there we go so one thing you you need to do is go down here to hosting hit space and then hit return now you want to use an existing project and that will be uh let me find the one yeah mern messenger that's the one that we just created hopefully let me check it double check always yeah my son that's the one nice and let's save it and now guys this is something you don't want to miss out on and not public that that's not good if it's public you want to type in here build because uh the next command is going to create a build folder right there and that's what you want to use to deploy your app okay build and you want to type a y in here so it will be a single page app and here we go firebase initialize initialization complete awesome and now let's go and mpm run build this is going to create the build folder for us uh already there boom and this is what this does essentially is going to disable and delete all the heavy stuff that that is good for developers but it's not necessary for production it's going to disa uh delete all the um what you call it hot reload and all this all the stuff so we just don't need those and with that done let's say firebase deploy and we will have our app live exactly alexandra says firebase deploy with the plus sign that fire that plus sign is just awesome okay where is kazi and sunny because he's in l.a sunny is in london today i'm the only one and if we go into this link we should be seeing it working and here we go i'm just going to say david boom guys this was an awesome build rocket boom and it's real time here we go uh thank you so much guys for sticking with me till the very end oh my god we still have 160 people with us awesome guys if you found this uh build valuable smash that like button um and just so that the algorithm knows that this is something that they should be spreading out to everybody and if you or if you want to go dive into this deeper there is a link down there in the description uh let me actually show it to you um that's the now now we are going to be using the first link that's the thing that you wanna um use and that's actually a free training on how to build a netflix clone and it's going to be a webinar which has a some kind of gift at the end so guys let's go to that link if you liked it and if you want to learn more and if you want to learn more just go there be there um get as much value out of it as possible smash the like button hit subscribe hit the bell so that you know when we are going live and with that said guys peace and thank you for staying with me alright peace out