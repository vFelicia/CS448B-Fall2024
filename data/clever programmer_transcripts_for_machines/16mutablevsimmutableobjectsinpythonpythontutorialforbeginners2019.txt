hey what's up guys aaron here from clever programmer again and today we are going to be going over the idea of immutability in Python and programming in general mutability just means or another way of saying it is beautiful versus immutable okay these are some weird birds but let me explain let's get started mutability let me just type that out you know you probably already saw it in the thumbnail on everything and the title type of the video but yeah so mutability what does that even mean what this means is actually it should have been mutate ability so muta just stands for mutate mutate means like you're changing something so mutability it actually means mutate ability or basically change ability okay so a beautiful thing is a something that's mutated an immutable thing it's something that isn't Mutato which means you can't change it so this is in changeable and this is change it would basically they should have called it changeable and unchangeable instead of mutable and immutable which actually should have been mutated and immutable but I don't know who came up with it it's just kind of silly it always confuses me but that's what they mean okay what this means is there are different kinds of data types in programming and Python your if you are familiar with the ones in Python I'm sure but some are mutable and some are immutable so I think we went over in a previous video about lists and tuples right so lists is a good example of a mutable data type because they can get longer they can be empty you can add things to them you can subtract things from them you can change the value of the elements inside right you can you can go like this right that's a list you can append things to it so I could append for to this and then I could just print this out and then you'll actually see that it is a list of all four things you guys get the idea so a list can change because you can add things to it you can subtract things from it and whatnot however a tuple is immutable right because remember I said that you it's a stable it's a consistent stable structured kind of data type or data strip it's actually a data structure but I'm just gonna call it data type because you can't add anything to it if you if you you can't add anything to it you can't delete anything from it and you can't actually delete you can actually change these elements oh you can't make it long you can't make it shorter and you can't change what these things are whatever it is when you create it it stays like that this tuple will stay like this one two three four ever okay that's the difference between mutability and immutability it's kind of like in real life like think about it like if you have a rock that is immutable it doesn't really change I mean you could like smash it but in general a rock is very hard and hard to change so it's immutable it's one thing that never changes it's what it is from the beginning all the way to the end but something that is mutable might be something like a key chain because you can take keys off you can put keys on it you can add things to it you can change the keys and it can grow and change it can mutate okay so that's the where the idea comes from um so yeah there is actually a lot of different kind of mutable data types and immunity immutable data types I think all the mutate able you can you can um google it all the ones that all the different types if you actually want to find them all um immutable types things you cannot change would be things like tuples okay tuples it's okay you can never change it you can only overwrite the entire thing oh yeah I forgot to mention that an immutable object like a tuple you can still overwrite the entire thing is essentially deleting it um but whatever that structure is that data itself that vary when it is an immutable data type you cannot change it same with intz every time you overwrite an in you're actually deleting it and replacing with a new int you're not actually changing the indirectly because you can't do that same with floats and boolean so I'm just gonna put all these together floats and boolean's and um strings I think I think so I think every time you change your string it's actually creating a completely new string datatype but I'm not quite sure about that but I do is just some examples these are immutable data types mutable data types would be things like lists because you can change them okay will be dictionaries all right order dictionaries right because I mentioned that that's another data type that we had in dictionaries video I didn't go into it and many many more most things are mutable less things are immutable like only a few things are mutable but basically these allow for more secure data I suppose and mutable things are for more flexible data so that's the distinction there one thing I do want to mention is that in dictionaries when you have a dictionary right dict like this and you have a one okay and b2 okay the key has to be an immutable thing that's why I know strings are immutable okay because I know that this has to be immutable and this can be anything the heck you want it can be anything you want the value can be whatever you want but the keys and dictionary have to all be immutable so this could actually be a tuple okay you could actually have a tuple here and you could say like okay on a screen right you have a bunch of you know X my positions on a screen and then you have a brightness so maybe if you wanted a you could have a dictionary that corresponds to be like okay at point 1 2 at pixel 1 comma 2 so you go over 1 pixel and up 2 pixels pixal like over there would have a brightness of one or turned on or something like that so you can I like that that's just one example that came to mind right now but yeah so you actually need an immuno immutable data type as the key in a dictionary because if you don't then um the key changes and then it's not consistent anymore this needs to be immutable because that's how you index into the dictionary the same way on when you index into a list you have to use an integer which is also mutable that that's just one thing I wanted to point out with dictionaries this has to be immutable okay one last thing I want to go over is immutable immutable data types are a little bit finicky you're probably falling up to this point this part gets a little bit complex but I'm gonna give it a shot explaining anyways so let's say you had a tuple okay one two three okay you understand that this is an immutable data type because I can't add anything to it I can't subtract anything from it and I can't change any of these individual things that's because this whole thing is actually stored as a chunk in memory all right well what if we actually had a list here okay all right so we have a that's a little bit oh no no this should be fine so we have a tuple here which has two immutable things two immutable things and then one mutable thing in its third place all right well let's first try to change something so I'm trying to change the first thing of this immutable data type this tuple you rent it gonna get an error see tuple object does not support item assignment which means you cannot assign any of these items is something new T we're trying to change this one it's the same thing one but it can't actually changes okay same thing about put two I mean oops if I put a one here it wouldn't change the two here and if I put T a 2 here which get this list I still can't change it because I cannot assign this one to overwrite this list however ok T at two is a list you see this here it's a list one two three see it so we're just gonna say okay L equals T at two get rid of that error there actually you know I'm not gonna do this I'm just gonna put it in one line so ta2 is the list so if we have if this whole thing is a list remember how we index into a list you can actually put more brackets after it okay and then if I put in 0 we're gonna get one okay if I put in one you're gonna get two nfo put in two you're gonna get this three because whatever is in here is indexing into this list because this whole thing is this whole list all right now I am going to show you something interesting so let's put let's just print T here so we can see the tuple I'll comment this out real quick and then print run this to see what happens so print out the tuple there okay with the list with one two and the list and the third one and now what I'm actually going to do is obviously we couldn't we couldn't actually change the entire list we've got an error before but could we change something with in this list I mean this it's if it's within this list it's also within this tuple right so you said we can't change anything in this tuple but a list is mutable a list is not immutable so we can still change the things in here okay um are you following now so we could actually say okay T it to is a list and then at 0 is this one we can actually change this to let's say 7 all right and hit run no error right no error and then let's print T again and see what prints out oops see what prints out okay as you can see 7 was put where 1 is all right but this whole tuple is mutable but this list is mute is mutable so we were able to actually change this okay a distinction there if this was a tuple we wouldn't have been able to do that okay if this was actually like this instead we wouldn't this code will actually break and I'll show it to you oh I forgot a parenthesis here run this and we'll get the correct error well we're getting the incorrect error before this is there I wanted to pop up I don't think I've ever said that before we got the incorrect error but as you can see yeah you can't change it but if this is a mutable data type instead of an immutable data type you actually can change it so what I'm trying to get here is that immutable immutable data types um they're only immutable at their level okay as their global level if you go within and then there's something that is beautiful you can still change those and that's because in Python this might go of a lot of you guys has heads but I'm gonna explain this cuz you might understand is because everything in Python is an object so this tuple is considered a pay object and it's given all this data as giving this one is given this two and it's given the location of this list in memory okay so this list and memory can change to whatever the heck at once but the location of this list will always stay the same it's just the list changes itself the values with analyst change or it gets longer but the the location of this list which is just the first element where the first element is located um always stays the same so we can change this list but on this tuple you can actually replace this list with location okay this is an actual issue code but just imagine the ID here that this is actually the location of whatever's here so the location of one and two is also here this is also stored as locations um it's called a pointer if you know like C or C++ but the location of the list does not change okay but the value of this list can change okay so that's the little distinction there it's a weird little edge case same deal if you had once again a list within here you could change it but if this was a two pole you could not change it okay this is getting weird and weird and nested so I'll go back to this simple case we had but that's pretty much it about meet ability and immutability you guys I just want to explain that because it's a distinction in Python um the most important use of it I know is using tuples for stuff for structured data and then knowing that a dictionary key has to be immutable okay cannot be beautiful because the keys have to stay consistent in dictionary or the name of the things gonna get all screwed up and it's gonna freak out and the world is gonna explode then uh transformers are gonna start all coming alive and whatnot but um that's pretty much it for mutability you guys thank you for watching I'm sorry if I got a little complex there at the end I get kind of nerdy and geeky and I like the geek out and explain all the little nitty gritty stuff sometimes I know this is the beginning of beginners tutorial but hey I might as well push you right that's all that's that's what happened to me when I was learning so thanks for watching you guys um hope you guys enjoyed it and I'll see you next time good bye