in this video you're going to be building the turo web 3.0 depth using next JS you're going to be able to list and rent out your nfts using the erc4907 standard which is a pretty new one and we're going to be using third web to deploy this contract and then to interact with the blockchain later down the line you will be able to verify and check these transactions and rentals using using you'll be able to list all the all these cars and rent out to random users who will be paying to rent these cars from you with ethereum so with that side let's just jump straight into it alright ladies and Gentlemen let's go ahead and get started building turo so what I have in front of me is basically just a regular Google Chrome and what we're going to do is go to thirdrab.com cleverprogrammer as you can see right there and by the way this is a link Down Below in the description you can for your convenience just go ahead click that link and you're gonna be ready to go now you're going to be greeted with the third web dashboard straight away but we're not going to stay there for a little bit because we are going to click connect metamask which will prompt us to connect the metamask account you're going to have to accept all the privacy policy as usual and then you're right back on your dashboard now you can go ahead hit that logo and that will show up all your projects you've previously worked on but that's basically it for this section congratulations on signing up for third route let's go ahead and crush it now if you haven't done this already before we're gonna go through now the process of installing metamask on your Chrome so what you need to do is go to metamask.io download and then just hit that little install button right there and that'll take you to the Chrome web store you can literally just Google it but basically you want to go ahead click add to Chrome and extension and then that'll go ahead and install this for you and once it's there it's going to pop up a brand new page which will go which will walk you through the setup process so hit that get started button and then agree whatever there is to agree obviously you should read it because that's why it's popped there and then if you already have a wallet you get you probably know how to import it but this and then you can just skip this section but for those who are brand new to web3 go ahead click create wallet and you will need to put pop in a password now remember this password because this is going to be the password that you're going to be unlocking your metamask with all the time read the terms and Views and then go ahead click click create then there's a little bit of an education if you want to watch it on how you can secure your wallet now and this is the crazy part this is your 12th phrase security secret whatever do not share this with anybody if anybody gets it they will have full control over your wallet however you want to go ahead copy all of that and then click next and you will have to paste it here now once you're done with that that's just to like confirm and confirm you have it now you want to go ahead and save this because without this if you lose access to your meta mask you're never going to regain it ever again so once done hit confirm and then you're basically all down now one more thing you want to do is uh because we only see the ethereum maina which would obviously be a little too expensive just to do tutorials on hit that show hide test networks button scroll down where it says show test networks on the top right there and turn that on because we are going to be using we're going to be using test networks and you also want to like you might as well just turn on show conversion on test networks that'll basically fetch the current ethereum dollar ethereum slash US dollar FX rate and then it will show you in dollars how much you're spending on each transaction but basically that is how you set up metamask all right now time to actually get started coding so let's use our custom built Clover programmer CLI tool that will just help you with setting up the project pop in your in a email and then pop in your name and then as a recording of this video let's see how I wasn't capable of doing it yet but right now if you just start typing in turo that will show up and narrow down the list so you don't have to look for it and then we're just gonna fast forward to the moment where it is done and it will say opening vs code and it will open up your vs code so there's your project that's print and uh that's pretty much all we need to know now and just pop in yarn Dev into your terminal and open it up in your Chrome once you open it in your Chrome this is what you will see and this is your background product project you have everything set up for you literally so all we got to do now is just build the app so time to open up and get started working in remix IDE now if you go to remix.ethereum.org you will see this exact website in front of you what it this is basically an IDE specifically created for ethereum and solidity developers so this is what we're going to be using and in a couple of other videos you might have seen me uh you might have seen me working in the remix ID extension it's basically it's the exact same stuff the only difference is that one is inside my vs code and this one is in the browser so this is like more portable more mobile now what you want to do here is just go into our contracts and then hit create new file and name it ierc4907.sol that is ierc 4907. Sol and if you follow the standard basically you will have a contract that allows users to rent nfts and that's basically what we're going to be doing here so go ahead name it name that file like that and then you don't have to worry about any of the artifacts or anything like that just leave it as is now we have it linked down below but this is the official ierc and the erc4907 contract so you want to select the iurc1 right now and then just copy the entire thing and paste it inside there the good thing about standards is they are like open source you can use it you can do stuff with it and you don't have to type it up this is perfect even if you don't even know what solidity is so you can just type it you can just paste it there and you can look through like what it does now at the time of filming this video the latest version of solidity that was out was 0.8.13 so we will be using that for this build all right so with all that being done let's go ahead and add one more file and so that is going to be the turo.sol now this file is going to compile everything and grab everything from all the other like sources and whatnot and we'll be using this and we'll be interacting mainly with this one alongside the other one this is going to be like the umbrella contract getting started let's just a drop in an MIT spdx license identifier and using and we're going to be using obviously the exact same solidity version so you're going to make sure it matches now that's what I was talking about we are going to go ahead and import the erc4907. Sol file which we literally just finished up and we're gonna go ahead and import a few things from open Zeppelin first of all we're going to be importing slash Contra the Contour contract so add opens up in the slash contract chat slash utils slash counter.sol and so once you're done with that you want to go ahead and initiate your turo contract which will be inheriting a bunch of things from erc4907 and the ownable contract that we just imported now you also want to go ahead and initialize your counter so we're going to be using that and so that this is how you initialize it and set it up for future use now if you try to import it right now also make sure that your compiler on the top left matches your prac mover or like your solidity version so zero eight thirteen once again so once you hit compile it will show this error and that's because we do not have opens up when installed so let's go ahead and do that now all right so to make that error go away we actually have to create a Constructor and that's because the counters counters contract requires that so you want to create a contract Constructor that takes in a name that takes in a symbol and both of them obviously strings and then it will create a for an erc4907 instance and so if you compile that as you can see on the check mark on the left hand side it is now perfect and if you hit deploy there there is your contract it is deployed and now if you like click around and call all the functions you'll basically see all the functionality that your contract has and so with that being said now it's time we actually create our state variables and move on with the build all right so it is time we go ahead and set up all the variables that we're going to be using in this contract so using those count after we initiated and imported the counters we're going to go ahead and create two private variables one of them is going to be current token ID and the other one is going to be total Supply now once that's done we're going to create a public string which will be which we'll call Base token URI and then a uint that will be a bit that will be that we'll call Base amount now this basically will just store an amount in way and we're going to go ahead and convert it now so go ahead go over to East converter.com or you can just copy whatever we have there so basically what we want to do is we want to set a base price of 0.001 ether which will equal to I'm not going to read out a thumper but that's your number copy it in them that's what we're going to put that there and if you're wondering like hey it's ethereum why can't I just put ethereum in there it's because way is a it's kind of the sense for the dollar but it's way for ether and hold another scale and also solidity only understands way so there it is we need to provide everything in way so once we got that we're gonna go ahead and create an array of strings which will be the rentable nfts Uris basically we're just gonna store all the Uris of each NFP that any person who uses the app can rent and then we're also going to create a struct which will be a rentable item struct basically this is where we're going to Define all the properties of of rentable item of an item that the user can rent so initial like obviously you need the pool which will return a true or false what the item is rentable or not you want to put in a price which we'll call amount per minute that'll obviously be a uint and that's basically the item now you want to create will create two mappings we'll map each ID to a rentable item and we're going to hold it rentables and then the other one is going to do the same with the IDS but instead it's going to map to address it on a higher level of what's Happening Here you want to track all the items you have and you want to track all the people that rent each item and so the only unique way so the only way to do it is you want to map map both of those to specific IDs that way you can easily find both of them so that's basically it for now time to calculate the amount per minute all right so let's go ahead by setting up a function get amount per minute and we'll need to pass in the the token ID so it's going to be a uint and this will just return a couple of things so it's going to be a public function and it will return a uwin so basically a number and so you want to specify what it will return and that will be the amount per minute for the item which has the tokenad you just passed in all right now let's go ahead and build the mint function so these are going to be nfcs that we're going to be renting so before you can rent anything you want to be able to Mint them right because without that it's pretty hard to run right all right we're just going to call it mint just like that we'll have we'll need to pass in one prop that will be token URI and only the owner of this contract will be able to will be able to Mint nfts that's a safety measure that we're taking this time and so you want to increment both of your counters so your total Supply and the current token ID as well now the current the counter the counter contract that we imported earlier comes in handy because you can just call an increment on it and it's like super easy and so you want to create a local variable which will be new item ID and that just takes the current token URI if that makes sense and so now you want to call the safe mint function which is by the way coming from the erc4907 contract and so you you will need to pass in owner and you will need to pass a new item id now once that's done you also want to set the token URI which we are actually passing in to this function using another function from erc4907 we'll pass in the token ID and we'll pass in the token um right so what this does is previously we just created the new nft now we actually set the token URI to the nft so that it shows up later on whenever we're looking for it and we're going to be using that on the front end so you want to make sure that the you pass in you pass in the correct ID now as I said before on line 15 we're also going to store this token URI and that array we set up earlier and we also have to store this whole entire nft in the rentables mapping so what we're gonna do is rentable's new item id the element and then we're just going to pass in a struct which we already set up so we're going to have rentable which obviously initially it's going to be true and the amount per minute is going to be the base amount so both of these are already set up and already ready to go now if you deploy it let me check out the test panel you can see that there is your mint function and you can pass in your token URI and that'll be that'll basically invoke this function all right now let's build a function that returns all the nft URLs that we have deployed so we can just call it get rentable nfts Uris or something it will be a public function that will return an array of strings and all it will do is just return nft rentable nft URI so that's pretty much all we're gonna do so if you want to test it out you can just redeploy your contract again and you want to go in and there's your by the way there's your functions right now it's an empty array you can just paste one of your uploaded ipfs links hit mint so that'll be done and now if you are going to call the get rentable nfts Uris again there is your link so if you see that and it's returning the exact same link you did a good job so with that said let's move on to actually building the Rend function all right so the biggest thing that we're gonna be working on is the rent function so let's go ahead and get started building that so that will need a token ID as an input and it will also need the amount or the expiration time so that's going to be a number that we pass in as minutes later on when we get to the front end part we're gonna get there so this is going to be a public payable virtual function and so right off the bat let's go ahead and calculate the due amount so we'll have to figure it out from the rentables using rentals map using the token ID and grabbing the amount per minute so if we multiply that by the expires number that we just passed in so basically the the minutes you multiply it with the amount per minute you get the due amount and so at that point you might as well check for whether the correct amount was sent or not and if not just show them that hey this is an incorrect amount so we can move forward and then you also want to make sure that the current user of that specific nft is empty and because otherwise it literally means that the item is already rented so we're gonna display a correspond corresponding error message and you also want to make sure that the specific item is rentable and if not obviously say that the renting is disabled for this specific nft all right so with that we're going to go ahead and transfer it real quick once the once all that checks passed I'm going to go ahead and transfer all the due amount to that person and so you want to make you want to now go ahead and transfer the due amount to the owner of that specific nft and now we're going to import uh your something from the erc4907 contract and so that'll be the user info so we're just going to create a local variable info and we're gonna get the specific user and so we want to make sure that like we said the information of that user so it's going to be the message sender it's going to be the user and then you also want to set the expiry which is going to be the block timestamp plus whatever the person passed in as number of as number of minutes times 60. so is going to be the expiry and then you also want to document whoever the rent he was now we haven't created this function so let's go ahead and do that now so at renty and it will take in the token ID and it will take in the renty so like it will basically take in an address and it will take in a number as their inputs and so with the mat the mapping that we already set up we're just going to go ahead and save that and now that it's passed in we're good to go and so you can remove the previous deployment and actually deploy the new contract now whatever where I you have on your clipboard paste it there and then you're basically good to go and then you can basically double check that hey there is the owner you can double check everything that things are stored correctly so whether is it rentable or not who's the owner get the type and then get like how much it would cost and so whether it is rentable or not and so let's just select another wallet and let's try to rent it see what happens so put in the token ID put in the expiry number three and it says incorrect amount so what you need to do is pass in an amount all right because otherwise it's going to be pretty hard to move from there for now because it's just like a dummy Network you can just pass it to Ether that'll be like for sure more than enough and there you go it is successfully rented out the NFD and now you will see if you check on it the user is safe there again if you double check that is the same address that you use to send that to Ether in so that is basically it for the rent function now let's go ahead and move on now if you're more experienced with solidity this is going to be an optional challenge for you you can go ahead and try to implement the fee change basically so a function that will modify the amount per minute so this is your call to action go ahead pause it right now if you are up for the challenge if not that's completely fine too and with that said let's keep going so that'll be a new function we'll call it set Rent fee and so you're going to pass in the token ID and you want to pass in the new amount and so this is going to be a public function and it will require a couple of things that are going to like are this so you want to make sure that the user is actually approved and they are the actual owner of that nft so obviously I shouldn't be able to change your nfts price right but doesn't that's that doesn't sound really good so you just want you want to check for that and if that if that's not or if that requirement is not satisfied send back a nice little error message and now using the token ID go into your mapping and we can and you can go ahead and update the amount per minute and that is basically it that is your function so if you figured it out good job if not that's completely fine too so with that being said let's go ahead and finally use third web to deploy this contract all right so go back now to your vs code and also go back to your serve up and once you logged in and connected your meta mask there is that little third web deploy button that'll basically take you to a page that that goes through in detail what is happening when you're deploying using third web so I suggest you go ahead and read that because it's a pretty neat tool but for now we're just going to be using the first first snippet which is mpx30 web deploy so just copy that what we'll need to do now is create a new folder on the root called contracts and then inside there like going go there with your terminal and just create a new truffle project using Truffle in it that'll be pretty fast and then inside of a contracts folder in there you want to create a tool.slf file and copy over all the all the code from your turo Sol on your remix IDE you want to also copy the other two contracts so IRC 4907 and erc4hansen both of them get them into your vs code because uh we have nothing to do on remix ID anymore during this tutorial so just get all your code and once that is done if you have that error like you can just completely ignore it there's no reason for it to be there but um what you want to do now is now is the time to paste in that a third of deploy command that you copied earlier so just type that in there put that in and you're good to go now this will take a little bit of a while and it will come up with this nice little interface you want to select turo because that's the one we're gonna deploy now so that'll take a little bit of a time and once it is uploaded it will auto open the site for you where you can configure the name and you can give it a symbol so we're just going to say turo rentable nft market and turo for a symbol and then you can just hit deploy that'll take a little time so just confirm confirm it and it'll be actually two separate transactions so just confirm them both and then you are good to go now once this is done it'll take a few extra seconds to load everything up but this is your contract on third web so they provide you with a lot of things you can explore all of your functions here you have every single function that you had on remix ID and you can test them out all of them you literally have a fullon playground with your own functions and they also provide you with code snippets on how you could invoke every single function that you have so you also will have a full log of every single interaction that has happened with that contract so right now you can see that it was just deployed and then there are all the nfts that are minted and then once again here is all the code that we're going to be using this is a pretty cool tool use this for any kind of future project that you're building once again playing around with it figure out what's what's where pause this video like actually do go ahead and pause this because that's going to be more beneficial for you pause it play with it figure out what's where and then we can go ahead and continue from there and once you're done messing around and you know the place we're gonna go ahead and connect our wallets to the app all right now this one is going to be so easy that it like literally makes me mad so what you want to do is import like one thing we're going to import server provider and chain ID from third web dev slash react and then you're going to generate you're going to create wrap it all around the application so you will have a third app provider for the desired chain ID and you can just put in whatever it's like chain idea girly that is perfect and then just close that and put everything in between all right that was step one and now you want to go into your header or the connect wallet thingy is you're going to import connect wallet from the same package and then down there on line 22 or probably it's like somewhere around there you're just going to create a just render it out and that's it you got your wallet connection you're good to go so now you see why I said it's so easy it makes me mad so there's your switch wallet everything yeah it's not as fancy as all the other ones but the ease of setting it up is crazy let's implement the Min function all right now let's go ahead and mint those nfds first of all that's the model that we're gonna be using and so go into your Min form.js file and we're going to import a couple things so first of all we're going to need ethers and then we're going to these use contract and use contract call from the third web dev and so on the right hand side now you want to go ahead and select the mint function so we're going to copy a couple of things from there so that so that mutated async mint is loading copy that thing and then just paste it right there and that'll set up a few things that will help us call the actual mint function from or in the inside the contract yeah that that's uh there's that and we'll have to pass in ismint loading to that is loading state so that'll take care and that'll take care of the whole thing and wait for the loading time now next thing we'll need to do is scroll down a little bit and wherever you see show modal and high model we're going to add a few things there so now in the use model hook you want to create a new unsubmit event and we're going to catch all the values and even the reset form function so that all of that is going to happen whenever the person submits that form so that is something that formic and yup gives you access to and so now whenever mining is not loading when there's nothing being there's nothing loading you're going to fire off a try catch and I've said this many and many times and I'll say it over and over again when you're working with the blockchain you want to have try catches all over the place because we're early and so console log the error out or you can use console.error whichever you want to but now we're going to call the Min function and pass in the mean URI so you want to use values that made the URI and values is something that form is taken care for taken care of for you so this is just a form Library don't worry about it just use values that mean URI we set everything up for you it feels really like fiddle around with The Code by the way and so now we're going to use toast promise to like have the little nice message on the top and we're gonna have a pending we're gonna have a success and we're gonna have an error message so all of those are going to be chosen based on what happens with the promise because once again that data thing that is actually a promise we're gonna have to make sure we're gonna have to wait for it and get it resolved and once all of that is done we want to reset the form because there's no reason for us to keep the data so there's that all right so there are all the things that that basically formic is key formic is taking and so whenever there is some sort of change in the field or in the input field we are calling on the format that handle change function and the value is being coming from formic.values.mage URI so that's that import field on the right hand side now you want to go ahead and grab one of those links that we gave you and you can either have your own pinata upload or you can go ahead and just copy it from one of the files that we put in the assets folder so we actually provided with all of them for your convenience and so now go ahead and just paste it there and mint one of those nfts so as you can see nothing has happened literally nothing so there's clearly something that we need to do no metamask popup nothing literally nothing so what we're going to do is in the form on submit you want to call the handle submit function and on reset you want to call the formic.handle reset function and so if you're not calling those functions nothing is going to happen so let's try it again paste that link right there and there you go there's your meta mask popup now go ahead hit confirm and that's basically it now you'll also want to wait for it to pen wait for the pending because it's not going to reset the form itself until it's not done so now there's your toast but something is a little off so like you still have to like refresh things and so the solution for that is you want to go back to line 41 and instead of waiting for that like you don't await if you await there that means the toast promise is still it's always going to be pending because it's never going to get resolved however if you remove that and then you use the toast message system to process your promise you are going to be better off with so let's try this again and there is your meta mask popping up and now the toast message is actually accurate and there's your success message so it was basically minted twice but it's completely fine let's go ahead and fetch that nft all right now let's go ahead and fetch all these nfts so get started we're gonna do a couple of different things so on the reading data we will need to import a few things so we're going to need to use con use contract and use contract data from third web but we can just copy it over from third web and so in order to get the owner like the owner of the car we'll need to destructure a few things so you want to destructure data as owner and you want to destructure is loading as is owner loading and so that's going to be calling the owner function of that contract that we deployed earlier now in the nfts you state you can see that there is that there's a BMW that we had earlier on but let's just go ahead and remove it there's no reason for that to be there anymore it was just a cool static data but we don't need it so as you can see no cards yet it's showing up as it's supposed to and so we're gonna create a couple of you States so one of them is going to be user of data and uh and the other one is going to be price and so both of them are going to be initialized as empty arrays and now I want to go over to third web and select get rentable nft Uris and we're gonna call that from that function too so basically we're just selecting functions from the contract that you've already built to call so right now we're going to set that up as well and so we're going to destructure data as rentable nft Uris and is loading as is loading rentable nft Uris so to call that function we're going to set up a few other things here so let's create a brand new function down there which is going to be upload nfts and so as a guard function there's a guard Clause have make sure that is loading rentable nfts exists or it doesn't exist my bad so there's nothing being loaded right now and so create a new variable that's going to be calling all the nft Uris one by one but it's going to be stored as in one variable so we're going to use axios.all for that and if the autocomplete didn't import it for you just check out my line 10 because that has already imported automatically so you can say axios.all and then we're going to need to map through all the nftu and basically call every single URI so let's actually do that right now so we're going to say const data and then sales.get URI and then you're going to go ahead and return data now this hasn't done anything yet like we haven't really even called it but we also need to set the new state so go ahead and say set nfts and nft Uris right there and so we obviously want to make sure that every single time we open this application and whenever things change around so like as loading rentable nft URI is it's changing we're going to fire it off again and whenever the is loading owner is changing we also want to fire it off again so that that means that in the main part of these use effect you want to put the update nfts in there and then now you can just go ahead and also console like this now down there is Chrome scroll down to line 101 or wherever this error is going to show up but just go ahead and comment this out we don't need that that was more for the dummy data don't worry about it for now and there you go now you can see those are the two BMWs that we just minted and if you go ahead and grab another and mint that as well that should oh it actually failed okay let's let's try it again oh it was wrong metamask so if you like as you remember only the contract owner can mint nfts so you want to select the correct meta mask and so go ahead now confirm it and it should be there in a little bit so wait for it wait for it and settlement thing is successful and if you refresh there it is that is your new car that you just minted so that said let's go ahead and render the owner of every single nft all right now so if you check on the right hand side none of the nft owners are being displayed right now however we already set up everything that we're gonna need to call that function and we already have access to all the data so now I'm going to scroll down and find that piece where I find that part of the code where we are rendering out owner and instead of having nft.owner there which was good when we had the pre custom code or like the hardcoded data in there it's change that out to owner because we already have access to it as I said and there it is there are your wallet addresses so now you should be seeing all of it okay so what we're going to be doing now is we will have to update the user data if you actually check it it's next to the renty there's like all this static jargon that we put there so that's what we're gonna update now so we're gonna need to create a brand new function for that and don't forget that it's going to be an async function because we're going to be fetching a bunch of things we already have the nfts so now we're going to go ahead and loop through all of them for every single NFC that we have we're gonna say is the user const user of equals weight contract.call user of versus we're just gonna go like that and then we're gonna have to pass in index plus one on the solidity side we are starting to the relevant data starts to count from one and on the JavaScript side the relevant counting starts at zero so when you interact with between the two the JavaScript numbers need to be increased by one so that's what we have that's why we're passing an index plus one also don't forget it that this is an async function otherwise everything is going to freak out and then you want to pass in that new user data so basically the way you're passing in I'm not sure if you've seen this before it's a pretty Advanced way to update an array I found this on the web Syria is going hard so this is a pretty Advanced way to update an array inside of a use state so basically what you're doing is you're catching the previous state of that you state printing it out basically like mapping it through and then just pushing the last element after it so it's like push but for you states that are arrays if that makes sense and it's like super super neat way to do this all right now once that is done well you obviously want to call that function and we want to call this function every single time dnfds are changing so create a use effect for that put the nfts state in the dependency array and then just pass in the function call it right there all right so as you can see all the cards like we commented out all the uh we commented out the rent button so we're going to make sure we have that because that's going to fire off the function that later on that will enable the user to rent the actual car so comment that back in I guess now and so because it's still like built for the before the static way of things that we had it in the CLI starter files just remove nfts from there don't have to worry about it and there you go now your buttons are back so that's checked and so now you want to update the renties all right so that still has that static data that we hard coded in there so we're going to update those it's the same address but so let's actually make it Dynamic now and so what you want to put there is is the user of Veda index so it's going to fetch the current user of every single car that you have one by one and match the corresponding match the corresponding address of that nfts user and then also shorten it so hope that made sense and so there you go whenever you see that lots of zeros that means that car is available for rent I want to emphasize that because that caused a little bit of a confusion even between us when we were building it in the background like some of us didn't really understand the concepts I just want to reiterate that whenever you see a bunch of zeros that means that it is a it is an invalid address but this is perfect to put there and indicate that this car is out this car is available for rent right and so with that said this part is pretty much good to go and so we're now going to go ahead and update the price okay so as you can see on the right hand side next to the price some weird stuff going on once again static data let's make it Dynamic so we're gonna need to make that static data Dynamic all right so for that we're gonna read data so go there and we're going to get we're going to use the get amount per minute function of the contract we built let's go ahead and start connecting it to the front end it's going to be a new function which is going to be update price it's going to be an async function as usual and just like last time do a try catch because the blockchain and we're early and it's just good practice you also want to map through or like Loop through all the nfds basically what you do is we're going to fetch the the amount per minute property for each nft now we're literally just calling it the same way we did it we can just get faster this time and and so we're going to once again format it because in the contract everything is in way so we're going to use ethers JS for that to format it to Ether and that way it's going to be like way easier for us to for us as in for us as in humans to understand what the price is and let's just update the price just how we did it last time and it's going to be an array of prices so we're gonna have to watch out for that now you also want to have this have the nft prices updated whenever any kind of change is happening around pricing around the nfts and so now let's actually go ahead and display all that so there's our custom data let's just place it put it there so now let's now that actually should display it but there is some crazy thing going on there so if we go back to where we can create fetch the new prize oh yeah if we use I index instead of index it's not going to work I don't know what we expect it but um there it is and you also got to import ethers JS because without that we're not going to be able to convert and there it is what kind diets there it's it's the array is the array we got a we gotta get one item of it so once again get the corresponding item and there now it's working perfect and let's actually rent these cars all right so we are at the final stretch the very end of this build the one and the only rent function no separates us from being completely done so go into your ramforms.js file let's finish this out strong and let's actually get started by importing all the useful stuff from third lab so use contract and use contract call we're gonna need both of them and at the very top of the just how we used to do it at the top initiate the contract instance and put in your contract address so use contract yup and then paste it in nice so that should should be that should be familiar already and so there is the formic function create and unsubmit property and or like event and create an async function that will take in that will have values and reset form as their input parameters and then usual try catch error out all the or the console at the errors and then we're going to go ahead and fetch the do amount so the do amount actually we won't fetch it from the contract but what we're going to do is we're going to go ahead and create an integer out of the expires value that we are putting in to the form itself and we're going to go ahead and multiply it by The Ether or The Ether amount that it would cost us to and multiply it by the permanent ether amount so that's going to be our dual amount and that's the amount that we're going to be sending to the contract so go ahead create another promise and then this time we're going to call it data and it's going to be contract.com and we're going to call the rent and so we're going to need to pass in a few things we're going to need to pass in the values the token ID and we're going to need to pass in the values that expires so that way the contract that we created previously it all has that if you don't believe go ahead check it and you will see what I'm talking about that's basically it and you also and now you also want to pass in a value and that's going to be the amount that the contract is going to charge you and so you wanna for you it's going to charge the user so you wanna you wanna specify it versus correctly because of the contract will reject it so it's not enough ether so you want to say ethers Euros dot parse ether and you will need to pass in the do amount that we just calculated and you also want to turn it into a string before you do any of that stuff and now we're going to handle this entire thing with toast and so just put in your pending success and error messages just like all the time it's like a little too repetitive at this point but that's fine now before we do anything else just want to make sure that the on submit and on reset events of the form are hooked up to formic and everything is going to be handled correctly so let's go ahead and test this thing out so I'm going to put in one as in for car ID and I'm gonna put in three minutes let's see okay there's some sort of error and so let's go ahead and hit renting and then progress metamask pops up nice there's your correct prize by the way I don't know if you caught it I'm gonna rewind it a little bit there's your correct pricing and there is your gas fees and now if you hit confirm it'll take a little bit extra to load but that's fine it's still it's it's pending let's go ahead and speed it up a bit of time speed it up and there it is now it's successful so that nft is currently rented successfully and if you refresh the rent button now turned into unavailable and you can do this with all the other ones tested out and also if you can if you see the Brandy actually changed him to the wallet address that I have copied if I go ahead and switch to the other account and then scroll down a little bit you can see that all the other ones are still with the basic data so with that being said that is your turo build I hope you enjoyed it I hope you got a ton of value out of it and if you did make sure to go ahead smash that like button subscribe to the channel because we're gonna drop a few more of these and with that said I'll see you in the next one