in this video you'll build amazon web 3.0 dap with next js you'll be using hard hat to create the smart contract and deploy it using morales speedy nodes you'll use open zeppelin to ensure that the custom coins are in line with the erc20 standard you'll use morales to actually interact with the smart contract because morales makes it incredibly easy to interact with smart contracts we'll be using morales's built in nosql database to manage our users that we authenticate and create on this app and at the end we're going to be deploying this app to the internet using netlify because netlify actually gives you one of the smoothest and best experiences for deploying your app and it's one of the most popular with that said i hope you're excited for this build smash the like button so this video goes out everywhere now i'm gonna send it over to lance who's gonna be your instructor for this build so he can demo the app and actually get you to start building it with that said let's go right before we get started and start coding i just want to let you know that we're doing a collab with buildspace which is one of the best website education platforms in the world and you guys are going to be getting an nft that proves you completed this project and it's going to be in collab with bill space and clever programmer and it's going to look sick build space also has an incredible community of web 3 developers who you can learn together with in their discord and they're very active last but not least build space is also helping new web3 developers like yourself get matched up with top tier companies like adidas or alchemy for premium high contracts and i'm talking about 10 to 20 000 a month contracts and their vision is amazing i even met their ceo farza and he's just an incredible amazing human being so i'm really excited about this collab and the best part for you guys it's completely free all you have to do is just go down below click the link in the description it's going to take you to a landing page pop in in your name and email and it's going to ask you to connect your wallet and once you connect your wallet you're good to go and then when you do this build and you complete it that wallet will be able to verify you did it you'll get your own nft and you'll get the entire community and everything that goes with it okay so again it's completely free go ahead sign up for that right now and with that said let's just jump right into the video take a look at this project this is a reimagine amazon if it was on the web 3 space so instead of selling normal products what we're selling is digital assets so let's take a look around this looks amazing imagine looking at all of these guys and owning any of these and if you notice something here it says 2ac what that says is that in this amazon we have our own currency or unique tokens which is all part of this build so this is the demo here you're gonna see this nice connect wallet button the moto pops up with all the options click meta mask and you can see that we're authenticating with morales so let's click sign and bam there we are and this actually shows how much each i have and guess how much code that took literally one line of code that's the login and authentication let's see if we can actually buy stuff if i click this this beautiful model comes out and we can tell our computer how much amazon coins we want so if i go ahead and hit confirm and there we go look at that we got 20 amazon points as you can see here and i'll take a look at that in a second but look there's a little thing called transaction receipt that i set up here's proof that we're actually sending east to the contract through etherscan and you can track it right here there it is thank you we can access out and now i have 20 amazon coins to pay with let's say i want to nokia i'm going to click the metamask notification again so that i can purchase it let's hit confirm on that boy and let's see confirm and look at that recent transaction right which shows me all the recent transactions that i as a user have it's going to be different for everybody else transactions confirmed and now we purchase it i know i purchased it there's this little transaction history here if i click on it look at that i bought the nokia and then we have the ether scan link for that as well to prove this is the receipt of us buying it this is actually amazon this is one of my favorite projects so far so if you are excited about this let's go ahead and get to the build what is up guys welcome back to another video lance here again and yes we have the face cam so without further ado let's get started on the amazon clone so all you have to do is hop over to your terminal and let's create that project folder so to create that project folder all you have to write is mk and then the project folder name so i'm going to call this one amazon clone blockchain okay once you make that folder we have to cd into it and the idea here is we're going to be making this app using next.js so in order to make our starter nextjs project you just have to write npx create next app at latest and then the important part here is the space dot if you add the space dot it'll take all the starter and xjs files and put it in this folder otherwise it'll make a new folder and put the stuff in that so you don't want to fold it within a folder you get the idea i'm gonna hit enter awesome we have the next.js folder and you can see it that folder right here so let me go into that folder real quick desktop projects builds amazon clone blockchain okay as you can see we have all the starter nexjs files the pages the styles the node modules awesome and since we're here i'm just gonna make another folder called smart contract if you've watched our previous videos you know that we're gonna be setting up hard hat in here and this is where we're gonna write some solidity so if you're interested in learning how to make your first solidity smart contract stay tuned later in the video when i show you guys how to do just that okay since we're here open up your browser and let's get tailwind installed so luckily there is this nice documentation on how to get tailwind with next.js this is all you have to do and since we already have the project open we can open the terminal in here okay once that's done all you have to do is follow what i'm doing and if you get lost follow this documentation so to install tailwind you want to type in npm or yarn if you're using yarn i'll be using yarn so i'm going to say yarn add dash d tailwind css post css and auto prefixer and notice how there's three things we're installing three different packages right tell when css post css and auto prefixer okay once that's done we need to initialize tailwind by writing npx tailwind css init dash p so i just copied that from documentation and pasted it in my terminal notice how it says it created a tailwind css config file and a postcss.com right what we care about is the tailwind dot config right and you just want to add everything in this content so see how it's highlighted so what i'm going to do is just grab everything inside that array don't make sure you don't miss anything don't put anything extra right you paste it and it should look exactly like the documentation cool that looks like it's good to go and the last thing we're going to need is the tailwind directives in our global.css okay so to add that go to your global.css and we can actually erase all of these default boilerplate code and add in those directives all right cool go ahead and hit save and since we're here as well we can also add this to the global css that i have in mind which is just importing this google font ubuntu and using it and making this the background color that's it that's all i'm doing here i'm gonna press save and we should be good to go and once that's done your tailwind is all set up we can run our project by writing in yarn dev okay and it usually starts it in localhost 3000 compiled successfully which means it'll load and there it is if you see a screen like this is the starter next.js app let's go ahead and set up a couple other things let's go ahead and set up a couple other things all right a big proponent of this app is actually using morales so to get started with morales hop over to this link with me and set up a couple things if you guys ever heard of firebase at all you can think of it as the firebase of crypto what do i mean it's essentially the leading web development platforms that helps gives us developers tools to make adapts really fast and really easily a lot of the setup just requires one line so to get started with morales so i can show you guys cool things that you can do hop over to this link right here it's t dot morales dot io slash clever and i'll lead you to this beautiful page right here go ahead and sign up so we can create our server i already have an account with them so let's log in okay once you make an account you should see a screen like this i'm gonna go ahead and make my window a little bigger there we go so if you see something like this is the morales servers page what we need to do is we need to create a server because if we were gonna do this without morales we have to create our own rpc node and we have to set up all the infrastructure around it which can lead to a bunch of headaches a bunch of reinventing the wheel with morales it's going to make this process a lot simpler because there's a lot of premade functions and they query a lot of the information that you have for you and we're going to make good use of that in our database so before i get too excited and talk about that let's just make a server yep so here you're gonna decide what kind of server you need we're gonna be working on the test net for the instance i'm gonna call it amazon clone blockchain for the region i'm gonna click what makes sense for me which is new york and you're going to notice something cool here there's a bunch of different chains that morales can communicate with right one cool thing about rouse is that it's actually cross chain i know that i'm going to be working on the rink to be test net so i'll click that and add the instance let's go so you can see our server is now up if i click view details all right these this is the server details is going to be relevant because we're going to need the server url the app id and the master key okay other than that we have there's a couple cool things that come with morales you're allowed to use cloud functions you can have this dashboard which i'll be showing you guys later on so stay tuned all right you can see our database already started with all the users that are connected every time i log in this is gonna populate and it's gonna store their wallet address and all their transactions which is super cool because we can then query that in our app and use it okay and on top of that morales comes with a bunch of different plugins that we might be using later on in our future builds there's a pinata ipfs plugin that makes it easier to interact with pinata another one that's really interesting is that there's a oneinch morales plugin that helps integrate defy or dex aggregators of one inch to any project just super cool the fiat which enables a quick real dollars to crypto swap through morales so that's insane be on the lookout for future videos where we use that now that we have our server that's it for morales the next thing that we're gonna set up is we're actually going to be able to deploy our app to netfly and make it live so that others can so that you guys can share it with your friends family and put it on your portfolio so to do that we'll be using netlify and if you haven't already let's go make an account together okay making this bigger again i'm gonna go ahead and sign up for netflix once you guys make an account with netlify it's actually really easy to get your project up and live all you have to do is click add a new site and import an existing project from there all you have to do is just connect your github offcamera i already made a github project containing the starter files go ahead and make your repo so that you can do the same thing i'm doing so here we go we have the amazon clone blockchain repo that i have and it's just the initial starter files nothing too crazy up on a github repository so going back to here connect your github it's authorized look for your repo there you go we got the amazon blockchain and then put in make sure this says yarn run build and let's deploy our site cool and as you can see our site is going to be deployed and then we can click this link that pops up and we should see something similar to what our project currently looks like which is just the starter next js app but the cool thing is every time you push to your github the site gets redeployed and it has the latest updates so we'll check back on this link and i'll show you guys how to rename it okay making this smaller again and with that said a lot of the setup is done let's get the coding okay now that we set up netlify and morales we need to install a couple different dependencies for our app so coming to the terminal i'm going to install using yarn add morales and we also want react dash morales throughout this app we're going to be using a couple different dependencies i want to install install most of the ones i think i need okay and if you look at your package json you can see all the dependencies we added morales and react dash morales a couple of things off the top of my head that we'll need is if you do a yarn add let's get react icons react spinners and react dash simple hook modal i know that's a long one right so we got react icons react spinners react simple hook mode the next batch that we're going to install is yarn add we'll need at web we'll need at wallet connect slash web three dash provider space to get the second dependency which is at web three auth slash okay and since we're here we could also do ethers okay i think i suppose i think i spelled all of them hit enter come on you can do it okay it's finally done all these packages so looks like it's finally done as you can see we have web3 auth and the wallet connect and ethers only a couple more guys i'm gonna be adding the magic sdk we'll also be using moments in here since we're going to be working with some time and important for this next section would be the web 3 ui once you have all three of those installed that's going to be all the packages we need for this project for now all right as you can see these are all the packages that we need to install you might add some more later but i think this is a good start so all i want you guys to do next is head over to your pages folder and click index.js this is the reason why we see this page is because of this index file what i want to do is make this my own so i'll delete everything in here so let's highlight line 66 and go all the way up line eight i also want to delete all three of these things and if you guys aren't familiar with tailwind it's essentially a css framework that makes it a lot easier and quicker to write out our styles so as you can see the class names have a styles.container alright we can inherit these properties by making a styles object in each component and defining each key with the styles that we want so if i say container here this div is going to keep the styling of whatever container is and i can tell you it's pretty simple there's a css cheat sheet out here to tell you a translation of what everything means for example h full is going to mean like the full height and width of the page essential okay then we can give it a flex property and you can set the background color like so cool and now this should inherit all that styling if i hit save oh that's right we also have to run our project under your dev okay and then we can reload it okay there we go and if you see a blank page don't be worried that's that's exactly what our index looks like what i want to do here is fill this index page with the components that we want so what i like to do is set them up so i know what's next i do a sidebar right here and we also want the main component which is going to hold everything if you guys saw the demo we're going to be making a redesigned amazon for the web 3.0 space with a bunch of cool digital assets that you could buy so the sidebar is going to be that nice sidebar that you guys saw with our login functionality and all the tabs all the sidebar items okay and since these components don't exist yet i'm gonna go ahead and comment them out and i'll comment them back in as needed so as you can see i already got started while i was waiting for those packages i made a components folder and i made a sidebar.js so i'm gonna go ahead and click into it you're gonna notice it's empty there's a cool code snippets that you can do like rafce with the extension i'm gonna click that and it sets up the component hitting save we can go back to the index and now we can actually import that component so let me show you a fast way to do it you can uncomment out the sidebar start to type it out and you should see this nice little auto import click on it and there you go that's all you have to write to import a component don't forget to close it and if i hit save now there she is our sidebar is loaded on to our index.js sounds good so in this next section let's code up the sidebar all right so now that we have the sidebar set up i want to take this moment to talk about how to do certain things for your dap for example if i want a login button or in other words a connect wallet button we can actually do that using morales so to get started remember how i said you need to view details and get all this information we're going to use it today so one of the first things i'll have you do is let's create a new file at the root and this will be our dot env file this will hold all our environment variables in here all right so once you make your dot env file we're going to create a couple variables the first one is going to be next morales server and i have to do now is to set equals that url next i'm going to grab the app id and set up this variable which is next public morales app id paste boom cool so we have the environment variables head over to your pages folder and then your underscore app okay in this underscore app this contains our actual next.js application and what i want you to do is let's get the morales provider from reactmorales cool we essentially just want to wrap our whole next.js app with that provider so what i'm going to do is format it like so at the top here i'm going to put in the morales provider and let's insert our app in between the two cool the next thing we want is in the opening tag of the morales provider let's set up the server url which you guessed it will be the environment variable process dot next public morales underscore server then it's the app id setting that equal to the app id okay hit save id server cool it has the same name and usually you just want to reset your terminal okay it says loaded env we're good to go all right let me just refresh this see if we get any errors okay it's compiling okay it's done compiling and look we got the sidebar still no errors that's a good sign next thing you want to do is hop over to the sidebar and at the top here let's import the connect button from web3 ui cool and then inside this div let's actually get that component and say connect button let's hit save hey look at that we have a connect wallet button and i didn't have to do any styling the best part is it has already some functionality to it if i click connect wallet this little moda will pop up with you with all the different wallets you can sign up with i'm using metamask so i'm gonna click meta mask and then it'll ask me to sign off to morales that they can use and query my information okay so there's the message this is signing for authentication sign and it's connected cool so that's how we can set up a login button right off the bat with morales next thing we have to do is on our end we have to set up what it would look like when the user logs in and use some morales hooks to check if that user is authenticated sounds good so let's build out the rest of the sidebar and i'll include more functionality for login as i go cool additionally another cool thing about what we just did is if you look at the dashboard for your app go under user you're gonna notice that there's two users now because every time you connect your wallet to your dap morales will take note of it and add it to the database what we need to set up is getting the etherdress and i'll show you guys how to update that with a username as well later on so keep that in mind let's move on okay cool so now that you have an idea about the connect button what i'll do next is set up all the different divs for the sidebar right so temporarily removing this connect button but for the most outer div i want to give that a class name if you're unfamiliar with tailwind is a css framework that makes building and styling your divs a lot faster it's kind of similar to how bootstrap works if you are familiar with that so for the class name we're going to give this styles dot oops not stylesheet styles dot container and there we go styles.container in there the next day we're gonna make is the div with the class name of profile styles.profile okay and in this we're gonna have something called is authenticated which we'll get from morales if it exists we want to load a certain html element so if it is authenticated we're going to load styles.profile pic container and we need a closing div for this so it's going to be this one in this we're going to use the images from next.js so i'm going to need to import that all right so the one that says next image so it's selfclosing and all next thing i'm going to do is pass in some properties we're going to add a source but i'm going to do that a little bit later for now i'm just going to add an alt of profile which i actually don't need to do the action can do this alt of profile class name will be styles profile pic and the height will be a hundred sorry and this should be curly brackets the width should be 100 as well cool and we don't have is authenticated that doesn't exist so let's say it is authenticated for now so we don't get any errors hardcoded to be false cool and of course we see this error because i didn't make my styles object just yet and actually i want to put this in a fragment so let's leave that there okay and after that closing div we'll have if there's no username because by default when you log in you won't have a username but you'll have the option to fill in the input field which will then update that user database okay the next thing is we want to set up is we want to check if there's a username so if there's no username i want to have the input field out there so i'll make another fragment and i'm going to say div this one's going to have a class name styles.username and like i said i want the input field to show up so that we can add a username to that account and input is actually a selfclosing tag cool let's have type equals text placeholder is equal to user name i thought the class name of this input will be user name input and the value is going to be nickname but we don't have that set up yet so i'm going to do one of these yeah it's going to go under the column nickname but we don't have that so i'm going to comment down i'm going to do an on change i want to set the nickname all right nick the target value cool and again this doesn't exist either set nickname it's a state that i'll have to set up later but as you can see this gives me an idea of how i want my project to look okay and at the end of that div you want a button and inside that button it's gonna have the class name of styles dot set of handle set username okay and we actually don't have that function either but it gives me an idea of what to expect okay we haven't finished closing off our divs which is why we see that and for the button we want it to say sit okay here we'll have the closing the closing fragment of this second one so we'll have this closing fragment right here and remember what we're doing here is if there's no username show me the input but if there is show me the username after that closing one all we have to do is set up the rest of the conditional rendering which is just going to be something like this which should just be div closing div and this inner one will give it a class name of styles dot welcome and here we can say welcome the username that we put for now i'll just put uh lens but we're gonna change this to make it dynamic okay cool once that's done i'm gonna make that closing fragment here cool and i think what i need to do is clean this up a bit so i'm gonna take a moment and do that and just show you the changes okay cool i hit save and it says styles is not defined that's because i haven't defined any of my styles yet which is okay so i think for fun let's just get that out of the way right now i'm gonna go at the top here and say const styles equals object and as i showed previously if you want to style the container you'd have to write the key and the value of it would be the css so again this will be h full the width i'm actually going to set to 300 pixels for the sidebar give it a flex property and i want to make sure it's columns background color of this and we'll say static cool so you get the idea i want to add the rest of the styling feel free to pause the video to take a look okay once that's done you should see something like this represents the little container that will put the connect button cool like i was saying this is what you should see if we were to we also have that username property down below if there's no if we're authenticated we might not have a username so temporarily let's make a hardcoded one and let's say our username is equal to all right and while we're here we can actually change this hardcoded lens to whatever the username variable is cool so we want to check if our conditional rendering works is if this changes to true this styling and then it checks if there's a username and if there is it'll say welcome lance if not it'll have an input field saying to set your username okay remember how i said we're going to go back to images i want to be using dice bear for the images which is just going to generate a random avatar based on what we pass in as the user name let me use something a library called dice bear which will generate a random photo based on your username and i already have it precopied which is just this all right it's going to take in whatever username dot svg that gets generated next we have to do is set up our next.config.js which i pasted it in and this is what we need we need an images key with an object and a domains key with an array so take a moment pause the video grab all of these because we're going to be using them sounds good cool so if i hit save we should be allowed to use images from dicepare i'm gonna go back into here moment of truth let's check if our conditional rendering works i hit save let's go welcome lance all right we can see that if i am authenticated i'm going to load the image if i have a username it's going to say welcome lens okay and if i were to change my user name let's say my username is kazi said save that's the kazi's randomly generated svg based on his name cool so what if i didn't have a username we might see an error here if it's save yeah it's because username input is not defined oh that's actually because this has to be styles.username input hit save there we go that's more like it and if you're wondering about this styling that's because we don't have any css for it for those classes the css would look something like this transparent border justify content center item center and the text is white and the username will have these properties as well okay there you go it looks a little bit nicer if you're wondering why it looks like that it's because we need to set nickname css still too if you see the button right here we need this one okay so i'm just going to add that in real quick there we go that's a lot better cool and these don't work just yet because we need to set up those functions to set the nickname so for now i can show you what it would look like if i were to insert a username save welcome lance cool okay coming down below here on line 60 for me i want to add another dip in this div i'm gonna call it class name styles dot connect button alright so when you're writing this make sure it's still inside the styles.profile the button should still be in here and remember that connect button we set up last time you want to insert that in here there we go it's looking amazing cool from there let's set up the rest of the menu items so to set that up we just need to make another div here i'm going to give it a class name of menu cool so after you make that div i don't know if you knew but if when you're working with the next js app you can actually do some routing to different pages within here instead of getting a react router so what we can do is import link from next slash link and from there come down below and let's add that link here with the href of c forward slash the reason why i want to give this an href before slash is because i'm gonna put the amazon logo in here and when you click the amazon logo you could actually go back to the home page so i want to do class name and we're going to use this div a lot styles that menu item and in here it's going to take another image component from next js should be selfclosing source is going to equal logo which we don't have yet but i'll show you guys what i'm going to do for that the height is going to be 30 and the width is going to also equal 30 class name it's going to be styles dot amazon logo cool you don't have to hit save because it's not going to work because logo doesn't exist so let's make logo exist right now so what i did is i actually gathered a couple of assets put it in a folder and now i'm ready to paste it feel free to get your own assets for whatever you want to use for your app and i don't want it to go to pages actually i want this assets folder to go to the root so i'm going to click outside paste that's more like it cool so now i have an assets folder and if you look into it we have the amazon logo which any of you guys could pull and i have some pngs of some digital assets i'd like to sell this could be completely customizable you can make this store whatever you want so this is what i have set up so make sure you make an assets folder and put all your png files inside there cool once that's done i'm gonna go ahead and get the logos all right we need an amazon logo and amazon logo full so now this logo exists okay and you can see it right there we didn't make the menu item or the amazon logo styling yet so it looks really plain but bear with me it's on the way so in between 75 and 76 for me i'm going to write my amazon and i want a little line break here so i'm going to say break board and closing okay my amazon board nice closing link awesome let's make the next menu item which will look something similar like div class name styles menu and remember how we downloaded react icons earlier let's actually use one of them this one i'll use is called the far box and underneath that i'll put collections and if you use fall box you have to import it so to use file box i'm just going to put import file box from there hit save there it is little package symbol that means collections same kind of process for the rest of the menu items so let's work on that i'm going to make a div class name styles so you get the idea now all right so for this one it's actually called bs fill bookmark fill okay and it's going to have the text of saved i'm going to hit save of course it doesn't exist so it's going to give us an error let's make it exist by importing it import react icon bs and that's what it should look like okay and just to quickly speed this up i want to make another div except this time it's not going to be bookmark it's actually just going to be person fill and put back that closing cool let's go ahead and import it now so go to the top and import it cool and we're almost done we actually have one more link here to our second page which is going to be our transactions history that's right we're going to be able to purchase our digital assets and you're going to see like that recent order that you see with regular amazon and this is that link to that page so it's going to be href of slash history and again we don't have that set up just yet we'll still have to make that page late so within there you guessed it we're going to have a div class name menu item okay and this one will have a react icon of a i outline history okay hey i outline history and the text it'll have is transaction history because that's the page we want to leave it all right again doesn't exist let's get it oh that's right we have to close this div that's more like it okay there we go awesome and after that after the closing div of the minute the next thing we want to make is the div for the company name so class name dot company name and this right here will have that image logo full so we got a nice amazon logo at the bottom of our sidebar it is amazon and i can give this a height equal to 100 and the width equal to okay there she is awesome okay let's get the rest of the styling which is just gonna be the menu item and the amazon logo i believe okay it's looking pretty good uh the logo is a little bit off i think it's because what's the class name of this company name yeah we need the company name css which i have over here on the side boom all right so take a moment this is the css i hit save there you go everything's lined up in beautiful awesome and well that's actually just the sidebar cool in this section i'm going to be setting up the context folder if you didn't know in this app we're going to be using the context api so i can create all my variables and functions there and call it anywhere within my app by making them global let me show you what i mean by creating the folder so i'm going to make a new folder make sure it's at the root of the folder i'll call it context and inside that contacts folder let's call it amazoncontext.js awesome like i said this context folder is going to set up the use context hook from react and we're going to create a context so we can put all our variables and functions in like a global store that we can call anywhere in our app so let's get started first thing you're going to do is at the top import all the hooks that you're going to use so for me i know in this context file i want to be able to create context next thing i want to do is get the use state hook as well as the use effect hook since we're here i'm just going to import it from react so got it cool so after that we're going to also import use morales and later on we'll import something else but for now this is fine and you can guess where we're getting this from it's react dash morales nice cool that should be good for now the next thing you want to do is export const amazon context and then you want to set it equal to create context later on we're going to be utilizing use context hook and passing in amazon contact inside that hook okay next thing i want to do is set up the provider i'm going to export const amazon provider and it's going to set equal to an arrow function and inside the parameters here it's going to take a destructured children awesome and we can also set up the return while we're here it's to return something like this and what we're returning is the amazon oops context dot provider okay and in between that it's going to take children and let me just format it nicely now here's the important part go into the opening tag of the provider and make some space like this and what you want to do is add a value right what you want to do here is anything that you put in these curly brackets is what's going to be global so before we can pass anything inside this value prop we need to create a couple things okay so now that you put value anything that you put in value that we create in this context is going to be passed so that it can be global and this shouldn't be uh amazon space provider it should just be one word there you go so with that the context is set up the only thing you have to do now is go in your app.js and wrap the amazon provider around this main component all right same thing we did with morris provider so that we can use morales within our app we want to wrap the amazon provider so let's import that import amazon provider from the context so it'll be dot forward slash i can see the context slash amazon contacts cool and i wanna wrap this within here so i'm gonna say amazon provider close it off and wrap our main component within that there you go and once you do that guys we're able to use contacts within our app all right guys now that we've set up our context let's go ahead and start filling it out so that we can set up everything that we're going to need for this sidebar so before i continue i want to just quickly read what the sidebar component has so i added a couple of things it might look a little different from earlier but this is the same gist right so there's something called is authenticated that we're going to make in context which is what we're going to get from morales it's a cool is authenticated it's something we can get from morales which basically just checks if a user is connected to your application so for example if i didn't have a username or on morales we'll call it nickname there should be this input field that comes up right that's because of our conditional rendering if is authenticated is true we'll see this screen but if user if there is no username then it's going to show this input field where i can set my nickname that's what we're going to set up with our contacts today and just to show you if you do have a nickname we can pull that nickname from morales and you can see welcome your username right alternatively if you don't have a username and also and if is authenticated is false this is what we should see okay so this is how it is hardcoded we want to make it a little bit more dynamic okay cool now that you got that i just want to explain how the connect wallet works so we're using web3 ui kit which is super cool it sets up the login functionality for us so if i were to click meta mask and click next and connect we'll see that morels authentication is set up hit sign and nothing's going to change because i didn't make it so that these variables change the conditional rendering isn't moving but on morales side if i go into users and i make this a little bigger there's nothing yet that's the default thing but if i hit refresh there it is a user is logged into the morales database how cool is that by just using one connect button component from web3 ui kit you already have a login functionality so that's super cool next step would be to make it so when i do connect my wallet my front end matches to show that i am logged in because even though i logged in as a user it's still not there so let's get that set up let's see let's bring my meta mask back in cool so just for for the sake of time sorry to make this less confusing i'm going to disconnect my account and also refresh so now i can be sure i'm not logged in another thing i'll do is let's delete the user that's stored on morales database because i'm going to log back in again notice how it has a username etherdress created.passwords i'm i'm gonna hit this what is going on okay cool so i'm gonna just make it full screen hit edit and then you can delete a row all right that's essentially deleting off our database so there's no record of it but don't worry i'm gonna log back in soon cool so we can hop back to our local host what we're gonna need to do first in our amazon provider is make use of our use state hook and keep track of a couple of things the first thing i'm gonna make is something called const username right this should look familiar because if you remember in our sidebar this controls what my username is we saw it as lance it's going to be equal to the you state and it's going to initialize it as empty string cool next i'm going to have something called nickname as a state and this it looks a little confusing but it's going to control what i have in my input field let me show you all right so again if i'm logged in right set nic is going to control what is in this field and it's going to run on change and i have that set up over here i haven't completed that for now because what i'm going to do is take that state on the input field and then set that as my username so it makes sense so let's go and set it up okay use state and by default the input field should be blank so i'm keeping that in mind by making it blank all right okay another thing we need to do is take a look at this used morales hook from react morales there's a couple things that we need to grab from it so i'm gonna set a lot of it up now so i'm gonna say const and i'm gonna say cons authenticate is authenticated enable web morales and user and is web3 enabled i might not use all of these so i'm going to just grab all of them just in case but for sure what we're going to use is authenticated for this part right here okay cool so we're getting all of these from the used morales and destructuring it what i want to do next is set up a use effect that whenever i do connect my wallet i want to be retrieving the username or in other words the nickname from my database okay so i'm gonna show you guys how to do that just clean this up real quick cool all right set up a use effect now okay and use effect takes two parameters which is just an arrow function as well as a dependency module because use effect is gonna run at three different points in a component's life cycle when the component is mounted when the component is updating and when the component will unmount so with the dependency module you can control when you want your side effect to run so if i leave it blank here it's only going to run when the component first loads if i put a dependency module such as username which i actually will later this use effect will also run when the username changes so think about how you want your code to work and that's how you can structure your use effect okay another thing i'm going to do is add an async function here and with this async function i'm going to set it up like so wrap this around and then i'm going to put these parentheses so it's like a selfcalling function that's asynchronous and what you want to put here is a condition right is authenticated we're getting is authenticated from use morales it basically just checks if the user is connected or authenticated and if it's true that means i'm logged in so if i'm logged in i'm going to make a variable called cons current use equals await user question mark dot get nickname so this is how we are able to get the nickname from our morales database and this question mark it's just simply put on a high level it's just making sure if there is a nickname let's get it okay and if there isn't we won't need it cool okay from there we're gonna use one of our states and set our username to be the current username so if this is confusing to you at all if we look at our code here what it's doing is when i log in it's going to get a nickname and once it gets the nickname from morales it's going to show up here so what would that look like that's the equivalent of me putting this as my username so that's what we did see this is us retrieving the nickname that's there if the user doesn't have a nickname yet this is what you'll see make sense cool i hope the visual helps you guys because it definitely helps me so that's that we're going to come back here and use an else for getting the user's balance of their amazon tokens but for now i'm only worried about this so for this right here i'm going to use is authenticated user and username so if any of these variables change this use effect will run run this get right here okay so that's the use effect that we're gonna that's the use effect we're gonna need what we wanna do next is create a function where if i were to type in for example kevin inside this input field here i wanna be able to click set nickname and it will set my username on morales to be that because not everyone's gonna start off with the nickname so to get started on that we should create a function here i'm gonna create a function and i'm gonna call it const handle set username okay and in cons handle set username if there is a user then i want something to run all right if there's no user we can just console.log hey there is no user to set a nick right so not console.user no user so no user to set nickname but if there is a user i'm going to have another check here is that if that user has a nickname or in other words if nickname here is filled out like if i have lance in there what i want to do is do a user dot set what i want to do is user which is referencing the user in morales dot set parentheses nickname to be nickname okay what this does is if i press set nickname it's going to check if there's a user connected to our app it's going to check if there's something in the input field and in this line it's going to add a column in my morales database called nickname store lance as the nickname so that when we get it later lance will show up cool so after that what we want to do is user.save because we want to update our database from there we can just set nickname to empty string so this will clear our input field when we're done okay cool and the else statement for this one is going to be an edge case for if there's nothing in the input field you should just see a console that says can't set empty nickname okay so that's the handle set username function all right so that looks good to me what i want to do next is take a bunch of these things take a like everything we just made and put it in because remember earlier i told you whatever you pass in this value here is going to be global throughout our whole app so if you guys know anything about props we can prevent prop drilling this way so what i'm going to do is pass in is authenticated we're going to need a nickname we're also going to need set nickname and we're going to need username and while we're here let's also get set username cool so we're passing a lot of things into our value but that's not going to make our app work right because to use our context we need to go back into the sidebar and let's import i already took it for you we want to import use context from react and let's also import amazon context from dot dot slash contact slash amazon contacts so i'll give you a moment to do that done cool so let's use that hook so to get started using that hook i'm going to come down here and we can say okay so get started using context the first thing we're going to do is destructure our context so what that means is write something like this cons curly bracket equals use context now you want to put in the parentheses what context would you like to use if you remember at the top i was talking about how i imported the amazon contacts we set up so i'm going to pass that in here cool now the question is from your amazon contacts what do you want to take and the structure out of it so let's see what's available it's all of these i want to take all of these so what you can do is quite literally write them all out so just to make the format look nicer i'm going to say i want is authenticated i also want nickname set nickname username and now that i'm thinking about it we should also be passing in our function the one that we created handle set user name so i don't think i need to set user name here because that should be in our use effect what i do need is the handle set user cool so that's the last thing we're missing let's take handle set cool so that's everything we need and notice these little squigglies that's because i have these variables they already exist but i don't need to use them anymore what i can do now is take this out let's use our context oops and now you can see i'm only seeing the connect wall button because if i were to console.log is authenticated it's false right now i haven't logged in and that makes sense for our app so a couple things i'm going to do now is here i have it hardcoded to lance it should be username so let's see if this will break it let's do a template literal user awesome so didn't break it yet we're going to make use of that username the reason it's not breaking and saying username is not defined or it doesn't have a value is because of our conditional rendering so if there is no username then we'll see the connect wallet button and that's how this is working right now so what i want to do is comment back in this on change so all this means is when there is no username or in other words no nickname you should see that input field and every time i type in that input field it gets updated next thing i want to do is comment out this one which is the on click which runs the handle set username that i set up right here okay now it might just be the spelling handle set username okay and let me just double check that's how i had it yep there we go cool so everything should be good now let's take a look and let's try it out don't forget to add these parentheses i did a couple tests all right what you can do now is let's refresh and this should work now after adding the parentheses i'm going to hit connect wallet meta mask and i'll just make this a little bit bigger there we go metamask should see a little popup here there it is connect with account two hey there we go look at that so the button handles the login functionality the use effect is gonna help us with our rendering so now we have this because now is authenticated is true right is that the thing that is true but there's no username so how do we add a username we're going to make use of our handle set username function so what i'm going to do is let's type in name for me lance and i'm going to hit set nickname right and if we look over to our users we should see three total one is initially created when you first start out but the first one one at the top is the one that i just created just now okay so if you look at username i mean nothing's name if we look nickname there it is there's lance and when i was testing earlier there was loans okay so there we have it awesome so now if i hit refresh it's going to run that use effect to get the username hey there we go welcome lance and with that that's all the contacts that we need for the sidebar okay so let's move on to the products part of our build all right cool so like i said we're going to be working on the assets part of the amazon clone so if you remember the demo you looked there was some beautiful moving digital assets that we could buy so we have to set that up using morales database so what i'm going to do is let's make this full screen and let's head over to our morales dashboard but if you didn't know the morales database is built on top of mongodb so what we're going to need to do in order to pull our assets from the database is actually to set it up so this part is setting up your assets on the morale data space cool so to get started on setting it up hit this plus icon right here and as you can see you can create a new class which creates a new collection of objects what you want to do is select the class that you need and there's some predefined ones over here like user role product session but we can create custom ones which is cool so i'm going to call this one assets all right what i want to do is create the class so now we have our assets over here what we need to do next is add the fields for asset object so we're going to do is add a new column and here you can store the type of data that we want so as you can see it's by default it's string but you could also store booleans numbers date geo point file a pointer relational make a relational database and much more so a bunch of cool things you can do for the most part we're gonna be keeping it simple by making all these strings so the first key of our object would be name and as you can see it instantly adds the name column into our assets all right cool so you don't have to just keep clicking add a column if you think about the next key it's price and you can click add column and continue if you know you're going to make more so we made price now let's also make src which holds the image of our asset and that's going to be the last one okay one second okay and then from here let's add the actual assets itself so what we're going to do is actually create a new row and in this row you're going to see a lot of these are automated what you want to do is start defining the name price and source right so don't worry you can this is where you can add your own unique assets so if you don't like ours and you want to have some cooler things that you want to show like your own nfts that you've made this is where you put that in you put the name pricing source here for me i have a json file that you guys will have access to that you can include for your project so if i scroll down below i have a products.json and you can see a lot of it here so i'm going to be referencing this from time to time so the first thing i have here is something called bricktopian and let's see if i can see this cool so now you guys can see it better what i'm going to do is just copy the name of it bricktopian and i'll also format it like this and i'll show you like that so the first part of this is named bricktopian you can double click the field here and double click to make sure you see this little line and you can just paste the name that's it bricktopia's name i remember the price it's actually two and what i don't remember is actually the source file so click copy everything in the source you don't need the quotes and you can put that in the source field okay cool we're gonna do that for every single asset i'm gonna be moving a little bit fast now and remember if you wanna use ours use the json and if you wanna use your own feel free to fill it in there we go we have about eight you can add as much as you want i just wanna make sure our app is full with amazing things so there you go that's the products next thing i'm going to do is let's set up the front end of our app now all right so now that we finished setting up the assets on our morales database i need a cool way to show them because if you look our app is looking pretty bland right there should be a main component here that shows all our pretty assets that we just added so i'm going to make this smaller again and let's focus on the code so if you remember i'm going to go to my index and we also have this main component right here so let's set that up i'm gonna hit ctrl b and let's add another component here i'm gonna say main dot js cool and if you guys have the extension you can do an rafce it will set up your component for you and we should be good to go next thing we can do is flip back to our index and let's bring in our main and all you need to do to set up your main component is to write it like so and then be sure to import it into your app someone say main from components slash main so i'll hit save it's a weird error there there we go so see our main component is there it's gonna look a little funny because we don't have the header just and the features just yet so let's hop over to main and start building it up what i usually like to do is build out all the jsx first so i'm gonna format it and another thing i like to do is set up any import statements we might need so thinking ahead i'm just gonna use a use context because i'm gonna bring in context here later and also use effect sorry not use effect i'm gonna bring in use context and that should be it for now okay if i want to utilize use context we should also be getting our amazon contacts while we're here it's not going to come into play yet i'm just going to be making the front end first cool so this is our first outer div i'm going to do i'm going to give it a class name of styles dot oops styles dot container and within the main there's actually three components in here so i was mentioning earlier i'm gonna make a header component right i'm gonna make a featured component and as well as a cards component the cards component is going to represent where all our digital assets of the store are going to be so i'm going to comment out the ones i'm not going to build yet i want to focus more on the cards cool if you save this you're going to get error because we haven't defined our styles object and set up our tailwind so what i'll do is set that up now and i'm just gonna do a cons style equals an object and the first one i'm gonna do is container and it's gonna be h full width full give it a flex property and then you're going to want it to be in columns and you're going to say mt is 50 pixels and pr brackets 50 pixels as well you know i'll see here so you can see it a little bit better let's zoom in a bit cool how's that guys yeah i know it's a lot better overflow overflow dash hidden and that's it for container all right we only have container here but thinking ahead i'm gonna have a bunch more stylings so i'm gonna set that up now there's something that's called recent title and for recent title i'll have text to excel font bold oops it doesn't need these commas there we go fun fold text center mb 20 pixels text center empty 40 pixels and that's going to be it for a recent title there's also going to be a cool recent transactions list so all the digital assets that we set up for our database you're going to be able to buy them with amazon coins and the amazon coins is something that we're going to make that you can use for your site so i'm going to make a recent transactions list that shows my recent transactions so well i'm getting too excited we're not making that yet i'm just going to do the styling for in the future so transaction card is next let's add that comma back in here and as for styling it has a flex property and we can do a justify between here all right mb 20 pixel i'm gonna be p 30 pixels let's give it a background of tag 4 2 6 6 7 e make the text white rounded excel shaft excel font bold give it a nice gap of 20 pixels and again if i'm over moving too fast for you guys feel free to pause the video so you can not miss any of the stylings cool so again the only thing that we really have is the container and again we're seeing card is not defined let's go ahead and make that component cards with an s.js then you're going to do an r a f c e hit that card is set up you can go now go into back to main and let's import card import cards there we go so we got main and we also have cards okay so let's move on to the cards component one moment switching to cards all right so like i said the cards component is going to contain all of our assets right so what i want to do here import anything we might need which is going to be use state use context and that should be good for now and we can import amazon contacts because we're going to be using that later i'm just setting it up for now okay time to work on the rjsx for cards which isn't too many just like our main i'm going to give this div a class name class name called styles that container that style sheet thank you container all right from there we're going to make another div class name this one will be called title right we're going to have a new release here new release at least that's how you spell it cool let's make another div and here we'll have a cards div so it'll be styles dot cards so we're gonna do div class name styles dot cards and then within here this is actually where i wanna map through another component for each asset so what do i mean we're going to be getting the assets into here from our contacts and i'm going to map through each asset and for every asset i'm going to make a card component right this is actually the individual card that each asset is held in we're going to get squigglies because we need to make a cards component so i'll just do card no s dot j s r a f c e save hit enter save cool and now that we have this here i'm going to go ahead and import it import card from yep if you save we'll get the styles error it's not defined and let's go ahead and write our tailwind css so i'm going to set up the styles and again for the cards there's not much css as well it's just container going to b h full width full flex column ml20 pixels oh i actually got to put that in t 50 pixels as well and again i'm going to alt z so you guys can see it better yep awesome so i'm going to title and i'm going to go like this let's make that text excel font folder mb dash 20 pixels mt dash 30 pixels ml 30 pixels there you go cool so that's the title css then we want to get the card css oh and if you see that the comma here then we're going to have give it a flex property you want to do an item center and then a flex wrap and let's give it a gap of 80 pixels let's go okay hit save now we don't see any more errors shouldn't see much styling here because it just should say new releases and looks really small let's go ahead and check that out okay so yeah that's the cards component you won't see new release it's going to look funny but that's because we haven't set up our header yet i have some spacing for that so don't worry that's totally normal all right i want to show you guys the cards first get the cool features done first so there's the cards again for the card here what we need to do is a key oops what we need to do here is a key equals item dot oops item that id let's do an item equals item attributes all right and again we don't have any of those things so if i were to do something like so you're going to see an error called item not defined that's because we're not pulling any actual assets so temporarily let's make a couple variables i want to make an item here i want to make a variable called cons item make it an object and let's just give it an id of zero and there's going to be an attributes here and i believe attributes will also be an object with the name so i'm going to make like i said i'm making the item variable and i'm going to make some static data and i'm going to make an attributes key because when i pull the assets from morales we get it through the attributes i'm just going to hard code it like this for now and the name it could be anything it could be i don't know right then price let's make it two and for src let's just pull a random src from our json let's do products.json and i think there actually was a dojo one let's see you can get whatever you want on this yep that's the one i'm gonna hit so you can see it and you don't have to follow this step necessarily i just want to give you guys a good idea of what it might look like one card would might look like before pulling it cool so there you go there is the item now we don't get item is not defined i have a static one so let's head over to our card.js now okay moving over to car.js if you remember the way i'm passing down item that attributes is with the key so let's deconstruct that destructure that and just say item here so i don't have to say item.attribute it's just going to be known as item and for oops and for the card let's do the jsx now so this is the fun part going down below to div i'm going to have a class name of styles.cardcontainer.card container okay cool and then within that div we're gonna have another one which will have a class name of card so we'll say styles.cart okay cool here we'll contain an image and i've hit save by accident that's why we get an error but here we're gonna have an image so that tells me we need to import next image so i'm gonna say import image from next image it shouldn't be that like that should be more like this and while we're here let's set up any other imports which i know i want to have a used context here and if i have a used context here i also want amazon contacts here as well the only other thing is i want to import fa coins from react icons and you can do slash fa there you go that should be it for the imports cool so like i was saying inside the card let's include an image self closing and the src is going to be item dot sk class name for the class name i can actually give it some inline styling which is going to be object cover object center oh if squiggly lines that's because it needs an alt prop sorry about that i'm going to do a width it's going to be 190 height 250. make it like a rectangular kind of shape it's going to be oops all is going to be product all right cool and we're almost done here but the next thing i want after we get the image set up is make another div within here and that is going to have another one with the class name of card title this is going to hold the title of our card so styles.card title okay and then here we can have item dot name okay and the next div right next to it we're gonna have another div called class name equals styles.price okay and here in our container for the card we're gonna have item.price in amazon coins and amazon coins just a real quick recap is just a token that we're going to create just for our app so we're also going to show you guys how to do that later on so far coins equals styles dot coins cool and that should be it let's see what am i missing oh do you have to make this up closing there you go awesome and to get rid of that annoying area let's make our style so i'm gonna say cons styles equals object okay cool there's a couple more like there's a bit more of css and this one so this is the card container and in that card container we're going to do a flex give it a flex property of flex column and then in the card itself there's a couple of things that we need to write it's going to be it's going to be h dash bracket 250 pixels with 190 pixels rounded 3xl flex let's give it a cursor dash pointer transition dash all and i don't know i'll do alt z for you okay can you guys see now awesome give it a duration of 300 hover that scale dash 105 hover scale dash 105 hover shadow excel overflow hidden and give it a border black shadow excel order four border equals hashtag fb9701 i believe yes okay cool comma and that's all it is for card now it should be smooth sailing from here so i'm gonna do a card title and let's make that text large okay we can also make give it a font bold give it a flex property and we can do a text center with full flex 1 justify center empty dash packet 10 pixels and again if we're going too fast feel free to pause the video so you don't miss a thing so do price text dash md font dash bold flex justify dash center coins it's going to be that ml10 oops ml 10 pixel and there we go let's hit save hey look at that alright so if i were to bring this up nice so that's what our card is going to look like isn't this cool so can you imagine if you remember the demo all the assets that you made it's going to look super sick so i'm super excited about that there you go that is the front end let me show you guys how to actually pull the assets from morales so now that we have our amazing doge here i'm going to go back to my amazon con and let me show you guys how to query our morales database so one of the first things i'll do is let's set up the state to keep track of it so i'm going to say cons assets comma set assets okay and this is where we're going to store the data that we get from our db so you want to initialize this with an empty array and then from there remember how we deconstructed use morale's query it's a hook that we can use to make querying the db a lot easier which is super cool from morales so what we're going to do is set it up which is going to be similar like this should be something like this so const use morals parentheses and then within the parentheses here you have to put quotes and then the name of the class so what if you remember i called mine assets with a lowercase it's going to be case sensitive to what you wrote so if i were to do underscore user i would get the users class so there you go i'm getting the assets from my database let's destructure a couple things it's going to be data it's going to be data it's going to be assets data and then let's get an error here if there is an error we can do assets data error there's also a loading state that we can take advantage of if you want to so i'm going to say user data is loading cool so we get those three things from our morales query and then from down below we need to make a function to set our asset state and can you see where i'm going this once we set our asset state we need to go use utilize our contacts api and get a bunch of dynamic cards second down below in line 49 i'm going to make a function called get assets equals arrow cool and like i said all this is going to do is set the state so i'm going to do a try catch block here and that means you also have to make this asynchronous man in the catch all it is is pretty standard it's just catch error and you can just do a console.log error okay then from here i want to do an await enable web3 and then down below i'll also have a set assets and then you want to pass in assets data and if you forgot what assets data is it's exactly what we're querying users query is doing a lot of the heavy lifting here all right cool so we did the get assets functions we did a weight enable web3 i put a contour log here to see if it's running i feel like we don't need that anymore so this is our assets function and as you can see we're waiting to enable web3 and if it's enabled then we can set our asset state okay so now you have that function what we need to do next is let's make a use effect that calls that function so i'm going to say use effect and it takes two parameters the side effect you want to perform as well as the dependency module which controls when you want to perform the side effect and what i want to do in here is another asynchronous function you can make call itself like that and then from there what i want to do is if is web3 enabled if it is enabled then what i want to do is await get assets okay cool so we might come back to this one later but for now what i want to do is the dependency which is going to be get assets and is web enabled okay and now that we set up our contacts what i want to do next is update our provider with the variables and functions we want to use and that's just going to be assets okay i'm going to hit save and then from there we can head over to cards because this is where we're going to call our contacts this is where we're going to call assets from our with our contacts so we already have the hook set up here all we need to do is come down below and set it up so if i do const object equals use context pass in the context you would like to use we only have one and what you want to take from it so i'm destructuring assets from our contacts and if i have this assets here we're not going to need the static card anymore as well as our static items we have our database so before i have a lot of fun with our database i'm just going to console log assets here so let's hit save cool we lose our little doggy but he'll come back don't worry so let's make this a little bit bigger and let me inspect element hit console and let's go we have an array of 18 and that is exactly what we need so in index zero we have all of this stuff what we need is inside attributes so that's why we set it up the way we did so cool so we're getting our data what we need to do next is actually map through it so there's 18 things we can do is asset.map okay and for every single asset or item we're going to make a card component just like we did before so card pass in the key as item dot id and pass in the attribute the item as item attribute attributes i believe i hit save okay let's map through it and let's see if it's in our console and if we look it says 18 so that's good so it's all there we're not seeing each card maybe because we should return let's go ahead and add a return statement cannot read properties of source okay that's fine oh i thought i had seo accent deleted it hit save and now let's find out what's up cool so now i'm returning but now it says array zero let's try refreshing okay so now let's get it now it's not querying at all let me go back to my context and let's look at the dependency modules let's put in assets data and assets data is loading maybe that would help cannot parse source okay so if you see this error that's must be something on our database what i could do is full screen this and let's take a look oh i see it yep and here this is wrong this should just be no quotes just that take out the ending code there we go all right yeah so that should be fine now and we're back to here now should be able to parse it hey okay they're slowly loading in we got the robocat we got skull we got rtfk punk got product okay so there we go we're getting the assets now all we have to do is make sure that it's all loading in properly so if you look at rtfk tpunk we can go double check that with our asset and double check if the link is broken i want to just copy this okay it's rtfktpunk nokia that's there this is it this is our beautiful assets that makes me happy to see but look at that this is our digital marketplace so doesn't this look amazing what we need to do now is let's add a header the features and let's make it so that we can actually buy these tokens so i'm gonna work on that next part but let's get excited our app is getting jacked alright guys in this section we're going to be setting up the smart contract this is the part you've been waiting for this is the blockchain solidity part but before i do when i'm looking at this app it looks amazing but i think i want to make it so that the borders match the theme of the amazon colors so what we can do is let me just quickly do this and click on this my vs code cool and to make it a lot better what i'm going to do is head over to my cards.js and instead of border black should be yellow color and i think the reason why is because this should not be equals this should be a dash so go ahead and fix this in your css so it can match the amazon colors a lot better so now i can take a look boom so now it's looking more like an amazon item right look at that awesome so without further ado let's head into the smart contract section all right so since this is purely the smart contract section we're not going to be needing to look at the website we're going to just focus on our vs code so one of the first things we need to do is let's go ahead and create a new folder and make sure it's not in public make sure it's at the root and i'm going to call it smart contract okay so now we have a smart contract folder everything here is where everything in the smart contract folder is where all of the relevant files we need to compile and deploy our smart contract so let me clear this out awesome and let me open my terminal as well and we can kill our web app for now what you want to do is cd into the smart contract folder and we're going to be installing something called hard hat hardhat is an environment that helps you test deploy and compile the smart contracts that you create so to get started we can do an npx hard hat alright so write npx hardhat in your terminal and make sure you're in the smart contract folder and enter and it should set up all the boilerplate code that we're going to need to do that okay now that's done what you want to do is create a basic sample project go ahead and hit enter again and you can go ahead and get ignore and for this you can say so look at that so now that the project folder is created you can see that there's a contracts folder a scripts folder a test folder and all of these other things so if you look at your package.json you should have a couple of things if you're not on their website they provide all the packages that you need to install but i actually have it saved right here and i'm just going to paste that command they stole me right so i should be able to use it awesome so after you do npx hard hat and set up our environment you're gonna let's take a look at our package json and you're gonna notice that sometimes there's a couple of things missing luckily hard hat provides you with all the modules that you need in case it doesn't show up so it's all of this feel free to take a look or look it up the documentation but you'll see it in a second when i install all right so i'm gonna do an npm install and install all these packages okay so double checked one of the packages wrong but now we should be good to go and let's install all these packages all right cool so all the packages are installed our hard hat is set up our environment is set up and only thing we need to do now is let's install open zeppelin okay so i'm gonna do another npm install here and do at open slash contracts okay so if you didn't know as i'm installing this open zeppelin is a library of ethereum contracts that follow a certain standard so instead of writing up all the contracts yourself and making sure that your contract fits the erc20 standard what you can do instead is import the open zeppelin library and just build on top of it if you're familiar with classes at all think if you had a class called ferrari extends car we have a ferrari class that's built building on top of the already established car class same thing here we're building off the standard and making our tokens in top of it sounds good so there you go so now you can see opens up an insider dependencies which means we're good to go and let's start writing our smart contract alright guys in this section i'm going to be showing you guys what you need to do to write your first smart contract as you can see if you look and click on greeter.sol you're going to notice that this is an example template smart contract given to us by hard hat and if you didn't know we're coding on the ethereum blockchain and one of the main programming languages there is solidity so we use solidity to create something called a smart contract if you don't know and you're new to with the web 3.0 space a smart contract you can think of it like a vending machine so with a vending machine if you want let's say a soda you're gonna click the soda button you're gonna put in your money you're gonna click the soda button and what you get back is the soda itself right instantly so for a smart contract you can set up some conditions that you want to happen for us we want to create amazon tokens in exchange for people's ethereum we want to use amazon tokens as our actual currency for our app so if you didn't want to if you wanted to make your own token this is going to be a good tutorial to follow so one thing we can do is we can actually delete the greeter.soul file right delete the greater.soul file and what i'm going to do is make this a little bit bigger as you can see and one thing that you're going to need is an extension if you go in here and type in solidity you're going to find something by juan blanco go ahead and install that this is a vs code extension so that it provides the ethereum solidity language support for vs code okay so install it add it to extensions and now we can go back to our code and in the smart contract folder under contracts that's now empty let's make a new file and let's call it amazoncoin.sol cool so here we go we have amazoncoin.sol okay and what we want to do next is for opens open zeppelin helps us build out our smart contracts because this smart contract is going to be erc20 standard all that means is a smart contract made for token okay with that in mind if you're looking at this and you're like lance i don't know what to start writing the cool thing is open zeppelin has documentations and this contract wizard that can help you set up the base of your contract okay so i actually have it set up so i'm just gonna paste it in here and now let's switch their screen sizes around and there we go so head over to this website on the top docs dot open zeppelin.com contracts slash point x slash wizard right you get pointed to the screen and it shows you the default contract so one cool thing about solidity while we're here and then you're gonna can import anything that you might need is first you have to specify the version and here is where the contract is it's kind of like a class right so if you look you can select which standard you want so if you can click erc 721 or the one we're going to need is erc20 okay now analyzing this code if you're familiar with classes at all my token right you can think of my token as our class and it extends the erc20 standard so we're building on top of it cool so like i said we can use this to build the base of our app and the name of our contract we can just be amazon coin and the symbol for our token will just be ac so notice how you type in the parameters and it builds out the base of the contract for you so another thing we can do is click any features that you want your contract to have so here are a couple of different ones the one i know for sure that i need is the mintable one okay so make it mintable it adds this function mint which can allow us to mint the tokens that we want so what i'm going to do is copy that over and place it in our smart contract so it's just a super helpful tool to get you started especially for my beginners out there so what i'm going to do is make this small again okay cool so let's paste that and one thing you're going to notice is public only owner we don't want that to be only owner we actually wanted this to be payable so add that trade there and you're gonna see address to we're actually not sending these mint tokens to a specific address we're gonna just erase that parameter and we just need un256 amount okay awesome and you know what i'm actually just going to full screen this okay cool now you can see it a lot better next thing we need to do is add a require here require and for this require we're going to use it as a check to see that the amount that is needed to send is equal to the amount that of tokens that we want to get so we can write that and express it like message.value equals amount times 0.000 ether comma invalid amount of ether so don't get scared by this line all it's saying is that if the amount that we need to send is equal to the amount of tokens that we want which is just a parameter passing in so for example if i want three amazon tokens we have to convert it to by this ether amount to match the message that value and if that is true we can go ahead and mint those tokens cool and then if you see a comma invalid amount of ether is if there's any sort of error it's going to run that string and show us that cool and here is the actual minting of the tokens and here and to replace two you can say message.sender right so give the tokens to us and the amount is still going to be the amount and the last thing we're going to do is receive external payable because like i said we're not sending these tokens or our ether to anybody else we're sending it straight to the smart contract which is cool we're putting in our money in the vending machine and the vending machine is giving us back tokens okay so we're gonna do a fallback external payable and cool there we go if you look another important thing to note about solidity it's very strict about the semicolon so if you get any sort of errors squiggly lines double check that but with that's it for the smart contract that wasn't so bad but there you go all right so now that we deployed our contract the next thing we're gonna do is come back to our actual app and let's start setting up our header so that we can put really cool functionality to it one thing you're gonna need is in your package json make sure you have react simple hook modal installed okay once you do we can just go over to our pages go to underscore app and from here what you want to do is import that modal so i'm going to say import modal provider from react simple hook mode okay and one thing that we're going to need to do is put this model as one of the most inner ones so i'm going to say motor provider close it off and we can close off and wrap it around our app there we go so that's set up the next thing you want to do is we can hop over to let's check out index all right and then i actually want to go to main so what we want to do next is let's go over to main and remember our header component we're going to go and make that so we're going to do is go to components and say new file and say header.js cool the drill rafc e then we can import it import header from header and comment this bad boy and it's stuck with featured so what i'll do is do this and then comment featured out cool so now we have a header so move back to header okay cool so the header is gonna have the functionality of where we can buy amazon coins in exchange for our ethereum so to set it up i'm gonna do a lot of the import statements first and i know i'm gonna use contacts later because that's the one where when you're going to need to talk to the smart contract for oops so we're going to do import react comma use contacts okay cool and there's also an amazon logo here that comes from my assets say import logo from forward slash asset slash amazon underscore logo underscore full dot png and i should have that let me just double check yep it's there cool okay you can also import image from next image and i don't know why it's doing this particular one but it should just be like that and the next thing we can do is import any of the icons i want to use so i'm going to do import cg menu grid o from react icons slash cg okay another one i'm just gonna clean this up another icon we want is i o m d search i believe and that's the same place except io cool import fa coins from the icon awesome and now that i'm thinking about we should also import our amazon contacts there you go awesome like i said we're going to be using a modal here that we installed with our packages so let's deconstruct it destructure it right here and say modal provider comma modal use modal and modal transition i don't think we're going to use all of these but i'm just going to have them just in case and the last thing is from react simple hook modal there's also some styling that i want to import from there so if i say import react simple hook modal slash dst styles dot css we should be good to go and but that's going to be it for now what we want to do next is let's go ahead and set up our jsx all right so the first thing we're gonna do is for our div let's give it the class name of styles.container not stylesheet okay let's have another div with the class name with the class name styles.logo because this is where the logo is gonna go right we can insert an image here and let's just set it up okay is source is equal to logo alt amazon oops alt amazon height is 100 with is also equal to 100 and we can also give this an image a class name oops of object cover right that's the css we want to apply to it with tailwind and from there in the next line we can do another div this one will have a class name style dot search little search bar with an input we can actually make input of closing all right this is where the type is going to equal text placeholder search your assets styles dot search input cool so after those inputs in the next line within that div we can put the icon for the search and you can make the font size equal to 20. all right after that we can make another div this one's going to be called menu so we'll say style that menu styles that menu and within that menu there's going to be menu items so if i do div with the class name dot menu item what you can do next is copy it two times okay but then this first one is gonna be new releases and the second one is gonna be featured okay still inside the menu i'm going to have some conditional rendering which is basically going to check if there's a balance and again this balance thing doesn't exist so keep that in mind and it doesn't exist yet if balance exists what i want to happen is a div and within that very div it'll have the class name styles dot balance and styles dot menu item okay and it's gonna have an on click to open our modal okay all right so now it's our first like modal function so what we can do to actually get it working is say const object equals use modal and this is where we can get that open modal from so i'm going to destructure it from there you also want is modal open and close modal okay awesome and then in between that div finally we can put our balance in there just to show off how much about how much coins that we do have okay and we're still in the menu item we want far coins with the class name of styles.coins and here we can actually start using the modal itself so you say modal you want to say is open is equal to his modal open i'm going to say transition equal to modal transition dot scale and all capital and within that model we also are going to have a component so here i'm going to comment it out for now but there's going to be a buy modal component that's going to take in it's going to pass in a prop so let me set it up by modal and this doesn't exist just yet but i will soon so close is going to be closed model and there's going to be a buy tokens equals buy tokens buy tokens is going to be a function that we're going to call that's going to let us convert our ethereum to the amazon coins that we set up by talking to our smart contract cool so there it is okay after that closing div what you want to do now is have the closing parenthesis here call in and have another open run right here okay cool so in the very next line we can set up another div this one has a class name as well that is going to be just the styles styles dot balance comma styles dot menu item cool and i just realized this should probably be in parentheses there we go awesome it's going to zoom out a bit because i can't really see it enough let me do an altc as well okay cool so this is also going to have an on click that doesn't exist yet as well this has an on click that has open model actually i'm open modal and then one in here we can say zero ace because if they don't have a balance it's you can assume that they don't have any coins so you can say zero ac fall coins styles dot coins close it off have another modal here do it is open is modal open transition can modal transition dot scale just like before and there's actually a different types of transitions you can have for these models it doesn't have to be scale so feel free to look it up if you want to use something else and again there's going to be another bimodal here so i'm just copy it now let me get the closing div for this and see my missing okay so that should be it there is one more thing though should be a cg menu grid font size of 30 class name of styles menu item again and there we go see what's missing should be it it's literally this last div oh i see the issue now there you go nice okay so my header is good all i need to do now is start the css and to start the css from new con styles equals object and let's get started so there's a couple things with the styles on this one let's do another container and that container is just going to contain a height of 60 pixels with dash full flex let's do an item center here let's do all c as well item center here gap of five and px16 comma here and then that's the container the next thing you want to do is let's style that logo and for logo we want flex items dash center you want an ml bracket 20 pixels you want cursor pointer flex dash one you want to search here the search is going to be p minus 25 px mr30px and w for 400px okay we can do a height here of 40 pixels and in that search bar we want the background to be white rounded dash full shadow can be dash lg and we want the flex property here flex items center border dash black so that's the search let's also work on the search input and for the search input we're going to make the background transparent we're going to have the focus on the outline dash none and the border none flex dash one items dash center flex cool next we have menu and for the menu we can have flex as items dash center text dash md dash bold cursor dash pointer lastly we'll have the coins which is just going to be ml10 px and don't forget to put a bracket around that actually there we go let's go awesome so there we go this is the header.js and let's just see if it's running by opening up our terminal let's do netlify dev and let's give it a second to open up it's going to refresh this says not found which is interesting then go to 888. what does it say not found okay it says not found that's probably because it's still loading oh i see yeah because we're still in the smart contract folder i forgot the cd out of it make sure you are over here in the main folder and now you can do netlife there we go i'll hit refresh now oh i see i've accidentally put the hook outside it should actually be inside let me take this back out and go in here okay so now i can give it a nice refresh see oh no typo here there should be an s and balance out like i said we have some conditional rendering with something called balance which holds our amazon tokens or coins that doesn't exist yet so i'm gonna make a cons balance here and set that equal to let's say 99 or a string 99 rather okay and it looks really ugly that's because it's pretty squished in but there we go okay awesome if you look at it it's not quite there yet so let me just check on that css let me see am i missing anything oh of course i need the menu item yeah so this actually is the menu item and we should actually have menu and menu is just going to be flex oops flex items dash center and i need to give this a gap that's why it's a little smushed in and then come so now let's take a look that looks way cleaner now there's this like this new release thing and we can fix that up that's from earlier other than that that header looks pretty clean here is our input field awesome all right now let's go ahead over to our context to add some functionality for our header so here we go what i need to do now is hop over to your files and what we need to do is create another folder so next step create a folder call it lib and inside this lib folder is going to be something called our constants.js this will make sense in a moment and also inside your lib folder is if you go to your smart contract and you go to artifact and go under contracts you're going to see something called amazoncoin.json and make sure it's not amazoncoin.dpg you want just the dot json so it's going to be whatever name and go ahead and copy it and put it in your lib folder along with your constants.js cool so what you want to do from there now that you copied it over you can say import amazon coin from dot forward slash amazoncoin.json so i'm importing this.json so that later i can get extract the api from it which we'll need later so next line export const amazon coin address is going to equal a string that's gonna have your smart contracts address save mine over here remember i told you guys to save it and i'm gonna paste it in there and there you go there's your amazon coin address and lastly we want to export const amazon abi and set that equal to amazon coin dot abi okay so we got the api from our amazon coin.json and storing in a variable and then exporting it with that our constants and our lib folder should be good to go we should just go into our amazon context and let's update it with the functionality for buying tokens so cool so since this is mostly just functionality i'm not going to see anything on the front end yet let's make this full screen putting down our terminal do something like this and there you go so let's import all those things that we exported so let's say amazon api and amazon okay yep and just double check it does exist amazon coin address cool and not only that we're gonna need to import ethers from ethers and if you're not sure double check in your package.json that you have ethers and we should have earlier in the video there it is okay cool so we have all of that next thing we can do is set up a couple states and what i want to add right now is something called the current account which is going to hurt hold the current accounts address so this will be set current count equals use state then it can be empty string at first awesome next thing i want to do is sconce token amount so token amount is going to control keep track of how many tokens that i want to request for my app set token set that equal to use state next one i want to set up is something called amount due i'm going to do set amounts due can you go use state okay another variable that i want to set up is the ether scan link right ether scan link it's going to do exactly what it says which is going to keep track of the ether scan link so that you can click it and prove that your transaction was real clear scan okay oops little typo here there we go next let's add another one this one is called is loading loading is going to keep track and help us out with the modal because if loading is true then i should see like this loading animation which will make more sense later oops louding there we go loading equals use state and actually this should be initialized to false and last but not least but also the most important one we should also keep track of our balance and by balance how much amazon coins do we currently have which will also be an empty string so that was a lot of different states we're going to be putting them into the provider much later but what i want to do next is set up the functions that we're going to need okay so coming down to the bottom at the top here i'm going to make another function and let's call it get balance and it's going to be asynchronous and if something's a synchronous usually it has a try catch which will have an error which always usually console logs that error nice okay so with that said let's work on the try block so we can do is if user is not authenticated or there is no current count which is the new state we set up we're just going to return right and another and so that's the edge case but if there is a current account and they are authenticated then we want to do cons options options equals object because we're going to pass options in in just a little bit but the way we want to set up this object is something like this we say the contract address right and then we pass in the amazon coin address i'm letting my code know that this is the contract that i want to talk to and i'm going to say function name what function do i want to run from that smart contract and it's going to be called balance of you didn't see us make a balance of on the smart contract but if you remember open zeppelin has the erc20 library that has a balance of function built in it was inherited when we made our account so we're going to make use of it and calculate what our balance is so we're going to make use of it there next we need the abi which is going to be the amazon api that we imported and for the params the params of that function is just account so we haven't actually set anything up we just set up our options in order to do that we're going to do is web 3 enabled and within that we're going to do constant response equals morales dot execute function option so we're going to use morales to run the function and pass in options so essentially we're talking to this address we're running this function we're using this api and we're passing account as the parameter okay cool so then what we want to do next is set the balance and what we're going to get back from the response is actually a hexadecimal but what we can do to fix that is just response dot 2 string okay cool so that's the get bounce function alright so that's the get balance function and now for another function that's going to be called by tokens that's right it does exactly what it sounds like this is the actual function itself that's going to let us convert our ethereum to tokens all right so if the user is not authenticated then what we want to happen is an await authenticate right basically if the user is not logged in it's going to prompt the user to authenticate okay cool so now that that is set up we can actually do the function now so we can set up a variable called amount and we can get ethers dot big number dot from token amount what we want to do next is decide how much ethers one amazon coin costs so what we can do is go over to our browser again so we can make this full screen and what i can do is i have a website ready for you guys that can convert our ethereum to whey and how i decided to convert my amazon coins is going to be 0.0001 and that's how much way it's gonna be when you convert it that's important because smart contracts takes ethers in way so we're gonna do quotes here put in that long string and then we can calculate the price by making a variable oops called cog price equals amount that mole price okay and it should be eight thirds awesome so that looks good to me and if you didn't know buy tokens is going to be pretty similar to the get balance where we're going to set up an options again then i'm going to say what address contract i want to use which should be pretty obvious at this point amazon coin address and the function name try to guess it before i type it's going to be mint exactly good job joe i don't know if joe's were watching but if there was a joe watching i hope you got scared so abi is going to be amazon api then we're going to do message value and it's going to be calc price okay and then for the params so remember our require function that we made on the smart contract this is what message value is so params is going to be just amount and we're just going to pass it like and then we got amount from tokyo okay cool so that's the options but we're not done yet like i said this is just setting up the options let's actually set up our transaction by storing it in a variable and that's going to be equal to weight dot morales dot execute function exactly so we pass in options again to run everything i said in our options okay then i'm going to make another variable called wrist all right and it's going to hit a weight transaction dot weight okay and then i put four here and when you get four here it's going to wait for four blocks to be verified before finishing the transaction and that's just to ensure that it's more valid right because the way block chains work there can be multiple blocks that are discovered but the longest chain is considered the truth or the real one you want to ensure that by putting a fork here you don't have to but it's just optional so i'm going to do set is loading to false and if you notice it's false here and initialize that's false that's because later on when i move it with my context api we're going to be setting loading to true elsewhere okay i also just want to console.log the receipt just so i can see it get printed when it's done then lastly we can do a set ether scan link which is going to be quotes https colon forward slash forward slash ring to be dot ether scan i'm doing this because i can see in my console a link that i can click on to take me to the actual eso scan address without me typing it in which will be pretty handy later on so again here's the template literal we can put receipt dot transaction receipt dot transaction hash and you can just put a comment cool awesome so we got our two functions ready all we need to do now is hop over to our use effect and update these effect that i want to update is this one so i want to say const account equals await user question mark dot get should be eth address i believe this will get the account the user's etherdress and we want to do our set username sorry in our site username our setcurrent account actually and set it to this current account etherdress cool so now we can put current account in there as well okay cool very nice okay so that use effect is done let's make use of our get balance and get balance is actually gonna go at the top here so we're gonna say get balance awesome that's it for the use effect we haven't used buy tokens yet because that's something that should be set up on the modal so coming down below to the value let's add a couple more things we can bring the knockout balance but we can bring the balance and make that global we can also set token amount and the token amount we can talk about amount due and set amount due he also needs to pass in his loading for set is loading so that we can make it true later on i'll also do set ether scan link not sure if we're gonna need that but we'll just put it in for now so also etherscan link and while we're here we can also do current account awesome so that looks pretty good that's all the states that i need to pass for now and if i forget i'll come back but that's it guys that's the amazon contacts updated now so let's apply the functionality by building the bimodal component cool all right guys so after you pass all of these things into value it's going to make all of these variables and functions global like i mentioned previously what we need to do next is if you remember if i go to our header and you look down below we have this bimodal component that doesn't exist yet so let's go ahead and make it and now that i'm realizing it we don't actually need to pass that down as a prop so i'm going to take out by tokens equals by tokens so let's create that component i'm going to go open this up hit new file and let's call it by dot js okay and in bimodal dot js let's go ahead and set up our component and then as usual set up all our imports that we'll need so thinking i'm gonna use context use context and then we're gonna do use effect okay and then from there i have a couple of i have a react icon that i would like import which is just gonna be ios close from react dash icons slash the io awesome and also since i imported use context let's get our contacts so there's our amazon one and we can also import something from react spinner so again if you go to your package.json you look for react spinners make sure you have it there's mine so what i can do now is import hash loader from react spinners okay and then we can import link right from next link okay awesome and i know in bimodal i'm gonna get a close property so we haven't commented out yet so it's not actually passing that prop in yet but we're setting it up for success in the future we can set up the variables that we need from context already so i'll say object equals use context and you pass in amazon in there and in between the curly brackets i want amount due set amount due token amount set token is loading set is loading oops ether scan link and set ether scan that was pretty much everything that i just imported into the context which is why we set it up earlier okay another thing i can do while i'm here is make a function called const calculate price we already did calculate price in our contacts file but this calculate price is a function to display the price that we get back on the front end side so it's going to be const price is equal to parse float token amount and you can do times zero point 0.0001 and that's supposed to represent how many ethers is converted from how much tokens we want okay then we do price equals price dot to fixed four and we can set the amount due here and put price awesome we had use effect here so let's actually call it so i'll say const not const i'll say use effect this one's gonna be pretty simple the side effect that i want to run is just to run a calculated price every time the bimodal component is loaded and we don't want this to run every single time we just want it when the token amount changes so put that in the dependency module and you're good to go beautiful next we can set up our jsx so first div i'm going to give it a class name of styles.container oops styles dot container okay and next we're gonna do is loading all right so we're gonna do some conditional rendering here and if is loading is true then we should put in our hash loader so i'll set up a div here with the class name something like the loader container and within those two divs we can put the hash loader and you can set the size to whatever you want i'm thinking 80. and again if you don't want to use the hash loader you don't like the animation that i'm using you can import a different kind of react spinner if you take a look at this library so i'm filling the hash loader today so let's use that so let's close off that parentheses because if is loading is false which means nothing is loading everything's aokay we're going to have another fragment here and we should load and then if is loading as false we should load the actual modal itself let's do a div with the class name styles.close x okay and within that div let's take our icon self closing and it's gonna have an on click of close so when i click this button it should close and this close is coming from something i passed down to bimodal from header not only do you want it to close by the way you also want to make sure that the states are all cleared out so i'm going to do that by saying set amount do is empty set token amount empty and set ether ether scan link to empty there you go so we cleared it out on close and still inside this icon we can set the font size of it to be 50 and the class name it's not actually going to give it a name we're just going to give it some styling of cursor pointer so that when i hover over that x you can see that's nice okay cool so let's set up another div here and then we'll do class name styles dot title and in styles that title we can just say buy more amazon coins because we want to promote the use of our tokens at this store here so buy more amazon coins here i think that's a pretty good message and then from there we can do class name equal styles dot content and then in that content we can say select how many tokens would you like to buy just instructing the user on how to use the menu how to use the model so next we have another div which is just gonna contain our input field so i'm going to say div class styles that input okay here let's insert that input within here set up its attributes which is going to be type text placeholder to indicate that you should put an amount here of how many coins do you want now we can give this a actual class name styles.inputbox okay there's also going to be an on change in this input field because every single time i type something we should be updating the set token amount state so it's not ether scan link it's going to do something like this set token amount to be e.target.value so that's how you grab the input field if you were in case you were wondering and every single time i type something updates the state with whatever is in my input that's all that is so if you do value equals token amount that looks pretty good and we're still not done yet we want to make another div here actually and to do the class name styles.price which will show how much is due based on the amount so that's why i want to say total due curly brackets and empty and you can put token amount and token amount i'm setting up a ternary so if token amount exists and the token amount is greater than zero what i want to happen is what i want to see is amount due plus eth right so you can see how much eath and if there is no token amount it should just say zero make sense cool so that's the div last but not least is just the button that's gonna run the function that we want so i'm gonna format it and add the attributes that we need which we can start off with its name so i'm going to name him by button okay so then there's also this disabled attribute if there is no token amount or let me space out or the token amount is less than zero then they shouldn't be able to click the button so that's why i set that condition on the disabled prop so then on click we can put is loading to true right because when i press this button it's going to take some time for us to call the contract so what i want to do is set up our hash loader by setting is loading to true from there i want to buy tokens and let me just double check if i'm getting ah yeah we should also be getting that at the top here by tokens and in our amazon contacts we should also be passing that by tokens cool so now we're all good going back to bimodal be sure to get it from amazon contacts and so you can use it here the button the text we want for that button is just going to be should be easy for people to understand cool so another cool thing that i want is that if there's an ether scan link i want it to actually show up in the front end too so what we can do here is set up more conditional rendering so it's going to look something like div with the class name styles styles.success because if it's successful we would see this etherscan link so we'll say transaction successful check out oops check out your receipt or your transaction below so that's going to be super cool to see later when i get my coins i'll see a nice receipt below then we can also add another link here this one's going to have the href of the ether scan link so i'll put href and put literal ether scan but this is still inside that same link i want to give that person a little name styles.etherscan cool so within that link there's going to be an a tag with the class name also styles dot etherscan target equal underscore blank close that off and the link will say transaction receipt cool then after that link we can close off that conditional rendering and which will also finish this one off and let's see so link that close and looks like there's extra parentheses here and that should fix it yeah so that should be the closing parenthesis for that and the closing parenthesis for this it can be down there cool so no errors looks good to me and that's the bimodal component all right cool so that's the bimodal component let's get into the next part and let's see if it actually works all right guys cool so like i said that's the bimodal one thing i almost forgot to do was let's add our styles object in here so i'll say con styles equal object and let's start writing it out so for container it's just going to be height full width full and we'll do a flex property here with flex column that's it for the container okay so next we're going to close the close active which is going to be with full h50 pixels flex ops flex property here and then you're going to do items center justify and mb dash 20 pixels cool so let's close x let's style the title div which will just have a text dash 3 xl let's give it a bold font so by doing font bold give it a flex property flex give it a nice flex one items dash center then empty 20 pixels okay then we're going to do a justify dash center with an mb dash bracket 40 pixels awesome you still with me okay for content what i'm going to do is flex w dash full and be 30 pixels and that should actually be in brackets nice okay after that we can do a text excel and a justify dash center and that's kant net it should be content good catch good catch for those of you watching thank you for selling me so input we're gonna have w dash full and we're gonna do h dash full with flex items dash center just center okay next let's add a background color of hashtag f7 f6 and f2 i believe and we can do like a focus with the outline not very nice let's do the input box now which we'll have with full height full give it a flex property and then we can style it with items center justify center nice background of hashtag f7 f6 f2 i think it looks pretty good then we can do oh okay i think i mixed up this this is yeah this is the input box styling so let me just finish that out real quick so this is input box that's the one that makes more sense this should have the focus outline dash none the input though should just have a width of 50 percent the height of 50 pixels pg dash hashtag f7 f6 f2 that's the background it should have and it should also be rounded lg and we can do ap dash 10 pixels then it should have a flex mx dash auto there you go that's the style for input this is the input box that looks pretty good now we can do price and price is going to be w full h full don't forget to put colon and we also want a flex here with items dash center and justify oops not item center it's just justify center actually justify center then item center then empty bracket 20 pixels give it a nice bold font like this and then do text dash three x l you got that cool let's do a buy button and in this buy button it has a width of 20 and a height of 50 pixels and let's give it a background zero zero zero empty dash bracket 40 pixels rounded dash lg p dash bracket 10 px we have flex mx dash auto text is white yeah there's actually a lot on this by button one justify center and items center and cursor pointer that was a doozy but let's do an alt c so you can see all of it all right can you guys see that cool love to hear it there we go so container let's do the loader container we'll do a w dash full a h dash 500 px have a nice flex items dash center and a justify dash center there's a lot of css that goes into this one so let's keep it going with the loader okay and actually there should be a loader one might have spelled it wrong okay cool so there's none of that next one will be etherscan then etherscan is going to have css of w h dash flex items dash center justify dash center text green dash 500 text to excel empty 20 pixels a nice font that is bold and a cursed dash pointer as well nice okay so let's make that little success div it's the last one for now guys it's going to be w h full let's finish it out flex items center justify dash center text excel empty 20 pixels i keep forgetting the bracket 20 pixels and let's do a font bolder okay let's hit save and there we go that should be the css of the by modal so now it's time to actually check if this works i hit save i'm going to open up into my app hit refresh for good time sake and if i click this guy nothing happens okay so i'm gonna head into let's go into the header real quick oh yeah we also need to import the bimodal duh so let's go ahead and do that real quick import by modal from bimodal which now means i can bring this in and bring this in okay awesome so can i click this now so i'm hovering over it and i can't click it but the weird thing is that it should have a cursor pointer to it go back to my code real quick let's add a margin bottom of 50 pixels let's see so i'm adding margin bottom 50 pixels to my header i want to do this temporarily because once we add the features feature component the styling of it will look a lot better but for now i'm going to put this mb 50 pixels so there we go and oh there we go nice okay so we can actually have our cursor pointer i think it's because of the overlap what i'll do is click on this hey let's go that's our modal our model is working beautifully now before i actually test the functionality of my tokens what i probably should do is let's update the header okay well how i want to update the header is to actually use context so i'll do that right here const equals use context and then pass it in and then what i want to get from amazon context shouldn't be that much it should just be balance and get balance function cool and then is am i using get balance here actually no i'm not so i think it's just balance i need then because that should be covered by the use effect so i'm gonna hit save and if you remember the reason why i see 99 over here is because of the hardcoded balance if i'm gonna get it from my context we don't need the hardcoded balance anymore okay so if i save there we go it's gonna be zero ac but when i buy tokens it's going to update with how many tokens i have so let me do that cool so now like i said it's zero ac but when i actually buy amazon coins it's gonna update one quick thing though if you look at your meta mask you should check if you have zero if you have any ethereum because that's what you're gonna use to get amazon coins and i'm not using real ethereum that i bought make sure you're on the rinkbeat testnet okay so in this section i'm gonna be showing you guys how to get ethereum on the testnet so what you're gonna do is open a new tab put in this link faucets.chain.link slash rinkeby and here you can put in your wallet address so one cool way to do it is by connecting your wallet so i'm gonna go here and that should ask me to connect my wallet actually okay so this is on faucets.chain.link shrinkaby this is where we're going to be getting some test ethereum for us to play with as a developer we can connect our wallet i'm using metamath and make sure you're in the account that you want to have eth4 which i'm connected with account too so let's use that okay so now it's there i don't need test link i just need 0.1 eth there you go waiting for confirmation so anytime you're developing on the test net this is how you can get your test ethereum you're going to do this a couple of times in the faucet so i'm going to do the same thing so i'm just going to send request initiating waiting for confirmation and it usually takes a while because the rinkaby network is just a little slow okay close let me just double check how much ether i have now there you go see you can see a point to eat i'm gonna do this until i have about let's say seven so i'm just gonna cycle this through okay keep it going okay i'm gonna close to five yet four you know what let's just do one more to get to five and that should be good for now okay request complete so i did this a couple times now let's look i have point five ethereum now i can start playing anytime you need eth go ahead to this website now i'm gonna go back to my app oh yeah there was a change let me just refresh this awesome and again it should say zero amazon coins because i didn't buy tokens it so let's give it a try now so i'm gonna click this how many tokens would i like i'm gonna get let's get 10 tokens right and the cost of these ten tokens is going to be point zero zero ten each so we have plenty so let's go ahead and hip and there it is loader container is not defined that is awesome yeah usually this doesn't work the first try why don't you guys tell me any sooner loader container is in the bimodal.js then and the loader container here order container it's going to be style dot loader container yep we're good to go let me hit save okay that's a new one error occurred in bimodal just go back to localhost okay let's try this again so just in case i'm gonna log out connect my wallet again sign i'm in cool click the modal and let's try let's get 10 coins let's buy okay cool cannot estimate gas transaction may fail let's see okay so i saw the loading screen which is a good thing but then we ran into this so i don't know if you guys saw but we got that weird error all i did so far was redeploy my smart contract and when i deployed my smart contract i got a new address and i'm using this now and when you get a new smart contract address make sure to recopy your amazoncoin.json and now it should work but i did want to fix up a couple of things i was looking over the code and there actually should be a forward slash here in one line 117 for me so i'm going to save that another thing i wanted to do is i wanted to make sure my balance is working so what i'm gonna do is put get balance here and if i put it there i should move it up to the top so i'm gonna get my balance oops copy that cut it let me grab it again cut it save and i'll just put a top above the use effect hit save there we go so now let's see if this works so moment of truth what i'm going to do is refresh this one more time make sure everything is running cool so if i click this bimodal works if let's say i'll get 10 hey let's go awesome so yeah the debugging that took me a while but that's all part of being developer if you see a meta mask notification that's a good sign so if you look we are sending this many eth to it and it should meant us the right amount of token so let's confirm okay and sometimes this takes a while to load mainly because again we're communicating with the blockchain and it's not as fast just yet but in the future hopefully this gets a lot faster so now we wait let's go so if you look you can see transactions successful check out your receipt for your transaction below so i'm going to click on that so there you go proof that program is talking to the smart contract as you can see right here that's the address and you can see from me awesome so if we go back to our app now i hit x there it is that's our actual balance it's there and recorded this is awesome i'm super glad about it thank god so now we can move on to the next part all right so now that we finally can exchange our ether for coins let's go ahead and make it so that we can buy our beautiful assets that we have here don't you want to buy this doodles or this infinidoge that would be sick so let's go ahead and do that by going into our context file once again one thing that we're going to need to do is we need to query for the users when we're going to buy assets because eventually when i buy an asset i want to save it and attach it to that user because if you log in you should see all the assets you bought if my friend kevin logs in he should see all the assets that he bought cool so let's get set up remember before when we're querying for assets we're gonna do something similar so i'm gonna do const equals use morales query right these hooks are super powerful so let's make use of them so i'm going to say underscore user because that's the class name and inside this object here where we do structuring it we can call the data user data we're going to use that later on later also we can get error from here while we're at it user data error and then we can also do is loading cool so we're going to be using this in the use effect as well but we're not going to worry about that now so i'm going to save this and now come down below and we can just put it right here it doesn't matter all right so like i said this function it's not by tokens it's const by assets so that we can buy our digital assets on our marketplace so i'm going to do by asset equals asynchronous and if it's asynchronous we usually do a try catch here and i like to set up the catch because it's super easy so i'm just going to do console.log error cool so that's the by asset from here this is the fun part if the user is not authenticated or if is authenticated is false just return because they shouldn't be able to buy anything that they see here and then from here we're going to set up our options again so const options equals type and you can put here erc20 and then we can do amount as price and if you're wondering where price is coming from it's going to be a parameter that we're going to pass in on our card component as well as the asset itself so go ahead and pass price in and then for receiver just type it out like that and do an amazon coin address we're going to pull our smart contract to guest for the receiver and the contract address is going to be amazon coin okay so we're essentially giving the amazon coins that we have and sending it to the smart contract to purchase our asset so if that makes sense to you let's get to the next part let's do let transaction again and set that equal to an await morales.transfer we're going to transfer our coins in there and pass in the options from there let's do another const receipt equals await transaction dot wait and we can also do if receipt right if we get back a receipt we're going to do a const res equals user data and remember user data is what we queried bracket zero so when you do bracket zero that's gonna be the one that's currently logged in and i'm gonna do a dot add because when i do that add i'm gonna add a trade to this or remember like how we added a nickname to that user we can add another column by doing owned assets so now we're starting to store the assets that we buy to our user okay so i'm gonna do a comma curly brackets because the next thing we want to do is dot dot so which is gonna store all the information of that asset we're gonna put purchase date so we can know when we bought it which would be really nice and we can just do a date dot now and then oops and then in the next line we're gonna have an ether scan link so that when we look at the object of the user see the transaction receipt which is pretty cool so i'm going to do https colon forward slash rinkaby dot ether scan dot io slash tx and don't forget the forward slash like i did last time and i'm gonna do the template literal here just pass in the receipt that transaction hash cool all right we're not done just yet but after the if state we wanna do an await res.save because remember when we added a nickname we did a user.save so this time we're gonna save us adding the own asset to morales and then from there we want to do a dot then because after we save it right we got to let the indicate the user that they bought it so we can just do this alert feel free to upgrade to something else maybe you guys can make a popup which would be cool pretty cool but i'm just going to do an alert for now so i'm going to successfully purchased this asset let's go all right cool so now that we have that we can hit save and if we have the buy asset function let's go ahead and bring it down to our provider so we can make it global all right let's type in by asset so if you guys can take a guess where are we going to call this by asset function that's right exactly in our card js so we need to be pulling from our contact so let's make use of this hook right here so coming down below in line 15 for me i'm gonna do a const curly bracket equals use context all right so put parentheses here pass in amazon and just add what you need which is literally just the buy asset function and again make sure it's the same spelling by asset okay now i got to do is add an on click and i want to actually do this in the container so what i'm going to do is make some rune in the opening tag we can actually format it like so and then we can do an on click equals something like this and do a buy asset and it takes two parameters which is the item's price and just the information about the item and passing it in as asset okay so let's hit save okay and now if we go back to our app i'm going to hit refresh and we have 10 coins to play with so let's go ahead and buy something let's go ahead and get taste the rainbow oh look at that so if we click on the asset we have the metamask notification asking us to sign if we want to transfer our amazon coins for that okay so let's go ahead and hit confirm okay now we just got to wait for the transaction to process let's see did it take my money okay send a token oops and that's the accident clicked on it again and let's just double check on our morales database on user and this is the one for lance see oh should i hit refresh yeah so i didn't see my alert which tells me that something didn't quite go so i'm going to go back into my amazon context and it looks like most of it's going through so let's just console log here waiting for because if all that's good we should have saw that or looked so i'm just going to do another console log here success and we should probably spell it let's go saving that and now let's go back to here so let's click robocat and let's see if we can buy robocat now okay so this is a good sign we're getting the signature request we can hit confirm so it looks like it went through because i can see that i had 10 and now i have six which means i bought two things so that tells me that the amazon app is working let's freaking go guys so with that this is super cool and all but we're almost done with the app so if you're still watching this please leave a comment down below let's leave a comment let's this time if you say something like doodles in the comments i know that you've made it this far and you're able to get this working oops and i click doodles so it makes me want to buy it cool so if you say doodles down below i know you're still watching and you're crushing it so far so let's go into the next part because we can take this a step further by having a transaction history page imagine that you buy all these assets and you can see if you click this page the list of things that you bought so that would be super cool so let's set that up in the next part so i just quickly cleaned up my vs code and put our nice app on the side again what i want to do is create the features component right if you remember features component if you go look for it in the header i believe nope not the header actually it is the main ah there we go so in main.js there's this featured component that we haven't made yet let's go ahead and finally do one of the last components so i'm going to do featured.js there we go i'm just going to do that real quick there you go featured so the featured the idea with featured in this amazon build is that there's these really cool assets above underneath new release and that should fix our problem with the header so if you remember i had this temporarily with the mb the margin bottom with 15 pixels so we might not need that anymore so i'm gonna hit save and it's overlapping a bit but once we add this featured component should look a lot better so what i'm going to do is back in main we can comment this bad boy out so let's go ahead and import it using this auto import and close it off cool so now we have featured in there as you can see it just doesn't have any styling so let's set up the jsx and to set up the jsx let's go to line five recording okay line five for me and i'm setting it up like this and for the most outer div the convention is the same it's just gonna be styles dots oops styles dot container okay and then within that we're gonna have another div that's just gonna be the title so this one is styles dot title okay within there we can write top assets and underneath top assets we'll have a couple cards here so if i do styles dot cards we're gonna have about four and they're gonna be really cool because i'm gonna actually get these videos that are gonna be constantly playing so to get it set up in the cards div we're gonna do a div we're gonna have a class name equals styles dot card one like i said there's gonna be about four of these so the styling for them is gonna be pretty much so inside this div card one type in another one and for the name of this one i'm thinking let's call it styles.card cross nice okay and then in the cards cross i have it already i've already prepared it's gonna be this nice video tag and i didn't mean to press save that's why we're getting an error because there's no style object yet but what you should see html has this tag called video which just lets us play okay and if you look in the video tag i have something called autoplay loop muted and controls equals this with this class name object cover and this source folder here if i do an altc so you can see it better is going to link us to one of the mp4s that i have prepared so there you go now like i said the styling for these are going to be pretty similar but so i'm just going to copy this about three more times okay now what you got to keep an eye on is for the class names they're all slightly different this is card two card three and card four just keep it different and the videos are actually different as well so just added all the source files that we need and that is the last video right here there as you can see they're all slightly different and again you don't have to put these actual videos i encourage you guys to actually make this your own right you can use this project as a template to make your own nft marketplace and have your own tokens for you to build so highly encourage that and keep that in mind what i want to do next is let's set up that styles object so i'm going to do con styles equals and there's a lot of styling on this but once you get the pattern you can reuse it over and over again so not constrainer we want to do container now continue container and for the value we're just going to give it h 400 pixels that's the height we can do it with and give it a flex property of p dash bracket 20 pixels do a flex dash column so after the container what i'm going to do next is get the title div and the title div is going to have text dash to excel font folder from there we can add a margin bottom of 20 pixels margin top of bracket 30 pixels and margin bottom of 24 and an ml of dash 40 pixels so that's going to be it for the title add a comma here and then we can start working on the cards div which is going to be an age full a with full flex gap of 100 pixels and let's put that bracket in there so that's the gap let's add a justify between mb30 pixels and an ml of 30 pixels as well nice okay so that's the cards then we want to do and style each card it's and to style each card itself and when i'm styling each card it's actually going to have the same styling so what we can do is do an h dash 130 pixels with a width of let's see 400 pixels then we can add p dash 20 rounded dash 3xl and a background oops bg dash gradient of one one okay from there we're going to add a from bracket hashtag zero d one four one c all right that looks good and now we have another two hashtag four two six 6 7 e and we're going to do a relative cursor dash pointer so there's relative and then there's cursor pointer and then we want to transition all and duration from that to be 300 and we can do a hover scale 105. okay i know this is a big one so if we do that let's add a hover shadow as well as a scale right to be one not to be one to be dash excel let's make it a border two and a border color of fb oops of hashtag fb97 and oh that's card one but guess what card two three and four is about the same so i'm just gonna insert it like this and i can change it all right but if i'm setting it up this way because if you did want to give them all different stylings you could so if i hit save hope we got a style in card cross and that reminds me you actually have to make the card cross styling okay and i have to make the card cross styling but i'll tell you now it's not as bad as the last one so this one is just going to be h dash bracket 180 pixels the width can be 1 25 pixels rounded dash 3xl and just do an absolute here with the bottom dash bracket 20 pixels transition dash all with the duration of dash 300. still with me do a hover colon scale and make it 105 and give it a flex property and then overflow hidden there we go so that's it that's the styling for the feature.js if i hit save now we have another style thing for a card cross oh i did fix that let's go ahead and refresh oh i see because it's there's a multiple card crosses that makes sense so i'm going to fix out all of the card crosses that's the one i copied yep so double check your your divs and i don't think there's any more card crosses that need an s so i'm just going to hit refresh oh look at that nice okay so it's almost there you can see the videos are loaded i just need to add a nice card color you can see the videos now and it looks sick but the background should be there so i'm looking to see any typos ah okay yeah i always confuse this it should be an l instead of a one it looks so i'm gonna take out all the ones and put in an l and i believe i have this as a dollar sign it should be a hashtag for each of them so if i hit save now let's go full screen let's go look at this isn't this beautiful we have our own marketplace with these amazing videos on the top so like i said earlier we're gonna take this one step further we have one more page we're gonna do the transaction history and then we'll be done so let's put it 100 into this last part and i'll see you guys there and then we have another one for two real quick there's only like little things we need to add on top besides the transaction page so one thing i want to improve is going into our morales db again i want to create a column and this will actually be the owned asset so it didn't show up before but we can make it show up by doing something like this by just adding a new column and it's a string and we'll call it owned assets okay i'm just going to add a column cool so now if you remember our by tokens in our context so let's do by oops that's not what i want do by asset and then we had this owned asset here let's just make that column and i think yeah let's add an s there too so i'm going to add an s to this owned assets so hit that and another thing that i'm realizing too this should actually be inside of the if statement that's probably why we didn't see it earlier so i'm going to put it down below here because now res is defined cool all right we hit save and now i want to add another state since we're already in the context and then if we do recent transactions we also do want to set recent transactions all right okay from there just set it equal to the use date and the initial state can be an empty array okay so after you set up the state for recent transactions come down below to the rest of our functions and we're going to make one called listen to updates one cool thing about morales they actually have websockets that you can connect to and subscribe so that anytime there is a change there it will automatically update so we're gonna take advantage of that and do a cons listen to updates function it's going to equal an asynchronous function and you guys know if we brought it like this we're going to have a let query variable and in that query we can say new morales dot query and in here i'm going to put eth transactions okay let's set up the websocket by making a variable called subscription and set that equal to our query dot subscribe awesome okay and then to turn it on we'll say subscription on and put parentheses and in quotes put update because every time there is an update i want to pass in the object and do a console.log new transaction so that i can see console.log the object that we get back and then we want to set the recent transaction to that object and like you remember the initial state it was an array so let's also make that object an array as well cool so after we do that let's scroll all the way to the bottom and let's add recent transactions to that list and if you remember in maine we had this style that we never really used so what now we can finally set that up so what we need to do first is utilize our contacts so coming down here i'm going to say and also this is bothering me this used to be which needs to be down here and let's utilize our context by saying recent transactions okay equals use context pass in the amazon contacts all right from there underneath cards let's set some conditional rendering and get the rest of this jsx done so recent transactions.length if it's greater than zero then if recent transactions.length is greater than zero and and add this and symbol here we're going to add an h1 okay so this h1 is going to have a class name of that styles dot recent transaction or recent title sorry and then from in the in between we can put recent transactions or transaction cool then we're gonna add another curly bracket here for recent transactions again so if it exists we want to do a recent transaction dot map transaction here and we also want to pass an index so that we can use it as the key and i actually need to format this properly there we go all right and i make the arrow function because for each transaction i want to return this set of jsx so i'm going to do a div let's do a closing date for it and then within that div do a key equals index because if we put an index from the map it's all it's going to do is count from zero onwards so for every transaction it's going to go zero this div has a key of one this div has a key of two cool so then from there we can do a class name equals styles dot recent transaction list that's the last one that we needed now for this part the inner div that we have here it's gonna be the class name of styles dot transaction card okay see i think i spelled this wrong transaction card there we go no more squiggly and within that div we have a couple of p tags that i would like to write we're gonna have the transaction dot attributes and we get the from address here so we can see who it's from and then we have another one for two with same thing except instead of the from address we're gonna get the two address there's gonna be one more p tag here that one's gonna have a hash okay and then underneath that hash will have an a tag and for the attributes of the a tag we'll have which is underscore blink the real equals no opener no refer and then we have an href here which is the actual link itself which is going to be https colon forward slash forward slash rinkeby dot ether scan actually dot io slash tx slash same thing as before except instead in this template literal we're going to have a transaction again here transaction dot attributes and get that hash which will lead to the ether scan link okay and in between we'll have the nice transaction hash again so do transaction.attributes.hash once more but this time i'm going to format it with a slice and just do 0 to 10. then over here line 41 for me i'm going to have another p tag it's going to say gas transaction dot attribute dot gas okay i'll hit save now let's take a look at my app any issues on this cool and i just want to make sure console log recent transactions because it shouldn't be anything right now but let's make a purchase and see if all the updates we added are in there so again zero that makes sense man i'm actually really admiring the project we made today super proud of all the work that went into it yeah so let's test this out so i want to hit refresh one more time and now let's see if it all works out so i want a skull okay we got the metamask notification loading in this one's for the skull confirm oh look at that confirmed transaction six transactions confirmed okay that's not it should be in user let's see anything update here my coins didn't go down let's just give it a second maybe what i do want to see is the recent transaction so i did some testing it looks like recent transactions isn't showing up also i got an error that it was expecting an array so that tells me if we go into our morass database that this was originally searching for a string so i'm just going to delete a column let's just do remove and what i want to show you is how to fix it is by adding a new column and we put this as string before but this actually should be an array not a pointer so now it's an array so then we can make it owned assets so let's add that as a column so instead of expecting a string he'll expect that and the next thing i want to fix is when i was looking at my context one thing was interesting we never actually called listen to updates is something that should happen in our use effect so i'm going to come up to this use effect right here and underneath get balance i'm going to do an await listen to updates so now when i call it this should work so let's do this and yeah my last transaction went through but it didn't get stored so i got scammed i lost money on my own marketplace but now to prevent that issue on your code we fixed it up so this should work now so let's go ahead and try it so let's get this brick okay so let's go confirm and what we can do next is inspect and again these transactions usually take some time oh finally we can finally see that alert you successfully purchased this asset okay we got running yep and that's our receipt we saw the array see if recent transactions is here okay so no recent transactions yet but let's check our database again for owned assets we finally saw the alert message which that's a good sign hey look at that so underneath this account for lance i actually was able to buy a skull so now we can store any of the users purchases which is a good sign my next goal is to get this recent transactions working it looks like we didn't get our recent transaction yet and i'm still seeing this enable web3 error so i think let me think i think i might have an idea of how it works so let's go back to our amazon context and just like we did with get balance maybe we should add a listen to updates here okay and i'm gonna hit save try to put listen to updates at the top above these effects so that it can run so let's go up to here i see we have got balance i'm also going to put this above that i'm gonna hit save all right cool so we only have two tokens left i'm gonna go ahead and get a couple more i should still have some ease some eath i'm gonna go buy okay hit confirm there we go it's finally loaded oops open up the console and we there we go now we're rich we can go get more tokens so let's see one thing i want to do actually is let's look at listen to updates again oh wait no that's at the top now and let's do console log just to know it's running all right just to know it's listening so let me show this i already have a console log for running still listening because that's more accurate let me do a refresh here okay so it looks like we got 12 coins now that we are rich let's get another nft or digital asset let's get the nokia this time and hopefully we can see our recent transaction so clicked on the nokia let metamask do its thing finally loaded so now let's go and hit confirm let's claim my beautiful nokia and let's see if i can see it so there you go okay transaction confirmed there's my alert that's a good sign hit okay and now i hit x alright so after we hit save what i want to do next is i'm realizing that if we double check the owned assets in the morales db what we want to do is delete that because it shouldn't be a string it should actually be a column so let's go ahead and delete a column and select owned assets okay so i'm going to remove column and then i'm going to add a new column and remember i put this as a string by default let's make it an array owned assets and that's probably why we don't see any of our assets that we buy being saved to the user because it should be an array so i want to add a column owned assets there we go and again if you name it owned assets you got to double check in the card or in the amazon context where we make the buy assets function and see so let's see by assets and if i put in the between takes i put an s here just to make sure that it matches with the column so we should be good to go so once that's done i'm going gonna head back to featured to main and now all that's left is to just try and see if everything works fingers crossed so let's give it a try all right so when i head over to my page and also i'm just gonna zoom out because when i know when the css comes my laptop's pretty small oops got that part out so i'm going to give this a try where we can see the recent transaction so i'm going to hit refresh cool so i'm logged in i have four coins let's go ahead and buy a skull this whole time we were buying assets and nothing was getting saved but now that we updated that we should see it in our db and we should see a nice recent transaction at the bottom i'm gonna go ahead and click this hey we got the metamask notification to sign in that's always a good sign i'm just gonna let it load for a bit and remember this is just to transfer tokens right we're taking how many amazon coins we have and sending it to the smart contract then taking a record of the asset that we bought so i'm going to hit find spec element let's take a look at any console logs i'm running oh okay so if you see that parse object that is coming from the recent transactions websocket to morales failed oops okay there we go my internet went out a bit but you successfully purchased this asset they stole my money but in return i get my beautiful digital asset let's see if i can prove it by refreshing hey look at that so i'm logged in as lance and if you look in the owned assets i have the skull in there so that's awesome guys we have that working but the thing that i really care about is at the below let's see if it's there hey we got recent transactions so this is becoming more and more like a marketplace i want to encourage you guys to take this code and make it your own because you don't have to make amazon and follow along you can make your own unique marketplace put in your own assets set up your own smart contract with your unique tokens or coins and deploy it and put that in your portfolio because that is killer so with that said this is all pretty cool but what if we take it one more step further what if i click this transaction history and you could see all the assets that user bought so i think that would be pretty cool so let's work on that all right guys one thing before we get started in the next part i'm working on a laptop so the screen is a little small so if you notice that your recent transactions just go up one and zoom out a little bit and there you go nice and clean so if you're working on a bigger screen it might just look a little bit different but other than that this is the amazon page so next thing i want to do is let's finally finish the amazon context there's only one more function i believe that we need to add so let's go ahead and do that so to finish our amazon context i'm going to make another state here and let's clean this up a bit there we go you guys can see that cool oops that's too zoomed in for me so at the top here i'm gonna say const bracket owned items and then we're gonna do a set own items okay you can set that to a use state and we'll initialize it with an empty array and like i said we have one more function to do and that last function is going to be get owned assets so i'm going to find everything down here and i can just squeeze it in at line 182 for me so on line 182 i'm going to write get owned assets and make sure it's asynchronous just like everything else make an arrow function and let's add that try catch and for the catch it's just going to be error and then console.log error okay so console.log here cool now what's important is in this try block to get the owned assets i'm going to make use of the user data that we queried so if i do an if user data oops i'm just ensuring that we are querying the user and once it is there i'm gonna go check if we are logged in by doing bracket zero because bracket zero contains the currently logged in account so if i do that condition inside the if statement i can make use of the set owned items and the cool thing about states is you can have access to the previous items by saying prep items and this can be named everything you don't have to say pro items this could be called previous this could be called whatever you want so i'm going to do previous items and an arrow function here and what you can do is do a dot dot dot using the spread operator to get the previous items and then comma user data bracket zero dot attributes dot owned assets all right remember make sure it has the s because that should match up the column on our database let's see what's going on declaration expected oh i don't want this doesn't need to be here this actually should be the array because on items is an array okay take this out there we go so basically what's happening here is if i didn't use the spread opera here to deconstruct the prep items then i'm just replacing my owned items with the latest one you don't want to do that you want to add it on top of it so that's why we're setting up this way other than that's the function so can you guys guess where i'm going to use this function exactly that's going to be in the use effect so wherever in the user effect where we're getting the assets we should also be getting on items so at the top here i'm going to say get owned assets and make sure you add in the weight before it cool i'm gonna hit save and once that's done let's add it to our provider to make it global and then we can access it for our final component so i'm gonna add owned items make sure you add a comma here do is just add get on items and we actually don't need the function here because it's already being used in the use effect so i'm gonna hit save and guys guess what we finished the amazon context all right all right guys like i said let's make a awesome transaction history page and to do that we're gonna have to go and create the page file so i'm going to go open up pages and within here i'm just going to say new file and then we can say history.js awesome so we have history.js we can set it up similar to a component like so and let's make this a little bit bigger cool so what i want to do next is let's import anything we're going to need for this page which is just going to be our use context because remember earlier we set up owned items we're going to be using it here pretty soon we got use contacts let's import the sidebar because if you're thinking about it the history page should still contain the sidebar so i'm going to do a sidebar from dot dots forward slash components slash sidebar okay import the header as well because that also should still be there components slash oops two m's header hey okay so from here oops don't want to add a comma there actually and then we can also get our contacts some say amazon contacts boom that's all the imports i believe besides a component that we're going to create later on so let's go ahead and use our contacts i'm going to say object equals use context pass in amazon and all we're pulling for history page is owned items cool all right from here i'm gonna go set up the jsx now it's pretty minimal compared to what we were doing earlier guys clean it up and just do a classname equals styles.container all right so the cool part is we can just implement the sidebar here already and then in that next div we're going to make a main div so i'll say div class name styles dot main in that main we're also going to have the component and in the very next line let's add up a table container and similar to how we have the cards on the main component i want to make essentially a container that has all the recent transactions so to set that up i want to make a div called table container that was that table container which in turn is going to have the owned items all right so we're going to do that means we're going to do a little conditional rendering so if owned items exist if that user has owned items tied to their account we can do a div class name and say dot page title oops top page and don't forget to close it guys so i'm gonna close it like this keep it in the same line and if there is own items this page will list out some text that says purchase history cool so now we're gonna set up the other condition where if i put a div here let's see opening so if owned items doesn't exist then we can have a text field that says no purchase history okay and this is actually going to have the same title page title close the div and exactly what i said earlier no purchase history so let's see let's take out that extra parentheses there and if i do control b now you guys can see it a lot better so this is what we have we have the container div the sidebar the main the table container and our titles cool one thing i'll do next is underneath here let's make a div for the actual transactions that we had so it's going to be classname styles.transactions and i'm going to have owned items all right this is exactly where we're going to map through each item and for every item i want to create a transaction component it's going to be similar to like the card component you could look at it like that so i'm passing in two parameters item and index because if you guys didn't know in the map function there's a second parameter that you can name i usually name index where it goes from zero to one so if i create a new component that will have a key of zero if i create another component that will have a key of one so that's why we use it here because whenever you're rendering props with react they should have a unique key so i'm not going to forget the return statement this time and let's do return and this component doesn't exist but it's going to be transaction okay cool so i'm not going to hit save because if i do i'm going to get a whole bunch of errors my computer is going to be mad but let's make them happy by making the styles object so at the top here let's set it up so i'm going to write const styles equals that object and we'll say container and let's give the height make it full we can also make the width full as well give it a flex property and this is the background color that i want to use it's pretty much the same it's going to be hashtag fff okay and that's it for the container and then for the main what we could do is give it a width full as well and also full height with flex the flex property you want to add to this is flex column with mt50 pixels all right and then from there we can do the table container which is going to have the full width full height flex it's also flex column and let's give it a p of 100 pixels and just a nice justify dash center all right then we can do page title which is simply just going to have text l font dash bold text dash left empty bracket 50 pixel and let's also add a margin bottom of 30 pixels cool last one is just going to be the transactions div which will have a flex and give it a gap of 50 pixels we can do flex dash row flex dash wrap and add a comma here cool what i'm going to do next is comment out line 32 for now because we know that transaction component doesn't exist and let's build out that transaction component next this is going to be our final component guys are you excited let's get started so i'm gonna hit save and there we go all right guys so now that we made the history page there's only one more component left and if you look down here it's the transaction so i'm gonna go into components make a new file and let's call it transaction.js cool so now i can do control b and now i can see a little bit more clearly so let's go ahead and import anything we might need but first i'm going to set up the component and the only thing that we're going to need here for in terms of hooks is just use context just like usual awesome so we got use context let's also import link and it's still doing this thing right here so i'm going to fix it up so we got link and we also need image from next all right so we grab the image from next and link next up we're going to be using moment to format the dates so it can look really pretty once it's on there so import moment from moment we installed a lot of packages earlier double check your package.json if you have it next let's get our context so i'm saying import amazon context and there we go so for the history.js i'm going to step back in here for a second the things i want to pass in are a key and we'll make use of that index parameter i set up and we're gonna pass an item as as a prop so for passing that as a prop we can go ahead in our transaction component and destructure that here so i'm gonna say item and i'm gonna console that later to show you guys what we need to do for that but for now let's see i'll save this and let's also save this okay it's going to refresh real quick all right we also have to import transactions import transaction from the component there we go and we're not going to see any transaction components because there isn't any owned items just yet so it looks like our transactions aren't showing up so let's try to make it so more consistent so to make it more consistent what i want to do is do an owned items and all right because if it exists then we should be mapping through it and then in our amazon context let's see let's go to our function and i'm contacting here and sometimes it doesn't show up it says it's undefined because i think it's because we're trying to set the state before it even exists so just to make sure what i want to do is use your data bracket zero dot attribute dot owned assets here because we only want to set the state if that exists so if i save that here okay there we go now this should be a little bit more consistent and one more thing i need to do is just temporarily i'm consoling the item but i'm going to map through it because item if you saw the console log is just an array that contains the owned asset so we actually have to map through so i'll make empty fragment here because there's no real parent div and let's just do an item dot map and for every asset also let's make use of the index and let's see for every asset let's just return an h1 and this all this h1 is going to have is just the asset name just to see if it's there so asset name is what it should be so i'm going to hit save let's make this guy a little bigger rather even full screen it so we can see a lot better and now if i hit transaction history there it is there's the skull so we can finally see it over there i want to make sure we can see all of it so let's add a robocat to the list and then if i buy this it should be updating our transaction it's taking a lot of load awesome i hit confirm and i can also check this on my morales db i'll hit refresh on that and oh yeah because i didn't get the transaction complete there you go and you also got the notification on the dashboard which is pretty cool you saw that guys it's updated so let's refresh and we got the alert here now it's purchased and now i'm broke i don't have any more amazon but we'll get more in a bit so let's see if i hit refresh now we go to owned asset i should have skull and robocat let's go so we have two things there and now what we should see in transaction history is skull and robocat let's see updates hit refresh and sometimes it takes a second to load but now i'm not seeing the release there it is there's skull and robocat so let's finish out the transaction now all right guys so after a bit of testing one thing i realized is we should move this promise around where instead of get owned assets we call first we're gonna do await get owned assets after this okay so let's save that cool and as you can see we can still see our skull and robodog let's go ahead and finish out the front end so i'm going to go back to transaction.js and we should also be using our context so what i'm going to do is come to the top here we don't need this console.log anymore so instead we can do const and let me make this bigger for you guys cool we can do const username from use contacts and pass in amazon all right we're doing this because later on i want to be able to have that transaction history just like you see in the real amazon of all the assets we bought so there we go we've started it off right over here but the next thing instead of just this h1 we should get the rest of the jsx in so we're going to do div alright this one will have our class name of container and let's also put in the key in here for index make use of that and from there let's do another div inside of that and this one will be styles.top styles.top then we're going to do a class name and the div inside this doesn't need a class name it's just going to have some css of flex oops it's actually quotes that's why flex w full gap dash 80 pixels and then within that we'll have another one with styles dot top header text okay and again this is where we can start designing that transaction history like it is on regular amazon we're gonna do order placed and just insert a nice line break here and uh one thing that i forgot to mention it like we're using moment here to format the dates in a really nice way and we actually have the date built into the assets itself we just have to format it so i'm going to do moment asset dot purchase date and then you can do dot format and this is how i want it we can do quotes here oops quotes here and we can do m for the month the o and this for the year nice okay cool i'm really liking that so let's put this over here and in the next line it's gonna be a sibling of that div it's gonna be class name styles dot top header text all right it's gonna be the same one as earlier right except this time the title for this will be total and vr you guys should start to notice a pattern of how i'm forming this and this one is just going to have the asset price like how much did i buy that asset for i'd love to show that in the history as well so we'll do ac because we're using amazon coins and we're going gonna do something similar again div class name styles dot top header text again here we'll have ship two right because on amazon you can see who it was sent to and we should put the user here which is why we imported it with our contacts so you can put username oh yeah if i save we'll see an error because there is no styles yet okay so let me be closing dave closing div and now the main thing is going to be the content of it so the container will actually also be called content so styles dot content okay and within there we'll have another div for the date so styles dot date and we can say bot on we also want to see when it was bought we can format it with moment and asset dot purchase date and let's give it a different kind of format still with the four m's but just no year that's the only difference between the last one okay so let's be closing div then we should show the item that we got which would be really cool and to show the item that we got let's make a container for it and i'll do styles.item here we'll make use of that image i imported let's make itself close awesome and then we can do a class name give it a styling of object cover the src is actually stored on here as well already so we can just say asset asset.src the alt will just be the item and the height we can give it the same as the cart height the same as the width which will also be a hundred okay cool so after the image i want to have the name of the item to describe it so we'll have another div here that's just gonna have the name of name container so styles that name container okay then we'll do class name styles dot item name here we'll have asset dot name all right in the next line we have a couple more divs to make which is this one's gonna be another div and this one doesn't have a name but it has some css already in it so it's gonna be flex row items center justify dash center and a gap dash four guys got that cool okay and what i want here is a buy again feature which amazon has so we'll have styles dot by again button and then we'll just have buy it again all right okay and then we'll have a link that has href we'll do a template literal here to put asset that ether scan links so that's what we're linking here for the a tag then we'll do a target equal to oops not curly brackets there target underscore blank then we'll hit the rel equals no opener oh no opener and inside would just be another div with the class name styles dot ether scan button not link button so that we can see the transaction history of it okay cool so that's a tag link div div div div awesome and now let's get rid of this error by actually putting our styles object okay it's one of the last few styles we're going to have okay it's going to be one of the last few styles we're going to have so i can say cons styles equals container w minus bracket 40 percent flex column we'll give it a nice border with this d60 79 right let me do alt c before it gets too long then we can do a border dash 2 rounded lg and a shadow large and thank you guys i see you guys telling me that it's container i hear you don't worry container and we'll do top so for top we'll do a flex with full let's give it a height of 80 pixels and for the background it can be this color right here f1 f and the p can be 20 pixels all right so for pr guys let's also make this 80 pixel and just add a gap and that's going to be it for top all right we still have top header text to do top header text all it's going to have is a text large text left flex property and items dash center so that's it for top header text after top header text let's do content right then in content let's have a flex dash column h dash bracket 400 pixels and we'll have a gap dash 20 pixels and we'll have a p of c bracket content 20 pixels cool and the last thing we'll add for this one is going to be flex one and so that's content then we have date for date will be just text and let's make it oh we can also make the font the bold here then we can do item and that one can have a flex property of flex row give it a gap of 20 pixels and make sure the width is full and that will be your item div next i want to look at name container which will just be flex column then we can justify and don't forget to put the backticks around okay cool so let me finish this word off justify end for name container all right then we have the item name which will be text mg font bold make it rounded full then we can do ap dash 10 pixels here 10 pixels okay next we have a header of 40 pixels and let's see for width i think we should do 20 pixels and cursor dash pointer so i can hover over it and see the pointer okay so for text i have this color which is just going to be three a two eight zero two okay for the item name and what i want to add next is a text center mb dash bracket 5 pixels and empty 10 pixels all right then we have the buy again button and let's style that as well so for the buy again button so that's by again button oops i mixed up the item name with the buy again button so to see text font bold rounded full p10 h okay i see so we want to do is cut this part up and we can just do a flex dash 10 pixels yeah it looks really funny so there we go that's it for item name then button again is gonna have that really long one but we're missing some stuff at the beginning which should just be a background color so if that's bg bracket hashtag fd71 and then close it off with this bracket here so that's the background we also need a font bold for that yeah so this one is text mg from bold flex ml bracket 10 pixels and this is the buy gun button here so take a moment to get that done then we can do the ether scan button this one i know is just going to be font dash bold rounded h40 pixels w dash bracket 150 pixels and we have cursor dash pointer text can be this color of bracket hashtag 3a2802 okay i think we should do a text center here and border border then we got border dash bracket fd713 two more things well three more things we need flex justify center and we can do and items dash center whew that was a lot of styling but there we go that should be the transactions components front end if i hit save hopefully i don't get any more errors oh okay awesome so it looks pretty crazy but if i zoom out let's go look how clean that is guys so this looks exactly like the text from amazon and we can fix it up by adding something right here i know how to make this even better what if we did a text header and the text and let's give it a different styling so if i do top top header and text let's see if i can fix it up by doing a text large flicks items dash center flex row p 30 pixels and put the comma oops see if that helps so i think i figured out the issue guys what we're gonna need to do is head over back here for text end this should just be text top header text i realize i'm not really using it and that the real issue is that there's a little typo here so if i do adpx hit save and let's freaking go that's the purchase history that i'm trying to see so that's gonna be it for the component i think we can top it off by just running through and let's buy one more asset and get coins to just wrap this whole thing up so let's buy some coins we can get about five i'll hit buy okay meta mask is loading it's gonna take a couple seconds okay there it is there's ours we need our signatures so we can mint is the tokens that we want i'll hit confirm here's our nice hash loading screen and again you can always change this if you want with your react spinners now we just have to wait for the transaction confirmation there it is you can see that it's confirmed there's our transaction receipt if i click it it goes to ether scan like how cool is that and then if i x this out our coins is updated and you can look in your morales db to check if it actually went through so now we should have three items what that tells me is if i go to my transaction history page i should see three items so i'm gonna give a quick refresh to my morales db see if it updated this usually takes a couple minutes like i mentioned before let's see tokens oh waiting okay go to user and if i double check this see if it's loaded in we got skull we got our robo cat and is it so far ah there it is updated oh that's right we just got coins we need to actually buy something so now i'm gonna ask you guys what do you want to buy i'm thinking we can do this adidas metaverse one right and as you can see our recent transactions working still too which is a good sign so now i'm actually gonna purchase a digital asset that i created let this load let's hit confirm on there and now we just wait for the blockchain to verify and let us know that we have the assets done okay so after i hit confirm we should be seeing an alert pretty soon okay there's google chrome letting us know we got it hey you successfully purchased this asset that's what we were waiting for and now we should see that was the recent transaction cool now we can check amara's db and if i refresh this let's find out if it got added to my own assets robocat and adidas metaverse awesome so now i own three of those things and now let's head over to transaction history and it's going to take a second to load here as well and we also lost the correct amount of amazon coins and there it is nice so we can actually purchase histories this is awesome and that has been the bill guys i hope you guys enjoyed all we need to do now is deploy this to netapp and make this live so now that we have our site let's update our cli by doing netlify deploy and if you guys are sure it's all good we can do a netlify deploy prod okay and once that's done we just wait for it to load so i'm coming over to netlify and if you remember what we did when we set it up earlier we set it up so that if you do the netlify cli tool you can just do a git push and it will automatically update your site the only difference that i did is i renamed it to amazon clone blockchain and now i just have to wait for this to finish and we should be good to go all right so as we're building the cool thing about this is in the deploy logs you can actually catch a bunch of errors using the cli tools so if you look i have an error because of the used context in my history page so that tells me i just have to go to history and make sure that it's inside our function so let's fix our history it wants us to make this capital so i'll say const history and then here we'll say cons history as well and anytime you're importing that it should be that as well and i think we can do the same for the name so i'll say history okay so once you make those changes we can upload again so i'm just going to update the github add dot git status just to make sure and then we can just commit it all right fixed history page all right so when we push netlify will take it over and start to attempt to redeploy okay we got building all right so no errors so far now it's building the function so that's a good sign we're almost done with the deployment so build script success doesn't look like there's any issues and we can make use of net nfi's deploy preview so i'm gonna click preview and don't worry about this if it looks funny if i click connect wallet then click meta mask and try to log in there we go morales authentication signature request let's go ahead and hit sign and if it works that's a good sign hey when i log in there's my assets there's my account and the styling is fixed and with that said our site is now live isn't that insane so all you got to do is take this very link and you can send it to your friends and show them and have them log in and they can now connect their accounts and also buy any of the assets that you guys make so how cool is that i'm so excited for this build i hope you guys enjoyed the video and i'll see you guys in the next one what's up guys lance absolutely crushed that build if you enjoyed it make sure you smash that like button he's exhausted i can see him over here and he's a broken man he's a shell of a man that he once used to be so if not for me for him break that like button turn it white turn it blue do whatever you need to do with that said the last and most important thing is go and sign up with buildspace because this build amazon that you just did if you connect your wallet there you're going to be able to verify that you've done this and they're going to give you an nft that goes along with it build space is also an incredible community a web 3 builders for building the future and you don't want to miss out and they're also amazing job opportunity and all of it is completely free so make sure you go ahead sign up for it that was a lot of fun that was long but you finished it and you finished it strong so much love to you this is qazi that was lance i love your beautiful face we love your beautiful face as always we'll see you in the next video