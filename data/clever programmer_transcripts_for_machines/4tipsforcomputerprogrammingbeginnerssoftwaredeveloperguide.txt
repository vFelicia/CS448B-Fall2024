Hey guys, what's up? This is Qazi from CleverProgrammer.com, and today I got four most important tips for computer programming beginners. So let's jump right into it. (bassheavy R&B music) Tip number one, syntax. This is one of the most common complaints I get from everybody. I get hundreds of messages from students, and they always need help with their code. And whenever I kind of look at it, it's always a little syntax mistake that they made. What do I mean by that? What I mean by that is they meant to write forward, like turtle.forward, but they ended up writing turtle.foward. So they didn't spell forward correctly. Or they forgot to put a little colon at the end of the if statement. Or they forgot to put a parenthesis where a parenthesis goes. And a lot of the times I see this, they're following my videos. Like, you might actually be following my video tutorial and you might make this mistake. And it's totally okay because I make this mistake. I mean, even today I make these syntax mistakes. But especially when I started, I used to make them all the time. So before you jump on and ask for help, make sure that you're paying attention to how you are actually writing your code, okay? So I know it seems like it's below you and it's so simple, but trust me. Make yourself kind of dumb when it comes to these things and really pay attention, because you might be missing this a lot more than you think and you might be making those simple syntax mistakes. And a lot of the times, it'll lead to crazy frustration. Like, some of the students actually said, "I don't think I can do programming. "I think I should quit." Like, literally one of the students said that to me, and the problem with his code was actually him writing FOWARD instead of FORWARD. Okay, so syntax, very important. Make sure you follow it. It seems simple, but pay extra attention to it. That's tip number one. Tip number two. KISS, keep it simple stupid. Don't try to get fancy with your code. Like for example, with Codecademy or some of these other websites, they're great learning resources, but a lot of the times... Just 'cause you're hitting those bullet points and covering those concepts, like the title might say Covering Bitwise Operators or Covering ObjectOriented Programming, and there might actually be one lesson on it. Don't think you're an expert on that and don't downplay some of the simple things. Don't be like, "Oh yeah, I already know ifthen statements. "I don't need to learn them anymore." You can learn ifthen statements infinitely and they get infinitely complex. Another thing, functions. Super, super, super important, but so many times when I tell people like, "Hey, work on your problem solving skills "and really understand how functions work, "and really understand the basics." And they'll be like, "Oh no, "I've already been past it. "I've been even past bitwise operators." Just 'cause you've covered that title and that headline, it doesn't mean that all the concepts that go into it and all the main things, you're done with them. That's actually like, 99% of a programmer's job, writing basiclooking code but it ends up getting very complex at the end of the day. So keep it simple and focus on the most simple things, and get very, very good at them. Alright, moving onto tip number three. Make learning play. I've said this in many of my other videos, but I just cannot stress this enough. Make it play. Take whatever concepts you're learning and just play with them. Some of the students who are getting the best results from following my courses have been the students who made up their own examples. Just yesterday in the Learn Python OOP course, one of the students in the Slack channel, using objectoriented programming, created this little game with somebody shooting a gun and then having an option to reload. So kind of like how you would actually see in a game like Call Of Duty, there's a reload option, there's an option to kind of change the gun that you're using or the skin of it, and you can add on more and more things. And nowhere in the course have I taught that. I've taught you other things that you can do, but he took it, ran with it, created his own implications, and had fun. Literally some of the students who are taking courses at CleverProgrammer or following the YouTube channel or whatever are ahead of some of the students who are taking masterslevel courses at universities. How do I know? Well, because I have students that I personally coach who are actually going for their masters in Python, data analytics, computer science, you name it. Some of those students are at UFC. Some of those students are going to UIC, as well. And I'm working with those students and they are, they're given so much homework, they're given so many assignments, so many projects, and then they have a busy life and whatever else they're doing in their life, that they don't have time to make it play. So what do they do? They end up focusing on regurgitation. And by regurgitation, I mean literally like, hearing whatever is being taught to you and you just kind of repeat it, right? And that's what they're doing. They're copying and pasting code from Stack Overflow, and they're not taking the liberty to actually learn, to actually play. And they think they're very advanced and very far ahead, but I swear if I gave them to do a simple project they will just be completely lost. They're gonna need to go on different websites, copy and paste code, and have zero understanding of what they're doing to actually make it work. Sometimes I get frustrated when I'm working with them, but I have to understand from their perspective. They have a ton of work, and they don't have the luxury of time to kind of learn it. How, again, I got really good at computer programming in such a short amount of time was I was learning it on my own from online courses before my college even started teaching me it. And that's how, you know, I kind of got good at it. I would just do it, and I would have fun with it. And how I was able to spend so much time, like up to 15 to 20 hours a day at times, was because I never thought of it like work or homework or assignments or a project I had to do to be graded on. I was using it to solve my own problems. I was like, "Hmm, I wanna create a linksharing app "because I like to share lots of content with my friends, "but I want to do it in an intellectual way. "I wanna have it so it has its own categories. "I wanna have it so when I share this content, "one of my friends get notified. "I wanna have it so that my friend, "when he sees this comment, "sees my post that I made on this website, "it notifies me. "And then when he writes something, "we're notifying each other." And I wanted to create this really epic linksharing app, and I did it and it was awesome for my friend and it was awesome for me. And the day that I was actually getting paid to work with a client and work on code, I was like, are you freaking serious? I'm getting paid for something so amazing? Creating things from scratch and building my ideas and turning them into digitized things? Like, I'm learning and I'm getting paid? This is ridiculous! So that's the power of making it play. You'll be so limited if you just do it for a job change. So many people's like, "I just wanna do it for a job change. "I just wanna do it because I heard computer programming, "there's a lot more money in this field." Yes, there is. I totally agree with you, and that's what actually brought me into it. But you have to make it fun for you. You have to do it in a way where you're not being... The information's not being forced down your throat. You're learning it on your own time, at your own pace, and you're enjoying it. I want you to be sitting there like, wake up in the morning, having a cup of coffee, talking with some of your friends, and then being like, "You know what? "It's time for me to code now." "I'm gonna do this. "I'm gonna build some fun project today." "That's what I'm gonna work on." Or, "I'm gonna solve some really cool problem "just for my brain, my mental stimulation, "just to kind of get ahead." And when you can do that, you will excel beyond everybody. And I know I'm emphasizing this a lot. I'm gonna get some people, "You're talking way too much about one thing." Look, then this video's not for you, to be honest. Okay? The reason why I'm stressing this so much is because this is the number one most important thing to excel at, in really anything that you do. Then around having fun, you can create systems of productivity that make you accountable and hold you to it and the standard. But unless you're having fun, you're gonna quit and you're gonna do the least amount and you're not gonna really understand what's going on at the most fundamental levels, which is gonna stop you and handicap you from growing exponentially. So, this was the third tip and quite possibly the most important one. Alright, moving onto tip number four. I want you to learn how to ask for help. A lot of people ask me, "Please, please help, please code. "Please, my code is broken, please." Like, they spent more time saying please and showing their desperation than anything else. Those are the people I filter out like this. I will not help you if you're desperate. And it's not just about coding, it's about anything in life. If you wanna actually succeed and get good, why are you panicking? You should be having fun, right? This should be like, a problemsolving kind of thing for you. Whenever I was stuck in a problem and really it was hurting my brain... I mean, that's kind of amazing. And I would sit there and be like, "Okay, how can I try to solve it?" And look, I understand. There are times where you'll get stuck and can't get out of it. But being desperate is not gonna help you. Think about it and write analytically. Like, "Okay, so I wrote down three functions "and here's an if and then statement that works, "and I know it's doing it correctly "because of reasons A, B, C. "I've tested it and I know that this works. "But then this other if statement that I wrote "or this other function that I wrote "doesn't work, and here's why. "Reasons A, B, and C." So you've done two things. First of all, proven to me that you're not lazy and you're just making me work for you. Also, you have taken the time to really analyze your problem. 99% of the times, if you go so deeply analytical into solving your problem, you'll realize that you... Actually solved it. If you go deep down into actually being really specific with your questions, you'll end up solving your own problem. And I know this because I posted on Stack Overflow and all these forums so many times in my life, asking for help, and that's one way I ended up solving it most of the times. Don't be desperate. Relax. Coding is fun, it's awesome. You're building your own ideas, you're digitizing things. A lot of the panic comes from, "I have my assignment due tomorrow. "I don't know what to do." You should've started a while ago, and you should've starred doing things that were fun for you so when you get to the assignment, it's like play for you. Play time, baby. Don't be that person who waits until it's the last day before the assignment is due. Then you're not gonna develop a passions or love for it, you're gonna associate computer programming and coding with this feeling of work and stress. Just like, for example, living in the city of Chicago is awesome, but I always say I would hate to live in there and I wanna live in the suburbs. Do you know why? I'm not an introverted person. I like to go out, have fun, hang out with my friends. So what could be the reason why I don't wanna live there? Because every time I commute, there's crazy traffic. Every time I have to do something like go to the court or deal with legal stuff, I have to go to the city of Chicago. And because of that, I end up associating the city of Chicago with these bad things, and that makes me not wanna live in the city. Do you understand what I'm saying? If you relate that back to the world of code and how you learn, you're not gonna enjoy it if you just associate it with work, meeting deadlines, only a job career. You're not gonna get very far. Computer programming, look, is not hard to learn. You don't need to be a certain age to learn it. Somebody who's 58 years old just asked me a question, saying, "Hey, is this for me? "Can I still do it?" Yes, you can. You literally need like, less than half a year and you can actually land freelancing gigs that'll pay you good money. Like, a while ago I landed a gig, personally, that paid me $100 an hour. And they gave me fulltime work, okay? And that was years ago. And that was with me having like... I don't know, half a year or a year of experience in coding. So money will come. There's money in this field. But don't just be attracted to the money. You're not gonna get good, but most importantly you're not gonna have fun. I don't want you to be thinking of it like, "Oh, nine to five I'm gonna work, "and then I get to come home and then I get to have fun." No, that nine to five should be fun for you. Because then when you come home, you're not mentally drained. You have energy and passion to spend with your loved ones. If you come drained from work like everybody else, you're gonna be grumpy at home, not give quality time to your family, right? Look, you're not tired, you're uninspired. If you thought that was powerful, tweet it @CleverQazi. People working a lot who say they're burned out, they're not tired, they're uninspired. There's no such thing as burnout. I may be rambling on at this point, but again, there's no such thing as burnout. It's only when you do things that don't fill your purpose and your goals and your motivation, that's what makes you feel you're burned out, okay? So I'm gonna kind of end it with the four tips that I gave you, okay? Syntax. Follow the syntax. Pay attention to small details. Or I'll be using two equal signs for a quality operator or one equal sign for an assigment operator. If it's a function, does it have openclose parentheses after it? Am I missing a colon? Simple things. Am I misspelling the word? Don't think you're above that. I'm not above that, and nobody else is, either. You will make spelling simple, stupid mistakes, and it's okay. Two, keep it simple. Don't overcomplicate things. Don't jump into learning about AI just because you spent one hour learning about ifthen statements and functions, okay? Please learn the basics. So many people jump into learning about advanced concepts and it destroys their learning in the future. So keep it simple. Three, make it play. Have fun, make it play, enjoy what you're doing. This is what I just talked about for so long. Four, how to ask for help. Don't be desperate, be specific when you ask for help. Most of the times, it'll solve your problem. And if it doesn't solve your problem, it'll make me want to help you. Otherwise, you just seem lazy. It seems like you're desperate. It seems like your assignment is due tomorrow, you want me to do the homework for you. Right? Those are all the things that people think about when you ask them for help. Make sure you do your homework before you ask for help. It'll solve your problems, save you time, but most importantly help you learn. Because you need to make your own mistakes and struggle with them before you can truly learn, okay? If all the answers and solutions are fed to you, you're not gonna learn. You're just watching Netflix. You're not actually following a course. Okay? So that's it for this video. I love your faces off. If you liked this video, like it right now so we can reach out to more people. Subscribe to the channel. Hit that bell button so you get the notification every time. Follow me on Twitter. Follow me on Snapchat @Rafeh1, RAFEH1. I have a lot of people from CleverProgrammer following me there, and it's one of the best ways for me to communicate with you. I send you a video message right away or a text message right away, and you get in touch directly with me, okay? Go to CleverProgrammer.com, sign up for a course if you haven't. You have learning management systems, exercises, notes, solutions, everything in the world right there. Okay? Check out the Learn Python OOP course. There is, you will learn about objectoriented programming, but most importantly you will build apps and you will get access to our VIP Slack channel. So you can be in there, learn, enjoy, and actually be part of everybody else that's there. Join the coding family, essentially. So we have a Slack channel where all the students collaborate, and it really helps them learn and take it to the next level. Take the Learn Python course first, okay? It's absolutely free and you get so much value out of it. You'll love it. We have thousands of students enrolled in there, learning every single day. Okay, that's it for this video, guys. I love you, and I can't wait to see you in the next video.