in this video you're going to be building Airbnb with next.js you're going to be using solidity to build a contract and we're going to be using infuria to build this app on the ethereum blockchain you will be able to list and rent out your property you will also be using rainbow kit to connect your metamask wallet to the app itself so without wasting any more time let's go ahead and get started as usual we're going to be using our clever programmer CLI tool and after you're passing your email then your name you're going to go ahead and just type in solidity Airbnb or something along those lines and it will show up then it will start installing everything and will also open up infuria so go ahead and just create a new key or sign up with them if you haven't done that already and then just name your key Airbnb and then copy that key because we're going to be needing that very soon so at the very top you can see there is API key just go ahead copy it and then let's move on in the meantime our CLI tool will go ahead and open vs code for your convenience and you can just go ahead and get started now inside there you have you see there's a couple of files and that's where we're going to be working before we go ahead and get started just go ahead open up the terminal you can just hit command J and then check out if it runs or if everything is installed correctly just run yarn and then npm installed just for safety and then if everything is ready and good to go you should be able to start this app up by typing in your in Dev and this is what you will be able to see so if you got to this point good job let's move on to the next step alright so if you so if you've seen that just go back to your vs code and open up a new terminal or you can just stop running the app and then just type in Truffle in it that will initiate your truffle project which we'll be using throughout this project so now go into your contracts folder and create an Airbnb Sol file that's where we will be writing on the contract itself and the under that in migrations a zero one underscore deploy.js file will help you later in the build and deploy the file the contract itself so let's go ahead and create the instance of the Airbnb artifact and then this deployer function will help you actually deploy this contract so just type in module exports function deployer and then deployer.deploy Airbnb and then you can just forget about this file for the rest of this build because we're not going to be typing here anything else anymore I believe and uh one more setup thing that we need to do is just go into your truffle extension if you haven't installed it already it's available for free in the EVS code Marketplace and then just double check that under infuria service you actually do see Airbnb if you do not this is how you connect just hit connect hit the three dots hit connect to network and then inside and then just select inferior and under that your projects will be listed and then just select Airbnb if you if your projects are not listed you will need to sign in but it's a piece of cake and once you see Airbnb there you are good to go and we can go ahead and get started writing the contract all right let's go ahead and get started with the solidity contracts so first things first we're gonna have to specify the spdx license identifier which is going to be MIT in this case it's an open source project then we're going to be specifying the solidity version which is 0.8.16 if it's if you're on a different version I recommend you switch to 0 8 16 otherwise there might be combat compatibility issues next up we're going to start the contract which is going to be an Airbnb obviously and we're going to have a couple of global variables in here the first one is going to be owner which is going to be a public address then we're going to have a counter which is going to be a public number and we're going to have rental IDs which is going to be an array of numbers again public now we're going to set up the Constructor here and the counter is going to start at zero and then the owner will always start at message sender so with that let's move on to property info struct now we're going to be setting that up right here as gonna be a struct as I said and it's gonna be it's gonna have a couple of things so it will have an owner it will have a guest those are going to be addresses and then it will have a name obviously a string a property address which is again going to be a string a description again string and an image URL which we're going to be stored as a string here and we're gonna have a booking starts at which is going to be a number these are going to be dates obviously that are going to be a booking ends at so this is what we're going to be checking later on and we will have a price per day and then of course we're going to have an ID and the bully a Boolean which is going to be checking whether or which is going to be storing whether the property is booked or not now next up let's go ahead and set up an event which is going to be called property listed and it will have a it will have a couple of properties so name property address description and image URL and then we're gonna be also having the price per day ID and there is an error which I'm not okay it's gone so that's good so that was probably a bug and then we're gonna have another event which is going to be property booked event and then we're gonna be storing the ID guest number of days price and these properties in it so these two are basically just console logging but on the blockchain so let's move on to mapping the properties now we're going to go ahead and create a mapping and we're going to be mapping numbers to a property info and this is going to be called public properties now let's go ahead and build the list property function so first of all we're going to have a couple of things that we're going to be passing in here the name property address description image URL price per day and so these will be the stuff that we will be using to run this function this is going to be a public function by the way and we're going to go ahead and create a new property variable that is going to be local only and we're going to be storing that in the properties array at the counter index it will have a couple of it will obviously have every single and we're gonna go ahead and assign values to each key so we're going to say and then the prop new probability the name equals name and we go through the entire thing description image URL price per day the ID is going to be the the counter we're going to have the is booked it starts with false and then the booking starts at and the ends at dates will will be initially zero the owner is going to be message sender and then the guest is going to be address zero which is just basically a plain 0x000 address that is just like energized zero and then what we're going to be doing is we're going to be storing the counter so that now that it exists we're going to be storing it in the rental IDs array so we're gonna push it there now this is an optional step but since we created all the events now let's go ahead and emit the property listed event and then pass in all the required arguments name property name property address description image URL price per day and counter and then increment the counter okay it says the property listed event is an Undeclared identifier oh that's because I didn't call it or I didn't name it properly initially so let's just let's just fix that and that is pretty much this section all right now let's go ahead and test the our newly written function so we're going to do is if you don't have it already just install the remix IDE extension and then set the compiler version to match the contract version and then just hit run deploy run and deploy and hit activate now that will pop this window open and then try to connect to the blockchain but there is a big chance that it cannot connect to it because we probably don't have ganache running so just open your ganache copy your RPC server port and then you can obviously put in your inferior link as well for development purposes it's easier to just use ganache for now and then when you deploy it you just deploy it using infuria and so you just change the port and once you're good just hit connect and there is your there are all your wallets and everything so now just hit compile on the contract and then you can go ahead and hit deploy as well now we'll flash a little bit and then you will be good to go you can call the counter it should say zero and then you just basically run through all the functions try listing a property with the whatever dummy data you want and then see what's happening now the one thing that I'll say though is if you try to put in the price in uh in eth or any kind of like nonhole number like 0.001 that's not going to work it can own it can only work with the integer so what you want to do is go to this heathconverter.com website and then whatever price you I imagine in ether just convert it to weight and then put that number in there and that should work and now if you call the properties properties function you should get back all the details and that's pretty much it alright so let's go ahead and build now the book property function so that will have a couple of arguments property ID a start date and they just pass those in so we'll be a public payable function because there is going to be actual transaction that's going to be happening in this function and so what we're going to do initially is we're going to calculate the number of days using this easy nice little formula and so what's going to happen is on the front end we're going to be passing an end date and start date as milliseconds so here we actually have to calculate that and because that's how JavaScript works and then here we just have to turn it into what is it actual days so we're going to be calc let's see how much one day is in milliseconds and that's the number right there that 86 4 and a bunch of zeros pause it here copy it over I'm not gonna say it out because I I can't even count how much that is all right give me a break I'm old so just put it there divided by whatever number comes out and then after that what we're gonna do is now that we have the number of days and we know based on the property ID how much this property costs per day we're gonna make sure that the user is sending you know enough eth so we're going to be using the properties map or the properties mapping to calculate that so we're going to say number of days times the price per day for that specific property and then that has to be less than the message values so basically the the amount of eth that the user is sending if not we're gonna have to reject it with a send more eth or whatever error message and then here we're going to say payable properties property ID owners so basically all the if that is getting sent to the contract will be transferred over to the owner and the entire thing and then we're gonna set the is book is booked element of the property of the specific property to true so that others cannot book for the same period and then we're going to save the start date and the end date and then obviously the guests as well and then we're gonna go ahead and run the property booked event and we're going to emit it and that is basically the function all right so now that we've wrote this function let's actually go ahead and test it so the usual method just open up the remix ID extension and then we're going to go ahead rebuild and redeploy the same contract and so you will see version 2 right there so you can remove version one and there it is and now what you want to do is because it's a new like you will have to list the new properties just pop in whatever values you want to basically you just want to have one property there just test that it still works everything nothing has broken and now we're going to be testing the booking so you will need two dates in in like millisecond ISO format and so here's our eighth and so I'm just gonna whatever copy that but you can just go to the same website and then use whatever dates you want to just put a start date and put an ending date there and then if you just try to run this function right now you should see an air here so that error is good because we actually haven't send any to this like right now so for now just whatever value you want to pop in there but you should technically be calculating how much it costs per day and you just put in whatever value that you like make sure that is more than than the initial value or the price that you would need to pay and then just hit call and you should now see your your wallet address at both the owner and the guest properties and you should also see that the 10th argument which is booked that should be true so with that said if you see all those things then you're good to go now let's go ahead and set up the wallet connection for our app so we're going to be using wag me and rainbow kit and all these things with it so let's work for it let's go ahead and import rainbow me Rainbow Dash me slash rainbow kid style CSS and then chains configure chains create client and wag me config from wag me and then get default wallets rainbow kit provider Dark theme obviously you don't have to import Dark theme but it looks better from Rainbow me slash rainbow kit and then the inferior Provider from wagme provider infur and later in the video I'll be fixing that typo but that is actually provide durs with an S at the end so plural and then the same for Json RPC provider a chains and then okay so let's go ahead and set up chains and the provider so we're going to be using configure chains and then just pop in a array of chain.gurly and chain that localhost so what we're going to be doing here is just see all the different chains that this application will be able to connect to and for each of them there's going to be two providers that we're going to be setting up so we're going to be using infuria to connect girly and then we're going to be using ganache to connect to the local chain so for inferior we need to pass in the inferior API key I hope you still have it copied on your clipboard and then the inferior provider will be traded with the with higher priority so let's grab the API key again if you don't have it so just copy that and then create an EnV file put it in there and then just make sure that the names match up so inferior underscore API key or whatever you want to but you got to make sure they line up between the app.js file and the EnV file otherwise there will be an error and then for Json RPC provider you need to put in obviously priority number two but you can just skip that and then you have to configure the RPC itself because aim viewer comes with the RPC but not with the API key the Json RPC provider is completely custom so for RPC just say chain and then hdp 127001 75 45 basically it's your local host and then just copy the link over from ganache and then we're going to create a connectors from get default wallets and then you just configure it with whatever app name you want to passing chains and then create a wagme client and then just make sure the auto connect is true that way the wallet will be connected automatically and then passing the connectors and the provider now you want to go down and wrap the component between the wagme config passing client and wag me client and then wrap rainbow kit provider around the component as well and then that should be pretty much it now here's the fix that I was talking about so just that's the error that's going to cause so just make sure the inferior provider and the Json rpz provider you fix that and then put in the plural and that should be now good and now if you go over into header you will need you will want to import connect button from rainbow kit and then all the way at the bottom just a render out connect button and that should show up right now and it should be working so if you disconnect or whatever your your wallet now you will be able to connect and use the rainbow library to connect your wallet to your app so with that said let's go ahead and move on all right so now let's go ahead and using the wagme library we're gonna be we're going to be saving the address of the user who connected their wallet so we're going to import use account from wagme and then just extract address out of it and that will take care of that will take care of literally everything for us and every time that address changes we're going to want to run a use effect that makes sure that the address actually exists meaning there's a wallet connected to the app and then we're going to be saving that address in our set user address you stayed on the user at a few State just to make sure it works you can go ahead console log it and then you can run a couple of tests there it is there's my address I'll connect it and then if you change it to a different wallet it should update and show you a different address now next up what you want to do is go ahead create a new folder called utils and inside there we will create a constants.js file so in here we're going to be importing the contract from airbnb.json and don't worry about it we haven't put it in here yet so we're gonna put it in just a second and then we're going to import a web3 from the web3 package and now we're going to go ahead and save the save the address of the deployed instance of this application however we haven't deployed it yet so let's go ahead and do that right now just go ahead and right click on your Airbnb dot Sol and click deploy and then now you want to go ahead select the girly because we're on the girly Network and use inferior there's your link so just double check that it's there and using inferior just go ahead and deploy this contract and then a little bit it should show up your freshly deployed nice little warm and toasty contract address so just pop that over there and now you want to go ahead and Export a create contract function so all that's going to do is it will extract the ethereum object from window and then using that it will create a new contract so we'll say new web3.eath DOT contract and then passing the API and then the address so now let's actually put in the API in the same folder so inside of build slash contract there's the Airbnb the Json file that's the ABI and so we just want to go ahead copy that and then paste it into utils and there it is now you will be able to import it now there's one thing that was supposed to be there but for some reason it got deleted as a modal Styles will be it's not really a blockchain related stuff but it's just some styles that got deleted so just copy whatever I'm typing there so it'll be modal Styles and then content 300 pixels height and then 400 pixels wide margin Auto margin top 150 pixels and display flex and then for overlay it'll be a zero zero zero and then 0.7 rgba it's whatever that's fine just copy that and then you should be and now what you're gonna do is go back into your use airbnbjs file and then import the create contract function that we just created in constance.js and right here in the use effect you want to set the contract and then put the create contract function in there just make sure you put the open and closing brackets there so that it actually runs and so with that said that should be good all right let's go ahead and fetch all the properties none of them are going to show up because we don't have any but let's still do it so we're gonna have a function get property this is going to be an async function because we are handling blockchain stuff and in there we're gonna have a we're gonna have a try catch if it goes on error we're just gonna console login and I'm gonna have to worry about error handling for now and then try we're going to have a number of properties which is basically just gonna fetch the counter from the contract so you can go back and check what that does but basically it's just a number that counts how many properties we have and so once that's done we're gonna go ahead and set the properties you stay to an empty array you will see under you will see in a little bit why and so what we're going to do is now we're going to Loop through all of the properties but the way we're going to be doing it is we're going to have to fetch individually each and every single apartment so what we're going to do is go from index 0 all the way to a number of props and we're gonna call the contract that methods properties we're gonna basically fetch from the mapping every single property and whatever we get back we're going to need to format it because the blockchain sends back a bunch of random stuff with the useful information so we're going to have ID name we're going to have description we're gonna have price per day we're gonna have ispoked and we're gonna have address I believe and you will later see it but I here I forgot to import IMG URL so go back copy that from the contract and just paste it here it will save you a little bit of a headache later but I'll show you that anyways and now what you're going to do is append the formatted property to the current Pro current state of the properties you say now what you want to do is create a use effect that runs every time the contract changes and then that use effect will run the get properties function so every time a new contract is loaded up we will be fetching all the properties that are and then go ahead console log it and if you get a empty array good job now let's go ahead and implement the add listing function so we don't just get an empty array so we're gonna say constad listing equals is it will be an async function and we'll need to pass in name property address description image URL price per day to it and what we're going to do is obviously if the contract is if the contract exists we're going to have a try catch and we will be calling the contracts methods list property function and then pass in everything that we so name property address description image URL and price per day and now we're going to be sending that from the address that is logged in to the app for a guess where you can just pass in like 3 million and then gas limit and all and then just go from there once that once we added a new property you want to refresh refresh the properties so just run get properties function and to be able to use this function outside of this hook you will want to go ahead and Export that or return it so let's see if it works so I'm just gonna click it and something seems off so let's see what's up with down create it seems like it's not defined let's define it so inside of new listing form the JS let's create that function and you want to prevent default so that the page doesn't reload itself and then what we're going to do is we're going to calculate how much the price per day is in weight because if you remember the contract only works with way so we can use the web 3 we can use the web 3 library to do that so weapery.2way and then passing price per day and then the original type is ether and so after that you can just run add listing pass in everything that it requires and now with the newly calculated price in way and now that should be good to go so now it should work so let's just test it just some dummy data upload an image perfect and let's go pay for it and as you can see now it was successful I'm gonna refresh and it looks like the address is not defined so let's see what's happening with that listings listing item we need an address oh yeah we gotta import it so let's just do that real quick and then destructure from user BMB okay that looks good and now it looks like the image is not loading for whatever reason and it says the source is missing however the sources clearly there so that can only mean one thing and that means that when we are pulling in from the contract we are not actually destructuring it so we just confirm that with a console log so let's actually do that this is what I was talking about so just put it there fetch the image URL and that should solve the issue now it shows up twice but if you refreshing it will only show up once and the app is good to go now we only have to book the property and we are ready with this app okay so the very last thing now that we need to do is being able to book the property so let's go ahead and go through that and we're done with this build so in the userbmb we're going to create a new function that'll be that we'll call book property and it will be an async function with the arguments ID start at and end that so first we're going to check if we have a contract and everything's ready to go on the blockchain side and then we're gonna be running a try catch just to keep things safe now we're gonna have to check what the due price is and we're going to be using the contract for it however we haven't made that function on the contract end so let's go ahead and do that right now so let's go in there and in Airbnb Sol we're going to create a new function get due price and we're going to pass in three arguments ID start date and end date it will be public view function that will return a number so first what we're going to do is we'll get the property from the property is mapping using the ID then we're going to calculate how many days it will how many days the guest would like to stay using the same exact function formula that we already used and we're going to be returning the number of days time the price per day so basically the total due price that's all for the function will do and then we're going to go ahead let's actually we're going to go ahead and redeploy this function the reason is every time you change something on the blockchain you will have to reapply it so that comes with having to update the contract address and the ABI as well so go back into your instance JS in the utils and then just update the contract the address cons and now we're gonna go ahead remove the original Airbnb Json and then replace it with the new Abi so once that all once all that is done we will have the due prize and now what we're gonna do is using the book property function in the user BMB a hook we're gonna call we're gonna go ahead and book it we pass in all the required data so from user address and then value due price because we now we have it so that way there will be no overpayment under payment no error is there and passing the required gas limits and then once you call once you book the property you want to refresh the page so just run get properties and you should be good to go and uh here are the starting day at start day and date you state and everything that is being run in the in the booking model is just to show that this is how the other side of the app works all right let's go ahead and now test it so we're going to add a new listing just like we did last time so all right let's let's get all of it done as you can see it shows up perfectly and now let's go ahead and book it and let's see what happens so this is a perfect nice little is it perfect it's not a perfect nice little modal so let's just book three days and hit confirm and it looks like book property is not a function and it doesn't exist and that is likely because we haven't exported it from the hook let's go try it again and now it seems like it's going through and contract interaction is as you can see the moment it's done pending and you refresh the page the property will be unavailable so that is it that is the app now go ahead and feel free to build on top of it add new features to it and with that said thank you so much for watching see you in the next one