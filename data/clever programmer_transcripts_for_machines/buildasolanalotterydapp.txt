picture this it's September 2022 and the USA Mega Millions jackpot is at 301 million dollars now imagine if you could create your own lottery app using crypto instead that's right in this video we're going to be making the lottery dap on Solana blockchain I'm gonna be showing you guys how to make your very own Solana smart contract using anchor which is just a framework of rust I'll walk you guys through step by step how you can buy tickets create the lottery and transfer that Sweet Soul to a very lucky winner next I'll show you guys how to use your Phantom wallet and connect it to your app and of course we're gonna need an RPC node provider to connect us to the blockchain and our friends at quicknote are going to hook us up we'll also be using something called Solana playground which is the place to create your smart contract build it deploy it and for my favorite part test it so that you can understand how all of the functionality works so if this excites you make sure you drop a like in the video and let's get started with the demo and like I just said this is a amazing exciting app for you guys we're actually making a lottery we're taking what we know about Solana and I'll walk you guys through how to make this cool app but first let me show you around right let's how this is how it works right as you can see we have Phantom wallets we have another button here that we can use as well and I'll show you guys how to set that up but to get started and log in and connect we click select wallet we're using Phantom Of Course and there we go boom the way this works is we need to initialize what I'll call the master so once we initialize that Solano will ask us to approve click approve and Bam so that we have nice toast notifications this time and we can see that this is lottery number zero well that's the initial State what's the pot nothing what was the recent winner zero nothing right so how do we make some more life right well let's make a lottery do you want to make the next Mega Millions jackpot well we can do that with Solana here so let's click create Lottery and let's hit approve and Bam now we're talking right so a lottery was created as you can see and now we're in lottery number one right the cool part about this is we can purchase a ticket and every ticket that we purchase is gonna cost you five sold it's pretty steep right but luckily for me I have 13 Soul right now let's go ahead and enter let's hit approve notice how it says minus five I bought a ticket and we can see that I lost some soul I have eight now right so let me let's make this interesting right so let's use a different wall let's say someone else logs into the very same app right and let's go wallet number four this guy's pretty rich too he says 13 and notice a couple things I switched to my CV wallet but now there's no pick winner button right because the cool part about this it's secure the only one who can pick a winner is the one who created the lottery and this guy didn't create it so he can't decide who who's the winner right so let's enter this guy in and let's hit approve so there's a 50 50 chance right you want to make it even more spicy right let's add to the pot all right let's add to the tally all right let's see wallet number two does he have any Soul he has seven this is the poorest wall that I have all right he's gonna enter in he's gonna hit approve and Bam pot's now 15 right so one out of three chance let's go to wallet number one right let's be a little bit unfair and let's make it so I have two entries so who had let's see how many total tickets right if there's 20 there's four tickets two of them are owned by me one of them is owned by wallet number four let's say it's you guys you guys are wallet number four and we have wallet number two right so what we can do since I made this Lottery let's pick a winner shall we so let's say pick winner and let's hit approve and the winner is for a what the hell so that means I didn't win I can't claim that money or else we'll get an error right I think wallet number two the poorest wallet out there wins the prize so this guy he has two he spent his life savings on his ticket so if I click claim prize he gets 20 Soul I'd say approve boom claim the prize those buttons are gone and you can see there's history and you can see who won right so this is an amazing app there's a lot that goes into it I show you guys how to do something that's not really possible in Sana right you can't generate a random winner there's something called pseudorandomness that I'll show you that's possible so look at this wallet 2 is now the richest man out of all my wallet says 22 soul and that's the demo so are you excited to build this app you guys are excited drop a like right now leave a comment saying I'm ready Lance so I know that you're watching and if you want more videos like this also let me know so without further Ado let's get to the tutorial all we have to do to get started is open up your terminal go into the folder that you want to put this file in and type npx cleverprogrammer at latest once you do that hit enter and watch the magic happen you're gonna see our CLI tool load up it's going to ask if to you to put your email address I'll put in mine plants at programmer.com BAM your name and Lance and select the project that you want to load up you guys don't have to write a lick of code to make sure you have the same files that I do right we've done so many projects this past month right now we're like doing the salon lottery app as you guys know so let's hit enter right and as it loads up I mentioned before that we're going to need an RPC node to connect to the blockchain so let's go ahead and set that up while our CLI tool installs the project all you have to do oh look at that vs code is already finished but all you guys have to do is type in the link in the description and it's going to be try quicknow.com cleverprogrammer so if you hit enter you should see this nice page right here go ahead and put in your information your name your organization you can say personal you can say you know whatever company you're part of your email and go ahead and create an account I already have an account so I'm just going to sign in so once you've done that you should see this nice screen right here and all you need to do is set up an endpoint is click this button create endpoint select the chain that we're using and of course we are doing Solana and the important thing here is that there's three networks that you guys should know about when working on Solana there's mainnet testnet and devnet what I'll say is this when you're ready for the real deal and you want to use Real Solana right your own money you can use mainnet beta but if you're learning with me let's use devnet okay so let's use devnet I'm gonna hit continue and there you go there's a couple of addons that you could add but let's go ahead and just hit continue all right we'll just hit create because we want to use the free tier and Bam that's it this shy tiniest Firefly that is our amazing RPC node that's going to help us deploy our contract and connect to the blockchain all you guys have to do is hit this copy button right here and we should be good to go with that said I think our app is ready so if I hold I'll tap here our CLI tool is going to set up our app right see this this opened up itself or at least it should open up itself so you can see over here we have our nice app and all of the components inside of it and since we're already here one thing that we should do is let's set up our Phantom wallet if you didn't know we're going to use Phantom wallet to connect to our app and send all of our transactions and sign them of course so what I'm going to do open up our tab here and if you don't have Phantom wallet installed go ahead and type in Phantom wallet extension on Google Chrome and you can see it should be the first one it should be this page right here I already have it installed so you should be good to go so if you already have Phantom skip a little bit ahead of the video you know what you're doing right if you don't you're new here what's up guys welcome so once you have the extension installed go ahead and log in you should see something like um saving your recovery phase a phrase that's your password don't share that with anybody keep it private and to yourself some are safe right so you remember just in case you lose your wall information okay but you should see something like this and notice how it says you are currently on devnet right by default if you just install this this wouldn't be on devnet so what you need to do is go into your settings change network and click devnet right because remember when we set up for quick note which one did we use we use devnet all right now you guys are following all right so now that you did that uh you might notice you don't have any Solana like you're really poor right so let's get you guys rich Let's print all the Solana we need to do that just type in Saw faucet.com and put in your wallet address so if you don't know your wallet address all right just go at the top here you can see if you hit copy right that's going to be your wallet address so I'm going to hit and paste my wallet just in here and what you could do you don't have to do one at a time you can do two at a time and you're gonna click which network that's right Kevin devnet I don't know if there's any Kevin's watching but if there is shout out to Kevin all right so back to Soul faucet now I have two I think I had 16 before now I have 18. so do this as many times as you like oh you won't need a lot I'd say for the lottery app you can get about like 15 10 even all right it's all up to you so that said I think we're good on the Solana side let's go ahead and check out our app all right so going into my app now you should have everything you need if you did the CLI tool command correctly right all the packages are installed you shouldn't see any uh Missing packages it should be set up for you guys what you guys need to do now is press command J or Com or control J if you're on Windows and let's CD into the app once you're in the app if you didn't know this to start it we use yarn depth okay so now our app is running at localhost 3000 let's go ahead and head over there and Bam right if you guys just saw the demo this looks a lot different than what I just showed case reason being is because this is a challenge right why is this a challenge because everything works but we need to make it Dynamic what do I mean if you guys are familiar with programming at all all of this is static data what do I mean by Stack let's say I click this connect wallet button boom we're connected but it doesn't actually use Phantom all right it's just a button that changes what we call States right so look at this this these lotteries it just says one one one right we can initialize the master right we already have the pot for this Lottery we can enter right it doesn't really do anything right all it does is set up a console log so let's take a look at that all right so we connect wallet connecting static wallet initialize the master we hit enter we purchase the ticket purchased a ticket we create a lottery right pick winner it's basically just an empty function that's console logging uh what it should do does that make sense to you guys cool all right so if that made sense our goal is to give this app some life right you saw what it does how do we make that work well let's first understand right what our app looks like so what I like to do is you know just show you first of all what our app does so if we go to our pages I believe let's head over to our index notice a couple things here we have header pot card and table those are our three main components right this project requires you to understand react so if you're a complete beginner I apologize but this might be a little difficult for you but don't worry try to see if you can learn something from this cool so like I said header pod card table right if we were to draw like a nice visual for all this let's go ahead and do that let me see if I can make this smaller and let's do my handy dandy notebook you can just use any other whiteboard but this is the one I like to use perfect so as you know if you are familiar with programming or at least react right we have different components right so you can see that this is my underscore app.js it's returning a component but within this component right oops not our code over there within this component we have this right this com this app component has children within it right so if I would draw a little tree to illustrate that relationship all right I would it would be a little bit like this so if I draw a box this is the app all right and from there we have the index.js right you guys following so far you guys know what I mean when I say the child of the app is the index right this component is the same as this whole index so what would be the child or the children of the index.js what do you think give you guys three seconds three two one what do you think which one's the child all three of them right so that means index has three children all right so we have one two three okay we have what are the three children's names guys should be pretty easy right you guys read it's gonna be header uh pot card pot card and something called table right if you guys uh create your components the name alone should let you know what the purpose of it right so if you look at this right what part of our app does header contain right if you look at this which part is the header can you guys tell which is the header if you said this top area right here you are correct all right how do I know let's comment out the header right save Boom the header is gone okay what about the pot card what's the pot card boom gone right over the table boom gone right what does that tell us though it tells us that the functionality of each component exists within that component right so if I wanna you know make it like the demo where you click this connect wallet and you make a phantom wallet connection which of these components should I tackle should I look in the table yes or no no right we're going to look at either the header or the plot card right if you said pot card I can understand because the connect wallet button is here as well but the main way to connect your wallet you saw uh was basically starts with the header all right so let's look at the header so if it's in the header we can actually go to that very component and take a look right and as you can see the header is very simple we just have a div wrapper here a div that holds Lottery depth and a button that says connect wallet so this right is where we want to look at to make that Phantom wallet connection as you can see right here something called a wallet multi button that is gonna be a replacement our Dynamic button right so some of the Imports are set up for you guys already other than other Imports we got to figure out together okay so let's go ahead and figure out how we can connect our Phantom wallet to this app now before we get excited about taking this multibutton and putting it in here right we can't just do that right away right because the important part is we want to connect our wallet to the app I was putting a button there isn't necessarily going to do that we have to set up what I'll call the connection provider right what do I mean all right let's take a look I was saying that we should put the connect wallet button here right but uh we need to establish the connection to our app right so what I mean by that is this let me change it to this board Perfect all right I essentially want to wrap my app with a phantom wallet connection so that anywhere my app is right oops anywhere my app is we have a wallet connection if I'm in my table if I'm in the table it should have access to the wallet connection if I'm at the pod card it should know what the wallet is so forth and so forth right we can do this by wrapping that connection provider within the index alright so we want to tackle the index component you guys with me so if that's the case let's go back here let's open up this go to the index and let's take a look awesome so as you can see already right we have a bunch of code here let's actually make this bigger so you guys can see it oops too big awesome so we have a bunch of code here we know that this index component holds the three main functionalities of our app we can put the wallet connection here it's also okay to put your wallet connection here right it doesn't really matter that much right but for simplicity's sake and for visual sake let's work on the index so we want to import a couple of things what we do want to import is something called the use memo which is a react Hook from react we want to import connection provider import connection oops provider right and if I press tab you can get the Auto Import of Solano wall adapter react and there's actually another thing we want not only we want the connection provider we want the wallet Provider from the same place okay cool uh we also want to import the wallet adapter Network all right this is from uh Solana Solana slash wallet adapter uh base all right that's what I believe it's from so we also want to import the Phantom one right because what wallet are we using we're using Phantom one there's actually other uh Solana supported wallets that you could use it doesn't have to be Phantom right but I'm most familiar with Phantom I like using Phantom so we want to import that right if you're more curious to see the other wallets you can actually look at this library and see the other options at Solana wallet adapter wallets all right this Library holds all of the adapters cool um let's see what else do we need we can also import the wallet modal provider right so the wallet modal provider gives literally sounds like what it says it's gonna provide us with the wallet's modals when I click the button we should see the list of wallets that we can connect to and it should be a Solana wall adapter react UI that is correct and from there we can just require require at Solana oh web Solana wallet adapter react to Y uh Slash Styles dot CSS right we want to get the CSS that Sonic comes with it's that nice blue look that you saw from the demo so let's get that as well okay this looks pretty good to me from here let's use all these Imports now right so from order we want to get the uh use memo first okay so let's see actually let's make a variable I want to make const endpoint okay so what is an endpoint all right let's say I open this guy up again let's say I want to connect to the blockchain right oops let's erase this for now I want to connect to the blockchain from my app and I guess we can make the circle again boom here's my app and the blockchain since it's a chain or a block we can make it a rectangle right Solana chain right and it's made out of different blocks or whatever right in order to get our app to connect to the chain right we need something like an RPC node right and if you didn't know quick node provides you with an RPC node we could technically make our own RPC node right but that requires us setting up some infrastructure uh maybe even Reinventing the wheel and setting it up right I like using quick note because it makes it nice and easy to set it up right so we want to use our RPC node or quick node to connect to the blockchain so it knows what wallet I'm using right and if I want to make transactions to the blockchain we can also use the same process right there we go so how do I use the RPC node well remember I told you to copy this HTTP provider go ahead and copy it if you didn't already get quotes and paste it right there right I'm putting in a variable because it's usually very long so I want to store it in endpoint so I don't have to like put this whole URL somewhere else cool so now that you have your endpoints set up let's go ahead and set up our wallets all right so we've got the endpoint set up let's get the wallets right technically we're only setting up one wallet but if you did want to set up more wallet options uh here is where you would put the rest of the adapters that I was talking about but like I said we only have one so here we go so let's set up this array here oh sorry about that camera died for a second but we're back anyways as I was saying setting up our wallets we're gonna put Phantom wallet adapter right here this is creating a new instance of this wallet let's put a comma here and again if you wanted to add more uh different kinds of wallets as an option you would list them out here cool and put empty array right here and with that this should be it utilizing that react Hook New Phantom wallet adapter bam um let's see yep now it's time to set up our connection provider and our wallet provider so one thing I want to mention is back to our drawing we want to set up that connection and this is technically more accurate but we want to set up that connection we have to wrap it within our app right see how this circle is our connection and it's wrapped within our app right to do that uh with our code you want to take that connection provider connection provider put all of our components within that app this is what we call wrapping right we're wrapping the app or header popcorn table with our connection provider so it's wrapped in there make sense so now we're providing the connection right quite literally cool one thing you could do is that you need to provide the connection provider with an endpoint right it sounds funny to say so if I say endpoint right here right we're going to pass in this prop of end point there we go we're passing in our our PC connection to our provider which in turn is providing that connection throughout the app make sense that's the way I would explain it we also have another provider here it's the wallet provider essentially the same thing but specifically for the wallet so again wrap those components in there and yes the order does matter if you were wondering right it should be connection provider then the wall provider then the rest okay we're almost done using all the Imports let's see um one thing that happens we don't need is this adapter Network so again if you weren't using your RPC node and you just want to strictly connect to the devnet you would use this import right so we don't need that what we do need is within the wallet provider I want to use the modal again this is kind of optional but it's nice having this modal here because it takes a lot of work out of us that we need to set up you'll see in a second so I said save boom okay yeah I think that's pretty good all right cool and you know what too we can even put this div right here this style wrapper we can make the connection provided the parent did what I mean by the parent div is the div that's on the most outside so what I'll do is take this put it in here and don't forget if you do this this is the lid of the box right you want to make sure that it matches up oops right here I took that outside parent div and I made the connection provider the new parent so our app should look a little bit something like this if it looks like this we should be good to go and we can double check by looking here can't read properties of map that's fine okay cool uh this error shouldn't happen but I'm guessing it's because if we go to our wallet provider we should provide it with the wallets so let's go ahead and do that wallets is wallets and uh if you want your app to automatically connect you can put this auto connect prop right here and there you go no more error that's what it was missing all right don't forget to put your wallets right here if you have something like this if I zoom out take a look if it matches up no errors we're good to go right but notice something uh connecting a wallet doesn't actually do something not even this one right but again oh the first thing I wanted to tackle was this connect wallet button so to do that which component do we need to go to let's go to the header so I'm gonna go to the header you see how we're importing this wallet multibutton should be pretty simple now if I do something like this oops or if I just start saying wallet multi button oh yeah that doesn't work let's just do it normally wallet multi button and the wallet multi button is actually selfclosing meaning we can just do something like this and let's take a look hey look at that it says select wallet now and uh if we have our proper connection on provider setup we can click on it you can select we can see the modal here with all the wallets that we have connected and it knows that I have Phantom I'll click Phantom and there we go right what functionality did I write to do all this none that's what's nice about uh the Solano wallet adapter right we can connect our wallet we can even disconnect it and it's gone all right the next thing I want to do is let's put that same button here all right so let's go ahead and do that what component should that be in all right let's take a look should be in the pot card right so I hope you guys are getting the pattern because as we go on I'm going to explain it less and less I'm not going to hold your hand anymore I'm sorry all right so we're in the plot card and there's some static comments here that we'll talk about in just a second what we do want is the wallet multi button yes and let's go ahead and put it in the right places so if we look there's a comment just for you guys says wallet multi button goes here let's say wallet multibutton like so and there's another place where we need this and I believe strip here connect wallet wallet multi button so let's hit save and it goes right here perfect so if I refresh select while you can even click this button to connect your wallet and as you can see it's in both places awesome cool right and it does mess up our static functions because uh we didn't set that up but that's okay for now what I want to do next is let's actually create the smart contract first and then we'll get back to this and explain how to put it all together sounds good cool so let's go ahead and do that all right so to move on to the next step and get started writing our first smart contract together which you guys should do is we can go ahead and exit this tab we can make a new tab and we're going to open up something called Solana playground so let me go ahead and make sure we use the full window because we're not going to look at our app for a while like I mentioned so we're going to do is type in beta soul.pg.io this right here and don't worry about this stuff what we need to do is click this plus button on the side and let's choose a framework before I move on if you guys want to know Solana playground is the place where we can write your very own smart contract you can build here you can deploy here and the most important feature that we're going to use today on this is easy to test all of your functions because if you're just coming in you're not going to know how these work but the way I understood them the way I got I'm getting better at this is by testing and figuring out what does this do what does this do so when you're choosing a framework we could do this in Native first we could do this an anchor and there's new support for python now which is exciting but what we want now to use is Anchor and let's name this project Lottery sold all right so I'll click anchor rust hit create and Bam here we go we get started off with these files right here this is the default uh files as you can see there's an initialize but what I want to draw your attention is this macro it's called hashtag program this defines a program so everything within this scope right here that I highlighted is the program right we want to create our own Solana program and just so you know when I say program and smart contract I'm going to use that interchangeable but they're going to mean the same thing all right if you're coming from solidity this is essentially the remix of Solana cool so let's go ahead and clear this out because we're going to make this from scratch so get ready for that so like I said we're going to be using something called anchor which is just a framework of rust and if you don't know what rust is it's a the native coding language to write for Solana right so um if you see me import stuff in JavaScript you guys should know that import you know use state from react all right what does this do right here well if you were to write this in JavaScript this is getting us the you stake Hook from the react Library okay so you can't write this in rest because that's not going to work it's a different language so how do we do something similar to this in Rust well the cool part is that you can do this you can say use anchor Lang right anchor Lang is a library and when I say use you can look at it as import we're getting anchor Lang right but what do we want from anchor length so we can get more stuff from anchor length by saying two colons right if you think of it like a folder we're going into this folder when I say colon colon right so we're inside this folder and we can get something from it we can say Prelude right so what do we get from anchor lag we got Prelude right and when I do colon colon again what's happening I'm reaching into this folder I'm grabbing a cookie and inside that jar I'm going to put star this is basically saying get everything uh within Prelude right so you saw me use used it right I did this and then used it here we can do something similar by writing Prelude get me everything inside Prelude well first go into Prelude and then inside Prelude get me everything in there if I do a comma here I'm getting more things from anchor length think of this is like me getting used State use effect and use memo for example all right so what else do we want here well we want Solana right so I'm going within this Library and we can get more stuff so we can get clock hold on clock right we're getting something from here okay we can do a comma we can do hash get me hash and we can get more things here so we're going to use a bunch of these libraries don't worry about fully understanding what all of them is it's easier to understand all of them within practice okay so system uh instruction colon colon transfer yep cool all right so this looks pretty good this is us importing all the libraries we need awesome so how do we create our smart contract or like I said a program well to define a program we have to use the program macro and again we don't have to use it but this will make our lives a lot easier so everything I write within this macro is going to Define what that program is and maybe if I zoom in you can see it a lot better all right so within here you say mod and then the name of your program so you could call this hello right you can say uh the program right which is not very good name actually you can even say Lottery and that's what we'll call it here so if you do some uh curly brackets like this this entire thing that I'm highlighting that's your program not much right so keep that in mind when you're making a program another thing that you could do is write CP right not clever programmer uh create program and you can click this and Bam right and it's going to do some interesting things but I don't want you to worry about right that right now right so you can literally highlight this it's automatic highlighted I can say lottery I can hit tab change the name of this blah blah change the name of this right so I'm gonna erase this because I want to talk about each thing before I get to it okay so we've made our program right there's nothing in it it's pretty empty uh but let's say you want to import a bunch of other folders in here or files rather right how many files do we have right now guys all right we have one lib.rs think of that as the entry point which your code would read right but we can we can make more files than this to separate things all right let's make a constants file let's write this button right here to make a new file and we can call it constants and don't forget to put dot RS right RS stands for rust so like it's a rust file just like how we dot JS for a Javascript file cool awesome so we have a now we have a constants file but let's say we had like some stuff in here right how do we get stuff from this folder into this folder well we can import it right so to import that folder we can say mod constants right right here and from there we can say use right so remember what I said what it uses use create okay news crate colon colon and we can destructure it by saying constants oops constants colon colon star so what does this mean right based on everything I told you so far I'm basically going into my constants folder and grabbing all that's in here and right now nothing in constants but there will be don't worry all right so use crate if you didn't know is bringing um everything from this file into this entire scope right so that means I can call on whatever constants is here right but if you want to bring everything from constants into this scope all right we're going to write something called use super right star okay what this means is that I take everything from that we import and bring it into our program so that we don't have to go within the folder just like we did here we can just call it as it is all right if I had a variable uh this wouldn't work but if I had a variable const uh name and then I said Lance right this this is not going to run but let's say I wanted to get name right and constants I can just say name here otherwise if I didn't have U super I would have to say constants and say colon colon name something like that okay cool all right so let's erase that because it's going to break our code cool and let's recap something right another important thing about rust is look at this this is a semicolon right in JavaScript we can get away with this right they're pretty lacks with you in JavaScript and Russ this marks the end of the line right after the you see the semicolon your code is like yep that's the line otherwise it's going to think that this whole thing is one line if I didn't have this semicolon here all right so you need to put semicolons if you don't put semicolons your code will Panic so make sure you do that uh we're gonna need it for this use super as well right and use anchor Lang should be like this as well cool awesome so going between our use crate and our program we also need to declare ID right so if I press d if you press d i we can press declare ID so I clicked it and it generated this for us this is uh the address of where our program is right you can think of it as the yeah the address of where it lives and if you see all these ones that's the default essentially right when I go ahead and build this we'll get our new programs public key so don't worry if it says one we can leave it blank for now but now it's starting to look a lot like the starter files right so the next important thing you need to know is how do we make a function in Rust how do we do that right in JavaScript you would just write function right function and then say knit right in Rust kind of similar right all I have to say to get started is say Pub have FN enit right I'll even call this init Master because that's we're gonna have to do in a second and that's how you make a function right so what's the skeleton you need these parentheses and you guys should know if you know anything about programming is this is where you put your arguments okay cool so what's next are we done not necessarily all right what we need to do is press this Dash right here all greater than sign to make an arrow then you say result uh less than sign parentheses greater than sign curly brackets and Bam that's it this right here that I'm highlighting this is a function or an empty function right it's a skeleton of a function all we need to do now right is write the logic in here right so this should look more familiar to you it's not scary rust right now right uh what are some other parts of a function usually there's a return here and you can turn the number five like if this was whatever adding function right but in Rust uh we're going to return okay right this is not exactly return but does give us back something and if you didn't want to give back five if it works you put five but for this specific function we can leave it as is okay you with me so far all right because you're doing great this is it so far for the function what do we want to do with init Master what does it all mean right so if we think back to our app right we're connected here um let's see it's what I'm going to do is temporarily remove this button over here so let's go to our code code code right here let's see if we can make this bigger nice and where is that wallet multi button comes out save boom right oh it might not be even running let's try and make it run yarn that's it oh see the app first and then okay we're good we're back guys so let's refresh this oh I see because it can't be empty that's totally fine we'll just put button here button and I believe there's on click and we had a temporary function here which was connect wallet I believe connect well yep so I'm just going to temporarily put this back connect wallet there you go oh did I change the wrong one I did foreign let's bring this to the other place right here there we go okay so remember what this button does we connect our wallet and this is the next thing we should see initialize the master right because once we initialize the master we should have access to all the things right so the real question I was asking is uh what what is the master right so the master is going to be an object right this is what it'll look like in JavaScript that's going to hold the last Lottery ID right why is that important Lottery ID because if you look back at our app this current lottery is number three at some point it was Zero some point is one some pointers two we need an object to keep track of what Lottery ID it is all right the reason why I'm making a master object is because this guy will do it and if we do it correctly we can have multiple lotteries going at once it doesn't have to be one at a time right so this is perfect for that for the purpose of this specific video we will work like it's one Lottery at a time if you're more advanced see if you can make multiple lotteries come at once there's no frontend support for that but that's my challenge to you guys if this is too easy for you so yeah we want to make a master object essentially and initialize it here right so there's a lot of pieces that we're gonna need cool so before I get into the rest of it um an object that holds the last laundry ID right before I continue writing out the answer another thing about functions is that there's usually context as a parameter right so let's say when we're adding two numbers it would be num1 and num2 right for every function in rust or anchor we need to write CTX which stands for context right we got to give this function context to work with like what is a master that's what it needs to know so we have to pass that in okay another thing about rust is that you need to identify the type so remember my example of like let's say we wanted to get the name what type what data type is name usually can you expect all right it would be string right you gotta let rust know like hey there's going to be a name coming in and he's a string by the way all right kind of like the the security guard so context right it's not going to be a string or a number it's going to be a struct called context all right and it's going to look something like this and you put your variable in here and this where the t is okay cool so our context is usually going to the name of our context is going to usually be the same name as the function it doesn't have to be but it should right so if it's the same name we can call it knit master okay and when you ever you're not really using it uh or doing anything in a function you put an underscore here okay cool and there's a reason why we don't have to initialize it here but don't worry about that so so far all we know is we made a function where we put okay here this is our result our logic goes in here and it needs a context right but if I were to ask you guys a question does init Master exist is this context struct exist yes or no no it doesn't right what did I get right there right nip Master doesn't exist yet right so this would be like undefined or more like this is undefined so how do we figure out or make our code understand what is init master well you want to go outside your program come right here and let's initialize it right so let's talk about accounts so what are accounts basically um with our Solana program we can create something called pdas and essentially store data at these accounts right so have a look if this is a Solana chain right this is this rectangle is our program we can use this program right to generate accounts and each of these accounts will have their own public key right or their address within the public key we can put uh account data right or in other words the master count okay and what is the master account hold it holds a lottery ID okay so later on we're going to do is fetch these accounts into our app right and use them and plug them in to make this work you following so far you can think of this as a database right because it is a database that's decentralized and we can fetch all of the objects right I'll call them objects from the chain all right I'll make more sense once we actually make it all right so to actually create an account in Rust we're going to use a macro we're going to say hashtag square brackets to arrive derive parentheses accounts right so this makes sense right deriving accounts here or creating a PDA and we're saying Pub struct right init Master Okay and then from there you're gonna say less than greater than and write info like this when one apostrophe and that's it right this is called a lifetime variable this you know without making it too complicated we're gonna just make sure that this struct will live on for however it needs to interact right because in JavaScript if I were to make an array let's say let array right how long would this live in memory this would live forever until I'd like deleted it or clear it or the Heap garbage collector from JavaScript destroys it right when I put a lifetime variable you let your code know hey this is going to last for this long he's staying at this hotel for this long right I'm not defining exactly how long it's staying I'm just saying it's going to live as long as it needs to cool so how do we actually make an account all right bore encoding stuff I know but to actually make an account we need another macro within here right and remember every time you use it what you write under it is where this information is going to get put into right so within here making a macro and we're going to write account okay and then we're going to say parentheses enter right and the cool part about anchor is that it initializes an account for you all you need to do as a developer is just write in it boom you just told anchor hey initialize uh init Master struct right well actually no it's gonna go under here so this is a struct this is our context of our code I want to initialize master account so if I say Pub Master here does that make more sense this macro is going to initialize a master account okay so init we'll initialize pair equals payer okay the reason why I'm writing payer is because whenever you store something oops you store something on the salon and chain right you got to pay for it right this isn't free right you have to pay for the space you use kind of like uh rent right if you're gonna stay somewhere you got to pay some rent okay so get used to that concept and don't worry it's not expensive because we're on the devnet so it's essentially free right but it usually costs like point zero zero zero zero zero zero on the debit so don't worry about it but the payer is going to be payer which is us all right the wallet that puts this here okay that's all you need to know and then we have to Define how much space does this actually take I'll let you know it's going to take up four right plus eight okay don't worry about this just yet I'll come back to it next thing that's important though is we need to put seeds all right what are seeds all right so remember before how I said uh when we are generating a new account right it's gonna have its own address right but we can predictably find an address to put this data in right we just have to put something as a seed all right the best way you can visualize this it's not the exact it's not the same thing but the best way to visualize this is there's something called disparate right notice how it says put your custom seat here if I put the string Lance I will put Lance it generates a unique Avatar this is my avatar right here right but if I were to say Lance with two e's notice how it's a completely different Avatar right so depending on what seed you get you'll arrive at a different address or public key okay cool so uh what I want to put here is a string as well so you can put a string what I'll do is I'm going to call a variable and what do I mean when I call a variable let's make use of our constants and let's write pop const Master oops Master seed right colon right because it's expecting the type and string and it's going to reference itself right and it's going to write master and semicolon right cool so Master scene right this lives in constants we bring that Master seed using use crate to bring it here we use super to bring it in this scope right just in case but we don't need that all right our our crates so for the seeds if I write Master here all right you guys should know what I mean this is a string it's a variable that holds this string and usually when you put something in this array it wants it in bytes so if you do a DOT as underscore bytes it will convert it to bytes okay take that string convert it to bytes that's the seat okay Master seed uh I'm gonna have to just put Master should be Master C like this cool yeah make sure it's the same name as this awesome so we have our seeds we have our space and now let's add bump if you don't know what bump is let's say uh when I'm trying to put it in this little account there's already something there so I need to put it somewhere else right it's kind of like saying um oh there's already a lance Avatar uh that exist if I put a 1 here we'll put it there instead but what if that'll exist and we'll put another one here or a 2 right that's what bump is doing it's checking the next available address that it can do all right I'm very simplifying this but that's all you need to know for now and all of that information is related to this master right here and what type can we expect from Master well it's an account right because we want to initialize an account right right and again if you didn't know where a cow comes from it comes from anchor length so all of our Imports are important and how long does this account live for I don't know we're going to put info here comma Master right master is essentially what this account is what account is this holding what's in this account a master account but if I were to run this guys it doesn't exist right how do we make it exist well we have to create it so let's create a master account all right so to make a actual account right we need to Define what a master account is and I kept calling an object because that's what you guys coming from JavaScript are going to relate to so put hashtag account like so and then you're gonna write Pub struct Master like this and you say uh Pub last last ID is u32 okay cool all right that's it we're done we made an object right so what's the equivalent of this um you can kind of say like uh master or class master uh is something like this Constructor it's been a while since I made this right this dot last ID is equal to like nothing or empty right I made what would this make right this would make a object that has a last ID right so this class Master The Struck Master will make an object that has last ID and does this have a value no has no value it so we need to basically initialize it with a value later okay so cool I hope this makes sense because we're going to be doing this over and over like anchor once you recognize the pattern it's pretty repetitive so keep that in mind so now Master exists um don't think there's anything else we need to add but how much space does a u32 take it's going to take in four so that's why for how much space we say hey there's going to be a master account that's coming in uh he he's gonna take up this much space for and this eight is kind of like the filler space this is called the account discriminator so you always see me add eight to all everything okay cool another thing that we're gonna need is we're going to say hashtag uh oops account mute Pub pair oops Pub pair is gonna be the signer and this signer struct is coming from a library as well this is so that we can Define what a pair is so that the pair does actually in fact equal the pair okay then you can add some space here and say Pub System Program is the program itself info system right cool and don't forget to add these commas here because they're kind of important all right so if it looks like this we should have our contacts and again I put an underscore context because we're not really doing anything with it it's going to be blank and we should be good to go so let's do the moment of truth right we can go to build and let's run it so we build uh there might be some errors as you can see all right so usually if you see a bunch of things it might be uh something to do with the the first one so it says program not found in the Master Okay cool so let's figure out what's going on I'm guessing has to do with the semicolon or something I forgot so I'm taking a look around and the first error is expecting a comma line 27. comma oh I see there's no comma right here cool so let's go ahead click this brush thing to clear it out let's hit build okay more stuff now it says something wrong with uh init master okay I have a feeling it's another comma thing come on comma there's one right here build hey okay build successful cool someone press this brush let's build again so you can see the successful build awesome so I forgot a comma right here now it's good all right if you see uh warnings that doesn't mean it's not working it's just a code warning you like hey um you imported a clock but you didn't really use it yet right but that's okay we can live with the warnings because eventually we will use those clock okay so other than that we're good to go so all you have to do if you haven't done so already if you're your first time using Solana playground connect your wallet here I don't know why the brush is really big but click this toggle Solana wallet button once you do it it should say connected right uh if you didn't know this browser already comes with a wallet so you don't have to connect your Phantom but you can if you want to right but if you want to deploy use this right here you probably don't have any Solana either so all you should do is uh go into your terminal and type in Solana airdrop two all right this is the same thing as the Solana faucet it will give you two to deploy all right cool so again what's happening right now well essentially uh we made a smart contract all right we want to deploy it to the blockchain so that we can call it from the blockchain back to our app all right so what step are we in we did this part we wrote some code like this right and now let's deploy it let's exit this dice bear deploy and it usually takes a couple seconds nice okay deployment successful there we go cool so what does this mean now it means our code successfully lives on the blockchain now right so now that's the thing we can test it so the cool part that I like about Solano playground um is that if you click this test tube right here we can test all of the functions that we create so that we can get a better understanding of it now one thing you'll notice to start understanding this is we have some accounts right it recognizes hey it's going to create some master accounts but if I ask you since we just deployed it to the blockchain how many Master accounts do we have I'll give you guys three seconds three two one ding ding ding if you said the answer is zero if that's all you are correct right you can fetch all the accounts that we created with this program and you'll notice that there's an empty array which means there's no Masters how do we create a master account well remember that we initialize it in this context but we have to run that function so we need to do init Master Okay so let's run it but we can't just run it we need to pass in some things right see how it says accounts here all of this is equal to the context this is our context right what we're going to give our function some information right so the accounts that we need to give to our function is a master account and a payer account so let's scroll down where is Master and pair coming from how does it know well if you look at our enit Master context what are the what's there a master a payer and a system program Master payer System Program and if I remember what I told you guys let's start with something easy I told you guys that the payer is us so if you click this click my address that's us 6D if I click this wall here 16. that's my address it's going to be different than yours make sure you click my address the system program is going to be all this ones right because that's going to be default it's going to be set up for you already you typically uh at least when we're on this browser don't have to write anything now for the master you basically have to tell your function hey where are we putting this master account right remember where are we putting this master account right are we gonna put it oops not that one we're gonna put it um here and this rectangle this rectangle this rectangle how does it know well we can predict it uh by using our seeds all right so what is our seeds well if you look in our seeds we need to just say Mass our seeds is the master seed what is Master seed it's just a shrink master so what does that look like click in this input field click generate a public key from seed and make sure it's string it usually is and all you guys have to do is write master generate boom that's it right see the 7rx that's the C that generates from us writing master right so that's the place we're gonna put it so if I press test it should create a master account let's go with past all right that's a good sign so a pass which means we initialized master account how do we know if I do a fetchall boom there it is in this array there is one object with two properties one the public key on where it lives and also the account with blast ID all right how's that also by the way it says the ISD is zero so when we first start the first Lottery should be zero cool so I hope it made sense every time we make these functions if you're confused at all wait till I test it right testing is the key here so this is level one we're only going to increase the levels it's gonna be just like this but we're gonna add another layer to it so if you guys are with me drop a like in the video put a comment below say that I'm helping you out Solano is awesome right also shout out to atcharon he's a developer who made this website that helped me learn Solana so let's keep it moving all right so I think you guys get the idea time for the next function all right so another function that we need to make is we made the master let's create the lottery All right we need to set up the lottery right if we go back to our app what happens let's refresh this real quick what happens statically at the moment we connect our wallet we initialize the master and then we can create the lottery right because if we don't create the lottery what are we even playing right so we got to do that so let's create the lottery how do I create a function well you say Pub FN name of function which is create Lottery cool what else parentheses Arrow result boom and then after the result curly brackets this is your function you guys know who copy is from tick tock that's a function okay so from there let's go ahead and write CTX because we need context right and then what is context what type is it what context is context oops don't write it like that right like this context and what kind of context are we expecting uh we're expecting a create Lottery context and if I were to ask you guys does this exist yet you have to say no no Lance it doesn't exist so what do we do next let's create the lottery right and again um the whole point of this is so let's write what we want to do right we need to create a Lottery account right so what do we want to do this what is the Lottery account before we go any further well Lottery account it's going to hold the current let's ask the question what is a Lottery account well the answer to that is it holds the ID uh the winner the winning winning address right whatever address wins the total prize right and sorry about that let's make this smaller the total prize and it also holds I'm thinking um oh if the price was claimed and who has Authority over the lottery right Authority is basically who controls the lottery who created it all right so that means uh in short there is a lot of things that we care about in this Lottery okay so we need ID the winning address the total prize if the prize was claimed and who has uh authority over the lottery okay you guys got all that cool so uh we can't do anything here just yet because we need to create the context so let's go ahead and do that so we can go ahead and create the context and how did we start last time this is why it's repetitive we have to start with that all right say hashtag square brackets derive accounts Pub struct create Lottery and this is the last time I'm going to be writing it and typing myself I'm going to show you guys how to use the shortcuts okay so create info great Lottery and then put info put these code brackets to identify the scope cool so let's set up another account macro here and before I move on all of the information that comes in here is going to be coming to the lottery because we want to Define what a Lottery account is okay cool oops so how do I initialize an account you're right in it how do I Define who the payer is last time we put payer right but the difference between this the master and the lottery is that there's an authority so who the payer should be Whoever has authority over this and again just like how payer was a variable that we made later Authority is going to be a variable we make later as well so let's go ahead and not forget the commas this time and for space leave this blank for now uh for seeds though put that array what did we do last time we had a variable that holds a string we can do the same thing we don't want to put Master C because that would generate the same PDA we want to put Lottery seed all right and this Lottery seed exists no but that's okay we can make it so let's say Pub cost Lottery seed make it exactly the same thing which is a referenced string and we say uh Lottery okay wonderful wonderful so Master Lottery I think we're good with that cool so lib boom so a lottery seed but we also need to turn this into bites right so let's turn to bites as bites boom cool and we can do comma bump before I do anything else but one thing I want to say is for the creating a lottery we should have more than one seed right because the more seeds we put into this right the more uh unique of a PDA we can generate okay and again we're not making new addresses all these addresses exist already right but we just want to make sure we select uh a predictable one right so right now the only seeds is the lottery seed which just says Lottery we can also put a comma here to add more and we can say um we can do master dot last ID right so what's mastered that last ID let's look at this Mass this is master right this account dot last ID gives us zero right when our Lottery is at one technically the seed will be at one all right so let's do that and again when we create a lottery we need to add one to it so that's why it's whatever the last ID is plus one so technically uh if this is zero this will give us one okay and uh we want this to be formatted the way it can read it so let's say 2 L E bytes awesome cool so now we have some jack seeds in here we have the string and essentially the number right of plus one as our seeds and that's going to help generate the Lottery account so again what type is Lottery well it's an account you can say lifetime his info and what type of account it's a Lottery account but this Lottery account exist the same way Master did before no so let's make it and again to make it same structure account Pub struck Lottery and now let's define the object what do we need for the lottery right just in case you forgot we wrote it all down it needs an ID the winning address the total prize if the prize was claimed and who has authority over the lottery and again it doesn't necessarily have to be in that order so let's write it down Pub ID cool so I'm saying hey every Lottery account will have an ID then your code's like hey uh Lance what's the type of that though well it's gonna be you 32 and if you didn't know u32 means unsigned integer 32 bytes right uh if let's say the way I understand is that if you do u8 that's a small number but if you it's like if it's like 900 you it's not a good number uh type to put you should put 32 because I feel like that's going to be a no okay let's put Authority right who has Authority it should be the person who created it so what we could do is write something called a pub key because the authority is going to be whoever created it in this case it's this address which is a type public key okay with me cool so this the rest of this should make more sense Pub ticket price is next okay so this one I forgot this isn't the total um it's got total prize it's it's the ticket cost or how much does each ticket cost what's the price okay and for this one we can say u64 because I wanted to give us a range of numbers we can use a bigger range than however numbers ID can go up to so 64 bytes okay cool so u64 we also need the last ticket ID right which will be u32 and uh before I move on just so you know there's a difference between a lottery and a ticket duh right so every time there's a lottery we can purchase a ticket right we should also keep track uh how many tickets there are so if the last ticket number was Zero the next one should be one the last one was one it should be two right because what later when we picked the winner we're gonna select a random Lottery ID and figure out what the pub key associated with that idea is cool that was a different language to you just now don't worry about it cool so later on we want to establish who the winner ID is and the type of this is pretty interesting it's called an option right option okay this is unique uh to Rusty like you've never seen this before in JavaScript but make sure it's type option and claimed right I want to want you guys to answer this claimed what does that mean did the winner claim the prize right did the winner claim the prize what kind of type should that be I'll give you three seconds three two one did you guess it it's gonna be a Boolean so to make a Boolean type say Bool awesome Okay cool so we made the Lottery account that's that's it there you go there's the account the context is almost done we just need to put Pub Authority well actually we need the macro first account mute then we can put the macro I mean the authority and say Pub Authority is the signer right so again um this is just the naming of it it's the same thing as what we did with payer but this time it's a tour okay you can put pear if it's too confusing cool and last one we need is System Program all right again you could copy and paste this because again same thing cool so that's a lottery Moment of Truth we hit build cross our fingers okay of course we forgot forgot something uh there's our warning the first arrow is info is never used line 52 create Lottery okay cool so 30. oh how can I forget I said we're gonna come back to space but freaking didn't come back to space all right so basically to determine how much space you're gonna use um each of these things each of these types will take up a unique amount right uh one way to think about it is that u32 will take four right so how many u32s do we have uh we have about three so that's how much space it's gonna take so you say four well we can do the four plus 32 Plus 8 plus oops eight plus we have four plus four plus one plus four plus one all right cool cool yeah u32 is going to be for the 64. this 8 here I'm gonna put at the end 32. plus oh we actually do need eight now I'm thinking about it so we have 4 32 841 41 and then the account discriminator so yeah all of this is how much space the lottery takes um there's something weird though this should be highlighted the same way this is highlighted so that's pretty weird oh there should be a comma here it's the first thing oh and there should be a comma here and there we go so now I could tell this time the error is because of the colors so let's see if we build okay cool right so again we're kind of gonna error because the function's not done so we have our context create Lottery we have our struct or our count lottery we need to use it so again this is different from a knit Master because we didn't do anything here here we can actually we should write stuff so when we're creating a lottery right let's make this smaller when we want to but we want to do with this function is initialize the account right basically give values to this because this should have the last ticket ID and so forth so forth right another thing about it we might be missing one more thing foreign missing anything for your lottery oh we are we also need access to this master account right or the master account that's associated so just like how we initialized it here like this we can bring it in our code right here we can say hashtag count all right oops and say mute because it can be different seeds right so remember how in the master we were able to generate the corresponding Master based on the seed we can do that here as well by saying Master seed bytes all right so this should give us the same master I could say Pub master tell him what type it's gonna expect an account info Master cool I couldn't forget that seeds uh and we can just do bump and again we don't need to initialize here or tell them how much space it needs because we already set it up earlier or it should be done by the time we can create a lottery so we have access to the Lottery account we have access to the master we have access to Authority and the system program so we need to we all of that all what I just said exists when I write CTX okay so how do we use this let's think about so CTX is essentially all of this right when it's kind of like an object so how do I get the lottery right so to get the lottery I'll just type in ctx.accounts right and once you do dot accounts after CTX you have access right keyword access and I put a comma here comma that's good access to Lottery to master Authority and System Program so let's say I wanted the authority all to do is ctex.accounts.authority all right but which one did I want I want the lottery so if I say dot Lottery now it's the same as um getting the lottery object all right so I've accessed all this stuff what I like to do is set it equal to a variable so you can say let Lottery is equal to all that okay so now when I say Lottery dot uh is CL like what's called last ID right you know what I'm talking about now yeah or better yeah Lottery lottery ID I can set this equal to zero I can hard code it I can even set it to three or four or five all right another variable I want to set up is let master and do I have access to the master accounts yes I do that's why I set it up so if I do CTX I can do dot accounts and then I could do not matched start a nap here cool um so what do we need to do well the first thing I like to do is remember when you make a master account oops I want to make a master account it's only keeping track of the last lottery ID right so when we create a lottery we should increment so we can increment that really easily by saying master dot last ID plus equals one this is Javascript or we know this how to do this in JavaScript it's the same thing right increment the last ticket ID and again uh if you're more advanced you know how to do this if you switch the branch on the repo it's from CLI star to main I've included the solution so you can compare it to that as well okay so move on right ahead if this makes sense to you if you're a beginner don't worry stick with me you'll learn cool so we increment the last ticket ID next we want to set the lottery values right so currently lottery.id is empty but what should it be all right should it be zero should be one two well it should be whatever master that last ID is so if you know if you know you can say master that last ID like this okay you're literally pulling it from here so we incremented it it was Zero now it's one and now I'm saying the first Lottery the ID is one so if you were to reflect that here technically the first number would be one two three okay cool next thing you want to do is who is the authority so we say lottery.authority well the lottery that Authority should be us but do we have access to that we do all right so go back to your context check if we do we have it right here so how do we get this think for a second so I want to try this on your own three two one all right if you said to get the authority you say CTX dot account dot Authority you're correct but it's not um a public key or not in the format that you want right now what you want to do is dot key and there you go you got it now so that's the authority okay next thing you want to do is lottery.ticket price all right how much does ticket price cost hmm well this one do we have any information about that no we don't right how much does each ticket cost on this last specific Lottery right we can pass that in as a variable or parameter so we can write a ticket here and let's see do you want to do anything yeah ticket prize and this can be a u 64. all right so this takes in two arguments the context which it always does and ticket price so technically it takes one plus the context okay so then we could take this argument and use it right here ticket price ticket price amazing okay cool battery dot ticket price cool uh one cool thing is that we can add messages all right I imported this library and say created created lottery or create Lottery it's kind of like when you see a message like this think of it like console log in JavaScript I'm basically saying um hey this is the created Lottery which is gonna be Lottery dot ID okay uh the reason I write it like this is because if I say Lottery ID here it's going to go where this curly bracket is so basically say create a lottery is it one okay another message the authority right so how do I Define what the authority is Curly brackets comma Lottery Dot story nice and we can also let them know what the message is and I forgot every message is exclamation point like this the bang and the ticket price colon curly bracket and let's fill in that quarter curly bracket with lottery.ticket how do we get the ticket price ticket price okay it's when I said okay because that's what we need next all right that was a bigger way bigger function than internet Master yeah guys well but this is what we need to do to create a lottery first simplify the context into variables increment the last ticket ID set the values and again optional but we can write little messages here so let's take a look clear that go to build got one is this an error could not compile results found okay let's see what's going on let's make this smaller and let's take a look I wanted to see this again ticket price ticket price oh I brought ticket prize but it should be ticket price okay that was my final prize here but it should be price I think what did I put here ticket price okay let's build ah another important lesson okay so if we go back here one thing I forgot is that in Rust we can't just say equals this if we're going to change it right remember const in JavaScript right we can't change variables that say const and rust it's even more strict because if we want to change a let right get the same and mute all right so let's make sure we add the end mute because this means I'm making this variable mutable and that it can change otherwise it's going to assume that it's going to stay that way let's go build successful all right so let's clear that let's show you again nice again warnings totally fine right now I'll use the clock I'll get to it but there we go um I'll ask you guys this we deployed our smart contract on chain right but when I add new code am I writing that on chain yes or no am I right in here no essentially uh we still have our copy here and we wrote that first function but we just wrote a second function right we want to upgrade this contract all right the cool part about Salon is that you can upgrade it usually when it's on a blockchain you can't delete stuff or uh rewrite stuff but we can by pressing this upgrade button and this will cost you so some soul so make sure you airdrop yourself a lot of soul I think this should be enough for me and once that's done we run the test again and this is the process you create you figure out what you want to do create the function create the context get what you need in that context and you're good to go right so you can make any function this way I encourage you guys to try it make your own projects test this out learn from this right we have the create Lottery function now so again currently if I fetch all we still should have one even though I upgraded it I didn't make a new smart contract I still have the same address and this is still a account made with this from this address right but do we have any lotteries no I have none let's walk through the hypothetical if I create a lottery object right a Lottery account that should be filled up but does this get changed yes or no yes right the last ID gets incremented right right how we did it right here so let's put my theory to the test right we need to put a ticket price cool so let's determine how much each ticket will cost for this Lottery right in an ideal world uh we could just put five it costs five Solano to enter the lottery but um when we're testing this it should be in what we call Lamp ports right so what are lamp ports well you know the native token for Solana is sold right well if I say lamp ports lamp ports is a fraction of Soul right so a bunch of land ports like a lot of lamp ports will create one Soul right so let's say I want to make this Lottery cost one soul right to do that you would write zeros nine zero zero zero zero zero zero zero zero zero zero and you put how much a soul right here so if I put five this will be technically five Solana but for the sake of how much longer I have I only have 5.8 in this wallet put one okay cool now again let's do the easy stuff first we did the arguments right right here what accounts do we put in this is coming from where guys the context all right we need to find the mass well not this one we need to find the Lottery the master the authority and the system program system programs done for us but who has the authority who's paying for this me my address the master do I need to generate a public key from seeds or should I do I have something already I do I already have a master right here so go to the public key double click this Ctrl C or command C and paste that right there right this is the master that we're gonna base off to create the lottery all right so now for the Lottery account does a Lottery account already exist yes or no all right you should say no here y doesn't exist because we generate a lottery count from the seed all right so let's do it from seed so the first thing is Lottery all right and the next is uh whatever the master's last ID is plus one right so you select that right it's gonna be in u8 should be and actually as I think about it let's remove that let's add a u32 here why do I want to add a u32 here is because um it's expecting a u32 anyways all right so let's keep it consistent and what is the master's last ID let's check it's zero but the trick here the gotcha is this plus one so what's zero plus one guys yep thank you it's one good job Sarah all right so now we generate Bulma calculates the public key we got the master right and if we wrote everything right the test should pass let's go all right I'm always a little nervous when I run the test because maybe I wrote something wrong as you saw before but the current lottery passed right so when I fetch this how many accounts should we have boom one right so notice something remember how we defined the winner ID to be option right it's either going to be null or it's going to have an actual winner here right but we need to create a winner function first in order to see that in action right and again this doesn't cost like a million dollars this is equivalent to one Solana we're gonna make that conversion later right because again this is in lamp ports right fractions of soul okay so it should be one Soul who has Authority right this guy has Authority and what does that all that means is um he can pick the winner right because it'd be weird if other users can pick the winner the idea is one and now my question to you guys if I get the master if I fetch this what should this last Knight D be now it's one cool so how many lotteries we have ongoing uh currently one right and it won't be ongoing until we have a winner and they claimed the lottery cool so that's the create Lottery function all right so let's continue on so we just made the create Lottery button but what other functions that we want to make guys all right let's think back to the demo what did we do right we connected our wallet we initialize we can initialize the master we can create a lottery but we also need to enter when we talk about enter I mean let's purchase a ticket and add to the pot right so if every ticket costs one Soul after I press enter which should the pot be now 1001 exactly okay so with that in mind we need to create that functionality all of our functionality is coming from the smart contract right you know it's different from when if we were to make this in just pure next JS we would put all that functionality there it'd be really easy right for us we're just going to say Pub have fun okay we say bye underscore ticket because that's the function name and excuse me let me just move that over by ticket set up the function cool and what else do we need guys we need context so let's say CTX and this is the last time writing about this function so CTX context what is the context it's the buy ticket one okay um I'll let you know right now this buy ticket is going to take in the lottery ID right what Lottery are we buying a ticket for that's why we need this okay cool that's set up we need to set up the context now so let's go scroll down to the bottom and create that context all right so you want to buy a ticket how do we start well we can go and say dot Drive accounts thrive accounts you can say hashtag this is kind of new we it's an actual instruction so we say instruct shown parentheses we want to pass in the lottery ID type u32 okay and then underneath that we say Pub struct by ticket okay what do we put here info and curly brackets we are in business boys so from here we want to create that account right so the first thing I want to get is this so maybe this will make more sense we for when we buy a ticket what context do we need well we should know what the lottery is right if we need to pass in the lottery ID uh we should know the ticket right so that means we have to create an account we should know um the buyer right buyer and this one's always here but we need the pub System Program okay so this is all the context we need we need to get all of the context and the first way to get uh the lottery is to write this account thing again and my question to you guys is do we need to initialize it no we just have to say it's mutable we just need it to be mutable because there could be different lotteries that we're getting uh how do we determine and calculate what Lottery we need well let's pass in the same seeds to get that address so we Dean Lottery seed I believe that has bytes okay comma and what else do we use as a seed guys it's gonna be and Lottery underscore ID dot t o underscore l e bytes parentheses cool so that's it for seeds don't forget this bump here and that's it for lottery All right we just need to put the type Lottery what is it expecting it's an account um what kind of account are his Lottery it's a Lottery account all right so now we have access well we're giving a context Within by ticket okay so now the important part the ticket itself right is there an account that we set up for a ticket like does our code know what a ticket looks like no so what do we have to do we have to initialize it so let's do a count and say parentheses here and say knit to initialize it the payer right we usually put a payer here but we actually can put the buyer all right and again if you this confuses you you can put it as Authority but when you see me use this variable later on it'll make more sense it's just for naming purposes same thing though buyer is going to be signer so we could do that now so we should say a buyer is the signer right whoever signs for it that's the buyer the payer to pay for the space is the buyer space all right I'll tell you right now it's gonna be four Plus four plus thirty two plus eight and again you don't put the eight at the end I just want you to know this is something called the account discriminator cool and now for the seats right this is the fun part seeds is equal to uh it's gonna be a couple things right so we're leveling up before to get the lottery we need two seeds but for the ticket we're actually gonna put three all right so the first one is the ticket C variable which we need to create later as bytes next thing is we should put the lottery key as ref and I want you to keep in mind what seeds do we use for each account right so this takes two this takes three what kind of things does it take in right and then we also need to do and Lottery dot last ticket ID right so very similar to how we got the lottery ID as the current lottery ID as part of the seed we need the last ticket ID right so if I scroll up here just like how our master keeps track of the last uh ID or the last lottery the lottery keeps track of the last ticket ID right so did is it this ticket number zero is this ticket number one it's number two right we help determine that by passing it right here and again it's last ticket ID plus one all right so the first ticket ID is gonna be one all right so after that we can play dot to underscore l e bytes okay and you could put a comma here but not necessary because it's the last one up so make sure you spell that all correctly don't forget to put a comma after the space and comma after this and say bump so we had the mandatory bump next for the ticket all right what kind of type is ticket it's an account you say info and what account is is this gonna hold it's gonna hold D take it one but we don't have that yet so we need to make it don't put comma here comma here and for the system program we're just going to put program oops pretty standard program info system okay cool so there is that that's the buy ticket struct let's make the account now so we can say hashtag account um and then under here we say Pub instruct ticket boom and again this is not the right color we are missing something um water Empire what's this signer oh I forgot this one that needs to be mutable count mute oops okay so that's one thing what else missing something else here signer System Program that's fine ticket bump is good this is good oh comma here hey we're good okay yeah don't forget your commas so take it what is the properties of a ticket right what do we need we need what's the id um and who has authority over this ticket so let's do Pub ID u32 um the authority and last but not least we want to put Pub Lottery ID right again this is kind of unnecessary but when we fetch tickets from the front end it'll be a lot easier because you can say like oh give me all the tickets from lottery number two otherwise we'd have to go to each Lottery and find out okay what are the tickets inside that Lottery right it's easier to be like okay this ticket is with lottery number two lottery number one right it's gonna be you 32. oh so we got this the account we have the the struct the context for buy tickets and now let's just quickly make the variable Pub const uh ticket seed type the referenced string and ticket cool all right so now that should exist and I can't pass build yet because we didn't write any logic for buy ticket right so how does buy ticket work all right so what is buying a ticket it's exactly what it sounds like right we're purchasing a ticket for the lottery right but what should happen is when we buy a ticket we create a ticket account and pay right the lottery with the ticket price right so if the ticket price is one Soul where is that one Soul go to that I spent this ticket on all right it goes to that Lottery that I pass in so when we buy a ticket we create a ticket account and pay the lottery with the ticket price which is our case One Soul got that so how do we do all that well the first thing we're going to need to do is set up the variables so let's say let Lottery is equal to and mute because we need to do this it's going to be a different lottery every time I run this function it's not going to be the same one and we also need to uh assign some variables to it so we say and mute CTX dot accounts dot Lottery right do you guys understand where I'm getting this from I'm getting this from the context because the accounts at by ticket are Lottery account there's a ticket account there's a buyer and a system program I want to say that accounts I have access to all four of those things saving that variable and not that Lotter and let Lottery right so we can say let ticket is equal to and mute CTX that counts and I know I see it the catch and mute Dot ticket right and again you don't have to set up these variables but I want to otherwise you have to write ctx.accounts.lottery.lastid ctx.accounts.ticket blah blah right we want to make the variables so we can shorten it so we can say equals um and ctx.account Dot buyer right oh that accounts sorry amazing so the buyers in this variable ticket lottery were good so now let's check right so um let's transfer transfer soul to Lottery PDA okay so to transfer our soul to the Lottery account right remember that's last part of the pseudocode we want to invoke a function right so right invoke parentheses and to transfer you just say and transfer okay so once you do and transfer right you can put parentheses here I'm just hit oops I'm gonna hit enter so that we can list them out but basically uh you want to write who you want to send money from so where is the Solana coming from it's coming from the lottery the ticket or the buyer the buyer exactly so we have that variable so if we say um and buyer.key all right the buyer at this key comma we want to send it to the ticket or the lottery the lottery right so that we can add to the pot so and Lottery dot to account oops to account underscore info and we say CTX dot accounts right oops not that one sorry hand Lottery dot key this is actually later so yeah basically from two and how much this last part is how much do they send well we know how much each ticket costs and where do we save how much each ticket costs we save it in The Lottery by saying lottery.ticket price which should be uh we signed up to one Solana all right so we got key buyers which is from two how much okay pretty simple so far and after this closing parentheses put a comma right this first one you can see it by the matching one hit enter and you say end array right because this is the information of each one so we can say uh oops we can say buyer.2 oops account underscore info comma oops comma we can say Lottery .2 account underscore info we can say CTX this is what I was doing before accounts.system program program.2 underscore account underscore info cool so all of this is part of the invoke function the only thing you'll need to do after this is after the square bracket put a comma and after this closing parentheses you could put a question mark here semicolon and we should be good to go right because this closing credit bracket is still our function there's some other things we need to write here like Lottery uh Dot last ticket ID right after we buy a ticket we should also increment the last ticket ID right so that we don't have the same ticket with the same ID so how do we increment this variable plus equals one okay uh so we can say the ticket oh yeah we need to we need to set these values right what tick what is the ID of the ticket I just bought well it's going to be equal to Lottery dot last ticket Aggie okay basically uh if the last ticket I do is zero this ticket I just bought is gonna be ticket ID one makes sense uh we also need ticket dot Lottery ID like what Lottery did we buy this ticket at we bought it at Lottery underscore ID it should be the same okay and then we need ticket to Authority right if I'm getting any errors it'd probably be uh spelling so buyer dot C who's the authority should be same as the buyer which makes sense and we can add some nice messages here so we could say that the ticket ID and how can we do like a template literal technically here you can say ticket ID again this variable or whatever value this is will go here and we'll remove the square brackets also message you can say quotes the ticket Authority who has authority over this ticket it should be the now ticket Authority so colon this ticket oh comma ticket dot Authority and then okay there is one more thing that we should add before we completely finish this function and it's just basically some error handling so if you think about it right we create a lottery we buy a ticket we pick a winner right and then we uh claim the prize right but if we're still on lottery number three there's already a winner should we be able to enter and buy another ticket no it's kind of like a scam there's already a winner we shouldn't buy tickets at that Lottery right so we can add that error handling in here right with some sort of if statement okay another cool thing we could do is make another file that has our error messages right it's really cool in Rust so you could say error the RS and that will be where we write all our error messages and once again you don't have to make a error file you can actually just put all of it in the lib but just for organization purposes right we can do something like this so we can say anchor Lang pray lewd error underscore code right so quiz time uh what did we just import here we went into anchor Lang we wanted to Prelude we got error code from Prelude and now we can say error code you'd say Pub right Lottery error and we can say hashtag message uh winner already exists right and then we can say underneath that macro we could say winner already exists this is the type of error that we get and this is the message that will come out of that error okay um it's enum because we can allow multiple errors here okay and since we're here let's write out all the possible errors again uh to make a message you say hashtag message another one that we need to think about is um you like if I want to pick a winner but nobody buy any tickets that shouldn't be possible Right how can we claim winner if nobody added to the pot or if nobody bought a ticket so you can say something like can't choose uh winner when there are no tickets and you can call that type no tickets right so when I'm going back to this code I can call literally winner does not exist already exist or no tickets I can just write this and it'll know which error message to send okay another one is this message um when there's a winner not chosen right so we can say winner has not been chosen period and from there I was out of periods here period period okay and then we call that winner not chosen all right is this making sense so far uh another possible error that we might want to use is message um if there's an invalid winner like what for whatever reason the ticket was invalid right they somehow got a ticket that doesn't make any sense you can say invalid winner and call it invalid okay and I can only think of one more if you guys have any more feel free to add it all right good prize has already been cleaned I can guess what kind of error this is it's basically somebody has claimed the prize right and someone's trying to claim the prize again which shouldn't happen right which should say already closed cool and that's how you make error yeah so that's how you make all the errors and um I think this should be already closed already claimed I like how that sounds better okay so again we made an error file we can import this by saying error star we can say mod error and now right this brings it into the scope as you remember use super brings everything in this scope into the program right so I don't have to go into that folder so let's go back to here and let's do one of our checks so I'll put this at the top here if right there's still if statements here but it's different if you say if Lottery dot winner ID and just in case you don't know I'm trying to do uh the winner already exists there all right so how can we tell if a winner already exists well let's think back to the lottery struct right we have this winner ID and the way to look at it is like option uh basically means the winner I can be the winner ID can be two things it can be like some and there's like something in here or it can be none right we kind of saw this when we got we saw the Lottery account and it's the winner ID is null right so that means it's not some and when I say t here it means a value right so there's an ID here whatever it is okay so let me erase this because we don't need that so what I'm saying is if Lottery dot winner ID dot is sum right that means it's not empty like there's something in here there's a winner right so if winner return error and then you can say Lottery error right why am I saying Lottery error because that's the type right here that's the enum Lottery error is winner already exists all right is that all come together now if there is a winner return the error and what kind of error are we returning that the winner already exists it would print out this message when it already exists pretty cool right so when you're making your own app think about that structure and what you need from that error all right what kind of error do you want to display here okay I think we can buy a ticket now so let's see if we can build I'm guessing there's probably going to be some spelling errors yep literally ticket price anything else lottery ticket prize it's the first thing okay there's a lot a lot to go off payer specified does not exist okay so that's the first thing 158 let's take a look okay so it's something wrong with the payer the payer is the buyer buyer should be the singer should be the signer it's about this wrong signer okay let's see what we get now and let's hit build there's probably some more things look for the next building expected function macro error return error not a function oh okay so there's something with our check so it tells me you should go up here turn error return some turn oh oh it should be exclamation point same way we have message exclamation point that should be the same thing and I think we might need a exclamation point here uh let's see let me just test it first so let's just clear this out go back to here build a lot of errors all right is our that's the first building second building third building okay unused Imports that's fine oh right here no field ticket price on type mute anchor Lang unknown field oh I did it again it should be ticket price not ticket price so line 59 ticket price okay you can see this is like that build taking a while build successful okay let's go so again if your code has errors that's not necessarily a bad thing it's just about understanding why it works which a lot of time I don't understand why it works but luckily we're able to figure it out right so every time I put price a prize it should be price another thing that I realize error should have an exclamation point here cool so build success successful let's run out one more time to make sure build boom okay so build successful that means we're good again warnings are okay cool so what do we do after we finish building we upgrade again upgrade's gonna take a couple seconds but I'll be back when it's done cool all right so deployment successful right if you go to tests we have buy ticket now so let's just review what we have we should have a master initialized we should have one Lottery active right there's no winner there's last ticket ID zero which means how many tickets there are zero there's no winner false which means there's no winner we're like I just said and how many tickets do we have empty all right so let's buy a ticket then all right so how do we buy a ticket um actually we need this one we open this up we need to pass an argument and we gotta pass in all of the accounts so what is the lottery ID right what Lottery are we buying a ticket for that's what this is saying well our ID is one so we should just be able to put one here and we're good to go so that's it for arguments all about for accounts our context right um do we have a lottery that we want to put here do I need to generate a new one from seed no we already have a lottery we just need the public key of that Lottery so there's a have a public key right I fetch it right there the 9C for me that's the lottery public key cool paste that ticket all right let's pause and take it but buyer who's buying this ticket me so then you should say my address system program is good now for the ticket right how do we generate a public key for the ticket the first question I have to myself is do we have a ticket already nope we do not so we need to generate it from seed right so the first thing that we write for Ticket seed uh is just ticket I believe you can double check that in your constants ticket then we need a lottery key dot as ref that should be public key right when it says lottery.key that's just the Lottery's public key which we have right here actually so copy that paste it right mine is 9C yours will be something different here oops and how many C3 we need one more all right do we need the lottery dot last ticket ID so what was the type of last ticket ID let's see let's scroll up elastic ID is u32 so we can add that as u32 and then let's scroll down it's going to be the last ticket ID plus one so we can take a look at that so the last ticket ID is zero what's zero plus one one you hit generate and that should be our public key that we get that's the account public key we hit test hope for the best and we bought a ticket let's go so that means we spent some salon right I did have I've already forgot how much um tickets we bought but there we go awesome so let's see how many tickets we have we have one ticket with the idea of one what Lottery did we buy it for lottery ID number one okay so now if I fetch this what should be the last ticket ID one there we go and let me show you this example by buying another ticket all right so for arguments right what should be the lottery ID one what should be the lottery this who is the buyer still me so what does that mean in real life I'm buying two tickets right for Ticket should it be the same public key it shouldn't right so we need to generate this from seed again um the cool part is you'll see the difference right so to generate a ticket public key from seed you just have to put in the same seeds so we say ticket and then you say Pub Key which is the same but here's where the magic happens on the third one where you expect the u32 last time we put one right because we got the last ticket ID plus one we don't want to put one or else we're gonna get the same uh public key we're gonna get this a y we want something different otherwise that already exists right so we need to figure out the last ticket ID which is one and add one to it right so we add one to it one plus one 21 I mean two right we hit generate and now it's C and I and just to make sure I have 4.7 soul let's hit test let's go I have three Soul right so that means I took my Solana from this wallet and put it into this Lottery right so if I ask you what is the um total pot right now you can't see it from here but the total pot is too sold which means if I pick a winner they're gonna get two sold right we just successfully transferred it to this account there's a concept called escrow right this is essentially an escrow okay but don't worry too much if you don't understand it so we have we have two tickets right we can see that here if I fetch all the tickets there's two you can see what id you can see who bought tickets by The Authority right 60 60 so two I bought two right cool so let's go ahead and make the next function all right so we have a knit Master create Lottery and now what should we do we should pick a winner okay so to get started with that next function uh we can bring this over here scroll up to the top and I'm gonna teach you guys a shortcut I showed you guys earlier but you can say FN and click this right here you can create a function the cool part is the important stuff is highlighted for you so let's say I press backspace I press pick winner and if I press tab I can edit the context in the context you guys should know should be pick winner right so what the hell is pick winner this is kind of like the meat of the function right basically um you want to let's say select oops select a random ticket as a winner right and set the winner ID to that winner okay so uh the cool thing about the shortcut it already sets up our okay it sets up our context and we just have to fill in the blank really because it's pretty repetitive so let's go here and let's create that context for declaring a winner so what I'll do here is type in type in um derive accounts okay we can say #instruction because there's something I do want to put in here we want to put Lottery ID right because we need to know what Lottery are we picking the winner from is it the first one the second one the only one right so we can say space u32 and underneath is where we write the struct so we could say s or uh CS for create struck click this boom and then again it highlights what we need to edit so we can say the struct is pick winner and of course put your info in here Okay cool so we have this truck set up let's set up the account mute account oops like so yep it's going to be mutable hit enter because it's going to be a couple other things because the reason why I want to do this is not this right here it's going to be for the lottery right because like I said we need to get the contacts that we need is the lottery itself so I want to make sure that's mutable because it can be many different lotteries we need to tell them what seeds to get the right public key which will be Lottery seed dot as bytes comma selfreference and Lottery id.2 underscore Le underscore bytes parentheses comma and we don't forget bump and we can do a has one equals Authority okay because um only one account can pick the winner right and the person that can pick the winner is the one who created the lottery otherwise if um let's say there's Mega Millions jackpot right we the if I'm picking the winner right I shouldn't be the one to pick the winner if I didn't make the Mega Millions jackpot all right cool then we can say enter Pub Authority is just the signer who's ever signed all right perfect uh for common here come here and come here and that should be it right that's actually it for picking a winner and I would ask you guys do we have to make any new accounts nope we just want the Lottery account cool so this should be the struck trying to think yeah this is it for the struct the uh difficult part about this function is going to be the logic of pick a winner right because yes the pseudocode is selected we're going to take it as a winner and set the random the winner ID as the winner um the issue here is a random ticket right because in Solana there's no true random solution but there is like a pseudo random solution like pick a pseudo random winner and you don't have to fully understand how to do it but if you want to know how to get a pseudorandom number in Solana this would be the way okay so I think the oh wait hold on sorry about that camera died but we're back so as I was saying I think the best way to show you guys how this pseudo random uh number works is let's build out the whole thing and let me talk about it okay so the first thing you need to write is a variable called like clock and let's get the clock and again this if you're wondering where clock is from we're finally using uh all these Imports over here right the clock the hash uh we used invoker ready uh we use transfer we need the clock and the hash so the first thing we need is the clock to get the clock we say clock clock clock clock clock say clock colon colon um get right here okay and then put this question mark and say semicolon and from there we also want to make a variable that's going to hold our random number so the suit the random number will be called let pseudo random number because again uh Solana is what we call deterministic so uh it will usually know the answer before the transaction goes through and that's why it's hard to get a random number um another way to get a random number is if you have to set up some sort of Oracle but that is a way above my uh knowledge so this is a way to do it so we've set a variable here and let's just put parentheses because Within These parentheses we want to write something and uh bear with me because this is again I'm even still trying to wrap my hand around this but from what I understand we want to make a number right we want to make a big number which is why we say u64 here right and we can generate a big number from bytes so we say from Le underscore bytes okay and again this is a function in itself and to generate a number from bytes right to generate a u64 big number we need to pass something in here so I'm going to hit enter and what we want to pass in is this we will say less than greater than array and it's not on the right it's just square brackets so u8 eight and you say common colon try from parentheses and again I'll break it down after I write it all out and hash okay again so we're using that hash function from the top over there that we imported all right this hash okay and what we want to do is say in hash uh parentheses because that's a function all right we're going to generate a hash from this and clock right dot Unix timestamp timestamp dot t o b e underscore bytes parentheses okay with me so far cool because the next thing after this is going to be dot two bytes right and make sure it's out of this parenthesis right here dot to bytes parentheses dot dot eight parentheses uh Dot unwrap actually I could just write that here dot on red okay and then you put a comma right and after that comma there should be one parenthesis here you can hit enter right there and you can say times clock that slot right and uh in the next line I just organize this information oops slot you can say percent Q32 Max has q64 and you can say in between these two parentheses here as uh wait did I do this right percent to 32 equal Max as 32. okay um let me see so this opening has a closing this one has a closing this one has a closing this one as a closing and this one closes so yeah there should be there's an extra one right here semicolon and yeah cool all right so yeah I know this is a lot if you didn't click off the video congratulations you're a trooper because this uh definitely was a doozy right but to break it down in simplest terms like I mentioned before we want to create a big number right and I represent this big number by saying u64 so I want to make a big number uh to make this big number I'm calling this function called bytes from Le bytes right and what this takes in is bytes so in between this parentheses and this parentheses we need to get bytes right so you can assume that this whole thing here is giving us bytes right here's the thing though um here's the thing though if this gives us bytes what the hell is this thing I'm highlighting well to tell you right with from here we're getting a try from all right don't worry about that yet which is another function that's calling a hash function so again big number we want a big number from bytes and from those bytes we're gonna call the hash and then we're gonna get the clock new next time stamp right so what is the clock Unix timestamp it's basically what time is it right now it could be like uh 12 it could be 19 22 right whatever that is that number and turn that into bytes okay because the hash function this whole thing I'm highlighting right it wants bytes within here so take the clock take the time turn it to bytes and then let me highlight a new thing right here this will return a hash right so it generates a random a hash from the time and what makes this already kind of random is the time right because um the way time works right it'll be a different point in time of day depending on when you run this pick winner right and from there it will generate a hash for you and again uh to get some to make this function work we have to turn that back into bytes okay so that's this whole thing so from lib so we want a big number uh so we have to turn it into bytes First We Take the time turn that into a hash which then we turn into bytes right and then from there you're gonna see an unwrap right because the reason why it's unwrapped here is because this try from can fail but uh it will never fail so you don't have to worry about it but we do just want to put an unwrap here and last but not least we need to multiply the time slot the clock dot slot right so not only are we getting a big number from here right we're also going to multiply that to get that big number so again it's not truly random technically there's a chance um that it won't be random but it's what we call pseudo random okay and then from there uh we're casting it as a 32. as you instead to be u32 there you go as u32 okay so that should give us a random a pseudorandom number okay and if I did this right we want to say let winner ID right it's a variable set this equal to parentheses pseudo random number that variable whatever that random number is and we say modulus Lottery right a lot where are we getting Lottery from right from our context right we set it up all the way down here and pick winner we have the lottery so let's get that context right so I can't just say Lottery just yet it's gonna be undefined but let's define it here let Lottery is equal to and immune to CTX dot accounts dot lottery so we have access to that now so I can say Lottery dot last ticket ID right so basically um this is how many tickets there are this could be 5 this could be 2 this could be one and for example sake how much tickets do we have right now so we have two okay so the way this is shaping up to be is we take the random number we do modulus two and we can't forget we need to do a plus one here right because it could be zero right so basically pick a number a random number between uh how many tickets we have so if it's zero to I mean if it's one to seven pick a number from one to seven that's the winning uh last ticket ID so it could be ticket number one or ticket number two in our case okay so that's how it should all work right so once it selects that it's going to store in this winner ID that's the winning ticket right and then from there we can say the lottery oops Kidder a lot sorry Lottery oh it's weird it's why is this doing this dot winner underscore ID is equal to sum winner underscore ID all right so remember how in the lottery struct we had winner ID is an option it could be either what guys it could be sum with a value inside or none right as you saw is no right here we're making it from null to something and that something is the winner ID that's the simplest way to look at it and then from there let's make a nice message here that the winner ID is the winner underscore ID and this should be a comma so that it'll take whatever this is and write that message here and then semicolon um and yeah that should be it so again this could fail because I might have wrote this wrong it is a lot of code so let me just double check it okay so the random number you eight uh two B bytes two oh I've already seen error that should be two underscore bytes so make sure it does that um hit enter here so it's still gonna work because I didn't put a semicolon just so that it doesn't wrap around that screen and let me see clock slot okay so that looks good pause this video make sure it looks exactly like this because there could be a chance you're missing a comma semicolon spelled something wrong right if there's any errors it'd probably be around here cool now I'm double checking this line sudo it's about pseudo wrong EU all right that's how I spelled it here you you yep okay I'm pretty good with this so we can pick a winner okay and that's it so let's go ahead and build let's see if anything else comes up of course can't infer Strokes let's see at the very top because that's usually where the error begins unresolved import for a client's client account signer okay 93. hmm taking a look at this I should put bloodstruck here I don't know if that'll fix it but we'll see nope can't infer type Hmm this looks good Pub Lottery count lottery Pub Authority singer again forgot signer now we hit build a build successful okay so we got a build successful and now what do we do we hit upgrade so give this a couple minutes and we'll be right back all right so it was successfully deployed again and upgraded and now we have a pick a winner function so let's run it all right so let's let's see just to recap uh we do have one Lottery that's ongoing right because it's not claimed uh there's no winner yet right and we have two tickets right so I bought two tickets so out of these two tickets who's gonna win at the end of the day it's gonna be me right because I bought both of these tickets but which ticket's gonna win one or two I don't know all right we can do that by picking a winner and to pick a winner let's see I don't think we have any arguments I believe right we do need one more thing so I need a lottery ID so I gotta pass that in so where is buy ticket pick winner yep so over here we put comma let's put underscore Lottery ID right the reason we put underscore is because we don't actually use it we just need to pass it in here right because it's going to go into our context so let's go build build successful type upgrade and now we're good right we got to make sure to pass this because we also take it in our struct right here Lottery ID because we need to know which Lottery are you picking the winner for right so it's almost done man I really need to win this ladder because I'm running out of Seoul here cool so again we upgraded it so now when I pick a winner we can pass in a lottery ID as an argument so um what is the lottery ID I already know it's going to be one right but there could be multiple lotteries ongoing but Lottery ID is one the accounts should be pretty simple what Lottery account are we passing in there's only one so put this public key minus 9C yours could be something different and for Authority you put my address because I'm the one who created this Lottery I'm the one that has Authority and let's pick a winner boom pick winner passed so there is a winner here and remember how it says the winner ID is null when we fetch this it should be something different two so what that tells me is that ticket number two is the winner right but notice something Where's My Money Right One must I should win the two Solana that I paid right well I don't have any so we need to make that function which is picking a winner okay so we successfully picked the winner right now for the final function that we need to make uh it should be as you know claim the prize and claim prize is exactly what it sounds like all the money is in this Lottery account and we want to take that money from the Lottery account our third party account and put it into our wallet so that was what the pick winner is going I mean claim prize is going to do so I'm going to go over here and we can say FN and we can hit create and we can say claim price tab uh claim price I'm going to move a little bit faster on this all right and then put comma it's also going to take in Lottery ID and we're not going to use it in this function so we need to put underscore so it's going to inspect a type of u32 u32 it also will need to know what ticket won so we need to pass that in so put underscore ticket ID u32 okay and then from there we can say let Lottery is equal to and mute oh actually we don't want to do this yet because it doesn't make sense yet but it will in a second all right so that kind of gave it away in our context we need access to the lottery we need access to the completed ticket word and we need to basically determine who the winner oh get grab the winner right so let's scroll down all the way to the bottom okay and let's start creating our structs so to get started you guys should know the drill by now we do this macro of derive accounts you say hashtag oops hashtag instruction and you saw how many things are we passing in here we're passing two Lottery ID which is expecting a type of u32 and uh after the 32 put a comma and say ticket underscore ID and say you 32 right this is a lot of code right so that's why we're not focusing too much on the front end we're focusing on the uh web 3 part of this so and again if you ever want to learn how to make the front end uh for my beginners out there drop comment down below saying that you want the full complete tutorial right but this is more so if you want to learn uh web3 with me so let's say the struct is claim price say info put the curly braces and this is our scope okay it looks pretty good so far uh we want to do here is we want to get the lottery right so how do we get this well we should just press Tab and say hashtag account you want it to be mutable because we could get multiple we could be claiming the price of several lotteries right so it could be seeds not just one and what are this what are the seeds that we usually get for lottery right if you get confused you can look above but I'll tell you right now it s lotteryseed that has bites the comma and it also takes in the lottery ID uh dot two l e uh Le underscore okay and of course bump and that is the lottery and what is the type of Lottery lottery is going to be an account so let's write that and what what is going to be the type of account it's going to be Lottery which we set up so we don't need to create it which is why we don't say init here okay cool we also need the ticket so I'm gonna put a comment here and how do we get the ticket all right so to get the ticket we say hashtag account again and we say seeds is equal to right this is different right and say um mute here I'm putting my seeds already I'm formatting like this because there's a lot of seeds we want the ticket seed dot as bytes and what else do we want guys we want Lottery dot key dot as ref and we also uh last seed was the ticket ID I believe ticket ID and to do this we need to do dot two l e so this should give us the PDA of our ticket we get comma we have bump um and uh there should be one Authority for this one so we say it has one equals Authority okay so ticket is good you can say account info comma ticket comma you can say hashtag count mute because it can be a different person a different Authority I mean pop Authority is the signer I almost put singer again signer info and of course the last part was the system program which is going to be the same so program info comma system okay we breathing we live good yeah just give me a nod if you're still here good I have no way of confirming that but I'm glad that you guys nodded so we have the struct for claim price um yep claim prize and let me ask you do I need to make any accounts lottery ticket nope we have those exist cool so that's the struct now I can go back up and actually claim the price okay so let's set up our variables again so the first one is the lottery uh how do we get this we say and and mute CTX dot accounts dot Lottery because this lot the lot no we can claim the prize of different lotteries right we can get the ticket and say and ctx.accounts that ticket you can say let winner is equal to and CTX dot accounts dot Authority and there we go all right so what do we need to do first is we need to uh I'll say validate the winner ID right so to validate we can say match so we can say match Lottery dot winner underscore ID and say curly brackets here and we can say remember how it's a sum we can say sum winner ID and equals Arrow like so and we can say if um when if winner ID does not equal oh well I don't even know it does that hashtag exclamation point equals does not equal ticket dot ID then we should throw an error so we say return error and we say oh don't forget the exclamation point and we say Lottery error colon colon in valid winner so for whatever reason the winning ticket doesn't match uh the ticket that we put in we can say invalid winner okay uh really brackets and then we can say okay so sum can either be something or none right so if it is none all right you can return another error which probably won't happen often so it says Lottery error is uh winner not chosen right this is if you try to claim a prize right but the winner hasn't been picked yet which in our front end you'll never see that happen but in the case you did uh you'd run into this cool and another thing another check that we need to do is uh if the lottery got claimed or that if that is true if so if the prize was already claimed it should also return error which is uh the lottery error that we created already closed all right somebody already claimed it all right so you shouldn't be able to press that button again so this is just a back end check uh back and check back end check cool for now for the actual transfer it's gonna be a little bit different than how we transferred it before so we say transfer um the prize from the Lottery account or Lottery PDA same thing to the winner so how do we do this so uh as I was saying to get started we say let's prize here is equal to Lottery um yeah we have we have Lottery right yep we do Lottery let Lottery and again because we don't put a semicolon this is technically saying Lottery dot ticket price okay so we take the so to get the prize from the lottery PDA to the winner we have to first get the total pot right so again uh we had two souls to get this a thousand Soul we gotta calculate it first so to get that we said that ticket price dot checked multiply right basically it's going to multiply Lottery dot last underscore oops underscore ticket underscore ID dot N2 right and then we just add a DOT on wrap all right so this should calculate what the prize is so um basically to sum it up uh we take the cost of each ticket multiply that by how many tickets there are and then unwrap it so let's say each ticket was worth five Solana if there's if we bought two tickets the total prize money would be ten all right so do that quick calculation and then afterwards um we want to do a star star and again this is double dereferencing but um don't worry too much about that I suggest like you look into Double D referencing but the main thing is it's right star star lottery.2 account right this is so that we can probably access that information that's the right we need to do this first because we can't just write lottery.2 account so lottery.com info dot try borrow mute lamp ports all right lamp ports okay and then we say minus equals prize okay so basically um try to get the lottery info right see how many lamp ports it is and subtract the price from that so let's say the the total pot is tensile right basically take 10 sold from the lottery time all right take the total prize money from lottery.com okay so we successfully took the prize away from the lottery so removing the funds from the lottery PDA and now we can say star star winner dot to account right because we have a winner I believe right winner is the authority right so yeah so whoever is the winning wallet address they should be able to see the claim prize button right so basically if I were to show you visually um I pick a winner you only see this button if you are have the matching ticket if you are the owner of that winning ticket let's say I click pick winner and I I wasn't the winner like my wasn't my ticket I wouldn't see claim prize I would just see enter pick winner and create Lottery again make sense so that's who the winner is it's exactly what it sounds like so winner.2 account info parentheses try borrow right mute Lan ports again question mark and essentially this means plus equals price right so basically uh subtract that prize money to from the lottery and add that prize money to the winner right add that same amount to the winner okay cool and then the last thing we need to do is lottery.cleaned right by default this is false but now that we gave money to the winner we can say that that Lottery is claimed set that to true okay so then we can say MSG exclamation point all right and say quotes uh curly bracket here claimed it's kind of like a template literal lamp ports oops lamp ports from Lottery ID with ticket ID this all right then it's going to have a lot of stuff that first curly bracket is going to be the winner.key what public what key one what address one uh the second curly bracket will be the prize how much they won Lottery dot ID will be which Lottery is the winner from is it lottery number one number two right and what is the winning ticket ID okay semicolon here and uh we did a bunch of errors and I'm just realizing we should do some error checks up here at the top with the pick winner all right so let's do some checks Lottery equals that we can say if Lottery and this is again I went up to pick winner I wanted to do some error handling here as well so lottery.winner underscore ID that is sum all right we want to return error Lottery error right because if there is something already in the winner ID then we know that the winner already exists like that's if I tried to click um pick winner Winner's already a winner so that's that case there's also the case that uh oops we don't need the parentheses if Lottery dot last ticket ID is equal equal to zero we can return another error which is going to be a lottery error that we set up and the specific type is no tickets so basically if I try to pick a winner and nobody entered in my lottery right they shouldn't be able to pick a winner so we should get this error uh we I will say though for the front end we have some checks we wouldn't even see pick a winner if nobody entered okay so those are the checks for that that was just my quick tangent but for claim prize um this looks good to me so Moment of Truth let's see if I wrote singer again let's hit build yes okay use crate error expected 122. 122. invalid winner I missed something here oh I put a comma instead of a semicolon okay that's it build again okay this is good tick toe from front of the scope prize is not found in the scope what it's right here left prize and just take out these comments I don't think it's gonna fix it but let's just take these comments out let price and strange it should be in the scope like it's right here but I'm guessing it's because it's semicolon somewhere oh right here so under after the dot unwrap I can't forget the semicolon and Bam build successful like isn't it crazy how like one semicolon like just ruins your entire code the reason why it said prize is not found in the scope is because I say let prize here and the code line technically doesn't end until this line right here all right so it's saying that this whole thing I'm highlighting is one line if I put a semicolon here it makes all the difference so if I build successful hit upgrade and now I should be able to claim my prize once this is done okay upgrade successful and again I'm still have three Soul here but I haven't claimed my prize yet so let's go ahead and do that so to claim a prize I have to save the lottery ID which I know is one and if you're not sure what Lottery ID fetch all look right here I'll also fetch the ticket uh I believe the winning ticket was number two right winning id2 so tick ID should be number two uh and we can do the lottery which we have right here minus 9C yours might be different cool and then the address of the ticket oops did it disappear yep the address of the ticket which is number two so to be the CN and again if I were put anything different than what I'm doing now it should it would fail my authority is me so if the prize was too sold I should end up with five Soul if this works so hit test test passed five so we did it we transferred the lottery from the prize from the lottery to our account and we are successful that's amazing and another reason I'm really happy is because you guys finish the smart contract so like the video now if you were successful of all your tests passed because you guys know how to make a lottery functional app right so here's what we'll do right The Next Step that we need to do is take um this code and call it within our front end app which is going to be a whole setup and itself so let's work on that all right so now we can finally start working on the app itself and let's just take a look at something before we get too crazy right so this is the app we could do an ALT Tab and we should see this screen right here and I want to draw your attention to a folder called uh utils right and again a lot of this is set up for you all right so let's open up utils and let's take a look there we have a constants.js folder so click this it should look pretty familiar right Master seed is Master Lottery seed is lottery ticket see this ticket right um this is why I said the the testing from the Solano playground if you understand that this part shouldn't be as bad all right what do we do the actual code I don't think you're gonna notice is that the program ID should match the program ID that you have right now so ours is h y at the moment so that's something to keep in mind right for later there's this helper.js which is a bunch of helper functions that we might call on later why not next is this program.js which Imports our seeds and our program ID right from constants and um what it does is it literally gets our program it's going to fetch our program from the chain and we're also going to get a couple things so we're going to get the master address right so if you guys don't know or understand what's going on here let's think about this how did we generate the master that's how we're going to talk about it so let's make this smaller make this smaller right when we initialize the master right how did we generate the master PDA we got it from seed and all we wrote was mastered right when we hit generate we get the 7 RX number right so keep that in mind all right so when I have a function here this is a frontend function that says get master address okay so it's asynchronous right again you might need to know some uh basic on that basic but some JavaScript in react beforehand before this and if you do want to learn more JavaScript we do have a JavaScript cache course 2022 be sure to watch that as well if you want to learn more JavaScript we teach async functions in there as well anyways Shameless plug aside what does this function do well ignore public key but basically this function right here is find program address okay and we want to find a program address with Master seed and use our program ID right so basically this line right here is check or get the master the PDA from these seats right so if I were to again show you the example if I were to say from seed all I said was write Master here put the program ID generate this will give us this PDA that's what this will do as well right return the master address so it's literally fetching the master address okay let's apply the logic to get lottery address Okay so before we look at the code of that how do we get a lottery right how do we get a lottery address right it's right here we got this from seed what seeds do we need to get the lottery address whether it exists or not right we need the lottery seed we need the last uh ID plus one and that's it all right so two things we need u32 we need Lottery and we need uh one we generate that 9C right and again let's check was that 9C it was 9C so it's predictable right so with that in mind we want to get a PDA with these seeds with Lottery and a big number I don't don't get scared by all this but it's gonna be ID right so get us a new address with that ID yeah cool so this is going to be like the one and again this dot two array like is making it a format that the seed likes right that's why it says buffer from and of course put the program ID so the same way that I just did it in this test right here to generate this PDA we're finding if there's anything at that PDA based on the seed right so again ticket address we had three seeds here's your three seeds right here okay cool awesome so and there's a function that gets the total prize right and again we need this function because to get the total price remember how let's say each ticket costs five sold I buy two tickets the total prize is 10 right so the total prize is 10. we need to change that um from Lan ports to Seoul right or the other way around I believe I convert lamp parts per soul and convert it to a string right we want it to be a string so that we can see the total prize and we want to display that total number here a thousand sold or five Soul or tensile however many is the total right now so does that make sense to you guys that's what each function does right the name should give it away and if not I wrote comments for you guys so hopefully it makes sense so get confused think literally what this is mean cool so uh let's set it up right because there's two things that we need to change now right the first thing we need to change is this this should reflect our current program and this idl.json all right this is essentially a Json file that describes our smart contract right so here's what I'll do this is an optional step right but let's say uh I don't want my master initialized because I want to see that it's not initialized it so that I can call it from the front end I don't want to initialize it from here I want to initialize it for my front end right so instead of like closing all the accounts one way you could do this is let's create another smart contract and deploy that onto chain so now there's going to be another smart contract it's just going to have the same content really right which means it's going to have a new address okay so this was the original one we're gonna make a new one okay and again we don't have to write any new code the cool part is if you want to make a new program all right just click new here generate this is our new ID and E well that's what it is for me and I'm just going to hit build successful deploy oh I need six soul I have five uh let's try Solana airdrop two oh success failed okay so it failed I think it's because I need to switch to the devnet so if you haven't been doing this on the devnet make sure you're on devnet so let's try this again it's on the airdrop 2. there you go so now I have seven soul I like using the Genesis go devnet because there's two servers because this one fails less but you can't really airdrop from there uh successfully yet but cool I believe we built already but just in case build and deploy the contract to the chain right visually what I did was it took this contract put it on chain and this is the address so I'm gonna wait for this finish and I'll be right back alrighty so the deployment was a success right now it says upgrade instead of deploy and exist on chain the next thing we need to do is we need that IDL so go to this IDL tab and hit export all right uh for you if this is your first time you should just see IDL no number I have just have three ideas of my downloads but if you have Chrome double click this it'll open it in vs code what you want to do is press Ctrl a and copy this right I press I'll cut it instead so you can see it's like gone and you want to instead of this you want to paste it here all right technically it's going to be the same thing if you follow it exactly right but make sure that you have your latest IDL here I'm going to exit out the uh downloaded one and this is the updated Ideo you can see it's Modified by this m and again for their constants this is all the same but what you want to do is change this to your program ID how do you know which program ID is you can scroll all the way to the top mine's an e now yours might be something different and I'll paste this there and with that uh there that you did the setup right to connect your code but it's not really calling anything but all the setup is there the pieces are there I've got to put the puzzle together now sounds good okay so it's been a while since we looked at our frontend app so uh let's draw our attention to the pod card right because the pot card can have all the answers for us right so as you look there is some temporary Imports here which is probably key and uh the U state from react but what I care about is this static data and the static States and these static functions right what do I mean by Static it means that they're not going to change like the lottery ID will always be three and the pot will always be a thousand so let's just do a little side by side here something like this it's totally fine you know what we can even um do it like this cool awesome right so what makes the static right if I change this to like 50. I hit save notice how it says 50 Soul now right if I refresh connect wallet initialize Master it's still 50 Soul okay uh what I want you to understand is how this all works right so if I hit refresh notice how I don't see the buttons why don't I see the buttons that's because of these states here right so the comments will guide you this first state is checking if we're connected right now so anything you write here is the initial state so what's the initial state of connected true or false false all right but what if it was true say true save we see initialize Master right how did that happen how come I see election as Master when I turn this to True right if you write this code by itself doesn't necessarily do anything the secret is in all of the conditional rendering right so basically this um okay cool let's find Ctrl F connected connected connected connected connected boom okay cool this line right here line 70. this is something called conditional rendering right if connected is true all right let's see what I'm highlighting load this HTML initialize Master if connected is false show me the connect wallet button which is right now uh it should be wallet multi button but it's this static button right here does that make sense so with that logic if I change this back to false I'm gonna show me the button cool so let's change that back to true now you notice this right now it says now it's just the initialize Master button right so connected is true how do we make it so we see the rest of the buttons like enter claim pride and all that that stuff right well that's where this other check comes in if his mastered initialized right this exclamation point is the opposite right so basically uh if false right load all of this right but what if if what if initialize Master is true right so let's just test it out so let's say it is initialize Master right or the comment for you to understand is is the master created for the smart contract all right let's change it to true let's see what happens it's true there we go all right so if his master initialized is true we should see all the buttons right cool now there's another one another state is is there already a winner for the lottery right if there is we should be able to claim the prize right because if if there's a winner we can claim the prize so we can say um true oh cool cool false yeah is there already a winner for the lottery let's check is finished is finished enter okay so if it's not finished right if we're connected oh this is a really good right this is some really good condition running so if we're connected and is because we're not finished we can enter the lottery right basically if this is true that means we can't enter anymore which is why I don't see the enter button right uh another thing that can we can change is if there's a winner can that winner claim the prize let's see if it's true yes we can claim the prize right so the secret to finishing this app is understanding all of the states okay another thing that's interesting is uh if I make this true I receive the buttons the only one who can pick the winner of the lottery is the person who created it so let's say I log in as a different wallet let's say I log in as qazi's wallet he wouldn't see pick a winner if he didn't make the lottery this is what he would see right here we just see enter and he can create his own laundry all right so that's what const is Lottery Authority right did the connected Wallet create the lottery and so that's why I don't see that button yes a lot of conditioning not conditioning a lot of conditionals right and but our goal is to take all of those States all of this data and make it Dynamic okay and the place that we are going to make it Dynamic is is the context so if you go to the context on x.js you'll see all of this code right here so if you're not familiar with context the tldr version is this right usually if I were to make um oh actually a good example is oops a good example of this is we have a connected variable in plot card correct or it lives right here but let's say I created that connected variable in index right how do we check if if I want to check the connected here right it's going to say connected is undefined if I only Define it in index but what you could do is pass it down as a prop right this is a react thing you can pass down connect it as a prop to pot card and then it knows what connected is right the issue is when you have a lot of components like children and let's say I need I need connected to go here I have to pass down as a prop from index to pot card pass it down as a prop from pot card to this one from that one to this one from that one to this one right and eventually if it's a long set of components that could lead to problems down the road right it's called prop Drilling and we want to prevent that and it's just for organization purposes as well we can create something called a context so let me just make it here let's move Lan ports over a context right and that context can hold all of our variables so we can make connected here we can put uh is Master initialized in here right and what we can do is take things from that little context or that store and bring it to where we need it so I don't have to bring this to index and then pass it down or we can make it simple and say like hey I need connected in the pot card and I need is Master unit in the table right so we can call on our context that's the visual way I like to see it right so here all of this code that you're seeing right we're creating the context and then we have to provide our app with that contact so this is the app provider right so what does that mean the same way right this circle right here is our wallet connection right we need to make our context there as well so I guess the better visual would be something like this let's make this blue and be something like this another Circle right like so right and inside we have connected right and I want to take that connected variable and put it into pot card okay so we gotta wrap our app with this app provider now you with me so let's go ahead and do that so what does that need to go I'd say it needs to go into the index so let's go an index and notice we need to put in that app provider right so uh if this is our app we should wrap it so the first thing we need to do though is import it so we can say import um app provider you can see it here from the contacts and provide right here you can say app provider take our app and paste it here and there we go so now we can use or we basically just drew the blue circle around our app so now we can take anything we create in here and bring it to wherever we want so anything that we create here functions variables put that in value and that's essentially how we can bring it out basically you're loading up your store and once we get to the pop card I'll show you how to bring it from that to here we're good cool so essentially this is how we create our contacts we have to make a function called app provider and then here we're going to return that provider with everything it needs and we're going to use our custom hook here which is going to use our context so that we can call it later so that's my explanation I hope that makes sense and it'll make more sense as we add more things to this so let's get to it okay so to start off we won't need to see our app for a while so let's go ahead and make this a lot bigger cool um usually what I like to do is let's import everything we need when I first built this you don't necessarily know what you'll need until you're building and you're like oh I need this import but for the sake of the tutorial I want to tell you everything you need so that we don't have to import it later so we'll say import BN BN stands for big number you can get this from at quotes at oh I saw at project serum anchor okay we also want to import system program from Solano web3js not anchor program and another thing is lamp ports per Soul this will help with the conversion per Seoul okay from at Solana slash web3.js okay so now we import uh use anchor wallet from Solano wallet adapter react and we also want to get used connection from there as well okay we also need to import something called base 58 or bs58 I believe this is from Inc no it's not Bass BS 58 from I think it's actually from BS 58. cool okay uh remember all the seeds that we made and the functions right from our utils we want to import all those functions too so we want to get lottery address right we want to get the master address this is the functions that I explained to you before in our program which is in utils uh get the program the get ticket address oops uh there's also get total prize you can say from utils slash program okie dokie and then from there let's say import confirm TX mock wallet this again is also coming from the helper mock wallet from util slash helper and another thing I like to import is toast so we can get nice notifications when something works or not it's good to have that feedback you saw this from the demo toast okay this looks pretty good it's just because I have a habit of semicolons right now let's do that core so all the Imports are done um let's see um the first thing I want to start off is let's make one of our static variables to the real thing right so it was in pot card right so the first thing I want to tackle is this is wallet connected and it says true right so how can we do this well to make this dynamic we need to set up what connect it is in the context right so what I'll do first is over here right above the return let's uh get our provider right so to do that we can say cons equal to use connection or not use connection yeah use connection all right so use connection and this is one of our hooks from Solana wallet adapter right connection again will hold our connection if it's true or not right but from there we want to say const wallet is equal to use anchor wallet all right another thing is const program is equal to use memo right which is a react tuck did I import that yeah I need to to get that use memo so make sure you have that hook as well so that you can use this use memo what else do we need use memo so for use member we need to check if there's a connection we can return get program and get program is our function from our helper right right here which is going to fetch the program it's going to return the program so return our program right but we do need to pass in things to our Pro that function right we need to pass in our connection our wallet and if for whatever reason uh the wallet isn't there we do this question mark question mark we'll use the mock wallet right but if it should be there because you reset it up with this okay cool we got a program and uh comma run it if there is a connection and if there's a wallet try again okay run this cool so we have any time I say program uh it's going to hold all the information about our program which I'll show you in just a second but the main thing that we wanted was this wallet here right so what I'll do is in our value we can say uh connected right this is a variable and this variable is going to hold wallet if there's a wallet get the public key if there's a polo key it's either going to be true or false right so essentially connected will be either true or false depending on if we're connected right so that's when it makes sense so if this is true we can go into pop card and we can comment this out for now and at the top of our pod card let's take what we need from our context so to first thing we need to do actually is go above this temporary Imports comment you can say import use app context all right this is our little context in here so we can say it's called const object and we can say get me connected from there okay and this is coming from our use app context right so comment here and we'll console log connected connection status Okay cool so let's see if we can see that real quick app context oh did I already do this oh I did up here already so we can remove the import so you don't need to write that guys sorry I already gave it to you up here I'm too nice cool so we uh open up our app let's see false connection status right this should be true at some point right which is why we can set it to that cool and since we don't we're gonna slowly remove this we can put back our wallet multi button wallet multibutton uh this is selfclosing and I believe there's another place where this goes while the multibutton and right here Wallace multibut cool so let's select the wallet Phantom and there look at that guys it already works all right so I refreshed it right so now it says first it was false right but once I connected my wallet if you remember our context this becomes true and this should become true so now we're there right it's automatically going to connect and once it recognizes that there is a valid Phantom one connected the the flag will set all these buttons right and again at the moment these don't work but our goal is to make it Dynamic just like that all right so on to the next thing I'm gonna go back to our code and let's start setting up a use effect and if you didn't know use effect is a react hook that's basically going to do something when we load our app okay that is the simplest thing I can give you right now if you don't know what use effect is right but what we want to do is set that up so in our app provider I'm going to go over here and say use effect like this parentheses and this is how we can start using use effect takes in Anonymous function it's very similar to use memo right but what I want to do with this use effect is run a function called update State all right and again if you were to run this right here right now it would say update state is not a function because it doesn't exist yet okay but uh after this Anonymous function put comma and then uh kind of right here this is what we call dependency module and if you put program in here basically when we first load the app Run update state or when the program changes or this gets updated run this again okay so that's set up for later let's go ahead and Define what the hell what the hell update state is so let's start writing it that function const update state is equal to a sink it's going to be asynchronous and let's figure out what we want to do the first thing that we want to do is that if there is no program this shouldn't run so let's just put return this is a check okay but what we want to do is a try catch all right this is usually what you do when something's asynchronous you want to do a try catch um uh maybe it's fine we could just say error for now and then we can say console.log whatever Dot cool okay as I was saying I want to do a try catch and that first thing you want to check is if there's a master right so for whatever reason there is no master address that's what this is saying then we need to get the master address right so um how do we get the master address think back to our folder here in our program how did we get it right we need to call this function right we're getting it from its seed so we're going to call this function and we actually imported right here we're going to call this function um but then the next question is how do we save the master address because after we save after we get it how do we save it all right so that's where another hook called you state is going to come from and if you just remember the pot card that's where of this is what a new state is right it's basically saving the state that this variable is in is true is it false is an array is there stuff in that array all right you can do that by state so what we want to do is we're going to end up with a bunch of State variables in this app provider right one of the first things we can write is const Master address Master address set master address okay is equal to use state okay cool so there we go so now if there is no master address which that's true there's no master address right now we need to get the master address so how do we do that we can say const uh master address or you can call this variable the same name it's fine you can say await get mastered if it's a function right otherwise if I didn't make that function in my utils I would have to write out that function here this is so we can just organize it a little bit better cool so then how do we save the master address we can say set master address is Master address okay cool so now we have it right so that means this if block wouldn't run right so um another thing we can do is say cons master is equal to await program I remember I said when I say program gives you all the information we can get the actual object right so yes we got the master address we need to do now is fetch the object right so when you saw me do a fetch all oh yeah there's no Mastery but before there was something here right there was the master account you can fetch an individual account by just writing it right here so this is how you got the singular account you can say program dot account dot master fetch oops my master dot fetch and what we want to put inside here is the master address the public key that we get from here after we fetched it and or if it does if for whatever reason it's not there we can say await that Master address again and get it all right so that's what this question mark question mark is so if it's there this will run if whatever reason it's not there we can get it right here does that make sense so far um another thing that we should do is set initialized right so we need another state all right our states help us keep track so let's say const uh initialized and that shouldn't be Capital it should be lowercase initialized you can say set initialized and set that equal to use State and the default state of initialize is going to be false and check pocket yeah so that's essentially the same as this is the master initialized so if it's initialized we're good it's not false cool all right so uh if we there is a mat if we're able to fetch a master right we can set initialize to true awesome yep and this is just update state just going to run that it's going to do these checks it's console log it console log Master address because there shouldn't be in a master address okay say refresh select wallet Phantom oh yeah account does not exist so there is no master but because there's no master we shouldn't see these three buttons we should see initialized Master first all right so what we need to do is we need to pass something in this value here so to keep track of that state right so what was it called we call the is master initialized I mean yeah let's just skip that same naming we could say is master uh initialized and uh give it a new name Click put initialize here so whatever the value of this initialized is is going to be the same as is Master initialize basically um I'm giving it a nickname right if your nickname is Robert if your name is Robert here's Robert I'm gonna call you Bob that's basically what it says and the reason you see Scooby is because we need a comma here so this is the nickname of initialized right so let's bring it save it let's bring it here oh yeah we can erase this now because yeah we do have a wallet connected and we have this guy now so we can erase this in our context so let's get is Master initialized comma so let's hit save and let's see if it works select wallet connect hey all right that's true right there is no master account and there's proof in our backend right here no master account so now when I click initialize Master right we need to be able to create the master right so uh how did we do it when our cell on a playground right we fetched oh we fetched it we tested it by running it here we want to now run it in our front end code all right so that's exciting Okay so now how do we call it in our front end I'm glad you asked what you should do is let's go back to our context let's scroll to where the end of update state is right so underneath update State uh we can make another function called const init IAL right and here we're going to make a comment of um call Solana program instructions here so anytime we're calling something from our smart contract on the blockchain this is what we're going to call it from so it's going to be called Enid master equal to async and if you don't know what I'm saying basically over here we want to call our smart contract writes this one we want to call our smart contract from our front end so basically we're going to make a function in our context that talks to our smart contract that runs the function that will create a master okay so me just writing this function right now this this is not me calling it just yet and I'll show you what's calling the Solana instruction okay so first thing you want to do is a try catch catch right here error and we can say console.log error Dot message okay cool so yeah what do we want to try here well we want to say cons TX hash all right to transaction hash because every time you uh call something from the salonist program that counts as a transaction right and this TX hash is the variable that holds all the information so how do we call that Salon instruction you need to say wait program right because program is going to hold all the information it holds the accounts where we did I got accounts but it also holds all of the instructions and it's going to hold it in dot methods right so dot methods and then you want to say dot unit Master the name of the method right if you remember we called it init under a knit Master right here so get the same the name of the function if I want to call create Lottery we say create Lottery right this is init master and again it doesn't matter if I press enter here it's the same thing right then you want to get the dot accounts right so what am I doing by when I say dot accounts this is the context guys you understand all right so every here is where we put all the context so what's the context of this I don't know so all the testing practices coming in so the accounts that we need is a master and the payer right how do we get the master we got it from the seed right all right so what we can do here is say master and then underneath we can say payer right because I believe that's what we called it right pay oops payer all right so that's that's good payer and the system program all right so don't mind the squiglies we'll fix it in a second so if you want to tackle oops if we want to tackle the master here we have to say semicolon and then put semicolon and then put the publicly we're going to put a public key here right but we can't just write public key we want to write Master address wow why are we writing Master address here well if you remember where Master address comes from all right if there's no master address we're gonna get the master address right and how did we get the master address we're gonna put in the seeds right that's why I asked you to understand what this program.js does all right we're gonna put the master the the string and we'll get an address right that's the same as me doing this boom ja right cool so because we set up that program.js it's going to make our lives easier here so all you have to write is Master address here and we're good because the value of this is going to be the public key of the address that we generated from seed and now for the pair and now for the pair it's going to be the wallet Dot Public key another persistent program it's going to be system program dot program ID that's how you get the program ID we need I'm not sure why this is freaking out if I miss something oh I think I know uh sorry accounts should have an up it should be all in an object so put that all in here there you go no more squigglies we're good to go so yeah I'm giving our function Our Salon instruction the context which means Master pair System Program Master address generates it from seed I put in my authority the program ID is already here cool uh the only thing you need to do is make sure you type in RPC because we need that and then we can say oh wait confirm TX right because I want to confirm that my transaction went through right that's what uh is that here I think it's in a helper function yes all right because we want to validate that our transaction went through okay and by saying await confirm TX pass in the transaction hash and then we can say passing the connection cool and after that we can just update the state I remember we wanna we made a function called update state so it's going to initialize the master which will then update the state which will then do this check which will then set the master right and I'm trying to think if there's anything else I need in here um master master oh okay yeah we don't need to worry about this just yet but it should make this true right set initialize to true because the reason why it said uh account not found is because we got to this point and then it failed right you couldn't get a master address doesn't exist so it went to the catch and that's why we saw account fail but since it doesn't fail it's actually going to set this to true so let's see if that works let's go back to our app Moment of Truth select wallet Phantom inspect element console right count does not exist let's click initialize master oh okay set is Master initialized oh duh all right so the reason why it has failed is because yes we created the function but notice how it's kind of grayed out we need to pass it and not through our contacts and then plug it into that button I can't forget that step let's put a comma here let's say init master okay so now this shouldn't be grayed out pot card where is our contacts we say init master right and there's a function this is the static function right here unit Master we can get rid of that now right and we don't have to plug it to the button itself because it has the same name so right here on click in it master so now we should be good to go let's select wallet and now it's in the master oh okay all right I have to cross my fingers but if you see this approved transaction this is a very good sign and cool we can actually see how much soul that we use we can hit approve hey look how it automatically changed we made it Dynamic right and I forgot to put the toast but usually it'll be another notification here that says uh it was successful all right so now there's a master and the cool part is we can check it on this end too we can do a fetch all boom there it is all right last ID bam cool so now uh there's a couple things now I want to check all right we should see if there is a uh the lottery ID well actually now we can't see the lottery ID so let's work on creating a lottery next all right so you want to figure out how to make a lottery let's go back to our contacts right and let's set it up right so the side up we just have to make that function again so underneath the net Master let's go right create Lottery so we say const create Lottery all right is equal to an asynchronous function and the same way we did this it's going to be very similar right so um what else did I do here oh yeah we could say toast dot success so next time we'll see the notification uh master or initialize master initialized master cool and just in case it failed you say toast dot error you say error Dot message perfect Okay cool so that we just finished up the init Master but to create the lottery uh what did we do first we did a try catch error and we can console the log the error.message or we can also do a toaster error and put the error Dot message because it's going to disappear I don't want to disappear cool so for the try catch what are we doing well we want to set up the lottery address right so you want to say const Lottery address oops address foreign get lottery address but now the key is this we need to pass in the lottery ID right and again that's because this function is essentially doing this part right it's going to create Lottery it's going to this and we're going to generate from seed which is Lottery right now I'll caps but Lottery which is the oops and the last lottery ID plus one which would be one and we generate should be 4q right I don't think it actually does the plus one on the front end though let me check the control B and let's quickly go to our program and see how it works Okay cool so it takes in an ID right so we need that means we need to plus one before we pass it in so let's go back to contacts so basically we want to say Lottery ID plus one so how do we get the lottery ID the first thing I would say is Let's Make a state for it so let's go up the top and again like I said we're gonna end up with a bunch of States here guys so let's say const Lottery lost 3 lottery ID set Lottery ID set it equal to use State and we can uh we can leave a blank yeah we can leave a blank because we're gonna set it anyways cool so when do we get our first Lottery ID well if you remember why we set up the master we get it from master dot last ID right so do we have access to master right so we're checking if we don't have master we're getting it if we don't we're saving it or we can even erase this uh so then we get the master the reason why we stated it in this variable is because now we can say set Lottery ID to master and then how do we get the last ID from this you can say dot uh last let me see last ID so literally last ID so now after after this runs when I say Lottery ID this should hold the value of zero currently right so we'll always update so basically whatever the lottery ID is plus one right because this function is only going to run if there is a master so there goes that check so I think you're with me now so after we get the lottery address this would give us a public key okay that's the type it's not going to give us this Lottery just isn't going to hold a number it's going to hold the PDA okay so now that it's holding the PDA we can take that information and say cons TX hash because we want to confirm this later VX hash cool two await program dot methods and what method do we want to call guys we want to call oops dot create Lottery okay and we want to say new uh BN right cool why do you want to say Nubian because when we create a lottery we need to define the ticket price okay uh remember when we put the ticket price here we said we put nine zeros one two three four five six uh uh 6 79 and then we put one here this will cost one Soul right the price isn't hard coded on the contract we can actually determine the price right here right so if I put one here and say dot and that multiply uh new BN uh lamb ports per Soul this is the same thing this would generate the same number as this all right zero zero zero zero zero zero zero zero zero that should be nine zeros cool so this is one Soul this will give me one soul and you know what just like the demo let's up the ante let's give it five all right so how much does uh when I create a lottery by default it'll be five right if you want to make this Dynamic uh you wanna you can put an input field somewhere here set the state and when you create a lottery that's how much that Lottery price would cost all right but for now to keep things simpler uh we're gonna put five soul okay cool so after we create uh that argument let's pass in the context and what context does this function take in I'll tell you it takes in a Lottery account oops it takes in a master account takes in a Authority and takes in a system program of course cool so don't worry we're going to Define all this so lottery address we actually get it right here all right this is gonna generate it from seed and we're going to put in a variable of letter ID plus one and we're gonna say Larry dress cool so what is the master we should already have uh the master address it's in the state right so that's nice and easy The Authority is also easy we can say wallet right our wallet and get the public key and then persistent program security standard you say System Program dot program ID and then you can say dot RPC right here oops RPC and we want to confirm the transaction so we say confirm DX TX hash right and connection right so if you're coming from uh the todo app Airbnb or the blog app this is like the proper way to do everything right so and again there's more than one away I'm not saying there's a right or wrong way it's nice to confirm the transaction after it's done we then want to update the state and this time I want to see a nice message so we'll say toast that's success and we'll say Lottery create okay cool awesome so let's take this create Lottery it's grayed out and put it right here oh don't know oh I actually made the Whiteboard sorry about that cool so let's take it and put it right here you can say create Lottery and if we do that we need to bring it into pot card so we have the static create Lottery let's go ahead and erase that let's erase the static connect wallet all right this is basically our todo list right here um yep over here after a net Master you can say create Lottery and we don't need to plug it into the button because it has the same name I made a nice and simple Okay cool so let's go back to our app select the wallet and we want to create the lottery hey okay so again this is the first good sign that we can it's going to ask us to sign and approve and let's hit approve we wait a lottery created right so we made a lottery uh we can double check this on our back end by fetching and there we go we have the uh Lottery ID we don't know the winner we have the last ticket ID and we have the authority right so who has Authority 8T which is the one who created this Lottery right so a couple things here now this this is technically incorrect right lottery number three it should be zero right same thing with this this should be uh zero Soul because there's nothing in the pot so why don't we work on those two things okay so like I said we want to change these static variables into the actual variables other words make it Dynamic it's actually pretty simple right so if we go back to our code in the pop card this is the stack data we want to change all right right now it's three pots 50 right if we go to our context let's actually make those dates and the cool part is the first part's done we already got a lot already I just need to make const uh Lottery pot postpart and say set Lottery pot alright so we'll just set this temporarily State boom and yeah we cleaned that blank so let's start with Lottery ID the cool part is we already have that set up we're getting it from the master I'm gonna put all of our instructions at the bottom but for the lottery ID we'll say Lottery ID and comma and once we do that we can hit save and we can go to pot card let's bring that in Lottery ID and now notice how there's two Lottery IDs that can happen we can erase this now save and take a look guys lottery number one and is that accurate right because ID is one we got lottery number one so when I make a new Lottery this will automatically change when I update the state right so that's why I made an update State function so it just literally updates our front end uh with the correct State now let's work on the pot so yeah this is our static one go back to our context and uh you know what we can go to the top let's put it above unit master and let's make a get pot function right so that next should be pretty simple we can say const get pot is equal to async and we can say constant pot is equal to we have a function that doesn't get total prize I gave this to you and if you're curious on how it works um feel free to check it out in program all right good bye cool so get total prize we just gotta pass in the lottery all right what is the lottery okay so we that means it's a state that we have to set all right because we need the essentially the address of this so let's set up that state uh over here const foreign set Lottery is equal to use state and we can set this to empty I believe yep you can set it empty and another thing that we're going to need to do is first set what that lettering is because right now it's nothing so when we pass it into get pot it wouldn't work we gotta go to update State boys and girls and we need to go underneath set Lottery ID right we need to get that lottery address so how do we get the lottery address we can say cons lottery address is equal to a weight get lottery address and say we can get the lottery address by passing in the master that last ID there you go and we don't need to plus one here because we're not making a new one right we're just fetching the current one based on the last ID so from there we can say uh actually no this is getting a different state so we need two states actually so we need to say cons lottery address that's going to help us later set Lottery address is equal to use state cool awesome all right so yeah this first one uh we didn't really need quite yet but since I'm already here we want to set lottery address to that lottery address so the same thing with the master we can call this one instead because that's going to be the current lottery right so it's a lottery just and now for the real thing to get the lottery pot you can say cons Lottery goes await program dot account dot Lottery right because we're going to fetch a specific lottery so if we're going to fetch One account we want to fetch it by the lottery address so now that makes sense we want to get this first and then do this right so let me show you what I mean basically what we did with these two lines of code or this line of code specifically line 57 for me is we go to your app go to here um let's copy that public key and let's just uh do a little bit of this boom so notice how I'm not fetching anything I paste in that publicly this is lottery address right here this right here and I'm taking that address I'm pasting it here and fetching it and then it gives me a singular object right so again in our code we get the public key we fetch an account with that address and store that object here console Lottery and then to save it we say set Lottery his daughter Okay cool so now when we do get pot I mean get total prize we just have to say you should get a total prize Lottery and then set Lottery put and set it to the pot right so this is why we have so many states so I gotta keep track of all this not any not an easy build but if you guys made it this far I'm really proud of you so it gets but comma and why not get quite calm on my bed you can say uh Lottery pot yeah Lottery pot that's all we need and what did I say before I said I wanted to put all the functions there and all the data here cool so now we got Lottery pot in store so we can go here and say Lottery pot erase the static data all right so we can cross that off our todo list we only have this left and all these functions we can save and now what is our pot should be zero yeah should be zero Soul or nothing oh yeah that makes sense there's no there's nothing in there but if you did want to see a number right if it's zero Soul we can set our initial state to that so uh let's go to context all right there's literally no Solana in there so that's why it's literally nothing so let's do Lottery pot here zero I might change this actually all right now we're good zero soul Lottery pot oh I see why it's still saying zero because we didn't we didn't call get buttery pot and we have to call the function and we want to call the function we need to make another use effect that's what I'm thinking so let's make another one so this use effect right here this one is going to get pot all right so we're gonna get the pot and if it does work it'll set the state so now if I hit save here last ticket ID Lottery okay so it's not sure what Lottery is all right let's troubleshoot this so to troubleshoot this oh wait maybe you should have a check here if there's no Lottery return oops there you go yeah that's because uh we need to wait for it to fetch it and then there'll be a lottery otherwise it's gonna run that command before it's even there so that's why we need to check this first so it's going to keep running this code but once there is a lottery get the pot so now it's zero soul and that makes more sense it should be zero we don't have to initialize the state with zero and yeah there you go reset the lottery ID and the lottery pot all right so what's next guys well let's take a look if I go to my app we need to be able to enter and buy a ticket and our tickets are pretty expensive it's five Salon all right so in order to buy a ticket we have the button set up we just need the function so we can scroll all the way down to here and let's make a function uh buy ticket so we say const by ticket I can go a little bit faster now because you guys should start seeing the pattern but it's going to be a sync right what do we put here try catch all right error I'm not even gonna do the console log because we can just do the toast that error and say air Dot message and for the try you guys know we're buying TX hash equals a weight program dot methods okay and then what method do you want to call it's going to be buy ticket and then it's going to be a lottery ID right we have this state right and it should be uh one because that's what we're on and we could do another dot accounts this is our context expects an object and our context is what Lottery ticket Oops why can't I do ticket and not ticket seed sorry ticket and the buyer I believe right we call the buyer buyer and we need System Program all right these are the all the accounts we need all right just to prove it to you when I buy a ticket we have lottery ticket buyer System Program lottery ticket buyer System Program right okay so again we should have all of these we say lottery address because we have the state now which is so nice I don't have to say const uh lottery address and then fetch it here we already saved the inner state so we can reuse it so now the key part is ticket uh we don't have this saved but we can get it by saying oh wait get oops wait get ticket address right I set up a function in our utils and uh it's gonna take in two things I believe it's gonna be our lottery address which we have and the lottery or this is our object dot last ticket ID right plus one all right so this ticket ID will be id1 cool uh now we put a comma here after that function and we say the buyer is the same as us which is wallet our wallet Dot Public okay and the system program is capital System Program dot program ID I'm sorry if this is boring because it's the same thing over and over but this is really cool because once you understand how to do this pattern you can learn to make any app you want you can make Twitter all right we made Facebook together you can make a better version of that now right yeah yeah so then from there we can do dot RPC and we can say await confirm TX which is our helper function TX hash and we pass in our connection cool and we say toast.success and we say bot a ticket let's pick a capital for emphasis okay uh yeah we're good so this is our function by ticket let's go to the bottom here and say by ticket cool we bought the ticket we go to pop card we gotta bring them by ticket and you see this quickly because it already exists there's our static function you can erase that now we only got two static functions left right we don't need to put it in the button because it should already be there so back to our code we have one Lottery it's one all right let's hit refresh actually boom one uh we can't pick a winner yet we can't create a lottery right this doesn't mean anything but if I hit enter good sign and look at that it's literally gonna take five salon for me it tells me how much it's gonna take plus tax of course it's kind of like tax Network fee but um let's look yeah something went wrong there's our toast but let's look into our Phantom real quick I have 18 Souls so after this I should only have 13 so so let's see if it actually takes my money and that five Soul should be updated in our pot right because we're gonna update the states right so what we need to do is not forget um after we confirm the transaction we can say update state all right don't forget to call that we're going to call update state every time our transaction goes through because if we update the state our pot will get updated and anything else so let's select wallet let's hit enter 5 soul approve bought a ticket and look at the pot automatically updated we can check how much money we have report we spent 13. and just for fun um let's make it interesting and let's switch to my other wallet let's see this is my cozy wallet have anything we have seven soul okay so 50 50 shot will cause you win money I will lie with money right so let's make Kazi enter it's gonna cost him five sold tensile right so that means either I can win or cause you can win uh but who was able to pick a winner Kazi shouldn't be able to pick a winner because he didn't make the lottery only I should be able to pick a winner so yeah this pick winner thing should be us right it should only be us so maybe let's set that uh button before we create the functionality but other than that that's how we buy a ticket let's go well so how do we make it so only the person who created the lottery sees the pick winner button well if you remember how our plot card works we gotta figure out is Lottery Authority right because if this is false all right this is what Kazi should see all right but what I should see is this okay so how do we make this dynamic it's going to go into our context and let's figure that out the cool part is we don't need to make any special function we can actually just go in here underneath Lottery pot and we can say is Lottery Authority colon right and I'll hit enter here and we can say the they're going to give a nickname to something all right what are we going to give a nickname to and actually we can even just write it all in one line so it's not confusing we can say wallet and oops Lottery and oh make sure it's double double ampersand wallet Dot public key dot equals Lottery dot Authority okay I know that was a mouthful but basically um if there's a wallet and a lottery and the wallets like my address is equal to the lottery Authority right so let's check what the lottery Authority is if you don't know if my wallet address equals uh this Authority here at which it does a t we should be able to see the pick winner button so all of this will either be true or false and it's going to be in this name his Lottery Authority so if I hit save here let's bring it to a plot card underneath oh we should organize this Lottery pot shouldn't be here should be right here and we can say is Lottery Authority and we can get rid of this static guy right here static state is gone oh we can also erase this comma here nice all right we're making a lot of progress guys you still have static history here these two states these two functions all right we're almost done so it said save and now when I select wallet we can see the pick winner but what if I log in as qazi right so I'm going to switch wallets I'm going to do my cozy wallet boom you don't see it right it's all automatic it's not static anymore which is amazing so let's switch back to here my wallet number one and let's pick a winner and we can claim the prize right that's the next two things but again pick winner static let's make that function okay you know the drill where are we going guys we're going to context and uh underneath by ticket let's make pick winner so to pick winner I'll just say const pick winner okay pick winner is equal to a sink you say try catch okay error or error and we can say toast.air is error.message okay and but in this try catch we'll set up our TX hash it's equal to await program dot methods okay and what method are we calling we're calling pick winner and what uh arguments does pick winner take does it take any takes in Lottery ID aren't you glad you save it as a state otherwise you'd have to literally type in Lottery dot Lottery ID and if you didn't do that you'd have to fetch it here right so you want to pick a winner you want to set up your accounts this is an object this is your context so what do we need I'm not going to write all of it out anymore because you guys know the idea the first account that we need is the lottery which we have when I write lottery address saved in our state we have the authority then we can write wallet Dot Public key and uh that's it believe it or not that's it for pick winner and we can write dot part PC right all the the meat and bones was in that pseudorandom function I'll pick winner if you remember okay so the RPC and then we await confirm TX CTX hash and connection all right update state all right because we want to make sure after we confirm the hash we update the state and we give a nice little message that says hey picked a winner okay cool um awesome uh yeah so we have the function update state to success what we need to do now is make sure we pass that in here we say pick winner but there is one thing that we do need to do do you need to do is when we connect our wallet when we pick a winner we should see recent winner right here I should update this so that means we need to look in our updates State I believe I'm trying to think if users tickets yeah okay so I gotta do a couple things then let's go back into here and let's go back to our update State function right here cool so we got the lottery adjust we got the lottery object and now uh the first thing that we're gonna need to do is get the users tickets for the current lottery and you'll see why in a second right so just follow along with me that makes sense uh let's do a quick check here if there's no wallet and put a question mark here because it won't run if there's no wallet the public key then we're just going to return nothing right so basically if there's no wallets uh this shouldn't run at all okay just leave right but if there is I want to say const user tickets equal to how do we get all the tickets right basically what we want to do is uh go to this ticket here and do a fetch all right and it should be two but how do we do that in the front end code is this how you say await uh program program Dot account dot Lottery well not Lottery sorry we need a ticket yep dot all right and what you need to do is filter it by um there's a way to filter it and what I'm going to do is copy and paste this one so this is the only thing I'll copy and paste for you guys because uh there's a certain way to filter it you don't necessarily need to do this step if you remember the uh Airbnb I didn't necessarily put a filter here but what you want to do is something like this boom right yep a couple conversions here plugging in our wallets there you go this is the this is what we call the author filter okay so again you don't want to write out the pause the video copy this right here this is the filter for all um you can also switch to the other Branch get that piece of code there or go to our GitHub and find that solution in the main branch but basically it's going to filter the user tickets and once that's done store it in this variable okay we should so now that we have all the tickets we want to check whether any of the user tickets win all right so yep so to check if they won it's kind of complicated as well make a variable called user win set it equal to user tickets dot sum right and you're going to write t an anonymous function here all right T what's the name of that it's a t dot account the ID and T stands for ticket by the way you don't have to write T you can put ticket that makes more sense is equal equal to how do we know what id wins from that Lottery you say Lottery dot winner I because when we pick a winner this will have a value it's not going to be no all right because I believe right now if you look at it it's no but when we pick a winner like we just like we're about to do it's not gonna be null anymore it's gonna be something all right so check if there's something essentially if there's a winner and if there is a winner right so this means that if this is true set and save that user so I guess that means we need to make a state so I'm gonna go up the top here it's a const uh set is it winning ID yeah set winning ID yeah so we're gonna say fuser winning ID and set user winning ID and equals use State and this is going to be false by default because there shouldn't be a winner ID just yet um another thing you want to do is so winning a dress that we should set oh no this is it we can just use our winning ID set user winning ID cool all right so I think we're good so yeah if there is a user winner you want to set user winner and ID to that lottery winner idea all right so this is the check if there is a winner this is set it to that winner set the ID to that warning ID um then we can do else and say set user warning ID set that back to no okay and then there should just be a catch here and I think we're good okay um so what can we do with this with the winning ID well I can do a couple of things actually we can go down below here all right we have a lot of things already but we can go underneath in between internet master and create Lottery uh we can say is finished all right because when we pick a winner we should finish the lottery right so lottery so if there's a lottery and uh Lottery dot winner ID right because after that check on update State this shouldn't be null anymore it should be something okay and I believe in pot card we have is finished right if the winner is a winner can that winner claim the prize right so we need a can claim so can claim right it's going to be um Lottery if there's a lottery and uh there is not a lottery.cleaned right because remember this is true or false right and there needs to be a user winning ID okay so basically uh can they claim it right this will check if they claimed it or not so if it's false this would be true and if this is true like all three of these have to be true for Ken claim to be true otherwise it'll be false hope that made sense live checks so with that said we can get is finished and we can get can claimed oh wait I want to move put these guys right here is finished can claim and we got two squigglies because these are our last States so let's go ahead and erase those things so now there we go what was I doing again oh yeah I wanted to check this really quickly boom uh there's no recent winner yet so let's set this up so I want to set up the recent winner uh to do that we're gonna need Lottery history right so basically uh there's an array here and surprise 15. cool yeah so there's recent winner is coming from Lottery history we can get lottery history uh by looking through all the tickets and then checking if there's a winner in each of those tickets and once it finds that winner it'll take that winning address and put it here all right so basically looking through our history looking through the tickets and then saving it all right so let's make that function so we can say const get history is equal to async and say if there's no Lottery ID then there's no point we should return it's one of our edge cases next let's set up this history remember there's going to be an array right and it's going to hold um basically it could hold more than one object right but right now it's only holding one and it's basically all the recent winners all right so if we have multiple lotteries uh it's always going to have the last item in the lottery that gets pushed does that make sense so technically um if I had oops if I had this it would give me this public key right as the recent winner okay cool so we want to make this Dynamic now uh again this requires you to have a little bit of knowledge of for Loops so again if you don't know just follow along I'm just going to say four const I in oh this is a four in Loop and we're gonna make it a new array from the lottery ID and then we say dot fill no all right value to fill rate section with no and then oh yeah so now we're looping through this array and we want to say const ID is equal to Lottery ID minus parse hint I right so this is a this is a kind of like a coding problem here right that we're solving for so to get the history we're gonna need to do a couple things right if there's no ID we need to break but if there is an ID we can keep looping so we want to do a lottery address is equal to weight get lottery address and pass in the ID so again this is getting all the history of the recent winner so there's going to be multiple lotteries right so uh get me the the first Lottery give me the second Lottery the third but if there's no second or third break that's like the English translation cool so once we have the lottery addresses right we need to then get the lottery objects right so we can say program.account.lottery.fetch uh lottery address so this piece of these two pieces codes are going to be running multiple times all right so right now there's only one Lottery right so this is not going to run multiple times it's going to run once probably and from there we need to get the winner ID so it's going to be a lottery winner ID so it's going to go through all the lotteries it's gonna go through all the winners right and if there's no winner so let's say like Lottery one and Lottery two was done uh let's looking at lottery three but there's no winner yet we want to just skip that one so winner ID and continue because there's a chance lottery number four has a winner so Lottery one two not three four has a winner right so we're gonna continue skip this one go to lottery number four that's the way to look at it so continue and then after we do that we can get the ticket address because we want to know the winning ticket and set that equal to a weight get ticket address pass in the lottery address and the winning ID this is how we get the winning ticket uh the winning ticket address and to get the winning ticket uh you need to pass in that address so program Dot account.ticket.fetch ticket dress cool so after you do all that you want to do a history dot push and then you can push the object and what does the object look like we can generate it similar to this ID winner id address boom so we say Lottery ID is going to be the same as the ID that we're iterating on right now it's going to have the winning ticket ID and the winning winner address right so it's this is where you see the one one one you can get the public Key by saying ticket dot Authority and then we can say the prize and say get total prize in case you wanted to know how much uh was the prize of that Lottery like what it was okay cool yeah so uh after all that's said and done right here we can say Set uh Lottery to oh sorry set Lottery history to history okay so a lot set Lottery history is going to hold an array right so this is a state we haven't made just yet let's go ahead and hit save let's make that state say const Lottery history and say set Lottery history is equal to you state and we can say empty array it should be an empty array here and there's some things we want to do with this all right but the first thing I want to do is after get pot let's also get history so it's not grayed out anymore and the second thing we need to do is pass in that array all right so right here we can say Lottery is three cool and what we want to do with that Lottery history is bring it here right because how do we get the recent winner well after we have the lottery history right you're gonna get the last item in the array by doing Lottery history length minus one get the winner address we're going to shorten it with our function so it doesn't look like super long and let's bring it out here Lottery history take this out and guess what we don't have any more static data so we hit save and now let's finally test our function right so when recent winner is zero and that's interesting okay so we will pick a winner oh yeah we forgot to plug it in need to get pick winner here pick winner take out the static function save big winner okay oh uh shoes there's something here let's hit approve see what happens hey we picked the winner right so cause he's gonna win I won all that money so the pot's 10 that means sorry I was saying that that means I win the 10 Soul which is amazing and cool the recent winner is correct uh it should be yeah me right so again how much so am I going to end up with after I claim it it's gonna I'm gonna I'm gonna up with 23 so isn't that same so there we go and the same thing that you notice is that I can't enter a ticket and I also can't pick a winner again because there already is a winner so the only thing I do is create another Lottery right um another thing we can do is set up a can claim right we should be able to claim our prize which should be set up already it's console logar can claim oh can claim right here so instead of connected let's put can claim and put flame Stitch claim status so if I'm guessing it should be false right now oh it's not okay that's not good let's go to our contacts and let's figure this out so can claim there's a lottery claimed user winning ID Okay so it's null at some point it was false hmm okay so we could do here is literally check all these things so it's user winning ID yeah so it should never be false uh we can check here cancel that log there is a user link oh this should be a string see where I go wrong oh we disconnected whoops okay so that if statement isn't running so there must be something wrong in this update state that we update state with the pick winner we did okay let's check our back end on the lottery fetchall oh yeah winning ideas one okay so what did we set uh winning ID Lottery dot winner ID okay so I think it's something with this user win here user win hmm okay let's uh check if there's a user win this should have tests all right so you see this weird sentence should be something false what there should be tickets here there should be something okay well what about user tickets all right there should be two user tickets user tickets okay show me the tickets empty what all right but if we go to the playground there's two tickets all right um I have a theory that it's this filter so let's take out that filter and let's just get it as is all right yeah there's two tickets it's Phantom and now we can claim the prize oh my God okay so I forget do we need this filter I think there's a reason why we have this filter but for now like I said we'll just do an all here and we'll probably notice when the gets becomes a problem right but right now the way I'm doing this filter is wrong so I just removed it we're just going to do a DOT all just get all the tickets and now we should be able to claim the prize right and again this is not going to work because if we need to make that function but other than that we set it up so we have that and there's also this right here I want to see that as well so let's see how I do that pop card oh it's actually the table now let's go to the table table ah yes we have to bring Lottery history here too so we can say const Lottery history is equal to use app context erase this guy see what we get hey look at that so we also have our Lottery history here and now let's claim prize and we should be done okay so yes claim prize yep so to claim prize we need to go to the context alrighty so we are in the context now and what we want to do is claim price right so let's reap our rewards let's brag it in front of kazi's face that we got the tensile right so we can say uh down here const Flame prize equal to async Arrow and we could say try catch right at this point this should be straightforward you can say toast dot error is error.message and we can then say cons TX hash is equal to 08 program dot methods and what method would you like to call I'd like to call the claim prize one thank you and what do we need to pass in we pass in Lottery ID and the user winning ID which we set up all right so where do we set user winning ID again is there one name oops user winning ID right here set winning ID to that cool awesome all right so back to claim price all right we're gonna pass in the winning ID which was ticket number one which was me the dot accounts uh pass in the context which in the all the accounts that we need is Lottery we have that saved in lottery address we need the ticket uh this one we want to get because we want to get a specific ticket and through that we could say await get ticket address in lottery address pass in the winnering ID user warning ID comma we want to do our Authority which is simple wallet Dot Public key System Program let's say System Program Dot program ID and there you go dot RPC here a way to confirm the transaction pass in TX hash and connection and we want to update the state of course up to state and we can say toast.success here claiming uh good price or a claim the price to instead of say claiming claimed okay cool claim prize by ticket yeah I think we did all of it so we can say claim price let me just take one look at our update state is there anything else we need to do after setting the winning ID um no after that I think that's pretty much it so yeah it feels kind of weird that we made it this far guys but I'm really happy this is a really cool app so let's bring claim price from our contacts claim price right remove our final static function all right remove all these comments uh we can even get rid of this console log claim here save let's go back to our app select winner claim prize and again if I go to qazi's wallet should he be able to claim the 10 Solana let's go here right he shouldn't be able to all right because he shouldn't be able to claim the prize the other can claims should be false just to check I want to bring back that uh can claim it's true actually Claims can claim oh because can Claims can claim is one that should be something else I'm gonna look in context real quick can't claim should be true or false why isn't it true or false did I do this wrong come on this is a home stretch Clan claim okay let's try this again I'm going to select wallet and I should see claim prize there you go okay so we can claim the prize let's click this all right and again we should get 10 sold if I try to claim the prize as qazi uh we should run into that error that says hey uh invalid where is it yeah winner yeah the last lottery ticket ID doesn't match and already claim oh here we go invalid winner right so if you try to claim it as qazi we should get an error that says invalid winner but since I am the winner all right I get plus 10 Soul so from here we claim the prize we get 23 soul there we go we finished the app and again if you wanted to make a lottery you can all right create a lottery boom Lottery created we're good to go so I hope you enjoyed this this is an amazing app right we took everything we learned up to this point and we can make something cool like this so if you like the video drop a like down below leave a comment tell me that this was awesome and I'll see you guys in the next video peace