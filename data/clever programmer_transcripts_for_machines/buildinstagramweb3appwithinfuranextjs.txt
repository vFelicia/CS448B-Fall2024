in this video you're going to be building Instagram web 3.0 adapt using infuria on the ethereum blockchain you're going to be able to upload images create posts on the blockchain and verify them using etherscan and other and other users will be able to come over and retrieve and view those images and kind of only fan style they will be able to tip you so that's uh let's go ahead and jump straight into the build all right let's go ahead and get started building the Instagram clone so as usual step number one is always going to be using our custom made clever programmer CLI tool well obviously without the quote that would be helpful so pop in your name and email obviously in the other order and then you can just start typing Instagram and it will show up right there and as you can see it literally just opened up infuria go ahead accept that and if you don't have an account yet you can go ahead and sign up right here I'm already logged in so I'm just going to go ahead and click dashboard but once you sign in this is basically the screen that's going to greet you and here you can see I have a couple of projects from before but we're not going to be using that now so you can go ahead in the top right corner go ahead and generate new key you want to select web3 API which it says 4 Milli ethereum because if you are now supporting a bunch of random chains so I don't even know how many chains they do support but you will see inside so I'm just going to type in Instagram and then hit create and then yeah these are all the chains they supports inferior is jacked this is the key that you're going to be needing so go ahead and copy that you can just press that and then we'll say copy them point and we'll actually wait a little bit until the CLI tool finishes setting up our project and once we're there we're going to continue now once you see opening the S code and ready and actually it opened up on my other screen but here it is the Instagram clone starter files and everything and you can go ahead and double check that all the node modules are installed so like you should see it here and then you should see it there and that should be basically pretty much enough to go with let's go ahead and spin this application up so what I'm going to do is use the builtin terminal in here and I'm going to use that to CD into without the caps lock see it into my next app and then once I'm in there I can just go ahead and type in yarn Dev and as usual our next application is up and running now I'm going to need a chrome for that let's go ahead and grab that Chrome and I'm going to put it right here little window management there and let's go ahead and just type in localhost anyways here's the Instagram clone and this is what we're going to be using to build on top of and with that let's go ahead and get started building the contract all right now let's go ahead and get started setting up all the ethereum related stuff wait let's just put a contract on the ethereum blockchain and to do that we're going to use truffle so we're just I'm just going to type in Shuffle in it oh actually I shouldn't have done that all right cut all of it like the video is starting now actually it's starting now all right let's go ahead and just build this contract and get everything onto the ethereum blockchain so what I'm going to do is just create a brand new folder in here I'm just going to type in truffle app and then using my terminal I'm going to go into truffle app and then just type in truffle init ah no need for four no need to no need to force it so that should be taking Eric care of it pretty soon all right back to folder creation so now that I have my new folder wait all right so let's go ahead and add a new folder which I'm just going to call truffle app and using my terminal I'm just going to go in there and you can go ahead and set up a brand new truffle project that will be very easy to deploy onto the blockchain using truffle so we're going to type in truffle then it's space period and that should be a pretty fast thing to do now there's a few things that we're going to be doing so step number one go into your migrations folder so don't worry about that file you won't have it and in your migrations folder you want to add a new file that will call zero one underscore deploy.js and actually before we set that up one more thing I like to do is just get started with the contract so what you can type in is Shuffle create check and then just say inspect Instagram like that and that all like basically just create a new solidity file with all the basic stuff I'm gonna go ahead and zoom in for you making it nice and big that's what she said so now that there's that's out of the way we can go into our deep deploy file and we'll need to import that same contract that we just created so const Instagram he calls and instead of like regular required we're going to use artifacts supplier and we're going to go and we're going to go ahead and say module exports and Export the deployer itself we're not going to be using this for a little bit this is just to set up set the contract up to be able to deploy and it's such a quick thing that I figured like I'll do it now and usually I forget it if I do it after I finish the contract so I just wanted to get it out of the way and now let's go we're actually going to start typing solidity code so before we go ahead before we do anything what we're really going to do is update the version of the solidity or update the solidity version we're going to be using and that's going to be 0.8.17 that is currently the latest one at the time of shooting which you can see September 29 9 A.M or like almost 10 at this point and we're actually not going to use the Constructor at all however what we're going to have is we're going to have a struct which you should just think about it as like an object we're going to have image objects that we'll have to predefine and they will have an ID they will have an image URL which we're just going to call URL then obviously they will have a caption and they will have and because this Instagram will actually allow users to tip each other we'll actually store the total tip tipped amount basically there and then you also want which obviously shouldn't really be a string it should be a un256 so I don't know what I did there but then you want to have an author that's going to be payable because the contract will actually figure out all the tip transferring things so it will act as like stripe sort of thing is it gonna be a payment processor as well and so we're just going to call it author and then I like to create an address an array of addresses of all the tippers so Tipper addresses like that and so that will be our image oh yeah the errors what do I so that's cool and there's going to be a few more things that we're going to be setting up so we're gonna have a u in which will be a public number and that just that's gonna literally take care of the amount this is going to count how many images we have so this is going to be an index and that's the that's what we're going to implement and use it as ID later on dude and so one more thing we're going to be adding is a mapping and that mapping is all it's going to do is we'll be able to fetch individual images using this mapping so we're going to have the ID that we're going to map to an image which would be a public public variable and you should just think about it as like a tuple or some sort so this mapping will look like that and we're gonna have two more events that we're gonna get started with so event number one is going to be image created that we obviously going to fire off when we create an image so you're going to have an ID for that you want to have the URL in there you want to have the caption and caption like that and you want to have the address payable and it's going to be the author so that's basically all it is all it is to it actually you should rate the lines unlike me I'm not entirely sure why is that it thinking that there is some sort of trolling comma there but clearly not a trailing comma that's a trading comma now that's all right whatever we're going to leave it it's gonna figure itself out I don't care let me figure it out and then we're gonna have an image tipped variable which will have another uint ID which image was specifically tipped you want to put the URL there so whoever is looking at at ether skin is going to see that okay this is the actual image I'm gonna have the caption you want to have the current tip that was actually awarded to you're going to have the current tip stored which like you can literally see the current person how much the current person have actually donated to that author and then I'm gonna have the total tip yep and then we can just put the address payable once again like that so break those lines again all right let it figure itself out I don't really know what is happening oh it says okay expected that guy semicolon and yeah that's actually something that I keep messing and I keep forgetting to put semicolons but in solidity you cannot get away with it you have to be organized to get out the oldest and by the way usually this is the point where I go ahead and get started with the remix ID but we're just gonna we're just gonna go through this whole thing fast today this is a little more advanced compared to all the other builds so we're just gonna have them you can just check out our Channel and there's a couple other videos right before this one that was again taught by me and that will give you a full breakdown of every single line that is that we covered just here but basically what you will do if you what you would be able to do if we were to test everything out is just get back completely empty values We're not gonna do that we're going to go ahead actually cut this whole thing out like after the semicolon thing let's just cut this out there's no reason to all right so before we test this trick out what you want to do is we should just create an upload image function which will be public and we'll have to pass in two things for that string memory and by the way this is just some random solicit thing like you like sometimes you need memory first strings but sometimes you don't and there's no explanation for that or at least I haven't found any but yeah so usually when we're declaring stuff you don't need to use memory but everywhere else you do but you only need to use it with strings so let's jump that's some interesting thing and so we're gonna pass in two strings from the memory or something one of them is going to be underscore image URL and the other one is going to be underscore caption and so this is going to be a public function meaning every anyone or any user can actually go ahead and invoke this function or use this function and so we're gonna and so what we're gonna do is we're gonna need to make sure that the person who is trying to do our Instagram app is actually in fact a real user and not just some random got that why is my dude ever since Microsoft is doing anything they just up like why can't I turn my copilot off all right disable oh reload obviously all right all right so before we actually start type up the functionality of this before we actually finish up the function we're going to make sure that the person who's trying to the person who is trying to upload an image is in fact a real person because you could come in with a dummy or like a fake wallet and that's not what we want to do so we want to prevent that any kind of like random address would be able to be able to want to prevent any kind of random address to interact with our contract and if that would have would happen we can just say invalid will address so we actually need the user to have a valid ethereum wallet so that's just that's the only thing that this thing is doing here now you want to go ahead and increment image count straight away because if you start with zero that will have a bunch of baked in uh zeros and whatever like starter or like initialized values that we're not want to use and we don't want to have that on our front end so we're going to start with the index of number one which I know is a little weird because if you're a programmer you start counting from zero and so once we incremented it we want to save that into the mapping that we just created so I'm going to pass we want to say images image count which in turn we have right here so images image account we're going to pass in the ID itself and you want to create an image struct in there and so we're gonna we're gonna we're gonna start mapping all these values so I'm just gonna go ahead copy it down here just so we can see it and put them there so we can map them one by one so you're gonna make sure that all these Val so you're gonna make sure that all these values actually map to the values that you are storing inside of the mapping so initially you want to store or to start up with so the first value is going to be the ID so what's the id it's image count the second value is going to be our URL so that's something that we pass in so we're just going to use that and we're going to have to have the caption and then we're gonna total tip starting out obviously is going to be zero and the address payable author so the basically the person who is going to be the owner or the author of this post is the message sender the person who is uploading this so we're just going to say payable and because we want to make sure that later on we can transfer funds to this account and so we just passing a massive sender massive sender and then you want to create a new address array that is empty and that's how you do that in solidity for about the comma and as you can see you gotta positionally you're going to correct the you're going to correct the position all of your variables that you keep passing in make sure they are good with the struct you defined earlier on now first up the semicolon once again not surprising and then there's one more function that we're going to go ahead and create right now and that's going to be tip image owner and so we're going to pass in a un256 which is just going to be the image ID and it's going to be once again a public however this one is going to be payable meaning that this actually will process payments this will charge users and then transfer money so that's all that's all that literally does so before before you do any kind of like guard guard Clauses or anything we'll have to create a local instance of the of the image we are trying the user is trying to tip so we're going to attach that from the images mapping and then we're going to pass an D and that way we're this will contain the local instance of the of that image that is being tipped at the moment now guard Clauses there's a couple of them so we went so you want to make sure that the tip amount oh so you want to make sure that the ID that is being passed in is greater than zero okay you cannot tip on the zeroth or like first image because that is cut that is that only has dummy data in it that has a null address so that's going to cause errors so you want to make sure it's not the ID is not zero it's greater than zero now you also want to make sure that the ID why did I do a line break but the ID has to be smaller or equal to in the image count actually I shouldn't allow we'll sign there and so this is how our first guard Clause will look like the second one is going to make sure that whoever is tipping is actually tipping more than zero so it's going to be message that value has to be greater than zero so maybe I should write that and then and then you can just put in whatever error message here so if a pip must three greater than zero and then let's add another message here too invalid image ID like that put the semicolon app is otherwise the errors I'm going to go anywhere and then you also want to make sure that the person who is tipping I almost said the person who's tripping huh so the person who's tripping is not the same as the author and so that's why we created the local instance here before we even started with the guard party so method sender cannot equal to underscore image author all right that's that I think is pretty selfexposed not to worry like it would just burn gas for no apparent reason but maybe someone wants to do that so I don't know not in this app though so you want to put in an error message which is going to be owner cannot tip their own image put that semicolon out call it a day there's your guard Clauses that's basically going to make sure that whatever kind of transaction is going to come through is going to be valid now before you do anything before you do any of the administrative stuff you want to make sure that the owner actually does get the let's get the funds intended to be sent so straight away transfer the message.value and right after that we're going to go ahead and get start documenting this entire situation that was happening so we're gonna need to increase the total tip so it's gonna we're gonna say plus equals mass value and that basically means it's probably means the same as it does in JavaScript it takes the current value adds the new value to it and then saves it back to the original now you also want to make sure that we save everything to the mapping itself to so we'll have to we'll have to save this newly freshly updated total tip uh total tip amount back to our mapping so image ID is going to be the local oops it's going to equal to the local image instance that we just modified now you might be wondering like why we even created these events here let's go ahead and actually emit them right now and we're going to be using that I forgot them to be honest up here so we're gonna do them both but that you can completely skip on them you can like literally remove these it's just like a nice touch to to use these events and basically what it will do do is later on unlike ether skin whatever you'll be able to see a more humanly readable version of what actually happened and you don't have to figure out by transaction ID and whatever kind of stuff because that would literally make it impossible this way there are like some sort of data like you think of it actually you know what think of it as a console logging but like for the blockchain and that should pretty much explain itself like why it's important it but once again if you don't want to you don't have to it's just something that that I think is pretty that I think is pretty important all right so you're going to save the ID will and once again you want to map the update values that you're passing into whatever you define up there so you need ID you need the URL so I'm just gonna try to position the screen like that so we're going to say image dot URL and you want to go and say image dot caption I'm going to say image total tipped message.value which is going to equal to the current tip so actually that oops actually that should be like in before total dip what just happened there so put messages of value there and then say image dot total tip and then you want to say image author let's just double check we got ID we got URL caption current tip total tip and then the author nice all right cool there you got in addition whatever line breaking everything pretty or clicked in perfect all right next up let's go let's actually emit the other event as well which I forgot oops so that's going to be image created and yeah that basically just went through right through it so we got ID we got URL we got caption and author now that's that's interesting so we're gonna need to update those and I'm just gonna pass in everything that we passed in there that was like an interesting okay and finally let's go ahead and emit image created Which hat which has all these four items and my autocomplete is doing weird stuff so I'm just gonna go oh this is prompting me to jump through them thank you so we got image URL you're gonna pass in the caption which is going to be under score caption and then you want to pass in the pay your ball message sender that should technically take care of it there's a comma missing there semicolon good and that is basically it that's your contract we're gonna go ahead and test it out test everything out go ahead deploy it and then just finish out the app real fast all right now let's go ahead and test out this contract that we just built and let's go ahead and deploy it as you probably have seen probably a couple other videos we are using remix IDE which is pretty cool because they have this extension for vs code so you want to go ahead download it if you haven't done that already and if you did that's your icon go ahead open it up you want to set the compiler version to 0817 and then activate the tab now let's see what it does and once again if you haven't seen any other tutorials this might be new but we are going to be using ganache for we're going to be using ganache as our local blockchain so basically to get it you can just go to trufflesweet.com download it right here and then you can go ahead install and then basically this is what we will get and if if you're new to this just hit quick start when it prompts you and then you're going to be seeing a screen like this just going to go ahead click connect and then moving on let's just straight away compile this contract let's see if there are any errors in there seems like everything is good to go as you can see right here and let's deploy it let's see what could happen oh let me deploy it again cut it and let's deploy it let's see what could have what could go wrong so we got a few things over here we got image count which currently when you hit call it says zero let's see images see what do we got there yeah this is the base data that I was talking about and this is what we're not going to render on the front end but let's go ahead and now add a new image I'm just going to use double data as usual because these are like literal actual strings so wait where is this so here I'm not gonna put in like a real help but you can do it if you want to so I'm just gonna say URL in here and then caption here are actually my image URL and my image caption and let's go ahead and hit transact let's see what happens all right all kinds of guest lighting that's perfect and let's see what do we got we're gonna go ahead and grab the number one image and as you can see it we are returning everything perfectly there is the URL caption total tip Perfect all right let's go ahead and tip and we're gonna add the value of I don't know let's just put in like some bold numbers like two e 20 e oh and you want to make sure it's set to Ether otherwise it's going to go in the way you also have to change the the wallet you're using so what we're expecting is from this wallet to this wallet 20 eth goes or gets transferred basically so I expect this to go down by 20 eighth and I expect this to go up by 28th so I expect this to be at 86 eth and this to be 68 basically a value change actually that's a little weird so I'm just gonna go with 15. all right so a new one I expect the upper one to go down to 53 and the lower wait no go up go up to 83 and the up the lower one I expect it to go down to 73. all right let's see if that goes through or not and let's hit transact and there you go it just went through so yeah that that apparently worked in terms of transaction and if we call on it again then you can see the total tip there's this big old number that starts with a 15. the reason for that is in ethereum land and solidity as I've said it a couple of times you always have to operate within way or like in ways instead of paying dollars you would have to pay pennies let's invert that way too ether converter oh there it is and I'll just paste it in and there you go now you can see it's 15 ether that seems pretty promising there's nothing really much to talk about here so I'm just going to go ahead close it that was the testing and now let's go ahead and deploy all right now with all that done there's only the only thing really left is to deploy so once again we're going to be using truffle for that it's time and here it is this is your extension you want to go ahead and download and then there's your icon that it's going to produce once it's downloaded yeah let it just set itself up and this is not gonna be here for you if it's your first time but you can just go ahead hit connect that work and then hit ganache paste in basically this RPC server link so there's that and then for infuria I have a wrong I have the wrong project connected so I'm going to go ahead and select info right there and because I wear the authenticated myself with infuria it already fetched all the projects that I have so I'm just going to go ahead select Instagram however if that's your first time there's probably oh there there's probably a little popup window right here hit sign up right there that'll open up infuria and then you're good to go now truffle oh so now what we're going to do next up is we're going to go ahead and right click on Instagram solidity and let's see what the terminal says back to us I'm just going to make it big that's what she said so it says everything is up to date I don't really like that because that usually means that in the build folder there is no there's no API which we definitely do need while it's still here in artifacts it's formatted a little differently so I'm just going to go ahead and see the track and then trust for build so that's basically gonna get it done anyways whoops okay so it says pragma solidity is no bueno that's probably because my compiler version is not correct so that's something you want to make sure that is correct let's go ahead hit 17. actually let me just search for it in in here so you want to search for compiler and then using remote version yeah yeah so that basically should take care of it now one more place where it could go wrong is the Truffle config file where oh yeah there you go where the version is 0.8.16 so let's fix that and probably the reason for that is um it is best to go live with one version just below the latest one it's because everything is so new and so early we're gonna go with the latest like living carelessly so let's go ahead and say truffle was it compile I think so there you go okay what is truffle build okay so as you can see there are two ways to compile as of right now however when you use truffle build this is just a PA so feel free to skip it oh this is just a PSA so feel free to skip it but uh in the sixth like basically version six of truffle truffle build will be deprecated the more you know all right so we got the API now we're gonna go ahead and copy it into utils right there so it's nice so there's your new instagram.json file and right before we actually move anywhere further I just want to go ahead and set up our front end to be able to interact with this oh skip that cut that and so with that done it is time to go ahead and like finally actually deploy it so if you don't have anything connected if it's your first time and you haven't worked with inferior before oh not and I caught that too so I'm just going to go ahead click click right click on it or right click on it and then just go ahead and deploy it to my ganache so that's this guy over here let's see what happens there looking good finish running and whenever it says the config file has incorrect format like just skip it it's being too sensitive I don't know why that's happening but there's no problem there finish running deploy succeeded this is your contract address you want to go ahead and copy so I'll save that and not even in your truffle config you want to go into a constants file and paste it right into address the reason we are using this instead of the one we're going to be deploying to the test net is local is always faster especially in blockchain like 10 times more true but we're not gonna stop right there we are definitely deploying it to a test net as well so right click on Instagram again and just type in Girly and truffle configuration file not found that's not true for sometimes if your truffle app is in a separate folder sometimes this extension sees that as an error or something so in those cases you can just go back into your terminal and then CD into that folder CV into your Shuffle app typing code space period and that'll open up a new vs code inside of that folder so in this case let's just do that no no hard feelings deploy the contract let's see what's going to happen yup there you go there's your value and if it's your first time you're going to want to use the paste mnemonic and then go into your Chrome click metamask where you already have an account that is connected that has girly eat in it so you can find faucets for that on the internet anywhere basically hit settings go into security and privacy and then under your reveal secret recover a phrase you will have those 12 words that you shouldn't share with anyone after you got that oh I didn't mean to do that after you say that that window that I just popped up will will pop up as well once you pasted it there and then you can just save this file somewhere so you will have it just like I do so let's do it once again and once you saved it it's going to be showing up right there and then once you hit that it's going to go through the whole deployment process again now it'll be loading for a little bit and you will need to install from this notification thing so you just want to click that and then install that dependency and then you should be good to go all right after a quick coffee break we just got our contract address so copy that and then you can literally close this window it's just something unique and then you can paste it right up above here and what I like to do is Type in the exact page the exact same and then just paste it right there and after that you can type in Burly so that you know later on that's your Gertie deployment and then after this you're going to say either local or ganache or whatever you want but basically this will allow you to switch between the two really easily or if you were to deploy it your front end to somewhere you can somewhere that has a local and a online for online environment handling you can little you can put these in as environment variables for the separate for now it's good for us we can get 99 of everything done just like this and so with that our contract is deployed and it's time to connect our wallets to the application okay let's go ahead and connect that wallet right here now there's a few things that we're going to be importing for that so as follows the new chain configure chains create client and from five which you already have installed so don't worry about that then we're gonna need the styles for rainbow so important yep and styles dot CSS and then a bunch of things from Rainbow so we're gonna get default wallets right there the rainbow kit provider and dark theme and all this is coming from that thing right there now two more stuff is inferior provider not that not from there wag me slash providers slash and then I'm just gonna duplicate this line and change this to Json RPC and this is going to be Json IPC provider like that now a few things that we're going to need to configure we're gonna need we're gonna need chains and we're gonna need provider and all this is going to come from after we desstructured them from configure chains and these are going to be two arrays all right so first one chain these are going to be the chains and these are going to be chain dot girly and chain Dot Low thermostat just like that and then we're going to need the provider now there's going to be two providers that we already set up so first of all we're going to need to set the priority to one meaning inferior will be used as our main provider and we're going to provide an API key for it which we I believe I said we're going to set it up but then we never ended never set it up actually so it's going to be coming from process environment dot if you're uh underscore API and so the way you do it is by going here and then I think I said you should copy this thing and we're gonna need it so yeah now this is the time where we're gonna need it so in your next step just create a new file and name it.elu.local and then in there if you're on the score API and that's where the value of it is going to go and you will have to restart your server let's do that real quick and now that way it's all loaded in and all ready to go now option two because local isn't really provided by inferior it's uh it's something but not we're gonna have to custom ADD the new RPC server so before we do that priority two and then we're gonna have our PC and we're going to Define chain that uses the RPC and there we go now for this we probably already went through it once but here it is you wouldn't need that link so copy that guy it there and that should be good to go so why are we putting it twice wait oh it needs to be lowercase so like that all right so that should technically take care of a lot of things here all right and we're gonna see it in action in just a second just first create the connectors these this is like a bunch of boilerplate code that just makes it super easy to work for the rainbow and later on you're gonna understand happening and it's going to say and we're just gonna pass in all the change so this here we created the chains themselves and then here we're gonna pass it in and these are this is what makes these the chain selector this is going to config this is going to create the chain selector so that's what that's what's happening there and then one more thing just gonna be whacking fig and you guessed it it's not coming from let me config it's gonna be create client and I'm gonna enable auto connect so that any user come coming in don't have to keep connecting their wallets all the time and then you want to pass in your connectors and you're going to pass in the provider you created now a few things that we're gonna need to do now we're going to have to wrap the entire app with this so that the entire metamask energy is just flowing through our app so black May config and then you're going to say client and that's going to be the Dragnet config we just created like that without typos paste it and then wrap it around the app and then next up you're going to have a rainbow kit provider which we will need the chains so how's that mean and then a theme which will be dark theme make that a function and then you can enable cool mode it's just a nice little animation that I really love how I usually like so that's basically it in terms of let's see what do we got change dot map is not a function oh because you have to pass in all of them so like I was passing in this guy but in reality you gotta pass in this guy with a plural that should have solved it let's just double check refresh okay we're good to go there and now if you go into your header and like somewhere here are you import connect button and then place that button connection button or and then place that place that button connection right after this AI outline thingy like that that should give you that exact account that exact button and because already connected and the auto connect is enabled that's what's showing up but there you go that's what you will see probably if you haven't connected it to this application yet there you go there is and then I'm gonna hit connect once again and that's it that's basically it and then here are all the chains and these are the wrong chains so that's weird that honestly is probably because this inferior API key doesn't resolve itself so let's try again one more time and if I refresh okay that's still not working oh once again I passed in the wrong chain here yeah it's pretty easy to mess up so just want to make sure like you use chain in a singular when you import it and then when you generate create the array of chains but then from that that point on you will want to use it as a plural so from that you will need those and so you will have to pass in with overall and there you go now it's fixed and it's dark mode and you saw the cool mode how like the little sprinkle animation so that's it for connecting the wallet and now it's time for the functionality all right now with that all done it is time we go ahead and set up our context that will literally take care of all kinds of blockchain connection I'm gonna close all these random folders and I'm just gonna go ahead and create a context folder in which I'm gonna have a contest njs file now this is where all the magic is gonna happen and so let's go ahead and import create context use context try to make no typos in there use State and use effect weird Auto conversion all right all this is coming from react and then we're gonna need to import create contract which is not exactly tied to the context itself but we're going to be using this later and I'll just forget to import it so we're just going to do it now it's just easier for everybody trust me and then we're on the same note we're gonna import use account from Acme and then we're going to import Trump Kate Heath address from truncate that Dash address now you also want to import post because it's a toasty app yeah from the ACT hostify just like that and then you also want to import grab three from that three all right all this is nice and cool but let's actually create the context once finally so we're going to create app context using the create context thing that we just imported and then we're going to create an app provider which will take in children and now there's going to be no children sex trafficking or any of that stuff chill now we're gonna have a return clause in the return clause in there just like that open close friends app and app context dot provider value put two objects there because one of them is going to indicate that this is Javascript and the other one is going to indicate that this is actually factually in fact a object and then in between there goes the children with an N at the end all right and then we're going to make a hook out of it because that's useful so we're gonna say use up context contact like open close create that for okay that function and we're going to return use context and pass in out of context what so you might be asking what is all this stuff that's going on here just chill basically what's happening is we this is a bunch of boilerplate code that you will need to run your context and to have like Global globally available functions and variables and all that kind of stuff and yeah that comes with all this stuff so once again you're going to need a you're gonna need this bad boy hook to make it easier later on to interact with it now what I also like to do is just create a test test variable that literally only does it says test and then export it right away here now the reason we're going to do that is we're going to test this mess this guy out so let's import that app provider right there and then we're going to wrap it around the app itself so look right there it's perfect and then go into your index file and here you can go ahead import use up context so the hook that we created and then you want to go ahead and destruction test from use up context just to double check that the context setup and all that is working perfectly so go into your inspector and then onto your console and you should see test pretty soon oh wait it would be helpful if I actually console log it out without that you're not going to see it all right there you go now you can see it's working perfectly and that is basically all the contacts that you will need to set up for this build and I'm just going to go ahead and move all the all the testing stuff and with that said let's upload some images right so for the rest of the app we are mainly going to stay in the context file so let's actually just jump straight into it get started with a couple of view States and then we're just going to go out eventually to other files to import everything that we create here so we're going to have a use state that is going to start out as an empty empty array oops and then another one that is going to be our user address and that's going to be helpful to just so we're going to have one central place where we're going to take store our user wallet address of the person that actually signed up or signed in to our app and you want to fix all the typos because that's not helpful if you have them so before we go any further further let's actually literally store the user address so for that we're going to use a use effect hook so it gets updated every single time the user is changing in fact their wallet that is being connected so you wanna you wanna destructure address from use account like that and then set up a use effect hook that is clinged onto that specific variable and then whenever that changes and whenever that changes you want to set the user address to truncate ether and pass an address so what that's going to look like this truncating thingy is just you know make it shorter because if you remember and you go into a constants file this is how one ether address looks like now it's fine but in our app it's gonna look something like oops something like this so it's like more humanly readable and you're like let's be real you're never ever going to read this whole thing I haven't had it so let's just let's just actually get rid of that useless stuff so now that we stored the wallet address let's go ahead and import it and then comma let's export post as well then you export user address I just said import because I don't know and right in here right back in your indexes file you want to destructure posts instead of and straight away let's go into our index.js file where I already set up this empty array but that's only for the like template that you're working on so let's actually change that out so we're gonna change that out for is just destructuring posts from the use of context like that and so that way it is hooked up to hooked up to it and now you're like now this application is going to be working perfectly however apparently we got this error so let's take a look at what's going on that is oh because I should have made it plural so posts and like that see there you go that fixed it so that seems good and then whenever we and then as soon as we start uploading posts it's going to start fetching them or like whenever we Implement that function but it's going to be taken care of pretty fast so the app is by Design dynamic and so before we actually start uploading images there's going to be one more thing that I want to set up and that is all the functions so we're going to have a get all images and this is going to be useful just so we map out we're going to be working with and so we're going to have an upload image equals async open called function counts like that and then we're going to have one more which is going to be tipping the owner so tip owner is in sync open close and then there's your function all right so each of these are going to be separate section in this video and we're gonna go ahead and finally focus on this guy now to make the application completely dynamic right after everything is done in the uploading right after the app itself is done uploading what you want to do is call immediately the get all images function so that's what we're going to get started we're going bottom to top now the one thing you want to make sure is having guard Clauses and dry catch try catch Clauses in your application whenever you're working with blockchain I can't emphasize it enough that is super crucial and it will make or break your entire application if the transaction fails the if the Ethan wolf is going to be completely lost and if you like do all these like guarding steps that might save it from from my save your customers from losing their money so we got money on the line we're going safe so we're gonna say if there is no address is connected obviously at that point like there is nothing there's no money to you no money to lose but then again random error messages so you wanna you wanna you wanna keep that stuff safe so now what you want to do is say cons and contract and we're going to create a contract instance right here for this specific function and let's take a look at what that does so that's actually happening in the constant file so let's create contract thing is destructing the ethereum object from the from your window which is basically the code snippet that metamask injects into your application and if that is present and if that is valid then you it's going to create a web 3 item or like a web 3 instance using that that code and web3 is just a SM npm package is called web3js and that just enables you to interact with the blockchain however it needs a couple things one obviously a wallet connection and then it's going to create a whole contract interface for you based on the ABI that you pass in so that's the Instagram Json file that we put in here earlier and that is the address that we put right here that's pretty much it actually doesn't need these addresses don't even have to be exported but it's just nice I think yeah it seems to be working without exporting perfect so there's no need to use now back in your context so that's you're going to store that contract interface that that function generates and next up I'm going to create a data object or we're going to get started interacting with the truck itself so we're going to invoke one of its methods and that's going to be let's see what they will create I believe it is upload image yes so if you go back there oh it's just to close the line but you can just paste it there so there's like there's no typo options and then you will need to pass an image URL and you will need to pass that caption now these will be coming from the front end so you're gonna need to pass them right there so we expect those to to be passed into this function so they can be passed over there and so it's going to be helpful there and because it is a function that creates and pushes data onto the blockchain you will actually have to pay gas fees for it and the address that we'll need to pay the gas fees is going to be user address this guy right there I wanted to put like a comma that's fine and then we'll have to start we'll we're gonna need to specify some gas that's going to be this is gonna be three million and but don't worry about it it's in Whey it's like a lot less like it it looks like a big number but it's not that big of a number and and because we want to make this application as safe as possible I like to create a try catch function as I said earlier so I'm just gonna do that and then catch her like that and then pencil put it out on the console just in case you want to put it out on the console so you can debug if there's any errors going on so air that message like that and then just wrap this entire thing around it nice and then to make this application super interactive we set up toast messages and toastmessage is basically just these little nice thingies that you're going to see in a little bit Ah that was well explained anyways that's like a little loading animation that's going to watch the promise go through and all the all the back end stuff and then it's just going to be like super interactive so the users will be able to see exactly what is happening all right so let's set that up that's called toasted I think I think the package is called react cultify which we actually imported so let's just take a look at how it looks like if you go to mpmgs.com it's going to be right there yeah these are the toast messages and you can come here figure it out and then do all kinds of modifications to it make them yours customize it and this is exactly what we're gonna have wrong Arrow type anyways going back here we're going to say toast dot we're going to say toes.promise and then passing data which by the way is going to be a promise because the contract method and whatever is returning a promise and then here there's going to be three options so there's one when the promise is pending and then there's gonna be another one on the promise as resolved and then there's going to be one when there is an error so these are the three cases and then you can just pass in strings and I have these pretty for me so I'm just going to copy paste them but you can customize your messages completely and as much as one you can literally just load in random stuff there for now just for time saving reasons I want to put like a little X there so there we go that should technically be just perfectly enough to get started with the offloading images now one more thing I want to do before we do anything because if you remember we're gonna use the localhost because that's still a little bit faster than any kind of testnet and so we're gonna need to connect this function to that button right there so for that export this guy and then in your Heather you're going to need to import it so next so we've got the context import and then we're gonna have to destruction so upload image pulls ease up context just like that it's actually the wrong one oh this is actually the wrong file oh whenever I import or open header cut before that it doesn't even need to be opened so once you export it upload images or upload image you know open the file uploadmodal.js and import use app context and then from that you want to destructure this specific function so you can move that once and then just paste upload image equals use app context just like that that should pretty much take care of this whole thing it says the function takes in zero parameter it's going to go away in a little bit this is just like my call Quality checker okay let's see if that helps okay perfect now it's gone it just has to realize it takes a little bit of time that's fine anyways so now it should be hooked up to that button actually what this was already hooked to that so what we're gonna do is I have this nice rug right here that's gonna be my first it's gonna be my first image that I upload so wait for that little uploader thingy to finish hit done because there's no need to crop there and then this is my first post or whatever hit submit okay provided address is invalid all right whoever's editing I'm debugging cut this okay so I figured out the area it's it's dumb it's really dumb so you see here when we set the user address that's actually going to be a truncated address and that's not gonna work here you need the full address here so you want to put that in there instead of the truncated one yeah if you caught it by yourself like good it was a pretty weird error all right so let's try again uploading that same image once again and there we go hit done all right my first post that's better confirm image uploaded successfully okay so I mean I guess it's time to fetch that all right so we've got our image uploaded allegedly let's figure out if we can fetch it and actually show it out on the screen so we got to get all images actually should be firing immediately and there's one more thing or one more place where I want to oh and there's one more thing where I want to fire this function off and that's basically every single time whenever someone opens this app so it's gonna be another use effect and in here we're just going to go ahead and paste this and call it once so that should technically call this function every single time somebody turns this app on we'll just confirm that whatever yeah console logging object perfect so that is working as designed however now what you want to do is make sure that the person that there is somebody logged in actually we don't have to make sure that's completely that's not necessary at all however we're gonna need to create a new instance because the other one is unique to that function and it's getting scrapped right after that function has run and then we're gonna be doing some interesting things so what we want to do is let me just show you in the salty Lydia file so if you remember we are tracking how many images do we got and then we are also tracking it in a mapping so every single ID has an image linked to it so what we're going to do is fetch this number and then we're going to Loop through this mapping and that's how we're going to get each image one by one all right so to do that we're going to say cons image count we're going to say away contract methods and we're going to say image count and we're going to say call because we are just reading from the blockchain that completely will work now let's go ahead and console log out how many images do we got it's image count like that we should see a one right there so that's perfect that's working as we wanted it to work and we're gonna now what we're going to do is whenever we fetch one image by one image we're going to store them and we're going to push them into a temporary I'm going to put them into a temporary array that we're just going to have while we're here and then we're going to and then we're going to save that or a temporary array into our you state so how that's going to go is we already have the image count and so now we already have the temporary array so now it's time to actually get started looping so for index equals one semi column and then I lost them or equal to or actually index is less than or equal to image count like that semicolon and then index it's pretty basic it's super beginner friendly there should be no issues we're just gonna call the mapping function and so it's going to be cons image weight contract methods dot images and then we're going to pass in Index right there and we're just going to call it so once again we're just reading from the blockchain no transaction needed and then what you're going to say is new posts dot push and we're gonna say because if you remember actually let me actually let me just show you but if you remember these this image this whole image object is a little bit weird let's see what is happening here all right forget our live keyword right there so let's try again all right there you go so I'm gonna make this big that's what she said and if I zoom in as you can see every single prop and detail is being returned twice you get this like weird object type of thing with actual named like the name props so what you want to do is go for these because these are like way more easy like way easier to read as a human and so we're just going to save those everything else and go out the window so we're gonna have an ID which is gonna be image.id like that URL image URL caption image dot caption and then you're gonna have total hit which is imaged total tipped and then you're going to have an author which is going to be the image.author so that's pretty easy that's selfexplanatory I think there's not too much to understand about there there's gonna be a weird move that I'm going to be doing here and by the way we're going to wrap all this into a try catch in a little bit but after like outside of this for Loop what you want to do is I'm going to say set post and now this is when we are going to update the state itself so what you want to do is say new host dot reverse or actually let's not do that right now so let's just be happy a little bit because we have our new post we have the post that we just uploaded there now what you expect from Instagram is that newer posts and I know the algorithm and everything it doesn't do it that way we're not gonna mess with it this is like a true real real Instagram that we're gonna have here so I'm just gonna so what we expect is the newer posts are going to be showing up on top of older posts so what I'm going to do is let's go ahead and I'm gonna get another rug image and it's funny because in crypto land if they steal your money it's basically a rock pool ah am I making fun of other people's losses yes I am all right so here what I'm gonna do is just paste that image there and then zoom out because why was I zoomed in so hard and let's go ahead and upload an other image so done and this is my second post on the top so I expect it to show up on the top right so confirm that full screen metamask and then if you scroll down it's below it's at the bottom that's not how we wanted to do I already spoilered it but basically what you need to do is just reverse that array and so that way the newer posts are going to show up at the top all right so we are like pretty much right there the only thing now that we have to implement is literally just tipping and once we are done with that this application is complete all right now we are at the very last step we are at the Tipping functionality of this very application and this is your time to grab another coffee because we're gonna need to be alive and we're gonna need to be awake to test out all the functionality that we will have so with that all that random jargon that I just said and even I don't know what I just said with all that done one more thing this all has to go into a try catch so before we go any further try catch I don't I can't even type it catch like that error Dot message so like I said everything on the blockchain goes into a try catch there you go there it is now it's cool all right let's go ahead and implement the tip owner functionality of this all right so this is our very last function and what we're gonna get started with is once again creating a new contract and in this case we will need the address so we'll have to actually guard for that too so if there is no address we're just going to return and skip it and before I forget it let's just export this tip owner function all right so we got our contract instance we got everything we need we can get started so good old try catch because you don't want you don't want to mess with errors here event message so that's all cool and then what we're gonna do here is we're just gonna have a hardcoded amount of tip that one user can do or like one user can send to another one you can make this actually it could be your homework to make this a as a dynamic thing but for now we're just gonna go with a hardcoded one and we'll see how easy it is to make it make it Dynamic so what you want to do is you want to convert any kind of and like I said before so what you want to do because I said it earlier solidity only works with weight which is like a super small ether ether amount so you will have to convert it now well how you do it is you get a pass in a string of The Ether value and then actually and then actually specify that you are passing an ether all right and so that's that way this ether amount is going to be converted to whey as it says there all right so there's your amount and so that is what we are going to be sending as a tip in this application but like I said you can specify it you can add like a little model which like which like pops up and then the user can choose how much they can tip 55 like at all the restaurants and so what you want to do is going to be like relatively close to what we have here all right so actually from just just for pattern recognition stake you want to go ahead and try it using this thing now there's going to be one more thing that you will have to adhere which is value and so once you add that and you figure out what's going to be the value of the key which we call the value there's a lot of values so we want to have a value here which will have a number in there but you want to pass in a variable so you go ahead try it out and then pause it pause this video because I'm going to go into the solution right now all right so if you try it out and you failed no worries I used to fail with ethereum all the time in fact I still do in fact I still pause it whenever I get an error and then I spend two hours to debug it so that's fine you just don't see it because it's off camera anyways what we're going to do here is we're going to create a transaction which will be a con which will be interacting with a contract methods you'll know that let's go copy function name which is tip image owner what is it there it is and then we'll just go call that and then we'll have to pass in the image ID all right so that's something we're gonna have to do so we're gonna need to we're going to need the front end to pass it in here into the contact cell so that we can pass it over and it's because we are actually creating data onto the blockchain and we're like sending them we're going to use the word we're gonna need to use the method send down there so the origin is going to be or the sender is going to be the address and then once again not this address the truncated thing because it's going to err out again like last time I'm gonna go with the usual gas value 3 million like that and then this is the key one the the amount so basically this will specify that there's going to be a value that the user will have to pay that's the big number that kept showing up as zero so we're going to need to pass this in here and that way you're going to actually transfer funds towards the owner of the image you want to tip it will actually transfer funds to the owner of the image you want to tip now you can set a guest limit of null and then just call it and now to make it toasty I'm gonna use the toast dot promise method and we're passing TX as in transaction and then create the usual object and like last time I have the three case scenarios typed up there so I'm just going to paste it here but basically you want to have a pending text you want to have a success stack text and you want to have an error text and basically that is pretty much the application so let's go ahead and test this out and actually I have to test out the error itself if you remember wall it says please connect your wallet that's interesting so there's a little bit of a bug there we're gonna fix that in just a second and it's also here so that's also interesting so there's like a few Dynamic stuff that we're gonna have to fix all right so let's do that before we mess with any kind of tipping all right so one of them is going to be in the right suggestion bar nope so one of them is going to be in the home right bar now in here we will need to import the use of context so basically the app context hook like that and then we're going to destructure user address from that from the contract context like that and that should update this guy okay so that's pretty good and then there's this one more thing we need to update that's going to be inside a feed and inside action buttons no it's going to be inside of caption now in caption we expect to have a username I don't think that's what we send it that's how we set it there so let's take a look at how we have it in context I actually cut everything yo cut everything where I open a caption so that's not an implementation there okay so for whoever is editing it cut this part out where I first from the point where I first opened item and caption and all this stuff so the only thing that I want to fix here with them is this use of context stuff everything else will be coming and even this stuff is going to be coming from the CLI so they don't have to fit and then back to the video right now all right so with that fix we should be pretty much good to go so grab this tip owner and we're gonna go to the item file now in here oh okay and we're gonna be going to the action buttons file right there so there's this error that's going on here that's because once again I set up this dummy function there just so it doesn't like completely go nuts so instead I have an error now you're gonna have to import use up contact here and I think you see the pattern here so once again destructure it and then use a context oops and that should be good to go now let's move that let's paste it back no errors there so that should in theory make everything work so there is all that's pretty much all the application now I'm just gonna try to tip to my own image and if everything is set up correctly this should throw an error so let's try that I'm confirm and there you go there is the error and it says owner cannot tip their own image so it worked it is working perfectly yeah there's the air that's cool and so what I'm gonna do instead is go ahead and switch my switch my wallet and there's my new balance so that's nice and also you can see how the profile image is like changing so that's actually tied to that's so that's actually tied to the wallet address all right let's try tipping hit confirm and there you go tip send so that technically means that there was a tip amount sent here .01 e so let's actually do this again let's just double check how much we're sending because I completely forgot it's a con and yeah 0.1 so what I'm expecting from this next stack test because we haven't tested it is it goes down we didn't set up expectations so this is supposed to go down to 83.62 and this should go up to 0.98 so let's uh let's stick again but this time that image hit confirm and let's do it there you go there it is it is working perfectly it is beautifully built so there you have it that is your Instagram clone with tipping function smell the built in and that's pretty much it about your app and once again as I mentioned it earlier you can go into your constants and then just switch out the deployment now keep in mind that if you're switching out the deployments to the girly one you will have to reupload images and your friends and whoever you're sharing this with are going to have to upload images as well and you also will have to post this website somewhere on the internet but basically that's it that's it for the tutorial I hope you enjoyed it let me know Down Below in the comments whether you like it or not and don't you dare tell me anything negative because I'll find you anyways that said go ahead smash that like button and subscribe to the channel and I'll see you in the next one