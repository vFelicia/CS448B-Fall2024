today the disney clone that you see right here we had day one in the previous video where we focus on building up the home page like this we focus on building the login page that looks like this right here login we also focus on building the the detail page it looks like this as well so right there and we have done all this yesterday and day one so if you're interested we have a video and down description below for you to go ahead and check out but other than that let's go ahead and continue with what we're doing so like i said our goal is to be able to get to this right we're building a disney clone we have a react slick for react slider which looks like this we are using firebase for authentication right here right we're using beautiful animations with css if you scroll down right here oh if you click on something to be able to get to the next page we are using react router dom right here beautiful right and if we go to login so let's go and sign out here for a second if i click log in again this is using firebase authentication beautiful and to keep to make all this work to keep the state managed we are using redux for state management coming together it's all working so beautiful so nicely it is user friendly it is mobile friendly and so we're just going to continue on with building this beautiful um from the last time from the last time what have we done from the last time we have our project that's basically like this right here right as our project we have a few files we have the main files let me go ahead and show it to you here detail home page right here home page header image slider login movies and viewers right and all this contribute to our application that is pretty much the way it is right now nothing crazy so far because right now our goal is very simple the number one goal i'm going to do is you see how these movies right now are just static files static images we're going to be grabbing them now from the database to make sure we have them basically from the databases what i'm trying to say right we want to have them dynamic right we don't want to have them static all the time all right okay to make that happen to make that happen we're going to be using firebase and db database from the from there right on top of that after we finish with that part two we're going to focus on is go to the detail page when i go to the detail page of course we don't want to see just static content we want to see content that changes based on the mood i click right that's part two part three is going to be login so we're focusing on the login which happens to be right here when i click on this we should be able to log out and i should be able to log in and honestly that is pretty much it for today and once we're done we will go ahead and host our application straight on firebase and you'll be able to play with it and use it and just be so proud of it to put in your portfolio and so forth all right so our project is here okay to do the whole firebase getting movies let's do the following let's go ahead and go to home.gs okay on the js i will make this a little bit larger home.js yes on home.gs we need to go ahead and grab the movies that's the functionality we're going to use now to grab those of course we're going to grab them from the firebase and right now we have nothing with firebase related that means we need to install firebase so create a new terminal right here inside inside your inside your what's called uh your views code and we'll do npm install npm install firebase done all right we will install that and then we will also add the configuration for the firebase so let's do npm install install safe install firebase dash tools boom voila firebase tools we got those so those two things npm install firebase right here and then npm install firebase tools both are needed for this to work all right awesome clear this out all right next thing we need to create a firebase.js file because we need the configuration now usually what i would do is i'll go ahead and actually show you how to go to firebase click your project and so forth but in our case we're not going to do that mainly because a lot of the data all this movie's data is already prepopulated in our database and so we'll just give you access to be able to prepopulate your data as well right so it just makes it easier for us and for you at the same time let's create a new file here new file will do firebase.js and very important make sure this firebase.js is not is not inside any of these folders like app or components or features or anything like that it needs to be inside the source folder very important next up as you know we down below we have a google drive folder that has images and it has a few different things below it let me see right here where's that finder folder let's go to downloads here and we had a disney clone challenge this was exactly the what's it called the the folder you can download down below in the description below okay download that and you have videos images and the next thing you have also is something called firebase.js okay i want you to go ahead and actually open this one up so it's going to open this one up either with sublime text or whatever the you use to open it up so i'm gonna open up inside the use code right here this is the fibers that gs we're going to use all right so copy this one command c go to firebase.js and paste it in there done right and honestly that's all you need and again it's inside the folder down below in the description okay inside that folder the firebase.js okay download that and then paste it in say here so what's going on here in this file uh a few things we are importing firebase part one next thing we have a firebase configuration file right there and this basically just gives us access to the actual database next thing we initialize the firebase app right here right and then what we do is we we need to tell firebase what are we going to be using well the first thing we're going to be using is firebase firestore so firestore is the actual database we're going to be using firebase authentication later on to be able to log in and log out we're going to be using google authentication because like i said firebase can have like yahoo notification there's like all these amazon to the kitchen facebook authentication in our cases it's just gonna be google auth okay and finally we're gonna be using firebase storage storage as well right so those three things is what we need to make sure to tell our project uh to use once we get that does everybody have that let me see that's everybody does everybody see the folder or see the file everybody has the file on the zoom there yes yes yes yes beautiful awesome all right next thing once we have that let's go back to now home dot gs all right on the gs and here we need to grab the movies from the database and first is a few things we need to use something called use effect to be able to grab those movies let's go and import use effect here use effect boom right there use effect which is right here now what this is going to be used for is use effect it says hey whenever i load my component whenever i load my page or all that i will be doing is basically just running whatever you tell me to do right so for example here if i say use effect if i say use effect boom and i say like this done okay good and i'm going to put nothing inside here check this out if i simply just do comma and i do console log okay console console.log okay hello all right check this out cancel little hello if i save that and if i refresh this all i had to do refresh this inspect element on this one call the console see hello so what this is telling me is this right here is being run whenever this component this whole component it gets loaded right this whole thing is being run that's the reason why we use use effect otherwise if we don't use effect it will be very messy a lot of calls getting being called if you want to avoid that all right next thing since we're using firebase database let's go ahead and import db db from firebase we need to use firebase like so so dot dot slash means go back up the folder because currently inside the components and then we need to go back up to the source folder to access firebase.js all right that's part one all right since we got that all right let's go ahead and take a look at how do we grab the data so we'll do db db dot collection collection dot well collection of what we have a collection called movies inside our database and we will say something called on snapshot what does this mean on snapshot means whenever it's not just kind of like a picture right you take a picture of whatever it is a landscape or you know yourself who knows i took a picture and it's a still picture right and it does not move but it's a certain point in time well what a snapshot does it says it's almost like taking a picture of the database and then returning that picture to you right at that point in time the you called it right the point in time that you called it and now what happens also with it is whenever the picture changes or whenever for example the database changes it will actually send a new picture to you every single time that's the cool thing about firebase is that's why it's called a live database all right on snapshot all right and we'll do like this snapshot called a function okay so it's gonna get a snapshot and then i will show it to you what we get from it snapshot oops let me go and type this quickly snapshot snip shot snapshot okay good good good good good and well let's go ahead and install log while we actually get it you'll see it's a little messy check this out snap shot okay done okay if i go ahead and right click this inspect down on this one console log what i get look at this this is what i get right here like i said it's really messy but what do we have here here we have docs we have empty metadata query and size right and the main thing we need to look into is docs you see look at this you see this right here it says array of 16 what do you think this means well this just means literally we have 16 items in our database right here look right 16 movies but again you don't see them fully it's a little bit odd the way it's made but you'll see in a second here but we have the 16 elements in the database and we just received them right once we received them well what's going to happen is let's let's go ahead and capture them we'll do let temp movies here 10 movies is equal to snapshot snapshot dot docs remember how we talk about the docs portion docs.map at that map we'll simply loop through every single snapshot and then we're going to return something from it check this out right here's a lower turn so for every single dock every single dock that we have i put this on the right hand side for every single doc that we that we are going to use we're going to grab the id and the data from it so return return boom id doc dot id comma dot dot dot dot data hold the phone as i understand what you're talking about this is very confusing what are we doing here let me show it to you console the log dot data all right so the log and check this one out okay inspect element on this go to console again look at this you see every single doc.data is is what is the object look at this right here boom you've got the background image the card image description subtitle title these are all movies stored in our database right and that's exactly what we are doing here and so we're capturing that by using docker data we're capturing that portion but also separately in order to capture the unique id so we can later on use it for the detail page or capture inside doc.id as well right and this dot dot send simply means basically let's go ahead and unpack this object and put this whole dot object inside this new object that we created which is simply just an object with a bracket right and then we're turning it back to the 10 movies so if we're doing this right here let's go ahead and stop console log here i will do console.log console.log temp movies okay save that all right boom right there look tab movies is exactly what we now need we have the id the id of the actual movie the id is used for identification inside the database we have the description the card image the background image pretty much everything we need for the detail page and also for this page as well and honestly that is it that is it my friends right but of course we're not done right we have these movies and that's great right how do we go ahead and show them now and here how do we do that well this is now where redux comes in and this is the interesting portion okay and i want you to pay attention to this really quickly here readings is basically what's going to manage all the data so if you imagine this right if you imagine the fact that if you have a rectangle here and if you imagine that this right here is state let me go ahead and make this of course this right here state okay this is called state and state is basically a database db for your app but internal app basically for your it's basically db for database inside chrome right and inside state we have what we have things like we have different um values maybe we have movies inside the state oops not here maybe we have movies maybe we have you know user maybe we have uh i don't know some kind of other list maybe right all of that is actually being saved so for example here let me say movies movies maybe for example we have user right the application state sees all that and so it manages all that right and because we save it in the global state in the application state we can access it everywhere that we we need that is the important part here this is why redux is so useful because otherwise if we don't do that then we have to pass down data from movies down to movies here and you're passing down data every single time and that's a lot right that is not very good that's not very useful and that's why rex is so important okay now at this point since we do have redux let's go ahead and take a look at what do we create with it well if you look at firebase and i'm sorry if you look at redux readers has a few things when we did the redux toolkit when we used the template redux template right here you see it created a temporary one called counter boom let me go remove some of me counter right here and if i click into it it has something called counter slice and we have the initial state here and so forth we're going to mock this up and i want to show you exactly how it works let's create a new file here a new folder actually we'll call it movie okay movie oh actually not inside here but inside the features so new folders at the features not bad we'll call it movie boom not inside the counter remove this one delete this one i don't want that boom okay counter movie inside here create new file called movie slice and i know you might be wondering how whoa what is movie slice why why is it called the slice i'll explain a little bit why all right and inside movie slice a few things we need to need to do is we need to import import create slice create slice slice there we go from redux toolkit so from at redux redux right js slash tool kit done all right so create sled for mutex slash tool kit and honestly that's it and so usually what we have with redux is a few things we always start out with initial state like when i say state is what do we have at first what we have in our data in in our chrome database or in our application database well we always start out with nothing so we say const initial state initial state is equal to boom initial state is equal to and we're going to give a movies key no right it's nothing right we start off with nothing initially okay once we have that we're actually going to create a slice for the movie so what does this mean so let's get let me take a look at this movie slice movie slice is equal to create slice and you're like holy this is so much i don't get it this is complicated this hack all right don't worry don't worry i'll explain this let's create let's name this slice here i'm going to name this slice called movie so name i'm going to name a movie boom comma and i'm going to pass the initial state that's going to be loaded with initial state boom comma and i'm going to give it a reducer now what is a reducer check this out okay um well very simple redux is made of a few things actions actions reducers users and state right actions reducers and state there's also something called sagas but we don't really care about that too much here that was previous redux okay actually sort of state an action is basically the actual you want to do so for example right if you want to i don't know create a movie if you want to set the new movie if you want to delete a movie if you want to log a user out you want to log a user in this is called the action this is called actions okay you want to log them in you want to log them out you want to sign them in you want to save the data that's called actions right now reducers reducer that basically is what takes an action and actually changes the state so kind of kind of goes kind of like it goes like this let me show you oh actions actions actions call reducers reducers change the state and so forth that's honestly what happens right and now it does not make it's nothing more complicated than that right one way i can show it to you is really cool like this on the right hand side you can see here that this right here is an action it's called a dispatch so we usually dispatch in action it's like you you're dispatching your driver right right you dispatch an action it goes to the action right here there's a type deposit it goes to the store the reducer the reducer right here changes the state to ten dollars see so again we click on something this patch is in action oh let me go right this patch is in action boom boom reducer changes the data the state now send dollars that's honestly this is the whole thing dispatch right reducer changes the data in the state and that is pretty much it and we change it in the ui and that's it the coolest part about this is because whenever i change the state here right basically the whole app knows about it the whole app right so let's say for example i have a home page that has some data i have a homepage that has some data right and the reducer said hey the movies changed right so we uploaded new movies or whatever it might be what will happen is every single component will get notified about that and so now you can make the changes really fast and really quickly and you don't have to listen on everything that's what makes it so powerful okay all right continuing on so does that make sense is this a better description of kind of what relax is this is a really nausea does that make sense raise your hand is that a little bit better to understand yeah a lot better okay good good good i know it's a little bit hard it's this one is usually a little bit hard to understand but all you have to know is we have actions that basically what you want to do so kind of what you want to do let's say i want to walk i want to walk so i'm walking walking walking and then maybe i want to for example buy something or i want to buy something then the reducer is what allows me to do that okay all right so we have initial state let's create those reducers boom let's create those reducers all right all right we're going to create a reducer called set movies movies and what this will do is we'll take a parameter called state so this is the current state comma action right comma action and this is a function right here pretty much right and what's going to happen is this is where we change the state so in the cyborgs function we're going to pass in new movies that we get from the database it's as simple as that so let's do that movies is equal to action dot payload actually that payload all it is is that's the actual parameter that we pass into the subways function you'll see that later on that's what pillow carries so if i pass in an array intercept movies i will get it here it's an action.payload that's what will happen next up in order to actually use the movie slides we have to export the actions because remember we dispatch actions right so i'm gonna say export const right here const and i'm gonna say here set movies right is equal to movie slice movie slice dot actions there right so this is the action that we're going to export next thing is we need to now export the actual movie state itself because remember how do we use a component to access our movie state where very simply we have to export it so export and the gist of it is we usually like to say something like for example select movies right that's kind of like the the the traditional tradition but that's the way you want to do it select something so what are you selecting from the state is it movies maybe there was something else here for example like i don't know uh horror movies right movies in here right well you would do select horror movies inside here whatever it might be right that's it okay so select movies is equal to here we'll take the state state and we'll say it's state all it is is state state dot what state well the movie state right movie state this is the reducer right state.movie dot movies done done so okay this will give us like the movies okay next okay we're going to export the actual slice itself so export the actual reducer export default so by default we're going to export the reducer movie slice dot reducer right the reason why we do that is because you tell the store we call the store the whole store that we have this right here reducer save that awesome sweet let's now go back to our app go to store.js and we need to now import that store actually right we need to import that store or input the reducer and we can do that very simply just by simply going okay let's do it like this so import we'll say movie reducer right movie reducer from voyager from tata features features dash movie dash movie slice okay and then instead of this counters because which came originally we just say movie is equal to the movie reducer and all you're telling the application is that we have this producer at our disposal that's it that is all you are saying my friends all right that's great let's actually see if this works i'm going to save this i'm going to save this refresh it all right so nothing's broken so far which is good that has broken so far the main thing is going to happen is when we actually use the movie reducer which we will do inside the home.gs basically whenever we are right whenever we are getting movies this is we will be able to set the movies for the whole state the whole state because then it can be accessed everywhere inside our application right so inside our homepage let's say we have a homepage here right that's the homepage the homepage and now we have for example the movies component right two different components we have component movies component and a home component so let me say here this is for example the home component this is the movies component right moves components well they both share they both share the same store right which contains movies right so what happens is that inside the home functionality okay it's at the home functionality all i do is i hey i set new movies right using this the reducer and then because of that i can actually get movies inside the movies component that's it that's all that happens all right boom awesome all right so let's go ahead and do that now to use the reducer we need to use something called dispatch so let's go ahead and do this we'll say import import right and we'll say use dispatch right there use dispatch okay from redux react dash redux all right and then we will import the set movies action so import right there set movies okay from what is it features dash what movie dash what movie slice right but there was a movie dash movie slice right there beautiful okay we got the action which is said movies we've got the use dispatch which we're going to use to dispatch that action so this is like basically calling it's like hey do this action that's what dispatch is used for all right and then honestly that is pretty pretty much it we've got dispatch we've got that right to use this patch we need to say that let me say const dispatch is equal to use dispatch oops not that one huh and this patch just patrol okay good good we got that now so let's think about this right once i get my movies inside you know in from the database what i need to do well it's very simple at this point now i need to dash this that that aspect dispatch an action right called set movies to set the movies for the whole store for the whole database that's what we need to do does that make sense and we have a question does that make sense yes yes yes would you dispatch in action saying hey you know what let's we got these moves from the database let's go ahead and then store them inside the whole state the global state okay this is where we'll do like this we'll say dispatch dispatch right dispatch and we'll say set movies right and this will have temp movies inside here temple movies again tap movies okay and let's go and check that make sure nothing's broken let's see now does anything break let's right click inspect element anything break oop i forgot to share here so here's what we did we did dispatch we did this patch right here okay and then with the dispatch said movies right here okay that's what we just did and we imported said movies and used dispatch beautiful all right all right so if we go to console here no bad errors just good this is a good sign nothing's nothing's going haywire which is a good sign right but of course we still don't know how is this working well let's actually now use the redux in terms of actual uses the state remember how i said that we can use the same state between the most component and the home component well go to movies okay go to movies and let's use select movies so we're going to say import import select movies that will get us the movies that we stored in the database select movies movies from from what well features slash oop slash what uh movie slash movie slice right movie slice again where is this coming from i mean go to movie slice here movie slice boom look at this see select movies so like movies all all that's doing is that's cool getting us the movie's state that's it that's all it's doing that's pretty much it right here that's all it's doing so let's now go back to uh where was i yet i was at movies component boom all right that's good next up is we need to actually to use the selector we need to use a use selector so import i know it's a little complicated guys there's so much to it right but once you know it for the first time or once you kind of realize how it works it's not that bad oh come on use selector from again react dash redux beautiful okay three ducks save that there we go you selector and let's now grab those movies okay we'll say constant movies this is what we're going together with so constant movies is equal to use selector the one we just imported from here react redux okay and the selector will be select movies that's on that's the one we need to use select movies okay and let's check this out i'm going to console the log here so the log right there right there i'm saying this is movies right comma i'm gonna say move just so you guys can see it okay oh no no no no not that boom all right save that inspect element console oh look at that this is movies array 16. we have the moves you see how it travel between the global state we have the global state right so what do we do here we went down to the home state home component right inside the home component we grabbed here so the home component we grabbed the data right here okay we grabbed the the data from the database we dispatched an action we used redux to save the movies inside basically the store right the react store right it's kind of like a store where you buy things right you can buy things you can put things in there you can buy things from there right we put the movies to the store right once we put that there if we now go back to movies component right we just now grab from the store we grab it from that store that is it that's happening here what do you guys think about that does that make sense does that make sense kind of iffy yes or no raise your hand if it kind of makes sense right yes yes yes okay good i know i know it's a little bit iffy to fully understand redux it takes a few days it takes a few i mean sometimes takes a week to fully understand it okay but we have the movies which is great all right we have those once we get those of course we need to replace the static images now right now how do we do that well that's pretty simple we can do that by doing a wrap a basically a loop through them so we'll do the following we'll do let's see this so we'll do movies movies so we'll check if the movies exist right and then if the moves exist we'll say like this movies and we'll say this movies.map check this out movies.map okay and this will take in a movie okay oh actually not not like that taking a movie and it will actually no come on there we go thank you all right and the wrap is actually the wrap which is currently directly the wrap is what the wrap is this right that's the whole thing right instead of doing it here we'll put it inside here okay all right there you go okay all right so what's going on here this functionality says hey if movies exist then you can go ahead and proceed with doing something about it right but if movies is null because in the beginning with the when the page load the movies is null right we haven't gotten it from the database yet once we did get it from the database we simply just loop through it right here that's it that's it all right and as we loop through it we use a map function to loop through it get the movie and let's now actually get the movie data right so we'll say the following the source image remember how we can so log the source image let's go ahead and remove this portion don't need this instead it will be what movie dot what card image okay let me go ahead and just oh do you see what just happened right here guys look at that look at that just like that it just worked right see right we loop the moves can you hear me jesse that's amazing yeah i can hear you beautiful beautiful right so it's just all working the way you should be let me make sure that i want to give it to you there we go awesome can you hear me jesse okay good you can hear me yeah i can hear you yeah yeah and what did we just do here like i said we grabbed the movie from here and i'm going to console the log it's all the log so the long movies okay like right click there's an aspect element right this can be oh no console oh something happened each child okay we'll take care of this a second but here are the movies right we have the id we have the subtitle right and what we use from the movie is we use the movie the card image right so if you look at it here the card image so that's what we used that's how we said card image right here card image you see that's exactly what we need to use right there all right and honestly that's that's pretty much it all right but of course we're not done yet so a few things i want to fix together here it says here you see how there's an error that says here well each child each child in a list should have a unique key prop what does that mean well redux underneath the hood tracks all of these components all these components right if there's any changes that happen to them but it tracks them through a key like a unique key and to give a unique key we need to do something like this we'll say key is equal to and we need to give a unique key and what's the most unique thing that we have about a movie what is it put in the chat what is the most unique thing that we have about a movie individual movie object it's the id that's correct so we'll say to get the id well actually we'll we'll grab the index here i mean you could do move that id so we'll say movie here movie dot id that's it so save that boom let's see inspect element and let's see if the error appears still let's see console okay that's the old ear so if i refresh this oh yeah no air you see no more ears now it's all working perfect the way it should all right so we have done that portion we've grabbed the movies from the database they're in our possession we have it all right only thing is left at this point is when i click on them i should be able to go to a detail page so i can see the evangel movie uh object basically that's the whole goal about this right right there and of course let's go ahead and remove all all these uh simpson's ones because it just looks like our disney clone is full of simpsons that which is not the case so let's go ahead and do this so rap let's remove all these simpsons don't need that byebye that's funny all right save that oh just happened i just removed all notes right here there you go all right save that okay good good good no more simpsons thank god i mean nothing is sepsis i love simpsons guys okay nothing in simpsons guys all right next up uh what do we have is let's go ahead and add our code here so add uh add grab movies from db we'll put that into our github save beautiful all right all right number two that we're going to work on is let's look at the detail page so we need to create a link here when i click on this specific thing i should be able to go to the detail page of the specific image of what i clicked on so the specific right movie uh won't be that hard we will use react router down for that as well and the way we do it is something called a link so we'll say a link here so import import link we've used previously but now we're going to use the link portion of it link right here okay from what react dash router router and really with a link is basically it surrounds the object with an a tag honestly that that's all it does we can do that here so i will say inside the wrap i will say let's link it we'll do link like so boom put the image inside the link of course okay save that put it like this okay and link to what specifically this is where we need to specify we'll link it to what well how do you think we're going to link it well we have the detail page let me go to the app.js right inside here we have detail page but what if we passed in a detail slash id a lot of times we will do detail slash and we'll do give an id like this oh come on rocket i don't need you right now right slash id and this id is going to be the parameter we pass in into our detail component all right let's go back to movie uh yes movies okay and we'll say link and link two link two and we'll give it the link so here's the link right so let's think about this right we'll say it's detail so slash detail right right detail slash what the id of the movie so right here we're going to use template literals then movie that id right there so all it will tell us is it will link us to the detail and then the video movie id right so we're going to loop to every single movie and get the id from the movie and then put inside the link towards the detail page and honest honestly that's that's it that's it we're done with that portion it's as simple as that let's go and right click this i want to show it to you guys right click on it inspect element look at this you see this ace draft tag right here look at this see this no this one here right there detail page and this 30a y is individual link to the movie if i go to a different movie the link will be different because of course the id is different right so this is 530 aui this is 5n and honestly that's pretty much it that's all we got to do that's it comprendo that's it right so if i go back to here we have our link right there beautiful okay say that okay save that right we have that all right so now if we click on it it should technically take us a detail page okay are you ready for this are you ready are you ready i hope you are let's go so click on it oh let's go look at that it took us directly the detail page but of course it's not the correct image still right so like it's not the correct one so it's just the same one but the reason why that's the case is because if we now go to the detail page what right of course it's all static content right but look at this it's starting to come together really nicely as you click on individual movie right there it takes you to the page that you want us to take it to and honestly that's it that's all we need to know specifically look at that that's so good guys what do you guys think so far give me a thumbs up in the comments below if you guys are liking what you're seeing so far give me a thumbs up there we go beautiful beautiful beautiful all right all right now let's focus on the detail page right here okay um a few things since we're passing the id you see how here we have the id that's the id okay all right we need to capture that id because we need to get grab all the data about the specific movie so here's what we'll do i'm going to say like this okay we're going to use use parameters from reagaradam so import import import use params use params from all right from what react dash router dom save it all right next one const and we'll grab the id this is the smart thing about react router dumb and knows this kind of stuff because we inside the app.js we told it that the what's going to happen after the detail link is the id it will save it actually in the parameter that's the cool part let's go back to the detail and we'll say use params use programs right there and we'll grab the id from it so now if i go go ahead and do console.log the log id it should technically that's it technically id let's go and inspect them on this one okay inspect them on this one let's go ahead and go to console where is it uh prop type the prop 2 is marked is required in link but its value isn't defined that's different okay there's the id right here that's all we gotta do see we got we grabbed the id that's it all right save it beautiful okay next up we need to again grab the data for this a specific movie right and we're going to use use effect so let's go ahead and go to react i'll say use effect here use effect okay again so let's do use effect because we need to grab the data individual data right right there and this needs to happen whenever we load the component the component the detail component specifically okay this empty bracket means call this functionality whenever you load the component i just want to make sure you understand that next thing inside here we need to grab grab the movies the movie movie info from db from database right there to do that let's let's import db from firebase import db from okay firebase okay and to grab the database the movies database we'll say db dot collection collection okay and with the collection we use is called movies right that's coming from a database directly okay beautiful we'll give it the specific dock we need to use so dot doc doc and the id that's it doc id right this is directly going to come back from here right it's kind of like telling you hey grab me the movie with this specific id right there dot then so once we get it we're going to grab it and then we're going to use it now right the dock is going to be inside the functionality here and what we need to do is we need to check if this dock exists so we'll say if doc doc dot exists meaning if found the specific document or the specific yeah the specific entry with that id we're going to use it now so if that exists we'll say what well we need to save the movie data save the movie data but how guys do you think we should see this inside do you think we should save inside the redux or do you think we should save it actually inside the state what do you guys think redux or state if you think it's going to be a redux raise your hand here okay everything is if you think it's going to be state raise your hand now what do you think or give a thumbs up it's actually going to be in state here's why because this changes for every single right page this changes right we're not going to reuse the movie data anywhere else besides on this page so we don't need to save inside you know the actual redux instead we're going to use state okay to use that we need to you do use state use state right there okay we're going to grab it so we'll say uh what is that what are we going to do uh do const right there const movie movie sub movie that's how we go ahead and then we'll say equal use state okay so you stay is basically like redux but for individual components okay for individual small components if redux is for the whole app okay and it's shared amongst all the components your state is basically for individual component so it's on a smaller scale okay and it was made for a few different reasons it just makes things easier sometimes okay and what we get here this is the movie that we will use and if we want to change the movie we use sub movie so in our case since we get the movie we'll do set movie right i will do doc dot data that's it save that all right okay and otherwise however if it does not exist for example let's just say that i don't know the movie does not exist we're going to basically redirect direct to home page for some reason let's just say it does not work out right well in our case let's go and check out what we do so i will say here consult the log console.log movie is movie is what movie right here okay save that all right check this out inspect them on this one let's go ahead and do console oh movie is object right there look at that boom right there so this id right this id give us a specific object we need right there this is the object we need holy moly that's so cool right wake up grab that oh oh that's not one okay i don't know what happened there so that's it once we have the movie right because again we use set movie to save inside the movie object right here once we have that now we need to use the that the uh the specific data right and now it's very simple inside here instead of doing a static image we'll replace that with a normal image so image source we'll say movie dot open movie dot what background image but background imager oh this save it oh look at that this is the exact movie that we clicked on guys the exact move we clicked on is that background image right next one image title will do movie right there right right we'll say what movie dot title image save that boom look at that guys now it's tangled you see how it's doing all right next up we need to change now this specific portion right this specific proportion so what does what is this going to be movie.what that subtitle grab it movie dot sub title boom right there okay oh wait wait wait wait wait wait wait wait wait wait wait i didn't spell right sub title which is going to be this one right here subtitle okay boom right there look fantasy animation and finally the last one's gonna be move the description so we'll say here movie right there movie the what description done that is it guys that's it our detail page is now premium is finished that's it look at and look at how beautiful it looks you see the steps we took we grabbed the id once we got the id we grabbed from the database right like i said so let me see look let me let's think about this here two we grabbed so here so here grab id grab id right then grab from db right and populate populate populate data or populate ui that's it that's all we did we grabbed the id from the top page we grab for you we used that to grab uh the data from database and then we populated you the ui that's all we did inside here honestly that's it beautiful that is all good guys are you still with me guys how cool is this you guys still with me that's pretty awesome huh you know with me yes yes yes yes yes yes beautiful beautiful beautiful beautiful all right next one let's go take a look at how this actually works let's go back to our homepage go back to our homepage i actually want to link the home page to it i should go back home because i'm getting tired of typing home i'll go incredibles oh can i help you back on the image of undefined let me go back to here let's try this here again oh interesting let's go to here i think i know this is happening actually i know what's going on okay i got it so here's what needs to happen here um in order to for this to fully fully work right again this use effect happens maybe a little bit later on of course right so basically it initially we don't actually have this data at first right this happens later on this is why we need to do a little bit a little bit differently and in the detail page we need to grab it with an id change so check this out now we have the id let's think about like this okay i'm gonna save that background movie that background image so here's a lot of times what i'll do for example the reason why it's yelling me is because the fact that we don't have the movie our disposal right now right we're trying to grab the movie background image but whenever we grab it from the database we're not actually getting it we're getting it a few seconds later that's kind of the issue here right so let me go ahead and look at this here for a second right there so so we're still grabbing these that's no problem right i think the probably comes when we go ahead and go this specific movie so let me go and click this again that's okay all right to fix that here's what i usually do it's a very simple fix i usually do like this i say if movie exists like this if movie then we say uh no no and end right there right there if movie exists only then do we get all this data look at this oh come on come on holy moly nas holy macaroni okay come on next only the movie exists do we actually show it in the database oh show it on the front right there we'll do it like this don't worry don't worry guys it's gonna be fixed okay save that oh come on give me a break okay save that um must be wrapped in enclosing tag you wanted jss i did want to do a sex fragment yes i did but oh i think i know why okay here let's do it like this and then this will be the closing tag right here there we go fixed there you go and i'll show you exactly what why this happened and what's going on and why we need to do this check this out okay good save that okay let's look at one oh look at that boom right there look at that boom boom boom oh let's go let's go let's go we fixed it guys we fixed this issue look at that that's awesome oh boom let's see we fixed the issue so what happened here guys very simple right well initially we got this errors because we tried to grab the background image for a movie that does not exist it's as simple as that right um does not exist because use effect it takes us a few seconds to actually grab the data from the database right so it takes a few seconds maybe like five seconds but to go to the actual page it takes as literally millisecond right and so when we actually are executing this while this is trying to get the data right here right this is already being preloaded and it's trying to move the background image which is now right because we don't have it yet unfortunately we don't have it so we're not going to do this will give us an error but what we did here is very simple we said if the movie object exists basically if it's this right here is not null right the movie object exists right then we will go ahead and execute and actually all put all this to your sex in place right and then we got all these errors because why because we need to put this into this is called like an um an empty like tag an empty tag i forgot what is called anonymous tag anonymous tag so it's not actually a div but it's kind of like a div right when you put it inside here you have to wrap it inside of one container and anything else can go inside it it's a little bit confusing on the react side but it's just some things like that you have to get used to unfortunately with react so uh yeah i know unfortunately that's just how the case it is you know but with it look we set the movies we save the data we got it if i go back to the home page boom right there oh oh so good oh oh so good look at that boom boom boom boom boom boom boom boom boom boom boom boom boom boom boom done guys how cool is this you guys still with me yes or no let's go yes you guys you are beautiful as always love you all very much now was that was understandable do you guys understand why we had all these issues do you guys get that yes yes or no give me a thumbs up for yes give a thumbs up for no okay all right and the comments as well guys on youtube as well too all right all right so we got that portion that's working now all fine no problem whatsoever let's now focus on the last part of our application which is going to be the login section this might be a little bit harder but i'm sure we'll be able to figure it out okay this is where now we have to use redux yet again okay we need to create a user kind of state management to be able to manage the user state and see if the user exists right if these exist we do this if it does not exist we do that right that's it okay let's go ahead and create a movie slice uh let's go ahead and create a user slice actually so a new folder inside features new folder let's call color user done right inside here we'll go ahead and do my bed we'll do user slice so new file new file user slice dot js done okay same thing here let's go ahead and import redux just how we did it inside the movie slice and by the way just a quick note the reason why it's called a slice is it's kind of like a slice of a pizza right you were creating all these reducer functionalities which are just slices of the big thing that's why it's called a slice yeah nothing complicated there import slice nice then create initial state so const initial state initial state all right and there are three things we're going to save first one's going to be name right okay and this is going to be empty and then we're going to save email right also nothing and then we're going to say photo right that's the photo of the person three things once we got that let's go ahead and create a slice so we'll say const user slice slice is equal to create slice create slicer create slice okay all right inside the create slice give it some values like name in our case it can be user cool and then we will go ahead and give the initial state right so our initial state is basically nothing nada okay bond done then we have reducers this is where we will get our reducers and a few things we need to do on here inside the reducers um few users the first one you need to create is called set user so site user login so we'll call it set user login and this will of course take state state comma what action there we go the second one is going to be which one which is going to be set sign out so set sign out because again when we sign out we want to be able to clear the state correct so we want to be able to clear everything here so let's say sign out right there we'll say state okay no action we're going to pass into here because nothing really happens and when we set to now what happens what do you think in the comments below what happens when we sat sign now it's very simple we say state dot name is equal to basically nothing again or no okay we say state state dot email is equal to null as well oh no boom and then we say state that state.photo.what photo is equal to what null 2 right beautiful now when we log in of course let's go and finish this one up again state.name is equal to what we're going to pass as i'm kind of action we'll say action.payload payload.name right there all right and then same thing is going to happen with these other ones right here so click there bump in this case email email and it will say payload.email right and then state.photo payload.photo right oh no that's not that one save that beautiful okay so a few things again sell user login to be able to log the user in we save the user data okay then we set user sign out so we should be able to sign the user out so that we don't have the date anymore and basically we can't show that application anymore that's it all right give me one second i need to go ahead and take a breath um so good so good okay okay after we've done that we need to grab all the actions right so we'll say here what i'm gonna do it like this so it's a little bit cleaner okay so again we need to export the actions because actions will allow us to dispatch them right so we'll do what set user login and then set sign out so here we'll say right there oh no that's not what i want come on no set user login comma set sign out is equal to what is equal to use or slice use a slice not what that actions actions right there beautiful actions action what actions are their actions make just measures plural all right after that okay we will go ahead and bring back the specific data so we'll say export right const and then this would be select select it's like what select user username user um i'll say username is equal to what state state state the user name right same thing is going to happen with these other ones but in our case we're going to do select user what user what do you think guys here user email here right because we need to select the email and we're going to grab the email from here boom and select user what do a photo right there and that's going to grab the user photo done all right and then at this point all we need to do is export the reducer so we'll say export export uh default so by default we export to reducer default default user slice that reducer done so okay all right and that's it we've created our react redux slice for just the user okay now let's tell the store that we have them so let's go to store the gs let's import it let's go ahead and remove this counter reducer because it's not useful at all there we go move this kind of reducer on unnecessary fully and let's do import user reducer from okay the features dash what user dash what user slice done okay and the same thing is going to happen here so say comma and then we'll give it a comma we'll say user here user user slice done all right so we were able to pass in all of that data and now if we look at here really no big error that's going on here we're pretty much all good on that aspect oh that's not what i want you sort you inspect element let's see yeah nothing crazy in terms of like actual areas that are going on here nope we're good beautiful that makes me so happy okay of course if i go to here it should be all good as well okay sweet sweet sweet soul so now in order to fully make this word we need to go let's think about how this works right we need to create a login button if we're not logged in right so let's think about this this will happen inside the header because remember if i go back to our app which is this app right here right let's go sign out you see the header changes right we have a login button right here right this right here and we need to be able to handle that so let's create the login button boom let's create the login button and that's going to happen inside the header header.gs oh right there okay all right let's see so what's going to happen we need to be able to grab the username the email photo and see if it exists if the user does not exist we show the login button however if it does exist we don't show the login button and instead we show the user circle does that make sense comprende all good yes yes yes yes yes comprende good all right all right let's make that happen in that case by the way let me see here all right beautiful wow so many comments are good going holy moly you guys insane all right beautiful right so login let's go ahead and create the login button in the case but first we need to of course need to import the select username all this kind of stuff so we can do that by doing like this import right here import select select user name comma select select user what user photo comma what select ah user photo do anything else username and user photo we don't need the email that's pretty much it okay okay from what from no that's not what i want from from the actual user slice so from the features features comma slash user slash user slice okay save that next thing of course we need to go ahead and import the the whole use selector thing so let's go ahead and do import import what use selector oh that's not what i want no use selector from what from oh my i forgot to show to you guys my bad my bad my bad on youtube how long was i on here i'm very curious well here's what we did guys i said i went to here uh all i did is i imported this right here so like username it's like user select user photo okay that's all pretty much done on youtube just so you guys know okay and then on the user slice i mean we did this whole user slide so hopefully you guys seen this i don't remember when i put it on here hopefully you guys seen that one that's the one we did create okay let's now go back to it was that long huh i don't think it was that long it was not no okay thank you just to use selector okay let's go back to hello yes from and we need to import that from react redux redux redux react dash redux that's pretty much it we had this redux we've imported that that's all we now need at this point okay let me see make sure it's all good here react you just use selector import that uh let's actually now use that right so we use selector let's go ahead and use that so we're going to grab the username so const user name is equal to use selector use selector and which one you're going to use well select username right here so select select user name right there beautiful and simply const user photo is equal to use selector no yeah so maybe on line eight yeah thank you jesse use selector okay we'll do a select user photo beautiful so i'll use your photo it's exactly what we need and now at this point a few things are going to happen so here's let's think about this if we don't have if we don't have basically like the you know the yeah if we don't have the user basically then we you know show login button and we can do that inside the nav menu so after the logo let's think about like this i'm going to create an ifelse statement so basically if there is no username user name oh this one if there is no username right if it does not exist then we will go ahead and show the login button so i'm going to say login that's it right log in right here and i'm gonna say login right this could be that's gonna be a stock component we'll create otherwise otherwise otherwise or show the nav menu this one and the user image actually i feel like those two things are important okay otherwise we'll show the user menu and the login so to make that happen we need to make it again we need to use this call anonymous tag like this right boom right so we need to put in the user image right there and then the menu inside there so heading that menu in here user image in here of course right uh to make it fully work of course we can't do that so we have to do like this we have to do parentheses close parentheses right there then open velocities oh hold on that's not right it's not right question mark so again if this is true we do this otherwise we do this whole thing understand that's all happens that's it okay so now let's go ahead and try this out i'm going to save this let's go to our app it says login and login is not defined exactly perfect it's exactly what we need to do so let's go to our login button so we'll say const cons login is equal to basically a const uh login is equal to style dash dash huh we'll make it a uh i'm gonna say let's just say a deal for now okay a div okay okay there's locking button right there you see perfect all right all right so at this point to make this fully work what we'll do is the following so let's go ahead and do that uh but the login button will do we'll give it a border radius let's think about this where's our login button oh it has like a border so let's give it a border initially so we have border one pixel solid looks a little like this one pixel solid good let's think about this border one pixel solid beautiful all right then within that we're going to uh let's see border then let's go ahead and give it some padding so padding 8 pixels right 16 pixels so 16 pixels on the left and right hand side save that beautiful that's a little bigger bigger button which exactly what i like all right right so we stretch it out let's give it a border radius now border dash radius radius right here okay boys radius beautiful all right that's gonna be border radius off of four pixels four pixels i like that uh so much better all right we're going to go ahead and let's go ahead and do letter spacing so maybe fix the ladder spacing a little bit spacing right 1.5 pixels okay just make it a little bit bigger and let's do tax transform upper case to make sure it's all up okay text transform transform right here right there uppercase bro good all right beautiful nice nice nice nice then we is need to give it a background color so let's give it a background color a little bit more of a darker side but a transparent background color so let's try that right here voila okay so it's a little darker darker background color okay awesome next thing on the hover of this button of this div right so let's do the hover so we'll say hover right here so now hover what are we going to do well let's think about this right on the hover we're changing kind of number one to white so we're kind of flipping the black to white white to black right so let's try that right now okay hover let's change the background color background color background color it's going to be more of a whiter color so it's going to look a little bit like this awesome and then the color of the actual text is going to be now black so let's see black okay all right and then border color is gonna be transparent as well so border color border dash color will be transparent parent uh rent be transparent there we go so let's go go ahead and hover this oh let's go beautiful but we're not done yet because let's give it a small transition so we'll do a transition here transition all 0.2 seconds right here now oh let's go beautiful let's also get a cursor pointer cursor pointer nice oh look at that beautiful that's what i'm talking about now of course so we had the login now how do we make sure that this login is kind of all the way on the left slash the righthand side that's actually a good question how do we make sure we do that how do we make sure that the login is all the way on the lot on the left and the right hand side what do you guys think because if you think about this right the login is here right i hit the logo here right is there anything we can do for example with i don't know uh with the nav what should we do what do you guys think we can do well here's my thoughts on this i think we should create a login container here a container here login container right here like this here's why i can put the lock inside here no problem whatsoever right but the login container look look what i'll do is i will go ahead and actually basically give it a flex of one that's the cool part i was able to do all right that's going to create long container underneath this one so we'll say okay const login container style.div okay check out this flex 1 lakhs one right no okay i know i know don't worry don't worry about this so here's what we'll do right it stretched out the whole div that's okay so here's what we'll do now display flex flex okay you see and then we'll do what justify content check this out justify content center or flex end justify justify content what flex end boom right there you see login now shifts right to the right hand side which is exactly what we need which is right here right there see just just i'm too good i'm too good so there we go we got we got that portion right there sorry i had to have fun you know i was proud of that it was pretty cool i did on the fly you know so okay so the login button is right there okay now what needs to happen is we need to go ahead on the click of this button we need to log ourselves in right now how does that work out well this gets a little bit more tougher guys all right so let's let's try this let's go ahead and create a signin function so we'll do const sign in sign in right here is equal to a function right and this is where firebase really it plays a big role here okay on the signin function uh well we need to import off here so let's go ahead and do that so this is where really we're going to use a lot of you know what does this react find render capability type i don't need that right here all right so let's go to import import we're going to use auth so import auth auth auth comma provider provider from firebase right from what firebase right there boom okay oh not import that from the from firebase okay now when we sign in the way it works is very simple i click on something and i will call a function that will sign me in basically so to make that happen i will say here off off dot sign in with popup sign in uh i'll have to do cleanly assign it in with no with oh this is one right right there send it with popup and the popup so biscuit is going to pop up something what provider right well we said in firebase we're going to use the google provider so we'll say provider here provider beautiful and then that then so when we say and assign ourselves in and it's successful we say we get the result and what result do we get well let's take a look at what we get here back okay we get a result and we actually let's go on the console log the result for now console.log the log result okay boom save that console.log result and of course we need to make that happen when you do unclick on here so on click on click is equal to what and we'll give the function the sign in function so sign in sign in sinai function okay so let's try that now so we have that portion done let's click log in oh would you look at that how cool is that ah guys holy moly right you click login pops up a button click classic level programmer right and let's see what we get back inspect them on this one what do we get back here let's go to console uh we get an object actually here look at this and this object has a user object let me show you so you guys can see it better right there we have a user object right here right there see and the user object has a lot of stuff including some ids but the coolest thing it has is right here display name email and there's a photo one here too for the url you see so we can actually use that fully we can fully use that to grab that data let's try it okay let's try it okay let's go back to here okay let's go back to here all right we have the specific portion all right so now let's go ahead and actually set the user data so we'll do of course console.log.user so the log uh user but um a few things we need to do because of the log no user is fine this is where you set the data in the redux to set the data in the redux to set all this username and photo and stuff like that of course we need to grab this from the user slice right here right because we need to grab the what the set user login so let's grab that right now set user login let's gonna grab that go back to our head.gs let's grab that from the user slice phone right there okay okay and then let's go ahead you need to dispatch it as well so let's go ahead and dispatch it too so that means me to import this patch that means we need to import use right here use dispatch use dispatch comma with use selector as well i want to use the dispatch so const dispatch is equal to what use dispatch use dispatch okay use this patch and then after that once we've once we imported this patch let's actually dispatch it so here we'll do dispatch right there right dispatch what well what we dispatch the set user login set what user login with what data was data right so we need dispatch so you should log in with some data about what did it be going to actually give it well that's going to be up to us to figure it out right let's do that right now we have name is equal to what let's do this right here say let user is equal to result.user right remember we got that from where from here you see right there right there so user resulta user is this right here specifically boom okay so now we do set user login okay and we say it's going to be name is equal to user dot display name boom again coming directly from the data here display name right here you see next up email okay user.what user dot email okay next up is gonna be photo so photo okay user that what photo url which is coming directly from where from here right there for the url right there so you see there's a reason for everything that we're doing okay boom so now if i sign in if i click sign in again technically i should have the nav menu appear in here technically okay let's go ahead and try that out so let's go ahead and see sign in all right so i should really kind of like what's going to happen is it's still going to dispatch the user login that's going to save it inside the global state once it saves the global state that means this will be right here updated automatically and once this is updated you see this becomes what not truthy but falsely and so it's going to show us a nav menu that is it let's go and try this out okay all right let's go and quickly log in boom qazi oh did you guys pay attention to that did you guys pay attention this look it just showed up oh let's go it's so good give me a round of applause everybody anybody am i just applausing for myself that's fine too that's fine too yeah there you go right so we got that portion working that's so good makes me really happy and honestly that is it that is it okay and once we have this let's go ahead and focus on the sign up feature so we need to be able to sign out as well right and the signup happens when i click on what when i click on this right here when i click on this i should technically sign out all right let's go ahead and do that okay so create a sign off function so we have consign in const sign out out is equal to right here right there it's always equals to a function all right and what's going to happen here is of course we'll remove we'll sign the user out and to do that we'll do auth ah dot sign out like so right and once that's successful we say that then function will dispatch a functionality will dispatch and it will dispatch what well user slice dispatch set sign out right that's the functionality you need to use that means we need to import it set sign out okay save that beautiful all right that's all good that sign out so this patch set sign out functionality and honestly that is it my friends and one small thing we can do is once you sign out all we have to do at this point is just simply redirect you back to the login page so let's try that right now now to do that we need to use something called history so we'll use here import import use history look use history this is part of react react router dom history from react dash router dom and the way you use this like this right i'm going to say cons history history is equal to use history history beautiful and all i do at this point is i say this history.push so basically after all is said and done i just do a history.push i had to say my friends let me see where is there was a reservoir where is it right there here i do history history that push basically and i push to the the login page so we'll say login that's it login page so if i sign out now we need to of course need to go ahead and click on sign now so let's go ahead and do on click on the user image so on the click of the user image we'll sign out the user so on click right there we're going to sign out the user and that is it i'm gonna click lose your image all right save this so we have sign in sign out that's all good okay let's try this now you guys ready for this are you guys ready for this all right boom something can run applause yay yay i'm pausing myself again dang it okay so log in all right kha'zix level programmer all right beautiful that's exactly what we just got right so okay now of course we we logged in now and what we can do is after you sign in right we can also after you sign in we can also dispatch you to a different page so let's go and do this so we'll say uh history.push now push what that push to where to the home page right that's it there we go so if i let's go ahead and sign out again okay i did that that's fine right let's do history that push to the home page which is this one log in causey clever programmer boom oh look at that you guys uh it's so awesome so look at that and then i click sign out again oh my god that's too good and then hey let's go so there is one issue here however and it's the fact that for example you see if i refresh this basically the user is gone that's that's the issue here and we can actually kind of fix that by by setting the user whenever we kind of like um on the header so the way to fix that is very simple and again the reason why this happens because the state is gone the state is gone once i refresh the page the state is gone that's it sayonara bye bye baby that's it we're done right so to fix it we're going to use off on state changed right and we're going to use use effect with this one too so look at this we'll say use effect use effect right here i'm going to say auth off on state changed so we'll say use effect use effect right there okay okay we'll say basically on the change of let me see when you first log into the page right here when you first log in we'll do the following we'll do off auth dot on odd state changed okay async we're gonna grab the user and basically it's gonna be really simple right all that happens here is the user exists right there right because here's the thing um firebase remembers the user in cookies in a cookie and so that's where we get this right here right it remembers the user in the cookie and so we say if user user then we do what then we do again we do dispatch like the site user login again dispatch site user login again and then we do history.push dot push dot push home page down there we go uh oh this is more important right there boom that's it there you go so you see let's think about it if i refresh now you see you see the user is actually being set right there you see when i refresh this over here the user is being set if i sign out i sign out i send it back again classical programmer let's go let's go here oh look at that guys that my friends is pretty much it we have finished with mo well all the functionality we wanted to get done in disney plus clone you can my friends you can sign out you can sign in anything you can do pretty much so sign out log in right kazia clever programmer beautiful right there click on individual movie watch the movie go back oh god let's go yay that's what i'm talking about we have one last thing to do that we're going to try right now is we're going to try and deploy it actually as well i think it's actually deployed it's deployed on our side if you want to go ahead and deploy it on your site if you want to try it out because anarchy has actually deployed already so um if you want to deploy it it's not that hard if you want to deploy it just go ahead and let me see let me show it to you on your side deploy it right do firebase deploy deploy deploy right with react right here right find that right here there's a really simple explanation how to deploy a firebase application right you do firebase login firebase in init do hosting that's all you got to do right from that point on all you have to do is when it says where is it was there is a default firebase project for this directory you select your project you created after that you do firebase deploy and honestly that's pretty pretty much it all right that's all you got to do uh so yeah that's how you deploy a bar than that guys that's it we are done we have our app fully built let's go ahead and log in yet again here kaiser cloud programmer so who's still with me who actually was able to kind of finish it with you was anybody able to finish the part partially with me anybody here anybody no anybody or you could oh giuliana you did let's go juliana beautiful beautiful beautiful beautiful so guys those who are on youtube let me go and bring you guys up on youtube i see all so many comments it's insane so many comments awesome thank you so much for the amazing amazing support i see all you guys on youtube right now holy moly we got a great crowd there great crowd there hello hello hello hello thank you so much guys that is it from us a very important let you want to let you guys know okay uh we went ahead and we just opened up cart for profit with javascript okay we just opened the card and we've actually lowered the price just for today okay just for today for profit javascript so if you're interested in joining okay we have a onetime deal literally happening right now and the price goes up in a little bit okay if you're interested we have a link down in the description we went ahead and we just opened it up link down the description if you're interested go ahead and join is this is for people who want to become serious this is where people who want to become developers if anybody you want any one of you here who want to become a reaction gs developer if you want to be a javascript developer if you want to be a full stack developer right this is the program that we have here with over 2 000 students we have students who are basically for example jen she got a job making 96 000 000 dollars at her new job we have for example rishi got a react gs developer job making 55k right after joining our program we have for example frank he got a react js contract for a hundred and fifty thousand dollars we have for example uh kelvin i got a reactions job making 60k right in one year or so so the list goes on and on and on and on and for those of you who are interested yes you on youtube if you're interested we have the link down below it is very very just for right now the price goes up very very soon okay so i highly recommend you join in while you can because the price almost never goes down to this price point never and i say it because we value our product so much and we love to give the community the way it is so if you're interested go ahead and join below link is down in the description below okay guys other than that that is pretty much from me on youtube uh let me see do i hear the link description i think i have the link description i'm not gonna get deadly description thank you awesome guys that is it for me guys other than that hope you guys have an amazing day hopefully you were able to follow along with me hopefully you're able to follow along me out of that that's it i'll see you guys in the next video this is fun this is a lot of fun oh it's so good oh my god it's all good mmm so good tacos are so the best i'm i'm so hungry oh yeah