Hey guys, what's up? How's it going? This is Qazi from CleverProgrammer.com. In this video, what I wanna talk about is should I use and learn Scratch before jumping onto Python? So, without any further ado, let's jump right into it. (bouncy music) All right guys, this is a very important thing that we are going to be answering in this video and another cool thing we're doing today is actually I am live on Instagram right now and we have people watching this on Instagram and what I did is I went live, got this on one of the video ideas from the people on Instagram and then I'm making this live there and doing it here, so it's the first time, we'll see how it goes, but let's jump into it. So, should you use and learn Scratch before learning Python? Now here's how I would answer this question, okay? There's a long way to go by, a short way to go by. I'll try to give you the short way and then I'll expound on it. I would suggest, if you have extra time, that you do use Scratch before jumping onto Python. That is if you have extra time. So here's why I say that. Scratch is a visual programming language and it's made by MIT, specifically for kids. Now, when something is made for kids, it doesn't mean that if you're over the age of five, you shouldn't use it or if you're over the age of 15 or 20, 21, you shouldn't use it. It just means that it's very simple. So when you're starting something that you're new to, it's a very good idea to have it start off very simple. Then you can go on and add more and more and more and more complexity to it, and become better at it. But in the start, if you try to start off a little bit too advanced, you're gonna convolute things. That's why it's gonna get really muddy and you're gonna get very, very confused. So that's the same reason why I suggest people to start off with Python, and the reason why I say Python is because I know a lot of people are busy, they have jobs and they can't find a lot of time, so Python is the perfect intersection of something where you can be very busy, have little time and learn, and it's still very a popular language because YouTube is made of off Python, Instagram is made of off Python, where I'm actually live right now. Spotify, Reddit, I could go on all day, those are all made of off Python. Now, they're not made from Scratch, so Scratch will have its limitations. So if you're short on time, Python is the way to go but if you have a little bit of extra time, you wanna put in those extra weekends and start of with something before maybe even jumping onto something like Python or something more serious, Scratch is great, great, great to start off with because you can visually move blocks of code and understand how ifthen statements work and you can see it visually happening. You can visually understand how while loops work or how for loops work because you can visually use your mouse to move it around and actually see the things happening in the form of maybe animations or whatnot, and there are tons of Scratch resources online, lessons online, YouTube videos online for free that can help you get started. So yeah, Scratch is a great place to start. I highly recommend it. And never try to put yourself like you're above something, like, "Oh, I've done this coding language for one month "and so I'm above Scratch." It's very good to go a few steps lower, really learn the fundamentals really strongly, and then when you are going up your limit, you will be unbounded how far up you can go. Whereas if you have really weak fundamentals, you'll be very, very, very bounded. You'll have crazy limits to where you can improve. Those are the same people, when they get hired by companies, people hate working with them. They're like, "John is an idiot." No offense if there's a John watching this but they're like, "John is an idiot." Because John got this job, he had the knowledge, he got this job, but now John can improve, John can learn new things fast, John primarily works off of like rote memorization and the things that he just kind of like new and picked up on, but not new problems that he could solve because his building blocks in his foundation was weak. So Scratch will give you a very, very strong foundation to start off from, and everything you'll be doing later in programming languages will make a lot more intuitive sense to you. And whenever something makes more intuitive sense, that's when you can get really, really good at it. That's why when kids start and they get started very young at something and just start of with the very basics, that's why they become so good that nobody can match them. It's not because they started off with some highlevel theory or a textbook at their school or at their college or whatever. It was because they started off with these really, really, really baby basic building blocks and spent a lot of time with them and that's why when they start getting better at it, they just smoke even old people, even really intelligent people. Their neuroplasticity level is also much higher when they're younger, but even regardless of that, they just learn a lot faster and it's for that reason 'cause they just spend and play around with the basics so much. So if you spend time playing around with something, it's gonna be a lot more intuitive to you and you're gonna get a lot better at it faster. And this rule that I have, which is play, build, learn, it's my 80/15/5 rule instead of 80/20 rule. So, 80% of your time should be spent playing with something in order to learn it if you wanna learn a new skill and get better at it. 15% of your time should be building things with, so building projects or real things you can show people. So if you're learning Scratch, 80% time is just like messing around, toying around with it, 15% of the time should be spent maybe building a project with it or building a little fun game with it, and then 5% of the time should be spent just watching tutorials and taking down notes and actually learning. That way, you'll learn so much faster and then you'll also have a lot more motivation to sit through and learn 'cause if you have no relevant experience and you sit down to learn something, it's very boring because it doesn't connect with you. Like imagine you never kicked a soccer ball in your life and then you started taking a class and the class starts off, a teacher standing there on the blackboard and he's like, "Okay, step one. "Step one, you're going to..." So the way that teachers teach you, it's really, really boring because they're just writing down notes on a blackboard or something like that. And if you're learning something like soccer and that's how you start off, is it gonna be 1) fun, but even forget fun, is it gonna be relevant? Is it gonna be helpful? It's not even gonna be helpful. It's just gonna be a pure waste of time. What's a lot better to learn soccer? Kick the ball, play around with it, 80% of your day, spend 15% of the day just making up random tricks that don't even make sense, and then 5% of the time actually watching a tutorial video or actually watch a teacher give you notes on how to make a play, what different positions called, your LW, CB, center back, all that. Then what happens, everything makes sense. It's fun. The reason why it's fun is because it's so, so, so highly, highly relevant. So, not to go on a tangent but let's go back. That's why I think that if you have extra time and you wanna start off with Scratch before you get into another programming language like Python or Java or JavaScript or C or C++ or whatever, I think it's a very good idea. Hopefully that answers it for you guys. Hopefully I didn't miss anything. If I did, please comment down and let me know if you enjoyed this video that was very hard to make. My arm is very tired and my friend who's helping to hold the camera is very tired too. If you enjoyed this video, please give it a thumbs up. If you disliked it, then dislike it but I do want you to take action. Please don't just leave it ignored. Subscribe to the channel if you loved this. Hit that bell button so you can get all the notifications, comment, and other than that, thank you so much for watching. As always, I love your faces off and I'll see you in the next video.