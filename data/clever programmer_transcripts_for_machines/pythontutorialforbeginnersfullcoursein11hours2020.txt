what is up welcome to python 2020 tutorial this is going to be the tutorial of the Year this is a straight up Banger so my team and I we were thinking about why we should do a tutorial on something like this we see everybody making these boring tutorials we want to make something epic for you that hits home that teaches you all the skills and the freelancing skills that you need to know and something exciting so if you don't want to be bored you want to learn something epic start watching this just like we recently made one for JavaScript that is killing it and we dropped one for jeno boom you guys seem to be eating it up so we thought why not give you something more something epic here's the python 2020 help us help me make this the best Python tutorial on 2020 enjoy in this tutorial we're going to be covering the complete Basics and fundamentals of python if you're a beginner you're in the right place you're totally fine we're going to be covering everything from basics of python to building projects like tictactoe twillo texting app we're also going to build the Craigslist app clone loone that one is going to be pretty amazing and you're also going to be building a todo list app with d Jango so we're also going to be learning web development in this tutorial and at the end of this video if you stick around I'm going to be giving you the python freelancer guide of 2020 it's pretty epic real quick before we continue smash that like button help us beat the YouTube algorithm by literally going and smashing that button we're trying to get to 10,000 likes if you could help us do that that' be fantastic what what's up this is Ki from clever program.com right before we jump into the meat and potatoes and we start the training I do want to let you know if you want to become a freelance developer I have a threepart master class for you it's absolutely free it's one of the best it's in the description below it's free go enjoy it you have nothing to lose sign up once you put in your email we give you all three videos go enjoy it with that said let's jump right into it what up you guys this is Aaron and this is Frankie get rid of that and thank you for watching the python 2020 course um what we want to say is that we have another python course hosted on teachable which is a cleaner and better platform for learning things I think YouTube's kind of just like you know the YouTube's it's a free private course and we released it just so you could further solidify your python fundamentals so all you have to do to access to the private course is just go down to the description click on the link pop in your name and your email address and you'll be good to go so definitely check it out yeah guys we have more than 62,000 students registered in that course already so it's helped a lot of people um everything's going to be condensed into one particular website so it's going to help you a lot knowing what classes you already took from this course and whatnot and you can just access it whenever you want just click the link below and register with your email and we'll see you guys there peace peace hey you what is up this is ky from clever program.com in this Python tutorial for absolute beginners we are going to cover everything from A to Z step by step and I'll also even show you some tips and tricks to become a freelancer and I also have a special gift for you at the end of this video we're going to start with very simple Basics which is what the hell are variables in Python so let's get started now in terms of installing python there's something easier for you that I have and recommend if you want to install python locally on your computer and you're crazy about that this is a video to watch but you don't need to install python you can actually get started without it so go to reel.it repl.it I've also put this in the links below where you can click I'm going to give you access to all of my code as I code it and you can then go and make changes to it whatever so go to rep it you're going to T go here type in turtle and then when you click on that we're going to start coding okay so now basically what's going on is you have python open and we're going to talk about what variables are okay so variables are very simple I can say a is equal to 5 and then if I do print a print just means show and if I run this thing it's going to show me in the console it just says five okay that's all that it is now if I do B is equal to some string like this anything that's within quotes it's just called a string okay it's just a fancy way of saying quote all right now if I do print B and I hit run what do you get you get hello so on the right hand side you can see what it's showing so I'm like this is my variable a this is my variable B and as you can imagine the point of a variable is like see also don't have to remember stuff right so for example if you had a variable like credit card and it was some crazy number that you had to remember uh you don't have to remember anymore you can just say print credit card every time hit run and it would print out that number so cool now let's uh do something else because I how I want to teach you python is in the fastest way possible and the most practical way possible and I also want to show it to you in a way where you can actually learn visually cuz I think that's the best way to learn so to get the visual step started that's the that's the reason why we're using something called uh Turtle okay and I'm going to name this uh what are variable okay plus Turtle okay I'm just going to name it that okay cool and now what we're going to do is we're going to do something cooler with variables so let's say we say KY turtle is equal to turtle. Turtle like that make sure you capitalize it in the right places you put the dots in the right places you put the parentheses in the right places cuz if you get that stuff wrong code doesn't work code breaks down it's uh you're talking to a genie with incredible power right so if you're talking to a genie with an incredible amount of power you need to speak its language so computer is like a genie with unlimited Powers but you got to speak to it and you got to speak to it very precisely which is very important so with that said now the ky ky turtle is there let's go ky. turtle um kiore Turtle my bad kiore turtle. forward and we're going to say go forward by 100 now I'm going to click on result instead of console and I'm going to run this program now that I I am going to do something with the turtle turtle is going to be this graphical way of for us to learn so at the top we have to write something called import Turtle okay this is very important now that we do this this code will work I'll say KY _ turtle and how I'm autoc comp completing it is when it pops up I just hit tab it autocompletes it and I'll do turtle. forward 100 I'll hit enter and you can see the turtle just moved forward right the turtle goes like eh when I do turtle for that forward 100 now what if if I did Turtle do right 90° okay so turtle. right and I do 90° watch what's going to happen the turtle is going to move forward and then turn so what did it do it went and then it goes like this all right that's what you're trying to do you're trying to make it turn 90° and now the cool thing is that I can just go like this like this hit enter like this and now the turtle what did it just do what turns around and go now if I want to make a square I give you that as a challenge to do that's a challenge for you to do right now pause the video and see if you can make it a square a full Square all right now unpause the video and let's go so basically all I have to do my friend is I copy this guy hit paste I run it again and now the turtle goes popop popop popop popop it turns around goes pop pop pop pop it turns to the right again and it goes pop pop pop pop 100 okay so what are we going to do we're going to repeat that same step one more time I'm just going to go ahead and paste that line of code twice again and Watch What Happens boom boom boom boom and the square has been completed how freaking cool is that so not only have you learned what variables are you've also got started to Learn Python visually and that's going to be the really important fundamental building block for when we learn IFL statements and when we learn functions and when we learn all this other advanced stuff what's going to be super cool and super dope is that we're going to be learning it all visually so if you want to make 10 squares we'll just write this loopdeloop and it'll make 10 squares in a row right and uh that's going to be pretty awesome I'm excited for you as always I love your face and I'll see you in the next video Welcome Back to Learn Python programming for complete and absolute beginners so thank you guys for jumping in here now what we're going to do is we're just going to go to the next step all right the next step is I'm going to show you how functions work it's going to be super simple to understand you know how variables are used to remember certain things like credit card number what's really cool is you can use functions to remember lines of code so for example this over here right what do all of these lines of code combined do when I run this program if you notice the lines I'm highlighting from 13 to 20 well what are they really doing right what they're actually doing is making a square so I'm going to write something called a comment all right comment is something the co computer code doesn't care about like for example let's say I write something like this right my code will break it'll give me if I go to the console it gives me an error it says name comment not defined everything breaks but if if I actually put a little hashtag here it knows it's for humans and it won't break my code my turtle Square still gets made so I'm going to make a comment and my comment is just going to say this is a square okay now if I run this it'll make a square and anybody else who's reading your code will go oh I understand what this piece of code does but what would be really cool is instead of like if you wanted to make another square right what would you have to do you would have to copy all of this and then paste it here again and then run the code but that's not such a cool way to do that so what we're going to do is do a cooler way of doing that so we're going to create something called a function all right so I'm going to go Define and I'm going to call this function a square and uh we're going to hit enter like this now there's four spaces here okay which you need to pay attention to when I hit enter it's indented and the indentation is really important because all of this code is part of this function okay that's the idea and now literally what I can do is uh I can actually copy this entire Square code and paste it in here and I can certainly remove it from there okay make sure you highlight all of this and hit tab to indent it so it's all part of this function okay it's all part of that for functions to make them show up you have to call the function just like you have to call the variable so here we just defined the function but now if I do square like all right so we have square now when I run it if we go to result let's go to oh whoops uh we misspelled it again let's go Square oh Square man that's bad all right so now that we've got Square you can see that the square actually goes and gets made so now what's really cool is every time I just say Square it'll make that square okay so for example I can say square and then I can say turtle. forward and I can say 300 so what it's going to do is going to make the square and then it's going to walk forward by 300 and now what I can say is I can just say square like this and hit enter all right so now it's going to make a square walk over 300 and then make essentially another Square oh it's uh starting that Square from the start which is not what we want because we don't want a new turtle to be made every time we run this code we basically just want the same Turtle but who keeps making squares basically what first thing we're going to do is we don't want the turtle to keep being made over and over again we're going to pop that uh the kazzy turtle all the way at the top okay and then what we're going to do is we're going to say kiore turtle turtle. forward and then we're going to say by 100 okay now when I run this check it out it makes a square and then KY is going to go 100 forward well what we can do is make it let's say 200 forward so it should make a square and then it should go Sprint 200 forward and now what we can do is basically make another square like this and hit enter so now it should go make a square go 200 forward and then make another Square all right it kind of looks like glasses if you look at it sideways or whatever that's what's really cool about leveraging functions because it makes it easier to recall your code it makes it really easy to understand your code and read for people because if you had those eight lines of code that were really repetitive it just kept saying turtle. forward 100 turtle that right 90 and it kept doing that well now you defined it in one spot and you can just keep referring to it so functions are super powerful super cool and you can do a lot a lot a lot of things with them okay that are much more complicated than what I'm showing you but Simplicity is very important when you're learning in the start so with that said thank you so much for watching if more videos are going to be coming out they're going to be teaching you all of this lastly I have all your notes in this one called how do functions work so this is the URL for it just in case and if you go to it then you can have access to all my code you can just run it use it however you want and it's also going to be in the descriptions below so you could leverage it okay with that said thank you so much for watching I love your face and I'll see you in the next video hey what's up guys Aaron here from clever programmer again so today I just want to go over this cool little module I found called calendar in Python it's pretty nifty I actually haven't seen it before but I stumbled across it I just want to share it with you guys today this might be a shorter video I just thought it was really cool what could it achieve so yeah let's jump right into it first let's go to my ripples up in our Ripple it as usual and create a new repple I guess the button is up here now it used to be a little red plus sign in the bottom right but they they uh seem to have changed that go down to python is this Python 2.7 have I been using Python 2.7 all this time where's Python 3 hold up you guys python here we go all right unacceptable unacceptable uh let's just call this calendar module so this should be Python 3 if it specifies Python 2.7 then yeah if it doesn't say then it's Python 2.7 but if it says just python then it's safe to assume that it's Python 3 because that is a standard nowadays so make sure you click on python not Python 2.7 like a dumbo like I did okay let's uh continue on create this Ripple in Python 3 and now we can get started so this little module that I found is called calendar lit literally just calendar like e ar ar got it I can never spell that word right but that's how you import it okay import calendar and with this you can do a lot of cool little function calls I actually think this ties into a couple other modules later on that I will explain but for now let's just go through this module and then I'll mention those at the end again and then maybe you can guys you guys can go and do your homework and tie tie some things into it and like play around a little bit and learn that way that's the best way to learn after you watch these highly entertaining videos to a very small subset of people um so let's let's just start with calling some functions so this going to be a bunch of little cool functions so let's start here let's go calendar. week oh calar er. week header okay I'm just going to call this function with a two all right so what this will do is it gives us the headers of a week so a week is just like you have a Monday Tuesday Wednesday all the way through Sunday right uh python starts the week on a Monday so we're just going to assume that a week starts on Monday here okay guys so when I run this what should pop out are the week headers after calendar is um download it so you can all this stuff here is just uh I actually don't know what this is just ignore it whatever but down here is the output okay this is what we what we wanted the week headers here have been printed out nicely for a week we have Monday Tuesday Wednesday Thursday Friday Saturday Sunday and this two here that I put in um signifying the length of these headers so actually if I put a three in here then we hit run then suddenly what is going on here is available uh okay it seems to be working just fine just ignore all this stuff sometimes computers complain a lot like somebody who bickers a lot um but uh yeah so you see down here how now each of the weak headers actually is of length three instead of length two if you put length one does that work apparently so yeah you just have the capital letters here but I'm going to use three because I like it being more descriptive it's just more appealing to me so that's the first the first little function that you can do with python I'm just going to add a new new line there or 90 new line Kabam Kaboom okay uh the next one is calendar. first weekday so this one's kind of useless but I'm just going to throw it in there because huh why not all this is going to do is going to tell us what the first weekday is so Monday is zero Tuesday is 1 Wednesday is two this is three four 5 six so the first weekday is Monday so this is actually just going to print out to zero uh this could actually be useful later on I realize now because there's some other functions where you need the numbers of the day instead of the actual string to do different things so this might actually be useful for that and then you can just add numbers so if you know first week weekday is Monday then you can just add one two three four or five to it to get the other days let's just print this out and see what happens as you can see Zero prints out because Monday is the first the first weekday and and Monday has a index of zero so nice and easy there let's wrong editor over here let's add another new line uh an empty print statement will just have an empty line there so you can have some nice spacing here so it's not all clumped together but yeah let's continue on so now things get really really cool it almost seems like you're a magician here like typing in Magic so the next function that I want to go over is month so all you do is you literally just call calendar. Monon okay calendar. Monon that's it all you have to do is put in a year so let's put in this year 2019 and the month so it is janary February March yes I still caught on my fingers but it's March the third the third month so let's put three here so it's March right yes it's March uh if we print this out this will actually print out the current month so let's see see how this this looks and would you look at that it says March 2019 you have the Monday Tuesday Thursday Friday Saturday and then you have all the days here of the month pretty cool right it just spits this out in a nice nicely formatted string for you automatically okay um I believe there's actually some other um variables let me find it for you real quick uh print calendar or actually I I'll I'll I'll leave that up to you guys to be an exercise you can actually find the python documentation on month and actually go in and try to find out how what variable there's another parameter here you can add here because if you notice all these weekday headers are only two letters long but I wanted them to be three three letters long you can actually go in there and find the correct one it might be like M or something or something or C something like you would put something like that in but go and go practice finding it in the documentation and from there you can figure out how to read documentation which is a very very useful skill because there's no way you're going to memorize everything in any language or any framework you're always going to be looking up documentation and Googling stuff to figure out you're going to be constantly forgetting constantly learning but getting good at knowing how to figure stuff out that's the skill you want to develop so go look in the documentation find out how to fix that and fix it for me okay yeah like don't make me do everything all right because it's probably just not a good idea um so that that's there figure out how to make all of these um three letters long instead of two so that's the month function now another cool thing we can do is actually um get this month in Matrix form so let's see what that would look like calendar the function I believe is um month calendar okay just like that and then you just stick in the same parameters so yeah the only change here is you literally just change the function call to month calendar rather than just month but uh that should be it there let's run this and see what happens and as you can see see down here this Matrix got printed out so this might not mean anything to you um but if you look closely this is actually a matrix a a a twodimensional array I believe of this exact number array here so these four zeros is these four empty spots here this Monday Tuesday Wednesday Thursday at the beginning that doesn't have anything in it and then this one two 3 continues here and then the second list in the multidimensional array is actually this and then the third one is actually this see how that works so it's so you can actually instead of just getting the string like how would you get all the data out of the string you can actually just get it automatically in an array nice and clean like that just by calling this function month calendar instead of month very useful if you're actually going to be doing calculations on dates and stuff which is something you're probably going to have to do if you ever want to schedule something like schedule your computer to run this thing on like schedule your computer to run this python script to automate this thing to launch this program to do this thing to hack this system to to text your friend to do something you know what I mean you can do whatever the heck you want but you're going to have to know um calendars and times and whatnot to schedule those tasks on your computer and so that that's where I think something like this will be very useful and come in handy like that so that's why I'm touching on this now kind of ties into a new product we have coming out called how to automate stuff with python more on that at the end of the video but um that is that for the month and the month calendar functions now let's go on okay another cool one is what if I just want to print out the entire freaking year well Tada you can do that too Cal well assuming you get these words I wish there was a better auto complete on this editor here because I can't type uh correctly a lot of the time but anyways um it's not going to be year as I thought it would be but apparently if you look up on the documentation which will tell you what it actually is you're actually just going to call calendar. calendar okay just like that and then we don't need a month because it's we're trying to print the entire year not just um not just just a month so you just put in just the year just like that and then when I hit run you will see magic happen Okay click run and Kaboom look at that the entire freaking year is printed out super prettily you got the year at the top 2019 you got January you got February you got the entire month headers the week headers here Monday through Sunday you got all the days of the year all 365 or 364 if if it's a leap year I I don't know how that works um but hey I think that's the day that I fell off the bike fell off the bike in front of my crush yeah February 27th anyways um uh what else what else uh what was I saying I got off track here uh print yeah printing out the whole year so this is very very handy now you might be wondering okay if we had if you could print out the entire month and we we could get the The Matrix for the for the month then can we get the Matrix for the entire year uh no I thought the same thing I was like okay cool so you can just get like a a really really big like threedimensional array of all of this crap but apparently you can't for some reason I don't know what that was some weird weird prompt popped up just ignore that somebody was hacking me I think it said RAF so I think uh I think K's trying to take over this tutorial from a remote location over there but anyways uh you can't actually do that but what you could do is you could iterate through every month and then get the multi multidimensional array yourself and then construct something like this for an entire year on your own that's another little exercise you can do so why not go and try it I haven't tried it yet but I'm sure if I put 5 10 15 hours into it I could figure it out but I'm sure you guys can do it in 5 10 15 minutes if you uh look up the that that calendar. month calendar one that gives you the array and then just try to iterate and make a for Loop and iterate over every month that would be cool a cool little exercise okay um moving on what else do we have here you can also get uh there's a cool function here called day of the week but it's actually the function actually called we oh that's the variable name I gave it because that makes more sense so day of the week okay that's what I want my variable to call remember selfdocumenting code turns the ladies and the gents on all hot and bothered you know if they're into that kind of stuff but um this this function is just going to be called calendar. weekday and then you just Chuck in the year and then you Chuck in the month and then you also Chuck in the day of the month so today is the to the eth man today's the eth right eth okay we popped that in there so month uh year month and day and what we're going to get here is remember how I said up here when we have the first weekday Monday became zero what it's going to print out is actually in integer that corresponds to the current whatever weekday this is so today is actually a Friday so that's going to be Monday is zero so again counting on my fingers laugh at me if you like uh Monday so Tuesday will be 1 Wednesday Thursday for it'll be four it should be integer four that prints out from here okay let's head run and I did not print it I make this mistake all the time apparently I never learn now let's run it and boom four right there exactly what I thought four actually means Friday so we can actually put any year so let's put in freaking Year 3000 and see what see what happens is it still going to be a four it's going to be a five so apparently in year 3 3000 um March 8th it's going to be a Saturday I mean we're all not going to be there we'll probably be on Mars and Pluto and stuff thank you Elon Musk you're awesome but yeah that's how that that function works um what else again probably a useful function for when you actually have a date and then you want to know the weekday to schedule it like oh I want to schedule every Friday or something or every Wednesday you could use this to filter out the integer somehow and figure out the dates and just you'd have to problem solve and think about it I don't even know what problem I'm trying to solve with it but if you're trying to schedule things on a calendar like this seems like it would definitely be useful and I'm sure it is because it's in the library and most things in the library are useful not everything but I mean most things um but moving on there's a few more so there's also a function that will tell you if a year is a leap year which is pretty cool so let's go calender do is leap and then what is this year 2019 I don't think it's a leap year so when we again oh I caught myself you guys I need to print this is Leap I didn't screw up I'm learning just like you guys learning just like you guys so apparently 2019 is not a leap here cuz it comes out false but I think 2020 is so let's run that and hey what do you know yeah so every year um every four years there's a leap year if you guys didn't know that which just means there's one less Day in February for some weird Cosmic reason there like the astral Gods got pissed off and they decided to troll us or something I don't know but I mean every four years um there's a leap here so this this can tell you um if a year certain year is a leap year or not which is important if you're calculating days like CU those will add up like every years you're off by a day you don't want to be off by a day okay you you don't even want to be off by a second when you're when you're coding you want to be very precise with everything so it's very important to be very clear about what you're trying to do and get done and then get it done 100% cleanly because even 99% there's a little room for air and then it'll break it'll break sometimes you don't want that you're trying to always go for 100% so it's best you can it's not always possible but that's at least the idea okay guys so yeah a little trick here uh everybody knows well I know that 2000 was a leap year so you can kind of calculate okay every four years 2008 2004 2008 everything up there if it's an if it's a factor of four then you know that it's a leap here from from year 2000 cool stuff now moving on um I think there is only one more function that I saw that was cool to actually play with everything else is kind of nittygritty um they might be useful in weird weird cas if you're actually trying to problem solve but now I didn't feel like showing it on a video on YouTube you know like I I'll I'll dig it up if I'm actually doing a project and it's useful to me but it it's just boring like it would just bore you guys more than I am right now so the last one is how many leap days so this is exactly what I was talking about how you don't want to be off by one day every four years if you're trying to calculate over a long period of time whatever you're trying to do especially if you're doing um actually I had an internship where there was a guy who did a lot of he was an astronomer he went to some big school I forget this was years ago but he was doing astronomy and did a lot of coding for big astr astrological things I I don't know big Cosmic thing whatever the word is I'm not an astronomer sue me but basically when he's doing calculations on that scale like years and millenniums and millenniums those leap years really really add up so you actually need to know how um those little tiny little things change you need to be like that precise again because when you're on that scale even one day will screw you up so very important but this this little function here is how many leap days and then all all that it it does pretty much is um it tells you how many leap days are in a range of years so let's say Let's uh collapse this a little bit so we can see so from year 2000 to year 2001 uh this might be exclusive or inclusive I'm not exactly sure but we'll test it out that's usually the best way to figure it out it's one or the other just try both and then you know the answer like it's almost faster than Googling sometimes just like oh try it try something else and then and then you know so year 2000 was a leap year remember that 2000 that little 2000 trick I use and 2000 or 2000 was a leap year 2001 is not a leap year because it only happens every four years so this should print out as one okay when I print this hey guys I'm learning I didn't forget it again how many leap days let's print this very last one out click run and it says one so cool it it picked up that uh year 2000 is a leap year 2001 is not so in this range from 2000 to 2001 there was only one Leap day that was skipped or added I don't know I don't know if they added day or subtracted day I think it's I think it's added day it doesn't matter it's irrelevant but you like you get the point um let's see if this is inclusive or exclusive so the way I would test something like this is actually put in a year that I know is a leap year so 2004 so I actually know in my head that 2000 and 2004 are both leap years so there are two leap years in this range but that's only assuming if this is inclusive it might ignore this year and actually only go 2000 up to 2003 so now when we run this if we get one or two it's going to actually answer our question of if this uh function is inclusive or exclusive on the the second parameter here this 2004 so we'll hit run and it's one so it turns out that it is exclusive so actually it ignores 2004 so if you want to include 2004 you'd actually actually have to put 2005 just like that or any bigger one so now it should print out two right guys right right all right so hey look two right we're all right we're all we're all right all right all the time always right right right and then if if you wanted to put in maybe like up to 2020 remember X exclusive so it's not going to choose uh not include that and we hit run then we'll probably get four or five or something yeah that sounds about right and Year 3000 should be about 250 because there's a th000 in there 243 close enough um interesting actually maybe there isn't a leap year every four years maybe every now and then it skips because it should have been closer to 250 it's 243 though that's interesting maybe every now and then there's actually a leap year every five years Google it for me guys posting the comments that's a that's a cool little fun fact for you guys but yeah that's pretty much it for the calendar module I found this uh this morning I just want to make a quick or long video on it long video um but yeah it'd be very useful for uh scheduling things and whatnot there's also a module called date time and time which I have used before import date time and import time these libraries so what these are is you can actually um I think this gives you a date and a time so you you might actually be using this a lot more in um the our hot to automate stuff with python course coming out in a month or two um date time but a calendar would also be useful for making it more legible I believe I'm there's probably some way you can leverage it and I'll find a way to leverage it if I don't then I failed and I'll go jump off a curb or something um but yeah so date time and time are also things you can look into and there's actually some functions in calendar that actually interact with these other two modules that make them like they're in interoperable that's a term in programming where you can have two different Frameworks of two different program languages that are interoperable like you can actually embed like Java code in Python programs and embed python codes in Java programs which is pretty cool so you could actually say that Python and Java are interoperable like fully interop they have full interoperability it's I use a lot of big words because they're normal to me but I'm just going to I'm just going to say them and when I catch myself then I'll explain them so you guys know what the heck I'm talking about okay cuz it's just jargon that we use in this community cuz we want to we want to feel smart when none of us are um we're all human we're all dumb by default so never feel bad about that okay but yeah so check check out those other two modules um that's pretty much it I was going to mention we do have a new course coming out called how to automate stuff with python I've probably said that three times already but it's a really cool course about how to automate things on your computer using python so you can make python work while you sleep it's doing stuff for you while you sleep you could have it send emails for you like 10 days from now or every Monday send an email to these sets of people um you could be like okay I want to fire this person 27 days from now um his name is Aaron and I'm going to go on K's account and I'm going to fire him in 27 days exactly cuz I don't have to deal with it so I'm going to go on a trip for 27 days schedule it and then boom he's going to get that email he's just going to be gone it'll be great it's perfect so like stuff like that you could like make like little personal um little personal schedules to do whatever you want but uh that's kind of the thing things we're going to be working about and how to aate stuff with python and that's pretty much it um for this video guys please stay tuned I will see you guys next time I love your faces off I stole that from KY and I will yeah I'll see you guys next time that's it thanks for watching goodbye get the hell out of here kzy you're fired leave that in bye guys hey welcome back to Python tutorial for absolute beginners in this video we're going to be talking about how to use IFL statements with python so thank you for coming back let's pick it up right where we left off so in the last video we talked about like yo how do we use functions and we learned okay we can make a square but now how do we use if L statements and add some kind of conditionals okay so what we can say is if elephant body weight or elephant weight is greater than ant weight then you know make a square okay so what we're going to do is I'm going to have a elephant weight and um I don't know how much they weigh at the top of my head I'll just write uh 3,000 I imagine 3,000 lb if they're probably less or more I don't know then I'll have a ant weight and uh ant weight will be like uh let's say I was going to say 20 but they're not 20 lb let's say uh 0.1 lb I don't know what how much they are so cool we got elephant weight and we got ant weight now we'll say if elephant weight is greater than ant weight then make a square all right by the way we're going to commment these out so these lines don't work just to show you what that looks like is uh you know I'll delete uh this I'll delete these two lines for just a second I'll hit enter and you'll see that the result nothing actually happens and that's kind of what we want right now with that said I'm going to move forward and I'll go like this okay so if elephant weight is greater than ants weight then make a square just logically thinking about this what do you think should happen do you think it will make a square or will it not make a square take 3 seconds 3 2 1 good job you're right it will make a square because elephant weight is greater than ant weight okay so I'll run this and I'll break down actually what's happening behind the scenes for this statement to run this statement must be must evaluate to a true statement okay we're going to speak more on Boolean logic later but everything must evaluate to true or false So when you say 3,000 is greater than 0.1 it will return to you an answer so for example okay I will comment these out and I will say comment this out and I'll say 3000 is greater than 0.1 okay and I'll say print so it prints a result of it and I'll go to console and console it says say true all right now if I do 3000 is less than 0.1 it will say false all right it evaluates to false so if this evaluates to so going back to our example right if this part turns out to be true then this part runs the square runs okay so in other words if I change this to true and I run it then the square will run but if I change this part to false like like so like this then it won't run so either you can have true or you can have false those are the two things you can have okay so what we're trying to do is make it so that it ends up um the the statement gets evaluated and then something happens okay so if elephant weight is greater than ant weight which is true then it makes a square but what we can say is otherwise you know uh don't make a square and instead just do cy. turtle uh forward 100 something like that okay just go forward 100 if that's uh not the case but as you can see elephant weight is greater so it's going to still make a square but what if I flippity flip this what if I say elephant weight is less than ant weight meaning ant weight is greater than elephant weight what will happen if I run this well what you'll see is is going to happen is that instead of running this statement over here it's actually going to run the L statement now where this could be useful is you can say something like if you're making IG clone later at some point you can say if user has a profile picture then show their profile picture if user does not have a profile picture you can say something like then show the anonymous picture icon all right that's what happens when you go to Facebook or whatever you can say if the login credential of the user on Facebook is accurate then let them log in if not say incorrect password and have them try again so those are some real world examples of how if L statements are used everywhere but what I gave you are some simple examples you can use right now uh the link to this code by the way you can access this code right away and uh if I hit share right there's this link and this link you can copy from the description below you can also just paste it in like how I'm showing here and once you hit enter you can play around with this code do whatever you want this is going to be the best for you to learn and have access to it and uh I always suggest just use repet that way you don't even to install Python and make it work so but if you want to install python I have a video you can watch it okay so with that said thank you so much for watching at this point uh so please subscribe to the channel and hit the Bell notifications it really helps out the channel but more importantly for you it's really amazing is because any types of tips tricks or motivational tips I'm uh bringing out for python developers or how to make a higher income go from low you know high five figureure income to six figure income you'll be able to learn that so subscribe to the channel cuz I'm bringing the Heat this year I'm excited also like the video if you liked it or dislike the video if you didn't like it I'll see you in the next video hey you welcome back to Learn Python programming for complete beginners in 2019 the latest edition we're going to talk about wild Loops okay and basically wild Loops are different kinds of Loops but Loops in programming are you can keep doing stuff over and over again without having to write code over and over again in the next video we're going to talk about something called for Loops in this video we're going to talk about something called while Loops okay so while Loops you don't know when something is going to end that's when you use while Loops for for example okay I don't know how many pushups I can do so I can write a while loop and I can say something like while kazy not tired keep doing pushups basically I can like go like this and just basically keep going right this is like a wild Loop like if I'm doing pushups right yeah this is part of a wild loop I don't know how many I stopped okay while loop is over over so basically it's something like I would write in code while Cy not tired keep going and then when KY tired stop what might that look like right and I can go while kazy Turtle okay let's say kazy is equal to happy okay so while kazzy is Happy keep making the turtle go forward and then as soon as kazzy is sad stop the turtle from going forward okay so while Kazi equal equal happy right then I can say turtle kazy sorry turtle. forward by let's say 10 okay so keep going and I'm pretty much going to comment out everything else because uh I'm not going to be using it right now okay so let's run this code and let's see what it does it just keeps going unless I stop it okay so I have to click stop otherwise the while loop will run infinitely and I'm going to run into something called infinite Loop okay so let me try that again it's going to if I run it again you can see it just keeps going keeps going I have to stop it otherwise my computer is going to crash but if I change this to KY is sad okay and I run it it's not going to run it has stopped because it goes well check if Ki equal equal sad and this statement is going to either evaluate to true or false and because it evaluated to false cuz Kazi is not sad kazy it says is happy right here it goes oh I'm sorry I don't know what the hell you're talking about and two equal signs means that you're checking something with another thing okay so for example um let me hit um comment on this comment on this and comment on this if I do 5 equal equal 5 it's going to say and I go to console and I run this what is it going to say nothing because I have to write print so let me make sure I write print and I run it and you can see over here it says true all right so that is true it's this is a this is called the uh equality operator it's checking between two things this is the assignment operator so if I do this this will give me an error because they'll say you can't assign five to five all right that's an error but I can do a is equal to 5 but I can't say 5 is equal to 5 but I can check if five is equal to 5 all right just like this is a operator for checking stuff as well like hey it's five greater than five is 5 equal to 5 is five less than five so on and so forth okay we're going to go more into this later but this is an example of a while loop it's something that can keep going unless the condition changes okay unless the condition changes and there's a way to stop the while loop as well you can write a statement like break and break out of it but that's something I want to show you guys later now I'm going to keep the wild Loop part simple because the next part I'm going to show you is going to be why you should be using four Loops majority of the times almost all of the times and while Loops a lot less you should really be using wild Loops if you don't know when something's going to end so an example of that would be you know I told this in one of my courses but basically I said there was this one time where I was on an airplane and I was sitting next to this girl and I was like you know what's the best way to pass time so I created this game called tic tac toe and I thought okay how can we keep playing until it ends cuz every time we would play this game of tic tac toe rock paper scissors it would come to an end then I have to have to run the program all over again so I wanted to do something where it kept the game going until I specifically said quit the game okay so this way every time we would finish a game Rocket paper scissors it would just start the next one next one until I hit Q so for that because I don't know how long we're going to keep playing we can keep playing for 10 minutes 30 minutes we ended up playing a 100 games so for that it was really useful to have a I wrapped the entire game in a while loop so the key the game can just keep playing over and over again I had the whole thing in a while loop so the game can actually keep playing over and over again that was the really awesome part about it and that's how you use wild Loops in real life and in this video I just gave you a little example of it in the next video we're going to cover four loops with that said thank you so much for watching if you enjoyed this video please give it a like really helps out the channel subscribe to the channel hit the Bell notification so all the upcoming new videos come straight to you come straight to your face you're going to enjoy them you're going to love them as always I love your face and I'll see you in the next video hey you welcome to Learn Python programming for absolute beginners in this video we're going to be talking about how to use four loops with python and let's jump right into it so basically for Loops the idea is that you know exactly how many times you're going to do something right now first of all let's start off by commenting some of this stuff out and um let's do something like this for I in range five print I okay and if I run this in the console you'll see it'll print 0 1 2 3 4 okay so it'll basically start from the beginning from zero go all the way to four because when you say five coding in Python it a computer starts counting from zero so if I said 10 here it'll go only up to nine okay and uh that's the power of a for loop we're telling it how many times to go now what I can do is I can say for I in range 10 okay or I can say for count and then I just have to change this eye here to count as well I can say in range 10 basically I'm saying do something 10 times okay that's all I'm saying here do something 10 times what if I want to make a square 10 times or what if I want to make um a square two times I can say two here and then run that function remove my print statement like this and hit run and in result it'll make a square and and then you can see it goes and makes another Square immediately so that's pretty cool okay if I wanted to do it three times I'll just do for count and range three do it three times so let's see what happens holy that's pretty cool huh let's do it four times and let's see what we get I mean this is exciting and I think Turtle we can improve its uh we can increase its speed too so wow we just made a window and let's go here I think there's something called turtle. spe or something so let's do speed 100 I don't know if that works there we go it worked okay let's do 50 much faster 30 cool I think if you keep it at 15 that should be fine cuz that's pretty fast but it still lets you see what is going on so now we got the turtle we've changed it speed speed and because of a for Loop we can make it do something however many times we want so that's the cool thing about a for Loop most of the times you're going to be using a four Loop all right that makes things easier for you if I wanted to do something more again I would use a for Loop so my question to you would be what if you wanted to make you know four squares or 10 squares could you do that could you try and I challenge you to do this could you try to make another shape instead of a square but have it be done a different number of times a eight number of time eight times all right give that a try and I hope that's going to be exciting for you so with that said thank you for watching this video this was just a basic introduction to how for loops work with that said please like the video If you enjoyed it click the Subscribe button because we're going to be dropping a lot more epic stuff on this channel coding tips tricks tutorials but also also lots of freelancing tips as well for python other than that thank you so much for watching I Love Your Face Off subscribe to the channel as and as always I'll see you in the next video hey what's up guys Aaron here from clever programmer and today I just want to make a really really quick video about primitive data types in Python so let's get started all right so primitive data types what the heck does that even mean so first of all there's a thing called data types in Python which is um just a way that the computer can understand data so there's different types of data that the computer needs like it needs numbers for math it needs sentences to display stuff to the screen and it needs um a couple other things like there's a long list but there are four primitive data types that I want to go over okay four that come packaged with python immediately they're called primitive because they're the most um primitive like Elementary base level kind of data types that you can use like literally just numbers like the number one the number two the number 3.5 or um the word hello or something like that just something very very basic there's not like a crazy amount of stuff in there okay and then U one more called Boolean which sounds really weird sounds kind of funny Boolean b o o l e a an but let me just type these out so you can see so there are um first of all there's numbers I said there's four types so there's numbers this is actually split into integers okay um then there's floats which is just short for floating Point numbers and floating Point numbers are just decimal numbers because of the decimal point floats around that's why they're called floats a little bit weird um and then there are strings which are just sentences okay and then then there are booleans which are just um a yes no kind of thing true or false so those are the four primitive data types I'm just going to go over this so integers are going to be one two 3 4 five you can just uh do math of these like 1 plus 1 equal 2 and whatnot uh you have floating numbers so this is like 2.5 uh negative 03778 like numbers like those like very very um exact numbers and then you have strings so strings I said are just like sentences um but they're always enclosed in quotation marks that's all you need to know for right now okay quotation marks so you have like um yo how's it going like that it's just a sentence um but it's enclos in quotation marks so um it's a little bit the distinction a little weird I'm actually going to have a video that's explain strings more um but uh if you have four like this this is not a number this is a string okay so this is a string that's all you have to know if it has double quotation marks or single quotation marks it's just a string that's all you need to know when you're actually coding on the computer just know those are strings and then booleans last are just like this you only have two options true and false just like that and what these are is they just evaluate um to or um that that was a big word well what they are is it just allows us to be like okay should I run this chunk of code yes or no should I run this chunk of code yes or no and that's why booleans you need a yes no kind of scheme in coding instead of just numbers okay so that's um everything so strings can be anything you want floats can be every number that exists inures every number that exists but booleans can only be true or false okay and these are the four main primitive data types in Python um that's it for this video guys uh I'll be going um into more detail on python in the next few videos but uh thank you for watching and yeah stay tuned I'll see you next time hey what's up you guys Aaron here from clever programmer and today we're just going to be going over casting uh you don't know what that means yet but I'll explain in a minute let's get started okay so uh last time last video I believe we talked about data types now all Casting means is we are going to be casting from one data type to another data type so let's say we had a integer had one and we wanted to cast it to a floating Point number 1.0 you could do that just by throwing it into this little casting function thing it'll actually turn the integer into a floating Point number so let's see how that works so let's say you have a one okay okay X is one and then I want to make x a floating point so we could just put uh I believe float it's a function it looks like a function uh it's called casting though and then you can just put uh X in there to get 1.0 out or you could even just put one in here same deal the same thing happens okay uh so that's basically what uh casting looks like um you can pretty much cast any data type to any other data type that makes sense so for the primitive data types you can cast you can also cast integers to Strings so let's try this if we have an integer just one if you wanted to um cast this to a string you just put Str Str like that you put a number inside and then when it prints it's actually a string you can see the quotation marks here same deal if you want to cast from um a string or you pass it to the in function but if you want to cast a string let's say just string with a bunch of G's there we can cast it to an uh actually what am I what am I saying stupid me if you want to cast so that you wouldn't be able what to cast to an INT because the computer would actually be like what the heck are you trying to do cast that to an INT so if I run this you get an error so that's actually good I made that mistake it's a little example for you guys but if you actually put a number in here like 34 um and then hit uh enter to cast it then you can see that python actually knows what to do with this string and actually follows through with casting it to an INT so casting is kind of this weird thing um you it doesn't work all the time but you need it um to change between data types like if you want to display a number so actually what's happening one good example is in this print function you can only you can only print strings to the screen you can't actually print numbers so when I put a number in here five what's going on in the print function is it is actually being cast to a string five the number five is being cast to the string five before it's actually being printed and that's why this five pops up here okay um also booleans you can kind of um cast that it's not very common so you don't really need it but it's also a thing you can do I believe if you cast uh an INT if you cast uh an INT to a bullan I think zero is false and anything that's not zero so a one negative 1 and every other possible number are all true okay so that's pretty much casting it's for casting between data types in Python and pretty much every programming language but that's how you do it in Python uh thanks for watching you guys a short video today and I'll see you next time hey what's up you guys Aaron here from clever programmer and today I just want to explain strings a little bit it's a data type in Python and yeah let's get started all right so strings what the heck are strings in Python well I mentioned this in a previous video about uh data types that um all I said was that strings are just um things on the screen that are enclosed in quotation marks okay so let's just havep s for string so anything in here like hello ma'am okay anything enclos in quotation marks here is considered a string that's about all I said in the previous video but um what I actually want to go through is the distinction between this and the integers and floats and other data types so a string literally is just whatever whatever um is typed on the screen it is exactly that okay like the the the string is literally that data it is that sentence there a good way to think of a string is just a sentence it's a a a string of any characters numbers and symbols okay in a sentence so you can have anything you want there as long as you want it can be empty it can have one character it can have an entire novel entire ebook in there it is just considered one string and um it is its own data type because it is considered one whole it's that entire sentence together is is the very the thing that I'm putting into this variable s here as you can see that entire thing is there and it's just it is what it is a little bit hard to explain but it's just exactly that so um you can move this around you can you can print S as you can uh as you can see if I run this then hello ma'am pops up just like that because this stuck together as a whole and um yeah pretty much you can you can also index into this so let's say I want to print um s uh so this little bracket here what this means is I'm going to index into s so if this follow if this is following s and I put a number in here this is just going to give us a little part of the string so this here um we start at zero we don't start at one in programming so we start at zero this would actually just give us H if I put in a one it would actually give us e so you're actually able to read uh different parts of a string you can actually read different ranges in the string too but I'm going to explain that at a later date in a different video It's called slicing if you're interested in that um to get something to get a substring out of here a substring is just um a small part of a of a of a longer string then you can look that up but uh I'll have a video coming out on that going really really in depth with that later if you just want to wait for that but yeah um that's pretty much strings um there's a lot of different functions on strings you can call too I'll also be going be going over those uh in future videos um but pretty much all you need to know is that a string is just something inclosed in quotation marks you can also use single quotes I forgot to mention that if I didn't already say that just like that that'll work equally as well um but yeah a string is just that it's just a sentence a sentence that is together and that's the data type um thank you for watching you guys I'll see you in the next video hey you guys Aaron from clever programmer here and today we're going to be going over a special data type not a primitive data type called lists in Python all right so I'm in riplet here okay and um all the list is is just a thing that can hold a bunch of objects in it a bunch of things in it okay so what it looks like let's start there is is this uh let's just put a list of numbers okay one two three very simple so this here is a list if it's in closing brackets and everything is on and there's things in here separated by commas then this is considered a list um actually this is also considered a list if it just has one element with no commas but usually when you have a list you're going to have more than one that's the whole point so a list is just a collection of things in order okay that's pretty much it if you want to group a bunch of things together like you want to have a bunch of um just a bunch of numbers together a bunch of names together whatever it is then the list is what you want to be using so let's just see um what you can do with lists um first of all uh we have list L here um nothing's happening list L here first of all you can print out a list and just to spit out all its contents just like this it prints out nicely um with the brackets um um but also a list I forgot to mention it is not limited to just have having numbers inside of it you can really have anything you want in here so you could have a number here you could have a string here um sting you could have a um another string here with different kind of quotes and then you could have uh a float and then you could have a Boolean so we have all the primitive data types here represented we have an integer we have a float and you could even have uh another list in here as one of the elements of the list so in here we could just put 1 2 3 and this here this complicated list here here this list uh it doesn't know what it is it's trying to get his life together or something it doesn't know what it wants to be um has a bunch of different things inside here compared to this list which is very nice and clean okay very nice and clean where usually usually when you're using lists it'll be nice and clean like this it'll all be the same data type because you have a bunch of things together uh you wouldn't have it messy like this uh but you can do this if you want if you want to have a bunch of different data types the these are both um equally valid lists in Python okay okay uh so let's just print out L2 to see what that looks like put that there list list one and list two yeah I'm very bad at naming things uh Kazi is probably going to hate me for this but but uh as you can see the list printed out here just fine so this list here is exactly the same as this list that I wrote out uh including the sub list okay so um also what you can do with lists is let's just go back to list one list uh list one here yeah you can index into them just like you can index into a string um you can almost think of a string as a list of letters and symbols and characters uh kind of but not really but you can when when it comes to indexing you can like a list and a string are very similar because it's the same syntax the same you'd be typing in the same thing into your computer to index into this list so just like strings if you go if you index it zero in the list um since this list is actually let's use list two okay and uh actually this is a little bit confusing let's just change this so list list two okay list two list two just like that now that's a lot clearer for you guys understand so this here and this here is the same thing so if I want to index into this list here I would put a zero and this would actually split out this one here because this is the first element so let's run this and and as you can see the one prints out now let me just copy and paste this so you can see what's going on with all the other elements so if I wanted to print out element the second element the third element the fourth element or The Fifth Element and I run this you're going to see all of these print out on separate lines because I'm printing them out each separately okay so you can see oh I guess I missed this last one here let me just pop that in there so you can see what that looks like and I run this then um this is uh then it's indexing into each element of this this list two list um individually and printing out each one so uh list is um very useful for uh holding things together but sometimes you need to actually do operations on list uh lists so that's also something you can do in Python uh there's a lot of functions and or methods um that you can that you can run on lists to do different things to them like you can add to lists you can take things away from lists you can insert into one spot in the list you can sort a list if it's a list of numbers or something you can even vers list so that it goes in the reverse order and I'm actually going to be going over a lot of these functions right now so just um stay tuned for a couple seconds and I'll get to it all right so we talked about indexing into a list um let's talk about the most common one actually is adding an element to the end of a list so like if you had a list of names let's just put in here actually let's get rid of all this so it's nice and clean if we just had names okay a bunch of names let's just say Joe John at James okay James so this is a list of three strings three names all right and let's say I wanted to add one more name to this list like let's say this was like a this list was actually a team so we had like a team member of three people and we we wanted to add one more person to the team then we um we could just type it in here but I mean that's not really that's kind of cheating that's not really coding so how you would actually make the computer do it is you would um call this function called append um I don't really know what this word means I didn't know what it meant too before I started coding but append it's not append it's actually append append just means add something to the end it's just a word in the English language apparently and that's what it means but if you don't know what it means like I didn't then that's what it means so you can actually just add another name here so let's just say Gary okay let's um let's add some print statements here so you can see kind of the the flow that's happening names uh yeah print names and then I'll append something to it and then print it out a second time so what we should see here is this list print out once and then right below that is this print um this list print out with Gary also attached to it so a list will be one length um one element longer let's run this and yep as you can see that's exactly what happens so we printed out the list originally of names and then we appended Gary to the end of this list all right uh so that's what a pend is a pend is very useful because sometimes you don't care about the order of the list um you actually can I could have inserted Gary at the beginning of the list or somewhere in the middle I'm going to talk about that next um but usually if you're just putting a bunch of stuff together and you don't really care about the order um then yeah you can just use a pend very common so let's now let's try uh insert so if I wanted to insert Gary let's say at the beginning of the list instead of calling a pen I'd actually call insert okay not with two RS insert insert with one R all right and um the difference between this this and um aend is that if you're going to insert something um into a list then you need to know where in the list is going to be entered so actually this this function is going to be taking one extra parameter that tells us where we want to put it into the list so if you put zero comma Gary then it's going to put Gary in the first spot here before Joe and then it's going to shift everything over to the right you don't have to think about it you don't have to think about it as shifting just think about as just sticking it in the front and then everything else just does what you would assume it would do it would just shift over so let's run this and see what happens as you can see Gary here got stuck in the firste um the first position there also if you put in one then the same kind of deal happens Gary is actually going to pop up here instead and it's just going to like split the other parts of the list there um so that's insert I'm not going to go through the other two ones you understand how it works um doing this putting the very last one is going to be do the exact same thing as a pend pretty much um so you might be wondering okay why does a pend exist if insert exists um it's just append is just a quicker way to append something to the end of the list sometimes that's a common thing you do so yeah they they achieve the same thing but they're they're distinct functions so some other cool things you can do with lists is you can also remove elements um so if I want to remove Gary uh actually no Gary's not even here so so if we have this list of names here again Joe John and James and then print it and then I want to remove something from there then what you have to do is actually put in the name so this would actually remove Joe from the list okay or if I put this then this would actually remove Jon from the list this is case sensitive I believe so if I put a capital Jon then then this JN would actually stay in but if I if I ran this code then you will actually see that Jon is deleted from the list let's try that yeah you see John has disappeared from the list now okay um uh some some other things you can do are um sort sort lists and even reverse lists so let's do reverse because sorting sorting a list of names um I guess that would make sense you could probably alphabetize it I don't know if there's a function for alphabetizing that um but for like a list of numbers for sure you could actually uh sort it and I I I'll I'll demo that real quick but let's just look at reverse okay um reverse so if as you can see I I said that a list is ordered right so a list has a very specific order so that we know um which element we're talking about when we index into it it doesn't like have a random order or anything like um names at zero is always going to be Joe names at one is always going to be John James 2 is always going to be James it never changes um so sometimes because the order matters if you want to reverse the order which could be useful for something like let's say you wanted to have your names alphabetized and then you want to reverse it and then have your names in Reverse Al um alphabetical order then you could do that as well uh so all this will do is just uh flip this around so that James comes first and then Joe comes last and as you can see y this list got reversed uh got flipped around pretty much okay so uh let's just actually let's uh do sort right now okay so let's just have a bunch of numbers um 1 2 3 4 5 well that's already Ed stupid me let's put in a bunch of random numbers 6 4 2 9 12 okay and then let's actually we don't need any of this let's get rid of this if we have a bunch of numbers here A bunch of numbers here and then I'm going to print it out before we before we sort it numbers but if I wanted to sort this then I can just call this function sort okay and what what this will do is it'll actually sort the the numbers array into ascending order by default if you wanted to get it in decreasing order you could sort it and then reverse it so you can actually change these uh these functions together to do cool things like that uh what am I printing out numbers printing out that's what I was doing so let's run this and as you can see the the list 64 2912 has been sorted from um from the lowest number to the highest number 2 4 6 92 so the these are just some really common um functions you can use on lists um the main thing I want to point out here is yeah list is just a group of things you put together and there's a a specific order and you can index into the list wherever you want to read from it and you can also add things you can remove elements um it can get longer and shorter it's it's a very very flexible changeable kind of data structure and very useful for keeping things together um so those are pretty much lists uh one very common thing to do with lists though what the last thing I'm going to talk about is uh iterating over a list so I think we already had a video about for Loops in uh about for on for for Loops but uh you can iterate over a list using a for Loop by just using this syntax so for number in numbers um and then you can just print the number okay so you guys probably already know what this is you've seen this but as you can see the whole list got printed from this for Loop here um what I the reason I'm doing this is I want to point out that in a for Loop um and whatever is here needs to be in iterable that's just a fancy word that that says you can iterate over it so a list is iterable because you can iterate through every element one by one and do something with each one of those so in this case we're just printing it out to the screen okay so a list isn't iterable um it's the simplest iterable I believe and um yeah it just holds a bunch of things in it um together as a group and that's pretty much all you guys have to know for that um that is it for this video uh thank you guys for watching and I will see you guys next time hey what's up guys this is Aaron from clever programmer again um and today I just want to talk about something really cool in Python called indexing slicing and striding in arrays and strings so let's get started all right first you're I'm going to want to go to reel.it as usual so once you're here click on new repple and uh follow along please um why is python not popping up at the top that is just perverse anyways um so let's just name this uh what did I say indexing slicing and striding so that might not make any sense to you right now but I'm about to explain so um this is a really cool thing that you can do in Python um to play around with strings and arrays uh strings are basically just arrays um but yeah you're able to do a lot of cool things with it so I'll just jump right in um first let's start with a with a with a list so I'm just going to call this list digits and then I'm just going to put the digits from 1 to 9 here or 0 to 9 so there's 10 digits in here right and these are actually the same as the indexes of every digit that that might make it a little bit easier for you guys to understand so um once we have that there you guys should be familiar with uh simple indexing if you're not I'll please look that up real quick and come back but if you do then you should know that if I go like this digits at zero then this is just going to print out the first element of this array so it's just going to print out zero let's see if it does and that's exactly what happens same deal if I put in one or two or three or four um then I'm just going to get that same index back all right one thing you might not have known about python I'm not sure of any other languages you can do this in I'm sure there are but I don't think you can in Java or C++ or other languages like that um but you can actually use negative indexing so let's uh like what would that even mean like think about it for a second if you had a negative index in Array what what could that possibly mean maybe you could be like indexing through it and then maybe like you start um you loop around to the beginning again like once you once you uh loop too much like almost like like a mod modelist um but actually uh what python decided to do which I think is pretty intelligent is actually make it so that you count from the back of the list so um if we're index indexing with positive numbers this would be zero this would be one this would be two three so on so forth oops um but if you use a negative index let's just say negative one you would actually be accessing this last one so let's try uh print this out and as you can see the very last element is printed out if I put 2 again the second to last element is printed out eight so actually if I wanted to get the very first element using a negative index then you could actually just put 10 because there's 10 elements in this aray or even better just put negative um just use the length function like you guys know the length function if you don't then it just gives you the length of uh of um uh any list or uh string I believe I'm not sure if it works on strings but I think it does so yeah see if we do that then this automatically becomes 10 this makes it negative and then we can get the first element that way so you can actually call every element by two different names in Python that's really cool um it's very handy if you just want to get the last element just boom just like slap in negative one and you're done it's very nice and easy and and clean um another cool thing we can do is uh there's actually going to be a lot of cool action happening between these two brackets you can do a lot of stuff between these two um with like mult multiple colon signs and and weird weird little codes um but it's very very powerful for doing um different kind of um reading from arrays and strings so what else you can do do is uh let's stick a colon in here so what the heck does that mean all right so all this means is you can actually put a range um of an array in here so that means instead of just putting in like a single element you can actually put a range of elements so let's say if I wanted to just get the first um two elements or yeah the first first three so 0 one two um I would leave nothing at the beginning and then let's say we would end at um uh element three so it it'll go up to three but not include it so it'll actually give us this entire thing back instead of just one element so you can actually you can actually reference parts of the array in chunks and you can specify exactly the chunks you want so let's try to run this and see what happens uh exactly what I thought would happen 012 because this will start from the very beginning because we didn't specify anything here I think if you put zero the same thing would actually work yeah because it it starts from here includes this so this number is inclusive and this number is exclusive so this will print out everything from 0 1 and two um likewise I put it all the way up to 9 this will go from zero all the way up to eight so I would actually get from 0 to 8 here when I run it and yep exactly what happens so that's basically what slicing is in Python oh very useful if you just want to get like a chunk of it let's say you wanted you had like a name like a name in a string like maybe let's just pop this in here real quick name equals um first last just like that go like this and let's say I just want to pick out the first name you can actually um find the the the correct index so 0 1 2 3 4 5 and if I put 0 to five and you can actually just get rid of the zero because it's the same thing as nothing and I run it first prints out so see how you can get a different substring from that string um very cool in Python oh just get rid of this cuz I guess we don't need it um let's go back to this example so um also you can also um slice into arrays using negative negative elements so you can actually put in like a negative one like this um and this should be from the very um first element to the very last element but remember this is exclusive so it's not going to include the nine let's try that and again the same thing pops out um uh also I believe you can yeah this is one thing I almost forgot to do you can uh put a number at the beginning and leave the last the last part empty so that this will go from element five inclusive all the way to the end um note though if you put 10 here um yeah 10 index 10 here you're actually going to exclude it but if you just don't put anything at all you'll actually include the last digit so that's uh something to keep in mind there um what else can we do so I think that's about it when it comes to slicing um also uh another thing you can do is called striding so slicing is very simple you just put a um you have a chunk you can just get any any range in the array you want one zero up to all of it um but you can also do stride so that's actually going to incorporate two colons all right so what this means is you can actually have a slice here so let's say from zero to to 10 right or let's say uh yeah to 10 and then what the stride is is how many how big the jumps you want to be so if the stride was one we're just going to hop one time every time so it's going to go from zero to one to two to three to four to five to six Etc but if you put two you can actually skip so it'll actually jump and Skip from 0 to 2 to 4 to six so we can actually pick out all the even numbers this way let's try this I'll run this and as you can see we get 0 2 4 6 8 if we put in three then you'll actually jump in um in strides of three so you get 0 3 69 um you might not get the nine because this is 10 let's see uh oh it did pop up so the nine did pop up there Al so um those are basically what strides do um again you can use negative indexes here in any combination you want you can omit things things so if you emit the first one you're going to start from the very beginning including them this one if you emit this one you're going to do um include all of them all the way up to the end um also you could do something like this uh so this just includes everything this is just everything uh and a stride of one just includes everything but let's say you put a stride of two then you just get the even numbers or um or you could even actually use negative strides as well I I forgot um for a second but I believe if you put a negative stride what would that mean remember the negative index we actually um the negative index you would um start from the end of the array but what about a stride a stride kind of tells you okay jump in a certain direction at a certain jump so a stride of two you would jump in in um in leaps of two in strides of two You' keep jumping over and over and over or strides of three you jump over and over and over and over in strides of three leaps of three so a negative one um what makes most sense what the the people who designed python came up with was if it's negative go backwards so actually putting a stride of negative one you'll start from the end of the list and you'll go backwards so let's see how that works let's um right uh let's click run and as you can see the list gets spit out backwards so this is actually a cool little um thing that you can do in pi in Python to uh reverse any array or string just stick a little little negative one here um also if you put a 2 and you hit run then um the same thing happens it starts from the end and goes to the beginning of the array but it's going in strides of two hence the only numbers here um very cool uh one thing to note with negative strides is if you have negative strides and you also want to slice you need to make sure that this index here is on the right side of this index here so I can't put like index zero here and index five here because that doesn't make any sense how can I go from index 5 to index zero um oh sorry I have it backwards this way how can I go from index zero to index 5 going in this direction to the left it doesn't make any sense so you need to make sure that the stride direction if it's positive or negative that the slicing indexes also um make sense they're in the right order so you need to make sure that if it's negative then the the slicing is going to the left and then if the stride is a positive number then the slicing is going to the right so this would not work um this this would work but if we have a 2 then we would need to actually change these to five and zero so that we are going from five to Z in strides of two so it would be 5 3 1 and that's exactly what happens so um that might might have been a little bit confusing um they're very very uh useful Thing Once you figure out how to use them just play around with it a little bit I'm kind of rambling on a little bit here but if you just like pop in some numbers with these two colons and really figure out like what happens and try to predict what's coming out the way I did then it'll actually be a really good learning exercise for you so why don't you go in there and uh do some cool stuff like just play around get some sub strings um get some like subarrays and reverse some things and go in the opposite direction and just have fun with it all right so um that's pretty much it when it comes to indexing slicing and striding including negative numbers um but now I actually want to um do a little example where instead of just having numbers in these slices you can actually use variables so um one little cool thing that I came up with was if we just have a for Loop called 4 I in range um how many digits I have 10 yeah but let's just put length use a length function because that's uh more uh robust you're able to make the program smarter that way because it'll it'll automatically adjust so always use a length function instead of hardcoding numbers try to never hardcode numbers in your um in your code it's just not a good idea um when you are uh trying to make big programs so uh length of digits would be end up being 10 so for range and 10 10 let's try to um just print out digits from uh the beginning to I this this zero is optional but I just put it in there for clarity sake let's run this and um before I do though what do you think will print out think about it and I'm going to run it now and you'll see so you can ignore this this is from that first print statement but this is exactly what prints out here this uh weird cascading um thing here now think about what's Happening Here we are we have a loop with a with a variable I that um goes through the digits here from 0 to 99 and then each time we go through this Loop we want to print from the beginning of the list up to that digit so every time this Loop goes I is getting a little bit bigger which means this is going from the beginning to somewhere and then beginning to somewhere a little bit bigger and the beginning to somewhere a little bit bigger beginning to somewhere a little bigger and so on and so forth and that's why you get this you start at the beginning and then you go from the beginning to one and then beginning to two and so on and so forth all the way until you get to the end at eight so uh this is um a little bit Advanced uh putting putting variables in slices but you can actually do some really really interesting things when you um when you're doing like complicated algorithms and whatnot um putting variables in slices like this with strides and you could even put like equations in these slices and whatnot like like modulus signs and and weird function calls and stuff and you can put a lot in there and you can actually do some really interesting things when it comes to um grouping grouping together things so let's say uh one actually kind of advanced example that I came up with but I really want to show you guys it's pretty cool it's let's say I have so I have this list from0 to 9 here now let's say I want to get every group of three possible in this list so if I have this entire list I want to get 012 I want to get 1 2 3 1 2 2 3 I want to get 2 3 4 3 4 5 so so on and so forth all the way up until 7 8 9 all right but no further I don't want 8 I don't want just 89 I don't want just nine I don't want just zero okay so um you can actually uh let's let's start by writing a for loop again so for I in range um let's just go length of digits again let's just start there that's always a good place to start sometimes you have to like subtract one or two to uh get rid of some weird offsets but uh just start by using the length function always and um let's just try to print um digits at from I oops from I to uh I + 3 so let's think about this before I run it okay for I and range um the length of digits so this is this Loop is going to run 10 times because this list is 10 um 10 elements long then every time this runs we are going to go from the current index so whatever z um whatever iteration run so 0 1 2 3 or all the way up to nine plus three so the current index plus three so what is this defining here this this is defining a slice in the array okay um a slice in the array of size three but it's constantly moving because this is I and I + 3 then we know that it's going to be of length three wherever I is so let's just try to run this and see what po what pops out um let's comment this out so we don't the output doesn't get confusing boom boom boom run so as we can see the it almost has the correct functionality that we want uh 012 1 2 3 2 3 4 345 because you can see like these the first elements of all these of all this output these are actually the iterations of the for Loop and then we just added three to the to the end of the to the slice so that's where we get the second two following numbers after that so that's that's how we do that but what about this thing here um there's this eight n and nine but I I want to get rid of that because those aren't groups of three so let's think about that what could you do to get rid of those well you could just subtract two iterations from the for Loop right you could just chop it off just by putting a minus two in here a little cheeky minus two boom and you just get rid of those two and just ignore them completely but that's um not the best idea usually you don't want negative just the same way I didn't want to put 10 here I use length uh digits length of digits instead you also don't want to do a minus 2 or a plus three here even um just bear with me for a second uh it might make a little more sense once you see it so you don't want this 2 or plus three but then how do you get rid of that well let's just say I I said I wanted a window size right window size of three so let's do that now let's get rid of this so suddenly we can get rid of that three so this should run exactly the same as before boom yes it runs exactly and does what we want us to do and we actually specified the window size here so that's really cool but we still have this minus two here so what does what does that mean how do we get rid of that well let's think about what this two is really doing this two is um subtracting off two iterations of loop because there is a trailing um some trailing things like once these iterations over here happen there's not there's not enough digits afterwards to get an entire group of three so um what the key distinction I want to make here is that two is one digit less than three all right because let's say I put um actually let's get rid of this and I'll just show you guys if the window size was actually five so I now now I can change see see this is actually another good reason why you want to um have variables like this because you can just change one variable see I changed this one variable to five and then now I can actually change the window size to five so I can get these five and then these five and then these five and so on and so forth and chunks or even I can just go the entire array I can get all 10 10 elements at once um but let's just go with five and run this and see what happens so you can see that it's running as expected we're getting groups of five from 0 to four and then 1 to five and 2 to six and so on but we have all this junk at the end again but do you notice how we actually don't only have two iterations there's actually four iterations so remember we had three iterations and we had to get rid of two iterations and now there's four extra iterations so three and two the difference is one and then now there's four iteration um or the window size was five and we had to get rid of four iterations so you see how five and four their um their difference is one again so we found the relationship between these two numbers this number always needs to be one less than this number in order for this window size thing to work okay does that make sense if it doesn't try to rewatch that whole little section again and think about um the relationship between these two numbers why would this weird ramp thing here here get longer as this number gets bigger so if I put in a six if I put in a six th this got this ramp got one one longer if I put in a seven this ramp got even one one longer so we got to get keep getting rid of one more iteration of the four loop at the end every single time U once you understand that then it's very simple because all you need to do is um so one uh we need to subtract six from here if you need to subtract six from here six is one less than seven and what is seven seven is window size so actually let's just put um instead of minus 6 let's go minus window size but remember it has to be one less than window size so minus one um there is one exception to the rule um every now and then you will actually need to have a minus one or a plus one to get rid of like weird offsets and whatnot um so it's okay to have minus ones or plus ones in your code but you never ever want like a negative like 42776 or something like that because then it's hardcoded in the program and that's not what you want in a robust um wellrounded program so minus one is okay but when we run this let's click run and see what happens as you can see um oh what happened here oops Yeah as you can see we get all the uh the groups of seven actually we don't what is what is happening here did I make a mistake all right guys thanks for standing by I had to take a couple minutes to figure that out uh this kind of stuff happens all the time like even when I even when you plan stuff out so uh just just be aware that um even people who have been programming for like seven years like me they still screw up it was actually a very simple bug here what I realized was uh yes it does this number does need to be one more than this number but earlier I did not have the parentheses here so when I was doing this he was actually subtracting um the uh I think think of subtracting the numbers incorrectly but once I I grouped it together here by putting these parentheses in I feel like that shouldn't change anything but for some reason that has fixed the issue so if I wanted to get groups of Windows of size seven now this will actually become six within this parenthesis so I can do this and as you can see now we get all four instead of what we had before I believe this is what we had and this was giving us errors um but yeah I guess sometimes it's it's always safe safer to use parentheses more parentheses and less parentheses to um be very very clear about your order of operations because that's a very easy uh mistake to make in math and then um those same those same same easy mistakes translate over to um programming very very um smoothly which is actually a kind of a negative thing but also a positive thing if you know how to work out math problems um just just be aware of that any any math that doesn't uh work in real life won't work on a computer all right that's just something to note but yeah that's the uh last kind of advanced um example I wanted to give you guys with with slicing so here we're actually using um a dynamic slicing um scheme here to actually change the slice in a for Loop over and over again so we're actually playing around with some numbers and then all we have to do is change one number up here one little uh configuration thing and we can actually get um any size window we want so this is every SI every window of size one every window of size two like you guys get it so on and so forth so yeah guys um that is the end of this video I might have drone on for a little bit I'm trying to get better at that I noticed I drag on a little bit but um I like to be more of her boast and less for boast because I think it's better to be clear and then to just watch the video on like two times speed because that's kind of what I learned in my um my own personal schooling I'm currently in graduate school but yeah stay tuned thanks for watching guys and I'll see you next time hey what's up you guys Aaron here from clever programmer and today we're going to do a nice short sweet little video about string manipulation and a little bit of string parsing we're just going to be going over two really quick python functions uh split and join so let's get right into it manipulating strings is actually uh pretty important in Python um if you ever need to parse a CSV file which is a CSV file is just a commer separated value file which means there's a bunch of of things in a file and then between each of those things is a comma with no spaces that's all it is so it could be like a list of names a list of emails a list of prices a list of whatever you want it to be but it's basically the a file is just text and you sometimes want to be able to do things to that text by splitting splitting it up or putting a bunch of things together into text and whatnot stuff stuff like that so that's what we're going to be going over real quick uh very simple very too um very too Nifty little little functions I'm just going to go over the syntax really quick and let's just go so let's say I have um a string a string that I want to split up let's do split first so let's just say I have yeah okay let's just say I have a bunch of problems all right we're going to call it broke comma pale comma short comma nerdy okay and then let's say I want to actually because this list is is just one long string it's not like anything like if I just print problems then um the story of my life will be displayed to the screen but if I want to make a list um with all of these elements in there then you can actually split this up using the split function so what I want to what I want to uh show you here is that we are going to split on a very specific string called a delimiter so I'll explain that in a second let me just type it out first uh so L just stands for list I'm going to go problems. spit and we want to split on a delimiter okay so a delimiter is just a fancy word I don't even know why it's called that but what it is is just something that goes between things so it's like a it's a unified thing that goes between things so like in a Comm in the CSV file a comma separated value file the delimiter is the comma with no space so it's just a comma if there was a comma space uh maybe some CSV files have spaces there might be like a a type of CSV file that has spaces I don't know but if it does then the delimeter would be actually comma space okay the delimiter would be that string those two characters together so for us that's exactly what it's going to be as you can see here back to the screen uh we have a list here and each of these words is separated by a comma and a space so our delimeter is literally going to be comma space okay you might have to escape this I'm going to test it out real quick testing as you go like little things like this is usually much faster than trying to research it up and being right the first time just like take two seconds and figure it out it's cool so let's do this uh we have this string here we print it out we try to split on this and now let's print the list that we just created L and see what comes out as you can see it worked just fine we didn't have to escape it let's see if Escaping The Comma does work though run it um no it does not so this is actually interpreted this see as you can see this entire thing is a list of one long string that looks just like that so you do not need to escape in here so just keep it like that um this parameter is just a raw string you don't need any escapes at all a raw string just means it's literally what it looks like on the screen you don't have to escape anything which is nice a raw it might look like this if you seen it before it has a little r before the string but I don't think this function the split function um can handle that so that's split very very simple you can take a string like this and split on anything you want also something else I could do is if I put like I want to split on short and then run it so it's actually going to take this split on here so the two elements are going to be everything here this is the first element and then everything here is going to be the second element because it's splitting on this string let's try that as you can see the first string is broke pale comma space and then the second string is commas space nerdy because we split on the delimiter that was short but let's just go back to what we had it before because that makes a lot more sense run it and look we have this string and we're splitting it into this list now uh what you're probably thinking is join the other function I mentioned was join and join does exactly what you what what it sounds like it does it does the opposite of split it'll join a whole list together into one string so that's like if you say you had a python list in python or a tuple or something and you had a bunch of of data and you wanted to put it and you wanted to generate a CSV file a comma separated text file uh sorry comma separated value file then you could use something like this like join to put everything on that list into one big long string of text and then stick it into a file call it a CSV file and then now you can give that to anybody else who who wants the CSV file and they can do whatever they want with that it's a very common thing to do so uh we'll just call this joined equals and this syntax is a little bit tricky like this actually stumped me a few times when I started I don't know why it's like this but you actually put the delimiter first just like this put the delimer first let's just put um space and space okay so that instead of just making it again what it was originally we're actually going to do a little change on it um actually let's do this let's do CSV equals like that so actually we're actually going to do two joints so ignore this for now actually let me just get rid of it so I don't confuse you that was just a random idea I had on the on the fly so you have your delimiter first you have a string here and then you're actually going to call a function on that string which is a little bit weird I don't know why why that why it's like that but basically you have to have the string and then you're actually calling a function on the string so it's literally string. join and then in join you put the list so list L would be L and then let's print out joined just like that and run it and as you can see it prints out one long string broke and pale and short and nerdy okay cool but earlier I said I had a different idea so like maybe if you want to create a CSV file you would actually use a delimiter of comma with no space CSV and then you call join on that delimiter string put in the same list run it this time oh I didn't print it print print um CSV yeah and hit run and as you can see we generated our own short CSV text here so we could actually Chuck this to a file I'm not going to go over how to write to files in Python it's a pretty simple maybe in a future video maybe the next video but that's pretty much what this uh is going on here we have this join function and the split function that either split on delimiter or join by a delimiter I think they're both called delimiters I know this is called delimiter this might be called something else but I'm just going to call it delimiter because just cuz and um correct me if I'm wrong in the comments if it's called something else uh it might actually be called something else I vaguely remember back from my undergrad anyways uh that's about it though for those two quick functions very useful for dealing with strings um this will be handy for yeah CSC files or anything remotely similar to that but uh that was it for this quick video guys thank you for watching um I will see you guys next time and and yeah goodbye hey what's up you guys Aaron here from clever programar today and today we are just going to be talking about tuples in Python you don't know what that is yet but you're about to find out let's get started all right so a tuple is uh first of all it's a weird word I don't know what the heck it means but um that's how you spell it t p l e and um all a tuple really is it's a list with uh constraints so um in a previous video I think we we we uh went over lists so a list uh list just looks like like this right with brackets you have um something like that um all a tuple is going to be is going to be the exact same thing but with parentheses okay like that so now L is actually a tuple so I'm going to change this to a t so a tuple is just it looks just like a list but it has parentheses instead of brackets um that's not the only thing that differentiates them um that's just what it looks like on on the screen when you're coding that's what a t will look like but the difference is um uh uh list could could have anything in there and so can a tup um they are similar in that sense you can index into them using um that bracket notation so let me just show you that real quick actually uh print T at0 um as you can see the one prints out because that's the first one so you can do that just like a list um you can read from it um but that's pretty much it the thing the thing about tupes is you can't actually change it you can't um you can't add elements to it you can't remove elements to it and uh I think that's about it you can't add and you can't remove and you can't change um things within it if they're immutable um if they are also unchangeable so that's that's kind of um a little bit little bit weird to to explain but basically you can't add or change you can't add or remove elements to it it's a very it's a very um stable structured kind of data type so um you can overwrite the entire thing so if I had T here and then I and I overrode T by setting equal to five then yes this entire tup will be deleted but I'm not actually changing things to it so what is this good for um you might be asking okay so what's the point of having a tuple if I can use use a list um well there are sometimes you want to be more secure with your data so let's say you had a um a credit card okay a credit card just call it credit card like that and you have multiple things on a credit card so this is what I was talking about structured data so a credit card has a a a credit card number right so let's put that in first um I think it's like 16 digits I'll just put 1 2 3 four like that a bunch you'd have uh your um the credit card number you might have a name on there so let's just say first name or I don't know oh let's put uh Joe Rogan because why not and then you would have an expiration date which could be like um December 31st 2019 or something like that or on credit cards I think it's just uh like 11 sl9 or 20 there we go November November of 2020 and then um a security code usually have like a threedigit or fourdigit security code that you also need in addition to the number right let's just put put it in like that so you have a credit card here as a tuple the reason we we would have using used a tuple here is because um every element of the Tuple has a consistent meaning okay so um none none of this can be changed I cannot go in and change this number I cannot go in here and change this I cannot go in here and change this um but uh it's all together as a whole um together um so usually you would be using it for things like this um one thing that is that it's very useful for is actually having a list of tupal so let's you let's say you had multiple credit cards then you could create a second credit card let's just create a second one like this okay and then let's just change uh or whatever screw it we can just leave it like that so credit card one and credit card two and then let's just say we wanted to have a list um credit cards with an S and then we could just create a list with credit card one and credit card two okay and then we could print out all of our credit cards just like that so you got are you guys following oh we created two tupes here two separate tuples using the parenthesis um um and then we stuck them in a list and we're going to print it out so this is Handy be let's run this again so it looks nicer this is handy because as you can see we have a bunch of credit cards here that are um structured there it's a structured kind of idea and then you can just put a bunch of these together so you can actually change this list this overarching this wrapping list on the outside you can always add more credit cards to it because it's a list but within each of these little credit card two pools you can't actually change or add anything to it because we don't want it to it's a very um stable structured kind of data type all right so that's pretty much two pools um one one cool thing I want to mention about tups is because they're so structured you can actually do this cool thing called unpacking a tuple okay so let's um get rid of these here um let's just get rid of everything let's say we have a person okay a variable called person and we're going to make it a tuple and we'll say say that every person has a name right we're not going to call a name we're going to call it Nancy okay Nancy pants cuz I like that Nancy pants and then um age let's put um 25 okay so Nancy pants is 25 years old and uh let's also put um favorite food okay Pizza like that so we have a person here okay um as a tuple and because the tup structured uh cool thing we can actually do in Python is actually just go like this we can uh create three new variables so name comma age comma fav food favorite food okay we're going to put this here like this and then we can actually say this is equal to person so what's happening here is we are unpacking this tupal or we uh we're unpacking this person tupal so this person tupal has has three aspects to it it has a name it has an age and it has a favorite food so that's what we're what we're specifying here we're specifying three new variables called name age and favorite food and then we're setting it equal to this two pool the cool thing that happens here though is now I can actually print out each of these things individually completely individually so pretty sure you guys see where I'm going here um now we have these three variables separately so so instead of going like okay person add zero and person at one and person at two Etc we can actually just unpack it this way and use more descriptive names instead of person at zero and person at one and whatever so when I run this as you can see all three pop out because we unpacked this Tuple uh one other cool thing is you actually don't even need these parentheses here something really cool you can do so you can say okay name um name agent FB food you're actually setting three variables completely in one line you're setting it equal to to this tupo which is going to correspond in order because the tuple's ordered just like a list but it's structured so that you can actually unpack it this way um very very useful thing especially if you are iterating over a bunch of tupal okay let's say you have like I said you could um iterate over a list you can also iterate over a um a list of tup and then in each iteration you actually unpack um the the Tuple in the loop itself so let's let's see what that would look like so let's say for name age Fab food in um oh this would have to be a list let's just create two people so you can see how this works very useful thing with tups called Tuple unpacking um Nancy she Joe shirt that one's not as funny but whatever age 20 and favorite food is pasta okay so we have person one and person person two and then we are just going to create a people list equals person one and person two uh I I could have just stuck these T PS directly in here but uh it's just better to use variables like this and then putting the variables here it's more clear okay um I'm just creating a list here of uh a list of two people and each person is a tuple so now we can say okay let's iterate over people and since we are unack in this um it's going to iterate this this Loop is going to iterate over this entire list and each time it goes through it's actually going to unpack these two PES so that in the iteration I can actually print out um everything in here so I could put just like print name uh actually it's just the same as here let me just copy and paste this boom boom boom yep just like that so what and then we'll put a space an empty an empty print statement will just print nothing okay so so we have everything um here for two iterations and when we run this um what is wrong and people person is not defined oh okay well let's just get rid of this we don't need this here and uh yeah let's get rid of all this oops Yeah because that was giving us a problem because I changed this from person to person one this is um it wasn't working anymore so let's hit run and as you can see this Loop ran twice and it unpacked both of these tup okay so you can hold you can hold data structured data in tups and then you have very easy um structured access to them via unpacking so very useful thing in Python um I like using them a lot especially in Loops like this um down here in the for Loop uh but that's pretty much it for this um this video guys uh thank you very much for watching and I'll see you guys next time time hey what's up guys Aaron here from clever programmer and today we're going to be talking about something called sets in Python so let's get started so first of all a set is just like a list or a tuple as I explained in previous videos but a little bit different so we already um ate up all the options earlier right so list use brackets okay tupal use parentheses so what's the only thing left oh yeah braces so you might be thinking okay so what if I put something in braces and that's exactly what a set is in Python okay so a set is basically it's another way to group a bunch of things together in Python if you have a bunch of things together but what's special about them besides the braces um to to to code them out besides those is you cannot have duplicates in a set all right you cannot have any duplicates so if I had um the numbers one through 10 in the set and then I tried adding 10 again it would just ignore it and it wouldn't add it to the set but if I tried to add 11 then it would add it to the set um a set can grow and can grow and um get smaller as well I believe uh but so it's not like a tuple it's not like constrained like a tuple but you can so you can add things to it but you cannot have any duplicates and um it's also unordered that's the thing I was trying to remember it took me it took me a little bit it is unordered so you cannot iterate through it in any particular order so you cannot be like oh set at zero equals this set at one equals this like you did with list and tuples so that's another difference but the main thing is that it doesn't have any duplicates so one really cool thing you can do with sets is actually have a list that has duplicates in it of whatever um it is that you want and then change it to a list cast it to a list no sorry cast it to a set I talked about casting earlier so you can actually cast things to a set you can cast a list to a set and a set to a list and uh what that will do what I just said is if you have a list with duplicates cast it to a set the set will get rid of all the duplicates automatically and then you can cast it back to a list and all of a sudden you got rid of all all the duplicates in your list so that's a that's a very very common thing you do with sets but sets can also do a lot more um let's explain um what I just I just said though so let's say we have a set s equals um let's just have a set of um I don't know fruits let's go banana um actually let's see this blueberry and raspberry okay so we just have two different types of berries here so that's a set um we can print out a set just like uh list or Tuple I'll show you that real quick s it'll have braces see braces here not not brackets or parentheses but braces and we have two different um two different things here in the set it's unordered so you um actually yeah it's a it's a random order they they're made in a random order but as you can see here raspberry is a second element but when it's printed it actually prints this first like what what gives and then see here now it's It reversed its order so it just it it spits out a random order I don't know what determines that but the point here is that a set is just like a bag of things like if you had a bag of different things and you just Chuck them all in there it's just there's no order to it it's not like a nice sequential kind of um one thing two thing three thing four thing five thing okay um so let's just try to add something to this set okay so let's say we have we have blueberry and we have raspberry let's try to add something unique so this function that you can run on the set or any set is just add so you you uh write the set here so set. add and then you can add anything you want to this so let's add strawberry okay a third kind of berry and run this and as you can see I had a set here that has two um two types of berries and then I add a third type of Barry and which is different than these two so it added it and as you can see when I print it out it's um all three barriers are here okay you can also um add other data types it doesn't always have to be strings you can have a bunch of different things in there so we can just add four and then boom four pops up and as you can see in a random order let's run it again random order run it again random order okay um so that's the ad but let's try to add um let's try to add uh not strawberry so we're getting rid of this so now the set only has two things in it again um let's try to add blueberry okay oops if we run this this is actually not going to do anything because it's going to notice that this blueberry is already in the set and it's going to ignore it so let's hit run and as you can see nothing was added to it if this was a list then um the this element that we that we have here would have been added to this uh to the list as well but this is a set so it didn't get added um Let's uh actually I want to show you guys that that little duplicate example that's a pretty cool example so let's say we had a list of just numbers okay one one two two one ah if I can type it out 1 2 3 3 4 4 four five okay so as you can see we have a duplicate three here and two duplicate fours here if we printed this out um you guys can believe me that uh it'll look just like this right if I printed out this list so I'm not going to bother printing that out okay but what if we wanted to get rid of all the duplicates what could we do well I said earlier that we can actually um put it in a set we can cast it to a set and then cast it back to a list and then we'll have a list I get rid of all the duplicates so let's just say um well casting first of all we go like this and then we pop the list in there so we can say um no duplicate set this is just a variable name equals set of L so what what this is going to be is going to be a set of this list without any duplicates so let's see what that looks like print no duplicate set okay and let's just comment these out so you don't get confused let's run this actually let's get rid of this whole thing I I'll think of a different example later so let's run run this okay so we have this list here 1 2 3 3 4 4 4 five and then we casted it to a set and then we printed out that set here and I as you can see we have a set because there's braces um but it got rid of all the duplicates okay there's no duplicates in here same deal if I had if I had um ABC and even double quotation marks ABC because those are equivalent and then I run this only one of these is going to be chosen a random one I believe let's run this and as you can see ABC is um is there U but it got rid of the duplicate here because these two strings are equivalent um but then you also want to uh cast it back to a list so we can just go like this simply like this no duplicate set and then we can say no duplicate list right that makes sense yeah I should I don't know I I I tend to use um L for like list and stuff it's probably not the best idea but it's a bad habit I'm trying to kick if you can avoid developing it in the first place I'm not doing a very good idea right now by being a bad example but maybe actually like name it of something like this okay list of numbers I don't me you just do this now I might as well do it now okay guys list of numbers like that so we have a list of numbers and let's get rid of this crap so that this makes sense we have a list of numbers here and then we create a set from that list of numbers with no duplicates and then we see what that set looks like um actually we don't need to see what the set looks like uh let's just get rid of these boom like that and then uh um and then we casted the set back to a list so now the this list here actually should be this list without any duplicates so let's see what that looks like and as as you can see we have a list here I rid of all the duplicates here so now what you can finally do is actually just change it so list of numbers you can actually just say is equal to no duplicate list list and what this will actually do is actually overwrite this one so list of numbers so what this does is let's say you had a list of all these numbers and you want to get rid of the duplicates and just completely delete them like let's say you had a bunch of names in a database and you had you had duplicate or a bunch of people in a database and you had duplicate records and you didn't care about the duplicate records you just delete them or you had a bunch of videos in a file on your computer and then but two of them are exactly the same and you don't need you don't need the duplicates you can just delete them okay if you don't need those you could do something like that and um you could do something like that and uh get rid of all the duplicates that might be something actually very useful for uh this new course we have coming out called how to automate stuff with python um if we're going through file directories and deleting duplicates and whatnot but uh yeah sets might actually come into play there just something to note there um but yeah so those are sets uh there are also some pretty cool um functions and methods you can run on sets uh because are you guys familiar with uh ven diagrams let's let me pull up a uh image here so Vin diagrams okay diagrams so the these things here okay you you see this thing here you remember these two circles you might have learned this in school and it's like oh there's like thing in set a thing in set B and then there's an overlap this is actually what sets are for okay this is what um sets are used for in Python so you can actually have sets of things like this and do logic like this like okay there's all these people and then or um let me think of a better example um actually okay yeah I thought of an example let's go back here let's get rid of all this okay remember sets have braces so we're going to be we're going to be creating a uh a um we're going to have two different libraries okay so let's have Library one equals a set of uh I don't know Harry Potter Harry Pooper I'm actually five I I'm not 24 I'm five uh can't multitask uh Hunger Games sure Hunger Games and Lord of the Rings okay so we have a one set here and then we have Library 2 and then we're going to have a different set of books here so we're going to have Harry Potter okay and we're going to have uh Romeo Romeo and Juliet all right so we have these two separate libraries that have a bunch of books in them um these are just strings just using strings to like signify books and now we so we have two separate sets and we want to start doing this vend diagram kind of logic so there's a bunch of different functions you can run okay on on sets to figure out uh the overlaps and whatnot so let's let's start with um I already went over add right I believe you can you can run yeah yeah I did I did you can add things to a to a set by just going like this and it'll only get added if it's not already in the set but first let's uh let's try this so we let's we have Library one okay and then we could um we first of all you can just add two sets together okay you can add two sets together to put it all together but also it'll get rid of duplicates so you notice here how there's Harry Potter in both of these sets so one of these will actually get um ignored and then when we add these together it's actually going to have everything in here in this one plus Romeo and Juliet it's just going to ignore this Harry Potter or or it's going to ignore this Harry Potter what what did I do um so let's just try that so this the function is called Union Union is just a word um that you use um in in math when it comes to vend diagrams that that kind of math I forgot what it's called Uh discret math or something um it's uh unrelated but you can you can add two sets together and that's what union does so Union just means you're going to Union them together and Union okay so Library 1 Union Library 2 or Library 2 just like that okay and um we'll just call it the town okay let's uh yeah I'm going to say that there's two libraries in a town so um all book okay how about this all books in town that makes sense so if we have a town with two different libraries and we want to get all the books in the town without any duplicates then we can get the entire book list by just doing something like this you could go um Library 1 Union Library 2 or you could do Library 2 um Union Library 1 it doesn't really matter because it's the same same operation both ways let's hit run there I didn't print it out uh print all books in town now let's hit run and as you can see oh let's go here now now as you can see it created a set um combining both libraries but it got rid of the duplicate Harry Potter so that's what union does and the power of a set um there's some other other methods and functions I'm going to go over to so so um instead of Union what else do we have I had have it written down here on the side um okay uh now we are going to if um okay let's say we wanted to find the books that were at both libraries okay so we could be like okay um like if you if you just want to find out books that are at both libraries so at both libraries I don't actually know why you would want to do this in real life like why do you want to know which books or maybe okay yeah I guess that makes sense if you wanted to be like okay if this one Library burns down yeah it took a dark turn but if one Library burnt down what books are you going to have in other libraries as well okay uh that are like backed up then you can so you can actually just run this uh function instead of Union it's going to be intersection okay so this is uh intersection this means what is it both in both sets so what you're going to get here is we're going actually going to get um Harry Potter because this is the only thing that is in both sets everything else is going to be ignored this is going to be ignored and this is going to be ignored but Harry Potter is the intersection so like when you have a ven diagram remember you have some things in one Circle another thing another Circle you would have Hunger Games and Lord of the Rings on one side and then Romeo and Juliet on the other side and you'd have Harry Potter in the Middle where they where they um overlap you know what I mean um so that that's what's going to happen let's just just run it and you can see how it uh at both libraries how it looks as you can see we get a set of just Harry Potter because that's the only thing that was common here if I if I also had a Hunger Games down here then this would be Harry Potter and Hunger Games okay you're getting the intersection um another another thing you can do is uh actually get the difference what difference does is it tells you everything in this set that's not in the other set okay so um if we have Library one which has Harry Potter Hunger Games and Lord of the Rings and then we use the difference with Harry Potter R Romeo and Juliet then it's going to ignore the Harry Potter and actually just get the difference we're actually only going to get Hunger Games Lord of the Rings or only get Romeo and Juliet we're not going to get all of it just just this part or just this part you're getting the difference like what's different about the sets that's why you're getting the difference okay so let's just call this um uh diff okay diff equals uh Library 1 difference Library 2 so let's run this and see what pops out so as you can see Lord of the Rings and Hunger Games pop out pops out because we called Library 1 and we want to see the difference with Library 2 because Library 2 has Harry Potter in it then we ignore it because um it has this in common so it just gets this if we reverse this then you would actually get Romeo and Juliet instead of hungry GS and Lord of the Rings you see how that works so yeah um these are pretty much sets uh there's a bunch of functions that you can use there's a bunch more I'm just going over all the all the main ones in these videos but um those are oh there's actually one more called clear but I'll leave that up to you to go figure out what that does uh look in the python documentation for sets and see what um the function do CLE does uh probably you probably already guessed it yeah it clears out the set and make it completely empty um but go and try it out yourself maybe code it up but those are sets in Python uh very useful for getting rid of duplicates remember that that's one of the most common uses of it but also if you're doing things like you're doing like some weird logic things or running some like um really weird algorithms like I I've done some before my schooling but they're they're very handy thing to know um know that's uh that's that sets are the braces one and that they're getting rid of duplicates I probably said that 300 times by now but yeah getting rid of duplicates that's the main use that I know um sets are used for so that's it for this video guys uh thank you for watching and I will see you guys next time goodbye n so let's just create a dictionary all right let's just call it dict dictionary so the way a dictionary works is instead of having elements that you can index into with numbers like in a list if you guys don't remember remember if you have a list then you would index it like this or something listed zero listed one listed two Etc instead of doing something like that in a dictionary you can actually specify what your your index names are so and these can be uh anything actually but usually they are strings let's just show you that so we could say um let's say we have actually Let's do an example let's say we have a um let's say we have some groceries okay you could uh put some uh things here so you could put bananas and strings and then have a colon here and then have a number okay so this is what a one element dictionary looks like there's a little thing here on the left of a colon um usually a string and then a colon and then another value over here okay so that's one element in a dictionary uh two elements would look like this oranges three all right I think you guys understand by this point so this is the first element of the dictionary and this is the second element so now that you've seen what it looks like uh I'll explain so a dictionary is a way you can organize data in a more organized manner uh that was a little redundant but pretty much uh you can you can say that these two things for each item in the dictionary these two things are associated so this on the left is actually called a key this on the right is actually called a value this is called a key value pair uh they have these in every prr languages U you might know them as Maps or hash maps and other program languages but in Python they're called dictionaries um same thing here this is a key and this is a value and these are a pair these will always be together so what's cool about dictionaries is that if you have a dictionary since and we do uh we have a uh dictionary called groceries instead of if I wanted to get the first element here bananas and five um I couldn't I can't just stick in zero like this because that's not going to work all right what you actually need to do is put in bananas so you see how we're indexing into this dictionary with the key okay we need the key that's why it's called a key you need the key to get the value so let's run this and see what happens or let me cheuck in a print statement first uh let's see what happens as you can see five popped up which is this five right here because we used bananas here um to as the key then it gets its Associated value which is five if we put in oranges here you can believe me that three would pop up um go try it yourself if you don't believe me but yeah I'm pretty sure most of you can U make that conclusion yourself it'll work the exact same way as this bananas did all right so that's how you um that's how you index into a dictionary using using this notation here uh but you might be asking okay well in a list if I put in a number that's not in the in the list like if I had a list of length five and I put in an index of like 300 then you're going to get an error same deal with um same deal with dictionaries if you put in something like uh like a key that doesn't exist in dictionary then you'll actually get a key error see a key error right here it says hello is not Hello is not in the dictionary which makes sense so actually instead of using this um bracket notation here kind of like indexing in into a list but you're indexing into a dictionary there's actually a method called getet which does the exact same thing but if the key is not found in the dictionary then it won't give you an error it'll just say none it'll just spit on a nun type so you'll avoid this red text of Doom and death and um everything will work fine so if I put in B actually let's put in oranges just show you now okay bananas again bananas just keep it simple and cons or keep it consistent if I run this you're going to get five just like when we use brackets okay uh but if I put hello which isn't a key in the dictionary and I hit run then you just get none instead of the Big Air so that's a nice little method that you're given it just does a little safety check within this get method it probably does the bracketing itself into the dictionary but it says if it's not in the dictionary then return none rather than than giving us an error so that's little that's a nice thing to use um just you can if you know it's in the dictionary you can just use the bracket notation but if you don't know then it's better to use get it's just safer okay so those are some basics of dictionaries uh dictionaries are very very good for um these kinds of things uh maybe another example we have is maybe we had a a contact list okay so if you had a contact or contacts let's say you had a bunch of friends and they all had phone numbers okay how would you do that with a list how would you associate a phone number with friends I mean you could have like one list called names and then one list called phone numbers and then just have the corresponding elements all be uh each other but that's just kind of silly because um it's like two separate lists and if one gets screwed up or there's a mistake in one then they're not then the entire thing's mix messed up like if one thing get if like the first name got deleted then everything's going to shift over and it's just a big mess so that's where dictionaries come into play okay you could have something like this and I'm just going to uh format it differently so that it's nice nicer to look at uh let's just say you had Joe as a friend okay and his phone number was 1 2 3 4 5 6 7 all right and then you had Jane and her phone number was 987 6543 okay so this here shows us um that Joe and this phone number are corresponding because this is the key and this is the value same with Jane so now we can actually just um index into this using the name and we can get so if we wanted to get Joe's phone number we would just put in Joe into contacts and um what's the issue here uh oh I forgot a comma yeah you need a comma to separate all of the dictionary um values uh what is happening here oh silly me so the format adding was fine here okay but um obviously I can't have these dashes in these numbers okay python doesn't know what the heck this is it thinks it's 987 well actually no python thinks it's 987 minus 6543 and uh and python thinks that this is 123 minus 400 4005 4567 what I actually need is just the phone number like that okay without the dash stupid or we could even use strings okay we could actually do this why why don't we do this this makes more sense okay hit run there we go and this string gets given back to us when we get Joe and if we want to Jane you better believe it we get her phone number too okay so that's pretty cool right this allows us to structure data with any name any key we want and then put anything we want over here the real the real power of Aries though is when we actually start putting a bunch of different things in here so let's this is a contacts list right they might have more than just a phone number so if they have more than just a phone number then why don't we use a list here right you could just use a list like this okay so you have a phone number here and then you have an email address so uh email address email address at website.com this got to be a stram okay at website.com and same deal here you just put a list whatever M web.com good enough uh some weird examples but you guys get the idea so you're able to now associate this key this name of Joe with all of these things in this list all right uh this is something that is very very um powerful with dictionaries um you're able to basically structure the data in any way you want group it together in any way you want and of course this this list can be of any length you want so you can actually put as many contacts you could have a phone number you could have a email address you could have a LinkedIn account you could have a Facebook you could have a everything Instagram account Snapchat Etc um it never ends so you're basically allowed infinite flexibility when it comes to defining what it means to have a contact of Joe you can even have his home address his billing address uh everything okay um uh but but what about this you could even make this better and actually make this a dictionary itself right so this is a dictionary and then you have Joe and then within this its value is actually a dictionary you see where I'm going with this right so you could actually have um phone number or just put phone and then boom you have that there and uh email okay and now I have a dictionary of contacts with his name and then for each person there's a dictionary associated with that person that has all his contacts so his phone is this his email is this and so on and you can you can keep doing these nested dictionaries as much as you want so uh this versus this you can see how this is a little bit more descriptive and um you can really see the power of dictionaries here because try representing all these ideas like Joe has a phone number of this and an email of this and Jane has a similar thing with only lists think about it how would you how would you coherently and in a smart and intelligent way um represent that and with a list you just can't so dictionaries are good for that uh some other examples you could use are you could use dictionaries to do things like count the most common words in a sentence uh this is a little example that I I learned when I was learning dictionaries myself uh many years ago in my first python class at University but what if you had um a a dictionary called word count word counts okay and let's say you just wanted to count all the words in a string so or a sentence which is a string okay so let's just say I like the name Aaron because the name Aaron is the best all right so we can see this this sentence here and let's say we wanted to um actually let's get to simplify this um let's say we wanted to count all the words here okay um and you want to count the the how many times each word um occurs in this dictionary uh something you can do a Diaries is you could actually uh it iterate through this entire string well actually you'd have to split this up into a list so that each word is its own element um there's a method for that uh called string do um I believe string. split and then you would uh get all these words in a list and then you can iterate through all them and then every time you see a word you add it to the dictionary and every time you see it again you can up the count so it would end up looking like this I'm not actually going to code this out because uh there there's a lot of code there uh you guys can do that if you want but this is what the end result would actually look like um you would have I okay would be one you would have like which would also be one all right and then you would have V which would be uh why is this double quotes you would have V and that would actually be three as you can see it pops up three times V here V there and V there so this is the idea that I'm getting so you're able to go in and every time you see um you're iterating through these every time you see a word and you see that it's in the dictionary then you can just go into this dictionary by indexing like for the when uh this word the whenever you see it you could have you could have just gone like this word counts at the um and then you just add one to it so whatever number is there you would just uh add one to it okay um you would have to actually do it this way so you would just say okay the new value of this thing here in the dictionary is whatever the old value was plus one okay and then you would every time you see the then you would chuck that in okay that's the idea so dictionaries are very useful for these kinds of things it keeps it very nice and organized you can see here is counting how many occurrences of each word there are imagine if you had an entire book you could actually go through this and then sort it by these these values to see which words were used the most and which were used least okay and sorting a dictionary that brings me to to a different um another thing I want to talk to you guys about is actually um some methods you can use in dictionar so we have some dictionaries here but let's say you wanted to get all of the data within the dictionary back out so there's actually three methods here um I am going to print them out here in a comment so you can see what they look like uh it's called dict dict do items okay uh dict dots uh keys and dict do values all right so we have three methods here and I'm just going to explain what they all do verbally and then I'll show you so here this dict you're just saying you have a dictionary here so that would be word counts or contacts you would stick that where this dict is and then if you call Dot items on it what you'll actually get is a list of TS and each Tuple is a key value pair all right you will call do items and you'll get a list of two PS and each tle is a key value pair I said it twice so that you guys can let that snc in if you didn't get the first time um this one same deal but you will get a list of just the keys so you would get I like and the for this and if you called dick. values you would get a list of only the values one one and three okay so this gets you a list of two PS of both this gets you a list of just the keys the the orange strings here and this um would get you just the green values the the numbers or these could be lists or dictionaries themselves you know what I mean it can be whatever you want but these are the three methods let's just see what this looks like uh let's just do word count okay so um word counts do items okay let's just print this and close this off print it and as you can see it says dict items and then you have this list in here of T PS This highlighted portion you have a list of a tle so I is one like is one and V is three okay okay if you wanted to make this actually a list instead of a dict items thing apparently if you call items you get a dict items ad dict items object but I'm pretty sure you could actually just um cast this to a list just like this hit run and bam yeah see you just get the list out so that's that's uh a very useful use case of uh casting I think I went over that in a video a few days ago um or a few minutes ago if you're watching this if you're Bing watching this and trying to Learn Python for the first time or whatnot but yeah so you can actually cast that to a list to actually get the list out of it so that's that uh let's try the next one now so we have uh that we have keys um same deal is going to happen if I delete this you're going to get that dict items object in so I'm just going to leave this list cast in and just change this so instead of calling items we're going to call keys and you guys can probably predict what we're going to get you get all the keys I like and V all right and same deal with values I'm just just going to show you for completeness sake but I'm pretty sure you guys understand what's going to happen you're going to get these numbers here 1 one and three okay so that's uh three very common uh methods in Python uh for dictionaries um but you also have a few more like what if you wanted to delete something from a dictionary okay if you wanted to to delete something from a dictionary how would you do that well there's a there's a method for that as well so let's say we wanted to delete um okay word counts equals um oh what am I doing word word counts dot uh pop okay so Pop um what it does it's a little bit of a weird a weird word choice in my opinion I'm used to it because I've been programming for a long time but when you pop something you are like you are taking one item from a group of things so a dictionary a tuple a list or whatever and then you're just popping one off so you're pop usually the last one or the top pop one or whatever you pop off one element that's why it's called pop instead of remove or something um but you can actually pop something out of a dictionary by calling its key so this would actually completely get rid of this thing if I if I ran this or I am running this I just haven't run the code yet but this line of code will actually delete this from the dictionary and then this will only be in the word count dictionary following here likewise if I use like then it'll delete it'll delete like and if I use Z then it'll delete delete V okay uh let's just try that so let's run this and then so print it before delete V and then print it after okay so I'm going to print the dictionary you're going to see the whole thing I'm going to going to pop one of them off and then I'm going to uh print the dictionary again so as you can see V has disappeared because we popped it off all right so that's what pop does that's how you remove a um uh remove something from a dictionary and one cool thing is it's called pop because this here is actually this I me I mean this this little thing so if we actually printed this um it's actually popping it's not just deleting it it's actually popping it off and retrieving it from the dictionary for us and then um allowing us and then getting rid of it so let's say you had a bunch of contacts you could be like okay retrieve and delete contact then you in this contact dictionary you could like pop off one of the things it would delete it from the D um from the thing and then it retrieves it so that you can like display like oh this person was deleted blah blah blah blah or something like that so as you can see um it gets this value actually doesn't get the entire thing I guess I guess um when you pop it then it only Returns the value not the key as well but um yeah you're able to get the the value of this key back from this entire expression here all right so that's pop now there's also a way you can just um get rid of you can pop off a random one so instead of actually specifying which one you want with the key you can just call Pop item like this so let's say word count. pop item and then um print word counts oops print word counts like that and let's do this twice boom boom so this is actually going to pop a random thing from this it is going to it's either going to pop this one or this one or this one it's just random um I don't know how the computer determines that but it's just random so it's just if all you wanted to do was just get rid of one thing then you could um do it that way or even like you could do you could run pop item three times and each time you go through it remember how you got remember how we got this three back when we when we just Ed the regular pop method here using the key then we got three back if you called pop item three times you would eventually get all these numbers in a random order but let's just say that's all you like you had to sum up all these things you could actually do it this way you could just pop item three times and then keep adding one to one um adding these numbers together so 1 plus 1 plus 3 you would eventually get five something like that um I can't think of a good example right now but I'm sure that would be useful in something dictionaries are very robust and they can be applied to many different problems um that's why they're so beautiful uh they're just so flexible and juicy and just sexy you know but if I keep running this um it doesn't appear to be random uh perhaps I'm wrong with that uh I sore it was supposed to be random I don't know maybe I'm wrong um I will double check that one second guys all right I'm back you guys um so yeah I actually misunderstood when I was reading up on this method here refresh when I was reading this and refreshing it um it says it pops an arbitrary element not a random element and the distinction there is um pop item will well pop pop will pop what you the key you give it the exact element that you you specify but pop item will just pop off the last one of the dictionary okay and since the last one could be anything you want it seems to be be consistent here every time because that's the way we created it here um here this one this one and this one um but because yeah because it's in this order it's always going to pop the last one but uh sometimes if you oh that's one thing I forgot to say yeah actually you can actually add to a dictionary too simply by um let's go over that real quick because I'm going to need that to continue so put this on hold here okay put this ID on hold and we are going to go uh print word counts how did I forget this uh and uh word counts you can actually this is how you would add to a dictionary you can actually specify let's say uh see Aaron pops up twice in this word count right so let's put Aaron Aaron like that and then we know it pops up twice so let's just put two so what this will actually do is it'll create the key Aon here and then create the value value two and it'll actually pop up in this word um counts dictionary so let's have two print statements here and get rid of these so we're not confused right so what what this is going to do is it's going to print this dictionary then it's going to add this to the dictionary and then print it again so we can see it so let's do that and as you can see we have uh the dictionary here and then we added Aaron with a value of two to it so um that's how it got added to the dictionary so that means uh whenever you're adding to a dictionary um it it doesn't always add in the same spot it might add to the end or somewhere else um because the dictionary doesn't actually have an order unlike a list or a tupo um I don't think I actually mentioned that earlier but yeah dictionary doesn't have a order because um because you can index in as a key okay and it doesn't matter where the key in the list is whenever you use that key it's always going to be there so a dictionary is just kind of like a bag of things a bag of values that have like labels on them which is the keys and then you can just like hey just find this key and then it gives spits out the value for you so there's no specific order all right so that's that's how you add to a dictionary but now let me go back to pop items so I was saying earlier that pop item will pop an arbitrary one so it it um doesn't pop a random one it just pops I think the last one in the dictionary and then whatever happens to be the last one it pops that one and then you get something back so let's see what um this gives us back I'm not actually sure if this gives us just the value or the key and the value um so let's just try it all right so comment these out hit run and as you can see it actually gives us a twole so you remember how pop only gave us three it only gave us the value three instead of this together but when you do pop item it actually um pops a arbitrary um element in the OR entry in the dictionary as a tupal so you get the key and the value which makes sense because when you're popping you're actually specifying the key so you're like okay I know I want this key and I'm going to get that value associated with that key but when you pop item you need to keep it together okay and then you can of course just you can just index into this this tle at zero for the key and at one for the um value if you wanted to so that's pop item all right uh let's just go like this dict pop item and continue on uh we don't need these either so that's how you um I'll leave I'll leave this as a chunk together because that's kind of nice you have a dictionary and then you're adding to the dictionary here manually all right uh the last thing I wanted to go over was um dict do clear so what this will do is it'll literally just wipe out the entire dictionary so that whatever your dictionary has your dictionary will just look like this an empty dictionary with absolutely nothing in it okay so if I called uh word counts. CLE all right this is just going to make word counts equal to nothing all right nothing absolutely nothing and um that's good if you just want to delete it I mean not even delete it you're just clearing the dictionary I don't know why you would want to do that but it's there if you need it um I'm sure it's useful in many cases because yeah how else would you go and delete you're not going to pop it like 27 times or whatever if your dictionary is really long or 27 um entries long you're just going to clear it instead of doing anything else or just override it with a new dictionary but yeah that's the last one I want to go over um like I mentioned oh there's actually one last little uh thing I want to mention before I finish off this video but um like I said dictionaries are actually unordered so there's no specific order to them but there is a module in Python called ordered dictionary which actually keeps the order of a dictionary for you all right so I'm going to import that here so it's from collections um collections is just a package I believe um import ordered dick okay order dick just like that so what this line is saying from this collections um package in Python so this is just something in Python there's a bunch of um things in here um that allow you to do different thing oh it's I'm not going to explain this now if you don't understand this look it up on Google if you're interested look up the from and import but when you import something you're importing a new kind of data type here okay a special data type called order dict so what an order dict is it'll actually allow you to keep an order in a dictionary and the order that the dictionary has is the order that things are added to the dictionary the order dict so if you add something to the order dict then that is the order that it will stay in it won't be a random order all the time I'm not sure why this was being not a random order it's supposed to be um but it seems to be consistent maybe it's because it's so small but you cannot rely on a dictionary to be in the same order every time time okay you cannot rely on a dictionary to be in the same order every time you have to um index by key okay just be aware of that um that's why pop item says uh oh I have this twice that's why pop item says uh it'll pop an arbitrary element because it'll just pop the last one pop item will just pop the last one which could be any random one or it could be consistent and this case it's it's been consistent but if it was random on a different computer I've seen it be random before just take my word for it then yeah then it'll be an arbitrary um thing you get back from this method so that is order dict um useful uh probably for something I'm not sure um I haven't actually really used it I usually use dictionaries for things like this um but if you actually did want to sort a a dictionary I suppose you could use one of these things right you could get all these in a list and then sort the list and then put the list into an order dict so that the the the dictionary stays in the order that you added things to it so you just keep appending to this order dict um and that would be it uh I forget how to add to an order dict uh but yeah you could just call like okay word counts uh dot uh values or something values right and then uh we have to cast this to a list right so list just like that so this will get us a list of all the values so this would be 1 one three and two remember because we added this to the dictionary this will get a um list of length four with all those four numbers let me just show you hit run okay you get 1 132 okay so we get a list there we can see that it's not in order so you could actually say okay uh you could use you could use sorted um but I prefer uh list. sort so we're going to do list. sort just like that okay and then click um oops what is going on dot values none uh maybe we do have to use sorted I think I got mixed up here yeah yeah because this sorts it in place so uh you could use sorted and just enclose the entire you can see that uh what are these periods popping up I don't want these I'm just giving space for clarity sake as you can see so we're getting all the values from the dictionary here we're casting it to a list then we're sorting it we want this list to be sorted sorted and then we are going to print that sorted list so remember before it was going in um out of order 1132 now it's going to be in order as you can see it's 1123 pretty cool right and then also um you could probably cast this to a dictionary all right so now that you have a sorted list cast it to a dictionary oops um but now we can actually print this dictionary um apparently you can't do that I mean you'd have to use an order dick somehow uh to keep it um in the way you have to look that up I'll leave that as an exercise for you but yeah look up how to use order dict to give it a list or something and then um be able to preserve the order of uh these these um these things oh I think the error actually here was yeah we have a list of numbers when it's like how the heck do you cast a list of numbers to a dick that was the error that was having that was stupid on my part um you would actually need to somehow preserve the keys as well so maybe You' have to actually use items instead of keys or values and then sort um bu by something else but uh basically yeah that's pretty much um all the basics of dictionaries in Python um there are a lot of more a lot more things you can do with them um you can even do dictionary comprehensions or List comprehensions you can actually um if you know what that is uh I'm not going to go over that now but it's just something to note it's kind of cool you can actually construct dictionaries just like you would a list comprehension but it's a dictionary comprehension or a tle comprehension um you can do that with these things very very cool but uh that is it for this video you guys uh thank you for watching I don't know how long this took I feel like it was pretty dang long um but I really want to go over dictionaries thoroughly because dictionaries are freaking awesome in Python you can do so much stuff with them um they're basically like mini classes yeah like you don't have to use obvious your programming cuz you can just use dictionaries to get little jobs done but yeah um I'm just gushing now I'm just gushing gushing and gushing about dictionaries so great anyways uh yeah thanks for watching you guys I'll see you next time uh have a great day hey what's up guys Aaron here from clever programmer again and today we are going to be going over the idea of mutability in Python and programming in general mutability just means or another way of saying it is mutable versus immutable okay okay these are some weird words but let me explain let's get started mutability let me just type that out muta you probably already saw it in the thumbnail and everything and the title title of the video but yeah so mutability oh what does that even mean what this means is actually it should have been mutability so muta just stands for mutate mutate means like you're changing something so mutability it actually means mutat ility um or basically change ability okay so a mutable thing is a something that's mutable and an immutable thing is something that isn't mutable which means you can't change it so this is in changeable and this is changeable basically they should have called it changeable and in changeable instead of mutable and immutable which actually should have been mutable and immutable but I don't know who came up with it it's just kind of silly it always confuses me but that's what they mean okay what this means is there are different kinds of data types in programming in Python you're you are familiar with the ones in Python I'm sure but some are mutable and some are immutable so I think we went over in a previous video about lists and tupes right so lists is a good example of a mutable data type because they can get longer they can be empty you can add things to them you can subtract things from them you can change the value of the elements inside right you can you can go like this right that's a a list you can append things to it so I could appen four to this and then I could just print this out and then you'll actually see that it is a um list of all four things you guys get the idea so a list can change because you can add things to it you can subtract things from it and whatnot however a tuple is immutable right because remember I said that you it's a stable it's a consistent stable structured kind of data type or data it's actually a data structure but I'm just going to call it a data type because you can't add anything to it if you if you uh you can't add anything to it you can't delete anything from it and you can't actually delete you can't actually change these elements so you can't make it longer you can't make it shorter and you can't change what these things are whatever it is when you create it it stays like that this tupo will stay like this one 2 3 forever okay that's the difference between mutability and immutability it's kind of like in real life like think about it like if you have a rock that is uh immutable it doesn't really change I mean you could like smash it but in general a rock is very hard and hard to change so it's immutable it's one thing that never changes it's what it is from the beginning all the way to the end but something that is mutable might be something like a keychain because you you can take keys off you can put keys on it you can add things to it you can change the keys and it can grow and change you can mutate okay so that's the where the idea comes from um so yeah there's actually a lot of different kind of mutable data types and imut immutable data types I think all the mutable you can you can um Google it all the ones that all the different types if you actually want to find them all um IM immutable types things you cannot change would be things like tups okay uh tup um ins okay you can never change it you can only overwrite the entire thing oh yeah I forgot to mention that uh an immutable object like a tuple you can still overwrite the entire thing is essentially deleting it um but whatever that structure is that data itself that very when it is an immutable data type you cannot change it same with inss every time you overwrite an INT you're actually deleting it and replacing with a new int you're not actually changing the int directly because you can't do that um same with floats and booleans I'm just going to put all these together floats and booleans and um um strings I think I think so I think every time you change a string it's actually creating a completely new string a data type like not not quite sure about that but uh these are just some examples these are IM immutable data types um mutable data types would be things like lists because you can change them okay would be dictionaries all right um order dictionaries right I mentioned that that's another data type that we had in the dictionaries video I didn't go into it um and many many more most things things are mutable um less things are immutable like only a few things are mutable uh but basically these allow for more um secure data I suppose and mutable things are for flexible data so that's the distinction there one thing I do want to mention is that in dictionaries when you have a dictionary right dict like this and you have um a uh one okay and B 2 okay the key has to be an immutable thing that's why I I know strings are immutable okay because I know that this has to be immutable and this can be anything the heck you want it can be anything you want the value can be whatever you want but the keys in the dictionary have to all be immutable so this could actually be a tuple okay you could actually have a t here and you could say like okay on a screen right you have a bunch of you have X and Y positions on a screen and then you have a brightness so maybe if you wanted a you could have a dictionary that Corr responds to um be like okay at 0.1 two at pixel one comma 2 so you go over one pixel and up two pixels so the pixel like over there would have a brightness of one or turn it on or something like that uh so you can like that that's just one example that came to mind right now but yeah so you actually need an imut immutable data type as the key in a dictionary because if you don't then um the key changes and then it's not consistent anymore this needs to be immutable because that's how you index into the dictionary the same way um when you index into a list you have to use an integer which is also mutable um that that's just one thing I wanted to point out um with dictionaries this has to be immutable okay uh one last thing I want to go over is immutable immutable data types are a little bit uh finicky uh you're probably falling up to this point this part gets a little bit complex but I'm going to give it a shot explaining anyways so let's say you had a two pool okay 1 two 3 okay um you understand that this is an immutable data type type because I can't add anything to it I can't subtract anything from it and I can't change any of these individual things that's because this whole thing is actually stored as a chunk in memory all right well what if we actually had a list here okay right um so we have a that's a little bit oh no no this should be fine so we have a tuple here which has two immutable things two immutable things and then one mutable thing in its third place all right well let's first try to change um something so I'm trying to change the first thing of this immutable data type this twool you run it going to get an error see tupol object does not support item assignment which means you cannot assign any of these items to something new T we're trying to change this one to it's the same thing one but it can't actually change this okay same thing if I put two um I mean oops if I put uh one here it wouldn't change the two here and if I put to get two here which get this list I still still can't change it because I cannot assign this one to overwrite this list however okay T at2 is a list you see this here it's a list one two 3 T at2 so we're just going to say okay L equals T at 2 get rid of that error there actually no um I'm not going to do this I'm just going to put it in one line so T2 is the list so if we have if this whole thing is a list remember how we index into a list you can actually put more brackets after it okay and then if I put in zero we're going to get one okay if I put in one you're going to get two and if I put in two you're going to get this three because what whatever's in here is indexing into this list because this whole thing is this whole list all right now I am going to uh show you something interesting so let's put uh let's just print T here so we can see the two tupal I'll comment this out real quick and then run this to see what happens so prints out the tupal there okay with the list with the one two and the list and the third one and now what I'm actually going to do is uh obviously we couldn't we couldn't actually change um the entire list we got an error before but could we change something within this list I mean this it's if it's within this list it's also within this T right so you said we can't change anything in this tupol but a list is mutable a list is not immutable able so we can still change the things in here okay um are you following now so we could actually say Okay um T at2 is a list and then at zero is this one we can actually change this to let's say seven all right and hit run no error right no error and then let's print T again and see what prints out oops see what prints out okay as you can see seven was put where one is all right but this whole Tuple is mutable but this list is mute is mutable so we were able to actually change this okay a distinction there if this was a tupo we wouldn't have been able to do that okay if this was actually like this instead we wouldn't this code will actually break and I'll show it to you see what happened print T oh I forgot a parentheses here run this and we'll get the correct error we're the incorrect error before this is the error I wanted to pop up I don't think I've ever said that before we got the incorrect error um but as you can see yeah you can't change it but if this is a mutable data type instead of an immutable data type you actually can change it so what I'm trying to get here is that imut immutable data types um they are only immutable at their level okay at their Global level if you go within and then there's something that is mutable you can still change those and that's because in Python um this might go over a lot of you guys' heads but I'm going to explain this cuz you might understand is is because everything in Python is an object so this um Tuple is considered a a object and it's given all this data it's given this one it's given this two and it's given um the location of this list in memory okay so this list in memory can change to whatever the heck it wants but the location of this list will always stay the same it's just the list changes itself the values within the list change or it gets longer but the the location of this list which is just the first element where the first element is located um always stays the same so we can change this list but on this tupo you can actually replace this list with location okay this isn't actual what you code but just imagine the idea here that this is actually the location of whatever is here so the location of one and two is also here this is also stored as locations um it's called a pointer if you know like C or C++ but um the location of the list does not change okay but the value of this list can change okay so that's the little distinction there it's a weird little Edge case same deal if you had once again a list within here you could change it but if this was a twool you could not change it okay this is getting weird weird and nested so I'll go back to this simple case we had but that's pretty much it um about mutability and immutability you guys um I just want to explain that because it's a distinction in Python um the most important use of it I know is using T PS for stuff for structured data and then knowing that a dictionary key has to be immutable okay it cannot be mutable because the keys have to stay consistent in dictionary or the name of the thing is going to get all screwed up and it's going to freak out and the world's going to explode and then uh Transformers are going to start um coming alive and whatnot but um that's pretty much it for U mutability you guys thank you for watching I'm sorry if I got a little complex there at the end I get kind of nerdy and geeky and I like to geek out and explain all the little nittygritty stuff sometimes I know this is a beginning beginnner tutorial but hey might as well push you right that's how that's that's what happened to me when I was learning so thanks for watching you guys um hope you guys enjoyed it and I'll see you next time goodbye hey guys what's up how's it going this is kazy from CL program.com in this tutorial was that better yeah but aren't you going to take his seat after that oh can we just edit it like oh yeah yeah you just cut yeah yeah just and I'm just going to like fall all right now you go sit in the seat is is it rolling yeah I'm taking over boys let's do this what's up you guys this is Aaron from clever programmer and uh we just have a quick short little video for you today uh we're going to be talking about list comprehensions in Python so uh this is a neat little trick that uh that is unique to python I believe I don't know any other programming languages that have it but pretty much what it allows you to do is to make lists out of um cool little Expressions so you can actually populate an entire list with just one line with this little um unique thing a little bit weird to explain but I'll just show you and then you'll see how it works so let's get started so let's say we have a list called names uh let's just put in uh some names here so we have uh Jennifer Susan Jane and Sophie all right cool so this is our uh short little list list of names and um first of all if you wanted to put all of these names in a list then the first way you could do it was actually use a for Loop so I will show that first this is the way that you guys should be familiar with doing so we would just have an empty list here here and then we would have to iterate for every uh person in the list we would simply append that person to the new list so what we did here was we put every name in the names list and put it into the L list so we're just going to print this out just like that give this a run and um there is an error uh let's see what's going on here oh yeah there we go stupid me you guys pardon me we want to append the person to the list not the list to the list all right so let's run that again and as you can see the um all the names are printed out nice and nice and clean here so what we did here was we created a new list we read from the list and we put everything um in that list into a new list and printed that new list pretty cool right now I'm going to show you the list comprehension for this so the way you could um the way you do that is you would actually just um uh make a list like this so the Syntax for this is the item that you want to be in the list goes first so we could just put uh person here and I I'll show how this relates to the for Loop later but we'll go here and then we'll say um for person in names simply like that so what's happening here is uh we actually have a for Loop in in one line here so it's going to Loop through so person is going to Loop through this for Loop is is going to Loop through names and um each element in the names list will be person and all we're doing is simply taking this uh variable here and we're sticking it here and these things that are over here will be what's actually in the list when we're done so let's try to print this and see what happens it should be exactly the same go like that hit run and as you can see the output is the same both times so these two pieces of code this for Loop and this list comprehension are actually equivalent but you see how we collaps these four four four lines of code into one line that's the uh Power of list comprehensions so that's the most basic one that everybody learns first that's the one I learned first um but actually the true power of list comprehensions is that if you have a list of something you can actually do operations on every element of the list and create a new list that way so let's say you had um a bunch of numbers in a list you had 1 2 3 4 and then you wanted to maybe um multiply everything by two so it would become 2 4 6 8 just like that you could use a list comprehension to do an operation on every element and um it would come out like that so let's uh let's have another example um let's make another list and I'm going to change I'm actually do an operation on all of these so let's create another empty list here uh this is going to overwrite the empty list L from above um actually let's just paste this in boom just like that so for person in names we can actually um edit everything in here so if we instead of just wanting to add person we could actually edit this thing before we add it to the list so that it looks new so all I'm going to do here is a very simple and um slightly personal thing but I'm just going to type in dumped me right here so now let's run this and as you can see this has suddenly turned into a list of x's not just people all right so let's go on um uh turning this to list comprehension will be as simple as copy and pasting this and um the way this would work is uh for each person in um in the names list we would actually just add the string to here just like that what am I doing you guys so as you can see everything is reiterated here I've probably written this out on paper many many times but it's actually on a screen now forever in the electronic Abyss um let's move on so that's how list comprehension works all you do is you can actually go through an entire list so the list we're going through here is names and we wanted to do an operation to every element in that list which is ADD dumped me to the end of every name and so I actually just put those things together and put it in this new list so now the list looks like that you guys following um lastly there's actually a couple other cool things you can do um you can actually get pretty verbose in these and do some weird nesting but then it gets a little bit it might actually be better just to use for Loops at that point like nested for Loops um but if it's just two statements uh that might actually be okay like two nested for Loops or a for loop with an if statement inside uh we'll try that next so getting to a slightly more positive note uh we'll go back to um this list L um oh uh actually yeah we we'll have a new list down here let's just start something new so let's have a dictionary called movies and ratings just like that all right and then we're just going to have um Interstellar like that and give this a rating of nine out of 10 and then we'll also have dark knight let's move this over so you can see Dark Knight rating of eight um we'll have 50 Shades uh rating of three and then we'll have again 50 Shades Darker rating of two and this as this is progressing you can see where this is going 50 Shades darkest rating of one okay so now let's say we have we have this dictionary here yeah you can also run um comprehensions over dictionary so this would actually be called a dictionary comprehension you can um make a list here um and let's say I just wanted to fil through out all of uh the movies that have a rating less than six so I only want to show the ones that have a rating um more than uh more than six so how that would work would just be for movie in movies and ratings would there auto complete that there um if movies and ratings at movie uh is greater than six so we're filtering out here so if the movie is greater than six then we will append it to the the empty uh empty new list so that will just be movie just like that and then we'll print this out and let's see how that works um these three movies should have been cut out and then it should only show uh these two here it should just show the names because when we index into a uh dictionary only the key here the key string here is is uh put in the list let's run this and as you can see I ignore all this stuff I'm over it but um we can see that the the three movies at that anything with a rating less than six um these 50 Shades ones all got cut out and uh Interstellar in the dark knight uh these awesome scifi and superhero movies stayed in so that's how that works but we can actually put this all into a list comprehension this will be the final one cuz it's a little bit complicated but if you understand this you can pretty much understand any list comprehension because you can do uh I don't think there's a limit to it but you could probably Nest as many as you want into one line but it gets unruly at some point so just be conscious of that but this is great for saving a lot of space for short little for Loops so this one follow along you guys is going to be movie so we want the movie name to be in the list um for movie in movies in the list movie in ratings but we only want the movies um that are in movies and ratings if the movie and um movies and ratings at movie oops is greater than six so what this is saying is um for every movie movie. ratings or movie and ratings um if if the movie rating is greater than six then stick the movie name in the list so let's see how that runs it should have the same exact output and as you can see it has the same exact output as a for Loop all done in one line so let's take a one final look at this to compare the code so um this first example we have a list of names and then this for Loop became this less comprehension this for Loop became this list comprehension and this for Loop became this list comprehension um that's pretty much it you guys um really cool little thing you can do in Python uh very good for being very uh descriped in a single line of code and super super useful if you want to do a uh some kind of calculation on every element of a list and create a new list from that uh it's probably one of my favorite things in Python uh I don't know about you guys but yeah just let me know what you guys think in the comments um and that should be it for this video thanks you guys for watching and see you later goodbye hey what's up guys Aaron from clever programmer here again and today uh I feel like making an email add text scraper just felt like doing something small and simple so yeah let's get right to it so if I want to be able to search um a bunch of text and pick out some emails from it I'm going to need something called regular Expressions uh in Python this library is uh just re so I'm just going to type import re just like that and uh a quick explanation of regular Expressions it's a way to specify different patterns in string and text and strings and text so that you can match certain those certain patterns and then pick things out so an email address follows a very specific pattern right uh there's some letters and numbers and whatnot and then there's an ersan and then some more letters and numbers and whatnot and then a period and then some more letters and numbers and that's what makes an email address that's what a human would recognize as an email address so things like these if you can pick apart those little rules like the structure the pattern of something some entity in this case an email address then we could specify and describe that pattern with uh regular expressions and then once we do that then we can um run the regular expression over the entire text file and basically just pick out everything in there that matches the the regular expression in this case they would be email addresses so that was kind of a roundabout way of explaining it but I hope you got it um I'm going to I'm going to go kind of fast but I'm going to explain like a little bit here and there just um smoothing smoothing my way up to uh the full complicated regular expression that will actually pick out email addresses so let's just start with something simple uh first I'm going to need some text so let's just type out a random string literally a random string okay and um next we are going to create a regular expression pattern so we'll call this variable pattern equals um call the regular expression library and there's this function or method uh called compile and what compile will do is it will take a a string in that describes our pattern our regular expression pattern and then it will create an object in it an an object from it and put it in pattern so the first one I'm going to do is literally just uh this a random string the reason I'm doing this is because I just want to show you how regular Expressions work so if I type in something like this if this is my ACT actual regular expression what it's going to search for in the text is this text exactly so since I type these exactly the same this is actually going to match this entire thing and when I run this pattern over this text variable it's going to spit out this match because this um this matches this or I should actually have to say this portion of the text satisfies what this pattern says so let's do this real quick uh I got the pattern and then I believe I need to call um uh let's call it result equals um pattern dot I believe it's search yeah search and then text so what's happening here is I have um my text here so I want to search my text using this pattern so this using this pattern I'm going to search for the text and then any results we get back I'm just going to stick in this result variable so let's run this uh I need one more print statement actually uh bear with me I'm doing this uh on the fly all right uh print result so it will print the results we get it should print out this let's see what happens I could be completely wrong um sad truth of life but hey look so we get this object it's actually called a match object um if you don't know what an object is uh that's okay uh if you do though then it's this is just an object and one one of its attributes is called match and the match here is actually a string called a random string because this is what it found in the text in the text string this is the the match it found over here if you don't know what an object is just forget about it um basically all all you to look for is it says match equals this so anything that is right here that is in this like right next to match that means it found it in the text so that's pretty cool now let's uh let's try something else because that's kind of boring this is just a a static kind of regular expression now let's change it up so actually what I want to do is um you can also use special characters in regular Expressions so if I put some brackets here and let's say I put a or actually a b or c um this is better for explaining it if I put it like this this will mean this entire highlighted portion here is looking for a single letter that can be either a b or c uppercase it's case sensitive so if it can be a b or c um and nothing else then that's what it takes to satisfy it so this is going to um look for a single letter that is either a b or c and the very first letter here is a capital A and A is a b or c so this is actually going to be the only match when we run it let's just try this it should only have a here instead of entire a random string let's run it and hey look it worked uh the only match is a now you can actually put as much as you want in between these brackets you I think you can go as long as you want I've never actually tried but I mean if it gets too long it gets kind of messy anyways and just yeah um it's it's nicer to try to keep things concise I can put multiple letters in here like I could also put uh a lowercase R um a lowercase R um or D or M so that's kind of like three letters in random um let's try run this and see what pops out it should just be R and I am correct the reason it's just R is because this search function it only searches for the first match the very first match and then it stops so it it terminates once it finds its first match so the first match here it can be either an R either a d or an m and this is the first one that matches an R even though D and M also match it found R first and so R was considered the match so this pattern object got um I mean sorry this result object got created and its match attribute was set to R because that was the first one it found so as as you can uh you can assume I can really put anything I want in here this would still just return R because um actually would it not yeah there's no capital A in here the only thing that's um before this is a capital A so the only time it would change is if I put a capital A here and then since capital A matches here before R does then capital A would be the match and yep that's exactly what I thought oh let's get rid of all this gibberish um another cool thing you can do is like I said ABC you could go like that ABCDE e f g you can also just um instead of ABC you can also just put in a Range like a A2 C which is the same as ABC or A to Z which is the entire alphabet in lowercase also what you can do is actually chain these these ranges so I'm I'm I'm going to run this and since R is the first lowercase letter r should be the only match again and yep just as expected all right we can also add a uppercase just by going like this now it'll match all upper lowercase and uppercase letters so since capital A comes first and capital A is within in this one single letter um criteria that we specified here uh then a will actually be printed out and yep right again all right so i' I've kind of drilled this idea in I might be uh droning on boring you guys but if you're still listening now it gets a little more interesting because if we add a plus sign after this what the plus sign does basically says whatever comes before it I can have one or more of those so instead of only matching A Single Character like we have now um I can actually match um multiple ones so I could actually detect an entire word uh this time it's only going to be a again because it's going to find the first entire string of one or more letters of lowercase uppercase in that case it's just a actually let's delete a so now it's just random string um so if this is going to search for one or more lower or uppercase letters as long as I want and then it stops at a space because this doesn't count as a upper or lowercase letter this space so it's just going to get these six lowercase letters and that will be the very first match and then it'll stop so let's run this and see what happens and yeah random pops out so pretty cool right I can also put uh 0 1 2 3 4 5 6 7 8 9 Etc but I'm just going to put 0 through 9 so now now what this will do is it will find anything um um anything that has lowercase uppercase or numbers in it one or more one or more of them until it's not satisfied so I I could actually put some some capital letters in here now some random ones some numbers and this will still match because everything in this entire string is either a lowercase letter is either an uppercase letter or a digit from from 0 to 9 as we can see here it's just when we reach the space it is not satisfied anymore so this one or this one or more plus sign thingy that we applied to this whole thing in the brackets doesn't work anymore so actually this entire thing will be be matched and yeah what do you know pretty cool right so now that you understand a little bit of those things I'm going to move on um once you have these pieces let's think about what a email address actually looks like so an email address is going to have um or let's let's just random string um let's just make a a random email address so that we can test it out so let's just say my name 123 at website.com looks like an email address to me so let's just do that and then just add some some more random text because I am lacking creativity today but now we have this entire string here all this text text and we have one single um email here and we want to pick out this entire thing so if we ran this it would just return random again because that's the first mesh that it gets but we don't want that we actually want to pick out this email address instead of this random string so how could we do that well um another thing you can do with regular Expressions is um actually just use characters so if I just put an ersan here just an ersan actually it's going to look for the first match of this and since there's one here it's actually going to pick out this ersan when I run this let's run it and see what happens yep the match is an ersan let's uh it's at website if I put at website it's going to search for that exactly and then it'll say at website because that's the first time it found at website um but since an email address has a ENT in it uh this is very easy to uh to build this pattern structure so just like before we had all lowercase letters all uppercase letters all digits one or more and then um after that that satisfies like this portion here my name 1 2 3 and then after as many letters um or numbers that we like uppercase or lowercase in any order we please it's followed by an ampers San like like that's what an email has okay and then after the Ampersand what happens again yet again we have as many lowercase uppercase or numbers we we want so we can literally just copy and paste this same thing this chunk and just paste it again so you see this part here and this part here are exactly the same see it's highlighting for me because they're exactly the same that's really cool okay then what follows this uh website portion uh a period so we could just put a period but uh actually there there's this little weird special thing called you need to escape certain um punctuation and um symbols when you are coding it's if you don't understand it's a little bit hard to explain I'm not going to explain it now but just take my word for it um to get to actually detect a pyramid uh a pyramid a period we have to put put a backslash before and this is called escaping the period so this is actually considered a unit and this will actually be interpreted as just a period because this back this backs slash says treat this period as an actual period instead of doing something else um we would also have to escape this if we actually want to find a plus sign in our string we'd actually have to I guess I am explaining Escape sequences a little bit but if you put a backs slash here this would actually search for a plus sign literally in in the string instead of applying this plus sign to these brackets and same thing with these brackets if you actually want to search for actual brackets instead of having this weird um this thing here where you can have like all this stuff inside you would actually have to put uh backslashes before each of these brackets to actually check for these brackets so that's what that does that's the reason we need that for the period so just uh just take my word for it this will be considered a period this this here is equal to this period here and then again after the period what do we have um I don't think actually think you can have numbers I'm not exactly sure of all the possible email addesses you can have but I think it's only lowercase letters and uppercase letters all right and uh one or more of course don't forget that so I think that's the entire regular expression so we have um as many lowercase and uppercase um letters and digits as we want one or one or more Follow by ersan again oops again same thing and then a period and then just lower then just some letters after so that is what I believe an email address should look like let's try to run this and see if this gets printed out my name1 123 website.com hopefully it does and run and hey what do you know it actually worked um stuff really works the first time so things are going flawlessly right now um relatively flawlessly but yeah it seems like it's working I picked out this one email address uh but one thing I want to try is what if we have multiple email addresses is in the same string so let's say um I'm going to slide this over so I have a little bit more room uh what if we have okay your name um 888 at uh company.net something like that that's that doesn't make sense because a company is supposed to have um but yeah whatever so let's try to run this and see what happens it should pick out both of these right it should say match equals this and match equals this let's hit run hm but match only has the first email address but what happened to the second email address well let's try to delete this first email address and see what happens delete delete delete delete delete delete feels good destruction um and now let's run it and as you can see it actually picked out this email address your name 888 company.net well what what gives it seems like the regular expression that we wrote here is is picking out this correctly but it's not um it's not picking out both of them well the thing is uh the search function actually only searches for the first occurrence like I said earlier it only search for the first occurrence of of your match if you actually want to find all of them you can actually do that by just calling find all um I really want to uh drill this home to you because if you want to find everything then you need to remember to use this function instead of the other one uh it's a mistake I've made before so if we do this now it should actually pick out both email addresses let's give it a shot run and as you can see it returns a nice clean python list of both matches both email addresses that's cool right so um it looks like in like literally five lines of code we actually have a email address text scraper pretty cool man um some other things we could actually add to this is I believe in email addresses you can actually have um periods and underscores and and whatnot so that's literally as simple as adding um a period or a dash or an underscore in here and um I don't think you have to escape these if it's within the brackets if it's within the brackets it's already um considered it is what it is uh I may be wrong but we'll test it if it works I'm pretty sure that's how it works um same thing here uh I don't know if you can have um that here but let uh let's just try this and let's maybe add like uh uh your name let's add underscore or actually your dot or your name dot 888 now let's see what matches this time let's click run and oh something went wrong um maybe we do have to escape the dash let's try that yeah that's what it was I think we do need to escape everything in here uh yep okay that fixed it so you actually do need to escape everything so now it's actually picking out this email address just fine the entire thing let's change it back to what we had before just to make sure it's still working as expected your name. 888 run and it looks like it's picking out the enre thing pretty cool guys pretty cool so yeah you do need to escape these special symbols even if it's within brackets you need to put these backslashes before it to actually treat it as a period actually treat this as a dash and then actually treat this as an underscore you got to escape them um for that matter you might even want to escape the ersan would that yeah I guess so maybe that too if if ersan is a special character sometimes it's a little bit confusing whether you need to escape or not but if you're ever getting weird errors when you're dealing with strings and you're trying to par string strings like this um try escaping the the special characters and sometimes that'll that'll fix the problem or unescape them it's it's a very uh weird layered convoluted kind of thing but yeah it's just a part of uh learning this this crazy Aztec language yep I just taught you guys how to speak Aztec um but yeah guys uh it seems like we have a fully functioning uh email scrape right now with uh this added functionality so pretty simple right five lines of code took a little um a little while to get here but yeah that's pretty much it just these uh these simple five lines and that just kind of shows the uh Power of regular Expressions we're able to detect all different kinds of things with uh one single line of weird symbols pretty much so uh that kind of demonstrates the value of it I'm sure Python's very happy to have it within its Library um if it was sentient but yeah very useful tool um I'll probably be touching on this more in the future this was only like a general introduction to it but um there's a lot of things you can do more with this there's a just a lot uh perhaps I'll go into the future but for now that is all you guys uh thanks for watching this video um still do this getting better slowly but yeah hope you guys liked watching it um stay tuned for more and yeah I will see you guys next time goodbye so in this video you're going to be able to if you watch this you're going to learn things like how do you work with date times how do you work with daytime objects how can you take a string and turn it into a datetime the benefits over all of this like you're like what the hell is this like if you're a complete beginner and you're like I'm just totally lost the are you talking about Ki if you want to be able to calculate the distance between today and your birthday you'll be able to do that if you want to make an app that can send an email to somebody body after 2 days after the sign up automatically you need to know how dat times work if you want to be able to make an Instagram clone and you want to do things like when somebody makes a post and it timestamps it in their time zone and shows the time in their time zone when they log into the app then you need to know how to use date times so without any further Ado let's jump right into it all right so we're going to import datetime all right this you don't have to pip install this package it comes built in with python and it allows you to do fancy stuff with date so for example I can do let's say if I wanted to get today's date I will do today and I will do date time. dat and I can put in uh year which so you can see my pie charm is telling me what arguments it takes so it can take year as an integer it can take month as an integer and day as an integer so so remember it takes it as an integer actually for today I should probably just leave it blank even right and say today and uh if I print out today let's run this guy it will give me the date of today so that's how you will deal with today if I want to do birthday my birthday I'll do date time. date and now I'll pass in what I actually want to pass in so I'll pass in let's say the year 1994 the month 7 make sure you don't do 07 because 07 is not an integer so it'll give you an error you can't start an integer with a zero that's leading it so we'll say 7 July 14th is my birthday and then we will go like okay like print birthday let's see what that looks like cool so it's printing it out and showing it to you as a string but it's actually not a string it's birthday is really an object here because if I call the repper method it will show you it that it is indeed a daytime object and not just a string like it shows you in the terminal so do not get confused by that so we're going to create something called since birth I want to see how many days have I been alive right very important so I'll say days since since birth and what we'll do is we'll say today minus birthday okay and then let's do day since birth let's print this bad boy out it says 904 days now if I really want to make sure that I'm getting back days is I should do this and then I should do dot days this will make sure that I get back days and I don't get a daytime object back so this is telling me days since birth which is kind of useful I guess you know pretty useful important and that's how you can you know you can subtract dates you can add dates and all that if I do um if I create a Time Delta so let's say I'll do time Delta I'll create date time dot time Delta and I will say days equal 10 and now I'll say to today to the date of today which is March 9th just add 10 days to that that's it so I'll just do plus time Delta now when I run it what I get back as you can see right here is March 9th has 10 days added to it and what do you get when you add 10 days to March 9th that's right you guessed it correctly you get back March 19th so this this way you can add to dates you can subtract from dates if you do minus here um let's do minus like that and we can run it and boom we've subtracted 10 days from that now the reason why you want to use libraries is because otherwise this stuff can get very confusing very very quickly because like for example you know February only has 28 days and then sometimes it has 29 days and some months have 30 days and 31 days and then you got to take leap years into account and you got to take all this other crap into account so that's why you don't want to create your own functions for this you want to just use something that somebody's made called date time makes your life a lot easier all right so I've shown you how to add and subtract time using time Delta I've shown you how to create daytime objects now and and I've shown you how to like pull out the current days you can pull out the current month too so like for example I can do today. month month and if I run it it'll give us that it's the third month because it's March I can do today. day and if I run it tell me that I can also do today dot uh weekday so this will tell me what weekday is it so right now it's telling me yo this is the fifth day of the week and let's check and and it or sorry this is the sixth the sixth day of the week because it says Monday is equal to zero and Sunday is equal to 6 okay so computers you know mostly start at zero and go up to six so that's why if you do weekday that's why it gives you five and it is the fifth day indeed because it's Saturday today so I'll write here Saturday is equal to five okay so there are many methods like that that are very useful now something else that's useful when it comes to date times is we've covered date times we've covered Deltas but what now we want to know is okay how do we deal with hours minutes and seconds so let's do that we will do something that will show us we'll do date time.time and essentially when you pass time you can pass in hour minute second and microsc so we will pass in our 7 Minute two seconds 20 and microc seconds you know 15 and then we can also pass in time zone info and what we want the time zone to be so but for now we'll just leave it blank and let's print this out and let's see what that says so that essentially just gave us a date time.time object so it gave us a datetime object where it's giving us the hours minutes and seconds but again I also Corey I was watching his video and he says that he uses primarily datetime and I agree with that because I used to use time but then I realized that there so there is three three different ones there's datetime dot date then there is date time. time and then there's date time. dat time and this is sometimes confusing but here's the here's what it really is so date time. dat is just year month and day okay date time.time is just hours hours minutes seconds and micros seconds and daytime. daytime is this year month day and hours minutes seconds and milliseconds that's essentially what you need access to because this has access to everything so most of the time you know you should really be working with date time. dat time all right now when we're working with these well we can do the same thing of time Delta all right so if you have a datetime object like date time. datetime thing you can still do time Delta and automatically do all the math for you including the hours math as well so you see how we created we did days if you add 10 days well you can also create a let's say we create an hour Delta and we do daytime. time Delta and instead we pass in hours and we say so right now it's almost 600 p.m. so if I add 10 hours to today so if I add 10 hours to right now right so for example if I do daytime. daytime. now first of all let's print that out so I'll do print and it'll run it so it's telling you that you look it's essentially 6 p.m. okay that's mil in military time it's 17 17th hour now if I add the time Delta to this and I do hour Delta and I run this well you'll see It'll say March 10th which is the next day because it makes sense right it's 300 a.m. into the next day so you can also do time Delta just like that let's move on I'll write little notes here for you so I'll say that this is 10 hours um add 10 hours to current day that's what this part of the code is doing this part of the code is adding 10 days to current day find days since birth is that what's that piece of code doing okay so we have covered quite a bit now let's move on to a few more things when it comes to date time what you want your date time to do is be be aware of the time zones often times the daytime object by default is called naive so it's not aware of time zones meaning that it doesn't understand what is Mountain Time versus Pacific Time versus some other time so in different countries you have different time zones so it but it won't know the difference you have to tell it to be time zone aware AKA not naive so let's go ahead and do that we will take a datetime object like today so I'm just going to do datetime do dat time. now and what I'll do is let we're going to use a package called Pi TZ pytz so you have to install it what I'm going to do is I will simply install that package using my pip install so I'll go to the terminal here and I'll do pip install Pi TZ and if you don't already have it go ahead and install it looks like I already have it so that's good and let's go back to running this code cool and I will import pz at the top now that I have that what I can do is I can say time zone is equal to Pi TZ do UTC so now let's print that out and what you'll see is that not only does this daytime object give me the year the month the day that the hour the minutes the seconds and the micros seconds but it also gives me it also has made it UTC enabled but right now it's at plus z0 so now because it's aware we can give it a different time zone so let's try that so this is datetime today and what we'll do is we'll go datetime dot Pacific and I will do daytime today do as time zone and I will pass in the pz time zone except I will pass in us/ Pacific cuz I'm in LA and we are on the Pacific time zone and let's print that out okay so minus 8 that's what I wanted and that's what Pacific time zone is so that's how you can make a time zone aware and pass time zones there's a list of all the time zones so again this is also from Corey shap first tutorial and he just Loops through it which I thought is really cool for time zone in uh so let's for time zone in oh yeah let's just call let's just do that because there's already done a time zone here so we you don't want to like create any confusion pz. timezones pyz doall time zones let's print time zone and when I run it you'll see that it shows all these time zones like us Pacific us Mountain us Central us/ Alaska Pacific in uh Indian and Europe and all pretty much all of the ones all of the time zones in the world okay and that's the where I got the list from that's where I figured out where this came from if you look it up online it'll probably be even easier cuz then you don't have to scroll through your command line it'll be in a nice little table for you all right so now what we want to do is we want to be able to take that time and format it so we're going to do something called string formatting so we're going to do uh string formatting with dates so all that means is we'll take some ugly looking date you know that it shows in and maybe in this format where it goes 2019 03 March and 09 and essentially we want to be able to show it such as March 3rd like that and then it should say 2019 okay so let's make it look a little pretty how do we do that well let's take our Pacific Time daytime Pacific that we had here and simply we'll do string formatting that's what this F is for so we're essentially string formatting time that's what we're doing here capital B is for the month don't ask why it just is uh small D is for the day and then percent capital Y is for the year let's print this bad boy and run it and you see the date looking really nice oh sorry today is not March 3rd it's March 9th my bad so we want it to look like this and that's what it did it made it look nice now how do we go the other way let's say that we have this thing we have March 09 2019 and maybe this is you pull it from a website somewhere right so on some website somewhere this is how dates are written well how do you take that written date and turn it into a datetime object so then you can do some manipulation on it how do we go from essentially this to like a datetime you know object kind of like that okay how do we do that how do we go from this guy to then get getting that guy well for this we use a method called Str strp time I need to turn off disable inspection there we go so here we use the method Str strf time here we're going to use St strp time okay p is equal to par say and the F in this is equal to formatting so that's one way to remember all this now what we'll do is I'll say take a datetime string so what I'll do is this okay I'll go like this we say boom date time. dat time. STP time and I'll give it a string so let's say I give it March 09 comma 2019 and you have to teach it how it's written so I'm going to say because it says the month here I'll put capital B like that because it say the day here I'll put percent D like this and then because there's a comma I'll put the comma and then year is here so I'll do this like that all right and we will call this you know date time thing and then we'll print it out datetime thing let's run it and boom this is what it you know if if I actually put a repper around it you can see that it's actually now a datetime daytime object rather than just being a March 9th string we took it from this string and by using this and telling it how it's formatted we turned it into an actual object and now that it's an object you can do you know you can add this to you can subtract this you can do all kinds of stuff now this is all great this is this pretty much covers almost everything that we wanted to touch base on like the most common problems that people have with date times adding and subtracting date times time Deltas which is very common and then people want to also know how to format it and show it print out a datea in a regular way and then you also want to be able to go from a regular date into a daytime object so we've done all of that we've also done some time zone stuff but what I want to show you now is if you have the opportunity to work with a different module different thing instead of daytime your life will be a lot easier so what I recommend that you use is something called Maya all right Maya which is we'll put the link in the description of this YouTube video so please Frankie when you're editing just remember to pop this into the YouTube description and essentially Maya is considered daytime for humans and all it does is just makes it a lot easier okay so Kenneth Reed says he he wrote this and he made it so it's it's simpler to deal with things so for example when you want to uh do when is tomorrow like when you want to do set something to tomorrow right like look at our even our today it's kind of confusing it's kind of funny if we want to add a tomorrow here what we would have to do is add this Delta right right we would have to add a one day Delta and then we it would give us tomorrow whereas for Maya you can literally just say maya. when tomorrow so you can give it a little datetime object Maya and then when you do maya. when and you write tomorrow it'll figure out when tomorrow is it can also automatically do slang for you which is pretty cool you know 23 hours from now or 10 hours from now instead of you know writing another way it's these builtin methods but what's really cool to me is how it can automatically parse datetime strings and generate naive or not naive date times so you can give it a date time string and call this parse method on it and literally right then and there you can also give it a time zone and it will automatically figure it all out it will take it from the string and turn it into US Eastern Time Zone it's that easy for how and also how it prints things out it makes it really easy for you so instead of them looking really funny the print methods of this also looks really nice when you print something out it tells you Wednesday September 20th 2017 and so when you're working on things that's also easier another thing that I like about this is to add Delta all you got to do is just do do add all right and then it will automatically add things um essentially for you okay so you don't have to like worry about or do kind of anything on on your own it will just add it so you just do add then do days. equal 10. day so it goes from 7 to 17 just like that and I like how it says always here because what it does is whenever you runtime Zone it's always in UTC so it's time zone aware at all times by default unlike the datetime objects which are not aware by default and I and the advanced us usage is really cool too so if you're building an app which has to do with a lot of calendar type of things and you want to create an event that is an hourong that starts now well it's super easy if event start which is just maya. now so time. now you know or date time. now if you were using date time so just maya. now and to the now the event end is just the maya. now. add hours equal 1 so you just added that 1 hour Delta to it in a very easy way by just saying add hours equal 1 and then you can use this thing called Maya interval class so it's a really powerful class and you can give it a start date of event start and you can give it an end date of event end and it automatically can create that event for you now there are other modules as well such as DeLorean arrow and pendulum so arrow is something I've used in the past and era is something that Corey in his video recommends but I believe that Maya is going to get is a little bit more sane and will get most of the job done Arrow can do more but I do believe that Maya does things a lot better and if Kenneth Reit is doing it then you know that it's going to be right so I would stick with Maya and you can still use these together with it it complements them he even says that here that it complements them all right so that's really what I wanted to cover in this video it's super easy to install it just pip install Maya and you'll be good to go so yeah that's the main things I wanted to cover I hope that you enjoyed this video I hope that it was informative you learn something new and that you go now and create maybe even some project with date times that's how you'll improve in it that's how you'll become better with that said we do have a new program that's going to be coming out we're working hard at it with our entire team and this is a program that's whether you're a beginner or a professional developer is going to help you take your skills to the next level so whether your goal is to land your first job or your goal is to get a promotion at your current job or maybe you want to just become a much better freelancer and crush it at freelancing well then we will have a new program for you called how to automate stuff with python it will give you all the essential trainings you need to technically become an incredible developer and we will dive deep into python into programming and we will create many different projects will go much deeper into Concepts like web scraping Data Mining and just overall to handle really big projects and take your skills you know to the next level with that said all you need to do to join the wait list for this course cuz it's going to be coming out hopefully sometime soon but we're working on it really hard so just in the description below click the link it's going to take you to a page where it says how to automate stuff with python pop in your email and your name and I will send you a free gift once you do this uh we'll send you a threepart epic training Master Class perhaps apps and also when the course opens up you will be the first to know that way you won't miss out with that said thank you so much for watching if you like the video go ahead and please give it a like if you haven't subscribed to the channel go ahead and subscribe to the channel and as always I love your face this is ky and I'll see you in the next video hey you in this video we are going to be doing web scraping with python using libraries like beautiful soup and requests this is something that is very useful whether you are a beginer or a professional developer these are essential skills that almost every person needs so let's get started it's going to be a fun little project and this was inspired by dataquest.io it's not a sponsored video or anything but I looked at one of their tutorials and they are doing a weather forecast so I was like hey we should also just do that weather forecast except we're going to be doing it at for La cuz that's where I live so we're going to go to forecast. weather.gov so that's number one let me zoom in here so you guys can see very clearly and I'm going to type in Los Angeles we'll hit go and this is what pops up so what we're trying to do here is we want to pull this data we want to put it into an Excel spreadsheet we you could also put it in Panda's data frame if you know what that is but most people know what an Excel spreadsheet is or what a CSV file is so that's essentially what we're going to be doing and we're going to be doing web scraping here it's a pretty cool thing to learn how to do so let's jump right into it first of all for really basic stuff you know you have to know basic HTML we're not going to cover too much of HTML or CSS in this video but you know for example if I write an H2 tag I have code pen open here so I can just show how HTML works if I do H2 and I say hey guys like that and I do this it'll type in hey guys knife I do H6 tag right it'll make it smaller so these are H um this is HTML this is Basics very very basic basic use of it and now what we're going to do is because I'm on Chrome we're going to hit inspect here and dive deep using the Chrome Dev tools it's a very powerful way to learn the structure of the website that you want to scrape you want to abuse this tool okay use this tool a lot the Chrome Dev tools so now I'm going to hover over and essentially what I want to do is I want to be able to get this week's forecast so I want to be able to find out what the weather is tonight Sunday Sunday night Monday and you know I also want to get the descriptions of it and I want to get what's the low and what's the high be able to put it in my Excel spread sheet so let's do it so first of all I want you to click this button over here okay the shortcut for this is command shift C on a Mac or you can just come over here click this allows you to highlight over each thing and then it tells you what element it is of a HTML or css file so goes okay this is an image element as you can see it says IMG do you know something so that dot pull left is a CSV class or sorry CSS class so let's go over here and check this out so it looks like we have a container here but this has a ID we have a div here and this has the ID of 7day forecast body which is very good which is exactly what we need to Leverage here so let's go ahead and use this because we know that once we have access to this we will have access to essentially everything else that's within this div so let's go to our code now you're going to need a few modules installed and I'm not going to walk through the full process of installing them because again those could turn into their own videos so let's go here and first of all we you need to install uh pip install beautiful soup 4 so that's step one another thing you're going to need is PIP install requests that's how you're going to make HTTP requests to the websites and then you want to install the last one which is pandas all right because I've already installed them for me it says requirement already satisfied for you it's going to take you through the installation process if you run into errors with installation process look up how to overcome them then once you solve it come back to this tutorial so once this is installed let's start writing some code so first of all we're going to do import requests and I'm going to also say from bs4 import beautiful soup like that all right and now essentially what I want to do is request this URL so I'm just going to copy this URL right here I'll go here and I'll say this page is equal to requests.get and then I'll pop in that URL right there we'll also create a soup object out of that page so that request thing that we just got we're going to use that to create a beautiful soup object and what beautiful soup allows you to do is makes the web scraping of the page really really easy it gives you nice structures it's able to find classes it's able to find uh par paragraph tags it's able to find headers and it understands CSS and it understands HTML so it makes your life a lot easier that's why we're using beautiful soup so let's go here in soup and go beautiful soup all right and we'll say page. content and then we will say and we'll give it HTML parser okay so it'll know that it's HTML and so it needs to parse as an HTML page all right and if I print this we should see something pretty weird so I'm going to run this piece of code I'm going to go here hit run all right so it says couldn't find a tree Builder the features you requested HTML parser do you need to install a parser Library oh yep HTML do parser not a hyphen parser so we have now let's try it again we will run the code okay so looks like it worked and as you can see the soup object is all of the HTML code that's on that page it's pretty much the source code of that page so if I go and I rightclick and I go I go view page Source it's essentially this whole thing all right so it has access to all of it but what's cool is that I can do things like that find all and I can go find all of like the a tags you know find all a tags for example and if I run it it's essentially finding all of the links so it's finding the noaa.gov link that's there um it's finding the web .gv link that's on that page it's finding the commerce.gov link that's on that page so um these all these links is able to find them right if I doind images or if I doind all you know short descriptions it'll find those as well so that's what's cool about beautiful soup makes your life really easy so let's go ahead and what we're going to do is we're going to create a variable that has this entire div stored inside of it that way we'll have access to this this div is what I'm talking about we'll have access to that div at all times so let's go to our code here and I'll say weak is equal to soup. find and we'll give it the ID and the ID what is the ID here the ID is 7day forecast body so because I don't want to make a mistake I'm going to click here once I click here you can see at the bottom it's highlighted this line I'll go to the ID and I'll doubleclick I will copy this I'll come back in here paste it so I'll make sure that this way there are no spelling errors as a programmer I know sometimes you want to do things quick and just type it out but the reason why you want to paste is not so you're faster but the real reason why you want to copy paste is as much as you can is so you're accurate and you don't make mistakes that's why I took the time to copy it even if it was small like if it was three letters I would still copy and paste because it has happened to me so many times that I'll make like a tiny little mistake like the one I made up here with html. parser where I wrote a hyphen here all right so we have this access this week let's first of all print printed out let's see what it shows us so we'll run our code all right so basically now what it's doing is showing us everything that's inside of that div that's all it's doing that's all it's showing us okay now it's not showing us the entire HTML page anymore it's just showing us that that's all we want anyways we need we just need to access to that one div so what do we do next well now what we want to do is we want to add access all of those objects or items whatever you want to call it we'll just call them items so I'm calling so I'm calling I this item number one what I'm highlighting here this is going to be item number two this is going to be item number three item four item five six 7 8 n you get the idea okay so if you notice each of the each of these a uh list item okay so in HTML a list item has a tag of Li and an unorder list item has a tag of UL so you can see it says Li here and how we can access all of these by either using the tag LI or we can use the t uh class forecast Tombstone so let's say week. find all and let's just try Li and let's see what it gives us maybe we'll run into an error maybe we won't let's find out so when I hit Li actually let's comment this line out all right so when I hit Li I get a lot of things okay and now let's actually do instead of Li what we'll do is is we'll say find all and we'll say look for a class instead of that Li tag so we're going to go class and the tricky thing in beautiful soup is you can't just say the argument as class because that's means something special in Python so you got to do class underscore like that so class is equal to and then we'll say Tombstone actually we'll copy it so we don't make a mistake so I'll click here and I'll go forecast Tombstone and we'll paste it just like that all right actually maybe that there is a better thing that we can do so let's go all right so we have a div actually that contains all of these items I missed this div so this div actually contain contains it's a tombstone container so it actually contains the the blue part is what it contains right so you can see that it contains the where it says Sunday it also contains the image it also looks like it contains the description where it says chance showers and it also contains the temperature whether it's a low or a high so let's actually access the tombstone container class all right so we're going to go class class and uh instead we're going to say we're going to go Tombstone container if it lets me highlight it it's kind of tricky to highlight it's it's pretty secret well let's just click here and then let's dig a little deeper and this is the tombstone container right there so we're going to say get all of those guys okay and we're going to say get all of those guys okay so let's go boom boom do that and close this out and this we will call items okay this will call items and then we'll also print items so let's run this code now all right so you can see we have a list and each item in that list is essentially one Tombstone container so let's say that I get item zero in that list the first item index it by zero I get one Tombstone container so what is that it has the period name which is tonight if I go here you can see right there it says tonight uh the next thing I should see is this so if I hover over here this is the notice the paragraph tag in the CSS class here is period name so when I go here I see class period name is tonight when I go here the class here is short description short hyphen DEC and it should say slight chance showers and when I go to my code here so this is the image alt tag Let's ignore that let's look for the thing that we're searching for the short description one all right so the short description here says slight chance right just what we were looking for and slight chance showers and then we also have the temperature class all right which is this one right right over here so that's that's what each item is right so each item in that list will give you man it's it's kind of annoying because you can't SE it's hard to select that but each item is essentially that Tombstone container class this guy right over here okay Tombstone container boom boom Tombstone container the second one all right so now that we have that what we're going to do is now we'll find what we want to do is get all of the period names so where it says tonight where it says Sunday Sunday night we want to get all of those period names and be able to put it in one column then we want to be able to take all of the short descriptions and put it in a description column and lastly we want to be able to take all of the temperatures and put them in a temperature column so each of them is going to have their own columns so let's go ahead and do that so what I will do here is I'll say for items zero let's first of all just get that item's um period name so I'll do class equals I remember the class name was period so I'm going to just put that and first of all let's just print this guy and let's see what we get we will comment this out so when I print this out I get back this P tag but what I really want is the text the text that's in between the tags so what I can actually do is because it's a beautiful soup object I can just go and do get text like that and run this and when I run it gives me the text that says tonight now I can copy this line paste it and essentially just go and change the class name here to the next class which is short description so I'll do short description like that and get its class I'll run it and now it should say tonight and and slight chance showers which is what it says right there and then last thing I want is temp so I'm just going to call it by the temp class not temp low because this is temp high this is temp high so we're just going to get by the more General name so it works for every single Tombstone container and we'll go here and we will simply say temperature like that and when I run it you will see that I get back back those three things so now that I'm able to access all of those three things from the first Tombstone container now it's very simple I just have to collect all of them in a list and then just run a for Loop right to be able to access any of them so let's just go ahead and put them on all oh sorry it's already in the items list so items list already has them right now I'm only accessing the zeroth one which is in human language the first one now all I need to do is write a for Loop that goes through all of um all of those items what we're going to use is list comprehension because that's cool so here's what I'm going to do I'm going to say period uncore names is equal to and I'm going to say item for item in items except what I want to do to this item is I want to do find its class and make sure that the class says period name and then I also want to get its text all right so I want to find oh made a mistake here here just didn't write the equal sign that should work now all right so this is a list comprehension that essentially says Hey for each item in items as you Loop through it just do this to it and that'll essentially get me back the period name now what I'll do is I'll print period names so you can see what it is it's right here this line and right all it did was Loop through and just collect period names that's what we want okay so that's done now the second one that we're going to write is going to be short descriptions so we'll do short descriptions and we're going to say item. find so it's essentially going to be the same thing right so what I can do is I can just copy this guy come over here and paste it paste it move it up and then bada bam bada boom and we'll come here and instead of that we'll say short description and then I'll copy paste this and I'll come here and I'll say temperature and I'll change this to temperatures all right so all of these now get us everything that we want I'll print the these out as well for you so you can see what's going on all right I'll run this and you can see now we have three lists with what we want and that's exactly what we needed and now I'm going to show you something really cool initially what my instinct was was to write it to a CSV file well you have to do a little bit of coding for that it takes some time it takes some stack over loing it's kind of obnoxious there is a beautifully elegant and easy way to actually write this to a CSV file and also to do data analytics with it using pandas so let's use pandas here and it makes it so easy to turn this data into a table that you can then actually use manipulate and do stuff with so let's do that let's go up at the top and remember at the start I told you install pandas so now what we're going to do is we're going to go here and install pandas I believe P comes before R so let's do it like this pandas as PD and now what we're going to say is we're going to say weather stuff is equal to pandas do dat frame and what data frame takes is actually a dictionary all right and we are going to say period so the column is going to be called period and the values of it are going to be period names so it's going to be this list that we made here and then the idea is essentially the same we're just going to repeat that same process and we're going to say the next one is going to be short descriptions are just going to be oh comma goes here going to be short descriptions okay and then lastly we have temperatures which are just going to be temperatures oops comma make sure you have all the commas in the right place all right that is essentially the dictionary that's a much better way to actually write the dictionary so yeah that's the dictionary we got our data frame we put our column names these are the values that go in that column so that entire list is just going to go there the entire list of short descriptions is going to go under the short descriptions column the entire list of temperatures is going to go under the temperatures column and one little trick I want to show you guys is you can put a comma here it won't give you a syntax error and it's just a good habit to get into because because then when if you ever go back to that dictionary and add more things you'll never run into an error so just a good code hygiene and if we print this out now let's see what this might look like so let's print this out so you can see that pandas actually turns this into a really I'll comment all the other print statements out now because we don't need them anymore and you can see what it does is it turns it into this beautiful looking table which you can now take a look at and do stuff with and you know figure out the means and figure out the averages and all that kind of nerdy stuff but we're not going to get too much into that because that will be a whole another video with pandas our job is not to use do that we are just learning how to do web scraping and to make this data useful the last cool thing I want to show you that makes it all super useful really handy trick is this awesome feature that Panda has so I can just do weather stuff. 2or CSV all right it has this beautiful um thing you can do which is just called that two CSV and then just give it a CSV name so we're going to call it let's call it weather. CSV and I'm going to save I'm going to run this and right when I run it I get the CSV file over here which looks like this but let's take a look at what it looks like in our computer so we will go here and I will hit that and boom look at that it's looking super nice Super Fresh and you can see the entire data table right there I can also open it up in Excel if I want to Let's zoom in a little bit so you can see it right and you can see we have our column called period with all of this data we have short descriptions with all of this data temperatures all of this data so that's so freaking cool right we just created a CSV file from scraping the internet scraping something online now you can just take that URL and pop something else in and that'll also work so for example forget Los Angeles weather maybe we can look at the weather of say Chicago so let's type in Chicago here and we will hit go hazardous weather outlook wow wind advisoring effect so that's pretty scary huh so let's go let's copy this and for you it might look different right because you might be doing this video uh following tutorial at another time so I'm going to go here and I'm going to paste the new URL all right I pasted the new URL here and now let's run this code and we're going to go take a look at our CSV file now don't save and view will will be 300% and take a look at this now the data is completely different right now it's the Chicago's temperature so if you were making a web app you could use web scraping to use somebody else's website to dynamically generate stuff on your own website pretty powerful stuff all right hopefully you've enjoyed this tutorial that is all I had for you today thank you so much for watching this video if you like the video give it a like if you enjoyed this and you want to keep seeing the new tutorials that are going to be coming out and make sure you subscribe to the Channel with that said thank you so much for watching as always this is kzy I love your face and I'll see you in the next video hey what's up guys this is Aaron from clever programmer and today I just want to talk about uh a cute little function in Python called zip so this isn't the kind of zip that you would see when you are zipping or unzipping a file in Python but uh it's actually uh a function that you have in the language that allows you to glue things together to make things easier to deal with that might have made no sense but I'm about to explain it in code right now so let's get right into to it all right so go to Ripple it uh Ripple it as usual I'll create a new repple here um go down to python whever it happens to be in the list create reppel and uh all right we are ready to go so zip um I might give a little bit of an explanation before I start actually so zip what it does is it will take any iterables in Python so an iterable is just something you can iterate over in a for Loop that be a list a tuple uh I believe you can iterate over a dictionary you just can't go in any specific order it's just going to iterate in any random order and um other things like that like iterables are things you can go over but if you have an iterable then you can actually map um I might be wrong there iterable I think it it has to be I know for sure for lists and tupal if it's in order then what it does is it takes corresponding elements and it will glue them together so the first element from two lists it'll put those together into a two element Tuple and put that into the first element of one list and then so on it'll take the the second element of both lists and then stick them in a two element tle and put that in the second element of the list and um it'll just keep doing that until everything has been paired up or um even if you have three list then it'll keep doing that until everything's tripled up it might be easier to understand if it's in code but that's the best I could do verbally let's just get right into it so if we have a list one here um which is just going to have very simple numbers like this uh list I forgot the equal sign um that's better looking nice and clean um and then let's just do something like this put one two uh three and four and five cool so now we have our two lists now as you can see both of these list are the same length which is important not required but very it makes things easier or cleaner I should say it makes things cleaner when you're using zip it's not required but it makes things definitely cleaner so we'll start with this example if we have list one and list two then I'm just going to call this final list we are going to make a new list here called zipped and all it's going to do is it's going to call the function zip which is is literally just zip just like that zip and then all you need to do is just put in the two lists in here just like that so this will actually work in Python 2 this is something I came across um I I didn't realize that it didn't work in Python 3 this will work in Python 2 but in Python 3 you actually need to cast this to a list so before I run this just be aware that there's a little change here whenever you're calling zip sometimes if you want to print it out you need to cast it to a list first before you print it out so zipped now is a list but we zip together list one and list two so remember this is list one here the numbers 1 through five integers 1 through five and list two is these five strings 1 through five when I run it when you see it you'll understand exactly what it's doing oh stupid me I didn't put in the print statement print zipped now let's run it so as you can see here what happened is it took the corresponding elements of each list and it stuck them in pairs and then put each of these pairs in its own list so this list itself is of length five just like the original two lists but each element is actually corresponding elements from the other two lists pretty cool right um one thing I want to point out is that if the lists are not the same length so let's add a six to this list and then try it again then this six seems to be ignored so what what's going on there actually what's going on there is python will always truncate truncate is just a fancy word we use in the programming Community to say cut off just ignore you truncate it off like you're cutting a tree trunk you know what I mean just chop it off like a finger if it's there then it'll just truncate anything that that is excessive so the the shorter list will take precedence so the six is ignored but if this was five and then we say we added an element here and we put six here then this six here and the second list will actually be truncated will be cut off of your finger as you can see it's it's ignored both times the the six number pops up but then of course as you guys have probably guessed and expected if I put in a six then voila it pops up there same thing goes if there's three lists if you actually have a third list here and then you have some other things and these become tupal of length three then whichever one of the three is shortest that will be the one of what determines this final list okay so that's how that works when you have different length lists but we're just going to stick to same length list because because it's just a little bit easier to understand I'm going to go back to five because I don't want these going off the screen like they are right now I want to fit everything here so you guys can see everything nice and clearly because when people don't do that um it pisses me off continuing on I already showed you guys how to zip stuff together that is uh very handy now another thing you can do is actually unzip things so okay let's let's say we went from these two lists these two long lists to one long list of little pairs which is another way you can think about it you're going from two long lists to one long list of little pairs or three long lists to one long list of little trios and so on and so forth but if you want to go in the opposite direction you want to go from one long list of little pairs or little trios and then to go back to two long lists or three long lists then that's called unzipping but there isn't a a function called unzipped in Python actually what you do is you still use the zip function but you use a little special character before the argument you give to the function to actually reverse the order of the zip so you're zipping and unzipping with this tiny little star um asterik I'll show you that now so we have this zipped variable here z i PP D and it is a list it has to be a list I realized uh in Python 3 you have to make it a list for it to work um there there are some weird changes from python 2 to Python 3 but in Python 3 you need to make sure it's a list to to be able to unzip it so the way you can unzip it is I'm just going to name it unzipped to be very clear um this is called selfdocumenting code by the way uh I may have not mentioned it before but selfdocumenting code is just using function names and variable names that explain themselves so actually using I in a for Loop for I in range 10 or something it's usually not that good you want to not use I and use something else and um it's just better to be descript this this list is going to be an unzipped list just the the same way that this uh list became a zipped list so unzipped is just going to be this zipped list but unzipped so literally all we do is just we're going to have to because of Python 3 we got to put the list in there again that looked like a nipple um inappropriate sorry if you're under an appropriate age we're going to just call zip again here and then originally you might think okay like wouldn't it just be like unzip and then you stick zipped in here and it's nice and done but no it's actually the same function zip but all you do is before this thing I mentioned earlier you put an aster a little star just like that almost C style like like de referencing a pointer if you know what the heck that means if you do you're cool if not you can be cool we'll we'll I'm pretty sure we'll get you there we'll get you there at some point just stick a little star there in front of the zipped list here and this will actually unzip this list and give us from this output bring it bring us back to this output so let's just see what the heck happens first let's check if there's any errors no errors and then print this out just like I printed the zi like that and click run and Magic you see I went from this I we went from two separate lists here okay two separate lists and then we got this and zipped it together to get one long list of little Pairs and then we went from this long list of little pairs back to two separate lists or actually tupal in this case I mean you can cast them to other things if you like but in this case they were c um put in tupes one uh list of two long tupes these this which is equivalent to these two original lists so that's basically what the zip and inverse of zip the inverse function functionality of zip can do so it's like a dual function you can kind of do two things with it it's two functions in one kind of cool you can do that with zipped but another thing that I want to mention is the the primary time zip is actually used so the I noticed that whenever I'm using the zip function most often it's to be able to get enough lists or variables in a scope if that made sense to you good if not let me explain if you are inside of an if statement or inside of a for Loop you know that the variables you have inside there are actually local to that little that little indented area if you have a chunk of code and it's indented out or like if you're in Java or C++ or something you have brackets anything in that chunk of code it's like one unified hole all the code in there um can share all the variables and anything outside of it but if you had a variable inside the the if statement or the for Loop and then you to read into into the if statement or into the for Loop you wouldn't actually be able to read those variables a little bit uh tricky to understand but it makes sense if you've been coding long enough it it makes sense on the on a on a technological level so it's just something you have to accept um you don't really have to understand why it works but just understand how it works understanding why is very fascinating you can go into that if you want at some Future Point there's a lot of resources just Google it it's pretty cool but going back to scope using zip is very handy if you want to get a bunch of um things into a a um different scope um let's see so for let's just try to have a for Loop so let's say I have these two lists up here and then I want to actually iterate over on both of these lists within the for Loop so like how would you do that besides like having an ugly um for I in range I in range five and then indexing list one I and indexing list 2 at I actually this might not even be a scope thing I might have had a little brain fart there but that scope thing is still a very relevant piece of information to programming in general so definitely hold on to that but I might have fussed up there a little bit you actually don't need that because you're just trying to read here but if you actually want to get multiple things into a scope without avoiding this uh gross syntax here um you can actually use the zip function instead so instead of having for I in range and having this index a very C style kind of way of doing it we can get rid of this crap okay and do it the python way which is the arguably cooler way so you can just say for list one list two in there we go yeah IN Zip actually we shouldn't call this that let's call it L1 and L2 okay so this is actually tupo let me put it in parenthesis just to be clear because it'll make more sense so this is actually a twopart Tuple if you don't if you don't know what this is look it up um it's it's a way to un unpack tups automatically just Google that and then see what that means in Python it's kind of a cool little thing to save space you can do multiple things on one line so we're just going to zip together these two lists and what happens here is now in this in this loop I now have access to whatever iteration I'm on I have access to both this variable and this variable or this element and this element at the same time by using L1 and L2 so let's just do that so I'm going to print L1 and I'm going to print L2 just like that and print it and as you can see each iteration it actually prints one and then one the number one and then the string one the number two and then the string two in each iteration so this is the first iteration it's the second iteration the third iteration fourth iteration so on and so forth however many times you want to go but the point I'm trying to make here is you can actually zip together a bunch of different lists and have access to all of those corresponding elements in each list within the for Loop so let's say I had I had 20 lists and I wanted to zip all 20 together and then I had a two of length 20 I could actually use all 20 of those variables in the for Loop to actually do interesting calculations and whatnot very cool very handy so now I want to go through an actual example besides this very simplistic one so let's just delete this I have a nice little nice little example printed out for you guys and it's going to be called sentences uh we're going to be creating sentences from different lists uh I forgot to actually okay so we're going to have we're going to be creating sentences from different lists so items what did I put here items equals apple banana and range and then also this is a little shopping cart example it's coming back to me now I should have looked at this before I started the video that is uh shame on me um oops but now I have items we're going to have different items we're going to have different counts and then we're going to have different prices so you kind of see how these different elements in each list is going to correspond so if you bought three apples if you bought an apple you bought three of them and then the price was uh I don't know 9 cents and then bananas are 25 cents and then oranges are 50 cents something like that okay these this is the cor three corresponding lists now we want to access be able to access this first element first element first element all at the same time in the same iteration of a four Loop so so we can construct a sentence the sentences I'm going to try to create are I bought three apples at 99 and I bought six bananas I bought six bananas at 25 cents and so on that's kind of the idea that I want to implement here so let's start the for Loop up so it's going to be remember you can do those that cool little Tuple unpacking thing I'm going to have item I'm going to have count and I'm going to have price so that's how I access uh these so this is an item in the items list so that's going to be put in here this is a count in the counts list so that's going to be put in here and this is a price this double this floating Point number is going to be the price in this prices list that's going to be stuck in here okay so this is going to be apple this is going to be three and this is going to be 9 in the first iteration and then in the second and third iteration it'll be the same thing for banana and orange okay um you can so of course we're going to have to zip these three together so items counts prices I forgot to mention if you're doing this cool little trick with zip here you might have already noticed that you might have been objecting objecting earlier like what the heck Aaron you got you didn't cast it to a list you I thought you said on Python 3 you always have to cast it to a list that is only if you're trying to print it the thing is this ZIP object that is returned from this function can actually be um put in this for Loop like this and you do not need to cast it to a list because we're actually printing this ZIP function return data so you can just leave it like that just leave it as zip and it'll actually just automatically zip it together and automatically pick out this nice unpacked triple Tuple for you so that's all clean that is all done in one line and now we have access to these three variables in each iteration these three then those three then these then those three I I might have screwed that up again but you guys are probably getting used to me screwing up I hope if you're still there so what I want to do here is actually create some sentences so the sentence I wanted to create was um sentences. append so we're going to have to add to the sentences list of course or actually let's make this a little bit cleaner let's put sentence making changes on the Fly here so sentence is going to be we're just going to glue some strings together I bot space count space or a plus uh space ibought count space item no sorry item and then add there if you don't know what's happening here just wait till I'm done encoding this slide and I'll explain it real quick if you do know what's going on then just put it on two times and zip through this real quick at there we go I always get confused when I'm concact nating these strings like this it's so easy it's so easy to make an error I think I did this right though so what's happening here is you can add strings together right and when you add two strings then they are just added together into one big string so what this should output is I bought for the first iteration it should be I bought three space Apples because I added this s here at space 99 Cents actually let's go like that sense sents each and don't forget to space there okay so that's what's happening there I'm constructing this this this string here and then I want to append the sentence to the list okay that's what's going on however when we get these three elements here this is still a string this is still an integer and this is still a floating point a double a decimal point number okay so what we actually have to do is is convert all these to a to Strings by casting them so we could just go like this stick it in like that which is what you could do on all three but I might do it like this because it just seems a little bit more less messy I think that was a weird contradiction there a lot more less messy but but you I'm pretty sure you guys got the the point uh we are going to do this this is another little cool thing you can do with unpacking so as you can see these corresponding elements here are all going to be casted and then put into new new names or the same names but they're just going to be overwritten so pretty much what I'm doing here is I'm taking item count and price these three and then I want to make them all strings so I just stick them in Here and Now item count and price are all strings technically I don't have to make this item a string because it's already a string but just to keep it consistent and make it easy on the eyes I'm going to leave it like this so let's see what happens when I print out sentences now because we went through we zipped all these three things together we converted all the items to Strings and everything we constructed a sentence using one little element from each of these lists and then we stuck one of the sentences in the sentence list and we did that three times so there should be three sentences in this list that we about to print out let's print it out right now go over here so you can see it and see what happens perfect I I uh I I dragged this over over the perfect amount look at that yeah things work out sometimes don't they right mom so um as you can see we have three sentences here it says I bought three apples at 99 cents each I bought six bananas at 25 cents each and I bought four oranges at five um 50 cents each or 0.5 cents each I guess that that screwed up I this is probably not right but I mean it it the code worked the way it was supposed to I'm pretty sure you guys get the idea if you want to be able to zip together a bunch of things into a for Loop or an statement or or uh I'm not sure if you can into an if stat I have to think about it but definitely for a for loop I use it a lot for four Loops zipping things together into four Loops this is a very very handy function um don't forget about the unzip thing the little star thing you can put before if you ever need to do that you can actually get really crafty with these getting zipping a bunch of big Tuple list together and when you're doing data analysis very very useful but that pretty much wraps up the zipped fun function there um one of my favorite functions in Python for sure just because it makes everything so nice and clean but this is uh very useful for like I said going over large uh data um doing data analysis and whatnot those kind of Statistics things but yeah definitely stay tuned you guys thank you so much for watching that is the end of this long dry out video as usual that's my signature and um yeah I'll see you guys next time goodbye hey you in this video we have put together an amazing app for you with python it's the Tic Tac Toe app and we are going to go through the process of billing it from complete scratch all the way to the finish something special that we got for you in this video is that we are going to gift you this app at the end so all it will be is it's going to be just a link and we're going to send you that link and you'll be able to use this application on your own and steal it and also have access to the entire code base just in case for some reason if you're trying to build it with us you cannot complete it or you run into any kind of Errors okay this way you'll be error free so with that said and before we jump right into it this video is made by Aaron berth who is our software developer and a new addition to the clever programmer team he's an amazing developer he's new to the team in terms of making trainings and tutorials so this is his first app show him some love and our goal in the future is to get Aaron to to make a lot of awesome coding tutorials for this channel I hope you love it please leave a comment and uh tell him something encouraging with that said let's jump right into it hey what's up guys this is Aaron from clever programmer and today we are going to be coding a tic TCT Toe app in Python so let's jump right into it first let's go to reel.it just type that in url bar uh follow along please so you can learn uh make an account if you haven't already this is called repet uh once you done with that click on my reppel um you'll be on this page it'll probably be empty you won't to have this stuff here click on the red plus sign click on python which will automatically become Python 3 and boom you'll be in an empty repple here so all this is is just a nice little environment where you can code on this website you have to worry about any setup or anything it's just nice and clean and it doesn't break which is very nice because sometimes you're coding on your own computer like there's a lot of weird Eda edge cases and it's just a you know so on the left here we have a little file directory uh we're only going to have one file for this project so you don't really have to worry about that over here we have our one and only file open main.py and over on the right side we have a little python environment so let's uh check this out uh yo yo yo yo yo yo yo okay yo see so it works um this is where uh the game will be played at uh this little command line here and uh let's Jump Right In so tic tac toe um sometimes I I attack small problems like this just straight in I just start coding uh just kind of hacky but it's kind of fun too for these little things but if you are working on a big code base you actually want to think about it first um so let's at least do that first just have like a little bit of a uh overarching game logic so let's think about it well we're going to need a board okay and then we're going to need to be able to display that board um we're also going to need to uh play a game so like start the game and then have it keep going like alternating turns from X to O to X to O I'm assuming you guys don't how to play tic tac toe if you don't please look it up uh all right welcome back so uh we're going to need a function to play game um we're also going to need a function to check if there's a win so like check win we're also going to need a function for uh checking if it's a tie um we'd also maybe need like a function to um flip between players so flip from player X to player o uh flip player and um yeah and like within check win then we're probably going to need to do something like uh check rows to see if there's a win and then maybe check columns to check the uh all the columns and then also you're going to have to check diagonals so like to check if there's a win we would check all these things and then if if there's a three in a row in any of these then we could say yeah somebody won and then just return the player and so on and so forth um checking if there's a tie maybe we could just be like hey um if the entire board is full and then there's no winner then then yeah then it's a tie and um yeah I think maybe something like that um maybe even one more like play game maybe there could be something like handle a turn um I forgot to put a little comment sign here but yeah hand handle a turn uh like that like maybe this is like a nice General over overview kind of high level idea of the game so we we're going to need a board we're going to need a way to display that board we're going to need uh something to run in an overarching game we're going to be able to handle turns when somebody takes a turn like taking in put putting it on the board making sure that it's valid input and then after we handle the term we're going to have to check if there's a win we can check the rows columns and diagonals and then we can check if there's a tie as well and then after all that's done um then we can flip to the other player and then um like go back and then just repeat the whole process something like that I mean it might change as we go but just like have a general idea of what's going on when you want to code something like if I was actually coding a different game like rock paper scissors maybe I would I'm not going to type it out but but I'll just tell you guys if I was trying to code rock paper scissors well I would need okay rock paper scissors I could have like the words and then I would need some way to um select rock paper scissors and then some way for the computer to randomly generate rock paper scissors and then I'll need a way to compare them and then a way to um see who wins and so on and so forth so like just thinking breaking the the problem down into its little pieces like we did here um and then um actually start implementing it from there it'll most likely change it always changes for me I mean but as long as you have an overarching like high level understanding then you are at least Equip to start coding so I might delete this but I'll probably just keep it here at the bottom why not so let's just start so nice and easy what are we going to need first well first we are going to need a board very simple I am just going to make it list let's just do that and um I want each one to be um each position on the board to be an empty spot if it's empty I just want to be a minus like that all right and then let's just uh copy this nine times four five six seven eight nine bada bing bada boom uh and voila our game board was coded in approximately 27 seconds awesome it's just a simple list I just uh spread it out like this so it's easier to see so now we have our empty game board for tkac toe awesome right let's move on next we are going to need a way to display that board so uh let's get that going because right now when we hit run absolutely nothing happens let's do that first so what would that look like um we just going to need a function um Define uh I don't know display board just like that and then maybe uh print um board at zero uh yeah let's do it like this Plus board at zero plus board at One Plus board at two and yeah let's just do that three times but so position 012 we're going to need three four five there and then six seven and eight boom all right um yeah let's just see how this looks hit run um it didn't work because we didn't call the function of course uh so display board just like that now let's run it and boom we have an empty board pretty cool right all right so um uh the positioning would be um one two three yeah so now that we have our board we can move on um from here uh maybe let's try to uh start a game so um like this is like the first first place to start um let's just make a a function called uh play game g game just let that all right all right um Define I suck at this you guys why why am I teaching this anyways so play game um play game will probably probably be the function that drives the entire game so maybe like the first thing that we would do is okay the first thing is display the board because when we're playing a game the first thing we want to do is display initial board just like that always put comments in your code guys um if it's really really simple you don't need to like actually here maybe you wouldn't have to because this is so welln named by me um that you don't actually need to comment but hey might as well throw it in there it makes it makes it easier for other people to understand what the heck you're trying to do they can't read your mind okay I've had some jobs some internships where that was an issue I'll stop there anyways so let's uh uh display the board but now um we are going to need to call play game to actually start the whole function chain so um when python is going through this it'll create this board it'll see this as a function it'll save all this code somewhere it'll see this as a function it'll save this code somewhere and then it'll see this and it'll say oh I want to play game so it it calls this function here and then it'll actually call this which calls this which prints all this which reads from this which makes it look like this if you're not watching if you're looking away from your screen that made absolutely zero sense so make sure you rewind and watch the screen because I do a lot of highlighting here I went to school for highlighting yeah I'm filled with a lot of bad jokes just ask KY uh get used to it anyways um where was I so yeah so display the initial board and then from here um maybe the next thing we would have to do is I don't know like handle a turn so let let's just try to handle the first turn first so handle turn will be a function um I always like to put things in functions like if it's like a different concept so displaying a board I stuck that all in a function if I want to handle a turn I'm going to stick it in a function um let's just do that here so Define handle turn boom we have a little function coded up um I like Spa I like two spaces two lines between my functions uh just to be easier to read and here too so handle turn um what could we have in handle turn well handle turn would need to first um probably get the the uh position from the player that they want to go into so so maybe something like this position equals uh what's the function input yeah sorry I was trying to remember the python function for input so input will um ask for something from the command line over here and then when they enter it and press enter then that whatever they press enter will actually go into position here as a string okay so let's say uh I don't know choose a position from one 1 to n okay and just like that uh I chose 1 to n because it just makes sense like if this is position one this is position two this is position three so on four five 6 Seven 8 and nine you can just type in the number and whatever pos position you choose that is where your piece will go so um handle turn how are we doing here so far let's just try to run this and see what happens boom so as you can see this actually um gets reached this uh input here and then I can just put in a one and nothing happens because we didn't tell any we're not doing anything with position here but actually one went into position here and then from there we can actually deal with the the game logic so now let's actually do something with position um oh first of all because position is a string we are probably going to want it to actually be an integer so that we can index into our list with an integer instead of a string so let's do that first uh POS equals in position and remember position is 1 through n but the elements in our array is 0 through 8 so actually if we get position one what we what we actually want is zero so let's uh subtract one from here just so we get the correct index um in here so now position is correctly um cast to an in and subtract subtracted one from it so that we know where and the board to go all right so now that we have our position uh let's just try to um put something in the um put it in the board yeah so let's just say uh board at position equals x okay easy enough and then uh just throw on a click a quick display board here let's hit run so we have our empty board printing out and then it says choose a position from 1 to nine let's put in one and boom look we chose position one which is here we casted it to an INT and then we went into the board and we stuck an X in that spot and then we displayed the board again and look that's what we have and that's all from what 20 not even 29 30 lines of code not even because there because there's a lot of space 30 lines of code and we already have this whipped up where we have a board we have a prompt we input something and then we actually edit the board and display it again pretty cool right so um let's leave this here just like this but now I want to go back up to play game up here and actually work out some of the overarching game logic so when we uh after we display play the initial board what we want to do is we want to have a loop that can Loop through turns over and over and over again until the game is over so it'll keep going every single turn X's turn O's turn X's turn O's turn over and over and over again until somebody wins or there's a tie so this is uh what it would look like usually I just like I kind of hack something in here and then by hack I just mean type something that I think might work and then I I just try to see if it runs um and then just go from there so just just follow along so while game is still going okay if the game is still going then I want to handle a turn and then after I handle a turn um actually if we're handling turn we should probably have some way to differentiate if it's X's turn or O's turn so let's go like this let's just give give it a uh thing called current player that'll just be an xro O but later we'll do that later so after we handle a turn X or o goes and takes their turn then we want to check if the game is over so or check if the game if somebody won or if they tied so I call that check if game over I don't know how that got there but yeah check if game over and then um after that then assuming that the game is not over and I don't break out of this Loop then we will want to flip from one player to the other so I'm just going to call this flip player from X to o or o tox and then after that then we're going to go back up and then we're going to go again we're going to handle turn with the other player because we flipped it and then we'll check if there's a game over and then flip the player again and go back up and then um take another player's turn and then check if the game's over and then flip and and then so on and so forth until somebody wins or there's a tie that's pretty much it so let's um make these functions real quick uh we already have handle turn let me uh let me put it down here so we need uh check if game over check if game over all right that needs to be a fun function and all this is going to do is actually just call two other functions check if when and check if Tai see how that works see how I'm breaking up the code the the game logic um what are the criteria for a game to be over is if uh somebody wins if somebody gets three in a row or if there's a tie if the entire board is full and nobody has won yet so those are the two criteria for the game ending and so that's why I use that up here I handle a turn and that's because the board State changes and then uh and then I see if there's a game over after they place the piece and then depending on that I will either stop I'll break out of this Loop somehow by maybe setting this equal to false instead of true and then um break out but first we need to uh check if the game is over so we're going to do that by checking if there's a win and checking if there's a tie next let's uh code up this one check if when and this is also a function I keep forgetting that check if win so here I'm just going to put a return thing just to keep it nice and clean for now but pretty much we're going to have uh check rows like I said earlier check columns and check diagonals so we'll leave that there for now I just put a return here so that the so it doesn't break when we hit run I don't want any red things over here uh popping up any errors because it's just kind of gross um it's inevitable but it's still gross you know uh also we need to check if there's a tie so Define check if tie just like that and then I'll just return as well I'll I'll populate these a little bit later but I just want to get the overarching logic done first so check if win and check if tie so uh check if win check if tie those are all right so check if game over so that's all taken care of check if game over so I have this is already is already made down here check if game over is already coded now we just need flip player that's the one I was missing so now we need one last um function called flip player just like this and um this is just going to flip the player from X to0 so that we know which piece to place down and uh stuff like that pretty much and like display like oh it is currently X's turn it is currently O's turn please choose a position something like that um I think I might have most of the functions I need I just need uh these three functions but I will do those later um okay let me see all right let's actually just see if we get any errors run it yeah there's an error of course game still going is not defined so usually like errors will happen a lot if you're new to programming they usually come back in red and they usually say Trace back something oh my God my life is over uh my parents don't like me uh my best friend just left me um somebody else just left me um yeah just uh look look for the air the name Will it'll usually tell you what's wrong so it says game still going is not defined um I think that here yeah so this is a Boolean um I'm just going to make this a global variable uh up here actually let's put a comment up here because I like having all of my uh uh Global variables just like that nice and tidy there uh game board boom and then we are going to need uh if game is still going we'll call it game still going and we'll set it equal to True by default because we want that Loop to run by default initially the game is going from the very beginning this is only going to be false when there's a game over so whenever we get a game over we're going to set this to false and then automatically because this is what um this um relies on if this is true it'll run until it's good but then if there's a game over and we get a false and we set this equal to false then next time this goes it'll jump out of it because we know there's a game over yeah um while we're at it why don't we just uh make a couple other ones uh I think maybe uh who won or Tai uh yeah let's just put winner uh equals none for now um yeah I guess there's one no winner right now and then maybe we could change winner to X or o when there's a winner so we know who the winner is or if there's a tie then winner will just stay none because yeah there's there's no win makes sense and maybe uh also I think one last thing we'll probably need is uh whose turn is it we just be uh current player and uh let's just have X go first okay yeah like that so now let's try run this and see if we get any errors we get an error again a handle turn takes zero position but one was given uh handle turn I see so we're trying to give something to handle turn but we're uh getting a error yeah because we're trying to give something here when it doesn't take anything in the function so let's just say Okay current player now let's see if we runs hey okay so we got rid of the big uh red red lines of Doom um yeah just just get used to errors they happen all the time it's just a part of coding uh read them definitely read them they usually tell you what's wrong they tell you what line number is wrong so you can actually just go into the code to that line figure out what is wrong maybe maybe put a few um debugging statements in there and then just keep working out from there all right cool so let's go back to um play game so we have the loop going and then um like I said earlier if the game ever stops from here if the game is over and this Loop jumps out then we're going to jump out of this Loop so let's actually put something here so the game has ended right here and then we can just say like um remember remember that thing at the beginning uh earlier the global variables uh we have a winner uh let's use that here so let's say if winner equals X or winner equals o that means X or o1 we don't know who won yet then we'll just say um I guess we do know who won because the winner will have who won X or o that that at least that's the idea I'm going to put the winner in that once we know if there's a winner we just be like okay if this person won then winner equals X or or if X1 then winner equals x if o01 then winner equals o and then we can just get that Global winner variable from here so we'll just say print um winner so that will be X or o plus uh space w n so this will become X1 or o1 nice and easy um else if winner equals none then this will be a tie so let's just put that in like that boom uh yeah uh let's see if anything's broken hey everything's running good uh good practice is actually to unit test which means to keep running your code over and over again make sure there's no errors and then whenever you do get an err fix it immediately so that you're not swamped with bugs because sometimes you fix one bug and then it creates 10 other and then like this just gets really out of hand but if you create if you fix every bug one by one as they come and then everything's always working nicely then you know exactly what caused the error because you just made a small change to the code so try to do that always try to run it if something's wrong fix it before you move on all right cool so we have play game uh I might not touch this for a little bit I think this is almost fleshed out because we'll have we'll display the initial board and then we'll have the game going going going going going and then when it ends then we'll just print if there's a winner or if it was a tie so that's kind of like the over arching idea of play game so I actually think this function is pretty much done might be a little a few little changes here or there but yeah let's just put in some comments because you know good practice I haven't been doing that I'm not being a good example um I was never a good example that's what my mom always tells me uh I have a little sister um anyways yeah so we're just going to flip to the other player just like that uh yeah check if the game has ended you don't really to do this because the names are so descriptive but hey I'm a little bit OCD so why not handle a single turn of an arbitrary player big words big words and while the game is still going yep so this will just Loop while the game is still going and then once there's a game over it'll break out because this will be turned to false and then we'll jump out here and print out the stuff so yeah uh I don't know I'll play a game of tic tac toe okay cool um yeah why don't we just fill all these in uh display board I'm so bad at this I'm actually an English major uh yeah and then uh handle a single turn of an arbitary player I also can't spell sometimes or type or do anything for that matter yeah so let's end that there so yeah we are going to uh move on now um currently our current functionality is this we have it running here and then when whenever we put in a uh a number a valid number from 1 to nine it will populate that spot in the board so if I put two then it'll go two three and we can keep doing this forever as you notice I can you can put it in every single spot and I can also overwrite old spots it'll just keep overwriting it as X but that doesn't really seem like correct functionality I mean like nobody's winning nobody's losing like where's the O so at least we have this basic um functionality happening but now we need to actually clean it up so that the right player plays and that if somebody wins or if there's a tie then the game actually ends and then it notifies us that the game ends so um I think the place that I want to do that I want to start um next is actually um check if win I'm actually going to change this to um check for winner I just prefer that name yeah check for winner check if tie check for winner so uh if I change this function name I think I called it somewhere so let's copy this and go back up um check if game over uh okay let's just command F check if win there's only one match oh it's right here yeah and check if game over so let's CH change that so check for winner and check if tie I prefer that um you can leave it leave it the other way if you want it doesn't really matter this is just personal preference they will both do but anyways so this is uh the next one that we need to code up so check for winner um if we get three x's in a row then we want to we want the game to say hey uh X1 somebody won if we get three x's in a row so how do we check if we have three x's in a row well we can either have three x's in a row in a row we can have them in a column going straight down or we can have the diagonals so um let's just break it up into into those three pieces so check for winner is going to start by um well actually do we even have these functions made yet no we don't so actually what we need to do is actually make a a function for each of these each of these comments here so check for let's fine Define check uh check rows that'll do check rows uh return Define check columns return and the final check diagonals I like that word so now we have three functions that will check each of these and all I need these um these functions to do is um if is check the rows in the uh in the board or the columns or the diagonals and then whatever whatever uh if there's three in a row in any of those rows then it basically just turns returns true um or no no it uh it Flags the while loop that the game is over and then it returns either X or o so I want it to return X or o if somebody won and then to flag um this up here game still going to false so that the game ends so return XR and O and flag this so that it jumps out and then um if we return XR O then we can actually know that winner is x o here so let's do that um we have these uh maybe I'll code these in a bit let's let's uh start up here so let's just fill this out check rows we are going to uh say row winner equals check rows if we have that um column winner equals check columns and I misspelled that and diagonal winner equals check diagonals Winder that is not right okay so now we have those uh going let's see if we have any errors no errors cool um what next uh so I'm assuming that when I call these then um if there's a winner in a row or a winner in a call O you said there was no typos there's one right there okay so if there is if there's a winner in a row or winner in a column or winner in a diagonal then these will either be returned um true or false like as a Boolean it'll say there was a winner there um so maybe we can say if row winner then okay then there there was a win yeah I don't I don't know quite yet um else if there was a column winner then yeah there is there was a win and then else if oh diagonal winner once again there was a win else there was no win so okay if there was no win then uh I think we had a we had a variable didn't we set a variable up here yeah winner so winner equals none I guess we could utilize this now winner equals no we're going to have uh there was no win let's just try a winner equals none and then if there was a win then winner equals diagonal winner um there was no win uh winner equals column winner and then for rows winner equals row winner I think that'll work for now there might be some bugs but if there is uh we'll go back to them and solve them together all right cool oh one thing I forgot to mention if you are um trying to access any Global variables up here that is outside of a function and you're trying to access it within a function or well not access you can read it just fine but if you're trying to write to it if you're trying to write to a variable outside the function you actually need to declare that variable within the function as Global so this winner is outside the function it's considered a global variable as I as I know here so if we're going to try to set winner um that means we're trying to set a global variable so therefore we actually need to write this here let me just show you it might be a little bit make make a little bit more sense so what I'm doing here is I'm saying Global winner so this winner will actually match up to the winner outside here and then um whenever we we set winner down here when we set these uh the winner to a different value this will allow us to set the global one so we actually need this if we're going to access uh Global variables so set up Global variables just like that um that should be good for now uh now let's move on to um check rows check columns uh check diagonals and check if tie and these because I think we need to fill these out still so check rows uh what are we going to do if you want to check the rows of the game board well very simple we could probably just pick out each element of the row and then see if they're all equal to each other and then um if they are then return like X the winner X or o whoever the winner is or return none if there's if there's no um no three in a row so let's just let's try that let's see what we can do Row one um okay so the board is a list right to check okay to check for the first row here uh we would have to check element zero element one and element two so let's just say board at zero uh we want to see if board at zero equal equals board at one which also equals board at two so all this is saying is um we're checking Row one row one is these three up here so we're just seeing if board one board two and um boarded well board at zero boarded one and boarded two all equal are are all are all equal so if they're the same value then um this will come out to be true and then we know that Row one is actually a winning row um maybe we should add one more thing uh because because if I just noticed that if these three are all equal to each other but they're actually dashes then it'll think this is a win when this is just three empty empty cells in a row so let's say uh these three spots in the row all need to be equal to each other and they also should not be equal to a dash so if they're if all three are equal and it is not equal to a dash then this is a winning row I hope that makes sense um now we're just going to copy and paste this um into row two and Row three and we're just going to mirror the same exact logic so 0 one2 three four five is the second row and 6 7 8 is the third row so now now this logic here is if the first row has a winning has a winning uh configuration then this becomes true likewise for row two and three the same kind of deal happens now um if there is if either of these are true then that means somebody won and if somebody won then we actually need to end the game so actually remember we had this variable up here called game still going equals true it is also a global variable so we're actually going to need to set this to false if somebody wins so let's set up that Global variable down there uh let's do that first Global um game still going and then uh let's put in some comments here set up Global variables um here we can see if check if any of the rows have all the same value and is not empty that's kind of a long comment but at least it's descriptive and then after after we check that then we can actually say if Row one or row two or Row three meaning if there's a win in any of those rows then we are going to uh set game still going to false which will stop the game because we know somebody won so now I'll fill out the comment if any row does have a match flag that there is a win yep so that's what's happening there so now we know that oh there has been a win and we actually stopped the game but now we also need to know who won so we can return and be like okay X1 or 01 so um let's just we don't actually know which row W so we're going to have to actually check each one individually so if Row one then we know that Row one has a streak a winning winning streak a winning configuration but we don't know what value is in there so it's as simple as checking board at zero because Row one board at zero is within Row one so whatever is there if it's an X or an O then we know that that's the value that we want to get so we can just return board at zero uh same thing for row two uh we can just return board at three believe yeah and then same for Row three if that's the winning row then we want to return who whatever player is at row six I got this 036 from here 036 I also could have used 147 or 258 uh I just need one of them I just need to know if it's X or o that one um and you can just leave this last return here that's just like a cleanup just in case something happens uh let's run this and see if we get any errors we do not that is good um so hopefully that made sense let me just pop a quick comment in here uh return the the winner uh X or o yeah um hopefully that made sense uh because I believe uh check columns and check diagonals are going to be extremely similar um let's just actually let's just copy and paste it straight into here and then just edit it as we go you can follow me this is very common to do if you have code that's very similar you can just copy and paste it and edit the numbers a little bit so check columns obviously we're going to have to check change all these from rows to column um um check columns yeah we're also going to need game still going because if there's a win then we need to set that equal to false which is the same down here um actually I'm just going to copy column here copy paste paste paste if any column does have a match then yeah uh if column one or column two or column three uh extra return statement here so now this looks pretty much exactly the same as the check check rows the only difference is these numbers are not correct this is still checking if the first row is a winning configuration what we actually need to check is if the First Column so actually it's not going to be 012 it's actually going to be um I believe Zer okay 0 1 23 and four five six so 036 is what this should be 036 is the First Column right here so we're checking if the First Column is good the second column should be 147 I believe 147 and the last one should be 258 I just did this by um by counting here so if this is uh zero and this is 1 two then you can just kind of figure out what numbers should be in each column you can just check it that way so um this is actually done now unless I miss something I don't think I did oh I did here actually so here we need to U return the first element of the columns not the rows in case either of these is a winning a winning um configuration so check columns very similar to check row row check diagonals is also going to be very similar uh let me just copy this into here copy and paste okay uh again we need game still going in case uh there is a win and then we need to set it equal to false hopefully that's making sense to you guys there's only two diagonals so we actually only need two we can get rid of this third one we can get rid of this third one here um just like that but now we need to change uh all the columns to diagonals diagonal uh paste that in there um if diagonal one or diagonal 2 U if diagonal one or diagonal 2 so now that all the variables variable names and comments are changed um now we just need to change the numbers to the correct ones so let's think about it uh what is the first diagonal the the positions in the board so uh zero is correct because we need this top left one we also need the middle one so what is the middle one 0 1 2 3 four so this should be four and then the the last one is the bottom right which would be eight the very last position uh same here uh let's start with the bottom left so 0 1 2 3 4 5 six should be six and then the middle one 0 1 2 3 4 that's all already correct and then the top right would be 0 one two so this should be two so now that we have um checking if the diagonals equal to each other and checking if the other diagonals equal to each other then um this function should also be done oh except for down here again we need to check what value which player won so this will actually be0 and six you can just mirror these first here because you already you already know that these are in the diagonal and these are in the diagonal so you can just choose anyone you want and throw them here to get the correct value all right so now um let's try running it again see what happens um let's just try to uh is it oh number two let's see if we win oh we we get an air string object is not callable huh um winner equals row winner type ER string object is not callable line 76 okay let's go to line 76 what is it complaining about um here winner equals row winner ah so I I found the mistake here um the mistake is actually um I'm trying I have this winner variable here I'm trying to um set it equal to row winner but row winner is actually a variable not a function so these parentheses should not be here uh simple mistake now let's try to run all right cool so only X is playing right now but if we get three in a row it should check in the uh check rows um well check for winner it should go to check for winner and then it'll run check rows and then it'll see if any of these rows is all the same and then if it is it'll end the loop and then it'll return X and then up here it'll print if winner equals to X which we just set um set then X1 so we're about to do that now um in position three we're about to put in X let's put that in here now and see what happens and there we go it says X1 because it checked that the first row um had all the same value um that wasn't that weren't dashes and then it returned uh this the first one we chose um the first X and then returned it and ended Loop and then printed this out and said X1 so that's kind of what's going on um now we fix that um so that's pretty cool so we have the winning checking for winning is Set uh if they were all O's it would also work because it's just checking if they're equal not not checking if they're x's and if O's one then and you put an O here it would say oh well then it would put an O here and it would say 01 so let's uh also get that worked out the the X and O Part okay so where are we sitting yeah okay here here it is so in handle going back to handle turn up here we want to handle a single turn for either X or o so that's why we actually um sent in player here because then we know if it's X or o instead of just X so actually whatever the current player is that's what we want to put on the board we don't just want to put an X automatically we actually want to put player on the board because this will be X or o depending on whose turn it is and we'll put that at the position they choose so that's the first change let's see if that broke anything um well there's no errors that's good uh let's try winning winning still works awesome um but now we also need to oh yeah flip player I forgot about this we uh I I put this little function in here so that after X goes then it'll flip and then this handle term player will be called with the opposite player so if it was X then o will be next and if it was O then X will be next so um handle player we'll get an input we do that um where where did I call flip player from up here in game still going okay uh current player is X so I guess uh yeah when we call handle turn here current player is what we send to the turn so all we need to do is in footp player is change current player so let's go down to flip player right here and um pretty much all we need to do is if um current player equals x then and current player equals oh there we go just be uh very careful here um you want this is checking if they're equal and then if they're equal then you actually want to set current player to to O So this has a double equals and this has a single equals uh e very common mistake to make and then um else if current player equals O then we want current player to become X oh and uh since this is a global variable the only way we can write to it or change it is to put this here current player so let's just put some comments in here Global variables we need if the current player was X or then yeah then change it to O and if the current player was O then change it to X and uh yeah see if that broke anything thing it did um sometimes repet uh lags a little bit and it gets a little bit screwed up um so sometimes actually just refresh the page let me copy all of this just in case I don't want to lose all this work so refresh the page U we get brought back here I'll move this over and then go back down to where we just were flip player let's hit run and there we go it's running good again so now every time we um X goes then we'll flip the player to O and then um o will go and then it'll flip back to X and so on and so forth and now we actually have two players playing the game cool right and boom X1 X on this diagonal here um so actually we have a uh a working game so now uh the the only thing we have haven't done yet is if they tie if the board fills up the game also needs to end so oops got an error there oh that's another thing we're going to have to handle is if they put an improper input we we need to handle that to make it more robust so that the game just doesn't break and it like prints out all this air air messaging here so let's uh first just try to uh tie n and four yeah so as you can see we have a a draw here a a tie but nothing happens it just keeps going we could just keep putting in more um variables and then it'll just keep overwriting which is improper um incorrect uh execution so we need to actually change that um we can check for Tai um the first thing that comes to mind for me is all we can do is just check if there's a dash in the in the list in the board if there is a dash then there's no TI but if there's no dash that means every spot has been filled up and a tie needs to happen very very simple since board is just a list we can literally just go like this if Dash is not in board then we can just say game still going equol to false this is the thing that ends the game remember game still going as false and because it's a global variable again we need to declare it as a global variable so we can write to it cuz we write we write to it we write it false here that is not in board getting the game ends and then also um we can just return let's try that for now let's see what happens so we'll put in one 2 three five six seven 8 nine four hey and there we go it worked so um if we um if the whole board fills up and nobody has won yet then it'll just say tie and then the game is over so that's all we need um that is done very simple checking for a tie um we're actually getting pretty close to being done now I think the only thing that we need to do next is to make it so that if we put in improper input then it doesn't break it just um if there's in is improper input then we just want the the game to ask the user again or just like just pass it and just be like okay just choose a position again choose another position or something like that so let's actually go up to um handle turn I believe that's where we actually get the input yeah yeah that's right so handle turn is where where we get the input in and now we're actually going to need to check um to make sure the input is correct so first first of all actually we should we should notify which player's turn it is so let's just put a simple uh print here since we know the player the player is either X or Y we can actually put in a string here and go like that so it'll this will say O's turn or X's turn and then then it'll ask for input from the user just like that but then we also want to make sure that the uh input is valid before we cast it because um we can put in any string the input function for um from python will can take in any string um but then if we try to put that in here and cast it to an INT like if they put something that's not able to be cast to an INT then we're going to get an error so let's try that first um if position um not in and this is a little uh trick that I I uh found on Google um we we could use regular Expressions if uh if any of you guys know what that is but that's a little bit Advanced like it's a whole another thing so this is actually a quick solution um basically we just want to make sure that the input that the user gives is in this list because we only want uh specifically nine um different inputs uh then we're only going to allow these nine inputs obviously this wouldn't work if you could if you wanted to allow like a million different kind of inputs we can't type it all out but since we only have nine we can just make it nice and clean and simple so we can say position which is the thing that uh we get from input from the keyboard it needs to be a string that matches one matches two matches three or so so on and so forth all the way up to nine if it doesn't then we need to ask we need to ask again so if it doesn't then we need to say hey position equals in actually let's just copy and paste this input invalid input choose a position from 1 to 9 so let's try to run this now oops what is wrong oh the if statement I forgot to put a semicolon at the end or I mean a regular colon at the end um yeah syntax errors uh that just means that python there's something wrong like if I forgot the F in if I would get a syntax error like yeah like what is that so just keep that in mind when we write it now no more error yeah and see actually now we added this in it says X's turn it lets us know whose turn it is which is uh very handy um so choose a position from one to nine um one and then we can go but then let's say we put something that's not in 1 to9 let's put a z let's put a I don't know a 35 weit enter it says invalid input choose a position from 1 to n yeah so it's good that it caught it and then it re asks again let's try again let's put in 55 this time and then we get an error okay so the reason this is happening is because let's say they put an invalid input and they say um it's invalid and then this catches it and says the the input is not in the correct range of Val valid inputs so it asks again and it says okay invalid input please choose a position from 1 to 9 and then it tries it again and then it gets down here and then it's invalid and it tries to do it anyways which means it only checks if you put an invalid input one time so actually what we need to do is actually put this in a while loop so that it's constantly asking over and over again for valid input until it is valid so this is a very common thing you do in programming instead of using an if statement you actually use a while loop so it'll be like a while position is not in here just keep asking over and over and over again actually we don't really need inval but we can just like just ask again so it'll say um the first it it'll initially say Okay X's turn um choose a position from 1 to N9 and then it'll um get the position and then it'll say if position isn't in here ask for position again and if again if it isn't in here ask for position again and then again if position isn't in this list over here um if it isn't in here here then ask for position input again over and over again until position is in this range and then it will continue down here and then since we are only allowing these digits from 1 to nine this casting to an INT here um if position yeah if position is in the in this range from 1 to nine we put it in this in here and then we cast it to an INT then it won't throw this ugly air here uh let's try this again uh please choose position from 1 to 9 we put in a one it works just fine let's put in a 20 there um it ask again uh 20 20 letters random uh nothing at all uh random stuff anything we put that doesn't that doesn't um exist in this list it will actually just ignore it and then just keep asking for your position over and over over again until we give it something that works and as you can see the O went right in the middle so that's working nicely cool um one other thing that we forgot to implement in this though is what if we put something um in a spot where there's already a piece that's an issue so let's say uh we put X at one and o0 at five now um it says it's X's turn and it says choose a position from 1 to 9 so let's try to overwrite this o by putting a five there I hit enter and as you can see the O was actually overwritten um that's a problem because that violates the rules of tictactoe so what we need to do is actually put in another check here to see if the position we chose is valid on the board we could check that here after we pick the position and we've we've uh casted it and subtracted one from it to get the right index in the list we can just check and be like if board at position equals empty or no or doesn't equal sorry doesn't equal empty then uh print you can't go there go again all right let's try this oops colon again there we go okay so let's try this oops one um five and then let's try to override it again and see what it says it says you can't go there go again so cool so it actually um this popped up so it it noticed that it was trying to override it but as you can see it still overrided um I think that's because we didn't actually um implement or ask for the new new input again it just it continued to override it I think it just went on here um it went on to setting the board position to player anyway so actually what we need here is another while loop this part gets a little bit tricky um but just try to follow along I'll explain at the very end clearly so that um it makes sense um so actually what we're going to do is we're going to add another while loop around this while loop and just call it and just run it on a Boolean um called valid or while not valid if the input is not valid it's just going to keep asking over and over again and we of course need to create valid originally and we'll just start it as false because we'll assume it's not valid so while not valid then we are going to um keep asking for a a input in this range get it and then check the position and then if it doesn't equal um if the if it doesn't equ actually would it be easier to this makes more sense let's do it this way if bir position does equal um an empty spot then that means um valid equals true we can set valid equal to true to finally break out of this other loop and then else then we can print this so now let's try to run it this should work now so let's try to put one and then five and then five again and it says you can't go there go again and we try to put five you can't go there go again put five you can't go there go again over and over again until I choose something that is valid like six and then you can see that it puts the value in position six and leave this one alone all right so this is a little bit tricky let me explain what's happening so um we have this while loop um that is running on this Boolean called valid and then uh once we enter this then we'll make sure that the position inputed is within this range and then after that then we'll change that to the board position and then we'll check again oh is this board position available and then if it is available then we set this equal to true so that we can jump out of here and go onto here to actually placing the placing the piece on the board but if it isn't then it'll say you can't go there go again it'll this will stay valid will stay false it'll come back up here um and then it'll run this again It'll ask for more input over and over again and then once it gets a valid input it'll check to see if the board is available and then again if it's valid then it'll go on but if it's not then it'll just say you can't go again it'll loop back up and then continue over and over and over again so a little bit tricky um sometimes this input stuff kind of uh kind of sucks but uh if you're using a lot of other Frameworks when you're um actually building bigger apps a lot of this input stuff is taken care of for you already it's uh not too often that you have to actually do it yourself like this but I mean it's good it's good exercise to understand the logic that's going around so um and I think that's actually it I mean like I haven't put comments everywhere but I think we have a fully functioning Tic Tac Toe app pretty cool so uh let's just try to R run one last time and uh go through this game and then see if uh go through all the cases and see if everything's working correctly so if we put a a valid input in then yeah it puts it in the right spot put another valid input in it puts it in the right spot if we try to overwrite by putting it in position two uh it says you can't go there okay let's put it in position three instead okay now it's O's turn again let's put it in position uh five okay and then X's turn let's put it in position six and then um choose a position from 1 to nine let's put it here so this be 1 2 3 4 5 6 7 eight position eight so we can put o and then o should win and as you can see o won very cool um now let's run it again uh if o wins then X will can also win um but let's try to put in some let's try to tie okay one two three I memorized this little uh sequence here um quickly so this looks like a tieing game if we put this in here then yeah it'll I'll print tie so he it looks like our TI toe game is working as expected um everything is working nicely uh it is pretty robust because it only allows for certain inputs it doesn't allow for overwriting uh your certain pieces and it out prints everything it lets it lets uh the players know whose turn it is it lets them know what the input and everything so this is a very nice small um selfcontained and robust little application and uh you guys followed along and you coded it yourself so good job I would actually uh advise you to look at the code I'm going to upload the code with full comments um probably somewhere maybe in the in the in the description of this video or something and you can click on it and really read it I'll try to explain everything as best I can in the comments so that you can really trace it the entire thing yourself and then um things will just be clear you could also maybe perhaps try uh do little do little exercises like change the code like see if you can change it um instead of having X's and O's as the players maybe change it so that it's a and b or something cool like that little challenges but um other than that uh good job guys you created your first Tic taoe app with me and uh I hope you enjoyed it I hope you learned a lot um I hope you guys like me I'm a I'm a new person on this channel right now Kazi kind of um allowed me in here after I begged and begged and begged and begged but yeah I'm here now so um I expect to hear more from me uh thank you all for listening and um uh I'll get better at this as I go so if uh if there's anything little off or anything just give me a chance um I'm going to keep working at this real hard to give all you guys as much value as I can um a lot of free value um any any kind of value I can offer and programming um whatnot but yeah um again I am Aaron from clever programmer and thank you all for watching good bye that py hit enter okay I'm going to do it again do it again okay so you guys get the idea hey guys what's up this is ky from clever program.com and today we're going to learn how to create a pip that py hit enter okay I'm going to do it again do it again okay so you guys get the idea hey guys what's up this is kazy from clever program.com and today we're going to learn how to create a python texting app using the too API essentially I've broken this down into 10 very easy to follow steps and as a matter of fact you don't even need to do the first two which is create a GitHub account or Star this at the top right it's so easy to do this you guys that I'm going to walk you through each step okay and you guys are going to see that within just a few minutes we're going to have this app up and running so let's get started so I'm going to just open up a new tab here and go to TWI io.com and let's just walk through and create an account together okay now normally I wouldn't walk you through creating an account but there are certain things that I want you to be aware of as we go along okay so I'm just going to put in my name uh put in some email regular Bing stuff here let's take SMS which product you plan to use it for first we're going to say I don't have a project in mind for the question what are you building and for a language let's say python cuz python is pretty awesome uh and they are telling us to make sure our password is safe and has uppercase or whatever cool no worries okay we need to verify that you're a human being so let's verify that we Are a Human Being indeed okay and we are in let's click get started here and essentially what we want to do is get through just their get started part so you can get your tlio phone number okay that's one thing we need we need two things basically from twilio we need the twio phone number and we need uh your like cell phone number or one of the cell phone numbers that you might want to text or bother okay but they have to verify the phone so you can't just do it to a random person you have to make sure that you have that phone available so first of all let's just get started with the twio phone number whatever number they give you just hit choose this number and we're going to accept whatever they give us okay that's our twio phone number now we're going to send a text message to our phone number okay so let's just put whatever the body we want to put let's say um haaha okay and here if you request the code it it'll also like show you what code it's using to put in that hahaha so to speak let's just hit make request and it says did you receive the message so I'm going to go to my phone and let's check check if we received the message and I don't know if you guys can see my phone but it looks like that we did receive the message it says hahaha okay that's pretty cool let's hit yes we received the message now we're going to test out um responding to the server and it's going to reply back to us with hello from twilio as you see right over here okay so I'm going to message them back with something it doesn't really matter what you send them so I said I said why y yttt very um cryptic message very important and they said hello from twilio as we expected again I don't know if you guys can see this clearly but I'm I hope you can okay so we did receive an SMS message that's great let's hit SMS tutorials and we actually don't need to view this anymore okay cool so now let's get on to the next steps all right so now let's see what our next step step is okay so now that we're done creating a twio account and getting our phone numbers let's go ahead and verify uh a phone number so let's go ahead and click this link so I have a verified phone number I don't even need to verify phone number anymore I've already done that and now we can go ahead and get our twilio credentials okay so if you look at step seven it says hey once you get your credentials and your to your phone numbers go ahead and put it in credentials. py which is this thing over here so if you were to clone this um program if you were to clone all of this in your desktop and open it there then you can just directly get access to that file credentials. py and put it in there but we're going to code this from scratch so uh let's let's just do that together so I'm going to go to my desktop and I'm going to create new new folder app all right so I'm going to open up my idle and I'm going to code the stuff up right in here so we created a f we created the folder called twio app and I'm going to essentially throw my code in there once I'm done writing it I'm going to hit command and so it opens the part where I get to write my script um for the script first of all let's save this guy okay and let's call it let's uh throw it in our desktop let's go to twio app and we don't need that folder we're just going to save it here we're going to call this one credentials. py and here we're going to put all our credentials okay so what do our credentials look like well we need a few things we need our account Sid um we need our off token we need my cell and we need my twio okay and let's just go ahead and get all of those I have this link here for you guys you can go to this link so I'm going to go ahead and get that account Sid put it right here um I need to get my off token so I'm going to go ahead and do that make sure you put it as a string okay so you notice the little quotations that I'm putting there now I need to get my cell number so I also provided link for you guys here in Step six so let's uh go ahead and uh get this bad boy right here just like this and I'm going to go and paste it here okay but it can't have the hyphens or anything so I need to remove that make sure to have that plus and that one you you'll need that so basically your whole thing if you have a one and a plus you need that now let's go to manage numbers and we're going to get our twio number from manage numbers okay so let's click here and that should give us the number right here okay okay and I'm going to save it so now our credentials. py are saved and so I just hit command n you can just open a new script however you like and this one is going to be called send. sendor SMS this is going to be the one that's going to allow us to actually send our text so I'm going to save it first first thing you guys will need is to actually install um you need to install twio okay so pip install twilio so just open up your terminal so on your Mac you're going to say it term or term depends whatever you have so just go ahead and open your terminal on your MacBook and if you're on Windows go and download git bash okay uh download git bash and once you download this okay is this link here once you download this you can do the same thing and follow along what I'm going to do in Mac okay so I'm going to install twilio the library twio okay so back to back to the tutorial let's do pip install twilio and this should install twilio for me oh um I got permission denied what's going going on here I need to maybe uh which python okay it's Python 3 right this is definitely Python 3 pseudo pip install tlio so sometimes when you get permission errors when you're trying to use the terminal to install stuff just put pseudo in the start and that essentially just says hey I have root access and now I'm want to run this command so yeah don't stop me I'm going to run this command Okay cool so now that we have installed twio let's go back to our um idle here and we were at the part where we were writing our script for sending the SMS so we're going to say from T.R import twilio rest client and I have my notes Here here because this is not something I code every day so I don't know this at the top of my head but that's not the interesting part so what I'm trying to do now is from this file I'm trying to uh just pull all my credentials so I created one file which just stores my credentials and then I want to retrieve those credentials from my in in my send or sms okay that's essentially all I'm doing so account said what other variables do I have off token uh my cell my twio okay now I'm going to say client is equal to twio rest client I'm going to um pass in the account Sid here to the rest client and it also needs the O token okay now whatever message you want to text your message actually goes here so you can put in whatever you want I'll show you guys some cool text messages that you can do uh let's we're we're almost there guys we are pretty much done actually create to equals my cell comma from underscore equal my twio okay and then for body we want to say equal to my message so client. messages. so do create is a method that takes in multiple arguments in this case it's taking three arguments two from body okay it probably takes more arguments we don't know but these are the arguments that we passed it in these are keyword arguments and my cell is this variable right here so it puts in your cell phone number from your other file uh my twio that's your my twio phone number so that puts that in also it retrieves it from the other file the magic of importing and then uh my message goes here so whatever your message may be so this is this variable okay now let's try to run the script and see if it sends us a text message like what I would recommend you to do is what I have written here okay this way this is the best way to run your scripts so for example what I want to do is I want to go to my desktop um and this is where my file is going to be right so I created a thing and it was called twio app so I just go in there and it's called send sms. py that's the file I want to run okay so I'm going to say python send sms. py okay and hopefully this runs and does the trick for me so I think my command just ran and as you can see the last text here it says your message goes here right so that's awesome we just sent our first text so let's let's do something cooler and rather than just make it here I'm I'll send the text again just so you guys can see it and and see it's live so I'm going to hit up here so I can recall the command and I'm going to do python send. py hit enter okay I'm going to do it again do it again okay so you guys get the idea and how my terminal and all that stuff is is connected and it's sending the text messages and let's now try to make the text message a little bit more fun and before I get to that just so you guys know you guys can go to this link I'll have it in the description below if you're watching it on my YouTube channel and all you'll have to do is create a GitHub account and you can just hit this clone button you get all of this code you don't have to write it yourself and then you can just go and run this command from your terminal especially if you're using a Mac and you're good to go if you're using Windows no worries just download git bash and type in the same stuff and you should be good to go uh make sure that you don't skip this part part nine which is to install twilio okay so you can see that the text messages are actually going through now let's try to make them a little bit more fun so I'm going to go to my idle uh here and let's make our text messages more fun uh just so just so I can show you guys something uh let's see so silly person sln sln puts a new line so if I had to show you that sln is is not an actual thing in itself it just puts a new line so here it it'll say silly person and it'll put this blank line here so sln is used to actually put new lines so what I want to do is I want to use list comprehension and I want to say uh silly person with new line um for I in range 10 for now and if I show you silly person you can see that it says silly person silly person 10 times that's your fry and range 10 and it's a list comprehension because it's all in one line and I didn't have to do any other stuff now what I want to do is since I wrote this 10 times I want to concatenate as a string because remember my message does not take it in a Tak in a list this variable here this argument here body expects a string so we need to convert this list into a string so what we can do there is we can actually do this trick and you can see what this just did I said join X so join this entire list here here uh with only empty strings so it creates this one giant string okay what does that look like well if I print this out for you you'll see what it looks like it actually looks like this okay um so let's let's do that so I'm going to go here and I'm going to say silly Bob new line I for or sorry for I in range uh I don't know 100 and let's go like this and then go here and say that join okay this should be good I saved it I'm going to go back to my Python and simply uh run it where was I running it was I running it in my terminal was I running it in my I terminal I don't remember here let's try it here pythons send sms. py let's see if we get this message what I'm not getting it what's going on oh I just got it look at that so I don't know if you guys can tell but that says silly Bob like like a lot of times right it's a silly Bob a lot of times so yeah you can add some more stuff to it like that so hopefully that gives you guys a clear idea of um you know how to create a pretty rudimentary basic python app using the twillo API and in this project the things that I expect you to learn is like okay how did we use import statements to retrieve data from another file and then use another one right for example we used the import command and sendor smsspy which leveraged data from our credentials. py other things that you have to keep in mind for this is uh so we learned a little bit about list comprehensions but more importantly one big thing that you guys got introduced to are something called apis which are known as application programming interfaces these are tremendously powerful and essentially they can give you you unlimited power without you having to do anything this is you leveraging somebody else's application or an app because remember we didn't write this texting app we leveraged twilio's API to do it for us twilio knows what to do with the texting and then we just get to leverage it I have a few apps that I created which leverage the search engine and Google Maps because I used the Google Maps API and integrated it into my own website so it feels like I did it but really I just Leverage The API of Google Maps there are tons of other apis like that like Yelp API you can pull local restaurants and see what their ratings is and what restaurant is hot and popping up and you can actually integrate that data into your own personalized app or even a mobile app using the Yelp API so apis are actually tremendously powerful and this was just a little hint of that I really hope you guys guys didn't run into any problems and the instructions were clear if they were not please comment below and I will personally help you out and we will get your app up and running because I really would love it if you guys were able to send this you know text to yourself or to anybody you know maybe your spouse or your friend um you know just to have a little bit of fun now do remember that with a free twio account you only can text verified numbers which means you can't just text anybody that you want so if you pay then you will be allowed to actually text whoever you want it's not much I think it's $1 a month but I could be wrong uh that's what I what I saw other than that that's what this is about I think what I'm working on now is creating a chess app so I might actually um have a project for you guys on that and we might actually build it from creating the chess engine so the logic then the user interface and then the chest multiplayer app so that's something actually I'm currently writing and once it's done I'll probably have it presented to you guys anyways guys I love you so much please like the video if you liked it and subscribe to the channel and I'll see you on the other side okay take care bye how's it going everybody hope you guys are doing amazing my name is nazari and I am a fullstack developer who's been working with Jango for quite a while now and today I am here to teach you how to build a Jango todo app okay so what will we learn today we will learn how to create a Jango todo app that contains the back end the front end and the database all working together we will also learn how to use bootstrap and its basic structure to create beautiful looking applications and we will then we will learn how to create a Jingo Model A Jingo view where all your program logic will live and then finally we will learn how to use the Jingo Ram to manipulate the database and I think overall you will learn how to take an idea that's in your mind divide it up into pieces and put it into reality cuz that is a very important part now the best way to learn from this tutorial is to code along with me that is very important you guys guys now if you run into any problems I linked the code below and you can just kind of use it to compare and contrast and see where you went wrong now if you are really stuck you can either comment on YouTube or you can direct message me on Instagram at Naas dumanski and I'll be happy to answer any of your questions now other than that let's get started guys all right so before starting any new project I like to write out a very simple requirements document like this okay so let's take a look at first things first is the goal what are we trying to achieve with this app right so we want to allow users or customers to keep track of things they need to do on a daily basis so that's the goal the user story is what can users do on the application functionality wise so the first thing they can do is a user can view his or her list of todo items so that's number one number two is a user can create a new todo item that's number two and the third one is a user can delete a current todo item and so these three functionalities will tell us what we have to write in terms of codewise right um and so after that I like to do a simple flow diagram because I'm more of a visual person and this helps me out a lot trust me um so as you can see we started with a stick figure which is a user that's very nicely drawn stick figure a user will load the web page what's going to happen next we're going to get Tod do items because I'm guessing we will have them stored somewhere in the database and then we will show Tod do items somewhere in the template page so that covers the first user Story the second user story is again we start with the stick figure and what they can do is they can input a new todo item cuz we'll probably have an input box they will click submit we will add that item to a database and we will reload and when you see when you reload you see that kind of traces back to the beginning through here but we will get to do items and show to do items and so that covers those two user stories now my challenge to you is to create a third flow diagram for the third user story because you will see just how useful this is now with this out of the way let's go ahead and get into the coding I'll see you guys there let's take a look at what we're actually going to make now here's the application obviously it's called let to do app and it's pretty simple as a customer or as a user let's say uh I let's say I want to add a few Todo items that I want to do for the day so I want to read my python 101 book which is very important obviously right I need to go for a run right and then I'm going to take the jle tutorial take the jingle tutorial to tutorial perfect and as I do these things right I just simply click delete delete delete and that's it and I'm done and as you can see that's pretty much the whole app it's very simple but very functional and looks good as well but the important thing to understand here is The Core Concepts behind building application like this right because now you get to learn things like backend and how the backend interact with the front end and how now the backend interacts with a database all those things are very important for not just building applications like these about building much bigger applications uh like Instagram Facebook Twitter anything like that so with that being said let's actually take a look at how we build this because I'm really excited for part one of building this application uh let's goad and install and actually go to reel.it this is basically an environment that's going to allow us to easily build this app without having to install anything or anything along the lines of that uh so just go and rle that it and click sign up and once you've clicked sign up you should see a dashboard kind of like this and you should actually have zero obviously applications but I have my to do app cuz I already built it and so just click plus new Apple that's the first thing select jingle let's name it to do app to do app simple career repple so what it's going to do now is obviously it's going to install the D Jango uh environment it's going to install the server it's going to install all the necessary files for it making the things very simple for us click Start it's create migrations I will talk about these things a little B later there we go hello r or hello world all right now let's take a look at creating a model now what's a Model A model in Jingo is something that represents a database table that's how Jingo translates it okay so I'm going to copy a few lines of code here right here going to copy these lines of code just for Times Sake okay I want to paste it here so what do we have here okay we've got a class called todo that represents a database table we also have something called edit date and text and these are attributes of a database table right so we have an edit date that's a date time field and we have a text that's a Char field obviously we have those at a DAT is simply when did we add it to do item and the text field is there because obviously we need to save the text of the to two item that makes sense um and what's jeno going to do is jeno is actually going to translate these these models and these attributes to database SQL in ctions in searches and updates and so forth so go ahead and click restart just to see what I'm talking about you can see that what's going on is it's creating a model to do interesting right okay okay so with that actually go ahead and click restart again just trust me do it click restart and what's going to happen is you have this migration file right and this is what jingle uses to keep track of the database right it says here create a model with an ID that's an auto field that's a primary key right with an edit date as a daytime field and text as a chart field and that's pretty much it right now obviously it gets a lot more complicated than this but I just want to show you because it's very interesting to me and it's very important to understand how these things happen on the back end as well okay now we're going to make this application just a little bit more stylish we're going to use something called bootstrap which is just a a a framework that allows you to make beautiful sites in a much faster Pace okay so go ahead and go to bootstrap just typing bootstrap into Google or go to get bootstrap.css go to the doc documentation and we need to install the following okay we need to install the CSS and we need to install the JS so go ahead and copy CSS first okay all right now the question is where do we in add these all right so we have the base. HTML and we have an index. HTML in the base. HTML this is where you have your base structure of the site and now I that's where you would add it okay so go ahead and just add that to here and let's go ahead and copy the JS files the JavaScript files to here as well once you've done that just click restart and and voila we got a little bit more stylish hello reel.it next we want to create a base layout for the application that does not include any of the logic so far so our goal is to basically create HTML like this without any of the fancy logic just yet okay uh so let's go to do that so what do we need first okay with first we need to to create this navigation bar the way we're going to do that is go go to boost strap and let's let's actually type it in this is literally the process that I do with anything that I do with Boost trrap so just type in nav okay and we see we have a navigation bar it looks just like this but we're not looking for that we're looking we're looking we're looking no no no no no no no nav bar there we go that's the one nav bar and we really need a simple Navar that is of black color let's see let's see so kind of like this you can see right there we have a nav bar okay so we can just copy that in here and the reason why we're putting it into the body section the base at HTML is because that's where the whole application inherits the whole HTML right so navigation something that's going to stand throughout the whole app okay and that's what we're putting in here so well why so much I guess I don't want to copy all that so just copy this part I guess copy that and voila all right refresh so be I mean we have just a black bar nothing fancy now we need the actual wording to do app okay and if you look a little bit more down we can see that in order to get that in there's something called a Navar brand okay so just copy that right there refresh and voila obviously now this is actually called a todo app to do app refresh that and that's it right so you've got the navigation bar just like you have it in the application that I showed you pretty simple the way we we just got that um now we're going to look at how to add all the other parts of the HTML into the application okay the first thing obviously what we need to add here no actually here we need to add like things like at the add item the input box the form and obviously the list of todo items right so let's try this at first we're going to be working with the inex HTML because that's the thing that contains s HTML page that contains the container underneath the navigation bar all right so preface okay the way boost trp works is it's divided into rows and columns think of it as you just have a lot of rows and within rows you can have a Max of 12 columns all right so we're going to do create a row that will contain this no this contain the add item and this form all right so that's the first part let's do that so div class equals row right I'm going to close that out oh and then the second one is going to be div oops no not this one div class class equals column column column wait no I'm hold on I just need to I don't know why I'm doing this again uh anyways great so now if we refresh this obviously nothing's going to happen but at this point now we know we need to add this add item H1 tag or no h2 tag in this case so we're going to do H2 H2 add item H2 all right all right it's there but you can see there's no padding right it's just all the way up to the box one thing you forgot to do is to add a container with bootstrap everything kind of has a parent container a big container that contains the whole application so when we go to base HTML you can see underneath the navigation bar we have all the blog content this is the blog content that is inherited from here right you can see this extends the HTML so what we are want to do is we're going to add a container a class container class equals container and then we're going to obviously close this out I like to add my spacing I'm very particular about that great now we have a container okay we've got that part now let's go ahead and add the input box and I'm going to show you how I go by finding or just adding an input box from boot strap so go back to bootstrap all right type in forms right perfect and we're just going to Simply scroll and see what we can add that's similar that's similar okay so I going to scroll now I know at this point I do know where I want to go because I've done this previously but if we just keep going keep going for example we don't want to anything too complicated I'm just kind of browsing that's good I kind of want to add this as well yeah that looks look good that looks good but I think I'm going to just do like an inline form here so first things first we want to add an input box like this and that's represented by this fancy I mean not fancy just this this line of code I guess I don't know why I said fancy anyways so it we're going to copy that and input type um copy that and paste it okay so we have type text class form control margin bottom two margin right two all right so we don't need the ID there's no need for it for the placeholder we're just going to do type here and the placeholder is what's going to be seen inside the input box right next we need to add a button actually no refresh this first right there perfect we've got ourself an input type next add a button we're just going to do there's a button right there there some really cool button submit button copy that paste it here voila You' got it but now we want to do is you want to add a list of items right so go ahead and let's look for a list of items list group or something like a list group perfect there you go now you have a list group we know it's going to look like this let's just add it we don't want to however however we don't want to just add it at the bottom of this section and we I want to create a separate Row for it because it has a separate distinction and so I that's how I like to divide things up so I'm going to do class class equals row right and remember in bu you can have as many rows as you want the only the only restriction is you can have only 12 columns div class equals column div no why do I keep doing this all right perfect and we now need to you literally just copy this for the sake of seeing how it looks like we're going to we're going to format this a little bit nicely okay you can just select it and just click for well or not or just do it by yourself all right refresh it there you go now that has the active one but we don't need that just can remove the active portion perfect you can see that's we have now a list of items which is what we want to do which is what we want so I just took a second to see how we can move the submit button to the top so it's in line with this input uh input type right and one thing I missed is that if you want to have a in line form you just have to create a form container with a form and line class okay and we we're going to do that so create a form class equals form in line and then in here form just like that we'll need to close this out obviously I really don't like how this just formatted it okay and if you refresh it's completely gone where did it go why did it just disappear oh there it is this is that's so funny anyways um yeah so now you got the form now I do want to add some pain to the top so the way you do with petting for example I'm going to add some petting here right there so I'm going to do there's something called a margin top 4 so we're going to do mt4 which stands for margin top 4 all right so we added some padding over there and we're also going to add some add padding to this row as well margin top4 Perfect all right so it's some good that's some a little bit better formatting now I know what you're saying you're saying nazari why are we learning all this HTML where is the Jingle stuff okay so hold on it's coming now now we're going to get into the jingle stuff what do we want to do first initially what we want to do is we want to be able to add an item through this input box correct correct so let's see how we do that now what happens is when you add an item we need somewhere to catch that data and save it in database correct so let's take a look at this views.py file here we have this function called definition home right and this definition home actually when I say definition it's a function it renders the index HTML so probably makes sense that somewhere in here we probably need to create a function to capture the data from this form correct so let's do it we're going to create a function called add too right we're going to have the same parameter request and we're going to print this request for now all right perfect now you're saying okay well how does jingle know to call this function well we're going to find out so go to your rpy file and you can see this URL py file has has all the URLs that contribute to a certain view we we have this called views and you see this views. home that's being called that calls this so we simply need to call views that add too to trigger that function let's do that so we are going to Trigg URL all right oh if I type correctly all right we're no not e I don't know what I said e we're going to now now URL but this time we're going to say URL add too right add Todo and that triggers a function called views. add too so create that comma great so we have URLs in place right we have the logic we don't have the logic yet but we have the function in place now we need to actually we now we need now we need to have this form call that URL so form has something called an action action o o and that action is this URL right we need we need to tell it to go to this URL so go here action add too and the method we're going to pass in the data through a post method there's a get there's a post there's actually a multiple one but post means we're posting something think of it like that okay we also need to change no this is fine type submit that's fine that's pretty much it let's see what happens okay it's broken great the includ does not appear to have any patterns in it no well it does you have URL oh oh I know why because it probably got stuck so if we just simply restart restart restart restart restart restart restart yes restart all right there we go now it's working let's type this in the ru yeah it's broken so there's something called a c token what do we know now we know that it's hitting this URL because when we hit this URL it broke which is great um now we need to solve this issue right d is just a way for us to protect the form to make sure that there's no spam form submissions that's why that's what Jingo has for to protect its form okay for the purpose of this video we're going to unprotected I guess you can say because I I've tried it with trying to protect the csrf uh here in rep. in for some reason I've always have not been able to and I think it's due to a virtual machine issue um but in order to for us to be able to go through um and not have it be csrf protected I guess um here's what we need to do so we go to uspy file and so I'm going to search in csrf exempt csrf exam there we go there it is so we're going to copy this paste in here and now we do csrf exempt exempt and that gives us an exemption that way if we go ahead and simply just type in here anything submit what didn't return race oh right yeah in this case we are going to redirect back to the homepage okay we can literally just simply do like this for now return and render the same homepage that's it and if we refresh that okay boom you see now obious nothing is saved but all we have done is we look here we have printed this request right we now have this request great now I want to print a little I want to dig a little bit deeper in this request okay if I go to documentation of Jango and I type in request all right request object request object here is what the request object contains it contains things like cookies method right in this case however what we want to look at is this post right so this post is dictionary like object containing all G HP HTTP post parameters so if we print that out request. post right and if we refresh this let's type this in refresh it actually type this in submit you see that's an empty dictionary now why is an empty dictionary you might be saying uh well okay let's take a look at it in order for it to post something um every input has has to have a name right a value to have a value you have to h a name have a name attribute so in this case the name ATT will be content okay let's refresh this again type in Python 101 book all right click submit and voila you got yourself a dictionary that with the content from the input provided by a user right now we can see and with I mean obviously with this we can actually use it and create a todo item in a database great great great great great that's awesome so let's go back to the view.py file we now know how this request up post works all right now what we do what do we do now we need to capture two things we need to capture the edit date and we need to capture the content right so let's do it in order for us to capture the edit date what we're going to use is we're actually going to Simply create an edit date like the current date uh there's something called a time zone that Jango has and so we're going to import from D jeno the utils import time zone all right time zone and what we're going to do is we're going to create addit date date equals time zone do. now and that is simply a time zone object of the current literally just the current time that we are creating this all right so that's great now we need to grab the content of the actual this request that post so let's go ahead and do that uh we we can say content equals request. poost and inside here we'll say request post content and that will give us the content of um of what we typed in here okay let's now let's try this out so we're going to print at a date this is literally the way I'm teaching you guys is literally how I how I develop okay I I print things out I test things out cuz the last thing you want to do is you want to write a bunch of functions and and and then you realize that you did all wrong right because you didn't test it and so as I go along I test things and that's what you should do too honestly I'm not the only one who do who does this trust me print content uh we don't need to print this anymore right so refresh it okay 101 book click submit let's see what happened here oh got a all M right so if we I'm going to highlight this okay this was our request okay here is what got printed this is the date and add a date it's a time zone date 2019 uh 0815 and this is the content 101 book perfect perfect and then we obviously refreshed okay great great great now with this data in here we've captured this data we need to to save this data somehow so what Jingo has is Jingo has those remember those class todo items that's what we're going to use we're going to import from Jingo the models from um I think it's main D models from Main so you see this main models import to do we are importing literally this class okay import this class and so let's let's go ahead and actually create a model right right so jingle create object right in this case create AO we're going to create a model instance and there should be a create function all right perfect yes we have that but I want to do is here we go if you look at here what jingle gives us it gives us this you know every class has an instance called object and there's a lot of functions that that class has and one of those is a create function and that literally creates a creates a database actual entry right so if we use this this is my mod objects that create and for us it's going to be too right to do to doobs do create now what are we inputting into here okay we we need put input a few things if you look at our models we have the edit date and we have a text okay go back to views the addit date equals actually I'm going to change this this date this is um current I'm just going to change this date current datee okay added date equals current date then the text that's the another attribute equals content perfect text equals content two the objects I create add a date equals current date text equals content with this when we run this function and we click submit now it should create a database object or a database entry let's try this python 101 book submit good why can't you reach uh configure the okay let restart this that's why restart this if this happens you just restart it perfect perfect all right so let's try this again 101 book just for manager object has no attribute do sorry cre obviously I can't spell create perfect so let's try this again uh 101 book submit great now you're probably like well hold on I didn't see anything how am I supposed to know that has been created well un okay here's what we'll do this is created object and we're going to print cred CR it created we're going to print this created object okay created object print and we're going to print another thing I'm going to print created object. ID because if we know it has an ID that means it's a database instance oh not I'm sorry a database entry so let's try this again add item 101 book submit there we go todo object two the ID of it is two that means it's created if we want to actually there's another way you can do this is we can also print so list of list of um let's see length of todos of to do I'm doing this because literally I'm trying to get you to understand how this orm works it's an object relation relation object object relation relation manager okay so it's just a good way to for you to understand how these things work so there's a todo object. all. count that will get you the the count of all todo items in the database and if we know hold on object if we know it's increasing or if we know it's greater than zero that means it's being inserted so do objects. all that count I'm we're going to print that boom length of todos voila it's doing a lot of its fancy stuff it's always there we go perfect so now go ahead and number two just to try it out so here's what we got this is to do object three right because we already had one we had two and this is third one and the length of the whole table I guess you can say is three that means this is working right all right so now that we have confirmed it's working let's erase this and the second part is actually going to be listing this now we need to list the actual todo items to list the todo items we have we have to do a couple of things first is we need to grab the items from the database and then second is we need to transfer those to do items to the HTML page and loop through them okay so let's see how we do that we have this function called home and this function home is what brings us the homepage right now through here is where we'll be able to actually take Tod do items and transfer them to the front end page so let's let's do that okay we're going to grab todo items from the database and again we're going to use the same type of functionality as we did when we added a todo item right or to listed todo item right so here we have todo objects. all right and that will grab us all of todo items in the database the second thing we're going to do is we're going to order the todo items by the added date so there's a function called order by and this takes in the parameter that you want to order by so the attribute that you want to order by like which add do you want to order by text you want to order by the date and so that's where we specify add a date okay right and within this we need to now transfer these items this this list to the index. HTML and so this render function right here I has a third parameter to transfer data okay so we will speak in specify an object here and we can tell okay so todo items right and the object to transfer is to do items right so it's going to take items that's from here and it's going to be inside uh this object Okay so we've transferred that great now let's see how we can use it okay we have an index HTML and you can see that we have just a bunch of fake data now we need to replace this fake data with actual looping up the items so jingle has a template language that allows you to use a lot of jingle functionalities within a template in this case we're going to use a functionality called four so the way you do it is you have a bracket syntax and you do four Todo item item in to do items and again this name right here is the name that we specified in here so just keep that in mind if you to change this you would have to change this name okay after we're done for in order to close this for Loop we have to do and four and four okay and inside here we're going to lose that this is where we will display the list items so we have this list list item and obviously I'm need to replace this text here okay great replace this text now what do we replace it with we have to use this todo item right this is it's going to Loop through each Todo item and so this todo item is going to be an individual todo item there's a syntax where in order to use the object you use a double bracket syntax and then you do todo item todo item do the attribute you want to use so in this case we want to use the text right because that's what we have in the miles lpy so we have text okay so we have that and let's see if that actually brings us something let's remove this okay remove this restart just to restart let's see what happens I hope it doesn't break I really hope it doesn't break I don't see why it would break all right so this is this is just a random text that we had inside uh inside the database okay with that in mind we are now looping through todo items right so let's test it and see if we add a todo item if that will actually display anything if we go ahead test two submit nothing's working now why is it not working let's look at look VI pii file you see here when we when we addit todo item that that takes us this to this function and this function renders again in index HTML but doesn't pass in the todo items so what do we do instead of rendering we can actually redirect the page to a to a homepage so some there's something called HTTP response redirect so if we go to Google response redirect correct method oh no I don't want Microsoft jingle hold on jingle there you go let's type in we don't need this just right there response redirect Clash be response redirect and the way you get you grab that from Jingo hdp right this is jingle HTP that's where you grab it form and then we can redirect it to a certain a certain URL which in this case will be the home URL so let's do that for so from let's import it first so from Jango HTTP import HTTP response redirect I hope that I spelled that correctly no I did not copy this spelling sometimes you guys I swear HTP response redirect so that shouldn't break I hope let's use this function HTTP response redirect we're going to use this function and we're going to redirect to the homepage and if you redirect the homepage it is now going to use this function after you add a todo right let's try this again oh this is our test two by the way right so we submitted it okay let's try it again test three submit test three test four submit voila it is working you guys that is awesome now one thing I don't like how is as we are adding these test one test two test three test you see how they they're going going all the way to the bottom we want to reverse that right because obviously we want to have the newest item to display first so in order to do that we simply have to put a minus that's it that's literally it because this takes us from the new newest date to the oldest date if we did it like this without the minus it's going to take us from the oldest date to the newest State that's where this minus comes in now let's try this again let's refresh well we need to refresh the actual database or the actual server do that there we go you test four test three test test two and then ad DG perfect um and now you pretty much have the list of do items and we're getting really close to the end now the only thing left now the only thing left is to have a deleting functionality in this as well so let's get to this next all right so the final step we need to take is to be able to delete a certain item which as we saw before was to have a delete button here okay first things first we're going to do is to actually insert or add a delete button to the right side of every todo item so let's go ahead to the index.html and we'll do that here okay we have the text here okay this is the todo item within here however we're going to add a button we'll do a button that's basically much the same as here so we'll do we can copy this button just like that and we'll paste in this button right here right there perfect now that was not going to work the way you want it first things first is you see how there's like a bar a margin here at the bottom we'll remove the margin so mb2 is just margin bottom so we're going to remove that that's one if we refresh it okay so that kind of removes some of the space there but now we need to do is we need to float this button to the right side so if we create a class or div a div around this okay close this div oops okay okay so that's the button and we're actually going to where the class is equal to there is a float right bootstrap class you can do this in CSS as well but if you type in float for example and you do float right okay float right right there now it floats right one other thing I want to do is I want to Center this text but we're going to worry about this a little bit later um and I also want to change the button to be button small there's a f there's a class in bootstrap which is button small which just makes it a small button see there you go we've got a button now literally that that's pretty much it uh one other thing is one main thing actually is now we have to have this button do something right and obviously it's also going to be a delete that's the text for it all right and one other thing you want to do is instead of having it be a primary button so if we go back to buttons just really quickly you see this danger we're going to use like a danger one cuz you know we don't want people to delete an accident you want it to be kind of like a warning I guess you can say no a danger so we're going to make it a button Dash danger instead of a button Das primary danger right there perfect awesome awesome awesome awesome last thing okay we need to cre a form because we want this button to do something just like we have here where you have a form action we need to have the same thing for every single button that displays there so create a form okay just for now just a simple form just like that we're going to inside this form we need an action item all right so where is this what is this going to trigger or where is this going to lead or when the button is clicked where is it going to lead we're going to name a URL just called delete too and we need to pass something because when you delete a certain item obviously we don't want to delete all of the items right we want to delete a specific one and so as a result we need to pass the ID of every or of an individual item to know which one to delete on the back end right so if we just simply use and we specify okay delete todo and the ID of the todo is todo item. ID right and remember that's the unique ID for every single item at a slash and now we know that that's what it's going to do action is obviously post just how we had it before perfect and refresh now obviously if you do this it's it's not going to get you anywhere because we actually need to create the URL and the view for it so let's do that so just refresh it for now perfect we have a delete todo that looks good that looks good now let's go to the url's file we have this add Todo now we need to do the same thing for delete todo all right so delete todo but with this we need to capture one more thing and that thing is the integer or the primary ID of a specific item so what you in in Jingle what you specify you can literally specify a parameter a type parameter and name it so to do ID like this slash and so D Jango will will actually map this and know that okay so that it there should be a todo ID here and I'm going to pass this now to a views.py file now we obviously we don't want to pass this to add Todo now we want to pass it to delete todo which we haven't created yet but we're going to right now so let's try that uh so let's go to the view upy file and we can create the same function delete no delete too right again request but one other thing is the todo ID because that's the second parameter it's going to be passed in through here in todo ID so we're going to pass this in through here right one other thing I want to mention is just for the sake we're going to do csrf exempt as well for this one CU this is a form uh and just for the sake of the video we're going to include that in and we're going to print the todo ID which ID are we removing and then we can go ahead and return the same HTP Sprints to redirect to the homepage okay let's try this now refresh this or should it not ref refresh uh restart this again if you get that error just restart it and you should be fine perfect let's try this again all right when we click delete uh nothing happens this error is because of the URLs the URL function right here is actually a deprecated one so this one came initially with with kind of the Jingo setup but it's actually deprecated if we look at the UR dispatcher you will see that jeno now the latest version uses path and so if we go ahead and import from jen. path right and you're going to run these these problems sometimes and that's okay that's a learning uh learning opportunity so with a path can actually just specify it like this path delete Todo we use a delete todo and and now this should work so if we take take take it like this perfect you see that was completely okay and you can probably even do the same thing here so path like that there you go path like that um and you can leave this alone for now all right we've got that working if when we click delete this is the ID the ID is four and that's what so if we do it again right there you can see that it printed out for which is the ID of the todo item now what do we do with that todo item once we have that ID we need to delete it and again we're going back now to the Jingo omm object relational mapping the way you delete an item with in Jingo is you do todo doob doget ID equals Todo id. delete and literally that's it let's test it let's see how this works guys let's restart it because obviously we had we got some error right here all right now let's go ahead delete delete delete and it's delete and you can see it is working guys so let's let's let's do a test run fully with this let's go ahead and like if we said read python 101 book go for no 444 go for a run perfect let's make some lunch make some lunch perfect and that's what you guys got now you have a todo item a todo app with complete submit functionality with complete delete functionality and you have the proper the proper logic behind it and that is awesome you guys have done it if you guys follow along that is amazing I want to congrats to you all right that is it for the tutorial guys I really hope you enjoyed it and that you took away something from it that is the most important part if you have any questions whatsoever or any problems feel free to comment down below or you can message me on my Instagram at Naas dski and if you did complete the app I want to see it share with me seriously I'm not kidding other than that I hope you guys have an amaz amazing day and I'll see you later what's up guys I hope I'm live this is Cy from clever program.com this is Aaron from clever program.com this is Frankie from clever program.com Doc in this video we are going to be making a Craigslist app clone okay it's going to look like this I'm going to do this quickly so you guys can search seeing this this is what it's going to look like what we're going to build we're going to be doing it with python and Jango all right so we're going to be using jeno we're going to be using python we're going to be using beautiful soup and web scraping and the end result instead of something looking like this when you type in pingpong which looks like garbage um it's instead going to look like this okay another thing when when you type in something like a python tutor it looks like this which is not very pretty here when you type in a python tutor is going to be much much much prettier okay like this so which one do you prefer this one or this one I think we all prefer this one probably but people are going to say the other one just out of yeah Okay cool so that's what we're going to be building ooh did I do the shortcut I hope so that's what we're going to be building what is up everybody people are excited they're jumping on Epic code is on tech boilers is on made Mor gear Abdullah all right guys we're going to be building this live together I hope you guys enjoy it and then um yeah if if our mic or anything is off or whatever just uh let us know is the chat can are you able to go into the what did you do huh by the way guys any questions that you guys have just drop it in the in the chat we were more than happy to answer them yep we're looking for really cool questions as well so yeah make your make your questions great guys don't ask stuff like python versus Java I'm going to ignore it uh like brain dead questions don't ask them ask more beautiful questions and you'll get more beautiful answers right right right up here with with KY and and Aaron and Frankie and Frankie Frankie that's right so we got code okay so now we're going to switch the thing and we're going to go here all right I'm going to I'm going to go and do that fancy stuff now hit me yep and you got to double check if it's working oh yes oh God yeah there we go okay sweet oh the marker just came out that wasn't what I wanted to happen okay so basically I I I think you guys get the idea it's going to be you can open that up again so I can Craigslist app I'm just going to put it here so you guys can see it it's going to have a search functionality like this okay search functionality like that it's going to have a bar okay and then when you type something in is going to spit back out the end results right here like this okay that's what we're doing but there are multiple technologies that we're going to be using in this okay so there's going to be like multiple different things so for example we're going to have Frankie what are we going to have what's one thing we're going to have in here um images images cool but what technologies are we using what programming language are we using python python Aaron I want you to jump in this too what other what's what other technology Stacks are we using not C++ cool what else Django so we got D Jango and not C++ yeah what else HTML yep what's the other one Frankie HTML and JavaScript okay A little little bit right I mean we're actually going to be coding no JavaScript actually we're staying away from JavaScript completely nothing wrong with JavaScript but we're just uh not using it we don't need it and then we have databases so we're going to be using like something with databases um this app oh this app is also going to be hosted online so which one of you knows what we're going to be using to host it online o do you know no I don't starts with an H Heroku oh holy crap Frankie knows his stuff besides just camera stuff hell yeah there we go I love you so we got Heroku as well and um that looks pretty good right or are we missing something bootstrap stuff not boot oh yeah so for front end we're actually going to be using materialize yeah which is like bootstrap but not yeah um it's a it's a c CSS by by Google and it's it's pretty nice actually it's very beautiful so we're going to using materialize and then we're going to be using obviously things like beautiful soup to do web scraping mhm beautiful soup I guess I should probably just write web scraping because everybody gets that yeah um yeah what else are libraries um I think that's it besides Craiglist Craigslist itself but that's just the website um yeah yep uh so that's pretty good cool so that's what we're going to be building yep beautiful we check here what is happening okay we got a bunch of people jumping on here that's great all right so let's go and now we're going to start coding this thing up guys now one really crappy thing that actually happened recently with Aaron and I was we were working on this application and we spent about 2 days recording we have about 12 hours of footage with the camera and 12 hours of screencast and between two days we spent probably 15 hours building this application for you guys and what ended up happening was the hard drive that we had got messed up Y and so what did you end up doing I had to take the SSD it was an SSD actually to the shop uh went to several different ones um it turns out that ssds are a little bit harder to maintain and to fix so at the end of the day we we figured out that we probably have to spend about more than $1,000 to get the data back and it takes more than a week to do it as well on a $200 hard drive $200 hard drive so yeah so we thought just doing it again on live stream in 2 hours would be much better than doing all that so yeah so we're just going to do it on live stream Y and um yeah let's uh let's go so you guys can follow along okay so for anybody who's going to want to have replay value out of this is we're going to drop the code the GitHub repository or whatever like in the description so you guys can have access to it whenever you want and and that way you'll have the code and and and for now you guys can just try to follow along with us okay okay so we're going to build out a new project in py charm so I I use pie charm guys you guys can use really whatever you want yeah I'm tried as guilty I've never used py charm in my life but now that Ki show me how jacked it is like oh my God I'm going to be using that all the time never used pie charm but it looks a lot like vs code actually we know reminds me a lot of for people that don't know where vs code they don't even know what vs code is vs code no a lot of people know what vs code is everybody knows what Visual Studio is yeah minimalistic that's why I like Visual Studio is really great the debugger is next level yeah and um Visual Studio is very light and beautiful but it's um but it's not like a fullon IDE you know because uh they're just like editors yeah this look jacked yeah okay so let's um open up and start a new project so I'm going to go to my command line now let's just make sure that showing the right oh oops yeah those are the little mistakes I want to watch out for there we go yep okay so if I'm coding on this screen and there's no code MH let me know you got it okay how long is the delay all right I'll I'll yeah the delay is is is going to take a second um okay so we're going to I'm going to go to my GitHub and I'm going to create a repository we'll call it what should we call it code Daddy's list yeah yep did we introduce ourselves as the code Daddy yeah so this is the code daddies guys this a code daddy series that's what we call it we're going to kind of go either live or create applications together we are the code daddies this is Frankie this is Aaron this is Cy let's go okay so I just created the directory just in case in case you guys don't know how these commands are working um we'll open up the finder so you can see but basically I just created code Daddy's list right there like that okay you following Frankie yep cool cool so we got this I'm going to now another thing I'm going to do is I have cond so let's create a virtual environment oh I'll make this bigger so it's easier to see for everybody okay so now I'll make a virtual environment I'll do Honda create name and we're going to call this generally I like to call the virtual environment the same as the folder name so we're going to name it that and I'm just going to install Python 3 in it for now I'll hit yes I like to create virtual environment so everything is nice and packaged in one place okay going good just be aware this part is blocked yeah this part of the screen why at all times because of us oh the right the right side just be aware okay thank you so that they can see everything I'll kind of stay out of there yeah if it's ever getting blocked like let me know from there and also they they'll let us know in the chat yeah yeah let's see yeah yep okay so now I've activated the virtual environment as well cool okay now let's go and inside of that directory CD are you kidding me what are you doing CD code Daddy's list okay we're in there and um now we're going to start creating actually I I just lied to all of you guys I'm going to delete that list because this is a d Jango project so we actually need to run a d Jango command to create that folder so what I all I did right now now is I just remove that folder okay so we're going to use a Jango command now I have to see what's the Jango command that we use here Jango admin there we go it's like Jango admin start project I just did something called reverse search which is super super useful it's control R so do that like if you guys are watching this actually write that command down it's super useful for the command lines one of the most useful command lines to know control R okay control r all right Jango admin start project and we'll call it code Daddy's list like that oh let's install Jango pip install Jango yeah I was going to say can you just run Jango code on the CMD I was like what yeah you can just like run that so that's how you import it you import it what the hell's going on D Jango admin command not found Jango Jango installed on the virtual environment is it uh when you create the virtual environment it may or may not be installed I did install it just now if install Jango oh I missed that step yeah D Jango admin start project you're running uh GitHub GitHub Jango running into problems very early on it might be uh Jango admin might be one word or Jango hyphen admin or something is that what it is uh I'm not 100% sure okay how you start a Jango admin start project boom oh it is hyphen you're right misspell there's a equal sign now D Jango admin like that okay so now it got created we'll go to code daddiy list okay now there's some kind of uh D Jango D Jango admin is it start app or something like that some there is another one these are ones like you always kind of look up these are just to kind of kickart off the project and then once project is started you can actually just focus on the coding part of it a start it's something like start app I think start app is that what it is Jango admin start app app name so that's what it is okay stop the back search Jango admin start app and we'll just call it my app all right now we're going to open this up in py charm this will also help you guys learn Pyon pretty well so let's open up code Daddy's list we'll do a new window all right so this is what your guys's directory and everything should look uh look like as of now can you make that any bigger it looks kind of tiny the UI okay good point Thank you for actually pointing that out because on the live stream it will actually look tiny and blurry and blurry yeah so I'll go and get 20 I think this will be a lot better right I just made it huge okay now few things for pie charm we're going to go into project I'll go in Project interpreter and I'll pick this code Daddy's list environment that I made so pie charm is pretty smart it kind of detected it already so it it already kind of has it selected to that and then I'm going to go in the build and EXE not build languages and Frameworks I'll go in Jango and it also knows it's a d Jango project it knows the root of the project it has Jango support enabled and this is the script cool it's looking good y nice and clear this is great actually that's awesome yeah I love it production quality up the roof okay let's um let's add another one move this here let's move this guy here okay so because we just buil this app recently we're going to be referring to a lot of code on our end we're going to be referring to a lot of code from the app that we built but we'll try to walk you guys through it step by step so it makes a lot of sense to you as you're watching it okay so let's um kind of build let's run the um let's just run the server and see if things are up and running as of now so go into python terminal and I'll be like python manage.py run server what is that command doing python manage.py uh just running the yeah manage.py is something in Django that that file it has a bunch of useful tools in there and then you just like call it and then it does a bunch of Jango stuff for you so right now we're doing run server so now that we created the Jango directory we can just run server and then it just starts running like it's like the the basic framework as you can see right there on the screen like it's just working like our website is already up and hosted and all that yeah not Lo local local local machine exactly I use that term too Loosely yeah so our it says install Works successfully so at this point that's the screen you should be seeing okay if you're not seeing this screen uh then something is off okay so make sure you're seeing that screen okay so we have uh this up and running now let's uh let's go and create pretty soon what we want to do is we want to create templates so then we can actually render like a basic template that's that when we go to the homepage that's the template that shows up so the way that those directories work is I believe you want to create your templates file if I look at the project it should be in the root folder you should have templates so that's what we're going to do I'm going to go to my root I will write click here I'll create new directory and I'll say templates okay so we have templates now inside of templates I'm going to have my app and inside of my app I'm going to have other stuff so in templates I'm going to do new first I'll create a base. HTML base and uh let's call it the code Daddy's list in the title and then we'll just say H2 we'll give it like testing to see if this works like that okay now this is not just going to render autom Auto atically we have to create a view map a URL and like really make sure that it's uh it's working but a few things we want to do in settings whenever whatever app you guys have here you want to register it in your settings so you got to go to your settings you got to register that app so installed apps we want to install our app that we created like that yeah the cool thing about Jango is if you have an app already in a directory fully made you can L just pop pop in and then add it to the installed apps and then it's pretty much that's it yeah 99% done you might have to tweak a couple things here and there there's like um I don't know I don't want to say 100% but I mean it's pretty much 100% yeah yeah like d Jango does a lot of stuff like automatically so that's what's cool about it okay there are a few things that like you should just literally copy and paste that you should have so that's exactly what we're going to do so we're going to go into settings from my previous project and uh you you want to have like this templates line and this Pro um you might not need the project root line but let's get this template line and we're going to paste it here because you want your D Jango to know where your template is stored okay this is how D Jango will know and all this is saying is like hey just join the base path with templates so now it's able to find where this templates uh is and then we got to add this template dur to I believe here so I got to do template dur like that okay so that's one thing you got to do template dur and then another thing that you want to do is you want to kind of add static as well because later we're going to need static so I like to just take care of this in the start because this is one of those things that's like super freaking annoying if you don't get it right so I got that static line I got my template dur Bas dur stat static is going to be my style sheets and things like that so when I'm creating graphics for my web app yeah static static files go in there things that don't really change much like as the code is running it's just like oh resources you can go grab that's what it means by Static yep we're going to create a home View and uh all this is going to do is going to return render and uh request and it will render the homepage so or or the base. HTML so I'm going to do temp is it templates or do I just do I think I can just do Bas at HTML so this is where you see this is where uh pie charm is really jacked right this is a string but as I'm writing it and because it can detect it through D Jango it's coming up and it's also telling me what the argument is right so I can also just I can also like name these arguments click on it and does it take you to the file yep whatever that that's what blew my mind about so right here oh my so I can actually go to that file I if I hold command I can click it it's a great yeah that's a great question that that I've wanted that en coding for like the longest time like even I just like wanted to know like where a variable was assigned or something instead of like searching but I want to see like where things are happening if I could just click on a variable be like oh this variable has set the four up here or something like that that's pretty much what that is so pie CH pie charm is uh pretty beastly yeah it's making me I say it I like it because everything is very organized like the the views and everything cuz I was about to tell you um do you just um actually put visual things there or or what's up cuz in Android it's a little bit you kind of have to do it more manually and everything here is is already separated for you yeah there's like one file for everything and every file does something different Jango organiz so Jango is kind of cool because you as as soon as you do that Jango start admin command or whatever it kind of structures the stuff for you out of from right from the right off the bat so you don't have to do a lot of work by yourself okay so we got our base HTML now we got to map some URL stuff to it and then we'll be good so I'll in under this thing called my app I will create a I will create a new python file it's going to be called uh URLs okay so you should have two URLs you should have one URLs under code Dad's list and you should have one urls.py under my app okay let me go to our URLs in the test app or sorry the my app version of this yep okay URLs cool so basically all this is saying is if somebody goes to the homepage just route The View uh route the view to the home view okay so if somebody goes to a path that's empty so for example this means like clever program.com you know that's it not clever program.com something this just means clever program.com so somebody's going to just clever programmer well then what I want you to do is go to this view that does this stuff okay so that's kind of all we're doing here so I'm going to copy this and then um we're going to paste it here we're going to say from import views so we can have our views and then I'm going to say from Django URLs import path okay all right and then we want to do URL patterns URL patterns is equal to there so this should be looking good and then what is in URLs here kind of like some similar stuff include my app. URLs okay admin site cool so this is is another important one we'll add that one right about now you following along Frankie um do you know any jangle at all just the second one no you know zero jangle right zero jangle you know the idea oh that one is there already like a website um like all the different parts of a website what were you what were you saying right now yeah I was saying I didn't understand the admin part of it like um you Rec calling what of the admin like admin admin um what's it called so yeah permissions or so I'll show you what the admin when you so I'll show you Jango comes with a builtin admin I see okay so oh okay so I'll show you what that means in just a second so we're going to do python manage.py create super user um oh wait hold on python manage.py make migrations python manage.py migrate cool so now that we've migrated now let's create so this is the initial migration right you see 00001 initial so now we should have this thing called migrations over here now we can create a super user I will call the username admin email address this and then admin again sure cool so now if I go run server and I go back here and I go boom and I go slash admin you'll see it takes us to an admin and if I log in takes us inside on the back end and if I go users there's one user that we just created called admin dope but we don't really have anything else what's up with this database like what's running this database or what like how is it how is it um saving and storing all of these all of this data this kind of comes built in with the python Jango builtin stuff this is what what I like about it now if I go to models right and I build like a basic uh thing so what is it class models. model okay so we'll we'll create like something called search and we'll do models. model and um okay and basically we'll copy these two lines oops okay so we got so basically all I did is I'm like hey create so I'm going to create a database uh called I'm going to create a model called search and then I want you to call one of the fields in there like search and I I can even call it like search field but let's just say search and I'm I'm saying make all search takes in so search Imagine is like that bar right there so all it does is it just takes in like some an input an input okay that's it um and then we should have like one that like timestamps when it was created okay so I'll go here we'll grab this one and um I'll paste it here okay so now whenever you add new stuff to the database what you want to do is you want to make sure that you um migrate it to the python database otherwise it doesn't get stored okay so what I'm going to do is I'm going to do python manage make migrations mhm and then I'm going to do so you see create new model created that creates the migration object thing you filed yep and then you actually make it now the migration is done right so we're going to go run run server like that I'll hit refresh oh okay so now we're going to go to you see add py right mhm from import models and then I'm going to say it's something like admin. register board models. search something like that hold on how is this written uh admin site admin. site. register and then uh from Models import search yeah okay so now when I go here and refresh models is not defined literally it's right here oh my bad so the server stopped running let's run it again so now you see it says my app is here cuz we I um integrated into the admin interface so we don't have to create an interface for it if we don't want to we can just use D Jango like built in but an interface for what for your app yeah so it's like showing us that database that we created of searches so now whatever you search it'll get stored in here oh okay okay yep so it's just kind of getting stored in there automatically and you see how it says searches like that which is kind wrong CU if it has multiple searches it'll say like that because all what it's trying to do is just trying to put an S in front of it oh okay so for certain things it won't work like for search it searches with the es s so then there's a little trick we can do which is called um we go here we click class meta and then in class meta you want to do what is it verbose name plural and then you just say searches like this go back it's going to be searches so models is kind of like a method they're methods or what like they're kind of like static methods that you can use from model databases it's a models are like what's in your database you can think of it like an Excel spreadsheet okay yeah so this searches that I just put here it's a column in Excel spreadsheet called searches oh okay I see it's this is actually populating the this is a really good thing that you just brought up so we can actually show it visually right so we can actually model our database um code Daddy's list database right searches and then what was the other field we put in there you remember um search and what else created yep so there are two things that go in there so this sheet is going to be called like SE so this is like the search database and it contains searches and it contains when it was created right so for example a search might be like Ping Pong and then it'll store and say like it was created on August 7th 2019 and a time and then the specific time right whatever time at down to the second down to the nanc like it goes crazy yeah so that's how you do searches and you got created and and every time somebody like makes a query it'll get stored in okay um few things when I add in something here blah blah and if I hit enter you see it says search add it successfully so I go here and searches it says search object one you click into it and it tells you what that object contains right oh wow it even has these breadcrumbs like searches and then when I click into this it goes deeper search object like right there so these called breadcrumbs so what we want to do is we don't like where it a search object we want to we want it to just show us what that is in English skip a directory or something yeah so I can I'm going to do this and I'm going to say return um what format self. search okay let's see if that does the trick there we go okay so I'm just saying whatever the search was created like return the search field of it and then it goes okay got you oh you're returning the string of the search yes instead of the actual where it was contained yep instead of like it's saying some weird thing like object how's the chat going bro like keep me up tell me what's going on is anybody asking questions like what's happening um what language is acquire to be a web developer uh Python and jango's enough yeah I just want to know General like yeah there not not too too much I've been answering the small ones okay cool yeah nothing's going on chat okay not really cool so this okay so this is what's creating that string now that is looking good um the next thing we want to do is let's add wait what should we do on the next thing oh yeah let's uh render the front end now let's the basic template that we made remember we made the base this thing so let's render this so now it should render testing to see if this works so we'll go to views it's saying it's going to render it and then our URLs are looking pretty good so let's give it a try now nope that's not working views um I want to do include and then how do you yeah so I want to I want to say something like this from my app import views and then I want to say if the path is this then I want you to include the URLs from my app. URLs like that I think that should work there you go so we're saying if the path is like empty just refer to the URL mapping that I did in my my app uh do/ urls.py so now anytime I go to this so here's how it works right when I go to this empty thing it goes to this View and it goes oh the path matched is empty so then run the home function from views so now let's go to home and home says render the base HTML and base HTML is this mhm okay so that's how would I if I had to draw draw it you want draw on whiteboard yeah I think so it's uh pretty simple really I mean you used to basically like the very basic idea of a web framework is just you specify your URLs right and then well specify your model your data first like what kind of data you want and how it's going to be and then you have your URLs and then the URLs just go to um some code and that code renders some front end stuff like HTML JavaScript CSS whatever you need yeah so URL to code to frend so basically like URL to code and then something happens and then front end Y and that code calls a front end code which you like display some HTML but like you can like oh you go to this URL run this code do this stuff call these libraries oh and then display all this stuff yep and then that's really it you're just like a website just consists of a bunch of URLs right so that's kind of makes sense start there so now this is random in that's pretty good okay what what other functionality should we add now let's compare to this should we add more of the front end um yeah let's start with that we started well you started with your todo list app um okay so let's start with the front end right yeah yeah the to list app stuff there is no todo list app there's no todo list app there it's just Craigslist app there's no todo list app okay yeah yeah so we're pretty much going to be doing it uh so now we're going to just build out the front end of this app so let's go ahead and do that okay so you're going to need uh static folder okay uh which contains your CSS and then you're you're going to need some front end stuff in your index and in your search all right so let's create our static folder now and we're going to have this stylesheet in there and your static if you notice it has to be created at your root directory okay so we're going to create static for ourselves in that root directory like that that and inside of the static we'll add another directory call CSS and then inside of here we'll have a stylesheet and it's going to be called style okay and I'm going to go ahead and steal my stylesheet because otherwise this tutorial will literally take 20 days okay I'll explain some of this stuff uh but yeah other stuff is actually not that necessary for you to know there's actually you don't even have to do a lot you actually can pretty much leave your style sheet empty as of now okay like I'll actually say for now you could if you're following this tutorial you kind of leave your app stylesheet empty so as we're building it I'm just going to leave it empty as of now oh and then one thing I always kind of do this always like sync your project with GitHub so I'm just going to do it you can follow along you don't have to like do everything but you should do some of it okay so I'm going to create a GE ignore file first this is important get ignore I'll add an idea in here so it removes any jet brain stuff and then I'll write Python and then I will hit generate so now it won't won't add any like dumb stuff to my git I'll go create a GitHub repository repository new new and uh what should we call it code Daddy's list mhm like that cool I'll initialize this repository with the read me and we'll do create cool now I will go like that I'll say get remote first I got to do get in net huh what the hell I had that's weird I had xcode an update or something okay this is super annoying if you keep tapping enter really fast and then it asks for a yes or no and if you miss it then you got to start all over again this is fun if you get all the way to the end with the spaces then it kicks you out yeah because knows you were trying to skip it fast so you have to hit enter oh my goodness yeah so if you're watching this in replay just skip this part probably There Goes My monetization there we go type print to print anything else by typing agree you are agreeing great agreed okay get in it there there we go see how easy that was uh if your git doesn't look that cool like mine does it's because you're on the poor version um you have to get zsh zsh is free so you can get zsh but if you're on Windows you're going to not be able to get it which most of you are so um Windows command line sucks it's pure garbage uh throw your Windows laptop out get a Mac uh you're I think they now updated it you're going to have so much no it still sucks really it's garbage pure garbage unless you're a professional developer even then it's going to give you a lot of pain so just throw your Windows computer out make your life easier or learn how to use vagrant and then you'll be in a much better position okay learn vagrant um it'll help you but uh in between answer use baboon like get a good command line for Windows and then you have a chance okay otherwise every tutorial you're going to try to follow you're going to have so much trouble you're not going to be able to follow so that's why I say that all right let's continue so we did get a knit and now we want to make sure that let's see what's happening here okay so idea should actually be ignored like this should be being ignored so now I'm going to try again yeah now the idea isn't showing up now only the good stuff is showing up great so I'm going to do get add. get commit initial commit and then we will do git pull or git remote add origin and I will paste the URL here's the URL okay so now if I do get remote get remote V you will see that the remote the repository is linked the one that we just created remember so now it's linked right now it's empty right once I push the code all of my code should be here that's in the code Daddy's list right now D this is so annoying stop showing me this stupid error okay get add nothing is being blocked right oh dude AR command is being kind of blocked yeah I guess they are on the bottom on the bottom right a bit can we move this on OBS like a little bit up or or make it smaller maybe yeah do we know how to do that yeah oh we should have done that from the beginning then there make sure it still looks good whenever okay get so that's looking good now what we want to do is uh get push get pull origin Master still probably getting blocked there refusing to merge unrelated histories okay how about get push it's giving me a problem with uh basically this readme.md which is almost empty so I can literally go and delete this I don't I don't need this right now okay get push origin Master get push I'll for force the issue get push Force origin master and now when I refresh all of my code should be here just like that now I'll create a read me as well and all it'll say is this is a let's do that because it's a markdown file this is a Craigslist clone called code Daddy's list okay now we'll add it say add read me get push origin master so now when I refresh this you will see the readme file get rendered here soon there it is says this is a Craigslist clone call code that is list okay I don't know why I didn't register it as markdown but whatever I don't care all right so let's go back to what we were building what part should we add now Frankie you tell me so we said just uh frun and things right um all right uh maybe the the B the top or maybe we can start getting images so start with the banner yeah okay so we'll start with the banner did you shift something over dude there's like a black bar at the bottom block that's blocking all the commands I don't know if that was there before huh there's like a black bar at the bottom so like it doesn't matter what happens to the webcam but it's blocking all the commands that you're typing in cuz it's always poping from the bottom line yeah even if you go full screen I don't know if it's a I don't know what Aaron is talking about dude this is YouTube yeah this is how this is how it looks on YouTube always there's a little black bar at the bottom there dude there's no black bar there got you know what I'm talking I never Ed full screen yeah it was a scale of the thing okay all right good um cool so let's add this nav bar yet yeah okay okay where do we go so what's better in your opinion like um cuz we do add Min and Max values all of these things right we add them to the search is it EAS like what what do you like preferably yourself um to do all of these things all these um methods and call backs that get the m and max value or actually start doing the the visual stuff first CU you know sometimes you start doing all the functionalities and then you get wrapped up in that and then you get a little bit confused when adding the visual parts of it right like what do you do I personally something still getting cut off cut off y look it's cutting off right there on the screen so it's blocking all the commands I don't know what's going on but all the yeah see it's cutting off like right on that word it's getting cut off like right up here right I know why because we have it zoomed in on OBS oh yeah let's zoom out then so so what I can do is just move the screen oh cuz they don't need the top they don't need the top menu bar do they oh yeah a lot of the bottom is getting cut out a lot but the black bar is still there now it should be better should be no now it's going to be completely better yeah you'll see yeah it'll come up in like a few seconds yep okay so yeah that's a good question my answer to that to be honest and you might have to come here a little bit cuz now we're right you're not you're you're gonna cut off so my answer to that is I generally like to do the backend stuff first I hate the front end because like okay think about this right on front end you're putting like a pretty button and then you're trying to change colors for like eight hours yeah true right like that's you're not making that much actual progress whereas on the back end you're like actually making all the progress like that's where all the function out so I like to just do the back end and then front end like you can do it anytime that's like the easy part and then start um that's not real development or whatever for end developers is it going to get triggered yeah I don't care there should um that's easy work okay so I just hire out front developer from upor sounds fun okay so we got so let's build out the but I want to build like the front end so people can see it yeah you everybody's watching it cuz that's they'll find it cool so let's build out like basic front end functionality here all right so in our base. HTML what we want to add is uh the materialized theme okay so I'm going to I'm going to add that in okay so I'm going to basically copy a lot of this code like you need static files you need load static so that that stuff just does some basic stuff I'll go here that stuff just does some basic stuff got it yep we're going to call it uh code Daddy's list okay so a lot of these commands kind of just like come these are boiler plates I am here I'm linking to my stylesheet which is here here I'm adding materialize um CSS so materialize is pretty cool materialize okay materialize CSS so when you do get started it'll tell you the CDN code that you need to write okay the CDN code is this code right here okay you know materialize does very um KY said it was uh like the CSS of this is what gives the style I see it's like there's some like precoded boiler plate Styles you can use and then you see how it looks like this ugly as yeah yeah once you have it style the materialize it won't look like this anymore you you can add cooler stuff and you don't have to build things from scratch you know I hate building things from scratch like library of CSS type of thing right it's just like somebody spent a lot of time writing CSS and like stored it as a library and then made function and stuff like easier for you to call wow yeah that's one of the big problems um beginners have that they try to code everything from Scrat they don't use libraries oh not just beginners dude a lot of developers do this like yeah like CSS like how long does it take to remember all the little syntax and if you're out by one little space and this and that and then you have to remember like the arbitrary name of the of the field and then it's like oh was it character size or Google your life away that way character hyphen size or was it character dot size their character space that like what or like you waste all this time for nothing and then it's just useless uh Ginger Beer by the way guys yeah plus there's like five five ways of doing the same thing so it's like it's crazy on CSS it's the stupidest thing I think this is why most developers are not actually good even when they're good cuz they're doing stuff like I was I'm I built better apps some of my like mentors who I was paying and they had 35 years of experience in coding and they were fast as they were amazing but the reason why I built better at things is I just used libraries like I just use better resources whereas they kind of got off on the fact that they could build it from scratch and like write the algorithm for the CSS and I'm like it feel smart yeah or just use flex box you know you could get a PhD degree in math and like figuring out how the flex like you know remember we were talking about how the sizing works of the images or you just use flex box yeah and use these libraries because then actually allows you to be like I never use my like don't use your brain when you're coding like unless you absolutely have to like copy paste stack Overflow it like literally stack Overflow H um obviously you know there's a joke it says there like beginners copy paste or something like that and then they're like pros know what to copy paste and where to paste it you know what to copy and where to paste it I see so you still have to be smart in like where you're copy pasting it and how it's working but I don't use my brain power until it's a new problem I'm solving I don't like to use my brain power for just random stuff so like all of this stuff like front like this what we're going to be building right now most of it it's like okay I have a design in mind that kind of looks pretty and I just want to move on follow it and then move on and then where I really want to think and problem solve is where there unique things like the web scraping part you actually problem solve M outside of that you don't need to keep problem solve everything from scratch so there we have it these are our stylesheets that we're going to be needing for this um let's just run server for now and see what's happening oh real quick one guy is Styles Sheet's working one guy's asking how long does it take to land your first client as a web developer if you just start today um class did you do it I did it I I got my first client in three months three months yeah three month but you were busting your ass off yeah so for normal people you have to do like 10 hours of coding every day for 6 months and maybe you'll get a client I just did 15 to 18 hours a day for every day day for a really long time yeah so that helped me improve a lot faster you know like oh okay guys let's move on to the next portion what's the portion we should move on to now all right add in the bar right okay cool let's add in that nav bar so luckily the Navar code kind of comes with this uh app I'm just going to copy paste it from here this is the Navar code it's just a nav tag so there's a container class and then a nav wrapper class okay so they're these are two classes we're using and then uh what this is saying is that write code Daddy's list the URL the link is just home the link is root you know okay perfect um on mobile move it right and then just write home on the right hand side and then the link should just take you to the Home Route cool isn't that a little bit of JavaScript the or is that just um HTML that's HTML the a hre all HTML I see so there it is when I click it takes me to the homepage to click it the reason why I added container here guys is because whoops if I remove this right I have it like this when it's not in a container you you see how it's just wide container just contains everything you want to put everything in a container because you want to be able to manage it later so it's more interactive that way like it makes it interactive uh well it's still interactive it's not that it's not interactive you click size of the window or no it's just all a container does is like this is the container and now everything that goes will go within here like so you can be like oh why want this container to a little bit wider I want this container yeah you could make the container wider you can like if everything's in a container you you have control over that container you don't have control over like this every single screen what not yep are we going to upload the source code of this app on GitHub it's already up there right we going to make it public um well it or okay so guys here's the ACT here's the if you can't wait for the source code here's the one that's already up there so if you go to Craigslist scraper it's here but this one you're going to have trouble making it work but yeah go ahead and use this one if you want if you can't wait um this is the link just look at the link in the URL up there that should be fine okay he's probably listening he you heard it but just uh wait for us to make this one that we're working on right now cuz that's going to be the clean one wait somebody already started oh steuart Stuart is Stuart is on it hello man Uganda Okay cool so we got this now what we want to do is we want to add uh you want to add search bars and stuff like that mhm okay so we're going to add search bars and stuff like that okay so you got a container um okay we got this container right here this container should really be just all the so like this code should actually be better the container should just be at the top right there and then everything else should should just be underneath it and then this should just not have the container like this so basically the change we're going to make to our app right now is we're just going to remove this container and we're going to add one container right here okay whoops like that okay uh let's just double check this is working oh that does not look like it's working bad idea let's add this container here anyway and we're probably going to have to remove this container at the top yep boom let's remove that for now boom there we go back to back to where we were guys okay so there we go now okay so I'm going to copy paste this part and then I'll explain it as I go okay what we're trying to do here is I get um I'll put one just so you can get the idea okay so I wanted to write what do you want to search for on code Daddy's list we don't need that line that says uh testing to see if this works we're going to need we have body right there we have body ending here why is this complaining stop complaining what does it say element div is not closed okay there we go cool refresh okay that's gone so all we've done is we've added this and then we've added this okay now for this what we're using is something called flexbox flexbox allows you to add images where they don't get like here we'll go to code pen io on our Flex box uh just so you guys can see the demo of how flexbox works you see how it says 1 2 3 4 5 6 but here's what's cool about flexbox watch when I close it up it's like automatically changing its size automatically and when I close it more automatically automatically it's figuring it out on a mobile device nice and it's keeping each thing equally separated automatically so instead of having to do some complex math Flex box just makes it super easy yeah like literally coding this yourself would probably take days and weeks to get it all correct right so just use it Cy daddy one dad 2 D3 okay so there you have it right and now when we're doing this it's automatically changing everything is working now what's what would happen normally here is like these will be images or whatever so if you're having images you want them to be in a flex box contained not super messy all over the place because if we don't have any styling and we start adding images and so Flex is a container flexbot is a container yeah it's kind of like a container yeah it contains and then it makes it just it understands how bullet points work and images work and things like that yeah so let's get out of there so that's why we're using Flex box okay so what I've done here is this part right here right where it says div class row so for a flex box what you need is you always need one everything that's like in a row here this is one row then you can have another row so then every the second row will be like below this one okay who does it need much Cod yeah so we have one row and then in that row you want to put like how what's the what's the size of the thing that you want so you could have like S4 or you could do S12 and that'll change the size so if I go here it'll change the size of of it or if I go four it'll know what to do okay so like if you keep changing the size of it you could have like 10 images in a in in one row or if you change the size of it you could have only two images in a row because each image is going to be huge oh I see to that to the number that you're right so you want to make the column uh dep based on that right so I chose S4 what's happening over here is the following this is what I did so I wanted to get this I want to get this icon MH okay well how do I actually get this icon so when I go on are they going to probably get the URL of it or something components icons okay icons cool so it's like yeah I'm like how do I get these icons right if oh wow if I go to lightning or it's called flashcore on wow these guys had their own pictograms dude wow yep and uh when I do inspect here it kind of shows like what they did to bring it so they did um material icons medium icon demo same pams are so important in design like hugely I remember in my design class we had to just Google search so many pictograms like oh this for that this for that it's crazy that this already has it they just have the pictogram SL like icons like built in and you can just use them so for example I can just pop this icon in go to the code and hit refresh and like it's there right so that's the that's a really cool thing about it which which is awesome you can just use but these are materialized icons so I don't even have to do anything extra I don't have to go to like um there's there's this website for icons for front end you don't have to go there you just get them from here and then what I did is I gave that icon a color so I gave it the specific color that's why it looks like this instead of black instead of black right and then it's called flash on okay and then I wrote some copy FSL web scraper Craigslist web scraper and then I wrote some more copyright underneath it that says scrape away right here with a beautiful guey cool all right so now I'm going to go ahead and I'm going to copy one more guy from my app that I created earlier okay filter your searches we built in functionality filter based on pricing and then I'm going to copy one more guy oh you might want to oh that's not that bad actually you kind of see everything it's getting cut off a tiny bit but you can still see all the code okay that's that's fine yeah just please make sure that it's it's good if you zoom out a little bit it'd be better but they can still see everything just make sure it's good if it's not good then let me know all right then zoom out cuz like it's half of the top Line's getting chopped off but I'm not coding there right so it's yeah so you can see the Daddy's list directory and that's where it cuts off so yeah but I'm not touching most stuff up there so it's okay I'm I'm fine cuz otherwise I would have I can't zoom out anymore of the screen so something has to give like the bottom has to give or the top has to give and I realize bottom is more important most of the times okay so we got so I added all of those in now let's refresh we got all the icons and everything cool so now what we need is the search bar okay um another thing you want to do guys is the following we also need this uh script by the way and right before body tag right cool materialized script yep and then we want to put everything in a container starting from here so I'm going to go here and I'll say div say class equals container boom paste boom there we go okay all right and um now what I want to do is I want to turn B base HTML into something we can keep using in all our other templates so we want to create like a base. HTML and then we want to be able to just use it everywhere so we're going to create this thing called block content and end block content so we don't have to uh it's according to like the dry principle do not repeat yourself there okay so I'm going to go in templates we will create another directory should be called my app I guess and then inside this directory we'll create a HTML file and it'll be called new search. HTML so every time you search something it's going to open up the base HTML um base HTML is going to be the home homeage and then you're going to and then if you create a new search that then the new search page is going to open it up there yeah open up somewhere else yep but because ba even the new search page should inherit a lot from base HTML we're going to we're going to do something in a little bit okay so we have the new search. HTML now we want to be able to create a view for it so then we can actually go to it at some point so you see how the container brought everything in in that was why we did it okay so let's go to views Define what did we call it in this app new search search so request and then we'll say return okay and uh we'll say my app Slash new search okay now we just need to create a URL for it going to go here and I'll say if anybody goes to new search s like this this yes yeah you're getting it right awesome I love it we're going to say go to the new search function that we created and we're going to give it a name of new search okay so now if I go to Slash new search is it being rendered Bic blank yep a blank page right blank bulk okay let's refresh it's all here so what we want to do instead is we want to inherit from uh ex we want to extend base. HTML new search and then outside of that we want to say new search okay so now you're going to see something cool happen where the hell is where the hell does it say new search oh yep we're going to create um we're going to do start or wait what is it start block content or block content like that and then we're going to say end block and we're going to put it in there that's the templating stuff right and now boom okay so you know how in the base we said block and a block mhm so what's happening is it's inheriting everything from the base and anything that goes in between here it's added on search right so for example if I show you the code it's pretty much going to be the same code except for whatever is in sandwich in between block content and block content that that's where the new everything in the new search is going to appear to keep the base HTML template going yep so okay now if I do view page Source probably have to come more this way if I go into page Source you see how the code is the same as base HTML yeah even the script part is here the only thing that's new is this oh that's because of this sandwich right here okay okay so that is looking great our new search template is working but now what we want to do is we want to create like a form so people should be able to type stuff in there and then hit submit on it action is where once you submit that form what URL it takes you to so we want to do is like how does it work URL new search like this yeah got be string like that I think there okay and then um we got to have a method and the method is going to be post okay when you do forms you want to do not get method but post methods um we will have some input and the input will say uh type text and then we'll say name is search and then we'll say Val uh value search something like that actually we just need placeholder I think okay so now search with the placeholder you see the placeholder yeah so search is a placeholder I see yep I don't need this guy anymore I can just have this but now we need a button okay so we are going to do input type submit okay and then uh we'll give it a name of submit there so csrf verification failed all that means is we just need to add a csrf token in Jango security feature and then as soon as you add it this should go away okay okay hold on let's try again that's it you don't have to add a functionality to the button what the hell csrf token is missing interesting did you type it correctly it's lowercase with underscore right okay csrf or C csrf yeah csrf token hold on what um templates new search R token content it supposed to be is it supposed to be inside the form that's what I had earlier it still didn't work weird oh maybe I just need to like start the server again yeah that might be it there it's fixed so now it's sending okay now it's sending the actual post request I think what you can do is like you can go insect and you can go in network and I think if I hit submit it shows you new search like what was submitted preview you can do headers and it says it was a post request 200 it got sent correctly like if I change it to a get request and I hit it you know and I click it it'll show me like preview what it was it shows me what it was and then it says I probably have to refresh it or something but whatever but you get the idea right request remote address and then it tells me all this other information with it like if I did uh hello and I hit enter then you'll see not only will I get this but I'm sure that I will also get the value that was in that field search okay so I wrote hello right yeah I just got access to that hello it I see well so that's how you will pull this data out so by just putting a button on the actual form mhm by default if you like did you actually put the the method to submit it or you can just choose it to submit it yep you just choose it to submit it and HTML comes built in with that functionality Android it's so hard to make in oh dude you have to literally call does Android sucks yeah you have to literally call that method from the from the Java class from your Java classes that you made you know yeah we know it's insane sucks dick that's what it's pretty complex damn that that's painful dude that's why flutter exists oh we got to do some flutter stuff too at some point yeah what do you guys think about that okay so we got this we're just going to keep uh search functionality for now um what does this look like okay it's got a container right so that's probably why it looks like that sorry base HTML there's a container here and then it ends right here so I'm going to end the container here that way everything is wrapped inside of that container there you go looks better now okay so we have the search functionality we have the ugly submit button I'm sure we can get a better prettier button let's look oh my God these look juicy right yeah let's use these the ones we the one were using yeah just use that top one the CL with the cloud oh there we go yeah the airplane is actually pretty cool yeah like Craigslist throw it thanks materialize yeah W nice even goes with a let's just make sure that it's working as expected let's go Network hit this new search post oh wait ah there we go Fifi cool cool got it man that's nice send what if I did Flash on would that work hey nice I like that edding the little icons that's insane see because like the button you can like add stuff cuz it's the button is like a container itself it's like a little container how cool that's what it is it's just a box so you can put whatever you want inside love that okay so that's great what else do we need oh man I love damn What's Happening Here Cy man you theand yeah yeah it'll be recorded yeah I've already answer that guys just do me a favor guys our YouTube is dying for some reason I don't know what's happening it's sad as like here I'm going to pull up some social blade I don't know what the hell is happening guys like we're producing more content than we've ever had and YouTube is about to die look at this I have zero idea why we're producing so much content just so if you could just do us a favor please give it a like or share it or something but like we really need your help because YouTube is just choking us we're producing original content we're working our ass off to make really good cont content for you guys but YouTube just keeps choking us so if you could just like it and then share it that'd be awesome let's continue making this app I'm pumped it's app um okay materialize have any nicer uh search functionalities or whatever like a search box thing yeah or it's fine I guess it's it's not that bad unless it was like a little bit shorter maybe yeah it's not bad right it's fine um preloader preloader ooh when it's when it's searching pretty yeah but then how do I stop it when the result is found yeah but how I I I'll have to think about it okay guys but let's let's just focus on what we were working on what's collections that looks fun components and buttons all right so we have a good looking front end over here somebody just said they liked it right now thank you so much appreciate your face appreciate you in the face Europe and Africa buddy no okay thank you yeah that was great very informative okay so now we got this form Buton now what we need to do is when somebody types in should we just now get to the part where somebody types in spits back some kind of results or something yeah yeah we should do that so we got to start pumping it in the Craigslist right mm okay so let's create the front end for it too uh we'll just do the front end part right now so let's go to how did we okay all right so let's go into views and what we're going to oh whoops wrong views views what we'll do is we'll just pull data out of the search bar for now so whatever you put in the search bar let's pull that out okay okay so what we'll do test yeah so we'll say new search is equal to oh let's not call it the function name cuz it could get pretty recursive up yeah yeah yeah okay search ter request. poost doget new search right oh no just search I think it was just search right yep so what we're doing is we're pulling out what happens when I go like this thank you Frankie so we're going here and we're getting this okay yeah because we named it search so this is request because it's a request EST M and then we do Post cuz it's a post request um yeah when you hit the button right post request so it's a post request right that's why we do post and then we do do get and then we're like search okay this get is not to be confused with the post method and get method this is get as in Python dictionary get cuz request app post returns diction that's confusing request. post. getet yep it confused me too until I just taught it that's what I like teaching really yes because you don't really like actually think about it no well I know for httv requests it's always all caps so I when I see get I just it's just get when I see all caps then I think HTML yeah I mean HTTP um makes sense okay but yeah good point all right so we're getting this so I'll do print search just so we can see it in the console if somebody types it in I'll do this and submit and few few right python tutor hit submit python tutor so we're getting access to it now we're going to send this to our front end okay so I call this variable stuff for front end oh wow I make it real easy so we're going to call it uh we're going to say search was the variable search okay later we're going to be adding more stuff to it so let me just make the dictionary look like this okay and then we're going to send this to our front end so we'll say cont uh this is going to be our context dictionary so I'm going to say stuff for front end then we'll I'm going to go into new search and um I'll just say that oh this form should be rendered in base this should this should be getting rendered in bass I'm pretty sure because bass needs to have the search functionality you know otherwise it's like silly yeah you know what I mean yeah the original the original web page needs to have the the search for minute yep and so now what we're going to do is where was it before it was in new search HTML yeah yeah which so like you could never get there without searching in the first place right you would have to like hardcode type in new search at the top which won't make much sense okay so we're going to say um what are we going to say oh yes so we have access to that variable so let's just print it out search and now when I go here and I hit refresh and I do if I go back to the homepage and I go hello out there yeah it's like actually writing it into HTML so now what I'll do is I will add a H2 here like this I'll add another H2 right there Prett and now it look big and now what I'll do is style text align Center so now it's going to be Center and now another thing I want to do is uh if I'm writing like this or whatever right if I'm doing python to it looks silly right so what I want to do is pass it the filter called title so then what that does is that no matter how you write it it'll title it it just forces capitalization of the every word like that right that's it I'll still do it okay sexy this is why it's so jacked this is why like we're so fast dude who's making apps this fast nobody pretty apps by the way me me three years ago broke who is web developer here oh okay Yi since you like python a lot I'm going to make it a Youtube Thousand playbacks dang nice dude if we hit thousand in the live stream every time playbacks that's it's pretty good it's really good and then concurrent viewers I guess we can solve this problem too at some point cuz if we just keep coding people are just going to keep coming in yep you know um oh I guess we could have told our p uh Instagram to like swipe up or something who cares all right let's go all right all right tiny Rick okay I mean way up there any Ricky Morty fans out there drop a comment um okay so now what we're going to be doing is um I'm just going to make a simple card for you guys right now so you guys can get the idea of what we're about to do okay um a lot of this code before you start freaking out and start panicking this is coming from a little bit of here okay what we wanted to do is we wanted to make like when we get the results back we wanted to get them in like card format so like the Craigslist picture could show up here and then the text could show up right underneath it and then the link could show up right underneath that you that would look really really cool I see that's kind of what we wanted to do so like a grid of cards type of thing yeah so that's kind of what that's all we're going to do right now we're just going to like add that grid of cards that's it okay except nothing will be all of these will be you know just right now we'll have it be like this okay say test and everything will link just back to the homepage for now and then it'll be like test price okay so if we go back hit refresh oops okay so we don't have an image but if we were to add another one of these guys and then another one of these guys this is how it's looking right now right well that's because we don't have a flex box right no we don't have row yet oh Row in the so we need a row above this class equals row okay okay here we go so in rows you don't have to specify like in columns as for rows you wouldn't have to do that what's up you know in columns you use S4 so rows you don't do that hold on let me just see what's happening right now something is awfully wrong okay so div div class card card image diff CL card content content okay so now this needs to end right there yeah right there you go we're missing a closing tag for almost all of them I think right probably there yeah that would make sense yeah that makes a lot of sense there there we go so this is what it's going to look like we're pretty close um we can add some dummy images in so let's just go get a puppy image and go here we'll grab this I'm going to do copy image address so if I do paste it should take me directly to it URL know that directly the URL that's cool right copy image address I was always like oh open image a new tab I used to do that too yeah I used to do that too thanks Chrome yep so we going to go here paste it and delete this then copy this and then paste this and delete this go here go here paste enter okay hey puppy trafficking I'll do dog we'll do puppy so it looks like we actually searched it up even though we didn't okay now we actually need to add the real functionality we've added the front end and let's add uh functionality um for the code for the beautiful Soup part of it now so we're going to go views I'm going to go right here from Jango from bs4 import beautiful soup so what's cool about pie charm is it recognizes what the hell is giving me an error so it's not even so it's not even recognizing the module so I can just hold option hit enter and it tells me it's like you want to install it I'll be like cool install it pie charm okay just got an error that's pretty good that's pretty good okay no module named bs4 all right so let's go GS so I'm going to do pip install bs4 so clearly there's a model module L bs4 beautiful sup yep um I'm also going to need requests Library so I'm going to do import requests and it doesn't know what it is so I'm going to do install request please don't give me errors okay good installed okay great so now we have a bunch of things installed I'm going to create pip freeze requirements.txt so I just created a requirements file right here that has all my dependencies that I just installed okay okay so now I'm going to just do get add I'm going to do get commit and I'll say add front end and requirements file requirements and then I'll do get push origin master so now this code is here you guys can go to this code at any time and you know see my requirements file that we just built you guys can go and see the templates the what we're doing in here base HTML everything okay okay making good progress so far guys beautiful man we're so generous yeah okay so let's add um let's add some beautiful Su functionality now so I'll I'll do what was the URL for the Craigslist thing that we had in the other thing oh don't actually need this like query or something it had like triple letters and weird stuff yeah just copy paste it okay so so let's build it out guys so here's okay so if I go to homepage of Craigslist this is what it looks like if I type in Python tutor it builds out this query if I remove this from this amp perent argument yeah it still works and if I actually remove so this is this is like a really tricky part but I'm making your life a lot easier we're making your life a lot easier because we went through this pain if I actually even removed this BBB part um and I just hit slash and I hit enter now it's still works okay so that's the base URL we're actually going to use now you're not going to use this Los angeles. craigslist.org one it's obviously going to be for you whatever is local to you MH okay from us Los Angeles is local so that's why by default by default it's Los Angeles here okay for you guys it's not going to be that so build it out how it would be for you okay so here's what I'm going to do I'm going to call it like base URL or something I'll paste it here base Craigslist URL I guess I'll call it and I'm going to remove the query because query can change at any time so I'll do this so then it's dynamically generated okay and now we're going to do what is it data is equal to request.get what the hell is it search right the search H we're not going to worry about Min and Max price right now it's search right are you trying to get the yeah yeah just want to get the just want to get yeah so we have to I guess build it out oh you already have search but right now let's just do python tutor so let's go python tutor and I'll hit enter so let's just copy what we have here and paste it and we'll call this response okay then we'll have uh data is equal to response. text text and then I'm just going to do print data like so okay and now let's go here let's hit refresh oh because it's probably not request do oh it's requests.get because we're using the library so there we got we got the HTML CSS as you guys can see here cool so it automatically updates your code you don't have to refreshing it so so look at this okay you see where it says IV League tutor exclamation mark calculus algebra search IV League tutor see that so it's doing it's finding it for it's so we're getting that data right now yeah it takes a search term and then it pops it into this that URL that we did up here it just pops it into the query and then it goes to that URL which is that Craigslist URL and then it's just getting all the HTML from that page that has all the python TS and it just dumps the HTML out and then from there we can get all the we get data and then we can go to we can go further into further links stuff from that htmo cuz everything's listed there oh man it's so good to be a programmer bro like so crazy do people even know how to do this stuff apparently not all right so we will now we're going to so I hardcoded this query except now we're going to build we're going to use the dynamic one that we have here okay so we'll build it okay so I'll I'll just call it final URL I guess and what it's going to be is it's going to be the base URL and also guys this is this is kind of a cool thing so you should get it to um it is quote plus yeah from request. compat import quote plus what does that do again I forgot already from request. compat import quote plus so what this actually does is if you write something like this oh yeah yeah I remember but keep explaining it it'll it'll put automatically plus signs in there yeah yeah so it turns into a URL because if I have this here right and I do python tutor you see how it like automatically puts a percent 20 yeah that's you want something to build that for you so when we get it from the search term like when somebody types in something like python tutor here you want this effectively to turn into uh percent 20 yeah and quote plus will automatically handle handle like all these cases for you yeah so don't man manually go into the string and search for all spaces and then input a percent 20 because that's just silly and there's a lot more cases than that right so if I do print quote plus search you'll see what happens I'll unprint this we'll do like that or wait that wouldn't work we'll do python tutor on the loose Scrolls see that there you go python tutor on the loose and then there's like probably not dots right because that's not part of well actually I don't know how it would handle it I'm curious you see so it's like turning it into something that'll work as a actual you know what I mean like look right it's will actually work so that's the beauty of quote plus and the final URL is going to be we're just going to do um we can just use a join method okay url. oh yeah so we're just going to use string uh concatenation a little bit here and I'm going to say this comma oh yeah this is going to be base craigslist. format then I'm going to do quote plus search okay the print final URL so now you're going to see what it does are you on on it already yes so the search will be that so it concatenates both the URL the base URL link and what you searched yeah that's what those little brackets if you put in a string I did not know you knew this much bro get your ass over smarter than he looks you know you know you're faster than him and H wasn't picking this up as fast right yeah yeah yeah but I was also 18 so all right so let's um so now it's a clickable link that's how accurate it is okay so we're getting our final URL for so now to response we don't need to send this we just give response our final URL okay then response will get that data and then we can print it out which is just HTML and then we're free to scrape scrape that data for the images for the prices the text everything yep I see for every single one so when you scrape is it like do you actually have to import something else to scrape or is it just like um kind of um like you're looking for keywords and then like using the limiters to get out of um to take off the things that you don't need you know what I mean is it just kind you kind of get the general idea yeah beautiful soup um what it does is it just takes a fat web page of just raw HTML and then it just creates an object so you can go into HTML and just be like oh find this find this tag with this name boom spit out the text find this find this image tag with this class name boom just print the image out so like beautiful soup takes just a bunch of HTML in and then you can dig through it using beautiful soup you could do it by hand but why would you do that yeah yeah you have to like parse you have to like parse the HTM it's just like just don't do it yeah cool yeah just don't just don't do it just don't do itank it's like Nike but better so one basic functionality of a database that I'll like Nike but better yeah so so basically I'll add basic functionality of um the database so you can actually go like oh cool we're using a database so I'll say from import models okay and then uh we'll just do here every time the new search happens we'll do models. search. objects. create and then we'll create it search is equal to search okay so what it's okay so what it's doing is it's going to this models here mhm it's creating a search object okay where the argument is search and this search is what's going to be fed into that object it creates an object of search yep and then puts the search inside the yep that's it that's it so now here's what's going to happen okay if I do balloon I'm going to do puppy I'm going to do Frankie and now when I go to 127 da da da da SL admin all searches all of it is here so sexy taada the power of a database yeah and now you can do like autocomplete and stuff based on what most popular search is cuz you have all this data available to you almost 1,200 this is good stuff man I want to start streaming 24 hours a day while sleeping like literally nobody can keep up unless you're watching it 24 hours oh man we'll be creating one app a day in the gym in the gym while we're at the gym okay so yeah that's looking good don't need this anymore all right now what we need to do is we need to now start doing stuff with the data that we're actually getting okay mhm all right so so let's see here this we inspect we select this tool over here zoom in so everybody can see this tool is called select an element in the page to inspect it please use Chrome never use Safari everybody very important click hover and it tells us that this is actually result title class okay and um that's why it's capitalized like that see that result title so now yeah I have to first of all create a soup object I'm going to do soup is equal to beautiful soup I'm going to feed it the data and I will say features is equal to html. parser yeah cool all that's doing is just parsing the HTML data yeah into this object yep a beautiful Zoop object which kind of just like encap encapsulates all the HTML data into its TX so it's like in a bunch of like nested Parts in code though instead of just raw a raw string of HTML yeah it spits it into it spits it into the HTML parser and then yeah just creates a beautiful soup object I see to easily access everything so I'll go soup. findall where it's an a tag and then the class is actually result hyphen title so a class is a a is link a is link so I'm saying find all the links where the classes result title so find all of that and now I'll do print post titles okay let's go and go python tutor this is crazy like doing everything in first try now it's like going ham making it look way too easy this sh that that took us like five hours to figure out bro yeah but now that we have the that we have the code to like help reference code and also just like I we've done it before yeah like I've solved this problem before cuz it took so freaking long to figure out the patterns cuz you got to like study the patterns like drilling down in that is like tricky and that was our first time using materialize and everything so like it take took a lot of yeah so we're not actually this good like the first time around no we're pretty good but like but yeah the second time around the second but this is just like it's even faster now yeah ludicrously fast not as much Google now yeah so now what I can do is we're getting the title so now what I'll do is I'll say print out the zeroth one okay so it's printing out only one of the items from that list so what we're getting back is actually a list of tags okay so I'm saying just print out one of them the first one that you get so you can see we're getting here result title this is the data ID link this is the link okay cool yep so we're trying to get the so so we know this is the title right here okay how do how do we get it well I think we can just do text. text because it's just a text do text just picks out everything between the text there is there it is yep okay which is really where it's a statistics tutor Excel SPS data or python undergrad grad level that's that yep so this is how we find all the titles then we'll do something similar to get uh what else is there so result title the link right uh well the link is easy because I think we literally have access to the link so for example if I undid this stuff and we oh yeah it's in the href right you can just call like get href or something so yeah we can do do get href like that so if I refresh this and I go here it's right there so I can click it ding ding it'll take me to that post yeah so we have access to the title and the link cool yep that's easy um so there's result info which is another thing that we need cuz we need the info of okay we also need access to the result row because row yeah result row what is that that's uh that's going to have I think the images and stuff in there little Gallery empty okay let's go here result okay so we're going to need result row um okay so I'm not going to do a lot of the filtering crap because that's where it gets like really complex and for this live stream I just want to keep it like simpler because otherwise we're going to be here till 2 a.m. explaining what we did cuz it gets pretty involved so we're going to just make the simpler version of the app and got it the final version you can get it from um okay so we also need access to the listing so where else do we use it yeah yeah so we need access to the entire listing so then we can go through it and get result title and all that stuff okay yeah this is this is the most important part remember where we had to go through all of it at the same time mhm and that Epiphany we kind of understood it like a lot later like hours and hours later so but just to put it in simple terms when we're cing through this we want to go through it like the entire thing at the same time mhm hopefully that that probably doesn't make that much sense to people but that's okay just take our word for it you want the you want the project on your portfolio or not you shut up and cod it all right so okay here are the post listings now what you'll be able to do is you'll be able to get the result of a listing okay so if I did post listings of zero same's here and you'll be able to get the URL and you will be able to get the price okay I'll explain this um in just a second and you'll also be able to get the post text oh man the image ID part image ID should be okay but we're not going to do we're not going to do any of that uh reject scraping no that's too much so you actually yeah new soup what the hell soup beautiful soup data HTM uh yeah why did you create a new soup object let's see oh yeah yeah yeah doing the Rex thing you don't need that anymore it was only if you didn't find the price if it didn't exist then we created a new soup object got the text and then yeah yeah yeah that hey bro let's scrap it hell yeah I think he meant to say let's scrape it this guy how fun not you DJ Harden yeah get the out of here yeah C in C++ or something yo Sam block him delete him from the chat bad this is a this is not a democracy no this is a monopoly yeah monop okay so um post listings of zero and you you you'll see what it all does okay yeah yeah yeah do print post title whoops you URL price okay MH so I'll type in ping pong here and you'll see what I mean okay look you got the title you got the URL man that's way too easy now the price and you got the price and you got the price dope okay all you need oh just so you know what it actually looks like on Craig list ping pong here see this is what it looks like the different search results is strange but whatever yeah we're not here to question it it's the will of Craigslist Gods yeah the Craigslist Gods Craig Craig himself yeah a will of Craig himself let us see what you got Greg show me what you got show me what you got all right so basically what we're doing guys is we're getting the post listing and then from the post listing I'm we're getting the post title the URL and the price okay because whatever we're getting the post listings from the result row result row contains the information of result title the link and the price see what I'm saying yeah okay now the Frankie yep free coding lesson man we're going to charge you five bucks later I know now the part that gets a little involved guys is the image right is the image part so um let's do that last let's do everything and make that last just have just leave the dummy image for now okay fine yeah and then like add it in because it fine cool you agree yeah got it all right so now that we get the post listings all we got to do is just like store that data send it to the front end Loop through it okay so let's just do that for now so we'll create a basically we're going to start um as we go through it we're going to start pending it to something okay so here's what what we're going to do we're going to create a thing called final postings which is going to be an empty list then I'll say for post in post listings final po uh basically I'm going to do is post title is equal to post. find so it's just going to be this line basically only difference is that is just going to say post okay this is going to say URL this is going to say price and um here it's going to say makes sense so I'm just going to Loop through each post and then I'm going to print out its text get its other thing not print out but like post title is going to be the title yeah you're storing all of this inside inside final yeah I'm in the dude you're really good how much have you coded couple of years um what the man why are you guys so nonchalant bro like you're good like you're good no little bit out of you you're good smarter than you look he's really good that's you guys need to like own it more like you guys need to go crazy cuz other people don't understand like when you say it like that everybody thinks oh you're you're an idiot that's what Aaron thinks well when you're like H yeah you know yeah c not that much like you it's like I think you're an idiot like you probably don't know that's why I never talked about coding with you in my whole life it's cuz if you if you know the basics of like a language you pretty much know right code all around you just have to like catch up to it yeah so it's dope okay so I'm going to delete all these cuz uh we don't need these anymore and then I'm just going to go here and I'm going to say um final postings do append post post title I think I created a tuple right so it's going to be a tuple you'll see why it's going to be a tuple of three right now post URL and then it's going to be like post price okay what the hell is happening he's good like what he's good what's he saying R it's just some dude named r p like just in time to watch it live these guys cuz these guys want me to flex on them you know like I didn't want to code I just wanted to give them some advice how do you make money but every but they just yeah how do they get but like they just really want me to flex on them so I'll Flex on them a freaking yeah and now I got my Vim like look at what I'm doing to okay all right so we have our final postings now in our stuff for front end we need to actually pass it like [Laughter] this oh my God oh wait I don't say it don't say it don't say it out loud no can't hear just just give up dude your ears don't dude your ears don't work all right so let's just do this I literally yelled it in his ear not even not even I did I only heard like it's it's much louder for him dude all right whatever so we got final postings um that's pretty good show me what you got man this stupid stuff is stuck in my head guys so now I'll go to the new search folder okay and what I'm going to do here is is uh pretty much right here for now I'm going to write a for Loop this going to look pretty ugly but it's going to be like four post in final postings okay then I'm going to have N4 like that and then I'm going to say post dot zero post. one post start two Bing Bang Boom easy done or yeah I guess you got to put it in tags good pra you actually don't have to right but good practice uh you kind of have to CU otherwise it's all going to be on one line look ugly you are right you're right okay there we go man everything is getting done in one try I'm loving this what's what epr are using to web to web to it don't worry about it there's no API we're beautiful scooping it I mean souping it beautiful scraping it all right so here we got boom all the posts yep all the uh the the title right the okay well that's not going to work yeah cuz there's no price yeah uh I got to write fix that code okay so tutors don't have a price right so basically we're going to say if post fine you just got to yeah make a check first p uh if if um post. yeah post. fine you don't need you don't need the do text get rid of the do text oh yeah good call Yeah so basically if it has a price because certain things don't have a price so if it has a price uh then do this otherwise price is equal to n/ a yeah or I mean should I say post price yeah so you don't actually have to put the L's you forgot the L no no you do oh I'm like you do oh yeah no no no you have to no good catch dude you're my God Basics dude no Basics no but but that's the but that's the thing dude Basics is where people don't have any intuition anyways let's try python tutor there we go na na na for any of them that don't have price which is all of them but if we do pingpong we'll have damnn bam b boom right d they're expensive way what ping pong tables yeah what seriously what like a car cuz the because the dude's giving his entire balcony plus a ping pong table plus the underground parking lot Jesus that he's selling an underground parking lot like what all kinds stuff and a balcony man I need an Advil um okay let's power through it boys almost there almost there almost there we should have some music man some like epidemic sound like legal don't worry don't put it now the these little Co coders freak out when you put on music so don't put it right now we're going to do it a little bit without the music right now he's the beat box Bo Frankie also knows how to beat box sometimes when I'm inspired enough you know what's cool about this what look dude it it can read pie charm and Jango I can hit play and it'll like run the code wow that's insane that's what I'm saying bro little the laptop little touch touch bar yeah dope you're a little touch bar what see how it's working boom see see how good it is python tutor okay there we go so now what we want to do what is this weird error I'm getting bro forget this 500 search I'm just going to stop this one cuz I wasn't getting any errors when I was running it from here uh Java tutor okay yeah that was a weird error cool so we're getting all this data to our front end which is what we needed so now all we do is we just have to render in a pretty way okay so we're going to write the same type of for Loop except now what we'll do is we'll go from here to here paste it okay or remove post zero post one right and what I'll do is for the link is going to be actual link of the post M that's in position one position zero position like post zero post one post two okay so this is going to be post. one okay that's the URL oh I see okay this is the source of the image we don't have the image right now so for image it's just going to be puppies for now they're hardcoded in again URL so this is going to be post. one again and then here is where the price is like that so the price is going to be post dot two and this since this is a title is going to be post. Z okay like that now another thing we need to do is we need to wrap it in a row so we're going to piss the row up here after the for Loop ends we're going to end the row div we can remove all of these lines here okay and that's it nice nice okay now what we want to do is some of their sizes change you see their sizes like some is like some are bigger some are smaller so what we kind of did is we kind of have like this crappy solution which is pretty much fix the height of the card and the card image so pretty much forget all of this stuff down here you don't need that but just take this stuff from up here we're going to take it we're going to go to our style.css and paste it in here okay and um this stuff doesn't just render right away so we need to actually do a hard refresh and all kinds of weird stuff need to stop running it o we're getting a weird error 304 huh you so it's finding it get is 200 but it's still not showing it so this is the thing with the Statics static websites like sometimes it just won't show you when you make a static change sometimes it just doesn't render until a lot later Thief uh pingpong all right I'm not going to worry about it too much right now because it should be working it isn't oh yeah our stylesheet yeah that was that was a I don't even know how we fixed that do you remember how we fixed that there was like a weird yeah it just took a while to didn't you like stop the server and start it again and then it updated or something right it to like stop and you got to start it and then it has to because I know the code is correct mhm but then it takes a while let's see if it updated right away no yeah it took like 20 minutes or something yeah the first time it took forever okay whatever that's that's not that important of a part agreed um so now we got to get images right for this the image part is the most complex it's the most complicated this is where web scraping this is where problems solving comes in this is where you actually need to use your brain this was the most rewarding part of the whole project actually yeah it really was so I wish you guys get to see our full video like a month later once our hard drive is fixed cuz all of it got deleted 15 hours of content got deleted but we'll try to show you what we can right here okay so some funky things there were some weird findings that we made it's almost like um we had to figure out some really weird hacks yeah if you you want to start with Craigslist let's go go to Craig I think a better way to approach it is go to Craigslist and then show them that there's multiple images for post so when you're onra look at this each yeah each post has multiple images and we thought it'd be as easy as like oh these images are hosted out a URL just like like the puppy image and then just have them like all listed in the HTML but they weren't like these image tags didn't even exist in the HTML web page for some reason and we don't know why we couldn't find they exist under this class called swipe which you can't you can't access you can never access this class from beautiful soup directly no like beautiful soup like skips over it for some reason so literally like you just don't it's impossible to access it with beautiful soup like it doesn't exist so we're like okay well then how the hell do we get the images and uh we had to find out this really convoluted way of getting it but there's like a there's like a little trick we're going to show you how to get it and we're only going to get one image so we're just going to ignore all of them we're just going to get the first image to keep it simple yeah but even that it's still like it's this little trick that we had to figure out and it's actually pretty cool yeah it's pretty insane okay so now all right the data IDs right holy dude this image is just right here oh yeah obviously they're all right here but you can never access them no because beautiful soup ignores that entire div of swipe doesn't exist in beautiful soup so this is so this is the first thing we noticed about Craigslist images they're hosted on this pattern where this is some ID mhm and then they're all like under underscore 300 by 300 hardcoded okay so boom right there so this is why they're all have the same size on the page so that was like the first detective thing that we noticed also this needs to be at the bottom oh uh some might get chopped off on the stream a little bit not from the bottom oh yeah that the right side is yeah just maybe just drag the bar over a little bit so they can see um wasn't it getting chopped off even more when it was actually on the right side like that cuz this the CSS isn't important it's just the HT okay let's see sorry guys we have a little bit of a delay so we just want to see you guys are seeing the right things should be good was pretty good you can see most of it yeah you can see most of it all right so this is the URL now what we noticed the craziest thing we noticed will save you long like the long story we'll make it short for you okay there's something called Data IDs and you'll never associate that with an image like why the would an image be under data IDs like that's the last place you look for an image right so it doesn't make so you can't actually access this image link from beautiful suit which is super annoying but you can access the data IDs so what's what's a funky like if you have to pause it here and see if you can see a pattern here with images and data IDs you should do that right now here's a pattern we noticed everything has multiple images right so data IDs since this has three images notice that there's one two and three data IDs right another thing I want you to notice is for this first image is the same as the first ID except there's a one ni colon here which is not present here right but then everything else is the same okay also there are these commas that we got to get rid of cuz there are no commas in the actual URL right so we're like okay let's actually take this guy over here from here to here let's copy it let's go here double click uh go here paste it hit enter that's the second should be the second image right I'm create let's double check so if I go here should be second image right there nice so that's actually where the image data is we're just given these IDs we don't actually have the full URLs yeah so at least so given the IDS we're like okay we can generate the actual images mhm so we've had to create a base URL for the images yeah just like we did for the Craigslist query yeah very very similar thing we got to construct the URL ourselves for each image wow y it's crazy right so it's going to be 300 by 300 like that you haven't seen our DOT splits yet man oh my God yeah wait till you see that parsing the string to get the to get the ID out the correct ID that's that part is cool okay so we got our base image URL now what we want to do is um get the image from the result get the data ID from the result row okay and we don't want to get multiple we just want to get the first image we don't really care about all of the images so what we'll do here is something like this so we want to say if it has an image yeah if the data IDs exist okay so in the result image class if the data IDs exist then what I want you to do is the post image is actually going to equal to like that that okay and now we don't want to get all of the data IDs because that might be like four image IDs or five image IDs we just want to get one image ID okay so what I'll do here is I'll just print this for now we'll go like that and we're going to go here and we're going to write pingpong and hit enter and we'll go down here and uh what the hell one what am I doing wrong here let's see wait let me see let me see so if post. find if the data data IDs exists then you want to find so image. getet data IDs no uh get data IDs is a string so when you call it's a string ID is a string yeah oh that's the annoying part about it this is the annoying part about it it's not so like it doesn't give so it doesn't give you a list of multiple IDs it literally gives you one data ID CSV file it literally gives it CSV file that's what it is okay right smart Okay so that's what we get so now if I actually print post image which should be fine I think well since I'm going to be printing it so many times let's just go here and print it okay it doing it every single time so there it is that's one string a lot of images there right so it's like I got lots of I got lots of post listings so like the last post listing probably has like like 12 many images like 12 images eight images something like that right so what I want to do is I want to just get the first one well how do I get that so what I'm going to do is we're going to do split on on this and we're going to split it by um commas first yeah commas first cuz you want to split the string into a list of the things separated by commas yep so now we have a so then it actually turns into a list this guy is crazy good like he's good yeah have him code stop touching the computer what wait till you watch him Cod oh dang flutter content so once we do comma then what happens is that we effectively get a list that actually looks a lot like we actually get a list that looks like this now so then we can actually index it by the first item and the second item and the third item so so now if I do zero oh that's how it works that's how you actually make it work now yeah so now what happen is if I go here and I hit refresh advert I got your godam advert in your own video Perfect dang python tutor on the loose what the hell's going on so look now for each of them is just giving me one but I still got to get rid of the one and colon mhm so we got to now uh say use reject or what we're going to now do split it by um one and colon no just colon oh yeah Co split it by actually no you could do one colon and then but it would it would act the same way because you yeah it would act the same way so we're going to split it now by the colon so now um I mean is going to create that into a list so like for example first it was doing this right then we said okay give us just the first item from here so then what it ended up doing was it said okay you got it mhm but now what we're going to do is we're going to say yo give us so after the the colon yeah splits on the colon and turns everything into a list like that one colon and then it's going to give us oh okay since before the colon it turns all the colons into like commas of aist like how yeah so separated by colons so now we're going to do that but we're going to say give us the second element from that M because the one is the first element yeah I mean we could have just shaved off the first two characters of the string we could have done that um but I mean we want to be more robust because what if there's like one so now we're getting all the IDS right and now the post image URL is actually going to be the base image URL uh formatt it with the post image URL oh wait what id I guess so here's what's another cool thing about py charm is if I do FN shift F6 I'll change it everywhere everywhere in every file every project but like intelligently so if it's the scope is here it won't change it out here I think you already know these things scope that's good all right so scope is Frank actually don't all hold on we're almost there okay so this is happening so now let's just print it before we go on to the next step print click o click whoa is that a bigger bed right so this is freaking awesome oh wait I'm calling both of these post image URLs this is actually the post image ID this is the URL okay so now I have to actually append this too to the list um so if we find the image this is what should happen but if we don't find the image we also want to give it an image okay so the image that we want to give it is we saw this we saw Craigslist gives this to anything that doesn't have an image logo just like this type of thing okay so then we do that so then we say yo if you find it then give me the image otherwise give me this garbage where do these spaces come from bro weird okay uh no image or actually post image post image your whoa okay what the hell is happening oh so then what we say is append post image URL so now there are four things that the file postings has as a tuple title URL price post image URL oh how cool okay y so now it's sending it to the front end so basically we go to our new search and now anywhere there's that dog crap right wow that's so sexy that is right yeah it's crazy put the first you guys created the URL damn sexy right love it love it this actually pays everything off now that he appreciates what we've done post. three I still screw up the influencer post there we go so now when we go back we refresh hey there you go now if you click here it'll take you to the thing oh man better than Craigslist so much better better than Craigslist dude it's code Daddy's list they should hire us we just coded it up ourselves from the scratch why haven't they done this huh because Craigslist is Untouchable too many Craig the God all right now uh we're going to host it on Heroku oh God this is the worst part that get ad get commit um add Craigslist search SE functionality uh get push origin Master Okay kids now what we need to do is we need to create this proc file okay so you copy so basically we go to the root we create a file we call it proc file we paste this we change this test app to code Daddy's list like so then we go to settings and we do the following settings we go here and we add this line of code and we go here um and then we add uh this line at the top okay like this now it's going to need you to install pip so you got to do pip install Jango Heroku okay now you're going to run into this ugly looking error how do we fix this eror oh man I'm not um okay hold on pip install pip install Jango Heroku wait where did my PG admin go I literally installed it a few days ago okay so what I recommend is you go and install PG admin or something like this from the guey this is the part where you're going to get up the most so go here is uh I wrote the blog post on this on medium if you do uh how to host a d Jango Heroku app you're going to run into my blog post which is incredible it has has a lot of claps on the left hand side as you can see nice photo thanks bro and basically what you want to do is you want to do all this stuff right here okay so we're going to do that so install so this is what I said to do this the easiest way is to install PG admin on your computer okay four days ago yeah where the hell does PG admin man open it you can go into property though copying PG admin so I'm going to open PG admin until then I'm going to pip install gunicorn pip install done uh pip install Jango Heroku which still shouldn't work because I'm waiting on the PG admin which is taking its sweet ass time so yeah we'll just wait damage and can't be opened this is the part where you lost me I still don't know how to deploy a Heroku yeah well now it's going to be recorded So everybody can watch it oh boy I'm going to go read that blog post man we need more ad though man there's only one ad left here we'll run the Walgreens later bro take some of those those green tea mints they'll suffice for now right some green tea Mochi yo hook me up with the Whiteboard dog number three right oh my God are you serious go to OBS go to OBS dude hold on hold on dude you're going to blow up everything this guy man we prepared for this moment we did the one the one time wanted to switch to the oh it did work look before before you even did it it already worked what's up because I pressed it no now you pressed it it's already there okay fine you're like all right we need Heroku and for that you need PG admin basically what you need is postgress okay if you have postgress you're good to go but it's a nightmare install it it's a nightmare install pip install psycho pg2 you're not going to be able to get it right but if you just download it from aui it makes your life so much easier just go install like a free postgress database tool that exists online and that's going to make your life a lot easier okay and then we're going to install everything else I'm using Anaconda right now which also makes things easier this is the longest verifying I've ever seen in my whole life dude this is crazy verifying PG admin yeah so we have done all of these things okay create a search functionality does this we have web scraping beautiful suit using materialized pretty much done with the app now we just want to host it on Heroku yeah forgot the dog dog pictures yeah doggies I can't draw I don't know how to draw doggies right guys so we're almost done okay we're waiting for this thing to install cuz it's just taking its sweet sweet little time whichs so good sorry we're admiring our own live stream yeah yeah we're forgetting something oh somebody left for lunch priorities are out of order bruh what does it say Bruh Bruh hello what everyone needs bread it's probably bruh how he was like how like bruh how L and the O is next to each other on the keyboard all right Tatsumi bye Roshan hello monkey Bender hello hello goo something Glo goo Glo I was G come on Marty we got to go on adventure Marty what's the verify and the purple light was off the whole time no just like you got concurrent between the 1500 people yeah playbacks that's crazy holy crap but the concurrent viewers are like crazy secret key yeah camera the CPU are you serious dude like are you actually serious um let's look up other post cross goey Mac options post app downloads all right guys I'm going to say you to PG admin and I'm going to install post. app in the meantime hopefully it'll work a lot faster God damn PG admin ch on your verification post is it open already wow it was installed and opened and initialized boom there we go Rafiki post Crest template you click into it and it'll do stuff this is awesome you terminated it um yeah just a session okay okay I guess cond install psychop pg2 was the answer so that worked this is why an aond is freaking awesome now let's try pip install Jango Heroku cuz pip just sucks sometimes and like you need to do something to get past it okay so this should be working now great stop okay what else do we need now we need to freeze our requirements that's important we need to Heroku log in so there we go we're logging in I'm logged in now and then what we need to do is Heroku create and after this what I need to do is add a database create a new postgress database for your app that's hosted online on Heroku so then it can store all those pieces of information now make sure you run migration so let's do that okay Heroku run python man make migrations can't open file huh the hell does that mean oh committed the file okay get add get commit what are the changes get add get commit get ready for Heroku get push origin Master there are no migrations to make oh meta add meta class parion Master huh that is a really weird error for scaling dinos couldn't find that process should be logged in already oh I don't think I even did get push Heroku Master yet but I that doesn't come first I don't think so 1700 man we're trying to host it once it works we'll be able to link you guys so you guys can actually see this app we're pretty close yep hold on Diva Diva Diva div up the the D you know just as much about Heroku as I do Frankie you've never uh posted anything nope so we're live this app guys is actually live as we speak it's on Heroku um you can actually go to this URL right now which I don't think they can see yet can you just type that UR can you do something okay yeah just add it in the chat URL just look at it dude gentle hyen C manent gentle C 49 what is it 49783 Heroku app.com there it is you guys you guys can now actually go on it but if you type something in it won't work because I'm having a problem with the database um Heroku run python some problem happening with the migrate command on Heroku which is super weird so you're trying to migrate the database to Heroku it's not working yes oh there nice what command did you run so now migrate works okay so basically if it doesn't work you push first and then you migrate after oh so this app guys now should be working perfectly if you hit python tutor it works wow it's online anybody can use it from any computer in the world do you think that's the sequence like make it host online first and then put the database in or is it always like that or is it just you know hell yeah works for everything if you look up Borderlands three they released a new DLC did you 3 and like if you go here $360 right if you click into it it'll be $360 yep nice all right guys there you have it this app is completed the link is in the can you add the link in the description as well or not right now yeah yeah after can you pin that as a comment or something no no no you can't no you should be able to somehow I don't know how though cool just Spam it in there chat okay guys camera guys we hope that you enjoyed it we do was pretty fun it's really really fun uh thank you guys so much for watching we love your face the link is going to be in the description the link to the GitHub repository is going to be in the description and I'm going to go eat some food and Advil uh my brain is about to explode I love you guys if you enjoyed it please like the video subscribe share the video before our YouTube channel dies and that's it we love you guys and uh we'll see you see you in the next video video video good bye hey you how's it going this is Cy from clever program.com in this video this is going to basically be the ultimate guide on how to become a successful python freelancer in 2019 I sat and I thought a lot about what were the exact steps that I took to be able to get there and how a lot of other successful developers went from complete zero to being able to even make six figures and Beyond as a python freelancer and I try to put them in this video for you in a stepbystep process so this video hopefully will serve as like a Manifesto that you can refer back to from time to time on your journey to becoming a developer now this video will be really helpful even if you're a complete beginner with let's say zero months of experience coding the 0 to 3 months of experience coding I will also show you how to improve your income and become more successful as a freelancer even if you're more advanced all right this video will also answer some really important questions that people ask like people often ask me kazy I am a beginner or intermediate in Python Programming I have no prior work experience how do I actually start earning an income from coding so I want to address that question headon as well cuz I think that's very important especially a lot of people a lot of people are students in colleges so they don't have work experience how do they get their first internship how do they get their first freelancing job when people want to see prior experience so this video is going to help you obliterate that excuse and help you start earning an income in your first 3 months of coding now this is not like some getrich quick type of thing this is going to be a very detailed process that I'm going to lay out for you this is going to require a lot of hard work but this is the clearest stepbystep process that I've seen anyone ever explain so I want to do that for you and put it in this video now before we jump in the content of this video if you could just do please do me a favor because we put a lot of time and effort into making these videos for you guys so the best thing the best help we can get is if you could just even like the video uh And subscribe to the channel and make sure you hit that Bell notification next to the subscription button so then anytime we make a new video it'll come straight to you also I have something really incredible for you at the end of this video and I'm going to reveal to you so definitely you want to stay tuned in this entire video because that gift that I have for you you're really going to love with that said let's jump right into it hey this is Raf Cy from clever program.com and on this channel we help people become a successful Python freelancer and we help you go from zero to earning your first six figures as a python freelancer now this channel will help you break out of your 9to5 job work remotely and live life on your own terms so if that excites you again click that sub subscribe button and jump on this journey with us now let's jump into this video so I'm going to actually break it down in four steps on how to actually become a python freelancer step number one master the fundamentals of python what does it look like to master the fundamentals of the programming language python I look at it like this you don't have to have you don't have to be able to solve like super complex problems but you want to have some level of Competency so what are the things required there and how long does that actually take so let's break that down what that looks like is you start off by learning coding all right so you spend let's say 30 to 60 days learning programming and you learn the fundamentals of the programming language for example the basic structure in the syntax how does uh what are variables what are strengths how do if conditions work what are conditionals what are functions what are classes so like OB objectoriented programming as well now once you cover most of the basics of programming you should be able to solve problems like the fs buuz problem which almost every interview will ask you this challenges your you know a little bit of your critical thinking but it also challenges you in terms of okay do you know how additionals work in programming you should also be able to make games like Tic Tac Toe or rock paper scissors even if you can't make them from complete scratch that's okay because most developers aren't making anything almost ever from complete scratch you are actually referencing material from online but basically can you actually use every resource in your brain to put together this app by yourself so you should be able to put these apps together now once you can do these types of tasks I I believe it generally will take you one to two months and the reason I say that is even if you have just a few hours a week to spend you can actually learn these skills really well all right I have a free python course I'll pop that up over here is called Learn Python Programming by building projects and in that course we actually teach you how to actually learn programming from complete zero and it's a 5day course if you go really intensely into it so you can actually shorten your 30day or 60day cycle in as little as 5 days but that does mean that you're putting in probably 5 hours or 10 hours a day now if you can't put in 5 to 10 hours a day then just understand that it'll take you probably 30 to 60 days as a realistic time frame So within 30 to 60 days you should be able to understand the fundamentals of Python Master them and be able to build simple applications now once you've learned that let's move on to step two where you actually start earning an income so what does step two look like now let's break it down into uh something tangible now this actually came from when people kept asking me and I also kept asking myself when I was starting to uh freelance in my in my days I kept coming across this problem where I was a beginner in programming or inmediate I had like a few months of experience but I couldn't get freelancing jobs because they were really freaking hard and required a really difficult level of you know high level of expertise like if you go on upwork.com and you try to look up freelancing jobs and if you're a beginner or intermediate you're going to have a lot of difficulty being able to actually complete those tasks or complete those jobs also even some that I felt like maybe I could do those people didn't hire me because I didn't have relevant work experience to show them so I'm a beginner I don't have relevant work experience which meant then I couldn't actually go on to land these jobs that was a huge problem I thought how can I actually start earning an income is the only way that I have to wait three or 4 years of college get a degree and then start earning an income however when I actually looked around a lot of my friends who had gotten degrees even they weren't Landing jobs and a lot of my other friends were quitting their CS Majors because professors went from teaching you hello world and then next week you were making like a St stock trading app so the jump in the level of complexity was way too difficult so most of the people who were even graduating from college are essentially selftaught developers they're teaching themselves so first I thought okay I can't rely on college or the educational system to teach me programming because most of the people graduating are actually not relying on the school system they're teaching themselves and then they just come in Ace classes and then other people cheat off of their homework so that's what what's happening most of the times right so I thought okay if these people are teaching themselves I got to start teaching myself but I got to be able to find a way to earn an income before I actually started applying to places like up.com and then I thought I came up with what if I start teaching people what I know so far so with my 30 to 60 days of experience coding what I realized was majority of the People by definition are beginners who trying to learn most of the people people have very little knowledge of coding and there's a mass Market looking to learn programming and if you have 30 to 60 days of experience you're you're like one or 10 steps ahead of most people most people who would pay you anywhere between $25 an hour to $100 an hour or more for you teaching them programming so that's where I actually started I went to a platform called wi isand.com and I actually made a profile on there and I also went to a platform called takelessons.com and I made a profile on there once I made a profile on there what ended up happening was over time I actually got clients right from wis.com and takelessons.com that started hitting me up and started scheduling lessons with me I set my hourly rate at $35 an hour and my first lesson I believe I got in 2016 December something like that I'll try to put a screenshot here so you guys can see and follow along and that was actually freaking mindblowing I'm I'm like okay this is insane because this is possible and people are paying me that much when I walked into that lesson to teach this person programming cuz he said something like he's working on a final exam for coding so when I came in I was actually really intimidated I thought I couldn't help this person but then I thought okay if I can't help this person what I can do at least is I can try to help this person and if I really can't at the end of the day I'll just refund him so that's what I did I just went in the lesson took place at Starbucks and we just casually sat there and I helped him with his assignment and there were some parts which I couldn't figure out so I told him I'll actually work on it in my own time he thought that lesson was super helpful cuz we were trying to figure out things together at the same time and then once I left I actually figured out the rest of the problem on my own and it ended up being not so complicated what I realized was those 30 to 60 days that I actually spent learning on my own most people aren't ever learning programming on their own they're just doing the college assignments and they're spending bare minimum amount of time learning coding which means that most of the times they can regurgitate information they can regurgitate like or just get through their homework assignment but they don't actually understand how most of these things work whereas when you teach yourself you're really able to actually do these projects cuz you learn how to think critically I my mind was blown that I was actually able to help this person and charge $35 an hour for My First Student in under 2 months of experience then I asked myself the question can I repeat this process I started repeating this process and I started Landing multiple clients so if you do the math if even one student is doing two hours with me every week that's $70 per student and me actually learning programming over the course of a month that comes out to be $280 per student okay over the course of a year now that comes out to be you know over $2,000 with just one client and then I thought okay what are some levers here that I could change one I can get one client that means if I can keep them for a year that's $2,000 plus maybe even $33,000 the second Le lever that I could change and play around with is increasing my hourly rate with each client so if I doubled my rate with the particular client or I got a new client at Double rate then that would mean I double my income by the end of the year so I'm like okay let's test some of this stuff out so the first thing I decided to do was instead of doubling my rate with a client I got a new client at $50 an hour so now I had two clients one at $35 an hour and one at $50 an hour so with the two of these clients now my income went close to like $400 or $500 a month then the next client I got I got for $75 an hour because at this point now I started to get uh reviews and testimonials on my profile which make you look awesome I had a great profile as well and more of these clients started working with me so over the course of a month my income ended up going from you know when I started it was $180 and then it ended up going to, my first $1,000 a month I increased it to $1,500 a month and now another thing that I want to tell you that's really important to understand here is that not only was I actually increasing my income but keep in mind that I was doing only a few hours a week working with the people that I really enjoyed working with I didn't have any boss bye I oh no no that's okay stock everything's good you didn't miss anything to this perfect you're awesome thank you so much appreciate it I didn't have any boss I was actually able to work by myself some of the clients I would meet in places that I loved going to like Starbucks or some of the clients I met online so I didn't actually even have to travel for them I got to choose my own schedule I can travel anywhere I wanted and I was still earning an income and one of the most important things on mention here is that it was the fastest way to grow my skill set in coding because every project and every student I was taking on everyone had assignments that would challenge me and grow my skill set so I was improving at a rapid Pace while earning an income and over the course of 6 months to a year I actually was able to scale from just having a few clients to having over 20 or 30 clients clients and I was able to earn over $30 to $40,000 a year and eventually I scaled my uh just my coaching and tutoring all the way to70 to $80,000 or Beyond every year all right now this took time and effort and a lot of systematic work but it was definitely worth it and it it made me go if I want to freance I can choose to freelance or I can actually be doing this earning a great income and having massive and Deep Impact in people's lives because there were students who were going to coding Booth camps that needed my help there were students who were you know going to high school or college that needed my help or there were people who were developers that came to work with me so they could actually get help in their own jobs so the demand for this was massive so this is Step number two I know we went really deep into it but I want to emphasize how that this is the secret sauce the secret St step that just nobody ever mentions I firmly believe this is one of the most important gaps that'll take you from having no experience being a beginner to then going to that step of becoming a freelancer other benefits of this I want to mention are you're going to have testimonials you're going to learn how to reach out to clients you're going to learn how to land clients you're going to learn how to retain clients you'll learn how to work with clients over the course of 3 months 6 months a year these are incredibly powerful skills that once you become a better and a stronger developer and you actually start going out to freelance either with local clients or you go to upwork.com to freelance you'll be able to leverage all of these skills also you'll be able to leverage the fact that you have so many testimonials and experience in working with python and you can actually share that and that will qualify you to be able to work with other people all right you have experience now working on multiple projects that other people were're working on you have testimonials from people who are learning Python and they give you test these testimonials that you can show off to a potential new client or Prospect uh again this was just step two now we're going to move on to step number three step number three is build real world projects all right now before we get to step four which is which I'm going to talk about how to actually freelance and earn an income in Step number three we're going to talk about the power power of building real world projects because before you jump to becoming a freelancer you actually now need a lot more technical aptitude when it comes to coding and you need real world projects that you can then show to your future clients all right so you have developed a skill sets of so far okay if you're following on this journey you have developed a skill set of retaining clients of Landing clients of negotiating with clients of being able to charge premium pricing of learning how to deliver value you have testimonials you have experience working with python with other people so you have all this at this point but now what you need is you need to be able to actually just increase your skill set and have a portfolio that you can show to people all right so this stage is actually going to take you quite this is going to be the most difficult stage so to speak okay the transition between going from you know a python instructor into then freelancing with python but what this requires is for you to build practical projects and build lots of them okay so you're going to be constantly learning programming so I would say 20% of your time will be learning new skills in programming and 80% of your time will be actually building projects that you can put on your portfolio so you're just beefing up your portfolio and project base here but what I want you to keep in mind is you don't want to just work on random ass projects like going to a cs50 course and taking it which by the way is a great course if you want to take it like go ahead cs50 is awesome but what I mean is try not to have a shotgun approach because you're not going to be able to do really well when you transition over to freelancing because it's much better to have get really deeply technical in a certain skill set rather than have like 50 different skills in programming and then just be mediocre at everyone but it's better to be more Niche and more jacked you know in a specific skill set so what I would recommend for example is go on upwork.com and look at the jobs that are there okay so go on upwork.com go to the search box and hit type in you know Python and then scroll through the jobs so go and look at the different jobs that exist you want to look at jobs that have a skill level of let's say easy to intermediate so that's something you should be able to do within you know in your first between your 4 months of coding experience 4 to 12 months of coding experience okay so you want to look at those types of tasks so what do I mean let's say you go online and you see something crazy like build a you know application that has a redundant storage and it can serve to over 1 million users every month and it has a difficulty rating of expert for now that's a no that's a type of skill that's going to take you like 5 years to develop or more so you want to focus on something like maybe it's a $300 freelancing task or $500 freelancing task that actually requires web scraping abilities to go to a website and get all of the PDF links from there or it requires you to go to eBay and get all the feature deals from eBay and put it in Excel sheet now that's a much more doable project and that actually doesn't take that much time for you you could literally go to one of our YouTube videos on web scraping learn that specific skill set practice it over the course of a few weeks or days and be able to land a client you know with a freelancing job you want to make sure that as you're in this phase three of building real world projects research on upwork.com what are the types of projects that you can see yourself doing what are the that you could see yourself doing in a shorter period of time and then plan your learning around what's actually relevant and what people are paying for right now so if you constantly see these web scraping jobs and it's interest you then what you want to do is you want to come back to the drawing board and you actually want to spend your time learning web scraping skills so you want to develop Deep Web scraping skills go through web scraping tutorials build web scraping projects so then you when you go to that specific client in the future on upwork.com or another client on upwork.com that requires you to do web scraping you can just refer them back to your work on web scraping and be like look at my portfolio I'm a web scraping expert and I can help you with your task if you're interested in doing stuff with regular expressions or you're doing stuff with data mining or you're doing uh python stuff with web development you know you're interested in the web devel vment jobs on upwork then go back to the drawing board and uh practice all your learning around web development okay we even have a course called profitable programmer that teaches you how to be a full stack web developer with python so practice and go through learning those web development skills and then once you develop those web development skills and you build let's say python projects using Jango then you host those projects with Heroku and you learn how databases work like postgress and stuff now you're becoming better at web development right and you're building a portfolio so then in a few months you could go right back on upwork.com and actually apply for that job and show them your experience show them your testimonials on let's say WIS an or takelessons.com and go look at this I can offer you the skills that I have of building these projects and look at what my clients say about me that's everything a person who's looking to hire you needs to know once they see that it's a much easier sell on your end and you could position yourself in a really premium way and charge anywhere from $50 an hour to $300 an hour okay if you're more advanced than 300 but going from 50 to $150 an hour might take you 1 to two years okay it's a doable stepbystep process especially if you laser focus on the skill sets that are are in the job market currently right now so this is very important uh in terms of you look at the relevant market and then you go and plan your learning around it all right spend a lot of time around looking at what kind of jobs exist cuz think about this how backwards is school think about the school system the thing that determines your whole life your major they only spend a few days on it when I was going to college I had meetings with my counselor like probably once or twice a whole year but those meetings determined 3 months or 6 months of my life how absurd is that that the thing that required that's going to determine the 3 to 6 months of my life is essentially just 1 hour long or a 30 minute long quick meeting with a counselor that hasn't figured out their own life and are here and are handing out advice to every single student like thousands of students with backtack appointments and they're determining your life over the course of like a 20 or 30 minute or an hour long meeting with you and that's all the time that gets spent on it but then all the other time is spent actually going to classes and putting in the grunt work where I think it should almost be the opposite cuz your future is the most important thing to plan for it's almost like you're on a conveyor belt okay there are multiple conveyor belts one belt leads you into the depths of Hell the other conveyor belt leads you into heaven now if you actually spend a lot of time thinking about okay this one leads me to hell this one leads me to Heaven you quickly do a quick Google research which one is more pleasurable and you find out it's heaven then you get put on the conveyor belt and then you keep going right but you have to put in the work to do that research but often times if you don't do the research correctly then you actually might get put on the track that's going to put you in hell in a lot of pain and you know a major that you never really wanted and that's where you're going to get on the conveyor belt and start going okay and then it determines the rest of your life so the school system system is really backwards I think they should spend like 20 or 30% of the time planning your future and showing you specifically what kind of jobs will you be doing what kind of skills do you need to learn now to be able to get the jobs you want okay they don't actually focus on the jobs which is the ultimate outcome that you want so you need to focus on that so how can we apply fix that school broken School model and fix it in the python freelancing World here's what I would suggest okay here's what you need to actually do you need to look at the relevant projects and spend 20 to 30% of the time you know on your freaking iPhone okay I don't have my iPhone with me but on your freaking iPhone get the app upwork.com put it on your homepage right next to whatever other like the text messaging app that you have or the phone call icon that you have okay put it on your homepage make it something fun make it something exciting so then you click on it and while you're in the bathroom or you're waiting for someone in line or or you're just hanging out you click on the upwork.com app and you just see what kind of projects and things that people are offering real money for so once you develop that habit and you get excited by it automatically you're going to be spending 10 to 20% of your time actually looking at what skills you need to develop and then you wrap and map your skills the skills that you need to develop around right around the real world job market on the things that you need to be able to do all right so this makes your learning hyper relevant and it makes your skill set hyper relevant whereas for example if you go to a college for four years they have outdated curriculum they don't focus on what's in the job market and so often times when people graduate after 4 years they have $60,000 or more of debt with outdated skill set that you can get freelancing jobs for and you often can't get fulltime jobs for either cuz in the software development World things move fast so wouldn't it be cool if you were just on top of it right by being able to see what's happening in the market all the time so that is Step number three which is massively massively important just to wrap it up step number three is build real world projects around Real World Market now we're going to get into our really exciting part step number four how to start earning an income as a python freelancer up until now what have be done step number one was mastering the basics of python so you can get ready for tutoring step number two was tutor with python and you can actually scale your income from and you can actually be a complete beginner with less than two months or 3 months of experience and you can start scaling your income from $0 an hour to $60,000 sorry $0 a year to $60,000 a year or more I know tons of tutors myself well one is me one is my friend tenson who actually made over $100,000 a year just just tutoring all right and I know other tutors online that are making over $100,000 a year so you can make six figures from just tutoring if you really wanted to again it's not easy it takes a lot of work it takes discipline and effort and consistency so I please understand that it's not something that's easy but it's a simple process if you follow it all right now so those things you did in step two right step three was about building real World projects around real market now step four is this step that we're talking about right now freelancing with python so now that you've done all of those things you have the testimonials you have the reviews that you need you have completed the real world projects and put them on your portfolio and you've niched down so instead of like doing a web scraping project and a data mining project and like a data science project and a TI Tac Toe project like instead of spreading yourself thin like that you've actually worked on like maybe let's say all web scraping projects okay so you've specifically went and took web scraping courses on let's say corsera or Udacity or whatever you specifically went and learned web scraping techniques from you know YouTube and now you are ready to go and become a start as a webscraper using python on upwork.com now I'm going to give you guys tips that are going to be helpful for the people who are getting their jobs the first time and these skills are also going to be massively helpful for anybody who is a more advanced developer who is ready to actually start freelancing right now so please pay attention to this cuz this could be a gold mine for you all right so number one you need to have a solid profile now I'm not going to go too much into details about profiles I'm just going to hit on like the top parts of the profile one of the most important things you need is an epic head shot now I'm not giving this to you as some generic blogging 101 advice all right this is coming from experience and this is coming from looking at some of the best developers in the world and I'm trying to share this with you cuz from a lot of a position of pain too cuz when I didn't do this right it literally cut my income in half and I doubled my Revenue by just having a right head shot what does a right head shot look like this is what a not right or a wrong head shot looks like okay most people's pictures are going to be like that or they're going to be like something weird like only their forehead is showing but like the rest of the thing is blurry you have no idea how many potential clients are going to turn off by that because people are trying to work with human beings they don't just want the job done they want to work with a human being that they like who can then do that job so your skill set is almost secondary the first thing they see is a human if they that they like or not all right so this is a pretty important step so a normal like that's it all right that's it that just just a little smile okay or you can even have like the person who's taking your photo with the iPhone okay on iPhone you can actually use this Mode called portrait mode which is fantastic just have a little bit of light on you you could take your own photo or you could give it to somebody else they could take your photo and done you have a professional head shot just go outside you have a sunlight hitting your face take a freaking head shot okay this is one of the craziest most important things for a freelancer seriously okay now that you have that head shot that's important other things you obviously need are what value you can provide to people so have your portfolio and your projects there and have your testimonials there uh if you can if you can bring them from WIS an and uh take lessons or or some people people you've met in real life if you can get their testimonials on this platform that's going to be phenomenal for you okay let's say your profile is complete what's next when you reach out to people one thing to never ever ever do which I see almost every freelancer out there a lot of Freelancers out there doing cuz I have a lot of experience hiring Freelancers I worked with or probably 20 or 30 people in just the last one or two years of uh running my business clever programmer so I've hired lot of software developers uh to do consulting or to help build stuff at clever programmer I've hired people uh you know who do are Google analytics our Facebook analytics who run Facebook ads graphic designers virtual assistants software um I've said software developers uh video producers so I've like worked with the facet of people so I have experience looking through resumes who do we need to hire who do we not need to hire and I can tell you from personal experience the biggest turnoff is when I get a generic response that I know somebody's copied and pasted so often times on platforms like up.com it'll look like Dear Sir blah blah blah maybe they'll just have your name and then they'll be like your project seems very interesting and then they just rant about what they what they do okay and it'll be like okay why are you telling me that you do WordPress and Squarespace and Wicks and all this when I specifically wanted help with gole Google analytics let's say or I specifically wanted help with this python project don't copy paste ever it is not a numbers game let me just fix that for you right now reaching out to people is not a numbers game okay you are an idiot if you think it's a numbers game it's not so let me just solve that problem for you all right if you want to you can reach out to 100,000 high level people with just some copy paste answer or somebody else can reach reach out to like 10 people with a really solid customized and personalized message and they'll get back more responses that'll actually lead to something epic all right so please don't do copy pasting big big mistake as a freelancer what you want to do instead is actually send a personal message let's say somebody's project is and I'll give you something specific right here on the Fly cuz I do this a lot and I do this in my business a lot and I personally send out email newsletters to you know 70,000 100,000 people and I know what gets more opens and what gets less opens I reach out to prospects and I reach out to people and I know what they like and what they don't like so we're doing a lot of testing here so for example here's something you could do that would be really helpful somebody say somebody's project is web scraping PDF links okay you want to reach out to them make use this thing called us loom.com uh this is an epic resource so write this down or go and install it right now in your Chrome it's called use loom.com and it you can just click it and it allows you to make a video right away if you send a video message to someone you're automatically like 90% more likely for them to actually see it if you send a written message which is totally fine as well but automatically your chances are just so much lower of that person speaking with you cuz in video you can tell so much about that person like I can immediately tell whether I like you or not I can immediately tell your level of reliability um if you're a person who I would like like if you're humble maybe or if you know what you're talking about or how friendly you are I can immediately see those things so use that to your advantage and it also requires less work on your end you could sit there and write this letter that'll take you forever or you could be like hit the use Loom button and just go hey my name is John and I can help you with your I saw that you have a web scraping project where you want to get PDF links that's really cool because I've actually worked on a project like this let me show you real quick and then while you're screencasting you just quickly show them your project for 10 seconds and just be like yeah it seems similar I can I can definitely do this for you sir and it would be awesome if I could just have 10 minutes of your time and we could just chat looking forward to it thank you John all right now this video message okay you could link it to them in your uh initial Outreach of your uh to the prospect okay so you could say you know in terms of typing cuz the first thing is they're going to see is a written message so you could just say those things hey I put this uh I saw your project the web scraping project you have for getting all the PDF links and I've done some similar things to this and I've actually put together this personalized video just for you and whatever the client's name is let's say the client's name is Bob I've put together this personalized video here for you Bob put the link to the video and then just go and uh if you have like 10 minutes to speak I would love to chat with you but you know here's my resume here my testimonials I've done similar projects I can definitely help you with this so make it very precise and then do something with low commitment right if you do 5 minutes or 10 minutes that's really easy so for somebody to just get on a 5 minute or 10 minute call personally in my experience I hire usually like almost every like two or three or the fourth Max almost interview that person I'll just hire cuz otherwise it takes way too much time so most of the people that are even posting jobs on up.com are usually these solopreneur business owners that are trying to hire a contractor to get done and move on they're not actually going through the regular full hiring process that you know company that's looking for a fulltime developer goes through that's going to be a much more rigorous and a systematic process it's maybe going to require multiple interviews there's going to be a technical screening there's going to be a culture fit screening then there's going to be like a negotiation phase that is what like big companies will do but somebody who's looking for an independent contractor they just want to get on a call with you they just want to see your face and quickly make a decision whether you're going to be able to do their job or not so the more you show of yourself the more personalized you make your message and if you put a video in there and you show in a relevant way you're going to kill it like it's not even going to be close the amount of responses you're going to get versus some other random person all right somebody else who's just doing the same thing every other freelancer is doing this is also what's going to allow you to be able to actually charge a much higher income and command much more premium pricing than everyone else okay because people constantly ask how do I compete with somebody in Indonesia charging 69 cents an hour um for coding all right that's how you're going to compete with somebody in Indonesia charging 69 cents an hour by being more premium by being reliable by being somebody who the other person can look at and go this person will actually help me complete this project right you can also show your communication skills because most other developers their communication skills lack okay and people I can't emphasize the soft skills part of development enough that's the most underrated part which is actually going to bring you the most amount of value even if you look at statistics online this a 80% of your success in your career comes from your soft skills and how likable you are because you're working with human beings and 20% of your success in your career is actually going to come from your technical aptitude in any given field especially in programming so now that is those are some tips on how you can actually get these people to respond you okay and if you've completed the first three steps that I've outlined for you then going into step four freelancing phase is going to be much easier other tips I'm going to give you on freelancing is start with smaller projects and then build up so don't immediately start doing trying to do like a $5,000 contract or some like really big challenging project that you're like oh man maybe I can't do it start with a $100 project or a $300 project then move on to a $500 project and $1,000 project and then something really smart that you can do right is let's say you are working on a project where you are making $50 an hour and it's a really challenging project that you don't think you can do now this is going to be the majority of the scenarios when it comes to freelancing and all this type of job related stuff especially when you're not as advanced as freaking Raymond hinger or you know uh Russo rusam gido the guy who made python if you're not as advanced as them or really really high level developers most projects are going to be a challenge for you right what you can do is if you're making $50 an hour and you feel like it's going to be a challenging project you could hire somebody on let's say Cod mentor. which is a great platform where you can hire developers on demand to Mentor you and you could pay that developer 25 30 3540 or even $50 an hour to help you on certain tasks and for you to understand how it works so maybe you will work with that other developer for the first few hours or maybe even a week and for the first week let's say you don't make any money of working on this project because all the money you're making you're essentially giving it to this other developer to learn these skill sets and to internalize them but then week two week three week four and over the course of a few months or a year working with this particular client now you're just making fullon profit of $50 an hour you see what I'm saying so initially you're making an investment to hone your own skills the company's paying you you're putting that money into a developer who's then teaching you these skills you're breaking even and then after a few weeks of learning from that developer now you can help them completely on your own cuz now you have internalized those skills so understand how to actually use help right that's what made Henry Ford so incredible he was in a court once and the lawyers were asking him all kinds of crazy questions to make him look really stupid like trivial questions like when was United States created or who is thee who was the president at a certain time or what's the capital of some other you know country and he got fed up and frustrated at one point and then he just looked at them and he said I can't answer these questions for you but I can pick up the phone in 5 minutes I'll find somebody who can that's the level of resourcefulness you want to have because one of the most one of the ultimate forms of procrastination is actually not asking for help trying to do everything yourself most developers fall victim to this they take some weird kind of pride in doing everything from scratch not leveraging help and this is very very selfish and this is the highest level of procrastination because they're doing this to build their own low selfesteem that they have about themselves so if they actually can do something from scratch completely then it will fulfill their very low selfesteem and they very low selfimage all right whereas if they think about the client and the results that they're bringing the client you shouldn't give a about how you end up doing it as long as you can get your client the results that they need right so if your client needs a completed project I personally don't care if I have the ability to complete it from scratch or not I can hire like a developer from Philippine I can hire a developer from freaking Indonesia I can hire a developer from America as long as I'm profitable I'll put them together and make them complete the project and I'll deliver it to my client or I'll get help from them to learn these skills myself and then be able to do it and then deliver the end result to my client right ultimately that's all that matters Nothing Else Matters the end result for your client is what matters so understand that you're not as alone because what will stop you almost all is you look at each project and be like this is too hard I can't do it every project is going to feel like you can't do it that's why you have to apply for it get accepted and then if you can't do it hire help from platforms like code mentor. or even upwork or even WIS an you can hire a tutor for yourself have them teach you the skills on the job and then be able to complete the job so this is some really deep level stuff which is going to help you break past that barrier of I'm a beginner or I'm an intermediate how do I actually start getting clients as fast as possible how do I start earning an income what's the path for me because if you start earning an income quicker it'll allow you to actually spend more time learning the skills so then you can eventually get a fulltime job if that's your goal or you can actually become a really highle freelancer or a really high level consultant and eventually you could even turn it into your own freelancing business where you have other developers under you and then they work for the clients that you have and you're the middleman and you keep the profit they do the work all right so you could turn it into a freelancing business for yourself as well but that's a really really advanced level step we covered a lot all right in this video I'm going to stop right here now let's just come back come back into our bodies and come back here so we covered a lot I hope that you really enjoyed what we covered I do hope that you leave a comment letting me know kind of what you thought about this video and maybe what were your biggest takeaways and if this was even helpful to you cuz I honestly don't know if this is helpful but I try to give it my heart and give you guys everything you would really need step by step to get to this process please also if you haven't already like this video And subscribe to the channel so you can get more tips on how to become a sixf fig python freelancer with that said thank you so much for being on this channel I love your face and as always this is Cy and I'll see you in the next video real quick before we continue smash that like button help us beat the YouTube algorithm by literally going and smashing that button we're trying to get to 10,000 likes if you could help us do that that' be fantastic I do want to let you know if you want to become a freelance developer I have a threepart master class for you it's absolutely free it's one of the best it's in the description below it's free go enjoy it you have nothing to lose sign up once you put in your email we give you all three videos go enjoy it with that said let's jump right into it what's up you guys this is Aaron and this is Frankie get rid of that and thank you for watching the python 2020 course um what we want to say is that we have another python course hosted on teachable which is a cleaner and better platform for learning things I think YouTube's kind of just like you know the YouTube's it's a free private course and we released it just so you could further solidify your python fundamentals so all you have to do to access to the private course is just go down to the description click on the link pop in your name and your email address and you'll be good to go so definitely check it out yeah guys we have more than 62,000 students registered in that course already so it's helped a lot of people um everything's going to be condensed into one particular website so it's going to help you a lot knowing what classes you already took from this course and what not and you can just access it whenever you want just click the link below and register with your email and we'll see you guys there peace peace all day man all day man I'm calling all day man know what I'm saying calling all day man know what I'm saying i' been calling what