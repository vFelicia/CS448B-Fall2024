With timestamps:

00:04 - hello again this is matt
00:06 - and this is the fifth video of my
00:08 - supersupposed beginner's guide on
00:09 - youtube in this video we're going to be
00:10 - looking at what happens in your computer
00:12 - when you create and use variables in
00:14 - your c plus postcode more specifically
00:16 - we're going to be looking at how the
00:18 - computer allocates resources
00:19 - for variables that you create in your
00:21 - code just before we start i'd like to
00:22 - ask you guys to please subscribe to my
00:24 - youtube channel as it is the only way to
00:25 - see if people are actually enjoying
00:27 - these videos
00:27 - and if they want to see more c plus plus
00:29 - guide videos so let's get to it
00:32 - what i've got here is a simple cmake
00:34 - slash siplus plus project which is
00:36 - pretty much identical to the project we
00:38 - had in the last video
00:39 - if you don't know how we ended up here
00:41 - please watch my previous videos
00:42 - as i explained very well in those videos
00:44 - how to create and use variables
00:45 - in your simplest source code the only
00:47 - thing i've changed is the name of the
00:49 - variable that we have inside the program
00:51 - previously this variable was called my
00:53 - value i believe but now it's called my
00:54 - age and it represents an
00:56 - h value and in a whole number containing
00:58 - my age
00:59 - and this the program simply outputs that
01:01 - value
01:02 - in a string that says value of my age is
01:05 - and then it appends
01:06 - the value of my age so if you run this
01:08 - code you'll be able to see just that
01:10 - as you can see here now going into the
01:13 - main topic of this video i want to
01:15 - discuss
01:15 - what your computer does under the hood
01:17 - when you create a variable such as my
01:19 - age here
01:20 - in line seven and to do that i've
01:21 - created a notepad with a grid
01:23 - representing your ram your computer's
01:25 - ram where all the values for variables
01:27 - and data that you create inside your
01:28 - computer
01:29 - will be stored if you didn't know this
01:31 - your computer ram can be fought of
01:33 - just a continuous block or continuous
01:35 - array
01:36 - of data where the cpu can access each
01:38 - individual byte and if you don't know
01:40 - what bytes are
01:41 - bytes are pretty much just a set of
01:43 - binary digits
01:44 - which are pretty much different ways to
01:47 - represent
01:48 - numbers in computers using only two
01:51 - digits
01:52 - such as the number three the number
01:53 - three is written as this as you know
01:55 - but in binary the number three is
01:57 - represented with this
01:58 - set of binary digits of bits and in
02:02 - hexadecimal which is what we're actually
02:03 - going to be using this video for the
02:04 - most part
02:05 - which again is just a different way of
02:07 - writing numbers is represented
02:09 - as this and that is base 16. if you
02:12 - don't know how to do this conversion
02:13 - between decimals
02:14 - to binary and binary to hexadecimals you
02:17 - can
02:18 - simply open your calculator on windows
02:20 - and select the program
02:21 - mode select the base you want to work
02:23 - with in our case we're going to be
02:25 - entering numbers
02:25 - in decimals and then just type the
02:27 - number you want to
02:29 - convert here such as 79 and you can see
02:32 - that 79 is equal to this in binary
02:34 - and this in hexadecimal 4f now if you're
02:37 - not using
02:37 - windows you can simply google decimal to
02:39 - hexadecimal
02:40 - calculator and i'm pretty sure you're
02:42 - going to find something useful out there
02:43 - another important note
02:45 - is i am pretty much simplifying a lot of
02:47 - things here
02:48 - so i'm not going to be talking about cpu
02:50 - caches or registers in this tutorial
02:53 - and we are assuming that all the data
02:55 - that you create inside the program
02:56 - will be stored in the ram so now that
02:58 - you understand the setup that i've made
03:00 - here
03:01 - we can actually begin to look at what
03:02 - happens inside your program
03:04 - when you create a variable so the first
03:07 - thing
03:07 - that happens here so when you say int my
03:10 - age regardless of whether you know
03:12 - you are defining a value to a whether
03:14 - you're not you're putting an initial
03:15 - value to it or not
03:16 - your program is going to ask the cpu to
03:18 - allocate
03:19 - just enough memory to store one integer
03:21 - variable inside my age here
03:24 - and what does that actually look like in
03:25 - the run well so your program is actually
03:27 - instructing the cpu
03:29 - to request some memory from the ram that
03:31 - has been currently unused so
03:33 - your program can use it internally so
03:35 - it's going to say something like
03:36 - hey can i please have four bytes to
03:38 - store an integer value and your ram is
03:40 - going to retrieve a position to the
03:42 - starting byte where your integer is
03:43 - going to be storing
03:44 - so it could be something like here for
03:46 - example i'm highlighting
03:48 - the four cells that will be storing the
03:50 - integer and the reason why
03:52 - i know it will pretty much ask for four
03:54 - bytes here so four cells
03:55 - is because you can actually google uh
03:57 - the c plus plus integer ranges in this
04:00 - particular page it actually tells me
04:01 - what the typical size of each type that
04:04 - i've got here
04:05 - is so for in our case we've got an
04:07 - integer type here
04:09 - and if you go to this page it says here
04:10 - that integers are typically four bytes
04:12 - in fact for all the architectures that i
04:14 - know out there for all the computers
04:16 - that i know out there
04:17 - in c plus suppose integers are always
04:19 - four bytes i've not seen a different
04:20 - value yet but theoretically this would
04:22 - depend on your
04:23 - architecture and your compiler but in
04:25 - our case we have four bytes
04:26 - so what your program is going to do when
04:29 - it reads this is going to ask for the
04:30 - ram
04:31 - for four bytes and the ram is going to
04:32 - return an address in memory so the
04:34 - starting
04:35 - point here where you're going to store
04:37 - your value okay
04:38 - and one thing i want to note as well is
04:41 - that if you're not defining the value
04:42 - this memory that you have just requested
04:44 - here is going to be
04:46 - uninitialized and what that means is
04:48 - that you have no way to tell
04:50 - which value is going to be stored in
04:51 - those bytes that you've requested when
04:53 - you actually get a hold of it
04:54 - so it could be anything anything that
04:56 - the previous programs which were running
04:58 - on your computer will have stored on
04:59 - that particular memory that's now
05:00 - unused so it could be something like a b
05:05 - f f and then
05:08 - this here so anyway it's a complete
05:10 - bogus value you have no control
05:12 - over what value you actually get when
05:14 - you just request it
05:15 - now the interesting thing of this line
05:16 - here is that we're actually requesting
05:18 - for the
05:19 - bytes to store the integer and we're
05:21 - actually defining a value to it we're
05:22 - actually giving a value to initialize it
05:24 - with so what your computer is going to
05:26 - do is
05:27 - it will pretty much go back to your ram
05:30 - and request that memory but straight
05:32 - away it's also going to
05:34 - assign that memory with the value that
05:37 - you've added in your code here so 24
05:39 - and if you look at the calculator 24 in
05:42 - decimal
05:43 - is simply equals to 18 hexadecimal so
05:46 - what this is actually gonna store here
05:49 - is simply zero zero zero zero
05:52 - zero zero one eight and this is what is
05:55 - going to be
05:55 - inside your ram once you write the line
05:58 - of code here
05:59 - line seven and if you're actually
06:01 - understanding this you see why
06:03 - i said in the last video to always
06:05 - initialize
06:06 - values when you can and not to use them
06:08 - before you actually give it a value
06:09 - for example if i had a value called
06:13 - number of cars and i left it
06:17 - uninitialized and i were to simply print
06:19 - out the value here
06:27 - the value that you would print out is
06:28 - undefined and
06:30 - in my case it doesn't actually compile
06:31 - because i've got some flags enabled that
06:33 - will prevent the sort of bug from
06:34 - occurring
06:35 - but what would this actually do is it
06:37 - would request
06:39 - a different space in the ram and again
06:41 - this is not necessarily right next to
06:43 - the value that we've just
06:44 - got from my for the variable my my age
06:47 - here so it will be a different value
06:49 - won't be right next to it
06:50 - you'll be somewhere else that's
06:51 - currently in use so for example it will
06:53 - be
06:53 - on say location 42 here as you can see
06:56 - on the left so start here
06:58 - and it will request four bytes of memory
07:02 - and and let's say that the value that
07:05 - was previously in there is something
07:07 - like
07:08 - ff ff
07:12 - ff and ff so the value that we have
07:16 - here in number of cars currently when
07:18 - unassigned
07:19 - is this hypothetical value of ffffffff
07:24 - that was that previously before you
07:26 - requested that
07:27 - ram memory and obviously if you were to
07:30 - print it out you would just be a random
07:31 - value that you have no control over
07:33 - so this is why it's always good to if
07:36 - you can always define
07:37 - a value when you're creating a variable
07:39 - so something like five here
07:42 - okay and i've actually made a misspell
07:44 - it should be number of cars
07:46 - so now this says that the number of cars
07:48 - that i have is
07:49 - five and you have control over that
07:50 - value because you gave it a value in the
07:52 - first place
07:53 - and i just wanna know that i don't
07:54 - actually have five cars i have zero cars
07:56 - at the moment and i really wish i had
07:57 - five cars
07:58 - so that's it guys i'm gonna leave this
08:00 - video here and i hope you've understood
08:02 - uh the idea of allocating space in your
08:05 - ram
08:06 - to be used for your variables so
08:07 - whenever you create a variable you're
08:09 - pretty much requesting some space in the
08:11 - ram
08:11 - and that variable whenever you assign a
08:13 - value to it it's going to override the
08:14 - value that you currently have
08:16 - in your space in your ram okay so this
08:18 - is pretty much the idea and i just want
08:20 - you guys to think of any computer
08:21 - program
08:22 - out there as a set of instructions that
08:24 - tells your cpu
08:25 - how to create modify and move values
08:28 - around and that's pretty much what every
08:29 - program does so understanding
08:31 - this idea is pretty much essential to
08:33 - any programmer well so i'll leave this
08:34 - video here
08:35 - i hope you guys have understood i have
08:36 - simplified a lot of things
08:38 - but if you've got any questions if
08:40 - you've got any feedback please comment
08:41 - below and i'll get back to you as soon
08:43 - as i can so that's it thank you guys
08:44 - bye-bye

Cleaned transcript:

hello again this is matt and this is the fifth video of my supersupposed beginner's guide on youtube in this video we're going to be looking at what happens in your computer when you create and use variables in your c plus postcode more specifically we're going to be looking at how the computer allocates resources for variables that you create in your code just before we start i'd like to ask you guys to please subscribe to my youtube channel as it is the only way to see if people are actually enjoying these videos and if they want to see more c plus plus guide videos so let's get to it what i've got here is a simple cmake slash siplus plus project which is pretty much identical to the project we had in the last video if you don't know how we ended up here please watch my previous videos as i explained very well in those videos how to create and use variables in your simplest source code the only thing i've changed is the name of the variable that we have inside the program previously this variable was called my value i believe but now it's called my age and it represents an h value and in a whole number containing my age and this the program simply outputs that value in a string that says value of my age is and then it appends the value of my age so if you run this code you'll be able to see just that as you can see here now going into the main topic of this video i want to discuss what your computer does under the hood when you create a variable such as my age here in line seven and to do that i've created a notepad with a grid representing your ram your computer's ram where all the values for variables and data that you create inside your computer will be stored if you didn't know this your computer ram can be fought of just a continuous block or continuous array of data where the cpu can access each individual byte and if you don't know what bytes are bytes are pretty much just a set of binary digits which are pretty much different ways to represent numbers in computers using only two digits such as the number three the number three is written as this as you know but in binary the number three is represented with this set of binary digits of bits and in hexadecimal which is what we're actually going to be using this video for the most part which again is just a different way of writing numbers is represented as this and that is base 16. if you don't know how to do this conversion between decimals to binary and binary to hexadecimals you can simply open your calculator on windows and select the program mode select the base you want to work with in our case we're going to be entering numbers in decimals and then just type the number you want to convert here such as 79 and you can see that 79 is equal to this in binary and this in hexadecimal 4f now if you're not using windows you can simply google decimal to hexadecimal calculator and i'm pretty sure you're going to find something useful out there another important note is i am pretty much simplifying a lot of things here so i'm not going to be talking about cpu caches or registers in this tutorial and we are assuming that all the data that you create inside the program will be stored in the ram so now that you understand the setup that i've made here we can actually begin to look at what happens inside your program when you create a variable so the first thing that happens here so when you say int my age regardless of whether you know you are defining a value to a whether you're not you're putting an initial value to it or not your program is going to ask the cpu to allocate just enough memory to store one integer variable inside my age here and what does that actually look like in the run well so your program is actually instructing the cpu to request some memory from the ram that has been currently unused so your program can use it internally so it's going to say something like hey can i please have four bytes to store an integer value and your ram is going to retrieve a position to the starting byte where your integer is going to be storing so it could be something like here for example i'm highlighting the four cells that will be storing the integer and the reason why i know it will pretty much ask for four bytes here so four cells is because you can actually google uh the c plus plus integer ranges in this particular page it actually tells me what the typical size of each type that i've got here is so for in our case we've got an integer type here and if you go to this page it says here that integers are typically four bytes in fact for all the architectures that i know out there for all the computers that i know out there in c plus suppose integers are always four bytes i've not seen a different value yet but theoretically this would depend on your architecture and your compiler but in our case we have four bytes so what your program is going to do when it reads this is going to ask for the ram for four bytes and the ram is going to return an address in memory so the starting point here where you're going to store your value okay and one thing i want to note as well is that if you're not defining the value this memory that you have just requested here is going to be uninitialized and what that means is that you have no way to tell which value is going to be stored in those bytes that you've requested when you actually get a hold of it so it could be anything anything that the previous programs which were running on your computer will have stored on that particular memory that's now unused so it could be something like a b f f and then this here so anyway it's a complete bogus value you have no control over what value you actually get when you just request it now the interesting thing of this line here is that we're actually requesting for the bytes to store the integer and we're actually defining a value to it we're actually giving a value to initialize it with so what your computer is going to do is it will pretty much go back to your ram and request that memory but straight away it's also going to assign that memory with the value that you've added in your code here so 24 and if you look at the calculator 24 in decimal is simply equals to 18 hexadecimal so what this is actually gonna store here is simply zero zero zero zero zero zero one eight and this is what is going to be inside your ram once you write the line of code here line seven and if you're actually understanding this you see why i said in the last video to always initialize values when you can and not to use them before you actually give it a value for example if i had a value called number of cars and i left it uninitialized and i were to simply print out the value here the value that you would print out is undefined and in my case it doesn't actually compile because i've got some flags enabled that will prevent the sort of bug from occurring but what would this actually do is it would request a different space in the ram and again this is not necessarily right next to the value that we've just got from my for the variable my my age here so it will be a different value won't be right next to it you'll be somewhere else that's currently in use so for example it will be on say location 42 here as you can see on the left so start here and it will request four bytes of memory and and let's say that the value that was previously in there is something like ff ff ff and ff so the value that we have here in number of cars currently when unassigned is this hypothetical value of ffffffff that was that previously before you requested that ram memory and obviously if you were to print it out you would just be a random value that you have no control over so this is why it's always good to if you can always define a value when you're creating a variable so something like five here okay and i've actually made a misspell it should be number of cars so now this says that the number of cars that i have is five and you have control over that value because you gave it a value in the first place and i just wanna know that i don't actually have five cars i have zero cars at the moment and i really wish i had five cars so that's it guys i'm gonna leave this video here and i hope you've understood uh the idea of allocating space in your ram to be used for your variables so whenever you create a variable you're pretty much requesting some space in the ram and that variable whenever you assign a value to it it's going to override the value that you currently have in your space in your ram okay so this is pretty much the idea and i just want you guys to think of any computer program out there as a set of instructions that tells your cpu how to create modify and move values around and that's pretty much what every program does so understanding this idea is pretty much essential to any programmer well so i'll leave this video here i hope you guys have understood i have simplified a lot of things but if you've got any questions if you've got any feedback please comment below and i'll get back to you as soon as i can so that's it thank you guys byebye
