With timestamps:

00:04 - hello again this is matt
00:06 - and this is the third video of my simple
00:08 - supposed beginners guide series on
00:09 - youtube
00:10 - and in this video we're going to be
00:12 - going over the program that we wrote in
00:14 - the last video and we're going to
00:15 - analyze
00:16 - each line in the c plus plus code
00:17 - looking at what they do and why they are
00:19 - necessary
00:20 - again just as a note this is pretty much
00:22 - a compilation of information i
00:23 - previously wrote on my website
00:25 - in particular this post dissecting the
00:26 - simplest simplest first program
00:28 - talks about everything we're going to be
00:30 - looking at in this video so if you
00:32 - haven't quite understood the ideas
00:33 - presented here please have a look at
00:35 - this article
00:36 - i'm pretty sure that it should be clear
00:38 - enough to you after reading all of this
00:39 - so let's get straight into it the first
00:41 - thing you're going to do is you're going
00:42 - to open your id
00:44 - of choice in my case i've got visual
00:45 - studio 2019
00:47 - but if you've opted for the c line
00:48 - installation open c line
00:50 - the next thing you're going to do is
00:51 - you're going to open that simple program
00:52 - directory
00:53 - i know that for my case i can see it
00:55 - here on the left but if you can't see
00:56 - the simple program
00:57 - directory that we created in the last
00:58 - video just navigate to it in my case
01:01 - it's on the desktop coding
01:04 - and cpu simple program
01:07 - open the folder and as you can see here
01:11 - we've got everything that we had in the
01:13 - last video
01:13 - so we've got the main.cpp source code
01:16 - we've got the cmake lists
01:18 - which tell cmake the structure of your
01:20 - project again if you don't know
01:22 - what this is please refer back to the
01:24 - last video
01:25 - watch that i explain how to make a very
01:28 - simple cmake project with just one
01:30 - source file
01:31 - ie main.cpp and this is the
01:34 - source code that we had so this is the
01:36 - cpp code here
01:37 - i've zoomed in quite a bit so you guys
01:39 - can see the text better
01:41 - without me having to edit the video too
01:43 - much and zooming in everywhere
01:44 - so the intention for this video is to go
01:46 - over this file here main.cpp
01:48 - and i'm going to explain every line and
01:50 - why they are necessary now i'm going to
01:52 - begin
01:52 - by talking about this int main function
01:55 - here
01:56 - if you think about it when you open an
01:58 - executable a program
02:00 - in your computer such as google chrome
02:02 - visual studio or even a game that you
02:04 - play
02:05 - as soon as you open the program the
02:06 - computer needs to know where to start
02:09 - executing so which lines of code are
02:11 - going to be executed first as soon as
02:12 - you open that program
02:14 - an int main this this this whole line
02:16 - here this this whole
02:17 - block of code here is the entry point of
02:20 - your program
02:20 - so this is where your program will start
02:23 - executing
02:24 - so everything inside these curly braces
02:26 - will start executing
02:27 - first now one thing i'd like to point
02:29 - out is that
02:31 - into main this design here line three
02:33 - defines a function
02:35 - called main and returns
02:38 - values of type integer now if you don't
02:42 - know what a function is don't worry too
02:43 - much if you know a little bit about
02:45 - mathematical functions
02:46 - it's essentially the same in programming
02:48 - in a sense that functions in programming
02:50 - are
02:51 - pretty much a black box where you put
02:52 - some values in and you get some values
02:54 - out
02:54 - okay in the case of c plus plus this is
02:56 - pretty much a standard definition of a
02:58 - function
02:59 - so main which is the name of the
03:00 - function takes no parameters
03:04 - as you can see here this is what the
03:05 - open and close brackets mean
03:07 - no parameters and returns integer values
03:10 - this is what comes before the name
03:12 - and everything inside the open and curly
03:14 - braces is the code that
03:16 - executes when once this function is
03:18 - called once this function is executed
03:20 - okay just so just to summarize
03:22 - as soon as you start your program here
03:23 - simple program once you compile it and
03:26 - execute it the code that's going to run
03:29 - first
03:29 - is everything inside here the intermain
03:32 - function
03:32 - okay now the next thing that we have is
03:35 - what we call the scope of the function
03:37 - so the code that runs when the function
03:39 - is called
03:39 - and this is represented by line four to
03:42 - line six here
03:43 - and in c plus plus you indicate the
03:46 - scope of the function
03:47 - by opening the curly braces after the
03:49 - function definition here as you can see
03:52 - and closing the curly braces so
03:53 - everything in between the open and curly
03:55 - braces
03:56 - is the code that runs when you run the
03:58 - function main
03:59 - next up is the stdc out
04:02 - hello world now this is a little bit
04:05 - more difficult to explain because
04:07 - firstly
04:07 - we need to actually talk about this
04:09 - first line here include iostream
04:11 - in c plus plus hash include and then
04:14 - whatever comes after it
04:16 - will essentially tell the compiler to
04:18 - take this file
04:19 - iostream and copy the contents of it up
04:22 - here where the include is
04:24 - so this is what the compiler is going to
04:25 - do in c plus plus you can actually see
04:27 - what this iostream file is and what
04:29 - and what's inside it by hovering on the
04:30 - name and pressing f12
04:32 - it will take the definition of that file
04:35 - and you can see where the file is if i
04:36 - actually
04:37 - zoom in here you can see that it's in c
04:38 - programs microsoft visual studio
04:40 - community blah blah
04:41 - iostream and this has a lot of code here
04:44 - so essentially what the compiler is
04:45 - going to do is it's going to take all
04:46 - the contents of this file
04:48 - and copy it to the top of my file here
04:50 - main.cpp
04:52 - okay so to be more specific this is
04:54 - called an
04:55 - directive and it tells the compiler to
04:57 - copy all
04:58 - the code inside this file that comes
05:00 - here at the top of your c
05:02 - suppose source code in the case of
05:04 - iostream it is a header that comes with
05:06 - the compiler by default so most
05:08 - compilers such as microsoft visual
05:11 - uh c plus plus compiler gcc and clang
05:14 - on linux will all have this header
05:17 - available for you to include it
05:19 - and this is essentially how you include
05:20 - code defined somewhere else
05:23 - maybe in your project or in your system
05:25 - inside
05:26 - your source code with include directives
05:29 - okay
05:30 - and we're including i o stream here
05:32 - because it defines this functionality
05:34 - here
05:34 - so it defines std c out in c plus plus
05:37 - this is called a output buffer and this
05:40 - buffer will essentially output the
05:42 - message
05:43 - to the console so stdc out stands for
05:46 - console output if i believe
05:47 - and it's part of the c plus plus
05:50 - standard library that's why you've got
05:51 - an std
05:52 - column column here this is called a
05:54 - namespace i'm not don't worry too much
05:56 - if you don't quite get these things here
05:58 - this is just the first time we're seeing
06:00 - this but i will go into more detail in
06:02 - the future
06:03 - okay so this line here essentially says
06:06 - hello world to the console
06:08 - so hello world is the message been sent
06:10 - to what we call
06:11 - the output buffer the console output
06:13 - buffer and the syntax to do that is
06:15 - is what you can see here so there's a
06:17 - less than less than sign
06:19 - i have to see out and the message after
06:21 - it okay
06:22 - so if you run the program you should see
06:24 - that
06:26 - it just says hello world and exits as
06:29 - you can see here so your program runs
06:31 - says hello world and exits with code
06:33 - zero
06:35 - okay now it's interesting that you can
06:38 - see
06:38 - a code being returned from from your
06:40 - program so code zero
06:41 - so what does that mean long story shore
06:45 - that is the value returned by your
06:47 - function main okay
06:49 - now you might be wondering where that
06:51 - zero comes from and essentially
06:53 - by default the compilers will
06:55 - automatically add this line of code
06:57 - after your function main so by default
07:01 - the compiler adds a return
07:02 - zero if you have no return statement in
07:05 - your phone in the main function
07:07 - and this is only valid for the main
07:08 - function this doesn't this is not a
07:10 - general rule for functions in c plus
07:12 - plus
07:12 - so in main if you don't add a return the
07:14 - compiler will automatically add a return
07:16 - zero at the end of your function and by
07:19 - convention
07:19 - zero means success and anything that's
07:22 - not zero
07:23 - means a failure so unless you don't want
07:25 - the default behavior to return a zero to
07:27 - say that everything
07:28 - worked just fine unless you've got a
07:31 - very good reason not to
07:32 - you would use return and then another
07:34 - value here to indicate the error code of
07:36 - your program okay
07:37 - so if i return minus one you should be
07:39 - able to see when you run
07:41 - the code that you returned -1 here on
07:43 - visual studio
07:44 - and it's essentially the same on c line
07:46 - as well you'll be able to see the output
07:47 - at the bottom tab i believe of your ide
07:50 - well guys i'm going to leave this video
07:52 - here
07:52 - i think we've actually gone through
07:54 - quite a lot even though there isn't much
07:55 - code to go over but again if you haven't
07:58 - quite understood
07:59 - everything that i've explained in this
08:00 - video please
08:02 - read this post that i created on my
08:04 - website it talks
08:05 - about all these things in much more
08:07 - detail and in a much
08:09 - simpler way to understand it i believe
08:11 - as well everything is in text so you can
08:13 - just
08:13 - reread it if you haven't quite
08:14 - understood something if you have any
08:16 - questions if you have
08:17 - any issues compiling the code that we we
08:19 - went over
08:20 - in this video please let me know in the
08:22 - comments and i will try to help you
08:23 - okay so until next video bye

Cleaned transcript:

hello again this is matt and this is the third video of my simple supposed beginners guide series on youtube and in this video we're going to be going over the program that we wrote in the last video and we're going to analyze each line in the c plus plus code looking at what they do and why they are necessary again just as a note this is pretty much a compilation of information i previously wrote on my website in particular this post dissecting the simplest simplest first program talks about everything we're going to be looking at in this video so if you haven't quite understood the ideas presented here please have a look at this article i'm pretty sure that it should be clear enough to you after reading all of this so let's get straight into it the first thing you're going to do is you're going to open your id of choice in my case i've got visual studio 2019 but if you've opted for the c line installation open c line the next thing you're going to do is you're going to open that simple program directory i know that for my case i can see it here on the left but if you can't see the simple program directory that we created in the last video just navigate to it in my case it's on the desktop coding and cpu simple program open the folder and as you can see here we've got everything that we had in the last video so we've got the main.cpp source code we've got the cmake lists which tell cmake the structure of your project again if you don't know what this is please refer back to the last video watch that i explain how to make a very simple cmake project with just one source file ie main.cpp and this is the source code that we had so this is the cpp code here i've zoomed in quite a bit so you guys can see the text better without me having to edit the video too much and zooming in everywhere so the intention for this video is to go over this file here main.cpp and i'm going to explain every line and why they are necessary now i'm going to begin by talking about this int main function here if you think about it when you open an executable a program in your computer such as google chrome visual studio or even a game that you play as soon as you open the program the computer needs to know where to start executing so which lines of code are going to be executed first as soon as you open that program an int main this this this whole line here this this whole block of code here is the entry point of your program so this is where your program will start executing so everything inside these curly braces will start executing first now one thing i'd like to point out is that into main this design here line three defines a function called main and returns values of type integer now if you don't know what a function is don't worry too much if you know a little bit about mathematical functions it's essentially the same in programming in a sense that functions in programming are pretty much a black box where you put some values in and you get some values out okay in the case of c plus plus this is pretty much a standard definition of a function so main which is the name of the function takes no parameters as you can see here this is what the open and close brackets mean no parameters and returns integer values this is what comes before the name and everything inside the open and curly braces is the code that executes when once this function is called once this function is executed okay just so just to summarize as soon as you start your program here simple program once you compile it and execute it the code that's going to run first is everything inside here the intermain function okay now the next thing that we have is what we call the scope of the function so the code that runs when the function is called and this is represented by line four to line six here and in c plus plus you indicate the scope of the function by opening the curly braces after the function definition here as you can see and closing the curly braces so everything in between the open and curly braces is the code that runs when you run the function main next up is the stdc out hello world now this is a little bit more difficult to explain because firstly we need to actually talk about this first line here include iostream in c plus plus hash include and then whatever comes after it will essentially tell the compiler to take this file iostream and copy the contents of it up here where the include is so this is what the compiler is going to do in c plus plus you can actually see what this iostream file is and what and what's inside it by hovering on the name and pressing f12 it will take the definition of that file and you can see where the file is if i actually zoom in here you can see that it's in c programs microsoft visual studio community blah blah iostream and this has a lot of code here so essentially what the compiler is going to do is it's going to take all the contents of this file and copy it to the top of my file here main.cpp okay so to be more specific this is called an directive and it tells the compiler to copy all the code inside this file that comes here at the top of your c suppose source code in the case of iostream it is a header that comes with the compiler by default so most compilers such as microsoft visual uh c plus plus compiler gcc and clang on linux will all have this header available for you to include it and this is essentially how you include code defined somewhere else maybe in your project or in your system inside your source code with include directives okay and we're including i o stream here because it defines this functionality here so it defines std c out in c plus plus this is called a output buffer and this buffer will essentially output the message to the console so stdc out stands for console output if i believe and it's part of the c plus plus standard library that's why you've got an std column column here this is called a namespace i'm not don't worry too much if you don't quite get these things here this is just the first time we're seeing this but i will go into more detail in the future okay so this line here essentially says hello world to the console so hello world is the message been sent to what we call the output buffer the console output buffer and the syntax to do that is is what you can see here so there's a less than less than sign i have to see out and the message after it okay so if you run the program you should see that it just says hello world and exits as you can see here so your program runs says hello world and exits with code zero okay now it's interesting that you can see a code being returned from from your program so code zero so what does that mean long story shore that is the value returned by your function main okay now you might be wondering where that zero comes from and essentially by default the compilers will automatically add this line of code after your function main so by default the compiler adds a return zero if you have no return statement in your phone in the main function and this is only valid for the main function this doesn't this is not a general rule for functions in c plus plus so in main if you don't add a return the compiler will automatically add a return zero at the end of your function and by convention zero means success and anything that's not zero means a failure so unless you don't want the default behavior to return a zero to say that everything worked just fine unless you've got a very good reason not to you would use return and then another value here to indicate the error code of your program okay so if i return minus one you should be able to see when you run the code that you returned 1 here on visual studio and it's essentially the same on c line as well you'll be able to see the output at the bottom tab i believe of your ide well guys i'm going to leave this video here i think we've actually gone through quite a lot even though there isn't much code to go over but again if you haven't quite understood everything that i've explained in this video please read this post that i created on my website it talks about all these things in much more detail and in a much simpler way to understand it i believe as well everything is in text so you can just reread it if you haven't quite understood something if you have any questions if you have any issues compiling the code that we we went over in this video please let me know in the comments and i will try to help you okay so until next video bye
