With timestamps:

00:04 - hi again this is matt
00:06 - and this is the second video of my c
00:07 - plus plus beginners courses
00:09 - guide and in this video i'm going to be
00:11 - teaching you guys how to create
00:13 - a very basic simple source program and
00:15 - how to build it with cmake
00:17 - just as a side note uh this video is
00:20 - pretty much a compilation
00:21 - of two posts i previously wrote on my
00:23 - website the first one being dissecting
00:26 - the simplest c plus plus program which
00:27 - talks about the the
00:29 - very uh simplest simplest program you
00:32 - can have
00:33 - and the second one being a simple
00:35 - introduction to cmake
00:36 - where i talk about what cmake is and why
00:38 - we need it
00:39 - okay so let's get to it so first of all
00:42 - let's begin by creating a directory
00:44 - where we're going to store all
00:46 - our source files all our c plus code and
00:49 - the c make files that we need
00:50 - in my case i've got a folder on the
00:52 - desktop called coding
00:53 - and inside there i'm going to create a
00:55 - folder called simple program
00:59 - okay now the next step is to create the
01:03 - simplest simple supposed source code so
01:05 - source code or source file is
01:07 - simply a text file with c plus plus code
01:09 - in it and to do that
01:11 - on windows you can use notepad to do it
01:14 - so if we open notepad we can write the
01:16 - following
01:19 - and this is the simplest simplest
01:21 - program you can have
01:22 - when saving it you're going to click on
01:24 - file save as
01:27 - select the directory we just created so
01:29 - the file is going to go under the
01:30 - directory
01:32 - coding simple program and the file name
01:34 - is going to be main.cpp
01:36 - okay and make sure you select all files
01:39 - if you're using notepad so the file
01:41 - doesn't get
01:41 - saved as a text file as a txt file okay
01:45 - and once you've done that you should be
01:46 - able to see main.cpp here okay
01:48 - now if you're on linux i would recommend
01:50 - just simply using the terminal
01:52 - and a program called nano and i'm going
01:53 - to explain how to do that because i've
01:56 - actually got
01:56 - linux running on my windows machine so
01:59 - if you're on window if you're on linux
02:01 - uh let me just open a linux terminal
02:04 - again you're going to navigate to the
02:05 - directory you just created
02:06 - if you have created one in my case on
02:09 - desktop
02:10 - and simple oops city coding
02:15 - and simple program i believe okay so
02:18 - now you can see that we're under this
02:20 - directory on the terminal
02:22 - and what we're going to do is we're
02:24 - going to open nano
02:25 - and up and create a file called main.cpp
02:28 - and nano is going to automatically save
02:30 - that file it's going to create that file
02:32 - on the directory you're in once you save
02:35 - it okay so
02:36 - once you've done that simply type the
02:38 - simplest program
02:40 - which is this and to exit it while
02:43 - saving is control x
02:45 - type in y for yes and enter okay
02:48 - and that should have saved it on your
02:49 - linux machine it should have created
02:51 - a program called main.cpp as you can see
02:53 - here
02:54 - okay because i'm actually running linux
02:57 - on my windows
02:58 - he actually created the same file inside
03:00 - my simple program directory
03:02 - which is okay i'm also assuming that if
03:04 - you're on linux you know how to use the
03:06 - terminal
03:06 - if you've never used it before all you
03:09 - have to do to open the terminal is to
03:11 - open the search bar of your
03:12 - distribution in the case of ubuntu you
03:15 - can press a button called search i
03:16 - believe
03:17 - and type in terminal and that will bring
03:20 - up the terminal for you so you click on
03:21 - that program and a window like this
03:23 - will appear okay now the next step is
03:25 - creating the very basic
03:27 - cmake lists file that cmake needs in
03:30 - order to be able to tell your project
03:32 - structure and how to tell your system
03:34 - how to build it okay
03:36 - you could again use notepad if you're on
03:38 - windows so it's the same thing as the uh
03:40 - as creating the main.cpp file but
03:43 - instead i'm gonna actually use my linux
03:46 - system and my windows to do that with
03:47 - nano because it has some syntax
03:49 - highlighting
03:51 - so all i'm going to do on linux at least
03:53 - is
03:54 - open nano cmake lists
03:58 - dot txt and this is the name of the file
04:00 - you want to create
04:01 - if you're on windows so you're going to
04:02 - type in uh you're going to save the file
04:04 - as
04:05 - cmakelists.txt this time okay not cpp
04:08 - anymore
04:09 - this is a different file type just a
04:10 - text file
04:12 - once you've saved that on when on
04:14 - windows you should already
04:16 - see it on the directory but because
04:17 - we're on nano is only gonna
04:19 - save it once we exit to okay and
04:23 - for this file for this to work you have
04:24 - to write uh
04:26 - a few c make lines which are required by
04:28 - c make and i'm just going to write them
04:30 - out and explain to you
04:31 - guys after i write them out okay
04:36 - and this is the the most basic c make
04:38 - you can have for this type of project
04:39 - the first line c make minimum required
04:42 - tells you make
04:43 - what minimum version of c make the user
04:45 - needs to have
04:46 - in order to be able to compile your
04:48 - project in our case
04:50 - 3.10 is the minimum version you need to
04:51 - have so if you have 3.9 for example
04:54 - cmake will not let you proceed okay
04:57 - the project line project simple program
05:00 - tells you make the configurations of
05:01 - your project
05:02 - in our case we're just simply telling
05:04 - cmake the name of our
05:05 - of our project which i named it simple
05:07 - program you can name this whatever you
05:09 - want as long as
05:10 - as it's you know it's a reasonable name
05:12 - i guess it's a good name
05:14 - and the third line or the fourth line in
05:16 - this case because i've got a new line
05:18 - here
05:18 - and perhaps the most important line is
05:20 - the line add executable
05:22 - open brackets simple program space
05:24 - main.cpp
05:26 - close brackets and this tells cmake that
05:28 - we want to generate an executable
05:30 - in other words an exe file if you're in
05:32 - windows
05:34 - and that executable is going to be
05:35 - created from the source code
05:37 - or the source file main.cpp okay
05:40 - once you've done that you can save it
05:43 - type in yes
05:45 - and we should have cmake lists right
05:47 - here so whether you're on linux or
05:49 - windows
05:49 - you should have been able to to create
05:52 - this structure here okay
05:54 - so we're now ready to use cmake to build
05:57 - it so just before we go into an ide with
05:59 - this project because you could now
06:00 - open this with an ide and it will build
06:03 - just fine
06:04 - i'm going to teach you guys what happens
06:05 - under the hood when when you open
06:07 - a cmake project with your ide okay and
06:10 - for this i'm actually going to use my
06:11 - windows powershell because i want it to
06:13 - generate
06:13 - i want it i want to compile a windows
06:15 - executable no not a linux executable
06:18 - which is what would be created if i run
06:20 - it on my linux subsystem here
06:22 - okay so if i navigate to that directory
06:27 - what i could do now is ask cmake to
06:29 - build it from the command line
06:31 - and in order to do that you generally
06:33 - create a build directory for all the
06:34 - build files for all your executables and
06:36 - all your cmake cache files you don't
06:38 - have to worry about what those are for
06:39 - now
06:40 - uh so that's where cmake will put all of
06:42 - this and to do that we can just simply
06:44 - run make the
06:45 - and then the name of the directory build
06:48 - in my case
06:49 - and make there has the effect it just
06:51 - simply creates a directory under this
06:52 - directory here
06:54 - on the left and it's as you can see here
06:56 - on the on the actual windows explorer it
06:58 - simply just created a directory called
06:59 - build
07:00 - okay and what we can do now is we're
07:02 - going to navigate into the
07:04 - directory and ask cmake to configure my
07:07 - project
07:08 - to build all those cache files and
07:11 - save it inside the current directory and
07:13 - to do that
07:14 - we simply type cmake dot dot here as you
07:17 - can see
07:17 - i'm gonna zoom in so you can see it
07:19 - better and this will call
07:21 - cmake and you'll tell it to use the
07:23 - cmake lists file from the directory
07:25 - above
07:25 - so not the build directory but the cmake
07:27 - files inside simple program in our case
07:32 - so once you see this message build files
07:33 - have been written to blah blah blah
07:35 - this means that cmake generated
07:37 - everything without any errors
07:39 - now if you've got any errors please
07:40 - comment below the errors and we'll be
07:42 - able to figure those out but you
07:43 - shouldn't really have any errors if you
07:44 - follow this
07:45 - this this video line by line essentially
07:47 - if you haven't really missed anything
07:49 - else
07:49 - so what we can do now is we can tell
07:51 - cmake to build uh
07:52 - our executables from these configuration
07:54 - files uh
07:55 - just so you guys know what cmake
07:57 - actually created if we go inside the
07:58 - build directory you can see that it
07:59 - created all sorts of files here
08:01 - and because my default compiler is my
08:03 - default
08:05 - build system is visual studio it created
08:08 - visual studio
08:09 - projects here that i can just open and
08:11 - build to create my executables okay
08:13 - but it might be different depending on
08:15 - your system and depending on the
08:16 - compiles you
08:17 - the on the compilers you're using and
08:19 - what build systems you have available
08:21 - for you
08:22 - so to build it we're simply going to
08:23 - write cmake
08:25 - build dodge and this will tell cmake
08:29 - to build whatever cache files are inside
08:33 - the current directory which is
08:34 - in our case is the build directory and
08:36 - this is what the dot means
08:37 - okay uh everything completed just fine
08:41 - so now because i'm on windows i should
08:43 - be able to find my executable under
08:45 - debug
08:46 - and simpleprogram.exe and this is the
08:49 - actual program that got generated
08:51 - from the command line build here with
08:52 - cmake so i hope you guys understood what
08:54 - happens
08:55 - uh when you open this project with an
08:56 - ide when you build the project with an
08:58 - id
08:58 - he essentially does everything that
09:00 - we've done here once you open the
09:01 - project it will run
09:03 - cmake to configure the project and then
09:05 - generate those cache files
09:06 - and when building here is going to run
09:08 - this command cmake build
09:10 - with some other flags input flags onto
09:13 - this command here
09:14 - okay so let's do just that right now
09:16 - let's let's actually delete the build
09:18 - folder because we don't really need it
09:19 - anymore as you're going to be
09:20 - running on ides and we don't really care
09:23 - about the terminal shells or the command
09:24 - lines anymore as well
09:26 - let's open this project with visual
09:28 - studio and see what happens
09:30 - as i said you should have in theory
09:33 - everything you need here to open this
09:34 - project
09:35 - with visual studio okay and what you got
09:38 - to do
09:38 - is once you open visual studio you click
09:40 - on open local folder
09:42 - select the directory which in my case is
09:45 - simple
09:45 - program it's already selected for me and
09:47 - you can see that visual studio did
09:49 - its thing if you want to see that if the
09:51 - cmake worked or not you can simply click
09:53 - here on the output tab on the output
09:56 - section and click on cmake
09:57 - and you should see the exact same output
09:59 - very similar
10:00 - to what we had previously when we when
10:02 - we run cmake to configure on the command
10:04 - line so that's that's what i did under
10:06 - the hood
10:06 - so what you can do now uh to run the
10:08 - program is you're going to have to
10:10 - select the target here
10:11 - simple program.exe which comes from the
10:14 - cmake file
10:15 - the cmakelists file and we can simply
10:18 - run it
10:22 - and you can see that it just run
10:23 - successfully because it exited code zero
10:25 - it means it runs successfully and it
10:27 - simply exited the program after that
10:29 - so it builds just fine okay it's is
10:32 - interesting as well because we can
10:34 - actually on the id
10:35 - edit all the source file that we have
10:36 - for example the the intermain
10:38 - and the c make lists uh we can do we can
10:41 - do it all
10:41 - on visual studio or c line if you're
10:43 - using c line as a nice to have
10:45 - if you guys want to say hello from your
10:46 - code you can do this
10:49 - and this will get your program to say
10:51 - hello world on the console
10:53 - and exit immediately and if you run that
10:55 - again you should be able to see the
10:56 - changes
10:57 - i'm not going to explain too much what
10:59 - these things are here
11:00 - because i'm going to get into them in
11:02 - the future in this video i just want to
11:03 - show you guys how to use ides
11:05 - with with cmake to view the project okay
11:08 - now on c line it's exactly the same
11:11 - thing once you open up c line you're
11:12 - going to open
11:13 - this simple program directory as we'll
11:15 - be able to see it here
11:18 - it actually opened automatically for me
11:21 - if you haven't actually opened c line
11:24 - before you're going to have to click
11:26 - on file open and you're going to
11:29 - navigate to the directory we just
11:30 - created
11:34 - open simple program and we're ready to
11:36 - go
11:37 - and it should be the exact same thing as
11:38 - visual studio they do very similar
11:40 - things
11:41 - you can see that the project opened just
11:43 - fine so if you click on the cmake tab
11:45 - you should see
11:46 - again the configuration cmake command
11:49 - here
11:49 - and to compile it simple simply select a
11:51 - simple program exe
11:53 - and run it
11:57 - and you should be able to see that it
11:58 - said hello world and the process
12:01 - finished with code zero meaning it was
12:03 - all successful
12:04 - and that is it for this video at least
12:06 - you know exactly what happens under the
12:07 - hood in the id
12:08 - is now in terms of getting cmake to
12:12 - generate
12:12 - the structure of your project for you
12:14 - and you can build your simple
12:16 - c plus plus program with an ide now if
12:19 - you have any questions
12:20 - if you have got an error somewhere that
12:22 - you can't fix please post in the
12:24 - comments and i will make sure
12:26 - that i can help you guys solve your
12:28 - issues okay thanks for watching
12:30 - and bye

Cleaned transcript:

hi again this is matt and this is the second video of my c plus plus beginners courses guide and in this video i'm going to be teaching you guys how to create a very basic simple source program and how to build it with cmake just as a side note uh this video is pretty much a compilation of two posts i previously wrote on my website the first one being dissecting the simplest c plus plus program which talks about the the very uh simplest simplest program you can have and the second one being a simple introduction to cmake where i talk about what cmake is and why we need it okay so let's get to it so first of all let's begin by creating a directory where we're going to store all our source files all our c plus code and the c make files that we need in my case i've got a folder on the desktop called coding and inside there i'm going to create a folder called simple program okay now the next step is to create the simplest simple supposed source code so source code or source file is simply a text file with c plus plus code in it and to do that on windows you can use notepad to do it so if we open notepad we can write the following and this is the simplest simplest program you can have when saving it you're going to click on file save as select the directory we just created so the file is going to go under the directory coding simple program and the file name is going to be main.cpp okay and make sure you select all files if you're using notepad so the file doesn't get saved as a text file as a txt file okay and once you've done that you should be able to see main.cpp here okay now if you're on linux i would recommend just simply using the terminal and a program called nano and i'm going to explain how to do that because i've actually got linux running on my windows machine so if you're on window if you're on linux uh let me just open a linux terminal again you're going to navigate to the directory you just created if you have created one in my case on desktop and simple oops city coding and simple program i believe okay so now you can see that we're under this directory on the terminal and what we're going to do is we're going to open nano and up and create a file called main.cpp and nano is going to automatically save that file it's going to create that file on the directory you're in once you save it okay so once you've done that simply type the simplest program which is this and to exit it while saving is control x type in y for yes and enter okay and that should have saved it on your linux machine it should have created a program called main.cpp as you can see here okay because i'm actually running linux on my windows he actually created the same file inside my simple program directory which is okay i'm also assuming that if you're on linux you know how to use the terminal if you've never used it before all you have to do to open the terminal is to open the search bar of your distribution in the case of ubuntu you can press a button called search i believe and type in terminal and that will bring up the terminal for you so you click on that program and a window like this will appear okay now the next step is creating the very basic cmake lists file that cmake needs in order to be able to tell your project structure and how to tell your system how to build it okay you could again use notepad if you're on windows so it's the same thing as the uh as creating the main.cpp file but instead i'm gonna actually use my linux system and my windows to do that with nano because it has some syntax highlighting so all i'm going to do on linux at least is open nano cmake lists dot txt and this is the name of the file you want to create if you're on windows so you're going to type in uh you're going to save the file as cmakelists.txt this time okay not cpp anymore this is a different file type just a text file once you've saved that on when on windows you should already see it on the directory but because we're on nano is only gonna save it once we exit to okay and for this file for this to work you have to write uh a few c make lines which are required by c make and i'm just going to write them out and explain to you guys after i write them out okay and this is the the most basic c make you can have for this type of project the first line c make minimum required tells you make what minimum version of c make the user needs to have in order to be able to compile your project in our case 3.10 is the minimum version you need to have so if you have 3.9 for example cmake will not let you proceed okay the project line project simple program tells you make the configurations of your project in our case we're just simply telling cmake the name of our of our project which i named it simple program you can name this whatever you want as long as as it's you know it's a reasonable name i guess it's a good name and the third line or the fourth line in this case because i've got a new line here and perhaps the most important line is the line add executable open brackets simple program space main.cpp close brackets and this tells cmake that we want to generate an executable in other words an exe file if you're in windows and that executable is going to be created from the source code or the source file main.cpp okay once you've done that you can save it type in yes and we should have cmake lists right here so whether you're on linux or windows you should have been able to to create this structure here okay so we're now ready to use cmake to build it so just before we go into an ide with this project because you could now open this with an ide and it will build just fine i'm going to teach you guys what happens under the hood when when you open a cmake project with your ide okay and for this i'm actually going to use my windows powershell because i want it to generate i want it i want to compile a windows executable no not a linux executable which is what would be created if i run it on my linux subsystem here okay so if i navigate to that directory what i could do now is ask cmake to build it from the command line and in order to do that you generally create a build directory for all the build files for all your executables and all your cmake cache files you don't have to worry about what those are for now uh so that's where cmake will put all of this and to do that we can just simply run make the and then the name of the directory build in my case and make there has the effect it just simply creates a directory under this directory here on the left and it's as you can see here on the on the actual windows explorer it simply just created a directory called build okay and what we can do now is we're going to navigate into the directory and ask cmake to configure my project to build all those cache files and save it inside the current directory and to do that we simply type cmake dot dot here as you can see i'm gonna zoom in so you can see it better and this will call cmake and you'll tell it to use the cmake lists file from the directory above so not the build directory but the cmake files inside simple program in our case so once you see this message build files have been written to blah blah blah this means that cmake generated everything without any errors now if you've got any errors please comment below the errors and we'll be able to figure those out but you shouldn't really have any errors if you follow this this this video line by line essentially if you haven't really missed anything else so what we can do now is we can tell cmake to build uh our executables from these configuration files uh just so you guys know what cmake actually created if we go inside the build directory you can see that it created all sorts of files here and because my default compiler is my default build system is visual studio it created visual studio projects here that i can just open and build to create my executables okay but it might be different depending on your system and depending on the compiles you the on the compilers you're using and what build systems you have available for you so to build it we're simply going to write cmake build dodge and this will tell cmake to build whatever cache files are inside the current directory which is in our case is the build directory and this is what the dot means okay uh everything completed just fine so now because i'm on windows i should be able to find my executable under debug and simpleprogram.exe and this is the actual program that got generated from the command line build here with cmake so i hope you guys understood what happens uh when you open this project with an ide when you build the project with an id he essentially does everything that we've done here once you open the project it will run cmake to configure the project and then generate those cache files and when building here is going to run this command cmake build with some other flags input flags onto this command here okay so let's do just that right now let's let's actually delete the build folder because we don't really need it anymore as you're going to be running on ides and we don't really care about the terminal shells or the command lines anymore as well let's open this project with visual studio and see what happens as i said you should have in theory everything you need here to open this project with visual studio okay and what you got to do is once you open visual studio you click on open local folder select the directory which in my case is simple program it's already selected for me and you can see that visual studio did its thing if you want to see that if the cmake worked or not you can simply click here on the output tab on the output section and click on cmake and you should see the exact same output very similar to what we had previously when we when we run cmake to configure on the command line so that's that's what i did under the hood so what you can do now uh to run the program is you're going to have to select the target here simple program.exe which comes from the cmake file the cmakelists file and we can simply run it and you can see that it just run successfully because it exited code zero it means it runs successfully and it simply exited the program after that so it builds just fine okay it's is interesting as well because we can actually on the id edit all the source file that we have for example the the intermain and the c make lists uh we can do we can do it all on visual studio or c line if you're using c line as a nice to have if you guys want to say hello from your code you can do this and this will get your program to say hello world on the console and exit immediately and if you run that again you should be able to see the changes i'm not going to explain too much what these things are here because i'm going to get into them in the future in this video i just want to show you guys how to use ides with with cmake to view the project okay now on c line it's exactly the same thing once you open up c line you're going to open this simple program directory as we'll be able to see it here it actually opened automatically for me if you haven't actually opened c line before you're going to have to click on file open and you're going to navigate to the directory we just created open simple program and we're ready to go and it should be the exact same thing as visual studio they do very similar things you can see that the project opened just fine so if you click on the cmake tab you should see again the configuration cmake command here and to compile it simple simply select a simple program exe and run it and you should be able to see that it said hello world and the process finished with code zero meaning it was all successful and that is it for this video at least you know exactly what happens under the hood in the id is now in terms of getting cmake to generate the structure of your project for you and you can build your simple c plus plus program with an ide now if you have any questions if you have got an error somewhere that you can't fix please post in the comments and i will make sure that i can help you guys solve your issues okay thanks for watching and bye
