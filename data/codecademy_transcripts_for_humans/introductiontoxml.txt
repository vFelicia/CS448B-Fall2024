With timestamps:

00:00 - Hi, I'm Mike with Codecademy, and in this video, we're gonna talk about one of the most important languages used when building Android apps, XML.
00:06 - XML stands for Extensible Markup Language and it's a markup language,
not a programming language.
00:12 - Essentially, it's a format for encoding data in a hierarchical or tree-like manner and it's intended to be readable by both humans and computers.
00:20 - XML is written in documents containing the extension dot XML.
00:24 - In Android applications, XML files are used to store app configuration data, like the apps manifest file Androidmanifest dot xml,
00:32 - as well as for defining the layout of elements on the screen.
00:35 - Before we dive into creating our first Android application, let's break down the structure of an XML document and familiarize ourselves with the way it works.
00:43 - An XML document is composed of a series of elements, which are organized in a hierarchical fashion through the use of tags.
00:50 - A tag is a special syntax which indicates where an element 
should be placed in a document.
00:55 - There are two main types of tags, container tags, which come in pairs,
and single tags.
01:00 - Container tags, actually, consist of two separate tags.
A start tag and an end tag.
01:05 - Each individual tag starts and ends with less than and greater than signs,
and has the name of the element in the middle.
01:11 - End tags are differentiated with a forward slash
at the beginning of the element name.
01:16 - Container tags can have other tags nested inside of them, which results in a tree-like structure of elements nested inside one another.
01:22 - Single tags, unlike container tags are self-closing,
meaning we only have one tag,
01:27 - and these look similar to start tags but have a forward slash 
after the element name.
01:32 - Different combinations of container and single tags can come together to form a deeply nested XML document.
01:38 - And now that we understand the structure of an XML document, let's look at what these elements actually do,
01:43 - and depending on where you're using the XML, the elements 
will mean different things.
01:48 - The primary place where XML is used is for defining app layouts. In the example here, we're using XML to define a linear layout
01:56 - that has both a TextView and a Button inside of it.
01:58 - You'll see also, like in the Button and TextView tags, that we can declare extra information, like android:text.
02:05 - These extra pieces of information are called attributes, and 
different elements have different attributes that they support.
02:11 - This app layout XML here, is a small example of the XML that 
might make up an Android view.
02:17 - A view is, basically, a section of visible area on the screen, and views can be nested inside one another.
02:23 - So this linear layout view might be nested inside of a navigation card, for example, which might further be nested inside the home screen of an app.
02:31 - During Android production, UI elements can be declared within 
Android Studio using XML.
02:37 - So roughly speaking, XML can be used to define and declare the visual and physical structure
02:42 - of an Android application, while Java handles the interactivity 
and functionality of an application.
02:47 - Another place where we'll use XML is in the app's main 
configuration, androidmanifest dot xml file.
02:53 - In this file, we have different elements like application and activity.
02:57 - Each of these elements defines a new piece of information
or a new section in the XML document.
03:02 - Programs are then able to parse through documents like this 
and read through each element.
03:07 - The androidmanifest dot xml file contains a bunch of these different elements, arranged in different ways,
03:12 - defining certain things about the app, including its name, components, permissions, required hardware features, etc.
03:18 - and it's used by the Android Build Tools, the operating system itself, and the Google Play Store to learn about an individual app.
03:25 - So that's a quick introduction into XML, the more you develop these Android apps, the more comfortable you're going to get using this markup language
03:32 - but for now, that should give you a taste of what it's like.

Cleaned transcript:

Hi, I'm Mike with Codecademy, and in this video, we're gonna talk about one of the most important languages used when building Android apps, XML. XML stands for Extensible Markup Language and it's a markup language, not a programming language. Essentially, it's a format for encoding data in a hierarchical or treelike manner and it's intended to be readable by both humans and computers. XML is written in documents containing the extension dot XML. In Android applications, XML files are used to store app configuration data, like the apps manifest file Androidmanifest dot xml, as well as for defining the layout of elements on the screen. Before we dive into creating our first Android application, let's break down the structure of an XML document and familiarize ourselves with the way it works. An XML document is composed of a series of elements, which are organized in a hierarchical fashion through the use of tags. A tag is a special syntax which indicates where an element should be placed in a document. There are two main types of tags, container tags, which come in pairs, and single tags. Container tags, actually, consist of two separate tags. A start tag and an end tag. Each individual tag starts and ends with less than and greater than signs, and has the name of the element in the middle. End tags are differentiated with a forward slash at the beginning of the element name. Container tags can have other tags nested inside of them, which results in a treelike structure of elements nested inside one another. Single tags, unlike container tags are selfclosing, meaning we only have one tag, and these look similar to start tags but have a forward slash after the element name. Different combinations of container and single tags can come together to form a deeply nested XML document. And now that we understand the structure of an XML document, let's look at what these elements actually do, and depending on where you're using the XML, the elements will mean different things. The primary place where XML is used is for defining app layouts. In the example here, we're using XML to define a linear layout that has both a TextView and a Button inside of it. You'll see also, like in the Button and TextView tags, that we can declare extra information, like androidtext. These extra pieces of information are called attributes, and different elements have different attributes that they support. This app layout XML here, is a small example of the XML that might make up an Android view. A view is, basically, a section of visible area on the screen, and views can be nested inside one another. So this linear layout view might be nested inside of a navigation card, for example, which might further be nested inside the home screen of an app. During Android production, UI elements can be declared within Android Studio using XML. So roughly speaking, XML can be used to define and declare the visual and physical structure of an Android application, while Java handles the interactivity and functionality of an application. Another place where we'll use XML is in the app's main configuration, androidmanifest dot xml file. In this file, we have different elements like application and activity. Each of these elements defines a new piece of information or a new section in the XML document. Programs are then able to parse through documents like this and read through each element. The androidmanifest dot xml file contains a bunch of these different elements, arranged in different ways, defining certain things about the app, including its name, components, permissions, required hardware features, etc. and it's used by the Android Build Tools, the operating system itself, and the Google Play Store to learn about an individual app. So that's a quick introduction into XML, the more you develop these Android apps, the more comfortable you're going to get using this markup language but for now, that should give you a taste of what it's like.
