With timestamps:

00:32 - hey everyone
00:34 - um i want to make sure everyone can hear
00:35 - us
00:38 - hey guys if you can hear us can you
00:39 - write down in the chat
00:52 - yay awesome cool
00:55 - hi everyone welcome to our
00:58 - episode number six for cs 101
01:02 - we're just going to take a few minutes
01:04 - and then we're going to jump in
01:29 - how's everyone's tuesday going
01:37 - actually right down in the chat where
01:38 - you guys are from
02:05 - oh california nice
02:12 - india whoa madison wisconsin
02:16 - cool
02:21 - wow you guys are from all over that's
02:34 - awesome
02:45 - that's awesome oh
02:56 - all right ben how do you feel are you
02:58 - ready to get started yeah let's do it
03:00 - all right cool i'm not seeing myself in
03:02 - the video though
03:04 - um let's see
03:08 - what if you share your screen maybe
03:13 - um let's try that
03:24 - hello hello everybody my name is ben can
03:26 - you all hear me
03:32 - someone says nice chair um all right
03:34 - joel we're gonna get
03:35 - started with the lesson today um
03:38 - thanks for that mark uh we're gonna get
03:41 - started today with our lesson on strings
03:43 - if you're following along with us here's
03:45 - the link we're going to be using
03:47 - i'll share that in the chat as well in
03:49 - case anybody's missing it but you can
03:51 - also find it in the
03:52 - link for the youtube video um
03:56 - sorry i can't i guess i can't add it to
03:57 - the chat but you can find the link in
04:00 - the description below
04:02 - uh we're gonna be talking about cs 101
04:04 - strings strings in python today
04:07 - and um for the most part uh you can see
04:09 - that this lesson is broken into
04:11 - two lessons introduction to strings in
04:14 - general
04:14 - string methods as well and then um at
04:17 - the end there's a string code challenge
04:19 - um we found that the going over those
04:21 - code challenges is actually
04:23 - super helpful so we're going to be
04:24 - focusing today on
04:26 - that code challenge down here before we
04:28 - do that we're going to do a brief
04:29 - introduction to strings
04:31 - so we're going to go through a couple of
04:32 - these components here and this
04:34 - cheat sheet so i think just to start
04:37 - galena i think it'd probably be good if
04:39 - we
04:40 - went into the introduction first just
04:42 - did a brief intro to strings and then
04:43 - went through the cheat sheet before
04:44 - going to the code challenge
04:46 - so uh so i'm going to go ahead and click
04:48 - on introduction to strings here
04:50 - and we'll jump into this first lesson
04:56 - and oh i am all the way through here let
04:59 - me go back to the beginning
05:01 - and let me do some some stuff here
05:09 - all right so uh here i am on the
05:12 - introduction and i'm gonna give y'all
05:13 - a couple seconds to uh to get
05:17 - set up so go ahead and open up this
05:18 - introduction page and while you're at it
05:21 - feel free to share in the chat whether
05:23 - or not you've used python before
05:25 - and whether you've whether or not you've
05:27 - been to one of these live streams before
05:29 - this is your first live stream let us
05:31 - know this is your first time using
05:32 - python let us know
05:34 - uh but if or if you know any other
05:36 - languages that'll be cool to know too
05:46 - and i've got that dual monitor set up
05:49 - here so that's why i'm not looking
05:50 - directly at the camera
05:55 - i'll go ahead and get started in another
05:58 - 30 seconds give you all some time to get
05:59 - set up
06:05 - yeah also feel free to write in the chat
06:06 - if you're ready to go um just post like
06:09 - a thumbs up or if you need a few more
06:10 - minutes also let us know
06:37 - all right my computer is working hard
06:39 - let me quickly close some things here
06:45 - and get started
06:57 - oh boy
07:04 - all right let's get into it then um so
07:06 - today we're going to be talking about
07:08 - strings um and specifically strings in
07:10 - python uh most programming languages or
07:12 - if not all of them
07:13 - have uh strings and strings are how we
07:17 - represent uh the words and sentences in
07:20 - our in our programs right so you know
07:23 - all languages
07:24 - how we communicate with each other
07:25 - includes words and sentences and so it
07:27 - makes sense that we can
07:28 - put words and sentences uh into our
07:31 - programs as well
07:32 - and we do all this with a string now
07:35 - here we can see that a string
07:37 - is a sequence of characters contained
07:39 - within a pair of
07:40 - either single quotes or double quotes uh
07:44 - and it doesn't matter which one you use
07:46 - both are treated the same
07:48 - uh you just want to make sure that
07:49 - you're either that these two quotes
07:51 - match each other
07:53 - a string can be any length you can have
07:56 - one character in it
07:57 - it can have a thousand characters in it
07:59 - and it can contain any letters
08:01 - numbers symbols or spaces
08:06 - so in this lesson uh we are if you go
08:08 - through this lesson
08:10 - you'll learn you'll learn a ton of
08:11 - different things about python
08:13 - strings like how to slice them and what
08:16 - that means
08:17 - um how to pull out specific characters
08:19 - search for
08:20 - strings inside other strings uh iterate
08:23 - through strings and use strings in
08:24 - conditional statements
08:26 - um as i mentioned in this live stream
08:28 - we're just gonna do a brief intro
08:29 - and then we're gonna go through those
08:30 - code challenges in the end
08:33 - so let's just go through this very first
08:34 - lesson together um or this very first
08:36 - exercise together to see how we make a
08:38 - string
08:39 - so the first instruction here says save
08:41 - your favorite word as a string to the
08:43 - variable
08:43 - favorite word i'm going to go up here
08:47 - and uh and i'm going to i have this
08:49 - variable here and i'm going to save in
08:50 - that variable
08:51 - a string of my favorite word if you want
08:53 - you can share your favorite word
08:55 - in the in the chat but i'm going to type
08:56 - in platypus
08:58 - i think platypuses are cool uh and i'm
09:01 - going to go ahead and actually put that
09:02 - in the chat so you all can see
09:04 - what i typed in here and if you want to
09:05 - you can actually share your favorite
09:07 - word and the string in the chat as well
09:09 - so you can see that you're
09:10 - you know typing it in with the right
09:11 - syntax that's my favorite word
09:16 - and we'll run and we can pass that first
09:18 - test and then print it to the console
09:22 - print favorite word and we can see what
09:25 - that looks like
09:26 - inside the console now if you're new to
09:29 - python if you've never used it before
09:32 - in python we give our variables names
09:35 - that are separated with an underscore
09:38 - and we use the print command the print
09:41 - function to display
09:43 - values to this output panel over here
09:52 - did i spell that wrong plot tipless plot
09:55 - dive yeah i don't
09:57 - i'm not an english person there we go
10:02 - i'm a programmer right i'm not an
10:03 - english major
10:05 - and that's the basics of strings um
10:07 - let's go through a couple more of these
10:08 - and then we'll go into the
10:10 - uh we'll go into the cheat sheet so
10:12 - let's continue on to the next one and i
10:13 - may have to reset a bunch of these
10:24 - how are we doing on time galena should i
10:26 - pause for some questions or
10:28 - what do you think um i think you're
10:30 - doing great so far if any
10:32 - questions come up in the chat i'll make
10:34 - sure to answer them but
10:37 - also just for just a fair warning this
10:39 - is the first time that i've done this so
10:41 - uh appreciate any patients you have
10:45 - um so let's continue on to the second
10:47 - one um
10:48 - are strings also spaces and symbols uh
10:51 - yeah so
10:52 - we can we're actually going to come up
10:53 - on that in a couple examples but yeah
10:55 - you can definitely have strings like
10:57 - um hello space world
11:00 - exclamation point this is also a string
11:03 - that counts
11:05 - so let's go through this second part
11:06 - here this is a really important concept
11:08 - of strings
11:09 - which is that strings can be thought of
11:11 - as a list of characters
11:12 - which you all learned in a previous
11:13 - lesson like any other list each
11:16 - character in a string has an
11:18 - index and so if we were to look at this
11:20 - string here
11:22 - uh blueberry which is stored in the
11:23 - variable favorite fruit
11:25 - then we can access an individual
11:28 - character from that string
11:30 - using the index so if we want to look at
11:33 - the first letter of the string we could
11:35 - we could write something like this so
11:37 - let me actually pull this
11:39 - code into my script here and so i can
11:42 - test it out
11:43 - as we can test see it in here
11:46 - so favorite fruit is blueberry
11:50 - and here i'm going to print it out there
12:01 - so here when i print out favorite fruit
12:03 - uh
12:04 - 1 we see the value l the letter l that
12:07 - character
12:09 - now you may be thinking okay why is why
12:12 - am i seeing the letter
12:13 - l and not the letter b well remember
12:15 - that lists
12:16 - start with the index zero not one so if
12:19 - i were to change this number one here to
12:21 - a zero and run it again
12:23 - then we would get that first character b
12:26 - in our output panel
12:32 - now one key component to remember about
12:36 - these indexes is that they have to be a
12:37 - whole number so if i were to do
12:40 - something like this 1.5 which is not a
12:43 - whole number
12:44 - then we would get a type error
12:49 - that says string indices must be
12:51 - integers
12:53 - so make sure that your indexes are your
12:56 - indices are
12:57 - whole numbers starting at zero
13:02 - and then we can move along to these
13:04 - instructions here
13:06 - one of the most common things that are
13:08 - represented by strings are names
13:10 - save your name as a string to the
13:11 - variable my name
13:13 - so it looks like we need to create some
13:15 - of this stuff down here so i'm just
13:17 - going to leave my code up here this is
13:18 - fine to stay
13:20 - i'm just going to go ahead and add a my
13:21 - name variable
13:24 - and set it to a string of my name and
13:26 - this time i'm going to use single quotes
13:28 - just
13:28 - to mix it up notice that i'm using
13:30 - single quotes on both ends
13:33 - making sure that they're the same if i
13:34 - were to do something like that
13:36 - that would also give me an error which
13:38 - we can see here
13:40 - just get this syntax error here so i've
13:42 - got to make sure that both of those are
13:43 - the same
13:44 - use single quotes on both sides
13:48 - have my name is ben passing that first
13:51 - test and then select the first letter of
13:52 - the variable my name and save it to
13:54 - first initial so here again i'm going to
13:58 - create a variable called first
13:59 - uh sorry first initial
14:03 - and that's going to be the first letter
14:07 - of my name so i want to grab
14:08 - that letter b there
14:12 - and as we saw in this prior example we
14:15 - can just type out
14:16 - the name of the variable so my name and
14:19 - then use brackets
14:21 - and then the index 0 is going to be that
14:23 - first character
14:25 - so first initial equals my name bracket
14:27 - 0.
14:28 - let's test that out and we're good to go
14:36 - now if you want you can also test out
14:38 - your code just to make sure that it's
14:39 - working
14:40 - by printing out that first initial
14:42 - variable we already know that it's
14:44 - working because it's passing the test
14:45 - but if you want to see what that first
14:47 - initial value is
14:48 - you can add that print command there and
14:50 - you can see
14:52 - that first initial there
14:56 - now again we're seeing two b's the first
14:58 - b is the first initial of
15:00 - the word blueberry my favorite fruit and
15:03 - the second one is the first initial of
15:04 - my name
15:10 - let's see what we have coming up um
15:13 - let's go into
15:14 - slicing maybe and then we'll go into the
15:16 - cheat sheet galena and then you can take
15:17 - over
15:18 - for the uh challenges
15:24 - so i'll pause here for a couple more
15:26 - seconds
15:27 - and then i'll continue on to the next
15:29 - one here again the main component that
15:31 - we're focusing on
15:32 - in this lesson or in this exercise
15:34 - rather is that we can use these brackets
15:37 - it's called bracket notation to access a
15:40 - specific index
15:41 - which is like a the location of a
15:43 - character within this string
15:44 - so my name is ben and that first index b
15:47 - right there
15:49 - is index zero
15:59 - all right let's go on to the third
16:02 - lesson
16:03 - uh in this or the third exercise in this
16:05 - lesson
16:06 - uh cut me a slice of a string this is
16:08 - one of the coolest parts about
16:09 - strings uh in in python
16:17 - and let me reset all this stuff here so
16:22 - here you should just see first name
16:24 - rodrigo last name
16:25 - villanueva now one of the coolest things
16:29 - about
16:29 - uh strings in python is that we can grab
16:32 - what's called a slice
16:33 - of the string a slice is uh it's sort of
16:36 - like a piece of the string
16:38 - but it's a new string that we can sort
16:40 - of extract out of this
16:41 - existing string and we do so using this
16:45 - syntax here um so
16:48 - let's look at an example of this first
16:50 - i'm going to just pull this code into
16:52 - into my editor here so i have my
16:54 - favorite fruit again blueberry and we're
16:56 - printing it out
16:57 - just go ahead and run that so we can see
16:58 - blueberry printed out into the console
17:05 - now uh every time i run it's going to be
17:08 - trying to
17:09 - execute these tests down here which i
17:11 - haven't even paid attention to yet so
17:12 - they're failing so that's why i'm
17:14 - ignoring those failing tests for now
17:16 - and we're just going to go through this
17:17 - and then we'll go down to the
17:18 - instructions
17:21 - now if we want to pull out a slice
17:24 - let's say that we want to get a new
17:26 - string that contains just
17:28 - e bear so these uh characters right
17:32 - here e bear well i could pull out that
17:35 - slice of this string favorite fruit by
17:38 - writing something like this
17:40 - favorite fruit and then in brackets
17:42 - three colon eight
17:44 - let's go ahead and copy that into our
17:46 - editor here
17:49 - and run and there again you see
17:52 - ebay
17:56 - now how did that work how did how was i
17:58 - able to do that well let's take a closer
18:00 - look at this syntax here
18:02 - uh if we which you can see sort of
18:04 - outlined at the very top
18:06 - so we have our string name which is
18:08 - favorite fruit and then we have
18:10 - the first index colon last index
18:14 - well that first index three if we look
18:17 - down at our diagram here
18:19 - that first index three shows the letter
18:22 - e the character e in our string
18:24 - blueberry
18:26 - and index eight is in between
18:29 - r and y
18:32 - when we write this syntax we're slicing
18:35 - a character
18:36 - we're slicing a range of characters from
18:38 - our favorite fruit
18:39 - that starts with index 3 so it starts
18:42 - here and includes index
18:43 - 3 and goes up to index 8
18:47 - but excludes everything after index 8.
18:50 - so it's going to be everything between
18:52 - and including index 3
18:54 - and before but not including index eight
18:56 - so we get e there
19:12 - yeah i see some folks if y'all are are
19:14 - saying like i don't think this is live
19:16 - i think there's like a little bit of a
19:18 - time delay between when i see the chat
19:20 - or at least when you see the video and
19:22 - what i'm saying
19:23 - so i may not see your questions
19:25 - immediately but the folks who are
19:27 - following along the chat
19:28 - they're going to be answering a lot of
19:29 - your questions in the chat
19:46 - now one other cool component of slicing
19:49 - so not only can we say i want all the
19:52 - characters between index three and index
19:54 - eight
19:54 - but i can also have what are called open
19:56 - ended slices
19:58 - so uh yeah let me zoom in here i'm
20:01 - noticing some folks are
20:02 - asking for a little little more screen
20:05 - real estate there we go
20:08 - so i was just saying that we can have
20:11 - what are called open
20:12 - ended slices and they look like this so
20:14 - let me copy in
20:15 - this one first print favorite fruit
20:19 - colon4
20:23 - and then i'll do print for colon
20:27 - so these are called open ended slices
20:30 - because
20:30 - we're not specifying the starting index
20:33 - or the ending in
20:34 - index in these and when you leave out
20:36 - either the starting or ending index
20:39 - python is just going to assume that you
20:40 - want everything from the beginning
20:43 - of the string up until index four when
20:48 - you leave out the ending index
20:50 - it's going to assume that you want
20:51 - everything from index 4 all the way to
20:53 - the end
20:55 - so here we're getting everything before
20:56 - index 4 which is blue
20:59 - and here we're getting everything from
21:01 - index 4 on
21:02 - which is barry
21:12 - now let's go on to our instructions
21:15 - we're going to go through these i'm
21:16 - going to get rid of a bunch of this all
21:17 - this text up here
21:19 - you're a programmer working for
21:21 - copeland's corporate company at this
21:22 - company
21:23 - each employee's username is generated by
21:25 - taking the first
21:26 - five letters of their last name so it
21:29 - looks like
21:30 - for rodrigo villanueva it's going to be
21:32 - villa
21:37 - a new employee rodrigo villanueva is
21:39 - starting today and you need to create
21:41 - his account
21:42 - his first name and last name are stored
21:43 - here and we need to create a variable
21:46 - called
21:46 - new account by slicing the first five
21:48 - letters of his last name
21:51 - so we'll say new account
21:55 - and we want the first five letters of
21:58 - his last name so
21:59 - last name and they're actually a couple
22:02 - ways of doing this
22:03 - i'm gonna write one of them out and i'm
22:05 - gonna give you all a chance maybe to
22:07 - see if you can type in the other way so
22:10 - new account equals last name and
22:14 - i think the maybe the most explicit way
22:17 - of writing this
22:18 - i want every character starting from the
22:20 - first character which is index 0
22:24 - and i want the first five characters so
22:26 - that's gonna go up to
22:28 - zero this is zero we got one two three
22:31 - four and i want everything before index
22:34 - five here
22:37 - now an easy way to actually figure out
22:39 - how many characters you have
22:40 - is to take this number and subtract this
22:42 - number so five minus zero gives us five
22:45 - characters
22:45 - that's that's how i know that new
22:47 - account is gonna have five characters in
22:48 - it
22:51 - now i see that uh vinit is giving us the
22:54 - other approach to doing this
22:55 - which is which is really awesome we
22:57 - could also write this by saying
22:58 - new account equals last
23:01 - name and then using that open ended
23:05 - slice uh method that we saw earlier
23:08 - because i'm leaving out that first index
23:11 - python is assuming that this number here
23:13 - is gonna be a zero and this is
23:15 - going to give me everything from the
23:16 - beginning up until index five
23:22 - now here it says temporary passwords for
23:24 - new employees are also generated
23:26 - from their last names create a variable
23:28 - called temp
23:29 - password by creating a slice
23:32 - out of the third through sixth letters
23:35 - of last name
23:36 - your string should have a total of four
23:38 - characters
23:41 - so i need to slice last name and i need
23:44 - four characters between third and sixth
23:48 - indexes
23:49 - or sorry the third and the six letters
23:51 - so if i go in here i'm looking at
23:53 - uh three four five and
23:56 - six i want those four letters right
23:58 - there
24:02 - now before i finish this up i'll give
24:04 - you all a chance to type this in
24:06 - and uh submit your thoughts on how you
24:09 - might do this
24:15 - i saw vinnette put in three colon six
24:17 - and then retracted it
24:19 - which is kind of interesting this this
24:21 - is a really common way
24:23 - that you might make a mistake here you
24:26 - might think okay
24:27 - three is the first character i want and
24:29 - six is the last character i want so
24:31 - let's put in three and six but remember
24:34 - this is the first character that we're
24:36 - not going to include
24:38 - so we would want to write three colon
24:40 - seven
24:41 - right and again we can check the the
24:43 - math here by subtracting three from
24:45 - seven
24:46 - we know that there's four characters
24:47 - here now if i run this
24:50 - we're actually going to fail the test
24:52 - now why did we fail well let's print out
24:55 - temp password to see what we got and we
24:58 - might understand a little bit better
24:59 - why we're wrong so remember we wanted
25:03 - l-l-a-n-l-l-a-n but we got
25:04 - l-a-n-u nice i'm seeing a couple of
25:08 - folks here nakila
25:10 - and o-fire cyberpunk given the correct
25:13 - answer
25:14 - remember indexes start at zero so the
25:16 - third character is actually index
25:17 - two and so then this ending
25:20 - index is going to be index six right
25:23 - because we want index two
25:24 - three four and five and pause right
25:27 - before
25:28 - 6. let's run that and there we get
25:31 - llan
25:36 - and for now i think we're going to pause
25:38 - with
25:39 - going through these exercises this gives
25:41 - us a good place to start at least with
25:44 - strings and i want to bring our
25:46 - attention to the cheat sheet which we're
25:48 - going to be using
25:49 - while we go through the challenges with
25:52 - galena
25:53 - so i'm going to i'm going to leave this
25:54 - page here maybe i'll give you all 10
25:56 - more seconds to look over it
26:00 - and then we're going to go back into the
26:02 - curriculum
26:03 - into the course syllabus and look at the
26:04 - cheat sheet for a second
26:09 - uh let me go back here actually maybe
26:12 - it's linked down here somewhere
26:15 - if you scroll to the bottom of your
26:18 - instructions pin
26:19 - on the left you'll see this section that
26:21 - says concept review
26:24 - and we can take a look at the materials
26:26 - cheat sheet so let's go ahead and do
26:27 - that
26:29 - cheat sheet sorry yeah there's no
26:33 - there's no shishi here the cheat sheet
26:37 - sorry about that i uh
26:40 - maybe i mumbled too much um
26:43 - all of these lessons as you can see have
26:46 - a cheat sheet
26:47 - for them we're looking at the strings
26:49 - one and you can access all the other
26:51 - ones like
26:52 - loops and lists here
26:55 - i'm not going to go into all of this um
26:57 - but we're going to refer back to it as
26:59 - galena goes to the challenges
27:01 - but here you can find a lot of really
27:02 - important information about strings
27:05 - if you need a quick refresher and we're
27:08 - going to touch upon a lot of this stuff
27:09 - as we go through these challenges here's
27:12 - some of those things that we just talked
27:13 - about
27:14 - indexing and slicing some things that
27:16 - you may be familiar
27:18 - with uh from your lessons on lists and
27:21 - looping
27:22 - is iterating so we can do that with
27:23 - strings as well
27:25 - you may also be familiar with the lend
27:27 - function which i believe you can use
27:29 - on lists as well but you can do that
27:30 - with strings to know how many characters
27:32 - are in a string
27:35 - we can concatenate which just means
27:37 - combine two strings to form a new string
27:41 - so here we can add one fish and two fish
27:44 - to create the new string one fish two
27:46 - fish
27:48 - and a bunch of other things called uh
27:52 - python methods um which again i'm not
27:54 - gonna go into but they allow you to do
27:56 - some really awesome things uh with
27:58 - strings
28:00 - like title turn this string dark knight
28:03 - into
28:04 - title case where each character is
28:06 - capitalized
28:08 - and uh yeah i think this is a good place
28:09 - to stop galena do you want to take over
28:11 - and go through those challenges
28:13 - yeah sounds good um can you just show me
28:15 - what the exercise was that you stopped
28:16 - on was it four
28:18 - uh we stopped at exercise three cut me a
28:20 - slice of uh
28:21 - of us a string awesome cool so i'll jump
28:23 - to that one and
28:25 - share my screen
28:42 - okay
28:45 - let me know if you guys can see my
28:56 - screen
29:00 - ben can i get a thumbs up if i'm sharing
29:03 - awesome
29:03 - um oh uh let's see i'm not seeing it yet
29:06 - on
29:07 - youtube but i see it on ours yep you're
29:08 - good i think there's just a slight delay
29:12 - okay so we'll just jump into the next
29:16 - exercise which is concatenating
29:18 - strengths
29:19 - so you can also concatenate two existing
29:21 - strings together into a new string this
29:23 - is something ben mentioned briefly
29:25 - as he was running through the cheat
29:26 - sheet so if you have
29:28 - two strings one is fruit prefix with
29:31 - blue
29:32 - and one is fruit suffix with berries
29:35 - we can actually use the plus operator to
29:38 - combine these two strengths
29:40 - so notice how we created a new variable
29:43 - called favorite fruit
29:45 - by combining fruit prefix and fruit
29:47 - suffix
29:49 - so using a print statement we would
29:51 - output favorite fruit and it should
29:52 - return
29:53 - blueberries so i'm just gonna jump into
29:56 - the code editor
29:58 - and go through this to show you
30:02 - how it looks
30:08 - awesome so now we see blueberries on the
30:11 - right
30:12 - so something interesting about
30:13 - concatenation is that if you want to
30:16 - add a space you have to specify that
30:20 - so notice that there are no spaces added
30:22 - here we don't have a space between blue
30:24 - and berries it is a single
30:26 - word so to manually add in the spaces
30:29 - when concatenating strings
30:30 - we have to specify that so let's take a
30:33 - look at this fruit sentence
30:36 - so fruit sentence equals my favorite
30:38 - fruit is
30:39 - plus favorite fruit so if i run
30:42 - this can anyone tell me what i should
30:46 - see as the output
30:54 - so for anyone who said that there isn't
30:56 - going to be a space
30:57 - in the sentence between is and
30:59 - blueberries is correct
31:01 - because we didn't specify a space after
31:04 - is so if you take a look at the next
31:07 - example in that same code snippet
31:09 - there is a space right before the double
31:12 - quote so let's go ahead into our code
31:14 - editor
31:15 - and add that space and now clicking run
31:18 - should show me a sentence with the
31:20 - appropriate spacing
31:22 - so here is that space between is and
31:24 - blueberries
31:29 - right now let's try out this exercise
31:32 - so copeland's corporate company has
31:34 - realized that their policy of using the
31:36 - first five letters of an employee's last
31:38 - name as a username
31:39 - isn't ideal when they have multiple
31:41 - employees with the same last name
31:43 - that makes sense so write a function
31:45 - called account generator
31:47 - that takes two inputs first name and
31:49 - last name
31:50 - and concatenates the first three letters
31:52 - of each and then returns
31:54 - the new account name all right that was
31:57 - a lot so let's try to break it out
31:59 - break it into digestible chunks
32:03 - so first thing we want to do is we want
32:05 - to write a function so let's recall
32:07 - how we write functions this is something
32:08 - that we covered in the previous live
32:10 - streams
32:11 - so function in python is defined by
32:14 - using the def keyword
32:16 - followed by its name
32:19 - and in this case it also takes two
32:22 - inputs first name
32:23 - and last name so can anyone tell me what
32:27 - these two elements in the parentheses
32:29 - are called
32:35 - ben can you just let me know if anyone
32:37 - writes it in the chat
33:03 - yeah we got a couple couple folks saying
33:05 - parameters
33:07 - or attributes but frankie frannykins got
33:10 - right
33:11 - okay awesome yes so they are parameters
33:15 - so what we're going to do is we're going
33:17 - to take these two parameters and
33:19 - concatenate the first three letters of
33:22 - each
33:22 - and then return the account name so
33:25 - something that we're going to use is a
33:27 - syntax from the previous exercise
33:30 - which is where we used the colon within
33:32 - the subscript syntax
33:34 - so to grab the first three letters of
33:36 - each
33:37 - we can actually use colon three
33:40 - right because that's going to grab the
33:42 - first three letters
33:44 - so what i want to do is i want to use
33:45 - this syntax
33:47 - for both the first name and the last
33:49 - name parameters
33:50 - so we want to make sure we return this
33:52 - so we will use the return keyword
33:55 - first name and now because we're
33:59 - concatenating we're going to use the
34:01 - plus operator
34:02 - so last name and also
34:06 - colon three
34:09 - now let's hit run
34:13 - the checkout for me
34:16 - try that again
34:23 - awesome so that should have checked off
34:25 - for you
34:26 - now if you also want to test your
34:28 - function
34:29 - we can do so on the following line we're
34:31 - going to use
34:33 - first name and last name provided in
34:35 - script.pi
34:36 - which is just the name of our file and
34:38 - save it to the variable
34:39 - new account so i'm going to create a new
34:42 - variable
34:44 - new account and i'm going to set it
34:47 - equal
34:48 - to my function call so remember that in
34:51 - order for us
34:52 - to activate or bring a function to
34:56 - action we have to type out its name and
34:59 - pass in any arguments for the parameters
35:02 - so in this case our parameters are first
35:03 - name and last name and we want to pass
35:05 - in those
35:06 - real values in the function call so
35:09 - account generator
35:11 - and let's pass in first name and that
35:13 - would just grab the first name at the
35:15 - very top
35:16 - and last name which would be blevins so
35:19 - let's do first name
35:23 - i'm just going to remove some of this
35:25 - previous code
35:26 - to avoid confusion
35:32 - all right now let's hit run okay great
35:35 - now we passed the test
35:37 - but how come we didn't see any output in
35:40 - the terminal can anyone tell me
35:41 - how what line of code i can add here to
35:44 - see output in the terminal
36:16 - and let me know if there's any that come
36:17 - in you got it
36:20 - a few folks just shared their thoughts
36:22 - okay
36:24 - they're saying use the print function
36:26 - yes perfect so i'm going to
36:28 - use print and wrap new account
36:31 - within the parentheses let's hit run and
36:34 - here is
36:34 - our account generator output so we have
36:38 - the first three letters of the first
36:39 - name
36:40 - and the first three letters of the last
36:41 - name which is exactly what we expected
36:45 - okay cool let's move on to the next one
36:51 - more and more string slicing so python
36:53 - comes with some built-in functions for
36:54 - working with strings
36:56 - one of the most commonly used of these
36:57 - functions is called
36:59 - len so len returns the number of
37:01 - characters in a string
37:03 - so if you're coming from any other
37:04 - programming language maybe javascript
37:06 - for example this is going to work
37:08 - exactly like the length function in
37:10 - javascript
37:11 - so here it's just uh down to l e n
37:15 - but it also stands for length so for
37:18 - example
37:18 - if we take our favorite fruit blueberry
37:21 - the length
37:22 - of our favorite fruit is actually nine
37:24 - so that's the amount of
37:26 - characters in the string now notice that
37:29 - when we return a value for length it's
37:32 - actually not counting in the way that we
37:34 - do
37:35 - when we reference indices right those
37:37 - start from zero
37:39 - here the count starts from one so if we
37:41 - do one
37:42 - two three four five six seven eight nine
37:45 - there's exactly
37:46 - nine characters we don't start count
37:48 - from zero
37:51 - so another interesting thing about the
37:52 - length function is it also takes into
37:55 - account the spaces in a string
37:57 - so here i love blueberries is counting
38:00 - this
38:00 - space in between i and love and the
38:03 - space between
38:04 - love and blueberries
38:08 - now lynn comes in handy when we are
38:10 - trying to select characters from the end
38:12 - of a string
38:13 - what is the index of the last character
38:15 - why
38:16 - a favorite fruit from above so let's
38:19 - take a look
38:21 - so here we have our blueberry so in
38:23 - order for us to grab
38:25 - the last index well the character of the
38:28 - last index we can use
38:29 - the lent function in this way so i'm
38:32 - just going to
38:33 - grab this
38:37 - now it's going to give me an error but
38:38 - we'll take a closer look as to why
38:41 - in a second so we'll grab favorite fruit
38:48 - okay great so this is actually a very
38:50 - helpful error
38:51 - it says the string index is out of range
38:54 - because remember we're not counting from
38:57 - zero
38:58 - anymore so typically the last index
39:01 - is just going to be the length minus 1.
39:05 - so that is what we have to specify in
39:07 - our code because right now the length
39:09 - what it's trying to access is actually
39:12 - this
39:15 - root sub
39:19 - 9 right that's the amount of characters
39:21 - we have yeah
39:23 - so there's actually no index
39:26 - of 9 in this string right the last one
39:29 - is
39:29 - eight so if we do
39:33 - favor fruit sub len favorite fruit
39:36 - minus one that should give us the last
39:39 - element so i'm just going to add a minus
39:42 - 1 here
39:44 - and this should return our y
39:50 - so this is actually a very common
39:52 - technique that's used amongst
39:54 - many different programming languages so
39:57 - the most common way to retrieve the last
39:59 - element is to take the length of the
40:01 - string
40:01 - and subtract one
40:06 - so you could also slice the last several
40:07 - characters of a string using len
40:10 - so this is a syntax that we learned
40:11 - previously with the colon
40:13 - and that's going to just grab
40:17 - something from the start of the string
40:19 - mine uh so we're taking the length minus
40:21 - four
40:22 - so that's going to be 9 minus 4 that's
40:25 - going to give us 5 and that's going to
40:27 - give us
40:28 - all of the remaining characters e-r-r-y
40:31 - from the string
40:32 - so let's drop this into the code editor
40:39 - sound and retrieve our last characters
40:43 - so we have
40:43 - e r r y from blueberry
40:51 - awesome okay let's move on to our
40:54 - exercise
40:55 - so copeland's corporate company also
40:57 - wants to update how they generate
40:59 - temporary passwords for new employees so
41:01 - we're going to write a function
41:02 - called password generator that takes two
41:04 - inputs first name
41:06 - and last name and then concatenate the
41:08 - last three letters of each
41:10 - and return them as a string okay so
41:13 - let's take a second
41:14 - to break down into chunks what we have
41:16 - to do
41:17 - so i'm just going to remove its code
41:20 - and start writing our functions so we're
41:23 - going to use def
41:25 - password generator that takes two inputs
41:29 - first name and last name
41:34 - and then concatenate the last three
41:36 - letters
41:37 - of each so i'm going to just pause for a
41:39 - second and
41:40 - write down in the chat how do you think
41:42 - we can achieve this
42:13 - so something we're going to definitely
42:14 - need to use is we'll need the len
42:17 - function we'll also need our subscript
42:20 - syntax
42:21 - and we'll also need to slice our string
42:24 - so we're going to be using all of those
42:26 - three things together in order to get
42:28 - the last three letters of each
42:36 - okay so let's get started so the first
42:39 - thing we want to do
42:40 - is we want to grab the last three
42:43 - letters of first name
42:45 - so where we're going to try is we're
42:47 - going to type out
42:48 - first name and we're going to enter our
42:50 - subscript syntax
42:52 - and then we want to use the lend
42:54 - function
42:56 - first name so this is going to give us
42:59 - the length
43:00 - of the first name string right and now
43:03 - we want to return the last
43:06 - three letters so we want to actually
43:09 - subtract three
43:16 - and now can someone explain to me how
43:17 - this is working
43:38 - so i'm just gonna walk you guys through
43:40 - how this is happening
43:41 - so if we have the length so the length
43:44 - of first name is going to be one
43:45 - two three four five elements so we have
43:48 - five
43:49 - minus three that's giving us two
43:52 - so it's going from
43:56 - the second element on to the last
43:59 - right so it's taking the
44:02 - second element which is i and it's going
44:04 - to return i
44:05 - k and o which is exactly what we need
44:10 - so then we want to do the same thing for
44:13 - last name
44:15 - so we want to grab the length of the
44:17 - string
44:21 - we want to subtract 3 and that's going
44:23 - to put us
44:24 - exactly at s and return
44:28 - s u k i
44:42 - okay so now the last thing i'm going to
44:44 - want to do is add
44:46 - a return keyword
44:50 - so another thing that you can do is you
44:51 - can also store this
44:53 - in a variable and then return that
44:55 - variable
44:56 - or you can simply just return this
44:58 - entire
44:59 - um expression as a function i'm sorry uh
45:03 - expression from the function so now
45:06 - let's hit run
45:09 - and now we don't get any output until we
45:11 - test our function
45:12 - so let's test it out on the provided
45:14 - first name and last name so we have
45:16 - password generator and let's pass in
45:20 - first name last name and we want to
45:23 - store it
45:24 - in temp password
45:28 - now in order to see this we're going to
45:31 - need to wrap an inference statement
45:34 - and output temp password
45:46 - all right let's move on to the next one
45:49 - so i think we're going to try to stop
45:51 - at 150 and then hop into the coding
45:54 - challenges
45:55 - how's that sound
45:59 - awesome cool let's move on to the next
46:01 - one
46:03 - okay so negative indices so negative
46:06 - indices are actually
46:07 - a way that we can access characters at
46:10 - the end of the string
46:11 - much simpler than we did in the previous
46:13 - exercise so in the previous exercise
46:15 - we used len to get a slice there's a
46:18 - much easier way with
46:19 - negative index indices which actually
46:21 - count
46:22 - backwards from the end of the string so
46:25 - if you use
46:25 - string name -1 it's going to grab the
46:28 - last character of the string
46:30 - string name minus two is going to be the
46:32 - second to last character
46:34 - so for example negative one is going to
46:36 - give us y
46:38 - negative two is going to give us r
46:40 - negative three
46:41 - is going to give us r well the third r
46:45 - uh sorry the second r back from the
46:48 - end but because we want to grab the
46:51 - elements
46:52 - using well because we want to slice our
46:55 - string
46:56 - it's actually going to return rry so
46:59 - let's think about
47:00 - how this is actually working so it's
47:02 - starting from
47:03 - the third element in the back and it's
47:06 - returning
47:07 - r r y so everything that follows
47:10 - that element so you see how this is
47:13 - actually a lot
47:14 - simpler and also cleaner code than
47:17 - writing out the len
47:22 - function
47:24 - okay so let's hop into the instructions
47:26 - so use negative indices to find the
47:28 - second
47:29 - to last character in company mode save
47:32 - this to the variable
47:34 - second to last okay so let's see how we
47:37 - can grab
47:38 - the second to last character so we want
47:42 - a second to last variable
47:45 - set it equal to company moto
47:48 - and we want to grab the second to last
47:51 - so let's say run
47:54 - awesome that's going to be our second to
47:56 - last element
47:58 - and we also want to use negative indices
48:00 - to create a slice
48:01 - of the last four characters in company
48:04 - motto
48:05 - and save this to the variable final word
48:09 - okay so we want our new variable final
48:12 - word
48:13 - is equal to company model
48:17 - now we're grabbing the last four
48:19 - characters so we want to go back
48:21 - four and grab everything after that
48:28 - so now before i print out both of these
48:30 - variables just type in the chat what you
48:32 - expect the output to be for each one
48:46 - okay so for those of you who said f
48:48 - would be the output for the first one
48:49 - you are correct and for those of you who
48:52 - said life would be the output for the
48:54 - second one
48:55 - you are also correct
49:03 - how's it going in the chat over there
49:04 - ben
49:08 - oh i can't hear you
49:11 - looks like some folks are staying in uh
49:15 - yeah it's looking good mark's got it in
49:18 - life
49:20 - perfect okay so now let's navigate to
49:23 - our coding challenge so
49:25 - if you're following along uh make sure
49:27 - to finish this
49:28 - lesson it has a lot of useful and
49:30 - important information that you need on
49:32 - python strings
49:33 - so we're just for the sake of time going
49:35 - to jump immediately into the coding
49:36 - challenge
49:37 - uh to show you how those are done so i'm
49:40 - going to
49:41 - pop in back into the syllabus
49:48 - oh that's our cheat sheet
49:59 - and i'm going to click on this strings
50:02 - code challenges article
50:12 - so this article contains three coding
50:14 - challenges that are going to test our
50:15 - knowledge of python strings it also is
50:18 - going to
50:18 - test our knowledge of functions and a
50:21 - couple of other prerequisite information
50:23 - that we learned previously
50:24 - in the lessons leading up to this one so
50:27 - the coding challenges include a vowel
50:29 - counter an
50:30 - m word count and date extractor so i'm
50:33 - just going to
50:34 - give one or two minutes um let's say one
50:37 - for the sake of time
50:38 - for you guys to pop this open and follow
50:52 - along
51:13 - okay so let's get started so we want to
51:16 - first write a function
51:17 - called vowel counter that takes a string
51:20 - as an argument
51:21 - and counts the number of vowels a e i o
51:24 - u in it okay so let's get into our code
51:28 - editor
51:28 - so let's define our function vowel
51:31 - counter
51:33 - it's going to take a string as an
51:35 - argument so you can call this anything
51:36 - you like
51:37 - i'm just going to call it an str short
51:39 - for string
51:40 - and count the number of vowels in it
51:43 - okay so we want to if we have any string
51:47 - let's say hey
51:48 - right it's going to return 1 as the
51:50 - number of vowels it includes which is e
51:53 - so we want to write code to accomplish
51:56 - this logic
51:56 - so first thing we want to do is we want
51:58 - to actually iterate through the entire
52:01 - string
52:01 - to check if there is a vowel in it so
52:04 - let's use
52:04 - a for loop
52:08 - so for let's say character
52:11 - in string we want to check
52:15 - if the character is in
52:18 - our collection of vowels so we have a
52:21 - list here that we can use
52:23 - so if car in vowels
52:26 - then we want to oh we want to
52:29 - count the number of vowels okay so we're
52:31 - going to need a counter here so i'm
52:33 - going to declare
52:33 - a variable count for you can write
52:36 - counter
52:37 - and i want to increase my count every
52:40 - time
52:41 - a character that exists in the string
52:44 - exists
52:44 - in the vowels list so we're going to use
52:47 - count e plus equals one or you can also
52:51 - do
52:51 - count equals count plus one either one
52:54 - works
52:58 - okay so now once we set up
53:01 - our counter we want to then return
53:05 - the number of vowels in our in our
53:08 - string right that's
53:10 - accumulated in our account so i want to
53:12 - use the return keyword
53:14 - and return count
53:20 - okay now let's hit run now i can't see
53:23 - anything just yet it's because i haven't
53:24 - called my function so let's go ahead
53:27 - and call our function with any string
53:30 - let's do
53:30 - bend and
53:34 - use a print statement to see our output
53:37 - awesome so because ben's name only has
53:40 - one vowel in it it
53:42 - returns one if we do code academy
53:47 - that should return let's see one two
53:51 - three four
53:56 - great now let's move on to the next one
54:00 - oh
54:00 - i forgot to check my answer okay we got
54:03 - it
54:05 - all right let's move on to the next one
54:08 - now we want to write a function called m
54:10 - word count that takes a string
54:12 - as an input and returns a count of the
54:14 - words in the string that start with the
54:17 - upper case
54:18 - or lowercase letter m oh and actually
54:20 - before i move on i just want to mention
54:22 - that there's
54:23 - numerous solutions for some of these
54:25 - coding challenges so
54:26 - don't feel like if you don't have
54:28 - exactly this but your code still works
54:30 - that you did it wrong
54:32 - so as long as your code works uses best
54:34 - practices
54:35 - you should be good and of course also
54:38 - passes the tests
54:42 - okay so now let's move on to this one so
54:45 - for example if my sentence is my gosh
54:48 - what a beautiful monday morning this is
54:50 - then m word count sub my sentence should
54:53 - return
54:54 - three right because it's going to count
54:56 - how many uppercase and lowercase ms
54:58 - there are
54:58 - so the uppercase one is um here in my
55:03 - monday and the lowercase one is in
55:05 - morning okay
55:06 - so let's jump into our code editor and
55:08 - start so let's write our function
55:11 - m word count that takes a string as an
55:14 - input
55:15 - i'll just do an str and returns a count
55:19 - of the words in the string that start
55:20 - with the
55:21 - uppercase or lowercase letter m so the
55:24 - strategy we're going to use here is
55:25 - actually very similar to what we did in
55:27 - the previous coding challenge
55:28 - where we iterated through the entire
55:31 - string right we have to go through each
55:33 - character in the string
55:34 - and check if it's uppercase or lowercase
55:38 - m so let's go ahead and do that so
55:41 - i'm going to set up my counter because i
55:43 - know i'm going to need one here
55:44 - so let's go ahead and set up our for
55:47 - loop so
55:48 - for let's do word this time in
55:51 - string we want to set up
55:54 - an if statement so if
55:58 - word sub zero
56:01 - now i really want to hear what you guys
56:02 - think about this why i'm using word
56:04 - sub-zero but for the sake of time
56:06 - i'm just going to explain it in a second
56:09 - so if word sub-zero
56:11 - is equal to m or
56:14 - word sub 0
56:18 - is equal to lowercase m
56:21 - then i want to increase my count
56:27 - now the reason that we used word
56:29 - sub-zero is because when we grab a
56:32 - single word
56:32 - all we want to check for is if the first
56:35 - letter
56:36 - is an uppercase or lowercase n so it
56:38 - doesn't really matter to us
56:40 - if there's an m somewhere in the word we
56:42 - only want an uppercase or lowercase
56:45 - m if it's the first letter and that's
56:47 - why we're using the subscript
56:49 - 0.
56:52 - so now we added our conditional
56:54 - statement if
56:56 - word is capital if the first letter is m
56:59 - or lowercase m we want to increase our
57:01 - count and then we want to
57:03 - return this count from the function
57:09 - so now let's call our function
57:13 - with our my sentence string
57:16 - wrap it in a print statement to see the
57:18 - output
57:19 - and let's hit run awesome it returned
57:23 - a 3 which is exactly what we expected
57:26 - you can also try this with other
57:28 - sentences
57:30 - and with other numbers of uppercase and
57:32 - lowercase m's
57:34 - so let's check our answer and we got it
57:38 - okay and now we're just going to move on
57:39 - to our final one
57:41 - um i'm sorry if i'm breezing through
57:43 - this i just want to make sure that you
57:44 - guys
57:45 - can see how all of the coding challenges
57:47 - are done
57:48 - so here we have our date extractor given
57:50 - a string called date that is in the form
57:53 - of
57:53 - month day and year write a function
57:56 - called date extractor that takes
57:58 - date as an input and returns three
58:00 - values
58:01 - month day and year so we actually didn't
58:03 - get a chance to cover
58:05 - um escape characters but they are in the
58:08 - cheat sheet
58:09 - so escape characters are used to
58:12 - um basically is actually
58:15 - are we gonna use that here because if
58:18 - we're not
58:21 - you always use the split function i'm
58:23 - sorry you can also use the split
58:25 - function
58:26 - yes that's true so we are going to use
58:28 - this split
58:29 - actually let me just jump into here
58:30 - because we only have one minute left
58:32 - um so let's do def um
58:37 - oh yes i didn't finish reading it so we
58:39 - write a function that takes
58:40 - date as an input and returns three
58:42 - values month day and year
58:44 - so if our date is 6 16
58:47 - 2006 the function should return multiple
58:49 - values in the form
58:50 - 6 16 and 2006 and we want to keep them
58:53 - as strings we don't want to convert them
58:55 - to integers
58:56 - so our function is going to be date
58:59 - extractor and we're going to accept
59:03 - date as the input and now we are going
59:07 - to
59:07 - have to split our string so i'm going to
59:11 - do
59:11 - date dot split and i want to split it
59:15 - at these um slashes
59:18 - so wherever there is a slash i wanted to
59:20 - split the string so i want to return the
59:22 - elements
59:23 - that are preceding the slash
59:27 - so now because date.split doesn't
59:30 - actually change anything for date we
59:32 - have to store it in a new variable
59:34 - so let's say new date
59:38 - syntax and this is going to return an
59:41 - array
59:42 - so once it returns an array we can grab
59:46 - the elements and assign them to month
59:48 - day and year
59:49 - so month is going to be new date syntax
59:53 - sub zero that's going to be hour six
59:57 - then day is going to be new date syntax
60:01 - sub one and you can of course name this
60:04 - variable anything you like i
60:05 - recognize that i chose a slightly
60:07 - lengthy one and this one is going to be
60:10 - year so now we have our month day and
60:14 - year variables
60:15 - we can go ahead and return them from our
60:17 - function
60:18 - so we'll do month comma day
60:21 - comma year awesome and now
60:25 - let's just run our function
60:29 - pass in this string
60:35 - and wrap it in a print statement okay
60:38 - let's hit run awesome here is our tuple
60:42 - or multiple values in this form we have
60:45 - month
60:45 - day and year
60:49 - all right well thanks everyone for
60:51 - sticking around
60:54 - higalina um can i i think there may have
60:56 - been a mistake in one of the in the
60:58 - second one
60:58 - okay um can we actually look at that
61:01 - together on yours
61:03 - yeah can you share your screen again and
61:05 - then
61:06 - yeah yeah mark so mark was asking mark
61:08 - lam was asking why do we use word zero
61:11 - um yeah so this one here um i think
61:14 - uh i just this is something for me to
61:15 - clarify too um since i'm not uh it's
61:17 - been a while since i've used python
61:19 - um in your for loop on line five when
61:21 - you write forward in string
61:23 - is that going to separate the string
61:24 - into words and and no to space them out
61:27 - or will that go through every character
61:29 - oh that's a great question so let's take
61:31 - a look at what's actually happening here
61:33 - so if we print word
61:37 - so it's actually going to oh sorry
61:40 - yeah so it's going to iterate through
61:42 - every single
61:44 - um yeah it actually looks like it's
61:46 - iterating through every single character
61:48 - rather than word
61:50 - but we can use that split function again
61:52 - right to split on every space and then
61:54 - iterate through that list right
61:55 - yes yes definitely um i'm also going to
61:59 - and then mark that would sort of get to
62:01 - your um
62:03 - question which is we're using word zero
62:05 - because we want to get the first letter
62:06 - of every word
62:17 - different questions and see if there's
62:19 - anything else i missed
62:56 - yeah so um for iteration and looping
63:00 - yeah that's that's something we didn't
63:01 - cover in this section but it's
63:03 - loops are actually covered in the
63:04 - previous one um so that was
63:06 - something i also wanted to mention um if
63:09 - we go back to
63:13 - our series um there were some topics
63:17 - that
63:17 - uh we utilized here that weren't taught
63:20 - in this particular section but for
63:21 - example functions
63:22 - um lists and loops were all taught
63:24 - previously so if you want to get a
63:26 - refresher on that just
63:27 - go ahead and navigate back to those
63:30 - lessons
63:30 - but also some of the things that we use
63:32 - like um escape characters and split
63:35 - they are all in this lesson we just
63:37 - didn't get a chance to cover it but
63:39 - definitely make sure
63:40 - to check it out
63:46 - all right um i guess that's for
63:50 - four minutes over time but
63:54 - thank you guys everyone for sticking
63:56 - around i'm going to see if i can
63:58 - feel any other lingering questions
64:56 - okay awesome so
64:59 - ben how are you feeling
65:04 - feeling good awesome this is a really
65:06 - great question
65:07 - thank you everyone for for hopping in
65:11 - we will see you next time um so the next
65:15 - module that's going to be covered in
65:16 - this section
65:17 - is dictionaries so make sure to tune
65:20 - into that one
65:21 - and then there's one more after that and
65:22 - the series is all done
65:27 - alright everyone we'll see you next time
65:29 - have a good one

Cleaned transcript:

hey everyone um i want to make sure everyone can hear us hey guys if you can hear us can you write down in the chat yay awesome cool hi everyone welcome to our episode number six for cs 101 we're just going to take a few minutes and then we're going to jump in how's everyone's tuesday going actually right down in the chat where you guys are from oh california nice india whoa madison wisconsin cool wow you guys are from all over that's awesome that's awesome oh all right ben how do you feel are you ready to get started yeah let's do it all right cool i'm not seeing myself in the video though um let's see what if you share your screen maybe um let's try that hello hello everybody my name is ben can you all hear me someone says nice chair um all right joel we're gonna get started with the lesson today um thanks for that mark uh we're gonna get started today with our lesson on strings if you're following along with us here's the link we're going to be using i'll share that in the chat as well in case anybody's missing it but you can also find it in the link for the youtube video um sorry i can't i guess i can't add it to the chat but you can find the link in the description below uh we're gonna be talking about cs 101 strings strings in python today and um for the most part uh you can see that this lesson is broken into two lessons introduction to strings in general string methods as well and then um at the end there's a string code challenge um we found that the going over those code challenges is actually super helpful so we're going to be focusing today on that code challenge down here before we do that we're going to do a brief introduction to strings so we're going to go through a couple of these components here and this cheat sheet so i think just to start galena i think it'd probably be good if we went into the introduction first just did a brief intro to strings and then went through the cheat sheet before going to the code challenge so uh so i'm going to go ahead and click on introduction to strings here and we'll jump into this first lesson and oh i am all the way through here let me go back to the beginning and let me do some some stuff here all right so uh here i am on the introduction and i'm gonna give y'all a couple seconds to uh to get set up so go ahead and open up this introduction page and while you're at it feel free to share in the chat whether or not you've used python before and whether you've whether or not you've been to one of these live streams before this is your first live stream let us know this is your first time using python let us know uh but if or if you know any other languages that'll be cool to know too and i've got that dual monitor set up here so that's why i'm not looking directly at the camera i'll go ahead and get started in another 30 seconds give you all some time to get set up yeah also feel free to write in the chat if you're ready to go um just post like a thumbs up or if you need a few more minutes also let us know all right my computer is working hard let me quickly close some things here and get started oh boy all right let's get into it then um so today we're going to be talking about strings um and specifically strings in python uh most programming languages or if not all of them have uh strings and strings are how we represent uh the words and sentences in our in our programs right so you know all languages how we communicate with each other includes words and sentences and so it makes sense that we can put words and sentences uh into our programs as well and we do all this with a string now here we can see that a string is a sequence of characters contained within a pair of either single quotes or double quotes uh and it doesn't matter which one you use both are treated the same uh you just want to make sure that you're either that these two quotes match each other a string can be any length you can have one character in it it can have a thousand characters in it and it can contain any letters numbers symbols or spaces so in this lesson uh we are if you go through this lesson you'll learn you'll learn a ton of different things about python strings like how to slice them and what that means um how to pull out specific characters search for strings inside other strings uh iterate through strings and use strings in conditional statements um as i mentioned in this live stream we're just gonna do a brief intro and then we're gonna go through those code challenges in the end so let's just go through this very first lesson together um or this very first exercise together to see how we make a string so the first instruction here says save your favorite word as a string to the variable favorite word i'm going to go up here and uh and i'm going to i have this variable here and i'm going to save in that variable a string of my favorite word if you want you can share your favorite word in the in the chat but i'm going to type in platypus i think platypuses are cool uh and i'm going to go ahead and actually put that in the chat so you all can see what i typed in here and if you want to you can actually share your favorite word and the string in the chat as well so you can see that you're you know typing it in with the right syntax that's my favorite word and we'll run and we can pass that first test and then print it to the console print favorite word and we can see what that looks like inside the console now if you're new to python if you've never used it before in python we give our variables names that are separated with an underscore and we use the print command the print function to display values to this output panel over here did i spell that wrong plot tipless plot dive yeah i don't i'm not an english person there we go i'm a programmer right i'm not an english major and that's the basics of strings um let's go through a couple more of these and then we'll go into the uh we'll go into the cheat sheet so let's continue on to the next one and i may have to reset a bunch of these how are we doing on time galena should i pause for some questions or what do you think um i think you're doing great so far if any questions come up in the chat i'll make sure to answer them but also just for just a fair warning this is the first time that i've done this so uh appreciate any patients you have um so let's continue on to the second one um are strings also spaces and symbols uh yeah so we can we're actually going to come up on that in a couple examples but yeah you can definitely have strings like um hello space world exclamation point this is also a string that counts so let's go through this second part here this is a really important concept of strings which is that strings can be thought of as a list of characters which you all learned in a previous lesson like any other list each character in a string has an index and so if we were to look at this string here uh blueberry which is stored in the variable favorite fruit then we can access an individual character from that string using the index so if we want to look at the first letter of the string we could we could write something like this so let me actually pull this code into my script here and so i can test it out as we can test see it in here so favorite fruit is blueberry and here i'm going to print it out there so here when i print out favorite fruit uh 1 we see the value l the letter l that character now you may be thinking okay why is why am i seeing the letter l and not the letter b well remember that lists start with the index zero not one so if i were to change this number one here to a zero and run it again then we would get that first character b in our output panel now one key component to remember about these indexes is that they have to be a whole number so if i were to do something like this 1.5 which is not a whole number then we would get a type error that says string indices must be integers so make sure that your indexes are your indices are whole numbers starting at zero and then we can move along to these instructions here one of the most common things that are represented by strings are names save your name as a string to the variable my name so it looks like we need to create some of this stuff down here so i'm just going to leave my code up here this is fine to stay i'm just going to go ahead and add a my name variable and set it to a string of my name and this time i'm going to use single quotes just to mix it up notice that i'm using single quotes on both ends making sure that they're the same if i were to do something like that that would also give me an error which we can see here just get this syntax error here so i've got to make sure that both of those are the same use single quotes on both sides have my name is ben passing that first test and then select the first letter of the variable my name and save it to first initial so here again i'm going to create a variable called first uh sorry first initial and that's going to be the first letter of my name so i want to grab that letter b there and as we saw in this prior example we can just type out the name of the variable so my name and then use brackets and then the index 0 is going to be that first character so first initial equals my name bracket 0. let's test that out and we're good to go now if you want you can also test out your code just to make sure that it's working by printing out that first initial variable we already know that it's working because it's passing the test but if you want to see what that first initial value is you can add that print command there and you can see that first initial there now again we're seeing two b's the first b is the first initial of the word blueberry my favorite fruit and the second one is the first initial of my name let's see what we have coming up um let's go into slicing maybe and then we'll go into the cheat sheet galena and then you can take over for the uh challenges so i'll pause here for a couple more seconds and then i'll continue on to the next one here again the main component that we're focusing on in this lesson or in this exercise rather is that we can use these brackets it's called bracket notation to access a specific index which is like a the location of a character within this string so my name is ben and that first index b right there is index zero all right let's go on to the third lesson uh in this or the third exercise in this lesson uh cut me a slice of a string this is one of the coolest parts about strings uh in in python and let me reset all this stuff here so here you should just see first name rodrigo last name villanueva now one of the coolest things about uh strings in python is that we can grab what's called a slice of the string a slice is uh it's sort of like a piece of the string but it's a new string that we can sort of extract out of this existing string and we do so using this syntax here um so let's look at an example of this first i'm going to just pull this code into into my editor here so i have my favorite fruit again blueberry and we're printing it out just go ahead and run that so we can see blueberry printed out into the console now uh every time i run it's going to be trying to execute these tests down here which i haven't even paid attention to yet so they're failing so that's why i'm ignoring those failing tests for now and we're just going to go through this and then we'll go down to the instructions now if we want to pull out a slice let's say that we want to get a new string that contains just e bear so these uh characters right here e bear well i could pull out that slice of this string favorite fruit by writing something like this favorite fruit and then in brackets three colon eight let's go ahead and copy that into our editor here and run and there again you see ebay now how did that work how did how was i able to do that well let's take a closer look at this syntax here uh if we which you can see sort of outlined at the very top so we have our string name which is favorite fruit and then we have the first index colon last index well that first index three if we look down at our diagram here that first index three shows the letter e the character e in our string blueberry and index eight is in between r and y when we write this syntax we're slicing a character we're slicing a range of characters from our favorite fruit that starts with index 3 so it starts here and includes index 3 and goes up to index 8 but excludes everything after index 8. so it's going to be everything between and including index 3 and before but not including index eight so we get e there yeah i see some folks if y'all are are saying like i don't think this is live i think there's like a little bit of a time delay between when i see the chat or at least when you see the video and what i'm saying so i may not see your questions immediately but the folks who are following along the chat they're going to be answering a lot of your questions in the chat now one other cool component of slicing so not only can we say i want all the characters between index three and index eight but i can also have what are called open ended slices so uh yeah let me zoom in here i'm noticing some folks are asking for a little little more screen real estate there we go so i was just saying that we can have what are called open ended slices and they look like this so let me copy in this one first print favorite fruit colon4 and then i'll do print for colon so these are called open ended slices because we're not specifying the starting index or the ending in index in these and when you leave out either the starting or ending index python is just going to assume that you want everything from the beginning of the string up until index four when you leave out the ending index it's going to assume that you want everything from index 4 all the way to the end so here we're getting everything before index 4 which is blue and here we're getting everything from index 4 on which is barry now let's go on to our instructions we're going to go through these i'm going to get rid of a bunch of this all this text up here you're a programmer working for copeland's corporate company at this company each employee's username is generated by taking the first five letters of their last name so it looks like for rodrigo villanueva it's going to be villa a new employee rodrigo villanueva is starting today and you need to create his account his first name and last name are stored here and we need to create a variable called new account by slicing the first five letters of his last name so we'll say new account and we want the first five letters of his last name so last name and they're actually a couple ways of doing this i'm gonna write one of them out and i'm gonna give you all a chance maybe to see if you can type in the other way so new account equals last name and i think the maybe the most explicit way of writing this i want every character starting from the first character which is index 0 and i want the first five characters so that's gonna go up to zero this is zero we got one two three four and i want everything before index five here now an easy way to actually figure out how many characters you have is to take this number and subtract this number so five minus zero gives us five characters that's that's how i know that new account is gonna have five characters in it now i see that uh vinit is giving us the other approach to doing this which is which is really awesome we could also write this by saying new account equals last name and then using that open ended slice uh method that we saw earlier because i'm leaving out that first index python is assuming that this number here is gonna be a zero and this is going to give me everything from the beginning up until index five now here it says temporary passwords for new employees are also generated from their last names create a variable called temp password by creating a slice out of the third through sixth letters of last name your string should have a total of four characters so i need to slice last name and i need four characters between third and sixth indexes or sorry the third and the six letters so if i go in here i'm looking at uh three four five and six i want those four letters right there now before i finish this up i'll give you all a chance to type this in and uh submit your thoughts on how you might do this i saw vinnette put in three colon six and then retracted it which is kind of interesting this this is a really common way that you might make a mistake here you might think okay three is the first character i want and six is the last character i want so let's put in three and six but remember this is the first character that we're not going to include so we would want to write three colon seven right and again we can check the the math here by subtracting three from seven we know that there's four characters here now if i run this we're actually going to fail the test now why did we fail well let's print out temp password to see what we got and we might understand a little bit better why we're wrong so remember we wanted llanllan but we got lanu nice i'm seeing a couple of folks here nakila and ofire cyberpunk given the correct answer remember indexes start at zero so the third character is actually index two and so then this ending index is going to be index six right because we want index two three four and five and pause right before 6. let's run that and there we get llan and for now i think we're going to pause with going through these exercises this gives us a good place to start at least with strings and i want to bring our attention to the cheat sheet which we're going to be using while we go through the challenges with galena so i'm going to i'm going to leave this page here maybe i'll give you all 10 more seconds to look over it and then we're going to go back into the curriculum into the course syllabus and look at the cheat sheet for a second uh let me go back here actually maybe it's linked down here somewhere if you scroll to the bottom of your instructions pin on the left you'll see this section that says concept review and we can take a look at the materials cheat sheet so let's go ahead and do that cheat sheet sorry yeah there's no there's no shishi here the cheat sheet sorry about that i uh maybe i mumbled too much um all of these lessons as you can see have a cheat sheet for them we're looking at the strings one and you can access all the other ones like loops and lists here i'm not going to go into all of this um but we're going to refer back to it as galena goes to the challenges but here you can find a lot of really important information about strings if you need a quick refresher and we're going to touch upon a lot of this stuff as we go through these challenges here's some of those things that we just talked about indexing and slicing some things that you may be familiar with uh from your lessons on lists and looping is iterating so we can do that with strings as well you may also be familiar with the lend function which i believe you can use on lists as well but you can do that with strings to know how many characters are in a string we can concatenate which just means combine two strings to form a new string so here we can add one fish and two fish to create the new string one fish two fish and a bunch of other things called uh python methods um which again i'm not gonna go into but they allow you to do some really awesome things uh with strings like title turn this string dark knight into title case where each character is capitalized and uh yeah i think this is a good place to stop galena do you want to take over and go through those challenges yeah sounds good um can you just show me what the exercise was that you stopped on was it four uh we stopped at exercise three cut me a slice of uh of us a string awesome cool so i'll jump to that one and share my screen okay let me know if you guys can see my screen ben can i get a thumbs up if i'm sharing awesome um oh uh let's see i'm not seeing it yet on youtube but i see it on ours yep you're good i think there's just a slight delay okay so we'll just jump into the next exercise which is concatenating strengths so you can also concatenate two existing strings together into a new string this is something ben mentioned briefly as he was running through the cheat sheet so if you have two strings one is fruit prefix with blue and one is fruit suffix with berries we can actually use the plus operator to combine these two strengths so notice how we created a new variable called favorite fruit by combining fruit prefix and fruit suffix so using a print statement we would output favorite fruit and it should return blueberries so i'm just gonna jump into the code editor and go through this to show you how it looks awesome so now we see blueberries on the right so something interesting about concatenation is that if you want to add a space you have to specify that so notice that there are no spaces added here we don't have a space between blue and berries it is a single word so to manually add in the spaces when concatenating strings we have to specify that so let's take a look at this fruit sentence so fruit sentence equals my favorite fruit is plus favorite fruit so if i run this can anyone tell me what i should see as the output so for anyone who said that there isn't going to be a space in the sentence between is and blueberries is correct because we didn't specify a space after is so if you take a look at the next example in that same code snippet there is a space right before the double quote so let's go ahead into our code editor and add that space and now clicking run should show me a sentence with the appropriate spacing so here is that space between is and blueberries right now let's try out this exercise so copeland's corporate company has realized that their policy of using the first five letters of an employee's last name as a username isn't ideal when they have multiple employees with the same last name that makes sense so write a function called account generator that takes two inputs first name and last name and concatenates the first three letters of each and then returns the new account name all right that was a lot so let's try to break it out break it into digestible chunks so first thing we want to do is we want to write a function so let's recall how we write functions this is something that we covered in the previous live streams so function in python is defined by using the def keyword followed by its name and in this case it also takes two inputs first name and last name so can anyone tell me what these two elements in the parentheses are called ben can you just let me know if anyone writes it in the chat yeah we got a couple couple folks saying parameters or attributes but frankie frannykins got right okay awesome yes so they are parameters so what we're going to do is we're going to take these two parameters and concatenate the first three letters of each and then return the account name so something that we're going to use is a syntax from the previous exercise which is where we used the colon within the subscript syntax so to grab the first three letters of each we can actually use colon three right because that's going to grab the first three letters so what i want to do is i want to use this syntax for both the first name and the last name parameters so we want to make sure we return this so we will use the return keyword first name and now because we're concatenating we're going to use the plus operator so last name and also colon three now let's hit run the checkout for me try that again awesome so that should have checked off for you now if you also want to test your function we can do so on the following line we're going to use first name and last name provided in script.pi which is just the name of our file and save it to the variable new account so i'm going to create a new variable new account and i'm going to set it equal to my function call so remember that in order for us to activate or bring a function to action we have to type out its name and pass in any arguments for the parameters so in this case our parameters are first name and last name and we want to pass in those real values in the function call so account generator and let's pass in first name and that would just grab the first name at the very top and last name which would be blevins so let's do first name i'm just going to remove some of this previous code to avoid confusion all right now let's hit run okay great now we passed the test but how come we didn't see any output in the terminal can anyone tell me how what line of code i can add here to see output in the terminal and let me know if there's any that come in you got it a few folks just shared their thoughts okay they're saying use the print function yes perfect so i'm going to use print and wrap new account within the parentheses let's hit run and here is our account generator output so we have the first three letters of the first name and the first three letters of the last name which is exactly what we expected okay cool let's move on to the next one more and more string slicing so python comes with some builtin functions for working with strings one of the most commonly used of these functions is called len so len returns the number of characters in a string so if you're coming from any other programming language maybe javascript for example this is going to work exactly like the length function in javascript so here it's just uh down to l e n but it also stands for length so for example if we take our favorite fruit blueberry the length of our favorite fruit is actually nine so that's the amount of characters in the string now notice that when we return a value for length it's actually not counting in the way that we do when we reference indices right those start from zero here the count starts from one so if we do one two three four five six seven eight nine there's exactly nine characters we don't start count from zero so another interesting thing about the length function is it also takes into account the spaces in a string so here i love blueberries is counting this space in between i and love and the space between love and blueberries now lynn comes in handy when we are trying to select characters from the end of a string what is the index of the last character why a favorite fruit from above so let's take a look so here we have our blueberry so in order for us to grab the last index well the character of the last index we can use the lent function in this way so i'm just going to grab this now it's going to give me an error but we'll take a closer look as to why in a second so we'll grab favorite fruit okay great so this is actually a very helpful error it says the string index is out of range because remember we're not counting from zero anymore so typically the last index is just going to be the length minus 1. so that is what we have to specify in our code because right now the length what it's trying to access is actually this root sub 9 right that's the amount of characters we have yeah so there's actually no index of 9 in this string right the last one is eight so if we do favor fruit sub len favorite fruit minus one that should give us the last element so i'm just going to add a minus 1 here and this should return our y so this is actually a very common technique that's used amongst many different programming languages so the most common way to retrieve the last element is to take the length of the string and subtract one so you could also slice the last several characters of a string using len so this is a syntax that we learned previously with the colon and that's going to just grab something from the start of the string mine uh so we're taking the length minus four so that's going to be 9 minus 4 that's going to give us 5 and that's going to give us all of the remaining characters erry from the string so let's drop this into the code editor sound and retrieve our last characters so we have e r r y from blueberry awesome okay let's move on to our exercise so copeland's corporate company also wants to update how they generate temporary passwords for new employees so we're going to write a function called password generator that takes two inputs first name and last name and then concatenate the last three letters of each and return them as a string okay so let's take a second to break down into chunks what we have to do so i'm just going to remove its code and start writing our functions so we're going to use def password generator that takes two inputs first name and last name and then concatenate the last three letters of each so i'm going to just pause for a second and write down in the chat how do you think we can achieve this so something we're going to definitely need to use is we'll need the len function we'll also need our subscript syntax and we'll also need to slice our string so we're going to be using all of those three things together in order to get the last three letters of each okay so let's get started so the first thing we want to do is we want to grab the last three letters of first name so where we're going to try is we're going to type out first name and we're going to enter our subscript syntax and then we want to use the lend function first name so this is going to give us the length of the first name string right and now we want to return the last three letters so we want to actually subtract three and now can someone explain to me how this is working so i'm just gonna walk you guys through how this is happening so if we have the length so the length of first name is going to be one two three four five elements so we have five minus three that's giving us two so it's going from the second element on to the last right so it's taking the second element which is i and it's going to return i k and o which is exactly what we need so then we want to do the same thing for last name so we want to grab the length of the string we want to subtract 3 and that's going to put us exactly at s and return s u k i okay so now the last thing i'm going to want to do is add a return keyword so another thing that you can do is you can also store this in a variable and then return that variable or you can simply just return this entire um expression as a function i'm sorry uh expression from the function so now let's hit run and now we don't get any output until we test our function so let's test it out on the provided first name and last name so we have password generator and let's pass in first name last name and we want to store it in temp password now in order to see this we're going to need to wrap an inference statement and output temp password all right let's move on to the next one so i think we're going to try to stop at 150 and then hop into the coding challenges how's that sound awesome cool let's move on to the next one okay so negative indices so negative indices are actually a way that we can access characters at the end of the string much simpler than we did in the previous exercise so in the previous exercise we used len to get a slice there's a much easier way with negative index indices which actually count backwards from the end of the string so if you use string name 1 it's going to grab the last character of the string string name minus two is going to be the second to last character so for example negative one is going to give us y negative two is going to give us r negative three is going to give us r well the third r uh sorry the second r back from the end but because we want to grab the elements using well because we want to slice our string it's actually going to return rry so let's think about how this is actually working so it's starting from the third element in the back and it's returning r r y so everything that follows that element so you see how this is actually a lot simpler and also cleaner code than writing out the len function okay so let's hop into the instructions so use negative indices to find the second to last character in company mode save this to the variable second to last okay so let's see how we can grab the second to last character so we want a second to last variable set it equal to company moto and we want to grab the second to last so let's say run awesome that's going to be our second to last element and we also want to use negative indices to create a slice of the last four characters in company motto and save this to the variable final word okay so we want our new variable final word is equal to company model now we're grabbing the last four characters so we want to go back four and grab everything after that so now before i print out both of these variables just type in the chat what you expect the output to be for each one okay so for those of you who said f would be the output for the first one you are correct and for those of you who said life would be the output for the second one you are also correct how's it going in the chat over there ben oh i can't hear you looks like some folks are staying in uh yeah it's looking good mark's got it in life perfect okay so now let's navigate to our coding challenge so if you're following along uh make sure to finish this lesson it has a lot of useful and important information that you need on python strings so we're just for the sake of time going to jump immediately into the coding challenge uh to show you how those are done so i'm going to pop in back into the syllabus oh that's our cheat sheet and i'm going to click on this strings code challenges article so this article contains three coding challenges that are going to test our knowledge of python strings it also is going to test our knowledge of functions and a couple of other prerequisite information that we learned previously in the lessons leading up to this one so the coding challenges include a vowel counter an m word count and date extractor so i'm just going to give one or two minutes um let's say one for the sake of time for you guys to pop this open and follow along okay so let's get started so we want to first write a function called vowel counter that takes a string as an argument and counts the number of vowels a e i o u in it okay so let's get into our code editor so let's define our function vowel counter it's going to take a string as an argument so you can call this anything you like i'm just going to call it an str short for string and count the number of vowels in it okay so we want to if we have any string let's say hey right it's going to return 1 as the number of vowels it includes which is e so we want to write code to accomplish this logic so first thing we want to do is we want to actually iterate through the entire string to check if there is a vowel in it so let's use a for loop so for let's say character in string we want to check if the character is in our collection of vowels so we have a list here that we can use so if car in vowels then we want to oh we want to count the number of vowels okay so we're going to need a counter here so i'm going to declare a variable count for you can write counter and i want to increase my count every time a character that exists in the string exists in the vowels list so we're going to use count e plus equals one or you can also do count equals count plus one either one works okay so now once we set up our counter we want to then return the number of vowels in our in our string right that's accumulated in our account so i want to use the return keyword and return count okay now let's hit run now i can't see anything just yet it's because i haven't called my function so let's go ahead and call our function with any string let's do bend and use a print statement to see our output awesome so because ben's name only has one vowel in it it returns one if we do code academy that should return let's see one two three four great now let's move on to the next one oh i forgot to check my answer okay we got it all right let's move on to the next one now we want to write a function called m word count that takes a string as an input and returns a count of the words in the string that start with the upper case or lowercase letter m oh and actually before i move on i just want to mention that there's numerous solutions for some of these coding challenges so don't feel like if you don't have exactly this but your code still works that you did it wrong so as long as your code works uses best practices you should be good and of course also passes the tests okay so now let's move on to this one so for example if my sentence is my gosh what a beautiful monday morning this is then m word count sub my sentence should return three right because it's going to count how many uppercase and lowercase ms there are so the uppercase one is um here in my monday and the lowercase one is in morning okay so let's jump into our code editor and start so let's write our function m word count that takes a string as an input i'll just do an str and returns a count of the words in the string that start with the uppercase or lowercase letter m so the strategy we're going to use here is actually very similar to what we did in the previous coding challenge where we iterated through the entire string right we have to go through each character in the string and check if it's uppercase or lowercase m so let's go ahead and do that so i'm going to set up my counter because i know i'm going to need one here so let's go ahead and set up our for loop so for let's do word this time in string we want to set up an if statement so if word sub zero now i really want to hear what you guys think about this why i'm using word subzero but for the sake of time i'm just going to explain it in a second so if word subzero is equal to m or word sub 0 is equal to lowercase m then i want to increase my count now the reason that we used word subzero is because when we grab a single word all we want to check for is if the first letter is an uppercase or lowercase n so it doesn't really matter to us if there's an m somewhere in the word we only want an uppercase or lowercase m if it's the first letter and that's why we're using the subscript 0. so now we added our conditional statement if word is capital if the first letter is m or lowercase m we want to increase our count and then we want to return this count from the function so now let's call our function with our my sentence string wrap it in a print statement to see the output and let's hit run awesome it returned a 3 which is exactly what we expected you can also try this with other sentences and with other numbers of uppercase and lowercase m's so let's check our answer and we got it okay and now we're just going to move on to our final one um i'm sorry if i'm breezing through this i just want to make sure that you guys can see how all of the coding challenges are done so here we have our date extractor given a string called date that is in the form of month day and year write a function called date extractor that takes date as an input and returns three values month day and year so we actually didn't get a chance to cover um escape characters but they are in the cheat sheet so escape characters are used to um basically is actually are we gonna use that here because if we're not you always use the split function i'm sorry you can also use the split function yes that's true so we are going to use this split actually let me just jump into here because we only have one minute left um so let's do def um oh yes i didn't finish reading it so we write a function that takes date as an input and returns three values month day and year so if our date is 6 16 2006 the function should return multiple values in the form 6 16 and 2006 and we want to keep them as strings we don't want to convert them to integers so our function is going to be date extractor and we're going to accept date as the input and now we are going to have to split our string so i'm going to do date dot split and i want to split it at these um slashes so wherever there is a slash i wanted to split the string so i want to return the elements that are preceding the slash so now because date.split doesn't actually change anything for date we have to store it in a new variable so let's say new date syntax and this is going to return an array so once it returns an array we can grab the elements and assign them to month day and year so month is going to be new date syntax sub zero that's going to be hour six then day is going to be new date syntax sub one and you can of course name this variable anything you like i recognize that i chose a slightly lengthy one and this one is going to be year so now we have our month day and year variables we can go ahead and return them from our function so we'll do month comma day comma year awesome and now let's just run our function pass in this string and wrap it in a print statement okay let's hit run awesome here is our tuple or multiple values in this form we have month day and year all right well thanks everyone for sticking around higalina um can i i think there may have been a mistake in one of the in the second one okay um can we actually look at that together on yours yeah can you share your screen again and then yeah yeah mark so mark was asking mark lam was asking why do we use word zero um yeah so this one here um i think uh i just this is something for me to clarify too um since i'm not uh it's been a while since i've used python um in your for loop on line five when you write forward in string is that going to separate the string into words and and no to space them out or will that go through every character oh that's a great question so let's take a look at what's actually happening here so if we print word so it's actually going to oh sorry yeah so it's going to iterate through every single um yeah it actually looks like it's iterating through every single character rather than word but we can use that split function again right to split on every space and then iterate through that list right yes yes definitely um i'm also going to and then mark that would sort of get to your um question which is we're using word zero because we want to get the first letter of every word different questions and see if there's anything else i missed yeah so um for iteration and looping yeah that's that's something we didn't cover in this section but it's loops are actually covered in the previous one um so that was something i also wanted to mention um if we go back to our series um there were some topics that uh we utilized here that weren't taught in this particular section but for example functions um lists and loops were all taught previously so if you want to get a refresher on that just go ahead and navigate back to those lessons but also some of the things that we use like um escape characters and split they are all in this lesson we just didn't get a chance to cover it but definitely make sure to check it out all right um i guess that's for four minutes over time but thank you guys everyone for sticking around i'm going to see if i can feel any other lingering questions okay awesome so ben how are you feeling feeling good awesome this is a really great question thank you everyone for for hopping in we will see you next time um so the next module that's going to be covered in this section is dictionaries so make sure to tune into that one and then there's one more after that and the series is all done alright everyone we'll see you next time have a good one
