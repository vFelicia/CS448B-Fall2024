With timestamps:

00:00 - hi my name is Stephanie I am a software
00:02 - developer based in Baltimore and in this
00:04 - video we're gonna go over the what's the
00:06 - whys and some clarifications of DRI DRI
00:11 - is also known as that don't repeat
00:13 - yourself principle it's a common
00:15 - practice developers use when they're
00:16 - writing code to make sure they don't
00:17 - have multiple pieces of code doing the
00:19 - same thing will spend the rest of the
00:21 - video going over three big takeaways of
00:23 - dry when developers follow dry they will
00:27 - isolate a piece of logic and read the
00:29 - code for it in one place where it will
00:31 - be accessible to whatever else needs the
00:32 - logic this means that any other place
00:35 - that needs the same logic can reuse that
00:37 - code without rewriting the code kind of
00:40 - like when you have a menu instead of
00:42 - distributing an individual copy to
00:44 - everyone just put it up on the wall and
00:46 - let everyone order from there
00:48 - say for example I have this bank account
00:51 - and I'm writing a function to deposit
00:53 - any amount of money in my account
00:56 - hold on I think I've seen this somewhere
00:58 - before
01:01 - yeah I'm going through some old code and
01:03 - I see that I've already written the same
01:05 - deposit logic for two other accounts one
01:08 - for Catherine's account and one for
01:10 - Michael's account this would be a
01:12 - perfect opportunity to use a dry
01:14 - principal we'll need to consolidate the
01:16 - logic in one place add some abstraction
01:18 - and make a reference to where our logic
01:21 - is held so in our case this would mean
01:23 - consolidating the bank account creation
01:25 - and deposit logic into a class
01:28 - and now when we want to create an
01:30 - account that can deposit we just need a
01:33 - reference the bank account class so here
01:35 - we're making Stephanie's Michaels and
01:37 - Catherine's account using our new bank
01:39 - account class and they can deposit using
01:41 - the function that belongs to the class
01:43 - without rewriting the logic for it three
01:46 - other times just as DRI saves you from
01:49 - having to rewrite logic when it appears
01:51 - in other places it saves you from
01:53 - rewriting code when you want to make
01:55 - changes you'll also avoid errors as
01:58 - you'll only need to modify one piece of
02:00 - code instead of ten say now from our
02:03 - previous example we instead want to make
02:06 - each deposit return the new balance then
02:08 - we would only have to do that in one
02:09 - place instead of four drag can also make
02:13 - the codebase easier to read because the
02:15 - layers of abstraction simplify what the
02:17 - code is trying to do so you get a
02:19 - general idea what's happening for
02:22 - example looking at the first function
02:23 - here I can see that it makes T and as we
02:26 - read through the function we know that
02:28 - it makes T by getting a cup of water and
02:30 - adding leaves this is because the get
02:33 - cup and add functions are added layers
02:35 - of abstraction that hide away how the
02:37 - cup is retrieved and how the leaves are
02:39 - added so we can focus on the end result
02:41 - that there's a cup with water and that
02:44 - leaves for added now using our DRI
02:47 - compliant functions I can also make hot
02:49 - cocoa in the second function here and I
02:52 - already know what this functions do
02:53 - without seeing the implementation of the
02:55 - get cup and add functions it can be
02:58 - pretty exciting when you go back through
02:59 - your code and start to form some ideas
03:01 - on how to remove duplicate code but
03:04 - there's a difference between removing
03:05 - duplicate code and using dry removing
03:08 - duplicate code can be good but the
03:10 - driving force behind DRI is to reduce
03:12 - repeated logic when you remove too much
03:15 - code it's possible to go overboard as
03:17 - you're simplifying you may need to make
03:20 - an exception in order to make it work to
03:22 - show you what I mean let's continue our
03:24 - bank account example we could also use
03:26 - the deposit function for withdrawals and
03:28 - rename it to reflect something that
03:30 - adjusts the balance so now our deposit
03:33 - function can be renamed to address
03:35 - balance to reflect the expanded
03:37 - functionality and now any deposits will
03:41 - be represented by
03:42 - positive numbers passes arguments to the
03:44 - adjust balance function and withdrawals
03:46 - will be represented by negative numbers
03:49 - seems pretty straightforward right
03:53 - but we all know that people can't
03:55 - withdraw if their balance dips below
03:56 - zero so here enters our first exception
04:00 - if the new calculated balance is less
04:03 - than zero we should return an error
04:05 - message to let the user know they can't
04:07 - withdraw any more and then we need to
04:11 - update the balance for when the deposit
04:13 - or withdrawal is valid now you might be
04:18 - thinking what's the big deal
04:20 - it's just one exception right well not
04:23 - quite
04:24 - we haven't considered overdrafts yet so
04:26 - now we'll have to expand our function to
04:28 - accommodate overdrafts and let the user
04:30 - withdrawal the funds even when the
04:32 - balance is negative so we'll want to
04:34 - charge the user $35 for the overdraft
04:36 - and update the balance to allow the
04:38 - withdrawal to go through
04:41 - Oh we'll also need a send back a proper
04:44 - error message and a new balance and we
04:46 - should consider waiving the overdraft
04:48 - fee of the users the first time offender
04:50 - woo but what about interest and now
04:53 - we've fallen into this rabbit hole of
04:55 - making exception after exception just to
04:57 - make this function work for every
04:59 - scenario we've gone from this deposit
05:02 - function here to this monster right here
05:05 - and you can see how much more difficult
05:07 - it is to read this is something that I
05:10 - still have to keep myself in check about
05:12 - when I look over my own code that's why
05:14 - coming back to the purpose of dry to
05:16 - eliminate logic duplication helps me
05:19 - answer the question should I remove the
05:21 - duplicate code here so back in our
05:23 - example we can ask ourselves will
05:25 - removing duplicate code make it dry
05:27 - compliant is their logic duplication
05:30 - here and the answer is no deposits and
05:33 - withdrawals are two separate pieces of
05:35 - logic dries a very powerful concept that
05:38 - can strengthen your code and make it
05:40 - versatile not all situations will be
05:42 - black and white and may take a bit of
05:44 - creativity but if you're ever in doubt
05:46 - just ask yourself is this duplicate code
05:48 - or is this duplicate logic thanks so
05:52 - much for watching I hope you enjoyed
05:53 - this video feel free to subscribe to
05:55 - this channel and drop a comment below
05:57 - and if you're ready to take your skills
05:59 - to the next level you can start learning
06:00 - on coke atom II today

Cleaned transcript:

hi my name is Stephanie I am a software developer based in Baltimore and in this video we're gonna go over the what's the whys and some clarifications of DRI DRI is also known as that don't repeat yourself principle it's a common practice developers use when they're writing code to make sure they don't have multiple pieces of code doing the same thing will spend the rest of the video going over three big takeaways of dry when developers follow dry they will isolate a piece of logic and read the code for it in one place where it will be accessible to whatever else needs the logic this means that any other place that needs the same logic can reuse that code without rewriting the code kind of like when you have a menu instead of distributing an individual copy to everyone just put it up on the wall and let everyone order from there say for example I have this bank account and I'm writing a function to deposit any amount of money in my account hold on I think I've seen this somewhere before yeah I'm going through some old code and I see that I've already written the same deposit logic for two other accounts one for Catherine's account and one for Michael's account this would be a perfect opportunity to use a dry principal we'll need to consolidate the logic in one place add some abstraction and make a reference to where our logic is held so in our case this would mean consolidating the bank account creation and deposit logic into a class and now when we want to create an account that can deposit we just need a reference the bank account class so here we're making Stephanie's Michaels and Catherine's account using our new bank account class and they can deposit using the function that belongs to the class without rewriting the logic for it three other times just as DRI saves you from having to rewrite logic when it appears in other places it saves you from rewriting code when you want to make changes you'll also avoid errors as you'll only need to modify one piece of code instead of ten say now from our previous example we instead want to make each deposit return the new balance then we would only have to do that in one place instead of four drag can also make the codebase easier to read because the layers of abstraction simplify what the code is trying to do so you get a general idea what's happening for example looking at the first function here I can see that it makes T and as we read through the function we know that it makes T by getting a cup of water and adding leaves this is because the get cup and add functions are added layers of abstraction that hide away how the cup is retrieved and how the leaves are added so we can focus on the end result that there's a cup with water and that leaves for added now using our DRI compliant functions I can also make hot cocoa in the second function here and I already know what this functions do without seeing the implementation of the get cup and add functions it can be pretty exciting when you go back through your code and start to form some ideas on how to remove duplicate code but there's a difference between removing duplicate code and using dry removing duplicate code can be good but the driving force behind DRI is to reduce repeated logic when you remove too much code it's possible to go overboard as you're simplifying you may need to make an exception in order to make it work to show you what I mean let's continue our bank account example we could also use the deposit function for withdrawals and rename it to reflect something that adjusts the balance so now our deposit function can be renamed to address balance to reflect the expanded functionality and now any deposits will be represented by positive numbers passes arguments to the adjust balance function and withdrawals will be represented by negative numbers seems pretty straightforward right but we all know that people can't withdraw if their balance dips below zero so here enters our first exception if the new calculated balance is less than zero we should return an error message to let the user know they can't withdraw any more and then we need to update the balance for when the deposit or withdrawal is valid now you might be thinking what's the big deal it's just one exception right well not quite we haven't considered overdrafts yet so now we'll have to expand our function to accommodate overdrafts and let the user withdrawal the funds even when the balance is negative so we'll want to charge the user $35 for the overdraft and update the balance to allow the withdrawal to go through Oh we'll also need a send back a proper error message and a new balance and we should consider waiving the overdraft fee of the users the first time offender woo but what about interest and now we've fallen into this rabbit hole of making exception after exception just to make this function work for every scenario we've gone from this deposit function here to this monster right here and you can see how much more difficult it is to read this is something that I still have to keep myself in check about when I look over my own code that's why coming back to the purpose of dry to eliminate logic duplication helps me answer the question should I remove the duplicate code here so back in our example we can ask ourselves will removing duplicate code make it dry compliant is their logic duplication here and the answer is no deposits and withdrawals are two separate pieces of logic dries a very powerful concept that can strengthen your code and make it versatile not all situations will be black and white and may take a bit of creativity but if you're ever in doubt just ask yourself is this duplicate code or is this duplicate logic thanks so much for watching I hope you enjoyed this video feel free to subscribe to this channel and drop a comment below and if you're ready to take your skills to the next level you can start learning on coke atom II today
