With timestamps:

00:03 - okay
00:04 - i think we're live so
00:07 - um hello everyone welcome to
00:10 - the fourth session full of cocadmy live
00:13 - for creative coding
00:14 - um hi again i am g1 and i'm a curriculum
00:17 - developer at cocademy
00:19 - and today we've also got morgan joining
00:21 - us morgan if you want to introduce
00:23 - yourself a little bit hey everybody i'm
00:25 - morgan and i'm a content contributor at
00:27 - code academy
00:29 - yeah and he also was part of the
00:31 - production team that helped us develop
00:33 - the learn p5.js course
00:35 - um and he's also created the
00:38 - um project which we're going to walk
00:39 - through today together as well
00:41 - so um thank you morgan for um
00:44 - joining us today yeah happy to be here
00:47 - okay cool um i think we can get started
00:50 - and maybe we'll also do a little bit of
00:52 - a recap but basically
00:53 - um let me actually start sharing my
00:55 - screen too
00:57 - um
01:00 - um basically um these live series uh
01:03 - during these live series we're going
01:04 - through
01:05 - um p5.js and we're going off a lot of
01:07 - the content that is based on this course
01:09 - called learn p5 chance on the code
01:11 - academy platform
01:12 - it's a free course so if you are
01:14 - following along the live stream series
01:16 - um i think um generally the live stream
01:19 - the series that
01:20 - are designed to be a good compliment to
01:22 - the learn p5.js course the content
01:24 - itself
01:25 - so in the first week the first live
01:27 - series session we went through some
01:29 - fundamental um
01:30 - concepts about v5gs we talked about
01:33 - using the setup in the draw loop and we
01:34 - also did some
01:35 - static visualizations using 2d primitive
01:38 - shapes
01:38 - and our second session we turned those
01:41 - static shapes into animations
01:43 - in within the draw loop and using you
01:45 - know incrementing and decrementing
01:46 - values to
01:48 - animate the position size and color and
01:51 - so on for the animation
01:53 - last week actually we had cassie um as
01:56 - jor who joined us as a guest and we
01:59 - talked about the p5.js
02:01 - um open source communities open source
02:03 - software and also we talked about
02:06 - the p5.js web editor which we are going
02:09 - to
02:09 - um use for in today's live stream series
02:12 - and also going forward we'll be um using
02:14 - the live
02:15 - p5.js web editor to do programming in
02:17 - and also to share the sketch
02:19 - or the link to the code with you guys so
02:21 - we're actually not going to be working
02:23 - on the cocamy platform itself
02:25 - um but we're going to be um creating all
02:27 - of our p5.js creations inside of this
02:29 - web editor
02:30 - and cassie um who's one of the main
02:32 - developers for the
02:34 - platform gave us a really good tour
02:36 - around the tool itself
02:38 - so right now i have this code loaded for
02:40 - um
02:41 - our live session today but let's
02:43 - actually open it up in another place
02:46 - editor um so if you know if you uh open
02:49 - up a blank
02:50 - p5.js editor this is kind of the view of
02:52 - what you will get
02:53 - basically let me actually log on but i
02:55 - log out but if i log out you get an
02:57 - option to log in or sign up
02:59 - if you um click to sign up it doesn't
03:01 - really ask for a lot this is kind of all
03:03 - what they asked for from you you can
03:05 - put in your username your email and your
03:07 - password and confirm your password and
03:08 - you will get
03:09 - a b5.js um account it will
03:13 - oops okay i should have stayed logged in
03:15 - but maybe i'll turn up
03:16 - screen and quickly type that in in a bit
03:18 - but basically the thing that i do want
03:20 - to show you
03:21 - is that when you first launch it you
03:23 - will see this view on the left side that
03:25 - is a code editor and you have this
03:26 - preview page
03:28 - and if you open up this little collapsed
03:31 - bar on
03:32 - the left side you'll get a view of these
03:34 - sketch files in here and then these are
03:36 - the similar you know
03:38 - we talked about this in the first
03:39 - session but basically they are all the
03:41 - files that you it is required for you to
03:42 - run the p5.js sketch
03:44 - there's an index.js file with the
03:46 - library files um
03:48 - linked there as a script tag the cdn
03:50 - link in there
03:51 - and there's a link to the style sheet
03:52 - and there's also a link to the scripts
03:54 - that you're using at the javascript that
03:56 - you're using inside of the sketch.js
03:58 - file
03:58 - so that's all linked in here for you so
04:00 - this is kind of what the default
04:02 - um generated files you get when you
04:04 - first open up
04:05 - uh your p5.js web editor and let me
04:07 - actually stop sharing and quickly log in
04:10 - i did not anticipate this part always
04:13 - got to be prepared
04:17 - and
04:21 - um
04:24 - let me see if you will let me log back
04:28 - in
04:30 - what is going on in here um
04:38 - okay i don't think that that will matter
04:40 - too much i'm gonna move on
04:42 - and re-share
04:45 - sounds good um okay but going forward
04:48 - um the thing that we're going to be
04:50 - covering the topics that we're going to
04:51 - be covering
04:52 - are in this third module inside of
04:54 - interaction
04:55 - so um if you click on the lesson for
04:57 - interaction
04:58 - uh basically it starts off talking about
05:01 - um different kinds of interactions that
05:03 - you can add to the p5.js sketch
05:05 - so um morgan if you want to give us like
05:07 - a super brief overview of what the and
05:09 - the
05:10 - kind of topics that we learn in this
05:12 - module that'd be awesome
05:14 - yeah sure so i think interaction's
05:15 - really like kind of the
05:17 - like one of the beginnings of like the
05:19 - bread and butter of
05:20 - p5.js and just really being able to use
05:24 - your mouse
05:24 - your keyboard um and then for more
05:27 - advanced interactions like your voice
05:29 - to actually like be able to control
05:30 - programs and work with programs make
05:32 - games or
05:33 - interactive art pieces and things like
05:34 - that so um
05:36 - via like mouse scroll mouse click um
05:39 - like mouse up
05:40 - or key presses and things like that are
05:42 - kind of what's covered in this
05:43 - uh this lesson specifically
05:47 - and so for today's um project
05:50 - we're going to be going through this
05:52 - particular project that is on the cocamy
05:54 - platform
05:55 - called the generative art creator and
05:57 - for this project basically we're
05:59 - going to be using mapping a lot of these
06:01 - like functions to
06:03 - keep pressed and key events and we've
06:05 - kind of sort of taken
06:06 - this uh web editor sorry we've taken
06:09 - this project
06:10 - onto the web editor so on the youtube
06:13 - um video inside of the descriptions part
06:17 - there should be a link to two links to
06:19 - the p5 web editor website
06:21 - there's one for the solution code for
06:24 - the project
06:25 - and then there's also a link for the
06:26 - starting code of the project so what
06:28 - we're going to be doing during this live
06:30 - session is going to be working on the
06:32 - solution code which actually has inside
06:35 - of the solution code there will be
06:36 - a lot of comments in here not to
06:39 - freak anyone out but i've basically
06:41 - moved the steps that you will normally
06:43 - see
06:44 - inside of our platform on the projects
06:46 - page onto the p5 web editors you can
06:48 - follow along
06:49 - um with us on the web editor if you want
06:52 - so if you were to
06:53 - open up that link in that's connected
06:55 - inside of the uh that's
06:57 - attached inside of the description of
06:59 - the youtube video
07:00 - you can also go to file and duplicate or
07:03 - save
07:04 - this particular sketch inside of your
07:07 - account of your app editor account you
07:09 - can keep
07:10 - a copy of the sketch in there as well
07:12 - and code along with it same goes for
07:14 - the solution code if you wanted to
07:16 - create a duplicate or a copy of the
07:18 - solution code
07:19 - um in your account that is also possible
07:22 - but before we go any further i guess i
07:24 - want to give you guys a little bit of an
07:27 - overview of what we're going to be
07:28 - making so
07:30 - on the v5 editor on the right side we've
07:32 - got this um
07:33 - preview window and on the left side
07:34 - we've got the sketch window where you
07:36 - can
07:36 - you know um change code in here if we
07:39 - wanted to
07:40 - if we click on this run button this pink
07:43 - big pink
07:44 - play button then our sketch is running
07:46 - the reason why there's nothing in here
07:48 - is because
07:49 - this particular sketch is a bit like
07:52 - it's like an
07:52 - app right it's a generative app um that
07:55 - has
07:55 - um i don't know if you guys you guys
07:57 - can't see this but i am pressing
07:59 - different keys on my keyboard to
08:00 - basically do these drawings onto the
08:03 - sketch
08:04 - and there are different functions that
08:06 - are mapped to different kinds of keys on
08:08 - my keyboard
08:09 - and if i press the return key i've got
08:12 - this
08:13 - you see that i've downloaded this image
08:15 - of the canvas
08:16 - as an image file as a jpeg file and also
08:19 - if i press
08:20 - spacebar it will basically erase
08:24 - everything that we've drawn onto here
08:26 - so it's kind of like a i guess a version
08:29 - of the paint app but i'm using
08:33 - our own custom visualization functions
08:36 - yeah exactly and also it's this is also
08:39 - something that is
08:40 - provided in the start code as well but
08:42 - there are
08:43 - all the functions that we're using to
08:45 - generate all these visualizations are
08:47 - saved in a separate file called
08:48 - drawshapes.js
08:50 - in here so you should be able to see you
08:52 - know what's running behind the scenes to
08:54 - create all of those different kinds of
08:55 - visualizations
08:56 - so the actual visualizations part we're
08:58 - not going too deep into
09:00 - in this session it will be mostly
09:02 - focusing on how to
09:03 - add uh keyboard events to your p5.js
09:06 - sketches in this session
09:08 - i miss anything no i think that's it
09:11 - okay yeah cool so
09:14 - i'm gonna move on to the file for the
09:18 - starting code
09:19 - and i'm actually gonna create a
09:20 - duplicate of this because i don't
09:22 - want to did i create a duplicate
09:27 - something funky going on with my um
09:31 - okay since i am logged out any changes
09:34 - on to this um
09:36 - starting code is not going to be
09:38 - actually affected
09:39 - to the version of the sketch that i've
09:41 - shared with you guys already
09:43 - so i'm actually going to go ahead and
09:45 - start coding in this version
09:46 - of the starting code for the generative
09:48 - our creator
09:50 - project um i know so we'll take it from
09:52 - the top actually and then we'll go
09:54 - okay so just um a little note as well
09:57 - i've also numbered the steps that
10:00 - are the steps that you should follow to
10:03 - complete this project
10:04 - we'll start from step one the setup but
10:06 - then you'll quickly notice that there's
10:08 - step two in the setup but then it gets
10:10 - to step four in the draw
10:11 - so the place of where all the steps are
10:14 - do jump around a little bit so i'm
10:16 - hoping that you know if you're watching
10:17 - if this live stream together with us or
10:20 - if you're going to be looking at this um
10:22 - on a later date
10:23 - um i wanted to put it up there so that's
10:25 - recorded information that
10:27 - the steps are going to be jumping
10:28 - through but then we're going to be doing
10:30 - this together with you guys so hopefully
10:32 - they'll be a little bit less confusing
10:34 - but the first step that we're going to
10:35 - be doing and if i press play in here you
10:38 - see that there's nothing being um
10:39 - created in the preview
10:41 - so i'm going to go ahead and then i'm
10:43 - going to create the first
10:44 - um one of the most important functions
10:46 - that you can use in the setup which is
10:48 - to
10:48 - use the create um canvas function
10:52 - oops canvas and inside of the canvas
10:55 - function i'm going to be
10:57 - putting in system p5.js built in
10:59 - variables
11:00 - window width and window
11:04 - window height so that when we do this
11:08 - and we're not going to see anything in
11:10 - here but basically what will happen with
11:12 - this function
11:13 - is that it will create a canvas with the
11:15 - size of the window width and window
11:16 - height
11:17 - or in the case of b5.js web editor it
11:19 - will use the width and height of the
11:20 - preview window in here
11:22 - i am also going to add in a background
11:25 - color
11:26 - so that we can actually see something
11:28 - inside of the preview window that's
11:29 - going to happen
11:30 - for now i'm going to give it a gray
11:32 - value of 50.
11:34 - um so this is the same as right same as
11:36 - writing 50 comma 50 oops
11:39 - 50 comma 50 comma 50 but the shorthand
11:42 - for that if you're using all same values
11:43 - for r
11:44 - g and b then you can just write 50. so
11:47 - if you go ahead and press play we've got
11:48 - this gray rectangle of a canvas that is
11:51 - perfectly the width and height
11:52 - of our preview window cool
11:56 - so then we're going to move on and it
11:57 - says step two is we're going to be
11:59 - randomizing variables to draw shapes
12:01 - so here in lines um five to nine in here
12:05 - we've got some
12:05 - global variables we've got let x and y
12:08 - we've got less speed x and speed y
12:10 - we've got red vowel green vowel and blue
12:12 - vowel um
12:13 - and we've got some another two other
12:16 - global variables and so on
12:18 - um these um global variables and lines
12:21 - well actually all of these variables
12:23 - global variables in lines
12:24 - five to nine are actually going to be
12:27 - used inside of our drawshapes.js
12:31 - file and they are going to be used
12:33 - inside of all these functions that
12:35 - generate
12:36 - these different kinds of visualizations
12:37 - that i have already been put in for you
12:40 - um but basically um we will need to
12:43 - randomize some of these functions uh
12:45 - sorry some of the values for some of
12:47 - these variables in here so that we can
12:49 - get
12:49 - a generate dynamic sort of
12:52 - visualizations
12:53 - so there are some things that are
12:54 - randomized when the sketch first runs
12:56 - and then there are some things that will
12:57 - be generated
12:58 - uh that are attached to keyboard events
13:01 - cool um so let's go ahead and follow
13:05 - these steps for step a
13:06 - to step 2a to 2d so for 2a
13:10 - it says set a x variable to a random
13:12 - number
13:13 - between 0 and with and we're going to
13:15 - use the random function
13:17 - which is also a p5.js built function so
13:20 - it'll be a minimum
13:21 - i want a random number between a minimum
13:23 - of zero and maximum
13:24 - width which is also a p ah i keep
13:28 - spelling that which is also a um if i
13:31 - just
13:32 - built in variable that returns the width
13:34 - of the canvas
13:35 - this is really interesting where here
13:36 - we've got when the width um as the
13:39 - um width of the canvas which will return
13:42 - us the
13:42 - total width of the preview window and
13:45 - because we're also using width
13:46 - which is the canvases width and that's
13:49 - going to be same as the preview window
13:50 - that's actually what we get
13:51 - right this also means that if our um
13:54 - preview window is bigger
13:56 - and then you run it then this is now
13:58 - become it will become the width of the
14:00 - canvas
14:02 - let me actually resize this so you guys
14:03 - can see the code a little better
14:05 - so now we've got x we've set our x
14:08 - inside our setup function to be a random
14:10 - number any random number between zero
14:12 - and width
14:13 - and then for y we'll do the same thing
14:15 - but use
14:17 - height instead of width so we'll use the
14:19 - random function again and we want to
14:20 - generate a random number between 0
14:22 - and height and then for our step 2c
14:26 - we'll do a similar thing of generating a
14:28 - random number but this time it'll be
14:30 - between -3 and 3.
14:31 - so speed x global variable is going to
14:34 - be initialized with a value a random
14:36 - value between -3
14:38 - and 3 inside of our setup function again
14:42 - last thing for step uh step two d
14:45 - we'll do uh speed y global variable is
14:48 - going to have a random number between
14:50 - minus three
14:52 - and three so this is sort of these um i
14:54 - guess
14:55 - setup that we have to do and actually
14:58 - we're doing this in the setup function
14:59 - so how convenient
15:01 - that function is called setup but um
15:03 - just to re uh just
15:05 - as a reminder the setup function runs
15:07 - once
15:08 - when the when the sketch is first loaded
15:10 - so all of these are going to be done
15:12 - once and then right after everything
15:14 - inside of our draw function is going to
15:16 - run
15:16 - after but before we get to actually you
15:19 - know putting some things inside of our
15:20 - draw function
15:21 - we're going to do something similar to
15:23 - another function that we're going to
15:25 - declare
15:26 - outside of the draw so this is the part
15:28 - that where
15:29 - um keyboard interaction comes in but
15:32 - basically
15:32 - inside so there's a step three and it's
15:35 - now become
15:36 - line fit 80 i don't know if it would be
15:38 - still line 80 in the blank file
15:40 - but towards the end of the sketch.js
15:42 - file there is a step three
15:44 - it says add key release function to a
15:46 - random randomize and to randomize
15:48 - variables again in the cube release
15:49 - so what's going to happen is that all of
15:52 - these variables are going to be in
15:53 - randomly set when the sketch first loads
15:56 - and whenever a key is pressed
15:58 - and then released we're going to be
16:00 - resetting all of these values global
16:02 - variables into another random number
16:04 - so the next time another key is pressed
16:06 - i will be
16:08 - having some sort of a random element to
16:10 - the
16:11 - um visualizations that get created with
16:13 - key
16:14 - key events so maybe uh we should there's
16:17 - a bit of a
16:18 - i guess some information that we need to
16:21 - cover before
16:22 - we do this so i guess let me ask you
16:25 - morgan what is the key release function
16:27 - um yeah so uh i guess something
16:31 - maybe we should have mentioned a bit
16:32 - before but a lot of what
16:34 - interaction entails with p5 is these
16:37 - sets of predefined functions
16:39 - for either mouse presses key presses
16:41 - things like that so key released
16:43 - will trigger an event inside of the key
16:46 - release function
16:48 - whenever that key is released and you
16:49 - can set specific keys
16:51 - um another way i won't mention that yet
16:53 - but yes the key release function
16:55 - whenever you release a key
16:57 - um whatever information is inside
17:00 - that function will be run i think it's
17:03 - something
17:04 - um that might not be so noticeable when
17:06 - you're like just accustomed to
17:08 - i mean mouse is a relatively friendly
17:11 - i think what's the right word for this
17:14 - like computer accessory
17:15 - computer auxiliary input device
17:19 - if you think about it you do a lot of
17:21 - things with the mouse right there's
17:23 - a click there's a double click but then
17:25 - that click is also it can be separated
17:27 - into two separate events right
17:29 - where there is the press event and
17:30 - there's also a release event
17:32 - so for each of those events that your
17:36 - keyboard and also your mouse can detect
17:38 - um there are functions
17:40 - ability5 just functions in here so the
17:42 - mouse for
17:43 - mouse event there's all of these things
17:45 - where there's a we've looked at mousex
17:47 - and most y
17:48 - um variables um before and i think
17:52 - did we do this i think in week two i
17:54 - believe so
17:55 - uh when we were talking about animation
17:57 - but those are these uh
17:58 - built-in variables that return you the
18:00 - position of the mouse x and mouse y
18:02 - positions
18:03 - of your mouse but there are also
18:04 - functions in here and also
18:06 - variables in here that basically let you
18:09 - know
18:09 - or let you let you run different code
18:12 - snippets
18:13 - uh depending on a whether a particular
18:15 - mouse or keyboard event has occurred
18:18 - so in this case and inside of our p5 web
18:21 - editor
18:22 - where maybe this one it talks about add
18:25 - key release function
18:27 - what it means is that add this a
18:28 - built-in function called
18:30 - key released and then
18:34 - here in the description it says the key
18:36 - release function is called once every
18:38 - time a key is released
18:39 - so it kind of like works in a similar
18:41 - way to our draw
18:42 - and the setup functions and we're also
18:45 - um built in b5.js functions where
18:48 - we we have to define it but there's we
18:50 - don't need to run that function
18:51 - actually for it we us to trigger um
18:54 - the things inside of the key release
18:56 - function instead
18:58 - the contents inside of that function
18:59 - will run for us whenever that key
19:01 - release
19:02 - event is detected so in here i'm going
19:04 - to say
19:05 - function key released
19:09 - and then i'll open my curly bracket i'm
19:12 - going to close my curly bracket
19:13 - after all of these steps because i'm
19:15 - going to do all of these inside of the
19:17 - key release function
19:18 - so in between those um i've created a
19:21 - function a new function definition for
19:22 - the key released built in b5.js function
19:25 - and inside of the key release function
19:27 - i'll do the same thing for the global
19:29 - variables
19:29 - x y and speed x and speed y and i'll
19:32 - randomize them to a new set of numbers
19:34 - so this means that every time
19:36 - you press then release the key then all
19:38 - of these variables are randomly set
19:40 - again
19:41 - so for step three a i'm going to say x
19:44 - is equal to a random number between
19:46 - a minimum of zero and maximum of width
19:49 - similar thing for
19:50 - the wire y global variable i'll set it
19:53 - to a random number between zero and
19:55 - height
19:56 - i think it also might help to to um
19:59 - bring up that
20:00 - the key release function is
20:01 - indiscriminate of what key you're
20:02 - pressing
20:04 - exactly yeah um but i guess a little bit
20:07 - more adding on to that
20:09 - i think what morgan is trying to say is
20:10 - that there are different
20:12 - types of keys on your keyboard right
20:15 - there are like normal
20:16 - i don't want to say normal keys but
20:18 - there are keys that
20:20 - have a visual impact let's say to the
20:22 - things that you're typing so all of
20:24 - these things that i'm you know typing
20:25 - right now
20:26 - all the letter keys all the number keys
20:28 - but there are also other keys on your
20:30 - keyboard like
20:31 - the delete button the space button okay
20:33 - space has some
20:34 - space does have a visual characteristic
20:36 - but um arrow keys and return keys and
20:38 - shift keys all that kind of stuff
20:40 - so there are what's called special keys
20:43 - right
20:43 - and then the thing that the key release
20:45 - function will do is that it doesn't care
20:47 - whatever the key that you pressed on
20:49 - your keyboard whether it's a letter key
20:51 - or a number key or a special key it will
20:53 - run it whenever
20:55 - a particular key is released um
20:59 - okay so going back in here i'm going to
21:03 - randomly assign a random number between
21:05 - -3 and 3 for the speed x global variable
21:07 - and same thing for the speed y global
21:09 - variable
21:10 - i'll say speed y is now equal to a num
21:13 - random number between -3 and 3.
21:16 - and so basically we've i think we've
21:18 - more or less
21:20 - uh we're more or less done right with
21:23 - setting up um for the global variable
21:26 - values and now we're ready to start
21:29 - actually drawing some things but um by
21:31 - triggering
21:32 - well actually we're not going to blindly
21:33 - draw them we're going to trigger them
21:35 - um inside of our draw function and we're
21:38 - going to first
21:39 - detect if a key is pressed while the
21:42 - sketch is running and then check
21:44 - what sort of key is pressed i'm leaving
21:47 - this a little bit vague because we're
21:49 - going to explain it in a bit but it is
21:51 - going to be a little bit vague as well
21:53 - on the way that we decide which function
21:55 - to run
21:57 - um but um yeah okay let's leave it at
21:59 - that but basically what we're gonna do
22:00 - is we're gonna check
22:01 - if the key is pressed inside of our draw
22:03 - loop and run um
22:05 - one function over the other depending on
22:07 - what type of key
22:08 - what key is pressed so in here it says
22:11 - okay step four is going to be about
22:13 - mapping key uh inputs to various shape
22:15 - drawing functions
22:16 - and step 4a tells me that i have to
22:18 - create an if statement to check if the
22:20 - key
22:21 - is pressed is true and key is not equal
22:24 - to spacebar so
22:26 - at this point i think we should go back
22:28 - in here yeah it's probably a good idea
22:30 - yeah and under this event under
22:34 - the keyboard section there is what's
22:36 - called
22:37 - key is pressed which is something that
22:39 - is mentioned inside of the step foray it
22:41 - says check if key is pressed is true
22:44 - so then this probably means that i have
22:46 - to use this variable which is a key
22:48 - case press is a built-in defined address
22:50 - variable
22:51 - that returns a boolean value
22:54 - depending on whether key is pressed or
22:56 - not
22:58 - so for those of you who are not familiar
23:00 - with boolean value
23:01 - it basically means that it's a binary
23:03 - value you can it can either have a true
23:06 - as a value for the variable or false as
23:08 - a value for the variable
23:10 - so if a key any key on your keyboard
23:15 - when you're running this p5.js sketch is
23:18 - pressed the key is pressed variable will
23:21 - return
23:22 - true if there's no keys being pressed at
23:24 - that moment in time
23:26 - this variable is going to return false
23:28 - so there's a little bit of an example
23:29 - oops in here which is actually okay i
23:31 - should not press the space
23:33 - so if i'm pressing an a key on my
23:35 - keyboard and you can see that
23:37 - um while my while i'm pressing holding
23:40 - down my a key on my keyboard
23:42 - um the fill color is black and if i lift
23:45 - it up the fill color is white
23:47 - so and this is being used inside of an
23:50 - if statement and it checks what the
23:52 - value of this key is
23:54 - breast variable is and we're going to be
23:56 - doing something very
23:57 - very similar to that but before we go on
24:01 - from that i also want to check the
24:03 - documentation for the key variable
24:06 - so here it says key it's also a p5.js
24:08 - built-in variable
24:10 - but it contains the value of the most
24:12 - recent key on the keyboard that
24:14 - is typed so what it means is that
24:18 - the key value and as you can see you can
24:21 - actually see all the keys that i'm
24:22 - pressing which is how convenient
24:24 - so i'm pressing if i press the q
24:26 - keyboard
24:27 - it will draw in text inside a drop
24:29 - function it will
24:31 - show me what key that i've pressed
24:32 - inside of using the text
24:34 - um shape function and also if i press w
24:37 - then it will show that and so on and if
24:38 - i press the number keys it will do that
24:41 - too but if i press let's say the delete
24:43 - key
24:44 - oh it it shows me a longer yeah it shows
24:47 - you
24:47 - the the actual key code it the name for
24:50 - that particular key which i think
24:52 - what is this back back backspace
24:55 - bix backspace yeah and let's say if i do
24:58 - oops
25:00 - it will right tab all of that tab in
25:02 - there for you so this is another thing
25:04 - that we're going to be using
25:06 - um actually is it no we're going to be
25:09 - using
25:10 - a key but we're also going to be using
25:12 - key codes soon so that's why i got a
25:13 - little confused
25:14 - using oh yeah yeah but yeah basically
25:16 - this is what we're going to use and
25:18 - why by the key inside of this on line 20
25:22 - the first step
25:23 - for a in order for us to detect whether
25:26 - the key is not equal to space
25:28 - bar to you and to detect to do that
25:31 - detection we're going to be using the
25:33 - key
25:33 - built-in p5.js variable so let's go
25:36 - ahead and do that so first i'm going to
25:38 - create an if statement
25:40 - and an if statement will contain the
25:41 - condition inside of the
25:43 - brackets or the parentheses and the
25:45 - curly brackets are going to be
25:47 - containing all the blocks inside of the
25:48 - if statement
25:49 - for it to run when the if statement
25:51 - condition is true i
25:53 - am going to close the curly bracket at
25:55 - the very end
25:56 - here so that we can contain
26:00 - all of the instructions inside of the if
26:03 - statement
26:04 - so inside of the if statement for the
26:05 - condition we're going to write
26:07 - if key is pressed p5.js built in
26:11 - variable
26:12 - is is is equal to true with three
26:16 - equation marks uh equal signs is
26:19 - true and and you can combine
26:22 - um you know conditions with two amp
26:25 - percents
26:26 - so that and keyword here is replaced by
26:28 - these two ampersands in here
26:30 - if key is what are we going to do
26:43 - you can detect if the key is a spacebar
26:46 - or not by putting the
26:47 - space in between the quotation marks so
26:49 - what the key
26:50 - returns the key b5.js built-in variable
26:53 - returns as you saw a little bit
26:55 - here it returns you the actual
26:58 - character of the key that you're
27:00 - pressing as a string
27:01 - so the spacebar you can't see it here
27:04 - because it doesn't show you that blank
27:05 - space
27:06 - but what the spacebar um character if
27:09 - you press the space character
27:10 - bar character returns is the blank space
27:13 - so if we um
27:14 - check whether the key is actually if we
27:17 - do this
27:18 - right if we do if key is equal to
27:20 - spacebar then it's going to check if the
27:22 - keyboard
27:23 - the key is the base bar prep um spacebar
27:26 - character is pressed
27:27 - so i know this we're kind of deviating
27:29 - from this step but i do want to show you
27:30 - that this works by maybe putting in a
27:33 - log statement in here and it would only
27:35 - work if it was the spacebar
27:37 - exactly exactly so now this um console
27:39 - log statement will only run
27:41 - if a key is pressed and if that press
27:43 - key is the spacebar
27:45 - now console.log spacebar is pressed
27:49 - so once we have that and then we run
27:51 - that so every time
27:53 - i press that space bar it will say
27:55 - spacebar is pressed and then when it's
27:57 - not
27:57 - pressed it sort of stopped i don't know
28:00 - if you can see this okay let's
28:01 - make that a little bigger and then it
28:03 - says spacebar is pressed for a couple of
28:05 - times
28:06 - okay maybe this is a really good
28:07 - question to talk about this but
28:09 - i only press my spacebar once but this
28:12 - apparently has printed five times
28:15 - there's a reason for that
28:17 - i wonder if um anyone who are watching
28:20 - can figure
28:21 - this out to figure out why
28:24 - this is pressing on the more times maybe
28:27 - we'll
28:28 - maybe we'll actually save that as a
28:30 - mystery for people to figure out while
28:32 - we go towards the um
28:34 - next steps and then we'll come back to
28:36 - this because it will be relevant when we
28:37 - you know
28:38 - run any of these other code that we're
28:39 - about to put in but we'll leave it there
28:41 - and then maybe give people some time to
28:43 - answer
28:44 - that so moving on from that
28:47 - inside the if statement our step 4b
28:50 - is saying create another if statement to
28:52 - check if the key code is divided into 5
28:55 - divided by 5 is equal to 0. so again
28:57 - there's a number of things that we need
28:59 - to um
28:59 - unpack for from that um instruction
29:03 - so i'm going to go back to the reference
29:05 - page in here and i
29:06 - see that key code the thing that i saw
29:08 - inside the instruction
29:10 - for step 4b is actually listed under the
29:14 - keyboard section of the p5.js reference
29:16 - i'm going to go ahead and click on that
29:18 - and then i see that
29:20 - um keycode variable is a built-in b5.js
29:22 - variable that
29:23 - it detects special keys such as
29:26 - backspace delete
29:27 - enter return tab escape and so on but
29:30 - you can also
29:31 - use keycode to return the
29:35 - value of your ascii code of your
29:38 - keyboard
29:39 - so okay what is ascii code this is kind
29:42 - of like
29:43 - you know going and following one tail
29:45 - after another that's programming though
29:47 - yeah that is titan programming ascii
29:49 - code so i'm gonna google what ascii code
29:51 - is
29:52 - and it's telling me okay something about
29:55 - a table
29:56 - and then okay let's go to the wikipedia
29:57 - article actually
29:59 - and it's basically saying that it's a
30:03 - character in golding blah blah blah blah
30:05 - okay great so it has something to do
30:06 - with
30:07 - encoding the keys on your keyboard and
30:10 - if i go to images you get all of these
30:12 - what's called ascii tables and if i
30:15 - click on one of them
30:16 - maybe not that one okay i want something
30:18 - with a background
30:19 - so that we can see more clearly and also
30:23 - has
30:24 - not just hexadecimal i'm being very
30:26 - picky
30:28 - okay maybe this one will do so
30:31 - here if you take a look at what's called
30:33 - an ascii table it will tell us that
30:35 - there is
30:36 - um some sort of a way of you know
30:39 - matching the keys on our keyboard so
30:42 - like here we've got this character
30:43 - that's like the capital a's to z
30:45 - and we've also got small um small what
30:48 - is it called small character
30:50 - a to z lower case lowercase a through z
30:54 - um you know big big letter small letter
30:56 - that's why i got confused
30:57 - and then you've got what's called
30:58 - there's there's a code for hexadecimal
31:00 - value
31:01 - and also decimal value so all of these
31:04 - keys on your keyboard that they visually
31:06 - will
31:07 - give you on like a text input or like a
31:10 - google doc or what have you
31:11 - um if you press the key a on your
31:14 - keyboard and if it's not you know cat
31:16 - block caps locked then it will give you
31:17 - a small
31:18 - a lowercase a but really what it is
31:21 - doing behind the scenes is that it's
31:23 - saying
31:23 - oh okay display the character 97
31:27 - on this text editor or text input box
31:31 - and so we're going to be using that to
31:32 - basically um
31:34 - divide all the possible keys on your
31:37 - keyboard into
31:38 - five categories so we're going to use
31:40 - the
31:41 - um ascii code that we can get using the
31:44 - key code
31:45 - p5.js built-in variable and say um
31:47 - because the reason why we're dividing
31:49 - into five categories
31:50 - is because if you go into the
31:52 - drawshapes.js file
31:54 - you will notice that okay we've got
31:56 - parametric lines function
31:58 - we've got bouncing elims function we've
32:00 - got from the direct function
32:02 - got the start function and the flower
32:03 - function we have
32:05 - five different kinds of visualization
32:07 - functions that are built in for you
32:09 - that i created for you so basically what
32:11 - we're going to do is
32:14 - for all the as the keys on your keyboard
32:18 - that is divisible by 5 and has a
32:19 - remainder of 0
32:21 - we're going to run one function and if
32:24 - it's
32:24 - divided by 5 and n has a remainder of
32:27 - one then we're going to
32:28 - uh run a different kind of function and
32:30 - this is one of the actual
32:32 - more of a general um programming
32:34 - technique i'm using
32:35 - what's called a modulus modulus
32:39 - did i spell that correctly i don't think
32:41 - so
32:42 - i did oh modular operations so this is a
32:46 - general um programming technique to
32:49 - basically
32:50 - um it's a little bit similar to switch
32:53 - cases if you're more familiar with that
32:55 - but what it will do is that it will just
32:57 - um create five buckets i think that's
32:59 - the easiest way of thinking about it
33:00 - is that you create five categories or
33:02 - five buckets and you kind of go in an
33:04 - order of
33:04 - saying okay if it has index zero this
33:07 - bucket then one another bucket then two
33:09 - another bucket
33:10 - and it just goes through in an iterative
33:12 - loop okay
33:13 - not an actual loop but basically it's
33:15 - saying um
33:17 - we're dividing every possible chance
33:19 - into five
33:20 - five categories and we're going to run
33:22 - functions based on the remainder
33:25 - of what we get and so that means that
33:28 - um if let's say we're doing you have
33:31 - only three options
33:32 - then you can do a modulus of three
33:35 - meaning that you can put in
33:36 - you're creating three buckets and in
33:38 - which all of the possible scenarios are
33:40 - going to fall into any of those three
33:43 - i think it will make a little more sense
33:44 - when we actually start programming it so
33:46 - what we're going to do for step 4b
33:48 - it says okay created another if
33:49 - statement so let me actually go ahead
33:51 - and create another
33:52 - if and my closing curly bracket is going
33:55 - to come
33:55 - after here because i know that all of
33:57 - the instructions
33:58 - are going to have to be contained in
34:00 - here for that this particular if
34:02 - statement
34:03 - and inside of the if statement for the
34:04 - condition i'm going to use the key code
34:06 - built in b5.js variable
34:08 - and then i'm going to divide it by 5 5
34:11 - but instead of using the divide
34:12 - slash i'm going to use the modulus key
34:15 - so if i do modulus which is the percent
34:18 - sign
34:18 - and divide and do modulus of 5 what this
34:22 - will return is that whatever value of
34:24 - key code
34:25 - it's going to divide it by 5 and then
34:28 - give me the remainder
34:29 - so if i were to let's say divide 11
34:33 - 11 and modulus 5 what this will return
34:35 - me
34:36 - is um 5's goes into 11 twice and it has
34:40 - a remainder of 1.
34:41 - so the whole thing all of this 11
34:43 - modulus of 5 was going to return me
34:45 - 1. and if this were to be let's say 13
34:48 - then it's going to give me a remainder
34:50 - of 3 and so on
34:51 - so whatever the value of key code there
34:54 - is a limited number of
34:56 - possibility of remainders that you can
34:58 - get when you divide a number by 5 and
35:00 - there will be
35:00 - remainder of zero one two three and four
35:03 - so there we've created a weight that we
35:06 - can categorize
35:08 - this spot whatever this value might be
35:10 - into five separate categories
35:12 - and i'm going to run this particular if
35:14 - statement only if the remainder is
35:17 - zero because that's what the instruction
35:20 - says
35:21 - so to create another if statement to
35:23 - check if the key code is divided by five
35:24 - is equal to zero so this is just our
35:26 - bucket number one or bucket number zero
35:29 - depending on how you want to count that
35:31 - um and inside of this if statement for
35:33 - step four is c
35:34 - we're going to call the para pair
35:37 - careful with the spelling parametric
35:40 - lines yeah function which is already
35:44 - created for us
35:44 - inside of the drawshapes.js function so
35:47 - there's this the first function that is
35:49 - listed in here
35:50 - that does something and then kind of if
35:52 - you loosely see that it's drawing a line
35:54 - and doing something with speed and xy
35:56 - locations
35:58 - okay let's see what that is about inside
36:00 - i need to change the uh
36:01 - the key in the main if statement first
36:03 - it's uh still checking if it equals
36:06 - thank you so i'm gonna fix that and
36:08 - follow the instructions
36:10 - and make sure that we only run this big
36:13 - the the bigger the outer if statement
36:15 - only if the key is pressed and it's
36:17 - not the space bar so for everything else
36:20 - that's not the space bar
36:21 - if you press any key and if the keys key
36:24 - code
36:25 - is divisible by five and returns zero
36:27 - for the remainder
36:29 - there's a lot of ifs in there but then
36:31 - if all of those conditions are met then
36:33 - it's going to draw the parametric lines
36:35 - function
36:36 - and there's a key that is um that you
36:38 - can try
36:39 - oh using to run it it says okay try
36:41 - pressing the e key
36:43 - because why let's go back to the ascii
36:45 - table
36:46 - and the a key has
36:49 - okay 27 97 so i i think it's going off
36:53 - the decimal of the
36:54 - the uh uh so i think it's going after
36:57 - that
36:57 - the it doesn't matter if you press the
36:59 - lower okay
37:00 - key code has a key code is weird i
37:02 - remember um
37:04 - in the documentation that it's
37:06 - indiscriminate in some way time like
37:07 - some situations
37:09 - yeah so key code actually can't tell
37:12 - whether you are pressing the key code
37:14 - not not the your keyboard but the key
37:16 - code e5.js built in
37:18 - variable it doesn't care or doesn't it
37:21 - doesn't know if you're pressing a
37:22 - lowercase or uppercase character
37:24 - so um if you're pressing even if your
37:27 - your caps lock is off on your keyboard
37:29 - it's always going to think that
37:31 - if you press the a key you've entered in
37:33 - the uppercase character so that you will
37:35 - have to match it with this decimal
37:36 - number
37:37 - which oops actually this is better so i
37:40 - can zoom in though
37:41 - um the decimal number for the a key the
37:44 - capital a key is 65
37:46 - and 65 is divisible by five and has a
37:49 - remainder of zero so if we go
37:51 - back in here and then run the sketch and
37:54 - press the a key
37:56 - this is what okay let me press it a
37:58 - little bit more
37:59 - this is what the parametric lines
38:01 - visualization
38:03 - inside of draw uh shapes.js looks like
38:07 - and so personal favorite one yeah so i'm
38:10 - actually
38:10 - holding down this a key
38:14 - and then if i let go the animation stops
38:16 - and then if i press again it picks up in
38:18 - a new location
38:19 - so that whole pic unlike generating a
38:21 - new location
38:22 - is actually happening because whenever
38:25 - we release that key
38:26 - we are randomly setting x y speed x and
38:29 - speed y variables
38:30 - again so that's why you get you know
38:33 - whole new colors and a whole new
38:35 - uh what colors are actually happening
38:36 - for different reasons but you we get
38:38 - new lines every time we press and
38:40 - release the keyword
38:42 - um maybe this is now now a good time to
38:45 - answer why we were getting this
38:47 - space bar is pressed a number of times
38:50 - um
38:50 - printed to the console um not anymore
38:53 - because we're not checking if the
38:54 - keyboard is
38:55 - uh pressed sorry we have um zoe in the
38:59 - chat saying that
39:00 - it's giving um strong windows 95 screen
39:03 - share revised which
39:04 - which it totally does but to answer that
39:07 - question that we threw earlier on
39:10 - about why that print statement was
39:12 - happening over and over again and also
39:14 - to
39:14 - um tell you guys why if i'm holding down
39:17 - the a
39:18 - key we keep getting this um animation of
39:20 - the lines moving around
39:22 - is because this is inside the draw loop
39:25 - and even though we're using the if
39:27 - statement and we're saying
39:29 - if the key is pressed is true but this
39:31 - is happening in a loop
39:33 - which means that for that number of it's
39:36 - not just one
39:37 - frame that your key might be pressed it
39:39 - could be
39:40 - over a number of frames in cont in
39:43 - number of continuous frames
39:45 - that uh for that duration of frames your
39:47 - key is pressed
39:49 - so that's why while my key is even
39:51 - though we're using an if statement
39:53 - it's kind of like easier to think about
39:54 - in the way that while
39:56 - your key is pressed because it's being
39:59 - looped
39:59 - the check is being looped um you're
40:02 - going to be continuously drawing this
40:04 - parametric line visualization
40:08 - did i say that right yeah i think that's
40:10 - okay yeah
40:12 - perfect okay cool so then we can move on
40:15 - from that and then complete our step for
40:17 - d
40:18 - okay and it says create another if
40:20 - statement to check if key code divided
40:21 - by five is equal to
40:23 - 1. so now we are moving on to the next
40:25 - category right of
40:26 - key code so outside in here we'll say
40:30 - if key code modulus of 5
40:34 - is equal equal to 1 so now this will be
40:37 - another set of keys right another set of
40:40 - keys
40:40 - that have s key code and is divisible uh
40:43 - if i if we divide that by five it has a
40:45 - remainder of one so there'll be like you
40:47 - know numbers like
40:48 - trying to calculate this in my head 66
40:51 - 71
40:52 - 76 and that kind of those kind of
40:54 - numbers
40:55 - some when all of those numbers are
40:56 - triggered um air pressed then we're
40:58 - going to trigger whatever function that
40:59 - we're going to put in here
41:01 - so let's actually go and take a look it
41:03 - says step 4 is to call the bouncing
41:05 - ellipse function
41:06 - okay let's go ahead and call that
41:08 - function bouncing ellipse
41:10 - and inside of the function we have to
41:12 - pass in an argument
41:14 - that is a random number between -1 and
41:17 - -150 there are multiple ways of you can
41:20 - do this right you can create a temporary
41:22 - local not temporary it's just a local
41:24 - variable inside of the if statement and
41:26 - say let
41:27 - random number and then can say random
41:30 - minus 150 or
41:34 - you can put this random directly inside
41:37 - of our function as well so we could have
41:39 - written just random
41:41 - minus 150 in here and then that would
41:43 - have also worked
41:44 - either way works let me just comment
41:46 - that out and then put it directly
41:48 - inside put the random function directly
41:50 - inside in here
41:51 - but then now if we go ahead and press
41:53 - play
41:54 - and now i'm going to try pressing the g
41:56 - key because let's go ahead and take a
41:58 - look at in there too
42:00 - g key has a ascii code of 71. so if we
42:03 - divide 71 by
42:05 - 5 it is it has a remainder of 1.
42:08 - so now let's go ahead and press that g
42:12 - and now we've got these bouncing ball
42:14 - things that is creating traces behind it
42:17 - as well
42:18 - and it bounces around i feel like this
42:20 - also has a bit of a
42:21 - you know window screen saver vibe to it
42:23 - as well but it's a bit more pastely
42:26 - um so then okay now we we're generating
42:29 - this the animation continues
42:31 - while that g key is being pressed and it
42:33 - stops
42:35 - when the key is no longer being pressed
42:37 - we can still
42:38 - put that parametric lines animation on
42:41 - top of it right if we press another key
42:43 - that it has a remainder of zero when
42:45 - it's divided by five so if i press
42:47 - a key we've got this parametry lines
42:50 - animation being generated if i press g
42:52 - again we've got that bouncing ball
42:55 - animation happening again
42:58 - so we've mapped basically two out of the
43:01 - five categories that we
43:02 - have prepared i'm going to move in a
43:04 - little bit faster so that we can get all
43:06 - of these visualizations
43:07 - done within time and so
43:11 - okay for the next one we're gonna check
43:13 - if key code
43:14 - divided by five has a remainder of two
43:18 - and so when that is the case um let me
43:20 - move this
43:21 - after here then we're going to um
43:24 - call this forward function which doesn't
43:26 - take in any arguments
43:27 - so i'm going to write flower with no
43:30 - argument inside
43:31 - and if we run that now if i press the r
43:34 - key
43:35 - we've got this like flowery look loosely
43:38 - flowery
43:40 - visualization that's happening around
43:41 - different um parts of the
43:43 - um canvas and we can still have our
43:47 - bouncing ball and our parents lollipops
43:50 - oh yeah just like they kind of do
43:52 - they're kind of like a spinning
43:54 - or like a if you were to record a yo-yo
43:58 - spinning around in like really slow
44:01 - motion that's i guess kind of a pattern
44:03 - it will take
44:04 - um draw but yeah now we've mapped three
44:07 - different
44:08 - visualization functions in here and
44:10 - moving on to
44:12 - the step five it says now we're not
44:15 - we're done with everything that we want
44:16 - to draw inside the draw function
44:18 - and now we're saying to add another
44:20 - function called
44:21 - keypressed so if we go back to our
44:24 - reference
44:25 - i'm going to close some of these if we
44:27 - go back to the reference page
44:28 - you will see under the keyboard section
44:30 - there is another function called
44:31 - key pressed so if you go ahead and take
44:34 - a look at that what that does
44:36 - is that it is called once every time a
44:39 - key is pressed
44:40 - so that's a little bit of a difference
44:42 - here the main difference between using
44:45 - detecting key presses using the key is
44:47 - pressed variable
44:48 - inside the draw function and using it
44:51 - inside the key pressed
44:52 - function is that if you want to have
44:55 - something
44:56 - run while a key is pressed and held down
44:59 - you will want to do it inside a draw
45:01 - function using the keys pressed function
45:04 - if you only want to trigger something
45:06 - once and not multiple times no matter
45:08 - how long the key is pressed down for
45:10 - then you will want to call that inside
45:12 - of the key pressed p5.js built-in
45:15 - function
45:16 - and we'll make this um it will be a lot
45:18 - more obvious when we actually add
45:20 - more the rest of the categories inside
45:22 - of this key press function
45:24 - so i'm going to go ahead and add another
45:26 - function in here and say
45:27 - key press open and close brackets but
45:30 - i'm going to add the closing brackets
45:33 - outside of it here and then
45:38 - um inside of the function it says okay
45:41 - inside the keypressed function the step
45:43 - for a 5a is to create an if statement to
45:46 - check if a key is not equal to spacebar
45:47 - we did this before in the
45:49 - draw function so the reason why
45:52 - we are leaving out the spacebar key
45:56 - is because we want to actually add a
45:58 - special trigger
46:00 - special event when the key the spacebar
46:03 - key is being triggered
46:04 - so bear with us and there is a reason
46:07 - why we're leaving that key out
46:09 - but then okay so when the keypressed
46:11 - function
46:12 - is being triggered as long as the key
46:14 - press is
46:15 - not a spacebar we're gonna go ahead and
46:18 - then we're going to do another key um
46:19 - check another key code
46:21 - and do a modulus of the key code um
46:24 - variable
46:25 - and if it's divisible it's when you
46:28 - divide it by
46:28 - five and if the remainder is equal to
46:30 - three
46:33 - then this time we're going to call
46:36 - a function called rounded
46:40 - rect so when we get that done
46:43 - and then we um you know run the sketch
46:47 - and i'm pressing the n key
46:50 - and you see that only once the
46:53 - the rounded rectangle is drawn only once
46:56 - when we press
46:57 - the um the n key and no matter how long
46:59 - i'm holding it four it will only draw
47:01 - one around the rectangle which is very
47:03 - different from you know our parametric
47:05 - lines it only stops drawing the
47:07 - parametric lines or stops animating the
47:09 - lines
47:10 - only when my a key is my my i'm no
47:13 - longer pressing the a
47:14 - key but for the rounded rectangle
47:17 - function that is being triggered inside
47:19 - the key pressed function
47:21 - it only draw what draws one instance of
47:24 - that shape function regardless of how
47:26 - long you're holding down the key for
47:28 - okay so then moving on from that
47:33 - um i guess we'll then go ahead and add
47:36 - the rest of the two i think we've got
47:39 - one more yeah we've got one more left so
47:41 - then we'll check the key code um
47:44 - value for if the modulus of five the key
47:47 - code value
47:48 - um and the remainder is equal to four
47:51 - then
47:51 - we'll add our loss visualization
47:53 - function which is the
47:55 - star function and star function takes in
47:58 - three
47:59 - arguments it says so if we will call the
48:02 - star function but inside of it we'll
48:04 - need to give
48:05 - a random number between 30 and 50 for
48:07 - the first two arguments
48:08 - and also give it a random between four
48:10 - and seven for the last or the third
48:12 - argument
48:13 - so let's go ahead and do that and for
48:14 - the first one i'll give it a random
48:16 - number between
48:17 - 30 and 50. same for the second number
48:21 - 30 and 50. and for the third argument
48:24 - i'm going to give it a random number of
48:26 - between 4 and 7. so now let's go ahead
48:30 - and play
48:31 - or run the sketch and i'm going to try
48:33 - pressing the e key
48:35 - i think it is a little bit less visible
48:37 - so maybe for this one i'm going to
48:39 - actually
48:40 - change the um value of the sketch
48:44 - the background color a little bit oops
48:47 - i think the ikky so there we go i think
48:48 - this is a bit more visible at least for
48:50 - the
48:51 - stars
48:54 - so yeah so this only creates one star
48:57 - actually let me do it
48:58 - with less it only creates one star
49:02 - um when when the e key is pressed
49:06 - so if i want a lot of star
49:08 - visualizations i want to keep
49:10 - spamming my e key then i can get a lot
49:13 - of these
49:16 - um joshua just joined and asking uh what
49:19 - language this is this is javascript
49:22 - um but it is a javascript library called
49:24 - p5.js and we're using it to create
49:27 - visualizations for
49:28 - the web um if you are more in if you're
49:31 - interested in knowing more about it
49:33 - we are there's a p5.js course called
49:35 - learn p5.js that is free and you can
49:38 - also
49:39 - um take a look at the documentation of
49:41 - the p5.js library if you go to the
49:43 - p5.js.org website as well
49:45 - it was like a really good like a short
49:49 - brief introduction about what we're
49:50 - doing
49:52 - okay so now that we've got all of these
49:54 - visualization messed up now
49:55 - if i press any key in here uh
49:59 - any key into um into my
50:02 - sketch actually i'm going to bring down
50:05 - the
50:08 - color of the background again because i
50:09 - think this works better when the
50:12 - color of the sketch is a little darker
50:15 - so now if i'm pressing any sort of keys
50:17 - in here and i'm getting all of these
50:19 - visualizations created
50:20 - so you could kind of like you know if
50:21 - you wanted to type a sentence
50:24 - if you wanted to or like type in
50:26 - anything or kind of like you know
50:28 - spam your keyboard and you get this sort
50:30 - of like a generated visualization
50:33 - at the end um and then you can um
50:36 - yeah and it's kind of like generating
50:39 - a whole picture i'd say using uh
50:41 - predefined functions that are inside of
50:44 - the draw.shapes.js
50:45 - file in there for you but okay let's say
50:48 - that now okay we've created this great
50:49 - tool
50:50 - i'm kind of like really into this um
50:53 - generation
50:54 - that i've created in here how do i
50:57 - save this creation that i've created
51:00 - there's multiple ways of saving this
51:01 - you could do a screen capture right you
51:04 - could do
51:05 - if if you have mac b command shift 4
51:07 - then you could you know select that um
51:09 - area but there is also a p5.js
51:13 - function that you can use which is why
51:15 - i'm
51:16 - talking about saving it there's a
51:18 - function called save
51:19 - canvas right i think this is the
51:21 - function that we use
51:22 - um basically that will let you save
51:24 - whatever that is currently being shown
51:27 - to you on the canvas
51:28 - so in here using the p5 um p5.js
51:32 - function
51:32 - called save canvas we're going to do is
51:35 - that we're going to actually detect
51:37 - if the key code is equal to the return
51:40 - or the space
51:41 - no let's space return the enter key and
51:43 - if that is the case we're going to use
51:45 - the save canvas function to save
51:47 - whatever we have
51:48 - inside of our sketch so in here we're
51:51 - going to say
51:52 - if key code is
51:55 - equally equal to some sort of an ascii
51:57 - code for the return key
51:59 - so that i'm going to go back in here and
52:01 - see oh this one's a little bit difficult
52:03 - to see
52:04 - well i know that it is
52:08 - um 13. so it says in here
52:11 - that um carriage return
52:15 - is normally it's another like a more
52:17 - formalized way of saying the return key
52:19 - or the enter key
52:20 - so basically the um the ascii code for
52:24 - that key that you have on your keyboard
52:25 - key
52:26 - keyboard called return or enter or i
52:29 - think sometimes has that you know the
52:30 - arrow that
52:31 - goes from down and towards the left um
52:34 - that the key ascii keycode for that
52:36 - particular key on your keyboard is 13.
52:39 - so i'm going to check if the keycode of
52:41 - the key that i've pressed is equal to 13
52:44 - and if that is the case i'm going to use
52:46 - the save canvas function in here
52:49 - and then i'm going to say um save
52:53 - canvas i actually i've i always forget
52:56 - what um argument i need to put in here
52:58 - but basically i need to say
53:00 - the name of the in the image file
53:03 - and then i have to give it the extension
53:06 - of the image that i wanted to
53:08 - be saved as you can generally choose
53:11 - from jpg files and png files so in here
53:14 - i'm going to say
53:15 - if i if you want to just keep it really
53:17 - simple you can say
53:19 - my visual vis i'll say my viz
53:23 - and then i'll give it a jpg file
53:25 - extension so if i go ahead
53:27 - rerun the sketch let me do a little bit
53:29 - of you know typing in here to create
53:32 - different kinds of visualizations i'm
53:34 - going to hold some keys more than others
53:36 - okay i'm happy with this i want to save
53:38 - it if i press the return key
53:41 - i have i don't know if you guys can see
53:42 - this but i've got a file that's called
53:44 - myvis.jpg
53:46 - and it will be saved inside of your
53:48 - downloads for
53:49 - folder most likely but um if i save this
53:52 - again
53:54 - it's going to create my vis of um
53:56 - brackets one
53:57 - and two and so on so if you're okay with
53:59 - that you can um you can go with that
54:02 - or if you want to kind of like
54:03 - automatically generate
54:05 - the um like a number that is attached
54:08 - behind the files
54:09 - then you can do something like i'm going
54:12 - to say my canvas
54:14 - and then i'm going to put a dash in here
54:16 - and if we concatenate it with
54:18 - the frame count variable we've seen this
54:20 - we've used this variable before when
54:22 - we're doing animation
54:24 - um but basically this number is a b5.js
54:27 - built-in variable that increments
54:28 - during the whole duration of your sketch
54:30 - running so we know that this is going to
54:32 - be
54:33 - going to give us a more or less of a
54:34 - unique file name
54:36 - so it's going to do my canvas zero if
54:38 - you like you know save it immediately
54:40 - as soon as your um p5 sketch runs or
54:43 - p5 my canvas dash 264
54:47 - if that's the number of the frame that
54:48 - you are you've
54:50 - pressed the return key to save whatever
54:52 - you have on your canvases
54:54 - so then let's let's go ahead and then if
54:57 - i do
54:59 - press these things
55:03 - okay cool then i um press return
55:06 - then i get a file that's called
55:11 - mycanvas556.jpg oh i've only saved this
55:13 - um browser but
55:14 - if you click on it it will look the same
55:16 - thing as what you see on the preview
55:18 - window in here so it's actually a neat
55:20 - thing that you can
55:21 - attach like even if you're not creating
55:23 - like a generative art
55:25 - visual visualizer or like a tool that
55:27 - you can use to generate visualizations
55:29 - or anything like that in p5.js
55:31 - it's like a neat thing that you can put
55:32 - inside of any sketch so that you can you
55:35 - have the ability to save
55:37 - whatever they've created inside your
55:39 - canvas
55:40 - i think we're gonna maybe leave out um
55:44 - clearing out the um
55:47 - the canvas in here uh for now before the
55:50 - sake of time
55:51 - but if you go to the solution code which
55:55 - is also
55:55 - linked inside of the youtube video
55:57 - description
55:59 - this is it oh yeah it's just not in the
56:01 - same the file that i want
56:03 - um inside of the key pressed function in
56:06 - here it doesn't have all the messy step
56:08 - instructions in here so it's a little
56:10 - easier to see but there is this else
56:12 - um else statement that clears the canvas
56:15 - and also
56:17 - sets the background color again because
56:19 - when you use the clear function it will
56:20 - color your p5.js canvas into a
56:24 - transparent color
56:27 - i guess um if anyone has any questions
56:30 - that would be a really good time to talk
56:31 - a little bit about them but i think
56:35 - um oh there's a question a follow-up
56:37 - question from joshua
56:38 - asking if you can use other languages to
56:41 - get the same effect or do something
56:43 - similar i think
56:44 - is what it means what they mean but
56:46 - basically
56:47 - i'd say that if you're interested in
56:49 - doing something like this and you're not
56:50 - familiar with javascript
56:53 - there is also another thing called
56:55 - processing
56:56 - and cassie when she came in when they
56:58 - came in last week
57:00 - um talked a little bit about this but
57:01 - basically p5.js
57:03 - i don't want to say is a spin-off but it
57:05 - was developed
57:07 - uh with inspiration of things that were
57:09 - done for the processing
57:10 - and processing is a
57:14 - base it's a java platform so if you know
57:17 - how to use
57:17 - java and if you're more familiar with
57:19 - that kind of languages like
57:20 - java python c this might be something
57:23 - more for you where you can get a little
57:25 - bit started with creative coding not
57:26 - using javascript and using java
57:29 - and you have to download this
57:30 - application um the processing
57:32 - application and will give you like an
57:34 - ide
57:35 - or development environment where you can
57:37 - do a lot of the things that you can do
57:39 - with p5.js and there's a reference page
57:41 - in here
57:42 - and if you use um processing a little
57:44 - bit you will quickly notice that it's
57:46 - very similar to p5.js
57:49 - cool you have any questions
57:53 - morgan do you have questions i don't i
57:55 - think that was a very
57:57 - very uh thorough walkthrough
58:01 - um again this is available on
58:05 - the learn p5.js course so it's inside
58:08 - today we went through the project that
58:10 - is under the interaction module
58:13 - um so after you go through the lesson on
58:15 - interaction with ijs
58:17 - on mouse and keyboard events the project
58:19 - for the generative art creator is what
58:21 - we went through
58:22 - on not on the kocami platform but on the
58:25 - b5.js web editor and we'll be continuing
58:28 - to use the web editor for our
58:30 - next um next live stream and for the
58:33 - next live stream just to
58:35 - have a just talk about it very briefly
58:38 - we're going to talk about
58:39 - uh we're going to walk through this
58:40 - project called interactive video
58:42 - sculpture that we're going to
58:43 - do using images and videos maybe i can
58:46 - actually just give a really really quick
58:48 - sneak peek at it
58:50 - and this will be the yeah this will be
58:52 - the last thing that we do
58:54 - so yeah we're going to be oh sorry no go
58:57 - ahead no i was just going to
58:58 - say that i know that it says it a little
59:01 - bit in the description here but the same
59:02 - with
59:03 - the interaction one there's a lot of um
59:05 - kind of historical
59:07 - like background to these types of
59:09 - projects that are
59:10 - if people are interested in i really
59:12 - recommend looking up the
59:13 - um the little description tidbits before
59:16 - the project begins
59:17 - yeah it gets more reference for how
59:19 - these like the
59:20 - basically the history of all this stuff
59:22 - like computer graphics or
59:24 - just visuals so this particular one
59:27 - at the general art creator that we went
59:30 - through is very inspired by
59:32 - uh john whitney and vera mullner
59:35 - um so they're very like you know the all
59:38 - the shape functions in the draw sheet
59:39 - sorry the visualization functions the
59:41 - draw shapes.js
59:43 - file are like you know those the
59:45 - visualization styles very inspired from
59:46 - those two pioneers of computer graphics
59:49 - and for um interactive video sculpture
59:51 - that we'll go through next week is very
59:53 - inspired by
59:54 - the korean american artist namjoon p
59:57 - so it's kind of like a digital version
59:59 - of a sculpture that he
60:01 - could have created i'd say he's very
60:03 - inspired by him
60:05 - so yeah so i think um that is it for
60:09 - this week's live stream session but um
60:12 - we are looking forward to seeing you
60:14 - next week to create the interactive
60:16 - video sculpture
60:18 - bye

Cleaned transcript:

okay i think we're live so um hello everyone welcome to the fourth session full of cocadmy live for creative coding um hi again i am g1 and i'm a curriculum developer at cocademy and today we've also got morgan joining us morgan if you want to introduce yourself a little bit hey everybody i'm morgan and i'm a content contributor at code academy yeah and he also was part of the production team that helped us develop the learn p5.js course um and he's also created the um project which we're going to walk through today together as well so um thank you morgan for um joining us today yeah happy to be here okay cool um i think we can get started and maybe we'll also do a little bit of a recap but basically um let me actually start sharing my screen too um um basically um these live series uh during these live series we're going through um p5.js and we're going off a lot of the content that is based on this course called learn p5 chance on the code academy platform it's a free course so if you are following along the live stream series um i think um generally the live stream the series that are designed to be a good compliment to the learn p5.js course the content itself so in the first week the first live series session we went through some fundamental um concepts about v5gs we talked about using the setup in the draw loop and we also did some static visualizations using 2d primitive shapes and our second session we turned those static shapes into animations in within the draw loop and using you know incrementing and decrementing values to animate the position size and color and so on for the animation last week actually we had cassie um as jor who joined us as a guest and we talked about the p5.js um open source communities open source software and also we talked about the p5.js web editor which we are going to um use for in today's live stream series and also going forward we'll be um using the live p5.js web editor to do programming in and also to share the sketch or the link to the code with you guys so we're actually not going to be working on the cocamy platform itself um but we're going to be um creating all of our p5.js creations inside of this web editor and cassie um who's one of the main developers for the platform gave us a really good tour around the tool itself so right now i have this code loaded for um our live session today but let's actually open it up in another place editor um so if you know if you uh open up a blank p5.js editor this is kind of the view of what you will get basically let me actually log on but i log out but if i log out you get an option to log in or sign up if you um click to sign up it doesn't really ask for a lot this is kind of all what they asked for from you you can put in your username your email and your password and confirm your password and you will get a b5.js um account it will oops okay i should have stayed logged in but maybe i'll turn up screen and quickly type that in in a bit but basically the thing that i do want to show you is that when you first launch it you will see this view on the left side that is a code editor and you have this preview page and if you open up this little collapsed bar on the left side you'll get a view of these sketch files in here and then these are the similar you know we talked about this in the first session but basically they are all the files that you it is required for you to run the p5.js sketch there's an index.js file with the library files um linked there as a script tag the cdn link in there and there's a link to the style sheet and there's also a link to the scripts that you're using at the javascript that you're using inside of the sketch.js file so that's all linked in here for you so this is kind of what the default um generated files you get when you first open up uh your p5.js web editor and let me actually stop sharing and quickly log in i did not anticipate this part always got to be prepared and um let me see if you will let me log back in what is going on in here um okay i don't think that that will matter too much i'm gonna move on and reshare sounds good um okay but going forward um the thing that we're going to be covering the topics that we're going to be covering are in this third module inside of interaction so um if you click on the lesson for interaction uh basically it starts off talking about um different kinds of interactions that you can add to the p5.js sketch so um morgan if you want to give us like a super brief overview of what the and the kind of topics that we learn in this module that'd be awesome yeah sure so i think interaction's really like kind of the like one of the beginnings of like the bread and butter of p5.js and just really being able to use your mouse your keyboard um and then for more advanced interactions like your voice to actually like be able to control programs and work with programs make games or interactive art pieces and things like that so um via like mouse scroll mouse click um like mouse up or key presses and things like that are kind of what's covered in this uh this lesson specifically and so for today's um project we're going to be going through this particular project that is on the cocamy platform called the generative art creator and for this project basically we're going to be using mapping a lot of these like functions to keep pressed and key events and we've kind of sort of taken this uh web editor sorry we've taken this project onto the web editor so on the youtube um video inside of the descriptions part there should be a link to two links to the p5 web editor website there's one for the solution code for the project and then there's also a link for the starting code of the project so what we're going to be doing during this live session is going to be working on the solution code which actually has inside of the solution code there will be a lot of comments in here not to freak anyone out but i've basically moved the steps that you will normally see inside of our platform on the projects page onto the p5 web editors you can follow along um with us on the web editor if you want so if you were to open up that link in that's connected inside of the uh that's attached inside of the description of the youtube video you can also go to file and duplicate or save this particular sketch inside of your account of your app editor account you can keep a copy of the sketch in there as well and code along with it same goes for the solution code if you wanted to create a duplicate or a copy of the solution code um in your account that is also possible but before we go any further i guess i want to give you guys a little bit of an overview of what we're going to be making so on the v5 editor on the right side we've got this um preview window and on the left side we've got the sketch window where you can you know um change code in here if we wanted to if we click on this run button this pink big pink play button then our sketch is running the reason why there's nothing in here is because this particular sketch is a bit like it's like an app right it's a generative app um that has um i don't know if you guys you guys can't see this but i am pressing different keys on my keyboard to basically do these drawings onto the sketch and there are different functions that are mapped to different kinds of keys on my keyboard and if i press the return key i've got this you see that i've downloaded this image of the canvas as an image file as a jpeg file and also if i press spacebar it will basically erase everything that we've drawn onto here so it's kind of like a i guess a version of the paint app but i'm using our own custom visualization functions yeah exactly and also it's this is also something that is provided in the start code as well but there are all the functions that we're using to generate all these visualizations are saved in a separate file called drawshapes.js in here so you should be able to see you know what's running behind the scenes to create all of those different kinds of visualizations so the actual visualizations part we're not going too deep into in this session it will be mostly focusing on how to add uh keyboard events to your p5.js sketches in this session i miss anything no i think that's it okay yeah cool so i'm gonna move on to the file for the starting code and i'm actually gonna create a duplicate of this because i don't want to did i create a duplicate something funky going on with my um okay since i am logged out any changes on to this um starting code is not going to be actually affected to the version of the sketch that i've shared with you guys already so i'm actually going to go ahead and start coding in this version of the starting code for the generative our creator project um i know so we'll take it from the top actually and then we'll go okay so just um a little note as well i've also numbered the steps that are the steps that you should follow to complete this project we'll start from step one the setup but then you'll quickly notice that there's step two in the setup but then it gets to step four in the draw so the place of where all the steps are do jump around a little bit so i'm hoping that you know if you're watching if this live stream together with us or if you're going to be looking at this um on a later date um i wanted to put it up there so that's recorded information that the steps are going to be jumping through but then we're going to be doing this together with you guys so hopefully they'll be a little bit less confusing but the first step that we're going to be doing and if i press play in here you see that there's nothing being um created in the preview so i'm going to go ahead and then i'm going to create the first um one of the most important functions that you can use in the setup which is to use the create um canvas function oops canvas and inside of the canvas function i'm going to be putting in system p5.js built in variables window width and window window height so that when we do this and we're not going to see anything in here but basically what will happen with this function is that it will create a canvas with the size of the window width and window height or in the case of b5.js web editor it will use the width and height of the preview window in here i am also going to add in a background color so that we can actually see something inside of the preview window that's going to happen for now i'm going to give it a gray value of 50. um so this is the same as right same as writing 50 comma 50 oops 50 comma 50 comma 50 but the shorthand for that if you're using all same values for r g and b then you can just write 50. so if you go ahead and press play we've got this gray rectangle of a canvas that is perfectly the width and height of our preview window cool so then we're going to move on and it says step two is we're going to be randomizing variables to draw shapes so here in lines um five to nine in here we've got some global variables we've got let x and y we've got less speed x and speed y we've got red vowel green vowel and blue vowel um and we've got some another two other global variables and so on um these um global variables and lines well actually all of these variables global variables in lines five to nine are actually going to be used inside of our drawshapes.js file and they are going to be used inside of all these functions that generate these different kinds of visualizations that i have already been put in for you um but basically um we will need to randomize some of these functions uh sorry some of the values for some of these variables in here so that we can get a generate dynamic sort of visualizations so there are some things that are randomized when the sketch first runs and then there are some things that will be generated uh that are attached to keyboard events cool um so let's go ahead and follow these steps for step a to step 2a to 2d so for 2a it says set a x variable to a random number between 0 and with and we're going to use the random function which is also a p5.js built function so it'll be a minimum i want a random number between a minimum of zero and maximum width which is also a p ah i keep spelling that which is also a um if i just built in variable that returns the width of the canvas this is really interesting where here we've got when the width um as the um width of the canvas which will return us the total width of the preview window and because we're also using width which is the canvases width and that's going to be same as the preview window that's actually what we get right this also means that if our um preview window is bigger and then you run it then this is now become it will become the width of the canvas let me actually resize this so you guys can see the code a little better so now we've got x we've set our x inside our setup function to be a random number any random number between zero and width and then for y we'll do the same thing but use height instead of width so we'll use the random function again and we want to generate a random number between 0 and height and then for our step 2c we'll do a similar thing of generating a random number but this time it'll be between 3 and 3. so speed x global variable is going to be initialized with a value a random value between 3 and 3 inside of our setup function again last thing for step uh step two d we'll do uh speed y global variable is going to have a random number between minus three and three so this is sort of these um i guess setup that we have to do and actually we're doing this in the setup function so how convenient that function is called setup but um just to re uh just as a reminder the setup function runs once when the when the sketch is first loaded so all of these are going to be done once and then right after everything inside of our draw function is going to run after but before we get to actually you know putting some things inside of our draw function we're going to do something similar to another function that we're going to declare outside of the draw so this is the part that where um keyboard interaction comes in but basically inside so there's a step three and it's now become line fit 80 i don't know if it would be still line 80 in the blank file but towards the end of the sketch.js file there is a step three it says add key release function to a random randomize and to randomize variables again in the cube release so what's going to happen is that all of these variables are going to be in randomly set when the sketch first loads and whenever a key is pressed and then released we're going to be resetting all of these values global variables into another random number so the next time another key is pressed i will be having some sort of a random element to the um visualizations that get created with key key events so maybe uh we should there's a bit of a i guess some information that we need to cover before we do this so i guess let me ask you morgan what is the key release function um yeah so uh i guess something maybe we should have mentioned a bit before but a lot of what interaction entails with p5 is these sets of predefined functions for either mouse presses key presses things like that so key released will trigger an event inside of the key release function whenever that key is released and you can set specific keys um another way i won't mention that yet but yes the key release function whenever you release a key um whatever information is inside that function will be run i think it's something um that might not be so noticeable when you're like just accustomed to i mean mouse is a relatively friendly i think what's the right word for this like computer accessory computer auxiliary input device if you think about it you do a lot of things with the mouse right there's a click there's a double click but then that click is also it can be separated into two separate events right where there is the press event and there's also a release event so for each of those events that your keyboard and also your mouse can detect um there are functions ability5 just functions in here so the mouse for mouse event there's all of these things where there's a we've looked at mousex and most y um variables um before and i think did we do this i think in week two i believe so uh when we were talking about animation but those are these uh builtin variables that return you the position of the mouse x and mouse y positions of your mouse but there are also functions in here and also variables in here that basically let you know or let you let you run different code snippets uh depending on a whether a particular mouse or keyboard event has occurred so in this case and inside of our p5 web editor where maybe this one it talks about add key release function what it means is that add this a builtin function called key released and then here in the description it says the key release function is called once every time a key is released so it kind of like works in a similar way to our draw and the setup functions and we're also um built in b5.js functions where we we have to define it but there's we don't need to run that function actually for it we us to trigger um the things inside of the key release function instead the contents inside of that function will run for us whenever that key release event is detected so in here i'm going to say function key released and then i'll open my curly bracket i'm going to close my curly bracket after all of these steps because i'm going to do all of these inside of the key release function so in between those um i've created a function a new function definition for the key released built in b5.js function and inside of the key release function i'll do the same thing for the global variables x y and speed x and speed y and i'll randomize them to a new set of numbers so this means that every time you press then release the key then all of these variables are randomly set again so for step three a i'm going to say x is equal to a random number between a minimum of zero and maximum of width similar thing for the wire y global variable i'll set it to a random number between zero and height i think it also might help to to um bring up that the key release function is indiscriminate of what key you're pressing exactly yeah um but i guess a little bit more adding on to that i think what morgan is trying to say is that there are different types of keys on your keyboard right there are like normal i don't want to say normal keys but there are keys that have a visual impact let's say to the things that you're typing so all of these things that i'm you know typing right now all the letter keys all the number keys but there are also other keys on your keyboard like the delete button the space button okay space has some space does have a visual characteristic but um arrow keys and return keys and shift keys all that kind of stuff so there are what's called special keys right and then the thing that the key release function will do is that it doesn't care whatever the key that you pressed on your keyboard whether it's a letter key or a number key or a special key it will run it whenever a particular key is released um okay so going back in here i'm going to randomly assign a random number between 3 and 3 for the speed x global variable and same thing for the speed y global variable i'll say speed y is now equal to a num random number between 3 and 3. and so basically we've i think we've more or less uh we're more or less done right with setting up um for the global variable values and now we're ready to start actually drawing some things but um by triggering well actually we're not going to blindly draw them we're going to trigger them um inside of our draw function and we're going to first detect if a key is pressed while the sketch is running and then check what sort of key is pressed i'm leaving this a little bit vague because we're going to explain it in a bit but it is going to be a little bit vague as well on the way that we decide which function to run um but um yeah okay let's leave it at that but basically what we're gonna do is we're gonna check if the key is pressed inside of our draw loop and run um one function over the other depending on what type of key what key is pressed so in here it says okay step four is going to be about mapping key uh inputs to various shape drawing functions and step 4a tells me that i have to create an if statement to check if the key is pressed is true and key is not equal to spacebar so at this point i think we should go back in here yeah it's probably a good idea yeah and under this event under the keyboard section there is what's called key is pressed which is something that is mentioned inside of the step foray it says check if key is pressed is true so then this probably means that i have to use this variable which is a key case press is a builtin defined address variable that returns a boolean value depending on whether key is pressed or not so for those of you who are not familiar with boolean value it basically means that it's a binary value you can it can either have a true as a value for the variable or false as a value for the variable so if a key any key on your keyboard when you're running this p5.js sketch is pressed the key is pressed variable will return true if there's no keys being pressed at that moment in time this variable is going to return false so there's a little bit of an example oops in here which is actually okay i should not press the space so if i'm pressing an a key on my keyboard and you can see that um while my while i'm pressing holding down my a key on my keyboard um the fill color is black and if i lift it up the fill color is white so and this is being used inside of an if statement and it checks what the value of this key is breast variable is and we're going to be doing something very very similar to that but before we go on from that i also want to check the documentation for the key variable so here it says key it's also a p5.js builtin variable but it contains the value of the most recent key on the keyboard that is typed so what it means is that the key value and as you can see you can actually see all the keys that i'm pressing which is how convenient so i'm pressing if i press the q keyboard it will draw in text inside a drop function it will show me what key that i've pressed inside of using the text um shape function and also if i press w then it will show that and so on and if i press the number keys it will do that too but if i press let's say the delete key oh it it shows me a longer yeah it shows you the the actual key code it the name for that particular key which i think what is this back back backspace bix backspace yeah and let's say if i do oops it will right tab all of that tab in there for you so this is another thing that we're going to be using um actually is it no we're going to be using a key but we're also going to be using key codes soon so that's why i got a little confused using oh yeah yeah but yeah basically this is what we're going to use and why by the key inside of this on line 20 the first step for a in order for us to detect whether the key is not equal to space bar to you and to detect to do that detection we're going to be using the key builtin p5.js variable so let's go ahead and do that so first i'm going to create an if statement and an if statement will contain the condition inside of the brackets or the parentheses and the curly brackets are going to be containing all the blocks inside of the if statement for it to run when the if statement condition is true i am going to close the curly bracket at the very end here so that we can contain all of the instructions inside of the if statement so inside of the if statement for the condition we're going to write if key is pressed p5.js built in variable is is is equal to true with three equation marks uh equal signs is true and and you can combine um you know conditions with two amp percents so that and keyword here is replaced by these two ampersands in here if key is what are we going to do you can detect if the key is a spacebar or not by putting the space in between the quotation marks so what the key returns the key b5.js builtin variable returns as you saw a little bit here it returns you the actual character of the key that you're pressing as a string so the spacebar you can't see it here because it doesn't show you that blank space but what the spacebar um character if you press the space character bar character returns is the blank space so if we um check whether the key is actually if we do this right if we do if key is equal to spacebar then it's going to check if the keyboard the key is the base bar prep um spacebar character is pressed so i know this we're kind of deviating from this step but i do want to show you that this works by maybe putting in a log statement in here and it would only work if it was the spacebar exactly exactly so now this um console log statement will only run if a key is pressed and if that press key is the spacebar now console.log spacebar is pressed so once we have that and then we run that so every time i press that space bar it will say spacebar is pressed and then when it's not pressed it sort of stopped i don't know if you can see this okay let's make that a little bigger and then it says spacebar is pressed for a couple of times okay maybe this is a really good question to talk about this but i only press my spacebar once but this apparently has printed five times there's a reason for that i wonder if um anyone who are watching can figure this out to figure out why this is pressing on the more times maybe we'll maybe we'll actually save that as a mystery for people to figure out while we go towards the um next steps and then we'll come back to this because it will be relevant when we you know run any of these other code that we're about to put in but we'll leave it there and then maybe give people some time to answer that so moving on from that inside the if statement our step 4b is saying create another if statement to check if the key code is divided into 5 divided by 5 is equal to 0. so again there's a number of things that we need to um unpack for from that um instruction so i'm going to go back to the reference page in here and i see that key code the thing that i saw inside the instruction for step 4b is actually listed under the keyboard section of the p5.js reference i'm going to go ahead and click on that and then i see that um keycode variable is a builtin b5.js variable that it detects special keys such as backspace delete enter return tab escape and so on but you can also use keycode to return the value of your ascii code of your keyboard so okay what is ascii code this is kind of like you know going and following one tail after another that's programming though yeah that is titan programming ascii code so i'm gonna google what ascii code is and it's telling me okay something about a table and then okay let's go to the wikipedia article actually and it's basically saying that it's a character in golding blah blah blah blah okay great so it has something to do with encoding the keys on your keyboard and if i go to images you get all of these what's called ascii tables and if i click on one of them maybe not that one okay i want something with a background so that we can see more clearly and also has not just hexadecimal i'm being very picky okay maybe this one will do so here if you take a look at what's called an ascii table it will tell us that there is um some sort of a way of you know matching the keys on our keyboard so like here we've got this character that's like the capital a's to z and we've also got small um small what is it called small character a to z lower case lowercase a through z um you know big big letter small letter that's why i got confused and then you've got what's called there's there's a code for hexadecimal value and also decimal value so all of these keys on your keyboard that they visually will give you on like a text input or like a google doc or what have you um if you press the key a on your keyboard and if it's not you know cat block caps locked then it will give you a small a lowercase a but really what it is doing behind the scenes is that it's saying oh okay display the character 97 on this text editor or text input box and so we're going to be using that to basically um divide all the possible keys on your keyboard into five categories so we're going to use the um ascii code that we can get using the key code p5.js builtin variable and say um because the reason why we're dividing into five categories is because if you go into the drawshapes.js file you will notice that okay we've got parametric lines function we've got bouncing elims function we've got from the direct function got the start function and the flower function we have five different kinds of visualization functions that are built in for you that i created for you so basically what we're going to do is for all the as the keys on your keyboard that is divisible by 5 and has a remainder of 0 we're going to run one function and if it's divided by 5 and n has a remainder of one then we're going to uh run a different kind of function and this is one of the actual more of a general um programming technique i'm using what's called a modulus modulus did i spell that correctly i don't think so i did oh modular operations so this is a general um programming technique to basically um it's a little bit similar to switch cases if you're more familiar with that but what it will do is that it will just um create five buckets i think that's the easiest way of thinking about it is that you create five categories or five buckets and you kind of go in an order of saying okay if it has index zero this bucket then one another bucket then two another bucket and it just goes through in an iterative loop okay not an actual loop but basically it's saying um we're dividing every possible chance into five five categories and we're going to run functions based on the remainder of what we get and so that means that um if let's say we're doing you have only three options then you can do a modulus of three meaning that you can put in you're creating three buckets and in which all of the possible scenarios are going to fall into any of those three i think it will make a little more sense when we actually start programming it so what we're going to do for step 4b it says okay created another if statement so let me actually go ahead and create another if and my closing curly bracket is going to come after here because i know that all of the instructions are going to have to be contained in here for that this particular if statement and inside of the if statement for the condition i'm going to use the key code built in b5.js variable and then i'm going to divide it by 5 5 but instead of using the divide slash i'm going to use the modulus key so if i do modulus which is the percent sign and divide and do modulus of 5 what this will return is that whatever value of key code it's going to divide it by 5 and then give me the remainder so if i were to let's say divide 11 11 and modulus 5 what this will return me is um 5's goes into 11 twice and it has a remainder of 1. so the whole thing all of this 11 modulus of 5 was going to return me 1. and if this were to be let's say 13 then it's going to give me a remainder of 3 and so on so whatever the value of key code there is a limited number of possibility of remainders that you can get when you divide a number by 5 and there will be remainder of zero one two three and four so there we've created a weight that we can categorize this spot whatever this value might be into five separate categories and i'm going to run this particular if statement only if the remainder is zero because that's what the instruction says so to create another if statement to check if the key code is divided by five is equal to zero so this is just our bucket number one or bucket number zero depending on how you want to count that um and inside of this if statement for step four is c we're going to call the para pair careful with the spelling parametric lines yeah function which is already created for us inside of the drawshapes.js function so there's this the first function that is listed in here that does something and then kind of if you loosely see that it's drawing a line and doing something with speed and xy locations okay let's see what that is about inside i need to change the uh the key in the main if statement first it's uh still checking if it equals thank you so i'm gonna fix that and follow the instructions and make sure that we only run this big the the bigger the outer if statement only if the key is pressed and it's not the space bar so for everything else that's not the space bar if you press any key and if the keys key code is divisible by five and returns zero for the remainder there's a lot of ifs in there but then if all of those conditions are met then it's going to draw the parametric lines function and there's a key that is um that you can try oh using to run it it says okay try pressing the e key because why let's go back to the ascii table and the a key has okay 27 97 so i i think it's going off the decimal of the the uh uh so i think it's going after that the it doesn't matter if you press the lower okay key code has a key code is weird i remember um in the documentation that it's indiscriminate in some way time like some situations yeah so key code actually can't tell whether you are pressing the key code not not the your keyboard but the key code e5.js built in variable it doesn't care or doesn't it doesn't know if you're pressing a lowercase or uppercase character so um if you're pressing even if your your caps lock is off on your keyboard it's always going to think that if you press the a key you've entered in the uppercase character so that you will have to match it with this decimal number which oops actually this is better so i can zoom in though um the decimal number for the a key the capital a key is 65 and 65 is divisible by five and has a remainder of zero so if we go back in here and then run the sketch and press the a key this is what okay let me press it a little bit more this is what the parametric lines visualization inside of draw uh shapes.js looks like and so personal favorite one yeah so i'm actually holding down this a key and then if i let go the animation stops and then if i press again it picks up in a new location so that whole pic unlike generating a new location is actually happening because whenever we release that key we are randomly setting x y speed x and speed y variables again so that's why you get you know whole new colors and a whole new uh what colors are actually happening for different reasons but you we get new lines every time we press and release the keyword um maybe this is now now a good time to answer why we were getting this space bar is pressed a number of times um printed to the console um not anymore because we're not checking if the keyboard is uh pressed sorry we have um zoe in the chat saying that it's giving um strong windows 95 screen share revised which which it totally does but to answer that question that we threw earlier on about why that print statement was happening over and over again and also to um tell you guys why if i'm holding down the a key we keep getting this um animation of the lines moving around is because this is inside the draw loop and even though we're using the if statement and we're saying if the key is pressed is true but this is happening in a loop which means that for that number of it's not just one frame that your key might be pressed it could be over a number of frames in cont in number of continuous frames that uh for that duration of frames your key is pressed so that's why while my key is even though we're using an if statement it's kind of like easier to think about in the way that while your key is pressed because it's being looped the check is being looped um you're going to be continuously drawing this parametric line visualization did i say that right yeah i think that's okay yeah perfect okay cool so then we can move on from that and then complete our step for d okay and it says create another if statement to check if key code divided by five is equal to 1. so now we are moving on to the next category right of key code so outside in here we'll say if key code modulus of 5 is equal equal to 1 so now this will be another set of keys right another set of keys that have s key code and is divisible uh if i if we divide that by five it has a remainder of one so there'll be like you know numbers like trying to calculate this in my head 66 71 76 and that kind of those kind of numbers some when all of those numbers are triggered um air pressed then we're going to trigger whatever function that we're going to put in here so let's actually go and take a look it says step 4 is to call the bouncing ellipse function okay let's go ahead and call that function bouncing ellipse and inside of the function we have to pass in an argument that is a random number between 1 and 150 there are multiple ways of you can do this right you can create a temporary local not temporary it's just a local variable inside of the if statement and say let random number and then can say random minus 150 or you can put this random directly inside of our function as well so we could have written just random minus 150 in here and then that would have also worked either way works let me just comment that out and then put it directly inside put the random function directly inside in here but then now if we go ahead and press play and now i'm going to try pressing the g key because let's go ahead and take a look at in there too g key has a ascii code of 71. so if we divide 71 by 5 it is it has a remainder of 1. so now let's go ahead and press that g and now we've got these bouncing ball things that is creating traces behind it as well and it bounces around i feel like this also has a bit of a you know window screen saver vibe to it as well but it's a bit more pastely um so then okay now we we're generating this the animation continues while that g key is being pressed and it stops when the key is no longer being pressed we can still put that parametric lines animation on top of it right if we press another key that it has a remainder of zero when it's divided by five so if i press a key we've got this parametry lines animation being generated if i press g again we've got that bouncing ball animation happening again so we've mapped basically two out of the five categories that we have prepared i'm going to move in a little bit faster so that we can get all of these visualizations done within time and so okay for the next one we're gonna check if key code divided by five has a remainder of two and so when that is the case um let me move this after here then we're going to um call this forward function which doesn't take in any arguments so i'm going to write flower with no argument inside and if we run that now if i press the r key we've got this like flowery look loosely flowery visualization that's happening around different um parts of the um canvas and we can still have our bouncing ball and our parents lollipops oh yeah just like they kind of do they're kind of like a spinning or like a if you were to record a yoyo spinning around in like really slow motion that's i guess kind of a pattern it will take um draw but yeah now we've mapped three different visualization functions in here and moving on to the step five it says now we're not we're done with everything that we want to draw inside the draw function and now we're saying to add another function called keypressed so if we go back to our reference i'm going to close some of these if we go back to the reference page you will see under the keyboard section there is another function called key pressed so if you go ahead and take a look at that what that does is that it is called once every time a key is pressed so that's a little bit of a difference here the main difference between using detecting key presses using the key is pressed variable inside the draw function and using it inside the key pressed function is that if you want to have something run while a key is pressed and held down you will want to do it inside a draw function using the keys pressed function if you only want to trigger something once and not multiple times no matter how long the key is pressed down for then you will want to call that inside of the key pressed p5.js builtin function and we'll make this um it will be a lot more obvious when we actually add more the rest of the categories inside of this key press function so i'm going to go ahead and add another function in here and say key press open and close brackets but i'm going to add the closing brackets outside of it here and then um inside of the function it says okay inside the keypressed function the step for a 5a is to create an if statement to check if a key is not equal to spacebar we did this before in the draw function so the reason why we are leaving out the spacebar key is because we want to actually add a special trigger special event when the key the spacebar key is being triggered so bear with us and there is a reason why we're leaving that key out but then okay so when the keypressed function is being triggered as long as the key press is not a spacebar we're gonna go ahead and then we're going to do another key um check another key code and do a modulus of the key code um variable and if it's divisible it's when you divide it by five and if the remainder is equal to three then this time we're going to call a function called rounded rect so when we get that done and then we um you know run the sketch and i'm pressing the n key and you see that only once the the rounded rectangle is drawn only once when we press the um the n key and no matter how long i'm holding it four it will only draw one around the rectangle which is very different from you know our parametric lines it only stops drawing the parametric lines or stops animating the lines only when my a key is my my i'm no longer pressing the a key but for the rounded rectangle function that is being triggered inside the key pressed function it only draw what draws one instance of that shape function regardless of how long you're holding down the key for okay so then moving on from that um i guess we'll then go ahead and add the rest of the two i think we've got one more yeah we've got one more left so then we'll check the key code um value for if the modulus of five the key code value um and the remainder is equal to four then we'll add our loss visualization function which is the star function and star function takes in three arguments it says so if we will call the star function but inside of it we'll need to give a random number between 30 and 50 for the first two arguments and also give it a random between four and seven for the last or the third argument so let's go ahead and do that and for the first one i'll give it a random number between 30 and 50. same for the second number 30 and 50. and for the third argument i'm going to give it a random number of between 4 and 7. so now let's go ahead and play or run the sketch and i'm going to try pressing the e key i think it is a little bit less visible so maybe for this one i'm going to actually change the um value of the sketch the background color a little bit oops i think the ikky so there we go i think this is a bit more visible at least for the stars so yeah so this only creates one star actually let me do it with less it only creates one star um when when the e key is pressed so if i want a lot of star visualizations i want to keep spamming my e key then i can get a lot of these um joshua just joined and asking uh what language this is this is javascript um but it is a javascript library called p5.js and we're using it to create visualizations for the web um if you are more in if you're interested in knowing more about it we are there's a p5.js course called learn p5.js that is free and you can also um take a look at the documentation of the p5.js library if you go to the p5.js.org website as well it was like a really good like a short brief introduction about what we're doing okay so now that we've got all of these visualization messed up now if i press any key in here uh any key into um into my sketch actually i'm going to bring down the color of the background again because i think this works better when the color of the sketch is a little darker so now if i'm pressing any sort of keys in here and i'm getting all of these visualizations created so you could kind of like you know if you wanted to type a sentence if you wanted to or like type in anything or kind of like you know spam your keyboard and you get this sort of like a generated visualization at the end um and then you can um yeah and it's kind of like generating a whole picture i'd say using uh predefined functions that are inside of the draw.shapes.js file in there for you but okay let's say that now okay we've created this great tool i'm kind of like really into this um generation that i've created in here how do i save this creation that i've created there's multiple ways of saving this you could do a screen capture right you could do if if you have mac b command shift 4 then you could you know select that um area but there is also a p5.js function that you can use which is why i'm talking about saving it there's a function called save canvas right i think this is the function that we use um basically that will let you save whatever that is currently being shown to you on the canvas so in here using the p5 um p5.js function called save canvas we're going to do is that we're going to actually detect if the key code is equal to the return or the space no let's space return the enter key and if that is the case we're going to use the save canvas function to save whatever we have inside of our sketch so in here we're going to say if key code is equally equal to some sort of an ascii code for the return key so that i'm going to go back in here and see oh this one's a little bit difficult to see well i know that it is um 13. so it says in here that um carriage return is normally it's another like a more formalized way of saying the return key or the enter key so basically the um the ascii code for that key that you have on your keyboard key keyboard called return or enter or i think sometimes has that you know the arrow that goes from down and towards the left um that the key ascii keycode for that particular key on your keyboard is 13. so i'm going to check if the keycode of the key that i've pressed is equal to 13 and if that is the case i'm going to use the save canvas function in here and then i'm going to say um save canvas i actually i've i always forget what um argument i need to put in here but basically i need to say the name of the in the image file and then i have to give it the extension of the image that i wanted to be saved as you can generally choose from jpg files and png files so in here i'm going to say if i if you want to just keep it really simple you can say my visual vis i'll say my viz and then i'll give it a jpg file extension so if i go ahead rerun the sketch let me do a little bit of you know typing in here to create different kinds of visualizations i'm going to hold some keys more than others okay i'm happy with this i want to save it if i press the return key i have i don't know if you guys can see this but i've got a file that's called myvis.jpg and it will be saved inside of your downloads for folder most likely but um if i save this again it's going to create my vis of um brackets one and two and so on so if you're okay with that you can um you can go with that or if you want to kind of like automatically generate the um like a number that is attached behind the files then you can do something like i'm going to say my canvas and then i'm going to put a dash in here and if we concatenate it with the frame count variable we've seen this we've used this variable before when we're doing animation um but basically this number is a b5.js builtin variable that increments during the whole duration of your sketch running so we know that this is going to be going to give us a more or less of a unique file name so it's going to do my canvas zero if you like you know save it immediately as soon as your um p5 sketch runs or p5 my canvas dash 264 if that's the number of the frame that you are you've pressed the return key to save whatever you have on your canvases so then let's let's go ahead and then if i do press these things okay cool then i um press return then i get a file that's called mycanvas556.jpg oh i've only saved this um browser but if you click on it it will look the same thing as what you see on the preview window in here so it's actually a neat thing that you can attach like even if you're not creating like a generative art visual visualizer or like a tool that you can use to generate visualizations or anything like that in p5.js it's like a neat thing that you can put inside of any sketch so that you can you have the ability to save whatever they've created inside your canvas i think we're gonna maybe leave out um clearing out the um the canvas in here uh for now before the sake of time but if you go to the solution code which is also linked inside of the youtube video description this is it oh yeah it's just not in the same the file that i want um inside of the key pressed function in here it doesn't have all the messy step instructions in here so it's a little easier to see but there is this else um else statement that clears the canvas and also sets the background color again because when you use the clear function it will color your p5.js canvas into a transparent color i guess um if anyone has any questions that would be a really good time to talk a little bit about them but i think um oh there's a question a followup question from joshua asking if you can use other languages to get the same effect or do something similar i think is what it means what they mean but basically i'd say that if you're interested in doing something like this and you're not familiar with javascript there is also another thing called processing and cassie when she came in when they came in last week um talked a little bit about this but basically p5.js i don't want to say is a spinoff but it was developed uh with inspiration of things that were done for the processing and processing is a base it's a java platform so if you know how to use java and if you're more familiar with that kind of languages like java python c this might be something more for you where you can get a little bit started with creative coding not using javascript and using java and you have to download this application um the processing application and will give you like an ide or development environment where you can do a lot of the things that you can do with p5.js and there's a reference page in here and if you use um processing a little bit you will quickly notice that it's very similar to p5.js cool you have any questions morgan do you have questions i don't i think that was a very very uh thorough walkthrough um again this is available on the learn p5.js course so it's inside today we went through the project that is under the interaction module um so after you go through the lesson on interaction with ijs on mouse and keyboard events the project for the generative art creator is what we went through on not on the kocami platform but on the b5.js web editor and we'll be continuing to use the web editor for our next um next live stream and for the next live stream just to have a just talk about it very briefly we're going to talk about uh we're going to walk through this project called interactive video sculpture that we're going to do using images and videos maybe i can actually just give a really really quick sneak peek at it and this will be the yeah this will be the last thing that we do so yeah we're going to be oh sorry no go ahead no i was just going to say that i know that it says it a little bit in the description here but the same with the interaction one there's a lot of um kind of historical like background to these types of projects that are if people are interested in i really recommend looking up the um the little description tidbits before the project begins yeah it gets more reference for how these like the basically the history of all this stuff like computer graphics or just visuals so this particular one at the general art creator that we went through is very inspired by uh john whitney and vera mullner um so they're very like you know the all the shape functions in the draw sheet sorry the visualization functions the draw shapes.js file are like you know those the visualization styles very inspired from those two pioneers of computer graphics and for um interactive video sculpture that we'll go through next week is very inspired by the korean american artist namjoon p so it's kind of like a digital version of a sculpture that he could have created i'd say he's very inspired by him so yeah so i think um that is it for this week's live stream session but um we are looking forward to seeing you next week to create the interactive video sculpture bye
