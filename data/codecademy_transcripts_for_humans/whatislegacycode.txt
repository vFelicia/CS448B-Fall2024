With timestamps:

00:00 - hey my name is Mike and in this video
00:01 - we're gonna define and break down a very
00:03 - important concept in computer
00:05 - programming which is legacy code now if
00:08 - you've worked on a development team
00:09 - before or you've just been poking around
00:11 - the internet you might have encountered
00:12 - this term legacy code and maybe you're
00:15 - not a hundred percent sure of what it
00:16 - means and you're looking for a more
00:17 - concrete definition that's what I'm here
00:20 - to do we're gonna break down what legacy
00:22 - code actually means we'll take a look at
00:23 - some alternate meanings and how it's
00:26 - used throughout the industry and then
00:27 - finally I'll talk to you about how code
00:29 - becomes legacy code so we can get an
00:32 - idea of what the transformation process
00:34 - is from normal code into legacy code so
00:37 - let's talk about legacy code and the
00:39 - basic definition for legacy code is that
00:41 - it's any code that's maintained by
00:42 - someone other than the original author
00:45 - and this is sort of the traditional
00:46 - definition of legacy code and this is
00:48 - the definition that you're gonna hear
00:50 - most often when you hear people talking
00:52 - about it but over the years this term
00:54 - legacy code has really become one of
00:56 - those buzzwords that everyone in the
00:58 - industry is using and because of that
00:59 - the term legacy code has taken on a lot
01:02 - of other definitions so the first thing
01:04 - I want to do is I want to show you kind
01:06 - of some of the different definitions
01:07 - that legacy code has taken on and one of
01:09 - the best places to find some of the
01:11 - different definitions that are being
01:12 - used is just to look on Stack Overflow
01:14 - so Stack Overflow is a forum where you
01:17 - can ask questions about different
01:19 - programming topics and on here we have
01:21 - the question for what is a legacy code
01:23 - so it says what makes code legacy so
01:26 - legacy code is any code that uses
01:28 - hardware or api's that are no longer
01:30 - supported it can be code where the
01:32 - author is dead or missing code that's no
01:35 - longer supported or manufactured or code
01:38 - that doesn't have support or
01:39 - documentation so you can see there's a
01:41 - lot of these definitions that members of
01:43 - the industry have up voted and so legacy
01:45 - code kind of has all of these different
01:47 - meanings that we're gonna discuss and so
01:49 - with all these definitions how can we
01:51 - sort them out so why don't we take a
01:53 - look and we'll take a look at some of
01:54 - the characteristics of legacy code as
01:56 - exists today in the industry so first
01:59 - things first is our original definition
02:01 - which is it's any code that's maintained
02:03 - by someone other than the original
02:06 - author so maybe the original author
02:07 - doesn't work at the company anymore
02:08 - maybe they stopped working on the
02:10 - project or maybe they just pass it on to
02:12 - another develop
02:13 - but either way once the original author
02:14 - or authors leave that code becomes
02:16 - legacy code it's also code that
02:18 - currently exists in a project but that's
02:21 - set to be replaced so this might be code
02:23 - that has been working for a couple years
02:25 - but now the company is looking to
02:27 - refactor it it could also be code that's
02:30 - written in an outdated language or
02:31 - platform that's no longer supported so
02:34 - you can think of code that's written in
02:36 - an older version of a programming
02:38 - language or maybe code that can only run
02:40 - on an older version of an operating
02:42 - system that will be considered legacy
02:44 - can also be code that doesn't have a
02:46 - suite of tests so if there's no tests
02:49 - written for a codebase and it's
02:51 - extremely difficult to maintain that
02:53 - codebase and to add features to it
02:54 - because you don't know if you're
02:56 - breaking anything in the process and
02:57 - finally it could just be code that's no
02:59 - longer being actively developed so maybe
03:01 - the legacy code is in a code base that
03:04 - just hasn't been touched for years maybe
03:06 - it's owned by a company that still uses
03:08 - it but they just haven't touched it in a
03:10 - while that would be considered legacy
03:12 - now a lot of times when people think of
03:13 - legacy code they get scared and there's
03:16 - some pretty good reasons for that there
03:17 - are some specific things that generally
03:19 - go along with legacy code that are very
03:21 - difficult to deal with so first is that
03:23 - a lot of times legacy code is poorly
03:25 - written messy uses outdated frameworks
03:28 - or api's so it's basically just outdated
03:30 - or it's not written right it's very
03:32 - difficult to add on to it it's very
03:34 - difficult to develop on it it could also
03:36 - be built on an old or outdated version
03:38 - control system I know in my personal
03:40 - experience I was recently working on a
03:42 - project as a JavaScript consultant and
03:44 - they were using an extremely outdated
03:46 - version control system in fact the only
03:48 - way I could access the version control
03:50 - system was by logging into a VPN and
03:52 - then also remoting into a virtual
03:54 - machine it was just a nightmare
03:56 - legacy code could also have difficult
03:57 - build processes and basically what this
03:59 - means is that it could be very difficult
04:00 - to get the legacy code up and running
04:03 - there might be certain environment
04:04 - configurations there might be certain
04:06 - network configurations that need to be
04:08 - set for the code to build or run and if
04:10 - the codes written and outdated
04:12 - frameworks and versions of the language
04:14 - it could be very difficult to debug what
04:16 - the problems are like I secured a lot of
04:18 - times also requires an old version of an
04:20 - operating system so the code might only
04:22 - be compatible with older versions of the
04:24 - operating system that you might
04:26 - not have installed on your computer so a
04:28 - lot of times because it can be kind of
04:30 - scary to work with and because of all
04:32 - those characteristics that I mentioned
04:33 - in the beginning legacy code tends to
04:35 - have an air of mystery about it it's
04:37 - often seen as easier to rewrite it than
04:39 - to dig in and figure out how to modify
04:41 - it personally I always conjure up the
04:43 - image of a box so the legacy code is
04:46 - represented here by this box and there's
04:48 - input into it and there might be output
04:50 - coming out of it you know the legacy
04:52 - code works but you don't want to look
04:54 - inside to figure out why because it's so
04:57 - scary so now let's talk about how
04:58 - something becomes legacy code so how
05:01 - does a project go from what we consider
05:03 - just normal code to legacy code where
05:06 - does that transition take place and one
05:08 - of the main ways that that happens is
05:10 - just through evolution so a lot of times
05:11 - code bases and technology will evolve
05:14 - over time a good example is phones so
05:17 - phones were originally very simple and
05:18 - there probably wasn't a whole lot of
05:20 - code that went into running a phone but
05:23 - as phones evolved we got cell phones and
05:25 - those needed even more code to run and
05:27 - then eventually we got smartphones which
05:29 - needed a ton of code to run and so as
05:31 - phone technology evolved so too did all
05:34 - of the software all the hardware and all
05:36 - the technology that went into them and
05:37 - in that process of evolution a lot of
05:39 - code became legacy code because new code
05:42 - was being written or developers were
05:44 - moving onto different projects and
05:45 - things like that
05:46 - so constantly new operating systems
05:48 - browsers programming language libraries
05:50 - they're all getting released as new
05:53 - technologies develop as new hardware
05:55 - develops and so one to two years into a
05:56 - project unless you're constantly
05:58 - upgrading versions and refactoring
06:00 - things are going to be outdated in your
06:02 - codebase the main takeaway here is that
06:04 - projects move on projects are abandoned
06:07 - they're finished
06:07 - developers move on to bigger and better
06:09 - things not all systems need to
06:11 - constantly evolve and sometimes if you
06:14 - have code that does its job well you can
06:16 - just leave it alone and stop actively
06:17 - developing on it similarly if a senior
06:20 - developer leaves the company or a team
06:21 - moved on to a different project the old
06:23 - software they were working on can become
06:25 - stale and abandoned and turn into legacy
06:28 - code so just to wrap it up a little bit
06:29 - legacy code isn't good or bad I know I
06:32 - talked about how it can be scary and in
06:34 - a lot of cases it can but legacy code as
06:37 - we saw is a term that has a lot
06:39 - definitions and can mean a lot of
06:41 - different things thanks for watching
06:42 - join the conversation by subscribing to
06:44 - this channel or leaving a comment below
06:46 - and if you want to take your skills to
06:47 - the next level start learning at code
06:49 - Academy today

Cleaned transcript:

hey my name is Mike and in this video we're gonna define and break down a very important concept in computer programming which is legacy code now if you've worked on a development team before or you've just been poking around the internet you might have encountered this term legacy code and maybe you're not a hundred percent sure of what it means and you're looking for a more concrete definition that's what I'm here to do we're gonna break down what legacy code actually means we'll take a look at some alternate meanings and how it's used throughout the industry and then finally I'll talk to you about how code becomes legacy code so we can get an idea of what the transformation process is from normal code into legacy code so let's talk about legacy code and the basic definition for legacy code is that it's any code that's maintained by someone other than the original author and this is sort of the traditional definition of legacy code and this is the definition that you're gonna hear most often when you hear people talking about it but over the years this term legacy code has really become one of those buzzwords that everyone in the industry is using and because of that the term legacy code has taken on a lot of other definitions so the first thing I want to do is I want to show you kind of some of the different definitions that legacy code has taken on and one of the best places to find some of the different definitions that are being used is just to look on Stack Overflow so Stack Overflow is a forum where you can ask questions about different programming topics and on here we have the question for what is a legacy code so it says what makes code legacy so legacy code is any code that uses hardware or api's that are no longer supported it can be code where the author is dead or missing code that's no longer supported or manufactured or code that doesn't have support or documentation so you can see there's a lot of these definitions that members of the industry have up voted and so legacy code kind of has all of these different meanings that we're gonna discuss and so with all these definitions how can we sort them out so why don't we take a look and we'll take a look at some of the characteristics of legacy code as exists today in the industry so first things first is our original definition which is it's any code that's maintained by someone other than the original author so maybe the original author doesn't work at the company anymore maybe they stopped working on the project or maybe they just pass it on to another develop but either way once the original author or authors leave that code becomes legacy code it's also code that currently exists in a project but that's set to be replaced so this might be code that has been working for a couple years but now the company is looking to refactor it it could also be code that's written in an outdated language or platform that's no longer supported so you can think of code that's written in an older version of a programming language or maybe code that can only run on an older version of an operating system that will be considered legacy can also be code that doesn't have a suite of tests so if there's no tests written for a codebase and it's extremely difficult to maintain that codebase and to add features to it because you don't know if you're breaking anything in the process and finally it could just be code that's no longer being actively developed so maybe the legacy code is in a code base that just hasn't been touched for years maybe it's owned by a company that still uses it but they just haven't touched it in a while that would be considered legacy now a lot of times when people think of legacy code they get scared and there's some pretty good reasons for that there are some specific things that generally go along with legacy code that are very difficult to deal with so first is that a lot of times legacy code is poorly written messy uses outdated frameworks or api's so it's basically just outdated or it's not written right it's very difficult to add on to it it's very difficult to develop on it it could also be built on an old or outdated version control system I know in my personal experience I was recently working on a project as a JavaScript consultant and they were using an extremely outdated version control system in fact the only way I could access the version control system was by logging into a VPN and then also remoting into a virtual machine it was just a nightmare legacy code could also have difficult build processes and basically what this means is that it could be very difficult to get the legacy code up and running there might be certain environment configurations there might be certain network configurations that need to be set for the code to build or run and if the codes written and outdated frameworks and versions of the language it could be very difficult to debug what the problems are like I secured a lot of times also requires an old version of an operating system so the code might only be compatible with older versions of the operating system that you might not have installed on your computer so a lot of times because it can be kind of scary to work with and because of all those characteristics that I mentioned in the beginning legacy code tends to have an air of mystery about it it's often seen as easier to rewrite it than to dig in and figure out how to modify it personally I always conjure up the image of a box so the legacy code is represented here by this box and there's input into it and there might be output coming out of it you know the legacy code works but you don't want to look inside to figure out why because it's so scary so now let's talk about how something becomes legacy code so how does a project go from what we consider just normal code to legacy code where does that transition take place and one of the main ways that that happens is just through evolution so a lot of times code bases and technology will evolve over time a good example is phones so phones were originally very simple and there probably wasn't a whole lot of code that went into running a phone but as phones evolved we got cell phones and those needed even more code to run and then eventually we got smartphones which needed a ton of code to run and so as phone technology evolved so too did all of the software all the hardware and all the technology that went into them and in that process of evolution a lot of code became legacy code because new code was being written or developers were moving onto different projects and things like that so constantly new operating systems browsers programming language libraries they're all getting released as new technologies develop as new hardware develops and so one to two years into a project unless you're constantly upgrading versions and refactoring things are going to be outdated in your codebase the main takeaway here is that projects move on projects are abandoned they're finished developers move on to bigger and better things not all systems need to constantly evolve and sometimes if you have code that does its job well you can just leave it alone and stop actively developing on it similarly if a senior developer leaves the company or a team moved on to a different project the old software they were working on can become stale and abandoned and turn into legacy code so just to wrap it up a little bit legacy code isn't good or bad I know I talked about how it can be scary and in a lot of cases it can but legacy code as we saw is a term that has a lot definitions and can mean a lot of different things thanks for watching join the conversation by subscribing to this channel or leaving a comment below and if you want to take your skills to the next level start learning at code Academy today
